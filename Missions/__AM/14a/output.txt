// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20039 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 19935 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20055 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 24829 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 24829 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 29669 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 29669 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 29669 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 29669 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 24829 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 24829 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 24829 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 24829 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 24829 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 24829 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 24829 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 24829 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 24829 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 24829 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 24829 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 24829 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 24829 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 24829 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 24829 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 29669 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_INT 89
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: IN
3775: PUSH
3776: LD_EXP 3
3780: PPUSH
3781: CALL_OW 310
3785: PPUSH
3786: CALL_OW 264
3790: PUSH
3791: LD_INT 51
3793: PUSH
3794: LD_INT 12
3796: PUSH
3797: LD_INT 89
3799: PUSH
3800: LD_INT 32
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: IN
3809: OR
3810: AND
3811: IFFALSE 4021
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_EXP 2
3830: PPUSH
3831: CALL_OW 310
3835: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 310
3850: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3851: LD_VAR 0 2
3855: PPUSH
3856: CALL_OW 265
3860: PUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: CALL_OW 262
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_VAR 0 2
3878: PPUSH
3879: CALL_OW 264
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 271
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 248
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_STRING 14a_JMMVeh
3914: PPUSH
3915: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: CALL_OW 265
3928: PUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 262
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 264
3951: PUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 271
3961: PUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 248
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_STRING 14a_BurlakVeh
3982: PPUSH
3983: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3987: LD_EXP 2
3991: PPUSH
3992: LD_STRING 14a_JMM
3994: PPUSH
3995: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3999: LD_EXP 3
4003: PPUSH
4004: LD_STRING 14a_Burlak
4006: PPUSH
4007: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING %_cont
4016: PPUSH
4017: CALL_OW 340
// end ;
4021: PPOPN 3
4023: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4024: LD_INT 22
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 24
4039: PUSH
4040: LD_INT 950
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 69
4059: IFFALSE 4071
4061: GO 4063
4063: DISABLE
// YouLost ( FriendlyFire ) ;
4064: LD_STRING FriendlyFire
4066: PPUSH
4067: CALL_OW 104
4071: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4072: LD_EXP 3
4076: PPUSH
4077: CALL_OW 301
4081: IFFALSE 4093
4083: GO 4085
4085: DISABLE
// YouLost ( Burlak ) ;
4086: LD_STRING Burlak
4088: PPUSH
4089: CALL_OW 104
4093: END
// every 0 0$1 trigger IsDead ( JMM ) do
4094: LD_EXP 2
4098: PPUSH
4099: CALL_OW 301
4103: IFFALSE 4115
4105: GO 4107
4107: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4108: LD_STRING JMM
4110: PPUSH
4111: CALL_OW 104
4115: END
// export globalGameSaveCounter ; every 0 0$1 do
4116: GO 4118
4118: DISABLE
// begin enable ;
4119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4120: LD_STRING updateTimer(
4122: PUSH
4123: LD_OWVAR 1
4127: STR
4128: PUSH
4129: LD_STRING );
4131: STR
4132: PPUSH
4133: CALL_OW 559
// end ;
4137: END
// every 0 0$1 do
4138: GO 4140
4140: DISABLE
// begin globalGameSaveCounter := 0 ;
4141: LD_ADDR_EXP 39
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4149: LD_STRING setGameSaveCounter(0)
4151: PPUSH
4152: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4156: LD_STRING initStreamRollete();
4158: PPUSH
4159: CALL_OW 559
// InitStreamMode ;
4163: CALL 5506 0 0
// DefineStreamItems ( false ) ;
4167: LD_INT 0
4169: PPUSH
4170: CALL 5970 0 1
// end ;
4174: END
// export function SOS_MapStart ( ) ; begin
4175: LD_INT 0
4177: PPUSH
// if streamModeActive then
4178: LD_EXP 40
4182: IFFALSE 4191
// DefineStreamItems ( true ) ;
4184: LD_INT 1
4186: PPUSH
4187: CALL 5970 0 1
// UpdateLuaVariables ( ) ;
4191: CALL 4208 0 0
// UpdateFactoryWaypoints ( ) ;
4195: CALL 18839 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4199: CALL 19096 0 0
// end ;
4203: LD_VAR 0 1
4207: RET
// function UpdateLuaVariables ( ) ; begin
4208: LD_INT 0
4210: PPUSH
// if globalGameSaveCounter then
4211: LD_EXP 39
4215: IFFALSE 4249
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4217: LD_ADDR_EXP 39
4221: PUSH
4222: LD_EXP 39
4226: PPUSH
4227: CALL 63881 0 1
4231: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4232: LD_STRING setGameSaveCounter(
4234: PUSH
4235: LD_EXP 39
4239: STR
4240: PUSH
4241: LD_STRING )
4243: STR
4244: PPUSH
4245: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4249: LD_STRING setGameDifficulty(
4251: PUSH
4252: LD_OWVAR 67
4256: STR
4257: PUSH
4258: LD_STRING )
4260: STR
4261: PPUSH
4262: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4266: LD_STRING displayDifficulty(
4268: PUSH
4269: LD_OWVAR 67
4273: STR
4274: PUSH
4275: LD_STRING )
4277: STR
4278: PPUSH
4279: CALL_OW 559
// end ;
4283: LD_VAR 0 1
4287: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4288: LD_INT 0
4290: PPUSH
// if p2 = stream_mode then
4291: LD_VAR 0 2
4295: PUSH
4296: LD_INT 100
4298: EQUAL
4299: IFFALSE 5302
// begin if not StreamModeActive then
4301: LD_EXP 40
4305: NOT
4306: IFFALSE 4316
// StreamModeActive := true ;
4308: LD_ADDR_EXP 40
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// if p3 = 0 then
4316: LD_VAR 0 3
4320: PUSH
4321: LD_INT 0
4323: EQUAL
4324: IFFALSE 4330
// InitStreamMode ;
4326: CALL 5506 0 0
// if p3 = 1 then
4330: LD_VAR 0 3
4334: PUSH
4335: LD_INT 1
4337: EQUAL
4338: IFFALSE 4348
// sRocket := true ;
4340: LD_ADDR_EXP 45
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// if p3 = 2 then
4348: LD_VAR 0 3
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: IFFALSE 4366
// sSpeed := true ;
4358: LD_ADDR_EXP 44
4362: PUSH
4363: LD_INT 1
4365: ST_TO_ADDR
// if p3 = 3 then
4366: LD_VAR 0 3
4370: PUSH
4371: LD_INT 3
4373: EQUAL
4374: IFFALSE 4384
// sEngine := true ;
4376: LD_ADDR_EXP 46
4380: PUSH
4381: LD_INT 1
4383: ST_TO_ADDR
// if p3 = 4 then
4384: LD_VAR 0 3
4388: PUSH
4389: LD_INT 4
4391: EQUAL
4392: IFFALSE 4402
// sSpec := true ;
4394: LD_ADDR_EXP 43
4398: PUSH
4399: LD_INT 1
4401: ST_TO_ADDR
// if p3 = 5 then
4402: LD_VAR 0 3
4406: PUSH
4407: LD_INT 5
4409: EQUAL
4410: IFFALSE 4420
// sLevel := true ;
4412: LD_ADDR_EXP 47
4416: PUSH
4417: LD_INT 1
4419: ST_TO_ADDR
// if p3 = 6 then
4420: LD_VAR 0 3
4424: PUSH
4425: LD_INT 6
4427: EQUAL
4428: IFFALSE 4438
// sArmoury := true ;
4430: LD_ADDR_EXP 48
4434: PUSH
4435: LD_INT 1
4437: ST_TO_ADDR
// if p3 = 7 then
4438: LD_VAR 0 3
4442: PUSH
4443: LD_INT 7
4445: EQUAL
4446: IFFALSE 4456
// sRadar := true ;
4448: LD_ADDR_EXP 49
4452: PUSH
4453: LD_INT 1
4455: ST_TO_ADDR
// if p3 = 8 then
4456: LD_VAR 0 3
4460: PUSH
4461: LD_INT 8
4463: EQUAL
4464: IFFALSE 4474
// sBunker := true ;
4466: LD_ADDR_EXP 50
4470: PUSH
4471: LD_INT 1
4473: ST_TO_ADDR
// if p3 = 9 then
4474: LD_VAR 0 3
4478: PUSH
4479: LD_INT 9
4481: EQUAL
4482: IFFALSE 4492
// sHack := true ;
4484: LD_ADDR_EXP 51
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// if p3 = 10 then
4492: LD_VAR 0 3
4496: PUSH
4497: LD_INT 10
4499: EQUAL
4500: IFFALSE 4510
// sFire := true ;
4502: LD_ADDR_EXP 52
4506: PUSH
4507: LD_INT 1
4509: ST_TO_ADDR
// if p3 = 11 then
4510: LD_VAR 0 3
4514: PUSH
4515: LD_INT 11
4517: EQUAL
4518: IFFALSE 4528
// sRefresh := true ;
4520: LD_ADDR_EXP 53
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// if p3 = 12 then
4528: LD_VAR 0 3
4532: PUSH
4533: LD_INT 12
4535: EQUAL
4536: IFFALSE 4546
// sExp := true ;
4538: LD_ADDR_EXP 54
4542: PUSH
4543: LD_INT 1
4545: ST_TO_ADDR
// if p3 = 13 then
4546: LD_VAR 0 3
4550: PUSH
4551: LD_INT 13
4553: EQUAL
4554: IFFALSE 4564
// sDepot := true ;
4556: LD_ADDR_EXP 55
4560: PUSH
4561: LD_INT 1
4563: ST_TO_ADDR
// if p3 = 14 then
4564: LD_VAR 0 3
4568: PUSH
4569: LD_INT 14
4571: EQUAL
4572: IFFALSE 4582
// sFlag := true ;
4574: LD_ADDR_EXP 56
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
// if p3 = 15 then
4582: LD_VAR 0 3
4586: PUSH
4587: LD_INT 15
4589: EQUAL
4590: IFFALSE 4600
// sKamikadze := true ;
4592: LD_ADDR_EXP 64
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if p3 = 16 then
4600: LD_VAR 0 3
4604: PUSH
4605: LD_INT 16
4607: EQUAL
4608: IFFALSE 4618
// sTroll := true ;
4610: LD_ADDR_EXP 65
4614: PUSH
4615: LD_INT 1
4617: ST_TO_ADDR
// if p3 = 17 then
4618: LD_VAR 0 3
4622: PUSH
4623: LD_INT 17
4625: EQUAL
4626: IFFALSE 4636
// sSlow := true ;
4628: LD_ADDR_EXP 66
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// if p3 = 18 then
4636: LD_VAR 0 3
4640: PUSH
4641: LD_INT 18
4643: EQUAL
4644: IFFALSE 4654
// sLack := true ;
4646: LD_ADDR_EXP 67
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// if p3 = 19 then
4654: LD_VAR 0 3
4658: PUSH
4659: LD_INT 19
4661: EQUAL
4662: IFFALSE 4672
// sTank := true ;
4664: LD_ADDR_EXP 69
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if p3 = 20 then
4672: LD_VAR 0 3
4676: PUSH
4677: LD_INT 20
4679: EQUAL
4680: IFFALSE 4690
// sRemote := true ;
4682: LD_ADDR_EXP 70
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// if p3 = 21 then
4690: LD_VAR 0 3
4694: PUSH
4695: LD_INT 21
4697: EQUAL
4698: IFFALSE 4708
// sPowell := true ;
4700: LD_ADDR_EXP 71
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// if p3 = 22 then
4708: LD_VAR 0 3
4712: PUSH
4713: LD_INT 22
4715: EQUAL
4716: IFFALSE 4726
// sTeleport := true ;
4718: LD_ADDR_EXP 74
4722: PUSH
4723: LD_INT 1
4725: ST_TO_ADDR
// if p3 = 23 then
4726: LD_VAR 0 3
4730: PUSH
4731: LD_INT 23
4733: EQUAL
4734: IFFALSE 4744
// sOilTower := true ;
4736: LD_ADDR_EXP 76
4740: PUSH
4741: LD_INT 1
4743: ST_TO_ADDR
// if p3 = 24 then
4744: LD_VAR 0 3
4748: PUSH
4749: LD_INT 24
4751: EQUAL
4752: IFFALSE 4762
// sShovel := true ;
4754: LD_ADDR_EXP 77
4758: PUSH
4759: LD_INT 1
4761: ST_TO_ADDR
// if p3 = 25 then
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 25
4769: EQUAL
4770: IFFALSE 4780
// sSheik := true ;
4772: LD_ADDR_EXP 78
4776: PUSH
4777: LD_INT 1
4779: ST_TO_ADDR
// if p3 = 26 then
4780: LD_VAR 0 3
4784: PUSH
4785: LD_INT 26
4787: EQUAL
4788: IFFALSE 4798
// sEarthquake := true ;
4790: LD_ADDR_EXP 80
4794: PUSH
4795: LD_INT 1
4797: ST_TO_ADDR
// if p3 = 27 then
4798: LD_VAR 0 3
4802: PUSH
4803: LD_INT 27
4805: EQUAL
4806: IFFALSE 4816
// sAI := true ;
4808: LD_ADDR_EXP 81
4812: PUSH
4813: LD_INT 1
4815: ST_TO_ADDR
// if p3 = 28 then
4816: LD_VAR 0 3
4820: PUSH
4821: LD_INT 28
4823: EQUAL
4824: IFFALSE 4834
// sCargo := true ;
4826: LD_ADDR_EXP 84
4830: PUSH
4831: LD_INT 1
4833: ST_TO_ADDR
// if p3 = 29 then
4834: LD_VAR 0 3
4838: PUSH
4839: LD_INT 29
4841: EQUAL
4842: IFFALSE 4852
// sDLaser := true ;
4844: LD_ADDR_EXP 85
4848: PUSH
4849: LD_INT 1
4851: ST_TO_ADDR
// if p3 = 30 then
4852: LD_VAR 0 3
4856: PUSH
4857: LD_INT 30
4859: EQUAL
4860: IFFALSE 4870
// sExchange := true ;
4862: LD_ADDR_EXP 86
4866: PUSH
4867: LD_INT 1
4869: ST_TO_ADDR
// if p3 = 31 then
4870: LD_VAR 0 3
4874: PUSH
4875: LD_INT 31
4877: EQUAL
4878: IFFALSE 4888
// sFac := true ;
4880: LD_ADDR_EXP 87
4884: PUSH
4885: LD_INT 1
4887: ST_TO_ADDR
// if p3 = 32 then
4888: LD_VAR 0 3
4892: PUSH
4893: LD_INT 32
4895: EQUAL
4896: IFFALSE 4906
// sPower := true ;
4898: LD_ADDR_EXP 88
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// if p3 = 33 then
4906: LD_VAR 0 3
4910: PUSH
4911: LD_INT 33
4913: EQUAL
4914: IFFALSE 4924
// sRandom := true ;
4916: LD_ADDR_EXP 89
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// if p3 = 34 then
4924: LD_VAR 0 3
4928: PUSH
4929: LD_INT 34
4931: EQUAL
4932: IFFALSE 4942
// sShield := true ;
4934: LD_ADDR_EXP 90
4938: PUSH
4939: LD_INT 1
4941: ST_TO_ADDR
// if p3 = 35 then
4942: LD_VAR 0 3
4946: PUSH
4947: LD_INT 35
4949: EQUAL
4950: IFFALSE 4960
// sTime := true ;
4952: LD_ADDR_EXP 91
4956: PUSH
4957: LD_INT 1
4959: ST_TO_ADDR
// if p3 = 36 then
4960: LD_VAR 0 3
4964: PUSH
4965: LD_INT 36
4967: EQUAL
4968: IFFALSE 4978
// sTools := true ;
4970: LD_ADDR_EXP 92
4974: PUSH
4975: LD_INT 1
4977: ST_TO_ADDR
// if p3 = 101 then
4978: LD_VAR 0 3
4982: PUSH
4983: LD_INT 101
4985: EQUAL
4986: IFFALSE 4996
// sSold := true ;
4988: LD_ADDR_EXP 57
4992: PUSH
4993: LD_INT 1
4995: ST_TO_ADDR
// if p3 = 102 then
4996: LD_VAR 0 3
5000: PUSH
5001: LD_INT 102
5003: EQUAL
5004: IFFALSE 5014
// sDiff := true ;
5006: LD_ADDR_EXP 58
5010: PUSH
5011: LD_INT 1
5013: ST_TO_ADDR
// if p3 = 103 then
5014: LD_VAR 0 3
5018: PUSH
5019: LD_INT 103
5021: EQUAL
5022: IFFALSE 5032
// sFog := true ;
5024: LD_ADDR_EXP 61
5028: PUSH
5029: LD_INT 1
5031: ST_TO_ADDR
// if p3 = 104 then
5032: LD_VAR 0 3
5036: PUSH
5037: LD_INT 104
5039: EQUAL
5040: IFFALSE 5050
// sReset := true ;
5042: LD_ADDR_EXP 62
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// if p3 = 105 then
5050: LD_VAR 0 3
5054: PUSH
5055: LD_INT 105
5057: EQUAL
5058: IFFALSE 5068
// sSun := true ;
5060: LD_ADDR_EXP 63
5064: PUSH
5065: LD_INT 1
5067: ST_TO_ADDR
// if p3 = 106 then
5068: LD_VAR 0 3
5072: PUSH
5073: LD_INT 106
5075: EQUAL
5076: IFFALSE 5086
// sTiger := true ;
5078: LD_ADDR_EXP 59
5082: PUSH
5083: LD_INT 1
5085: ST_TO_ADDR
// if p3 = 107 then
5086: LD_VAR 0 3
5090: PUSH
5091: LD_INT 107
5093: EQUAL
5094: IFFALSE 5104
// sBomb := true ;
5096: LD_ADDR_EXP 60
5100: PUSH
5101: LD_INT 1
5103: ST_TO_ADDR
// if p3 = 108 then
5104: LD_VAR 0 3
5108: PUSH
5109: LD_INT 108
5111: EQUAL
5112: IFFALSE 5122
// sWound := true ;
5114: LD_ADDR_EXP 68
5118: PUSH
5119: LD_INT 1
5121: ST_TO_ADDR
// if p3 = 109 then
5122: LD_VAR 0 3
5126: PUSH
5127: LD_INT 109
5129: EQUAL
5130: IFFALSE 5140
// sBetray := true ;
5132: LD_ADDR_EXP 72
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// if p3 = 110 then
5140: LD_VAR 0 3
5144: PUSH
5145: LD_INT 110
5147: EQUAL
5148: IFFALSE 5158
// sContamin := true ;
5150: LD_ADDR_EXP 73
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// if p3 = 111 then
5158: LD_VAR 0 3
5162: PUSH
5163: LD_INT 111
5165: EQUAL
5166: IFFALSE 5176
// sOil := true ;
5168: LD_ADDR_EXP 75
5172: PUSH
5173: LD_INT 1
5175: ST_TO_ADDR
// if p3 = 112 then
5176: LD_VAR 0 3
5180: PUSH
5181: LD_INT 112
5183: EQUAL
5184: IFFALSE 5194
// sStu := true ;
5186: LD_ADDR_EXP 79
5190: PUSH
5191: LD_INT 1
5193: ST_TO_ADDR
// if p3 = 113 then
5194: LD_VAR 0 3
5198: PUSH
5199: LD_INT 113
5201: EQUAL
5202: IFFALSE 5212
// sBazooka := true ;
5204: LD_ADDR_EXP 82
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// if p3 = 114 then
5212: LD_VAR 0 3
5216: PUSH
5217: LD_INT 114
5219: EQUAL
5220: IFFALSE 5230
// sMortar := true ;
5222: LD_ADDR_EXP 83
5226: PUSH
5227: LD_INT 1
5229: ST_TO_ADDR
// if p3 = 115 then
5230: LD_VAR 0 3
5234: PUSH
5235: LD_INT 115
5237: EQUAL
5238: IFFALSE 5248
// sRanger := true ;
5240: LD_ADDR_EXP 93
5244: PUSH
5245: LD_INT 1
5247: ST_TO_ADDR
// if p3 = 116 then
5248: LD_VAR 0 3
5252: PUSH
5253: LD_INT 116
5255: EQUAL
5256: IFFALSE 5266
// sComputer := true ;
5258: LD_ADDR_EXP 94
5262: PUSH
5263: LD_INT 1
5265: ST_TO_ADDR
// if p3 = 117 then
5266: LD_VAR 0 3
5270: PUSH
5271: LD_INT 117
5273: EQUAL
5274: IFFALSE 5284
// s30 := true ;
5276: LD_ADDR_EXP 95
5280: PUSH
5281: LD_INT 1
5283: ST_TO_ADDR
// if p3 = 118 then
5284: LD_VAR 0 3
5288: PUSH
5289: LD_INT 118
5291: EQUAL
5292: IFFALSE 5302
// s60 := true ;
5294: LD_ADDR_EXP 96
5298: PUSH
5299: LD_INT 1
5301: ST_TO_ADDR
// end ; if p2 = hack_mode then
5302: LD_VAR 0 2
5306: PUSH
5307: LD_INT 101
5309: EQUAL
5310: IFFALSE 5438
// begin case p3 of 1 :
5312: LD_VAR 0 3
5316: PUSH
5317: LD_INT 1
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5325
5323: GO 5332
5325: POP
// hHackUnlimitedResources ; 2 :
5326: CALL 17585 0 0
5330: GO 5438
5332: LD_INT 2
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5340
5338: GO 5347
5340: POP
// hHackSetLevel10 ; 3 :
5341: CALL 17718 0 0
5345: GO 5438
5347: LD_INT 3
5349: DOUBLE
5350: EQUAL
5351: IFTRUE 5355
5353: GO 5362
5355: POP
// hHackSetLevel10YourUnits ; 4 :
5356: CALL 17803 0 0
5360: GO 5438
5362: LD_INT 4
5364: DOUBLE
5365: EQUAL
5366: IFTRUE 5370
5368: GO 5377
5370: POP
// hHackInvincible ; 5 :
5371: CALL 18251 0 0
5375: GO 5438
5377: LD_INT 5
5379: DOUBLE
5380: EQUAL
5381: IFTRUE 5385
5383: GO 5392
5385: POP
// hHackInvisible ; 6 :
5386: CALL 18362 0 0
5390: GO 5438
5392: LD_INT 6
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5407
5400: POP
// hHackChangeYourSide ; 7 :
5401: CALL 18419 0 0
5405: GO 5438
5407: LD_INT 7
5409: DOUBLE
5410: EQUAL
5411: IFTRUE 5415
5413: GO 5422
5415: POP
// hHackChangeUnitSide ; 8 :
5416: CALL 18461 0 0
5420: GO 5438
5422: LD_INT 8
5424: DOUBLE
5425: EQUAL
5426: IFTRUE 5430
5428: GO 5437
5430: POP
// hHackFog ; end ;
5431: CALL 18562 0 0
5435: GO 5438
5437: POP
// end ; if p2 = game_save_mode then
5438: LD_VAR 0 2
5442: PUSH
5443: LD_INT 102
5445: EQUAL
5446: IFFALSE 5501
// begin if p3 = 1 then
5448: LD_VAR 0 3
5452: PUSH
5453: LD_INT 1
5455: EQUAL
5456: IFFALSE 5468
// globalGameSaveCounter := p4 ;
5458: LD_ADDR_EXP 39
5462: PUSH
5463: LD_VAR 0 4
5467: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5468: LD_VAR 0 3
5472: PUSH
5473: LD_INT 2
5475: EQUAL
5476: PUSH
5477: LD_EXP 39
5481: AND
5482: IFFALSE 5501
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5484: LD_STRING setGameSaveCounter(
5486: PUSH
5487: LD_EXP 39
5491: STR
5492: PUSH
5493: LD_STRING )
5495: STR
5496: PPUSH
5497: CALL_OW 559
// end ; end ;
5501: LD_VAR 0 7
5505: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5506: LD_INT 0
5508: PPUSH
// streamModeActive := false ;
5509: LD_ADDR_EXP 40
5513: PUSH
5514: LD_INT 0
5516: ST_TO_ADDR
// normalCounter := 36 ;
5517: LD_ADDR_EXP 41
5521: PUSH
5522: LD_INT 36
5524: ST_TO_ADDR
// hardcoreCounter := 18 ;
5525: LD_ADDR_EXP 42
5529: PUSH
5530: LD_INT 18
5532: ST_TO_ADDR
// sRocket := false ;
5533: LD_ADDR_EXP 45
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// sSpeed := false ;
5541: LD_ADDR_EXP 44
5545: PUSH
5546: LD_INT 0
5548: ST_TO_ADDR
// sEngine := false ;
5549: LD_ADDR_EXP 46
5553: PUSH
5554: LD_INT 0
5556: ST_TO_ADDR
// sSpec := false ;
5557: LD_ADDR_EXP 43
5561: PUSH
5562: LD_INT 0
5564: ST_TO_ADDR
// sLevel := false ;
5565: LD_ADDR_EXP 47
5569: PUSH
5570: LD_INT 0
5572: ST_TO_ADDR
// sArmoury := false ;
5573: LD_ADDR_EXP 48
5577: PUSH
5578: LD_INT 0
5580: ST_TO_ADDR
// sRadar := false ;
5581: LD_ADDR_EXP 49
5585: PUSH
5586: LD_INT 0
5588: ST_TO_ADDR
// sBunker := false ;
5589: LD_ADDR_EXP 50
5593: PUSH
5594: LD_INT 0
5596: ST_TO_ADDR
// sHack := false ;
5597: LD_ADDR_EXP 51
5601: PUSH
5602: LD_INT 0
5604: ST_TO_ADDR
// sFire := false ;
5605: LD_ADDR_EXP 52
5609: PUSH
5610: LD_INT 0
5612: ST_TO_ADDR
// sRefresh := false ;
5613: LD_ADDR_EXP 53
5617: PUSH
5618: LD_INT 0
5620: ST_TO_ADDR
// sExp := false ;
5621: LD_ADDR_EXP 54
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// sDepot := false ;
5629: LD_ADDR_EXP 55
5633: PUSH
5634: LD_INT 0
5636: ST_TO_ADDR
// sFlag := false ;
5637: LD_ADDR_EXP 56
5641: PUSH
5642: LD_INT 0
5644: ST_TO_ADDR
// sKamikadze := false ;
5645: LD_ADDR_EXP 64
5649: PUSH
5650: LD_INT 0
5652: ST_TO_ADDR
// sTroll := false ;
5653: LD_ADDR_EXP 65
5657: PUSH
5658: LD_INT 0
5660: ST_TO_ADDR
// sSlow := false ;
5661: LD_ADDR_EXP 66
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// sLack := false ;
5669: LD_ADDR_EXP 67
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// sTank := false ;
5677: LD_ADDR_EXP 69
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// sRemote := false ;
5685: LD_ADDR_EXP 70
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// sPowell := false ;
5693: LD_ADDR_EXP 71
5697: PUSH
5698: LD_INT 0
5700: ST_TO_ADDR
// sTeleport := false ;
5701: LD_ADDR_EXP 74
5705: PUSH
5706: LD_INT 0
5708: ST_TO_ADDR
// sOilTower := false ;
5709: LD_ADDR_EXP 76
5713: PUSH
5714: LD_INT 0
5716: ST_TO_ADDR
// sShovel := false ;
5717: LD_ADDR_EXP 77
5721: PUSH
5722: LD_INT 0
5724: ST_TO_ADDR
// sSheik := false ;
5725: LD_ADDR_EXP 78
5729: PUSH
5730: LD_INT 0
5732: ST_TO_ADDR
// sEarthquake := false ;
5733: LD_ADDR_EXP 80
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// sAI := false ;
5741: LD_ADDR_EXP 81
5745: PUSH
5746: LD_INT 0
5748: ST_TO_ADDR
// sCargo := false ;
5749: LD_ADDR_EXP 84
5753: PUSH
5754: LD_INT 0
5756: ST_TO_ADDR
// sDLaser := false ;
5757: LD_ADDR_EXP 85
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// sExchange := false ;
5765: LD_ADDR_EXP 86
5769: PUSH
5770: LD_INT 0
5772: ST_TO_ADDR
// sFac := false ;
5773: LD_ADDR_EXP 87
5777: PUSH
5778: LD_INT 0
5780: ST_TO_ADDR
// sPower := false ;
5781: LD_ADDR_EXP 88
5785: PUSH
5786: LD_INT 0
5788: ST_TO_ADDR
// sRandom := false ;
5789: LD_ADDR_EXP 89
5793: PUSH
5794: LD_INT 0
5796: ST_TO_ADDR
// sShield := false ;
5797: LD_ADDR_EXP 90
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// sTime := false ;
5805: LD_ADDR_EXP 91
5809: PUSH
5810: LD_INT 0
5812: ST_TO_ADDR
// sTools := false ;
5813: LD_ADDR_EXP 92
5817: PUSH
5818: LD_INT 0
5820: ST_TO_ADDR
// sSold := false ;
5821: LD_ADDR_EXP 57
5825: PUSH
5826: LD_INT 0
5828: ST_TO_ADDR
// sDiff := false ;
5829: LD_ADDR_EXP 58
5833: PUSH
5834: LD_INT 0
5836: ST_TO_ADDR
// sFog := false ;
5837: LD_ADDR_EXP 61
5841: PUSH
5842: LD_INT 0
5844: ST_TO_ADDR
// sReset := false ;
5845: LD_ADDR_EXP 62
5849: PUSH
5850: LD_INT 0
5852: ST_TO_ADDR
// sSun := false ;
5853: LD_ADDR_EXP 63
5857: PUSH
5858: LD_INT 0
5860: ST_TO_ADDR
// sTiger := false ;
5861: LD_ADDR_EXP 59
5865: PUSH
5866: LD_INT 0
5868: ST_TO_ADDR
// sBomb := false ;
5869: LD_ADDR_EXP 60
5873: PUSH
5874: LD_INT 0
5876: ST_TO_ADDR
// sWound := false ;
5877: LD_ADDR_EXP 68
5881: PUSH
5882: LD_INT 0
5884: ST_TO_ADDR
// sBetray := false ;
5885: LD_ADDR_EXP 72
5889: PUSH
5890: LD_INT 0
5892: ST_TO_ADDR
// sContamin := false ;
5893: LD_ADDR_EXP 73
5897: PUSH
5898: LD_INT 0
5900: ST_TO_ADDR
// sOil := false ;
5901: LD_ADDR_EXP 75
5905: PUSH
5906: LD_INT 0
5908: ST_TO_ADDR
// sStu := false ;
5909: LD_ADDR_EXP 79
5913: PUSH
5914: LD_INT 0
5916: ST_TO_ADDR
// sBazooka := false ;
5917: LD_ADDR_EXP 82
5921: PUSH
5922: LD_INT 0
5924: ST_TO_ADDR
// sMortar := false ;
5925: LD_ADDR_EXP 83
5929: PUSH
5930: LD_INT 0
5932: ST_TO_ADDR
// sRanger := false ;
5933: LD_ADDR_EXP 93
5937: PUSH
5938: LD_INT 0
5940: ST_TO_ADDR
// sComputer := false ;
5941: LD_ADDR_EXP 94
5945: PUSH
5946: LD_INT 0
5948: ST_TO_ADDR
// s30 := false ;
5949: LD_ADDR_EXP 95
5953: PUSH
5954: LD_INT 0
5956: ST_TO_ADDR
// s60 := false ;
5957: LD_ADDR_EXP 96
5961: PUSH
5962: LD_INT 0
5964: ST_TO_ADDR
// end ;
5965: LD_VAR 0 1
5969: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5970: LD_INT 0
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// result := [ ] ;
5979: LD_ADDR_VAR 0 2
5983: PUSH
5984: EMPTY
5985: ST_TO_ADDR
// if campaign_id = 1 then
5986: LD_OWVAR 69
5990: PUSH
5991: LD_INT 1
5993: EQUAL
5994: IFFALSE 9160
// begin case mission_number of 1 :
5996: LD_OWVAR 70
6000: PUSH
6001: LD_INT 1
6003: DOUBLE
6004: EQUAL
6005: IFTRUE 6009
6007: GO 6085
6009: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6010: LD_ADDR_VAR 0 2
6014: PUSH
6015: LD_INT 2
6017: PUSH
6018: LD_INT 4
6020: PUSH
6021: LD_INT 11
6023: PUSH
6024: LD_INT 12
6026: PUSH
6027: LD_INT 15
6029: PUSH
6030: LD_INT 16
6032: PUSH
6033: LD_INT 22
6035: PUSH
6036: LD_INT 23
6038: PUSH
6039: LD_INT 26
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 101
6055: PUSH
6056: LD_INT 102
6058: PUSH
6059: LD_INT 106
6061: PUSH
6062: LD_INT 116
6064: PUSH
6065: LD_INT 117
6067: PUSH
6068: LD_INT 118
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: ST_TO_ADDR
6083: GO 9158
6085: LD_INT 2
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6177
6093: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 2
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: LD_INT 11
6107: PUSH
6108: LD_INT 12
6110: PUSH
6111: LD_INT 15
6113: PUSH
6114: LD_INT 16
6116: PUSH
6117: LD_INT 22
6119: PUSH
6120: LD_INT 23
6122: PUSH
6123: LD_INT 26
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 101
6139: PUSH
6140: LD_INT 102
6142: PUSH
6143: LD_INT 105
6145: PUSH
6146: LD_INT 106
6148: PUSH
6149: LD_INT 108
6151: PUSH
6152: LD_INT 116
6154: PUSH
6155: LD_INT 117
6157: PUSH
6158: LD_INT 118
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: ST_TO_ADDR
6175: GO 9158
6177: LD_INT 3
6179: DOUBLE
6180: EQUAL
6181: IFTRUE 6185
6183: GO 6273
6185: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6186: LD_ADDR_VAR 0 2
6190: PUSH
6191: LD_INT 2
6193: PUSH
6194: LD_INT 4
6196: PUSH
6197: LD_INT 5
6199: PUSH
6200: LD_INT 11
6202: PUSH
6203: LD_INT 12
6205: PUSH
6206: LD_INT 15
6208: PUSH
6209: LD_INT 16
6211: PUSH
6212: LD_INT 22
6214: PUSH
6215: LD_INT 26
6217: PUSH
6218: LD_INT 36
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 101
6235: PUSH
6236: LD_INT 102
6238: PUSH
6239: LD_INT 105
6241: PUSH
6242: LD_INT 106
6244: PUSH
6245: LD_INT 108
6247: PUSH
6248: LD_INT 116
6250: PUSH
6251: LD_INT 117
6253: PUSH
6254: LD_INT 118
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: ST_TO_ADDR
6271: GO 9158
6273: LD_INT 4
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6377
6281: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6282: LD_ADDR_VAR 0 2
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 5
6295: PUSH
6296: LD_INT 8
6298: PUSH
6299: LD_INT 11
6301: PUSH
6302: LD_INT 12
6304: PUSH
6305: LD_INT 15
6307: PUSH
6308: LD_INT 16
6310: PUSH
6311: LD_INT 22
6313: PUSH
6314: LD_INT 23
6316: PUSH
6317: LD_INT 26
6319: PUSH
6320: LD_INT 36
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 101
6339: PUSH
6340: LD_INT 102
6342: PUSH
6343: LD_INT 105
6345: PUSH
6346: LD_INT 106
6348: PUSH
6349: LD_INT 108
6351: PUSH
6352: LD_INT 116
6354: PUSH
6355: LD_INT 117
6357: PUSH
6358: LD_INT 118
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: ST_TO_ADDR
6375: GO 9158
6377: LD_INT 5
6379: DOUBLE
6380: EQUAL
6381: IFTRUE 6385
6383: GO 6497
6385: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: LD_INT 4
6396: PUSH
6397: LD_INT 5
6399: PUSH
6400: LD_INT 6
6402: PUSH
6403: LD_INT 8
6405: PUSH
6406: LD_INT 11
6408: PUSH
6409: LD_INT 12
6411: PUSH
6412: LD_INT 15
6414: PUSH
6415: LD_INT 16
6417: PUSH
6418: LD_INT 22
6420: PUSH
6421: LD_INT 23
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 26
6429: PUSH
6430: LD_INT 36
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 101
6451: PUSH
6452: LD_INT 102
6454: PUSH
6455: LD_INT 105
6457: PUSH
6458: LD_INT 106
6460: PUSH
6461: LD_INT 108
6463: PUSH
6464: LD_INT 109
6466: PUSH
6467: LD_INT 112
6469: PUSH
6470: LD_INT 116
6472: PUSH
6473: LD_INT 117
6475: PUSH
6476: LD_INT 118
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: ST_TO_ADDR
6495: GO 9158
6497: LD_INT 6
6499: DOUBLE
6500: EQUAL
6501: IFTRUE 6505
6503: GO 6637
6505: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6506: LD_ADDR_VAR 0 2
6510: PUSH
6511: LD_INT 2
6513: PUSH
6514: LD_INT 4
6516: PUSH
6517: LD_INT 5
6519: PUSH
6520: LD_INT 6
6522: PUSH
6523: LD_INT 8
6525: PUSH
6526: LD_INT 11
6528: PUSH
6529: LD_INT 12
6531: PUSH
6532: LD_INT 15
6534: PUSH
6535: LD_INT 16
6537: PUSH
6538: LD_INT 20
6540: PUSH
6541: LD_INT 21
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 23
6549: PUSH
6550: LD_INT 25
6552: PUSH
6553: LD_INT 26
6555: PUSH
6556: LD_INT 30
6558: PUSH
6559: LD_INT 31
6561: PUSH
6562: LD_INT 32
6564: PUSH
6565: LD_INT 36
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 101
6591: PUSH
6592: LD_INT 102
6594: PUSH
6595: LD_INT 105
6597: PUSH
6598: LD_INT 106
6600: PUSH
6601: LD_INT 108
6603: PUSH
6604: LD_INT 109
6606: PUSH
6607: LD_INT 112
6609: PUSH
6610: LD_INT 116
6612: PUSH
6613: LD_INT 117
6615: PUSH
6616: LD_INT 118
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: ST_TO_ADDR
6635: GO 9158
6637: LD_INT 7
6639: DOUBLE
6640: EQUAL
6641: IFTRUE 6645
6643: GO 6757
6645: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6646: LD_ADDR_VAR 0 2
6650: PUSH
6651: LD_INT 2
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: LD_INT 5
6659: PUSH
6660: LD_INT 7
6662: PUSH
6663: LD_INT 11
6665: PUSH
6666: LD_INT 12
6668: PUSH
6669: LD_INT 15
6671: PUSH
6672: LD_INT 16
6674: PUSH
6675: LD_INT 20
6677: PUSH
6678: LD_INT 21
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_INT 23
6686: PUSH
6687: LD_INT 25
6689: PUSH
6690: LD_INT 26
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: PUSH
6709: LD_INT 101
6711: PUSH
6712: LD_INT 102
6714: PUSH
6715: LD_INT 103
6717: PUSH
6718: LD_INT 105
6720: PUSH
6721: LD_INT 106
6723: PUSH
6724: LD_INT 108
6726: PUSH
6727: LD_INT 112
6729: PUSH
6730: LD_INT 116
6732: PUSH
6733: LD_INT 117
6735: PUSH
6736: LD_INT 118
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: ST_TO_ADDR
6755: GO 9158
6757: LD_INT 8
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6905
6765: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 4
6776: PUSH
6777: LD_INT 5
6779: PUSH
6780: LD_INT 6
6782: PUSH
6783: LD_INT 7
6785: PUSH
6786: LD_INT 8
6788: PUSH
6789: LD_INT 11
6791: PUSH
6792: LD_INT 12
6794: PUSH
6795: LD_INT 15
6797: PUSH
6798: LD_INT 16
6800: PUSH
6801: LD_INT 20
6803: PUSH
6804: LD_INT 21
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 23
6812: PUSH
6813: LD_INT 25
6815: PUSH
6816: LD_INT 26
6818: PUSH
6819: LD_INT 30
6821: PUSH
6822: LD_INT 31
6824: PUSH
6825: LD_INT 32
6827: PUSH
6828: LD_INT 36
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 101
6855: PUSH
6856: LD_INT 102
6858: PUSH
6859: LD_INT 103
6861: PUSH
6862: LD_INT 105
6864: PUSH
6865: LD_INT 106
6867: PUSH
6868: LD_INT 108
6870: PUSH
6871: LD_INT 109
6873: PUSH
6874: LD_INT 112
6876: PUSH
6877: LD_INT 116
6879: PUSH
6880: LD_INT 117
6882: PUSH
6883: LD_INT 118
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 9158
6905: LD_INT 9
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7061
6913: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6914: LD_ADDR_VAR 0 2
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 4
6924: PUSH
6925: LD_INT 5
6927: PUSH
6928: LD_INT 6
6930: PUSH
6931: LD_INT 7
6933: PUSH
6934: LD_INT 8
6936: PUSH
6937: LD_INT 11
6939: PUSH
6940: LD_INT 12
6942: PUSH
6943: LD_INT 15
6945: PUSH
6946: LD_INT 16
6948: PUSH
6949: LD_INT 20
6951: PUSH
6952: LD_INT 21
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 23
6960: PUSH
6961: LD_INT 25
6963: PUSH
6964: LD_INT 26
6966: PUSH
6967: LD_INT 28
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 31
6975: PUSH
6976: LD_INT 32
6978: PUSH
6979: LD_INT 36
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 101
7007: PUSH
7008: LD_INT 102
7010: PUSH
7011: LD_INT 103
7013: PUSH
7014: LD_INT 105
7016: PUSH
7017: LD_INT 106
7019: PUSH
7020: LD_INT 108
7022: PUSH
7023: LD_INT 109
7025: PUSH
7026: LD_INT 112
7028: PUSH
7029: LD_INT 114
7031: PUSH
7032: LD_INT 116
7034: PUSH
7035: LD_INT 117
7037: PUSH
7038: LD_INT 118
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: ST_TO_ADDR
7059: GO 9158
7061: LD_INT 10
7063: DOUBLE
7064: EQUAL
7065: IFTRUE 7069
7067: GO 7265
7069: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7070: LD_ADDR_VAR 0 2
7074: PUSH
7075: LD_INT 2
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: LD_INT 7
7089: PUSH
7090: LD_INT 8
7092: PUSH
7093: LD_INT 9
7095: PUSH
7096: LD_INT 10
7098: PUSH
7099: LD_INT 11
7101: PUSH
7102: LD_INT 12
7104: PUSH
7105: LD_INT 13
7107: PUSH
7108: LD_INT 14
7110: PUSH
7111: LD_INT 15
7113: PUSH
7114: LD_INT 16
7116: PUSH
7117: LD_INT 17
7119: PUSH
7120: LD_INT 18
7122: PUSH
7123: LD_INT 19
7125: PUSH
7126: LD_INT 20
7128: PUSH
7129: LD_INT 21
7131: PUSH
7132: LD_INT 22
7134: PUSH
7135: LD_INT 23
7137: PUSH
7138: LD_INT 24
7140: PUSH
7141: LD_INT 25
7143: PUSH
7144: LD_INT 26
7146: PUSH
7147: LD_INT 28
7149: PUSH
7150: LD_INT 30
7152: PUSH
7153: LD_INT 31
7155: PUSH
7156: LD_INT 32
7158: PUSH
7159: LD_INT 36
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 101
7195: PUSH
7196: LD_INT 102
7198: PUSH
7199: LD_INT 103
7201: PUSH
7202: LD_INT 104
7204: PUSH
7205: LD_INT 105
7207: PUSH
7208: LD_INT 106
7210: PUSH
7211: LD_INT 107
7213: PUSH
7214: LD_INT 108
7216: PUSH
7217: LD_INT 109
7219: PUSH
7220: LD_INT 110
7222: PUSH
7223: LD_INT 111
7225: PUSH
7226: LD_INT 112
7228: PUSH
7229: LD_INT 114
7231: PUSH
7232: LD_INT 116
7234: PUSH
7235: LD_INT 117
7237: PUSH
7238: LD_INT 118
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: ST_TO_ADDR
7263: GO 9158
7265: LD_INT 11
7267: DOUBLE
7268: EQUAL
7269: IFTRUE 7273
7271: GO 7477
7273: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7274: LD_ADDR_VAR 0 2
7278: PUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 4
7287: PUSH
7288: LD_INT 5
7290: PUSH
7291: LD_INT 6
7293: PUSH
7294: LD_INT 7
7296: PUSH
7297: LD_INT 8
7299: PUSH
7300: LD_INT 9
7302: PUSH
7303: LD_INT 10
7305: PUSH
7306: LD_INT 11
7308: PUSH
7309: LD_INT 12
7311: PUSH
7312: LD_INT 13
7314: PUSH
7315: LD_INT 14
7317: PUSH
7318: LD_INT 15
7320: PUSH
7321: LD_INT 16
7323: PUSH
7324: LD_INT 17
7326: PUSH
7327: LD_INT 18
7329: PUSH
7330: LD_INT 19
7332: PUSH
7333: LD_INT 20
7335: PUSH
7336: LD_INT 21
7338: PUSH
7339: LD_INT 22
7341: PUSH
7342: LD_INT 23
7344: PUSH
7345: LD_INT 24
7347: PUSH
7348: LD_INT 25
7350: PUSH
7351: LD_INT 26
7353: PUSH
7354: LD_INT 28
7356: PUSH
7357: LD_INT 30
7359: PUSH
7360: LD_INT 31
7362: PUSH
7363: LD_INT 32
7365: PUSH
7366: LD_INT 34
7368: PUSH
7369: LD_INT 36
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 101
7407: PUSH
7408: LD_INT 102
7410: PUSH
7411: LD_INT 103
7413: PUSH
7414: LD_INT 104
7416: PUSH
7417: LD_INT 105
7419: PUSH
7420: LD_INT 106
7422: PUSH
7423: LD_INT 107
7425: PUSH
7426: LD_INT 108
7428: PUSH
7429: LD_INT 109
7431: PUSH
7432: LD_INT 110
7434: PUSH
7435: LD_INT 111
7437: PUSH
7438: LD_INT 112
7440: PUSH
7441: LD_INT 114
7443: PUSH
7444: LD_INT 116
7446: PUSH
7447: LD_INT 117
7449: PUSH
7450: LD_INT 118
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: ST_TO_ADDR
7475: GO 9158
7477: LD_INT 12
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7485
7483: GO 7705
7485: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_INT 1
7493: PUSH
7494: LD_INT 2
7496: PUSH
7497: LD_INT 3
7499: PUSH
7500: LD_INT 4
7502: PUSH
7503: LD_INT 5
7505: PUSH
7506: LD_INT 6
7508: PUSH
7509: LD_INT 7
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 9
7517: PUSH
7518: LD_INT 10
7520: PUSH
7521: LD_INT 11
7523: PUSH
7524: LD_INT 12
7526: PUSH
7527: LD_INT 13
7529: PUSH
7530: LD_INT 14
7532: PUSH
7533: LD_INT 15
7535: PUSH
7536: LD_INT 16
7538: PUSH
7539: LD_INT 17
7541: PUSH
7542: LD_INT 18
7544: PUSH
7545: LD_INT 19
7547: PUSH
7548: LD_INT 20
7550: PUSH
7551: LD_INT 21
7553: PUSH
7554: LD_INT 22
7556: PUSH
7557: LD_INT 23
7559: PUSH
7560: LD_INT 24
7562: PUSH
7563: LD_INT 25
7565: PUSH
7566: LD_INT 26
7568: PUSH
7569: LD_INT 27
7571: PUSH
7572: LD_INT 28
7574: PUSH
7575: LD_INT 30
7577: PUSH
7578: LD_INT 31
7580: PUSH
7581: LD_INT 32
7583: PUSH
7584: LD_INT 33
7586: PUSH
7587: LD_INT 34
7589: PUSH
7590: LD_INT 36
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: PUSH
7629: LD_INT 101
7631: PUSH
7632: LD_INT 102
7634: PUSH
7635: LD_INT 103
7637: PUSH
7638: LD_INT 104
7640: PUSH
7641: LD_INT 105
7643: PUSH
7644: LD_INT 106
7646: PUSH
7647: LD_INT 107
7649: PUSH
7650: LD_INT 108
7652: PUSH
7653: LD_INT 109
7655: PUSH
7656: LD_INT 110
7658: PUSH
7659: LD_INT 111
7661: PUSH
7662: LD_INT 112
7664: PUSH
7665: LD_INT 113
7667: PUSH
7668: LD_INT 114
7670: PUSH
7671: LD_INT 116
7673: PUSH
7674: LD_INT 117
7676: PUSH
7677: LD_INT 118
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: ST_TO_ADDR
7703: GO 9158
7705: LD_INT 13
7707: DOUBLE
7708: EQUAL
7709: IFTRUE 7713
7711: GO 7921
7713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7714: LD_ADDR_VAR 0 2
7718: PUSH
7719: LD_INT 1
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: LD_INT 3
7727: PUSH
7728: LD_INT 4
7730: PUSH
7731: LD_INT 5
7733: PUSH
7734: LD_INT 8
7736: PUSH
7737: LD_INT 9
7739: PUSH
7740: LD_INT 10
7742: PUSH
7743: LD_INT 11
7745: PUSH
7746: LD_INT 12
7748: PUSH
7749: LD_INT 14
7751: PUSH
7752: LD_INT 15
7754: PUSH
7755: LD_INT 16
7757: PUSH
7758: LD_INT 17
7760: PUSH
7761: LD_INT 18
7763: PUSH
7764: LD_INT 19
7766: PUSH
7767: LD_INT 20
7769: PUSH
7770: LD_INT 21
7772: PUSH
7773: LD_INT 22
7775: PUSH
7776: LD_INT 23
7778: PUSH
7779: LD_INT 24
7781: PUSH
7782: LD_INT 25
7784: PUSH
7785: LD_INT 26
7787: PUSH
7788: LD_INT 27
7790: PUSH
7791: LD_INT 28
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 31
7799: PUSH
7800: LD_INT 32
7802: PUSH
7803: LD_INT 33
7805: PUSH
7806: LD_INT 34
7808: PUSH
7809: LD_INT 36
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 101
7847: PUSH
7848: LD_INT 102
7850: PUSH
7851: LD_INT 103
7853: PUSH
7854: LD_INT 104
7856: PUSH
7857: LD_INT 105
7859: PUSH
7860: LD_INT 106
7862: PUSH
7863: LD_INT 107
7865: PUSH
7866: LD_INT 108
7868: PUSH
7869: LD_INT 109
7871: PUSH
7872: LD_INT 110
7874: PUSH
7875: LD_INT 111
7877: PUSH
7878: LD_INT 112
7880: PUSH
7881: LD_INT 113
7883: PUSH
7884: LD_INT 114
7886: PUSH
7887: LD_INT 116
7889: PUSH
7890: LD_INT 117
7892: PUSH
7893: LD_INT 118
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: ST_TO_ADDR
7919: GO 9158
7921: LD_INT 14
7923: DOUBLE
7924: EQUAL
7925: IFTRUE 7929
7927: GO 8153
7929: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7930: LD_ADDR_VAR 0 2
7934: PUSH
7935: LD_INT 1
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: LD_INT 3
7943: PUSH
7944: LD_INT 4
7946: PUSH
7947: LD_INT 5
7949: PUSH
7950: LD_INT 6
7952: PUSH
7953: LD_INT 7
7955: PUSH
7956: LD_INT 8
7958: PUSH
7959: LD_INT 9
7961: PUSH
7962: LD_INT 10
7964: PUSH
7965: LD_INT 11
7967: PUSH
7968: LD_INT 12
7970: PUSH
7971: LD_INT 13
7973: PUSH
7974: LD_INT 14
7976: PUSH
7977: LD_INT 15
7979: PUSH
7980: LD_INT 16
7982: PUSH
7983: LD_INT 17
7985: PUSH
7986: LD_INT 18
7988: PUSH
7989: LD_INT 19
7991: PUSH
7992: LD_INT 20
7994: PUSH
7995: LD_INT 21
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 23
8003: PUSH
8004: LD_INT 24
8006: PUSH
8007: LD_INT 25
8009: PUSH
8010: LD_INT 26
8012: PUSH
8013: LD_INT 27
8015: PUSH
8016: LD_INT 28
8018: PUSH
8019: LD_INT 29
8021: PUSH
8022: LD_INT 30
8024: PUSH
8025: LD_INT 31
8027: PUSH
8028: LD_INT 32
8030: PUSH
8031: LD_INT 33
8033: PUSH
8034: LD_INT 34
8036: PUSH
8037: LD_INT 36
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 101
8079: PUSH
8080: LD_INT 102
8082: PUSH
8083: LD_INT 103
8085: PUSH
8086: LD_INT 104
8088: PUSH
8089: LD_INT 105
8091: PUSH
8092: LD_INT 106
8094: PUSH
8095: LD_INT 107
8097: PUSH
8098: LD_INT 108
8100: PUSH
8101: LD_INT 109
8103: PUSH
8104: LD_INT 110
8106: PUSH
8107: LD_INT 111
8109: PUSH
8110: LD_INT 112
8112: PUSH
8113: LD_INT 113
8115: PUSH
8116: LD_INT 114
8118: PUSH
8119: LD_INT 116
8121: PUSH
8122: LD_INT 117
8124: PUSH
8125: LD_INT 118
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: ST_TO_ADDR
8151: GO 9158
8153: LD_INT 15
8155: DOUBLE
8156: EQUAL
8157: IFTRUE 8161
8159: GO 8385
8161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8162: LD_ADDR_VAR 0 2
8166: PUSH
8167: LD_INT 1
8169: PUSH
8170: LD_INT 2
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: LD_INT 4
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 6
8184: PUSH
8185: LD_INT 7
8187: PUSH
8188: LD_INT 8
8190: PUSH
8191: LD_INT 9
8193: PUSH
8194: LD_INT 10
8196: PUSH
8197: LD_INT 11
8199: PUSH
8200: LD_INT 12
8202: PUSH
8203: LD_INT 13
8205: PUSH
8206: LD_INT 14
8208: PUSH
8209: LD_INT 15
8211: PUSH
8212: LD_INT 16
8214: PUSH
8215: LD_INT 17
8217: PUSH
8218: LD_INT 18
8220: PUSH
8221: LD_INT 19
8223: PUSH
8224: LD_INT 20
8226: PUSH
8227: LD_INT 21
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 23
8235: PUSH
8236: LD_INT 24
8238: PUSH
8239: LD_INT 25
8241: PUSH
8242: LD_INT 26
8244: PUSH
8245: LD_INT 27
8247: PUSH
8248: LD_INT 28
8250: PUSH
8251: LD_INT 29
8253: PUSH
8254: LD_INT 30
8256: PUSH
8257: LD_INT 31
8259: PUSH
8260: LD_INT 32
8262: PUSH
8263: LD_INT 33
8265: PUSH
8266: LD_INT 34
8268: PUSH
8269: LD_INT 36
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 101
8311: PUSH
8312: LD_INT 102
8314: PUSH
8315: LD_INT 103
8317: PUSH
8318: LD_INT 104
8320: PUSH
8321: LD_INT 105
8323: PUSH
8324: LD_INT 106
8326: PUSH
8327: LD_INT 107
8329: PUSH
8330: LD_INT 108
8332: PUSH
8333: LD_INT 109
8335: PUSH
8336: LD_INT 110
8338: PUSH
8339: LD_INT 111
8341: PUSH
8342: LD_INT 112
8344: PUSH
8345: LD_INT 113
8347: PUSH
8348: LD_INT 114
8350: PUSH
8351: LD_INT 116
8353: PUSH
8354: LD_INT 117
8356: PUSH
8357: LD_INT 118
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: ST_TO_ADDR
8383: GO 9158
8385: LD_INT 16
8387: DOUBLE
8388: EQUAL
8389: IFTRUE 8393
8391: GO 8529
8393: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8394: LD_ADDR_VAR 0 2
8398: PUSH
8399: LD_INT 2
8401: PUSH
8402: LD_INT 4
8404: PUSH
8405: LD_INT 5
8407: PUSH
8408: LD_INT 7
8410: PUSH
8411: LD_INT 11
8413: PUSH
8414: LD_INT 12
8416: PUSH
8417: LD_INT 15
8419: PUSH
8420: LD_INT 16
8422: PUSH
8423: LD_INT 20
8425: PUSH
8426: LD_INT 21
8428: PUSH
8429: LD_INT 22
8431: PUSH
8432: LD_INT 23
8434: PUSH
8435: LD_INT 25
8437: PUSH
8438: LD_INT 26
8440: PUSH
8441: LD_INT 30
8443: PUSH
8444: LD_INT 31
8446: PUSH
8447: LD_INT 32
8449: PUSH
8450: LD_INT 33
8452: PUSH
8453: LD_INT 34
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: LD_INT 101
8479: PUSH
8480: LD_INT 102
8482: PUSH
8483: LD_INT 103
8485: PUSH
8486: LD_INT 106
8488: PUSH
8489: LD_INT 108
8491: PUSH
8492: LD_INT 112
8494: PUSH
8495: LD_INT 113
8497: PUSH
8498: LD_INT 114
8500: PUSH
8501: LD_INT 116
8503: PUSH
8504: LD_INT 117
8506: PUSH
8507: LD_INT 118
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: ST_TO_ADDR
8527: GO 9158
8529: LD_INT 17
8531: DOUBLE
8532: EQUAL
8533: IFTRUE 8537
8535: GO 8761
8537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8538: LD_ADDR_VAR 0 2
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: LD_INT 4
8554: PUSH
8555: LD_INT 5
8557: PUSH
8558: LD_INT 6
8560: PUSH
8561: LD_INT 7
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: LD_INT 9
8569: PUSH
8570: LD_INT 10
8572: PUSH
8573: LD_INT 11
8575: PUSH
8576: LD_INT 12
8578: PUSH
8579: LD_INT 13
8581: PUSH
8582: LD_INT 14
8584: PUSH
8585: LD_INT 15
8587: PUSH
8588: LD_INT 16
8590: PUSH
8591: LD_INT 17
8593: PUSH
8594: LD_INT 18
8596: PUSH
8597: LD_INT 19
8599: PUSH
8600: LD_INT 20
8602: PUSH
8603: LD_INT 21
8605: PUSH
8606: LD_INT 22
8608: PUSH
8609: LD_INT 23
8611: PUSH
8612: LD_INT 24
8614: PUSH
8615: LD_INT 25
8617: PUSH
8618: LD_INT 26
8620: PUSH
8621: LD_INT 27
8623: PUSH
8624: LD_INT 28
8626: PUSH
8627: LD_INT 29
8629: PUSH
8630: LD_INT 30
8632: PUSH
8633: LD_INT 31
8635: PUSH
8636: LD_INT 32
8638: PUSH
8639: LD_INT 33
8641: PUSH
8642: LD_INT 34
8644: PUSH
8645: LD_INT 36
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 101
8687: PUSH
8688: LD_INT 102
8690: PUSH
8691: LD_INT 103
8693: PUSH
8694: LD_INT 104
8696: PUSH
8697: LD_INT 105
8699: PUSH
8700: LD_INT 106
8702: PUSH
8703: LD_INT 107
8705: PUSH
8706: LD_INT 108
8708: PUSH
8709: LD_INT 109
8711: PUSH
8712: LD_INT 110
8714: PUSH
8715: LD_INT 111
8717: PUSH
8718: LD_INT 112
8720: PUSH
8721: LD_INT 113
8723: PUSH
8724: LD_INT 114
8726: PUSH
8727: LD_INT 116
8729: PUSH
8730: LD_INT 117
8732: PUSH
8733: LD_INT 118
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: ST_TO_ADDR
8759: GO 9158
8761: LD_INT 18
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8917
8769: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8770: LD_ADDR_VAR 0 2
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: LD_INT 4
8780: PUSH
8781: LD_INT 5
8783: PUSH
8784: LD_INT 7
8786: PUSH
8787: LD_INT 11
8789: PUSH
8790: LD_INT 12
8792: PUSH
8793: LD_INT 15
8795: PUSH
8796: LD_INT 16
8798: PUSH
8799: LD_INT 20
8801: PUSH
8802: LD_INT 21
8804: PUSH
8805: LD_INT 22
8807: PUSH
8808: LD_INT 23
8810: PUSH
8811: LD_INT 25
8813: PUSH
8814: LD_INT 26
8816: PUSH
8817: LD_INT 30
8819: PUSH
8820: LD_INT 31
8822: PUSH
8823: LD_INT 32
8825: PUSH
8826: LD_INT 33
8828: PUSH
8829: LD_INT 34
8831: PUSH
8832: LD_INT 35
8834: PUSH
8835: LD_INT 36
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 101
8863: PUSH
8864: LD_INT 102
8866: PUSH
8867: LD_INT 103
8869: PUSH
8870: LD_INT 106
8872: PUSH
8873: LD_INT 108
8875: PUSH
8876: LD_INT 112
8878: PUSH
8879: LD_INT 113
8881: PUSH
8882: LD_INT 114
8884: PUSH
8885: LD_INT 115
8887: PUSH
8888: LD_INT 116
8890: PUSH
8891: LD_INT 117
8893: PUSH
8894: LD_INT 118
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: ST_TO_ADDR
8915: GO 9158
8917: LD_INT 19
8919: DOUBLE
8920: EQUAL
8921: IFTRUE 8925
8923: GO 9157
8925: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8926: LD_ADDR_VAR 0 2
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: LD_INT 2
8936: PUSH
8937: LD_INT 3
8939: PUSH
8940: LD_INT 4
8942: PUSH
8943: LD_INT 5
8945: PUSH
8946: LD_INT 6
8948: PUSH
8949: LD_INT 7
8951: PUSH
8952: LD_INT 8
8954: PUSH
8955: LD_INT 9
8957: PUSH
8958: LD_INT 10
8960: PUSH
8961: LD_INT 11
8963: PUSH
8964: LD_INT 12
8966: PUSH
8967: LD_INT 13
8969: PUSH
8970: LD_INT 14
8972: PUSH
8973: LD_INT 15
8975: PUSH
8976: LD_INT 16
8978: PUSH
8979: LD_INT 17
8981: PUSH
8982: LD_INT 18
8984: PUSH
8985: LD_INT 19
8987: PUSH
8988: LD_INT 20
8990: PUSH
8991: LD_INT 21
8993: PUSH
8994: LD_INT 22
8996: PUSH
8997: LD_INT 23
8999: PUSH
9000: LD_INT 24
9002: PUSH
9003: LD_INT 25
9005: PUSH
9006: LD_INT 26
9008: PUSH
9009: LD_INT 27
9011: PUSH
9012: LD_INT 28
9014: PUSH
9015: LD_INT 29
9017: PUSH
9018: LD_INT 30
9020: PUSH
9021: LD_INT 31
9023: PUSH
9024: LD_INT 32
9026: PUSH
9027: LD_INT 33
9029: PUSH
9030: LD_INT 34
9032: PUSH
9033: LD_INT 35
9035: PUSH
9036: LD_INT 36
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 101
9079: PUSH
9080: LD_INT 102
9082: PUSH
9083: LD_INT 103
9085: PUSH
9086: LD_INT 104
9088: PUSH
9089: LD_INT 105
9091: PUSH
9092: LD_INT 106
9094: PUSH
9095: LD_INT 107
9097: PUSH
9098: LD_INT 108
9100: PUSH
9101: LD_INT 109
9103: PUSH
9104: LD_INT 110
9106: PUSH
9107: LD_INT 111
9109: PUSH
9110: LD_INT 112
9112: PUSH
9113: LD_INT 113
9115: PUSH
9116: LD_INT 114
9118: PUSH
9119: LD_INT 115
9121: PUSH
9122: LD_INT 116
9124: PUSH
9125: LD_INT 117
9127: PUSH
9128: LD_INT 118
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: ST_TO_ADDR
9155: GO 9158
9157: POP
// end else
9158: GO 9389
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: LD_INT 1
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: LD_INT 3
9173: PUSH
9174: LD_INT 4
9176: PUSH
9177: LD_INT 5
9179: PUSH
9180: LD_INT 6
9182: PUSH
9183: LD_INT 7
9185: PUSH
9186: LD_INT 8
9188: PUSH
9189: LD_INT 9
9191: PUSH
9192: LD_INT 10
9194: PUSH
9195: LD_INT 11
9197: PUSH
9198: LD_INT 12
9200: PUSH
9201: LD_INT 13
9203: PUSH
9204: LD_INT 14
9206: PUSH
9207: LD_INT 15
9209: PUSH
9210: LD_INT 16
9212: PUSH
9213: LD_INT 17
9215: PUSH
9216: LD_INT 18
9218: PUSH
9219: LD_INT 19
9221: PUSH
9222: LD_INT 20
9224: PUSH
9225: LD_INT 21
9227: PUSH
9228: LD_INT 22
9230: PUSH
9231: LD_INT 23
9233: PUSH
9234: LD_INT 24
9236: PUSH
9237: LD_INT 25
9239: PUSH
9240: LD_INT 26
9242: PUSH
9243: LD_INT 27
9245: PUSH
9246: LD_INT 28
9248: PUSH
9249: LD_INT 29
9251: PUSH
9252: LD_INT 30
9254: PUSH
9255: LD_INT 31
9257: PUSH
9258: LD_INT 32
9260: PUSH
9261: LD_INT 33
9263: PUSH
9264: LD_INT 34
9266: PUSH
9267: LD_INT 35
9269: PUSH
9270: LD_INT 36
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 101
9313: PUSH
9314: LD_INT 102
9316: PUSH
9317: LD_INT 103
9319: PUSH
9320: LD_INT 104
9322: PUSH
9323: LD_INT 105
9325: PUSH
9326: LD_INT 106
9328: PUSH
9329: LD_INT 107
9331: PUSH
9332: LD_INT 108
9334: PUSH
9335: LD_INT 109
9337: PUSH
9338: LD_INT 110
9340: PUSH
9341: LD_INT 111
9343: PUSH
9344: LD_INT 112
9346: PUSH
9347: LD_INT 113
9349: PUSH
9350: LD_INT 114
9352: PUSH
9353: LD_INT 115
9355: PUSH
9356: LD_INT 116
9358: PUSH
9359: LD_INT 117
9361: PUSH
9362: LD_INT 118
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: ST_TO_ADDR
// if result then
9389: LD_VAR 0 2
9393: IFFALSE 10179
// begin normal :=  ;
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_STRING 
9402: ST_TO_ADDR
// hardcore :=  ;
9403: LD_ADDR_VAR 0 6
9407: PUSH
9408: LD_STRING 
9410: ST_TO_ADDR
// active :=  ;
9411: LD_ADDR_VAR 0 7
9415: PUSH
9416: LD_STRING 
9418: ST_TO_ADDR
// for i = 1 to normalCounter do
9419: LD_ADDR_VAR 0 8
9423: PUSH
9424: DOUBLE
9425: LD_INT 1
9427: DEC
9428: ST_TO_ADDR
9429: LD_EXP 41
9433: PUSH
9434: FOR_TO
9435: IFFALSE 9536
// begin tmp := 0 ;
9437: LD_ADDR_VAR 0 3
9441: PUSH
9442: LD_STRING 0
9444: ST_TO_ADDR
// if result [ 1 ] then
9445: LD_VAR 0 2
9449: PUSH
9450: LD_INT 1
9452: ARRAY
9453: IFFALSE 9518
// if result [ 1 ] [ 1 ] = i then
9455: LD_VAR 0 2
9459: PUSH
9460: LD_INT 1
9462: ARRAY
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PUSH
9468: LD_VAR 0 8
9472: EQUAL
9473: IFFALSE 9518
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9475: LD_ADDR_VAR 0 2
9479: PUSH
9480: LD_VAR 0 2
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: LD_VAR 0 2
9492: PUSH
9493: LD_INT 1
9495: ARRAY
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 3
9504: PPUSH
9505: CALL_OW 1
9509: ST_TO_ADDR
// tmp := 1 ;
9510: LD_ADDR_VAR 0 3
9514: PUSH
9515: LD_STRING 1
9517: ST_TO_ADDR
// end ; normal := normal & tmp ;
9518: LD_ADDR_VAR 0 5
9522: PUSH
9523: LD_VAR 0 5
9527: PUSH
9528: LD_VAR 0 3
9532: STR
9533: ST_TO_ADDR
// end ;
9534: GO 9434
9536: POP
9537: POP
// for i = 1 to hardcoreCounter do
9538: LD_ADDR_VAR 0 8
9542: PUSH
9543: DOUBLE
9544: LD_INT 1
9546: DEC
9547: ST_TO_ADDR
9548: LD_EXP 42
9552: PUSH
9553: FOR_TO
9554: IFFALSE 9659
// begin tmp := 0 ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: LD_STRING 0
9563: ST_TO_ADDR
// if result [ 2 ] then
9564: LD_VAR 0 2
9568: PUSH
9569: LD_INT 2
9571: ARRAY
9572: IFFALSE 9641
// if result [ 2 ] [ 1 ] = 100 + i then
9574: LD_VAR 0 2
9578: PUSH
9579: LD_INT 2
9581: ARRAY
9582: PUSH
9583: LD_INT 1
9585: ARRAY
9586: PUSH
9587: LD_INT 100
9589: PUSH
9590: LD_VAR 0 8
9594: PLUS
9595: EQUAL
9596: IFFALSE 9641
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: LD_VAR 0 2
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: LD_VAR 0 2
9615: PUSH
9616: LD_INT 2
9618: ARRAY
9619: PPUSH
9620: LD_INT 1
9622: PPUSH
9623: CALL_OW 3
9627: PPUSH
9628: CALL_OW 1
9632: ST_TO_ADDR
// tmp := 1 ;
9633: LD_ADDR_VAR 0 3
9637: PUSH
9638: LD_STRING 1
9640: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9641: LD_ADDR_VAR 0 6
9645: PUSH
9646: LD_VAR 0 6
9650: PUSH
9651: LD_VAR 0 3
9655: STR
9656: ST_TO_ADDR
// end ;
9657: GO 9553
9659: POP
9660: POP
// if isGameLoad then
9661: LD_VAR 0 1
9665: IFFALSE 10140
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9667: LD_ADDR_VAR 0 4
9671: PUSH
9672: LD_EXP 45
9676: PUSH
9677: LD_EXP 44
9681: PUSH
9682: LD_EXP 46
9686: PUSH
9687: LD_EXP 43
9691: PUSH
9692: LD_EXP 47
9696: PUSH
9697: LD_EXP 48
9701: PUSH
9702: LD_EXP 49
9706: PUSH
9707: LD_EXP 50
9711: PUSH
9712: LD_EXP 51
9716: PUSH
9717: LD_EXP 52
9721: PUSH
9722: LD_EXP 53
9726: PUSH
9727: LD_EXP 54
9731: PUSH
9732: LD_EXP 55
9736: PUSH
9737: LD_EXP 56
9741: PUSH
9742: LD_EXP 64
9746: PUSH
9747: LD_EXP 65
9751: PUSH
9752: LD_EXP 66
9756: PUSH
9757: LD_EXP 67
9761: PUSH
9762: LD_EXP 69
9766: PUSH
9767: LD_EXP 70
9771: PUSH
9772: LD_EXP 71
9776: PUSH
9777: LD_EXP 74
9781: PUSH
9782: LD_EXP 76
9786: PUSH
9787: LD_EXP 77
9791: PUSH
9792: LD_EXP 78
9796: PUSH
9797: LD_EXP 80
9801: PUSH
9802: LD_EXP 81
9806: PUSH
9807: LD_EXP 84
9811: PUSH
9812: LD_EXP 85
9816: PUSH
9817: LD_EXP 86
9821: PUSH
9822: LD_EXP 87
9826: PUSH
9827: LD_EXP 88
9831: PUSH
9832: LD_EXP 89
9836: PUSH
9837: LD_EXP 90
9841: PUSH
9842: LD_EXP 91
9846: PUSH
9847: LD_EXP 92
9851: PUSH
9852: LD_EXP 57
9856: PUSH
9857: LD_EXP 58
9861: PUSH
9862: LD_EXP 61
9866: PUSH
9867: LD_EXP 62
9871: PUSH
9872: LD_EXP 63
9876: PUSH
9877: LD_EXP 59
9881: PUSH
9882: LD_EXP 60
9886: PUSH
9887: LD_EXP 68
9891: PUSH
9892: LD_EXP 72
9896: PUSH
9897: LD_EXP 73
9901: PUSH
9902: LD_EXP 75
9906: PUSH
9907: LD_EXP 79
9911: PUSH
9912: LD_EXP 82
9916: PUSH
9917: LD_EXP 83
9921: PUSH
9922: LD_EXP 93
9926: PUSH
9927: LD_EXP 94
9931: PUSH
9932: LD_EXP 95
9936: PUSH
9937: LD_EXP 96
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: ST_TO_ADDR
// tmp :=  ;
9998: LD_ADDR_VAR 0 3
10002: PUSH
10003: LD_STRING 
10005: ST_TO_ADDR
// for i = 1 to normalCounter do
10006: LD_ADDR_VAR 0 8
10010: PUSH
10011: DOUBLE
10012: LD_INT 1
10014: DEC
10015: ST_TO_ADDR
10016: LD_EXP 41
10020: PUSH
10021: FOR_TO
10022: IFFALSE 10058
// begin if flags [ i ] then
10024: LD_VAR 0 4
10028: PUSH
10029: LD_VAR 0 8
10033: ARRAY
10034: IFFALSE 10056
// tmp := tmp & i & ; ;
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_VAR 0 3
10045: PUSH
10046: LD_VAR 0 8
10050: STR
10051: PUSH
10052: LD_STRING ;
10054: STR
10055: ST_TO_ADDR
// end ;
10056: GO 10021
10058: POP
10059: POP
// for i = 1 to hardcoreCounter do
10060: LD_ADDR_VAR 0 8
10064: PUSH
10065: DOUBLE
10066: LD_INT 1
10068: DEC
10069: ST_TO_ADDR
10070: LD_EXP 42
10074: PUSH
10075: FOR_TO
10076: IFFALSE 10122
// begin if flags [ normalCounter + i ] then
10078: LD_VAR 0 4
10082: PUSH
10083: LD_EXP 41
10087: PUSH
10088: LD_VAR 0 8
10092: PLUS
10093: ARRAY
10094: IFFALSE 10120
// tmp := tmp & ( 100 + i ) & ; ;
10096: LD_ADDR_VAR 0 3
10100: PUSH
10101: LD_VAR 0 3
10105: PUSH
10106: LD_INT 100
10108: PUSH
10109: LD_VAR 0 8
10113: PLUS
10114: STR
10115: PUSH
10116: LD_STRING ;
10118: STR
10119: ST_TO_ADDR
// end ;
10120: GO 10075
10122: POP
10123: POP
// if tmp then
10124: LD_VAR 0 3
10128: IFFALSE 10140
// active := tmp ;
10130: LD_ADDR_VAR 0 7
10134: PUSH
10135: LD_VAR 0 3
10139: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10140: LD_STRING getStreamItemsFromMission("
10142: PUSH
10143: LD_VAR 0 5
10147: STR
10148: PUSH
10149: LD_STRING ","
10151: STR
10152: PUSH
10153: LD_VAR 0 6
10157: STR
10158: PUSH
10159: LD_STRING ","
10161: STR
10162: PUSH
10163: LD_VAR 0 7
10167: STR
10168: PUSH
10169: LD_STRING ")
10171: STR
10172: PPUSH
10173: CALL_OW 559
// end else
10177: GO 10186
// ToLua ( getStreamItemsFromMission("","","") ) ;
10179: LD_STRING getStreamItemsFromMission("","","")
10181: PPUSH
10182: CALL_OW 559
// end ;
10186: LD_VAR 0 2
10190: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10191: LD_EXP 40
10195: PUSH
10196: LD_EXP 45
10200: AND
10201: IFFALSE 10325
10203: GO 10205
10205: DISABLE
10206: LD_INT 0
10208: PPUSH
10209: PPUSH
// begin enable ;
10210: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10211: LD_ADDR_VAR 0 2
10215: PUSH
10216: LD_INT 22
10218: PUSH
10219: LD_OWVAR 2
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 2
10230: PUSH
10231: LD_INT 34
10233: PUSH
10234: LD_INT 7
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 34
10243: PUSH
10244: LD_INT 45
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 34
10253: PUSH
10254: LD_INT 28
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 34
10263: PUSH
10264: LD_INT 47
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 69
10286: ST_TO_ADDR
// if not tmp then
10287: LD_VAR 0 2
10291: NOT
10292: IFFALSE 10296
// exit ;
10294: GO 10325
// for i in tmp do
10296: LD_ADDR_VAR 0 1
10300: PUSH
10301: LD_VAR 0 2
10305: PUSH
10306: FOR_IN
10307: IFFALSE 10323
// begin SetLives ( i , 0 ) ;
10309: LD_VAR 0 1
10313: PPUSH
10314: LD_INT 0
10316: PPUSH
10317: CALL_OW 234
// end ;
10321: GO 10306
10323: POP
10324: POP
// end ;
10325: PPOPN 2
10327: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10328: LD_EXP 40
10332: PUSH
10333: LD_EXP 46
10337: AND
10338: IFFALSE 10422
10340: GO 10342
10342: DISABLE
10343: LD_INT 0
10345: PPUSH
10346: PPUSH
// begin enable ;
10347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10348: LD_ADDR_VAR 0 2
10352: PUSH
10353: LD_INT 22
10355: PUSH
10356: LD_OWVAR 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 32
10367: PUSH
10368: LD_INT 3
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: ST_TO_ADDR
// if not tmp then
10384: LD_VAR 0 2
10388: NOT
10389: IFFALSE 10393
// exit ;
10391: GO 10422
// for i in tmp do
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10420
// begin SetLives ( i , 0 ) ;
10406: LD_VAR 0 1
10410: PPUSH
10411: LD_INT 0
10413: PPUSH
10414: CALL_OW 234
// end ;
10418: GO 10403
10420: POP
10421: POP
// end ;
10422: PPOPN 2
10424: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10425: LD_EXP 40
10429: PUSH
10430: LD_EXP 43
10434: AND
10435: IFFALSE 10528
10437: GO 10439
10439: DISABLE
10440: LD_INT 0
10442: PPUSH
// begin enable ;
10443: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10444: LD_ADDR_VAR 0 1
10448: PUSH
10449: LD_INT 22
10451: PUSH
10452: LD_OWVAR 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: LD_INT 25
10466: PUSH
10467: LD_INT 5
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 25
10476: PUSH
10477: LD_INT 9
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 25
10486: PUSH
10487: LD_INT 8
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PPUSH
10504: CALL_OW 69
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10526
// begin SetClass ( i , 1 ) ;
10512: LD_VAR 0 1
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 336
// end ;
10524: GO 10509
10526: POP
10527: POP
// end ;
10528: PPOPN 1
10530: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10531: LD_EXP 40
10535: PUSH
10536: LD_EXP 44
10540: AND
10541: PUSH
10542: LD_OWVAR 65
10546: PUSH
10547: LD_INT 7
10549: LESS
10550: AND
10551: IFFALSE 10565
10553: GO 10555
10555: DISABLE
// begin enable ;
10556: ENABLE
// game_speed := 7 ;
10557: LD_ADDR_OWVAR 65
10561: PUSH
10562: LD_INT 7
10564: ST_TO_ADDR
// end ;
10565: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10566: LD_EXP 40
10570: PUSH
10571: LD_EXP 47
10575: AND
10576: IFFALSE 10778
10578: GO 10580
10580: DISABLE
10581: LD_INT 0
10583: PPUSH
10584: PPUSH
10585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_INT 81
10593: PUSH
10594: LD_OWVAR 2
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 1
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 69
10621: ST_TO_ADDR
// if not tmp then
10622: LD_VAR 0 3
10626: NOT
10627: IFFALSE 10631
// exit ;
10629: GO 10778
// if tmp > 5 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 5
10638: GREATER
10639: IFFALSE 10651
// k := 5 else
10641: LD_ADDR_VAR 0 2
10645: PUSH
10646: LD_INT 5
10648: ST_TO_ADDR
10649: GO 10661
// k := tmp ;
10651: LD_ADDR_VAR 0 2
10655: PUSH
10656: LD_VAR 0 3
10660: ST_TO_ADDR
// for i := 1 to k do
10661: LD_ADDR_VAR 0 1
10665: PUSH
10666: DOUBLE
10667: LD_INT 1
10669: DEC
10670: ST_TO_ADDR
10671: LD_VAR 0 2
10675: PUSH
10676: FOR_TO
10677: IFFALSE 10776
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10679: LD_VAR 0 3
10683: PUSH
10684: LD_VAR 0 1
10688: ARRAY
10689: PPUSH
10690: LD_VAR 0 1
10694: PUSH
10695: LD_INT 4
10697: MOD
10698: PUSH
10699: LD_INT 1
10701: PLUS
10702: PPUSH
10703: CALL_OW 259
10707: PUSH
10708: LD_INT 10
10710: LESS
10711: IFFALSE 10774
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10713: LD_VAR 0 3
10717: PUSH
10718: LD_VAR 0 1
10722: ARRAY
10723: PPUSH
10724: LD_VAR 0 1
10728: PUSH
10729: LD_INT 4
10731: MOD
10732: PUSH
10733: LD_INT 1
10735: PLUS
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 1
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 1
10752: PUSH
10753: LD_INT 4
10755: MOD
10756: PUSH
10757: LD_INT 1
10759: PLUS
10760: PPUSH
10761: CALL_OW 259
10765: PUSH
10766: LD_INT 1
10768: PLUS
10769: PPUSH
10770: CALL_OW 237
10774: GO 10676
10776: POP
10777: POP
// end ;
10778: PPOPN 3
10780: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10781: LD_EXP 40
10785: PUSH
10786: LD_EXP 48
10790: AND
10791: IFFALSE 10811
10793: GO 10795
10795: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10796: LD_INT 4
10798: PPUSH
10799: LD_OWVAR 2
10803: PPUSH
10804: LD_INT 0
10806: PPUSH
10807: CALL_OW 324
10811: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10812: LD_EXP 40
10816: PUSH
10817: LD_EXP 77
10821: AND
10822: IFFALSE 10842
10824: GO 10826
10826: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10827: LD_INT 19
10829: PPUSH
10830: LD_OWVAR 2
10834: PPUSH
10835: LD_INT 0
10837: PPUSH
10838: CALL_OW 324
10842: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10843: LD_EXP 40
10847: PUSH
10848: LD_EXP 49
10852: AND
10853: IFFALSE 10955
10855: GO 10857
10857: DISABLE
10858: LD_INT 0
10860: PPUSH
10861: PPUSH
// begin enable ;
10862: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10863: LD_ADDR_VAR 0 2
10867: PUSH
10868: LD_INT 22
10870: PUSH
10871: LD_OWVAR 2
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 2
10882: PUSH
10883: LD_INT 34
10885: PUSH
10886: LD_INT 11
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 34
10895: PUSH
10896: LD_INT 30
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PPUSH
10912: CALL_OW 69
10916: ST_TO_ADDR
// if not tmp then
10917: LD_VAR 0 2
10921: NOT
10922: IFFALSE 10926
// exit ;
10924: GO 10955
// for i in tmp do
10926: LD_ADDR_VAR 0 1
10930: PUSH
10931: LD_VAR 0 2
10935: PUSH
10936: FOR_IN
10937: IFFALSE 10953
// begin SetLives ( i , 0 ) ;
10939: LD_VAR 0 1
10943: PPUSH
10944: LD_INT 0
10946: PPUSH
10947: CALL_OW 234
// end ;
10951: GO 10936
10953: POP
10954: POP
// end ;
10955: PPOPN 2
10957: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10958: LD_EXP 40
10962: PUSH
10963: LD_EXP 50
10967: AND
10968: IFFALSE 10988
10970: GO 10972
10972: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10973: LD_INT 32
10975: PPUSH
10976: LD_OWVAR 2
10980: PPUSH
10981: LD_INT 0
10983: PPUSH
10984: CALL_OW 324
10988: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10989: LD_EXP 40
10993: PUSH
10994: LD_EXP 51
10998: AND
10999: IFFALSE 11180
11001: GO 11003
11003: DISABLE
11004: LD_INT 0
11006: PPUSH
11007: PPUSH
11008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11009: LD_ADDR_VAR 0 2
11013: PUSH
11014: LD_INT 22
11016: PUSH
11017: LD_OWVAR 2
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 33
11028: PUSH
11029: LD_INT 3
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PPUSH
11040: CALL_OW 69
11044: ST_TO_ADDR
// if not tmp then
11045: LD_VAR 0 2
11049: NOT
11050: IFFALSE 11054
// exit ;
11052: GO 11180
// side := 0 ;
11054: LD_ADDR_VAR 0 3
11058: PUSH
11059: LD_INT 0
11061: ST_TO_ADDR
// for i := 1 to 8 do
11062: LD_ADDR_VAR 0 1
11066: PUSH
11067: DOUBLE
11068: LD_INT 1
11070: DEC
11071: ST_TO_ADDR
11072: LD_INT 8
11074: PUSH
11075: FOR_TO
11076: IFFALSE 11124
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11078: LD_OWVAR 2
11082: PUSH
11083: LD_VAR 0 1
11087: NONEQUAL
11088: PUSH
11089: LD_OWVAR 2
11093: PPUSH
11094: LD_VAR 0 1
11098: PPUSH
11099: CALL_OW 81
11103: PUSH
11104: LD_INT 2
11106: EQUAL
11107: AND
11108: IFFALSE 11122
// begin side := i ;
11110: LD_ADDR_VAR 0 3
11114: PUSH
11115: LD_VAR 0 1
11119: ST_TO_ADDR
// break ;
11120: GO 11124
// end ;
11122: GO 11075
11124: POP
11125: POP
// if not side then
11126: LD_VAR 0 3
11130: NOT
11131: IFFALSE 11135
// exit ;
11133: GO 11180
// for i := 1 to tmp do
11135: LD_ADDR_VAR 0 1
11139: PUSH
11140: DOUBLE
11141: LD_INT 1
11143: DEC
11144: ST_TO_ADDR
11145: LD_VAR 0 2
11149: PUSH
11150: FOR_TO
11151: IFFALSE 11178
// if Prob ( 60 ) then
11153: LD_INT 60
11155: PPUSH
11156: CALL_OW 13
11160: IFFALSE 11176
// SetSide ( i , side ) ;
11162: LD_VAR 0 1
11166: PPUSH
11167: LD_VAR 0 3
11171: PPUSH
11172: CALL_OW 235
11176: GO 11150
11178: POP
11179: POP
// end ;
11180: PPOPN 3
11182: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11183: LD_EXP 40
11187: PUSH
11188: LD_EXP 53
11192: AND
11193: IFFALSE 11312
11195: GO 11197
11197: DISABLE
11198: LD_INT 0
11200: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11201: LD_ADDR_VAR 0 1
11205: PUSH
11206: LD_INT 22
11208: PUSH
11209: LD_OWVAR 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 21
11220: PUSH
11221: LD_INT 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 3
11230: PUSH
11231: LD_INT 23
11233: PUSH
11234: LD_INT 0
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: PPUSH
11250: CALL_OW 69
11254: PUSH
11255: FOR_IN
11256: IFFALSE 11310
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11258: LD_VAR 0 1
11262: PPUSH
11263: CALL_OW 257
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 2
11273: PUSH
11274: LD_INT 3
11276: PUSH
11277: LD_INT 4
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: IN
11286: IFFALSE 11308
// SetClass ( un , rand ( 1 , 4 ) ) ;
11288: LD_VAR 0 1
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 4
11298: PPUSH
11299: CALL_OW 12
11303: PPUSH
11304: CALL_OW 336
11308: GO 11255
11310: POP
11311: POP
// end ;
11312: PPOPN 1
11314: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11315: LD_EXP 40
11319: PUSH
11320: LD_EXP 52
11324: AND
11325: IFFALSE 11404
11327: GO 11329
11329: DISABLE
11330: LD_INT 0
11332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_INT 22
11340: PUSH
11341: LD_OWVAR 2
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 3
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: ST_TO_ADDR
// if not tmp then
11369: LD_VAR 0 1
11373: NOT
11374: IFFALSE 11378
// exit ;
11376: GO 11404
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11378: LD_VAR 0 1
11382: PUSH
11383: LD_INT 1
11385: PPUSH
11386: LD_VAR 0 1
11390: PPUSH
11391: CALL_OW 12
11395: ARRAY
11396: PPUSH
11397: LD_INT 100
11399: PPUSH
11400: CALL_OW 234
// end ;
11404: PPOPN 1
11406: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11407: LD_EXP 40
11411: PUSH
11412: LD_EXP 54
11416: AND
11417: IFFALSE 11515
11419: GO 11421
11421: DISABLE
11422: LD_INT 0
11424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11425: LD_ADDR_VAR 0 1
11429: PUSH
11430: LD_INT 22
11432: PUSH
11433: LD_OWVAR 2
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 21
11444: PUSH
11445: LD_INT 1
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PPUSH
11456: CALL_OW 69
11460: ST_TO_ADDR
// if not tmp then
11461: LD_VAR 0 1
11465: NOT
11466: IFFALSE 11470
// exit ;
11468: GO 11515
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11470: LD_VAR 0 1
11474: PUSH
11475: LD_INT 1
11477: PPUSH
11478: LD_VAR 0 1
11482: PPUSH
11483: CALL_OW 12
11487: ARRAY
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 4
11494: PPUSH
11495: CALL_OW 12
11499: PPUSH
11500: LD_INT 3000
11502: PPUSH
11503: LD_INT 9000
11505: PPUSH
11506: CALL_OW 12
11510: PPUSH
11511: CALL_OW 492
// end ;
11515: PPOPN 1
11517: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11518: LD_EXP 40
11522: PUSH
11523: LD_EXP 55
11527: AND
11528: IFFALSE 11548
11530: GO 11532
11532: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11533: LD_INT 1
11535: PPUSH
11536: LD_OWVAR 2
11540: PPUSH
11541: LD_INT 0
11543: PPUSH
11544: CALL_OW 324
11548: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11549: LD_EXP 40
11553: PUSH
11554: LD_EXP 56
11558: AND
11559: IFFALSE 11642
11561: GO 11563
11563: DISABLE
11564: LD_INT 0
11566: PPUSH
11567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11568: LD_ADDR_VAR 0 2
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_OWVAR 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 21
11587: PUSH
11588: LD_INT 3
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: ST_TO_ADDR
// if not tmp then
11604: LD_VAR 0 2
11608: NOT
11609: IFFALSE 11613
// exit ;
11611: GO 11642
// for i in tmp do
11613: LD_ADDR_VAR 0 1
11617: PUSH
11618: LD_VAR 0 2
11622: PUSH
11623: FOR_IN
11624: IFFALSE 11640
// SetBLevel ( i , 10 ) ;
11626: LD_VAR 0 1
11630: PPUSH
11631: LD_INT 10
11633: PPUSH
11634: CALL_OW 241
11638: GO 11623
11640: POP
11641: POP
// end ;
11642: PPOPN 2
11644: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11645: LD_EXP 40
11649: PUSH
11650: LD_EXP 57
11654: AND
11655: IFFALSE 11766
11657: GO 11659
11659: DISABLE
11660: LD_INT 0
11662: PPUSH
11663: PPUSH
11664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11665: LD_ADDR_VAR 0 3
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_OWVAR 2
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 25
11684: PUSH
11685: LD_INT 1
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if not tmp then
11701: LD_VAR 0 3
11705: NOT
11706: IFFALSE 11710
// exit ;
11708: GO 11766
// un := tmp [ rand ( 1 , tmp ) ] ;
11710: LD_ADDR_VAR 0 2
11714: PUSH
11715: LD_VAR 0 3
11719: PUSH
11720: LD_INT 1
11722: PPUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: CALL_OW 12
11732: ARRAY
11733: ST_TO_ADDR
// if Crawls ( un ) then
11734: LD_VAR 0 2
11738: PPUSH
11739: CALL_OW 318
11743: IFFALSE 11754
// ComWalk ( un ) ;
11745: LD_VAR 0 2
11749: PPUSH
11750: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11754: LD_VAR 0 2
11758: PPUSH
11759: LD_INT 5
11761: PPUSH
11762: CALL_OW 336
// end ;
11766: PPOPN 3
11768: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11769: LD_EXP 40
11773: PUSH
11774: LD_EXP 58
11778: AND
11779: PUSH
11780: LD_OWVAR 67
11784: PUSH
11785: LD_INT 4
11787: LESS
11788: AND
11789: IFFALSE 11808
11791: GO 11793
11793: DISABLE
// begin Difficulty := Difficulty + 1 ;
11794: LD_ADDR_OWVAR 67
11798: PUSH
11799: LD_OWVAR 67
11803: PUSH
11804: LD_INT 1
11806: PLUS
11807: ST_TO_ADDR
// end ;
11808: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11809: LD_EXP 40
11813: PUSH
11814: LD_EXP 59
11818: AND
11819: IFFALSE 11922
11821: GO 11823
11823: DISABLE
11824: LD_INT 0
11826: PPUSH
// begin for i := 1 to 5 do
11827: LD_ADDR_VAR 0 1
11831: PUSH
11832: DOUBLE
11833: LD_INT 1
11835: DEC
11836: ST_TO_ADDR
11837: LD_INT 5
11839: PUSH
11840: FOR_TO
11841: IFFALSE 11920
// begin uc_nation := nation_nature ;
11843: LD_ADDR_OWVAR 21
11847: PUSH
11848: LD_INT 0
11850: ST_TO_ADDR
// uc_side := 0 ;
11851: LD_ADDR_OWVAR 20
11855: PUSH
11856: LD_INT 0
11858: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11859: LD_ADDR_OWVAR 29
11863: PUSH
11864: LD_INT 12
11866: PUSH
11867: LD_INT 12
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: ST_TO_ADDR
// hc_agressivity := 20 ;
11874: LD_ADDR_OWVAR 35
11878: PUSH
11879: LD_INT 20
11881: ST_TO_ADDR
// hc_class := class_tiger ;
11882: LD_ADDR_OWVAR 28
11886: PUSH
11887: LD_INT 14
11889: ST_TO_ADDR
// hc_gallery :=  ;
11890: LD_ADDR_OWVAR 33
11894: PUSH
11895: LD_STRING 
11897: ST_TO_ADDR
// hc_name :=  ;
11898: LD_ADDR_OWVAR 26
11902: PUSH
11903: LD_STRING 
11905: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11906: CALL_OW 44
11910: PPUSH
11911: LD_INT 0
11913: PPUSH
11914: CALL_OW 51
// end ;
11918: GO 11840
11920: POP
11921: POP
// end ;
11922: PPOPN 1
11924: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11925: LD_EXP 40
11929: PUSH
11930: LD_EXP 60
11934: AND
11935: IFFALSE 11944
11937: GO 11939
11939: DISABLE
// StreamSibBomb ;
11940: CALL 11945 0 0
11944: END
// export function StreamSibBomb ; var i , x , y ; begin
11945: LD_INT 0
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
// result := false ;
11951: LD_ADDR_VAR 0 1
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
// for i := 1 to 16 do
11959: LD_ADDR_VAR 0 2
11963: PUSH
11964: DOUBLE
11965: LD_INT 1
11967: DEC
11968: ST_TO_ADDR
11969: LD_INT 16
11971: PUSH
11972: FOR_TO
11973: IFFALSE 12172
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11975: LD_ADDR_VAR 0 3
11979: PUSH
11980: LD_INT 10
11982: PUSH
11983: LD_INT 20
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 40
11991: PUSH
11992: LD_INT 50
11994: PUSH
11995: LD_INT 60
11997: PUSH
11998: LD_INT 70
12000: PUSH
12001: LD_INT 80
12003: PUSH
12004: LD_INT 90
12006: PUSH
12007: LD_INT 100
12009: PUSH
12010: LD_INT 110
12012: PUSH
12013: LD_INT 120
12015: PUSH
12016: LD_INT 130
12018: PUSH
12019: LD_INT 140
12021: PUSH
12022: LD_INT 150
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 1
12044: PPUSH
12045: LD_INT 15
12047: PPUSH
12048: CALL_OW 12
12052: ARRAY
12053: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12054: LD_ADDR_VAR 0 4
12058: PUSH
12059: LD_INT 10
12061: PUSH
12062: LD_INT 20
12064: PUSH
12065: LD_INT 30
12067: PUSH
12068: LD_INT 40
12070: PUSH
12071: LD_INT 50
12073: PUSH
12074: LD_INT 60
12076: PUSH
12077: LD_INT 70
12079: PUSH
12080: LD_INT 80
12082: PUSH
12083: LD_INT 90
12085: PUSH
12086: LD_INT 100
12088: PUSH
12089: LD_INT 110
12091: PUSH
12092: LD_INT 120
12094: PUSH
12095: LD_INT 130
12097: PUSH
12098: LD_INT 140
12100: PUSH
12101: LD_INT 150
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 1
12123: PPUSH
12124: LD_INT 15
12126: PPUSH
12127: CALL_OW 12
12131: ARRAY
12132: ST_TO_ADDR
// if ValidHex ( x , y ) then
12133: LD_VAR 0 3
12137: PPUSH
12138: LD_VAR 0 4
12142: PPUSH
12143: CALL_OW 488
12147: IFFALSE 12170
// begin result := [ x , y ] ;
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: LD_VAR 0 3
12158: PUSH
12159: LD_VAR 0 4
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: ST_TO_ADDR
// break ;
12168: GO 12172
// end ; end ;
12170: GO 11972
12172: POP
12173: POP
// if result then
12174: LD_VAR 0 1
12178: IFFALSE 12238
// begin ToLua ( playSibBomb() ) ;
12180: LD_STRING playSibBomb()
12182: PPUSH
12183: CALL_OW 559
// wait ( 0 0$14 ) ;
12187: LD_INT 490
12189: PPUSH
12190: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12194: LD_VAR 0 1
12198: PUSH
12199: LD_INT 1
12201: ARRAY
12202: PPUSH
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 2
12210: ARRAY
12211: PPUSH
12212: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12216: LD_VAR 0 1
12220: PUSH
12221: LD_INT 1
12223: ARRAY
12224: PPUSH
12225: LD_VAR 0 1
12229: PUSH
12230: LD_INT 2
12232: ARRAY
12233: PPUSH
12234: CALL_OW 429
// end ; end ;
12238: LD_VAR 0 1
12242: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12243: LD_EXP 40
12247: PUSH
12248: LD_EXP 62
12252: AND
12253: IFFALSE 12265
12255: GO 12257
12257: DISABLE
// YouLost (  ) ;
12258: LD_STRING 
12260: PPUSH
12261: CALL_OW 104
12265: END
// every 0 0$1 trigger StreamModeActive and sFog do
12266: LD_EXP 40
12270: PUSH
12271: LD_EXP 61
12275: AND
12276: IFFALSE 12290
12278: GO 12280
12280: DISABLE
// FogOff ( your_side ) ;
12281: LD_OWVAR 2
12285: PPUSH
12286: CALL_OW 344
12290: END
// every 0 0$1 trigger StreamModeActive and sSun do
12291: LD_EXP 40
12295: PUSH
12296: LD_EXP 63
12300: AND
12301: IFFALSE 12329
12303: GO 12305
12305: DISABLE
// begin solar_recharge_percent := 0 ;
12306: LD_ADDR_OWVAR 79
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12314: LD_INT 10500
12316: PPUSH
12317: CALL_OW 67
// solar_recharge_percent := 100 ;
12321: LD_ADDR_OWVAR 79
12325: PUSH
12326: LD_INT 100
12328: ST_TO_ADDR
// end ;
12329: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12330: LD_EXP 40
12334: PUSH
12335: LD_EXP 64
12339: AND
12340: IFFALSE 12579
12342: GO 12344
12344: DISABLE
12345: LD_INT 0
12347: PPUSH
12348: PPUSH
12349: PPUSH
// begin tmp := [ ] ;
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: EMPTY
12356: ST_TO_ADDR
// for i := 1 to 6 do
12357: LD_ADDR_VAR 0 1
12361: PUSH
12362: DOUBLE
12363: LD_INT 1
12365: DEC
12366: ST_TO_ADDR
12367: LD_INT 6
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12476
// begin uc_nation := nation_nature ;
12373: LD_ADDR_OWVAR 21
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// uc_side := 0 ;
12381: LD_ADDR_OWVAR 20
12385: PUSH
12386: LD_INT 0
12388: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12389: LD_ADDR_OWVAR 29
12393: PUSH
12394: LD_INT 12
12396: PUSH
12397: LD_INT 12
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: ST_TO_ADDR
// hc_agressivity := 20 ;
12404: LD_ADDR_OWVAR 35
12408: PUSH
12409: LD_INT 20
12411: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12412: LD_ADDR_OWVAR 28
12416: PUSH
12417: LD_INT 17
12419: ST_TO_ADDR
// hc_gallery :=  ;
12420: LD_ADDR_OWVAR 33
12424: PUSH
12425: LD_STRING 
12427: ST_TO_ADDR
// hc_name :=  ;
12428: LD_ADDR_OWVAR 26
12432: PUSH
12433: LD_STRING 
12435: ST_TO_ADDR
// un := CreateHuman ;
12436: LD_ADDR_VAR 0 2
12440: PUSH
12441: CALL_OW 44
12445: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12446: LD_VAR 0 2
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: CALL_OW 51
// tmp := tmp ^ un ;
12458: LD_ADDR_VAR 0 3
12462: PUSH
12463: LD_VAR 0 3
12467: PUSH
12468: LD_VAR 0 2
12472: ADD
12473: ST_TO_ADDR
// end ;
12474: GO 12370
12476: POP
12477: POP
// repeat wait ( 0 0$1 ) ;
12478: LD_INT 35
12480: PPUSH
12481: CALL_OW 67
// for un in tmp do
12485: LD_ADDR_VAR 0 2
12489: PUSH
12490: LD_VAR 0 3
12494: PUSH
12495: FOR_IN
12496: IFFALSE 12570
// begin if IsDead ( un ) then
12498: LD_VAR 0 2
12502: PPUSH
12503: CALL_OW 301
12507: IFFALSE 12527
// begin tmp := tmp diff un ;
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_VAR 0 3
12518: PUSH
12519: LD_VAR 0 2
12523: DIFF
12524: ST_TO_ADDR
// continue ;
12525: GO 12495
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12527: LD_VAR 0 2
12531: PPUSH
12532: LD_INT 3
12534: PUSH
12535: LD_INT 22
12537: PUSH
12538: LD_INT 0
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: PPUSH
12554: LD_VAR 0 2
12558: PPUSH
12559: CALL_OW 74
12563: PPUSH
12564: CALL_OW 115
// end ;
12568: GO 12495
12570: POP
12571: POP
// until not tmp ;
12572: LD_VAR 0 3
12576: NOT
12577: IFFALSE 12478
// end ;
12579: PPOPN 3
12581: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12582: LD_EXP 40
12586: PUSH
12587: LD_EXP 65
12591: AND
12592: IFFALSE 12646
12594: GO 12596
12596: DISABLE
// begin ToLua ( displayTroll(); ) ;
12597: LD_STRING displayTroll();
12599: PPUSH
12600: CALL_OW 559
// wait ( 3 3$00 ) ;
12604: LD_INT 6300
12606: PPUSH
12607: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12611: LD_STRING hideTroll();
12613: PPUSH
12614: CALL_OW 559
// wait ( 1 1$00 ) ;
12618: LD_INT 2100
12620: PPUSH
12621: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12625: LD_STRING displayTroll();
12627: PPUSH
12628: CALL_OW 559
// wait ( 1 1$00 ) ;
12632: LD_INT 2100
12634: PPUSH
12635: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12639: LD_STRING hideTroll();
12641: PPUSH
12642: CALL_OW 559
// end ;
12646: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12647: LD_EXP 40
12651: PUSH
12652: LD_EXP 66
12656: AND
12657: IFFALSE 12720
12659: GO 12661
12661: DISABLE
12662: LD_INT 0
12664: PPUSH
// begin p := 0 ;
12665: LD_ADDR_VAR 0 1
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// repeat game_speed := 1 ;
12673: LD_ADDR_OWVAR 65
12677: PUSH
12678: LD_INT 1
12680: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12681: LD_INT 35
12683: PPUSH
12684: CALL_OW 67
// p := p + 1 ;
12688: LD_ADDR_VAR 0 1
12692: PUSH
12693: LD_VAR 0 1
12697: PUSH
12698: LD_INT 1
12700: PLUS
12701: ST_TO_ADDR
// until p >= 60 ;
12702: LD_VAR 0 1
12706: PUSH
12707: LD_INT 60
12709: GREATEREQUAL
12710: IFFALSE 12673
// game_speed := 4 ;
12712: LD_ADDR_OWVAR 65
12716: PUSH
12717: LD_INT 4
12719: ST_TO_ADDR
// end ;
12720: PPOPN 1
12722: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12723: LD_EXP 40
12727: PUSH
12728: LD_EXP 67
12732: AND
12733: IFFALSE 12879
12735: GO 12737
12737: DISABLE
12738: LD_INT 0
12740: PPUSH
12741: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12742: LD_ADDR_VAR 0 1
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_OWVAR 2
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 2
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 0
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 30
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: ST_TO_ADDR
// if not depot then
12796: LD_VAR 0 1
12800: NOT
12801: IFFALSE 12805
// exit ;
12803: GO 12879
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12805: LD_ADDR_VAR 0 2
12809: PUSH
12810: LD_VAR 0 1
12814: PUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 12
12827: ARRAY
12828: PPUSH
12829: CALL_OW 274
12833: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12834: LD_VAR 0 2
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12849: LD_VAR 0 2
12853: PPUSH
12854: LD_INT 2
12856: PPUSH
12857: LD_INT 0
12859: PPUSH
12860: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12864: LD_VAR 0 2
12868: PPUSH
12869: LD_INT 3
12871: PPUSH
12872: LD_INT 0
12874: PPUSH
12875: CALL_OW 277
// end ;
12879: PPOPN 2
12881: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12882: LD_EXP 40
12886: PUSH
12887: LD_EXP 68
12891: AND
12892: IFFALSE 12989
12894: GO 12896
12896: DISABLE
12897: LD_INT 0
12899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: LD_INT 22
12907: PUSH
12908: LD_OWVAR 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 1
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: LD_INT 23
12932: PUSH
12933: LD_INT 0
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: ST_TO_ADDR
// if not tmp then
12954: LD_VAR 0 1
12958: NOT
12959: IFFALSE 12963
// exit ;
12961: GO 12989
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12963: LD_VAR 0 1
12967: PUSH
12968: LD_INT 1
12970: PPUSH
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 12
12980: ARRAY
12981: PPUSH
12982: LD_INT 200
12984: PPUSH
12985: CALL_OW 234
// end ;
12989: PPOPN 1
12991: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12992: LD_EXP 40
12996: PUSH
12997: LD_EXP 69
13001: AND
13002: IFFALSE 13081
13004: GO 13006
13006: DISABLE
13007: LD_INT 0
13009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13010: LD_ADDR_VAR 0 1
13014: PUSH
13015: LD_INT 22
13017: PUSH
13018: LD_OWVAR 2
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 2
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: ST_TO_ADDR
// if not tmp then
13046: LD_VAR 0 1
13050: NOT
13051: IFFALSE 13055
// exit ;
13053: GO 13081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13055: LD_VAR 0 1
13059: PUSH
13060: LD_INT 1
13062: PPUSH
13063: LD_VAR 0 1
13067: PPUSH
13068: CALL_OW 12
13072: ARRAY
13073: PPUSH
13074: LD_INT 60
13076: PPUSH
13077: CALL_OW 234
// end ;
13081: PPOPN 1
13083: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13084: LD_EXP 40
13088: PUSH
13089: LD_EXP 70
13093: AND
13094: IFFALSE 13193
13096: GO 13098
13098: DISABLE
13099: LD_INT 0
13101: PPUSH
13102: PPUSH
// begin enable ;
13103: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13104: LD_ADDR_VAR 0 1
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_OWVAR 2
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 61
13123: PUSH
13124: EMPTY
13125: LIST
13126: PUSH
13127: LD_INT 33
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 69
13146: ST_TO_ADDR
// if not tmp then
13147: LD_VAR 0 1
13151: NOT
13152: IFFALSE 13156
// exit ;
13154: GO 13193
// for i in tmp do
13156: LD_ADDR_VAR 0 2
13160: PUSH
13161: LD_VAR 0 1
13165: PUSH
13166: FOR_IN
13167: IFFALSE 13191
// if IsControledBy ( i ) then
13169: LD_VAR 0 2
13173: PPUSH
13174: CALL_OW 312
13178: IFFALSE 13189
// ComUnlink ( i ) ;
13180: LD_VAR 0 2
13184: PPUSH
13185: CALL_OW 136
13189: GO 13166
13191: POP
13192: POP
// end ;
13193: PPOPN 2
13195: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13196: LD_EXP 40
13200: PUSH
13201: LD_EXP 71
13205: AND
13206: IFFALSE 13346
13208: GO 13210
13210: DISABLE
13211: LD_INT 0
13213: PPUSH
13214: PPUSH
// begin ToLua ( displayPowell(); ) ;
13215: LD_STRING displayPowell();
13217: PPUSH
13218: CALL_OW 559
// uc_side := 0 ;
13222: LD_ADDR_OWVAR 20
13226: PUSH
13227: LD_INT 0
13229: ST_TO_ADDR
// uc_nation := 2 ;
13230: LD_ADDR_OWVAR 21
13234: PUSH
13235: LD_INT 2
13237: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13238: LD_ADDR_OWVAR 37
13242: PUSH
13243: LD_INT 14
13245: ST_TO_ADDR
// vc_engine := engine_siberite ;
13246: LD_ADDR_OWVAR 39
13250: PUSH
13251: LD_INT 3
13253: ST_TO_ADDR
// vc_control := control_apeman ;
13254: LD_ADDR_OWVAR 38
13258: PUSH
13259: LD_INT 5
13261: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13262: LD_ADDR_OWVAR 40
13266: PUSH
13267: LD_INT 29
13269: ST_TO_ADDR
// un := CreateVehicle ;
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: CALL_OW 45
13279: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13280: LD_VAR 0 2
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13292: LD_INT 35
13294: PPUSH
13295: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13299: LD_VAR 0 2
13303: PPUSH
13304: LD_INT 22
13306: PUSH
13307: LD_OWVAR 2
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: PPUSH
13321: LD_VAR 0 2
13325: PPUSH
13326: CALL_OW 74
13330: PPUSH
13331: CALL_OW 115
// until IsDead ( un ) ;
13335: LD_VAR 0 2
13339: PPUSH
13340: CALL_OW 301
13344: IFFALSE 13292
// end ;
13346: PPOPN 2
13348: END
// every 0 0$1 trigger StreamModeActive and sStu do
13349: LD_EXP 40
13353: PUSH
13354: LD_EXP 79
13358: AND
13359: IFFALSE 13375
13361: GO 13363
13363: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13364: LD_STRING displayStucuk();
13366: PPUSH
13367: CALL_OW 559
// ResetFog ;
13371: CALL_OW 335
// end ;
13375: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13376: LD_EXP 40
13380: PUSH
13381: LD_EXP 72
13385: AND
13386: IFFALSE 13527
13388: GO 13390
13390: DISABLE
13391: LD_INT 0
13393: PPUSH
13394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13395: LD_ADDR_VAR 0 2
13399: PUSH
13400: LD_INT 22
13402: PUSH
13403: LD_OWVAR 2
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 21
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 69
13430: ST_TO_ADDR
// if not tmp then
13431: LD_VAR 0 2
13435: NOT
13436: IFFALSE 13440
// exit ;
13438: GO 13527
// un := tmp [ rand ( 1 , tmp ) ] ;
13440: LD_ADDR_VAR 0 1
13444: PUSH
13445: LD_VAR 0 2
13449: PUSH
13450: LD_INT 1
13452: PPUSH
13453: LD_VAR 0 2
13457: PPUSH
13458: CALL_OW 12
13462: ARRAY
13463: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_INT 0
13471: PPUSH
13472: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13476: LD_VAR 0 1
13480: PPUSH
13481: LD_OWVAR 3
13485: PUSH
13486: LD_VAR 0 1
13490: DIFF
13491: PPUSH
13492: LD_VAR 0 1
13496: PPUSH
13497: CALL_OW 74
13501: PPUSH
13502: CALL_OW 115
// wait ( 0 0$20 ) ;
13506: LD_INT 700
13508: PPUSH
13509: CALL_OW 67
// SetSide ( un , your_side ) ;
13513: LD_VAR 0 1
13517: PPUSH
13518: LD_OWVAR 2
13522: PPUSH
13523: CALL_OW 235
// end ;
13527: PPOPN 2
13529: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13530: LD_EXP 40
13534: PUSH
13535: LD_EXP 73
13539: AND
13540: IFFALSE 13646
13542: GO 13544
13544: DISABLE
13545: LD_INT 0
13547: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13548: LD_ADDR_VAR 0 1
13552: PUSH
13553: LD_INT 22
13555: PUSH
13556: LD_OWVAR 2
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 2
13567: PUSH
13568: LD_INT 30
13570: PUSH
13571: LD_INT 0
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 30
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: ST_TO_ADDR
// if not depot then
13602: LD_VAR 0 1
13606: NOT
13607: IFFALSE 13611
// exit ;
13609: GO 13646
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13611: LD_VAR 0 1
13615: PUSH
13616: LD_INT 1
13618: ARRAY
13619: PPUSH
13620: CALL_OW 250
13624: PPUSH
13625: LD_VAR 0 1
13629: PUSH
13630: LD_INT 1
13632: ARRAY
13633: PPUSH
13634: CALL_OW 251
13638: PPUSH
13639: LD_INT 70
13641: PPUSH
13642: CALL_OW 495
// end ;
13646: PPOPN 1
13648: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13649: LD_EXP 40
13653: PUSH
13654: LD_EXP 74
13658: AND
13659: IFFALSE 13870
13661: GO 13663
13663: DISABLE
13664: LD_INT 0
13666: PPUSH
13667: PPUSH
13668: PPUSH
13669: PPUSH
13670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13671: LD_ADDR_VAR 0 5
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_OWVAR 2
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 21
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: ST_TO_ADDR
// if not tmp then
13707: LD_VAR 0 5
13711: NOT
13712: IFFALSE 13716
// exit ;
13714: GO 13870
// for i in tmp do
13716: LD_ADDR_VAR 0 1
13720: PUSH
13721: LD_VAR 0 5
13725: PUSH
13726: FOR_IN
13727: IFFALSE 13868
// begin d := rand ( 0 , 5 ) ;
13729: LD_ADDR_VAR 0 4
13733: PUSH
13734: LD_INT 0
13736: PPUSH
13737: LD_INT 5
13739: PPUSH
13740: CALL_OW 12
13744: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 250
13759: PPUSH
13760: LD_VAR 0 4
13764: PPUSH
13765: LD_INT 3
13767: PPUSH
13768: LD_INT 12
13770: PPUSH
13771: CALL_OW 12
13775: PPUSH
13776: CALL_OW 272
13780: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13781: LD_ADDR_VAR 0 3
13785: PUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 251
13795: PPUSH
13796: LD_VAR 0 4
13800: PPUSH
13801: LD_INT 3
13803: PPUSH
13804: LD_INT 12
13806: PPUSH
13807: CALL_OW 12
13811: PPUSH
13812: CALL_OW 273
13816: ST_TO_ADDR
// if ValidHex ( x , y ) then
13817: LD_VAR 0 2
13821: PPUSH
13822: LD_VAR 0 3
13826: PPUSH
13827: CALL_OW 488
13831: IFFALSE 13866
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 3
13850: PPUSH
13851: LD_INT 6
13853: PPUSH
13854: CALL_OW 12
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: CALL_OW 483
// end ;
13866: GO 13726
13868: POP
13869: POP
// end ;
13870: PPOPN 5
13872: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13873: LD_EXP 40
13877: PUSH
13878: LD_EXP 75
13882: AND
13883: IFFALSE 13977
13885: GO 13887
13887: DISABLE
13888: LD_INT 0
13890: PPUSH
13891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13892: LD_ADDR_VAR 0 2
13896: PUSH
13897: LD_INT 22
13899: PUSH
13900: LD_OWVAR 2
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 32
13911: PUSH
13912: LD_INT 1
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 21
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: ST_TO_ADDR
// if not tmp then
13939: LD_VAR 0 2
13943: NOT
13944: IFFALSE 13948
// exit ;
13946: GO 13977
// for i in tmp do
13948: LD_ADDR_VAR 0 1
13952: PUSH
13953: LD_VAR 0 2
13957: PUSH
13958: FOR_IN
13959: IFFALSE 13975
// SetFuel ( i , 0 ) ;
13961: LD_VAR 0 1
13965: PPUSH
13966: LD_INT 0
13968: PPUSH
13969: CALL_OW 240
13973: GO 13958
13975: POP
13976: POP
// end ;
13977: PPOPN 2
13979: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13980: LD_EXP 40
13984: PUSH
13985: LD_EXP 76
13989: AND
13990: IFFALSE 14056
13992: GO 13994
13994: DISABLE
13995: LD_INT 0
13997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13998: LD_ADDR_VAR 0 1
14002: PUSH
14003: LD_INT 22
14005: PUSH
14006: LD_OWVAR 2
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 30
14017: PUSH
14018: LD_INT 29
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: ST_TO_ADDR
// if not tmp then
14034: LD_VAR 0 1
14038: NOT
14039: IFFALSE 14043
// exit ;
14041: GO 14056
// DestroyUnit ( tmp [ 1 ] ) ;
14043: LD_VAR 0 1
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: PPUSH
14052: CALL_OW 65
// end ;
14056: PPOPN 1
14058: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14059: LD_EXP 40
14063: PUSH
14064: LD_EXP 78
14068: AND
14069: IFFALSE 14198
14071: GO 14073
14073: DISABLE
14074: LD_INT 0
14076: PPUSH
// begin uc_side := 0 ;
14077: LD_ADDR_OWVAR 20
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// uc_nation := nation_arabian ;
14085: LD_ADDR_OWVAR 21
14089: PUSH
14090: LD_INT 2
14092: ST_TO_ADDR
// hc_gallery :=  ;
14093: LD_ADDR_OWVAR 33
14097: PUSH
14098: LD_STRING 
14100: ST_TO_ADDR
// hc_name :=  ;
14101: LD_ADDR_OWVAR 26
14105: PUSH
14106: LD_STRING 
14108: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14109: LD_INT 1
14111: PPUSH
14112: LD_INT 11
14114: PPUSH
14115: LD_INT 10
14117: PPUSH
14118: CALL_OW 380
// un := CreateHuman ;
14122: LD_ADDR_VAR 0 1
14126: PUSH
14127: CALL_OW 44
14131: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14132: LD_VAR 0 1
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14144: LD_INT 35
14146: PPUSH
14147: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14151: LD_VAR 0 1
14155: PPUSH
14156: LD_INT 22
14158: PUSH
14159: LD_OWVAR 2
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: PPUSH
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 74
14182: PPUSH
14183: CALL_OW 115
// until IsDead ( un ) ;
14187: LD_VAR 0 1
14191: PPUSH
14192: CALL_OW 301
14196: IFFALSE 14144
// end ;
14198: PPOPN 1
14200: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14201: LD_EXP 40
14205: PUSH
14206: LD_EXP 80
14210: AND
14211: IFFALSE 14223
14213: GO 14215
14215: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14216: LD_STRING earthquake(getX(game), 0, 32)
14218: PPUSH
14219: CALL_OW 559
14223: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14224: LD_EXP 40
14228: PUSH
14229: LD_EXP 81
14233: AND
14234: IFFALSE 14325
14236: GO 14238
14238: DISABLE
14239: LD_INT 0
14241: PPUSH
// begin enable ;
14242: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_OWVAR 2
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 21
14262: PUSH
14263: LD_INT 2
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 33
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: ST_TO_ADDR
// if not tmp then
14290: LD_VAR 0 1
14294: NOT
14295: IFFALSE 14299
// exit ;
14297: GO 14325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14299: LD_VAR 0 1
14303: PUSH
14304: LD_INT 1
14306: PPUSH
14307: LD_VAR 0 1
14311: PPUSH
14312: CALL_OW 12
14316: ARRAY
14317: PPUSH
14318: LD_INT 1
14320: PPUSH
14321: CALL_OW 234
// end ;
14325: PPOPN 1
14327: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14328: LD_EXP 40
14332: PUSH
14333: LD_EXP 82
14337: AND
14338: IFFALSE 14479
14340: GO 14342
14342: DISABLE
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
14347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14348: LD_ADDR_VAR 0 3
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_OWVAR 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 25
14367: PUSH
14368: LD_INT 1
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 69
14383: ST_TO_ADDR
// if not tmp then
14384: LD_VAR 0 3
14388: NOT
14389: IFFALSE 14393
// exit ;
14391: GO 14479
// un := tmp [ rand ( 1 , tmp ) ] ;
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: LD_VAR 0 3
14402: PUSH
14403: LD_INT 1
14405: PPUSH
14406: LD_VAR 0 3
14410: PPUSH
14411: CALL_OW 12
14415: ARRAY
14416: ST_TO_ADDR
// if Crawls ( un ) then
14417: LD_VAR 0 2
14421: PPUSH
14422: CALL_OW 318
14426: IFFALSE 14437
// ComWalk ( un ) ;
14428: LD_VAR 0 2
14432: PPUSH
14433: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14437: LD_VAR 0 2
14441: PPUSH
14442: LD_INT 9
14444: PPUSH
14445: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14449: LD_INT 28
14451: PPUSH
14452: LD_OWVAR 2
14456: PPUSH
14457: LD_INT 2
14459: PPUSH
14460: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14464: LD_INT 29
14466: PPUSH
14467: LD_OWVAR 2
14471: PPUSH
14472: LD_INT 2
14474: PPUSH
14475: CALL_OW 322
// end ;
14479: PPOPN 3
14481: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14482: LD_EXP 40
14486: PUSH
14487: LD_EXP 83
14491: AND
14492: IFFALSE 14603
14494: GO 14496
14496: DISABLE
14497: LD_INT 0
14499: PPUSH
14500: PPUSH
14501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14502: LD_ADDR_VAR 0 3
14506: PUSH
14507: LD_INT 22
14509: PUSH
14510: LD_OWVAR 2
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 25
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: ST_TO_ADDR
// if not tmp then
14538: LD_VAR 0 3
14542: NOT
14543: IFFALSE 14547
// exit ;
14545: GO 14603
// un := tmp [ rand ( 1 , tmp ) ] ;
14547: LD_ADDR_VAR 0 2
14551: PUSH
14552: LD_VAR 0 3
14556: PUSH
14557: LD_INT 1
14559: PPUSH
14560: LD_VAR 0 3
14564: PPUSH
14565: CALL_OW 12
14569: ARRAY
14570: ST_TO_ADDR
// if Crawls ( un ) then
14571: LD_VAR 0 2
14575: PPUSH
14576: CALL_OW 318
14580: IFFALSE 14591
// ComWalk ( un ) ;
14582: LD_VAR 0 2
14586: PPUSH
14587: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 8
14598: PPUSH
14599: CALL_OW 336
// end ;
14603: PPOPN 3
14605: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14606: LD_EXP 40
14610: PUSH
14611: LD_EXP 84
14615: AND
14616: IFFALSE 14760
14618: GO 14620
14620: DISABLE
14621: LD_INT 0
14623: PPUSH
14624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14625: LD_ADDR_VAR 0 2
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_OWVAR 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 21
14644: PUSH
14645: LD_INT 2
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 2
14654: PUSH
14655: LD_INT 34
14657: PUSH
14658: LD_INT 12
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 34
14667: PUSH
14668: LD_INT 51
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 34
14677: PUSH
14678: LD_INT 32
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: ST_TO_ADDR
// if not tmp then
14701: LD_VAR 0 2
14705: NOT
14706: IFFALSE 14710
// exit ;
14708: GO 14760
// for i in tmp do
14710: LD_ADDR_VAR 0 1
14714: PUSH
14715: LD_VAR 0 2
14719: PUSH
14720: FOR_IN
14721: IFFALSE 14758
// if GetCargo ( i , mat_artifact ) = 0 then
14723: LD_VAR 0 1
14727: PPUSH
14728: LD_INT 4
14730: PPUSH
14731: CALL_OW 289
14735: PUSH
14736: LD_INT 0
14738: EQUAL
14739: IFFALSE 14756
// SetCargo ( i , mat_siberit , 100 ) ;
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_INT 3
14748: PPUSH
14749: LD_INT 100
14751: PPUSH
14752: CALL_OW 290
14756: GO 14720
14758: POP
14759: POP
// end ;
14760: PPOPN 2
14762: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14763: LD_EXP 40
14767: PUSH
14768: LD_EXP 85
14772: AND
14773: IFFALSE 14956
14775: GO 14777
14777: DISABLE
14778: LD_INT 0
14780: PPUSH
14781: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 22
14789: PUSH
14790: LD_OWVAR 2
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: ST_TO_ADDR
// if not tmp then
14804: LD_VAR 0 2
14808: NOT
14809: IFFALSE 14813
// exit ;
14811: GO 14956
// for i := 1 to 2 do
14813: LD_ADDR_VAR 0 1
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_INT 2
14825: PUSH
14826: FOR_TO
14827: IFFALSE 14954
// begin uc_side := your_side ;
14829: LD_ADDR_OWVAR 20
14833: PUSH
14834: LD_OWVAR 2
14838: ST_TO_ADDR
// uc_nation := nation_american ;
14839: LD_ADDR_OWVAR 21
14843: PUSH
14844: LD_INT 1
14846: ST_TO_ADDR
// vc_chassis := us_morphling ;
14847: LD_ADDR_OWVAR 37
14851: PUSH
14852: LD_INT 5
14854: ST_TO_ADDR
// vc_engine := engine_siberite ;
14855: LD_ADDR_OWVAR 39
14859: PUSH
14860: LD_INT 3
14862: ST_TO_ADDR
// vc_control := control_computer ;
14863: LD_ADDR_OWVAR 38
14867: PUSH
14868: LD_INT 3
14870: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14871: LD_ADDR_OWVAR 40
14875: PUSH
14876: LD_INT 10
14878: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14879: LD_VAR 0 2
14883: PUSH
14884: LD_INT 1
14886: ARRAY
14887: PPUSH
14888: CALL_OW 310
14892: NOT
14893: IFFALSE 14940
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14895: CALL_OW 45
14899: PPUSH
14900: LD_VAR 0 2
14904: PUSH
14905: LD_INT 1
14907: ARRAY
14908: PPUSH
14909: CALL_OW 250
14913: PPUSH
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PPUSH
14923: CALL_OW 251
14927: PPUSH
14928: LD_INT 12
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 50
14938: GO 14952
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14940: CALL_OW 45
14944: PPUSH
14945: LD_INT 1
14947: PPUSH
14948: CALL_OW 51
// end ;
14952: GO 14826
14954: POP
14955: POP
// end ;
14956: PPOPN 2
14958: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14959: LD_EXP 40
14963: PUSH
14964: LD_EXP 86
14968: AND
14969: IFFALSE 15191
14971: GO 14973
14973: DISABLE
14974: LD_INT 0
14976: PPUSH
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14982: LD_ADDR_VAR 0 6
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: LD_INT 23
15014: PUSH
15015: LD_INT 0
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: PPUSH
15031: CALL_OW 69
15035: ST_TO_ADDR
// if not tmp then
15036: LD_VAR 0 6
15040: NOT
15041: IFFALSE 15045
// exit ;
15043: GO 15191
// s1 := rand ( 1 , 4 ) ;
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_INT 1
15052: PPUSH
15053: LD_INT 4
15055: PPUSH
15056: CALL_OW 12
15060: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15061: LD_ADDR_VAR 0 4
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: ARRAY
15074: PPUSH
15075: LD_VAR 0 2
15079: PPUSH
15080: CALL_OW 259
15084: ST_TO_ADDR
// if s1 = 1 then
15085: LD_VAR 0 2
15089: PUSH
15090: LD_INT 1
15092: EQUAL
15093: IFFALSE 15113
// s2 := rand ( 2 , 4 ) else
15095: LD_ADDR_VAR 0 3
15099: PUSH
15100: LD_INT 2
15102: PPUSH
15103: LD_INT 4
15105: PPUSH
15106: CALL_OW 12
15110: ST_TO_ADDR
15111: GO 15121
// s2 := 1 ;
15113: LD_ADDR_VAR 0 3
15117: PUSH
15118: LD_INT 1
15120: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15121: LD_ADDR_VAR 0 5
15125: PUSH
15126: LD_VAR 0 6
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: LD_VAR 0 3
15139: PPUSH
15140: CALL_OW 259
15144: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15145: LD_VAR 0 6
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: PPUSH
15154: LD_VAR 0 2
15158: PPUSH
15159: LD_VAR 0 5
15163: PPUSH
15164: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15168: LD_VAR 0 6
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_VAR 0 4
15186: PPUSH
15187: CALL_OW 237
// end ;
15191: PPOPN 6
15193: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15194: LD_EXP 40
15198: PUSH
15199: LD_EXP 87
15203: AND
15204: IFFALSE 15283
15206: GO 15208
15208: DISABLE
15209: LD_INT 0
15211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15212: LD_ADDR_VAR 0 1
15216: PUSH
15217: LD_INT 22
15219: PUSH
15220: LD_OWVAR 2
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 30
15231: PUSH
15232: LD_INT 3
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PPUSH
15243: CALL_OW 69
15247: ST_TO_ADDR
// if not tmp then
15248: LD_VAR 0 1
15252: NOT
15253: IFFALSE 15257
// exit ;
15255: GO 15283
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15257: LD_VAR 0 1
15261: PUSH
15262: LD_INT 1
15264: PPUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: CALL_OW 12
15274: ARRAY
15275: PPUSH
15276: LD_INT 1
15278: PPUSH
15279: CALL_OW 234
// end ;
15283: PPOPN 1
15285: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15286: LD_EXP 40
15290: PUSH
15291: LD_EXP 88
15295: AND
15296: IFFALSE 15408
15298: GO 15300
15300: DISABLE
15301: LD_INT 0
15303: PPUSH
15304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_OWVAR 2
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 30
15327: PUSH
15328: LD_INT 27
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 30
15337: PUSH
15338: LD_INT 26
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 30
15347: PUSH
15348: LD_INT 28
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PPUSH
15365: CALL_OW 69
15369: ST_TO_ADDR
// if not tmp then
15370: LD_VAR 0 2
15374: NOT
15375: IFFALSE 15379
// exit ;
15377: GO 15408
// for i in tmp do
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_VAR 0 2
15388: PUSH
15389: FOR_IN
15390: IFFALSE 15406
// SetLives ( i , 1 ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: LD_INT 1
15399: PPUSH
15400: CALL_OW 234
15404: GO 15389
15406: POP
15407: POP
// end ;
15408: PPOPN 2
15410: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15411: LD_EXP 40
15415: PUSH
15416: LD_EXP 89
15420: AND
15421: IFFALSE 15708
15423: GO 15425
15425: DISABLE
15426: LD_INT 0
15428: PPUSH
15429: PPUSH
15430: PPUSH
// begin i := rand ( 1 , 7 ) ;
15431: LD_ADDR_VAR 0 1
15435: PUSH
15436: LD_INT 1
15438: PPUSH
15439: LD_INT 7
15441: PPUSH
15442: CALL_OW 12
15446: ST_TO_ADDR
// case i of 1 :
15447: LD_VAR 0 1
15451: PUSH
15452: LD_INT 1
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15460
15458: GO 15470
15460: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15461: LD_STRING earthquake(getX(game), 0, 32)
15463: PPUSH
15464: CALL_OW 559
15468: GO 15708
15470: LD_INT 2
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15492
15478: POP
// begin ToLua ( displayStucuk(); ) ;
15479: LD_STRING displayStucuk();
15481: PPUSH
15482: CALL_OW 559
// ResetFog ;
15486: CALL_OW 335
// end ; 3 :
15490: GO 15708
15492: LD_INT 3
15494: DOUBLE
15495: EQUAL
15496: IFTRUE 15500
15498: GO 15604
15500: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15501: LD_ADDR_VAR 0 2
15505: PUSH
15506: LD_INT 22
15508: PUSH
15509: LD_OWVAR 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: ST_TO_ADDR
// if not tmp then
15537: LD_VAR 0 2
15541: NOT
15542: IFFALSE 15546
// exit ;
15544: GO 15708
// un := tmp [ rand ( 1 , tmp ) ] ;
15546: LD_ADDR_VAR 0 3
15550: PUSH
15551: LD_VAR 0 2
15555: PUSH
15556: LD_INT 1
15558: PPUSH
15559: LD_VAR 0 2
15563: PPUSH
15564: CALL_OW 12
15568: ARRAY
15569: ST_TO_ADDR
// if Crawls ( un ) then
15570: LD_VAR 0 3
15574: PPUSH
15575: CALL_OW 318
15579: IFFALSE 15590
// ComWalk ( un ) ;
15581: LD_VAR 0 3
15585: PPUSH
15586: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_INT 8
15597: PPUSH
15598: CALL_OW 336
// end ; 4 :
15602: GO 15708
15604: LD_INT 4
15606: DOUBLE
15607: EQUAL
15608: IFTRUE 15612
15610: GO 15686
15612: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15613: LD_ADDR_VAR 0 2
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_OWVAR 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 30
15632: PUSH
15633: LD_INT 29
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: ST_TO_ADDR
// if not tmp then
15649: LD_VAR 0 2
15653: NOT
15654: IFFALSE 15658
// exit ;
15656: GO 15708
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15658: LD_VAR 0 2
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PPUSH
15667: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15671: LD_VAR 0 2
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PPUSH
15680: CALL_OW 65
// end ; 5 .. 7 :
15684: GO 15708
15686: LD_INT 5
15688: DOUBLE
15689: GREATEREQUAL
15690: IFFALSE 15698
15692: LD_INT 7
15694: DOUBLE
15695: LESSEQUAL
15696: IFTRUE 15700
15698: GO 15707
15700: POP
// StreamSibBomb ; end ;
15701: CALL 11945 0 0
15705: GO 15708
15707: POP
// end ;
15708: PPOPN 3
15710: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15711: LD_EXP 40
15715: PUSH
15716: LD_EXP 90
15720: AND
15721: IFFALSE 15877
15723: GO 15725
15725: DISABLE
15726: LD_INT 0
15728: PPUSH
15729: PPUSH
15730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15731: LD_ADDR_VAR 0 2
15735: PUSH
15736: LD_INT 81
15738: PUSH
15739: LD_OWVAR 2
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 2
15750: PUSH
15751: LD_INT 21
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 21
15763: PUSH
15764: LD_INT 2
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PPUSH
15780: CALL_OW 69
15784: ST_TO_ADDR
// if not tmp then
15785: LD_VAR 0 2
15789: NOT
15790: IFFALSE 15794
// exit ;
15792: GO 15877
// p := 0 ;
15794: LD_ADDR_VAR 0 3
15798: PUSH
15799: LD_INT 0
15801: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15802: LD_INT 35
15804: PPUSH
15805: CALL_OW 67
// p := p + 1 ;
15809: LD_ADDR_VAR 0 3
15813: PUSH
15814: LD_VAR 0 3
15818: PUSH
15819: LD_INT 1
15821: PLUS
15822: ST_TO_ADDR
// for i in tmp do
15823: LD_ADDR_VAR 0 1
15827: PUSH
15828: LD_VAR 0 2
15832: PUSH
15833: FOR_IN
15834: IFFALSE 15865
// if GetLives ( i ) < 1000 then
15836: LD_VAR 0 1
15840: PPUSH
15841: CALL_OW 256
15845: PUSH
15846: LD_INT 1000
15848: LESS
15849: IFFALSE 15863
// SetLives ( i , 1000 ) ;
15851: LD_VAR 0 1
15855: PPUSH
15856: LD_INT 1000
15858: PPUSH
15859: CALL_OW 234
15863: GO 15833
15865: POP
15866: POP
// until p > 20 ;
15867: LD_VAR 0 3
15871: PUSH
15872: LD_INT 20
15874: GREATER
15875: IFFALSE 15802
// end ;
15877: PPOPN 3
15879: END
// every 0 0$1 trigger StreamModeActive and sTime do
15880: LD_EXP 40
15884: PUSH
15885: LD_EXP 91
15889: AND
15890: IFFALSE 15925
15892: GO 15894
15894: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15895: LD_INT 28
15897: PPUSH
15898: LD_OWVAR 2
15902: PPUSH
15903: LD_INT 2
15905: PPUSH
15906: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15910: LD_INT 30
15912: PPUSH
15913: LD_OWVAR 2
15917: PPUSH
15918: LD_INT 2
15920: PPUSH
15921: CALL_OW 322
// end ;
15925: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15926: LD_EXP 40
15930: PUSH
15931: LD_EXP 92
15935: AND
15936: IFFALSE 16057
15938: GO 15940
15940: DISABLE
15941: LD_INT 0
15943: PPUSH
15944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15945: LD_ADDR_VAR 0 2
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: LD_OWVAR 2
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 21
15964: PUSH
15965: LD_INT 1
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 3
15974: PUSH
15975: LD_INT 23
15977: PUSH
15978: LD_INT 0
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: PPUSH
15994: CALL_OW 69
15998: ST_TO_ADDR
// if not tmp then
15999: LD_VAR 0 2
16003: NOT
16004: IFFALSE 16008
// exit ;
16006: GO 16057
// for i in tmp do
16008: LD_ADDR_VAR 0 1
16012: PUSH
16013: LD_VAR 0 2
16017: PUSH
16018: FOR_IN
16019: IFFALSE 16055
// begin if Crawls ( i ) then
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 318
16030: IFFALSE 16041
// ComWalk ( i ) ;
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 138
// SetClass ( i , 2 ) ;
16041: LD_VAR 0 1
16045: PPUSH
16046: LD_INT 2
16048: PPUSH
16049: CALL_OW 336
// end ;
16053: GO 16018
16055: POP
16056: POP
// end ;
16057: PPOPN 2
16059: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16060: LD_EXP 40
16064: PUSH
16065: LD_EXP 93
16069: AND
16070: IFFALSE 16358
16072: GO 16074
16074: DISABLE
16075: LD_INT 0
16077: PPUSH
16078: PPUSH
16079: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16080: LD_OWVAR 2
16084: PPUSH
16085: LD_INT 9
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16098: LD_INT 9
16100: PPUSH
16101: LD_OWVAR 2
16105: PPUSH
16106: CALL_OW 343
// uc_side := 9 ;
16110: LD_ADDR_OWVAR 20
16114: PUSH
16115: LD_INT 9
16117: ST_TO_ADDR
// uc_nation := 2 ;
16118: LD_ADDR_OWVAR 21
16122: PUSH
16123: LD_INT 2
16125: ST_TO_ADDR
// hc_name := Dark Warrior ;
16126: LD_ADDR_OWVAR 26
16130: PUSH
16131: LD_STRING Dark Warrior
16133: ST_TO_ADDR
// hc_gallery :=  ;
16134: LD_ADDR_OWVAR 33
16138: PUSH
16139: LD_STRING 
16141: ST_TO_ADDR
// hc_noskilllimit := true ;
16142: LD_ADDR_OWVAR 76
16146: PUSH
16147: LD_INT 1
16149: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16150: LD_ADDR_OWVAR 31
16154: PUSH
16155: LD_INT 30
16157: PUSH
16158: LD_INT 30
16160: PUSH
16161: LD_INT 30
16163: PUSH
16164: LD_INT 30
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
// un := CreateHuman ;
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: CALL_OW 44
16182: ST_TO_ADDR
// hc_noskilllimit := false ;
16183: LD_ADDR_OWVAR 76
16187: PUSH
16188: LD_INT 0
16190: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16191: LD_VAR 0 3
16195: PPUSH
16196: LD_INT 1
16198: PPUSH
16199: CALL_OW 51
// ToLua ( playRanger() ) ;
16203: LD_STRING playRanger()
16205: PPUSH
16206: CALL_OW 559
// p := 0 ;
16210: LD_ADDR_VAR 0 2
16214: PUSH
16215: LD_INT 0
16217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16218: LD_INT 35
16220: PPUSH
16221: CALL_OW 67
// p := p + 1 ;
16225: LD_ADDR_VAR 0 2
16229: PUSH
16230: LD_VAR 0 2
16234: PUSH
16235: LD_INT 1
16237: PLUS
16238: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16239: LD_VAR 0 3
16243: PPUSH
16244: CALL_OW 256
16248: PUSH
16249: LD_INT 1000
16251: LESS
16252: IFFALSE 16266
// SetLives ( un , 1000 ) ;
16254: LD_VAR 0 3
16258: PPUSH
16259: LD_INT 1000
16261: PPUSH
16262: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16266: LD_VAR 0 3
16270: PPUSH
16271: LD_INT 81
16273: PUSH
16274: LD_OWVAR 2
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 91
16285: PUSH
16286: LD_VAR 0 3
16290: PUSH
16291: LD_INT 30
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PPUSH
16303: CALL_OW 69
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: CALL_OW 74
16317: PPUSH
16318: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16322: LD_VAR 0 2
16326: PUSH
16327: LD_INT 80
16329: GREATER
16330: PUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: CALL_OW 301
16340: OR
16341: IFFALSE 16218
// if un then
16343: LD_VAR 0 3
16347: IFFALSE 16358
// RemoveUnit ( un ) ;
16349: LD_VAR 0 3
16353: PPUSH
16354: CALL_OW 64
// end ;
16358: PPOPN 3
16360: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16361: LD_EXP 94
16365: IFFALSE 16481
16367: GO 16369
16369: DISABLE
16370: LD_INT 0
16372: PPUSH
16373: PPUSH
16374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16375: LD_ADDR_VAR 0 2
16379: PUSH
16380: LD_INT 81
16382: PUSH
16383: LD_OWVAR 2
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 21
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PPUSH
16406: CALL_OW 69
16410: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16411: LD_STRING playComputer()
16413: PPUSH
16414: CALL_OW 559
// if not tmp then
16418: LD_VAR 0 2
16422: NOT
16423: IFFALSE 16427
// exit ;
16425: GO 16481
// for i in tmp do
16427: LD_ADDR_VAR 0 1
16431: PUSH
16432: LD_VAR 0 2
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16479
// for j := 1 to 4 do
16440: LD_ADDR_VAR 0 3
16444: PUSH
16445: DOUBLE
16446: LD_INT 1
16448: DEC
16449: ST_TO_ADDR
16450: LD_INT 4
16452: PUSH
16453: FOR_TO
16454: IFFALSE 16475
// SetSkill ( i , j , 10 ) ;
16456: LD_VAR 0 1
16460: PPUSH
16461: LD_VAR 0 3
16465: PPUSH
16466: LD_INT 10
16468: PPUSH
16469: CALL_OW 237
16473: GO 16453
16475: POP
16476: POP
16477: GO 16437
16479: POP
16480: POP
// end ;
16481: PPOPN 3
16483: END
// every 0 0$1 trigger s30 do var i , tmp ;
16484: LD_EXP 95
16488: IFFALSE 16557
16490: GO 16492
16492: DISABLE
16493: LD_INT 0
16495: PPUSH
16496: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16497: LD_ADDR_VAR 0 2
16501: PUSH
16502: LD_INT 22
16504: PUSH
16505: LD_OWVAR 2
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: ST_TO_ADDR
// if not tmp then
16519: LD_VAR 0 2
16523: NOT
16524: IFFALSE 16528
// exit ;
16526: GO 16557
// for i in tmp do
16528: LD_ADDR_VAR 0 1
16532: PUSH
16533: LD_VAR 0 2
16537: PUSH
16538: FOR_IN
16539: IFFALSE 16555
// SetLives ( i , 300 ) ;
16541: LD_VAR 0 1
16545: PPUSH
16546: LD_INT 300
16548: PPUSH
16549: CALL_OW 234
16553: GO 16538
16555: POP
16556: POP
// end ;
16557: PPOPN 2
16559: END
// every 0 0$1 trigger s60 do var i , tmp ;
16560: LD_EXP 96
16564: IFFALSE 16633
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16573: LD_ADDR_VAR 0 2
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: ST_TO_ADDR
// if not tmp then
16595: LD_VAR 0 2
16599: NOT
16600: IFFALSE 16604
// exit ;
16602: GO 16633
// for i in tmp do
16604: LD_ADDR_VAR 0 1
16608: PUSH
16609: LD_VAR 0 2
16613: PUSH
16614: FOR_IN
16615: IFFALSE 16631
// SetLives ( i , 600 ) ;
16617: LD_VAR 0 1
16621: PPUSH
16622: LD_INT 600
16624: PPUSH
16625: CALL_OW 234
16629: GO 16614
16631: POP
16632: POP
// end ;
16633: PPOPN 2
16635: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16636: LD_INT 0
16638: PPUSH
// case cmd of 301 :
16639: LD_VAR 0 1
16643: PUSH
16644: LD_INT 301
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16684
16652: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16653: LD_VAR 0 6
16657: PPUSH
16658: LD_VAR 0 7
16662: PPUSH
16663: LD_VAR 0 8
16667: PPUSH
16668: LD_VAR 0 4
16672: PPUSH
16673: LD_VAR 0 5
16677: PPUSH
16678: CALL 17893 0 5
16682: GO 16805
16684: LD_INT 302
16686: DOUBLE
16687: EQUAL
16688: IFTRUE 16692
16690: GO 16729
16692: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16693: LD_VAR 0 6
16697: PPUSH
16698: LD_VAR 0 7
16702: PPUSH
16703: LD_VAR 0 8
16707: PPUSH
16708: LD_VAR 0 9
16712: PPUSH
16713: LD_VAR 0 4
16717: PPUSH
16718: LD_VAR 0 5
16722: PPUSH
16723: CALL 17984 0 6
16727: GO 16805
16729: LD_INT 303
16731: DOUBLE
16732: EQUAL
16733: IFTRUE 16737
16735: GO 16774
16737: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16738: LD_VAR 0 6
16742: PPUSH
16743: LD_VAR 0 7
16747: PPUSH
16748: LD_VAR 0 8
16752: PPUSH
16753: LD_VAR 0 9
16757: PPUSH
16758: LD_VAR 0 4
16762: PPUSH
16763: LD_VAR 0 5
16767: PPUSH
16768: CALL 16810 0 6
16772: GO 16805
16774: LD_INT 304
16776: DOUBLE
16777: EQUAL
16778: IFTRUE 16782
16780: GO 16804
16782: POP
// hHackTeleport ( unit , x , y ) ; end ;
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_VAR 0 4
16792: PPUSH
16793: LD_VAR 0 5
16797: PPUSH
16798: CALL 18577 0 3
16802: GO 16805
16804: POP
// end ;
16805: LD_VAR 0 12
16809: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16810: LD_INT 0
16812: PPUSH
16813: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16814: LD_VAR 0 1
16818: PUSH
16819: LD_INT 1
16821: LESS
16822: PUSH
16823: LD_VAR 0 1
16827: PUSH
16828: LD_INT 3
16830: GREATER
16831: OR
16832: PUSH
16833: LD_VAR 0 5
16837: PPUSH
16838: LD_VAR 0 6
16842: PPUSH
16843: CALL_OW 428
16847: OR
16848: IFFALSE 16852
// exit ;
16850: GO 17580
// uc_side := your_side ;
16852: LD_ADDR_OWVAR 20
16856: PUSH
16857: LD_OWVAR 2
16861: ST_TO_ADDR
// uc_nation := nation ;
16862: LD_ADDR_OWVAR 21
16866: PUSH
16867: LD_VAR 0 1
16871: ST_TO_ADDR
// bc_level = 1 ;
16872: LD_ADDR_OWVAR 43
16876: PUSH
16877: LD_INT 1
16879: ST_TO_ADDR
// case btype of 1 :
16880: LD_VAR 0 2
16884: PUSH
16885: LD_INT 1
16887: DOUBLE
16888: EQUAL
16889: IFTRUE 16893
16891: GO 16904
16893: POP
// bc_type := b_depot ; 2 :
16894: LD_ADDR_OWVAR 42
16898: PUSH
16899: LD_INT 0
16901: ST_TO_ADDR
16902: GO 17524
16904: LD_INT 2
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 16923
16912: POP
// bc_type := b_warehouse ; 3 :
16913: LD_ADDR_OWVAR 42
16917: PUSH
16918: LD_INT 1
16920: ST_TO_ADDR
16921: GO 17524
16923: LD_INT 3
16925: DOUBLE
16926: EQUAL
16927: IFTRUE 16931
16929: GO 16942
16931: POP
// bc_type := b_lab ; 4 .. 9 :
16932: LD_ADDR_OWVAR 42
16936: PUSH
16937: LD_INT 6
16939: ST_TO_ADDR
16940: GO 17524
16942: LD_INT 4
16944: DOUBLE
16945: GREATEREQUAL
16946: IFFALSE 16954
16948: LD_INT 9
16950: DOUBLE
16951: LESSEQUAL
16952: IFTRUE 16956
16954: GO 17016
16956: POP
// begin bc_type := b_lab_half ;
16957: LD_ADDR_OWVAR 42
16961: PUSH
16962: LD_INT 7
16964: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16965: LD_ADDR_OWVAR 44
16969: PUSH
16970: LD_INT 10
16972: PUSH
16973: LD_INT 11
16975: PUSH
16976: LD_INT 12
16978: PUSH
16979: LD_INT 15
16981: PUSH
16982: LD_INT 14
16984: PUSH
16985: LD_INT 13
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: PUSH
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 3
17003: MINUS
17004: ARRAY
17005: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17006: LD_ADDR_OWVAR 45
17010: PUSH
17011: LD_INT 9
17013: ST_TO_ADDR
// end ; 10 .. 13 :
17014: GO 17524
17016: LD_INT 10
17018: DOUBLE
17019: GREATEREQUAL
17020: IFFALSE 17028
17022: LD_INT 13
17024: DOUBLE
17025: LESSEQUAL
17026: IFTRUE 17030
17028: GO 17107
17030: POP
// begin bc_type := b_lab_full ;
17031: LD_ADDR_OWVAR 42
17035: PUSH
17036: LD_INT 8
17038: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17039: LD_ADDR_OWVAR 44
17043: PUSH
17044: LD_INT 10
17046: PUSH
17047: LD_INT 12
17049: PUSH
17050: LD_INT 14
17052: PUSH
17053: LD_INT 13
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: PUSH
17062: LD_VAR 0 2
17066: PUSH
17067: LD_INT 9
17069: MINUS
17070: ARRAY
17071: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17072: LD_ADDR_OWVAR 45
17076: PUSH
17077: LD_INT 11
17079: PUSH
17080: LD_INT 15
17082: PUSH
17083: LD_INT 12
17085: PUSH
17086: LD_INT 15
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: PUSH
17095: LD_VAR 0 2
17099: PUSH
17100: LD_INT 9
17102: MINUS
17103: ARRAY
17104: ST_TO_ADDR
// end ; 14 :
17105: GO 17524
17107: LD_INT 14
17109: DOUBLE
17110: EQUAL
17111: IFTRUE 17115
17113: GO 17126
17115: POP
// bc_type := b_workshop ; 15 :
17116: LD_ADDR_OWVAR 42
17120: PUSH
17121: LD_INT 2
17123: ST_TO_ADDR
17124: GO 17524
17126: LD_INT 15
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17145
17134: POP
// bc_type := b_factory ; 16 :
17135: LD_ADDR_OWVAR 42
17139: PUSH
17140: LD_INT 3
17142: ST_TO_ADDR
17143: GO 17524
17145: LD_INT 16
17147: DOUBLE
17148: EQUAL
17149: IFTRUE 17153
17151: GO 17164
17153: POP
// bc_type := b_ext_gun ; 17 :
17154: LD_ADDR_OWVAR 42
17158: PUSH
17159: LD_INT 17
17161: ST_TO_ADDR
17162: GO 17524
17164: LD_INT 17
17166: DOUBLE
17167: EQUAL
17168: IFTRUE 17172
17170: GO 17200
17172: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17173: LD_ADDR_OWVAR 42
17177: PUSH
17178: LD_INT 19
17180: PUSH
17181: LD_INT 23
17183: PUSH
17184: LD_INT 19
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: PUSH
17192: LD_VAR 0 1
17196: ARRAY
17197: ST_TO_ADDR
17198: GO 17524
17200: LD_INT 18
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17219
17208: POP
// bc_type := b_ext_radar ; 19 :
17209: LD_ADDR_OWVAR 42
17213: PUSH
17214: LD_INT 20
17216: ST_TO_ADDR
17217: GO 17524
17219: LD_INT 19
17221: DOUBLE
17222: EQUAL
17223: IFTRUE 17227
17225: GO 17238
17227: POP
// bc_type := b_ext_radio ; 20 :
17228: LD_ADDR_OWVAR 42
17232: PUSH
17233: LD_INT 22
17235: ST_TO_ADDR
17236: GO 17524
17238: LD_INT 20
17240: DOUBLE
17241: EQUAL
17242: IFTRUE 17246
17244: GO 17257
17246: POP
// bc_type := b_ext_siberium ; 21 :
17247: LD_ADDR_OWVAR 42
17251: PUSH
17252: LD_INT 21
17254: ST_TO_ADDR
17255: GO 17524
17257: LD_INT 21
17259: DOUBLE
17260: EQUAL
17261: IFTRUE 17265
17263: GO 17276
17265: POP
// bc_type := b_ext_computer ; 22 :
17266: LD_ADDR_OWVAR 42
17270: PUSH
17271: LD_INT 24
17273: ST_TO_ADDR
17274: GO 17524
17276: LD_INT 22
17278: DOUBLE
17279: EQUAL
17280: IFTRUE 17284
17282: GO 17295
17284: POP
// bc_type := b_ext_track ; 23 :
17285: LD_ADDR_OWVAR 42
17289: PUSH
17290: LD_INT 16
17292: ST_TO_ADDR
17293: GO 17524
17295: LD_INT 23
17297: DOUBLE
17298: EQUAL
17299: IFTRUE 17303
17301: GO 17314
17303: POP
// bc_type := b_ext_laser ; 24 :
17304: LD_ADDR_OWVAR 42
17308: PUSH
17309: LD_INT 25
17311: ST_TO_ADDR
17312: GO 17524
17314: LD_INT 24
17316: DOUBLE
17317: EQUAL
17318: IFTRUE 17322
17320: GO 17333
17322: POP
// bc_type := b_control_tower ; 25 :
17323: LD_ADDR_OWVAR 42
17327: PUSH
17328: LD_INT 36
17330: ST_TO_ADDR
17331: GO 17524
17333: LD_INT 25
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17352
17341: POP
// bc_type := b_breastwork ; 26 :
17342: LD_ADDR_OWVAR 42
17346: PUSH
17347: LD_INT 31
17349: ST_TO_ADDR
17350: GO 17524
17352: LD_INT 26
17354: DOUBLE
17355: EQUAL
17356: IFTRUE 17360
17358: GO 17371
17360: POP
// bc_type := b_bunker ; 27 :
17361: LD_ADDR_OWVAR 42
17365: PUSH
17366: LD_INT 32
17368: ST_TO_ADDR
17369: GO 17524
17371: LD_INT 27
17373: DOUBLE
17374: EQUAL
17375: IFTRUE 17379
17377: GO 17390
17379: POP
// bc_type := b_turret ; 28 :
17380: LD_ADDR_OWVAR 42
17384: PUSH
17385: LD_INT 33
17387: ST_TO_ADDR
17388: GO 17524
17390: LD_INT 28
17392: DOUBLE
17393: EQUAL
17394: IFTRUE 17398
17396: GO 17409
17398: POP
// bc_type := b_armoury ; 29 :
17399: LD_ADDR_OWVAR 42
17403: PUSH
17404: LD_INT 4
17406: ST_TO_ADDR
17407: GO 17524
17409: LD_INT 29
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17417
17415: GO 17428
17417: POP
// bc_type := b_barracks ; 30 :
17418: LD_ADDR_OWVAR 42
17422: PUSH
17423: LD_INT 5
17425: ST_TO_ADDR
17426: GO 17524
17428: LD_INT 30
17430: DOUBLE
17431: EQUAL
17432: IFTRUE 17436
17434: GO 17447
17436: POP
// bc_type := b_solar_power ; 31 :
17437: LD_ADDR_OWVAR 42
17441: PUSH
17442: LD_INT 27
17444: ST_TO_ADDR
17445: GO 17524
17447: LD_INT 31
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17466
17455: POP
// bc_type := b_oil_power ; 32 :
17456: LD_ADDR_OWVAR 42
17460: PUSH
17461: LD_INT 26
17463: ST_TO_ADDR
17464: GO 17524
17466: LD_INT 32
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 17485
17474: POP
// bc_type := b_siberite_power ; 33 :
17475: LD_ADDR_OWVAR 42
17479: PUSH
17480: LD_INT 28
17482: ST_TO_ADDR
17483: GO 17524
17485: LD_INT 33
17487: DOUBLE
17488: EQUAL
17489: IFTRUE 17493
17491: GO 17504
17493: POP
// bc_type := b_oil_mine ; 34 :
17494: LD_ADDR_OWVAR 42
17498: PUSH
17499: LD_INT 29
17501: ST_TO_ADDR
17502: GO 17524
17504: LD_INT 34
17506: DOUBLE
17507: EQUAL
17508: IFTRUE 17512
17510: GO 17523
17512: POP
// bc_type := b_siberite_mine ; end ;
17513: LD_ADDR_OWVAR 42
17517: PUSH
17518: LD_INT 30
17520: ST_TO_ADDR
17521: GO 17524
17523: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17524: LD_ADDR_VAR 0 8
17528: PUSH
17529: LD_VAR 0 5
17533: PPUSH
17534: LD_VAR 0 6
17538: PPUSH
17539: LD_VAR 0 3
17543: PPUSH
17544: CALL_OW 47
17548: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17549: LD_OWVAR 42
17553: PUSH
17554: LD_INT 32
17556: PUSH
17557: LD_INT 33
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: IN
17564: IFFALSE 17580
// PlaceWeaponTurret ( b , weapon ) ;
17566: LD_VAR 0 8
17570: PPUSH
17571: LD_VAR 0 4
17575: PPUSH
17576: CALL_OW 431
// end ;
17580: LD_VAR 0 7
17584: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17585: LD_INT 0
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17591: LD_ADDR_VAR 0 4
17595: PUSH
17596: LD_INT 22
17598: PUSH
17599: LD_OWVAR 2
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 30
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 30
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: ST_TO_ADDR
// if not tmp then
17645: LD_VAR 0 4
17649: NOT
17650: IFFALSE 17654
// exit ;
17652: GO 17713
// for i in tmp do
17654: LD_ADDR_VAR 0 2
17658: PUSH
17659: LD_VAR 0 4
17663: PUSH
17664: FOR_IN
17665: IFFALSE 17711
// for j = 1 to 3 do
17667: LD_ADDR_VAR 0 3
17671: PUSH
17672: DOUBLE
17673: LD_INT 1
17675: DEC
17676: ST_TO_ADDR
17677: LD_INT 3
17679: PUSH
17680: FOR_TO
17681: IFFALSE 17707
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17683: LD_VAR 0 2
17687: PPUSH
17688: CALL_OW 274
17692: PPUSH
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_INT 99999
17700: PPUSH
17701: CALL_OW 277
17705: GO 17680
17707: POP
17708: POP
17709: GO 17664
17711: POP
17712: POP
// end ;
17713: LD_VAR 0 1
17717: RET
// export function hHackSetLevel10 ; var i , j ; begin
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
17722: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17723: LD_ADDR_VAR 0 2
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL_OW 69
17742: PUSH
17743: FOR_IN
17744: IFFALSE 17796
// if IsSelected ( i ) then
17746: LD_VAR 0 2
17750: PPUSH
17751: CALL_OW 306
17755: IFFALSE 17794
// begin for j := 1 to 4 do
17757: LD_ADDR_VAR 0 3
17761: PUSH
17762: DOUBLE
17763: LD_INT 1
17765: DEC
17766: ST_TO_ADDR
17767: LD_INT 4
17769: PUSH
17770: FOR_TO
17771: IFFALSE 17792
// SetSkill ( i , j , 10 ) ;
17773: LD_VAR 0 2
17777: PPUSH
17778: LD_VAR 0 3
17782: PPUSH
17783: LD_INT 10
17785: PPUSH
17786: CALL_OW 237
17790: GO 17770
17792: POP
17793: POP
// end ;
17794: GO 17743
17796: POP
17797: POP
// end ;
17798: LD_VAR 0 1
17802: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 21
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 69
17843: PUSH
17844: FOR_IN
17845: IFFALSE 17886
// begin for j := 1 to 4 do
17847: LD_ADDR_VAR 0 3
17851: PUSH
17852: DOUBLE
17853: LD_INT 1
17855: DEC
17856: ST_TO_ADDR
17857: LD_INT 4
17859: PUSH
17860: FOR_TO
17861: IFFALSE 17882
// SetSkill ( i , j , 10 ) ;
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_VAR 0 3
17872: PPUSH
17873: LD_INT 10
17875: PPUSH
17876: CALL_OW 237
17880: GO 17860
17882: POP
17883: POP
// end ;
17884: GO 17844
17886: POP
17887: POP
// end ;
17888: LD_VAR 0 1
17892: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17893: LD_INT 0
17895: PPUSH
// uc_side := your_side ;
17896: LD_ADDR_OWVAR 20
17900: PUSH
17901: LD_OWVAR 2
17905: ST_TO_ADDR
// uc_nation := nation ;
17906: LD_ADDR_OWVAR 21
17910: PUSH
17911: LD_VAR 0 1
17915: ST_TO_ADDR
// InitHc ;
17916: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_VAR 0 2
17927: PPUSH
17928: LD_VAR 0 3
17932: PPUSH
17933: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17937: LD_VAR 0 4
17941: PPUSH
17942: LD_VAR 0 5
17946: PPUSH
17947: CALL_OW 428
17951: PUSH
17952: LD_INT 0
17954: EQUAL
17955: IFFALSE 17979
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17957: CALL_OW 44
17961: PPUSH
17962: LD_VAR 0 4
17966: PPUSH
17967: LD_VAR 0 5
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 48
// end ;
17979: LD_VAR 0 6
17983: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17984: LD_INT 0
17986: PPUSH
17987: PPUSH
// uc_side := your_side ;
17988: LD_ADDR_OWVAR 20
17992: PUSH
17993: LD_OWVAR 2
17997: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17998: LD_VAR 0 1
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: LD_INT 2
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: LD_INT 4
18014: PUSH
18015: LD_INT 5
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: IN
18025: IFFALSE 18037
// uc_nation := nation_american else
18027: LD_ADDR_OWVAR 21
18031: PUSH
18032: LD_INT 1
18034: ST_TO_ADDR
18035: GO 18080
// if chassis in [ 11 , 12 , 13 , 14 ] then
18037: LD_VAR 0 1
18041: PUSH
18042: LD_INT 11
18044: PUSH
18045: LD_INT 12
18047: PUSH
18048: LD_INT 13
18050: PUSH
18051: LD_INT 14
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: IN
18060: IFFALSE 18072
// uc_nation := nation_arabian else
18062: LD_ADDR_OWVAR 21
18066: PUSH
18067: LD_INT 2
18069: ST_TO_ADDR
18070: GO 18080
// uc_nation := nation_russian ;
18072: LD_ADDR_OWVAR 21
18076: PUSH
18077: LD_INT 3
18079: ST_TO_ADDR
// vc_chassis := chassis ;
18080: LD_ADDR_OWVAR 37
18084: PUSH
18085: LD_VAR 0 1
18089: ST_TO_ADDR
// vc_engine := engine ;
18090: LD_ADDR_OWVAR 39
18094: PUSH
18095: LD_VAR 0 2
18099: ST_TO_ADDR
// vc_control := control ;
18100: LD_ADDR_OWVAR 38
18104: PUSH
18105: LD_VAR 0 3
18109: ST_TO_ADDR
// vc_weapon := weapon ;
18110: LD_ADDR_OWVAR 40
18114: PUSH
18115: LD_VAR 0 4
18119: ST_TO_ADDR
// un := CreateVehicle ;
18120: LD_ADDR_VAR 0 8
18124: PUSH
18125: CALL_OW 45
18129: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18130: LD_VAR 0 8
18134: PPUSH
18135: LD_INT 0
18137: PPUSH
18138: LD_INT 5
18140: PPUSH
18141: CALL_OW 12
18145: PPUSH
18146: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18150: LD_VAR 0 8
18154: PPUSH
18155: LD_VAR 0 5
18159: PPUSH
18160: LD_VAR 0 6
18164: PPUSH
18165: LD_INT 1
18167: PPUSH
18168: CALL_OW 48
// end ;
18172: LD_VAR 0 7
18176: RET
// export hInvincible ; every 1 do
18177: GO 18179
18179: DISABLE
// hInvincible := [ ] ;
18180: LD_ADDR_EXP 97
18184: PUSH
18185: EMPTY
18186: ST_TO_ADDR
18187: END
// every 10 do var i ;
18188: GO 18190
18190: DISABLE
18191: LD_INT 0
18193: PPUSH
// begin enable ;
18194: ENABLE
// if not hInvincible then
18195: LD_EXP 97
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18248
// for i in hInvincible do
18204: LD_ADDR_VAR 0 1
18208: PUSH
18209: LD_EXP 97
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18246
// if GetLives ( i ) < 1000 then
18217: LD_VAR 0 1
18221: PPUSH
18222: CALL_OW 256
18226: PUSH
18227: LD_INT 1000
18229: LESS
18230: IFFALSE 18244
// SetLives ( i , 1000 ) ;
18232: LD_VAR 0 1
18236: PPUSH
18237: LD_INT 1000
18239: PPUSH
18240: CALL_OW 234
18244: GO 18214
18246: POP
18247: POP
// end ;
18248: PPOPN 1
18250: END
// export function hHackInvincible ; var i ; begin
18251: LD_INT 0
18253: PPUSH
18254: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18255: LD_ADDR_VAR 0 2
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 21
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 21
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: PPUSH
18288: CALL_OW 69
18292: PUSH
18293: FOR_IN
18294: IFFALSE 18355
// if IsSelected ( i ) then
18296: LD_VAR 0 2
18300: PPUSH
18301: CALL_OW 306
18305: IFFALSE 18353
// begin if i in hInvincible then
18307: LD_VAR 0 2
18311: PUSH
18312: LD_EXP 97
18316: IN
18317: IFFALSE 18337
// hInvincible := hInvincible diff i else
18319: LD_ADDR_EXP 97
18323: PUSH
18324: LD_EXP 97
18328: PUSH
18329: LD_VAR 0 2
18333: DIFF
18334: ST_TO_ADDR
18335: GO 18353
// hInvincible := hInvincible union i ;
18337: LD_ADDR_EXP 97
18341: PUSH
18342: LD_EXP 97
18346: PUSH
18347: LD_VAR 0 2
18351: UNION
18352: ST_TO_ADDR
// end ;
18353: GO 18293
18355: POP
18356: POP
// end ;
18357: LD_VAR 0 1
18361: RET
// export function hHackInvisible ; var i , j ; begin
18362: LD_INT 0
18364: PPUSH
18365: PPUSH
18366: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18367: LD_ADDR_VAR 0 2
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PPUSH
18382: CALL_OW 69
18386: PUSH
18387: FOR_IN
18388: IFFALSE 18412
// if IsSelected ( i ) then
18390: LD_VAR 0 2
18394: PPUSH
18395: CALL_OW 306
18399: IFFALSE 18410
// ComForceInvisible ( i ) ;
18401: LD_VAR 0 2
18405: PPUSH
18406: CALL_OW 496
18410: GO 18387
18412: POP
18413: POP
// end ;
18414: LD_VAR 0 1
18418: RET
// export function hHackChangeYourSide ; begin
18419: LD_INT 0
18421: PPUSH
// if your_side = 8 then
18422: LD_OWVAR 2
18426: PUSH
18427: LD_INT 8
18429: EQUAL
18430: IFFALSE 18442
// your_side := 0 else
18432: LD_ADDR_OWVAR 2
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
18440: GO 18456
// your_side := your_side + 1 ;
18442: LD_ADDR_OWVAR 2
18446: PUSH
18447: LD_OWVAR 2
18451: PUSH
18452: LD_INT 1
18454: PLUS
18455: ST_TO_ADDR
// end ;
18456: LD_VAR 0 1
18460: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18461: LD_INT 0
18463: PPUSH
18464: PPUSH
18465: PPUSH
// for i in all_units do
18466: LD_ADDR_VAR 0 2
18470: PUSH
18471: LD_OWVAR 3
18475: PUSH
18476: FOR_IN
18477: IFFALSE 18555
// if IsSelected ( i ) then
18479: LD_VAR 0 2
18483: PPUSH
18484: CALL_OW 306
18488: IFFALSE 18553
// begin j := GetSide ( i ) ;
18490: LD_ADDR_VAR 0 3
18494: PUSH
18495: LD_VAR 0 2
18499: PPUSH
18500: CALL_OW 255
18504: ST_TO_ADDR
// if j = 8 then
18505: LD_VAR 0 3
18509: PUSH
18510: LD_INT 8
18512: EQUAL
18513: IFFALSE 18525
// j := 0 else
18515: LD_ADDR_VAR 0 3
18519: PUSH
18520: LD_INT 0
18522: ST_TO_ADDR
18523: GO 18539
// j := j + 1 ;
18525: LD_ADDR_VAR 0 3
18529: PUSH
18530: LD_VAR 0 3
18534: PUSH
18535: LD_INT 1
18537: PLUS
18538: ST_TO_ADDR
// SetSide ( i , j ) ;
18539: LD_VAR 0 2
18543: PPUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: CALL_OW 235
// end ;
18553: GO 18476
18555: POP
18556: POP
// end ;
18557: LD_VAR 0 1
18561: RET
// export function hHackFog ; begin
18562: LD_INT 0
18564: PPUSH
// FogOff ( true ) ;
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 344
// end ;
18572: LD_VAR 0 1
18576: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18577: LD_INT 0
18579: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18580: LD_VAR 0 1
18584: PPUSH
18585: LD_VAR 0 2
18589: PPUSH
18590: LD_VAR 0 3
18594: PPUSH
18595: LD_INT 1
18597: PPUSH
18598: LD_INT 1
18600: PPUSH
18601: CALL_OW 483
// CenterOnXY ( x , y ) ;
18605: LD_VAR 0 2
18609: PPUSH
18610: LD_VAR 0 3
18614: PPUSH
18615: CALL_OW 84
// end ;
18619: LD_VAR 0 4
18623: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18624: LD_INT 0
18626: PPUSH
18627: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18628: LD_VAR 0 1
18632: NOT
18633: PUSH
18634: LD_VAR 0 2
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: CALL_OW 488
18648: NOT
18649: OR
18650: PUSH
18651: LD_VAR 0 1
18655: PPUSH
18656: CALL_OW 266
18660: PUSH
18661: LD_INT 3
18663: NONEQUAL
18664: PUSH
18665: LD_VAR 0 1
18669: PPUSH
18670: CALL_OW 247
18674: PUSH
18675: LD_INT 1
18677: EQUAL
18678: NOT
18679: AND
18680: OR
18681: IFFALSE 18685
// exit ;
18683: GO 18834
// if GetType ( factory ) = unit_human then
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 247
18694: PUSH
18695: LD_INT 1
18697: EQUAL
18698: IFFALSE 18715
// factory := IsInUnit ( factory ) ;
18700: LD_ADDR_VAR 0 1
18704: PUSH
18705: LD_VAR 0 1
18709: PPUSH
18710: CALL_OW 310
18714: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18715: LD_VAR 0 1
18719: PPUSH
18720: CALL_OW 266
18724: PUSH
18725: LD_INT 3
18727: NONEQUAL
18728: IFFALSE 18732
// exit ;
18730: GO 18834
// if HexInfo ( x , y ) = factory then
18732: LD_VAR 0 2
18736: PPUSH
18737: LD_VAR 0 3
18741: PPUSH
18742: CALL_OW 428
18746: PUSH
18747: LD_VAR 0 1
18751: EQUAL
18752: IFFALSE 18779
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18754: LD_ADDR_EXP 98
18758: PUSH
18759: LD_EXP 98
18763: PPUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: LD_INT 0
18771: PPUSH
18772: CALL_OW 1
18776: ST_TO_ADDR
18777: GO 18830
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18779: LD_ADDR_EXP 98
18783: PUSH
18784: LD_EXP 98
18788: PPUSH
18789: LD_VAR 0 1
18793: PPUSH
18794: LD_VAR 0 1
18798: PPUSH
18799: CALL_OW 255
18803: PUSH
18804: LD_VAR 0 1
18808: PUSH
18809: LD_VAR 0 2
18813: PUSH
18814: LD_VAR 0 3
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 1
18829: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18830: CALL 18839 0 0
// end ;
18834: LD_VAR 0 4
18838: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18839: LD_INT 0
18841: PPUSH
18842: PPUSH
18843: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18844: LD_STRING resetFactoryWaypoint();
18846: PPUSH
18847: CALL_OW 559
// if factoryWaypoints then
18851: LD_EXP 98
18855: IFFALSE 18981
// begin list := PrepareArray ( factoryWaypoints ) ;
18857: LD_ADDR_VAR 0 3
18861: PUSH
18862: LD_EXP 98
18866: PPUSH
18867: CALL 66278 0 1
18871: ST_TO_ADDR
// for i := 1 to list do
18872: LD_ADDR_VAR 0 2
18876: PUSH
18877: DOUBLE
18878: LD_INT 1
18880: DEC
18881: ST_TO_ADDR
18882: LD_VAR 0 3
18886: PUSH
18887: FOR_TO
18888: IFFALSE 18979
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18890: LD_STRING setFactoryWaypointXY(
18892: PUSH
18893: LD_VAR 0 3
18897: PUSH
18898: LD_VAR 0 2
18902: ARRAY
18903: PUSH
18904: LD_INT 1
18906: ARRAY
18907: STR
18908: PUSH
18909: LD_STRING ,
18911: STR
18912: PUSH
18913: LD_VAR 0 3
18917: PUSH
18918: LD_VAR 0 2
18922: ARRAY
18923: PUSH
18924: LD_INT 2
18926: ARRAY
18927: STR
18928: PUSH
18929: LD_STRING ,
18931: STR
18932: PUSH
18933: LD_VAR 0 3
18937: PUSH
18938: LD_VAR 0 2
18942: ARRAY
18943: PUSH
18944: LD_INT 3
18946: ARRAY
18947: STR
18948: PUSH
18949: LD_STRING ,
18951: STR
18952: PUSH
18953: LD_VAR 0 3
18957: PUSH
18958: LD_VAR 0 2
18962: ARRAY
18963: PUSH
18964: LD_INT 4
18966: ARRAY
18967: STR
18968: PUSH
18969: LD_STRING )
18971: STR
18972: PPUSH
18973: CALL_OW 559
18977: GO 18887
18979: POP
18980: POP
// end ; end ;
18981: LD_VAR 0 1
18985: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
18986: LD_INT 0
18988: PPUSH
// if HexInfo ( x , y ) = warehouse then
18989: LD_VAR 0 2
18993: PPUSH
18994: LD_VAR 0 3
18998: PPUSH
18999: CALL_OW 428
19003: PUSH
19004: LD_VAR 0 1
19008: EQUAL
19009: IFFALSE 19036
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19011: LD_ADDR_EXP 99
19015: PUSH
19016: LD_EXP 99
19020: PPUSH
19021: LD_VAR 0 1
19025: PPUSH
19026: LD_INT 0
19028: PPUSH
19029: CALL_OW 1
19033: ST_TO_ADDR
19034: GO 19087
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19036: LD_ADDR_EXP 99
19040: PUSH
19041: LD_EXP 99
19045: PPUSH
19046: LD_VAR 0 1
19050: PPUSH
19051: LD_VAR 0 1
19055: PPUSH
19056: CALL_OW 255
19060: PUSH
19061: LD_VAR 0 1
19065: PUSH
19066: LD_VAR 0 2
19070: PUSH
19071: LD_VAR 0 3
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: PPUSH
19082: CALL_OW 1
19086: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19087: CALL 19096 0 0
// end ;
19091: LD_VAR 0 4
19095: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19096: LD_INT 0
19098: PPUSH
19099: PPUSH
19100: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19101: LD_STRING resetWarehouseGatheringPoints();
19103: PPUSH
19104: CALL_OW 559
// if warehouseGatheringPoints then
19108: LD_EXP 99
19112: IFFALSE 19238
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19114: LD_ADDR_VAR 0 3
19118: PUSH
19119: LD_EXP 99
19123: PPUSH
19124: CALL 66278 0 1
19128: ST_TO_ADDR
// for i := 1 to list do
19129: LD_ADDR_VAR 0 2
19133: PUSH
19134: DOUBLE
19135: LD_INT 1
19137: DEC
19138: ST_TO_ADDR
19139: LD_VAR 0 3
19143: PUSH
19144: FOR_TO
19145: IFFALSE 19236
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19147: LD_STRING setWarehouseGatheringPointXY(
19149: PUSH
19150: LD_VAR 0 3
19154: PUSH
19155: LD_VAR 0 2
19159: ARRAY
19160: PUSH
19161: LD_INT 1
19163: ARRAY
19164: STR
19165: PUSH
19166: LD_STRING ,
19168: STR
19169: PUSH
19170: LD_VAR 0 3
19174: PUSH
19175: LD_VAR 0 2
19179: ARRAY
19180: PUSH
19181: LD_INT 2
19183: ARRAY
19184: STR
19185: PUSH
19186: LD_STRING ,
19188: STR
19189: PUSH
19190: LD_VAR 0 3
19194: PUSH
19195: LD_VAR 0 2
19199: ARRAY
19200: PUSH
19201: LD_INT 3
19203: ARRAY
19204: STR
19205: PUSH
19206: LD_STRING ,
19208: STR
19209: PUSH
19210: LD_VAR 0 3
19214: PUSH
19215: LD_VAR 0 2
19219: ARRAY
19220: PUSH
19221: LD_INT 4
19223: ARRAY
19224: STR
19225: PUSH
19226: LD_STRING )
19228: STR
19229: PPUSH
19230: CALL_OW 559
19234: GO 19144
19236: POP
19237: POP
// end ; end ;
19238: LD_VAR 0 1
19242: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19243: LD_EXP 99
19247: IFFALSE 19932
19249: GO 19251
19251: DISABLE
19252: LD_INT 0
19254: PPUSH
19255: PPUSH
19256: PPUSH
19257: PPUSH
19258: PPUSH
19259: PPUSH
19260: PPUSH
19261: PPUSH
19262: PPUSH
// begin enable ;
19263: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19264: LD_ADDR_VAR 0 3
19268: PUSH
19269: LD_EXP 99
19273: PPUSH
19274: CALL 66278 0 1
19278: ST_TO_ADDR
// if not list then
19279: LD_VAR 0 3
19283: NOT
19284: IFFALSE 19288
// exit ;
19286: GO 19932
// for i := 1 to list do
19288: LD_ADDR_VAR 0 1
19292: PUSH
19293: DOUBLE
19294: LD_INT 1
19296: DEC
19297: ST_TO_ADDR
19298: LD_VAR 0 3
19302: PUSH
19303: FOR_TO
19304: IFFALSE 19930
// begin depot := list [ i ] [ 2 ] ;
19306: LD_ADDR_VAR 0 8
19310: PUSH
19311: LD_VAR 0 3
19315: PUSH
19316: LD_VAR 0 1
19320: ARRAY
19321: PUSH
19322: LD_INT 2
19324: ARRAY
19325: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19326: LD_ADDR_VAR 0 5
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 1
19340: ARRAY
19341: PUSH
19342: LD_INT 1
19344: ARRAY
19345: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19346: LD_VAR 0 8
19350: PPUSH
19351: CALL_OW 301
19355: PUSH
19356: LD_VAR 0 5
19360: PUSH
19361: LD_VAR 0 8
19365: PPUSH
19366: CALL_OW 255
19370: NONEQUAL
19371: OR
19372: IFFALSE 19401
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19374: LD_ADDR_EXP 99
19378: PUSH
19379: LD_EXP 99
19383: PPUSH
19384: LD_VAR 0 8
19388: PPUSH
19389: LD_INT 0
19391: PPUSH
19392: CALL_OW 1
19396: ST_TO_ADDR
// exit ;
19397: POP
19398: POP
19399: GO 19932
// end ; x := list [ i ] [ 3 ] ;
19401: LD_ADDR_VAR 0 6
19405: PUSH
19406: LD_VAR 0 3
19410: PUSH
19411: LD_VAR 0 1
19415: ARRAY
19416: PUSH
19417: LD_INT 3
19419: ARRAY
19420: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19421: LD_ADDR_VAR 0 7
19425: PUSH
19426: LD_VAR 0 3
19430: PUSH
19431: LD_VAR 0 1
19435: ARRAY
19436: PUSH
19437: LD_INT 4
19439: ARRAY
19440: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19441: LD_ADDR_VAR 0 9
19445: PUSH
19446: LD_VAR 0 6
19450: PPUSH
19451: LD_VAR 0 7
19455: PPUSH
19456: LD_INT 16
19458: PPUSH
19459: CALL 64866 0 3
19463: ST_TO_ADDR
// if not cratesNearbyPoint then
19464: LD_VAR 0 9
19468: NOT
19469: IFFALSE 19475
// exit ;
19471: POP
19472: POP
19473: GO 19932
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19475: LD_ADDR_VAR 0 4
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_VAR 0 5
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 3
19494: PUSH
19495: LD_INT 60
19497: PUSH
19498: EMPTY
19499: LIST
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 91
19507: PUSH
19508: LD_VAR 0 8
19512: PUSH
19513: LD_INT 6
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: LD_INT 25
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 25
19536: PUSH
19537: LD_INT 16
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 69
19559: PUSH
19560: LD_VAR 0 8
19564: PPUSH
19565: CALL_OW 313
19569: PPUSH
19570: LD_INT 3
19572: PUSH
19573: LD_INT 60
19575: PUSH
19576: EMPTY
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: LD_INT 25
19588: PUSH
19589: LD_INT 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 25
19598: PUSH
19599: LD_INT 16
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PPUSH
19615: CALL_OW 72
19619: UNION
19620: ST_TO_ADDR
// if tmp then
19621: LD_VAR 0 4
19625: IFFALSE 19705
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19627: LD_ADDR_VAR 0 4
19631: PUSH
19632: LD_VAR 0 4
19636: PPUSH
19637: LD_INT 3
19639: PPUSH
19640: CALL 62835 0 2
19644: ST_TO_ADDR
// for j in tmp do
19645: LD_ADDR_VAR 0 2
19649: PUSH
19650: LD_VAR 0 4
19654: PUSH
19655: FOR_IN
19656: IFFALSE 19699
// begin if IsInUnit ( j ) then
19658: LD_VAR 0 2
19662: PPUSH
19663: CALL_OW 310
19667: IFFALSE 19678
// ComExit ( j ) ;
19669: LD_VAR 0 2
19673: PPUSH
19674: CALL 62918 0 1
// AddComCollect ( j , x , y ) ;
19678: LD_VAR 0 2
19682: PPUSH
19683: LD_VAR 0 6
19687: PPUSH
19688: LD_VAR 0 7
19692: PPUSH
19693: CALL_OW 177
// end ;
19697: GO 19655
19699: POP
19700: POP
// exit ;
19701: POP
19702: POP
19703: GO 19932
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19705: LD_ADDR_VAR 0 4
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_VAR 0 5
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 91
19724: PUSH
19725: LD_VAR 0 8
19729: PUSH
19730: LD_INT 8
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 34
19743: PUSH
19744: LD_INT 12
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 34
19753: PUSH
19754: LD_INT 51
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 34
19763: PUSH
19764: LD_INT 32
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 34
19773: PUSH
19774: LD_INT 89
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: PPUSH
19793: CALL_OW 69
19797: ST_TO_ADDR
// if tmp then
19798: LD_VAR 0 4
19802: IFFALSE 19928
// begin for j in tmp do
19804: LD_ADDR_VAR 0 2
19808: PUSH
19809: LD_VAR 0 4
19813: PUSH
19814: FOR_IN
19815: IFFALSE 19926
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19817: LD_VAR 0 2
19821: PPUSH
19822: CALL_OW 262
19826: PUSH
19827: LD_INT 3
19829: EQUAL
19830: PUSH
19831: LD_VAR 0 2
19835: PPUSH
19836: CALL_OW 261
19840: PUSH
19841: LD_INT 20
19843: GREATER
19844: OR
19845: PUSH
19846: LD_VAR 0 2
19850: PPUSH
19851: CALL_OW 314
19855: NOT
19856: AND
19857: PUSH
19858: LD_VAR 0 2
19862: PPUSH
19863: CALL_OW 263
19867: PUSH
19868: LD_INT 1
19870: NONEQUAL
19871: PUSH
19872: LD_VAR 0 2
19876: PPUSH
19877: CALL_OW 311
19881: OR
19882: AND
19883: IFFALSE 19924
// begin ComCollect ( j , x , y ) ;
19885: LD_VAR 0 2
19889: PPUSH
19890: LD_VAR 0 6
19894: PPUSH
19895: LD_VAR 0 7
19899: PPUSH
19900: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19904: LD_VAR 0 2
19908: PPUSH
19909: LD_VAR 0 8
19913: PPUSH
19914: CALL_OW 172
// exit ;
19918: POP
19919: POP
19920: POP
19921: POP
19922: GO 19932
// end ;
19924: GO 19814
19926: POP
19927: POP
// end ; end ;
19928: GO 19303
19930: POP
19931: POP
// end ; end_of_file
19932: PPOPN 9
19934: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
19939: PPUSH
19940: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 264
19950: PUSH
19951: LD_INT 91
19953: EQUAL
19954: IFFALSE 20026
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19956: LD_INT 68
19958: PPUSH
19959: LD_VAR 0 1
19963: PPUSH
19964: CALL_OW 255
19968: PPUSH
19969: CALL_OW 321
19973: PUSH
19974: LD_INT 2
19976: EQUAL
19977: IFFALSE 19989
// eff := 70 else
19979: LD_ADDR_VAR 0 4
19983: PUSH
19984: LD_INT 70
19986: ST_TO_ADDR
19987: GO 19997
// eff := 30 ;
19989: LD_ADDR_VAR 0 4
19993: PUSH
19994: LD_INT 30
19996: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 250
20006: PPUSH
20007: LD_VAR 0 1
20011: PPUSH
20012: CALL_OW 251
20016: PPUSH
20017: LD_VAR 0 4
20021: PPUSH
20022: CALL_OW 495
// end ; end ;
20026: LD_VAR 0 2
20030: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20031: LD_INT 0
20033: PPUSH
// end ;
20034: LD_VAR 0 4
20038: RET
// export function SOS_Command ( cmd ) ; begin
20039: LD_INT 0
20041: PPUSH
// end ;
20042: LD_VAR 0 2
20046: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20047: LD_INT 0
20049: PPUSH
// end ;
20050: LD_VAR 0 6
20054: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20055: LD_INT 0
20057: PPUSH
20058: PPUSH
// if not vehicle or not factory then
20059: LD_VAR 0 1
20063: NOT
20064: PUSH
20065: LD_VAR 0 2
20069: NOT
20070: OR
20071: IFFALSE 20075
// exit ;
20073: GO 20306
// if factoryWaypoints >= factory then
20075: LD_EXP 98
20079: PUSH
20080: LD_VAR 0 2
20084: GREATEREQUAL
20085: IFFALSE 20306
// if factoryWaypoints [ factory ] then
20087: LD_EXP 98
20091: PUSH
20092: LD_VAR 0 2
20096: ARRAY
20097: IFFALSE 20306
// begin if GetControl ( vehicle ) = control_manual then
20099: LD_VAR 0 1
20103: PPUSH
20104: CALL_OW 263
20108: PUSH
20109: LD_INT 1
20111: EQUAL
20112: IFFALSE 20193
// begin driver := IsDrivenBy ( vehicle ) ;
20114: LD_ADDR_VAR 0 4
20118: PUSH
20119: LD_VAR 0 1
20123: PPUSH
20124: CALL_OW 311
20128: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20129: LD_VAR 0 4
20133: PPUSH
20134: LD_EXP 98
20138: PUSH
20139: LD_VAR 0 2
20143: ARRAY
20144: PUSH
20145: LD_INT 3
20147: ARRAY
20148: PPUSH
20149: LD_EXP 98
20153: PUSH
20154: LD_VAR 0 2
20158: ARRAY
20159: PUSH
20160: LD_INT 4
20162: ARRAY
20163: PPUSH
20164: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20168: LD_VAR 0 4
20172: PPUSH
20173: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20177: LD_VAR 0 4
20181: PPUSH
20182: LD_VAR 0 2
20186: PPUSH
20187: CALL_OW 180
// end else
20191: GO 20306
// if GetControl ( vehicle ) = control_remote then
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 263
20202: PUSH
20203: LD_INT 2
20205: EQUAL
20206: IFFALSE 20267
// begin wait ( 0 0$2 ) ;
20208: LD_INT 70
20210: PPUSH
20211: CALL_OW 67
// if Connect ( vehicle ) then
20215: LD_VAR 0 1
20219: PPUSH
20220: CALL 33137 0 1
20224: IFFALSE 20265
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20226: LD_VAR 0 1
20230: PPUSH
20231: LD_EXP 98
20235: PUSH
20236: LD_VAR 0 2
20240: ARRAY
20241: PUSH
20242: LD_INT 3
20244: ARRAY
20245: PPUSH
20246: LD_EXP 98
20250: PUSH
20251: LD_VAR 0 2
20255: ARRAY
20256: PUSH
20257: LD_INT 4
20259: ARRAY
20260: PPUSH
20261: CALL_OW 171
// end else
20265: GO 20306
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20267: LD_VAR 0 1
20271: PPUSH
20272: LD_EXP 98
20276: PUSH
20277: LD_VAR 0 2
20281: ARRAY
20282: PUSH
20283: LD_INT 3
20285: ARRAY
20286: PPUSH
20287: LD_EXP 98
20291: PUSH
20292: LD_VAR 0 2
20296: ARRAY
20297: PUSH
20298: LD_INT 4
20300: ARRAY
20301: PPUSH
20302: CALL_OW 171
// end ; end ;
20306: LD_VAR 0 3
20310: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20311: LD_INT 0
20313: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20314: LD_VAR 0 1
20318: PUSH
20319: LD_INT 250
20321: EQUAL
20322: PUSH
20323: LD_VAR 0 2
20327: PPUSH
20328: CALL_OW 264
20332: PUSH
20333: LD_INT 81
20335: EQUAL
20336: AND
20337: IFFALSE 20358
// MinerPlaceMine ( unit , x , y ) ;
20339: LD_VAR 0 2
20343: PPUSH
20344: LD_VAR 0 4
20348: PPUSH
20349: LD_VAR 0 5
20353: PPUSH
20354: CALL 23348 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20358: LD_VAR 0 1
20362: PUSH
20363: LD_INT 251
20365: EQUAL
20366: PUSH
20367: LD_VAR 0 2
20371: PPUSH
20372: CALL_OW 264
20376: PUSH
20377: LD_INT 81
20379: EQUAL
20380: AND
20381: IFFALSE 20402
// MinerDetonateMine ( unit , x , y ) ;
20383: LD_VAR 0 2
20387: PPUSH
20388: LD_VAR 0 4
20392: PPUSH
20393: LD_VAR 0 5
20397: PPUSH
20398: CALL 23623 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20402: LD_VAR 0 1
20406: PUSH
20407: LD_INT 252
20409: EQUAL
20410: PUSH
20411: LD_VAR 0 2
20415: PPUSH
20416: CALL_OW 264
20420: PUSH
20421: LD_INT 81
20423: EQUAL
20424: AND
20425: IFFALSE 20446
// MinerCreateMinefield ( unit , x , y ) ;
20427: LD_VAR 0 2
20431: PPUSH
20432: LD_VAR 0 4
20436: PPUSH
20437: LD_VAR 0 5
20441: PPUSH
20442: CALL 24040 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20446: LD_VAR 0 1
20450: PUSH
20451: LD_INT 253
20453: EQUAL
20454: PUSH
20455: LD_VAR 0 2
20459: PPUSH
20460: CALL_OW 257
20464: PUSH
20465: LD_INT 5
20467: EQUAL
20468: AND
20469: IFFALSE 20490
// ComBinocular ( unit , x , y ) ;
20471: LD_VAR 0 2
20475: PPUSH
20476: LD_VAR 0 4
20480: PPUSH
20481: LD_VAR 0 5
20485: PPUSH
20486: CALL 24409 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20490: LD_VAR 0 1
20494: PUSH
20495: LD_INT 254
20497: EQUAL
20498: PUSH
20499: LD_VAR 0 2
20503: PPUSH
20504: CALL_OW 264
20508: PUSH
20509: LD_INT 99
20511: EQUAL
20512: AND
20513: PUSH
20514: LD_VAR 0 3
20518: PPUSH
20519: CALL_OW 263
20523: PUSH
20524: LD_INT 3
20526: EQUAL
20527: AND
20528: IFFALSE 20544
// HackDestroyVehicle ( unit , selectedUnit ) ;
20530: LD_VAR 0 2
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: CALL 22712 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20544: LD_VAR 0 1
20548: PUSH
20549: LD_INT 255
20551: EQUAL
20552: PUSH
20553: LD_VAR 0 2
20557: PPUSH
20558: CALL_OW 264
20562: PUSH
20563: LD_INT 14
20565: PUSH
20566: LD_INT 53
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: IN
20573: AND
20574: PUSH
20575: LD_VAR 0 4
20579: PPUSH
20580: LD_VAR 0 5
20584: PPUSH
20585: CALL_OW 488
20589: AND
20590: IFFALSE 20614
// CutTreeXYR ( unit , x , y , 12 ) ;
20592: LD_VAR 0 2
20596: PPUSH
20597: LD_VAR 0 4
20601: PPUSH
20602: LD_VAR 0 5
20606: PPUSH
20607: LD_INT 12
20609: PPUSH
20610: CALL 20709 0 4
// if cmd = 256 then
20614: LD_VAR 0 1
20618: PUSH
20619: LD_INT 256
20621: EQUAL
20622: IFFALSE 20643
// SetFactoryWaypoint ( unit , x , y ) ;
20624: LD_VAR 0 2
20628: PPUSH
20629: LD_VAR 0 4
20633: PPUSH
20634: LD_VAR 0 5
20638: PPUSH
20639: CALL 18624 0 3
// if cmd = 257 then
20643: LD_VAR 0 1
20647: PUSH
20648: LD_INT 257
20650: EQUAL
20651: IFFALSE 20672
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20653: LD_VAR 0 2
20657: PPUSH
20658: LD_VAR 0 4
20662: PPUSH
20663: LD_VAR 0 5
20667: PPUSH
20668: CALL 18986 0 3
// if cmd = 258 then
20672: LD_VAR 0 1
20676: PUSH
20677: LD_INT 258
20679: EQUAL
20680: IFFALSE 20704
// BurnTreeXYR ( unit , x , y , 8 ) ;
20682: LD_VAR 0 2
20686: PPUSH
20687: LD_VAR 0 4
20691: PPUSH
20692: LD_VAR 0 5
20696: PPUSH
20697: LD_INT 8
20699: PPUSH
20700: CALL 21103 0 4
// end ;
20704: LD_VAR 0 6
20708: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20709: LD_INT 0
20711: PPUSH
20712: PPUSH
20713: PPUSH
20714: PPUSH
20715: PPUSH
20716: PPUSH
20717: PPUSH
20718: PPUSH
20719: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
20720: LD_VAR 0 1
20724: PPUSH
20725: CALL_OW 302
20729: NOT
20730: PUSH
20731: LD_VAR 0 2
20735: PPUSH
20736: LD_VAR 0 3
20740: PPUSH
20741: CALL_OW 488
20745: NOT
20746: OR
20747: PUSH
20748: LD_VAR 0 4
20752: NOT
20753: OR
20754: IFFALSE 20758
// exit ;
20756: GO 21098
// list := [ ] ;
20758: LD_ADDR_VAR 0 13
20762: PUSH
20763: EMPTY
20764: ST_TO_ADDR
// if x - r < 0 then
20765: LD_VAR 0 2
20769: PUSH
20770: LD_VAR 0 4
20774: MINUS
20775: PUSH
20776: LD_INT 0
20778: LESS
20779: IFFALSE 20791
// min_x := 0 else
20781: LD_ADDR_VAR 0 7
20785: PUSH
20786: LD_INT 0
20788: ST_TO_ADDR
20789: GO 20807
// min_x := x - r ;
20791: LD_ADDR_VAR 0 7
20795: PUSH
20796: LD_VAR 0 2
20800: PUSH
20801: LD_VAR 0 4
20805: MINUS
20806: ST_TO_ADDR
// if y - r < 0 then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_VAR 0 4
20816: MINUS
20817: PUSH
20818: LD_INT 0
20820: LESS
20821: IFFALSE 20833
// min_y := 0 else
20823: LD_ADDR_VAR 0 8
20827: PUSH
20828: LD_INT 0
20830: ST_TO_ADDR
20831: GO 20849
// min_y := y - r ;
20833: LD_ADDR_VAR 0 8
20837: PUSH
20838: LD_VAR 0 3
20842: PUSH
20843: LD_VAR 0 4
20847: MINUS
20848: ST_TO_ADDR
// max_x := x + r ;
20849: LD_ADDR_VAR 0 9
20853: PUSH
20854: LD_VAR 0 2
20858: PUSH
20859: LD_VAR 0 4
20863: PLUS
20864: ST_TO_ADDR
// max_y := y + r ;
20865: LD_ADDR_VAR 0 10
20869: PUSH
20870: LD_VAR 0 3
20874: PUSH
20875: LD_VAR 0 4
20879: PLUS
20880: ST_TO_ADDR
// for _x = min_x to max_x do
20881: LD_ADDR_VAR 0 11
20885: PUSH
20886: DOUBLE
20887: LD_VAR 0 7
20891: DEC
20892: ST_TO_ADDR
20893: LD_VAR 0 9
20897: PUSH
20898: FOR_TO
20899: IFFALSE 21016
// for _y = min_y to max_y do
20901: LD_ADDR_VAR 0 12
20905: PUSH
20906: DOUBLE
20907: LD_VAR 0 8
20911: DEC
20912: ST_TO_ADDR
20913: LD_VAR 0 10
20917: PUSH
20918: FOR_TO
20919: IFFALSE 21012
// begin if not ValidHex ( _x , _y ) then
20921: LD_VAR 0 11
20925: PPUSH
20926: LD_VAR 0 12
20930: PPUSH
20931: CALL_OW 488
20935: NOT
20936: IFFALSE 20940
// continue ;
20938: GO 20918
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20940: LD_VAR 0 11
20944: PPUSH
20945: LD_VAR 0 12
20949: PPUSH
20950: CALL_OW 351
20954: PUSH
20955: LD_VAR 0 11
20959: PPUSH
20960: LD_VAR 0 12
20964: PPUSH
20965: CALL_OW 554
20969: AND
20970: IFFALSE 21010
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20972: LD_ADDR_VAR 0 13
20976: PUSH
20977: LD_VAR 0 13
20981: PPUSH
20982: LD_VAR 0 13
20986: PUSH
20987: LD_INT 1
20989: PLUS
20990: PPUSH
20991: LD_VAR 0 11
20995: PUSH
20996: LD_VAR 0 12
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PPUSH
21005: CALL_OW 2
21009: ST_TO_ADDR
// end ;
21010: GO 20918
21012: POP
21013: POP
21014: GO 20898
21016: POP
21017: POP
// if not list then
21018: LD_VAR 0 13
21022: NOT
21023: IFFALSE 21027
// exit ;
21025: GO 21098
// for i in list do
21027: LD_ADDR_VAR 0 6
21031: PUSH
21032: LD_VAR 0 13
21036: PUSH
21037: FOR_IN
21038: IFFALSE 21096
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21040: LD_VAR 0 1
21044: PPUSH
21045: LD_STRING M
21047: PUSH
21048: LD_VAR 0 6
21052: PUSH
21053: LD_INT 1
21055: ARRAY
21056: PUSH
21057: LD_VAR 0 6
21061: PUSH
21062: LD_INT 2
21064: ARRAY
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: PPUSH
21090: CALL_OW 447
21094: GO 21037
21096: POP
21097: POP
// end ;
21098: LD_VAR 0 5
21102: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
21103: LD_INT 0
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
21111: PPUSH
21112: PPUSH
21113: PPUSH
21114: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21115: LD_VAR 0 1
21119: PPUSH
21120: CALL_OW 302
21124: NOT
21125: PUSH
21126: LD_VAR 0 2
21130: PPUSH
21131: LD_VAR 0 3
21135: PPUSH
21136: CALL_OW 488
21140: NOT
21141: OR
21142: PUSH
21143: LD_VAR 0 4
21147: NOT
21148: OR
21149: IFFALSE 21153
// exit ;
21151: GO 21666
// list := [ ] ;
21153: LD_ADDR_VAR 0 13
21157: PUSH
21158: EMPTY
21159: ST_TO_ADDR
// if x - r < 0 then
21160: LD_VAR 0 2
21164: PUSH
21165: LD_VAR 0 4
21169: MINUS
21170: PUSH
21171: LD_INT 0
21173: LESS
21174: IFFALSE 21186
// min_x := 0 else
21176: LD_ADDR_VAR 0 7
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
21184: GO 21202
// min_x := x - r ;
21186: LD_ADDR_VAR 0 7
21190: PUSH
21191: LD_VAR 0 2
21195: PUSH
21196: LD_VAR 0 4
21200: MINUS
21201: ST_TO_ADDR
// if y - r < 0 then
21202: LD_VAR 0 3
21206: PUSH
21207: LD_VAR 0 4
21211: MINUS
21212: PUSH
21213: LD_INT 0
21215: LESS
21216: IFFALSE 21228
// min_y := 0 else
21218: LD_ADDR_VAR 0 8
21222: PUSH
21223: LD_INT 0
21225: ST_TO_ADDR
21226: GO 21244
// min_y := y - r ;
21228: LD_ADDR_VAR 0 8
21232: PUSH
21233: LD_VAR 0 3
21237: PUSH
21238: LD_VAR 0 4
21242: MINUS
21243: ST_TO_ADDR
// max_x := x + r ;
21244: LD_ADDR_VAR 0 9
21248: PUSH
21249: LD_VAR 0 2
21253: PUSH
21254: LD_VAR 0 4
21258: PLUS
21259: ST_TO_ADDR
// max_y := y + r ;
21260: LD_ADDR_VAR 0 10
21264: PUSH
21265: LD_VAR 0 3
21269: PUSH
21270: LD_VAR 0 4
21274: PLUS
21275: ST_TO_ADDR
// for _x = min_x to max_x do
21276: LD_ADDR_VAR 0 11
21280: PUSH
21281: DOUBLE
21282: LD_VAR 0 7
21286: DEC
21287: ST_TO_ADDR
21288: LD_VAR 0 9
21292: PUSH
21293: FOR_TO
21294: IFFALSE 21411
// for _y = min_y to max_y do
21296: LD_ADDR_VAR 0 12
21300: PUSH
21301: DOUBLE
21302: LD_VAR 0 8
21306: DEC
21307: ST_TO_ADDR
21308: LD_VAR 0 10
21312: PUSH
21313: FOR_TO
21314: IFFALSE 21407
// begin if not ValidHex ( _x , _y ) then
21316: LD_VAR 0 11
21320: PPUSH
21321: LD_VAR 0 12
21325: PPUSH
21326: CALL_OW 488
21330: NOT
21331: IFFALSE 21335
// continue ;
21333: GO 21313
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21335: LD_VAR 0 11
21339: PPUSH
21340: LD_VAR 0 12
21344: PPUSH
21345: CALL_OW 351
21349: PUSH
21350: LD_VAR 0 11
21354: PPUSH
21355: LD_VAR 0 12
21359: PPUSH
21360: CALL_OW 554
21364: AND
21365: IFFALSE 21405
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21367: LD_ADDR_VAR 0 13
21371: PUSH
21372: LD_VAR 0 13
21376: PPUSH
21377: LD_VAR 0 13
21381: PUSH
21382: LD_INT 1
21384: PLUS
21385: PPUSH
21386: LD_VAR 0 11
21390: PUSH
21391: LD_VAR 0 12
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PPUSH
21400: CALL_OW 2
21404: ST_TO_ADDR
// end ;
21405: GO 21313
21407: POP
21408: POP
21409: GO 21293
21411: POP
21412: POP
// if not list then
21413: LD_VAR 0 13
21417: NOT
21418: IFFALSE 21422
// exit ;
21420: GO 21666
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
21422: LD_ADDR_VAR 0 13
21426: PUSH
21427: LD_VAR 0 1
21431: PPUSH
21432: LD_VAR 0 13
21436: PPUSH
21437: LD_INT 1
21439: PPUSH
21440: LD_INT 1
21442: PPUSH
21443: CALL 30279 0 4
21447: ST_TO_ADDR
// ComStop ( flame ) ;
21448: LD_VAR 0 1
21452: PPUSH
21453: CALL_OW 141
// for i in list do
21457: LD_ADDR_VAR 0 6
21461: PUSH
21462: LD_VAR 0 13
21466: PUSH
21467: FOR_IN
21468: IFFALSE 21499
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
21470: LD_VAR 0 1
21474: PPUSH
21475: LD_VAR 0 6
21479: PUSH
21480: LD_INT 1
21482: ARRAY
21483: PPUSH
21484: LD_VAR 0 6
21488: PUSH
21489: LD_INT 2
21491: ARRAY
21492: PPUSH
21493: CALL_OW 176
21497: GO 21467
21499: POP
21500: POP
// repeat wait ( 0 0$1 ) ;
21501: LD_INT 35
21503: PPUSH
21504: CALL_OW 67
// task := GetTaskList ( flame ) ;
21508: LD_ADDR_VAR 0 14
21512: PUSH
21513: LD_VAR 0 1
21517: PPUSH
21518: CALL_OW 437
21522: ST_TO_ADDR
// if not task then
21523: LD_VAR 0 14
21527: NOT
21528: IFFALSE 21532
// exit ;
21530: GO 21666
// if task [ 1 ] [ 1 ] <> | then
21532: LD_VAR 0 14
21536: PUSH
21537: LD_INT 1
21539: ARRAY
21540: PUSH
21541: LD_INT 1
21543: ARRAY
21544: PUSH
21545: LD_STRING |
21547: NONEQUAL
21548: IFFALSE 21552
// exit ;
21550: GO 21666
// _x := task [ 1 ] [ 2 ] ;
21552: LD_ADDR_VAR 0 11
21556: PUSH
21557: LD_VAR 0 14
21561: PUSH
21562: LD_INT 1
21564: ARRAY
21565: PUSH
21566: LD_INT 2
21568: ARRAY
21569: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
21570: LD_ADDR_VAR 0 12
21574: PUSH
21575: LD_VAR 0 14
21579: PUSH
21580: LD_INT 1
21582: ARRAY
21583: PUSH
21584: LD_INT 3
21586: ARRAY
21587: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
21588: LD_VAR 0 11
21592: PPUSH
21593: LD_VAR 0 12
21597: PPUSH
21598: CALL_OW 351
21602: NOT
21603: PUSH
21604: LD_VAR 0 11
21608: PPUSH
21609: LD_VAR 0 12
21613: PPUSH
21614: CALL_OW 554
21618: NOT
21619: OR
21620: IFFALSE 21654
// begin task := Delete ( task , 1 ) ;
21622: LD_ADDR_VAR 0 14
21626: PUSH
21627: LD_VAR 0 14
21631: PPUSH
21632: LD_INT 1
21634: PPUSH
21635: CALL_OW 3
21639: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
21640: LD_VAR 0 1
21644: PPUSH
21645: LD_VAR 0 14
21649: PPUSH
21650: CALL_OW 446
// end ; until not HasTask ( flame ) ;
21654: LD_VAR 0 1
21658: PPUSH
21659: CALL_OW 314
21663: NOT
21664: IFFALSE 21501
// end ;
21666: LD_VAR 0 5
21670: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21671: LD_EXP 101
21675: NOT
21676: IFFALSE 21726
21678: GO 21680
21680: DISABLE
// begin initHack := true ;
21681: LD_ADDR_EXP 101
21685: PUSH
21686: LD_INT 1
21688: ST_TO_ADDR
// hackTanks := [ ] ;
21689: LD_ADDR_EXP 102
21693: PUSH
21694: EMPTY
21695: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21696: LD_ADDR_EXP 103
21700: PUSH
21701: EMPTY
21702: ST_TO_ADDR
// hackLimit := 3 ;
21703: LD_ADDR_EXP 104
21707: PUSH
21708: LD_INT 3
21710: ST_TO_ADDR
// hackDist := 12 ;
21711: LD_ADDR_EXP 105
21715: PUSH
21716: LD_INT 12
21718: ST_TO_ADDR
// hackCounter := [ ] ;
21719: LD_ADDR_EXP 106
21723: PUSH
21724: EMPTY
21725: ST_TO_ADDR
// end ;
21726: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21727: LD_EXP 101
21731: PUSH
21732: LD_INT 34
21734: PUSH
21735: LD_INT 99
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PPUSH
21742: CALL_OW 69
21746: AND
21747: IFFALSE 22000
21749: GO 21751
21751: DISABLE
21752: LD_INT 0
21754: PPUSH
21755: PPUSH
// begin enable ;
21756: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21757: LD_ADDR_VAR 0 1
21761: PUSH
21762: LD_INT 34
21764: PUSH
21765: LD_INT 99
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: PUSH
21777: FOR_IN
21778: IFFALSE 21998
// begin if not i in hackTanks then
21780: LD_VAR 0 1
21784: PUSH
21785: LD_EXP 102
21789: IN
21790: NOT
21791: IFFALSE 21874
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21793: LD_ADDR_EXP 102
21797: PUSH
21798: LD_EXP 102
21802: PPUSH
21803: LD_EXP 102
21807: PUSH
21808: LD_INT 1
21810: PLUS
21811: PPUSH
21812: LD_VAR 0 1
21816: PPUSH
21817: CALL_OW 1
21821: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21822: LD_ADDR_EXP 103
21826: PUSH
21827: LD_EXP 103
21831: PPUSH
21832: LD_EXP 103
21836: PUSH
21837: LD_INT 1
21839: PLUS
21840: PPUSH
21841: EMPTY
21842: PPUSH
21843: CALL_OW 1
21847: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21848: LD_ADDR_EXP 106
21852: PUSH
21853: LD_EXP 106
21857: PPUSH
21858: LD_EXP 106
21862: PUSH
21863: LD_INT 1
21865: PLUS
21866: PPUSH
21867: EMPTY
21868: PPUSH
21869: CALL_OW 1
21873: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21874: LD_VAR 0 1
21878: PPUSH
21879: CALL_OW 302
21883: NOT
21884: IFFALSE 21897
// begin HackUnlinkAll ( i ) ;
21886: LD_VAR 0 1
21890: PPUSH
21891: CALL 22003 0 1
// continue ;
21895: GO 21777
// end ; HackCheckCapturedStatus ( i ) ;
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL 22446 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21906: LD_ADDR_VAR 0 2
21910: PUSH
21911: LD_INT 81
21913: PUSH
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 255
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 33
21930: PUSH
21931: LD_INT 3
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 91
21940: PUSH
21941: LD_VAR 0 1
21945: PUSH
21946: LD_EXP 105
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 50
21958: PUSH
21959: EMPTY
21960: LIST
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: PPUSH
21968: CALL_OW 69
21972: ST_TO_ADDR
// if not tmp then
21973: LD_VAR 0 2
21977: NOT
21978: IFFALSE 21982
// continue ;
21980: GO 21777
// HackLink ( i , tmp ) ;
21982: LD_VAR 0 1
21986: PPUSH
21987: LD_VAR 0 2
21991: PPUSH
21992: CALL 22139 0 2
// end ;
21996: GO 21777
21998: POP
21999: POP
// end ;
22000: PPOPN 2
22002: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22003: LD_INT 0
22005: PPUSH
22006: PPUSH
22007: PPUSH
// if not hack in hackTanks then
22008: LD_VAR 0 1
22012: PUSH
22013: LD_EXP 102
22017: IN
22018: NOT
22019: IFFALSE 22023
// exit ;
22021: GO 22134
// index := GetElementIndex ( hackTanks , hack ) ;
22023: LD_ADDR_VAR 0 4
22027: PUSH
22028: LD_EXP 102
22032: PPUSH
22033: LD_VAR 0 1
22037: PPUSH
22038: CALL 29576 0 2
22042: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22043: LD_EXP 103
22047: PUSH
22048: LD_VAR 0 4
22052: ARRAY
22053: IFFALSE 22134
// begin for i in hackTanksCaptured [ index ] do
22055: LD_ADDR_VAR 0 3
22059: PUSH
22060: LD_EXP 103
22064: PUSH
22065: LD_VAR 0 4
22069: ARRAY
22070: PUSH
22071: FOR_IN
22072: IFFALSE 22098
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22074: LD_VAR 0 3
22078: PUSH
22079: LD_INT 1
22081: ARRAY
22082: PPUSH
22083: LD_VAR 0 3
22087: PUSH
22088: LD_INT 2
22090: ARRAY
22091: PPUSH
22092: CALL_OW 235
22096: GO 22071
22098: POP
22099: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22100: LD_ADDR_EXP 103
22104: PUSH
22105: LD_EXP 103
22109: PPUSH
22110: LD_VAR 0 4
22114: PPUSH
22115: EMPTY
22116: PPUSH
22117: CALL_OW 1
22121: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22122: LD_VAR 0 1
22126: PPUSH
22127: LD_INT 0
22129: PPUSH
22130: CALL_OW 505
// end ; end ;
22134: LD_VAR 0 2
22138: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22139: LD_INT 0
22141: PPUSH
22142: PPUSH
22143: PPUSH
// if not hack in hackTanks or not vehicles then
22144: LD_VAR 0 1
22148: PUSH
22149: LD_EXP 102
22153: IN
22154: NOT
22155: PUSH
22156: LD_VAR 0 2
22160: NOT
22161: OR
22162: IFFALSE 22166
// exit ;
22164: GO 22441
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_VAR 0 1
22175: PPUSH
22176: LD_VAR 0 2
22180: PPUSH
22181: LD_INT 1
22183: PPUSH
22184: LD_INT 1
22186: PPUSH
22187: CALL 30226 0 4
22191: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22192: LD_ADDR_VAR 0 5
22196: PUSH
22197: LD_EXP 102
22201: PPUSH
22202: LD_VAR 0 1
22206: PPUSH
22207: CALL 29576 0 2
22211: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22212: LD_EXP 103
22216: PUSH
22217: LD_VAR 0 5
22221: ARRAY
22222: PUSH
22223: LD_EXP 104
22227: LESS
22228: IFFALSE 22417
// begin for i := 1 to vehicles do
22230: LD_ADDR_VAR 0 4
22234: PUSH
22235: DOUBLE
22236: LD_INT 1
22238: DEC
22239: ST_TO_ADDR
22240: LD_VAR 0 2
22244: PUSH
22245: FOR_TO
22246: IFFALSE 22415
// begin if hackTanksCaptured [ index ] = hackLimit then
22248: LD_EXP 103
22252: PUSH
22253: LD_VAR 0 5
22257: ARRAY
22258: PUSH
22259: LD_EXP 104
22263: EQUAL
22264: IFFALSE 22268
// break ;
22266: GO 22415
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22268: LD_ADDR_EXP 106
22272: PUSH
22273: LD_EXP 106
22277: PPUSH
22278: LD_VAR 0 5
22282: PPUSH
22283: LD_EXP 106
22287: PUSH
22288: LD_VAR 0 5
22292: ARRAY
22293: PUSH
22294: LD_INT 1
22296: PLUS
22297: PPUSH
22298: CALL_OW 1
22302: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22303: LD_ADDR_EXP 103
22307: PUSH
22308: LD_EXP 103
22312: PPUSH
22313: LD_VAR 0 5
22317: PUSH
22318: LD_EXP 103
22322: PUSH
22323: LD_VAR 0 5
22327: ARRAY
22328: PUSH
22329: LD_INT 1
22331: PLUS
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PPUSH
22337: LD_VAR 0 2
22341: PUSH
22342: LD_VAR 0 4
22346: ARRAY
22347: PUSH
22348: LD_VAR 0 2
22352: PUSH
22353: LD_VAR 0 4
22357: ARRAY
22358: PPUSH
22359: CALL_OW 255
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PPUSH
22368: CALL 29791 0 3
22372: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22373: LD_VAR 0 2
22377: PUSH
22378: LD_VAR 0 4
22382: ARRAY
22383: PPUSH
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 255
22393: PPUSH
22394: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22398: LD_VAR 0 2
22402: PUSH
22403: LD_VAR 0 4
22407: ARRAY
22408: PPUSH
22409: CALL_OW 141
// end ;
22413: GO 22245
22415: POP
22416: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22417: LD_VAR 0 1
22421: PPUSH
22422: LD_EXP 103
22426: PUSH
22427: LD_VAR 0 5
22431: ARRAY
22432: PUSH
22433: LD_INT 0
22435: PLUS
22436: PPUSH
22437: CALL_OW 505
// end ;
22441: LD_VAR 0 3
22445: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22446: LD_INT 0
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
// if not hack in hackTanks then
22452: LD_VAR 0 1
22456: PUSH
22457: LD_EXP 102
22461: IN
22462: NOT
22463: IFFALSE 22467
// exit ;
22465: GO 22707
// index := GetElementIndex ( hackTanks , hack ) ;
22467: LD_ADDR_VAR 0 4
22471: PUSH
22472: LD_EXP 102
22476: PPUSH
22477: LD_VAR 0 1
22481: PPUSH
22482: CALL 29576 0 2
22486: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22487: LD_ADDR_VAR 0 3
22491: PUSH
22492: DOUBLE
22493: LD_EXP 103
22497: PUSH
22498: LD_VAR 0 4
22502: ARRAY
22503: INC
22504: ST_TO_ADDR
22505: LD_INT 1
22507: PUSH
22508: FOR_DOWNTO
22509: IFFALSE 22681
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22511: LD_ADDR_VAR 0 5
22515: PUSH
22516: LD_EXP 103
22520: PUSH
22521: LD_VAR 0 4
22525: ARRAY
22526: PUSH
22527: LD_VAR 0 3
22531: ARRAY
22532: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22533: LD_VAR 0 5
22537: PUSH
22538: LD_INT 1
22540: ARRAY
22541: PPUSH
22542: CALL_OW 302
22546: NOT
22547: PUSH
22548: LD_VAR 0 5
22552: PUSH
22553: LD_INT 1
22555: ARRAY
22556: PPUSH
22557: CALL_OW 255
22561: PUSH
22562: LD_VAR 0 1
22566: PPUSH
22567: CALL_OW 255
22571: NONEQUAL
22572: OR
22573: IFFALSE 22679
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22575: LD_VAR 0 5
22579: PUSH
22580: LD_INT 1
22582: ARRAY
22583: PPUSH
22584: CALL_OW 305
22588: PUSH
22589: LD_VAR 0 5
22593: PUSH
22594: LD_INT 1
22596: ARRAY
22597: PPUSH
22598: CALL_OW 255
22602: PUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 255
22612: EQUAL
22613: AND
22614: IFFALSE 22638
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22616: LD_VAR 0 5
22620: PUSH
22621: LD_INT 1
22623: ARRAY
22624: PPUSH
22625: LD_VAR 0 5
22629: PUSH
22630: LD_INT 2
22632: ARRAY
22633: PPUSH
22634: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22638: LD_ADDR_EXP 103
22642: PUSH
22643: LD_EXP 103
22647: PPUSH
22648: LD_VAR 0 4
22652: PPUSH
22653: LD_EXP 103
22657: PUSH
22658: LD_VAR 0 4
22662: ARRAY
22663: PPUSH
22664: LD_VAR 0 3
22668: PPUSH
22669: CALL_OW 3
22673: PPUSH
22674: CALL_OW 1
22678: ST_TO_ADDR
// end ; end ;
22679: GO 22508
22681: POP
22682: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22683: LD_VAR 0 1
22687: PPUSH
22688: LD_EXP 103
22692: PUSH
22693: LD_VAR 0 4
22697: ARRAY
22698: PUSH
22699: LD_INT 0
22701: PLUS
22702: PPUSH
22703: CALL_OW 505
// end ;
22707: LD_VAR 0 2
22711: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
22716: PPUSH
22717: PPUSH
// if not hack in hackTanks then
22718: LD_VAR 0 1
22722: PUSH
22723: LD_EXP 102
22727: IN
22728: NOT
22729: IFFALSE 22733
// exit ;
22731: GO 22818
// index := GetElementIndex ( hackTanks , hack ) ;
22733: LD_ADDR_VAR 0 5
22737: PUSH
22738: LD_EXP 102
22742: PPUSH
22743: LD_VAR 0 1
22747: PPUSH
22748: CALL 29576 0 2
22752: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22753: LD_ADDR_VAR 0 4
22757: PUSH
22758: DOUBLE
22759: LD_INT 1
22761: DEC
22762: ST_TO_ADDR
22763: LD_EXP 103
22767: PUSH
22768: LD_VAR 0 5
22772: ARRAY
22773: PUSH
22774: FOR_TO
22775: IFFALSE 22816
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22777: LD_EXP 103
22781: PUSH
22782: LD_VAR 0 5
22786: ARRAY
22787: PUSH
22788: LD_VAR 0 4
22792: ARRAY
22793: PUSH
22794: LD_INT 1
22796: ARRAY
22797: PUSH
22798: LD_VAR 0 2
22802: EQUAL
22803: IFFALSE 22814
// KillUnit ( vehicle ) ;
22805: LD_VAR 0 2
22809: PPUSH
22810: CALL_OW 66
22814: GO 22774
22816: POP
22817: POP
// end ;
22818: LD_VAR 0 3
22822: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22823: LD_EXP 107
22827: NOT
22828: IFFALSE 22863
22830: GO 22832
22832: DISABLE
// begin initMiner := true ;
22833: LD_ADDR_EXP 107
22837: PUSH
22838: LD_INT 1
22840: ST_TO_ADDR
// minersList := [ ] ;
22841: LD_ADDR_EXP 108
22845: PUSH
22846: EMPTY
22847: ST_TO_ADDR
// minerMinesList := [ ] ;
22848: LD_ADDR_EXP 109
22852: PUSH
22853: EMPTY
22854: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22855: LD_ADDR_EXP 110
22859: PUSH
22860: LD_INT 5
22862: ST_TO_ADDR
// end ;
22863: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22864: LD_EXP 107
22868: PUSH
22869: LD_INT 34
22871: PUSH
22872: LD_INT 81
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PPUSH
22879: CALL_OW 69
22883: AND
22884: IFFALSE 23345
22886: GO 22888
22888: DISABLE
22889: LD_INT 0
22891: PPUSH
22892: PPUSH
22893: PPUSH
22894: PPUSH
// begin enable ;
22895: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22896: LD_ADDR_VAR 0 1
22900: PUSH
22901: LD_INT 34
22903: PUSH
22904: LD_INT 81
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PPUSH
22911: CALL_OW 69
22915: PUSH
22916: FOR_IN
22917: IFFALSE 22989
// begin if not i in minersList then
22919: LD_VAR 0 1
22923: PUSH
22924: LD_EXP 108
22928: IN
22929: NOT
22930: IFFALSE 22987
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22932: LD_ADDR_EXP 108
22936: PUSH
22937: LD_EXP 108
22941: PPUSH
22942: LD_EXP 108
22946: PUSH
22947: LD_INT 1
22949: PLUS
22950: PPUSH
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 1
22960: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22961: LD_ADDR_EXP 109
22965: PUSH
22966: LD_EXP 109
22970: PPUSH
22971: LD_EXP 109
22975: PUSH
22976: LD_INT 1
22978: PLUS
22979: PPUSH
22980: EMPTY
22981: PPUSH
22982: CALL_OW 1
22986: ST_TO_ADDR
// end end ;
22987: GO 22916
22989: POP
22990: POP
// for i := minerMinesList downto 1 do
22991: LD_ADDR_VAR 0 1
22995: PUSH
22996: DOUBLE
22997: LD_EXP 109
23001: INC
23002: ST_TO_ADDR
23003: LD_INT 1
23005: PUSH
23006: FOR_DOWNTO
23007: IFFALSE 23343
// begin if IsLive ( minersList [ i ] ) then
23009: LD_EXP 108
23013: PUSH
23014: LD_VAR 0 1
23018: ARRAY
23019: PPUSH
23020: CALL_OW 300
23024: IFFALSE 23052
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23026: LD_EXP 108
23030: PUSH
23031: LD_VAR 0 1
23035: ARRAY
23036: PPUSH
23037: LD_EXP 109
23041: PUSH
23042: LD_VAR 0 1
23046: ARRAY
23047: PPUSH
23048: CALL_OW 505
// if not minerMinesList [ i ] then
23052: LD_EXP 109
23056: PUSH
23057: LD_VAR 0 1
23061: ARRAY
23062: NOT
23063: IFFALSE 23067
// continue ;
23065: GO 23006
// for j := minerMinesList [ i ] downto 1 do
23067: LD_ADDR_VAR 0 2
23071: PUSH
23072: DOUBLE
23073: LD_EXP 109
23077: PUSH
23078: LD_VAR 0 1
23082: ARRAY
23083: INC
23084: ST_TO_ADDR
23085: LD_INT 1
23087: PUSH
23088: FOR_DOWNTO
23089: IFFALSE 23339
// begin side := GetSide ( minersList [ i ] ) ;
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_EXP 108
23100: PUSH
23101: LD_VAR 0 1
23105: ARRAY
23106: PPUSH
23107: CALL_OW 255
23111: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23112: LD_ADDR_VAR 0 4
23116: PUSH
23117: LD_EXP 109
23121: PUSH
23122: LD_VAR 0 1
23126: ARRAY
23127: PUSH
23128: LD_VAR 0 2
23132: ARRAY
23133: PUSH
23134: LD_INT 1
23136: ARRAY
23137: PPUSH
23138: LD_EXP 109
23142: PUSH
23143: LD_VAR 0 1
23147: ARRAY
23148: PUSH
23149: LD_VAR 0 2
23153: ARRAY
23154: PUSH
23155: LD_INT 2
23157: ARRAY
23158: PPUSH
23159: CALL_OW 428
23163: ST_TO_ADDR
// if not tmp then
23164: LD_VAR 0 4
23168: NOT
23169: IFFALSE 23173
// continue ;
23171: GO 23088
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23173: LD_VAR 0 4
23177: PUSH
23178: LD_INT 81
23180: PUSH
23181: LD_VAR 0 3
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PPUSH
23190: CALL_OW 69
23194: IN
23195: PUSH
23196: LD_EXP 109
23200: PUSH
23201: LD_VAR 0 1
23205: ARRAY
23206: PUSH
23207: LD_VAR 0 2
23211: ARRAY
23212: PUSH
23213: LD_INT 1
23215: ARRAY
23216: PPUSH
23217: LD_EXP 109
23221: PUSH
23222: LD_VAR 0 1
23226: ARRAY
23227: PUSH
23228: LD_VAR 0 2
23232: ARRAY
23233: PUSH
23234: LD_INT 2
23236: ARRAY
23237: PPUSH
23238: CALL_OW 458
23242: AND
23243: IFFALSE 23337
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23245: LD_EXP 109
23249: PUSH
23250: LD_VAR 0 1
23254: ARRAY
23255: PUSH
23256: LD_VAR 0 2
23260: ARRAY
23261: PUSH
23262: LD_INT 1
23264: ARRAY
23265: PPUSH
23266: LD_EXP 109
23270: PUSH
23271: LD_VAR 0 1
23275: ARRAY
23276: PUSH
23277: LD_VAR 0 2
23281: ARRAY
23282: PUSH
23283: LD_INT 2
23285: ARRAY
23286: PPUSH
23287: LD_VAR 0 3
23291: PPUSH
23292: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23296: LD_ADDR_EXP 109
23300: PUSH
23301: LD_EXP 109
23305: PPUSH
23306: LD_VAR 0 1
23310: PPUSH
23311: LD_EXP 109
23315: PUSH
23316: LD_VAR 0 1
23320: ARRAY
23321: PPUSH
23322: LD_VAR 0 2
23326: PPUSH
23327: CALL_OW 3
23331: PPUSH
23332: CALL_OW 1
23336: ST_TO_ADDR
// end ; end ;
23337: GO 23088
23339: POP
23340: POP
// end ;
23341: GO 23006
23343: POP
23344: POP
// end ;
23345: PPOPN 4
23347: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23348: LD_INT 0
23350: PPUSH
23351: PPUSH
// result := false ;
23352: LD_ADDR_VAR 0 4
23356: PUSH
23357: LD_INT 0
23359: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23360: LD_VAR 0 1
23364: PPUSH
23365: CALL_OW 264
23369: PUSH
23370: LD_INT 81
23372: EQUAL
23373: NOT
23374: IFFALSE 23378
// exit ;
23376: GO 23618
// index := GetElementIndex ( minersList , unit ) ;
23378: LD_ADDR_VAR 0 5
23382: PUSH
23383: LD_EXP 108
23387: PPUSH
23388: LD_VAR 0 1
23392: PPUSH
23393: CALL 29576 0 2
23397: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23398: LD_EXP 109
23402: PUSH
23403: LD_VAR 0 5
23407: ARRAY
23408: PUSH
23409: LD_EXP 110
23413: GREATEREQUAL
23414: IFFALSE 23418
// exit ;
23416: GO 23618
// ComMoveXY ( unit , x , y ) ;
23418: LD_VAR 0 1
23422: PPUSH
23423: LD_VAR 0 2
23427: PPUSH
23428: LD_VAR 0 3
23432: PPUSH
23433: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23437: LD_INT 35
23439: PPUSH
23440: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23444: LD_VAR 0 1
23448: PPUSH
23449: LD_VAR 0 2
23453: PPUSH
23454: LD_VAR 0 3
23458: PPUSH
23459: CALL 61317 0 3
23463: NOT
23464: PUSH
23465: LD_VAR 0 1
23469: PPUSH
23470: CALL_OW 314
23474: AND
23475: IFFALSE 23479
// exit ;
23477: GO 23618
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23479: LD_VAR 0 2
23483: PPUSH
23484: LD_VAR 0 3
23488: PPUSH
23489: CALL_OW 428
23493: PUSH
23494: LD_VAR 0 1
23498: EQUAL
23499: PUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: CALL_OW 314
23509: NOT
23510: AND
23511: IFFALSE 23437
// PlaySoundXY ( x , y , PlantMine ) ;
23513: LD_VAR 0 2
23517: PPUSH
23518: LD_VAR 0 3
23522: PPUSH
23523: LD_STRING PlantMine
23525: PPUSH
23526: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23530: LD_VAR 0 2
23534: PPUSH
23535: LD_VAR 0 3
23539: PPUSH
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL_OW 255
23549: PPUSH
23550: LD_INT 0
23552: PPUSH
23553: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23557: LD_ADDR_EXP 109
23561: PUSH
23562: LD_EXP 109
23566: PPUSH
23567: LD_VAR 0 5
23571: PUSH
23572: LD_EXP 109
23576: PUSH
23577: LD_VAR 0 5
23581: ARRAY
23582: PUSH
23583: LD_INT 1
23585: PLUS
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PPUSH
23591: LD_VAR 0 2
23595: PUSH
23596: LD_VAR 0 3
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL 29791 0 3
23609: ST_TO_ADDR
// result := true ;
23610: LD_ADDR_VAR 0 4
23614: PUSH
23615: LD_INT 1
23617: ST_TO_ADDR
// end ;
23618: LD_VAR 0 4
23622: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
23627: PPUSH
// if not unit in minersList then
23628: LD_VAR 0 1
23632: PUSH
23633: LD_EXP 108
23637: IN
23638: NOT
23639: IFFALSE 23643
// exit ;
23641: GO 24035
// index := GetElementIndex ( minersList , unit ) ;
23643: LD_ADDR_VAR 0 6
23647: PUSH
23648: LD_EXP 108
23652: PPUSH
23653: LD_VAR 0 1
23657: PPUSH
23658: CALL 29576 0 2
23662: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23663: LD_ADDR_VAR 0 5
23667: PUSH
23668: DOUBLE
23669: LD_EXP 109
23673: PUSH
23674: LD_VAR 0 6
23678: ARRAY
23679: INC
23680: ST_TO_ADDR
23681: LD_INT 1
23683: PUSH
23684: FOR_DOWNTO
23685: IFFALSE 23846
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23687: LD_EXP 109
23691: PUSH
23692: LD_VAR 0 6
23696: ARRAY
23697: PUSH
23698: LD_VAR 0 5
23702: ARRAY
23703: PUSH
23704: LD_INT 1
23706: ARRAY
23707: PUSH
23708: LD_VAR 0 2
23712: EQUAL
23713: PUSH
23714: LD_EXP 109
23718: PUSH
23719: LD_VAR 0 6
23723: ARRAY
23724: PUSH
23725: LD_VAR 0 5
23729: ARRAY
23730: PUSH
23731: LD_INT 2
23733: ARRAY
23734: PUSH
23735: LD_VAR 0 3
23739: EQUAL
23740: AND
23741: IFFALSE 23844
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23743: LD_EXP 109
23747: PUSH
23748: LD_VAR 0 6
23752: ARRAY
23753: PUSH
23754: LD_VAR 0 5
23758: ARRAY
23759: PUSH
23760: LD_INT 1
23762: ARRAY
23763: PPUSH
23764: LD_EXP 109
23768: PUSH
23769: LD_VAR 0 6
23773: ARRAY
23774: PUSH
23775: LD_VAR 0 5
23779: ARRAY
23780: PUSH
23781: LD_INT 2
23783: ARRAY
23784: PPUSH
23785: LD_VAR 0 1
23789: PPUSH
23790: CALL_OW 255
23794: PPUSH
23795: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23799: LD_ADDR_EXP 109
23803: PUSH
23804: LD_EXP 109
23808: PPUSH
23809: LD_VAR 0 6
23813: PPUSH
23814: LD_EXP 109
23818: PUSH
23819: LD_VAR 0 6
23823: ARRAY
23824: PPUSH
23825: LD_VAR 0 5
23829: PPUSH
23830: CALL_OW 3
23834: PPUSH
23835: CALL_OW 1
23839: ST_TO_ADDR
// exit ;
23840: POP
23841: POP
23842: GO 24035
// end ; end ;
23844: GO 23684
23846: POP
23847: POP
// for i := minerMinesList [ index ] downto 1 do
23848: LD_ADDR_VAR 0 5
23852: PUSH
23853: DOUBLE
23854: LD_EXP 109
23858: PUSH
23859: LD_VAR 0 6
23863: ARRAY
23864: INC
23865: ST_TO_ADDR
23866: LD_INT 1
23868: PUSH
23869: FOR_DOWNTO
23870: IFFALSE 24033
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23872: LD_EXP 109
23876: PUSH
23877: LD_VAR 0 6
23881: ARRAY
23882: PUSH
23883: LD_VAR 0 5
23887: ARRAY
23888: PUSH
23889: LD_INT 1
23891: ARRAY
23892: PPUSH
23893: LD_EXP 109
23897: PUSH
23898: LD_VAR 0 6
23902: ARRAY
23903: PUSH
23904: LD_VAR 0 5
23908: ARRAY
23909: PUSH
23910: LD_INT 2
23912: ARRAY
23913: PPUSH
23914: LD_VAR 0 2
23918: PPUSH
23919: LD_VAR 0 3
23923: PPUSH
23924: CALL_OW 298
23928: PUSH
23929: LD_INT 6
23931: LESS
23932: IFFALSE 24031
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23934: LD_EXP 109
23938: PUSH
23939: LD_VAR 0 6
23943: ARRAY
23944: PUSH
23945: LD_VAR 0 5
23949: ARRAY
23950: PUSH
23951: LD_INT 1
23953: ARRAY
23954: PPUSH
23955: LD_EXP 109
23959: PUSH
23960: LD_VAR 0 6
23964: ARRAY
23965: PUSH
23966: LD_VAR 0 5
23970: ARRAY
23971: PUSH
23972: LD_INT 2
23974: ARRAY
23975: PPUSH
23976: LD_VAR 0 1
23980: PPUSH
23981: CALL_OW 255
23985: PPUSH
23986: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23990: LD_ADDR_EXP 109
23994: PUSH
23995: LD_EXP 109
23999: PPUSH
24000: LD_VAR 0 6
24004: PPUSH
24005: LD_EXP 109
24009: PUSH
24010: LD_VAR 0 6
24014: ARRAY
24015: PPUSH
24016: LD_VAR 0 5
24020: PPUSH
24021: CALL_OW 3
24025: PPUSH
24026: CALL_OW 1
24030: ST_TO_ADDR
// end ; end ;
24031: GO 23869
24033: POP
24034: POP
// end ;
24035: LD_VAR 0 4
24039: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24040: LD_INT 0
24042: PPUSH
24043: PPUSH
24044: PPUSH
24045: PPUSH
24046: PPUSH
24047: PPUSH
24048: PPUSH
24049: PPUSH
24050: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 264
24060: PUSH
24061: LD_INT 81
24063: EQUAL
24064: NOT
24065: PUSH
24066: LD_VAR 0 1
24070: PUSH
24071: LD_EXP 108
24075: IN
24076: NOT
24077: OR
24078: IFFALSE 24082
// exit ;
24080: GO 24404
// index := GetElementIndex ( minersList , unit ) ;
24082: LD_ADDR_VAR 0 6
24086: PUSH
24087: LD_EXP 108
24091: PPUSH
24092: LD_VAR 0 1
24096: PPUSH
24097: CALL 29576 0 2
24101: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24102: LD_ADDR_VAR 0 8
24106: PUSH
24107: LD_EXP 110
24111: PUSH
24112: LD_EXP 109
24116: PUSH
24117: LD_VAR 0 6
24121: ARRAY
24122: MINUS
24123: ST_TO_ADDR
// if not minesFreeAmount then
24124: LD_VAR 0 8
24128: NOT
24129: IFFALSE 24133
// exit ;
24131: GO 24404
// tmp := [ ] ;
24133: LD_ADDR_VAR 0 7
24137: PUSH
24138: EMPTY
24139: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24140: LD_ADDR_VAR 0 5
24144: PUSH
24145: DOUBLE
24146: LD_INT 1
24148: DEC
24149: ST_TO_ADDR
24150: LD_VAR 0 8
24154: PUSH
24155: FOR_TO
24156: IFFALSE 24351
// begin _d := rand ( 0 , 5 ) ;
24158: LD_ADDR_VAR 0 11
24162: PUSH
24163: LD_INT 0
24165: PPUSH
24166: LD_INT 5
24168: PPUSH
24169: CALL_OW 12
24173: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24174: LD_ADDR_VAR 0 12
24178: PUSH
24179: LD_INT 2
24181: PPUSH
24182: LD_INT 6
24184: PPUSH
24185: CALL_OW 12
24189: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24190: LD_ADDR_VAR 0 9
24194: PUSH
24195: LD_VAR 0 2
24199: PPUSH
24200: LD_VAR 0 11
24204: PPUSH
24205: LD_VAR 0 12
24209: PPUSH
24210: CALL_OW 272
24214: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24215: LD_ADDR_VAR 0 10
24219: PUSH
24220: LD_VAR 0 3
24224: PPUSH
24225: LD_VAR 0 11
24229: PPUSH
24230: LD_VAR 0 12
24234: PPUSH
24235: CALL_OW 273
24239: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24240: LD_VAR 0 9
24244: PPUSH
24245: LD_VAR 0 10
24249: PPUSH
24250: CALL_OW 488
24254: PUSH
24255: LD_VAR 0 9
24259: PUSH
24260: LD_VAR 0 10
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_VAR 0 7
24273: IN
24274: NOT
24275: AND
24276: PUSH
24277: LD_VAR 0 9
24281: PPUSH
24282: LD_VAR 0 10
24286: PPUSH
24287: CALL_OW 458
24291: NOT
24292: AND
24293: IFFALSE 24335
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24295: LD_ADDR_VAR 0 7
24299: PUSH
24300: LD_VAR 0 7
24304: PPUSH
24305: LD_VAR 0 7
24309: PUSH
24310: LD_INT 1
24312: PLUS
24313: PPUSH
24314: LD_VAR 0 9
24318: PUSH
24319: LD_VAR 0 10
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PPUSH
24328: CALL_OW 1
24332: ST_TO_ADDR
24333: GO 24349
// i := i - 1 ;
24335: LD_ADDR_VAR 0 5
24339: PUSH
24340: LD_VAR 0 5
24344: PUSH
24345: LD_INT 1
24347: MINUS
24348: ST_TO_ADDR
// end ;
24349: GO 24155
24351: POP
24352: POP
// for i in tmp do
24353: LD_ADDR_VAR 0 5
24357: PUSH
24358: LD_VAR 0 7
24362: PUSH
24363: FOR_IN
24364: IFFALSE 24402
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24366: LD_VAR 0 1
24370: PPUSH
24371: LD_VAR 0 5
24375: PUSH
24376: LD_INT 1
24378: ARRAY
24379: PPUSH
24380: LD_VAR 0 5
24384: PUSH
24385: LD_INT 2
24387: ARRAY
24388: PPUSH
24389: CALL 23348 0 3
24393: NOT
24394: IFFALSE 24400
// exit ;
24396: POP
24397: POP
24398: GO 24404
24400: GO 24363
24402: POP
24403: POP
// end ;
24404: LD_VAR 0 4
24408: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24409: LD_INT 0
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
// if not GetClass ( unit ) = class_sniper then
24418: LD_VAR 0 1
24422: PPUSH
24423: CALL_OW 257
24427: PUSH
24428: LD_INT 5
24430: EQUAL
24431: NOT
24432: IFFALSE 24436
// exit ;
24434: GO 24824
// dist := 8 ;
24436: LD_ADDR_VAR 0 5
24440: PUSH
24441: LD_INT 8
24443: ST_TO_ADDR
// viewRange := 12 ;
24444: LD_ADDR_VAR 0 7
24448: PUSH
24449: LD_INT 12
24451: ST_TO_ADDR
// side := GetSide ( unit ) ;
24452: LD_ADDR_VAR 0 6
24456: PUSH
24457: LD_VAR 0 1
24461: PPUSH
24462: CALL_OW 255
24466: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24467: LD_INT 61
24469: PPUSH
24470: LD_VAR 0 6
24474: PPUSH
24475: CALL_OW 321
24479: PUSH
24480: LD_INT 2
24482: EQUAL
24483: IFFALSE 24493
// viewRange := 16 ;
24485: LD_ADDR_VAR 0 7
24489: PUSH
24490: LD_INT 16
24492: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24493: LD_VAR 0 1
24497: PPUSH
24498: LD_VAR 0 2
24502: PPUSH
24503: LD_VAR 0 3
24507: PPUSH
24508: CALL_OW 297
24512: PUSH
24513: LD_VAR 0 5
24517: GREATER
24518: IFFALSE 24597
// begin ComMoveXY ( unit , x , y ) ;
24520: LD_VAR 0 1
24524: PPUSH
24525: LD_VAR 0 2
24529: PPUSH
24530: LD_VAR 0 3
24534: PPUSH
24535: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24539: LD_INT 35
24541: PPUSH
24542: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24546: LD_VAR 0 1
24550: PPUSH
24551: LD_VAR 0 2
24555: PPUSH
24556: LD_VAR 0 3
24560: PPUSH
24561: CALL 61317 0 3
24565: NOT
24566: IFFALSE 24570
// exit ;
24568: GO 24824
// until GetDistUnitXY ( unit , x , y ) < dist ;
24570: LD_VAR 0 1
24574: PPUSH
24575: LD_VAR 0 2
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: CALL_OW 297
24589: PUSH
24590: LD_VAR 0 5
24594: LESS
24595: IFFALSE 24539
// end ; ComTurnXY ( unit , x , y ) ;
24597: LD_VAR 0 1
24601: PPUSH
24602: LD_VAR 0 2
24606: PPUSH
24607: LD_VAR 0 3
24611: PPUSH
24612: CALL_OW 118
// wait ( 5 ) ;
24616: LD_INT 5
24618: PPUSH
24619: CALL_OW 67
// _d := GetDir ( unit ) ;
24623: LD_ADDR_VAR 0 10
24627: PUSH
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 254
24637: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24638: LD_ADDR_VAR 0 8
24642: PUSH
24643: LD_VAR 0 1
24647: PPUSH
24648: CALL_OW 250
24652: PPUSH
24653: LD_VAR 0 10
24657: PPUSH
24658: LD_VAR 0 5
24662: PPUSH
24663: CALL_OW 272
24667: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24668: LD_ADDR_VAR 0 9
24672: PUSH
24673: LD_VAR 0 1
24677: PPUSH
24678: CALL_OW 251
24682: PPUSH
24683: LD_VAR 0 10
24687: PPUSH
24688: LD_VAR 0 5
24692: PPUSH
24693: CALL_OW 273
24697: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24698: LD_VAR 0 8
24702: PPUSH
24703: LD_VAR 0 9
24707: PPUSH
24708: CALL_OW 488
24712: NOT
24713: IFFALSE 24717
// exit ;
24715: GO 24824
// ComAnimCustom ( unit , 1 ) ;
24717: LD_VAR 0 1
24721: PPUSH
24722: LD_INT 1
24724: PPUSH
24725: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24729: LD_VAR 0 8
24733: PPUSH
24734: LD_VAR 0 9
24738: PPUSH
24739: LD_VAR 0 6
24743: PPUSH
24744: LD_VAR 0 7
24748: PPUSH
24749: CALL_OW 330
// repeat wait ( 1 ) ;
24753: LD_INT 1
24755: PPUSH
24756: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24760: LD_VAR 0 1
24764: PPUSH
24765: CALL_OW 316
24769: PUSH
24770: LD_VAR 0 1
24774: PPUSH
24775: CALL_OW 314
24779: OR
24780: PUSH
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 302
24790: NOT
24791: OR
24792: PUSH
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 301
24802: OR
24803: IFFALSE 24753
// RemoveSeeing ( _x , _y , side ) ;
24805: LD_VAR 0 8
24809: PPUSH
24810: LD_VAR 0 9
24814: PPUSH
24815: LD_VAR 0 6
24819: PPUSH
24820: CALL_OW 331
// end ; end_of_file
24824: LD_VAR 0 4
24828: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24829: LD_INT 0
24831: PPUSH
24832: PPUSH
// if exist_mode then
24833: LD_VAR 0 2
24837: IFFALSE 24862
// unit := CreateCharacter ( prefix & ident ) else
24839: LD_ADDR_VAR 0 5
24843: PUSH
24844: LD_VAR 0 3
24848: PUSH
24849: LD_VAR 0 1
24853: STR
24854: PPUSH
24855: CALL_OW 34
24859: ST_TO_ADDR
24860: GO 24877
// unit := NewCharacter ( ident ) ;
24862: LD_ADDR_VAR 0 5
24866: PUSH
24867: LD_VAR 0 1
24871: PPUSH
24872: CALL_OW 25
24876: ST_TO_ADDR
// result := unit ;
24877: LD_ADDR_VAR 0 4
24881: PUSH
24882: LD_VAR 0 5
24886: ST_TO_ADDR
// end ;
24887: LD_VAR 0 4
24891: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24892: LD_INT 0
24894: PPUSH
24895: PPUSH
// if not side or not nation then
24896: LD_VAR 0 1
24900: NOT
24901: PUSH
24902: LD_VAR 0 2
24906: NOT
24907: OR
24908: IFFALSE 24912
// exit ;
24910: GO 25680
// case nation of nation_american :
24912: LD_VAR 0 2
24916: PUSH
24917: LD_INT 1
24919: DOUBLE
24920: EQUAL
24921: IFTRUE 24925
24923: GO 25139
24925: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24926: LD_ADDR_VAR 0 4
24930: PUSH
24931: LD_INT 35
24933: PUSH
24934: LD_INT 45
24936: PUSH
24937: LD_INT 46
24939: PUSH
24940: LD_INT 47
24942: PUSH
24943: LD_INT 82
24945: PUSH
24946: LD_INT 83
24948: PUSH
24949: LD_INT 84
24951: PUSH
24952: LD_INT 85
24954: PUSH
24955: LD_INT 86
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: LD_INT 2
24963: PUSH
24964: LD_INT 6
24966: PUSH
24967: LD_INT 15
24969: PUSH
24970: LD_INT 16
24972: PUSH
24973: LD_INT 7
24975: PUSH
24976: LD_INT 12
24978: PUSH
24979: LD_INT 13
24981: PUSH
24982: LD_INT 10
24984: PUSH
24985: LD_INT 14
24987: PUSH
24988: LD_INT 20
24990: PUSH
24991: LD_INT 21
24993: PUSH
24994: LD_INT 22
24996: PUSH
24997: LD_INT 25
24999: PUSH
25000: LD_INT 32
25002: PUSH
25003: LD_INT 27
25005: PUSH
25006: LD_INT 36
25008: PUSH
25009: LD_INT 69
25011: PUSH
25012: LD_INT 39
25014: PUSH
25015: LD_INT 34
25017: PUSH
25018: LD_INT 40
25020: PUSH
25021: LD_INT 48
25023: PUSH
25024: LD_INT 49
25026: PUSH
25027: LD_INT 50
25029: PUSH
25030: LD_INT 51
25032: PUSH
25033: LD_INT 52
25035: PUSH
25036: LD_INT 53
25038: PUSH
25039: LD_INT 54
25041: PUSH
25042: LD_INT 55
25044: PUSH
25045: LD_INT 56
25047: PUSH
25048: LD_INT 57
25050: PUSH
25051: LD_INT 58
25053: PUSH
25054: LD_INT 59
25056: PUSH
25057: LD_INT 60
25059: PUSH
25060: LD_INT 61
25062: PUSH
25063: LD_INT 62
25065: PUSH
25066: LD_INT 80
25068: PUSH
25069: LD_INT 82
25071: PUSH
25072: LD_INT 83
25074: PUSH
25075: LD_INT 84
25077: PUSH
25078: LD_INT 85
25080: PUSH
25081: LD_INT 86
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: ST_TO_ADDR
25137: GO 25604
25139: LD_INT 2
25141: DOUBLE
25142: EQUAL
25143: IFTRUE 25147
25145: GO 25373
25147: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25148: LD_ADDR_VAR 0 4
25152: PUSH
25153: LD_INT 35
25155: PUSH
25156: LD_INT 45
25158: PUSH
25159: LD_INT 46
25161: PUSH
25162: LD_INT 47
25164: PUSH
25165: LD_INT 82
25167: PUSH
25168: LD_INT 83
25170: PUSH
25171: LD_INT 84
25173: PUSH
25174: LD_INT 85
25176: PUSH
25177: LD_INT 87
25179: PUSH
25180: LD_INT 70
25182: PUSH
25183: LD_INT 1
25185: PUSH
25186: LD_INT 11
25188: PUSH
25189: LD_INT 3
25191: PUSH
25192: LD_INT 4
25194: PUSH
25195: LD_INT 5
25197: PUSH
25198: LD_INT 6
25200: PUSH
25201: LD_INT 15
25203: PUSH
25204: LD_INT 18
25206: PUSH
25207: LD_INT 7
25209: PUSH
25210: LD_INT 17
25212: PUSH
25213: LD_INT 8
25215: PUSH
25216: LD_INT 20
25218: PUSH
25219: LD_INT 21
25221: PUSH
25222: LD_INT 22
25224: PUSH
25225: LD_INT 72
25227: PUSH
25228: LD_INT 26
25230: PUSH
25231: LD_INT 69
25233: PUSH
25234: LD_INT 39
25236: PUSH
25237: LD_INT 40
25239: PUSH
25240: LD_INT 41
25242: PUSH
25243: LD_INT 42
25245: PUSH
25246: LD_INT 43
25248: PUSH
25249: LD_INT 48
25251: PUSH
25252: LD_INT 49
25254: PUSH
25255: LD_INT 50
25257: PUSH
25258: LD_INT 51
25260: PUSH
25261: LD_INT 52
25263: PUSH
25264: LD_INT 53
25266: PUSH
25267: LD_INT 54
25269: PUSH
25270: LD_INT 55
25272: PUSH
25273: LD_INT 56
25275: PUSH
25276: LD_INT 60
25278: PUSH
25279: LD_INT 61
25281: PUSH
25282: LD_INT 62
25284: PUSH
25285: LD_INT 66
25287: PUSH
25288: LD_INT 67
25290: PUSH
25291: LD_INT 68
25293: PUSH
25294: LD_INT 81
25296: PUSH
25297: LD_INT 82
25299: PUSH
25300: LD_INT 83
25302: PUSH
25303: LD_INT 84
25305: PUSH
25306: LD_INT 85
25308: PUSH
25309: LD_INT 87
25311: PUSH
25312: LD_INT 88
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: ST_TO_ADDR
25371: GO 25604
25373: LD_INT 3
25375: DOUBLE
25376: EQUAL
25377: IFTRUE 25381
25379: GO 25603
25381: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25382: LD_ADDR_VAR 0 4
25386: PUSH
25387: LD_INT 46
25389: PUSH
25390: LD_INT 47
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: LD_INT 82
25401: PUSH
25402: LD_INT 83
25404: PUSH
25405: LD_INT 84
25407: PUSH
25408: LD_INT 85
25410: PUSH
25411: LD_INT 86
25413: PUSH
25414: LD_INT 11
25416: PUSH
25417: LD_INT 9
25419: PUSH
25420: LD_INT 20
25422: PUSH
25423: LD_INT 19
25425: PUSH
25426: LD_INT 21
25428: PUSH
25429: LD_INT 24
25431: PUSH
25432: LD_INT 22
25434: PUSH
25435: LD_INT 25
25437: PUSH
25438: LD_INT 28
25440: PUSH
25441: LD_INT 29
25443: PUSH
25444: LD_INT 30
25446: PUSH
25447: LD_INT 31
25449: PUSH
25450: LD_INT 37
25452: PUSH
25453: LD_INT 38
25455: PUSH
25456: LD_INT 32
25458: PUSH
25459: LD_INT 27
25461: PUSH
25462: LD_INT 33
25464: PUSH
25465: LD_INT 69
25467: PUSH
25468: LD_INT 39
25470: PUSH
25471: LD_INT 34
25473: PUSH
25474: LD_INT 40
25476: PUSH
25477: LD_INT 71
25479: PUSH
25480: LD_INT 23
25482: PUSH
25483: LD_INT 44
25485: PUSH
25486: LD_INT 48
25488: PUSH
25489: LD_INT 49
25491: PUSH
25492: LD_INT 50
25494: PUSH
25495: LD_INT 51
25497: PUSH
25498: LD_INT 52
25500: PUSH
25501: LD_INT 53
25503: PUSH
25504: LD_INT 54
25506: PUSH
25507: LD_INT 55
25509: PUSH
25510: LD_INT 56
25512: PUSH
25513: LD_INT 57
25515: PUSH
25516: LD_INT 58
25518: PUSH
25519: LD_INT 59
25521: PUSH
25522: LD_INT 63
25524: PUSH
25525: LD_INT 64
25527: PUSH
25528: LD_INT 65
25530: PUSH
25531: LD_INT 82
25533: PUSH
25534: LD_INT 83
25536: PUSH
25537: LD_INT 84
25539: PUSH
25540: LD_INT 85
25542: PUSH
25543: LD_INT 86
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: ST_TO_ADDR
25601: GO 25604
25603: POP
// if state > - 1 and state < 3 then
25604: LD_VAR 0 3
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: GREATER
25613: PUSH
25614: LD_VAR 0 3
25618: PUSH
25619: LD_INT 3
25621: LESS
25622: AND
25623: IFFALSE 25680
// for i in result do
25625: LD_ADDR_VAR 0 5
25629: PUSH
25630: LD_VAR 0 4
25634: PUSH
25635: FOR_IN
25636: IFFALSE 25678
// if GetTech ( i , side ) <> state then
25638: LD_VAR 0 5
25642: PPUSH
25643: LD_VAR 0 1
25647: PPUSH
25648: CALL_OW 321
25652: PUSH
25653: LD_VAR 0 3
25657: NONEQUAL
25658: IFFALSE 25676
// result := result diff i ;
25660: LD_ADDR_VAR 0 4
25664: PUSH
25665: LD_VAR 0 4
25669: PUSH
25670: LD_VAR 0 5
25674: DIFF
25675: ST_TO_ADDR
25676: GO 25635
25678: POP
25679: POP
// end ;
25680: LD_VAR 0 4
25684: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25685: LD_INT 0
25687: PPUSH
25688: PPUSH
25689: PPUSH
// result := true ;
25690: LD_ADDR_VAR 0 3
25694: PUSH
25695: LD_INT 1
25697: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25698: LD_ADDR_VAR 0 5
25702: PUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: CALL_OW 480
25712: ST_TO_ADDR
// if not tmp then
25713: LD_VAR 0 5
25717: NOT
25718: IFFALSE 25722
// exit ;
25720: GO 25771
// for i in tmp do
25722: LD_ADDR_VAR 0 4
25726: PUSH
25727: LD_VAR 0 5
25731: PUSH
25732: FOR_IN
25733: IFFALSE 25769
// if GetTech ( i , side ) <> state_researched then
25735: LD_VAR 0 4
25739: PPUSH
25740: LD_VAR 0 1
25744: PPUSH
25745: CALL_OW 321
25749: PUSH
25750: LD_INT 2
25752: NONEQUAL
25753: IFFALSE 25767
// begin result := false ;
25755: LD_ADDR_VAR 0 3
25759: PUSH
25760: LD_INT 0
25762: ST_TO_ADDR
// exit ;
25763: POP
25764: POP
25765: GO 25771
// end ;
25767: GO 25732
25769: POP
25770: POP
// end ;
25771: LD_VAR 0 3
25775: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25776: LD_INT 0
25778: PPUSH
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
25783: PPUSH
25784: PPUSH
25785: PPUSH
25786: PPUSH
25787: PPUSH
25788: PPUSH
25789: PPUSH
25790: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25791: LD_VAR 0 1
25795: NOT
25796: PUSH
25797: LD_VAR 0 1
25801: PPUSH
25802: CALL_OW 257
25806: PUSH
25807: LD_INT 9
25809: NONEQUAL
25810: OR
25811: IFFALSE 25815
// exit ;
25813: GO 26388
// side := GetSide ( unit ) ;
25815: LD_ADDR_VAR 0 9
25819: PUSH
25820: LD_VAR 0 1
25824: PPUSH
25825: CALL_OW 255
25829: ST_TO_ADDR
// tech_space := tech_spacanom ;
25830: LD_ADDR_VAR 0 12
25834: PUSH
25835: LD_INT 29
25837: ST_TO_ADDR
// tech_time := tech_taurad ;
25838: LD_ADDR_VAR 0 13
25842: PUSH
25843: LD_INT 28
25845: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25846: LD_ADDR_VAR 0 11
25850: PUSH
25851: LD_VAR 0 1
25855: PPUSH
25856: CALL_OW 310
25860: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25861: LD_VAR 0 11
25865: PPUSH
25866: CALL_OW 247
25870: PUSH
25871: LD_INT 2
25873: EQUAL
25874: IFFALSE 25878
// exit ;
25876: GO 26388
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25878: LD_ADDR_VAR 0 8
25882: PUSH
25883: LD_INT 81
25885: PUSH
25886: LD_VAR 0 9
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 3
25897: PUSH
25898: LD_INT 21
25900: PUSH
25901: LD_INT 3
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PPUSH
25916: CALL_OW 69
25920: ST_TO_ADDR
// if not tmp then
25921: LD_VAR 0 8
25925: NOT
25926: IFFALSE 25930
// exit ;
25928: GO 26388
// if in_unit then
25930: LD_VAR 0 11
25934: IFFALSE 25958
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25936: LD_ADDR_VAR 0 10
25940: PUSH
25941: LD_VAR 0 8
25945: PPUSH
25946: LD_VAR 0 11
25950: PPUSH
25951: CALL_OW 74
25955: ST_TO_ADDR
25956: GO 25978
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25958: LD_ADDR_VAR 0 10
25962: PUSH
25963: LD_VAR 0 8
25967: PPUSH
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 74
25977: ST_TO_ADDR
// if not enemy then
25978: LD_VAR 0 10
25982: NOT
25983: IFFALSE 25987
// exit ;
25985: GO 26388
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25987: LD_VAR 0 11
25991: PUSH
25992: LD_VAR 0 11
25996: PPUSH
25997: LD_VAR 0 10
26001: PPUSH
26002: CALL_OW 296
26006: PUSH
26007: LD_INT 13
26009: GREATER
26010: AND
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: LD_VAR 0 10
26021: PPUSH
26022: CALL_OW 296
26026: PUSH
26027: LD_INT 12
26029: GREATER
26030: OR
26031: IFFALSE 26035
// exit ;
26033: GO 26388
// missile := [ 1 ] ;
26035: LD_ADDR_VAR 0 14
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: EMPTY
26044: LIST
26045: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26046: LD_VAR 0 9
26050: PPUSH
26051: LD_VAR 0 12
26055: PPUSH
26056: CALL_OW 325
26060: IFFALSE 26089
// missile := Replace ( missile , missile + 1 , 2 ) ;
26062: LD_ADDR_VAR 0 14
26066: PUSH
26067: LD_VAR 0 14
26071: PPUSH
26072: LD_VAR 0 14
26076: PUSH
26077: LD_INT 1
26079: PLUS
26080: PPUSH
26081: LD_INT 2
26083: PPUSH
26084: CALL_OW 1
26088: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26089: LD_VAR 0 9
26093: PPUSH
26094: LD_VAR 0 13
26098: PPUSH
26099: CALL_OW 325
26103: PUSH
26104: LD_VAR 0 10
26108: PPUSH
26109: CALL_OW 255
26113: PPUSH
26114: LD_VAR 0 13
26118: PPUSH
26119: CALL_OW 325
26123: NOT
26124: AND
26125: IFFALSE 26154
// missile := Replace ( missile , missile + 1 , 3 ) ;
26127: LD_ADDR_VAR 0 14
26131: PUSH
26132: LD_VAR 0 14
26136: PPUSH
26137: LD_VAR 0 14
26141: PUSH
26142: LD_INT 1
26144: PLUS
26145: PPUSH
26146: LD_INT 3
26148: PPUSH
26149: CALL_OW 1
26153: ST_TO_ADDR
// if missile < 2 then
26154: LD_VAR 0 14
26158: PUSH
26159: LD_INT 2
26161: LESS
26162: IFFALSE 26166
// exit ;
26164: GO 26388
// x := GetX ( enemy ) ;
26166: LD_ADDR_VAR 0 4
26170: PUSH
26171: LD_VAR 0 10
26175: PPUSH
26176: CALL_OW 250
26180: ST_TO_ADDR
// y := GetY ( enemy ) ;
26181: LD_ADDR_VAR 0 5
26185: PUSH
26186: LD_VAR 0 10
26190: PPUSH
26191: CALL_OW 251
26195: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26196: LD_ADDR_VAR 0 6
26200: PUSH
26201: LD_VAR 0 4
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PPUSH
26210: LD_INT 1
26212: PPUSH
26213: CALL_OW 12
26217: PLUS
26218: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26219: LD_ADDR_VAR 0 7
26223: PUSH
26224: LD_VAR 0 5
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PPUSH
26233: LD_INT 1
26235: PPUSH
26236: CALL_OW 12
26240: PLUS
26241: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26242: LD_VAR 0 6
26246: PPUSH
26247: LD_VAR 0 7
26251: PPUSH
26252: CALL_OW 488
26256: NOT
26257: IFFALSE 26279
// begin _x := x ;
26259: LD_ADDR_VAR 0 6
26263: PUSH
26264: LD_VAR 0 4
26268: ST_TO_ADDR
// _y := y ;
26269: LD_ADDR_VAR 0 7
26273: PUSH
26274: LD_VAR 0 5
26278: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26279: LD_ADDR_VAR 0 3
26283: PUSH
26284: LD_INT 1
26286: PPUSH
26287: LD_VAR 0 14
26291: PPUSH
26292: CALL_OW 12
26296: ST_TO_ADDR
// case i of 1 :
26297: LD_VAR 0 3
26301: PUSH
26302: LD_INT 1
26304: DOUBLE
26305: EQUAL
26306: IFTRUE 26310
26308: GO 26327
26310: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26311: LD_VAR 0 1
26315: PPUSH
26316: LD_VAR 0 10
26320: PPUSH
26321: CALL_OW 115
26325: GO 26388
26327: LD_INT 2
26329: DOUBLE
26330: EQUAL
26331: IFTRUE 26335
26333: GO 26357
26335: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26336: LD_VAR 0 1
26340: PPUSH
26341: LD_VAR 0 6
26345: PPUSH
26346: LD_VAR 0 7
26350: PPUSH
26351: CALL_OW 153
26355: GO 26388
26357: LD_INT 3
26359: DOUBLE
26360: EQUAL
26361: IFTRUE 26365
26363: GO 26387
26365: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26366: LD_VAR 0 1
26370: PPUSH
26371: LD_VAR 0 6
26375: PPUSH
26376: LD_VAR 0 7
26380: PPUSH
26381: CALL_OW 154
26385: GO 26388
26387: POP
// end ;
26388: LD_VAR 0 2
26392: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26393: LD_INT 0
26395: PPUSH
26396: PPUSH
26397: PPUSH
26398: PPUSH
26399: PPUSH
26400: PPUSH
// if not unit or not building then
26401: LD_VAR 0 1
26405: NOT
26406: PUSH
26407: LD_VAR 0 2
26411: NOT
26412: OR
26413: IFFALSE 26417
// exit ;
26415: GO 26575
// x := GetX ( building ) ;
26417: LD_ADDR_VAR 0 5
26421: PUSH
26422: LD_VAR 0 2
26426: PPUSH
26427: CALL_OW 250
26431: ST_TO_ADDR
// y := GetY ( building ) ;
26432: LD_ADDR_VAR 0 6
26436: PUSH
26437: LD_VAR 0 2
26441: PPUSH
26442: CALL_OW 251
26446: ST_TO_ADDR
// for i = 0 to 5 do
26447: LD_ADDR_VAR 0 4
26451: PUSH
26452: DOUBLE
26453: LD_INT 0
26455: DEC
26456: ST_TO_ADDR
26457: LD_INT 5
26459: PUSH
26460: FOR_TO
26461: IFFALSE 26573
// begin _x := ShiftX ( x , i , 3 ) ;
26463: LD_ADDR_VAR 0 7
26467: PUSH
26468: LD_VAR 0 5
26472: PPUSH
26473: LD_VAR 0 4
26477: PPUSH
26478: LD_INT 3
26480: PPUSH
26481: CALL_OW 272
26485: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26486: LD_ADDR_VAR 0 8
26490: PUSH
26491: LD_VAR 0 6
26495: PPUSH
26496: LD_VAR 0 4
26500: PPUSH
26501: LD_INT 3
26503: PPUSH
26504: CALL_OW 273
26508: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26509: LD_VAR 0 7
26513: PPUSH
26514: LD_VAR 0 8
26518: PPUSH
26519: CALL_OW 488
26523: NOT
26524: IFFALSE 26528
// continue ;
26526: GO 26460
// if HexInfo ( _x , _y ) = 0 then
26528: LD_VAR 0 7
26532: PPUSH
26533: LD_VAR 0 8
26537: PPUSH
26538: CALL_OW 428
26542: PUSH
26543: LD_INT 0
26545: EQUAL
26546: IFFALSE 26571
// begin ComMoveXY ( unit , _x , _y ) ;
26548: LD_VAR 0 1
26552: PPUSH
26553: LD_VAR 0 7
26557: PPUSH
26558: LD_VAR 0 8
26562: PPUSH
26563: CALL_OW 111
// exit ;
26567: POP
26568: POP
26569: GO 26575
// end ; end ;
26571: GO 26460
26573: POP
26574: POP
// end ;
26575: LD_VAR 0 3
26579: RET
// export function ScanBase ( side , base_area ) ; begin
26580: LD_INT 0
26582: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26583: LD_ADDR_VAR 0 3
26587: PUSH
26588: LD_VAR 0 2
26592: PPUSH
26593: LD_INT 81
26595: PUSH
26596: LD_VAR 0 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PPUSH
26605: CALL_OW 70
26609: ST_TO_ADDR
// end ;
26610: LD_VAR 0 3
26614: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26615: LD_INT 0
26617: PPUSH
26618: PPUSH
26619: PPUSH
26620: PPUSH
// result := false ;
26621: LD_ADDR_VAR 0 2
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// side := GetSide ( unit ) ;
26629: LD_ADDR_VAR 0 3
26633: PUSH
26634: LD_VAR 0 1
26638: PPUSH
26639: CALL_OW 255
26643: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: LD_VAR 0 1
26653: PPUSH
26654: CALL_OW 248
26658: ST_TO_ADDR
// case nat of 1 :
26659: LD_VAR 0 4
26663: PUSH
26664: LD_INT 1
26666: DOUBLE
26667: EQUAL
26668: IFTRUE 26672
26670: GO 26683
26672: POP
// tech := tech_lassight ; 2 :
26673: LD_ADDR_VAR 0 5
26677: PUSH
26678: LD_INT 12
26680: ST_TO_ADDR
26681: GO 26722
26683: LD_INT 2
26685: DOUBLE
26686: EQUAL
26687: IFTRUE 26691
26689: GO 26702
26691: POP
// tech := tech_mortar ; 3 :
26692: LD_ADDR_VAR 0 5
26696: PUSH
26697: LD_INT 41
26699: ST_TO_ADDR
26700: GO 26722
26702: LD_INT 3
26704: DOUBLE
26705: EQUAL
26706: IFTRUE 26710
26708: GO 26721
26710: POP
// tech := tech_bazooka ; end ;
26711: LD_ADDR_VAR 0 5
26715: PUSH
26716: LD_INT 44
26718: ST_TO_ADDR
26719: GO 26722
26721: POP
// if Researched ( side , tech ) then
26722: LD_VAR 0 3
26726: PPUSH
26727: LD_VAR 0 5
26731: PPUSH
26732: CALL_OW 325
26736: IFFALSE 26763
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26738: LD_ADDR_VAR 0 2
26742: PUSH
26743: LD_INT 5
26745: PUSH
26746: LD_INT 8
26748: PUSH
26749: LD_INT 9
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: PUSH
26757: LD_VAR 0 4
26761: ARRAY
26762: ST_TO_ADDR
// end ;
26763: LD_VAR 0 2
26767: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26768: LD_INT 0
26770: PPUSH
26771: PPUSH
26772: PPUSH
// if not mines then
26773: LD_VAR 0 2
26777: NOT
26778: IFFALSE 26782
// exit ;
26780: GO 26926
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26782: LD_ADDR_VAR 0 5
26786: PUSH
26787: LD_INT 81
26789: PUSH
26790: LD_VAR 0 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 3
26801: PUSH
26802: LD_INT 21
26804: PUSH
26805: LD_INT 3
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 69
26824: ST_TO_ADDR
// for i in mines do
26825: LD_ADDR_VAR 0 4
26829: PUSH
26830: LD_VAR 0 2
26834: PUSH
26835: FOR_IN
26836: IFFALSE 26924
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26838: LD_VAR 0 4
26842: PUSH
26843: LD_INT 1
26845: ARRAY
26846: PPUSH
26847: LD_VAR 0 4
26851: PUSH
26852: LD_INT 2
26854: ARRAY
26855: PPUSH
26856: CALL_OW 458
26860: NOT
26861: IFFALSE 26865
// continue ;
26863: GO 26835
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26865: LD_VAR 0 4
26869: PUSH
26870: LD_INT 1
26872: ARRAY
26873: PPUSH
26874: LD_VAR 0 4
26878: PUSH
26879: LD_INT 2
26881: ARRAY
26882: PPUSH
26883: CALL_OW 428
26887: PUSH
26888: LD_VAR 0 5
26892: IN
26893: IFFALSE 26922
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26895: LD_VAR 0 4
26899: PUSH
26900: LD_INT 1
26902: ARRAY
26903: PPUSH
26904: LD_VAR 0 4
26908: PUSH
26909: LD_INT 2
26911: ARRAY
26912: PPUSH
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 456
// end ;
26922: GO 26835
26924: POP
26925: POP
// end ;
26926: LD_VAR 0 3
26930: RET
// export function Count ( array ) ; begin
26931: LD_INT 0
26933: PPUSH
// result := array + 0 ;
26934: LD_ADDR_VAR 0 2
26938: PUSH
26939: LD_VAR 0 1
26943: PUSH
26944: LD_INT 0
26946: PLUS
26947: ST_TO_ADDR
// end ;
26948: LD_VAR 0 2
26952: RET
// export function IsEmpty ( building ) ; begin
26953: LD_INT 0
26955: PPUSH
// if not building then
26956: LD_VAR 0 1
26960: NOT
26961: IFFALSE 26965
// exit ;
26963: GO 27008
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26965: LD_ADDR_VAR 0 2
26969: PUSH
26970: LD_VAR 0 1
26974: PUSH
26975: LD_INT 22
26977: PUSH
26978: LD_VAR 0 1
26982: PPUSH
26983: CALL_OW 255
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 58
26994: PUSH
26995: EMPTY
26996: LIST
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PPUSH
27002: CALL_OW 69
27006: IN
27007: ST_TO_ADDR
// end ;
27008: LD_VAR 0 2
27012: RET
// export function IsNotFull ( building ) ; var places ; begin
27013: LD_INT 0
27015: PPUSH
27016: PPUSH
// if not building then
27017: LD_VAR 0 1
27021: NOT
27022: IFFALSE 27026
// exit ;
27024: GO 27054
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27026: LD_ADDR_VAR 0 2
27030: PUSH
27031: LD_VAR 0 1
27035: PPUSH
27036: LD_INT 3
27038: PUSH
27039: LD_INT 62
27041: PUSH
27042: EMPTY
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 72
27053: ST_TO_ADDR
// end ;
27054: LD_VAR 0 2
27058: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27059: LD_INT 0
27061: PPUSH
27062: PPUSH
27063: PPUSH
27064: PPUSH
// tmp := [ ] ;
27065: LD_ADDR_VAR 0 3
27069: PUSH
27070: EMPTY
27071: ST_TO_ADDR
// list := [ ] ;
27072: LD_ADDR_VAR 0 5
27076: PUSH
27077: EMPTY
27078: ST_TO_ADDR
// for i = 16 to 25 do
27079: LD_ADDR_VAR 0 4
27083: PUSH
27084: DOUBLE
27085: LD_INT 16
27087: DEC
27088: ST_TO_ADDR
27089: LD_INT 25
27091: PUSH
27092: FOR_TO
27093: IFFALSE 27166
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27095: LD_ADDR_VAR 0 3
27099: PUSH
27100: LD_VAR 0 3
27104: PUSH
27105: LD_INT 22
27107: PUSH
27108: LD_VAR 0 1
27112: PPUSH
27113: CALL_OW 255
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 91
27124: PUSH
27125: LD_VAR 0 1
27129: PUSH
27130: LD_INT 6
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 30
27140: PUSH
27141: LD_VAR 0 4
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: PUSH
27155: EMPTY
27156: LIST
27157: PPUSH
27158: CALL_OW 69
27162: ADD
27163: ST_TO_ADDR
27164: GO 27092
27166: POP
27167: POP
// for i = 1 to tmp do
27168: LD_ADDR_VAR 0 4
27172: PUSH
27173: DOUBLE
27174: LD_INT 1
27176: DEC
27177: ST_TO_ADDR
27178: LD_VAR 0 3
27182: PUSH
27183: FOR_TO
27184: IFFALSE 27272
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27186: LD_ADDR_VAR 0 5
27190: PUSH
27191: LD_VAR 0 5
27195: PUSH
27196: LD_VAR 0 3
27200: PUSH
27201: LD_VAR 0 4
27205: ARRAY
27206: PPUSH
27207: CALL_OW 266
27211: PUSH
27212: LD_VAR 0 3
27216: PUSH
27217: LD_VAR 0 4
27221: ARRAY
27222: PPUSH
27223: CALL_OW 250
27227: PUSH
27228: LD_VAR 0 3
27232: PUSH
27233: LD_VAR 0 4
27237: ARRAY
27238: PPUSH
27239: CALL_OW 251
27243: PUSH
27244: LD_VAR 0 3
27248: PUSH
27249: LD_VAR 0 4
27253: ARRAY
27254: PPUSH
27255: CALL_OW 254
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: ADD
27269: ST_TO_ADDR
27270: GO 27183
27272: POP
27273: POP
// result := list ;
27274: LD_ADDR_VAR 0 2
27278: PUSH
27279: LD_VAR 0 5
27283: ST_TO_ADDR
// end ;
27284: LD_VAR 0 2
27288: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27289: LD_INT 0
27291: PPUSH
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
27296: PPUSH
27297: PPUSH
// if not factory then
27298: LD_VAR 0 1
27302: NOT
27303: IFFALSE 27307
// exit ;
27305: GO 27900
// if control = control_apeman then
27307: LD_VAR 0 4
27311: PUSH
27312: LD_INT 5
27314: EQUAL
27315: IFFALSE 27424
// begin tmp := UnitsInside ( factory ) ;
27317: LD_ADDR_VAR 0 8
27321: PUSH
27322: LD_VAR 0 1
27326: PPUSH
27327: CALL_OW 313
27331: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27332: LD_VAR 0 8
27336: PPUSH
27337: LD_INT 25
27339: PUSH
27340: LD_INT 12
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PPUSH
27347: CALL_OW 72
27351: NOT
27352: IFFALSE 27362
// control := control_manual ;
27354: LD_ADDR_VAR 0 4
27358: PUSH
27359: LD_INT 1
27361: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27362: LD_ADDR_VAR 0 8
27366: PUSH
27367: LD_VAR 0 1
27371: PPUSH
27372: CALL 27059 0 1
27376: ST_TO_ADDR
// if tmp then
27377: LD_VAR 0 8
27381: IFFALSE 27424
// begin for i in tmp do
27383: LD_ADDR_VAR 0 7
27387: PUSH
27388: LD_VAR 0 8
27392: PUSH
27393: FOR_IN
27394: IFFALSE 27422
// if i [ 1 ] = b_ext_radio then
27396: LD_VAR 0 7
27400: PUSH
27401: LD_INT 1
27403: ARRAY
27404: PUSH
27405: LD_INT 22
27407: EQUAL
27408: IFFALSE 27420
// begin control := control_remote ;
27410: LD_ADDR_VAR 0 4
27414: PUSH
27415: LD_INT 2
27417: ST_TO_ADDR
// break ;
27418: GO 27422
// end ;
27420: GO 27393
27422: POP
27423: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27424: LD_VAR 0 1
27428: PPUSH
27429: LD_VAR 0 2
27433: PPUSH
27434: LD_VAR 0 3
27438: PPUSH
27439: LD_VAR 0 4
27443: PPUSH
27444: LD_VAR 0 5
27448: PPUSH
27449: CALL_OW 448
27453: IFFALSE 27488
// begin result := [ chassis , engine , control , weapon ] ;
27455: LD_ADDR_VAR 0 6
27459: PUSH
27460: LD_VAR 0 2
27464: PUSH
27465: LD_VAR 0 3
27469: PUSH
27470: LD_VAR 0 4
27474: PUSH
27475: LD_VAR 0 5
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: ST_TO_ADDR
// exit ;
27486: GO 27900
// end ; _chassis := AvailableChassisList ( factory ) ;
27488: LD_ADDR_VAR 0 9
27492: PUSH
27493: LD_VAR 0 1
27497: PPUSH
27498: CALL_OW 475
27502: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27503: LD_ADDR_VAR 0 11
27507: PUSH
27508: LD_VAR 0 1
27512: PPUSH
27513: CALL_OW 476
27517: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27518: LD_ADDR_VAR 0 12
27522: PUSH
27523: LD_VAR 0 1
27527: PPUSH
27528: CALL_OW 477
27532: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27533: LD_ADDR_VAR 0 10
27537: PUSH
27538: LD_VAR 0 1
27542: PPUSH
27543: CALL_OW 478
27547: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27548: LD_VAR 0 9
27552: NOT
27553: PUSH
27554: LD_VAR 0 11
27558: NOT
27559: OR
27560: PUSH
27561: LD_VAR 0 12
27565: NOT
27566: OR
27567: PUSH
27568: LD_VAR 0 10
27572: NOT
27573: OR
27574: IFFALSE 27609
// begin result := [ chassis , engine , control , weapon ] ;
27576: LD_ADDR_VAR 0 6
27580: PUSH
27581: LD_VAR 0 2
27585: PUSH
27586: LD_VAR 0 3
27590: PUSH
27591: LD_VAR 0 4
27595: PUSH
27596: LD_VAR 0 5
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: ST_TO_ADDR
// exit ;
27607: GO 27900
// end ; if not chassis in _chassis then
27609: LD_VAR 0 2
27613: PUSH
27614: LD_VAR 0 9
27618: IN
27619: NOT
27620: IFFALSE 27646
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27622: LD_ADDR_VAR 0 2
27626: PUSH
27627: LD_VAR 0 9
27631: PUSH
27632: LD_INT 1
27634: PPUSH
27635: LD_VAR 0 9
27639: PPUSH
27640: CALL_OW 12
27644: ARRAY
27645: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27646: LD_VAR 0 2
27650: PPUSH
27651: LD_VAR 0 3
27655: PPUSH
27656: CALL 27905 0 2
27660: NOT
27661: IFFALSE 27720
// repeat engine := _engine [ 1 ] ;
27663: LD_ADDR_VAR 0 3
27667: PUSH
27668: LD_VAR 0 11
27672: PUSH
27673: LD_INT 1
27675: ARRAY
27676: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27677: LD_ADDR_VAR 0 11
27681: PUSH
27682: LD_VAR 0 11
27686: PPUSH
27687: LD_INT 1
27689: PPUSH
27690: CALL_OW 3
27694: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27695: LD_VAR 0 2
27699: PPUSH
27700: LD_VAR 0 3
27704: PPUSH
27705: CALL 27905 0 2
27709: PUSH
27710: LD_VAR 0 11
27714: PUSH
27715: EMPTY
27716: EQUAL
27717: OR
27718: IFFALSE 27663
// if not control in _control then
27720: LD_VAR 0 4
27724: PUSH
27725: LD_VAR 0 12
27729: IN
27730: NOT
27731: IFFALSE 27757
// control := _control [ rand ( 1 , _control ) ] ;
27733: LD_ADDR_VAR 0 4
27737: PUSH
27738: LD_VAR 0 12
27742: PUSH
27743: LD_INT 1
27745: PPUSH
27746: LD_VAR 0 12
27750: PPUSH
27751: CALL_OW 12
27755: ARRAY
27756: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27757: LD_VAR 0 2
27761: PPUSH
27762: LD_VAR 0 5
27766: PPUSH
27767: CALL 28125 0 2
27771: NOT
27772: IFFALSE 27831
// repeat weapon := _weapon [ 1 ] ;
27774: LD_ADDR_VAR 0 5
27778: PUSH
27779: LD_VAR 0 10
27783: PUSH
27784: LD_INT 1
27786: ARRAY
27787: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27788: LD_ADDR_VAR 0 10
27792: PUSH
27793: LD_VAR 0 10
27797: PPUSH
27798: LD_INT 1
27800: PPUSH
27801: CALL_OW 3
27805: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27806: LD_VAR 0 2
27810: PPUSH
27811: LD_VAR 0 5
27815: PPUSH
27816: CALL 28125 0 2
27820: PUSH
27821: LD_VAR 0 10
27825: PUSH
27826: EMPTY
27827: EQUAL
27828: OR
27829: IFFALSE 27774
// result := [ ] ;
27831: LD_ADDR_VAR 0 6
27835: PUSH
27836: EMPTY
27837: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27838: LD_VAR 0 1
27842: PPUSH
27843: LD_VAR 0 2
27847: PPUSH
27848: LD_VAR 0 3
27852: PPUSH
27853: LD_VAR 0 4
27857: PPUSH
27858: LD_VAR 0 5
27862: PPUSH
27863: CALL_OW 448
27867: IFFALSE 27900
// result := [ chassis , engine , control , weapon ] ;
27869: LD_ADDR_VAR 0 6
27873: PUSH
27874: LD_VAR 0 2
27878: PUSH
27879: LD_VAR 0 3
27883: PUSH
27884: LD_VAR 0 4
27888: PUSH
27889: LD_VAR 0 5
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: ST_TO_ADDR
// end ;
27900: LD_VAR 0 6
27904: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27905: LD_INT 0
27907: PPUSH
// if not chassis or not engine then
27908: LD_VAR 0 1
27912: NOT
27913: PUSH
27914: LD_VAR 0 2
27918: NOT
27919: OR
27920: IFFALSE 27924
// exit ;
27922: GO 28120
// case engine of engine_solar :
27924: LD_VAR 0 2
27928: PUSH
27929: LD_INT 2
27931: DOUBLE
27932: EQUAL
27933: IFTRUE 27937
27935: GO 27975
27937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27938: LD_ADDR_VAR 0 3
27942: PUSH
27943: LD_INT 11
27945: PUSH
27946: LD_INT 12
27948: PUSH
27949: LD_INT 13
27951: PUSH
27952: LD_INT 14
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 3
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: ST_TO_ADDR
27973: GO 28104
27975: LD_INT 1
27977: DOUBLE
27978: EQUAL
27979: IFTRUE 27983
27981: GO 28045
27983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27984: LD_ADDR_VAR 0 3
27988: PUSH
27989: LD_INT 11
27991: PUSH
27992: LD_INT 12
27994: PUSH
27995: LD_INT 13
27997: PUSH
27998: LD_INT 14
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: LD_INT 2
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 4
28012: PUSH
28013: LD_INT 5
28015: PUSH
28016: LD_INT 21
28018: PUSH
28019: LD_INT 23
28021: PUSH
28022: LD_INT 22
28024: PUSH
28025: LD_INT 24
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: ST_TO_ADDR
28043: GO 28104
28045: LD_INT 3
28047: DOUBLE
28048: EQUAL
28049: IFTRUE 28053
28051: GO 28103
28053: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28054: LD_ADDR_VAR 0 3
28058: PUSH
28059: LD_INT 13
28061: PUSH
28062: LD_INT 14
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 3
28070: PUSH
28071: LD_INT 4
28073: PUSH
28074: LD_INT 5
28076: PUSH
28077: LD_INT 21
28079: PUSH
28080: LD_INT 22
28082: PUSH
28083: LD_INT 23
28085: PUSH
28086: LD_INT 24
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: ST_TO_ADDR
28101: GO 28104
28103: POP
// result := ( chassis in result ) ;
28104: LD_ADDR_VAR 0 3
28108: PUSH
28109: LD_VAR 0 1
28113: PUSH
28114: LD_VAR 0 3
28118: IN
28119: ST_TO_ADDR
// end ;
28120: LD_VAR 0 3
28124: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28125: LD_INT 0
28127: PPUSH
// if not chassis or not weapon then
28128: LD_VAR 0 1
28132: NOT
28133: PUSH
28134: LD_VAR 0 2
28138: NOT
28139: OR
28140: IFFALSE 28144
// exit ;
28142: GO 29204
// case weapon of us_machine_gun :
28144: LD_VAR 0 2
28148: PUSH
28149: LD_INT 2
28151: DOUBLE
28152: EQUAL
28153: IFTRUE 28157
28155: GO 28187
28157: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28158: LD_ADDR_VAR 0 3
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 4
28174: PUSH
28175: LD_INT 5
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: ST_TO_ADDR
28185: GO 29188
28187: LD_INT 3
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28195
28193: GO 28225
28195: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28196: LD_ADDR_VAR 0 3
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: LD_INT 3
28209: PUSH
28210: LD_INT 4
28212: PUSH
28213: LD_INT 5
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
28223: GO 29188
28225: LD_INT 11
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28263
28233: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28234: LD_ADDR_VAR 0 3
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 3
28247: PUSH
28248: LD_INT 4
28250: PUSH
28251: LD_INT 5
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: ST_TO_ADDR
28261: GO 29188
28263: LD_INT 4
28265: DOUBLE
28266: EQUAL
28267: IFTRUE 28271
28269: GO 28297
28271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28272: LD_ADDR_VAR 0 3
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: LD_INT 3
28282: PUSH
28283: LD_INT 4
28285: PUSH
28286: LD_INT 5
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: ST_TO_ADDR
28295: GO 29188
28297: LD_INT 5
28299: DOUBLE
28300: EQUAL
28301: IFTRUE 28305
28303: GO 28331
28305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28306: LD_ADDR_VAR 0 3
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 3
28316: PUSH
28317: LD_INT 4
28319: PUSH
28320: LD_INT 5
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: ST_TO_ADDR
28329: GO 29188
28331: LD_INT 9
28333: DOUBLE
28334: EQUAL
28335: IFTRUE 28339
28337: GO 28365
28339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28340: LD_ADDR_VAR 0 3
28344: PUSH
28345: LD_INT 2
28347: PUSH
28348: LD_INT 3
28350: PUSH
28351: LD_INT 4
28353: PUSH
28354: LD_INT 5
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: ST_TO_ADDR
28363: GO 29188
28365: LD_INT 7
28367: DOUBLE
28368: EQUAL
28369: IFTRUE 28373
28371: GO 28399
28373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28374: LD_ADDR_VAR 0 3
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 3
28384: PUSH
28385: LD_INT 4
28387: PUSH
28388: LD_INT 5
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
28397: GO 29188
28399: LD_INT 12
28401: DOUBLE
28402: EQUAL
28403: IFTRUE 28407
28405: GO 28433
28407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28408: LD_ADDR_VAR 0 3
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 3
28418: PUSH
28419: LD_INT 4
28421: PUSH
28422: LD_INT 5
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: ST_TO_ADDR
28431: GO 29188
28433: LD_INT 13
28435: DOUBLE
28436: EQUAL
28437: IFTRUE 28441
28439: GO 28467
28441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28442: LD_ADDR_VAR 0 3
28446: PUSH
28447: LD_INT 2
28449: PUSH
28450: LD_INT 3
28452: PUSH
28453: LD_INT 4
28455: PUSH
28456: LD_INT 5
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: ST_TO_ADDR
28465: GO 29188
28467: LD_INT 14
28469: DOUBLE
28470: EQUAL
28471: IFTRUE 28475
28473: GO 28493
28475: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28476: LD_ADDR_VAR 0 3
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: LD_INT 5
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: ST_TO_ADDR
28491: GO 29188
28493: LD_INT 6
28495: DOUBLE
28496: EQUAL
28497: IFTRUE 28501
28499: GO 28519
28501: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28502: LD_ADDR_VAR 0 3
28506: PUSH
28507: LD_INT 4
28509: PUSH
28510: LD_INT 5
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: ST_TO_ADDR
28517: GO 29188
28519: LD_INT 10
28521: DOUBLE
28522: EQUAL
28523: IFTRUE 28527
28525: GO 28545
28527: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28528: LD_ADDR_VAR 0 3
28532: PUSH
28533: LD_INT 4
28535: PUSH
28536: LD_INT 5
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: ST_TO_ADDR
28543: GO 29188
28545: LD_INT 22
28547: DOUBLE
28548: EQUAL
28549: IFTRUE 28553
28551: GO 28579
28553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28554: LD_ADDR_VAR 0 3
28558: PUSH
28559: LD_INT 11
28561: PUSH
28562: LD_INT 12
28564: PUSH
28565: LD_INT 13
28567: PUSH
28568: LD_INT 14
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: ST_TO_ADDR
28577: GO 29188
28579: LD_INT 23
28581: DOUBLE
28582: EQUAL
28583: IFTRUE 28587
28585: GO 28613
28587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28588: LD_ADDR_VAR 0 3
28592: PUSH
28593: LD_INT 11
28595: PUSH
28596: LD_INT 12
28598: PUSH
28599: LD_INT 13
28601: PUSH
28602: LD_INT 14
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
28611: GO 29188
28613: LD_INT 24
28615: DOUBLE
28616: EQUAL
28617: IFTRUE 28621
28619: GO 28647
28621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28622: LD_ADDR_VAR 0 3
28626: PUSH
28627: LD_INT 11
28629: PUSH
28630: LD_INT 12
28632: PUSH
28633: LD_INT 13
28635: PUSH
28636: LD_INT 14
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: ST_TO_ADDR
28645: GO 29188
28647: LD_INT 30
28649: DOUBLE
28650: EQUAL
28651: IFTRUE 28655
28653: GO 28681
28655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28656: LD_ADDR_VAR 0 3
28660: PUSH
28661: LD_INT 11
28663: PUSH
28664: LD_INT 12
28666: PUSH
28667: LD_INT 13
28669: PUSH
28670: LD_INT 14
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: ST_TO_ADDR
28679: GO 29188
28681: LD_INT 25
28683: DOUBLE
28684: EQUAL
28685: IFTRUE 28689
28687: GO 28707
28689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28690: LD_ADDR_VAR 0 3
28694: PUSH
28695: LD_INT 13
28697: PUSH
28698: LD_INT 14
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: ST_TO_ADDR
28705: GO 29188
28707: LD_INT 27
28709: DOUBLE
28710: EQUAL
28711: IFTRUE 28715
28713: GO 28733
28715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_INT 13
28723: PUSH
28724: LD_INT 14
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: ST_TO_ADDR
28731: GO 29188
28733: LD_INT 92
28735: DOUBLE
28736: EQUAL
28737: IFTRUE 28741
28739: GO 28767
28741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: LD_INT 11
28749: PUSH
28750: LD_INT 12
28752: PUSH
28753: LD_INT 13
28755: PUSH
28756: LD_INT 14
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: ST_TO_ADDR
28765: GO 29188
28767: LD_INT 28
28769: DOUBLE
28770: EQUAL
28771: IFTRUE 28775
28773: GO 28793
28775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28776: LD_ADDR_VAR 0 3
28780: PUSH
28781: LD_INT 13
28783: PUSH
28784: LD_INT 14
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: ST_TO_ADDR
28791: GO 29188
28793: LD_INT 29
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28819
28801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_INT 13
28809: PUSH
28810: LD_INT 14
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: ST_TO_ADDR
28817: GO 29188
28819: LD_INT 31
28821: DOUBLE
28822: EQUAL
28823: IFTRUE 28827
28825: GO 28845
28827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28828: LD_ADDR_VAR 0 3
28832: PUSH
28833: LD_INT 13
28835: PUSH
28836: LD_INT 14
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: ST_TO_ADDR
28843: GO 29188
28845: LD_INT 26
28847: DOUBLE
28848: EQUAL
28849: IFTRUE 28853
28851: GO 28871
28853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28854: LD_ADDR_VAR 0 3
28858: PUSH
28859: LD_INT 13
28861: PUSH
28862: LD_INT 14
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: ST_TO_ADDR
28869: GO 29188
28871: LD_INT 42
28873: DOUBLE
28874: EQUAL
28875: IFTRUE 28879
28877: GO 28905
28879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28880: LD_ADDR_VAR 0 3
28884: PUSH
28885: LD_INT 21
28887: PUSH
28888: LD_INT 22
28890: PUSH
28891: LD_INT 23
28893: PUSH
28894: LD_INT 24
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: ST_TO_ADDR
28903: GO 29188
28905: LD_INT 43
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 28939
28913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28914: LD_ADDR_VAR 0 3
28918: PUSH
28919: LD_INT 21
28921: PUSH
28922: LD_INT 22
28924: PUSH
28925: LD_INT 23
28927: PUSH
28928: LD_INT 24
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: ST_TO_ADDR
28937: GO 29188
28939: LD_INT 44
28941: DOUBLE
28942: EQUAL
28943: IFTRUE 28947
28945: GO 28973
28947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28948: LD_ADDR_VAR 0 3
28952: PUSH
28953: LD_INT 21
28955: PUSH
28956: LD_INT 22
28958: PUSH
28959: LD_INT 23
28961: PUSH
28962: LD_INT 24
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
28971: GO 29188
28973: LD_INT 45
28975: DOUBLE
28976: EQUAL
28977: IFTRUE 28981
28979: GO 29007
28981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28982: LD_ADDR_VAR 0 3
28986: PUSH
28987: LD_INT 21
28989: PUSH
28990: LD_INT 22
28992: PUSH
28993: LD_INT 23
28995: PUSH
28996: LD_INT 24
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: ST_TO_ADDR
29005: GO 29188
29007: LD_INT 49
29009: DOUBLE
29010: EQUAL
29011: IFTRUE 29015
29013: GO 29041
29015: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29016: LD_ADDR_VAR 0 3
29020: PUSH
29021: LD_INT 21
29023: PUSH
29024: LD_INT 22
29026: PUSH
29027: LD_INT 23
29029: PUSH
29030: LD_INT 24
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: ST_TO_ADDR
29039: GO 29188
29041: LD_INT 51
29043: DOUBLE
29044: EQUAL
29045: IFTRUE 29049
29047: GO 29075
29049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29050: LD_ADDR_VAR 0 3
29054: PUSH
29055: LD_INT 21
29057: PUSH
29058: LD_INT 22
29060: PUSH
29061: LD_INT 23
29063: PUSH
29064: LD_INT 24
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: ST_TO_ADDR
29073: GO 29188
29075: LD_INT 52
29077: DOUBLE
29078: EQUAL
29079: IFTRUE 29083
29081: GO 29109
29083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: LD_INT 21
29091: PUSH
29092: LD_INT 22
29094: PUSH
29095: LD_INT 23
29097: PUSH
29098: LD_INT 24
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: ST_TO_ADDR
29107: GO 29188
29109: LD_INT 53
29111: DOUBLE
29112: EQUAL
29113: IFTRUE 29117
29115: GO 29135
29117: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29118: LD_ADDR_VAR 0 3
29122: PUSH
29123: LD_INT 23
29125: PUSH
29126: LD_INT 24
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: ST_TO_ADDR
29133: GO 29188
29135: LD_INT 46
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29143
29141: GO 29161
29143: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29144: LD_ADDR_VAR 0 3
29148: PUSH
29149: LD_INT 23
29151: PUSH
29152: LD_INT 24
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: ST_TO_ADDR
29159: GO 29188
29161: LD_INT 47
29163: DOUBLE
29164: EQUAL
29165: IFTRUE 29169
29167: GO 29187
29169: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_INT 23
29177: PUSH
29178: LD_INT 24
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: ST_TO_ADDR
29185: GO 29188
29187: POP
// result := ( chassis in result ) ;
29188: LD_ADDR_VAR 0 3
29192: PUSH
29193: LD_VAR 0 1
29197: PUSH
29198: LD_VAR 0 3
29202: IN
29203: ST_TO_ADDR
// end ;
29204: LD_VAR 0 3
29208: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29209: LD_INT 0
29211: PPUSH
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
// result := array ;
29218: LD_ADDR_VAR 0 5
29222: PUSH
29223: LD_VAR 0 1
29227: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29228: LD_VAR 0 1
29232: NOT
29233: PUSH
29234: LD_VAR 0 2
29238: NOT
29239: OR
29240: PUSH
29241: LD_VAR 0 3
29245: NOT
29246: OR
29247: PUSH
29248: LD_VAR 0 2
29252: PUSH
29253: LD_VAR 0 1
29257: GREATER
29258: OR
29259: PUSH
29260: LD_VAR 0 3
29264: PUSH
29265: LD_VAR 0 1
29269: GREATER
29270: OR
29271: IFFALSE 29275
// exit ;
29273: GO 29571
// if direction then
29275: LD_VAR 0 4
29279: IFFALSE 29343
// begin d := 1 ;
29281: LD_ADDR_VAR 0 9
29285: PUSH
29286: LD_INT 1
29288: ST_TO_ADDR
// if i_from > i_to then
29289: LD_VAR 0 2
29293: PUSH
29294: LD_VAR 0 3
29298: GREATER
29299: IFFALSE 29325
// length := ( array - i_from ) + i_to else
29301: LD_ADDR_VAR 0 11
29305: PUSH
29306: LD_VAR 0 1
29310: PUSH
29311: LD_VAR 0 2
29315: MINUS
29316: PUSH
29317: LD_VAR 0 3
29321: PLUS
29322: ST_TO_ADDR
29323: GO 29341
// length := i_to - i_from ;
29325: LD_ADDR_VAR 0 11
29329: PUSH
29330: LD_VAR 0 3
29334: PUSH
29335: LD_VAR 0 2
29339: MINUS
29340: ST_TO_ADDR
// end else
29341: GO 29404
// begin d := - 1 ;
29343: LD_ADDR_VAR 0 9
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: ST_TO_ADDR
// if i_from > i_to then
29352: LD_VAR 0 2
29356: PUSH
29357: LD_VAR 0 3
29361: GREATER
29362: IFFALSE 29382
// length := i_from - i_to else
29364: LD_ADDR_VAR 0 11
29368: PUSH
29369: LD_VAR 0 2
29373: PUSH
29374: LD_VAR 0 3
29378: MINUS
29379: ST_TO_ADDR
29380: GO 29404
// length := ( array - i_to ) + i_from ;
29382: LD_ADDR_VAR 0 11
29386: PUSH
29387: LD_VAR 0 1
29391: PUSH
29392: LD_VAR 0 3
29396: MINUS
29397: PUSH
29398: LD_VAR 0 2
29402: PLUS
29403: ST_TO_ADDR
// end ; if not length then
29404: LD_VAR 0 11
29408: NOT
29409: IFFALSE 29413
// exit ;
29411: GO 29571
// tmp := array ;
29413: LD_ADDR_VAR 0 10
29417: PUSH
29418: LD_VAR 0 1
29422: ST_TO_ADDR
// for i = 1 to length do
29423: LD_ADDR_VAR 0 6
29427: PUSH
29428: DOUBLE
29429: LD_INT 1
29431: DEC
29432: ST_TO_ADDR
29433: LD_VAR 0 11
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29559
// begin for j = 1 to array do
29441: LD_ADDR_VAR 0 7
29445: PUSH
29446: DOUBLE
29447: LD_INT 1
29449: DEC
29450: ST_TO_ADDR
29451: LD_VAR 0 1
29455: PUSH
29456: FOR_TO
29457: IFFALSE 29545
// begin k := j + d ;
29459: LD_ADDR_VAR 0 8
29463: PUSH
29464: LD_VAR 0 7
29468: PUSH
29469: LD_VAR 0 9
29473: PLUS
29474: ST_TO_ADDR
// if k > array then
29475: LD_VAR 0 8
29479: PUSH
29480: LD_VAR 0 1
29484: GREATER
29485: IFFALSE 29495
// k := 1 ;
29487: LD_ADDR_VAR 0 8
29491: PUSH
29492: LD_INT 1
29494: ST_TO_ADDR
// if not k then
29495: LD_VAR 0 8
29499: NOT
29500: IFFALSE 29512
// k := array ;
29502: LD_ADDR_VAR 0 8
29506: PUSH
29507: LD_VAR 0 1
29511: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29512: LD_ADDR_VAR 0 10
29516: PUSH
29517: LD_VAR 0 10
29521: PPUSH
29522: LD_VAR 0 8
29526: PPUSH
29527: LD_VAR 0 1
29531: PUSH
29532: LD_VAR 0 7
29536: ARRAY
29537: PPUSH
29538: CALL_OW 1
29542: ST_TO_ADDR
// end ;
29543: GO 29456
29545: POP
29546: POP
// array := tmp ;
29547: LD_ADDR_VAR 0 1
29551: PUSH
29552: LD_VAR 0 10
29556: ST_TO_ADDR
// end ;
29557: GO 29438
29559: POP
29560: POP
// result := array ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: LD_VAR 0 1
29570: ST_TO_ADDR
// end ;
29571: LD_VAR 0 5
29575: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29576: LD_INT 0
29578: PPUSH
29579: PPUSH
// result := 0 ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_INT 0
29587: ST_TO_ADDR
// if not array or not value in array then
29588: LD_VAR 0 1
29592: NOT
29593: PUSH
29594: LD_VAR 0 2
29598: PUSH
29599: LD_VAR 0 1
29603: IN
29604: NOT
29605: OR
29606: IFFALSE 29610
// exit ;
29608: GO 29664
// for i = 1 to array do
29610: LD_ADDR_VAR 0 4
29614: PUSH
29615: DOUBLE
29616: LD_INT 1
29618: DEC
29619: ST_TO_ADDR
29620: LD_VAR 0 1
29624: PUSH
29625: FOR_TO
29626: IFFALSE 29662
// if value = array [ i ] then
29628: LD_VAR 0 2
29632: PUSH
29633: LD_VAR 0 1
29637: PUSH
29638: LD_VAR 0 4
29642: ARRAY
29643: EQUAL
29644: IFFALSE 29660
// begin result := i ;
29646: LD_ADDR_VAR 0 3
29650: PUSH
29651: LD_VAR 0 4
29655: ST_TO_ADDR
// exit ;
29656: POP
29657: POP
29658: GO 29664
// end ;
29660: GO 29625
29662: POP
29663: POP
// end ;
29664: LD_VAR 0 3
29668: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29669: LD_INT 0
29671: PPUSH
// vc_chassis := chassis ;
29672: LD_ADDR_OWVAR 37
29676: PUSH
29677: LD_VAR 0 1
29681: ST_TO_ADDR
// vc_engine := engine ;
29682: LD_ADDR_OWVAR 39
29686: PUSH
29687: LD_VAR 0 2
29691: ST_TO_ADDR
// vc_control := control ;
29692: LD_ADDR_OWVAR 38
29696: PUSH
29697: LD_VAR 0 3
29701: ST_TO_ADDR
// vc_weapon := weapon ;
29702: LD_ADDR_OWVAR 40
29706: PUSH
29707: LD_VAR 0 4
29711: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29712: LD_ADDR_OWVAR 41
29716: PUSH
29717: LD_VAR 0 5
29721: ST_TO_ADDR
// end ;
29722: LD_VAR 0 6
29726: RET
// export function WantPlant ( unit ) ; var task ; begin
29727: LD_INT 0
29729: PPUSH
29730: PPUSH
// result := false ;
29731: LD_ADDR_VAR 0 2
29735: PUSH
29736: LD_INT 0
29738: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29739: LD_ADDR_VAR 0 3
29743: PUSH
29744: LD_VAR 0 1
29748: PPUSH
29749: CALL_OW 437
29753: ST_TO_ADDR
// if task then
29754: LD_VAR 0 3
29758: IFFALSE 29786
// if task [ 1 ] [ 1 ] = p then
29760: LD_VAR 0 3
29764: PUSH
29765: LD_INT 1
29767: ARRAY
29768: PUSH
29769: LD_INT 1
29771: ARRAY
29772: PUSH
29773: LD_STRING p
29775: EQUAL
29776: IFFALSE 29786
// result := true ;
29778: LD_ADDR_VAR 0 2
29782: PUSH
29783: LD_INT 1
29785: ST_TO_ADDR
// end ;
29786: LD_VAR 0 2
29790: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29791: LD_INT 0
29793: PPUSH
29794: PPUSH
29795: PPUSH
29796: PPUSH
// if pos < 1 then
29797: LD_VAR 0 2
29801: PUSH
29802: LD_INT 1
29804: LESS
29805: IFFALSE 29809
// exit ;
29807: GO 30112
// if pos = 1 then
29809: LD_VAR 0 2
29813: PUSH
29814: LD_INT 1
29816: EQUAL
29817: IFFALSE 29850
// result := Replace ( arr , pos [ 1 ] , value ) else
29819: LD_ADDR_VAR 0 4
29823: PUSH
29824: LD_VAR 0 1
29828: PPUSH
29829: LD_VAR 0 2
29833: PUSH
29834: LD_INT 1
29836: ARRAY
29837: PPUSH
29838: LD_VAR 0 3
29842: PPUSH
29843: CALL_OW 1
29847: ST_TO_ADDR
29848: GO 30112
// begin tmp := arr ;
29850: LD_ADDR_VAR 0 6
29854: PUSH
29855: LD_VAR 0 1
29859: ST_TO_ADDR
// s_arr := [ tmp ] ;
29860: LD_ADDR_VAR 0 7
29864: PUSH
29865: LD_VAR 0 6
29869: PUSH
29870: EMPTY
29871: LIST
29872: ST_TO_ADDR
// for i = 1 to pos - 1 do
29873: LD_ADDR_VAR 0 5
29877: PUSH
29878: DOUBLE
29879: LD_INT 1
29881: DEC
29882: ST_TO_ADDR
29883: LD_VAR 0 2
29887: PUSH
29888: LD_INT 1
29890: MINUS
29891: PUSH
29892: FOR_TO
29893: IFFALSE 29938
// begin tmp := tmp [ pos [ i ] ] ;
29895: LD_ADDR_VAR 0 6
29899: PUSH
29900: LD_VAR 0 6
29904: PUSH
29905: LD_VAR 0 2
29909: PUSH
29910: LD_VAR 0 5
29914: ARRAY
29915: ARRAY
29916: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29917: LD_ADDR_VAR 0 7
29921: PUSH
29922: LD_VAR 0 7
29926: PUSH
29927: LD_VAR 0 6
29931: PUSH
29932: EMPTY
29933: LIST
29934: ADD
29935: ST_TO_ADDR
// end ;
29936: GO 29892
29938: POP
29939: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29940: LD_ADDR_VAR 0 6
29944: PUSH
29945: LD_VAR 0 6
29949: PPUSH
29950: LD_VAR 0 2
29954: PUSH
29955: LD_VAR 0 2
29959: ARRAY
29960: PPUSH
29961: LD_VAR 0 3
29965: PPUSH
29966: CALL_OW 1
29970: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29971: LD_ADDR_VAR 0 7
29975: PUSH
29976: LD_VAR 0 7
29980: PPUSH
29981: LD_VAR 0 7
29985: PPUSH
29986: LD_VAR 0 6
29990: PPUSH
29991: CALL_OW 1
29995: ST_TO_ADDR
// for i = s_arr downto 2 do
29996: LD_ADDR_VAR 0 5
30000: PUSH
30001: DOUBLE
30002: LD_VAR 0 7
30006: INC
30007: ST_TO_ADDR
30008: LD_INT 2
30010: PUSH
30011: FOR_DOWNTO
30012: IFFALSE 30096
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30014: LD_ADDR_VAR 0 6
30018: PUSH
30019: LD_VAR 0 7
30023: PUSH
30024: LD_VAR 0 5
30028: PUSH
30029: LD_INT 1
30031: MINUS
30032: ARRAY
30033: PPUSH
30034: LD_VAR 0 2
30038: PUSH
30039: LD_VAR 0 5
30043: PUSH
30044: LD_INT 1
30046: MINUS
30047: ARRAY
30048: PPUSH
30049: LD_VAR 0 7
30053: PUSH
30054: LD_VAR 0 5
30058: ARRAY
30059: PPUSH
30060: CALL_OW 1
30064: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30065: LD_ADDR_VAR 0 7
30069: PUSH
30070: LD_VAR 0 7
30074: PPUSH
30075: LD_VAR 0 5
30079: PUSH
30080: LD_INT 1
30082: MINUS
30083: PPUSH
30084: LD_VAR 0 6
30088: PPUSH
30089: CALL_OW 1
30093: ST_TO_ADDR
// end ;
30094: GO 30011
30096: POP
30097: POP
// result := s_arr [ 1 ] ;
30098: LD_ADDR_VAR 0 4
30102: PUSH
30103: LD_VAR 0 7
30107: PUSH
30108: LD_INT 1
30110: ARRAY
30111: ST_TO_ADDR
// end ; end ;
30112: LD_VAR 0 4
30116: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30117: LD_INT 0
30119: PPUSH
30120: PPUSH
// if not list then
30121: LD_VAR 0 1
30125: NOT
30126: IFFALSE 30130
// exit ;
30128: GO 30221
// i := list [ pos1 ] ;
30130: LD_ADDR_VAR 0 5
30134: PUSH
30135: LD_VAR 0 1
30139: PUSH
30140: LD_VAR 0 2
30144: ARRAY
30145: ST_TO_ADDR
// if not i then
30146: LD_VAR 0 5
30150: NOT
30151: IFFALSE 30155
// exit ;
30153: GO 30221
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30155: LD_ADDR_VAR 0 1
30159: PUSH
30160: LD_VAR 0 1
30164: PPUSH
30165: LD_VAR 0 2
30169: PPUSH
30170: LD_VAR 0 1
30174: PUSH
30175: LD_VAR 0 3
30179: ARRAY
30180: PPUSH
30181: CALL_OW 1
30185: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30186: LD_ADDR_VAR 0 1
30190: PUSH
30191: LD_VAR 0 1
30195: PPUSH
30196: LD_VAR 0 3
30200: PPUSH
30201: LD_VAR 0 5
30205: PPUSH
30206: CALL_OW 1
30210: ST_TO_ADDR
// result := list ;
30211: LD_ADDR_VAR 0 4
30215: PUSH
30216: LD_VAR 0 1
30220: ST_TO_ADDR
// end ;
30221: LD_VAR 0 4
30225: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30226: LD_INT 0
30228: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30229: LD_ADDR_VAR 0 5
30233: PUSH
30234: LD_VAR 0 1
30238: PPUSH
30239: CALL_OW 250
30243: PPUSH
30244: LD_VAR 0 1
30248: PPUSH
30249: CALL_OW 251
30253: PPUSH
30254: LD_VAR 0 2
30258: PPUSH
30259: LD_VAR 0 3
30263: PPUSH
30264: LD_VAR 0 4
30268: PPUSH
30269: CALL 30647 0 5
30273: ST_TO_ADDR
// end ;
30274: LD_VAR 0 5
30278: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30279: LD_INT 0
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
// if not list or not unit then
30285: LD_VAR 0 2
30289: NOT
30290: PUSH
30291: LD_VAR 0 1
30295: NOT
30296: OR
30297: IFFALSE 30301
// exit ;
30299: GO 30642
// result := [ ] ;
30301: LD_ADDR_VAR 0 5
30305: PUSH
30306: EMPTY
30307: ST_TO_ADDR
// for i in list do
30308: LD_ADDR_VAR 0 6
30312: PUSH
30313: LD_VAR 0 2
30317: PUSH
30318: FOR_IN
30319: IFFALSE 30537
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30321: LD_ADDR_VAR 0 8
30325: PUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: LD_VAR 0 6
30335: PUSH
30336: LD_INT 1
30338: ARRAY
30339: PPUSH
30340: LD_VAR 0 6
30344: PUSH
30345: LD_INT 2
30347: ARRAY
30348: PPUSH
30349: CALL_OW 297
30353: ST_TO_ADDR
// if not Count ( result ) then
30354: LD_VAR 0 5
30358: PPUSH
30359: CALL 26931 0 1
30363: NOT
30364: IFFALSE 30397
// begin result := Join ( result , [ i , tmp ] ) ;
30366: LD_ADDR_VAR 0 5
30370: PUSH
30371: LD_VAR 0 5
30375: PPUSH
30376: LD_VAR 0 6
30380: PUSH
30381: LD_VAR 0 8
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL 62520 0 2
30394: ST_TO_ADDR
// continue ;
30395: GO 30318
// end ; if result [ result ] [ 2 ] <= tmp then
30397: LD_VAR 0 5
30401: PUSH
30402: LD_VAR 0 5
30406: ARRAY
30407: PUSH
30408: LD_INT 2
30410: ARRAY
30411: PUSH
30412: LD_VAR 0 8
30416: LESSEQUAL
30417: IFFALSE 30450
// result := Join ( result , [ i , tmp ] ) else
30419: LD_ADDR_VAR 0 5
30423: PUSH
30424: LD_VAR 0 5
30428: PPUSH
30429: LD_VAR 0 6
30433: PUSH
30434: LD_VAR 0 8
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL 62520 0 2
30447: ST_TO_ADDR
30448: GO 30535
// begin for j := 1 to Count ( result ) do
30450: LD_ADDR_VAR 0 7
30454: PUSH
30455: DOUBLE
30456: LD_INT 1
30458: DEC
30459: ST_TO_ADDR
30460: LD_VAR 0 5
30464: PPUSH
30465: CALL 26931 0 1
30469: PUSH
30470: FOR_TO
30471: IFFALSE 30533
// begin if tmp < result [ j ] [ 2 ] then
30473: LD_VAR 0 8
30477: PUSH
30478: LD_VAR 0 5
30482: PUSH
30483: LD_VAR 0 7
30487: ARRAY
30488: PUSH
30489: LD_INT 2
30491: ARRAY
30492: LESS
30493: IFFALSE 30531
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30495: LD_ADDR_VAR 0 5
30499: PUSH
30500: LD_VAR 0 5
30504: PPUSH
30505: LD_VAR 0 7
30509: PPUSH
30510: LD_VAR 0 6
30514: PUSH
30515: LD_VAR 0 8
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PPUSH
30524: CALL_OW 2
30528: ST_TO_ADDR
// break ;
30529: GO 30533
// end ; end ;
30531: GO 30470
30533: POP
30534: POP
// end ; end ;
30535: GO 30318
30537: POP
30538: POP
// if result and not asc then
30539: LD_VAR 0 5
30543: PUSH
30544: LD_VAR 0 3
30548: NOT
30549: AND
30550: IFFALSE 30567
// result := ReverseArray ( result ) ;
30552: LD_ADDR_VAR 0 5
30556: PUSH
30557: LD_VAR 0 5
30561: PPUSH
30562: CALL 57807 0 1
30566: ST_TO_ADDR
// tmp := [ ] ;
30567: LD_ADDR_VAR 0 8
30571: PUSH
30572: EMPTY
30573: ST_TO_ADDR
// if mode then
30574: LD_VAR 0 4
30578: IFFALSE 30642
// begin for i := 1 to result do
30580: LD_ADDR_VAR 0 6
30584: PUSH
30585: DOUBLE
30586: LD_INT 1
30588: DEC
30589: ST_TO_ADDR
30590: LD_VAR 0 5
30594: PUSH
30595: FOR_TO
30596: IFFALSE 30630
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30598: LD_ADDR_VAR 0 8
30602: PUSH
30603: LD_VAR 0 8
30607: PPUSH
30608: LD_VAR 0 5
30612: PUSH
30613: LD_VAR 0 6
30617: ARRAY
30618: PUSH
30619: LD_INT 1
30621: ARRAY
30622: PPUSH
30623: CALL 62520 0 2
30627: ST_TO_ADDR
30628: GO 30595
30630: POP
30631: POP
// result := tmp ;
30632: LD_ADDR_VAR 0 5
30636: PUSH
30637: LD_VAR 0 8
30641: ST_TO_ADDR
// end ; end ;
30642: LD_VAR 0 5
30646: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30647: LD_INT 0
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
// if not list then
30653: LD_VAR 0 3
30657: NOT
30658: IFFALSE 30662
// exit ;
30660: GO 31050
// result := [ ] ;
30662: LD_ADDR_VAR 0 6
30666: PUSH
30667: EMPTY
30668: ST_TO_ADDR
// for i in list do
30669: LD_ADDR_VAR 0 7
30673: PUSH
30674: LD_VAR 0 3
30678: PUSH
30679: FOR_IN
30680: IFFALSE 30882
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30682: LD_ADDR_VAR 0 9
30686: PUSH
30687: LD_VAR 0 7
30691: PPUSH
30692: LD_VAR 0 1
30696: PPUSH
30697: LD_VAR 0 2
30701: PPUSH
30702: CALL_OW 297
30706: ST_TO_ADDR
// if not result then
30707: LD_VAR 0 6
30711: NOT
30712: IFFALSE 30738
// result := [ [ i , tmp ] ] else
30714: LD_ADDR_VAR 0 6
30718: PUSH
30719: LD_VAR 0 7
30723: PUSH
30724: LD_VAR 0 9
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: EMPTY
30734: LIST
30735: ST_TO_ADDR
30736: GO 30880
// begin if result [ result ] [ 2 ] < tmp then
30738: LD_VAR 0 6
30742: PUSH
30743: LD_VAR 0 6
30747: ARRAY
30748: PUSH
30749: LD_INT 2
30751: ARRAY
30752: PUSH
30753: LD_VAR 0 9
30757: LESS
30758: IFFALSE 30800
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30760: LD_ADDR_VAR 0 6
30764: PUSH
30765: LD_VAR 0 6
30769: PPUSH
30770: LD_VAR 0 6
30774: PUSH
30775: LD_INT 1
30777: PLUS
30778: PPUSH
30779: LD_VAR 0 7
30783: PUSH
30784: LD_VAR 0 9
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PPUSH
30793: CALL_OW 2
30797: ST_TO_ADDR
30798: GO 30880
// for j = 1 to result do
30800: LD_ADDR_VAR 0 8
30804: PUSH
30805: DOUBLE
30806: LD_INT 1
30808: DEC
30809: ST_TO_ADDR
30810: LD_VAR 0 6
30814: PUSH
30815: FOR_TO
30816: IFFALSE 30878
// begin if tmp < result [ j ] [ 2 ] then
30818: LD_VAR 0 9
30822: PUSH
30823: LD_VAR 0 6
30827: PUSH
30828: LD_VAR 0 8
30832: ARRAY
30833: PUSH
30834: LD_INT 2
30836: ARRAY
30837: LESS
30838: IFFALSE 30876
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30840: LD_ADDR_VAR 0 6
30844: PUSH
30845: LD_VAR 0 6
30849: PPUSH
30850: LD_VAR 0 8
30854: PPUSH
30855: LD_VAR 0 7
30859: PUSH
30860: LD_VAR 0 9
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PPUSH
30869: CALL_OW 2
30873: ST_TO_ADDR
// break ;
30874: GO 30878
// end ; end ;
30876: GO 30815
30878: POP
30879: POP
// end ; end ;
30880: GO 30679
30882: POP
30883: POP
// if result and not asc then
30884: LD_VAR 0 6
30888: PUSH
30889: LD_VAR 0 4
30893: NOT
30894: AND
30895: IFFALSE 30970
// begin tmp := result ;
30897: LD_ADDR_VAR 0 9
30901: PUSH
30902: LD_VAR 0 6
30906: ST_TO_ADDR
// for i = tmp downto 1 do
30907: LD_ADDR_VAR 0 7
30911: PUSH
30912: DOUBLE
30913: LD_VAR 0 9
30917: INC
30918: ST_TO_ADDR
30919: LD_INT 1
30921: PUSH
30922: FOR_DOWNTO
30923: IFFALSE 30968
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30925: LD_ADDR_VAR 0 6
30929: PUSH
30930: LD_VAR 0 6
30934: PPUSH
30935: LD_VAR 0 9
30939: PUSH
30940: LD_VAR 0 7
30944: MINUS
30945: PUSH
30946: LD_INT 1
30948: PLUS
30949: PPUSH
30950: LD_VAR 0 9
30954: PUSH
30955: LD_VAR 0 7
30959: ARRAY
30960: PPUSH
30961: CALL_OW 1
30965: ST_TO_ADDR
30966: GO 30922
30968: POP
30969: POP
// end ; tmp := [ ] ;
30970: LD_ADDR_VAR 0 9
30974: PUSH
30975: EMPTY
30976: ST_TO_ADDR
// if mode then
30977: LD_VAR 0 5
30981: IFFALSE 31050
// begin for i = 1 to result do
30983: LD_ADDR_VAR 0 7
30987: PUSH
30988: DOUBLE
30989: LD_INT 1
30991: DEC
30992: ST_TO_ADDR
30993: LD_VAR 0 6
30997: PUSH
30998: FOR_TO
30999: IFFALSE 31038
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31001: LD_ADDR_VAR 0 9
31005: PUSH
31006: LD_VAR 0 9
31010: PPUSH
31011: LD_VAR 0 7
31015: PPUSH
31016: LD_VAR 0 6
31020: PUSH
31021: LD_VAR 0 7
31025: ARRAY
31026: PUSH
31027: LD_INT 1
31029: ARRAY
31030: PPUSH
31031: CALL_OW 1
31035: ST_TO_ADDR
31036: GO 30998
31038: POP
31039: POP
// result := tmp ;
31040: LD_ADDR_VAR 0 6
31044: PUSH
31045: LD_VAR 0 9
31049: ST_TO_ADDR
// end ; end ;
31050: LD_VAR 0 6
31054: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31055: LD_INT 0
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31063: LD_ADDR_VAR 0 5
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
// if not x or not y then
31085: LD_VAR 0 2
31089: NOT
31090: PUSH
31091: LD_VAR 0 3
31095: NOT
31096: OR
31097: IFFALSE 31101
// exit ;
31099: GO 32751
// if not range then
31101: LD_VAR 0 4
31105: NOT
31106: IFFALSE 31116
// range := 10 ;
31108: LD_ADDR_VAR 0 4
31112: PUSH
31113: LD_INT 10
31115: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31116: LD_ADDR_VAR 0 8
31120: PUSH
31121: LD_INT 81
31123: PUSH
31124: LD_VAR 0 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 92
31135: PUSH
31136: LD_VAR 0 2
31140: PUSH
31141: LD_VAR 0 3
31145: PUSH
31146: LD_VAR 0 4
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: LD_INT 21
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: PPUSH
31179: CALL_OW 69
31183: ST_TO_ADDR
// if not tmp then
31184: LD_VAR 0 8
31188: NOT
31189: IFFALSE 31193
// exit ;
31191: GO 32751
// for i in tmp do
31193: LD_ADDR_VAR 0 6
31197: PUSH
31198: LD_VAR 0 8
31202: PUSH
31203: FOR_IN
31204: IFFALSE 32726
// begin points := [ 0 , 0 , 0 ] ;
31206: LD_ADDR_VAR 0 9
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: ST_TO_ADDR
// bpoints := 1 ;
31225: LD_ADDR_VAR 0 10
31229: PUSH
31230: LD_INT 1
31232: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31233: LD_VAR 0 6
31237: PPUSH
31238: CALL_OW 247
31242: PUSH
31243: LD_INT 1
31245: DOUBLE
31246: EQUAL
31247: IFTRUE 31251
31249: GO 31829
31251: POP
// begin if GetClass ( i ) = 1 then
31252: LD_VAR 0 6
31256: PPUSH
31257: CALL_OW 257
31261: PUSH
31262: LD_INT 1
31264: EQUAL
31265: IFFALSE 31286
// points := [ 10 , 5 , 3 ] ;
31267: LD_ADDR_VAR 0 9
31271: PUSH
31272: LD_INT 10
31274: PUSH
31275: LD_INT 5
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31286: LD_VAR 0 6
31290: PPUSH
31291: CALL_OW 257
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: IN
31310: IFFALSE 31331
// points := [ 3 , 2 , 1 ] ;
31312: LD_ADDR_VAR 0 9
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: LD_INT 2
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31331: LD_VAR 0 6
31335: PPUSH
31336: CALL_OW 257
31340: PUSH
31341: LD_INT 5
31343: EQUAL
31344: IFFALSE 31365
// points := [ 130 , 5 , 2 ] ;
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_INT 130
31353: PUSH
31354: LD_INT 5
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31365: LD_VAR 0 6
31369: PPUSH
31370: CALL_OW 257
31374: PUSH
31375: LD_INT 8
31377: EQUAL
31378: IFFALSE 31399
// points := [ 35 , 35 , 30 ] ;
31380: LD_ADDR_VAR 0 9
31384: PUSH
31385: LD_INT 35
31387: PUSH
31388: LD_INT 35
31390: PUSH
31391: LD_INT 30
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31399: LD_VAR 0 6
31403: PPUSH
31404: CALL_OW 257
31408: PUSH
31409: LD_INT 9
31411: EQUAL
31412: IFFALSE 31433
// points := [ 20 , 55 , 40 ] ;
31414: LD_ADDR_VAR 0 9
31418: PUSH
31419: LD_INT 20
31421: PUSH
31422: LD_INT 55
31424: PUSH
31425: LD_INT 40
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31433: LD_VAR 0 6
31437: PPUSH
31438: CALL_OW 257
31442: PUSH
31443: LD_INT 12
31445: PUSH
31446: LD_INT 16
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: IN
31453: IFFALSE 31474
// points := [ 5 , 3 , 2 ] ;
31455: LD_ADDR_VAR 0 9
31459: PUSH
31460: LD_INT 5
31462: PUSH
31463: LD_INT 3
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31474: LD_VAR 0 6
31478: PPUSH
31479: CALL_OW 257
31483: PUSH
31484: LD_INT 17
31486: EQUAL
31487: IFFALSE 31508
// points := [ 100 , 50 , 75 ] ;
31489: LD_ADDR_VAR 0 9
31493: PUSH
31494: LD_INT 100
31496: PUSH
31497: LD_INT 50
31499: PUSH
31500: LD_INT 75
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31508: LD_VAR 0 6
31512: PPUSH
31513: CALL_OW 257
31517: PUSH
31518: LD_INT 15
31520: EQUAL
31521: IFFALSE 31542
// points := [ 10 , 5 , 3 ] ;
31523: LD_ADDR_VAR 0 9
31527: PUSH
31528: LD_INT 10
31530: PUSH
31531: LD_INT 5
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31542: LD_VAR 0 6
31546: PPUSH
31547: CALL_OW 257
31551: PUSH
31552: LD_INT 14
31554: EQUAL
31555: IFFALSE 31576
// points := [ 10 , 0 , 0 ] ;
31557: LD_ADDR_VAR 0 9
31561: PUSH
31562: LD_INT 10
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31576: LD_VAR 0 6
31580: PPUSH
31581: CALL_OW 257
31585: PUSH
31586: LD_INT 11
31588: EQUAL
31589: IFFALSE 31610
// points := [ 30 , 10 , 5 ] ;
31591: LD_ADDR_VAR 0 9
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: LD_INT 10
31601: PUSH
31602: LD_INT 5
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31610: LD_VAR 0 1
31614: PPUSH
31615: LD_INT 5
31617: PPUSH
31618: CALL_OW 321
31622: PUSH
31623: LD_INT 2
31625: EQUAL
31626: IFFALSE 31643
// bpoints := bpoints * 1.8 ;
31628: LD_ADDR_VAR 0 10
31632: PUSH
31633: LD_VAR 0 10
31637: PUSH
31638: LD_REAL  1.80000000000000E+0000
31641: MUL
31642: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31643: LD_VAR 0 6
31647: PPUSH
31648: CALL_OW 257
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: LD_INT 4
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: IN
31671: PUSH
31672: LD_VAR 0 1
31676: PPUSH
31677: LD_INT 51
31679: PPUSH
31680: CALL_OW 321
31684: PUSH
31685: LD_INT 2
31687: EQUAL
31688: AND
31689: IFFALSE 31706
// bpoints := bpoints * 1.2 ;
31691: LD_ADDR_VAR 0 10
31695: PUSH
31696: LD_VAR 0 10
31700: PUSH
31701: LD_REAL  1.20000000000000E+0000
31704: MUL
31705: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31706: LD_VAR 0 6
31710: PPUSH
31711: CALL_OW 257
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: LD_INT 7
31721: PUSH
31722: LD_INT 9
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: LIST
31729: IN
31730: PUSH
31731: LD_VAR 0 1
31735: PPUSH
31736: LD_INT 52
31738: PPUSH
31739: CALL_OW 321
31743: PUSH
31744: LD_INT 2
31746: EQUAL
31747: AND
31748: IFFALSE 31765
// bpoints := bpoints * 1.5 ;
31750: LD_ADDR_VAR 0 10
31754: PUSH
31755: LD_VAR 0 10
31759: PUSH
31760: LD_REAL  1.50000000000000E+0000
31763: MUL
31764: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31765: LD_VAR 0 1
31769: PPUSH
31770: LD_INT 66
31772: PPUSH
31773: CALL_OW 321
31777: PUSH
31778: LD_INT 2
31780: EQUAL
31781: IFFALSE 31798
// bpoints := bpoints * 1.1 ;
31783: LD_ADDR_VAR 0 10
31787: PUSH
31788: LD_VAR 0 10
31792: PUSH
31793: LD_REAL  1.10000000000000E+0000
31796: MUL
31797: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31798: LD_ADDR_VAR 0 10
31802: PUSH
31803: LD_VAR 0 10
31807: PUSH
31808: LD_VAR 0 6
31812: PPUSH
31813: LD_INT 1
31815: PPUSH
31816: CALL_OW 259
31820: PUSH
31821: LD_REAL  1.15000000000000E+0000
31824: MUL
31825: MUL
31826: ST_TO_ADDR
// end ; unit_vehicle :
31827: GO 32655
31829: LD_INT 2
31831: DOUBLE
31832: EQUAL
31833: IFTRUE 31837
31835: GO 32643
31837: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31838: LD_VAR 0 6
31842: PPUSH
31843: CALL_OW 264
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 42
31853: PUSH
31854: LD_INT 24
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: IN
31862: IFFALSE 31883
// points := [ 25 , 5 , 3 ] ;
31864: LD_ADDR_VAR 0 9
31868: PUSH
31869: LD_INT 25
31871: PUSH
31872: LD_INT 5
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31883: LD_VAR 0 6
31887: PPUSH
31888: CALL_OW 264
31892: PUSH
31893: LD_INT 4
31895: PUSH
31896: LD_INT 43
31898: PUSH
31899: LD_INT 25
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: IN
31907: IFFALSE 31928
// points := [ 40 , 15 , 5 ] ;
31909: LD_ADDR_VAR 0 9
31913: PUSH
31914: LD_INT 40
31916: PUSH
31917: LD_INT 15
31919: PUSH
31920: LD_INT 5
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31928: LD_VAR 0 6
31932: PPUSH
31933: CALL_OW 264
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: LD_INT 23
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: IN
31948: IFFALSE 31969
// points := [ 7 , 25 , 8 ] ;
31950: LD_ADDR_VAR 0 9
31954: PUSH
31955: LD_INT 7
31957: PUSH
31958: LD_INT 25
31960: PUSH
31961: LD_INT 8
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31969: LD_VAR 0 6
31973: PPUSH
31974: CALL_OW 264
31978: PUSH
31979: LD_INT 5
31981: PUSH
31982: LD_INT 27
31984: PUSH
31985: LD_INT 44
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: IN
31993: IFFALSE 32014
// points := [ 14 , 50 , 16 ] ;
31995: LD_ADDR_VAR 0 9
31999: PUSH
32000: LD_INT 14
32002: PUSH
32003: LD_INT 50
32005: PUSH
32006: LD_INT 16
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32014: LD_VAR 0 6
32018: PPUSH
32019: CALL_OW 264
32023: PUSH
32024: LD_INT 6
32026: PUSH
32027: LD_INT 46
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: IN
32034: IFFALSE 32055
// points := [ 32 , 120 , 70 ] ;
32036: LD_ADDR_VAR 0 9
32040: PUSH
32041: LD_INT 32
32043: PUSH
32044: LD_INT 120
32046: PUSH
32047: LD_INT 70
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32055: LD_VAR 0 6
32059: PPUSH
32060: CALL_OW 264
32064: PUSH
32065: LD_INT 7
32067: PUSH
32068: LD_INT 28
32070: PUSH
32071: LD_INT 45
32073: PUSH
32074: LD_INT 92
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: IN
32083: IFFALSE 32104
// points := [ 35 , 20 , 45 ] ;
32085: LD_ADDR_VAR 0 9
32089: PUSH
32090: LD_INT 35
32092: PUSH
32093: LD_INT 20
32095: PUSH
32096: LD_INT 45
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32104: LD_VAR 0 6
32108: PPUSH
32109: CALL_OW 264
32113: PUSH
32114: LD_INT 47
32116: PUSH
32117: EMPTY
32118: LIST
32119: IN
32120: IFFALSE 32141
// points := [ 67 , 45 , 75 ] ;
32122: LD_ADDR_VAR 0 9
32126: PUSH
32127: LD_INT 67
32129: PUSH
32130: LD_INT 45
32132: PUSH
32133: LD_INT 75
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32141: LD_VAR 0 6
32145: PPUSH
32146: CALL_OW 264
32150: PUSH
32151: LD_INT 26
32153: PUSH
32154: EMPTY
32155: LIST
32156: IN
32157: IFFALSE 32178
// points := [ 120 , 30 , 80 ] ;
32159: LD_ADDR_VAR 0 9
32163: PUSH
32164: LD_INT 120
32166: PUSH
32167: LD_INT 30
32169: PUSH
32170: LD_INT 80
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32178: LD_VAR 0 6
32182: PPUSH
32183: CALL_OW 264
32187: PUSH
32188: LD_INT 22
32190: PUSH
32191: EMPTY
32192: LIST
32193: IN
32194: IFFALSE 32215
// points := [ 40 , 1 , 1 ] ;
32196: LD_ADDR_VAR 0 9
32200: PUSH
32201: LD_INT 40
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32215: LD_VAR 0 6
32219: PPUSH
32220: CALL_OW 264
32224: PUSH
32225: LD_INT 29
32227: PUSH
32228: EMPTY
32229: LIST
32230: IN
32231: IFFALSE 32252
// points := [ 70 , 200 , 400 ] ;
32233: LD_ADDR_VAR 0 9
32237: PUSH
32238: LD_INT 70
32240: PUSH
32241: LD_INT 200
32243: PUSH
32244: LD_INT 400
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: LIST
32251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32252: LD_VAR 0 6
32256: PPUSH
32257: CALL_OW 264
32261: PUSH
32262: LD_INT 14
32264: PUSH
32265: LD_INT 53
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: IN
32272: IFFALSE 32293
// points := [ 40 , 10 , 20 ] ;
32274: LD_ADDR_VAR 0 9
32278: PUSH
32279: LD_INT 40
32281: PUSH
32282: LD_INT 10
32284: PUSH
32285: LD_INT 20
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: LIST
32292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32293: LD_VAR 0 6
32297: PPUSH
32298: CALL_OW 264
32302: PUSH
32303: LD_INT 9
32305: PUSH
32306: EMPTY
32307: LIST
32308: IN
32309: IFFALSE 32330
// points := [ 5 , 70 , 20 ] ;
32311: LD_ADDR_VAR 0 9
32315: PUSH
32316: LD_INT 5
32318: PUSH
32319: LD_INT 70
32321: PUSH
32322: LD_INT 20
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32330: LD_VAR 0 6
32334: PPUSH
32335: CALL_OW 264
32339: PUSH
32340: LD_INT 10
32342: PUSH
32343: EMPTY
32344: LIST
32345: IN
32346: IFFALSE 32367
// points := [ 35 , 110 , 70 ] ;
32348: LD_ADDR_VAR 0 9
32352: PUSH
32353: LD_INT 35
32355: PUSH
32356: LD_INT 110
32358: PUSH
32359: LD_INT 70
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32367: LD_VAR 0 6
32371: PPUSH
32372: CALL_OW 265
32376: PUSH
32377: LD_INT 25
32379: EQUAL
32380: IFFALSE 32401
// points := [ 80 , 65 , 100 ] ;
32382: LD_ADDR_VAR 0 9
32386: PUSH
32387: LD_INT 80
32389: PUSH
32390: LD_INT 65
32392: PUSH
32393: LD_INT 100
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32401: LD_VAR 0 6
32405: PPUSH
32406: CALL_OW 263
32410: PUSH
32411: LD_INT 1
32413: EQUAL
32414: IFFALSE 32449
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32416: LD_ADDR_VAR 0 10
32420: PUSH
32421: LD_VAR 0 10
32425: PUSH
32426: LD_VAR 0 6
32430: PPUSH
32431: CALL_OW 311
32435: PPUSH
32436: LD_INT 3
32438: PPUSH
32439: CALL_OW 259
32443: PUSH
32444: LD_INT 4
32446: MUL
32447: MUL
32448: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32449: LD_VAR 0 6
32453: PPUSH
32454: CALL_OW 263
32458: PUSH
32459: LD_INT 2
32461: EQUAL
32462: IFFALSE 32513
// begin j := IsControledBy ( i ) ;
32464: LD_ADDR_VAR 0 7
32468: PUSH
32469: LD_VAR 0 6
32473: PPUSH
32474: CALL_OW 312
32478: ST_TO_ADDR
// if j then
32479: LD_VAR 0 7
32483: IFFALSE 32513
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32485: LD_ADDR_VAR 0 10
32489: PUSH
32490: LD_VAR 0 10
32494: PUSH
32495: LD_VAR 0 7
32499: PPUSH
32500: LD_INT 3
32502: PPUSH
32503: CALL_OW 259
32507: PUSH
32508: LD_INT 3
32510: MUL
32511: MUL
32512: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32513: LD_VAR 0 6
32517: PPUSH
32518: CALL_OW 264
32522: PUSH
32523: LD_INT 5
32525: PUSH
32526: LD_INT 6
32528: PUSH
32529: LD_INT 46
32531: PUSH
32532: LD_INT 44
32534: PUSH
32535: LD_INT 47
32537: PUSH
32538: LD_INT 45
32540: PUSH
32541: LD_INT 28
32543: PUSH
32544: LD_INT 7
32546: PUSH
32547: LD_INT 27
32549: PUSH
32550: LD_INT 29
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: IN
32565: PUSH
32566: LD_VAR 0 1
32570: PPUSH
32571: LD_INT 52
32573: PPUSH
32574: CALL_OW 321
32578: PUSH
32579: LD_INT 2
32581: EQUAL
32582: AND
32583: IFFALSE 32600
// bpoints := bpoints * 1.2 ;
32585: LD_ADDR_VAR 0 10
32589: PUSH
32590: LD_VAR 0 10
32594: PUSH
32595: LD_REAL  1.20000000000000E+0000
32598: MUL
32599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32600: LD_VAR 0 6
32604: PPUSH
32605: CALL_OW 264
32609: PUSH
32610: LD_INT 6
32612: PUSH
32613: LD_INT 46
32615: PUSH
32616: LD_INT 47
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: LIST
32623: IN
32624: IFFALSE 32641
// bpoints := bpoints * 1.2 ;
32626: LD_ADDR_VAR 0 10
32630: PUSH
32631: LD_VAR 0 10
32635: PUSH
32636: LD_REAL  1.20000000000000E+0000
32639: MUL
32640: ST_TO_ADDR
// end ; unit_building :
32641: GO 32655
32643: LD_INT 3
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32654
32651: POP
// ; end ;
32652: GO 32655
32654: POP
// for j = 1 to 3 do
32655: LD_ADDR_VAR 0 7
32659: PUSH
32660: DOUBLE
32661: LD_INT 1
32663: DEC
32664: ST_TO_ADDR
32665: LD_INT 3
32667: PUSH
32668: FOR_TO
32669: IFFALSE 32722
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32671: LD_ADDR_VAR 0 5
32675: PUSH
32676: LD_VAR 0 5
32680: PPUSH
32681: LD_VAR 0 7
32685: PPUSH
32686: LD_VAR 0 5
32690: PUSH
32691: LD_VAR 0 7
32695: ARRAY
32696: PUSH
32697: LD_VAR 0 9
32701: PUSH
32702: LD_VAR 0 7
32706: ARRAY
32707: PUSH
32708: LD_VAR 0 10
32712: MUL
32713: PLUS
32714: PPUSH
32715: CALL_OW 1
32719: ST_TO_ADDR
32720: GO 32668
32722: POP
32723: POP
// end ;
32724: GO 31203
32726: POP
32727: POP
// result := Replace ( result , 4 , tmp ) ;
32728: LD_ADDR_VAR 0 5
32732: PUSH
32733: LD_VAR 0 5
32737: PPUSH
32738: LD_INT 4
32740: PPUSH
32741: LD_VAR 0 8
32745: PPUSH
32746: CALL_OW 1
32750: ST_TO_ADDR
// end ;
32751: LD_VAR 0 5
32755: RET
// export function DangerAtRange ( unit , range ) ; begin
32756: LD_INT 0
32758: PPUSH
// if not unit then
32759: LD_VAR 0 1
32763: NOT
32764: IFFALSE 32768
// exit ;
32766: GO 32813
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32768: LD_ADDR_VAR 0 3
32772: PUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: CALL_OW 255
32782: PPUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 250
32792: PPUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 251
32802: PPUSH
32803: LD_VAR 0 2
32807: PPUSH
32808: CALL 31055 0 4
32812: ST_TO_ADDR
// end ;
32813: LD_VAR 0 3
32817: RET
// export function DangerInArea ( side , area ) ; begin
32818: LD_INT 0
32820: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32821: LD_ADDR_VAR 0 3
32825: PUSH
32826: LD_VAR 0 2
32830: PPUSH
32831: LD_INT 81
32833: PUSH
32834: LD_VAR 0 1
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PPUSH
32843: CALL_OW 70
32847: ST_TO_ADDR
// end ;
32848: LD_VAR 0 3
32852: RET
// export function IsExtension ( b ) ; begin
32853: LD_INT 0
32855: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32856: LD_ADDR_VAR 0 2
32860: PUSH
32861: LD_VAR 0 1
32865: PUSH
32866: LD_INT 23
32868: PUSH
32869: LD_INT 20
32871: PUSH
32872: LD_INT 22
32874: PUSH
32875: LD_INT 17
32877: PUSH
32878: LD_INT 24
32880: PUSH
32881: LD_INT 21
32883: PUSH
32884: LD_INT 19
32886: PUSH
32887: LD_INT 16
32889: PUSH
32890: LD_INT 25
32892: PUSH
32893: LD_INT 18
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: IN
32908: ST_TO_ADDR
// end ;
32909: LD_VAR 0 2
32913: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32914: LD_INT 0
32916: PPUSH
32917: PPUSH
32918: PPUSH
// result := [ ] ;
32919: LD_ADDR_VAR 0 4
32923: PUSH
32924: EMPTY
32925: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32926: LD_ADDR_VAR 0 5
32930: PUSH
32931: LD_VAR 0 2
32935: PPUSH
32936: LD_INT 21
32938: PUSH
32939: LD_INT 3
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PPUSH
32946: CALL_OW 70
32950: ST_TO_ADDR
// if not tmp then
32951: LD_VAR 0 5
32955: NOT
32956: IFFALSE 32960
// exit ;
32958: GO 33024
// if checkLink then
32960: LD_VAR 0 3
32964: IFFALSE 33014
// begin for i in tmp do
32966: LD_ADDR_VAR 0 6
32970: PUSH
32971: LD_VAR 0 5
32975: PUSH
32976: FOR_IN
32977: IFFALSE 33012
// if GetBase ( i ) <> base then
32979: LD_VAR 0 6
32983: PPUSH
32984: CALL_OW 274
32988: PUSH
32989: LD_VAR 0 1
32993: NONEQUAL
32994: IFFALSE 33010
// ComLinkToBase ( base , i ) ;
32996: LD_VAR 0 1
33000: PPUSH
33001: LD_VAR 0 6
33005: PPUSH
33006: CALL_OW 169
33010: GO 32976
33012: POP
33013: POP
// end ; result := tmp ;
33014: LD_ADDR_VAR 0 4
33018: PUSH
33019: LD_VAR 0 5
33023: ST_TO_ADDR
// end ;
33024: LD_VAR 0 4
33028: RET
// export function ComComplete ( units , b ) ; var i ; begin
33029: LD_INT 0
33031: PPUSH
33032: PPUSH
// if not units then
33033: LD_VAR 0 1
33037: NOT
33038: IFFALSE 33042
// exit ;
33040: GO 33132
// for i in units do
33042: LD_ADDR_VAR 0 4
33046: PUSH
33047: LD_VAR 0 1
33051: PUSH
33052: FOR_IN
33053: IFFALSE 33130
// if BuildingStatus ( b ) = bs_build then
33055: LD_VAR 0 2
33059: PPUSH
33060: CALL_OW 461
33064: PUSH
33065: LD_INT 1
33067: EQUAL
33068: IFFALSE 33128
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33070: LD_VAR 0 4
33074: PPUSH
33075: LD_STRING h
33077: PUSH
33078: LD_VAR 0 2
33082: PPUSH
33083: CALL_OW 250
33087: PUSH
33088: LD_VAR 0 2
33092: PPUSH
33093: CALL_OW 251
33097: PUSH
33098: LD_VAR 0 2
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: PPUSH
33124: CALL_OW 446
33128: GO 33052
33130: POP
33131: POP
// end ;
33132: LD_VAR 0 3
33136: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33137: LD_INT 0
33139: PPUSH
33140: PPUSH
33141: PPUSH
33142: PPUSH
33143: PPUSH
33144: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33145: LD_VAR 0 1
33149: NOT
33150: PUSH
33151: LD_VAR 0 1
33155: PPUSH
33156: CALL_OW 263
33160: PUSH
33161: LD_INT 2
33163: NONEQUAL
33164: OR
33165: IFFALSE 33169
// exit ;
33167: GO 33485
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33169: LD_ADDR_VAR 0 6
33173: PUSH
33174: LD_INT 22
33176: PUSH
33177: LD_VAR 0 1
33181: PPUSH
33182: CALL_OW 255
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 30
33196: PUSH
33197: LD_INT 36
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 34
33206: PUSH
33207: LD_INT 31
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PPUSH
33223: CALL_OW 69
33227: ST_TO_ADDR
// if not tmp then
33228: LD_VAR 0 6
33232: NOT
33233: IFFALSE 33237
// exit ;
33235: GO 33485
// result := [ ] ;
33237: LD_ADDR_VAR 0 2
33241: PUSH
33242: EMPTY
33243: ST_TO_ADDR
// for i in tmp do
33244: LD_ADDR_VAR 0 3
33248: PUSH
33249: LD_VAR 0 6
33253: PUSH
33254: FOR_IN
33255: IFFALSE 33326
// begin t := UnitsInside ( i ) ;
33257: LD_ADDR_VAR 0 4
33261: PUSH
33262: LD_VAR 0 3
33266: PPUSH
33267: CALL_OW 313
33271: ST_TO_ADDR
// if t then
33272: LD_VAR 0 4
33276: IFFALSE 33324
// for j in t do
33278: LD_ADDR_VAR 0 7
33282: PUSH
33283: LD_VAR 0 4
33287: PUSH
33288: FOR_IN
33289: IFFALSE 33322
// result := Replace ( result , result + 1 , j ) ;
33291: LD_ADDR_VAR 0 2
33295: PUSH
33296: LD_VAR 0 2
33300: PPUSH
33301: LD_VAR 0 2
33305: PUSH
33306: LD_INT 1
33308: PLUS
33309: PPUSH
33310: LD_VAR 0 7
33314: PPUSH
33315: CALL_OW 1
33319: ST_TO_ADDR
33320: GO 33288
33322: POP
33323: POP
// end ;
33324: GO 33254
33326: POP
33327: POP
// if not result then
33328: LD_VAR 0 2
33332: NOT
33333: IFFALSE 33337
// exit ;
33335: GO 33485
// mech := result [ 1 ] ;
33337: LD_ADDR_VAR 0 5
33341: PUSH
33342: LD_VAR 0 2
33346: PUSH
33347: LD_INT 1
33349: ARRAY
33350: ST_TO_ADDR
// if result > 1 then
33351: LD_VAR 0 2
33355: PUSH
33356: LD_INT 1
33358: GREATER
33359: IFFALSE 33471
// begin for i = 2 to result do
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: DOUBLE
33367: LD_INT 2
33369: DEC
33370: ST_TO_ADDR
33371: LD_VAR 0 2
33375: PUSH
33376: FOR_TO
33377: IFFALSE 33469
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33379: LD_ADDR_VAR 0 4
33383: PUSH
33384: LD_VAR 0 2
33388: PUSH
33389: LD_VAR 0 3
33393: ARRAY
33394: PPUSH
33395: LD_INT 3
33397: PPUSH
33398: CALL_OW 259
33402: PUSH
33403: LD_VAR 0 2
33407: PUSH
33408: LD_VAR 0 3
33412: ARRAY
33413: PPUSH
33414: CALL_OW 432
33418: MINUS
33419: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33420: LD_VAR 0 4
33424: PUSH
33425: LD_VAR 0 5
33429: PPUSH
33430: LD_INT 3
33432: PPUSH
33433: CALL_OW 259
33437: PUSH
33438: LD_VAR 0 5
33442: PPUSH
33443: CALL_OW 432
33447: MINUS
33448: GREATEREQUAL
33449: IFFALSE 33467
// mech := result [ i ] ;
33451: LD_ADDR_VAR 0 5
33455: PUSH
33456: LD_VAR 0 2
33460: PUSH
33461: LD_VAR 0 3
33465: ARRAY
33466: ST_TO_ADDR
// end ;
33467: GO 33376
33469: POP
33470: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33471: LD_VAR 0 1
33475: PPUSH
33476: LD_VAR 0 5
33480: PPUSH
33481: CALL_OW 135
// end ;
33485: LD_VAR 0 2
33489: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33490: LD_INT 0
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
33496: PPUSH
33497: PPUSH
33498: PPUSH
33499: PPUSH
33500: PPUSH
33501: PPUSH
33502: PPUSH
33503: PPUSH
33504: PPUSH
// result := [ ] ;
33505: LD_ADDR_VAR 0 7
33509: PUSH
33510: EMPTY
33511: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL_OW 266
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: IN
33532: NOT
33533: IFFALSE 33537
// exit ;
33535: GO 35171
// if name then
33537: LD_VAR 0 3
33541: IFFALSE 33557
// SetBName ( base_dep , name ) ;
33543: LD_VAR 0 1
33547: PPUSH
33548: LD_VAR 0 3
33552: PPUSH
33553: CALL_OW 500
// base := GetBase ( base_dep ) ;
33557: LD_ADDR_VAR 0 15
33561: PUSH
33562: LD_VAR 0 1
33566: PPUSH
33567: CALL_OW 274
33571: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33572: LD_ADDR_VAR 0 16
33576: PUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 255
33586: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33587: LD_ADDR_VAR 0 17
33591: PUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL_OW 248
33601: ST_TO_ADDR
// if sources then
33602: LD_VAR 0 5
33606: IFFALSE 33653
// for i = 1 to 3 do
33608: LD_ADDR_VAR 0 8
33612: PUSH
33613: DOUBLE
33614: LD_INT 1
33616: DEC
33617: ST_TO_ADDR
33618: LD_INT 3
33620: PUSH
33621: FOR_TO
33622: IFFALSE 33651
// AddResourceType ( base , i , sources [ i ] ) ;
33624: LD_VAR 0 15
33628: PPUSH
33629: LD_VAR 0 8
33633: PPUSH
33634: LD_VAR 0 5
33638: PUSH
33639: LD_VAR 0 8
33643: ARRAY
33644: PPUSH
33645: CALL_OW 276
33649: GO 33621
33651: POP
33652: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33653: LD_ADDR_VAR 0 18
33657: PUSH
33658: LD_VAR 0 15
33662: PPUSH
33663: LD_VAR 0 2
33667: PPUSH
33668: LD_INT 1
33670: PPUSH
33671: CALL 32914 0 3
33675: ST_TO_ADDR
// InitHc ;
33676: CALL_OW 19
// InitUc ;
33680: CALL_OW 18
// uc_side := side ;
33684: LD_ADDR_OWVAR 20
33688: PUSH
33689: LD_VAR 0 16
33693: ST_TO_ADDR
// uc_nation := nation ;
33694: LD_ADDR_OWVAR 21
33698: PUSH
33699: LD_VAR 0 17
33703: ST_TO_ADDR
// if buildings then
33704: LD_VAR 0 18
33708: IFFALSE 35030
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33710: LD_ADDR_VAR 0 19
33714: PUSH
33715: LD_VAR 0 18
33719: PPUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 30
33725: PUSH
33726: LD_INT 29
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 30
33735: PUSH
33736: LD_INT 30
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: PPUSH
33748: CALL_OW 72
33752: ST_TO_ADDR
// if tmp then
33753: LD_VAR 0 19
33757: IFFALSE 33805
// for i in tmp do
33759: LD_ADDR_VAR 0 8
33763: PUSH
33764: LD_VAR 0 19
33768: PUSH
33769: FOR_IN
33770: IFFALSE 33803
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33772: LD_VAR 0 8
33776: PPUSH
33777: CALL_OW 250
33781: PPUSH
33782: LD_VAR 0 8
33786: PPUSH
33787: CALL_OW 251
33791: PPUSH
33792: LD_VAR 0 16
33796: PPUSH
33797: CALL_OW 441
33801: GO 33769
33803: POP
33804: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33805: LD_VAR 0 18
33809: PPUSH
33810: LD_INT 2
33812: PUSH
33813: LD_INT 30
33815: PUSH
33816: LD_INT 32
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 30
33825: PUSH
33826: LD_INT 33
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: PPUSH
33838: CALL_OW 72
33842: IFFALSE 33930
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33844: LD_ADDR_VAR 0 8
33848: PUSH
33849: LD_VAR 0 18
33853: PPUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 30
33859: PUSH
33860: LD_INT 32
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 30
33869: PUSH
33870: LD_INT 33
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: PPUSH
33882: CALL_OW 72
33886: PUSH
33887: FOR_IN
33888: IFFALSE 33928
// begin if not GetBWeapon ( i ) then
33890: LD_VAR 0 8
33894: PPUSH
33895: CALL_OW 269
33899: NOT
33900: IFFALSE 33926
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33902: LD_VAR 0 8
33906: PPUSH
33907: LD_VAR 0 8
33911: PPUSH
33912: LD_VAR 0 2
33916: PPUSH
33917: CALL 35176 0 2
33921: PPUSH
33922: CALL_OW 431
// end ;
33926: GO 33887
33928: POP
33929: POP
// end ; for i = 1 to personel do
33930: LD_ADDR_VAR 0 8
33934: PUSH
33935: DOUBLE
33936: LD_INT 1
33938: DEC
33939: ST_TO_ADDR
33940: LD_VAR 0 6
33944: PUSH
33945: FOR_TO
33946: IFFALSE 35010
// begin if i > 4 then
33948: LD_VAR 0 8
33952: PUSH
33953: LD_INT 4
33955: GREATER
33956: IFFALSE 33960
// break ;
33958: GO 35010
// case i of 1 :
33960: LD_VAR 0 8
33964: PUSH
33965: LD_INT 1
33967: DOUBLE
33968: EQUAL
33969: IFTRUE 33973
33971: GO 34053
33973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33974: LD_ADDR_VAR 0 12
33978: PUSH
33979: LD_VAR 0 18
33983: PPUSH
33984: LD_INT 22
33986: PUSH
33987: LD_VAR 0 16
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 58
33998: PUSH
33999: EMPTY
34000: LIST
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: LD_INT 30
34007: PUSH
34008: LD_INT 32
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 30
34017: PUSH
34018: LD_INT 4
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 30
34027: PUSH
34028: LD_INT 5
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: PPUSH
34046: CALL_OW 72
34050: ST_TO_ADDR
34051: GO 34275
34053: LD_INT 2
34055: DOUBLE
34056: EQUAL
34057: IFTRUE 34061
34059: GO 34123
34061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34062: LD_ADDR_VAR 0 12
34066: PUSH
34067: LD_VAR 0 18
34071: PPUSH
34072: LD_INT 22
34074: PUSH
34075: LD_VAR 0 16
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: LD_INT 30
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 30
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PPUSH
34116: CALL_OW 72
34120: ST_TO_ADDR
34121: GO 34275
34123: LD_INT 3
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34131
34129: GO 34193
34131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34132: LD_ADDR_VAR 0 12
34136: PUSH
34137: LD_VAR 0 18
34141: PPUSH
34142: LD_INT 22
34144: PUSH
34145: LD_VAR 0 16
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: LD_INT 30
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 30
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PPUSH
34186: CALL_OW 72
34190: ST_TO_ADDR
34191: GO 34275
34193: LD_INT 4
34195: DOUBLE
34196: EQUAL
34197: IFTRUE 34201
34199: GO 34274
34201: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34202: LD_ADDR_VAR 0 12
34206: PUSH
34207: LD_VAR 0 18
34211: PPUSH
34212: LD_INT 22
34214: PUSH
34215: LD_VAR 0 16
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 30
34229: PUSH
34230: LD_INT 6
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 30
34239: PUSH
34240: LD_INT 7
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 30
34249: PUSH
34250: LD_INT 8
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PPUSH
34267: CALL_OW 72
34271: ST_TO_ADDR
34272: GO 34275
34274: POP
// if i = 1 then
34275: LD_VAR 0 8
34279: PUSH
34280: LD_INT 1
34282: EQUAL
34283: IFFALSE 34394
// begin tmp := [ ] ;
34285: LD_ADDR_VAR 0 19
34289: PUSH
34290: EMPTY
34291: ST_TO_ADDR
// for j in f do
34292: LD_ADDR_VAR 0 9
34296: PUSH
34297: LD_VAR 0 12
34301: PUSH
34302: FOR_IN
34303: IFFALSE 34376
// if GetBType ( j ) = b_bunker then
34305: LD_VAR 0 9
34309: PPUSH
34310: CALL_OW 266
34314: PUSH
34315: LD_INT 32
34317: EQUAL
34318: IFFALSE 34345
// tmp := Insert ( tmp , 1 , j ) else
34320: LD_ADDR_VAR 0 19
34324: PUSH
34325: LD_VAR 0 19
34329: PPUSH
34330: LD_INT 1
34332: PPUSH
34333: LD_VAR 0 9
34337: PPUSH
34338: CALL_OW 2
34342: ST_TO_ADDR
34343: GO 34374
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34345: LD_ADDR_VAR 0 19
34349: PUSH
34350: LD_VAR 0 19
34354: PPUSH
34355: LD_VAR 0 19
34359: PUSH
34360: LD_INT 1
34362: PLUS
34363: PPUSH
34364: LD_VAR 0 9
34368: PPUSH
34369: CALL_OW 2
34373: ST_TO_ADDR
34374: GO 34302
34376: POP
34377: POP
// if tmp then
34378: LD_VAR 0 19
34382: IFFALSE 34394
// f := tmp ;
34384: LD_ADDR_VAR 0 12
34388: PUSH
34389: LD_VAR 0 19
34393: ST_TO_ADDR
// end ; x := personel [ i ] ;
34394: LD_ADDR_VAR 0 13
34398: PUSH
34399: LD_VAR 0 6
34403: PUSH
34404: LD_VAR 0 8
34408: ARRAY
34409: ST_TO_ADDR
// if x = - 1 then
34410: LD_VAR 0 13
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: EQUAL
34419: IFFALSE 34628
// begin for j in f do
34421: LD_ADDR_VAR 0 9
34425: PUSH
34426: LD_VAR 0 12
34430: PUSH
34431: FOR_IN
34432: IFFALSE 34624
// repeat InitHc ;
34434: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34438: LD_VAR 0 9
34442: PPUSH
34443: CALL_OW 266
34447: PUSH
34448: LD_INT 5
34450: EQUAL
34451: IFFALSE 34521
// begin if UnitsInside ( j ) < 3 then
34453: LD_VAR 0 9
34457: PPUSH
34458: CALL_OW 313
34462: PUSH
34463: LD_INT 3
34465: LESS
34466: IFFALSE 34502
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34468: LD_INT 0
34470: PPUSH
34471: LD_INT 5
34473: PUSH
34474: LD_INT 8
34476: PUSH
34477: LD_INT 9
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: PUSH
34485: LD_VAR 0 17
34489: ARRAY
34490: PPUSH
34491: LD_VAR 0 4
34495: PPUSH
34496: CALL_OW 380
34500: GO 34519
// PrepareHuman ( false , i , skill ) ;
34502: LD_INT 0
34504: PPUSH
34505: LD_VAR 0 8
34509: PPUSH
34510: LD_VAR 0 4
34514: PPUSH
34515: CALL_OW 380
// end else
34519: GO 34538
// PrepareHuman ( false , i , skill ) ;
34521: LD_INT 0
34523: PPUSH
34524: LD_VAR 0 8
34528: PPUSH
34529: LD_VAR 0 4
34533: PPUSH
34534: CALL_OW 380
// un := CreateHuman ;
34538: LD_ADDR_VAR 0 14
34542: PUSH
34543: CALL_OW 44
34547: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34548: LD_ADDR_VAR 0 7
34552: PUSH
34553: LD_VAR 0 7
34557: PPUSH
34558: LD_INT 1
34560: PPUSH
34561: LD_VAR 0 14
34565: PPUSH
34566: CALL_OW 2
34570: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34571: LD_VAR 0 14
34575: PPUSH
34576: LD_VAR 0 9
34580: PPUSH
34581: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34585: LD_VAR 0 9
34589: PPUSH
34590: CALL_OW 313
34594: PUSH
34595: LD_INT 6
34597: EQUAL
34598: PUSH
34599: LD_VAR 0 9
34603: PPUSH
34604: CALL_OW 266
34608: PUSH
34609: LD_INT 32
34611: PUSH
34612: LD_INT 31
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: IN
34619: OR
34620: IFFALSE 34434
34622: GO 34431
34624: POP
34625: POP
// end else
34626: GO 35008
// for j = 1 to x do
34628: LD_ADDR_VAR 0 9
34632: PUSH
34633: DOUBLE
34634: LD_INT 1
34636: DEC
34637: ST_TO_ADDR
34638: LD_VAR 0 13
34642: PUSH
34643: FOR_TO
34644: IFFALSE 35006
// begin InitHc ;
34646: CALL_OW 19
// if not f then
34650: LD_VAR 0 12
34654: NOT
34655: IFFALSE 34744
// begin PrepareHuman ( false , i , skill ) ;
34657: LD_INT 0
34659: PPUSH
34660: LD_VAR 0 8
34664: PPUSH
34665: LD_VAR 0 4
34669: PPUSH
34670: CALL_OW 380
// un := CreateHuman ;
34674: LD_ADDR_VAR 0 14
34678: PUSH
34679: CALL_OW 44
34683: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34684: LD_ADDR_VAR 0 7
34688: PUSH
34689: LD_VAR 0 7
34693: PPUSH
34694: LD_INT 1
34696: PPUSH
34697: LD_VAR 0 14
34701: PPUSH
34702: CALL_OW 2
34706: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34707: LD_VAR 0 14
34711: PPUSH
34712: LD_VAR 0 1
34716: PPUSH
34717: CALL_OW 250
34721: PPUSH
34722: LD_VAR 0 1
34726: PPUSH
34727: CALL_OW 251
34731: PPUSH
34732: LD_INT 10
34734: PPUSH
34735: LD_INT 0
34737: PPUSH
34738: CALL_OW 50
// continue ;
34742: GO 34643
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34744: LD_VAR 0 12
34748: PUSH
34749: LD_INT 1
34751: ARRAY
34752: PPUSH
34753: CALL_OW 313
34757: PUSH
34758: LD_VAR 0 12
34762: PUSH
34763: LD_INT 1
34765: ARRAY
34766: PPUSH
34767: CALL_OW 266
34771: PUSH
34772: LD_INT 32
34774: PUSH
34775: LD_INT 31
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: IN
34782: AND
34783: PUSH
34784: LD_VAR 0 12
34788: PUSH
34789: LD_INT 1
34791: ARRAY
34792: PPUSH
34793: CALL_OW 313
34797: PUSH
34798: LD_INT 6
34800: EQUAL
34801: OR
34802: IFFALSE 34822
// f := Delete ( f , 1 ) ;
34804: LD_ADDR_VAR 0 12
34808: PUSH
34809: LD_VAR 0 12
34813: PPUSH
34814: LD_INT 1
34816: PPUSH
34817: CALL_OW 3
34821: ST_TO_ADDR
// if not f then
34822: LD_VAR 0 12
34826: NOT
34827: IFFALSE 34845
// begin x := x + 2 ;
34829: LD_ADDR_VAR 0 13
34833: PUSH
34834: LD_VAR 0 13
34838: PUSH
34839: LD_INT 2
34841: PLUS
34842: ST_TO_ADDR
// continue ;
34843: GO 34643
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34845: LD_VAR 0 12
34849: PUSH
34850: LD_INT 1
34852: ARRAY
34853: PPUSH
34854: CALL_OW 266
34858: PUSH
34859: LD_INT 5
34861: EQUAL
34862: IFFALSE 34936
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34864: LD_VAR 0 12
34868: PUSH
34869: LD_INT 1
34871: ARRAY
34872: PPUSH
34873: CALL_OW 313
34877: PUSH
34878: LD_INT 3
34880: LESS
34881: IFFALSE 34917
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34883: LD_INT 0
34885: PPUSH
34886: LD_INT 5
34888: PUSH
34889: LD_INT 8
34891: PUSH
34892: LD_INT 9
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: PUSH
34900: LD_VAR 0 17
34904: ARRAY
34905: PPUSH
34906: LD_VAR 0 4
34910: PPUSH
34911: CALL_OW 380
34915: GO 34934
// PrepareHuman ( false , i , skill ) ;
34917: LD_INT 0
34919: PPUSH
34920: LD_VAR 0 8
34924: PPUSH
34925: LD_VAR 0 4
34929: PPUSH
34930: CALL_OW 380
// end else
34934: GO 34953
// PrepareHuman ( false , i , skill ) ;
34936: LD_INT 0
34938: PPUSH
34939: LD_VAR 0 8
34943: PPUSH
34944: LD_VAR 0 4
34948: PPUSH
34949: CALL_OW 380
// un := CreateHuman ;
34953: LD_ADDR_VAR 0 14
34957: PUSH
34958: CALL_OW 44
34962: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34963: LD_ADDR_VAR 0 7
34967: PUSH
34968: LD_VAR 0 7
34972: PPUSH
34973: LD_INT 1
34975: PPUSH
34976: LD_VAR 0 14
34980: PPUSH
34981: CALL_OW 2
34985: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34986: LD_VAR 0 14
34990: PPUSH
34991: LD_VAR 0 12
34995: PUSH
34996: LD_INT 1
34998: ARRAY
34999: PPUSH
35000: CALL_OW 52
// end ;
35004: GO 34643
35006: POP
35007: POP
// end ;
35008: GO 33945
35010: POP
35011: POP
// result := result ^ buildings ;
35012: LD_ADDR_VAR 0 7
35016: PUSH
35017: LD_VAR 0 7
35021: PUSH
35022: LD_VAR 0 18
35026: ADD
35027: ST_TO_ADDR
// end else
35028: GO 35171
// begin for i = 1 to personel do
35030: LD_ADDR_VAR 0 8
35034: PUSH
35035: DOUBLE
35036: LD_INT 1
35038: DEC
35039: ST_TO_ADDR
35040: LD_VAR 0 6
35044: PUSH
35045: FOR_TO
35046: IFFALSE 35169
// begin if i > 4 then
35048: LD_VAR 0 8
35052: PUSH
35053: LD_INT 4
35055: GREATER
35056: IFFALSE 35060
// break ;
35058: GO 35169
// x := personel [ i ] ;
35060: LD_ADDR_VAR 0 13
35064: PUSH
35065: LD_VAR 0 6
35069: PUSH
35070: LD_VAR 0 8
35074: ARRAY
35075: ST_TO_ADDR
// if x = - 1 then
35076: LD_VAR 0 13
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: EQUAL
35085: IFFALSE 35089
// continue ;
35087: GO 35045
// PrepareHuman ( false , i , skill ) ;
35089: LD_INT 0
35091: PPUSH
35092: LD_VAR 0 8
35096: PPUSH
35097: LD_VAR 0 4
35101: PPUSH
35102: CALL_OW 380
// un := CreateHuman ;
35106: LD_ADDR_VAR 0 14
35110: PUSH
35111: CALL_OW 44
35115: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35116: LD_VAR 0 14
35120: PPUSH
35121: LD_VAR 0 1
35125: PPUSH
35126: CALL_OW 250
35130: PPUSH
35131: LD_VAR 0 1
35135: PPUSH
35136: CALL_OW 251
35140: PPUSH
35141: LD_INT 10
35143: PPUSH
35144: LD_INT 0
35146: PPUSH
35147: CALL_OW 50
// result := result ^ un ;
35151: LD_ADDR_VAR 0 7
35155: PUSH
35156: LD_VAR 0 7
35160: PUSH
35161: LD_VAR 0 14
35165: ADD
35166: ST_TO_ADDR
// end ;
35167: GO 35045
35169: POP
35170: POP
// end ; end ;
35171: LD_VAR 0 7
35175: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35176: LD_INT 0
35178: PPUSH
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
35189: PPUSH
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
// result := false ;
35194: LD_ADDR_VAR 0 3
35198: PUSH
35199: LD_INT 0
35201: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35202: LD_VAR 0 1
35206: NOT
35207: PUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL_OW 266
35217: PUSH
35218: LD_INT 32
35220: PUSH
35221: LD_INT 33
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: IN
35228: NOT
35229: OR
35230: IFFALSE 35234
// exit ;
35232: GO 36343
// nat := GetNation ( tower ) ;
35234: LD_ADDR_VAR 0 12
35238: PUSH
35239: LD_VAR 0 1
35243: PPUSH
35244: CALL_OW 248
35248: ST_TO_ADDR
// side := GetSide ( tower ) ;
35249: LD_ADDR_VAR 0 16
35253: PUSH
35254: LD_VAR 0 1
35258: PPUSH
35259: CALL_OW 255
35263: ST_TO_ADDR
// x := GetX ( tower ) ;
35264: LD_ADDR_VAR 0 10
35268: PUSH
35269: LD_VAR 0 1
35273: PPUSH
35274: CALL_OW 250
35278: ST_TO_ADDR
// y := GetY ( tower ) ;
35279: LD_ADDR_VAR 0 11
35283: PUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 251
35293: ST_TO_ADDR
// if not x or not y then
35294: LD_VAR 0 10
35298: NOT
35299: PUSH
35300: LD_VAR 0 11
35304: NOT
35305: OR
35306: IFFALSE 35310
// exit ;
35308: GO 36343
// weapon := 0 ;
35310: LD_ADDR_VAR 0 18
35314: PUSH
35315: LD_INT 0
35317: ST_TO_ADDR
// fac_list := [ ] ;
35318: LD_ADDR_VAR 0 17
35322: PUSH
35323: EMPTY
35324: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35325: LD_ADDR_VAR 0 6
35329: PUSH
35330: LD_VAR 0 1
35334: PPUSH
35335: CALL_OW 274
35339: PPUSH
35340: LD_VAR 0 2
35344: PPUSH
35345: LD_INT 0
35347: PPUSH
35348: CALL 32914 0 3
35352: PPUSH
35353: LD_INT 30
35355: PUSH
35356: LD_INT 3
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PPUSH
35363: CALL_OW 72
35367: ST_TO_ADDR
// if not factories then
35368: LD_VAR 0 6
35372: NOT
35373: IFFALSE 35377
// exit ;
35375: GO 36343
// for i in factories do
35377: LD_ADDR_VAR 0 8
35381: PUSH
35382: LD_VAR 0 6
35386: PUSH
35387: FOR_IN
35388: IFFALSE 35413
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35390: LD_ADDR_VAR 0 17
35394: PUSH
35395: LD_VAR 0 17
35399: PUSH
35400: LD_VAR 0 8
35404: PPUSH
35405: CALL_OW 478
35409: UNION
35410: ST_TO_ADDR
35411: GO 35387
35413: POP
35414: POP
// if not fac_list then
35415: LD_VAR 0 17
35419: NOT
35420: IFFALSE 35424
// exit ;
35422: GO 36343
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35424: LD_ADDR_VAR 0 5
35428: PUSH
35429: LD_INT 4
35431: PUSH
35432: LD_INT 5
35434: PUSH
35435: LD_INT 9
35437: PUSH
35438: LD_INT 10
35440: PUSH
35441: LD_INT 6
35443: PUSH
35444: LD_INT 7
35446: PUSH
35447: LD_INT 11
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 27
35461: PUSH
35462: LD_INT 28
35464: PUSH
35465: LD_INT 26
35467: PUSH
35468: LD_INT 30
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 43
35479: PUSH
35480: LD_INT 44
35482: PUSH
35483: LD_INT 46
35485: PUSH
35486: LD_INT 45
35488: PUSH
35489: LD_INT 47
35491: PUSH
35492: LD_INT 49
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: PUSH
35508: LD_VAR 0 12
35512: ARRAY
35513: ST_TO_ADDR
// list := list isect fac_list ;
35514: LD_ADDR_VAR 0 5
35518: PUSH
35519: LD_VAR 0 5
35523: PUSH
35524: LD_VAR 0 17
35528: ISECT
35529: ST_TO_ADDR
// if not list then
35530: LD_VAR 0 5
35534: NOT
35535: IFFALSE 35539
// exit ;
35537: GO 36343
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35539: LD_VAR 0 12
35543: PUSH
35544: LD_INT 3
35546: EQUAL
35547: PUSH
35548: LD_INT 49
35550: PUSH
35551: LD_VAR 0 5
35555: IN
35556: AND
35557: PUSH
35558: LD_INT 31
35560: PPUSH
35561: LD_VAR 0 16
35565: PPUSH
35566: CALL_OW 321
35570: PUSH
35571: LD_INT 2
35573: EQUAL
35574: AND
35575: IFFALSE 35635
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35577: LD_INT 22
35579: PUSH
35580: LD_VAR 0 16
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 35
35591: PUSH
35592: LD_INT 49
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 91
35601: PUSH
35602: LD_VAR 0 1
35606: PUSH
35607: LD_INT 10
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: LIST
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: LIST
35619: PPUSH
35620: CALL_OW 69
35624: NOT
35625: IFFALSE 35635
// weapon := ru_time_lapser ;
35627: LD_ADDR_VAR 0 18
35631: PUSH
35632: LD_INT 49
35634: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35635: LD_VAR 0 12
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: IN
35650: PUSH
35651: LD_INT 11
35653: PUSH
35654: LD_VAR 0 5
35658: IN
35659: PUSH
35660: LD_INT 30
35662: PUSH
35663: LD_VAR 0 5
35667: IN
35668: OR
35669: AND
35670: PUSH
35671: LD_INT 6
35673: PPUSH
35674: LD_VAR 0 16
35678: PPUSH
35679: CALL_OW 321
35683: PUSH
35684: LD_INT 2
35686: EQUAL
35687: AND
35688: IFFALSE 35853
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35690: LD_INT 22
35692: PUSH
35693: LD_VAR 0 16
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: PUSH
35705: LD_INT 35
35707: PUSH
35708: LD_INT 11
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 35
35717: PUSH
35718: LD_INT 30
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 91
35732: PUSH
35733: LD_VAR 0 1
35737: PUSH
35738: LD_INT 18
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: PPUSH
35751: CALL_OW 69
35755: NOT
35756: PUSH
35757: LD_INT 22
35759: PUSH
35760: LD_VAR 0 16
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: LD_INT 30
35774: PUSH
35775: LD_INT 32
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 30
35784: PUSH
35785: LD_INT 33
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 91
35799: PUSH
35800: LD_VAR 0 1
35804: PUSH
35805: LD_INT 12
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: PPUSH
35821: CALL_OW 69
35825: PUSH
35826: LD_INT 2
35828: GREATER
35829: AND
35830: IFFALSE 35853
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35832: LD_ADDR_VAR 0 18
35836: PUSH
35837: LD_INT 11
35839: PUSH
35840: LD_INT 30
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_VAR 0 12
35851: ARRAY
35852: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35853: LD_VAR 0 18
35857: NOT
35858: PUSH
35859: LD_INT 40
35861: PPUSH
35862: LD_VAR 0 16
35866: PPUSH
35867: CALL_OW 321
35871: PUSH
35872: LD_INT 2
35874: EQUAL
35875: AND
35876: PUSH
35877: LD_INT 7
35879: PUSH
35880: LD_VAR 0 5
35884: IN
35885: PUSH
35886: LD_INT 28
35888: PUSH
35889: LD_VAR 0 5
35893: IN
35894: OR
35895: PUSH
35896: LD_INT 45
35898: PUSH
35899: LD_VAR 0 5
35903: IN
35904: OR
35905: AND
35906: IFFALSE 36160
// begin hex := GetHexInfo ( x , y ) ;
35908: LD_ADDR_VAR 0 4
35912: PUSH
35913: LD_VAR 0 10
35917: PPUSH
35918: LD_VAR 0 11
35922: PPUSH
35923: CALL_OW 546
35927: ST_TO_ADDR
// if hex [ 1 ] then
35928: LD_VAR 0 4
35932: PUSH
35933: LD_INT 1
35935: ARRAY
35936: IFFALSE 35940
// exit ;
35938: GO 36343
// height := hex [ 2 ] ;
35940: LD_ADDR_VAR 0 15
35944: PUSH
35945: LD_VAR 0 4
35949: PUSH
35950: LD_INT 2
35952: ARRAY
35953: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35954: LD_ADDR_VAR 0 14
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: LD_INT 3
35967: PUSH
35968: LD_INT 5
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: ST_TO_ADDR
// for i in tmp do
35977: LD_ADDR_VAR 0 8
35981: PUSH
35982: LD_VAR 0 14
35986: PUSH
35987: FOR_IN
35988: IFFALSE 36158
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35990: LD_ADDR_VAR 0 9
35994: PUSH
35995: LD_VAR 0 10
35999: PPUSH
36000: LD_VAR 0 8
36004: PPUSH
36005: LD_INT 5
36007: PPUSH
36008: CALL_OW 272
36012: PUSH
36013: LD_VAR 0 11
36017: PPUSH
36018: LD_VAR 0 8
36022: PPUSH
36023: LD_INT 5
36025: PPUSH
36026: CALL_OW 273
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36035: LD_VAR 0 9
36039: PUSH
36040: LD_INT 1
36042: ARRAY
36043: PPUSH
36044: LD_VAR 0 9
36048: PUSH
36049: LD_INT 2
36051: ARRAY
36052: PPUSH
36053: CALL_OW 488
36057: IFFALSE 36156
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36059: LD_ADDR_VAR 0 4
36063: PUSH
36064: LD_VAR 0 9
36068: PUSH
36069: LD_INT 1
36071: ARRAY
36072: PPUSH
36073: LD_VAR 0 9
36077: PUSH
36078: LD_INT 2
36080: ARRAY
36081: PPUSH
36082: CALL_OW 546
36086: ST_TO_ADDR
// if hex [ 1 ] then
36087: LD_VAR 0 4
36091: PUSH
36092: LD_INT 1
36094: ARRAY
36095: IFFALSE 36099
// continue ;
36097: GO 35987
// h := hex [ 2 ] ;
36099: LD_ADDR_VAR 0 13
36103: PUSH
36104: LD_VAR 0 4
36108: PUSH
36109: LD_INT 2
36111: ARRAY
36112: ST_TO_ADDR
// if h + 7 < height then
36113: LD_VAR 0 13
36117: PUSH
36118: LD_INT 7
36120: PLUS
36121: PUSH
36122: LD_VAR 0 15
36126: LESS
36127: IFFALSE 36156
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36129: LD_ADDR_VAR 0 18
36133: PUSH
36134: LD_INT 7
36136: PUSH
36137: LD_INT 28
36139: PUSH
36140: LD_INT 45
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: PUSH
36148: LD_VAR 0 12
36152: ARRAY
36153: ST_TO_ADDR
// break ;
36154: GO 36158
// end ; end ; end ;
36156: GO 35987
36158: POP
36159: POP
// end ; if not weapon then
36160: LD_VAR 0 18
36164: NOT
36165: IFFALSE 36225
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36167: LD_ADDR_VAR 0 5
36171: PUSH
36172: LD_VAR 0 5
36176: PUSH
36177: LD_INT 11
36179: PUSH
36180: LD_INT 30
36182: PUSH
36183: LD_INT 49
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: DIFF
36191: ST_TO_ADDR
// if not list then
36192: LD_VAR 0 5
36196: NOT
36197: IFFALSE 36201
// exit ;
36199: GO 36343
// weapon := list [ rand ( 1 , list ) ] ;
36201: LD_ADDR_VAR 0 18
36205: PUSH
36206: LD_VAR 0 5
36210: PUSH
36211: LD_INT 1
36213: PPUSH
36214: LD_VAR 0 5
36218: PPUSH
36219: CALL_OW 12
36223: ARRAY
36224: ST_TO_ADDR
// end ; if weapon then
36225: LD_VAR 0 18
36229: IFFALSE 36343
// begin tmp := CostOfWeapon ( weapon ) ;
36231: LD_ADDR_VAR 0 14
36235: PUSH
36236: LD_VAR 0 18
36240: PPUSH
36241: CALL_OW 451
36245: ST_TO_ADDR
// j := GetBase ( tower ) ;
36246: LD_ADDR_VAR 0 9
36250: PUSH
36251: LD_VAR 0 1
36255: PPUSH
36256: CALL_OW 274
36260: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36261: LD_VAR 0 9
36265: PPUSH
36266: LD_INT 1
36268: PPUSH
36269: CALL_OW 275
36273: PUSH
36274: LD_VAR 0 14
36278: PUSH
36279: LD_INT 1
36281: ARRAY
36282: GREATEREQUAL
36283: PUSH
36284: LD_VAR 0 9
36288: PPUSH
36289: LD_INT 2
36291: PPUSH
36292: CALL_OW 275
36296: PUSH
36297: LD_VAR 0 14
36301: PUSH
36302: LD_INT 2
36304: ARRAY
36305: GREATEREQUAL
36306: AND
36307: PUSH
36308: LD_VAR 0 9
36312: PPUSH
36313: LD_INT 3
36315: PPUSH
36316: CALL_OW 275
36320: PUSH
36321: LD_VAR 0 14
36325: PUSH
36326: LD_INT 3
36328: ARRAY
36329: GREATEREQUAL
36330: AND
36331: IFFALSE 36343
// result := weapon ;
36333: LD_ADDR_VAR 0 3
36337: PUSH
36338: LD_VAR 0 18
36342: ST_TO_ADDR
// end ; end ;
36343: LD_VAR 0 3
36347: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36348: LD_INT 0
36350: PPUSH
36351: PPUSH
// result := true ;
36352: LD_ADDR_VAR 0 3
36356: PUSH
36357: LD_INT 1
36359: ST_TO_ADDR
// if array1 = array2 then
36360: LD_VAR 0 1
36364: PUSH
36365: LD_VAR 0 2
36369: EQUAL
36370: IFFALSE 36430
// begin for i = 1 to array1 do
36372: LD_ADDR_VAR 0 4
36376: PUSH
36377: DOUBLE
36378: LD_INT 1
36380: DEC
36381: ST_TO_ADDR
36382: LD_VAR 0 1
36386: PUSH
36387: FOR_TO
36388: IFFALSE 36426
// if array1 [ i ] <> array2 [ i ] then
36390: LD_VAR 0 1
36394: PUSH
36395: LD_VAR 0 4
36399: ARRAY
36400: PUSH
36401: LD_VAR 0 2
36405: PUSH
36406: LD_VAR 0 4
36410: ARRAY
36411: NONEQUAL
36412: IFFALSE 36424
// begin result := false ;
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_INT 0
36421: ST_TO_ADDR
// break ;
36422: GO 36426
// end ;
36424: GO 36387
36426: POP
36427: POP
// end else
36428: GO 36438
// result := false ;
36430: LD_ADDR_VAR 0 3
36434: PUSH
36435: LD_INT 0
36437: ST_TO_ADDR
// end ;
36438: LD_VAR 0 3
36442: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36443: LD_INT 0
36445: PPUSH
36446: PPUSH
// if not array1 or not array2 then
36447: LD_VAR 0 1
36451: NOT
36452: PUSH
36453: LD_VAR 0 2
36457: NOT
36458: OR
36459: IFFALSE 36463
// exit ;
36461: GO 36527
// result := true ;
36463: LD_ADDR_VAR 0 3
36467: PUSH
36468: LD_INT 1
36470: ST_TO_ADDR
// for i = 1 to array1 do
36471: LD_ADDR_VAR 0 4
36475: PUSH
36476: DOUBLE
36477: LD_INT 1
36479: DEC
36480: ST_TO_ADDR
36481: LD_VAR 0 1
36485: PUSH
36486: FOR_TO
36487: IFFALSE 36525
// if array1 [ i ] <> array2 [ i ] then
36489: LD_VAR 0 1
36493: PUSH
36494: LD_VAR 0 4
36498: ARRAY
36499: PUSH
36500: LD_VAR 0 2
36504: PUSH
36505: LD_VAR 0 4
36509: ARRAY
36510: NONEQUAL
36511: IFFALSE 36523
// begin result := false ;
36513: LD_ADDR_VAR 0 3
36517: PUSH
36518: LD_INT 0
36520: ST_TO_ADDR
// break ;
36521: GO 36525
// end ;
36523: GO 36486
36525: POP
36526: POP
// end ;
36527: LD_VAR 0 3
36531: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36532: LD_INT 0
36534: PPUSH
36535: PPUSH
36536: PPUSH
// pom := GetBase ( fac ) ;
36537: LD_ADDR_VAR 0 5
36541: PUSH
36542: LD_VAR 0 1
36546: PPUSH
36547: CALL_OW 274
36551: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36552: LD_ADDR_VAR 0 4
36556: PUSH
36557: LD_VAR 0 2
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PPUSH
36566: LD_VAR 0 2
36570: PUSH
36571: LD_INT 2
36573: ARRAY
36574: PPUSH
36575: LD_VAR 0 2
36579: PUSH
36580: LD_INT 3
36582: ARRAY
36583: PPUSH
36584: LD_VAR 0 2
36588: PUSH
36589: LD_INT 4
36591: ARRAY
36592: PPUSH
36593: CALL_OW 449
36597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36598: LD_ADDR_VAR 0 3
36602: PUSH
36603: LD_VAR 0 5
36607: PPUSH
36608: LD_INT 1
36610: PPUSH
36611: CALL_OW 275
36615: PUSH
36616: LD_VAR 0 4
36620: PUSH
36621: LD_INT 1
36623: ARRAY
36624: GREATEREQUAL
36625: PUSH
36626: LD_VAR 0 5
36630: PPUSH
36631: LD_INT 2
36633: PPUSH
36634: CALL_OW 275
36638: PUSH
36639: LD_VAR 0 4
36643: PUSH
36644: LD_INT 2
36646: ARRAY
36647: GREATEREQUAL
36648: AND
36649: PUSH
36650: LD_VAR 0 5
36654: PPUSH
36655: LD_INT 3
36657: PPUSH
36658: CALL_OW 275
36662: PUSH
36663: LD_VAR 0 4
36667: PUSH
36668: LD_INT 3
36670: ARRAY
36671: GREATEREQUAL
36672: AND
36673: ST_TO_ADDR
// end ;
36674: LD_VAR 0 3
36678: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36679: LD_INT 0
36681: PPUSH
36682: PPUSH
36683: PPUSH
36684: PPUSH
// pom := GetBase ( building ) ;
36685: LD_ADDR_VAR 0 3
36689: PUSH
36690: LD_VAR 0 1
36694: PPUSH
36695: CALL_OW 274
36699: ST_TO_ADDR
// if not pom then
36700: LD_VAR 0 3
36704: NOT
36705: IFFALSE 36709
// exit ;
36707: GO 36879
// btype := GetBType ( building ) ;
36709: LD_ADDR_VAR 0 5
36713: PUSH
36714: LD_VAR 0 1
36718: PPUSH
36719: CALL_OW 266
36723: ST_TO_ADDR
// if btype = b_armoury then
36724: LD_VAR 0 5
36728: PUSH
36729: LD_INT 4
36731: EQUAL
36732: IFFALSE 36742
// btype := b_barracks ;
36734: LD_ADDR_VAR 0 5
36738: PUSH
36739: LD_INT 5
36741: ST_TO_ADDR
// if btype = b_depot then
36742: LD_VAR 0 5
36746: PUSH
36747: LD_INT 0
36749: EQUAL
36750: IFFALSE 36760
// btype := b_warehouse ;
36752: LD_ADDR_VAR 0 5
36756: PUSH
36757: LD_INT 1
36759: ST_TO_ADDR
// if btype = b_workshop then
36760: LD_VAR 0 5
36764: PUSH
36765: LD_INT 2
36767: EQUAL
36768: IFFALSE 36778
// btype := b_factory ;
36770: LD_ADDR_VAR 0 5
36774: PUSH
36775: LD_INT 3
36777: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36778: LD_ADDR_VAR 0 4
36782: PUSH
36783: LD_VAR 0 5
36787: PPUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL_OW 248
36797: PPUSH
36798: CALL_OW 450
36802: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36803: LD_ADDR_VAR 0 2
36807: PUSH
36808: LD_VAR 0 3
36812: PPUSH
36813: LD_INT 1
36815: PPUSH
36816: CALL_OW 275
36820: PUSH
36821: LD_VAR 0 4
36825: PUSH
36826: LD_INT 1
36828: ARRAY
36829: GREATEREQUAL
36830: PUSH
36831: LD_VAR 0 3
36835: PPUSH
36836: LD_INT 2
36838: PPUSH
36839: CALL_OW 275
36843: PUSH
36844: LD_VAR 0 4
36848: PUSH
36849: LD_INT 2
36851: ARRAY
36852: GREATEREQUAL
36853: AND
36854: PUSH
36855: LD_VAR 0 3
36859: PPUSH
36860: LD_INT 3
36862: PPUSH
36863: CALL_OW 275
36867: PUSH
36868: LD_VAR 0 4
36872: PUSH
36873: LD_INT 3
36875: ARRAY
36876: GREATEREQUAL
36877: AND
36878: ST_TO_ADDR
// end ;
36879: LD_VAR 0 2
36883: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36884: LD_INT 0
36886: PPUSH
36887: PPUSH
36888: PPUSH
// pom := GetBase ( building ) ;
36889: LD_ADDR_VAR 0 4
36893: PUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 274
36903: ST_TO_ADDR
// if not pom then
36904: LD_VAR 0 4
36908: NOT
36909: IFFALSE 36913
// exit ;
36911: GO 37014
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36913: LD_ADDR_VAR 0 5
36917: PUSH
36918: LD_VAR 0 2
36922: PPUSH
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL_OW 248
36932: PPUSH
36933: CALL_OW 450
36937: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36938: LD_ADDR_VAR 0 3
36942: PUSH
36943: LD_VAR 0 4
36947: PPUSH
36948: LD_INT 1
36950: PPUSH
36951: CALL_OW 275
36955: PUSH
36956: LD_VAR 0 5
36960: PUSH
36961: LD_INT 1
36963: ARRAY
36964: GREATEREQUAL
36965: PUSH
36966: LD_VAR 0 4
36970: PPUSH
36971: LD_INT 2
36973: PPUSH
36974: CALL_OW 275
36978: PUSH
36979: LD_VAR 0 5
36983: PUSH
36984: LD_INT 2
36986: ARRAY
36987: GREATEREQUAL
36988: AND
36989: PUSH
36990: LD_VAR 0 4
36994: PPUSH
36995: LD_INT 3
36997: PPUSH
36998: CALL_OW 275
37002: PUSH
37003: LD_VAR 0 5
37007: PUSH
37008: LD_INT 3
37010: ARRAY
37011: GREATEREQUAL
37012: AND
37013: ST_TO_ADDR
// end ;
37014: LD_VAR 0 3
37018: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37019: LD_INT 0
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
37028: PPUSH
37029: PPUSH
37030: PPUSH
37031: PPUSH
// result := false ;
37032: LD_ADDR_VAR 0 8
37036: PUSH
37037: LD_INT 0
37039: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37040: LD_VAR 0 5
37044: NOT
37045: PUSH
37046: LD_VAR 0 1
37050: NOT
37051: OR
37052: PUSH
37053: LD_VAR 0 2
37057: NOT
37058: OR
37059: PUSH
37060: LD_VAR 0 3
37064: NOT
37065: OR
37066: IFFALSE 37070
// exit ;
37068: GO 37884
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37070: LD_ADDR_VAR 0 14
37074: PUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: LD_VAR 0 2
37084: PPUSH
37085: LD_VAR 0 3
37089: PPUSH
37090: LD_VAR 0 4
37094: PPUSH
37095: LD_VAR 0 5
37099: PUSH
37100: LD_INT 1
37102: ARRAY
37103: PPUSH
37104: CALL_OW 248
37108: PPUSH
37109: LD_INT 0
37111: PPUSH
37112: CALL 39137 0 6
37116: ST_TO_ADDR
// if not hexes then
37117: LD_VAR 0 14
37121: NOT
37122: IFFALSE 37126
// exit ;
37124: GO 37884
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37126: LD_ADDR_VAR 0 17
37130: PUSH
37131: LD_VAR 0 5
37135: PPUSH
37136: LD_INT 22
37138: PUSH
37139: LD_VAR 0 13
37143: PPUSH
37144: CALL_OW 255
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: LD_INT 30
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 30
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PPUSH
37185: CALL_OW 72
37189: ST_TO_ADDR
// for i = 1 to hexes do
37190: LD_ADDR_VAR 0 9
37194: PUSH
37195: DOUBLE
37196: LD_INT 1
37198: DEC
37199: ST_TO_ADDR
37200: LD_VAR 0 14
37204: PUSH
37205: FOR_TO
37206: IFFALSE 37882
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37208: LD_ADDR_VAR 0 13
37212: PUSH
37213: LD_VAR 0 14
37217: PUSH
37218: LD_VAR 0 9
37222: ARRAY
37223: PUSH
37224: LD_INT 1
37226: ARRAY
37227: PPUSH
37228: LD_VAR 0 14
37232: PUSH
37233: LD_VAR 0 9
37237: ARRAY
37238: PUSH
37239: LD_INT 2
37241: ARRAY
37242: PPUSH
37243: CALL_OW 428
37247: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37248: LD_VAR 0 14
37252: PUSH
37253: LD_VAR 0 9
37257: ARRAY
37258: PUSH
37259: LD_INT 1
37261: ARRAY
37262: PPUSH
37263: LD_VAR 0 14
37267: PUSH
37268: LD_VAR 0 9
37272: ARRAY
37273: PUSH
37274: LD_INT 2
37276: ARRAY
37277: PPUSH
37278: CALL_OW 351
37282: PUSH
37283: LD_VAR 0 14
37287: PUSH
37288: LD_VAR 0 9
37292: ARRAY
37293: PUSH
37294: LD_INT 1
37296: ARRAY
37297: PPUSH
37298: LD_VAR 0 14
37302: PUSH
37303: LD_VAR 0 9
37307: ARRAY
37308: PUSH
37309: LD_INT 2
37311: ARRAY
37312: PPUSH
37313: CALL_OW 488
37317: NOT
37318: OR
37319: PUSH
37320: LD_VAR 0 13
37324: PPUSH
37325: CALL_OW 247
37329: PUSH
37330: LD_INT 3
37332: EQUAL
37333: OR
37334: IFFALSE 37340
// exit ;
37336: POP
37337: POP
37338: GO 37884
// if not tmp then
37340: LD_VAR 0 13
37344: NOT
37345: IFFALSE 37349
// continue ;
37347: GO 37205
// result := true ;
37349: LD_ADDR_VAR 0 8
37353: PUSH
37354: LD_INT 1
37356: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37357: LD_VAR 0 6
37361: PUSH
37362: LD_VAR 0 13
37366: PPUSH
37367: CALL_OW 247
37371: PUSH
37372: LD_INT 2
37374: EQUAL
37375: AND
37376: PUSH
37377: LD_VAR 0 13
37381: PPUSH
37382: CALL_OW 263
37386: PUSH
37387: LD_INT 1
37389: EQUAL
37390: AND
37391: IFFALSE 37555
// begin if IsDrivenBy ( tmp ) then
37393: LD_VAR 0 13
37397: PPUSH
37398: CALL_OW 311
37402: IFFALSE 37406
// continue ;
37404: GO 37205
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37406: LD_VAR 0 6
37410: PPUSH
37411: LD_INT 3
37413: PUSH
37414: LD_INT 60
37416: PUSH
37417: EMPTY
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: LD_INT 55
37429: PUSH
37430: EMPTY
37431: LIST
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PPUSH
37441: CALL_OW 72
37445: IFFALSE 37553
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37447: LD_ADDR_VAR 0 18
37451: PUSH
37452: LD_VAR 0 6
37456: PPUSH
37457: LD_INT 3
37459: PUSH
37460: LD_INT 60
37462: PUSH
37463: EMPTY
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 3
37472: PUSH
37473: LD_INT 55
37475: PUSH
37476: EMPTY
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PPUSH
37487: CALL_OW 72
37491: PUSH
37492: LD_INT 1
37494: ARRAY
37495: ST_TO_ADDR
// if IsInUnit ( driver ) then
37496: LD_VAR 0 18
37500: PPUSH
37501: CALL_OW 310
37505: IFFALSE 37516
// ComExit ( driver ) ;
37507: LD_VAR 0 18
37511: PPUSH
37512: CALL 62918 0 1
// AddComEnterUnit ( driver , tmp ) ;
37516: LD_VAR 0 18
37520: PPUSH
37521: LD_VAR 0 13
37525: PPUSH
37526: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37530: LD_VAR 0 18
37534: PPUSH
37535: LD_VAR 0 7
37539: PPUSH
37540: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37544: LD_VAR 0 18
37548: PPUSH
37549: CALL_OW 181
// end ; continue ;
37553: GO 37205
// end ; if not cleaners or not tmp in cleaners then
37555: LD_VAR 0 6
37559: NOT
37560: PUSH
37561: LD_VAR 0 13
37565: PUSH
37566: LD_VAR 0 6
37570: IN
37571: NOT
37572: OR
37573: IFFALSE 37880
// begin if dep then
37575: LD_VAR 0 17
37579: IFFALSE 37715
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37581: LD_ADDR_VAR 0 16
37585: PUSH
37586: LD_VAR 0 17
37590: PUSH
37591: LD_INT 1
37593: ARRAY
37594: PPUSH
37595: CALL_OW 250
37599: PPUSH
37600: LD_VAR 0 17
37604: PUSH
37605: LD_INT 1
37607: ARRAY
37608: PPUSH
37609: CALL_OW 254
37613: PPUSH
37614: LD_INT 5
37616: PPUSH
37617: CALL_OW 272
37621: PUSH
37622: LD_VAR 0 17
37626: PUSH
37627: LD_INT 1
37629: ARRAY
37630: PPUSH
37631: CALL_OW 251
37635: PPUSH
37636: LD_VAR 0 17
37640: PUSH
37641: LD_INT 1
37643: ARRAY
37644: PPUSH
37645: CALL_OW 254
37649: PPUSH
37650: LD_INT 5
37652: PPUSH
37653: CALL_OW 273
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37662: LD_VAR 0 16
37666: PUSH
37667: LD_INT 1
37669: ARRAY
37670: PPUSH
37671: LD_VAR 0 16
37675: PUSH
37676: LD_INT 2
37678: ARRAY
37679: PPUSH
37680: CALL_OW 488
37684: IFFALSE 37715
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37686: LD_VAR 0 13
37690: PPUSH
37691: LD_VAR 0 16
37695: PUSH
37696: LD_INT 1
37698: ARRAY
37699: PPUSH
37700: LD_VAR 0 16
37704: PUSH
37705: LD_INT 2
37707: ARRAY
37708: PPUSH
37709: CALL_OW 111
// continue ;
37713: GO 37205
// end ; end ; r := GetDir ( tmp ) ;
37715: LD_ADDR_VAR 0 15
37719: PUSH
37720: LD_VAR 0 13
37724: PPUSH
37725: CALL_OW 254
37729: ST_TO_ADDR
// if r = 5 then
37730: LD_VAR 0 15
37734: PUSH
37735: LD_INT 5
37737: EQUAL
37738: IFFALSE 37748
// r := 0 ;
37740: LD_ADDR_VAR 0 15
37744: PUSH
37745: LD_INT 0
37747: ST_TO_ADDR
// for j = r to 5 do
37748: LD_ADDR_VAR 0 10
37752: PUSH
37753: DOUBLE
37754: LD_VAR 0 15
37758: DEC
37759: ST_TO_ADDR
37760: LD_INT 5
37762: PUSH
37763: FOR_TO
37764: IFFALSE 37878
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37766: LD_ADDR_VAR 0 11
37770: PUSH
37771: LD_VAR 0 13
37775: PPUSH
37776: CALL_OW 250
37780: PPUSH
37781: LD_VAR 0 10
37785: PPUSH
37786: LD_INT 2
37788: PPUSH
37789: CALL_OW 272
37793: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37794: LD_ADDR_VAR 0 12
37798: PUSH
37799: LD_VAR 0 13
37803: PPUSH
37804: CALL_OW 251
37808: PPUSH
37809: LD_VAR 0 10
37813: PPUSH
37814: LD_INT 2
37816: PPUSH
37817: CALL_OW 273
37821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37822: LD_VAR 0 11
37826: PPUSH
37827: LD_VAR 0 12
37831: PPUSH
37832: CALL_OW 488
37836: PUSH
37837: LD_VAR 0 11
37841: PPUSH
37842: LD_VAR 0 12
37846: PPUSH
37847: CALL_OW 428
37851: NOT
37852: AND
37853: IFFALSE 37876
// begin ComMoveXY ( tmp , _x , _y ) ;
37855: LD_VAR 0 13
37859: PPUSH
37860: LD_VAR 0 11
37864: PPUSH
37865: LD_VAR 0 12
37869: PPUSH
37870: CALL_OW 111
// break ;
37874: GO 37878
// end ; end ;
37876: GO 37763
37878: POP
37879: POP
// end ; end ;
37880: GO 37205
37882: POP
37883: POP
// end ;
37884: LD_VAR 0 8
37888: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37889: LD_INT 0
37891: PPUSH
// result := true ;
37892: LD_ADDR_VAR 0 3
37896: PUSH
37897: LD_INT 1
37899: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37900: LD_VAR 0 2
37904: PUSH
37905: LD_INT 24
37907: DOUBLE
37908: EQUAL
37909: IFTRUE 37919
37911: LD_INT 33
37913: DOUBLE
37914: EQUAL
37915: IFTRUE 37919
37917: GO 37944
37919: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37920: LD_ADDR_VAR 0 3
37924: PUSH
37925: LD_INT 32
37927: PPUSH
37928: LD_VAR 0 1
37932: PPUSH
37933: CALL_OW 321
37937: PUSH
37938: LD_INT 2
37940: EQUAL
37941: ST_TO_ADDR
37942: GO 38260
37944: LD_INT 20
37946: DOUBLE
37947: EQUAL
37948: IFTRUE 37952
37950: GO 37977
37952: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37953: LD_ADDR_VAR 0 3
37957: PUSH
37958: LD_INT 6
37960: PPUSH
37961: LD_VAR 0 1
37965: PPUSH
37966: CALL_OW 321
37970: PUSH
37971: LD_INT 2
37973: EQUAL
37974: ST_TO_ADDR
37975: GO 38260
37977: LD_INT 22
37979: DOUBLE
37980: EQUAL
37981: IFTRUE 37991
37983: LD_INT 36
37985: DOUBLE
37986: EQUAL
37987: IFTRUE 37991
37989: GO 38016
37991: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37992: LD_ADDR_VAR 0 3
37996: PUSH
37997: LD_INT 15
37999: PPUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: CALL_OW 321
38009: PUSH
38010: LD_INT 2
38012: EQUAL
38013: ST_TO_ADDR
38014: GO 38260
38016: LD_INT 30
38018: DOUBLE
38019: EQUAL
38020: IFTRUE 38024
38022: GO 38049
38024: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38025: LD_ADDR_VAR 0 3
38029: PUSH
38030: LD_INT 20
38032: PPUSH
38033: LD_VAR 0 1
38037: PPUSH
38038: CALL_OW 321
38042: PUSH
38043: LD_INT 2
38045: EQUAL
38046: ST_TO_ADDR
38047: GO 38260
38049: LD_INT 28
38051: DOUBLE
38052: EQUAL
38053: IFTRUE 38063
38055: LD_INT 21
38057: DOUBLE
38058: EQUAL
38059: IFTRUE 38063
38061: GO 38088
38063: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38064: LD_ADDR_VAR 0 3
38068: PUSH
38069: LD_INT 21
38071: PPUSH
38072: LD_VAR 0 1
38076: PPUSH
38077: CALL_OW 321
38081: PUSH
38082: LD_INT 2
38084: EQUAL
38085: ST_TO_ADDR
38086: GO 38260
38088: LD_INT 16
38090: DOUBLE
38091: EQUAL
38092: IFTRUE 38096
38094: GO 38121
38096: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38097: LD_ADDR_VAR 0 3
38101: PUSH
38102: LD_INT 84
38104: PPUSH
38105: LD_VAR 0 1
38109: PPUSH
38110: CALL_OW 321
38114: PUSH
38115: LD_INT 2
38117: EQUAL
38118: ST_TO_ADDR
38119: GO 38260
38121: LD_INT 19
38123: DOUBLE
38124: EQUAL
38125: IFTRUE 38135
38127: LD_INT 23
38129: DOUBLE
38130: EQUAL
38131: IFTRUE 38135
38133: GO 38160
38135: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38136: LD_ADDR_VAR 0 3
38140: PUSH
38141: LD_INT 83
38143: PPUSH
38144: LD_VAR 0 1
38148: PPUSH
38149: CALL_OW 321
38153: PUSH
38154: LD_INT 2
38156: EQUAL
38157: ST_TO_ADDR
38158: GO 38260
38160: LD_INT 17
38162: DOUBLE
38163: EQUAL
38164: IFTRUE 38168
38166: GO 38193
38168: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38169: LD_ADDR_VAR 0 3
38173: PUSH
38174: LD_INT 39
38176: PPUSH
38177: LD_VAR 0 1
38181: PPUSH
38182: CALL_OW 321
38186: PUSH
38187: LD_INT 2
38189: EQUAL
38190: ST_TO_ADDR
38191: GO 38260
38193: LD_INT 18
38195: DOUBLE
38196: EQUAL
38197: IFTRUE 38201
38199: GO 38226
38201: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38202: LD_ADDR_VAR 0 3
38206: PUSH
38207: LD_INT 40
38209: PPUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 321
38219: PUSH
38220: LD_INT 2
38222: EQUAL
38223: ST_TO_ADDR
38224: GO 38260
38226: LD_INT 27
38228: DOUBLE
38229: EQUAL
38230: IFTRUE 38234
38232: GO 38259
38234: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_INT 35
38242: PPUSH
38243: LD_VAR 0 1
38247: PPUSH
38248: CALL_OW 321
38252: PUSH
38253: LD_INT 2
38255: EQUAL
38256: ST_TO_ADDR
38257: GO 38260
38259: POP
// end ;
38260: LD_VAR 0 3
38264: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38265: LD_INT 0
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
// result := false ;
38278: LD_ADDR_VAR 0 6
38282: PUSH
38283: LD_INT 0
38285: ST_TO_ADDR
// if btype = b_depot then
38286: LD_VAR 0 2
38290: PUSH
38291: LD_INT 0
38293: EQUAL
38294: IFFALSE 38306
// begin result := true ;
38296: LD_ADDR_VAR 0 6
38300: PUSH
38301: LD_INT 1
38303: ST_TO_ADDR
// exit ;
38304: GO 39132
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38306: LD_VAR 0 1
38310: NOT
38311: PUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: CALL_OW 266
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: IN
38332: NOT
38333: OR
38334: PUSH
38335: LD_VAR 0 2
38339: NOT
38340: OR
38341: PUSH
38342: LD_VAR 0 5
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: LD_INT 4
38361: PUSH
38362: LD_INT 5
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: IN
38373: NOT
38374: OR
38375: PUSH
38376: LD_VAR 0 3
38380: PPUSH
38381: LD_VAR 0 4
38385: PPUSH
38386: CALL_OW 488
38390: NOT
38391: OR
38392: IFFALSE 38396
// exit ;
38394: GO 39132
// side := GetSide ( depot ) ;
38396: LD_ADDR_VAR 0 9
38400: PUSH
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 255
38410: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38411: LD_VAR 0 9
38415: PPUSH
38416: LD_VAR 0 2
38420: PPUSH
38421: CALL 37889 0 2
38425: NOT
38426: IFFALSE 38430
// exit ;
38428: GO 39132
// pom := GetBase ( depot ) ;
38430: LD_ADDR_VAR 0 10
38434: PUSH
38435: LD_VAR 0 1
38439: PPUSH
38440: CALL_OW 274
38444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38445: LD_ADDR_VAR 0 11
38449: PUSH
38450: LD_VAR 0 2
38454: PPUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 248
38464: PPUSH
38465: CALL_OW 450
38469: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38470: LD_VAR 0 10
38474: PPUSH
38475: LD_INT 1
38477: PPUSH
38478: CALL_OW 275
38482: PUSH
38483: LD_VAR 0 11
38487: PUSH
38488: LD_INT 1
38490: ARRAY
38491: GREATEREQUAL
38492: PUSH
38493: LD_VAR 0 10
38497: PPUSH
38498: LD_INT 2
38500: PPUSH
38501: CALL_OW 275
38505: PUSH
38506: LD_VAR 0 11
38510: PUSH
38511: LD_INT 2
38513: ARRAY
38514: GREATEREQUAL
38515: AND
38516: PUSH
38517: LD_VAR 0 10
38521: PPUSH
38522: LD_INT 3
38524: PPUSH
38525: CALL_OW 275
38529: PUSH
38530: LD_VAR 0 11
38534: PUSH
38535: LD_INT 3
38537: ARRAY
38538: GREATEREQUAL
38539: AND
38540: NOT
38541: IFFALSE 38545
// exit ;
38543: GO 39132
// if GetBType ( depot ) = b_depot then
38545: LD_VAR 0 1
38549: PPUSH
38550: CALL_OW 266
38554: PUSH
38555: LD_INT 0
38557: EQUAL
38558: IFFALSE 38570
// dist := 28 else
38560: LD_ADDR_VAR 0 14
38564: PUSH
38565: LD_INT 28
38567: ST_TO_ADDR
38568: GO 38578
// dist := 36 ;
38570: LD_ADDR_VAR 0 14
38574: PUSH
38575: LD_INT 36
38577: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38578: LD_VAR 0 1
38582: PPUSH
38583: LD_VAR 0 3
38587: PPUSH
38588: LD_VAR 0 4
38592: PPUSH
38593: CALL_OW 297
38597: PUSH
38598: LD_VAR 0 14
38602: GREATER
38603: IFFALSE 38607
// exit ;
38605: GO 39132
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38607: LD_ADDR_VAR 0 12
38611: PUSH
38612: LD_VAR 0 2
38616: PPUSH
38617: LD_VAR 0 3
38621: PPUSH
38622: LD_VAR 0 4
38626: PPUSH
38627: LD_VAR 0 5
38631: PPUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 248
38641: PPUSH
38642: LD_INT 0
38644: PPUSH
38645: CALL 39137 0 6
38649: ST_TO_ADDR
// if not hexes then
38650: LD_VAR 0 12
38654: NOT
38655: IFFALSE 38659
// exit ;
38657: GO 39132
// hex := GetHexInfo ( x , y ) ;
38659: LD_ADDR_VAR 0 15
38663: PUSH
38664: LD_VAR 0 3
38668: PPUSH
38669: LD_VAR 0 4
38673: PPUSH
38674: CALL_OW 546
38678: ST_TO_ADDR
// if hex [ 1 ] then
38679: LD_VAR 0 15
38683: PUSH
38684: LD_INT 1
38686: ARRAY
38687: IFFALSE 38691
// exit ;
38689: GO 39132
// height := hex [ 2 ] ;
38691: LD_ADDR_VAR 0 13
38695: PUSH
38696: LD_VAR 0 15
38700: PUSH
38701: LD_INT 2
38703: ARRAY
38704: ST_TO_ADDR
// for i = 1 to hexes do
38705: LD_ADDR_VAR 0 7
38709: PUSH
38710: DOUBLE
38711: LD_INT 1
38713: DEC
38714: ST_TO_ADDR
38715: LD_VAR 0 12
38719: PUSH
38720: FOR_TO
38721: IFFALSE 39051
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38723: LD_VAR 0 12
38727: PUSH
38728: LD_VAR 0 7
38732: ARRAY
38733: PUSH
38734: LD_INT 1
38736: ARRAY
38737: PPUSH
38738: LD_VAR 0 12
38742: PUSH
38743: LD_VAR 0 7
38747: ARRAY
38748: PUSH
38749: LD_INT 2
38751: ARRAY
38752: PPUSH
38753: CALL_OW 488
38757: NOT
38758: PUSH
38759: LD_VAR 0 12
38763: PUSH
38764: LD_VAR 0 7
38768: ARRAY
38769: PUSH
38770: LD_INT 1
38772: ARRAY
38773: PPUSH
38774: LD_VAR 0 12
38778: PUSH
38779: LD_VAR 0 7
38783: ARRAY
38784: PUSH
38785: LD_INT 2
38787: ARRAY
38788: PPUSH
38789: CALL_OW 428
38793: PUSH
38794: LD_INT 0
38796: GREATER
38797: OR
38798: PUSH
38799: LD_VAR 0 12
38803: PUSH
38804: LD_VAR 0 7
38808: ARRAY
38809: PUSH
38810: LD_INT 1
38812: ARRAY
38813: PPUSH
38814: LD_VAR 0 12
38818: PUSH
38819: LD_VAR 0 7
38823: ARRAY
38824: PUSH
38825: LD_INT 2
38827: ARRAY
38828: PPUSH
38829: CALL_OW 351
38833: OR
38834: IFFALSE 38840
// exit ;
38836: POP
38837: POP
38838: GO 39132
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38840: LD_ADDR_VAR 0 8
38844: PUSH
38845: LD_VAR 0 12
38849: PUSH
38850: LD_VAR 0 7
38854: ARRAY
38855: PUSH
38856: LD_INT 1
38858: ARRAY
38859: PPUSH
38860: LD_VAR 0 12
38864: PUSH
38865: LD_VAR 0 7
38869: ARRAY
38870: PUSH
38871: LD_INT 2
38873: ARRAY
38874: PPUSH
38875: CALL_OW 546
38879: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38880: LD_VAR 0 8
38884: PUSH
38885: LD_INT 1
38887: ARRAY
38888: PUSH
38889: LD_VAR 0 8
38893: PUSH
38894: LD_INT 2
38896: ARRAY
38897: PUSH
38898: LD_VAR 0 13
38902: PUSH
38903: LD_INT 2
38905: PLUS
38906: GREATER
38907: OR
38908: PUSH
38909: LD_VAR 0 8
38913: PUSH
38914: LD_INT 2
38916: ARRAY
38917: PUSH
38918: LD_VAR 0 13
38922: PUSH
38923: LD_INT 2
38925: MINUS
38926: LESS
38927: OR
38928: PUSH
38929: LD_VAR 0 8
38933: PUSH
38934: LD_INT 3
38936: ARRAY
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 8
38943: PUSH
38944: LD_INT 9
38946: PUSH
38947: LD_INT 10
38949: PUSH
38950: LD_INT 11
38952: PUSH
38953: LD_INT 12
38955: PUSH
38956: LD_INT 13
38958: PUSH
38959: LD_INT 16
38961: PUSH
38962: LD_INT 17
38964: PUSH
38965: LD_INT 18
38967: PUSH
38968: LD_INT 19
38970: PUSH
38971: LD_INT 20
38973: PUSH
38974: LD_INT 21
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: IN
38992: NOT
38993: OR
38994: PUSH
38995: LD_VAR 0 8
38999: PUSH
39000: LD_INT 5
39002: ARRAY
39003: NOT
39004: OR
39005: PUSH
39006: LD_VAR 0 8
39010: PUSH
39011: LD_INT 6
39013: ARRAY
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: LD_INT 7
39023: PUSH
39024: LD_INT 9
39026: PUSH
39027: LD_INT 10
39029: PUSH
39030: LD_INT 11
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: IN
39041: NOT
39042: OR
39043: IFFALSE 39049
// exit ;
39045: POP
39046: POP
39047: GO 39132
// end ;
39049: GO 38720
39051: POP
39052: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39053: LD_VAR 0 9
39057: PPUSH
39058: LD_VAR 0 3
39062: PPUSH
39063: LD_VAR 0 4
39067: PPUSH
39068: LD_INT 20
39070: PPUSH
39071: CALL 31055 0 4
39075: PUSH
39076: LD_INT 4
39078: ARRAY
39079: IFFALSE 39083
// exit ;
39081: GO 39132
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39083: LD_VAR 0 2
39087: PUSH
39088: LD_INT 29
39090: PUSH
39091: LD_INT 30
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: IN
39098: PUSH
39099: LD_VAR 0 3
39103: PPUSH
39104: LD_VAR 0 4
39108: PPUSH
39109: LD_VAR 0 9
39113: PPUSH
39114: CALL_OW 440
39118: NOT
39119: AND
39120: IFFALSE 39124
// exit ;
39122: GO 39132
// result := true ;
39124: LD_ADDR_VAR 0 6
39128: PUSH
39129: LD_INT 1
39131: ST_TO_ADDR
// end ;
39132: LD_VAR 0 6
39136: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39137: LD_INT 0
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
// result = [ ] ;
39197: LD_ADDR_VAR 0 7
39201: PUSH
39202: EMPTY
39203: ST_TO_ADDR
// temp_list = [ ] ;
39204: LD_ADDR_VAR 0 9
39208: PUSH
39209: EMPTY
39210: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39211: LD_VAR 0 4
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: LD_INT 4
39230: PUSH
39231: LD_INT 5
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: IN
39242: NOT
39243: PUSH
39244: LD_VAR 0 1
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: IN
39259: PUSH
39260: LD_VAR 0 5
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 3
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: IN
39279: NOT
39280: AND
39281: OR
39282: IFFALSE 39286
// exit ;
39284: GO 57677
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39286: LD_VAR 0 1
39290: PUSH
39291: LD_INT 6
39293: PUSH
39294: LD_INT 7
39296: PUSH
39297: LD_INT 8
39299: PUSH
39300: LD_INT 13
39302: PUSH
39303: LD_INT 12
39305: PUSH
39306: LD_INT 15
39308: PUSH
39309: LD_INT 11
39311: PUSH
39312: LD_INT 14
39314: PUSH
39315: LD_INT 10
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: IN
39329: IFFALSE 39339
// btype = b_lab ;
39331: LD_ADDR_VAR 0 1
39335: PUSH
39336: LD_INT 6
39338: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39339: LD_VAR 0 6
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: LIST
39357: IN
39358: NOT
39359: PUSH
39360: LD_VAR 0 1
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 3
39376: PUSH
39377: LD_INT 6
39379: PUSH
39380: LD_INT 36
39382: PUSH
39383: LD_INT 4
39385: PUSH
39386: LD_INT 5
39388: PUSH
39389: LD_INT 31
39391: PUSH
39392: LD_INT 32
39394: PUSH
39395: LD_INT 33
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: IN
39411: NOT
39412: PUSH
39413: LD_VAR 0 6
39417: PUSH
39418: LD_INT 1
39420: EQUAL
39421: AND
39422: OR
39423: PUSH
39424: LD_VAR 0 1
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: LD_INT 3
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: IN
39439: NOT
39440: PUSH
39441: LD_VAR 0 6
39445: PUSH
39446: LD_INT 2
39448: EQUAL
39449: AND
39450: OR
39451: IFFALSE 39461
// mode = 0 ;
39453: LD_ADDR_VAR 0 6
39457: PUSH
39458: LD_INT 0
39460: ST_TO_ADDR
// case mode of 0 :
39461: LD_VAR 0 6
39465: PUSH
39466: LD_INT 0
39468: DOUBLE
39469: EQUAL
39470: IFTRUE 39474
39472: GO 50927
39474: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39475: LD_ADDR_VAR 0 11
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 3
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 3
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: LD_INT 2
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39668: LD_ADDR_VAR 0 12
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: NEG
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 3
39825: NEG
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39864: LD_ADDR_VAR 0 13
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: LD_INT 3
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 3
40023: NEG
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: LD_INT 3
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40063: LD_ADDR_VAR 0 14
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 3
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 0
40221: PUSH
40222: LD_INT 3
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40259: LD_ADDR_VAR 0 15
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 3
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40452: LD_ADDR_VAR 0 16
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 3
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 2
40619: PUSH
40620: LD_INT 3
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40645: LD_ADDR_VAR 0 17
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40875: LD_ADDR_VAR 0 18
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 2
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: LD_INT 2
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41105: LD_ADDR_VAR 0 19
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41335: LD_ADDR_VAR 0 20
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41565: LD_ADDR_VAR 0 21
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41795: LD_ADDR_VAR 0 22
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: LD_INT 2
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42025: LD_ADDR_VAR 0 23
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: LD_INT 3
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 3
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42305: LD_ADDR_VAR 0 24
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42581: LD_ADDR_VAR 0 25
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42855: LD_ADDR_VAR 0 26
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 3
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43131: LD_ADDR_VAR 0 27
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 3
43364: NEG
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 3
43376: NEG
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43411: LD_ADDR_VAR 0 28
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: LD_INT 3
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: LD_INT 3
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 3
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43693: LD_ADDR_VAR 0 29
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 3
43937: NEG
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43972: LD_ADDR_VAR 0 30
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 3
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 3
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44250: LD_ADDR_VAR 0 31
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 2
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: LD_INT 3
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 3
44493: NEG
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44528: LD_ADDR_VAR 0 32
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 3
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 3
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 3
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44806: LD_ADDR_VAR 0 33
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 3
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 3
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 3
45050: NEG
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45085: LD_ADDR_VAR 0 34
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 3
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 3
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: NEG
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45365: LD_ADDR_VAR 0 35
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45477: LD_ADDR_VAR 0 36
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45589: LD_ADDR_VAR 0 37
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45701: LD_ADDR_VAR 0 38
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45813: LD_ADDR_VAR 0 39
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45925: LD_ADDR_VAR 0 40
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46037: LD_ADDR_VAR 0 41
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 3
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 3
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 3
46334: NEG
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: LD_INT 3
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46387: LD_ADDR_VAR 0 42
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 3
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 3
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 3
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46737: LD_ADDR_VAR 0 43
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 3
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47085: LD_ADDR_VAR 0 44
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 3
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 3
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 3
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 3
47359: NEG
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 3
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 3
47382: NEG
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: NEG
47395: PUSH
47396: LD_INT 3
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47435: LD_ADDR_VAR 0 45
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 3
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 3
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 3
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 3
47744: NEG
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47785: LD_ADDR_VAR 0 46
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 3
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: NEG
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 3
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48133: LD_ADDR_VAR 0 47
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48284: LD_ADDR_VAR 0 48
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48431: LD_ADDR_VAR 0 49
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48575: LD_ADDR_VAR 0 50
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48719: LD_ADDR_VAR 0 51
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48866: LD_ADDR_VAR 0 52
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49017: LD_ADDR_VAR 0 53
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49247: LD_ADDR_VAR 0 54
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49477: LD_ADDR_VAR 0 55
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49707: LD_ADDR_VAR 0 56
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49937: LD_ADDR_VAR 0 57
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50167: LD_ADDR_VAR 0 58
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50397: LD_ADDR_VAR 0 59
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50485: LD_ADDR_VAR 0 60
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50573: LD_ADDR_VAR 0 61
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50661: LD_ADDR_VAR 0 62
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50749: LD_ADDR_VAR 0 63
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50837: LD_ADDR_VAR 0 64
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
// end ; 1 :
50925: GO 56822
50927: LD_INT 1
50929: DOUBLE
50930: EQUAL
50931: IFTRUE 50935
50933: GO 53558
50935: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50936: LD_ADDR_VAR 0 11
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50980: LD_ADDR_VAR 0 12
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: LIST
51020: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51021: LD_ADDR_VAR 0 13
51025: PUSH
51026: LD_INT 3
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: PUSH
51039: LD_INT 3
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 3
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51061: LD_ADDR_VAR 0 14
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: LIST
51101: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51102: LD_ADDR_VAR 0 15
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51146: LD_ADDR_VAR 0 16
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51192: LD_ADDR_VAR 0 17
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51236: LD_ADDR_VAR 0 18
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51277: LD_ADDR_VAR 0 19
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51317: LD_ADDR_VAR 0 20
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 3
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51358: LD_ADDR_VAR 0 21
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51402: LD_ADDR_VAR 0 22
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51448: LD_ADDR_VAR 0 23
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 4
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51492: LD_ADDR_VAR 0 24
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 4
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51533: LD_ADDR_VAR 0 25
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 4
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: LD_INT 4
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51573: LD_ADDR_VAR 0 26
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 3
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 4
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 3
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51614: LD_ADDR_VAR 0 27
51618: PUSH
51619: LD_INT 3
51621: NEG
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 4
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51658: LD_ADDR_VAR 0 28
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 3
51677: NEG
51678: PUSH
51679: LD_INT 4
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 4
51689: NEG
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51704: LD_ADDR_VAR 0 29
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 4
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 4
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 5
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 5
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 4
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 6
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 6
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 5
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51859: LD_ADDR_VAR 0 30
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 3
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 4
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 4
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 4
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 5
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 5
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 5
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 6
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 6
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52002: LD_ADDR_VAR 0 31
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 4
52039: PUSH
52040: LD_INT 3
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 4
52049: PUSH
52050: LD_INT 4
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: LD_INT 4
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 5
52069: PUSH
52070: LD_INT 4
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 5
52079: PUSH
52080: LD_INT 5
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 4
52089: PUSH
52090: LD_INT 5
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 6
52099: PUSH
52100: LD_INT 5
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 6
52109: PUSH
52110: LD_INT 6
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 5
52119: PUSH
52120: LD_INT 6
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52141: LD_ADDR_VAR 0 32
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: LD_INT 3
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 4
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 4
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 5
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 5
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 4
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 6
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 6
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 5
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52284: LD_ADDR_VAR 0 33
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 4
52336: NEG
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 4
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 4
52359: NEG
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 5
52370: NEG
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 5
52381: NEG
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 5
52393: NEG
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 6
52404: NEG
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 6
52415: NEG
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52439: LD_ADDR_VAR 0 34
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 3
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 3
52470: NEG
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 3
52482: NEG
52483: PUSH
52484: LD_INT 4
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 4
52494: NEG
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 4
52506: NEG
52507: PUSH
52508: LD_INT 4
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 4
52518: NEG
52519: PUSH
52520: LD_INT 5
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 5
52530: NEG
52531: PUSH
52532: LD_INT 4
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 5
52542: NEG
52543: PUSH
52544: LD_INT 5
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 5
52554: NEG
52555: PUSH
52556: LD_INT 6
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 6
52566: NEG
52567: PUSH
52568: LD_INT 5
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 6
52578: NEG
52579: PUSH
52580: LD_INT 6
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52602: LD_ADDR_VAR 0 41
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52646: LD_ADDR_VAR 0 42
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: LIST
52686: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52687: LD_ADDR_VAR 0 43
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: LIST
52726: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52727: LD_ADDR_VAR 0 44
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52768: LD_ADDR_VAR 0 45
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52812: LD_ADDR_VAR 0 46
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 3
52843: NEG
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: LIST
52857: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52858: LD_ADDR_VAR 0 47
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52891: LD_ADDR_VAR 0 48
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52922: LD_ADDR_VAR 0 49
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52951: LD_ADDR_VAR 0 50
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: LD_INT 3
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52980: LD_ADDR_VAR 0 51
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53011: LD_ADDR_VAR 0 52
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53044: LD_ADDR_VAR 0 53
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 3
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53088: LD_ADDR_VAR 0 54
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 3
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53129: LD_ADDR_VAR 0 55
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: PUSH
53147: LD_INT 3
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53169: LD_ADDR_VAR 0 56
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53210: LD_ADDR_VAR 0 57
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53254: LD_ADDR_VAR 0 58
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: NEG
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53300: LD_ADDR_VAR 0 59
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53344: LD_ADDR_VAR 0 60
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53385: LD_ADDR_VAR 0 61
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53425: LD_ADDR_VAR 0 62
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53466: LD_ADDR_VAR 0 63
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53510: LD_ADDR_VAR 0 64
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: ST_TO_ADDR
// end ; 2 :
53556: GO 56822
53558: LD_INT 2
53560: DOUBLE
53561: EQUAL
53562: IFTRUE 53566
53564: GO 56821
53566: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53567: LD_ADDR_VAR 0 29
53571: PUSH
53572: LD_INT 4
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 4
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 5
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 5
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 4
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 5
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 3
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 4
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 4
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: LD_INT 4
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 4
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: LD_INT 4
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 4
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 4
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 5
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 5
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: LD_INT 5
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 3
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 3
53895: NEG
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 4
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 4
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 4
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: NEG
53953: PUSH
53954: LD_INT 4
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 4
53964: NEG
53965: PUSH
53966: LD_INT 5
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: LD_INT 4
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 4
54000: NEG
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 5
54012: NEG
54013: PUSH
54014: LD_INT 4
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 5
54024: NEG
54025: PUSH
54026: LD_INT 5
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: LD_INT 5
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 5
54048: NEG
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54105: LD_ADDR_VAR 0 30
54109: PUSH
54110: LD_INT 4
54112: PUSH
54113: LD_INT 4
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 5
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 5
54142: PUSH
54143: LD_INT 5
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 4
54152: PUSH
54153: LD_INT 5
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: LD_INT 4
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 5
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 5
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 4
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 4
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 4
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 4
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 4
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 4
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 5
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 5
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 5
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 3
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: NEG
54410: PUSH
54411: LD_INT 4
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 4
54457: NEG
54458: PUSH
54459: LD_INT 3
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: LD_INT 4
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 4
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 4
54493: NEG
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 4
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 5
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 4
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: LD_INT 4
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 5
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 3
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 5
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54652: LD_ADDR_VAR 0 31
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 4
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 3
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 4
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 5
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 5
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: LD_INT 4
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: LD_INT 5
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 3
54752: NEG
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 3
54763: NEG
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 4
54808: NEG
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 4
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 4
54831: NEG
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 4
54854: NEG
54855: PUSH
54856: LD_INT 4
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: LD_INT 5
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: LD_INT 4
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: LD_INT 3
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 4
54902: NEG
54903: PUSH
54904: LD_INT 3
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 5
54914: NEG
54915: PUSH
54916: LD_INT 4
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 5
54926: NEG
54927: PUSH
54928: LD_INT 5
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: LD_INT 5
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 5
54950: NEG
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 4
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: LD_INT 4
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 4
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 4
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 5
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 5
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 4
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 5
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55202: LD_ADDR_VAR 0 32
55206: PUSH
55207: LD_INT 4
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 4
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 4
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 5
55265: NEG
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 5
55276: NEG
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 5
55288: NEG
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 3
55300: NEG
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 3
55311: NEG
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 3
55323: NEG
55324: PUSH
55325: LD_INT 4
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 4
55371: NEG
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: LD_INT 4
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: LD_INT 4
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 4
55407: NEG
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 4
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 5
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 4
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 4
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: LD_INT 5
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 3
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: LD_INT 5
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 4
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 4
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 4
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 4
55614: PUSH
55615: LD_INT 4
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 4
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 5
55634: PUSH
55635: LD_INT 4
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 5
55644: PUSH
55645: LD_INT 5
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 4
55654: PUSH
55655: LD_INT 5
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: LD_INT 4
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 5
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: LD_INT 5
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55749: LD_ADDR_VAR 0 33
55753: PUSH
55754: LD_INT 4
55756: NEG
55757: PUSH
55758: LD_INT 4
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 4
55768: NEG
55769: PUSH
55770: LD_INT 5
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 3
55780: NEG
55781: PUSH
55782: LD_INT 4
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 4
55804: NEG
55805: PUSH
55806: LD_INT 3
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 5
55816: NEG
55817: PUSH
55818: LD_INT 4
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 5
55828: NEG
55829: PUSH
55830: LD_INT 5
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: NEG
55841: PUSH
55842: LD_INT 5
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 5
55852: NEG
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 4
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 3
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 4
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 4
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 4
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 4
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 5
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 5
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 4
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 3
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 3
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 3
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 5
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 4
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 4
56089: PUSH
56090: LD_INT 4
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 4
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 4
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 4
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 5
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 5
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: LD_INT 5
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56287: LD_ADDR_VAR 0 34
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 4
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 5
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 4
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 4
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 5
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 5
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 4
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 4
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 4
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 4
56489: PUSH
56490: LD_INT 4
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 4
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 5
56509: PUSH
56510: LD_INT 4
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 5
56519: PUSH
56520: LD_INT 5
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 4
56529: PUSH
56530: LD_INT 5
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: LD_INT 4
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 5
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: LD_INT 5
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 4
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 4
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: LD_INT 4
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 4
56672: NEG
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 4
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 4
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 5
56728: NEG
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 5
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 5
56751: NEG
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// end ; end ;
56819: GO 56822
56821: POP
// case btype of b_depot , b_warehouse :
56822: LD_VAR 0 1
56826: PUSH
56827: LD_INT 0
56829: DOUBLE
56830: EQUAL
56831: IFTRUE 56841
56833: LD_INT 1
56835: DOUBLE
56836: EQUAL
56837: IFTRUE 56841
56839: GO 57042
56841: POP
// case nation of nation_american :
56842: LD_VAR 0 5
56846: PUSH
56847: LD_INT 1
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56855
56853: GO 56911
56855: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56856: LD_ADDR_VAR 0 9
56860: PUSH
56861: LD_VAR 0 11
56865: PUSH
56866: LD_VAR 0 12
56870: PUSH
56871: LD_VAR 0 13
56875: PUSH
56876: LD_VAR 0 14
56880: PUSH
56881: LD_VAR 0 15
56885: PUSH
56886: LD_VAR 0 16
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: PUSH
56899: LD_VAR 0 4
56903: PUSH
56904: LD_INT 1
56906: PLUS
56907: ARRAY
56908: ST_TO_ADDR
56909: GO 57040
56911: LD_INT 2
56913: DOUBLE
56914: EQUAL
56915: IFTRUE 56919
56917: GO 56975
56919: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56920: LD_ADDR_VAR 0 9
56924: PUSH
56925: LD_VAR 0 17
56929: PUSH
56930: LD_VAR 0 18
56934: PUSH
56935: LD_VAR 0 19
56939: PUSH
56940: LD_VAR 0 20
56944: PUSH
56945: LD_VAR 0 21
56949: PUSH
56950: LD_VAR 0 22
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: PUSH
56963: LD_VAR 0 4
56967: PUSH
56968: LD_INT 1
56970: PLUS
56971: ARRAY
56972: ST_TO_ADDR
56973: GO 57040
56975: LD_INT 3
56977: DOUBLE
56978: EQUAL
56979: IFTRUE 56983
56981: GO 57039
56983: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56984: LD_ADDR_VAR 0 9
56988: PUSH
56989: LD_VAR 0 23
56993: PUSH
56994: LD_VAR 0 24
56998: PUSH
56999: LD_VAR 0 25
57003: PUSH
57004: LD_VAR 0 26
57008: PUSH
57009: LD_VAR 0 27
57013: PUSH
57014: LD_VAR 0 28
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: PUSH
57027: LD_VAR 0 4
57031: PUSH
57032: LD_INT 1
57034: PLUS
57035: ARRAY
57036: ST_TO_ADDR
57037: GO 57040
57039: POP
57040: GO 57595
57042: LD_INT 2
57044: DOUBLE
57045: EQUAL
57046: IFTRUE 57056
57048: LD_INT 3
57050: DOUBLE
57051: EQUAL
57052: IFTRUE 57056
57054: GO 57112
57056: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57057: LD_ADDR_VAR 0 9
57061: PUSH
57062: LD_VAR 0 29
57066: PUSH
57067: LD_VAR 0 30
57071: PUSH
57072: LD_VAR 0 31
57076: PUSH
57077: LD_VAR 0 32
57081: PUSH
57082: LD_VAR 0 33
57086: PUSH
57087: LD_VAR 0 34
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: PUSH
57100: LD_VAR 0 4
57104: PUSH
57105: LD_INT 1
57107: PLUS
57108: ARRAY
57109: ST_TO_ADDR
57110: GO 57595
57112: LD_INT 16
57114: DOUBLE
57115: EQUAL
57116: IFTRUE 57174
57118: LD_INT 17
57120: DOUBLE
57121: EQUAL
57122: IFTRUE 57174
57124: LD_INT 18
57126: DOUBLE
57127: EQUAL
57128: IFTRUE 57174
57130: LD_INT 19
57132: DOUBLE
57133: EQUAL
57134: IFTRUE 57174
57136: LD_INT 22
57138: DOUBLE
57139: EQUAL
57140: IFTRUE 57174
57142: LD_INT 20
57144: DOUBLE
57145: EQUAL
57146: IFTRUE 57174
57148: LD_INT 21
57150: DOUBLE
57151: EQUAL
57152: IFTRUE 57174
57154: LD_INT 23
57156: DOUBLE
57157: EQUAL
57158: IFTRUE 57174
57160: LD_INT 24
57162: DOUBLE
57163: EQUAL
57164: IFTRUE 57174
57166: LD_INT 25
57168: DOUBLE
57169: EQUAL
57170: IFTRUE 57174
57172: GO 57230
57174: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57175: LD_ADDR_VAR 0 9
57179: PUSH
57180: LD_VAR 0 35
57184: PUSH
57185: LD_VAR 0 36
57189: PUSH
57190: LD_VAR 0 37
57194: PUSH
57195: LD_VAR 0 38
57199: PUSH
57200: LD_VAR 0 39
57204: PUSH
57205: LD_VAR 0 40
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: PUSH
57218: LD_VAR 0 4
57222: PUSH
57223: LD_INT 1
57225: PLUS
57226: ARRAY
57227: ST_TO_ADDR
57228: GO 57595
57230: LD_INT 6
57232: DOUBLE
57233: EQUAL
57234: IFTRUE 57286
57236: LD_INT 7
57238: DOUBLE
57239: EQUAL
57240: IFTRUE 57286
57242: LD_INT 8
57244: DOUBLE
57245: EQUAL
57246: IFTRUE 57286
57248: LD_INT 13
57250: DOUBLE
57251: EQUAL
57252: IFTRUE 57286
57254: LD_INT 12
57256: DOUBLE
57257: EQUAL
57258: IFTRUE 57286
57260: LD_INT 15
57262: DOUBLE
57263: EQUAL
57264: IFTRUE 57286
57266: LD_INT 11
57268: DOUBLE
57269: EQUAL
57270: IFTRUE 57286
57272: LD_INT 14
57274: DOUBLE
57275: EQUAL
57276: IFTRUE 57286
57278: LD_INT 10
57280: DOUBLE
57281: EQUAL
57282: IFTRUE 57286
57284: GO 57342
57286: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57287: LD_ADDR_VAR 0 9
57291: PUSH
57292: LD_VAR 0 41
57296: PUSH
57297: LD_VAR 0 42
57301: PUSH
57302: LD_VAR 0 43
57306: PUSH
57307: LD_VAR 0 44
57311: PUSH
57312: LD_VAR 0 45
57316: PUSH
57317: LD_VAR 0 46
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: PUSH
57330: LD_VAR 0 4
57334: PUSH
57335: LD_INT 1
57337: PLUS
57338: ARRAY
57339: ST_TO_ADDR
57340: GO 57595
57342: LD_INT 36
57344: DOUBLE
57345: EQUAL
57346: IFTRUE 57350
57348: GO 57406
57350: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57351: LD_ADDR_VAR 0 9
57355: PUSH
57356: LD_VAR 0 47
57360: PUSH
57361: LD_VAR 0 48
57365: PUSH
57366: LD_VAR 0 49
57370: PUSH
57371: LD_VAR 0 50
57375: PUSH
57376: LD_VAR 0 51
57380: PUSH
57381: LD_VAR 0 52
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: PUSH
57394: LD_VAR 0 4
57398: PUSH
57399: LD_INT 1
57401: PLUS
57402: ARRAY
57403: ST_TO_ADDR
57404: GO 57595
57406: LD_INT 4
57408: DOUBLE
57409: EQUAL
57410: IFTRUE 57432
57412: LD_INT 5
57414: DOUBLE
57415: EQUAL
57416: IFTRUE 57432
57418: LD_INT 34
57420: DOUBLE
57421: EQUAL
57422: IFTRUE 57432
57424: LD_INT 37
57426: DOUBLE
57427: EQUAL
57428: IFTRUE 57432
57430: GO 57488
57432: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57433: LD_ADDR_VAR 0 9
57437: PUSH
57438: LD_VAR 0 53
57442: PUSH
57443: LD_VAR 0 54
57447: PUSH
57448: LD_VAR 0 55
57452: PUSH
57453: LD_VAR 0 56
57457: PUSH
57458: LD_VAR 0 57
57462: PUSH
57463: LD_VAR 0 58
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: PUSH
57476: LD_VAR 0 4
57480: PUSH
57481: LD_INT 1
57483: PLUS
57484: ARRAY
57485: ST_TO_ADDR
57486: GO 57595
57488: LD_INT 31
57490: DOUBLE
57491: EQUAL
57492: IFTRUE 57538
57494: LD_INT 32
57496: DOUBLE
57497: EQUAL
57498: IFTRUE 57538
57500: LD_INT 33
57502: DOUBLE
57503: EQUAL
57504: IFTRUE 57538
57506: LD_INT 27
57508: DOUBLE
57509: EQUAL
57510: IFTRUE 57538
57512: LD_INT 26
57514: DOUBLE
57515: EQUAL
57516: IFTRUE 57538
57518: LD_INT 28
57520: DOUBLE
57521: EQUAL
57522: IFTRUE 57538
57524: LD_INT 29
57526: DOUBLE
57527: EQUAL
57528: IFTRUE 57538
57530: LD_INT 30
57532: DOUBLE
57533: EQUAL
57534: IFTRUE 57538
57536: GO 57594
57538: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57539: LD_ADDR_VAR 0 9
57543: PUSH
57544: LD_VAR 0 59
57548: PUSH
57549: LD_VAR 0 60
57553: PUSH
57554: LD_VAR 0 61
57558: PUSH
57559: LD_VAR 0 62
57563: PUSH
57564: LD_VAR 0 63
57568: PUSH
57569: LD_VAR 0 64
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: PUSH
57582: LD_VAR 0 4
57586: PUSH
57587: LD_INT 1
57589: PLUS
57590: ARRAY
57591: ST_TO_ADDR
57592: GO 57595
57594: POP
// temp_list2 = [ ] ;
57595: LD_ADDR_VAR 0 10
57599: PUSH
57600: EMPTY
57601: ST_TO_ADDR
// for i in temp_list do
57602: LD_ADDR_VAR 0 8
57606: PUSH
57607: LD_VAR 0 9
57611: PUSH
57612: FOR_IN
57613: IFFALSE 57665
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57615: LD_ADDR_VAR 0 10
57619: PUSH
57620: LD_VAR 0 10
57624: PUSH
57625: LD_VAR 0 8
57629: PUSH
57630: LD_INT 1
57632: ARRAY
57633: PUSH
57634: LD_VAR 0 2
57638: PLUS
57639: PUSH
57640: LD_VAR 0 8
57644: PUSH
57645: LD_INT 2
57647: ARRAY
57648: PUSH
57649: LD_VAR 0 3
57653: PLUS
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: EMPTY
57660: LIST
57661: ADD
57662: ST_TO_ADDR
57663: GO 57612
57665: POP
57666: POP
// result = temp_list2 ;
57667: LD_ADDR_VAR 0 7
57671: PUSH
57672: LD_VAR 0 10
57676: ST_TO_ADDR
// end ;
57677: LD_VAR 0 7
57681: RET
// export function EnemyInRange ( unit , dist ) ; begin
57682: LD_INT 0
57684: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57685: LD_ADDR_VAR 0 3
57689: PUSH
57690: LD_VAR 0 1
57694: PPUSH
57695: CALL_OW 255
57699: PPUSH
57700: LD_VAR 0 1
57704: PPUSH
57705: CALL_OW 250
57709: PPUSH
57710: LD_VAR 0 1
57714: PPUSH
57715: CALL_OW 251
57719: PPUSH
57720: LD_VAR 0 2
57724: PPUSH
57725: CALL 31055 0 4
57729: PUSH
57730: LD_INT 4
57732: ARRAY
57733: ST_TO_ADDR
// end ;
57734: LD_VAR 0 3
57738: RET
// export function PlayerSeeMe ( unit ) ; begin
57739: LD_INT 0
57741: PPUSH
// result := See ( your_side , unit ) ;
57742: LD_ADDR_VAR 0 2
57746: PUSH
57747: LD_OWVAR 2
57751: PPUSH
57752: LD_VAR 0 1
57756: PPUSH
57757: CALL_OW 292
57761: ST_TO_ADDR
// end ;
57762: LD_VAR 0 2
57766: RET
// export function ReverseDir ( unit ) ; begin
57767: LD_INT 0
57769: PPUSH
// if not unit then
57770: LD_VAR 0 1
57774: NOT
57775: IFFALSE 57779
// exit ;
57777: GO 57802
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57779: LD_ADDR_VAR 0 2
57783: PUSH
57784: LD_VAR 0 1
57788: PPUSH
57789: CALL_OW 254
57793: PUSH
57794: LD_INT 3
57796: PLUS
57797: PUSH
57798: LD_INT 6
57800: MOD
57801: ST_TO_ADDR
// end ;
57802: LD_VAR 0 2
57806: RET
// export function ReverseArray ( array ) ; var i ; begin
57807: LD_INT 0
57809: PPUSH
57810: PPUSH
// if not array then
57811: LD_VAR 0 1
57815: NOT
57816: IFFALSE 57820
// exit ;
57818: GO 57875
// result := [ ] ;
57820: LD_ADDR_VAR 0 2
57824: PUSH
57825: EMPTY
57826: ST_TO_ADDR
// for i := array downto 1 do
57827: LD_ADDR_VAR 0 3
57831: PUSH
57832: DOUBLE
57833: LD_VAR 0 1
57837: INC
57838: ST_TO_ADDR
57839: LD_INT 1
57841: PUSH
57842: FOR_DOWNTO
57843: IFFALSE 57873
// result := Join ( result , array [ i ] ) ;
57845: LD_ADDR_VAR 0 2
57849: PUSH
57850: LD_VAR 0 2
57854: PPUSH
57855: LD_VAR 0 1
57859: PUSH
57860: LD_VAR 0 3
57864: ARRAY
57865: PPUSH
57866: CALL 62520 0 2
57870: ST_TO_ADDR
57871: GO 57842
57873: POP
57874: POP
// end ;
57875: LD_VAR 0 2
57879: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57880: LD_INT 0
57882: PPUSH
57883: PPUSH
57884: PPUSH
57885: PPUSH
57886: PPUSH
57887: PPUSH
// if not unit or not hexes then
57888: LD_VAR 0 1
57892: NOT
57893: PUSH
57894: LD_VAR 0 2
57898: NOT
57899: OR
57900: IFFALSE 57904
// exit ;
57902: GO 58027
// dist := 9999 ;
57904: LD_ADDR_VAR 0 5
57908: PUSH
57909: LD_INT 9999
57911: ST_TO_ADDR
// for i = 1 to hexes do
57912: LD_ADDR_VAR 0 4
57916: PUSH
57917: DOUBLE
57918: LD_INT 1
57920: DEC
57921: ST_TO_ADDR
57922: LD_VAR 0 2
57926: PUSH
57927: FOR_TO
57928: IFFALSE 58015
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57930: LD_ADDR_VAR 0 6
57934: PUSH
57935: LD_VAR 0 1
57939: PPUSH
57940: LD_VAR 0 2
57944: PUSH
57945: LD_VAR 0 4
57949: ARRAY
57950: PUSH
57951: LD_INT 1
57953: ARRAY
57954: PPUSH
57955: LD_VAR 0 2
57959: PUSH
57960: LD_VAR 0 4
57964: ARRAY
57965: PUSH
57966: LD_INT 2
57968: ARRAY
57969: PPUSH
57970: CALL_OW 297
57974: ST_TO_ADDR
// if tdist < dist then
57975: LD_VAR 0 6
57979: PUSH
57980: LD_VAR 0 5
57984: LESS
57985: IFFALSE 58013
// begin hex := hexes [ i ] ;
57987: LD_ADDR_VAR 0 8
57991: PUSH
57992: LD_VAR 0 2
57996: PUSH
57997: LD_VAR 0 4
58001: ARRAY
58002: ST_TO_ADDR
// dist := tdist ;
58003: LD_ADDR_VAR 0 5
58007: PUSH
58008: LD_VAR 0 6
58012: ST_TO_ADDR
// end ; end ;
58013: GO 57927
58015: POP
58016: POP
// result := hex ;
58017: LD_ADDR_VAR 0 3
58021: PUSH
58022: LD_VAR 0 8
58026: ST_TO_ADDR
// end ;
58027: LD_VAR 0 3
58031: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58032: LD_INT 0
58034: PPUSH
58035: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58036: LD_VAR 0 1
58040: NOT
58041: PUSH
58042: LD_VAR 0 1
58046: PUSH
58047: LD_INT 21
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 23
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PPUSH
58071: CALL_OW 69
58075: IN
58076: NOT
58077: OR
58078: IFFALSE 58082
// exit ;
58080: GO 58129
// for i = 1 to 3 do
58082: LD_ADDR_VAR 0 3
58086: PUSH
58087: DOUBLE
58088: LD_INT 1
58090: DEC
58091: ST_TO_ADDR
58092: LD_INT 3
58094: PUSH
58095: FOR_TO
58096: IFFALSE 58127
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58098: LD_VAR 0 1
58102: PPUSH
58103: CALL_OW 250
58107: PPUSH
58108: LD_VAR 0 1
58112: PPUSH
58113: CALL_OW 251
58117: PPUSH
58118: LD_INT 1
58120: PPUSH
58121: CALL_OW 453
58125: GO 58095
58127: POP
58128: POP
// end ;
58129: LD_VAR 0 2
58133: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58134: LD_INT 0
58136: PPUSH
58137: PPUSH
58138: PPUSH
58139: PPUSH
58140: PPUSH
58141: PPUSH
// if not unit or not enemy_unit then
58142: LD_VAR 0 1
58146: NOT
58147: PUSH
58148: LD_VAR 0 2
58152: NOT
58153: OR
58154: IFFALSE 58158
// exit ;
58156: GO 58625
// if GetLives ( i ) < 250 then
58158: LD_VAR 0 4
58162: PPUSH
58163: CALL_OW 256
58167: PUSH
58168: LD_INT 250
58170: LESS
58171: IFFALSE 58184
// begin ComAutodestruct ( i ) ;
58173: LD_VAR 0 4
58177: PPUSH
58178: CALL 58032 0 1
// exit ;
58182: GO 58625
// end ; x := GetX ( enemy_unit ) ;
58184: LD_ADDR_VAR 0 7
58188: PUSH
58189: LD_VAR 0 2
58193: PPUSH
58194: CALL_OW 250
58198: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58199: LD_ADDR_VAR 0 8
58203: PUSH
58204: LD_VAR 0 2
58208: PPUSH
58209: CALL_OW 251
58213: ST_TO_ADDR
// if not x or not y then
58214: LD_VAR 0 7
58218: NOT
58219: PUSH
58220: LD_VAR 0 8
58224: NOT
58225: OR
58226: IFFALSE 58230
// exit ;
58228: GO 58625
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58230: LD_ADDR_VAR 0 6
58234: PUSH
58235: LD_VAR 0 7
58239: PPUSH
58240: LD_INT 0
58242: PPUSH
58243: LD_INT 4
58245: PPUSH
58246: CALL_OW 272
58250: PUSH
58251: LD_VAR 0 8
58255: PPUSH
58256: LD_INT 0
58258: PPUSH
58259: LD_INT 4
58261: PPUSH
58262: CALL_OW 273
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_VAR 0 7
58275: PPUSH
58276: LD_INT 1
58278: PPUSH
58279: LD_INT 4
58281: PPUSH
58282: CALL_OW 272
58286: PUSH
58287: LD_VAR 0 8
58291: PPUSH
58292: LD_INT 1
58294: PPUSH
58295: LD_INT 4
58297: PPUSH
58298: CALL_OW 273
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_VAR 0 7
58311: PPUSH
58312: LD_INT 2
58314: PPUSH
58315: LD_INT 4
58317: PPUSH
58318: CALL_OW 272
58322: PUSH
58323: LD_VAR 0 8
58327: PPUSH
58328: LD_INT 2
58330: PPUSH
58331: LD_INT 4
58333: PPUSH
58334: CALL_OW 273
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_VAR 0 7
58347: PPUSH
58348: LD_INT 3
58350: PPUSH
58351: LD_INT 4
58353: PPUSH
58354: CALL_OW 272
58358: PUSH
58359: LD_VAR 0 8
58363: PPUSH
58364: LD_INT 3
58366: PPUSH
58367: LD_INT 4
58369: PPUSH
58370: CALL_OW 273
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_VAR 0 7
58383: PPUSH
58384: LD_INT 4
58386: PPUSH
58387: LD_INT 4
58389: PPUSH
58390: CALL_OW 272
58394: PUSH
58395: LD_VAR 0 8
58399: PPUSH
58400: LD_INT 4
58402: PPUSH
58403: LD_INT 4
58405: PPUSH
58406: CALL_OW 273
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_VAR 0 7
58419: PPUSH
58420: LD_INT 5
58422: PPUSH
58423: LD_INT 4
58425: PPUSH
58426: CALL_OW 272
58430: PUSH
58431: LD_VAR 0 8
58435: PPUSH
58436: LD_INT 5
58438: PPUSH
58439: LD_INT 4
58441: PPUSH
58442: CALL_OW 273
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: ST_TO_ADDR
// for i = tmp downto 1 do
58459: LD_ADDR_VAR 0 4
58463: PUSH
58464: DOUBLE
58465: LD_VAR 0 6
58469: INC
58470: ST_TO_ADDR
58471: LD_INT 1
58473: PUSH
58474: FOR_DOWNTO
58475: IFFALSE 58576
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58477: LD_VAR 0 6
58481: PUSH
58482: LD_VAR 0 4
58486: ARRAY
58487: PUSH
58488: LD_INT 1
58490: ARRAY
58491: PPUSH
58492: LD_VAR 0 6
58496: PUSH
58497: LD_VAR 0 4
58501: ARRAY
58502: PUSH
58503: LD_INT 2
58505: ARRAY
58506: PPUSH
58507: CALL_OW 488
58511: NOT
58512: PUSH
58513: LD_VAR 0 6
58517: PUSH
58518: LD_VAR 0 4
58522: ARRAY
58523: PUSH
58524: LD_INT 1
58526: ARRAY
58527: PPUSH
58528: LD_VAR 0 6
58532: PUSH
58533: LD_VAR 0 4
58537: ARRAY
58538: PUSH
58539: LD_INT 2
58541: ARRAY
58542: PPUSH
58543: CALL_OW 428
58547: PUSH
58548: LD_INT 0
58550: NONEQUAL
58551: OR
58552: IFFALSE 58574
// tmp := Delete ( tmp , i ) ;
58554: LD_ADDR_VAR 0 6
58558: PUSH
58559: LD_VAR 0 6
58563: PPUSH
58564: LD_VAR 0 4
58568: PPUSH
58569: CALL_OW 3
58573: ST_TO_ADDR
58574: GO 58474
58576: POP
58577: POP
// j := GetClosestHex ( unit , tmp ) ;
58578: LD_ADDR_VAR 0 5
58582: PUSH
58583: LD_VAR 0 1
58587: PPUSH
58588: LD_VAR 0 6
58592: PPUSH
58593: CALL 57880 0 2
58597: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58598: LD_VAR 0 1
58602: PPUSH
58603: LD_VAR 0 5
58607: PUSH
58608: LD_INT 1
58610: ARRAY
58611: PPUSH
58612: LD_VAR 0 5
58616: PUSH
58617: LD_INT 2
58619: ARRAY
58620: PPUSH
58621: CALL_OW 111
// end ;
58625: LD_VAR 0 3
58629: RET
// export function PrepareApemanSoldier ( ) ; begin
58630: LD_INT 0
58632: PPUSH
// uc_nation := 0 ;
58633: LD_ADDR_OWVAR 21
58637: PUSH
58638: LD_INT 0
58640: ST_TO_ADDR
// hc_sex := sex_male ;
58641: LD_ADDR_OWVAR 27
58645: PUSH
58646: LD_INT 1
58648: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58649: LD_ADDR_OWVAR 28
58653: PUSH
58654: LD_INT 15
58656: ST_TO_ADDR
// hc_gallery :=  ;
58657: LD_ADDR_OWVAR 33
58661: PUSH
58662: LD_STRING 
58664: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58665: LD_ADDR_OWVAR 31
58669: PUSH
58670: LD_INT 0
58672: PPUSH
58673: LD_INT 3
58675: PPUSH
58676: CALL_OW 12
58680: PUSH
58681: LD_INT 0
58683: PPUSH
58684: LD_INT 3
58686: PPUSH
58687: CALL_OW 12
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// end ;
58704: LD_VAR 0 1
58708: RET
// export function PrepareApemanEngineer ( ) ; begin
58709: LD_INT 0
58711: PPUSH
// uc_nation := 0 ;
58712: LD_ADDR_OWVAR 21
58716: PUSH
58717: LD_INT 0
58719: ST_TO_ADDR
// hc_sex := sex_male ;
58720: LD_ADDR_OWVAR 27
58724: PUSH
58725: LD_INT 1
58727: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58728: LD_ADDR_OWVAR 28
58732: PUSH
58733: LD_INT 16
58735: ST_TO_ADDR
// hc_gallery :=  ;
58736: LD_ADDR_OWVAR 33
58740: PUSH
58741: LD_STRING 
58743: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58744: LD_ADDR_OWVAR 31
58748: PUSH
58749: LD_INT 0
58751: PPUSH
58752: LD_INT 3
58754: PPUSH
58755: CALL_OW 12
58759: PUSH
58760: LD_INT 0
58762: PPUSH
58763: LD_INT 3
58765: PPUSH
58766: CALL_OW 12
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: ST_TO_ADDR
// end ;
58783: LD_VAR 0 1
58787: RET
// export function PrepareApeman ( agressivity ) ; begin
58788: LD_INT 0
58790: PPUSH
// uc_side := 0 ;
58791: LD_ADDR_OWVAR 20
58795: PUSH
58796: LD_INT 0
58798: ST_TO_ADDR
// uc_nation := 0 ;
58799: LD_ADDR_OWVAR 21
58803: PUSH
58804: LD_INT 0
58806: ST_TO_ADDR
// hc_sex := sex_male ;
58807: LD_ADDR_OWVAR 27
58811: PUSH
58812: LD_INT 1
58814: ST_TO_ADDR
// hc_class := class_apeman ;
58815: LD_ADDR_OWVAR 28
58819: PUSH
58820: LD_INT 12
58822: ST_TO_ADDR
// hc_gallery :=  ;
58823: LD_ADDR_OWVAR 33
58827: PUSH
58828: LD_STRING 
58830: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58831: LD_ADDR_OWVAR 35
58835: PUSH
58836: LD_VAR 0 1
58840: NEG
58841: PPUSH
58842: LD_VAR 0 1
58846: PPUSH
58847: CALL_OW 12
58851: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58852: LD_ADDR_OWVAR 31
58856: PUSH
58857: LD_INT 0
58859: PPUSH
58860: LD_INT 3
58862: PPUSH
58863: CALL_OW 12
58867: PUSH
58868: LD_INT 0
58870: PPUSH
58871: LD_INT 3
58873: PPUSH
58874: CALL_OW 12
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// end ;
58891: LD_VAR 0 2
58895: RET
// export function PrepareTiger ( agressivity ) ; begin
58896: LD_INT 0
58898: PPUSH
// uc_side := 0 ;
58899: LD_ADDR_OWVAR 20
58903: PUSH
58904: LD_INT 0
58906: ST_TO_ADDR
// uc_nation := 0 ;
58907: LD_ADDR_OWVAR 21
58911: PUSH
58912: LD_INT 0
58914: ST_TO_ADDR
// hc_class := class_tiger ;
58915: LD_ADDR_OWVAR 28
58919: PUSH
58920: LD_INT 14
58922: ST_TO_ADDR
// hc_gallery :=  ;
58923: LD_ADDR_OWVAR 33
58927: PUSH
58928: LD_STRING 
58930: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58931: LD_ADDR_OWVAR 35
58935: PUSH
58936: LD_VAR 0 1
58940: NEG
58941: PPUSH
58942: LD_VAR 0 1
58946: PPUSH
58947: CALL_OW 12
58951: ST_TO_ADDR
// end ;
58952: LD_VAR 0 2
58956: RET
// export function PrepareEnchidna ( ) ; begin
58957: LD_INT 0
58959: PPUSH
// uc_side := 0 ;
58960: LD_ADDR_OWVAR 20
58964: PUSH
58965: LD_INT 0
58967: ST_TO_ADDR
// uc_nation := 0 ;
58968: LD_ADDR_OWVAR 21
58972: PUSH
58973: LD_INT 0
58975: ST_TO_ADDR
// hc_class := class_baggie ;
58976: LD_ADDR_OWVAR 28
58980: PUSH
58981: LD_INT 13
58983: ST_TO_ADDR
// hc_gallery :=  ;
58984: LD_ADDR_OWVAR 33
58988: PUSH
58989: LD_STRING 
58991: ST_TO_ADDR
// end ;
58992: LD_VAR 0 1
58996: RET
// export function PrepareFrog ( ) ; begin
58997: LD_INT 0
58999: PPUSH
// uc_side := 0 ;
59000: LD_ADDR_OWVAR 20
59004: PUSH
59005: LD_INT 0
59007: ST_TO_ADDR
// uc_nation := 0 ;
59008: LD_ADDR_OWVAR 21
59012: PUSH
59013: LD_INT 0
59015: ST_TO_ADDR
// hc_class := class_frog ;
59016: LD_ADDR_OWVAR 28
59020: PUSH
59021: LD_INT 19
59023: ST_TO_ADDR
// hc_gallery :=  ;
59024: LD_ADDR_OWVAR 33
59028: PUSH
59029: LD_STRING 
59031: ST_TO_ADDR
// end ;
59032: LD_VAR 0 1
59036: RET
// export function PrepareFish ( ) ; begin
59037: LD_INT 0
59039: PPUSH
// uc_side := 0 ;
59040: LD_ADDR_OWVAR 20
59044: PUSH
59045: LD_INT 0
59047: ST_TO_ADDR
// uc_nation := 0 ;
59048: LD_ADDR_OWVAR 21
59052: PUSH
59053: LD_INT 0
59055: ST_TO_ADDR
// hc_class := class_fish ;
59056: LD_ADDR_OWVAR 28
59060: PUSH
59061: LD_INT 20
59063: ST_TO_ADDR
// hc_gallery :=  ;
59064: LD_ADDR_OWVAR 33
59068: PUSH
59069: LD_STRING 
59071: ST_TO_ADDR
// end ;
59072: LD_VAR 0 1
59076: RET
// export function PrepareBird ( ) ; begin
59077: LD_INT 0
59079: PPUSH
// uc_side := 0 ;
59080: LD_ADDR_OWVAR 20
59084: PUSH
59085: LD_INT 0
59087: ST_TO_ADDR
// uc_nation := 0 ;
59088: LD_ADDR_OWVAR 21
59092: PUSH
59093: LD_INT 0
59095: ST_TO_ADDR
// hc_class := class_phororhacos ;
59096: LD_ADDR_OWVAR 28
59100: PUSH
59101: LD_INT 18
59103: ST_TO_ADDR
// hc_gallery :=  ;
59104: LD_ADDR_OWVAR 33
59108: PUSH
59109: LD_STRING 
59111: ST_TO_ADDR
// end ;
59112: LD_VAR 0 1
59116: RET
// export function PrepareHorse ( ) ; begin
59117: LD_INT 0
59119: PPUSH
// uc_side := 0 ;
59120: LD_ADDR_OWVAR 20
59124: PUSH
59125: LD_INT 0
59127: ST_TO_ADDR
// uc_nation := 0 ;
59128: LD_ADDR_OWVAR 21
59132: PUSH
59133: LD_INT 0
59135: ST_TO_ADDR
// hc_class := class_horse ;
59136: LD_ADDR_OWVAR 28
59140: PUSH
59141: LD_INT 21
59143: ST_TO_ADDR
// hc_gallery :=  ;
59144: LD_ADDR_OWVAR 33
59148: PUSH
59149: LD_STRING 
59151: ST_TO_ADDR
// end ;
59152: LD_VAR 0 1
59156: RET
// export function PrepareMastodont ( ) ; begin
59157: LD_INT 0
59159: PPUSH
// uc_side := 0 ;
59160: LD_ADDR_OWVAR 20
59164: PUSH
59165: LD_INT 0
59167: ST_TO_ADDR
// uc_nation := 0 ;
59168: LD_ADDR_OWVAR 21
59172: PUSH
59173: LD_INT 0
59175: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59176: LD_ADDR_OWVAR 37
59180: PUSH
59181: LD_INT 31
59183: ST_TO_ADDR
// vc_control := control_rider ;
59184: LD_ADDR_OWVAR 38
59188: PUSH
59189: LD_INT 4
59191: ST_TO_ADDR
// end ;
59192: LD_VAR 0 1
59196: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59197: LD_INT 0
59199: PPUSH
59200: PPUSH
59201: PPUSH
// uc_side = 0 ;
59202: LD_ADDR_OWVAR 20
59206: PUSH
59207: LD_INT 0
59209: ST_TO_ADDR
// uc_nation = 0 ;
59210: LD_ADDR_OWVAR 21
59214: PUSH
59215: LD_INT 0
59217: ST_TO_ADDR
// InitHc_All ( ) ;
59218: CALL_OW 584
// InitVc ;
59222: CALL_OW 20
// if mastodonts then
59226: LD_VAR 0 6
59230: IFFALSE 59297
// for i = 1 to mastodonts do
59232: LD_ADDR_VAR 0 11
59236: PUSH
59237: DOUBLE
59238: LD_INT 1
59240: DEC
59241: ST_TO_ADDR
59242: LD_VAR 0 6
59246: PUSH
59247: FOR_TO
59248: IFFALSE 59295
// begin vc_chassis := 31 ;
59250: LD_ADDR_OWVAR 37
59254: PUSH
59255: LD_INT 31
59257: ST_TO_ADDR
// vc_control := control_rider ;
59258: LD_ADDR_OWVAR 38
59262: PUSH
59263: LD_INT 4
59265: ST_TO_ADDR
// animal := CreateVehicle ;
59266: LD_ADDR_VAR 0 12
59270: PUSH
59271: CALL_OW 45
59275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59276: LD_VAR 0 12
59280: PPUSH
59281: LD_VAR 0 8
59285: PPUSH
59286: LD_INT 0
59288: PPUSH
59289: CALL 61425 0 3
// end ;
59293: GO 59247
59295: POP
59296: POP
// if horses then
59297: LD_VAR 0 5
59301: IFFALSE 59368
// for i = 1 to horses do
59303: LD_ADDR_VAR 0 11
59307: PUSH
59308: DOUBLE
59309: LD_INT 1
59311: DEC
59312: ST_TO_ADDR
59313: LD_VAR 0 5
59317: PUSH
59318: FOR_TO
59319: IFFALSE 59366
// begin hc_class := 21 ;
59321: LD_ADDR_OWVAR 28
59325: PUSH
59326: LD_INT 21
59328: ST_TO_ADDR
// hc_gallery :=  ;
59329: LD_ADDR_OWVAR 33
59333: PUSH
59334: LD_STRING 
59336: ST_TO_ADDR
// animal := CreateHuman ;
59337: LD_ADDR_VAR 0 12
59341: PUSH
59342: CALL_OW 44
59346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59347: LD_VAR 0 12
59351: PPUSH
59352: LD_VAR 0 8
59356: PPUSH
59357: LD_INT 0
59359: PPUSH
59360: CALL 61425 0 3
// end ;
59364: GO 59318
59366: POP
59367: POP
// if birds then
59368: LD_VAR 0 1
59372: IFFALSE 59439
// for i = 1 to birds do
59374: LD_ADDR_VAR 0 11
59378: PUSH
59379: DOUBLE
59380: LD_INT 1
59382: DEC
59383: ST_TO_ADDR
59384: LD_VAR 0 1
59388: PUSH
59389: FOR_TO
59390: IFFALSE 59437
// begin hc_class := 18 ;
59392: LD_ADDR_OWVAR 28
59396: PUSH
59397: LD_INT 18
59399: ST_TO_ADDR
// hc_gallery =  ;
59400: LD_ADDR_OWVAR 33
59404: PUSH
59405: LD_STRING 
59407: ST_TO_ADDR
// animal := CreateHuman ;
59408: LD_ADDR_VAR 0 12
59412: PUSH
59413: CALL_OW 44
59417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59418: LD_VAR 0 12
59422: PPUSH
59423: LD_VAR 0 8
59427: PPUSH
59428: LD_INT 0
59430: PPUSH
59431: CALL 61425 0 3
// end ;
59435: GO 59389
59437: POP
59438: POP
// if tigers then
59439: LD_VAR 0 2
59443: IFFALSE 59527
// for i = 1 to tigers do
59445: LD_ADDR_VAR 0 11
59449: PUSH
59450: DOUBLE
59451: LD_INT 1
59453: DEC
59454: ST_TO_ADDR
59455: LD_VAR 0 2
59459: PUSH
59460: FOR_TO
59461: IFFALSE 59525
// begin hc_class = class_tiger ;
59463: LD_ADDR_OWVAR 28
59467: PUSH
59468: LD_INT 14
59470: ST_TO_ADDR
// hc_gallery =  ;
59471: LD_ADDR_OWVAR 33
59475: PUSH
59476: LD_STRING 
59478: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59479: LD_ADDR_OWVAR 35
59483: PUSH
59484: LD_INT 7
59486: NEG
59487: PPUSH
59488: LD_INT 7
59490: PPUSH
59491: CALL_OW 12
59495: ST_TO_ADDR
// animal := CreateHuman ;
59496: LD_ADDR_VAR 0 12
59500: PUSH
59501: CALL_OW 44
59505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59506: LD_VAR 0 12
59510: PPUSH
59511: LD_VAR 0 8
59515: PPUSH
59516: LD_INT 0
59518: PPUSH
59519: CALL 61425 0 3
// end ;
59523: GO 59460
59525: POP
59526: POP
// if apemans then
59527: LD_VAR 0 3
59531: IFFALSE 59654
// for i = 1 to apemans do
59533: LD_ADDR_VAR 0 11
59537: PUSH
59538: DOUBLE
59539: LD_INT 1
59541: DEC
59542: ST_TO_ADDR
59543: LD_VAR 0 3
59547: PUSH
59548: FOR_TO
59549: IFFALSE 59652
// begin hc_class = class_apeman ;
59551: LD_ADDR_OWVAR 28
59555: PUSH
59556: LD_INT 12
59558: ST_TO_ADDR
// hc_gallery =  ;
59559: LD_ADDR_OWVAR 33
59563: PUSH
59564: LD_STRING 
59566: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59567: LD_ADDR_OWVAR 35
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PPUSH
59576: LD_INT 2
59578: PPUSH
59579: CALL_OW 12
59583: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59584: LD_ADDR_OWVAR 31
59588: PUSH
59589: LD_INT 1
59591: PPUSH
59592: LD_INT 3
59594: PPUSH
59595: CALL_OW 12
59599: PUSH
59600: LD_INT 1
59602: PPUSH
59603: LD_INT 3
59605: PPUSH
59606: CALL_OW 12
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: ST_TO_ADDR
// animal := CreateHuman ;
59623: LD_ADDR_VAR 0 12
59627: PUSH
59628: CALL_OW 44
59632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59633: LD_VAR 0 12
59637: PPUSH
59638: LD_VAR 0 8
59642: PPUSH
59643: LD_INT 0
59645: PPUSH
59646: CALL 61425 0 3
// end ;
59650: GO 59548
59652: POP
59653: POP
// if enchidnas then
59654: LD_VAR 0 4
59658: IFFALSE 59725
// for i = 1 to enchidnas do
59660: LD_ADDR_VAR 0 11
59664: PUSH
59665: DOUBLE
59666: LD_INT 1
59668: DEC
59669: ST_TO_ADDR
59670: LD_VAR 0 4
59674: PUSH
59675: FOR_TO
59676: IFFALSE 59723
// begin hc_class = 13 ;
59678: LD_ADDR_OWVAR 28
59682: PUSH
59683: LD_INT 13
59685: ST_TO_ADDR
// hc_gallery =  ;
59686: LD_ADDR_OWVAR 33
59690: PUSH
59691: LD_STRING 
59693: ST_TO_ADDR
// animal := CreateHuman ;
59694: LD_ADDR_VAR 0 12
59698: PUSH
59699: CALL_OW 44
59703: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59704: LD_VAR 0 12
59708: PPUSH
59709: LD_VAR 0 8
59713: PPUSH
59714: LD_INT 0
59716: PPUSH
59717: CALL 61425 0 3
// end ;
59721: GO 59675
59723: POP
59724: POP
// if fishes then
59725: LD_VAR 0 7
59729: IFFALSE 59796
// for i = 1 to fishes do
59731: LD_ADDR_VAR 0 11
59735: PUSH
59736: DOUBLE
59737: LD_INT 1
59739: DEC
59740: ST_TO_ADDR
59741: LD_VAR 0 7
59745: PUSH
59746: FOR_TO
59747: IFFALSE 59794
// begin hc_class = 20 ;
59749: LD_ADDR_OWVAR 28
59753: PUSH
59754: LD_INT 20
59756: ST_TO_ADDR
// hc_gallery =  ;
59757: LD_ADDR_OWVAR 33
59761: PUSH
59762: LD_STRING 
59764: ST_TO_ADDR
// animal := CreateHuman ;
59765: LD_ADDR_VAR 0 12
59769: PUSH
59770: CALL_OW 44
59774: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59775: LD_VAR 0 12
59779: PPUSH
59780: LD_VAR 0 9
59784: PPUSH
59785: LD_INT 0
59787: PPUSH
59788: CALL 61425 0 3
// end ;
59792: GO 59746
59794: POP
59795: POP
// end ;
59796: LD_VAR 0 10
59800: RET
// export function WantHeal ( sci , unit ) ; begin
59801: LD_INT 0
59803: PPUSH
// if GetTaskList ( sci ) > 0 then
59804: LD_VAR 0 1
59808: PPUSH
59809: CALL_OW 437
59813: PUSH
59814: LD_INT 0
59816: GREATER
59817: IFFALSE 59887
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59819: LD_VAR 0 1
59823: PPUSH
59824: CALL_OW 437
59828: PUSH
59829: LD_INT 1
59831: ARRAY
59832: PUSH
59833: LD_INT 1
59835: ARRAY
59836: PUSH
59837: LD_STRING l
59839: EQUAL
59840: PUSH
59841: LD_VAR 0 1
59845: PPUSH
59846: CALL_OW 437
59850: PUSH
59851: LD_INT 1
59853: ARRAY
59854: PUSH
59855: LD_INT 4
59857: ARRAY
59858: PUSH
59859: LD_VAR 0 2
59863: EQUAL
59864: AND
59865: IFFALSE 59877
// result := true else
59867: LD_ADDR_VAR 0 3
59871: PUSH
59872: LD_INT 1
59874: ST_TO_ADDR
59875: GO 59885
// result := false ;
59877: LD_ADDR_VAR 0 3
59881: PUSH
59882: LD_INT 0
59884: ST_TO_ADDR
// end else
59885: GO 59895
// result := false ;
59887: LD_ADDR_VAR 0 3
59891: PUSH
59892: LD_INT 0
59894: ST_TO_ADDR
// end ;
59895: LD_VAR 0 3
59899: RET
// export function HealTarget ( sci ) ; begin
59900: LD_INT 0
59902: PPUSH
// if not sci then
59903: LD_VAR 0 1
59907: NOT
59908: IFFALSE 59912
// exit ;
59910: GO 59977
// result := 0 ;
59912: LD_ADDR_VAR 0 2
59916: PUSH
59917: LD_INT 0
59919: ST_TO_ADDR
// if GetTaskList ( sci ) then
59920: LD_VAR 0 1
59924: PPUSH
59925: CALL_OW 437
59929: IFFALSE 59977
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59931: LD_VAR 0 1
59935: PPUSH
59936: CALL_OW 437
59940: PUSH
59941: LD_INT 1
59943: ARRAY
59944: PUSH
59945: LD_INT 1
59947: ARRAY
59948: PUSH
59949: LD_STRING l
59951: EQUAL
59952: IFFALSE 59977
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59954: LD_ADDR_VAR 0 2
59958: PUSH
59959: LD_VAR 0 1
59963: PPUSH
59964: CALL_OW 437
59968: PUSH
59969: LD_INT 1
59971: ARRAY
59972: PUSH
59973: LD_INT 4
59975: ARRAY
59976: ST_TO_ADDR
// end ;
59977: LD_VAR 0 2
59981: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59982: LD_INT 0
59984: PPUSH
59985: PPUSH
59986: PPUSH
59987: PPUSH
// if not base_units then
59988: LD_VAR 0 1
59992: NOT
59993: IFFALSE 59997
// exit ;
59995: GO 60084
// result := false ;
59997: LD_ADDR_VAR 0 2
60001: PUSH
60002: LD_INT 0
60004: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60005: LD_ADDR_VAR 0 5
60009: PUSH
60010: LD_VAR 0 1
60014: PPUSH
60015: LD_INT 21
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PPUSH
60025: CALL_OW 72
60029: ST_TO_ADDR
// if not tmp then
60030: LD_VAR 0 5
60034: NOT
60035: IFFALSE 60039
// exit ;
60037: GO 60084
// for i in tmp do
60039: LD_ADDR_VAR 0 3
60043: PUSH
60044: LD_VAR 0 5
60048: PUSH
60049: FOR_IN
60050: IFFALSE 60082
// begin result := EnemyInRange ( i , 22 ) ;
60052: LD_ADDR_VAR 0 2
60056: PUSH
60057: LD_VAR 0 3
60061: PPUSH
60062: LD_INT 22
60064: PPUSH
60065: CALL 57682 0 2
60069: ST_TO_ADDR
// if result then
60070: LD_VAR 0 2
60074: IFFALSE 60080
// exit ;
60076: POP
60077: POP
60078: GO 60084
// end ;
60080: GO 60049
60082: POP
60083: POP
// end ;
60084: LD_VAR 0 2
60088: RET
// export function FilterByTag ( units , tag ) ; begin
60089: LD_INT 0
60091: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60092: LD_ADDR_VAR 0 3
60096: PUSH
60097: LD_VAR 0 1
60101: PPUSH
60102: LD_INT 120
60104: PUSH
60105: LD_VAR 0 2
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PPUSH
60114: CALL_OW 72
60118: ST_TO_ADDR
// end ;
60119: LD_VAR 0 3
60123: RET
// export function IsDriver ( un ) ; begin
60124: LD_INT 0
60126: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60127: LD_ADDR_VAR 0 2
60131: PUSH
60132: LD_VAR 0 1
60136: PUSH
60137: LD_INT 55
60139: PUSH
60140: EMPTY
60141: LIST
60142: PPUSH
60143: CALL_OW 69
60147: IN
60148: ST_TO_ADDR
// end ;
60149: LD_VAR 0 2
60153: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60154: LD_INT 0
60156: PPUSH
60157: PPUSH
// list := [ ] ;
60158: LD_ADDR_VAR 0 5
60162: PUSH
60163: EMPTY
60164: ST_TO_ADDR
// case d of 0 :
60165: LD_VAR 0 3
60169: PUSH
60170: LD_INT 0
60172: DOUBLE
60173: EQUAL
60174: IFTRUE 60178
60176: GO 60311
60178: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60179: LD_ADDR_VAR 0 5
60183: PUSH
60184: LD_VAR 0 1
60188: PUSH
60189: LD_INT 4
60191: MINUS
60192: PUSH
60193: LD_VAR 0 2
60197: PUSH
60198: LD_INT 4
60200: MINUS
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: LIST
60209: PUSH
60210: LD_VAR 0 1
60214: PUSH
60215: LD_INT 3
60217: MINUS
60218: PUSH
60219: LD_VAR 0 2
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: PUSH
60232: LD_VAR 0 1
60236: PUSH
60237: LD_INT 4
60239: PLUS
60240: PUSH
60241: LD_VAR 0 2
60245: PUSH
60246: LD_INT 4
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: PUSH
60254: LD_VAR 0 1
60258: PUSH
60259: LD_INT 3
60261: PLUS
60262: PUSH
60263: LD_VAR 0 2
60267: PUSH
60268: LD_INT 3
60270: PLUS
60271: PUSH
60272: LD_INT 5
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: PUSH
60280: LD_VAR 0 1
60284: PUSH
60285: LD_VAR 0 2
60289: PUSH
60290: LD_INT 4
60292: PLUS
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: LIST
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: ST_TO_ADDR
// end ; 1 :
60309: GO 61009
60311: LD_INT 1
60313: DOUBLE
60314: EQUAL
60315: IFTRUE 60319
60317: GO 60452
60319: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60320: LD_ADDR_VAR 0 5
60324: PUSH
60325: LD_VAR 0 1
60329: PUSH
60330: LD_VAR 0 2
60334: PUSH
60335: LD_INT 4
60337: MINUS
60338: PUSH
60339: LD_INT 3
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: PUSH
60347: LD_VAR 0 1
60351: PUSH
60352: LD_INT 3
60354: MINUS
60355: PUSH
60356: LD_VAR 0 2
60360: PUSH
60361: LD_INT 3
60363: MINUS
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: LIST
60372: PUSH
60373: LD_VAR 0 1
60377: PUSH
60378: LD_INT 4
60380: MINUS
60381: PUSH
60382: LD_VAR 0 2
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: PUSH
60395: LD_VAR 0 1
60399: PUSH
60400: LD_VAR 0 2
60404: PUSH
60405: LD_INT 3
60407: PLUS
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: LIST
60416: PUSH
60417: LD_VAR 0 1
60421: PUSH
60422: LD_INT 4
60424: PLUS
60425: PUSH
60426: LD_VAR 0 2
60430: PUSH
60431: LD_INT 4
60433: PLUS
60434: PUSH
60435: LD_INT 5
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// end ; 2 :
60450: GO 61009
60452: LD_INT 2
60454: DOUBLE
60455: EQUAL
60456: IFTRUE 60460
60458: GO 60589
60460: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60461: LD_ADDR_VAR 0 5
60465: PUSH
60466: LD_VAR 0 1
60470: PUSH
60471: LD_VAR 0 2
60475: PUSH
60476: LD_INT 3
60478: MINUS
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: PUSH
60488: LD_VAR 0 1
60492: PUSH
60493: LD_INT 4
60495: PLUS
60496: PUSH
60497: LD_VAR 0 2
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: PUSH
60510: LD_VAR 0 1
60514: PUSH
60515: LD_VAR 0 2
60519: PUSH
60520: LD_INT 4
60522: PLUS
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: PUSH
60532: LD_VAR 0 1
60536: PUSH
60537: LD_INT 3
60539: MINUS
60540: PUSH
60541: LD_VAR 0 2
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: LIST
60553: PUSH
60554: LD_VAR 0 1
60558: PUSH
60559: LD_INT 4
60561: MINUS
60562: PUSH
60563: LD_VAR 0 2
60567: PUSH
60568: LD_INT 4
60570: MINUS
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: LIST
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: ST_TO_ADDR
// end ; 3 :
60587: GO 61009
60589: LD_INT 3
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60597
60595: GO 60730
60597: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60598: LD_ADDR_VAR 0 5
60602: PUSH
60603: LD_VAR 0 1
60607: PUSH
60608: LD_INT 3
60610: PLUS
60611: PUSH
60612: LD_VAR 0 2
60616: PUSH
60617: LD_INT 4
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: PUSH
60625: LD_VAR 0 1
60629: PUSH
60630: LD_INT 4
60632: PLUS
60633: PUSH
60634: LD_VAR 0 2
60638: PUSH
60639: LD_INT 4
60641: PLUS
60642: PUSH
60643: LD_INT 5
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: PUSH
60651: LD_VAR 0 1
60655: PUSH
60656: LD_INT 4
60658: MINUS
60659: PUSH
60660: LD_VAR 0 2
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: PUSH
60673: LD_VAR 0 1
60677: PUSH
60678: LD_VAR 0 2
60682: PUSH
60683: LD_INT 4
60685: MINUS
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: PUSH
60695: LD_VAR 0 1
60699: PUSH
60700: LD_INT 3
60702: MINUS
60703: PUSH
60704: LD_VAR 0 2
60708: PUSH
60709: LD_INT 3
60711: MINUS
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: ST_TO_ADDR
// end ; 4 :
60728: GO 61009
60730: LD_INT 4
60732: DOUBLE
60733: EQUAL
60734: IFTRUE 60738
60736: GO 60871
60738: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60739: LD_ADDR_VAR 0 5
60743: PUSH
60744: LD_VAR 0 1
60748: PUSH
60749: LD_VAR 0 2
60753: PUSH
60754: LD_INT 4
60756: PLUS
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: PUSH
60766: LD_VAR 0 1
60770: PUSH
60771: LD_INT 3
60773: PLUS
60774: PUSH
60775: LD_VAR 0 2
60779: PUSH
60780: LD_INT 3
60782: PLUS
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: PUSH
60792: LD_VAR 0 1
60796: PUSH
60797: LD_INT 4
60799: PLUS
60800: PUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: PUSH
60814: LD_VAR 0 1
60818: PUSH
60819: LD_VAR 0 2
60823: PUSH
60824: LD_INT 3
60826: MINUS
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: PUSH
60836: LD_VAR 0 1
60840: PUSH
60841: LD_INT 4
60843: MINUS
60844: PUSH
60845: LD_VAR 0 2
60849: PUSH
60850: LD_INT 4
60852: MINUS
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: LIST
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: ST_TO_ADDR
// end ; 5 :
60869: GO 61009
60871: LD_INT 5
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60879
60877: GO 61008
60879: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60880: LD_ADDR_VAR 0 5
60884: PUSH
60885: LD_VAR 0 1
60889: PUSH
60890: LD_INT 4
60892: MINUS
60893: PUSH
60894: LD_VAR 0 2
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: PUSH
60907: LD_VAR 0 1
60911: PUSH
60912: LD_VAR 0 2
60916: PUSH
60917: LD_INT 4
60919: MINUS
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: PUSH
60929: LD_VAR 0 1
60933: PUSH
60934: LD_INT 4
60936: PLUS
60937: PUSH
60938: LD_VAR 0 2
60942: PUSH
60943: LD_INT 4
60945: PLUS
60946: PUSH
60947: LD_INT 5
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: LIST
60954: PUSH
60955: LD_VAR 0 1
60959: PUSH
60960: LD_INT 3
60962: PLUS
60963: PUSH
60964: LD_VAR 0 2
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: LIST
60976: PUSH
60977: LD_VAR 0 1
60981: PUSH
60982: LD_VAR 0 2
60986: PUSH
60987: LD_INT 3
60989: PLUS
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: LIST
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// end ; end ;
61006: GO 61009
61008: POP
// result := list ;
61009: LD_ADDR_VAR 0 4
61013: PUSH
61014: LD_VAR 0 5
61018: ST_TO_ADDR
// end ;
61019: LD_VAR 0 4
61023: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61024: LD_INT 0
61026: PPUSH
61027: PPUSH
61028: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61029: LD_VAR 0 1
61033: NOT
61034: PUSH
61035: LD_VAR 0 2
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: LD_INT 4
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: IN
61058: NOT
61059: OR
61060: IFFALSE 61064
// exit ;
61062: GO 61147
// tmp := [ ] ;
61064: LD_ADDR_VAR 0 5
61068: PUSH
61069: EMPTY
61070: ST_TO_ADDR
// for i in units do
61071: LD_ADDR_VAR 0 4
61075: PUSH
61076: LD_VAR 0 1
61080: PUSH
61081: FOR_IN
61082: IFFALSE 61116
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61084: LD_ADDR_VAR 0 5
61088: PUSH
61089: LD_VAR 0 5
61093: PPUSH
61094: LD_VAR 0 4
61098: PPUSH
61099: LD_VAR 0 2
61103: PPUSH
61104: CALL_OW 259
61108: PPUSH
61109: CALL 62520 0 2
61113: ST_TO_ADDR
61114: GO 61081
61116: POP
61117: POP
// if not tmp then
61118: LD_VAR 0 5
61122: NOT
61123: IFFALSE 61127
// exit ;
61125: GO 61147
// result := SortListByListDesc ( units , tmp ) ;
61127: LD_ADDR_VAR 0 3
61131: PUSH
61132: LD_VAR 0 1
61136: PPUSH
61137: LD_VAR 0 5
61141: PPUSH
61142: CALL_OW 77
61146: ST_TO_ADDR
// end ;
61147: LD_VAR 0 3
61151: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61152: LD_INT 0
61154: PPUSH
61155: PPUSH
61156: PPUSH
// result := false ;
61157: LD_ADDR_VAR 0 3
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// if not building then
61165: LD_VAR 0 2
61169: NOT
61170: IFFALSE 61174
// exit ;
61172: GO 61312
// x := GetX ( building ) ;
61174: LD_ADDR_VAR 0 4
61178: PUSH
61179: LD_VAR 0 2
61183: PPUSH
61184: CALL_OW 250
61188: ST_TO_ADDR
// y := GetY ( building ) ;
61189: LD_ADDR_VAR 0 5
61193: PUSH
61194: LD_VAR 0 2
61198: PPUSH
61199: CALL_OW 251
61203: ST_TO_ADDR
// if not x or not y then
61204: LD_VAR 0 4
61208: NOT
61209: PUSH
61210: LD_VAR 0 5
61214: NOT
61215: OR
61216: IFFALSE 61220
// exit ;
61218: GO 61312
// if GetTaskList ( unit ) then
61220: LD_VAR 0 1
61224: PPUSH
61225: CALL_OW 437
61229: IFFALSE 61312
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61231: LD_STRING e
61233: PUSH
61234: LD_VAR 0 1
61238: PPUSH
61239: CALL_OW 437
61243: PUSH
61244: LD_INT 1
61246: ARRAY
61247: PUSH
61248: LD_INT 1
61250: ARRAY
61251: EQUAL
61252: PUSH
61253: LD_VAR 0 4
61257: PUSH
61258: LD_VAR 0 1
61262: PPUSH
61263: CALL_OW 437
61267: PUSH
61268: LD_INT 1
61270: ARRAY
61271: PUSH
61272: LD_INT 2
61274: ARRAY
61275: EQUAL
61276: AND
61277: PUSH
61278: LD_VAR 0 5
61282: PUSH
61283: LD_VAR 0 1
61287: PPUSH
61288: CALL_OW 437
61292: PUSH
61293: LD_INT 1
61295: ARRAY
61296: PUSH
61297: LD_INT 3
61299: ARRAY
61300: EQUAL
61301: AND
61302: IFFALSE 61312
// result := true end ;
61304: LD_ADDR_VAR 0 3
61308: PUSH
61309: LD_INT 1
61311: ST_TO_ADDR
// end ;
61312: LD_VAR 0 3
61316: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61317: LD_INT 0
61319: PPUSH
// result := false ;
61320: LD_ADDR_VAR 0 4
61324: PUSH
61325: LD_INT 0
61327: ST_TO_ADDR
// if GetTaskList ( unit ) then
61328: LD_VAR 0 1
61332: PPUSH
61333: CALL_OW 437
61337: IFFALSE 61420
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61339: LD_STRING M
61341: PUSH
61342: LD_VAR 0 1
61346: PPUSH
61347: CALL_OW 437
61351: PUSH
61352: LD_INT 1
61354: ARRAY
61355: PUSH
61356: LD_INT 1
61358: ARRAY
61359: EQUAL
61360: PUSH
61361: LD_VAR 0 2
61365: PUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: CALL_OW 437
61375: PUSH
61376: LD_INT 1
61378: ARRAY
61379: PUSH
61380: LD_INT 2
61382: ARRAY
61383: EQUAL
61384: AND
61385: PUSH
61386: LD_VAR 0 3
61390: PUSH
61391: LD_VAR 0 1
61395: PPUSH
61396: CALL_OW 437
61400: PUSH
61401: LD_INT 1
61403: ARRAY
61404: PUSH
61405: LD_INT 3
61407: ARRAY
61408: EQUAL
61409: AND
61410: IFFALSE 61420
// result := true ;
61412: LD_ADDR_VAR 0 4
61416: PUSH
61417: LD_INT 1
61419: ST_TO_ADDR
// end ; end ;
61420: LD_VAR 0 4
61424: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61425: LD_INT 0
61427: PPUSH
61428: PPUSH
61429: PPUSH
61430: PPUSH
// if not unit or not area then
61431: LD_VAR 0 1
61435: NOT
61436: PUSH
61437: LD_VAR 0 2
61441: NOT
61442: OR
61443: IFFALSE 61447
// exit ;
61445: GO 61623
// tmp := AreaToList ( area , i ) ;
61447: LD_ADDR_VAR 0 6
61451: PUSH
61452: LD_VAR 0 2
61456: PPUSH
61457: LD_VAR 0 5
61461: PPUSH
61462: CALL_OW 517
61466: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61467: LD_ADDR_VAR 0 5
61471: PUSH
61472: DOUBLE
61473: LD_INT 1
61475: DEC
61476: ST_TO_ADDR
61477: LD_VAR 0 6
61481: PUSH
61482: LD_INT 1
61484: ARRAY
61485: PUSH
61486: FOR_TO
61487: IFFALSE 61621
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61489: LD_ADDR_VAR 0 7
61493: PUSH
61494: LD_VAR 0 6
61498: PUSH
61499: LD_INT 1
61501: ARRAY
61502: PUSH
61503: LD_VAR 0 5
61507: ARRAY
61508: PUSH
61509: LD_VAR 0 6
61513: PUSH
61514: LD_INT 2
61516: ARRAY
61517: PUSH
61518: LD_VAR 0 5
61522: ARRAY
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61528: LD_INT 92
61530: PUSH
61531: LD_VAR 0 7
61535: PUSH
61536: LD_INT 1
61538: ARRAY
61539: PUSH
61540: LD_VAR 0 7
61544: PUSH
61545: LD_INT 2
61547: ARRAY
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: PPUSH
61558: CALL_OW 69
61562: PUSH
61563: LD_INT 0
61565: EQUAL
61566: IFFALSE 61619
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61568: LD_VAR 0 1
61572: PPUSH
61573: LD_VAR 0 7
61577: PUSH
61578: LD_INT 1
61580: ARRAY
61581: PPUSH
61582: LD_VAR 0 7
61586: PUSH
61587: LD_INT 2
61589: ARRAY
61590: PPUSH
61591: LD_VAR 0 3
61595: PPUSH
61596: CALL_OW 48
// result := IsPlaced ( unit ) ;
61600: LD_ADDR_VAR 0 4
61604: PUSH
61605: LD_VAR 0 1
61609: PPUSH
61610: CALL_OW 305
61614: ST_TO_ADDR
// exit ;
61615: POP
61616: POP
61617: GO 61623
// end ; end ;
61619: GO 61486
61621: POP
61622: POP
// end ;
61623: LD_VAR 0 4
61627: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61628: LD_INT 0
61630: PPUSH
61631: PPUSH
61632: PPUSH
// if not side or side > 8 then
61633: LD_VAR 0 1
61637: NOT
61638: PUSH
61639: LD_VAR 0 1
61643: PUSH
61644: LD_INT 8
61646: GREATER
61647: OR
61648: IFFALSE 61652
// exit ;
61650: GO 61839
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61652: LD_ADDR_VAR 0 4
61656: PUSH
61657: LD_INT 22
61659: PUSH
61660: LD_VAR 0 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 21
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PPUSH
61683: CALL_OW 69
61687: ST_TO_ADDR
// if not tmp then
61688: LD_VAR 0 4
61692: NOT
61693: IFFALSE 61697
// exit ;
61695: GO 61839
// enable_addtolog := true ;
61697: LD_ADDR_OWVAR 81
61701: PUSH
61702: LD_INT 1
61704: ST_TO_ADDR
// AddToLog ( [ ) ;
61705: LD_STRING [
61707: PPUSH
61708: CALL_OW 561
// for i in tmp do
61712: LD_ADDR_VAR 0 3
61716: PUSH
61717: LD_VAR 0 4
61721: PUSH
61722: FOR_IN
61723: IFFALSE 61830
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61725: LD_STRING [
61727: PUSH
61728: LD_VAR 0 3
61732: PPUSH
61733: CALL_OW 266
61737: STR
61738: PUSH
61739: LD_STRING , 
61741: STR
61742: PUSH
61743: LD_VAR 0 3
61747: PPUSH
61748: CALL_OW 250
61752: STR
61753: PUSH
61754: LD_STRING , 
61756: STR
61757: PUSH
61758: LD_VAR 0 3
61762: PPUSH
61763: CALL_OW 251
61767: STR
61768: PUSH
61769: LD_STRING , 
61771: STR
61772: PUSH
61773: LD_VAR 0 3
61777: PPUSH
61778: CALL_OW 254
61782: STR
61783: PUSH
61784: LD_STRING , 
61786: STR
61787: PUSH
61788: LD_VAR 0 3
61792: PPUSH
61793: LD_INT 1
61795: PPUSH
61796: CALL_OW 268
61800: STR
61801: PUSH
61802: LD_STRING , 
61804: STR
61805: PUSH
61806: LD_VAR 0 3
61810: PPUSH
61811: LD_INT 2
61813: PPUSH
61814: CALL_OW 268
61818: STR
61819: PUSH
61820: LD_STRING ],
61822: STR
61823: PPUSH
61824: CALL_OW 561
// end ;
61828: GO 61722
61830: POP
61831: POP
// AddToLog ( ]; ) ;
61832: LD_STRING ];
61834: PPUSH
61835: CALL_OW 561
// end ;
61839: LD_VAR 0 2
61843: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61844: LD_INT 0
61846: PPUSH
61847: PPUSH
61848: PPUSH
61849: PPUSH
61850: PPUSH
// if not area or not rate or not max then
61851: LD_VAR 0 1
61855: NOT
61856: PUSH
61857: LD_VAR 0 2
61861: NOT
61862: OR
61863: PUSH
61864: LD_VAR 0 4
61868: NOT
61869: OR
61870: IFFALSE 61874
// exit ;
61872: GO 62063
// while 1 do
61874: LD_INT 1
61876: IFFALSE 62063
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61878: LD_ADDR_VAR 0 9
61882: PUSH
61883: LD_VAR 0 1
61887: PPUSH
61888: LD_INT 1
61890: PPUSH
61891: CALL_OW 287
61895: PUSH
61896: LD_INT 10
61898: MUL
61899: ST_TO_ADDR
// r := rate / 10 ;
61900: LD_ADDR_VAR 0 7
61904: PUSH
61905: LD_VAR 0 2
61909: PUSH
61910: LD_INT 10
61912: DIVREAL
61913: ST_TO_ADDR
// time := 1 1$00 ;
61914: LD_ADDR_VAR 0 8
61918: PUSH
61919: LD_INT 2100
61921: ST_TO_ADDR
// if amount < min then
61922: LD_VAR 0 9
61926: PUSH
61927: LD_VAR 0 3
61931: LESS
61932: IFFALSE 61950
// r := r * 2 else
61934: LD_ADDR_VAR 0 7
61938: PUSH
61939: LD_VAR 0 7
61943: PUSH
61944: LD_INT 2
61946: MUL
61947: ST_TO_ADDR
61948: GO 61976
// if amount > max then
61950: LD_VAR 0 9
61954: PUSH
61955: LD_VAR 0 4
61959: GREATER
61960: IFFALSE 61976
// r := r / 2 ;
61962: LD_ADDR_VAR 0 7
61966: PUSH
61967: LD_VAR 0 7
61971: PUSH
61972: LD_INT 2
61974: DIVREAL
61975: ST_TO_ADDR
// time := time / r ;
61976: LD_ADDR_VAR 0 8
61980: PUSH
61981: LD_VAR 0 8
61985: PUSH
61986: LD_VAR 0 7
61990: DIVREAL
61991: ST_TO_ADDR
// if time < 0 then
61992: LD_VAR 0 8
61996: PUSH
61997: LD_INT 0
61999: LESS
62000: IFFALSE 62017
// time := time * - 1 ;
62002: LD_ADDR_VAR 0 8
62006: PUSH
62007: LD_VAR 0 8
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: MUL
62016: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62017: LD_VAR 0 8
62021: PUSH
62022: LD_INT 35
62024: PPUSH
62025: LD_INT 875
62027: PPUSH
62028: CALL_OW 12
62032: PLUS
62033: PPUSH
62034: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62038: LD_INT 1
62040: PPUSH
62041: LD_INT 5
62043: PPUSH
62044: CALL_OW 12
62048: PPUSH
62049: LD_VAR 0 1
62053: PPUSH
62054: LD_INT 1
62056: PPUSH
62057: CALL_OW 55
// end ;
62061: GO 61874
// end ;
62063: LD_VAR 0 5
62067: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62068: LD_INT 0
62070: PPUSH
62071: PPUSH
62072: PPUSH
62073: PPUSH
62074: PPUSH
62075: PPUSH
62076: PPUSH
62077: PPUSH
// if not turrets or not factories then
62078: LD_VAR 0 1
62082: NOT
62083: PUSH
62084: LD_VAR 0 2
62088: NOT
62089: OR
62090: IFFALSE 62094
// exit ;
62092: GO 62401
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62094: LD_ADDR_VAR 0 10
62098: PUSH
62099: LD_INT 5
62101: PUSH
62102: LD_INT 6
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: LD_INT 4
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: LD_INT 5
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 24
62136: PUSH
62137: LD_INT 25
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 23
62146: PUSH
62147: LD_INT 27
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 42
62160: PUSH
62161: LD_INT 43
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 44
62170: PUSH
62171: LD_INT 46
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 45
62180: PUSH
62181: LD_INT 47
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: ST_TO_ADDR
// result := [ ] ;
62198: LD_ADDR_VAR 0 3
62202: PUSH
62203: EMPTY
62204: ST_TO_ADDR
// for i in turrets do
62205: LD_ADDR_VAR 0 4
62209: PUSH
62210: LD_VAR 0 1
62214: PUSH
62215: FOR_IN
62216: IFFALSE 62399
// begin nat := GetNation ( i ) ;
62218: LD_ADDR_VAR 0 7
62222: PUSH
62223: LD_VAR 0 4
62227: PPUSH
62228: CALL_OW 248
62232: ST_TO_ADDR
// weapon := 0 ;
62233: LD_ADDR_VAR 0 8
62237: PUSH
62238: LD_INT 0
62240: ST_TO_ADDR
// if not nat then
62241: LD_VAR 0 7
62245: NOT
62246: IFFALSE 62250
// continue ;
62248: GO 62215
// for j in list [ nat ] do
62250: LD_ADDR_VAR 0 5
62254: PUSH
62255: LD_VAR 0 10
62259: PUSH
62260: LD_VAR 0 7
62264: ARRAY
62265: PUSH
62266: FOR_IN
62267: IFFALSE 62308
// if GetBWeapon ( i ) = j [ 1 ] then
62269: LD_VAR 0 4
62273: PPUSH
62274: CALL_OW 269
62278: PUSH
62279: LD_VAR 0 5
62283: PUSH
62284: LD_INT 1
62286: ARRAY
62287: EQUAL
62288: IFFALSE 62306
// begin weapon := j [ 2 ] ;
62290: LD_ADDR_VAR 0 8
62294: PUSH
62295: LD_VAR 0 5
62299: PUSH
62300: LD_INT 2
62302: ARRAY
62303: ST_TO_ADDR
// break ;
62304: GO 62308
// end ;
62306: GO 62266
62308: POP
62309: POP
// if not weapon then
62310: LD_VAR 0 8
62314: NOT
62315: IFFALSE 62319
// continue ;
62317: GO 62215
// for k in factories do
62319: LD_ADDR_VAR 0 6
62323: PUSH
62324: LD_VAR 0 2
62328: PUSH
62329: FOR_IN
62330: IFFALSE 62395
// begin weapons := AvailableWeaponList ( k ) ;
62332: LD_ADDR_VAR 0 9
62336: PUSH
62337: LD_VAR 0 6
62341: PPUSH
62342: CALL_OW 478
62346: ST_TO_ADDR
// if not weapons then
62347: LD_VAR 0 9
62351: NOT
62352: IFFALSE 62356
// continue ;
62354: GO 62329
// if weapon in weapons then
62356: LD_VAR 0 8
62360: PUSH
62361: LD_VAR 0 9
62365: IN
62366: IFFALSE 62393
// begin result := [ i , weapon ] ;
62368: LD_ADDR_VAR 0 3
62372: PUSH
62373: LD_VAR 0 4
62377: PUSH
62378: LD_VAR 0 8
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: ST_TO_ADDR
// exit ;
62387: POP
62388: POP
62389: POP
62390: POP
62391: GO 62401
// end ; end ;
62393: GO 62329
62395: POP
62396: POP
// end ;
62397: GO 62215
62399: POP
62400: POP
// end ;
62401: LD_VAR 0 3
62405: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62406: LD_INT 0
62408: PPUSH
// if not side or side > 8 then
62409: LD_VAR 0 3
62413: NOT
62414: PUSH
62415: LD_VAR 0 3
62419: PUSH
62420: LD_INT 8
62422: GREATER
62423: OR
62424: IFFALSE 62428
// exit ;
62426: GO 62487
// if not range then
62428: LD_VAR 0 4
62432: NOT
62433: IFFALSE 62444
// range := - 12 ;
62435: LD_ADDR_VAR 0 4
62439: PUSH
62440: LD_INT 12
62442: NEG
62443: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62444: LD_VAR 0 1
62448: PPUSH
62449: LD_VAR 0 2
62453: PPUSH
62454: LD_VAR 0 3
62458: PPUSH
62459: LD_VAR 0 4
62463: PPUSH
62464: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62468: LD_VAR 0 1
62472: PPUSH
62473: LD_VAR 0 2
62477: PPUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: CALL_OW 331
// end ;
62487: LD_VAR 0 5
62491: RET
// export function Video ( mode ) ; begin
62492: LD_INT 0
62494: PPUSH
// ingame_video = mode ;
62495: LD_ADDR_OWVAR 52
62499: PUSH
62500: LD_VAR 0 1
62504: ST_TO_ADDR
// interface_hidden = mode ;
62505: LD_ADDR_OWVAR 54
62509: PUSH
62510: LD_VAR 0 1
62514: ST_TO_ADDR
// end ;
62515: LD_VAR 0 2
62519: RET
// export function Join ( array , element ) ; begin
62520: LD_INT 0
62522: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62523: LD_ADDR_VAR 0 3
62527: PUSH
62528: LD_VAR 0 1
62532: PPUSH
62533: LD_VAR 0 1
62537: PUSH
62538: LD_INT 1
62540: PLUS
62541: PPUSH
62542: LD_VAR 0 2
62546: PPUSH
62547: CALL_OW 1
62551: ST_TO_ADDR
// end ;
62552: LD_VAR 0 3
62556: RET
// export function JoinUnion ( array , element ) ; begin
62557: LD_INT 0
62559: PPUSH
// result := array union element ;
62560: LD_ADDR_VAR 0 3
62564: PUSH
62565: LD_VAR 0 1
62569: PUSH
62570: LD_VAR 0 2
62574: UNION
62575: ST_TO_ADDR
// end ;
62576: LD_VAR 0 3
62580: RET
// export function GetBehemoths ( side ) ; begin
62581: LD_INT 0
62583: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62584: LD_ADDR_VAR 0 2
62588: PUSH
62589: LD_INT 22
62591: PUSH
62592: LD_VAR 0 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 31
62603: PUSH
62604: LD_INT 25
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PPUSH
62615: CALL_OW 69
62619: ST_TO_ADDR
// end ;
62620: LD_VAR 0 2
62624: RET
// export function Shuffle ( array ) ; var i , index ; begin
62625: LD_INT 0
62627: PPUSH
62628: PPUSH
62629: PPUSH
// result := [ ] ;
62630: LD_ADDR_VAR 0 2
62634: PUSH
62635: EMPTY
62636: ST_TO_ADDR
// if not array then
62637: LD_VAR 0 1
62641: NOT
62642: IFFALSE 62646
// exit ;
62644: GO 62745
// Randomize ;
62646: CALL_OW 10
// for i = array downto 1 do
62650: LD_ADDR_VAR 0 3
62654: PUSH
62655: DOUBLE
62656: LD_VAR 0 1
62660: INC
62661: ST_TO_ADDR
62662: LD_INT 1
62664: PUSH
62665: FOR_DOWNTO
62666: IFFALSE 62743
// begin index := rand ( 1 , array ) ;
62668: LD_ADDR_VAR 0 4
62672: PUSH
62673: LD_INT 1
62675: PPUSH
62676: LD_VAR 0 1
62680: PPUSH
62681: CALL_OW 12
62685: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62686: LD_ADDR_VAR 0 2
62690: PUSH
62691: LD_VAR 0 2
62695: PPUSH
62696: LD_VAR 0 2
62700: PUSH
62701: LD_INT 1
62703: PLUS
62704: PPUSH
62705: LD_VAR 0 1
62709: PUSH
62710: LD_VAR 0 4
62714: ARRAY
62715: PPUSH
62716: CALL_OW 2
62720: ST_TO_ADDR
// array := Delete ( array , index ) ;
62721: LD_ADDR_VAR 0 1
62725: PUSH
62726: LD_VAR 0 1
62730: PPUSH
62731: LD_VAR 0 4
62735: PPUSH
62736: CALL_OW 3
62740: ST_TO_ADDR
// end ;
62741: GO 62665
62743: POP
62744: POP
// end ;
62745: LD_VAR 0 2
62749: RET
// export function GetBaseMaterials ( base ) ; begin
62750: LD_INT 0
62752: PPUSH
// result := [ 0 , 0 , 0 ] ;
62753: LD_ADDR_VAR 0 2
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: ST_TO_ADDR
// if not base then
62772: LD_VAR 0 1
62776: NOT
62777: IFFALSE 62781
// exit ;
62779: GO 62830
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62781: LD_ADDR_VAR 0 2
62785: PUSH
62786: LD_VAR 0 1
62790: PPUSH
62791: LD_INT 1
62793: PPUSH
62794: CALL_OW 275
62798: PUSH
62799: LD_VAR 0 1
62803: PPUSH
62804: LD_INT 2
62806: PPUSH
62807: CALL_OW 275
62811: PUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: LD_INT 3
62819: PPUSH
62820: CALL_OW 275
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// end ;
62830: LD_VAR 0 2
62834: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62835: LD_INT 0
62837: PPUSH
62838: PPUSH
// result := array ;
62839: LD_ADDR_VAR 0 3
62843: PUSH
62844: LD_VAR 0 1
62848: ST_TO_ADDR
// if size >= result then
62849: LD_VAR 0 2
62853: PUSH
62854: LD_VAR 0 3
62858: GREATEREQUAL
62859: IFFALSE 62863
// exit ;
62861: GO 62913
// if size then
62863: LD_VAR 0 2
62867: IFFALSE 62913
// for i := array downto size do
62869: LD_ADDR_VAR 0 4
62873: PUSH
62874: DOUBLE
62875: LD_VAR 0 1
62879: INC
62880: ST_TO_ADDR
62881: LD_VAR 0 2
62885: PUSH
62886: FOR_DOWNTO
62887: IFFALSE 62911
// result := Delete ( result , result ) ;
62889: LD_ADDR_VAR 0 3
62893: PUSH
62894: LD_VAR 0 3
62898: PPUSH
62899: LD_VAR 0 3
62903: PPUSH
62904: CALL_OW 3
62908: ST_TO_ADDR
62909: GO 62886
62911: POP
62912: POP
// end ;
62913: LD_VAR 0 3
62917: RET
// export function ComExit ( unit ) ; var tmp ; begin
62918: LD_INT 0
62920: PPUSH
62921: PPUSH
// if not IsInUnit ( unit ) then
62922: LD_VAR 0 1
62926: PPUSH
62927: CALL_OW 310
62931: NOT
62932: IFFALSE 62936
// exit ;
62934: GO 62996
// tmp := IsInUnit ( unit ) ;
62936: LD_ADDR_VAR 0 3
62940: PUSH
62941: LD_VAR 0 1
62945: PPUSH
62946: CALL_OW 310
62950: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62951: LD_VAR 0 3
62955: PPUSH
62956: CALL_OW 247
62960: PUSH
62961: LD_INT 2
62963: EQUAL
62964: IFFALSE 62977
// ComExitVehicle ( unit ) else
62966: LD_VAR 0 1
62970: PPUSH
62971: CALL_OW 121
62975: GO 62986
// ComExitBuilding ( unit ) ;
62977: LD_VAR 0 1
62981: PPUSH
62982: CALL_OW 122
// result := tmp ;
62986: LD_ADDR_VAR 0 2
62990: PUSH
62991: LD_VAR 0 3
62995: ST_TO_ADDR
// end ;
62996: LD_VAR 0 2
63000: RET
// export function ComExitAll ( units ) ; var i ; begin
63001: LD_INT 0
63003: PPUSH
63004: PPUSH
// if not units then
63005: LD_VAR 0 1
63009: NOT
63010: IFFALSE 63014
// exit ;
63012: GO 63040
// for i in units do
63014: LD_ADDR_VAR 0 3
63018: PUSH
63019: LD_VAR 0 1
63023: PUSH
63024: FOR_IN
63025: IFFALSE 63038
// ComExit ( i ) ;
63027: LD_VAR 0 3
63031: PPUSH
63032: CALL 62918 0 1
63036: GO 63024
63038: POP
63039: POP
// end ;
63040: LD_VAR 0 2
63044: RET
// export function ResetHc ; begin
63045: LD_INT 0
63047: PPUSH
// InitHc ;
63048: CALL_OW 19
// hc_importance := 0 ;
63052: LD_ADDR_OWVAR 32
63056: PUSH
63057: LD_INT 0
63059: ST_TO_ADDR
// end ;
63060: LD_VAR 0 1
63064: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63065: LD_INT 0
63067: PPUSH
63068: PPUSH
63069: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63070: LD_ADDR_VAR 0 6
63074: PUSH
63075: LD_VAR 0 1
63079: PUSH
63080: LD_VAR 0 3
63084: PLUS
63085: PUSH
63086: LD_INT 2
63088: DIV
63089: ST_TO_ADDR
// if _x < 0 then
63090: LD_VAR 0 6
63094: PUSH
63095: LD_INT 0
63097: LESS
63098: IFFALSE 63115
// _x := _x * - 1 ;
63100: LD_ADDR_VAR 0 6
63104: PUSH
63105: LD_VAR 0 6
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: MUL
63114: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63115: LD_ADDR_VAR 0 7
63119: PUSH
63120: LD_VAR 0 2
63124: PUSH
63125: LD_VAR 0 4
63129: PLUS
63130: PUSH
63131: LD_INT 2
63133: DIV
63134: ST_TO_ADDR
// if _y < 0 then
63135: LD_VAR 0 7
63139: PUSH
63140: LD_INT 0
63142: LESS
63143: IFFALSE 63160
// _y := _y * - 1 ;
63145: LD_ADDR_VAR 0 7
63149: PUSH
63150: LD_VAR 0 7
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: MUL
63159: ST_TO_ADDR
// result := [ _x , _y ] ;
63160: LD_ADDR_VAR 0 5
63164: PUSH
63165: LD_VAR 0 6
63169: PUSH
63170: LD_VAR 0 7
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: ST_TO_ADDR
// end ;
63179: LD_VAR 0 5
63183: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63184: LD_INT 0
63186: PPUSH
63187: PPUSH
63188: PPUSH
63189: PPUSH
// task := GetTaskList ( unit ) ;
63190: LD_ADDR_VAR 0 7
63194: PUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: CALL_OW 437
63204: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63205: LD_VAR 0 7
63209: NOT
63210: PUSH
63211: LD_VAR 0 1
63215: PPUSH
63216: LD_VAR 0 2
63220: PPUSH
63221: CALL_OW 308
63225: NOT
63226: AND
63227: IFFALSE 63231
// exit ;
63229: GO 63349
// if IsInArea ( unit , area ) then
63231: LD_VAR 0 1
63235: PPUSH
63236: LD_VAR 0 2
63240: PPUSH
63241: CALL_OW 308
63245: IFFALSE 63263
// begin ComMoveToArea ( unit , goAway ) ;
63247: LD_VAR 0 1
63251: PPUSH
63252: LD_VAR 0 3
63256: PPUSH
63257: CALL_OW 113
// exit ;
63261: GO 63349
// end ; if task [ 1 ] [ 1 ] <> M then
63263: LD_VAR 0 7
63267: PUSH
63268: LD_INT 1
63270: ARRAY
63271: PUSH
63272: LD_INT 1
63274: ARRAY
63275: PUSH
63276: LD_STRING M
63278: NONEQUAL
63279: IFFALSE 63283
// exit ;
63281: GO 63349
// x := task [ 1 ] [ 2 ] ;
63283: LD_ADDR_VAR 0 5
63287: PUSH
63288: LD_VAR 0 7
63292: PUSH
63293: LD_INT 1
63295: ARRAY
63296: PUSH
63297: LD_INT 2
63299: ARRAY
63300: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63301: LD_ADDR_VAR 0 6
63305: PUSH
63306: LD_VAR 0 7
63310: PUSH
63311: LD_INT 1
63313: ARRAY
63314: PUSH
63315: LD_INT 3
63317: ARRAY
63318: ST_TO_ADDR
// if InArea ( x , y , area ) then
63319: LD_VAR 0 5
63323: PPUSH
63324: LD_VAR 0 6
63328: PPUSH
63329: LD_VAR 0 2
63333: PPUSH
63334: CALL_OW 309
63338: IFFALSE 63349
// ComStop ( unit ) ;
63340: LD_VAR 0 1
63344: PPUSH
63345: CALL_OW 141
// end ;
63349: LD_VAR 0 4
63353: RET
// export function Abs ( value ) ; begin
63354: LD_INT 0
63356: PPUSH
// result := value ;
63357: LD_ADDR_VAR 0 2
63361: PUSH
63362: LD_VAR 0 1
63366: ST_TO_ADDR
// if value < 0 then
63367: LD_VAR 0 1
63371: PUSH
63372: LD_INT 0
63374: LESS
63375: IFFALSE 63392
// result := value * - 1 ;
63377: LD_ADDR_VAR 0 2
63381: PUSH
63382: LD_VAR 0 1
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: MUL
63391: ST_TO_ADDR
// end ;
63392: LD_VAR 0 2
63396: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63397: LD_INT 0
63399: PPUSH
63400: PPUSH
63401: PPUSH
63402: PPUSH
63403: PPUSH
63404: PPUSH
63405: PPUSH
63406: PPUSH
// if not unit or not building then
63407: LD_VAR 0 1
63411: NOT
63412: PUSH
63413: LD_VAR 0 2
63417: NOT
63418: OR
63419: IFFALSE 63423
// exit ;
63421: GO 63649
// x := GetX ( building ) ;
63423: LD_ADDR_VAR 0 4
63427: PUSH
63428: LD_VAR 0 2
63432: PPUSH
63433: CALL_OW 250
63437: ST_TO_ADDR
// y := GetY ( building ) ;
63438: LD_ADDR_VAR 0 6
63442: PUSH
63443: LD_VAR 0 2
63447: PPUSH
63448: CALL_OW 251
63452: ST_TO_ADDR
// d := GetDir ( building ) ;
63453: LD_ADDR_VAR 0 8
63457: PUSH
63458: LD_VAR 0 2
63462: PPUSH
63463: CALL_OW 254
63467: ST_TO_ADDR
// r := 4 ;
63468: LD_ADDR_VAR 0 9
63472: PUSH
63473: LD_INT 4
63475: ST_TO_ADDR
// for i := 1 to 5 do
63476: LD_ADDR_VAR 0 10
63480: PUSH
63481: DOUBLE
63482: LD_INT 1
63484: DEC
63485: ST_TO_ADDR
63486: LD_INT 5
63488: PUSH
63489: FOR_TO
63490: IFFALSE 63647
// begin _x := ShiftX ( x , d , r + i ) ;
63492: LD_ADDR_VAR 0 5
63496: PUSH
63497: LD_VAR 0 4
63501: PPUSH
63502: LD_VAR 0 8
63506: PPUSH
63507: LD_VAR 0 9
63511: PUSH
63512: LD_VAR 0 10
63516: PLUS
63517: PPUSH
63518: CALL_OW 272
63522: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63523: LD_ADDR_VAR 0 7
63527: PUSH
63528: LD_VAR 0 6
63532: PPUSH
63533: LD_VAR 0 8
63537: PPUSH
63538: LD_VAR 0 9
63542: PUSH
63543: LD_VAR 0 10
63547: PLUS
63548: PPUSH
63549: CALL_OW 273
63553: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63554: LD_VAR 0 5
63558: PPUSH
63559: LD_VAR 0 7
63563: PPUSH
63564: CALL_OW 488
63568: PUSH
63569: LD_VAR 0 5
63573: PPUSH
63574: LD_VAR 0 7
63578: PPUSH
63579: CALL_OW 428
63583: PPUSH
63584: CALL_OW 247
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: IN
63599: NOT
63600: AND
63601: IFFALSE 63645
// begin ComMoveXY ( unit , _x , _y ) ;
63603: LD_VAR 0 1
63607: PPUSH
63608: LD_VAR 0 5
63612: PPUSH
63613: LD_VAR 0 7
63617: PPUSH
63618: CALL_OW 111
// result := [ _x , _y ] ;
63622: LD_ADDR_VAR 0 3
63626: PUSH
63627: LD_VAR 0 5
63631: PUSH
63632: LD_VAR 0 7
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: ST_TO_ADDR
// exit ;
63641: POP
63642: POP
63643: GO 63649
// end ; end ;
63645: GO 63489
63647: POP
63648: POP
// end ;
63649: LD_VAR 0 3
63653: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63654: LD_INT 0
63656: PPUSH
63657: PPUSH
63658: PPUSH
// result := 0 ;
63659: LD_ADDR_VAR 0 3
63663: PUSH
63664: LD_INT 0
63666: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63667: LD_VAR 0 1
63671: PUSH
63672: LD_INT 0
63674: LESS
63675: PUSH
63676: LD_VAR 0 1
63680: PUSH
63681: LD_INT 8
63683: GREATER
63684: OR
63685: PUSH
63686: LD_VAR 0 2
63690: PUSH
63691: LD_INT 0
63693: LESS
63694: OR
63695: PUSH
63696: LD_VAR 0 2
63700: PUSH
63701: LD_INT 8
63703: GREATER
63704: OR
63705: IFFALSE 63709
// exit ;
63707: GO 63784
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63709: LD_ADDR_VAR 0 4
63713: PUSH
63714: LD_INT 22
63716: PUSH
63717: LD_VAR 0 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PPUSH
63726: CALL_OW 69
63730: PUSH
63731: FOR_IN
63732: IFFALSE 63782
// begin un := UnitShoot ( i ) ;
63734: LD_ADDR_VAR 0 5
63738: PUSH
63739: LD_VAR 0 4
63743: PPUSH
63744: CALL_OW 504
63748: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63749: LD_VAR 0 5
63753: PPUSH
63754: CALL_OW 255
63758: PUSH
63759: LD_VAR 0 1
63763: EQUAL
63764: IFFALSE 63780
// begin result := un ;
63766: LD_ADDR_VAR 0 3
63770: PUSH
63771: LD_VAR 0 5
63775: ST_TO_ADDR
// exit ;
63776: POP
63777: POP
63778: GO 63784
// end ; end ;
63780: GO 63731
63782: POP
63783: POP
// end ;
63784: LD_VAR 0 3
63788: RET
// export function GetCargoBay ( units ) ; begin
63789: LD_INT 0
63791: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63792: LD_ADDR_VAR 0 2
63796: PUSH
63797: LD_VAR 0 1
63801: PPUSH
63802: LD_INT 2
63804: PUSH
63805: LD_INT 34
63807: PUSH
63808: LD_INT 12
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 34
63817: PUSH
63818: LD_INT 51
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 34
63827: PUSH
63828: LD_INT 32
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 34
63837: PUSH
63838: LD_INT 89
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: PPUSH
63852: CALL_OW 72
63856: ST_TO_ADDR
// end ;
63857: LD_VAR 0 2
63861: RET
// export function Negate ( value ) ; begin
63862: LD_INT 0
63864: PPUSH
// result := not value ;
63865: LD_ADDR_VAR 0 2
63869: PUSH
63870: LD_VAR 0 1
63874: NOT
63875: ST_TO_ADDR
// end ;
63876: LD_VAR 0 2
63880: RET
// export function Inc ( value ) ; begin
63881: LD_INT 0
63883: PPUSH
// result := value + 1 ;
63884: LD_ADDR_VAR 0 2
63888: PUSH
63889: LD_VAR 0 1
63893: PUSH
63894: LD_INT 1
63896: PLUS
63897: ST_TO_ADDR
// end ;
63898: LD_VAR 0 2
63902: RET
// export function Dec ( value ) ; begin
63903: LD_INT 0
63905: PPUSH
// result := value - 1 ;
63906: LD_ADDR_VAR 0 2
63910: PUSH
63911: LD_VAR 0 1
63915: PUSH
63916: LD_INT 1
63918: MINUS
63919: ST_TO_ADDR
// end ;
63920: LD_VAR 0 2
63924: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63925: LD_INT 0
63927: PPUSH
63928: PPUSH
63929: PPUSH
63930: PPUSH
63931: PPUSH
63932: PPUSH
63933: PPUSH
63934: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63935: LD_VAR 0 1
63939: PPUSH
63940: LD_VAR 0 2
63944: PPUSH
63945: CALL_OW 488
63949: NOT
63950: PUSH
63951: LD_VAR 0 3
63955: PPUSH
63956: LD_VAR 0 4
63960: PPUSH
63961: CALL_OW 488
63965: NOT
63966: OR
63967: IFFALSE 63980
// begin result := - 1 ;
63969: LD_ADDR_VAR 0 5
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: ST_TO_ADDR
// exit ;
63978: GO 64215
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63980: LD_ADDR_VAR 0 12
63984: PUSH
63985: LD_VAR 0 1
63989: PPUSH
63990: LD_VAR 0 2
63994: PPUSH
63995: LD_VAR 0 3
63999: PPUSH
64000: LD_VAR 0 4
64004: PPUSH
64005: CALL 63065 0 4
64009: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64010: LD_ADDR_VAR 0 11
64014: PUSH
64015: LD_VAR 0 1
64019: PPUSH
64020: LD_VAR 0 2
64024: PPUSH
64025: LD_VAR 0 12
64029: PUSH
64030: LD_INT 1
64032: ARRAY
64033: PPUSH
64034: LD_VAR 0 12
64038: PUSH
64039: LD_INT 2
64041: ARRAY
64042: PPUSH
64043: CALL_OW 298
64047: ST_TO_ADDR
// distance := 9999 ;
64048: LD_ADDR_VAR 0 10
64052: PUSH
64053: LD_INT 9999
64055: ST_TO_ADDR
// for i := 0 to 5 do
64056: LD_ADDR_VAR 0 6
64060: PUSH
64061: DOUBLE
64062: LD_INT 0
64064: DEC
64065: ST_TO_ADDR
64066: LD_INT 5
64068: PUSH
64069: FOR_TO
64070: IFFALSE 64213
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64072: LD_ADDR_VAR 0 7
64076: PUSH
64077: LD_VAR 0 1
64081: PPUSH
64082: LD_VAR 0 6
64086: PPUSH
64087: LD_VAR 0 11
64091: PPUSH
64092: CALL_OW 272
64096: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64097: LD_ADDR_VAR 0 8
64101: PUSH
64102: LD_VAR 0 2
64106: PPUSH
64107: LD_VAR 0 6
64111: PPUSH
64112: LD_VAR 0 11
64116: PPUSH
64117: CALL_OW 273
64121: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64122: LD_VAR 0 7
64126: PPUSH
64127: LD_VAR 0 8
64131: PPUSH
64132: CALL_OW 488
64136: NOT
64137: IFFALSE 64141
// continue ;
64139: GO 64069
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64141: LD_ADDR_VAR 0 9
64145: PUSH
64146: LD_VAR 0 12
64150: PUSH
64151: LD_INT 1
64153: ARRAY
64154: PPUSH
64155: LD_VAR 0 12
64159: PUSH
64160: LD_INT 2
64162: ARRAY
64163: PPUSH
64164: LD_VAR 0 7
64168: PPUSH
64169: LD_VAR 0 8
64173: PPUSH
64174: CALL_OW 298
64178: ST_TO_ADDR
// if tmp < distance then
64179: LD_VAR 0 9
64183: PUSH
64184: LD_VAR 0 10
64188: LESS
64189: IFFALSE 64211
// begin result := i ;
64191: LD_ADDR_VAR 0 5
64195: PUSH
64196: LD_VAR 0 6
64200: ST_TO_ADDR
// distance := tmp ;
64201: LD_ADDR_VAR 0 10
64205: PUSH
64206: LD_VAR 0 9
64210: ST_TO_ADDR
// end ; end ;
64211: GO 64069
64213: POP
64214: POP
// end ;
64215: LD_VAR 0 5
64219: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64220: LD_INT 0
64222: PPUSH
64223: PPUSH
// if not driver or not IsInUnit ( driver ) then
64224: LD_VAR 0 1
64228: NOT
64229: PUSH
64230: LD_VAR 0 1
64234: PPUSH
64235: CALL_OW 310
64239: NOT
64240: OR
64241: IFFALSE 64245
// exit ;
64243: GO 64335
// vehicle := IsInUnit ( driver ) ;
64245: LD_ADDR_VAR 0 3
64249: PUSH
64250: LD_VAR 0 1
64254: PPUSH
64255: CALL_OW 310
64259: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64260: LD_VAR 0 1
64264: PPUSH
64265: LD_STRING \
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: PUSH
64295: LD_STRING E
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: LD_VAR 0 3
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PPUSH
64331: CALL_OW 446
// end ;
64335: LD_VAR 0 2
64339: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64340: LD_INT 0
64342: PPUSH
64343: PPUSH
// if not driver or not IsInUnit ( driver ) then
64344: LD_VAR 0 1
64348: NOT
64349: PUSH
64350: LD_VAR 0 1
64354: PPUSH
64355: CALL_OW 310
64359: NOT
64360: OR
64361: IFFALSE 64365
// exit ;
64363: GO 64455
// vehicle := IsInUnit ( driver ) ;
64365: LD_ADDR_VAR 0 3
64369: PUSH
64370: LD_VAR 0 1
64374: PPUSH
64375: CALL_OW 310
64379: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64380: LD_VAR 0 1
64384: PPUSH
64385: LD_STRING \
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: PUSH
64415: LD_STRING E
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_VAR 0 3
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PPUSH
64451: CALL_OW 447
// end ;
64455: LD_VAR 0 2
64459: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64460: LD_INT 0
64462: PPUSH
64463: PPUSH
64464: PPUSH
// tmp := [ ] ;
64465: LD_ADDR_VAR 0 5
64469: PUSH
64470: EMPTY
64471: ST_TO_ADDR
// for i in units do
64472: LD_ADDR_VAR 0 4
64476: PUSH
64477: LD_VAR 0 1
64481: PUSH
64482: FOR_IN
64483: IFFALSE 64521
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64485: LD_ADDR_VAR 0 5
64489: PUSH
64490: LD_VAR 0 5
64494: PPUSH
64495: LD_VAR 0 5
64499: PUSH
64500: LD_INT 1
64502: PLUS
64503: PPUSH
64504: LD_VAR 0 4
64508: PPUSH
64509: CALL_OW 256
64513: PPUSH
64514: CALL_OW 2
64518: ST_TO_ADDR
64519: GO 64482
64521: POP
64522: POP
// if not tmp then
64523: LD_VAR 0 5
64527: NOT
64528: IFFALSE 64532
// exit ;
64530: GO 64580
// if asc then
64532: LD_VAR 0 2
64536: IFFALSE 64560
// result := SortListByListAsc ( units , tmp ) else
64538: LD_ADDR_VAR 0 3
64542: PUSH
64543: LD_VAR 0 1
64547: PPUSH
64548: LD_VAR 0 5
64552: PPUSH
64553: CALL_OW 76
64557: ST_TO_ADDR
64558: GO 64580
// result := SortListByListDesc ( units , tmp ) ;
64560: LD_ADDR_VAR 0 3
64564: PUSH
64565: LD_VAR 0 1
64569: PPUSH
64570: LD_VAR 0 5
64574: PPUSH
64575: CALL_OW 77
64579: ST_TO_ADDR
// end ;
64580: LD_VAR 0 3
64584: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64585: LD_INT 0
64587: PPUSH
64588: PPUSH
// task := GetTaskList ( mech ) ;
64589: LD_ADDR_VAR 0 4
64593: PUSH
64594: LD_VAR 0 1
64598: PPUSH
64599: CALL_OW 437
64603: ST_TO_ADDR
// if not task then
64604: LD_VAR 0 4
64608: NOT
64609: IFFALSE 64613
// exit ;
64611: GO 64655
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64613: LD_ADDR_VAR 0 3
64617: PUSH
64618: LD_VAR 0 4
64622: PUSH
64623: LD_INT 1
64625: ARRAY
64626: PUSH
64627: LD_INT 1
64629: ARRAY
64630: PUSH
64631: LD_STRING r
64633: EQUAL
64634: PUSH
64635: LD_VAR 0 4
64639: PUSH
64640: LD_INT 1
64642: ARRAY
64643: PUSH
64644: LD_INT 4
64646: ARRAY
64647: PUSH
64648: LD_VAR 0 2
64652: EQUAL
64653: AND
64654: ST_TO_ADDR
// end ;
64655: LD_VAR 0 3
64659: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64660: LD_INT 0
64662: PPUSH
// SetDir ( unit , d ) ;
64663: LD_VAR 0 1
64667: PPUSH
64668: LD_VAR 0 4
64672: PPUSH
64673: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64677: LD_VAR 0 1
64681: PPUSH
64682: LD_VAR 0 2
64686: PPUSH
64687: LD_VAR 0 3
64691: PPUSH
64692: LD_VAR 0 5
64696: PPUSH
64697: CALL_OW 48
// end ;
64701: LD_VAR 0 6
64705: RET
// export function ToNaturalNumber ( number ) ; begin
64706: LD_INT 0
64708: PPUSH
// result := number div 1 ;
64709: LD_ADDR_VAR 0 2
64713: PUSH
64714: LD_VAR 0 1
64718: PUSH
64719: LD_INT 1
64721: DIV
64722: ST_TO_ADDR
// if number < 0 then
64723: LD_VAR 0 1
64727: PUSH
64728: LD_INT 0
64730: LESS
64731: IFFALSE 64741
// result := 0 ;
64733: LD_ADDR_VAR 0 2
64737: PUSH
64738: LD_INT 0
64740: ST_TO_ADDR
// end ;
64741: LD_VAR 0 2
64745: RET
// export function SortByClass ( units , class ) ; var un ; begin
64746: LD_INT 0
64748: PPUSH
64749: PPUSH
// if not units or not class then
64750: LD_VAR 0 1
64754: NOT
64755: PUSH
64756: LD_VAR 0 2
64760: NOT
64761: OR
64762: IFFALSE 64766
// exit ;
64764: GO 64861
// result := [ ] ;
64766: LD_ADDR_VAR 0 3
64770: PUSH
64771: EMPTY
64772: ST_TO_ADDR
// for un in units do
64773: LD_ADDR_VAR 0 4
64777: PUSH
64778: LD_VAR 0 1
64782: PUSH
64783: FOR_IN
64784: IFFALSE 64859
// if GetClass ( un ) = class then
64786: LD_VAR 0 4
64790: PPUSH
64791: CALL_OW 257
64795: PUSH
64796: LD_VAR 0 2
64800: EQUAL
64801: IFFALSE 64828
// result := Insert ( result , 1 , un ) else
64803: LD_ADDR_VAR 0 3
64807: PUSH
64808: LD_VAR 0 3
64812: PPUSH
64813: LD_INT 1
64815: PPUSH
64816: LD_VAR 0 4
64820: PPUSH
64821: CALL_OW 2
64825: ST_TO_ADDR
64826: GO 64857
// result := Replace ( result , result + 1 , un ) ;
64828: LD_ADDR_VAR 0 3
64832: PUSH
64833: LD_VAR 0 3
64837: PPUSH
64838: LD_VAR 0 3
64842: PUSH
64843: LD_INT 1
64845: PLUS
64846: PPUSH
64847: LD_VAR 0 4
64851: PPUSH
64852: CALL_OW 1
64856: ST_TO_ADDR
64857: GO 64783
64859: POP
64860: POP
// end ;
64861: LD_VAR 0 3
64865: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64866: LD_INT 0
64868: PPUSH
64869: PPUSH
64870: PPUSH
64871: PPUSH
64872: PPUSH
64873: PPUSH
64874: PPUSH
// result := [ ] ;
64875: LD_ADDR_VAR 0 4
64879: PUSH
64880: EMPTY
64881: ST_TO_ADDR
// if x - r < 0 then
64882: LD_VAR 0 1
64886: PUSH
64887: LD_VAR 0 3
64891: MINUS
64892: PUSH
64893: LD_INT 0
64895: LESS
64896: IFFALSE 64908
// min_x := 0 else
64898: LD_ADDR_VAR 0 8
64902: PUSH
64903: LD_INT 0
64905: ST_TO_ADDR
64906: GO 64924
// min_x := x - r ;
64908: LD_ADDR_VAR 0 8
64912: PUSH
64913: LD_VAR 0 1
64917: PUSH
64918: LD_VAR 0 3
64922: MINUS
64923: ST_TO_ADDR
// if y - r < 0 then
64924: LD_VAR 0 2
64928: PUSH
64929: LD_VAR 0 3
64933: MINUS
64934: PUSH
64935: LD_INT 0
64937: LESS
64938: IFFALSE 64950
// min_y := 0 else
64940: LD_ADDR_VAR 0 7
64944: PUSH
64945: LD_INT 0
64947: ST_TO_ADDR
64948: GO 64966
// min_y := y - r ;
64950: LD_ADDR_VAR 0 7
64954: PUSH
64955: LD_VAR 0 2
64959: PUSH
64960: LD_VAR 0 3
64964: MINUS
64965: ST_TO_ADDR
// max_x := x + r ;
64966: LD_ADDR_VAR 0 9
64970: PUSH
64971: LD_VAR 0 1
64975: PUSH
64976: LD_VAR 0 3
64980: PLUS
64981: ST_TO_ADDR
// max_y := y + r ;
64982: LD_ADDR_VAR 0 10
64986: PUSH
64987: LD_VAR 0 2
64991: PUSH
64992: LD_VAR 0 3
64996: PLUS
64997: ST_TO_ADDR
// for _x = min_x to max_x do
64998: LD_ADDR_VAR 0 5
65002: PUSH
65003: DOUBLE
65004: LD_VAR 0 8
65008: DEC
65009: ST_TO_ADDR
65010: LD_VAR 0 9
65014: PUSH
65015: FOR_TO
65016: IFFALSE 65117
// for _y = min_y to max_y do
65018: LD_ADDR_VAR 0 6
65022: PUSH
65023: DOUBLE
65024: LD_VAR 0 7
65028: DEC
65029: ST_TO_ADDR
65030: LD_VAR 0 10
65034: PUSH
65035: FOR_TO
65036: IFFALSE 65113
// begin if not ValidHex ( _x , _y ) then
65038: LD_VAR 0 5
65042: PPUSH
65043: LD_VAR 0 6
65047: PPUSH
65048: CALL_OW 488
65052: NOT
65053: IFFALSE 65057
// continue ;
65055: GO 65035
// if GetResourceTypeXY ( _x , _y ) then
65057: LD_VAR 0 5
65061: PPUSH
65062: LD_VAR 0 6
65066: PPUSH
65067: CALL_OW 283
65071: IFFALSE 65111
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65073: LD_ADDR_VAR 0 4
65077: PUSH
65078: LD_VAR 0 4
65082: PPUSH
65083: LD_VAR 0 4
65087: PUSH
65088: LD_INT 1
65090: PLUS
65091: PPUSH
65092: LD_VAR 0 5
65096: PUSH
65097: LD_VAR 0 6
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PPUSH
65106: CALL_OW 1
65110: ST_TO_ADDR
// end ;
65111: GO 65035
65113: POP
65114: POP
65115: GO 65015
65117: POP
65118: POP
// end ;
65119: LD_VAR 0 4
65123: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65124: LD_INT 0
65126: PPUSH
65127: PPUSH
65128: PPUSH
65129: PPUSH
65130: PPUSH
65131: PPUSH
65132: PPUSH
65133: PPUSH
// if not units then
65134: LD_VAR 0 1
65138: NOT
65139: IFFALSE 65143
// exit ;
65141: GO 65667
// result := UnitFilter ( units , [ f_ok ] ) ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: LD_VAR 0 1
65152: PPUSH
65153: LD_INT 50
65155: PUSH
65156: EMPTY
65157: LIST
65158: PPUSH
65159: CALL_OW 72
65163: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65164: LD_ADDR_VAR 0 8
65168: PUSH
65169: LD_VAR 0 1
65173: PUSH
65174: LD_INT 1
65176: ARRAY
65177: PPUSH
65178: CALL_OW 255
65182: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65183: LD_ADDR_VAR 0 10
65187: PUSH
65188: LD_INT 29
65190: PUSH
65191: LD_INT 91
65193: PUSH
65194: LD_INT 49
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: LIST
65201: ST_TO_ADDR
// if not result then
65202: LD_VAR 0 3
65206: NOT
65207: IFFALSE 65211
// exit ;
65209: GO 65667
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65211: LD_ADDR_VAR 0 5
65215: PUSH
65216: LD_INT 81
65218: PUSH
65219: LD_VAR 0 8
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PPUSH
65228: CALL_OW 69
65232: ST_TO_ADDR
// for i in result do
65233: LD_ADDR_VAR 0 4
65237: PUSH
65238: LD_VAR 0 3
65242: PUSH
65243: FOR_IN
65244: IFFALSE 65665
// begin tag := GetTag ( i ) + 1 ;
65246: LD_ADDR_VAR 0 9
65250: PUSH
65251: LD_VAR 0 4
65255: PPUSH
65256: CALL_OW 110
65260: PUSH
65261: LD_INT 1
65263: PLUS
65264: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65265: LD_ADDR_VAR 0 7
65269: PUSH
65270: LD_VAR 0 4
65274: PPUSH
65275: CALL_OW 250
65279: PPUSH
65280: LD_VAR 0 4
65284: PPUSH
65285: CALL_OW 251
65289: PPUSH
65290: LD_INT 6
65292: PPUSH
65293: CALL 64866 0 3
65297: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65298: LD_VAR 0 4
65302: PPUSH
65303: CALL_OW 247
65307: PUSH
65308: LD_INT 2
65310: EQUAL
65311: PUSH
65312: LD_VAR 0 7
65316: AND
65317: PUSH
65318: LD_VAR 0 4
65322: PPUSH
65323: CALL_OW 264
65327: PUSH
65328: LD_VAR 0 10
65332: IN
65333: NOT
65334: AND
65335: IFFALSE 65374
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65337: LD_VAR 0 4
65341: PPUSH
65342: LD_VAR 0 7
65346: PUSH
65347: LD_INT 1
65349: ARRAY
65350: PUSH
65351: LD_INT 1
65353: ARRAY
65354: PPUSH
65355: LD_VAR 0 7
65359: PUSH
65360: LD_INT 1
65362: ARRAY
65363: PUSH
65364: LD_INT 2
65366: ARRAY
65367: PPUSH
65368: CALL_OW 116
65372: GO 65663
// if path > tag then
65374: LD_VAR 0 2
65378: PUSH
65379: LD_VAR 0 9
65383: GREATER
65384: IFFALSE 65592
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65386: LD_ADDR_VAR 0 6
65390: PUSH
65391: LD_VAR 0 5
65395: PPUSH
65396: LD_INT 91
65398: PUSH
65399: LD_VAR 0 4
65403: PUSH
65404: LD_INT 8
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: PPUSH
65412: CALL_OW 72
65416: ST_TO_ADDR
// if nearEnemy then
65417: LD_VAR 0 6
65421: IFFALSE 65490
// begin if GetWeapon ( i ) = ru_time_lapser then
65423: LD_VAR 0 4
65427: PPUSH
65428: CALL_OW 264
65432: PUSH
65433: LD_INT 49
65435: EQUAL
65436: IFFALSE 65464
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65438: LD_VAR 0 4
65442: PPUSH
65443: LD_VAR 0 6
65447: PPUSH
65448: LD_VAR 0 4
65452: PPUSH
65453: CALL_OW 74
65457: PPUSH
65458: CALL_OW 112
65462: GO 65488
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65464: LD_VAR 0 4
65468: PPUSH
65469: LD_VAR 0 6
65473: PPUSH
65474: LD_VAR 0 4
65478: PPUSH
65479: CALL_OW 74
65483: PPUSH
65484: CALL 66592 0 2
// end else
65488: GO 65590
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65490: LD_VAR 0 4
65494: PPUSH
65495: LD_VAR 0 2
65499: PUSH
65500: LD_VAR 0 9
65504: ARRAY
65505: PUSH
65506: LD_INT 1
65508: ARRAY
65509: PPUSH
65510: LD_VAR 0 2
65514: PUSH
65515: LD_VAR 0 9
65519: ARRAY
65520: PUSH
65521: LD_INT 2
65523: ARRAY
65524: PPUSH
65525: CALL_OW 297
65529: PUSH
65530: LD_INT 6
65532: GREATER
65533: IFFALSE 65576
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65535: LD_VAR 0 4
65539: PPUSH
65540: LD_VAR 0 2
65544: PUSH
65545: LD_VAR 0 9
65549: ARRAY
65550: PUSH
65551: LD_INT 1
65553: ARRAY
65554: PPUSH
65555: LD_VAR 0 2
65559: PUSH
65560: LD_VAR 0 9
65564: ARRAY
65565: PUSH
65566: LD_INT 2
65568: ARRAY
65569: PPUSH
65570: CALL_OW 114
65574: GO 65590
// SetTag ( i , tag ) ;
65576: LD_VAR 0 4
65580: PPUSH
65581: LD_VAR 0 9
65585: PPUSH
65586: CALL_OW 109
// end else
65590: GO 65663
// if enemy then
65592: LD_VAR 0 5
65596: IFFALSE 65663
// begin if GetWeapon ( i ) = ru_time_lapser then
65598: LD_VAR 0 4
65602: PPUSH
65603: CALL_OW 264
65607: PUSH
65608: LD_INT 49
65610: EQUAL
65611: IFFALSE 65639
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65613: LD_VAR 0 4
65617: PPUSH
65618: LD_VAR 0 5
65622: PPUSH
65623: LD_VAR 0 4
65627: PPUSH
65628: CALL_OW 74
65632: PPUSH
65633: CALL_OW 112
65637: GO 65663
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65639: LD_VAR 0 4
65643: PPUSH
65644: LD_VAR 0 5
65648: PPUSH
65649: LD_VAR 0 4
65653: PPUSH
65654: CALL_OW 74
65658: PPUSH
65659: CALL 66592 0 2
// end ; end ;
65663: GO 65243
65665: POP
65666: POP
// end ;
65667: LD_VAR 0 3
65671: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65672: LD_INT 0
65674: PPUSH
65675: PPUSH
65676: PPUSH
// if not unit or IsInUnit ( unit ) then
65677: LD_VAR 0 1
65681: NOT
65682: PUSH
65683: LD_VAR 0 1
65687: PPUSH
65688: CALL_OW 310
65692: OR
65693: IFFALSE 65697
// exit ;
65695: GO 65788
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65697: LD_ADDR_VAR 0 4
65701: PUSH
65702: LD_VAR 0 1
65706: PPUSH
65707: CALL_OW 250
65711: PPUSH
65712: LD_VAR 0 2
65716: PPUSH
65717: LD_INT 1
65719: PPUSH
65720: CALL_OW 272
65724: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65725: LD_ADDR_VAR 0 5
65729: PUSH
65730: LD_VAR 0 1
65734: PPUSH
65735: CALL_OW 251
65739: PPUSH
65740: LD_VAR 0 2
65744: PPUSH
65745: LD_INT 1
65747: PPUSH
65748: CALL_OW 273
65752: ST_TO_ADDR
// if ValidHex ( x , y ) then
65753: LD_VAR 0 4
65757: PPUSH
65758: LD_VAR 0 5
65762: PPUSH
65763: CALL_OW 488
65767: IFFALSE 65788
// ComTurnXY ( unit , x , y ) ;
65769: LD_VAR 0 1
65773: PPUSH
65774: LD_VAR 0 4
65778: PPUSH
65779: LD_VAR 0 5
65783: PPUSH
65784: CALL_OW 118
// end ;
65788: LD_VAR 0 3
65792: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65793: LD_INT 0
65795: PPUSH
65796: PPUSH
// result := false ;
65797: LD_ADDR_VAR 0 3
65801: PUSH
65802: LD_INT 0
65804: ST_TO_ADDR
// if not units then
65805: LD_VAR 0 2
65809: NOT
65810: IFFALSE 65814
// exit ;
65812: GO 65859
// for i in units do
65814: LD_ADDR_VAR 0 4
65818: PUSH
65819: LD_VAR 0 2
65823: PUSH
65824: FOR_IN
65825: IFFALSE 65857
// if See ( side , i ) then
65827: LD_VAR 0 1
65831: PPUSH
65832: LD_VAR 0 4
65836: PPUSH
65837: CALL_OW 292
65841: IFFALSE 65855
// begin result := true ;
65843: LD_ADDR_VAR 0 3
65847: PUSH
65848: LD_INT 1
65850: ST_TO_ADDR
// exit ;
65851: POP
65852: POP
65853: GO 65859
// end ;
65855: GO 65824
65857: POP
65858: POP
// end ;
65859: LD_VAR 0 3
65863: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65864: LD_INT 0
65866: PPUSH
65867: PPUSH
65868: PPUSH
65869: PPUSH
// if not unit or not points then
65870: LD_VAR 0 1
65874: NOT
65875: PUSH
65876: LD_VAR 0 2
65880: NOT
65881: OR
65882: IFFALSE 65886
// exit ;
65884: GO 65976
// dist := 99999 ;
65886: LD_ADDR_VAR 0 5
65890: PUSH
65891: LD_INT 99999
65893: ST_TO_ADDR
// for i in points do
65894: LD_ADDR_VAR 0 4
65898: PUSH
65899: LD_VAR 0 2
65903: PUSH
65904: FOR_IN
65905: IFFALSE 65974
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65907: LD_ADDR_VAR 0 6
65911: PUSH
65912: LD_VAR 0 1
65916: PPUSH
65917: LD_VAR 0 4
65921: PUSH
65922: LD_INT 1
65924: ARRAY
65925: PPUSH
65926: LD_VAR 0 4
65930: PUSH
65931: LD_INT 2
65933: ARRAY
65934: PPUSH
65935: CALL_OW 297
65939: ST_TO_ADDR
// if tmpDist < dist then
65940: LD_VAR 0 6
65944: PUSH
65945: LD_VAR 0 5
65949: LESS
65950: IFFALSE 65972
// begin result := i ;
65952: LD_ADDR_VAR 0 3
65956: PUSH
65957: LD_VAR 0 4
65961: ST_TO_ADDR
// dist := tmpDist ;
65962: LD_ADDR_VAR 0 5
65966: PUSH
65967: LD_VAR 0 6
65971: ST_TO_ADDR
// end ; end ;
65972: GO 65904
65974: POP
65975: POP
// end ;
65976: LD_VAR 0 3
65980: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65981: LD_INT 0
65983: PPUSH
// uc_side := side ;
65984: LD_ADDR_OWVAR 20
65988: PUSH
65989: LD_VAR 0 1
65993: ST_TO_ADDR
// uc_nation := 3 ;
65994: LD_ADDR_OWVAR 21
65998: PUSH
65999: LD_INT 3
66001: ST_TO_ADDR
// vc_chassis := 25 ;
66002: LD_ADDR_OWVAR 37
66006: PUSH
66007: LD_INT 25
66009: ST_TO_ADDR
// vc_engine := engine_siberite ;
66010: LD_ADDR_OWVAR 39
66014: PUSH
66015: LD_INT 3
66017: ST_TO_ADDR
// vc_control := control_computer ;
66018: LD_ADDR_OWVAR 38
66022: PUSH
66023: LD_INT 3
66025: ST_TO_ADDR
// vc_weapon := 59 ;
66026: LD_ADDR_OWVAR 40
66030: PUSH
66031: LD_INT 59
66033: ST_TO_ADDR
// result := CreateVehicle ;
66034: LD_ADDR_VAR 0 5
66038: PUSH
66039: CALL_OW 45
66043: ST_TO_ADDR
// SetDir ( result , d ) ;
66044: LD_VAR 0 5
66048: PPUSH
66049: LD_VAR 0 4
66053: PPUSH
66054: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66058: LD_VAR 0 5
66062: PPUSH
66063: LD_VAR 0 2
66067: PPUSH
66068: LD_VAR 0 3
66072: PPUSH
66073: LD_INT 0
66075: PPUSH
66076: CALL_OW 48
// end ;
66080: LD_VAR 0 5
66084: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66085: LD_INT 0
66087: PPUSH
66088: PPUSH
66089: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66090: LD_ADDR_VAR 0 2
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: LD_INT 0
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66113: LD_VAR 0 1
66117: NOT
66118: PUSH
66119: LD_VAR 0 1
66123: PPUSH
66124: CALL_OW 264
66128: PUSH
66129: LD_INT 12
66131: PUSH
66132: LD_INT 51
66134: PUSH
66135: LD_INT 32
66137: PUSH
66138: LD_INT 89
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: IN
66147: NOT
66148: OR
66149: IFFALSE 66153
// exit ;
66151: GO 66251
// for i := 1 to 3 do
66153: LD_ADDR_VAR 0 3
66157: PUSH
66158: DOUBLE
66159: LD_INT 1
66161: DEC
66162: ST_TO_ADDR
66163: LD_INT 3
66165: PUSH
66166: FOR_TO
66167: IFFALSE 66249
// begin tmp := GetCargo ( cargo , i ) ;
66169: LD_ADDR_VAR 0 4
66173: PUSH
66174: LD_VAR 0 1
66178: PPUSH
66179: LD_VAR 0 3
66183: PPUSH
66184: CALL_OW 289
66188: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66189: LD_ADDR_VAR 0 2
66193: PUSH
66194: LD_VAR 0 2
66198: PPUSH
66199: LD_VAR 0 3
66203: PPUSH
66204: LD_VAR 0 4
66208: PPUSH
66209: CALL_OW 1
66213: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66214: LD_ADDR_VAR 0 2
66218: PUSH
66219: LD_VAR 0 2
66223: PPUSH
66224: LD_INT 4
66226: PPUSH
66227: LD_VAR 0 2
66231: PUSH
66232: LD_INT 4
66234: ARRAY
66235: PUSH
66236: LD_VAR 0 4
66240: PLUS
66241: PPUSH
66242: CALL_OW 1
66246: ST_TO_ADDR
// end ;
66247: GO 66166
66249: POP
66250: POP
// end ;
66251: LD_VAR 0 2
66255: RET
// export function Length ( array ) ; begin
66256: LD_INT 0
66258: PPUSH
// result := array + 0 ;
66259: LD_ADDR_VAR 0 2
66263: PUSH
66264: LD_VAR 0 1
66268: PUSH
66269: LD_INT 0
66271: PLUS
66272: ST_TO_ADDR
// end ;
66273: LD_VAR 0 2
66277: RET
// export function PrepareArray ( array ) ; begin
66278: LD_INT 0
66280: PPUSH
// result := array diff 0 ;
66281: LD_ADDR_VAR 0 2
66285: PUSH
66286: LD_VAR 0 1
66290: PUSH
66291: LD_INT 0
66293: DIFF
66294: ST_TO_ADDR
// if not result [ 1 ] then
66295: LD_VAR 0 2
66299: PUSH
66300: LD_INT 1
66302: ARRAY
66303: NOT
66304: IFFALSE 66324
// result := Delete ( result , 1 ) ;
66306: LD_ADDR_VAR 0 2
66310: PUSH
66311: LD_VAR 0 2
66315: PPUSH
66316: LD_INT 1
66318: PPUSH
66319: CALL_OW 3
66323: ST_TO_ADDR
// end ;
66324: LD_VAR 0 2
66328: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66329: LD_INT 0
66331: PPUSH
66332: PPUSH
66333: PPUSH
66334: PPUSH
// sibRocketRange := 25 ;
66335: LD_ADDR_VAR 0 6
66339: PUSH
66340: LD_INT 25
66342: ST_TO_ADDR
// result := false ;
66343: LD_ADDR_VAR 0 4
66347: PUSH
66348: LD_INT 0
66350: ST_TO_ADDR
// for i := 0 to 5 do
66351: LD_ADDR_VAR 0 5
66355: PUSH
66356: DOUBLE
66357: LD_INT 0
66359: DEC
66360: ST_TO_ADDR
66361: LD_INT 5
66363: PUSH
66364: FOR_TO
66365: IFFALSE 66432
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66367: LD_VAR 0 1
66371: PPUSH
66372: LD_VAR 0 5
66376: PPUSH
66377: LD_VAR 0 6
66381: PPUSH
66382: CALL_OW 272
66386: PPUSH
66387: LD_VAR 0 2
66391: PPUSH
66392: LD_VAR 0 5
66396: PPUSH
66397: LD_VAR 0 6
66401: PPUSH
66402: CALL_OW 273
66406: PPUSH
66407: LD_VAR 0 3
66411: PPUSH
66412: CALL_OW 309
66416: IFFALSE 66430
// begin result := true ;
66418: LD_ADDR_VAR 0 4
66422: PUSH
66423: LD_INT 1
66425: ST_TO_ADDR
// exit ;
66426: POP
66427: POP
66428: GO 66434
// end ;
66430: GO 66364
66432: POP
66433: POP
// end ;
66434: LD_VAR 0 4
66438: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66439: LD_INT 0
66441: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66442: LD_VAR 0 1
66446: PPUSH
66447: LD_VAR 0 2
66451: PPUSH
66452: LD_INT 0
66454: PPUSH
66455: LD_INT 0
66457: PPUSH
66458: LD_INT 1
66460: PPUSH
66461: LD_INT 0
66463: PPUSH
66464: CALL_OW 587
// end ;
66468: LD_VAR 0 3
66472: RET
// export function CenterOnNow ( unit ) ; begin
66473: LD_INT 0
66475: PPUSH
// result := IsInUnit ( unit ) ;
66476: LD_ADDR_VAR 0 2
66480: PUSH
66481: LD_VAR 0 1
66485: PPUSH
66486: CALL_OW 310
66490: ST_TO_ADDR
// if not result then
66491: LD_VAR 0 2
66495: NOT
66496: IFFALSE 66508
// result := unit ;
66498: LD_ADDR_VAR 0 2
66502: PUSH
66503: LD_VAR 0 1
66507: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66508: LD_VAR 0 1
66512: PPUSH
66513: CALL_OW 87
// end ;
66517: LD_VAR 0 2
66521: RET
// export function ComMoveHex ( unit , hex ) ; begin
66522: LD_INT 0
66524: PPUSH
// if not hex then
66525: LD_VAR 0 2
66529: NOT
66530: IFFALSE 66534
// exit ;
66532: GO 66587
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66534: LD_VAR 0 2
66538: PUSH
66539: LD_INT 1
66541: ARRAY
66542: PPUSH
66543: LD_VAR 0 2
66547: PUSH
66548: LD_INT 2
66550: ARRAY
66551: PPUSH
66552: CALL_OW 428
66556: IFFALSE 66560
// exit ;
66558: GO 66587
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66560: LD_VAR 0 1
66564: PPUSH
66565: LD_VAR 0 2
66569: PUSH
66570: LD_INT 1
66572: ARRAY
66573: PPUSH
66574: LD_VAR 0 2
66578: PUSH
66579: LD_INT 2
66581: ARRAY
66582: PPUSH
66583: CALL_OW 111
// end ;
66587: LD_VAR 0 3
66591: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66592: LD_INT 0
66594: PPUSH
66595: PPUSH
66596: PPUSH
// if not unit or not enemy then
66597: LD_VAR 0 1
66601: NOT
66602: PUSH
66603: LD_VAR 0 2
66607: NOT
66608: OR
66609: IFFALSE 66613
// exit ;
66611: GO 66737
// x := GetX ( enemy ) ;
66613: LD_ADDR_VAR 0 4
66617: PUSH
66618: LD_VAR 0 2
66622: PPUSH
66623: CALL_OW 250
66627: ST_TO_ADDR
// y := GetY ( enemy ) ;
66628: LD_ADDR_VAR 0 5
66632: PUSH
66633: LD_VAR 0 2
66637: PPUSH
66638: CALL_OW 251
66642: ST_TO_ADDR
// if ValidHex ( x , y ) then
66643: LD_VAR 0 4
66647: PPUSH
66648: LD_VAR 0 5
66652: PPUSH
66653: CALL_OW 488
66657: IFFALSE 66737
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66659: LD_VAR 0 2
66663: PPUSH
66664: CALL_OW 247
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: LD_INT 2
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: IN
66679: PUSH
66680: LD_VAR 0 1
66684: PPUSH
66685: CALL_OW 255
66689: PPUSH
66690: LD_VAR 0 2
66694: PPUSH
66695: CALL_OW 292
66699: OR
66700: IFFALSE 66718
// ComAttackUnit ( unit , enemy ) else
66702: LD_VAR 0 1
66706: PPUSH
66707: LD_VAR 0 2
66711: PPUSH
66712: CALL_OW 115
66716: GO 66737
// ComAgressiveMove ( unit , x , y ) ;
66718: LD_VAR 0 1
66722: PPUSH
66723: LD_VAR 0 4
66727: PPUSH
66728: LD_VAR 0 5
66732: PPUSH
66733: CALL_OW 114
// end ;
66737: LD_VAR 0 3
66741: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66742: LD_INT 0
66744: PPUSH
66745: PPUSH
66746: PPUSH
// list := AreaToList ( area , 0 ) ;
66747: LD_ADDR_VAR 0 5
66751: PUSH
66752: LD_VAR 0 1
66756: PPUSH
66757: LD_INT 0
66759: PPUSH
66760: CALL_OW 517
66764: ST_TO_ADDR
// if not list then
66765: LD_VAR 0 5
66769: NOT
66770: IFFALSE 66774
// exit ;
66772: GO 66904
// if all then
66774: LD_VAR 0 2
66778: IFFALSE 66866
// begin for i := 1 to list [ 1 ] do
66780: LD_ADDR_VAR 0 4
66784: PUSH
66785: DOUBLE
66786: LD_INT 1
66788: DEC
66789: ST_TO_ADDR
66790: LD_VAR 0 5
66794: PUSH
66795: LD_INT 1
66797: ARRAY
66798: PUSH
66799: FOR_TO
66800: IFFALSE 66862
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
66802: LD_ADDR_VAR 0 3
66806: PUSH
66807: LD_VAR 0 3
66811: PPUSH
66812: LD_VAR 0 3
66816: PUSH
66817: LD_INT 1
66819: PLUS
66820: PPUSH
66821: LD_VAR 0 5
66825: PUSH
66826: LD_INT 1
66828: ARRAY
66829: PUSH
66830: LD_VAR 0 4
66834: ARRAY
66835: PUSH
66836: LD_VAR 0 5
66840: PUSH
66841: LD_INT 2
66843: ARRAY
66844: PUSH
66845: LD_VAR 0 4
66849: ARRAY
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PPUSH
66855: CALL_OW 1
66859: ST_TO_ADDR
66860: GO 66799
66862: POP
66863: POP
// exit ;
66864: GO 66904
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
66866: LD_ADDR_VAR 0 3
66870: PUSH
66871: LD_VAR 0 5
66875: PUSH
66876: LD_INT 1
66878: ARRAY
66879: PUSH
66880: LD_INT 1
66882: ARRAY
66883: PUSH
66884: LD_VAR 0 5
66888: PUSH
66889: LD_INT 2
66891: ARRAY
66892: PUSH
66893: LD_INT 1
66895: ARRAY
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: ST_TO_ADDR
// end ;
66904: LD_VAR 0 3
66908: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
66909: LD_INT 0
66911: PPUSH
66912: PPUSH
// list := AreaToList ( area , 0 ) ;
66913: LD_ADDR_VAR 0 4
66917: PUSH
66918: LD_VAR 0 1
66922: PPUSH
66923: LD_INT 0
66925: PPUSH
66926: CALL_OW 517
66930: ST_TO_ADDR
// if not list then
66931: LD_VAR 0 4
66935: NOT
66936: IFFALSE 66940
// exit ;
66938: GO 66981
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
66940: LD_ADDR_VAR 0 3
66944: PUSH
66945: LD_VAR 0 4
66949: PUSH
66950: LD_INT 1
66952: ARRAY
66953: PUSH
66954: LD_INT 1
66956: ARRAY
66957: PUSH
66958: LD_VAR 0 4
66962: PUSH
66963: LD_INT 2
66965: ARRAY
66966: PUSH
66967: LD_INT 1
66969: ARRAY
66970: PUSH
66971: LD_VAR 0 2
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: LIST
66980: ST_TO_ADDR
// end ;
66981: LD_VAR 0 3
66985: RET
// export function First ( array ) ; begin
66986: LD_INT 0
66988: PPUSH
// if not array then
66989: LD_VAR 0 1
66993: NOT
66994: IFFALSE 66998
// exit ;
66996: GO 67012
// result := array [ 1 ] ;
66998: LD_ADDR_VAR 0 2
67002: PUSH
67003: LD_VAR 0 1
67007: PUSH
67008: LD_INT 1
67010: ARRAY
67011: ST_TO_ADDR
// end ;
67012: LD_VAR 0 2
67016: RET
// export function Last ( array ) ; begin
67017: LD_INT 0
67019: PPUSH
// if not array then
67020: LD_VAR 0 1
67024: NOT
67025: IFFALSE 67029
// exit ;
67027: GO 67045
// result := array [ array ] ;
67029: LD_ADDR_VAR 0 2
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: LD_VAR 0 1
67043: ARRAY
67044: ST_TO_ADDR
// end ;
67045: LD_VAR 0 2
67049: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67050: LD_INT 0
67052: PPUSH
67053: PPUSH
// result := [ ] ;
67054: LD_ADDR_VAR 0 5
67058: PUSH
67059: EMPTY
67060: ST_TO_ADDR
// if not array then
67061: LD_VAR 0 1
67065: NOT
67066: IFFALSE 67070
// exit ;
67068: GO 67182
// for i := 1 to array do
67070: LD_ADDR_VAR 0 6
67074: PUSH
67075: DOUBLE
67076: LD_INT 1
67078: DEC
67079: ST_TO_ADDR
67080: LD_VAR 0 1
67084: PUSH
67085: FOR_TO
67086: IFFALSE 67180
// if array [ i ] [ index ] = value then
67088: LD_VAR 0 1
67092: PUSH
67093: LD_VAR 0 6
67097: ARRAY
67098: PUSH
67099: LD_VAR 0 2
67103: ARRAY
67104: PUSH
67105: LD_VAR 0 3
67109: EQUAL
67110: IFFALSE 67178
// begin if indexColumn then
67112: LD_VAR 0 4
67116: IFFALSE 67152
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67118: LD_ADDR_VAR 0 5
67122: PUSH
67123: LD_VAR 0 5
67127: PPUSH
67128: LD_VAR 0 1
67132: PUSH
67133: LD_VAR 0 6
67137: ARRAY
67138: PUSH
67139: LD_VAR 0 4
67143: ARRAY
67144: PPUSH
67145: CALL 62520 0 2
67149: ST_TO_ADDR
67150: GO 67178
// result := Join ( result , array [ i ] ) ;
67152: LD_ADDR_VAR 0 5
67156: PUSH
67157: LD_VAR 0 5
67161: PPUSH
67162: LD_VAR 0 1
67166: PUSH
67167: LD_VAR 0 6
67171: ARRAY
67172: PPUSH
67173: CALL 62520 0 2
67177: ST_TO_ADDR
// end ;
67178: GO 67085
67180: POP
67181: POP
// end ;
67182: LD_VAR 0 5
67186: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
67187: LD_INT 0
67189: PPUSH
67190: PPUSH
67191: PPUSH
// if btype = b_depot then
67192: LD_VAR 0 2
67196: PUSH
67197: LD_INT 0
67199: EQUAL
67200: IFFALSE 67212
// begin result := true ;
67202: LD_ADDR_VAR 0 3
67206: PUSH
67207: LD_INT 1
67209: ST_TO_ADDR
// exit ;
67210: GO 67328
// end ; pom := GetBase ( depot ) ;
67212: LD_ADDR_VAR 0 4
67216: PUSH
67217: LD_VAR 0 1
67221: PPUSH
67222: CALL_OW 274
67226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
67227: LD_ADDR_VAR 0 5
67231: PUSH
67232: LD_VAR 0 2
67236: PPUSH
67237: LD_VAR 0 1
67241: PPUSH
67242: CALL_OW 248
67246: PPUSH
67247: CALL_OW 450
67251: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
67252: LD_ADDR_VAR 0 3
67256: PUSH
67257: LD_VAR 0 4
67261: PPUSH
67262: LD_INT 1
67264: PPUSH
67265: CALL_OW 275
67269: PUSH
67270: LD_VAR 0 5
67274: PUSH
67275: LD_INT 1
67277: ARRAY
67278: GREATEREQUAL
67279: PUSH
67280: LD_VAR 0 4
67284: PPUSH
67285: LD_INT 2
67287: PPUSH
67288: CALL_OW 275
67292: PUSH
67293: LD_VAR 0 5
67297: PUSH
67298: LD_INT 2
67300: ARRAY
67301: GREATEREQUAL
67302: AND
67303: PUSH
67304: LD_VAR 0 4
67308: PPUSH
67309: LD_INT 3
67311: PPUSH
67312: CALL_OW 275
67316: PUSH
67317: LD_VAR 0 5
67321: PUSH
67322: LD_INT 3
67324: ARRAY
67325: GREATEREQUAL
67326: AND
67327: ST_TO_ADDR
// end ;
67328: LD_VAR 0 3
67332: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67333: LD_INT 0
67335: PPUSH
// if not vehicles or not parkingPoint then
67336: LD_VAR 0 1
67340: NOT
67341: PUSH
67342: LD_VAR 0 2
67346: NOT
67347: OR
67348: IFFALSE 67352
// exit ;
67350: GO 67450
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67352: LD_ADDR_VAR 0 1
67356: PUSH
67357: LD_VAR 0 1
67361: PPUSH
67362: LD_INT 50
67364: PUSH
67365: EMPTY
67366: LIST
67367: PUSH
67368: LD_INT 3
67370: PUSH
67371: LD_INT 92
67373: PUSH
67374: LD_VAR 0 2
67378: PUSH
67379: LD_INT 1
67381: ARRAY
67382: PUSH
67383: LD_VAR 0 2
67387: PUSH
67388: LD_INT 2
67390: ARRAY
67391: PUSH
67392: LD_INT 8
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PPUSH
67409: CALL_OW 72
67413: ST_TO_ADDR
// if not vehicles then
67414: LD_VAR 0 1
67418: NOT
67419: IFFALSE 67423
// exit ;
67421: GO 67450
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67423: LD_VAR 0 1
67427: PPUSH
67428: LD_VAR 0 2
67432: PUSH
67433: LD_INT 1
67435: ARRAY
67436: PPUSH
67437: LD_VAR 0 2
67441: PUSH
67442: LD_INT 2
67444: ARRAY
67445: PPUSH
67446: CALL_OW 111
// end ;
67450: LD_VAR 0 3
67454: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67455: LD_INT 0
67457: PPUSH
67458: PPUSH
67459: PPUSH
// if not side or not area then
67460: LD_VAR 0 1
67464: NOT
67465: PUSH
67466: LD_VAR 0 2
67470: NOT
67471: OR
67472: IFFALSE 67476
// exit ;
67474: GO 67595
// tmp := AreaToList ( area , 0 ) ;
67476: LD_ADDR_VAR 0 5
67480: PUSH
67481: LD_VAR 0 2
67485: PPUSH
67486: LD_INT 0
67488: PPUSH
67489: CALL_OW 517
67493: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67494: LD_ADDR_VAR 0 4
67498: PUSH
67499: DOUBLE
67500: LD_INT 1
67502: DEC
67503: ST_TO_ADDR
67504: LD_VAR 0 5
67508: PUSH
67509: LD_INT 1
67511: ARRAY
67512: PUSH
67513: FOR_TO
67514: IFFALSE 67593
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67516: LD_VAR 0 5
67520: PUSH
67521: LD_INT 1
67523: ARRAY
67524: PUSH
67525: LD_VAR 0 4
67529: ARRAY
67530: PPUSH
67531: LD_VAR 0 5
67535: PUSH
67536: LD_INT 2
67538: ARRAY
67539: PUSH
67540: LD_VAR 0 4
67544: ARRAY
67545: PPUSH
67546: CALL_OW 351
67550: IFFALSE 67591
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67552: LD_VAR 0 5
67556: PUSH
67557: LD_INT 1
67559: ARRAY
67560: PUSH
67561: LD_VAR 0 4
67565: ARRAY
67566: PPUSH
67567: LD_VAR 0 5
67571: PUSH
67572: LD_INT 2
67574: ARRAY
67575: PUSH
67576: LD_VAR 0 4
67580: ARRAY
67581: PPUSH
67582: LD_VAR 0 1
67586: PPUSH
67587: CALL_OW 244
// end ;
67591: GO 67513
67593: POP
67594: POP
// end ; end_of_file
67595: LD_VAR 0 3
67599: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67600: LD_VAR 0 1
67604: PPUSH
67605: LD_VAR 0 2
67609: PPUSH
67610: LD_VAR 0 3
67614: PPUSH
67615: LD_VAR 0 4
67619: PPUSH
67620: LD_VAR 0 5
67624: PPUSH
67625: LD_VAR 0 6
67629: PPUSH
67630: CALL 4288 0 6
// end ;
67634: PPOPN 6
67636: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67637: LD_INT 0
67639: PPUSH
// begin if not units then
67640: LD_VAR 0 1
67644: NOT
67645: IFFALSE 67649
// exit ;
67647: GO 67649
// end ;
67649: PPOPN 7
67651: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67652: CALL 4175 0 0
// end ;
67656: PPOPN 1
67658: END
