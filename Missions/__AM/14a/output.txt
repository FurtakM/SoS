// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 18736 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 18630 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 18752 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 23270 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 23270 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 28134 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 28134 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 28134 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 28134 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 23270 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 23270 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 23270 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 23270 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 23270 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 23270 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 23270 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 23270 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 23270 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 23270 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 23270 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 23270 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 23270 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 23270 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 23270 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 28134 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_EXP 40
3767: PUSH
3768: LD_INT 32
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: IN
3777: PUSH
3778: LD_EXP 3
3782: PPUSH
3783: CALL_OW 310
3787: PPUSH
3788: CALL_OW 264
3792: PUSH
3793: LD_INT 51
3795: PUSH
3796: LD_INT 12
3798: PUSH
3799: LD_EXP 40
3803: PUSH
3804: LD_INT 32
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: IN
3813: OR
3814: AND
3815: IFFALSE 4025
3817: GO 3819
3819: DISABLE
3820: LD_INT 0
3822: PPUSH
3823: PPUSH
3824: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3825: LD_ADDR_VAR 0 2
3829: PUSH
3830: LD_EXP 2
3834: PPUSH
3835: CALL_OW 310
3839: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: LD_EXP 3
3849: PPUSH
3850: CALL_OW 310
3854: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3855: LD_VAR 0 2
3859: PPUSH
3860: CALL_OW 265
3864: PUSH
3865: LD_VAR 0 2
3869: PPUSH
3870: CALL_OW 262
3874: PUSH
3875: LD_INT 1
3877: PUSH
3878: LD_VAR 0 2
3882: PPUSH
3883: CALL_OW 264
3887: PUSH
3888: LD_VAR 0 2
3892: PPUSH
3893: CALL_OW 271
3897: PUSH
3898: LD_VAR 0 2
3902: PPUSH
3903: CALL_OW 248
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PPUSH
3916: LD_STRING 14a_JMMVeh
3918: PPUSH
3919: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3923: LD_VAR 0 3
3927: PPUSH
3928: CALL_OW 265
3932: PUSH
3933: LD_VAR 0 3
3937: PPUSH
3938: CALL_OW 262
3942: PUSH
3943: LD_INT 1
3945: PUSH
3946: LD_VAR 0 3
3950: PPUSH
3951: CALL_OW 264
3955: PUSH
3956: LD_VAR 0 3
3960: PPUSH
3961: CALL_OW 271
3965: PUSH
3966: LD_VAR 0 3
3970: PPUSH
3971: CALL_OW 248
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: LD_STRING 14a_BurlakVeh
3986: PPUSH
3987: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3991: LD_EXP 2
3995: PPUSH
3996: LD_STRING 14a_JMM
3998: PPUSH
3999: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4003: LD_EXP 3
4007: PPUSH
4008: LD_STRING 14a_Burlak
4010: PPUSH
4011: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4015: LD_INT 1
4017: PPUSH
4018: LD_STRING %_cont
4020: PPUSH
4021: CALL_OW 340
// end ;
4025: PPOPN 3
4027: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4028: LD_INT 22
4030: PUSH
4031: LD_INT 4
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: LD_INT 24
4043: PUSH
4044: LD_INT 950
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL_OW 69
4063: IFFALSE 4075
4065: GO 4067
4067: DISABLE
// YouLost ( FriendlyFire ) ;
4068: LD_STRING FriendlyFire
4070: PPUSH
4071: CALL_OW 104
4075: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4076: LD_EXP 3
4080: PPUSH
4081: CALL_OW 301
4085: IFFALSE 4097
4087: GO 4089
4089: DISABLE
// YouLost ( Burlak ) ;
4090: LD_STRING Burlak
4092: PPUSH
4093: CALL_OW 104
4097: END
// every 0 0$1 trigger IsDead ( JMM ) do
4098: LD_EXP 2
4102: PPUSH
4103: CALL_OW 301
4107: IFFALSE 4119
4109: GO 4111
4111: DISABLE
// YouLost ( JMM ) ; end_of_file
4112: LD_STRING JMM
4114: PPUSH
4115: CALL_OW 104
4119: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4120: LD_INT 0
4122: PPUSH
// ar_miner := 81 ;
4123: LD_ADDR_EXP 46
4127: PUSH
4128: LD_INT 81
4130: ST_TO_ADDR
// ar_crane := 88 ;
4131: LD_ADDR_EXP 45
4135: PUSH
4136: LD_INT 88
4138: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4139: LD_ADDR_EXP 40
4143: PUSH
4144: LD_INT 89
4146: ST_TO_ADDR
// us_hack := 99 ;
4147: LD_ADDR_EXP 41
4151: PUSH
4152: LD_INT 99
4154: ST_TO_ADDR
// us_artillery := 97 ;
4155: LD_ADDR_EXP 42
4159: PUSH
4160: LD_INT 97
4162: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4163: LD_ADDR_EXP 43
4167: PUSH
4168: LD_INT 91
4170: ST_TO_ADDR
// ar_mortar := 92 ;
4171: LD_ADDR_EXP 44
4175: PUSH
4176: LD_INT 92
4178: ST_TO_ADDR
// ru_flamethrower := 93 ;
4179: LD_ADDR_EXP 47
4183: PUSH
4184: LD_INT 93
4186: ST_TO_ADDR
// ru_radar := 98 ;
4187: LD_ADDR_EXP 39
4191: PUSH
4192: LD_INT 98
4194: ST_TO_ADDR
// tech_Artillery := 80 ;
4195: LD_ADDR_EXP 48
4199: PUSH
4200: LD_INT 80
4202: ST_TO_ADDR
// tech_RadMat := 81 ;
4203: LD_ADDR_EXP 49
4207: PUSH
4208: LD_INT 81
4210: ST_TO_ADDR
// tech_BasicTools := 82 ;
4211: LD_ADDR_EXP 50
4215: PUSH
4216: LD_INT 82
4218: ST_TO_ADDR
// tech_Cargo := 83 ;
4219: LD_ADDR_EXP 51
4223: PUSH
4224: LD_INT 83
4226: ST_TO_ADDR
// tech_Track := 84 ;
4227: LD_ADDR_EXP 52
4231: PUSH
4232: LD_INT 84
4234: ST_TO_ADDR
// tech_Crane := 85 ;
4235: LD_ADDR_EXP 53
4239: PUSH
4240: LD_INT 85
4242: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4243: LD_ADDR_EXP 54
4247: PUSH
4248: LD_INT 86
4250: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4251: LD_ADDR_EXP 55
4255: PUSH
4256: LD_INT 87
4258: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4259: LD_ADDR_EXP 56
4263: PUSH
4264: LD_INT 88
4266: ST_TO_ADDR
// class_mastodont := 31 ;
4267: LD_ADDR_EXP 57
4271: PUSH
4272: LD_INT 31
4274: ST_TO_ADDR
// class_horse := 21 ;
4275: LD_ADDR_EXP 58
4279: PUSH
4280: LD_INT 21
4282: ST_TO_ADDR
// end ;
4283: LD_VAR 0 1
4287: RET
// every 1 do
4288: GO 4290
4290: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4291: CALL 4120 0 0
4295: END
// every 0 0$1 do
4296: GO 4298
4298: DISABLE
// begin enable ;
4299: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4300: LD_STRING updateTimer(
4302: PUSH
4303: LD_OWVAR 1
4307: STR
4308: PUSH
4309: LD_STRING );
4311: STR
4312: PPUSH
4313: CALL_OW 559
// end ;
4317: END
// export function SOS_MapStart ( ) ; begin
4318: LD_INT 0
4320: PPUSH
// if streamModeActive then
4321: LD_EXP 59
4325: IFFALSE 4334
// DefineStreamItems ( true ) ;
4327: LD_INT 1
4329: PPUSH
4330: CALL 5984 0 1
// UpdateFactoryWaypoints ( ) ;
4334: CALL 19568 0 0
// end ;
4338: LD_VAR 0 1
4342: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4343: LD_INT 0
4345: PPUSH
// if p2 = 100 then
4346: LD_VAR 0 2
4350: PUSH
4351: LD_INT 100
4353: EQUAL
4354: IFFALSE 5357
// begin if not StreamModeActive then
4356: LD_EXP 59
4360: NOT
4361: IFFALSE 4371
// StreamModeActive := true ;
4363: LD_ADDR_EXP 59
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if p3 = 0 then
4371: LD_VAR 0 3
4375: PUSH
4376: LD_INT 0
4378: EQUAL
4379: IFFALSE 4385
// InitStreamMode ;
4381: CALL 5520 0 0
// if p3 = 1 then
4385: LD_VAR 0 3
4389: PUSH
4390: LD_INT 1
4392: EQUAL
4393: IFFALSE 4403
// sRocket := true ;
4395: LD_ADDR_EXP 64
4399: PUSH
4400: LD_INT 1
4402: ST_TO_ADDR
// if p3 = 2 then
4403: LD_VAR 0 3
4407: PUSH
4408: LD_INT 2
4410: EQUAL
4411: IFFALSE 4421
// sSpeed := true ;
4413: LD_ADDR_EXP 63
4417: PUSH
4418: LD_INT 1
4420: ST_TO_ADDR
// if p3 = 3 then
4421: LD_VAR 0 3
4425: PUSH
4426: LD_INT 3
4428: EQUAL
4429: IFFALSE 4439
// sEngine := true ;
4431: LD_ADDR_EXP 65
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// if p3 = 4 then
4439: LD_VAR 0 3
4443: PUSH
4444: LD_INT 4
4446: EQUAL
4447: IFFALSE 4457
// sSpec := true ;
4449: LD_ADDR_EXP 62
4453: PUSH
4454: LD_INT 1
4456: ST_TO_ADDR
// if p3 = 5 then
4457: LD_VAR 0 3
4461: PUSH
4462: LD_INT 5
4464: EQUAL
4465: IFFALSE 4475
// sLevel := true ;
4467: LD_ADDR_EXP 66
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// if p3 = 6 then
4475: LD_VAR 0 3
4479: PUSH
4480: LD_INT 6
4482: EQUAL
4483: IFFALSE 4493
// sArmoury := true ;
4485: LD_ADDR_EXP 67
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// if p3 = 7 then
4493: LD_VAR 0 3
4497: PUSH
4498: LD_INT 7
4500: EQUAL
4501: IFFALSE 4511
// sRadar := true ;
4503: LD_ADDR_EXP 68
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// if p3 = 8 then
4511: LD_VAR 0 3
4515: PUSH
4516: LD_INT 8
4518: EQUAL
4519: IFFALSE 4529
// sBunker := true ;
4521: LD_ADDR_EXP 69
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if p3 = 9 then
4529: LD_VAR 0 3
4533: PUSH
4534: LD_INT 9
4536: EQUAL
4537: IFFALSE 4547
// sHack := true ;
4539: LD_ADDR_EXP 70
4543: PUSH
4544: LD_INT 1
4546: ST_TO_ADDR
// if p3 = 10 then
4547: LD_VAR 0 3
4551: PUSH
4552: LD_INT 10
4554: EQUAL
4555: IFFALSE 4565
// sFire := true ;
4557: LD_ADDR_EXP 71
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if p3 = 11 then
4565: LD_VAR 0 3
4569: PUSH
4570: LD_INT 11
4572: EQUAL
4573: IFFALSE 4583
// sRefresh := true ;
4575: LD_ADDR_EXP 72
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// if p3 = 12 then
4583: LD_VAR 0 3
4587: PUSH
4588: LD_INT 12
4590: EQUAL
4591: IFFALSE 4601
// sExp := true ;
4593: LD_ADDR_EXP 73
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// if p3 = 13 then
4601: LD_VAR 0 3
4605: PUSH
4606: LD_INT 13
4608: EQUAL
4609: IFFALSE 4619
// sDepot := true ;
4611: LD_ADDR_EXP 74
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// if p3 = 14 then
4619: LD_VAR 0 3
4623: PUSH
4624: LD_INT 14
4626: EQUAL
4627: IFFALSE 4637
// sFlag := true ;
4629: LD_ADDR_EXP 75
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// if p3 = 15 then
4637: LD_VAR 0 3
4641: PUSH
4642: LD_INT 15
4644: EQUAL
4645: IFFALSE 4655
// sKamikadze := true ;
4647: LD_ADDR_EXP 83
4651: PUSH
4652: LD_INT 1
4654: ST_TO_ADDR
// if p3 = 16 then
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 16
4662: EQUAL
4663: IFFALSE 4673
// sTroll := true ;
4665: LD_ADDR_EXP 84
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// if p3 = 17 then
4673: LD_VAR 0 3
4677: PUSH
4678: LD_INT 17
4680: EQUAL
4681: IFFALSE 4691
// sSlow := true ;
4683: LD_ADDR_EXP 85
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// if p3 = 18 then
4691: LD_VAR 0 3
4695: PUSH
4696: LD_INT 18
4698: EQUAL
4699: IFFALSE 4709
// sLack := true ;
4701: LD_ADDR_EXP 86
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// if p3 = 19 then
4709: LD_VAR 0 3
4713: PUSH
4714: LD_INT 19
4716: EQUAL
4717: IFFALSE 4727
// sTank := true ;
4719: LD_ADDR_EXP 88
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// if p3 = 20 then
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 20
4734: EQUAL
4735: IFFALSE 4745
// sRemote := true ;
4737: LD_ADDR_EXP 89
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// if p3 = 21 then
4745: LD_VAR 0 3
4749: PUSH
4750: LD_INT 21
4752: EQUAL
4753: IFFALSE 4763
// sPowell := true ;
4755: LD_ADDR_EXP 90
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// if p3 = 22 then
4763: LD_VAR 0 3
4767: PUSH
4768: LD_INT 22
4770: EQUAL
4771: IFFALSE 4781
// sTeleport := true ;
4773: LD_ADDR_EXP 93
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// if p3 = 23 then
4781: LD_VAR 0 3
4785: PUSH
4786: LD_INT 23
4788: EQUAL
4789: IFFALSE 4799
// sOilTower := true ;
4791: LD_ADDR_EXP 95
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// if p3 = 24 then
4799: LD_VAR 0 3
4803: PUSH
4804: LD_INT 24
4806: EQUAL
4807: IFFALSE 4817
// sShovel := true ;
4809: LD_ADDR_EXP 96
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// if p3 = 25 then
4817: LD_VAR 0 3
4821: PUSH
4822: LD_INT 25
4824: EQUAL
4825: IFFALSE 4835
// sSheik := true ;
4827: LD_ADDR_EXP 97
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// if p3 = 26 then
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 26
4842: EQUAL
4843: IFFALSE 4853
// sEarthquake := true ;
4845: LD_ADDR_EXP 99
4849: PUSH
4850: LD_INT 1
4852: ST_TO_ADDR
// if p3 = 27 then
4853: LD_VAR 0 3
4857: PUSH
4858: LD_INT 27
4860: EQUAL
4861: IFFALSE 4871
// sAI := true ;
4863: LD_ADDR_EXP 100
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// if p3 = 28 then
4871: LD_VAR 0 3
4875: PUSH
4876: LD_INT 28
4878: EQUAL
4879: IFFALSE 4889
// sCargo := true ;
4881: LD_ADDR_EXP 103
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// if p3 = 29 then
4889: LD_VAR 0 3
4893: PUSH
4894: LD_INT 29
4896: EQUAL
4897: IFFALSE 4907
// sDLaser := true ;
4899: LD_ADDR_EXP 104
4903: PUSH
4904: LD_INT 1
4906: ST_TO_ADDR
// if p3 = 30 then
4907: LD_VAR 0 3
4911: PUSH
4912: LD_INT 30
4914: EQUAL
4915: IFFALSE 4925
// sExchange := true ;
4917: LD_ADDR_EXP 105
4921: PUSH
4922: LD_INT 1
4924: ST_TO_ADDR
// if p3 = 31 then
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 31
4932: EQUAL
4933: IFFALSE 4943
// sFac := true ;
4935: LD_ADDR_EXP 106
4939: PUSH
4940: LD_INT 1
4942: ST_TO_ADDR
// if p3 = 32 then
4943: LD_VAR 0 3
4947: PUSH
4948: LD_INT 32
4950: EQUAL
4951: IFFALSE 4961
// sPower := true ;
4953: LD_ADDR_EXP 107
4957: PUSH
4958: LD_INT 1
4960: ST_TO_ADDR
// if p3 = 33 then
4961: LD_VAR 0 3
4965: PUSH
4966: LD_INT 33
4968: EQUAL
4969: IFFALSE 4979
// sRandom := true ;
4971: LD_ADDR_EXP 108
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if p3 = 34 then
4979: LD_VAR 0 3
4983: PUSH
4984: LD_INT 34
4986: EQUAL
4987: IFFALSE 4997
// sShield := true ;
4989: LD_ADDR_EXP 109
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if p3 = 35 then
4997: LD_VAR 0 3
5001: PUSH
5002: LD_INT 35
5004: EQUAL
5005: IFFALSE 5015
// sTime := true ;
5007: LD_ADDR_EXP 110
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// if p3 = 36 then
5015: LD_VAR 0 3
5019: PUSH
5020: LD_INT 36
5022: EQUAL
5023: IFFALSE 5033
// sTools := true ;
5025: LD_ADDR_EXP 111
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// if p3 = 101 then
5033: LD_VAR 0 3
5037: PUSH
5038: LD_INT 101
5040: EQUAL
5041: IFFALSE 5051
// sSold := true ;
5043: LD_ADDR_EXP 76
5047: PUSH
5048: LD_INT 1
5050: ST_TO_ADDR
// if p3 = 102 then
5051: LD_VAR 0 3
5055: PUSH
5056: LD_INT 102
5058: EQUAL
5059: IFFALSE 5069
// sDiff := true ;
5061: LD_ADDR_EXP 77
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// if p3 = 103 then
5069: LD_VAR 0 3
5073: PUSH
5074: LD_INT 103
5076: EQUAL
5077: IFFALSE 5087
// sFog := true ;
5079: LD_ADDR_EXP 80
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// if p3 = 104 then
5087: LD_VAR 0 3
5091: PUSH
5092: LD_INT 104
5094: EQUAL
5095: IFFALSE 5105
// sReset := true ;
5097: LD_ADDR_EXP 81
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// if p3 = 105 then
5105: LD_VAR 0 3
5109: PUSH
5110: LD_INT 105
5112: EQUAL
5113: IFFALSE 5123
// sSun := true ;
5115: LD_ADDR_EXP 82
5119: PUSH
5120: LD_INT 1
5122: ST_TO_ADDR
// if p3 = 106 then
5123: LD_VAR 0 3
5127: PUSH
5128: LD_INT 106
5130: EQUAL
5131: IFFALSE 5141
// sTiger := true ;
5133: LD_ADDR_EXP 78
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// if p3 = 107 then
5141: LD_VAR 0 3
5145: PUSH
5146: LD_INT 107
5148: EQUAL
5149: IFFALSE 5159
// sBomb := true ;
5151: LD_ADDR_EXP 79
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// if p3 = 108 then
5159: LD_VAR 0 3
5163: PUSH
5164: LD_INT 108
5166: EQUAL
5167: IFFALSE 5177
// sWound := true ;
5169: LD_ADDR_EXP 87
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// if p3 = 109 then
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 109
5184: EQUAL
5185: IFFALSE 5195
// sBetray := true ;
5187: LD_ADDR_EXP 91
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// if p3 = 110 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 110
5202: EQUAL
5203: IFFALSE 5213
// sContamin := true ;
5205: LD_ADDR_EXP 92
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if p3 = 111 then
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 111
5220: EQUAL
5221: IFFALSE 5231
// sOil := true ;
5223: LD_ADDR_EXP 94
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// if p3 = 112 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 112
5238: EQUAL
5239: IFFALSE 5249
// sStu := true ;
5241: LD_ADDR_EXP 98
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if p3 = 113 then
5249: LD_VAR 0 3
5253: PUSH
5254: LD_INT 113
5256: EQUAL
5257: IFFALSE 5267
// sBazooka := true ;
5259: LD_ADDR_EXP 101
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if p3 = 114 then
5267: LD_VAR 0 3
5271: PUSH
5272: LD_INT 114
5274: EQUAL
5275: IFFALSE 5285
// sMortar := true ;
5277: LD_ADDR_EXP 102
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// if p3 = 115 then
5285: LD_VAR 0 3
5289: PUSH
5290: LD_INT 115
5292: EQUAL
5293: IFFALSE 5303
// sRanger := true ;
5295: LD_ADDR_EXP 112
5299: PUSH
5300: LD_INT 1
5302: ST_TO_ADDR
// if p3 = 116 then
5303: LD_VAR 0 3
5307: PUSH
5308: LD_INT 116
5310: EQUAL
5311: IFFALSE 5321
// sComputer := true ;
5313: LD_ADDR_EXP 113
5317: PUSH
5318: LD_INT 1
5320: ST_TO_ADDR
// if p3 = 117 then
5321: LD_VAR 0 3
5325: PUSH
5326: LD_INT 117
5328: EQUAL
5329: IFFALSE 5339
// s30 := true ;
5331: LD_ADDR_EXP 114
5335: PUSH
5336: LD_INT 1
5338: ST_TO_ADDR
// if p3 = 118 then
5339: LD_VAR 0 3
5343: PUSH
5344: LD_INT 118
5346: EQUAL
5347: IFFALSE 5357
// s60 := true ;
5349: LD_ADDR_EXP 115
5353: PUSH
5354: LD_INT 1
5356: ST_TO_ADDR
// end ; if p2 = 101 then
5357: LD_VAR 0 2
5361: PUSH
5362: LD_INT 101
5364: EQUAL
5365: IFFALSE 5493
// begin case p3 of 1 :
5367: LD_VAR 0 3
5371: PUSH
5372: LD_INT 1
5374: DOUBLE
5375: EQUAL
5376: IFTRUE 5380
5378: GO 5387
5380: POP
// hHackUnlimitedResources ; 2 :
5381: CALL 17591 0 0
5385: GO 5493
5387: LD_INT 2
5389: DOUBLE
5390: EQUAL
5391: IFTRUE 5395
5393: GO 5402
5395: POP
// hHackSetLevel10 ; 3 :
5396: CALL 17724 0 0
5400: GO 5493
5402: LD_INT 3
5404: DOUBLE
5405: EQUAL
5406: IFTRUE 5410
5408: GO 5417
5410: POP
// hHackSetLevel10YourUnits ; 4 :
5411: CALL 17809 0 0
5415: GO 5493
5417: LD_INT 4
5419: DOUBLE
5420: EQUAL
5421: IFTRUE 5425
5423: GO 5432
5425: POP
// hHackInvincible ; 5 :
5426: CALL 18257 0 0
5430: GO 5493
5432: LD_INT 5
5434: DOUBLE
5435: EQUAL
5436: IFTRUE 5440
5438: GO 5447
5440: POP
// hHackInvisible ; 6 :
5441: CALL 18368 0 0
5445: GO 5493
5447: LD_INT 6
5449: DOUBLE
5450: EQUAL
5451: IFTRUE 5455
5453: GO 5462
5455: POP
// hHackChangeYourSide ; 7 :
5456: CALL 18425 0 0
5460: GO 5493
5462: LD_INT 7
5464: DOUBLE
5465: EQUAL
5466: IFTRUE 5470
5468: GO 5477
5470: POP
// hHackChangeUnitSide ; 8 :
5471: CALL 18467 0 0
5475: GO 5493
5477: LD_INT 8
5479: DOUBLE
5480: EQUAL
5481: IFTRUE 5485
5483: GO 5492
5485: POP
// hHackFog ; end ;
5486: CALL 18568 0 0
5490: GO 5493
5492: POP
// end ; end ;
5493: LD_VAR 0 7
5497: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5498: GO 5500
5500: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5501: LD_STRING initStreamRollete();
5503: PPUSH
5504: CALL_OW 559
// InitStreamMode ;
5508: CALL 5520 0 0
// DefineStreamItems ( false ) ;
5512: LD_INT 0
5514: PPUSH
5515: CALL 5984 0 1
// end ;
5519: END
// function InitStreamMode ; begin
5520: LD_INT 0
5522: PPUSH
// streamModeActive := false ;
5523: LD_ADDR_EXP 59
5527: PUSH
5528: LD_INT 0
5530: ST_TO_ADDR
// normalCounter := 36 ;
5531: LD_ADDR_EXP 60
5535: PUSH
5536: LD_INT 36
5538: ST_TO_ADDR
// hardcoreCounter := 18 ;
5539: LD_ADDR_EXP 61
5543: PUSH
5544: LD_INT 18
5546: ST_TO_ADDR
// sRocket := false ;
5547: LD_ADDR_EXP 64
5551: PUSH
5552: LD_INT 0
5554: ST_TO_ADDR
// sSpeed := false ;
5555: LD_ADDR_EXP 63
5559: PUSH
5560: LD_INT 0
5562: ST_TO_ADDR
// sEngine := false ;
5563: LD_ADDR_EXP 65
5567: PUSH
5568: LD_INT 0
5570: ST_TO_ADDR
// sSpec := false ;
5571: LD_ADDR_EXP 62
5575: PUSH
5576: LD_INT 0
5578: ST_TO_ADDR
// sLevel := false ;
5579: LD_ADDR_EXP 66
5583: PUSH
5584: LD_INT 0
5586: ST_TO_ADDR
// sArmoury := false ;
5587: LD_ADDR_EXP 67
5591: PUSH
5592: LD_INT 0
5594: ST_TO_ADDR
// sRadar := false ;
5595: LD_ADDR_EXP 68
5599: PUSH
5600: LD_INT 0
5602: ST_TO_ADDR
// sBunker := false ;
5603: LD_ADDR_EXP 69
5607: PUSH
5608: LD_INT 0
5610: ST_TO_ADDR
// sHack := false ;
5611: LD_ADDR_EXP 70
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// sFire := false ;
5619: LD_ADDR_EXP 71
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// sRefresh := false ;
5627: LD_ADDR_EXP 72
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// sExp := false ;
5635: LD_ADDR_EXP 73
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// sDepot := false ;
5643: LD_ADDR_EXP 74
5647: PUSH
5648: LD_INT 0
5650: ST_TO_ADDR
// sFlag := false ;
5651: LD_ADDR_EXP 75
5655: PUSH
5656: LD_INT 0
5658: ST_TO_ADDR
// sKamikadze := false ;
5659: LD_ADDR_EXP 83
5663: PUSH
5664: LD_INT 0
5666: ST_TO_ADDR
// sTroll := false ;
5667: LD_ADDR_EXP 84
5671: PUSH
5672: LD_INT 0
5674: ST_TO_ADDR
// sSlow := false ;
5675: LD_ADDR_EXP 85
5679: PUSH
5680: LD_INT 0
5682: ST_TO_ADDR
// sLack := false ;
5683: LD_ADDR_EXP 86
5687: PUSH
5688: LD_INT 0
5690: ST_TO_ADDR
// sTank := false ;
5691: LD_ADDR_EXP 88
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// sRemote := false ;
5699: LD_ADDR_EXP 89
5703: PUSH
5704: LD_INT 0
5706: ST_TO_ADDR
// sPowell := false ;
5707: LD_ADDR_EXP 90
5711: PUSH
5712: LD_INT 0
5714: ST_TO_ADDR
// sTeleport := false ;
5715: LD_ADDR_EXP 93
5719: PUSH
5720: LD_INT 0
5722: ST_TO_ADDR
// sOilTower := false ;
5723: LD_ADDR_EXP 95
5727: PUSH
5728: LD_INT 0
5730: ST_TO_ADDR
// sShovel := false ;
5731: LD_ADDR_EXP 96
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// sSheik := false ;
5739: LD_ADDR_EXP 97
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// sEarthquake := false ;
5747: LD_ADDR_EXP 99
5751: PUSH
5752: LD_INT 0
5754: ST_TO_ADDR
// sAI := false ;
5755: LD_ADDR_EXP 100
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// sCargo := false ;
5763: LD_ADDR_EXP 103
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// sDLaser := false ;
5771: LD_ADDR_EXP 104
5775: PUSH
5776: LD_INT 0
5778: ST_TO_ADDR
// sExchange := false ;
5779: LD_ADDR_EXP 105
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// sFac := false ;
5787: LD_ADDR_EXP 106
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// sPower := false ;
5795: LD_ADDR_EXP 107
5799: PUSH
5800: LD_INT 0
5802: ST_TO_ADDR
// sRandom := false ;
5803: LD_ADDR_EXP 108
5807: PUSH
5808: LD_INT 0
5810: ST_TO_ADDR
// sShield := false ;
5811: LD_ADDR_EXP 109
5815: PUSH
5816: LD_INT 0
5818: ST_TO_ADDR
// sTime := false ;
5819: LD_ADDR_EXP 110
5823: PUSH
5824: LD_INT 0
5826: ST_TO_ADDR
// sTools := false ;
5827: LD_ADDR_EXP 111
5831: PUSH
5832: LD_INT 0
5834: ST_TO_ADDR
// sSold := false ;
5835: LD_ADDR_EXP 76
5839: PUSH
5840: LD_INT 0
5842: ST_TO_ADDR
// sDiff := false ;
5843: LD_ADDR_EXP 77
5847: PUSH
5848: LD_INT 0
5850: ST_TO_ADDR
// sFog := false ;
5851: LD_ADDR_EXP 80
5855: PUSH
5856: LD_INT 0
5858: ST_TO_ADDR
// sReset := false ;
5859: LD_ADDR_EXP 81
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// sSun := false ;
5867: LD_ADDR_EXP 82
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// sTiger := false ;
5875: LD_ADDR_EXP 78
5879: PUSH
5880: LD_INT 0
5882: ST_TO_ADDR
// sBomb := false ;
5883: LD_ADDR_EXP 79
5887: PUSH
5888: LD_INT 0
5890: ST_TO_ADDR
// sWound := false ;
5891: LD_ADDR_EXP 87
5895: PUSH
5896: LD_INT 0
5898: ST_TO_ADDR
// sBetray := false ;
5899: LD_ADDR_EXP 91
5903: PUSH
5904: LD_INT 0
5906: ST_TO_ADDR
// sContamin := false ;
5907: LD_ADDR_EXP 92
5911: PUSH
5912: LD_INT 0
5914: ST_TO_ADDR
// sOil := false ;
5915: LD_ADDR_EXP 94
5919: PUSH
5920: LD_INT 0
5922: ST_TO_ADDR
// sStu := false ;
5923: LD_ADDR_EXP 98
5927: PUSH
5928: LD_INT 0
5930: ST_TO_ADDR
// sBazooka := false ;
5931: LD_ADDR_EXP 101
5935: PUSH
5936: LD_INT 0
5938: ST_TO_ADDR
// sMortar := false ;
5939: LD_ADDR_EXP 102
5943: PUSH
5944: LD_INT 0
5946: ST_TO_ADDR
// sRanger := false ;
5947: LD_ADDR_EXP 112
5951: PUSH
5952: LD_INT 0
5954: ST_TO_ADDR
// sComputer := false ;
5955: LD_ADDR_EXP 113
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// s30 := false ;
5963: LD_ADDR_EXP 114
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// s60 := false ;
5971: LD_ADDR_EXP 115
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// end ;
5979: LD_VAR 0 1
5983: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5984: LD_INT 0
5986: PPUSH
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
// result := [ ] ;
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: EMPTY
5999: ST_TO_ADDR
// if campaign_id = 1 then
6000: LD_OWVAR 69
6004: PUSH
6005: LD_INT 1
6007: EQUAL
6008: IFFALSE 9174
// begin case mission_number of 1 :
6010: LD_OWVAR 70
6014: PUSH
6015: LD_INT 1
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6099
6023: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: LD_INT 11
6037: PUSH
6038: LD_INT 12
6040: PUSH
6041: LD_INT 15
6043: PUSH
6044: LD_INT 16
6046: PUSH
6047: LD_INT 22
6049: PUSH
6050: LD_INT 23
6052: PUSH
6053: LD_INT 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 101
6069: PUSH
6070: LD_INT 102
6072: PUSH
6073: LD_INT 106
6075: PUSH
6076: LD_INT 116
6078: PUSH
6079: LD_INT 117
6081: PUSH
6082: LD_INT 118
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: ST_TO_ADDR
6097: GO 9172
6099: LD_INT 2
6101: DOUBLE
6102: EQUAL
6103: IFTRUE 6107
6105: GO 6191
6107: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 2
6115: PUSH
6116: LD_INT 4
6118: PUSH
6119: LD_INT 11
6121: PUSH
6122: LD_INT 12
6124: PUSH
6125: LD_INT 15
6127: PUSH
6128: LD_INT 16
6130: PUSH
6131: LD_INT 22
6133: PUSH
6134: LD_INT 23
6136: PUSH
6137: LD_INT 26
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 101
6153: PUSH
6154: LD_INT 102
6156: PUSH
6157: LD_INT 105
6159: PUSH
6160: LD_INT 106
6162: PUSH
6163: LD_INT 108
6165: PUSH
6166: LD_INT 116
6168: PUSH
6169: LD_INT 117
6171: PUSH
6172: LD_INT 118
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: ST_TO_ADDR
6189: GO 9172
6191: LD_INT 3
6193: DOUBLE
6194: EQUAL
6195: IFTRUE 6199
6197: GO 6287
6199: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6200: LD_ADDR_VAR 0 2
6204: PUSH
6205: LD_INT 2
6207: PUSH
6208: LD_INT 4
6210: PUSH
6211: LD_INT 5
6213: PUSH
6214: LD_INT 11
6216: PUSH
6217: LD_INT 12
6219: PUSH
6220: LD_INT 15
6222: PUSH
6223: LD_INT 16
6225: PUSH
6226: LD_INT 22
6228: PUSH
6229: LD_INT 26
6231: PUSH
6232: LD_INT 36
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 101
6249: PUSH
6250: LD_INT 102
6252: PUSH
6253: LD_INT 105
6255: PUSH
6256: LD_INT 106
6258: PUSH
6259: LD_INT 108
6261: PUSH
6262: LD_INT 116
6264: PUSH
6265: LD_INT 117
6267: PUSH
6268: LD_INT 118
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: ST_TO_ADDR
6285: GO 9172
6287: LD_INT 4
6289: DOUBLE
6290: EQUAL
6291: IFTRUE 6295
6293: GO 6391
6295: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6296: LD_ADDR_VAR 0 2
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: LD_INT 4
6306: PUSH
6307: LD_INT 5
6309: PUSH
6310: LD_INT 8
6312: PUSH
6313: LD_INT 11
6315: PUSH
6316: LD_INT 12
6318: PUSH
6319: LD_INT 15
6321: PUSH
6322: LD_INT 16
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_INT 23
6330: PUSH
6331: LD_INT 26
6333: PUSH
6334: LD_INT 36
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 101
6353: PUSH
6354: LD_INT 102
6356: PUSH
6357: LD_INT 105
6359: PUSH
6360: LD_INT 106
6362: PUSH
6363: LD_INT 108
6365: PUSH
6366: LD_INT 116
6368: PUSH
6369: LD_INT 117
6371: PUSH
6372: LD_INT 118
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: ST_TO_ADDR
6389: GO 9172
6391: LD_INT 5
6393: DOUBLE
6394: EQUAL
6395: IFTRUE 6399
6397: GO 6511
6399: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6400: LD_ADDR_VAR 0 2
6404: PUSH
6405: LD_INT 2
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: LD_INT 6
6416: PUSH
6417: LD_INT 8
6419: PUSH
6420: LD_INT 11
6422: PUSH
6423: LD_INT 12
6425: PUSH
6426: LD_INT 15
6428: PUSH
6429: LD_INT 16
6431: PUSH
6432: LD_INT 22
6434: PUSH
6435: LD_INT 23
6437: PUSH
6438: LD_INT 25
6440: PUSH
6441: LD_INT 26
6443: PUSH
6444: LD_INT 36
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 101
6465: PUSH
6466: LD_INT 102
6468: PUSH
6469: LD_INT 105
6471: PUSH
6472: LD_INT 106
6474: PUSH
6475: LD_INT 108
6477: PUSH
6478: LD_INT 109
6480: PUSH
6481: LD_INT 112
6483: PUSH
6484: LD_INT 116
6486: PUSH
6487: LD_INT 117
6489: PUSH
6490: LD_INT 118
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: ST_TO_ADDR
6509: GO 9172
6511: LD_INT 6
6513: DOUBLE
6514: EQUAL
6515: IFTRUE 6519
6517: GO 6651
6519: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6520: LD_ADDR_VAR 0 2
6524: PUSH
6525: LD_INT 2
6527: PUSH
6528: LD_INT 4
6530: PUSH
6531: LD_INT 5
6533: PUSH
6534: LD_INT 6
6536: PUSH
6537: LD_INT 8
6539: PUSH
6540: LD_INT 11
6542: PUSH
6543: LD_INT 12
6545: PUSH
6546: LD_INT 15
6548: PUSH
6549: LD_INT 16
6551: PUSH
6552: LD_INT 20
6554: PUSH
6555: LD_INT 21
6557: PUSH
6558: LD_INT 22
6560: PUSH
6561: LD_INT 23
6563: PUSH
6564: LD_INT 25
6566: PUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 30
6572: PUSH
6573: LD_INT 31
6575: PUSH
6576: LD_INT 32
6578: PUSH
6579: LD_INT 36
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 101
6605: PUSH
6606: LD_INT 102
6608: PUSH
6609: LD_INT 105
6611: PUSH
6612: LD_INT 106
6614: PUSH
6615: LD_INT 108
6617: PUSH
6618: LD_INT 109
6620: PUSH
6621: LD_INT 112
6623: PUSH
6624: LD_INT 116
6626: PUSH
6627: LD_INT 117
6629: PUSH
6630: LD_INT 118
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: ST_TO_ADDR
6649: GO 9172
6651: LD_INT 7
6653: DOUBLE
6654: EQUAL
6655: IFTRUE 6659
6657: GO 6771
6659: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6660: LD_ADDR_VAR 0 2
6664: PUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 4
6670: PUSH
6671: LD_INT 5
6673: PUSH
6674: LD_INT 7
6676: PUSH
6677: LD_INT 11
6679: PUSH
6680: LD_INT 12
6682: PUSH
6683: LD_INT 15
6685: PUSH
6686: LD_INT 16
6688: PUSH
6689: LD_INT 20
6691: PUSH
6692: LD_INT 21
6694: PUSH
6695: LD_INT 22
6697: PUSH
6698: LD_INT 23
6700: PUSH
6701: LD_INT 25
6703: PUSH
6704: LD_INT 26
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 101
6725: PUSH
6726: LD_INT 102
6728: PUSH
6729: LD_INT 103
6731: PUSH
6732: LD_INT 105
6734: PUSH
6735: LD_INT 106
6737: PUSH
6738: LD_INT 108
6740: PUSH
6741: LD_INT 112
6743: PUSH
6744: LD_INT 116
6746: PUSH
6747: LD_INT 117
6749: PUSH
6750: LD_INT 118
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: ST_TO_ADDR
6769: GO 9172
6771: LD_INT 8
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6919
6779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6780: LD_ADDR_VAR 0 2
6784: PUSH
6785: LD_INT 2
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 6
6796: PUSH
6797: LD_INT 7
6799: PUSH
6800: LD_INT 8
6802: PUSH
6803: LD_INT 11
6805: PUSH
6806: LD_INT 12
6808: PUSH
6809: LD_INT 15
6811: PUSH
6812: LD_INT 16
6814: PUSH
6815: LD_INT 20
6817: PUSH
6818: LD_INT 21
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 26
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 31
6838: PUSH
6839: LD_INT 32
6841: PUSH
6842: LD_INT 36
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 101
6869: PUSH
6870: LD_INT 102
6872: PUSH
6873: LD_INT 103
6875: PUSH
6876: LD_INT 105
6878: PUSH
6879: LD_INT 106
6881: PUSH
6882: LD_INT 108
6884: PUSH
6885: LD_INT 109
6887: PUSH
6888: LD_INT 112
6890: PUSH
6891: LD_INT 116
6893: PUSH
6894: LD_INT 117
6896: PUSH
6897: LD_INT 118
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: ST_TO_ADDR
6917: GO 9172
6919: LD_INT 9
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 7075
6927: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 4
6938: PUSH
6939: LD_INT 5
6941: PUSH
6942: LD_INT 6
6944: PUSH
6945: LD_INT 7
6947: PUSH
6948: LD_INT 8
6950: PUSH
6951: LD_INT 11
6953: PUSH
6954: LD_INT 12
6956: PUSH
6957: LD_INT 15
6959: PUSH
6960: LD_INT 16
6962: PUSH
6963: LD_INT 20
6965: PUSH
6966: LD_INT 21
6968: PUSH
6969: LD_INT 22
6971: PUSH
6972: LD_INT 23
6974: PUSH
6975: LD_INT 25
6977: PUSH
6978: LD_INT 26
6980: PUSH
6981: LD_INT 28
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 31
6989: PUSH
6990: LD_INT 32
6992: PUSH
6993: LD_INT 36
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 101
7021: PUSH
7022: LD_INT 102
7024: PUSH
7025: LD_INT 103
7027: PUSH
7028: LD_INT 105
7030: PUSH
7031: LD_INT 106
7033: PUSH
7034: LD_INT 108
7036: PUSH
7037: LD_INT 109
7039: PUSH
7040: LD_INT 112
7042: PUSH
7043: LD_INT 114
7045: PUSH
7046: LD_INT 116
7048: PUSH
7049: LD_INT 117
7051: PUSH
7052: LD_INT 118
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: ST_TO_ADDR
7073: GO 9172
7075: LD_INT 10
7077: DOUBLE
7078: EQUAL
7079: IFTRUE 7083
7081: GO 7279
7083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7084: LD_ADDR_VAR 0 2
7088: PUSH
7089: LD_INT 2
7091: PUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 5
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: LD_INT 7
7103: PUSH
7104: LD_INT 8
7106: PUSH
7107: LD_INT 9
7109: PUSH
7110: LD_INT 10
7112: PUSH
7113: LD_INT 11
7115: PUSH
7116: LD_INT 12
7118: PUSH
7119: LD_INT 13
7121: PUSH
7122: LD_INT 14
7124: PUSH
7125: LD_INT 15
7127: PUSH
7128: LD_INT 16
7130: PUSH
7131: LD_INT 17
7133: PUSH
7134: LD_INT 18
7136: PUSH
7137: LD_INT 19
7139: PUSH
7140: LD_INT 20
7142: PUSH
7143: LD_INT 21
7145: PUSH
7146: LD_INT 22
7148: PUSH
7149: LD_INT 23
7151: PUSH
7152: LD_INT 24
7154: PUSH
7155: LD_INT 25
7157: PUSH
7158: LD_INT 26
7160: PUSH
7161: LD_INT 28
7163: PUSH
7164: LD_INT 30
7166: PUSH
7167: LD_INT 31
7169: PUSH
7170: LD_INT 32
7172: PUSH
7173: LD_INT 36
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 101
7209: PUSH
7210: LD_INT 102
7212: PUSH
7213: LD_INT 103
7215: PUSH
7216: LD_INT 104
7218: PUSH
7219: LD_INT 105
7221: PUSH
7222: LD_INT 106
7224: PUSH
7225: LD_INT 107
7227: PUSH
7228: LD_INT 108
7230: PUSH
7231: LD_INT 109
7233: PUSH
7234: LD_INT 110
7236: PUSH
7237: LD_INT 111
7239: PUSH
7240: LD_INT 112
7242: PUSH
7243: LD_INT 114
7245: PUSH
7246: LD_INT 116
7248: PUSH
7249: LD_INT 117
7251: PUSH
7252: LD_INT 118
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: ST_TO_ADDR
7277: GO 9172
7279: LD_INT 11
7281: DOUBLE
7282: EQUAL
7283: IFTRUE 7287
7285: GO 7491
7287: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 3
7298: PUSH
7299: LD_INT 4
7301: PUSH
7302: LD_INT 5
7304: PUSH
7305: LD_INT 6
7307: PUSH
7308: LD_INT 7
7310: PUSH
7311: LD_INT 8
7313: PUSH
7314: LD_INT 9
7316: PUSH
7317: LD_INT 10
7319: PUSH
7320: LD_INT 11
7322: PUSH
7323: LD_INT 12
7325: PUSH
7326: LD_INT 13
7328: PUSH
7329: LD_INT 14
7331: PUSH
7332: LD_INT 15
7334: PUSH
7335: LD_INT 16
7337: PUSH
7338: LD_INT 17
7340: PUSH
7341: LD_INT 18
7343: PUSH
7344: LD_INT 19
7346: PUSH
7347: LD_INT 20
7349: PUSH
7350: LD_INT 21
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_INT 23
7358: PUSH
7359: LD_INT 24
7361: PUSH
7362: LD_INT 25
7364: PUSH
7365: LD_INT 26
7367: PUSH
7368: LD_INT 28
7370: PUSH
7371: LD_INT 30
7373: PUSH
7374: LD_INT 31
7376: PUSH
7377: LD_INT 32
7379: PUSH
7380: LD_INT 34
7382: PUSH
7383: LD_INT 36
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 101
7421: PUSH
7422: LD_INT 102
7424: PUSH
7425: LD_INT 103
7427: PUSH
7428: LD_INT 104
7430: PUSH
7431: LD_INT 105
7433: PUSH
7434: LD_INT 106
7436: PUSH
7437: LD_INT 107
7439: PUSH
7440: LD_INT 108
7442: PUSH
7443: LD_INT 109
7445: PUSH
7446: LD_INT 110
7448: PUSH
7449: LD_INT 111
7451: PUSH
7452: LD_INT 112
7454: PUSH
7455: LD_INT 114
7457: PUSH
7458: LD_INT 116
7460: PUSH
7461: LD_INT 117
7463: PUSH
7464: LD_INT 118
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: ST_TO_ADDR
7489: GO 9172
7491: LD_INT 12
7493: DOUBLE
7494: EQUAL
7495: IFTRUE 7499
7497: GO 7719
7499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7500: LD_ADDR_VAR 0 2
7504: PUSH
7505: LD_INT 1
7507: PUSH
7508: LD_INT 2
7510: PUSH
7511: LD_INT 3
7513: PUSH
7514: LD_INT 4
7516: PUSH
7517: LD_INT 5
7519: PUSH
7520: LD_INT 6
7522: PUSH
7523: LD_INT 7
7525: PUSH
7526: LD_INT 8
7528: PUSH
7529: LD_INT 9
7531: PUSH
7532: LD_INT 10
7534: PUSH
7535: LD_INT 11
7537: PUSH
7538: LD_INT 12
7540: PUSH
7541: LD_INT 13
7543: PUSH
7544: LD_INT 14
7546: PUSH
7547: LD_INT 15
7549: PUSH
7550: LD_INT 16
7552: PUSH
7553: LD_INT 17
7555: PUSH
7556: LD_INT 18
7558: PUSH
7559: LD_INT 19
7561: PUSH
7562: LD_INT 20
7564: PUSH
7565: LD_INT 21
7567: PUSH
7568: LD_INT 22
7570: PUSH
7571: LD_INT 23
7573: PUSH
7574: LD_INT 24
7576: PUSH
7577: LD_INT 25
7579: PUSH
7580: LD_INT 26
7582: PUSH
7583: LD_INT 27
7585: PUSH
7586: LD_INT 28
7588: PUSH
7589: LD_INT 30
7591: PUSH
7592: LD_INT 31
7594: PUSH
7595: LD_INT 32
7597: PUSH
7598: LD_INT 33
7600: PUSH
7601: LD_INT 34
7603: PUSH
7604: LD_INT 36
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 101
7645: PUSH
7646: LD_INT 102
7648: PUSH
7649: LD_INT 103
7651: PUSH
7652: LD_INT 104
7654: PUSH
7655: LD_INT 105
7657: PUSH
7658: LD_INT 106
7660: PUSH
7661: LD_INT 107
7663: PUSH
7664: LD_INT 108
7666: PUSH
7667: LD_INT 109
7669: PUSH
7670: LD_INT 110
7672: PUSH
7673: LD_INT 111
7675: PUSH
7676: LD_INT 112
7678: PUSH
7679: LD_INT 113
7681: PUSH
7682: LD_INT 114
7684: PUSH
7685: LD_INT 116
7687: PUSH
7688: LD_INT 117
7690: PUSH
7691: LD_INT 118
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: ST_TO_ADDR
7717: GO 9172
7719: LD_INT 13
7721: DOUBLE
7722: EQUAL
7723: IFTRUE 7727
7725: GO 7935
7727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7728: LD_ADDR_VAR 0 2
7732: PUSH
7733: LD_INT 1
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 3
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: LD_INT 5
7747: PUSH
7748: LD_INT 8
7750: PUSH
7751: LD_INT 9
7753: PUSH
7754: LD_INT 10
7756: PUSH
7757: LD_INT 11
7759: PUSH
7760: LD_INT 12
7762: PUSH
7763: LD_INT 14
7765: PUSH
7766: LD_INT 15
7768: PUSH
7769: LD_INT 16
7771: PUSH
7772: LD_INT 17
7774: PUSH
7775: LD_INT 18
7777: PUSH
7778: LD_INT 19
7780: PUSH
7781: LD_INT 20
7783: PUSH
7784: LD_INT 21
7786: PUSH
7787: LD_INT 22
7789: PUSH
7790: LD_INT 23
7792: PUSH
7793: LD_INT 24
7795: PUSH
7796: LD_INT 25
7798: PUSH
7799: LD_INT 26
7801: PUSH
7802: LD_INT 27
7804: PUSH
7805: LD_INT 28
7807: PUSH
7808: LD_INT 30
7810: PUSH
7811: LD_INT 31
7813: PUSH
7814: LD_INT 32
7816: PUSH
7817: LD_INT 33
7819: PUSH
7820: LD_INT 34
7822: PUSH
7823: LD_INT 36
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 101
7861: PUSH
7862: LD_INT 102
7864: PUSH
7865: LD_INT 103
7867: PUSH
7868: LD_INT 104
7870: PUSH
7871: LD_INT 105
7873: PUSH
7874: LD_INT 106
7876: PUSH
7877: LD_INT 107
7879: PUSH
7880: LD_INT 108
7882: PUSH
7883: LD_INT 109
7885: PUSH
7886: LD_INT 110
7888: PUSH
7889: LD_INT 111
7891: PUSH
7892: LD_INT 112
7894: PUSH
7895: LD_INT 113
7897: PUSH
7898: LD_INT 114
7900: PUSH
7901: LD_INT 116
7903: PUSH
7904: LD_INT 117
7906: PUSH
7907: LD_INT 118
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: ST_TO_ADDR
7933: GO 9172
7935: LD_INT 14
7937: DOUBLE
7938: EQUAL
7939: IFTRUE 7943
7941: GO 8167
7943: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7944: LD_ADDR_VAR 0 2
7948: PUSH
7949: LD_INT 1
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: LD_INT 3
7957: PUSH
7958: LD_INT 4
7960: PUSH
7961: LD_INT 5
7963: PUSH
7964: LD_INT 6
7966: PUSH
7967: LD_INT 7
7969: PUSH
7970: LD_INT 8
7972: PUSH
7973: LD_INT 9
7975: PUSH
7976: LD_INT 10
7978: PUSH
7979: LD_INT 11
7981: PUSH
7982: LD_INT 12
7984: PUSH
7985: LD_INT 13
7987: PUSH
7988: LD_INT 14
7990: PUSH
7991: LD_INT 15
7993: PUSH
7994: LD_INT 16
7996: PUSH
7997: LD_INT 17
7999: PUSH
8000: LD_INT 18
8002: PUSH
8003: LD_INT 19
8005: PUSH
8006: LD_INT 20
8008: PUSH
8009: LD_INT 21
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_INT 23
8017: PUSH
8018: LD_INT 24
8020: PUSH
8021: LD_INT 25
8023: PUSH
8024: LD_INT 26
8026: PUSH
8027: LD_INT 27
8029: PUSH
8030: LD_INT 28
8032: PUSH
8033: LD_INT 29
8035: PUSH
8036: LD_INT 30
8038: PUSH
8039: LD_INT 31
8041: PUSH
8042: LD_INT 32
8044: PUSH
8045: LD_INT 33
8047: PUSH
8048: LD_INT 34
8050: PUSH
8051: LD_INT 36
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 101
8093: PUSH
8094: LD_INT 102
8096: PUSH
8097: LD_INT 103
8099: PUSH
8100: LD_INT 104
8102: PUSH
8103: LD_INT 105
8105: PUSH
8106: LD_INT 106
8108: PUSH
8109: LD_INT 107
8111: PUSH
8112: LD_INT 108
8114: PUSH
8115: LD_INT 109
8117: PUSH
8118: LD_INT 110
8120: PUSH
8121: LD_INT 111
8123: PUSH
8124: LD_INT 112
8126: PUSH
8127: LD_INT 113
8129: PUSH
8130: LD_INT 114
8132: PUSH
8133: LD_INT 116
8135: PUSH
8136: LD_INT 117
8138: PUSH
8139: LD_INT 118
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: ST_TO_ADDR
8165: GO 9172
8167: LD_INT 15
8169: DOUBLE
8170: EQUAL
8171: IFTRUE 8175
8173: GO 8399
8175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8176: LD_ADDR_VAR 0 2
8180: PUSH
8181: LD_INT 1
8183: PUSH
8184: LD_INT 2
8186: PUSH
8187: LD_INT 3
8189: PUSH
8190: LD_INT 4
8192: PUSH
8193: LD_INT 5
8195: PUSH
8196: LD_INT 6
8198: PUSH
8199: LD_INT 7
8201: PUSH
8202: LD_INT 8
8204: PUSH
8205: LD_INT 9
8207: PUSH
8208: LD_INT 10
8210: PUSH
8211: LD_INT 11
8213: PUSH
8214: LD_INT 12
8216: PUSH
8217: LD_INT 13
8219: PUSH
8220: LD_INT 14
8222: PUSH
8223: LD_INT 15
8225: PUSH
8226: LD_INT 16
8228: PUSH
8229: LD_INT 17
8231: PUSH
8232: LD_INT 18
8234: PUSH
8235: LD_INT 19
8237: PUSH
8238: LD_INT 20
8240: PUSH
8241: LD_INT 21
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 23
8249: PUSH
8250: LD_INT 24
8252: PUSH
8253: LD_INT 25
8255: PUSH
8256: LD_INT 26
8258: PUSH
8259: LD_INT 27
8261: PUSH
8262: LD_INT 28
8264: PUSH
8265: LD_INT 29
8267: PUSH
8268: LD_INT 30
8270: PUSH
8271: LD_INT 31
8273: PUSH
8274: LD_INT 32
8276: PUSH
8277: LD_INT 33
8279: PUSH
8280: LD_INT 34
8282: PUSH
8283: LD_INT 36
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 101
8325: PUSH
8326: LD_INT 102
8328: PUSH
8329: LD_INT 103
8331: PUSH
8332: LD_INT 104
8334: PUSH
8335: LD_INT 105
8337: PUSH
8338: LD_INT 106
8340: PUSH
8341: LD_INT 107
8343: PUSH
8344: LD_INT 108
8346: PUSH
8347: LD_INT 109
8349: PUSH
8350: LD_INT 110
8352: PUSH
8353: LD_INT 111
8355: PUSH
8356: LD_INT 112
8358: PUSH
8359: LD_INT 113
8361: PUSH
8362: LD_INT 114
8364: PUSH
8365: LD_INT 116
8367: PUSH
8368: LD_INT 117
8370: PUSH
8371: LD_INT 118
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: ST_TO_ADDR
8397: GO 9172
8399: LD_INT 16
8401: DOUBLE
8402: EQUAL
8403: IFTRUE 8407
8405: GO 8543
8407: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8408: LD_ADDR_VAR 0 2
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 4
8418: PUSH
8419: LD_INT 5
8421: PUSH
8422: LD_INT 7
8424: PUSH
8425: LD_INT 11
8427: PUSH
8428: LD_INT 12
8430: PUSH
8431: LD_INT 15
8433: PUSH
8434: LD_INT 16
8436: PUSH
8437: LD_INT 20
8439: PUSH
8440: LD_INT 21
8442: PUSH
8443: LD_INT 22
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 25
8451: PUSH
8452: LD_INT 26
8454: PUSH
8455: LD_INT 30
8457: PUSH
8458: LD_INT 31
8460: PUSH
8461: LD_INT 32
8463: PUSH
8464: LD_INT 33
8466: PUSH
8467: LD_INT 34
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 101
8493: PUSH
8494: LD_INT 102
8496: PUSH
8497: LD_INT 103
8499: PUSH
8500: LD_INT 106
8502: PUSH
8503: LD_INT 108
8505: PUSH
8506: LD_INT 112
8508: PUSH
8509: LD_INT 113
8511: PUSH
8512: LD_INT 114
8514: PUSH
8515: LD_INT 116
8517: PUSH
8518: LD_INT 117
8520: PUSH
8521: LD_INT 118
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: ST_TO_ADDR
8541: GO 9172
8543: LD_INT 17
8545: DOUBLE
8546: EQUAL
8547: IFTRUE 8551
8549: GO 8775
8551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: LD_INT 4
8568: PUSH
8569: LD_INT 5
8571: PUSH
8572: LD_INT 6
8574: PUSH
8575: LD_INT 7
8577: PUSH
8578: LD_INT 8
8580: PUSH
8581: LD_INT 9
8583: PUSH
8584: LD_INT 10
8586: PUSH
8587: LD_INT 11
8589: PUSH
8590: LD_INT 12
8592: PUSH
8593: LD_INT 13
8595: PUSH
8596: LD_INT 14
8598: PUSH
8599: LD_INT 15
8601: PUSH
8602: LD_INT 16
8604: PUSH
8605: LD_INT 17
8607: PUSH
8608: LD_INT 18
8610: PUSH
8611: LD_INT 19
8613: PUSH
8614: LD_INT 20
8616: PUSH
8617: LD_INT 21
8619: PUSH
8620: LD_INT 22
8622: PUSH
8623: LD_INT 23
8625: PUSH
8626: LD_INT 24
8628: PUSH
8629: LD_INT 25
8631: PUSH
8632: LD_INT 26
8634: PUSH
8635: LD_INT 27
8637: PUSH
8638: LD_INT 28
8640: PUSH
8641: LD_INT 29
8643: PUSH
8644: LD_INT 30
8646: PUSH
8647: LD_INT 31
8649: PUSH
8650: LD_INT 32
8652: PUSH
8653: LD_INT 33
8655: PUSH
8656: LD_INT 34
8658: PUSH
8659: LD_INT 36
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 101
8701: PUSH
8702: LD_INT 102
8704: PUSH
8705: LD_INT 103
8707: PUSH
8708: LD_INT 104
8710: PUSH
8711: LD_INT 105
8713: PUSH
8714: LD_INT 106
8716: PUSH
8717: LD_INT 107
8719: PUSH
8720: LD_INT 108
8722: PUSH
8723: LD_INT 109
8725: PUSH
8726: LD_INT 110
8728: PUSH
8729: LD_INT 111
8731: PUSH
8732: LD_INT 112
8734: PUSH
8735: LD_INT 113
8737: PUSH
8738: LD_INT 114
8740: PUSH
8741: LD_INT 116
8743: PUSH
8744: LD_INT 117
8746: PUSH
8747: LD_INT 118
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: ST_TO_ADDR
8773: GO 9172
8775: LD_INT 18
8777: DOUBLE
8778: EQUAL
8779: IFTRUE 8783
8781: GO 8931
8783: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8784: LD_ADDR_VAR 0 2
8788: PUSH
8789: LD_INT 2
8791: PUSH
8792: LD_INT 4
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 7
8800: PUSH
8801: LD_INT 11
8803: PUSH
8804: LD_INT 12
8806: PUSH
8807: LD_INT 15
8809: PUSH
8810: LD_INT 16
8812: PUSH
8813: LD_INT 20
8815: PUSH
8816: LD_INT 21
8818: PUSH
8819: LD_INT 22
8821: PUSH
8822: LD_INT 23
8824: PUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 26
8830: PUSH
8831: LD_INT 30
8833: PUSH
8834: LD_INT 31
8836: PUSH
8837: LD_INT 32
8839: PUSH
8840: LD_INT 33
8842: PUSH
8843: LD_INT 34
8845: PUSH
8846: LD_INT 35
8848: PUSH
8849: LD_INT 36
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 101
8877: PUSH
8878: LD_INT 102
8880: PUSH
8881: LD_INT 103
8883: PUSH
8884: LD_INT 106
8886: PUSH
8887: LD_INT 108
8889: PUSH
8890: LD_INT 112
8892: PUSH
8893: LD_INT 113
8895: PUSH
8896: LD_INT 114
8898: PUSH
8899: LD_INT 115
8901: PUSH
8902: LD_INT 116
8904: PUSH
8905: LD_INT 117
8907: PUSH
8908: LD_INT 118
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: ST_TO_ADDR
8929: GO 9172
8931: LD_INT 19
8933: DOUBLE
8934: EQUAL
8935: IFTRUE 8939
8937: GO 9171
8939: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: LD_INT 1
8947: PUSH
8948: LD_INT 2
8950: PUSH
8951: LD_INT 3
8953: PUSH
8954: LD_INT 4
8956: PUSH
8957: LD_INT 5
8959: PUSH
8960: LD_INT 6
8962: PUSH
8963: LD_INT 7
8965: PUSH
8966: LD_INT 8
8968: PUSH
8969: LD_INT 9
8971: PUSH
8972: LD_INT 10
8974: PUSH
8975: LD_INT 11
8977: PUSH
8978: LD_INT 12
8980: PUSH
8981: LD_INT 13
8983: PUSH
8984: LD_INT 14
8986: PUSH
8987: LD_INT 15
8989: PUSH
8990: LD_INT 16
8992: PUSH
8993: LD_INT 17
8995: PUSH
8996: LD_INT 18
8998: PUSH
8999: LD_INT 19
9001: PUSH
9002: LD_INT 20
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 22
9010: PUSH
9011: LD_INT 23
9013: PUSH
9014: LD_INT 24
9016: PUSH
9017: LD_INT 25
9019: PUSH
9020: LD_INT 26
9022: PUSH
9023: LD_INT 27
9025: PUSH
9026: LD_INT 28
9028: PUSH
9029: LD_INT 29
9031: PUSH
9032: LD_INT 30
9034: PUSH
9035: LD_INT 31
9037: PUSH
9038: LD_INT 32
9040: PUSH
9041: LD_INT 33
9043: PUSH
9044: LD_INT 34
9046: PUSH
9047: LD_INT 35
9049: PUSH
9050: LD_INT 36
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 101
9093: PUSH
9094: LD_INT 102
9096: PUSH
9097: LD_INT 103
9099: PUSH
9100: LD_INT 104
9102: PUSH
9103: LD_INT 105
9105: PUSH
9106: LD_INT 106
9108: PUSH
9109: LD_INT 107
9111: PUSH
9112: LD_INT 108
9114: PUSH
9115: LD_INT 109
9117: PUSH
9118: LD_INT 110
9120: PUSH
9121: LD_INT 111
9123: PUSH
9124: LD_INT 112
9126: PUSH
9127: LD_INT 113
9129: PUSH
9130: LD_INT 114
9132: PUSH
9133: LD_INT 115
9135: PUSH
9136: LD_INT 116
9138: PUSH
9139: LD_INT 117
9141: PUSH
9142: LD_INT 118
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: ST_TO_ADDR
9169: GO 9172
9171: POP
// end else
9172: GO 9403
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9174: LD_ADDR_VAR 0 2
9178: PUSH
9179: LD_INT 1
9181: PUSH
9182: LD_INT 2
9184: PUSH
9185: LD_INT 3
9187: PUSH
9188: LD_INT 4
9190: PUSH
9191: LD_INT 5
9193: PUSH
9194: LD_INT 6
9196: PUSH
9197: LD_INT 7
9199: PUSH
9200: LD_INT 8
9202: PUSH
9203: LD_INT 9
9205: PUSH
9206: LD_INT 10
9208: PUSH
9209: LD_INT 11
9211: PUSH
9212: LD_INT 12
9214: PUSH
9215: LD_INT 13
9217: PUSH
9218: LD_INT 14
9220: PUSH
9221: LD_INT 15
9223: PUSH
9224: LD_INT 16
9226: PUSH
9227: LD_INT 17
9229: PUSH
9230: LD_INT 18
9232: PUSH
9233: LD_INT 19
9235: PUSH
9236: LD_INT 20
9238: PUSH
9239: LD_INT 21
9241: PUSH
9242: LD_INT 22
9244: PUSH
9245: LD_INT 23
9247: PUSH
9248: LD_INT 24
9250: PUSH
9251: LD_INT 25
9253: PUSH
9254: LD_INT 26
9256: PUSH
9257: LD_INT 27
9259: PUSH
9260: LD_INT 28
9262: PUSH
9263: LD_INT 29
9265: PUSH
9266: LD_INT 30
9268: PUSH
9269: LD_INT 31
9271: PUSH
9272: LD_INT 32
9274: PUSH
9275: LD_INT 33
9277: PUSH
9278: LD_INT 34
9280: PUSH
9281: LD_INT 35
9283: PUSH
9284: LD_INT 36
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 101
9327: PUSH
9328: LD_INT 102
9330: PUSH
9331: LD_INT 103
9333: PUSH
9334: LD_INT 104
9336: PUSH
9337: LD_INT 105
9339: PUSH
9340: LD_INT 106
9342: PUSH
9343: LD_INT 107
9345: PUSH
9346: LD_INT 108
9348: PUSH
9349: LD_INT 109
9351: PUSH
9352: LD_INT 110
9354: PUSH
9355: LD_INT 111
9357: PUSH
9358: LD_INT 112
9360: PUSH
9361: LD_INT 113
9363: PUSH
9364: LD_INT 114
9366: PUSH
9367: LD_INT 115
9369: PUSH
9370: LD_INT 116
9372: PUSH
9373: LD_INT 117
9375: PUSH
9376: LD_INT 118
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: ST_TO_ADDR
// if result then
9403: LD_VAR 0 2
9407: IFFALSE 10193
// begin normal :=  ;
9409: LD_ADDR_VAR 0 5
9413: PUSH
9414: LD_STRING 
9416: ST_TO_ADDR
// hardcore :=  ;
9417: LD_ADDR_VAR 0 6
9421: PUSH
9422: LD_STRING 
9424: ST_TO_ADDR
// active :=  ;
9425: LD_ADDR_VAR 0 7
9429: PUSH
9430: LD_STRING 
9432: ST_TO_ADDR
// for i = 1 to normalCounter do
9433: LD_ADDR_VAR 0 8
9437: PUSH
9438: DOUBLE
9439: LD_INT 1
9441: DEC
9442: ST_TO_ADDR
9443: LD_EXP 60
9447: PUSH
9448: FOR_TO
9449: IFFALSE 9550
// begin tmp := 0 ;
9451: LD_ADDR_VAR 0 3
9455: PUSH
9456: LD_STRING 0
9458: ST_TO_ADDR
// if result [ 1 ] then
9459: LD_VAR 0 2
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: IFFALSE 9532
// if result [ 1 ] [ 1 ] = i then
9469: LD_VAR 0 2
9473: PUSH
9474: LD_INT 1
9476: ARRAY
9477: PUSH
9478: LD_INT 1
9480: ARRAY
9481: PUSH
9482: LD_VAR 0 8
9486: EQUAL
9487: IFFALSE 9532
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9489: LD_ADDR_VAR 0 2
9493: PUSH
9494: LD_VAR 0 2
9498: PPUSH
9499: LD_INT 1
9501: PPUSH
9502: LD_VAR 0 2
9506: PUSH
9507: LD_INT 1
9509: ARRAY
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 3
9518: PPUSH
9519: CALL_OW 1
9523: ST_TO_ADDR
// tmp := 1 ;
9524: LD_ADDR_VAR 0 3
9528: PUSH
9529: LD_STRING 1
9531: ST_TO_ADDR
// end ; normal := normal & tmp ;
9532: LD_ADDR_VAR 0 5
9536: PUSH
9537: LD_VAR 0 5
9541: PUSH
9542: LD_VAR 0 3
9546: STR
9547: ST_TO_ADDR
// end ;
9548: GO 9448
9550: POP
9551: POP
// for i = 1 to hardcoreCounter do
9552: LD_ADDR_VAR 0 8
9556: PUSH
9557: DOUBLE
9558: LD_INT 1
9560: DEC
9561: ST_TO_ADDR
9562: LD_EXP 61
9566: PUSH
9567: FOR_TO
9568: IFFALSE 9673
// begin tmp := 0 ;
9570: LD_ADDR_VAR 0 3
9574: PUSH
9575: LD_STRING 0
9577: ST_TO_ADDR
// if result [ 2 ] then
9578: LD_VAR 0 2
9582: PUSH
9583: LD_INT 2
9585: ARRAY
9586: IFFALSE 9655
// if result [ 2 ] [ 1 ] = 100 + i then
9588: LD_VAR 0 2
9592: PUSH
9593: LD_INT 2
9595: ARRAY
9596: PUSH
9597: LD_INT 1
9599: ARRAY
9600: PUSH
9601: LD_INT 100
9603: PUSH
9604: LD_VAR 0 8
9608: PLUS
9609: EQUAL
9610: IFFALSE 9655
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9612: LD_ADDR_VAR 0 2
9616: PUSH
9617: LD_VAR 0 2
9621: PPUSH
9622: LD_INT 2
9624: PPUSH
9625: LD_VAR 0 2
9629: PUSH
9630: LD_INT 2
9632: ARRAY
9633: PPUSH
9634: LD_INT 1
9636: PPUSH
9637: CALL_OW 3
9641: PPUSH
9642: CALL_OW 1
9646: ST_TO_ADDR
// tmp := 1 ;
9647: LD_ADDR_VAR 0 3
9651: PUSH
9652: LD_STRING 1
9654: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9655: LD_ADDR_VAR 0 6
9659: PUSH
9660: LD_VAR 0 6
9664: PUSH
9665: LD_VAR 0 3
9669: STR
9670: ST_TO_ADDR
// end ;
9671: GO 9567
9673: POP
9674: POP
// if isGameLoad then
9675: LD_VAR 0 1
9679: IFFALSE 10154
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9681: LD_ADDR_VAR 0 4
9685: PUSH
9686: LD_EXP 64
9690: PUSH
9691: LD_EXP 63
9695: PUSH
9696: LD_EXP 65
9700: PUSH
9701: LD_EXP 62
9705: PUSH
9706: LD_EXP 66
9710: PUSH
9711: LD_EXP 67
9715: PUSH
9716: LD_EXP 68
9720: PUSH
9721: LD_EXP 69
9725: PUSH
9726: LD_EXP 70
9730: PUSH
9731: LD_EXP 71
9735: PUSH
9736: LD_EXP 72
9740: PUSH
9741: LD_EXP 73
9745: PUSH
9746: LD_EXP 74
9750: PUSH
9751: LD_EXP 75
9755: PUSH
9756: LD_EXP 83
9760: PUSH
9761: LD_EXP 84
9765: PUSH
9766: LD_EXP 85
9770: PUSH
9771: LD_EXP 86
9775: PUSH
9776: LD_EXP 88
9780: PUSH
9781: LD_EXP 89
9785: PUSH
9786: LD_EXP 90
9790: PUSH
9791: LD_EXP 93
9795: PUSH
9796: LD_EXP 95
9800: PUSH
9801: LD_EXP 96
9805: PUSH
9806: LD_EXP 97
9810: PUSH
9811: LD_EXP 99
9815: PUSH
9816: LD_EXP 100
9820: PUSH
9821: LD_EXP 103
9825: PUSH
9826: LD_EXP 104
9830: PUSH
9831: LD_EXP 105
9835: PUSH
9836: LD_EXP 106
9840: PUSH
9841: LD_EXP 107
9845: PUSH
9846: LD_EXP 108
9850: PUSH
9851: LD_EXP 109
9855: PUSH
9856: LD_EXP 110
9860: PUSH
9861: LD_EXP 111
9865: PUSH
9866: LD_EXP 76
9870: PUSH
9871: LD_EXP 77
9875: PUSH
9876: LD_EXP 80
9880: PUSH
9881: LD_EXP 81
9885: PUSH
9886: LD_EXP 82
9890: PUSH
9891: LD_EXP 78
9895: PUSH
9896: LD_EXP 79
9900: PUSH
9901: LD_EXP 87
9905: PUSH
9906: LD_EXP 91
9910: PUSH
9911: LD_EXP 92
9915: PUSH
9916: LD_EXP 94
9920: PUSH
9921: LD_EXP 98
9925: PUSH
9926: LD_EXP 101
9930: PUSH
9931: LD_EXP 102
9935: PUSH
9936: LD_EXP 112
9940: PUSH
9941: LD_EXP 113
9945: PUSH
9946: LD_EXP 114
9950: PUSH
9951: LD_EXP 115
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: ST_TO_ADDR
// tmp :=  ;
10012: LD_ADDR_VAR 0 3
10016: PUSH
10017: LD_STRING 
10019: ST_TO_ADDR
// for i = 1 to normalCounter do
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: DOUBLE
10026: LD_INT 1
10028: DEC
10029: ST_TO_ADDR
10030: LD_EXP 60
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10072
// begin if flags [ i ] then
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 8
10047: ARRAY
10048: IFFALSE 10070
// tmp := tmp & i & ; ;
10050: LD_ADDR_VAR 0 3
10054: PUSH
10055: LD_VAR 0 3
10059: PUSH
10060: LD_VAR 0 8
10064: STR
10065: PUSH
10066: LD_STRING ;
10068: STR
10069: ST_TO_ADDR
// end ;
10070: GO 10035
10072: POP
10073: POP
// for i = 1 to hardcoreCounter do
10074: LD_ADDR_VAR 0 8
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_EXP 61
10088: PUSH
10089: FOR_TO
10090: IFFALSE 10136
// begin if flags [ normalCounter + i ] then
10092: LD_VAR 0 4
10096: PUSH
10097: LD_EXP 60
10101: PUSH
10102: LD_VAR 0 8
10106: PLUS
10107: ARRAY
10108: IFFALSE 10134
// tmp := tmp & ( 100 + i ) & ; ;
10110: LD_ADDR_VAR 0 3
10114: PUSH
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 100
10122: PUSH
10123: LD_VAR 0 8
10127: PLUS
10128: STR
10129: PUSH
10130: LD_STRING ;
10132: STR
10133: ST_TO_ADDR
// end ;
10134: GO 10089
10136: POP
10137: POP
// if tmp then
10138: LD_VAR 0 3
10142: IFFALSE 10154
// active := tmp ;
10144: LD_ADDR_VAR 0 7
10148: PUSH
10149: LD_VAR 0 3
10153: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10154: LD_STRING getStreamItemsFromMission("
10156: PUSH
10157: LD_VAR 0 5
10161: STR
10162: PUSH
10163: LD_STRING ","
10165: STR
10166: PUSH
10167: LD_VAR 0 6
10171: STR
10172: PUSH
10173: LD_STRING ","
10175: STR
10176: PUSH
10177: LD_VAR 0 7
10181: STR
10182: PUSH
10183: LD_STRING ")
10185: STR
10186: PPUSH
10187: CALL_OW 559
// end else
10191: GO 10200
// ToLua ( getStreamItemsFromMission("","","") ) ;
10193: LD_STRING getStreamItemsFromMission("","","")
10195: PPUSH
10196: CALL_OW 559
// end ;
10200: LD_VAR 0 2
10204: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10205: LD_EXP 59
10209: PUSH
10210: LD_EXP 64
10214: AND
10215: IFFALSE 10339
10217: GO 10219
10219: DISABLE
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
// begin enable ;
10224: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10225: LD_ADDR_VAR 0 2
10229: PUSH
10230: LD_INT 22
10232: PUSH
10233: LD_OWVAR 2
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 2
10244: PUSH
10245: LD_INT 34
10247: PUSH
10248: LD_INT 7
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 34
10257: PUSH
10258: LD_INT 45
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 34
10267: PUSH
10268: LD_INT 28
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 34
10277: PUSH
10278: LD_INT 47
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PPUSH
10296: CALL_OW 69
10300: ST_TO_ADDR
// if not tmp then
10301: LD_VAR 0 2
10305: NOT
10306: IFFALSE 10310
// exit ;
10308: GO 10339
// for i in tmp do
10310: LD_ADDR_VAR 0 1
10314: PUSH
10315: LD_VAR 0 2
10319: PUSH
10320: FOR_IN
10321: IFFALSE 10337
// begin SetLives ( i , 0 ) ;
10323: LD_VAR 0 1
10327: PPUSH
10328: LD_INT 0
10330: PPUSH
10331: CALL_OW 234
// end ;
10335: GO 10320
10337: POP
10338: POP
// end ;
10339: PPOPN 2
10341: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10342: LD_EXP 59
10346: PUSH
10347: LD_EXP 65
10351: AND
10352: IFFALSE 10436
10354: GO 10356
10356: DISABLE
10357: LD_INT 0
10359: PPUSH
10360: PPUSH
// begin enable ;
10361: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10362: LD_ADDR_VAR 0 2
10366: PUSH
10367: LD_INT 22
10369: PUSH
10370: LD_OWVAR 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 32
10381: PUSH
10382: LD_INT 3
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: ST_TO_ADDR
// if not tmp then
10398: LD_VAR 0 2
10402: NOT
10403: IFFALSE 10407
// exit ;
10405: GO 10436
// for i in tmp do
10407: LD_ADDR_VAR 0 1
10411: PUSH
10412: LD_VAR 0 2
10416: PUSH
10417: FOR_IN
10418: IFFALSE 10434
// begin SetLives ( i , 0 ) ;
10420: LD_VAR 0 1
10424: PPUSH
10425: LD_INT 0
10427: PPUSH
10428: CALL_OW 234
// end ;
10432: GO 10417
10434: POP
10435: POP
// end ;
10436: PPOPN 2
10438: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10439: LD_EXP 59
10443: PUSH
10444: LD_EXP 62
10448: AND
10449: IFFALSE 10542
10451: GO 10453
10453: DISABLE
10454: LD_INT 0
10456: PPUSH
// begin enable ;
10457: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10458: LD_ADDR_VAR 0 1
10462: PUSH
10463: LD_INT 22
10465: PUSH
10466: LD_OWVAR 2
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PUSH
10475: LD_INT 2
10477: PUSH
10478: LD_INT 25
10480: PUSH
10481: LD_INT 5
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 25
10490: PUSH
10491: LD_INT 9
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 25
10500: PUSH
10501: LD_INT 8
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PPUSH
10518: CALL_OW 69
10522: PUSH
10523: FOR_IN
10524: IFFALSE 10540
// begin SetClass ( i , 1 ) ;
10526: LD_VAR 0 1
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 336
// end ;
10538: GO 10523
10540: POP
10541: POP
// end ;
10542: PPOPN 1
10544: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10545: LD_EXP 59
10549: PUSH
10550: LD_EXP 63
10554: AND
10555: PUSH
10556: LD_OWVAR 65
10560: PUSH
10561: LD_INT 7
10563: LESS
10564: AND
10565: IFFALSE 10579
10567: GO 10569
10569: DISABLE
// begin enable ;
10570: ENABLE
// game_speed := 7 ;
10571: LD_ADDR_OWVAR 65
10575: PUSH
10576: LD_INT 7
10578: ST_TO_ADDR
// end ;
10579: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10580: LD_EXP 59
10584: PUSH
10585: LD_EXP 66
10589: AND
10590: IFFALSE 10792
10592: GO 10594
10594: DISABLE
10595: LD_INT 0
10597: PPUSH
10598: PPUSH
10599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10600: LD_ADDR_VAR 0 3
10604: PUSH
10605: LD_INT 81
10607: PUSH
10608: LD_OWVAR 2
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: ST_TO_ADDR
// if not tmp then
10636: LD_VAR 0 3
10640: NOT
10641: IFFALSE 10645
// exit ;
10643: GO 10792
// if tmp > 5 then
10645: LD_VAR 0 3
10649: PUSH
10650: LD_INT 5
10652: GREATER
10653: IFFALSE 10665
// k := 5 else
10655: LD_ADDR_VAR 0 2
10659: PUSH
10660: LD_INT 5
10662: ST_TO_ADDR
10663: GO 10675
// k := tmp ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_VAR 0 3
10674: ST_TO_ADDR
// for i := 1 to k do
10675: LD_ADDR_VAR 0 1
10679: PUSH
10680: DOUBLE
10681: LD_INT 1
10683: DEC
10684: ST_TO_ADDR
10685: LD_VAR 0 2
10689: PUSH
10690: FOR_TO
10691: IFFALSE 10790
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_VAR 0 1
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 1
10708: PUSH
10709: LD_INT 4
10711: MOD
10712: PUSH
10713: LD_INT 1
10715: PLUS
10716: PPUSH
10717: CALL_OW 259
10721: PUSH
10722: LD_INT 10
10724: LESS
10725: IFFALSE 10788
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10727: LD_VAR 0 3
10731: PUSH
10732: LD_VAR 0 1
10736: ARRAY
10737: PPUSH
10738: LD_VAR 0 1
10742: PUSH
10743: LD_INT 4
10745: MOD
10746: PUSH
10747: LD_INT 1
10749: PLUS
10750: PPUSH
10751: LD_VAR 0 3
10755: PUSH
10756: LD_VAR 0 1
10760: ARRAY
10761: PPUSH
10762: LD_VAR 0 1
10766: PUSH
10767: LD_INT 4
10769: MOD
10770: PUSH
10771: LD_INT 1
10773: PLUS
10774: PPUSH
10775: CALL_OW 259
10779: PUSH
10780: LD_INT 1
10782: PLUS
10783: PPUSH
10784: CALL_OW 237
10788: GO 10690
10790: POP
10791: POP
// end ;
10792: PPOPN 3
10794: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10795: LD_EXP 59
10799: PUSH
10800: LD_EXP 67
10804: AND
10805: IFFALSE 10825
10807: GO 10809
10809: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10810: LD_INT 4
10812: PPUSH
10813: LD_OWVAR 2
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 324
10825: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10826: LD_EXP 59
10830: PUSH
10831: LD_EXP 96
10835: AND
10836: IFFALSE 10856
10838: GO 10840
10840: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10841: LD_INT 19
10843: PPUSH
10844: LD_OWVAR 2
10848: PPUSH
10849: LD_INT 0
10851: PPUSH
10852: CALL_OW 324
10856: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10857: LD_EXP 59
10861: PUSH
10862: LD_EXP 68
10866: AND
10867: IFFALSE 10969
10869: GO 10871
10871: DISABLE
10872: LD_INT 0
10874: PPUSH
10875: PPUSH
// begin enable ;
10876: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10877: LD_ADDR_VAR 0 2
10881: PUSH
10882: LD_INT 22
10884: PUSH
10885: LD_OWVAR 2
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 2
10896: PUSH
10897: LD_INT 34
10899: PUSH
10900: LD_INT 11
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 34
10909: PUSH
10910: LD_INT 30
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PPUSH
10926: CALL_OW 69
10930: ST_TO_ADDR
// if not tmp then
10931: LD_VAR 0 2
10935: NOT
10936: IFFALSE 10940
// exit ;
10938: GO 10969
// for i in tmp do
10940: LD_ADDR_VAR 0 1
10944: PUSH
10945: LD_VAR 0 2
10949: PUSH
10950: FOR_IN
10951: IFFALSE 10967
// begin SetLives ( i , 0 ) ;
10953: LD_VAR 0 1
10957: PPUSH
10958: LD_INT 0
10960: PPUSH
10961: CALL_OW 234
// end ;
10965: GO 10950
10967: POP
10968: POP
// end ;
10969: PPOPN 2
10971: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10972: LD_EXP 59
10976: PUSH
10977: LD_EXP 69
10981: AND
10982: IFFALSE 11002
10984: GO 10986
10986: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10987: LD_INT 32
10989: PPUSH
10990: LD_OWVAR 2
10994: PPUSH
10995: LD_INT 0
10997: PPUSH
10998: CALL_OW 324
11002: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11003: LD_EXP 59
11007: PUSH
11008: LD_EXP 70
11012: AND
11013: IFFALSE 11194
11015: GO 11017
11017: DISABLE
11018: LD_INT 0
11020: PPUSH
11021: PPUSH
11022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11023: LD_ADDR_VAR 0 2
11027: PUSH
11028: LD_INT 22
11030: PUSH
11031: LD_OWVAR 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 33
11042: PUSH
11043: LD_INT 3
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: ST_TO_ADDR
// if not tmp then
11059: LD_VAR 0 2
11063: NOT
11064: IFFALSE 11068
// exit ;
11066: GO 11194
// side := 0 ;
11068: LD_ADDR_VAR 0 3
11072: PUSH
11073: LD_INT 0
11075: ST_TO_ADDR
// for i := 1 to 8 do
11076: LD_ADDR_VAR 0 1
11080: PUSH
11081: DOUBLE
11082: LD_INT 1
11084: DEC
11085: ST_TO_ADDR
11086: LD_INT 8
11088: PUSH
11089: FOR_TO
11090: IFFALSE 11138
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11092: LD_OWVAR 2
11096: PUSH
11097: LD_VAR 0 1
11101: NONEQUAL
11102: PUSH
11103: LD_OWVAR 2
11107: PPUSH
11108: LD_VAR 0 1
11112: PPUSH
11113: CALL_OW 81
11117: PUSH
11118: LD_INT 2
11120: EQUAL
11121: AND
11122: IFFALSE 11136
// begin side := i ;
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: LD_VAR 0 1
11133: ST_TO_ADDR
// break ;
11134: GO 11138
// end ;
11136: GO 11089
11138: POP
11139: POP
// if not side then
11140: LD_VAR 0 3
11144: NOT
11145: IFFALSE 11149
// exit ;
11147: GO 11194
// for i := 1 to tmp do
11149: LD_ADDR_VAR 0 1
11153: PUSH
11154: DOUBLE
11155: LD_INT 1
11157: DEC
11158: ST_TO_ADDR
11159: LD_VAR 0 2
11163: PUSH
11164: FOR_TO
11165: IFFALSE 11192
// if Prob ( 60 ) then
11167: LD_INT 60
11169: PPUSH
11170: CALL_OW 13
11174: IFFALSE 11190
// SetSide ( i , side ) ;
11176: LD_VAR 0 1
11180: PPUSH
11181: LD_VAR 0 3
11185: PPUSH
11186: CALL_OW 235
11190: GO 11164
11192: POP
11193: POP
// end ;
11194: PPOPN 3
11196: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11197: LD_EXP 59
11201: PUSH
11202: LD_EXP 72
11206: AND
11207: IFFALSE 11326
11209: GO 11211
11211: DISABLE
11212: LD_INT 0
11214: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11215: LD_ADDR_VAR 0 1
11219: PUSH
11220: LD_INT 22
11222: PUSH
11223: LD_OWVAR 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 21
11234: PUSH
11235: LD_INT 1
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 3
11244: PUSH
11245: LD_INT 23
11247: PUSH
11248: LD_INT 0
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: PPUSH
11264: CALL_OW 69
11268: PUSH
11269: FOR_IN
11270: IFFALSE 11324
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11272: LD_VAR 0 1
11276: PPUSH
11277: CALL_OW 257
11281: PUSH
11282: LD_INT 1
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: LD_INT 3
11290: PUSH
11291: LD_INT 4
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: IN
11300: IFFALSE 11322
// SetClass ( un , rand ( 1 , 4 ) ) ;
11302: LD_VAR 0 1
11306: PPUSH
11307: LD_INT 1
11309: PPUSH
11310: LD_INT 4
11312: PPUSH
11313: CALL_OW 12
11317: PPUSH
11318: CALL_OW 336
11322: GO 11269
11324: POP
11325: POP
// end ;
11326: PPOPN 1
11328: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11329: LD_EXP 59
11333: PUSH
11334: LD_EXP 71
11338: AND
11339: IFFALSE 11418
11341: GO 11343
11343: DISABLE
11344: LD_INT 0
11346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11347: LD_ADDR_VAR 0 1
11351: PUSH
11352: LD_INT 22
11354: PUSH
11355: LD_OWVAR 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 21
11366: PUSH
11367: LD_INT 3
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PPUSH
11378: CALL_OW 69
11382: ST_TO_ADDR
// if not tmp then
11383: LD_VAR 0 1
11387: NOT
11388: IFFALSE 11392
// exit ;
11390: GO 11418
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11392: LD_VAR 0 1
11396: PUSH
11397: LD_INT 1
11399: PPUSH
11400: LD_VAR 0 1
11404: PPUSH
11405: CALL_OW 12
11409: ARRAY
11410: PPUSH
11411: LD_INT 100
11413: PPUSH
11414: CALL_OW 234
// end ;
11418: PPOPN 1
11420: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11421: LD_EXP 59
11425: PUSH
11426: LD_EXP 73
11430: AND
11431: IFFALSE 11529
11433: GO 11435
11435: DISABLE
11436: LD_INT 0
11438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11439: LD_ADDR_VAR 0 1
11443: PUSH
11444: LD_INT 22
11446: PUSH
11447: LD_OWVAR 2
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 21
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: ST_TO_ADDR
// if not tmp then
11475: LD_VAR 0 1
11479: NOT
11480: IFFALSE 11484
// exit ;
11482: GO 11529
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11484: LD_VAR 0 1
11488: PUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_VAR 0 1
11496: PPUSH
11497: CALL_OW 12
11501: ARRAY
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: LD_INT 4
11508: PPUSH
11509: CALL_OW 12
11513: PPUSH
11514: LD_INT 3000
11516: PPUSH
11517: LD_INT 9000
11519: PPUSH
11520: CALL_OW 12
11524: PPUSH
11525: CALL_OW 492
// end ;
11529: PPOPN 1
11531: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11532: LD_EXP 59
11536: PUSH
11537: LD_EXP 74
11541: AND
11542: IFFALSE 11562
11544: GO 11546
11546: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11547: LD_INT 1
11549: PPUSH
11550: LD_OWVAR 2
11554: PPUSH
11555: LD_INT 0
11557: PPUSH
11558: CALL_OW 324
11562: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11563: LD_EXP 59
11567: PUSH
11568: LD_EXP 75
11572: AND
11573: IFFALSE 11656
11575: GO 11577
11577: DISABLE
11578: LD_INT 0
11580: PPUSH
11581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11582: LD_ADDR_VAR 0 2
11586: PUSH
11587: LD_INT 22
11589: PUSH
11590: LD_OWVAR 2
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 21
11601: PUSH
11602: LD_INT 3
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: ST_TO_ADDR
// if not tmp then
11618: LD_VAR 0 2
11622: NOT
11623: IFFALSE 11627
// exit ;
11625: GO 11656
// for i in tmp do
11627: LD_ADDR_VAR 0 1
11631: PUSH
11632: LD_VAR 0 2
11636: PUSH
11637: FOR_IN
11638: IFFALSE 11654
// SetBLevel ( i , 10 ) ;
11640: LD_VAR 0 1
11644: PPUSH
11645: LD_INT 10
11647: PPUSH
11648: CALL_OW 241
11652: GO 11637
11654: POP
11655: POP
// end ;
11656: PPOPN 2
11658: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11659: LD_EXP 59
11663: PUSH
11664: LD_EXP 76
11668: AND
11669: IFFALSE 11780
11671: GO 11673
11673: DISABLE
11674: LD_INT 0
11676: PPUSH
11677: PPUSH
11678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11679: LD_ADDR_VAR 0 3
11683: PUSH
11684: LD_INT 22
11686: PUSH
11687: LD_OWVAR 2
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 25
11698: PUSH
11699: LD_INT 1
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PPUSH
11710: CALL_OW 69
11714: ST_TO_ADDR
// if not tmp then
11715: LD_VAR 0 3
11719: NOT
11720: IFFALSE 11724
// exit ;
11722: GO 11780
// un := tmp [ rand ( 1 , tmp ) ] ;
11724: LD_ADDR_VAR 0 2
11728: PUSH
11729: LD_VAR 0 3
11733: PUSH
11734: LD_INT 1
11736: PPUSH
11737: LD_VAR 0 3
11741: PPUSH
11742: CALL_OW 12
11746: ARRAY
11747: ST_TO_ADDR
// if Crawls ( un ) then
11748: LD_VAR 0 2
11752: PPUSH
11753: CALL_OW 318
11757: IFFALSE 11768
// ComWalk ( un ) ;
11759: LD_VAR 0 2
11763: PPUSH
11764: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_INT 5
11775: PPUSH
11776: CALL_OW 336
// end ;
11780: PPOPN 3
11782: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11783: LD_EXP 59
11787: PUSH
11788: LD_EXP 77
11792: AND
11793: PUSH
11794: LD_OWVAR 67
11798: PUSH
11799: LD_INT 4
11801: LESS
11802: AND
11803: IFFALSE 11822
11805: GO 11807
11807: DISABLE
// begin Difficulty := Difficulty + 1 ;
11808: LD_ADDR_OWVAR 67
11812: PUSH
11813: LD_OWVAR 67
11817: PUSH
11818: LD_INT 1
11820: PLUS
11821: ST_TO_ADDR
// end ;
11822: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11823: LD_EXP 59
11827: PUSH
11828: LD_EXP 78
11832: AND
11833: IFFALSE 11936
11835: GO 11837
11837: DISABLE
11838: LD_INT 0
11840: PPUSH
// begin for i := 1 to 5 do
11841: LD_ADDR_VAR 0 1
11845: PUSH
11846: DOUBLE
11847: LD_INT 1
11849: DEC
11850: ST_TO_ADDR
11851: LD_INT 5
11853: PUSH
11854: FOR_TO
11855: IFFALSE 11934
// begin uc_nation := nation_nature ;
11857: LD_ADDR_OWVAR 21
11861: PUSH
11862: LD_INT 0
11864: ST_TO_ADDR
// uc_side := 0 ;
11865: LD_ADDR_OWVAR 20
11869: PUSH
11870: LD_INT 0
11872: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11873: LD_ADDR_OWVAR 29
11877: PUSH
11878: LD_INT 12
11880: PUSH
11881: LD_INT 12
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: ST_TO_ADDR
// hc_agressivity := 20 ;
11888: LD_ADDR_OWVAR 35
11892: PUSH
11893: LD_INT 20
11895: ST_TO_ADDR
// hc_class := class_tiger ;
11896: LD_ADDR_OWVAR 28
11900: PUSH
11901: LD_INT 14
11903: ST_TO_ADDR
// hc_gallery :=  ;
11904: LD_ADDR_OWVAR 33
11908: PUSH
11909: LD_STRING 
11911: ST_TO_ADDR
// hc_name :=  ;
11912: LD_ADDR_OWVAR 26
11916: PUSH
11917: LD_STRING 
11919: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11920: CALL_OW 44
11924: PPUSH
11925: LD_INT 0
11927: PPUSH
11928: CALL_OW 51
// end ;
11932: GO 11854
11934: POP
11935: POP
// end ;
11936: PPOPN 1
11938: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11939: LD_EXP 59
11943: PUSH
11944: LD_EXP 79
11948: AND
11949: IFFALSE 11958
11951: GO 11953
11953: DISABLE
// StreamSibBomb ;
11954: CALL 11959 0 0
11958: END
// export function StreamSibBomb ; var i , x , y ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
11963: PPUSH
11964: PPUSH
// result := false ;
11965: LD_ADDR_VAR 0 1
11969: PUSH
11970: LD_INT 0
11972: ST_TO_ADDR
// for i := 1 to 16 do
11973: LD_ADDR_VAR 0 2
11977: PUSH
11978: DOUBLE
11979: LD_INT 1
11981: DEC
11982: ST_TO_ADDR
11983: LD_INT 16
11985: PUSH
11986: FOR_TO
11987: IFFALSE 12186
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11989: LD_ADDR_VAR 0 3
11993: PUSH
11994: LD_INT 10
11996: PUSH
11997: LD_INT 20
11999: PUSH
12000: LD_INT 30
12002: PUSH
12003: LD_INT 40
12005: PUSH
12006: LD_INT 50
12008: PUSH
12009: LD_INT 60
12011: PUSH
12012: LD_INT 70
12014: PUSH
12015: LD_INT 80
12017: PUSH
12018: LD_INT 90
12020: PUSH
12021: LD_INT 100
12023: PUSH
12024: LD_INT 110
12026: PUSH
12027: LD_INT 120
12029: PUSH
12030: LD_INT 130
12032: PUSH
12033: LD_INT 140
12035: PUSH
12036: LD_INT 150
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 1
12058: PPUSH
12059: LD_INT 15
12061: PPUSH
12062: CALL_OW 12
12066: ARRAY
12067: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: LD_INT 10
12075: PUSH
12076: LD_INT 20
12078: PUSH
12079: LD_INT 30
12081: PUSH
12082: LD_INT 40
12084: PUSH
12085: LD_INT 50
12087: PUSH
12088: LD_INT 60
12090: PUSH
12091: LD_INT 70
12093: PUSH
12094: LD_INT 80
12096: PUSH
12097: LD_INT 90
12099: PUSH
12100: LD_INT 100
12102: PUSH
12103: LD_INT 110
12105: PUSH
12106: LD_INT 120
12108: PUSH
12109: LD_INT 130
12111: PUSH
12112: LD_INT 140
12114: PUSH
12115: LD_INT 150
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 1
12137: PPUSH
12138: LD_INT 15
12140: PPUSH
12141: CALL_OW 12
12145: ARRAY
12146: ST_TO_ADDR
// if ValidHex ( x , y ) then
12147: LD_VAR 0 3
12151: PPUSH
12152: LD_VAR 0 4
12156: PPUSH
12157: CALL_OW 488
12161: IFFALSE 12184
// begin result := [ x , y ] ;
12163: LD_ADDR_VAR 0 1
12167: PUSH
12168: LD_VAR 0 3
12172: PUSH
12173: LD_VAR 0 4
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: ST_TO_ADDR
// break ;
12182: GO 12186
// end ; end ;
12184: GO 11986
12186: POP
12187: POP
// if result then
12188: LD_VAR 0 1
12192: IFFALSE 12252
// begin ToLua ( playSibBomb() ) ;
12194: LD_STRING playSibBomb()
12196: PPUSH
12197: CALL_OW 559
// wait ( 0 0$14 ) ;
12201: LD_INT 490
12203: PPUSH
12204: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 1
12215: ARRAY
12216: PPUSH
12217: LD_VAR 0 1
12221: PUSH
12222: LD_INT 2
12224: ARRAY
12225: PPUSH
12226: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12230: LD_VAR 0 1
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_VAR 0 1
12243: PUSH
12244: LD_INT 2
12246: ARRAY
12247: PPUSH
12248: CALL_OW 429
// end ; end ;
12252: LD_VAR 0 1
12256: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12257: LD_EXP 59
12261: PUSH
12262: LD_EXP 81
12266: AND
12267: IFFALSE 12279
12269: GO 12271
12271: DISABLE
// YouLost (  ) ;
12272: LD_STRING 
12274: PPUSH
12275: CALL_OW 104
12279: END
// every 0 0$1 trigger StreamModeActive and sFog do
12280: LD_EXP 59
12284: PUSH
12285: LD_EXP 80
12289: AND
12290: IFFALSE 12304
12292: GO 12294
12294: DISABLE
// FogOff ( your_side ) ;
12295: LD_OWVAR 2
12299: PPUSH
12300: CALL_OW 344
12304: END
// every 0 0$1 trigger StreamModeActive and sSun do
12305: LD_EXP 59
12309: PUSH
12310: LD_EXP 82
12314: AND
12315: IFFALSE 12343
12317: GO 12319
12319: DISABLE
// begin solar_recharge_percent := 0 ;
12320: LD_ADDR_OWVAR 79
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12328: LD_INT 10500
12330: PPUSH
12331: CALL_OW 67
// solar_recharge_percent := 100 ;
12335: LD_ADDR_OWVAR 79
12339: PUSH
12340: LD_INT 100
12342: ST_TO_ADDR
// end ;
12343: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12344: LD_EXP 59
12348: PUSH
12349: LD_EXP 83
12353: AND
12354: IFFALSE 12593
12356: GO 12358
12358: DISABLE
12359: LD_INT 0
12361: PPUSH
12362: PPUSH
12363: PPUSH
// begin tmp := [ ] ;
12364: LD_ADDR_VAR 0 3
12368: PUSH
12369: EMPTY
12370: ST_TO_ADDR
// for i := 1 to 6 do
12371: LD_ADDR_VAR 0 1
12375: PUSH
12376: DOUBLE
12377: LD_INT 1
12379: DEC
12380: ST_TO_ADDR
12381: LD_INT 6
12383: PUSH
12384: FOR_TO
12385: IFFALSE 12490
// begin uc_nation := nation_nature ;
12387: LD_ADDR_OWVAR 21
12391: PUSH
12392: LD_INT 0
12394: ST_TO_ADDR
// uc_side := 0 ;
12395: LD_ADDR_OWVAR 20
12399: PUSH
12400: LD_INT 0
12402: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12403: LD_ADDR_OWVAR 29
12407: PUSH
12408: LD_INT 12
12410: PUSH
12411: LD_INT 12
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: ST_TO_ADDR
// hc_agressivity := 20 ;
12418: LD_ADDR_OWVAR 35
12422: PUSH
12423: LD_INT 20
12425: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12426: LD_ADDR_OWVAR 28
12430: PUSH
12431: LD_INT 17
12433: ST_TO_ADDR
// hc_gallery :=  ;
12434: LD_ADDR_OWVAR 33
12438: PUSH
12439: LD_STRING 
12441: ST_TO_ADDR
// hc_name :=  ;
12442: LD_ADDR_OWVAR 26
12446: PUSH
12447: LD_STRING 
12449: ST_TO_ADDR
// un := CreateHuman ;
12450: LD_ADDR_VAR 0 2
12454: PUSH
12455: CALL_OW 44
12459: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12460: LD_VAR 0 2
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 51
// tmp := tmp ^ un ;
12472: LD_ADDR_VAR 0 3
12476: PUSH
12477: LD_VAR 0 3
12481: PUSH
12482: LD_VAR 0 2
12486: ADD
12487: ST_TO_ADDR
// end ;
12488: GO 12384
12490: POP
12491: POP
// repeat wait ( 0 0$1 ) ;
12492: LD_INT 35
12494: PPUSH
12495: CALL_OW 67
// for un in tmp do
12499: LD_ADDR_VAR 0 2
12503: PUSH
12504: LD_VAR 0 3
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12584
// begin if IsDead ( un ) then
12512: LD_VAR 0 2
12516: PPUSH
12517: CALL_OW 301
12521: IFFALSE 12541
// begin tmp := tmp diff un ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: LD_VAR 0 3
12532: PUSH
12533: LD_VAR 0 2
12537: DIFF
12538: ST_TO_ADDR
// continue ;
12539: GO 12509
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12541: LD_VAR 0 2
12545: PPUSH
12546: LD_INT 3
12548: PUSH
12549: LD_INT 22
12551: PUSH
12552: LD_INT 0
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PPUSH
12563: CALL_OW 69
12567: PPUSH
12568: LD_VAR 0 2
12572: PPUSH
12573: CALL_OW 74
12577: PPUSH
12578: CALL_OW 115
// end ;
12582: GO 12509
12584: POP
12585: POP
// until not tmp ;
12586: LD_VAR 0 3
12590: NOT
12591: IFFALSE 12492
// end ;
12593: PPOPN 3
12595: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12596: LD_EXP 59
12600: PUSH
12601: LD_EXP 84
12605: AND
12606: IFFALSE 12660
12608: GO 12610
12610: DISABLE
// begin ToLua ( displayTroll(); ) ;
12611: LD_STRING displayTroll();
12613: PPUSH
12614: CALL_OW 559
// wait ( 3 3$00 ) ;
12618: LD_INT 6300
12620: PPUSH
12621: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12625: LD_STRING hideTroll();
12627: PPUSH
12628: CALL_OW 559
// wait ( 1 1$00 ) ;
12632: LD_INT 2100
12634: PPUSH
12635: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12639: LD_STRING displayTroll();
12641: PPUSH
12642: CALL_OW 559
// wait ( 1 1$00 ) ;
12646: LD_INT 2100
12648: PPUSH
12649: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12653: LD_STRING hideTroll();
12655: PPUSH
12656: CALL_OW 559
// end ;
12660: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12661: LD_EXP 59
12665: PUSH
12666: LD_EXP 85
12670: AND
12671: IFFALSE 12734
12673: GO 12675
12675: DISABLE
12676: LD_INT 0
12678: PPUSH
// begin p := 0 ;
12679: LD_ADDR_VAR 0 1
12683: PUSH
12684: LD_INT 0
12686: ST_TO_ADDR
// repeat game_speed := 1 ;
12687: LD_ADDR_OWVAR 65
12691: PUSH
12692: LD_INT 1
12694: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12695: LD_INT 35
12697: PPUSH
12698: CALL_OW 67
// p := p + 1 ;
12702: LD_ADDR_VAR 0 1
12706: PUSH
12707: LD_VAR 0 1
12711: PUSH
12712: LD_INT 1
12714: PLUS
12715: ST_TO_ADDR
// until p >= 60 ;
12716: LD_VAR 0 1
12720: PUSH
12721: LD_INT 60
12723: GREATEREQUAL
12724: IFFALSE 12687
// game_speed := 4 ;
12726: LD_ADDR_OWVAR 65
12730: PUSH
12731: LD_INT 4
12733: ST_TO_ADDR
// end ;
12734: PPOPN 1
12736: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12737: LD_EXP 59
12741: PUSH
12742: LD_EXP 86
12746: AND
12747: IFFALSE 12893
12749: GO 12751
12751: DISABLE
12752: LD_INT 0
12754: PPUSH
12755: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12756: LD_ADDR_VAR 0 1
12760: PUSH
12761: LD_INT 22
12763: PUSH
12764: LD_OWVAR 2
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: LD_INT 30
12778: PUSH
12779: LD_INT 0
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 30
12788: PUSH
12789: LD_INT 1
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PPUSH
12805: CALL_OW 69
12809: ST_TO_ADDR
// if not depot then
12810: LD_VAR 0 1
12814: NOT
12815: IFFALSE 12819
// exit ;
12817: GO 12893
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12819: LD_ADDR_VAR 0 2
12823: PUSH
12824: LD_VAR 0 1
12828: PUSH
12829: LD_INT 1
12831: PPUSH
12832: LD_VAR 0 1
12836: PPUSH
12837: CALL_OW 12
12841: ARRAY
12842: PPUSH
12843: CALL_OW 274
12847: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12848: LD_VAR 0 2
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: LD_INT 0
12858: PPUSH
12859: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12863: LD_VAR 0 2
12867: PPUSH
12868: LD_INT 2
12870: PPUSH
12871: LD_INT 0
12873: PPUSH
12874: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12878: LD_VAR 0 2
12882: PPUSH
12883: LD_INT 3
12885: PPUSH
12886: LD_INT 0
12888: PPUSH
12889: CALL_OW 277
// end ;
12893: PPOPN 2
12895: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12896: LD_EXP 59
12900: PUSH
12901: LD_EXP 87
12905: AND
12906: IFFALSE 13003
12908: GO 12910
12910: DISABLE
12911: LD_INT 0
12913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12914: LD_ADDR_VAR 0 1
12918: PUSH
12919: LD_INT 22
12921: PUSH
12922: LD_OWVAR 2
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 21
12933: PUSH
12934: LD_INT 1
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 3
12943: PUSH
12944: LD_INT 23
12946: PUSH
12947: LD_INT 0
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: ST_TO_ADDR
// if not tmp then
12968: LD_VAR 0 1
12972: NOT
12973: IFFALSE 12977
// exit ;
12975: GO 13003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12977: LD_VAR 0 1
12981: PUSH
12982: LD_INT 1
12984: PPUSH
12985: LD_VAR 0 1
12989: PPUSH
12990: CALL_OW 12
12994: ARRAY
12995: PPUSH
12996: LD_INT 200
12998: PPUSH
12999: CALL_OW 234
// end ;
13003: PPOPN 1
13005: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13006: LD_EXP 59
13010: PUSH
13011: LD_EXP 88
13015: AND
13016: IFFALSE 13095
13018: GO 13020
13020: DISABLE
13021: LD_INT 0
13023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13024: LD_ADDR_VAR 0 1
13028: PUSH
13029: LD_INT 22
13031: PUSH
13032: LD_OWVAR 2
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 21
13043: PUSH
13044: LD_INT 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: ST_TO_ADDR
// if not tmp then
13060: LD_VAR 0 1
13064: NOT
13065: IFFALSE 13069
// exit ;
13067: GO 13095
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13069: LD_VAR 0 1
13073: PUSH
13074: LD_INT 1
13076: PPUSH
13077: LD_VAR 0 1
13081: PPUSH
13082: CALL_OW 12
13086: ARRAY
13087: PPUSH
13088: LD_INT 60
13090: PPUSH
13091: CALL_OW 234
// end ;
13095: PPOPN 1
13097: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13098: LD_EXP 59
13102: PUSH
13103: LD_EXP 89
13107: AND
13108: IFFALSE 13207
13110: GO 13112
13112: DISABLE
13113: LD_INT 0
13115: PPUSH
13116: PPUSH
// begin enable ;
13117: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13118: LD_ADDR_VAR 0 1
13122: PUSH
13123: LD_INT 22
13125: PUSH
13126: LD_OWVAR 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 61
13137: PUSH
13138: EMPTY
13139: LIST
13140: PUSH
13141: LD_INT 33
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: PPUSH
13156: CALL_OW 69
13160: ST_TO_ADDR
// if not tmp then
13161: LD_VAR 0 1
13165: NOT
13166: IFFALSE 13170
// exit ;
13168: GO 13207
// for i in tmp do
13170: LD_ADDR_VAR 0 2
13174: PUSH
13175: LD_VAR 0 1
13179: PUSH
13180: FOR_IN
13181: IFFALSE 13205
// if IsControledBy ( i ) then
13183: LD_VAR 0 2
13187: PPUSH
13188: CALL_OW 312
13192: IFFALSE 13203
// ComUnlink ( i ) ;
13194: LD_VAR 0 2
13198: PPUSH
13199: CALL_OW 136
13203: GO 13180
13205: POP
13206: POP
// end ;
13207: PPOPN 2
13209: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13210: LD_EXP 59
13214: PUSH
13215: LD_EXP 90
13219: AND
13220: IFFALSE 13360
13222: GO 13224
13224: DISABLE
13225: LD_INT 0
13227: PPUSH
13228: PPUSH
// begin ToLua ( displayPowell(); ) ;
13229: LD_STRING displayPowell();
13231: PPUSH
13232: CALL_OW 559
// uc_side := 0 ;
13236: LD_ADDR_OWVAR 20
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// uc_nation := 2 ;
13244: LD_ADDR_OWVAR 21
13248: PUSH
13249: LD_INT 2
13251: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13252: LD_ADDR_OWVAR 37
13256: PUSH
13257: LD_INT 14
13259: ST_TO_ADDR
// vc_engine := engine_siberite ;
13260: LD_ADDR_OWVAR 39
13264: PUSH
13265: LD_INT 3
13267: ST_TO_ADDR
// vc_control := control_apeman ;
13268: LD_ADDR_OWVAR 38
13272: PUSH
13273: LD_INT 5
13275: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13276: LD_ADDR_OWVAR 40
13280: PUSH
13281: LD_INT 29
13283: ST_TO_ADDR
// un := CreateVehicle ;
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: CALL_OW 45
13293: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13294: LD_VAR 0 2
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13306: LD_INT 35
13308: PPUSH
13309: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13313: LD_VAR 0 2
13317: PPUSH
13318: LD_INT 22
13320: PUSH
13321: LD_OWVAR 2
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PPUSH
13330: CALL_OW 69
13334: PPUSH
13335: LD_VAR 0 2
13339: PPUSH
13340: CALL_OW 74
13344: PPUSH
13345: CALL_OW 115
// until IsDead ( un ) ;
13349: LD_VAR 0 2
13353: PPUSH
13354: CALL_OW 301
13358: IFFALSE 13306
// end ;
13360: PPOPN 2
13362: END
// every 0 0$1 trigger StreamModeActive and sStu do
13363: LD_EXP 59
13367: PUSH
13368: LD_EXP 98
13372: AND
13373: IFFALSE 13389
13375: GO 13377
13377: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13378: LD_STRING displayStucuk();
13380: PPUSH
13381: CALL_OW 559
// ResetFog ;
13385: CALL_OW 335
// end ;
13389: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13390: LD_EXP 59
13394: PUSH
13395: LD_EXP 91
13399: AND
13400: IFFALSE 13541
13402: GO 13404
13404: DISABLE
13405: LD_INT 0
13407: PPUSH
13408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13409: LD_ADDR_VAR 0 2
13413: PUSH
13414: LD_INT 22
13416: PUSH
13417: LD_OWVAR 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 21
13428: PUSH
13429: LD_INT 1
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 69
13444: ST_TO_ADDR
// if not tmp then
13445: LD_VAR 0 2
13449: NOT
13450: IFFALSE 13454
// exit ;
13452: GO 13541
// un := tmp [ rand ( 1 , tmp ) ] ;
13454: LD_ADDR_VAR 0 1
13458: PUSH
13459: LD_VAR 0 2
13463: PUSH
13464: LD_INT 1
13466: PPUSH
13467: LD_VAR 0 2
13471: PPUSH
13472: CALL_OW 12
13476: ARRAY
13477: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13478: LD_VAR 0 1
13482: PPUSH
13483: LD_INT 0
13485: PPUSH
13486: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13490: LD_VAR 0 1
13494: PPUSH
13495: LD_OWVAR 3
13499: PUSH
13500: LD_VAR 0 1
13504: DIFF
13505: PPUSH
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 74
13515: PPUSH
13516: CALL_OW 115
// wait ( 0 0$20 ) ;
13520: LD_INT 700
13522: PPUSH
13523: CALL_OW 67
// SetSide ( un , your_side ) ;
13527: LD_VAR 0 1
13531: PPUSH
13532: LD_OWVAR 2
13536: PPUSH
13537: CALL_OW 235
// end ;
13541: PPOPN 2
13543: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13544: LD_EXP 59
13548: PUSH
13549: LD_EXP 92
13553: AND
13554: IFFALSE 13660
13556: GO 13558
13558: DISABLE
13559: LD_INT 0
13561: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13562: LD_ADDR_VAR 0 1
13566: PUSH
13567: LD_INT 22
13569: PUSH
13570: LD_OWVAR 2
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 2
13581: PUSH
13582: LD_INT 30
13584: PUSH
13585: LD_INT 0
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 30
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PPUSH
13611: CALL_OW 69
13615: ST_TO_ADDR
// if not depot then
13616: LD_VAR 0 1
13620: NOT
13621: IFFALSE 13625
// exit ;
13623: GO 13660
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13625: LD_VAR 0 1
13629: PUSH
13630: LD_INT 1
13632: ARRAY
13633: PPUSH
13634: CALL_OW 250
13638: PPUSH
13639: LD_VAR 0 1
13643: PUSH
13644: LD_INT 1
13646: ARRAY
13647: PPUSH
13648: CALL_OW 251
13652: PPUSH
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 495
// end ;
13660: PPOPN 1
13662: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13663: LD_EXP 59
13667: PUSH
13668: LD_EXP 93
13672: AND
13673: IFFALSE 13884
13675: GO 13677
13677: DISABLE
13678: LD_INT 0
13680: PPUSH
13681: PPUSH
13682: PPUSH
13683: PPUSH
13684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13685: LD_ADDR_VAR 0 5
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_OWVAR 2
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 21
13704: PUSH
13705: LD_INT 1
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 69
13720: ST_TO_ADDR
// if not tmp then
13721: LD_VAR 0 5
13725: NOT
13726: IFFALSE 13730
// exit ;
13728: GO 13884
// for i in tmp do
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_VAR 0 5
13739: PUSH
13740: FOR_IN
13741: IFFALSE 13882
// begin d := rand ( 0 , 5 ) ;
13743: LD_ADDR_VAR 0 4
13747: PUSH
13748: LD_INT 0
13750: PPUSH
13751: LD_INT 5
13753: PPUSH
13754: CALL_OW 12
13758: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13759: LD_ADDR_VAR 0 2
13763: PUSH
13764: LD_VAR 0 1
13768: PPUSH
13769: CALL_OW 250
13773: PPUSH
13774: LD_VAR 0 4
13778: PPUSH
13779: LD_INT 3
13781: PPUSH
13782: LD_INT 12
13784: PPUSH
13785: CALL_OW 12
13789: PPUSH
13790: CALL_OW 272
13794: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13795: LD_ADDR_VAR 0 3
13799: PUSH
13800: LD_VAR 0 1
13804: PPUSH
13805: CALL_OW 251
13809: PPUSH
13810: LD_VAR 0 4
13814: PPUSH
13815: LD_INT 3
13817: PPUSH
13818: LD_INT 12
13820: PPUSH
13821: CALL_OW 12
13825: PPUSH
13826: CALL_OW 273
13830: ST_TO_ADDR
// if ValidHex ( x , y ) then
13831: LD_VAR 0 2
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: CALL_OW 488
13845: IFFALSE 13880
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13847: LD_VAR 0 1
13851: PPUSH
13852: LD_VAR 0 2
13856: PPUSH
13857: LD_VAR 0 3
13861: PPUSH
13862: LD_INT 3
13864: PPUSH
13865: LD_INT 6
13867: PPUSH
13868: CALL_OW 12
13872: PPUSH
13873: LD_INT 1
13875: PPUSH
13876: CALL_OW 483
// end ;
13880: GO 13740
13882: POP
13883: POP
// end ;
13884: PPOPN 5
13886: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13887: LD_EXP 59
13891: PUSH
13892: LD_EXP 94
13896: AND
13897: IFFALSE 13991
13899: GO 13901
13901: DISABLE
13902: LD_INT 0
13904: PPUSH
13905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13906: LD_ADDR_VAR 0 2
13910: PUSH
13911: LD_INT 22
13913: PUSH
13914: LD_OWVAR 2
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 32
13925: PUSH
13926: LD_INT 1
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 21
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 69
13952: ST_TO_ADDR
// if not tmp then
13953: LD_VAR 0 2
13957: NOT
13958: IFFALSE 13962
// exit ;
13960: GO 13991
// for i in tmp do
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_VAR 0 2
13971: PUSH
13972: FOR_IN
13973: IFFALSE 13989
// SetFuel ( i , 0 ) ;
13975: LD_VAR 0 1
13979: PPUSH
13980: LD_INT 0
13982: PPUSH
13983: CALL_OW 240
13987: GO 13972
13989: POP
13990: POP
// end ;
13991: PPOPN 2
13993: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13994: LD_EXP 59
13998: PUSH
13999: LD_EXP 95
14003: AND
14004: IFFALSE 14070
14006: GO 14008
14008: DISABLE
14009: LD_INT 0
14011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14012: LD_ADDR_VAR 0 1
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_OWVAR 2
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 29
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PPUSH
14043: CALL_OW 69
14047: ST_TO_ADDR
// if not tmp then
14048: LD_VAR 0 1
14052: NOT
14053: IFFALSE 14057
// exit ;
14055: GO 14070
// DestroyUnit ( tmp [ 1 ] ) ;
14057: LD_VAR 0 1
14061: PUSH
14062: LD_INT 1
14064: ARRAY
14065: PPUSH
14066: CALL_OW 65
// end ;
14070: PPOPN 1
14072: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14073: LD_EXP 59
14077: PUSH
14078: LD_EXP 97
14082: AND
14083: IFFALSE 14212
14085: GO 14087
14087: DISABLE
14088: LD_INT 0
14090: PPUSH
// begin uc_side := 0 ;
14091: LD_ADDR_OWVAR 20
14095: PUSH
14096: LD_INT 0
14098: ST_TO_ADDR
// uc_nation := nation_arabian ;
14099: LD_ADDR_OWVAR 21
14103: PUSH
14104: LD_INT 2
14106: ST_TO_ADDR
// hc_gallery :=  ;
14107: LD_ADDR_OWVAR 33
14111: PUSH
14112: LD_STRING 
14114: ST_TO_ADDR
// hc_name :=  ;
14115: LD_ADDR_OWVAR 26
14119: PUSH
14120: LD_STRING 
14122: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14123: LD_INT 1
14125: PPUSH
14126: LD_INT 11
14128: PPUSH
14129: LD_INT 10
14131: PPUSH
14132: CALL_OW 380
// un := CreateHuman ;
14136: LD_ADDR_VAR 0 1
14140: PUSH
14141: CALL_OW 44
14145: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14146: LD_VAR 0 1
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14158: LD_INT 35
14160: PPUSH
14161: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14165: LD_VAR 0 1
14169: PPUSH
14170: LD_INT 22
14172: PUSH
14173: LD_OWVAR 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PPUSH
14182: CALL_OW 69
14186: PPUSH
14187: LD_VAR 0 1
14191: PPUSH
14192: CALL_OW 74
14196: PPUSH
14197: CALL_OW 115
// until IsDead ( un ) ;
14201: LD_VAR 0 1
14205: PPUSH
14206: CALL_OW 301
14210: IFFALSE 14158
// end ;
14212: PPOPN 1
14214: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14215: LD_EXP 59
14219: PUSH
14220: LD_EXP 99
14224: AND
14225: IFFALSE 14237
14227: GO 14229
14229: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14230: LD_STRING earthquake(getX(game), 0, 32)
14232: PPUSH
14233: CALL_OW 559
14237: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14238: LD_EXP 59
14242: PUSH
14243: LD_EXP 100
14247: AND
14248: IFFALSE 14339
14250: GO 14252
14252: DISABLE
14253: LD_INT 0
14255: PPUSH
// begin enable ;
14256: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14257: LD_ADDR_VAR 0 1
14261: PUSH
14262: LD_INT 22
14264: PUSH
14265: LD_OWVAR 2
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 33
14286: PUSH
14287: LD_INT 3
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: PPUSH
14299: CALL_OW 69
14303: ST_TO_ADDR
// if not tmp then
14304: LD_VAR 0 1
14308: NOT
14309: IFFALSE 14313
// exit ;
14311: GO 14339
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14313: LD_VAR 0 1
14317: PUSH
14318: LD_INT 1
14320: PPUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL_OW 12
14330: ARRAY
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 234
// end ;
14339: PPOPN 1
14341: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14342: LD_EXP 59
14346: PUSH
14347: LD_EXP 101
14351: AND
14352: IFFALSE 14493
14354: GO 14356
14356: DISABLE
14357: LD_INT 0
14359: PPUSH
14360: PPUSH
14361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14362: LD_ADDR_VAR 0 3
14366: PUSH
14367: LD_INT 22
14369: PUSH
14370: LD_OWVAR 2
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 25
14381: PUSH
14382: LD_INT 1
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 69
14397: ST_TO_ADDR
// if not tmp then
14398: LD_VAR 0 3
14402: NOT
14403: IFFALSE 14407
// exit ;
14405: GO 14493
// un := tmp [ rand ( 1 , tmp ) ] ;
14407: LD_ADDR_VAR 0 2
14411: PUSH
14412: LD_VAR 0 3
14416: PUSH
14417: LD_INT 1
14419: PPUSH
14420: LD_VAR 0 3
14424: PPUSH
14425: CALL_OW 12
14429: ARRAY
14430: ST_TO_ADDR
// if Crawls ( un ) then
14431: LD_VAR 0 2
14435: PPUSH
14436: CALL_OW 318
14440: IFFALSE 14451
// ComWalk ( un ) ;
14442: LD_VAR 0 2
14446: PPUSH
14447: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14451: LD_VAR 0 2
14455: PPUSH
14456: LD_INT 9
14458: PPUSH
14459: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14463: LD_INT 28
14465: PPUSH
14466: LD_OWVAR 2
14470: PPUSH
14471: LD_INT 2
14473: PPUSH
14474: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14478: LD_INT 29
14480: PPUSH
14481: LD_OWVAR 2
14485: PPUSH
14486: LD_INT 2
14488: PPUSH
14489: CALL_OW 322
// end ;
14493: PPOPN 3
14495: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14496: LD_EXP 59
14500: PUSH
14501: LD_EXP 102
14505: AND
14506: IFFALSE 14617
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
14515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14516: LD_ADDR_VAR 0 3
14520: PUSH
14521: LD_INT 22
14523: PUSH
14524: LD_OWVAR 2
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: LD_INT 25
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PPUSH
14547: CALL_OW 69
14551: ST_TO_ADDR
// if not tmp then
14552: LD_VAR 0 3
14556: NOT
14557: IFFALSE 14561
// exit ;
14559: GO 14617
// un := tmp [ rand ( 1 , tmp ) ] ;
14561: LD_ADDR_VAR 0 2
14565: PUSH
14566: LD_VAR 0 3
14570: PUSH
14571: LD_INT 1
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: CALL_OW 12
14583: ARRAY
14584: ST_TO_ADDR
// if Crawls ( un ) then
14585: LD_VAR 0 2
14589: PPUSH
14590: CALL_OW 318
14594: IFFALSE 14605
// ComWalk ( un ) ;
14596: LD_VAR 0 2
14600: PPUSH
14601: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14605: LD_VAR 0 2
14609: PPUSH
14610: LD_INT 8
14612: PPUSH
14613: CALL_OW 336
// end ;
14617: PPOPN 3
14619: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14620: LD_EXP 59
14624: PUSH
14625: LD_EXP 103
14629: AND
14630: IFFALSE 14774
14632: GO 14634
14634: DISABLE
14635: LD_INT 0
14637: PPUSH
14638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: LD_INT 22
14646: PUSH
14647: LD_OWVAR 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 21
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 2
14668: PUSH
14669: LD_INT 34
14671: PUSH
14672: LD_INT 12
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 34
14681: PUSH
14682: LD_INT 51
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 34
14691: PUSH
14692: LD_INT 32
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 69
14714: ST_TO_ADDR
// if not tmp then
14715: LD_VAR 0 2
14719: NOT
14720: IFFALSE 14724
// exit ;
14722: GO 14774
// for i in tmp do
14724: LD_ADDR_VAR 0 1
14728: PUSH
14729: LD_VAR 0 2
14733: PUSH
14734: FOR_IN
14735: IFFALSE 14772
// if GetCargo ( i , mat_artifact ) = 0 then
14737: LD_VAR 0 1
14741: PPUSH
14742: LD_INT 4
14744: PPUSH
14745: CALL_OW 289
14749: PUSH
14750: LD_INT 0
14752: EQUAL
14753: IFFALSE 14770
// SetCargo ( i , mat_siberit , 100 ) ;
14755: LD_VAR 0 1
14759: PPUSH
14760: LD_INT 3
14762: PPUSH
14763: LD_INT 100
14765: PPUSH
14766: CALL_OW 290
14770: GO 14734
14772: POP
14773: POP
// end ;
14774: PPOPN 2
14776: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14777: LD_EXP 59
14781: PUSH
14782: LD_EXP 104
14786: AND
14787: IFFALSE 14970
14789: GO 14791
14791: DISABLE
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14796: LD_ADDR_VAR 0 2
14800: PUSH
14801: LD_INT 22
14803: PUSH
14804: LD_OWVAR 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PPUSH
14813: CALL_OW 69
14817: ST_TO_ADDR
// if not tmp then
14818: LD_VAR 0 2
14822: NOT
14823: IFFALSE 14827
// exit ;
14825: GO 14970
// for i := 1 to 2 do
14827: LD_ADDR_VAR 0 1
14831: PUSH
14832: DOUBLE
14833: LD_INT 1
14835: DEC
14836: ST_TO_ADDR
14837: LD_INT 2
14839: PUSH
14840: FOR_TO
14841: IFFALSE 14968
// begin uc_side := your_side ;
14843: LD_ADDR_OWVAR 20
14847: PUSH
14848: LD_OWVAR 2
14852: ST_TO_ADDR
// uc_nation := nation_american ;
14853: LD_ADDR_OWVAR 21
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// vc_chassis := us_morphling ;
14861: LD_ADDR_OWVAR 37
14865: PUSH
14866: LD_INT 5
14868: ST_TO_ADDR
// vc_engine := engine_siberite ;
14869: LD_ADDR_OWVAR 39
14873: PUSH
14874: LD_INT 3
14876: ST_TO_ADDR
// vc_control := control_computer ;
14877: LD_ADDR_OWVAR 38
14881: PUSH
14882: LD_INT 3
14884: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14885: LD_ADDR_OWVAR 40
14889: PUSH
14890: LD_INT 10
14892: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14893: LD_VAR 0 2
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: CALL_OW 310
14906: NOT
14907: IFFALSE 14954
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14909: CALL_OW 45
14913: PPUSH
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PPUSH
14923: CALL_OW 250
14927: PPUSH
14928: LD_VAR 0 2
14932: PUSH
14933: LD_INT 1
14935: ARRAY
14936: PPUSH
14937: CALL_OW 251
14941: PPUSH
14942: LD_INT 12
14944: PPUSH
14945: LD_INT 1
14947: PPUSH
14948: CALL_OW 50
14952: GO 14966
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14954: CALL_OW 45
14958: PPUSH
14959: LD_INT 1
14961: PPUSH
14962: CALL_OW 51
// end ;
14966: GO 14840
14968: POP
14969: POP
// end ;
14970: PPOPN 2
14972: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14973: LD_EXP 59
14977: PUSH
14978: LD_EXP 105
14982: AND
14983: IFFALSE 15205
14985: GO 14987
14987: DISABLE
14988: LD_INT 0
14990: PPUSH
14991: PPUSH
14992: PPUSH
14993: PPUSH
14994: PPUSH
14995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14996: LD_ADDR_VAR 0 6
15000: PUSH
15001: LD_INT 22
15003: PUSH
15004: LD_OWVAR 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 3
15025: PUSH
15026: LD_INT 23
15028: PUSH
15029: LD_INT 0
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: PPUSH
15045: CALL_OW 69
15049: ST_TO_ADDR
// if not tmp then
15050: LD_VAR 0 6
15054: NOT
15055: IFFALSE 15059
// exit ;
15057: GO 15205
// s1 := rand ( 1 , 4 ) ;
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_INT 1
15066: PPUSH
15067: LD_INT 4
15069: PPUSH
15070: CALL_OW 12
15074: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15075: LD_ADDR_VAR 0 4
15079: PUSH
15080: LD_VAR 0 6
15084: PUSH
15085: LD_INT 1
15087: ARRAY
15088: PPUSH
15089: LD_VAR 0 2
15093: PPUSH
15094: CALL_OW 259
15098: ST_TO_ADDR
// if s1 = 1 then
15099: LD_VAR 0 2
15103: PUSH
15104: LD_INT 1
15106: EQUAL
15107: IFFALSE 15127
// s2 := rand ( 2 , 4 ) else
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_INT 2
15116: PPUSH
15117: LD_INT 4
15119: PPUSH
15120: CALL_OW 12
15124: ST_TO_ADDR
15125: GO 15135
// s2 := 1 ;
15127: LD_ADDR_VAR 0 3
15131: PUSH
15132: LD_INT 1
15134: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15135: LD_ADDR_VAR 0 5
15139: PUSH
15140: LD_VAR 0 6
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 3
15153: PPUSH
15154: CALL_OW 259
15158: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15159: LD_VAR 0 6
15163: PUSH
15164: LD_INT 1
15166: ARRAY
15167: PPUSH
15168: LD_VAR 0 2
15172: PPUSH
15173: LD_VAR 0 5
15177: PPUSH
15178: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15182: LD_VAR 0 6
15186: PUSH
15187: LD_INT 1
15189: ARRAY
15190: PPUSH
15191: LD_VAR 0 3
15195: PPUSH
15196: LD_VAR 0 4
15200: PPUSH
15201: CALL_OW 237
// end ;
15205: PPOPN 6
15207: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15208: LD_EXP 59
15212: PUSH
15213: LD_EXP 106
15217: AND
15218: IFFALSE 15297
15220: GO 15222
15222: DISABLE
15223: LD_INT 0
15225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15226: LD_ADDR_VAR 0 1
15230: PUSH
15231: LD_INT 22
15233: PUSH
15234: LD_OWVAR 2
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 30
15245: PUSH
15246: LD_INT 3
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 69
15261: ST_TO_ADDR
// if not tmp then
15262: LD_VAR 0 1
15266: NOT
15267: IFFALSE 15271
// exit ;
15269: GO 15297
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15271: LD_VAR 0 1
15275: PUSH
15276: LD_INT 1
15278: PPUSH
15279: LD_VAR 0 1
15283: PPUSH
15284: CALL_OW 12
15288: ARRAY
15289: PPUSH
15290: LD_INT 1
15292: PPUSH
15293: CALL_OW 234
// end ;
15297: PPOPN 1
15299: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15300: LD_EXP 59
15304: PUSH
15305: LD_EXP 107
15309: AND
15310: IFFALSE 15422
15312: GO 15314
15314: DISABLE
15315: LD_INT 0
15317: PPUSH
15318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15319: LD_ADDR_VAR 0 2
15323: PUSH
15324: LD_INT 22
15326: PUSH
15327: LD_OWVAR 2
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 2
15338: PUSH
15339: LD_INT 30
15341: PUSH
15342: LD_INT 27
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 30
15351: PUSH
15352: LD_INT 26
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 30
15361: PUSH
15362: LD_INT 28
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 69
15383: ST_TO_ADDR
// if not tmp then
15384: LD_VAR 0 2
15388: NOT
15389: IFFALSE 15393
// exit ;
15391: GO 15422
// for i in tmp do
15393: LD_ADDR_VAR 0 1
15397: PUSH
15398: LD_VAR 0 2
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15420
// SetLives ( i , 1 ) ;
15406: LD_VAR 0 1
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 234
15418: GO 15403
15420: POP
15421: POP
// end ;
15422: PPOPN 2
15424: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15425: LD_EXP 59
15429: PUSH
15430: LD_EXP 108
15434: AND
15435: IFFALSE 15722
15437: GO 15439
15439: DISABLE
15440: LD_INT 0
15442: PPUSH
15443: PPUSH
15444: PPUSH
// begin i := rand ( 1 , 7 ) ;
15445: LD_ADDR_VAR 0 1
15449: PUSH
15450: LD_INT 1
15452: PPUSH
15453: LD_INT 7
15455: PPUSH
15456: CALL_OW 12
15460: ST_TO_ADDR
// case i of 1 :
15461: LD_VAR 0 1
15465: PUSH
15466: LD_INT 1
15468: DOUBLE
15469: EQUAL
15470: IFTRUE 15474
15472: GO 15484
15474: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15475: LD_STRING earthquake(getX(game), 0, 32)
15477: PPUSH
15478: CALL_OW 559
15482: GO 15722
15484: LD_INT 2
15486: DOUBLE
15487: EQUAL
15488: IFTRUE 15492
15490: GO 15506
15492: POP
// begin ToLua ( displayStucuk(); ) ;
15493: LD_STRING displayStucuk();
15495: PPUSH
15496: CALL_OW 559
// ResetFog ;
15500: CALL_OW 335
// end ; 3 :
15504: GO 15722
15506: LD_INT 3
15508: DOUBLE
15509: EQUAL
15510: IFTRUE 15514
15512: GO 15618
15514: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15515: LD_ADDR_VAR 0 2
15519: PUSH
15520: LD_INT 22
15522: PUSH
15523: LD_OWVAR 2
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 25
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PPUSH
15546: CALL_OW 69
15550: ST_TO_ADDR
// if not tmp then
15551: LD_VAR 0 2
15555: NOT
15556: IFFALSE 15560
// exit ;
15558: GO 15722
// un := tmp [ rand ( 1 , tmp ) ] ;
15560: LD_ADDR_VAR 0 3
15564: PUSH
15565: LD_VAR 0 2
15569: PUSH
15570: LD_INT 1
15572: PPUSH
15573: LD_VAR 0 2
15577: PPUSH
15578: CALL_OW 12
15582: ARRAY
15583: ST_TO_ADDR
// if Crawls ( un ) then
15584: LD_VAR 0 3
15588: PPUSH
15589: CALL_OW 318
15593: IFFALSE 15604
// ComWalk ( un ) ;
15595: LD_VAR 0 3
15599: PPUSH
15600: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15604: LD_VAR 0 3
15608: PPUSH
15609: LD_INT 8
15611: PPUSH
15612: CALL_OW 336
// end ; 4 :
15616: GO 15722
15618: LD_INT 4
15620: DOUBLE
15621: EQUAL
15622: IFTRUE 15626
15624: GO 15700
15626: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15627: LD_ADDR_VAR 0 2
15631: PUSH
15632: LD_INT 22
15634: PUSH
15635: LD_OWVAR 2
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 30
15646: PUSH
15647: LD_INT 29
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: ST_TO_ADDR
// if not tmp then
15663: LD_VAR 0 2
15667: NOT
15668: IFFALSE 15672
// exit ;
15670: GO 15722
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15672: LD_VAR 0 2
15676: PUSH
15677: LD_INT 1
15679: ARRAY
15680: PPUSH
15681: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 1
15692: ARRAY
15693: PPUSH
15694: CALL_OW 65
// end ; 5 .. 7 :
15698: GO 15722
15700: LD_INT 5
15702: DOUBLE
15703: GREATEREQUAL
15704: IFFALSE 15712
15706: LD_INT 7
15708: DOUBLE
15709: LESSEQUAL
15710: IFTRUE 15714
15712: GO 15721
15714: POP
// StreamSibBomb ; end ;
15715: CALL 11959 0 0
15719: GO 15722
15721: POP
// end ;
15722: PPOPN 3
15724: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15725: LD_EXP 59
15729: PUSH
15730: LD_EXP 109
15734: AND
15735: IFFALSE 15891
15737: GO 15739
15739: DISABLE
15740: LD_INT 0
15742: PPUSH
15743: PPUSH
15744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15745: LD_ADDR_VAR 0 2
15749: PUSH
15750: LD_INT 81
15752: PUSH
15753: LD_OWVAR 2
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 2
15764: PUSH
15765: LD_INT 21
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 21
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 69
15798: ST_TO_ADDR
// if not tmp then
15799: LD_VAR 0 2
15803: NOT
15804: IFFALSE 15808
// exit ;
15806: GO 15891
// p := 0 ;
15808: LD_ADDR_VAR 0 3
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15816: LD_INT 35
15818: PPUSH
15819: CALL_OW 67
// p := p + 1 ;
15823: LD_ADDR_VAR 0 3
15827: PUSH
15828: LD_VAR 0 3
15832: PUSH
15833: LD_INT 1
15835: PLUS
15836: ST_TO_ADDR
// for i in tmp do
15837: LD_ADDR_VAR 0 1
15841: PUSH
15842: LD_VAR 0 2
15846: PUSH
15847: FOR_IN
15848: IFFALSE 15879
// if GetLives ( i ) < 1000 then
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL_OW 256
15859: PUSH
15860: LD_INT 1000
15862: LESS
15863: IFFALSE 15877
// SetLives ( i , 1000 ) ;
15865: LD_VAR 0 1
15869: PPUSH
15870: LD_INT 1000
15872: PPUSH
15873: CALL_OW 234
15877: GO 15847
15879: POP
15880: POP
// until p > 20 ;
15881: LD_VAR 0 3
15885: PUSH
15886: LD_INT 20
15888: GREATER
15889: IFFALSE 15816
// end ;
15891: PPOPN 3
15893: END
// every 0 0$1 trigger StreamModeActive and sTime do
15894: LD_EXP 59
15898: PUSH
15899: LD_EXP 110
15903: AND
15904: IFFALSE 15939
15906: GO 15908
15908: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15909: LD_INT 28
15911: PPUSH
15912: LD_OWVAR 2
15916: PPUSH
15917: LD_INT 2
15919: PPUSH
15920: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15924: LD_INT 30
15926: PPUSH
15927: LD_OWVAR 2
15931: PPUSH
15932: LD_INT 2
15934: PPUSH
15935: CALL_OW 322
// end ;
15939: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15940: LD_EXP 59
15944: PUSH
15945: LD_EXP 111
15949: AND
15950: IFFALSE 16071
15952: GO 15954
15954: DISABLE
15955: LD_INT 0
15957: PPUSH
15958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_INT 22
15966: PUSH
15967: LD_OWVAR 2
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 21
15978: PUSH
15979: LD_INT 1
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 3
15988: PUSH
15989: LD_INT 23
15991: PUSH
15992: LD_INT 0
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: LIST
16007: PPUSH
16008: CALL_OW 69
16012: ST_TO_ADDR
// if not tmp then
16013: LD_VAR 0 2
16017: NOT
16018: IFFALSE 16022
// exit ;
16020: GO 16071
// for i in tmp do
16022: LD_ADDR_VAR 0 1
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16069
// begin if Crawls ( i ) then
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 318
16044: IFFALSE 16055
// ComWalk ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 138
// SetClass ( i , 2 ) ;
16055: LD_VAR 0 1
16059: PPUSH
16060: LD_INT 2
16062: PPUSH
16063: CALL_OW 336
// end ;
16067: GO 16032
16069: POP
16070: POP
// end ;
16071: PPOPN 2
16073: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16074: LD_EXP 59
16078: PUSH
16079: LD_EXP 112
16083: AND
16084: IFFALSE 16372
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
16093: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16094: LD_OWVAR 2
16098: PPUSH
16099: LD_INT 9
16101: PPUSH
16102: LD_INT 1
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16112: LD_INT 9
16114: PPUSH
16115: LD_OWVAR 2
16119: PPUSH
16120: CALL_OW 343
// uc_side := 9 ;
16124: LD_ADDR_OWVAR 20
16128: PUSH
16129: LD_INT 9
16131: ST_TO_ADDR
// uc_nation := 2 ;
16132: LD_ADDR_OWVAR 21
16136: PUSH
16137: LD_INT 2
16139: ST_TO_ADDR
// hc_name := Dark Warrior ;
16140: LD_ADDR_OWVAR 26
16144: PUSH
16145: LD_STRING Dark Warrior
16147: ST_TO_ADDR
// hc_gallery :=  ;
16148: LD_ADDR_OWVAR 33
16152: PUSH
16153: LD_STRING 
16155: ST_TO_ADDR
// hc_noskilllimit := true ;
16156: LD_ADDR_OWVAR 76
16160: PUSH
16161: LD_INT 1
16163: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16164: LD_ADDR_OWVAR 31
16168: PUSH
16169: LD_INT 30
16171: PUSH
16172: LD_INT 30
16174: PUSH
16175: LD_INT 30
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: ST_TO_ADDR
// un := CreateHuman ;
16187: LD_ADDR_VAR 0 3
16191: PUSH
16192: CALL_OW 44
16196: ST_TO_ADDR
// hc_noskilllimit := false ;
16197: LD_ADDR_OWVAR 76
16201: PUSH
16202: LD_INT 0
16204: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 51
// ToLua ( playRanger() ) ;
16217: LD_STRING playRanger()
16219: PPUSH
16220: CALL_OW 559
// p := 0 ;
16224: LD_ADDR_VAR 0 2
16228: PUSH
16229: LD_INT 0
16231: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16232: LD_INT 35
16234: PPUSH
16235: CALL_OW 67
// p := p + 1 ;
16239: LD_ADDR_VAR 0 2
16243: PUSH
16244: LD_VAR 0 2
16248: PUSH
16249: LD_INT 1
16251: PLUS
16252: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16253: LD_VAR 0 3
16257: PPUSH
16258: CALL_OW 256
16262: PUSH
16263: LD_INT 1000
16265: LESS
16266: IFFALSE 16280
// SetLives ( un , 1000 ) ;
16268: LD_VAR 0 3
16272: PPUSH
16273: LD_INT 1000
16275: PPUSH
16276: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_INT 81
16287: PUSH
16288: LD_OWVAR 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 91
16299: PUSH
16300: LD_VAR 0 3
16304: PUSH
16305: LD_INT 30
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: PPUSH
16322: LD_VAR 0 3
16326: PPUSH
16327: CALL_OW 74
16331: PPUSH
16332: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16336: LD_VAR 0 2
16340: PUSH
16341: LD_INT 80
16343: GREATER
16344: PUSH
16345: LD_VAR 0 3
16349: PPUSH
16350: CALL_OW 301
16354: OR
16355: IFFALSE 16232
// if un then
16357: LD_VAR 0 3
16361: IFFALSE 16372
// RemoveUnit ( un ) ;
16363: LD_VAR 0 3
16367: PPUSH
16368: CALL_OW 64
// end ;
16372: PPOPN 3
16374: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16375: LD_EXP 113
16379: IFFALSE 16495
16381: GO 16383
16383: DISABLE
16384: LD_INT 0
16386: PPUSH
16387: PPUSH
16388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16389: LD_ADDR_VAR 0 2
16393: PUSH
16394: LD_INT 81
16396: PUSH
16397: LD_OWVAR 2
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 21
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PPUSH
16420: CALL_OW 69
16424: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16425: LD_STRING playComputer()
16427: PPUSH
16428: CALL_OW 559
// if not tmp then
16432: LD_VAR 0 2
16436: NOT
16437: IFFALSE 16441
// exit ;
16439: GO 16495
// for i in tmp do
16441: LD_ADDR_VAR 0 1
16445: PUSH
16446: LD_VAR 0 2
16450: PUSH
16451: FOR_IN
16452: IFFALSE 16493
// for j := 1 to 4 do
16454: LD_ADDR_VAR 0 3
16458: PUSH
16459: DOUBLE
16460: LD_INT 1
16462: DEC
16463: ST_TO_ADDR
16464: LD_INT 4
16466: PUSH
16467: FOR_TO
16468: IFFALSE 16489
// SetSkill ( i , j , 10 ) ;
16470: LD_VAR 0 1
16474: PPUSH
16475: LD_VAR 0 3
16479: PPUSH
16480: LD_INT 10
16482: PPUSH
16483: CALL_OW 237
16487: GO 16467
16489: POP
16490: POP
16491: GO 16451
16493: POP
16494: POP
// end ;
16495: PPOPN 3
16497: END
// every 0 0$1 trigger s30 do var i , tmp ;
16498: LD_EXP 114
16502: IFFALSE 16571
16504: GO 16506
16506: DISABLE
16507: LD_INT 0
16509: PPUSH
16510: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16511: LD_ADDR_VAR 0 2
16515: PUSH
16516: LD_INT 22
16518: PUSH
16519: LD_OWVAR 2
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: ST_TO_ADDR
// if not tmp then
16533: LD_VAR 0 2
16537: NOT
16538: IFFALSE 16542
// exit ;
16540: GO 16571
// for i in tmp do
16542: LD_ADDR_VAR 0 1
16546: PUSH
16547: LD_VAR 0 2
16551: PUSH
16552: FOR_IN
16553: IFFALSE 16569
// SetLives ( i , 300 ) ;
16555: LD_VAR 0 1
16559: PPUSH
16560: LD_INT 300
16562: PPUSH
16563: CALL_OW 234
16567: GO 16552
16569: POP
16570: POP
// end ;
16571: PPOPN 2
16573: END
// every 0 0$1 trigger s60 do var i , tmp ;
16574: LD_EXP 115
16578: IFFALSE 16647
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_OWVAR 2
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PPUSH
16604: CALL_OW 69
16608: ST_TO_ADDR
// if not tmp then
16609: LD_VAR 0 2
16613: NOT
16614: IFFALSE 16618
// exit ;
16616: GO 16647
// for i in tmp do
16618: LD_ADDR_VAR 0 1
16622: PUSH
16623: LD_VAR 0 2
16627: PUSH
16628: FOR_IN
16629: IFFALSE 16645
// SetLives ( i , 600 ) ;
16631: LD_VAR 0 1
16635: PPUSH
16636: LD_INT 600
16638: PPUSH
16639: CALL_OW 234
16643: GO 16628
16645: POP
16646: POP
// end ;
16647: PPOPN 2
16649: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16650: LD_INT 0
16652: PPUSH
// case cmd of 301 :
16653: LD_VAR 0 1
16657: PUSH
16658: LD_INT 301
16660: DOUBLE
16661: EQUAL
16662: IFTRUE 16666
16664: GO 16698
16666: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16667: LD_VAR 0 6
16671: PPUSH
16672: LD_VAR 0 7
16676: PPUSH
16677: LD_VAR 0 8
16681: PPUSH
16682: LD_VAR 0 4
16686: PPUSH
16687: LD_VAR 0 5
16691: PPUSH
16692: CALL 17899 0 5
16696: GO 16819
16698: LD_INT 302
16700: DOUBLE
16701: EQUAL
16702: IFTRUE 16706
16704: GO 16743
16706: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16707: LD_VAR 0 6
16711: PPUSH
16712: LD_VAR 0 7
16716: PPUSH
16717: LD_VAR 0 8
16721: PPUSH
16722: LD_VAR 0 9
16726: PPUSH
16727: LD_VAR 0 4
16731: PPUSH
16732: LD_VAR 0 5
16736: PPUSH
16737: CALL 17990 0 6
16741: GO 16819
16743: LD_INT 303
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 16788
16751: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16752: LD_VAR 0 6
16756: PPUSH
16757: LD_VAR 0 7
16761: PPUSH
16762: LD_VAR 0 8
16766: PPUSH
16767: LD_VAR 0 9
16771: PPUSH
16772: LD_VAR 0 4
16776: PPUSH
16777: LD_VAR 0 5
16781: PPUSH
16782: CALL 16824 0 6
16786: GO 16819
16788: LD_INT 304
16790: DOUBLE
16791: EQUAL
16792: IFTRUE 16796
16794: GO 16818
16796: POP
// hHackTeleport ( unit , x , y ) ; end ;
16797: LD_VAR 0 2
16801: PPUSH
16802: LD_VAR 0 4
16806: PPUSH
16807: LD_VAR 0 5
16811: PPUSH
16812: CALL 18583 0 3
16816: GO 16819
16818: POP
// end ;
16819: LD_VAR 0 12
16823: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16824: LD_INT 0
16826: PPUSH
16827: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16828: LD_VAR 0 1
16832: PUSH
16833: LD_INT 1
16835: LESS
16836: PUSH
16837: LD_VAR 0 1
16841: PUSH
16842: LD_INT 3
16844: GREATER
16845: OR
16846: PUSH
16847: LD_VAR 0 5
16851: PPUSH
16852: LD_VAR 0 6
16856: PPUSH
16857: CALL_OW 428
16861: OR
16862: IFFALSE 16866
// exit ;
16864: GO 17586
// uc_side := your_side ;
16866: LD_ADDR_OWVAR 20
16870: PUSH
16871: LD_OWVAR 2
16875: ST_TO_ADDR
// uc_nation := nation ;
16876: LD_ADDR_OWVAR 21
16880: PUSH
16881: LD_VAR 0 1
16885: ST_TO_ADDR
// bc_level = 1 ;
16886: LD_ADDR_OWVAR 43
16890: PUSH
16891: LD_INT 1
16893: ST_TO_ADDR
// case btype of 1 :
16894: LD_VAR 0 2
16898: PUSH
16899: LD_INT 1
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16918
16907: POP
// bc_type := b_depot ; 2 :
16908: LD_ADDR_OWVAR 42
16912: PUSH
16913: LD_INT 0
16915: ST_TO_ADDR
16916: GO 17530
16918: LD_INT 2
16920: DOUBLE
16921: EQUAL
16922: IFTRUE 16926
16924: GO 16937
16926: POP
// bc_type := b_warehouse ; 3 :
16927: LD_ADDR_OWVAR 42
16931: PUSH
16932: LD_INT 1
16934: ST_TO_ADDR
16935: GO 17530
16937: LD_INT 3
16939: DOUBLE
16940: EQUAL
16941: IFTRUE 16945
16943: GO 16956
16945: POP
// bc_type := b_lab ; 4 .. 9 :
16946: LD_ADDR_OWVAR 42
16950: PUSH
16951: LD_INT 6
16953: ST_TO_ADDR
16954: GO 17530
16956: LD_INT 4
16958: DOUBLE
16959: GREATEREQUAL
16960: IFFALSE 16968
16962: LD_INT 9
16964: DOUBLE
16965: LESSEQUAL
16966: IFTRUE 16970
16968: GO 17022
16970: POP
// begin bc_type := b_lab_half ;
16971: LD_ADDR_OWVAR 42
16975: PUSH
16976: LD_INT 7
16978: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16979: LD_ADDR_OWVAR 44
16983: PUSH
16984: LD_INT 10
16986: PUSH
16987: LD_INT 11
16989: PUSH
16990: LD_INT 12
16992: PUSH
16993: LD_INT 15
16995: PUSH
16996: LD_INT 14
16998: PUSH
16999: LD_INT 13
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: LD_VAR 0 2
17014: PUSH
17015: LD_INT 3
17017: MINUS
17018: ARRAY
17019: ST_TO_ADDR
// end ; 10 .. 13 :
17020: GO 17530
17022: LD_INT 10
17024: DOUBLE
17025: GREATEREQUAL
17026: IFFALSE 17034
17028: LD_INT 13
17030: DOUBLE
17031: LESSEQUAL
17032: IFTRUE 17036
17034: GO 17113
17036: POP
// begin bc_type := b_lab_full ;
17037: LD_ADDR_OWVAR 42
17041: PUSH
17042: LD_INT 8
17044: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17045: LD_ADDR_OWVAR 44
17049: PUSH
17050: LD_INT 10
17052: PUSH
17053: LD_INT 12
17055: PUSH
17056: LD_INT 14
17058: PUSH
17059: LD_INT 13
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: PUSH
17068: LD_VAR 0 2
17072: PUSH
17073: LD_INT 9
17075: MINUS
17076: ARRAY
17077: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17078: LD_ADDR_OWVAR 45
17082: PUSH
17083: LD_INT 11
17085: PUSH
17086: LD_INT 15
17088: PUSH
17089: LD_INT 12
17091: PUSH
17092: LD_INT 15
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: PUSH
17101: LD_VAR 0 2
17105: PUSH
17106: LD_INT 9
17108: MINUS
17109: ARRAY
17110: ST_TO_ADDR
// end ; 14 :
17111: GO 17530
17113: LD_INT 14
17115: DOUBLE
17116: EQUAL
17117: IFTRUE 17121
17119: GO 17132
17121: POP
// bc_type := b_workshop ; 15 :
17122: LD_ADDR_OWVAR 42
17126: PUSH
17127: LD_INT 2
17129: ST_TO_ADDR
17130: GO 17530
17132: LD_INT 15
17134: DOUBLE
17135: EQUAL
17136: IFTRUE 17140
17138: GO 17151
17140: POP
// bc_type := b_factory ; 16 :
17141: LD_ADDR_OWVAR 42
17145: PUSH
17146: LD_INT 3
17148: ST_TO_ADDR
17149: GO 17530
17151: LD_INT 16
17153: DOUBLE
17154: EQUAL
17155: IFTRUE 17159
17157: GO 17170
17159: POP
// bc_type := b_ext_gun ; 17 :
17160: LD_ADDR_OWVAR 42
17164: PUSH
17165: LD_INT 17
17167: ST_TO_ADDR
17168: GO 17530
17170: LD_INT 17
17172: DOUBLE
17173: EQUAL
17174: IFTRUE 17178
17176: GO 17206
17178: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17179: LD_ADDR_OWVAR 42
17183: PUSH
17184: LD_INT 19
17186: PUSH
17187: LD_INT 23
17189: PUSH
17190: LD_INT 19
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: LD_VAR 0 1
17202: ARRAY
17203: ST_TO_ADDR
17204: GO 17530
17206: LD_INT 18
17208: DOUBLE
17209: EQUAL
17210: IFTRUE 17214
17212: GO 17225
17214: POP
// bc_type := b_ext_radar ; 19 :
17215: LD_ADDR_OWVAR 42
17219: PUSH
17220: LD_INT 20
17222: ST_TO_ADDR
17223: GO 17530
17225: LD_INT 19
17227: DOUBLE
17228: EQUAL
17229: IFTRUE 17233
17231: GO 17244
17233: POP
// bc_type := b_ext_radio ; 20 :
17234: LD_ADDR_OWVAR 42
17238: PUSH
17239: LD_INT 22
17241: ST_TO_ADDR
17242: GO 17530
17244: LD_INT 20
17246: DOUBLE
17247: EQUAL
17248: IFTRUE 17252
17250: GO 17263
17252: POP
// bc_type := b_ext_siberium ; 21 :
17253: LD_ADDR_OWVAR 42
17257: PUSH
17258: LD_INT 21
17260: ST_TO_ADDR
17261: GO 17530
17263: LD_INT 21
17265: DOUBLE
17266: EQUAL
17267: IFTRUE 17271
17269: GO 17282
17271: POP
// bc_type := b_ext_computer ; 22 :
17272: LD_ADDR_OWVAR 42
17276: PUSH
17277: LD_INT 24
17279: ST_TO_ADDR
17280: GO 17530
17282: LD_INT 22
17284: DOUBLE
17285: EQUAL
17286: IFTRUE 17290
17288: GO 17301
17290: POP
// bc_type := b_ext_track ; 23 :
17291: LD_ADDR_OWVAR 42
17295: PUSH
17296: LD_INT 16
17298: ST_TO_ADDR
17299: GO 17530
17301: LD_INT 23
17303: DOUBLE
17304: EQUAL
17305: IFTRUE 17309
17307: GO 17320
17309: POP
// bc_type := b_ext_laser ; 24 :
17310: LD_ADDR_OWVAR 42
17314: PUSH
17315: LD_INT 25
17317: ST_TO_ADDR
17318: GO 17530
17320: LD_INT 24
17322: DOUBLE
17323: EQUAL
17324: IFTRUE 17328
17326: GO 17339
17328: POP
// bc_type := b_control_tower ; 25 :
17329: LD_ADDR_OWVAR 42
17333: PUSH
17334: LD_INT 36
17336: ST_TO_ADDR
17337: GO 17530
17339: LD_INT 25
17341: DOUBLE
17342: EQUAL
17343: IFTRUE 17347
17345: GO 17358
17347: POP
// bc_type := b_breastwork ; 26 :
17348: LD_ADDR_OWVAR 42
17352: PUSH
17353: LD_INT 31
17355: ST_TO_ADDR
17356: GO 17530
17358: LD_INT 26
17360: DOUBLE
17361: EQUAL
17362: IFTRUE 17366
17364: GO 17377
17366: POP
// bc_type := b_bunker ; 27 :
17367: LD_ADDR_OWVAR 42
17371: PUSH
17372: LD_INT 32
17374: ST_TO_ADDR
17375: GO 17530
17377: LD_INT 27
17379: DOUBLE
17380: EQUAL
17381: IFTRUE 17385
17383: GO 17396
17385: POP
// bc_type := b_turret ; 28 :
17386: LD_ADDR_OWVAR 42
17390: PUSH
17391: LD_INT 33
17393: ST_TO_ADDR
17394: GO 17530
17396: LD_INT 28
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17415
17404: POP
// bc_type := b_armoury ; 29 :
17405: LD_ADDR_OWVAR 42
17409: PUSH
17410: LD_INT 4
17412: ST_TO_ADDR
17413: GO 17530
17415: LD_INT 29
17417: DOUBLE
17418: EQUAL
17419: IFTRUE 17423
17421: GO 17434
17423: POP
// bc_type := b_barracks ; 30 :
17424: LD_ADDR_OWVAR 42
17428: PUSH
17429: LD_INT 5
17431: ST_TO_ADDR
17432: GO 17530
17434: LD_INT 30
17436: DOUBLE
17437: EQUAL
17438: IFTRUE 17442
17440: GO 17453
17442: POP
// bc_type := b_solar_power ; 31 :
17443: LD_ADDR_OWVAR 42
17447: PUSH
17448: LD_INT 27
17450: ST_TO_ADDR
17451: GO 17530
17453: LD_INT 31
17455: DOUBLE
17456: EQUAL
17457: IFTRUE 17461
17459: GO 17472
17461: POP
// bc_type := b_oil_power ; 32 :
17462: LD_ADDR_OWVAR 42
17466: PUSH
17467: LD_INT 26
17469: ST_TO_ADDR
17470: GO 17530
17472: LD_INT 32
17474: DOUBLE
17475: EQUAL
17476: IFTRUE 17480
17478: GO 17491
17480: POP
// bc_type := b_siberite_power ; 33 :
17481: LD_ADDR_OWVAR 42
17485: PUSH
17486: LD_INT 28
17488: ST_TO_ADDR
17489: GO 17530
17491: LD_INT 33
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17510
17499: POP
// bc_type := b_oil_mine ; 34 :
17500: LD_ADDR_OWVAR 42
17504: PUSH
17505: LD_INT 29
17507: ST_TO_ADDR
17508: GO 17530
17510: LD_INT 34
17512: DOUBLE
17513: EQUAL
17514: IFTRUE 17518
17516: GO 17529
17518: POP
// bc_type := b_siberite_mine ; end ;
17519: LD_ADDR_OWVAR 42
17523: PUSH
17524: LD_INT 30
17526: ST_TO_ADDR
17527: GO 17530
17529: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17530: LD_ADDR_VAR 0 8
17534: PUSH
17535: LD_VAR 0 5
17539: PPUSH
17540: LD_VAR 0 6
17544: PPUSH
17545: LD_VAR 0 3
17549: PPUSH
17550: CALL_OW 47
17554: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17555: LD_OWVAR 42
17559: PUSH
17560: LD_INT 32
17562: PUSH
17563: LD_INT 33
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: IN
17570: IFFALSE 17586
// PlaceWeaponTurret ( b , weapon ) ;
17572: LD_VAR 0 8
17576: PPUSH
17577: LD_VAR 0 4
17581: PPUSH
17582: CALL_OW 431
// end ;
17586: LD_VAR 0 7
17590: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17591: LD_INT 0
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17597: LD_ADDR_VAR 0 4
17601: PUSH
17602: LD_INT 22
17604: PUSH
17605: LD_OWVAR 2
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 2
17616: PUSH
17617: LD_INT 30
17619: PUSH
17620: LD_INT 0
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 30
17629: PUSH
17630: LD_INT 1
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PPUSH
17646: CALL_OW 69
17650: ST_TO_ADDR
// if not tmp then
17651: LD_VAR 0 4
17655: NOT
17656: IFFALSE 17660
// exit ;
17658: GO 17719
// for i in tmp do
17660: LD_ADDR_VAR 0 2
17664: PUSH
17665: LD_VAR 0 4
17669: PUSH
17670: FOR_IN
17671: IFFALSE 17717
// for j = 1 to 3 do
17673: LD_ADDR_VAR 0 3
17677: PUSH
17678: DOUBLE
17679: LD_INT 1
17681: DEC
17682: ST_TO_ADDR
17683: LD_INT 3
17685: PUSH
17686: FOR_TO
17687: IFFALSE 17713
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17689: LD_VAR 0 2
17693: PPUSH
17694: CALL_OW 274
17698: PPUSH
17699: LD_VAR 0 3
17703: PPUSH
17704: LD_INT 99999
17706: PPUSH
17707: CALL_OW 277
17711: GO 17686
17713: POP
17714: POP
17715: GO 17670
17717: POP
17718: POP
// end ;
17719: LD_VAR 0 1
17723: RET
// export function hHackSetLevel10 ; var i , j ; begin
17724: LD_INT 0
17726: PPUSH
17727: PPUSH
17728: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17729: LD_ADDR_VAR 0 2
17733: PUSH
17734: LD_INT 21
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PPUSH
17744: CALL_OW 69
17748: PUSH
17749: FOR_IN
17750: IFFALSE 17802
// if IsSelected ( i ) then
17752: LD_VAR 0 2
17756: PPUSH
17757: CALL_OW 306
17761: IFFALSE 17800
// begin for j := 1 to 4 do
17763: LD_ADDR_VAR 0 3
17767: PUSH
17768: DOUBLE
17769: LD_INT 1
17771: DEC
17772: ST_TO_ADDR
17773: LD_INT 4
17775: PUSH
17776: FOR_TO
17777: IFFALSE 17798
// SetSkill ( i , j , 10 ) ;
17779: LD_VAR 0 2
17783: PPUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: LD_INT 10
17791: PPUSH
17792: CALL_OW 237
17796: GO 17776
17798: POP
17799: POP
// end ;
17800: GO 17749
17802: POP
17803: POP
// end ;
17804: LD_VAR 0 1
17808: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17809: LD_INT 0
17811: PPUSH
17812: PPUSH
17813: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17814: LD_ADDR_VAR 0 2
17818: PUSH
17819: LD_INT 22
17821: PUSH
17822: LD_OWVAR 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 21
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PPUSH
17845: CALL_OW 69
17849: PUSH
17850: FOR_IN
17851: IFFALSE 17892
// begin for j := 1 to 4 do
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: DOUBLE
17859: LD_INT 1
17861: DEC
17862: ST_TO_ADDR
17863: LD_INT 4
17865: PUSH
17866: FOR_TO
17867: IFFALSE 17888
// SetSkill ( i , j , 10 ) ;
17869: LD_VAR 0 2
17873: PPUSH
17874: LD_VAR 0 3
17878: PPUSH
17879: LD_INT 10
17881: PPUSH
17882: CALL_OW 237
17886: GO 17866
17888: POP
17889: POP
// end ;
17890: GO 17850
17892: POP
17893: POP
// end ;
17894: LD_VAR 0 1
17898: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17899: LD_INT 0
17901: PPUSH
// uc_side := your_side ;
17902: LD_ADDR_OWVAR 20
17906: PUSH
17907: LD_OWVAR 2
17911: ST_TO_ADDR
// uc_nation := nation ;
17912: LD_ADDR_OWVAR 21
17916: PUSH
17917: LD_VAR 0 1
17921: ST_TO_ADDR
// InitHc ;
17922: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17926: LD_INT 0
17928: PPUSH
17929: LD_VAR 0 2
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17943: LD_VAR 0 4
17947: PPUSH
17948: LD_VAR 0 5
17952: PPUSH
17953: CALL_OW 428
17957: PUSH
17958: LD_INT 0
17960: EQUAL
17961: IFFALSE 17985
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17963: CALL_OW 44
17967: PPUSH
17968: LD_VAR 0 4
17972: PPUSH
17973: LD_VAR 0 5
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: CALL_OW 48
// end ;
17985: LD_VAR 0 6
17989: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17990: LD_INT 0
17992: PPUSH
17993: PPUSH
// uc_side := your_side ;
17994: LD_ADDR_OWVAR 20
17998: PUSH
17999: LD_OWVAR 2
18003: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18004: LD_VAR 0 1
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: LD_INT 2
18014: PUSH
18015: LD_INT 3
18017: PUSH
18018: LD_INT 4
18020: PUSH
18021: LD_INT 5
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: IN
18031: IFFALSE 18043
// uc_nation := nation_american else
18033: LD_ADDR_OWVAR 21
18037: PUSH
18038: LD_INT 1
18040: ST_TO_ADDR
18041: GO 18086
// if chassis in [ 11 , 12 , 13 , 14 ] then
18043: LD_VAR 0 1
18047: PUSH
18048: LD_INT 11
18050: PUSH
18051: LD_INT 12
18053: PUSH
18054: LD_INT 13
18056: PUSH
18057: LD_INT 14
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: IN
18066: IFFALSE 18078
// uc_nation := nation_arabian else
18068: LD_ADDR_OWVAR 21
18072: PUSH
18073: LD_INT 2
18075: ST_TO_ADDR
18076: GO 18086
// uc_nation := nation_russian ;
18078: LD_ADDR_OWVAR 21
18082: PUSH
18083: LD_INT 3
18085: ST_TO_ADDR
// vc_chassis := chassis ;
18086: LD_ADDR_OWVAR 37
18090: PUSH
18091: LD_VAR 0 1
18095: ST_TO_ADDR
// vc_engine := engine ;
18096: LD_ADDR_OWVAR 39
18100: PUSH
18101: LD_VAR 0 2
18105: ST_TO_ADDR
// vc_control := control ;
18106: LD_ADDR_OWVAR 38
18110: PUSH
18111: LD_VAR 0 3
18115: ST_TO_ADDR
// vc_weapon := weapon ;
18116: LD_ADDR_OWVAR 40
18120: PUSH
18121: LD_VAR 0 4
18125: ST_TO_ADDR
// un := CreateVehicle ;
18126: LD_ADDR_VAR 0 8
18130: PUSH
18131: CALL_OW 45
18135: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18136: LD_VAR 0 8
18140: PPUSH
18141: LD_INT 0
18143: PPUSH
18144: LD_INT 5
18146: PPUSH
18147: CALL_OW 12
18151: PPUSH
18152: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18156: LD_VAR 0 8
18160: PPUSH
18161: LD_VAR 0 5
18165: PPUSH
18166: LD_VAR 0 6
18170: PPUSH
18171: LD_INT 1
18173: PPUSH
18174: CALL_OW 48
// end ;
18178: LD_VAR 0 7
18182: RET
// export hInvincible ; every 1 do
18183: GO 18185
18185: DISABLE
// hInvincible := [ ] ;
18186: LD_ADDR_EXP 116
18190: PUSH
18191: EMPTY
18192: ST_TO_ADDR
18193: END
// every 10 do var i ;
18194: GO 18196
18196: DISABLE
18197: LD_INT 0
18199: PPUSH
// begin enable ;
18200: ENABLE
// if not hInvincible then
18201: LD_EXP 116
18205: NOT
18206: IFFALSE 18210
// exit ;
18208: GO 18254
// for i in hInvincible do
18210: LD_ADDR_VAR 0 1
18214: PUSH
18215: LD_EXP 116
18219: PUSH
18220: FOR_IN
18221: IFFALSE 18252
// if GetLives ( i ) < 1000 then
18223: LD_VAR 0 1
18227: PPUSH
18228: CALL_OW 256
18232: PUSH
18233: LD_INT 1000
18235: LESS
18236: IFFALSE 18250
// SetLives ( i , 1000 ) ;
18238: LD_VAR 0 1
18242: PPUSH
18243: LD_INT 1000
18245: PPUSH
18246: CALL_OW 234
18250: GO 18220
18252: POP
18253: POP
// end ;
18254: PPOPN 1
18256: END
// export function hHackInvincible ; var i ; begin
18257: LD_INT 0
18259: PPUSH
18260: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18261: LD_ADDR_VAR 0 2
18265: PUSH
18266: LD_INT 2
18268: PUSH
18269: LD_INT 21
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 21
18281: PUSH
18282: LD_INT 2
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: LIST
18293: PPUSH
18294: CALL_OW 69
18298: PUSH
18299: FOR_IN
18300: IFFALSE 18361
// if IsSelected ( i ) then
18302: LD_VAR 0 2
18306: PPUSH
18307: CALL_OW 306
18311: IFFALSE 18359
// begin if i in hInvincible then
18313: LD_VAR 0 2
18317: PUSH
18318: LD_EXP 116
18322: IN
18323: IFFALSE 18343
// hInvincible := hInvincible diff i else
18325: LD_ADDR_EXP 116
18329: PUSH
18330: LD_EXP 116
18334: PUSH
18335: LD_VAR 0 2
18339: DIFF
18340: ST_TO_ADDR
18341: GO 18359
// hInvincible := hInvincible union i ;
18343: LD_ADDR_EXP 116
18347: PUSH
18348: LD_EXP 116
18352: PUSH
18353: LD_VAR 0 2
18357: UNION
18358: ST_TO_ADDR
// end ;
18359: GO 18299
18361: POP
18362: POP
// end ;
18363: LD_VAR 0 1
18367: RET
// export function hHackInvisible ; var i , j ; begin
18368: LD_INT 0
18370: PPUSH
18371: PPUSH
18372: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18373: LD_ADDR_VAR 0 2
18377: PUSH
18378: LD_INT 21
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PPUSH
18388: CALL_OW 69
18392: PUSH
18393: FOR_IN
18394: IFFALSE 18418
// if IsSelected ( i ) then
18396: LD_VAR 0 2
18400: PPUSH
18401: CALL_OW 306
18405: IFFALSE 18416
// ComForceInvisible ( i ) ;
18407: LD_VAR 0 2
18411: PPUSH
18412: CALL_OW 496
18416: GO 18393
18418: POP
18419: POP
// end ;
18420: LD_VAR 0 1
18424: RET
// export function hHackChangeYourSide ; begin
18425: LD_INT 0
18427: PPUSH
// if your_side = 8 then
18428: LD_OWVAR 2
18432: PUSH
18433: LD_INT 8
18435: EQUAL
18436: IFFALSE 18448
// your_side := 0 else
18438: LD_ADDR_OWVAR 2
18442: PUSH
18443: LD_INT 0
18445: ST_TO_ADDR
18446: GO 18462
// your_side := your_side + 1 ;
18448: LD_ADDR_OWVAR 2
18452: PUSH
18453: LD_OWVAR 2
18457: PUSH
18458: LD_INT 1
18460: PLUS
18461: ST_TO_ADDR
// end ;
18462: LD_VAR 0 1
18466: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18467: LD_INT 0
18469: PPUSH
18470: PPUSH
18471: PPUSH
// for i in all_units do
18472: LD_ADDR_VAR 0 2
18476: PUSH
18477: LD_OWVAR 3
18481: PUSH
18482: FOR_IN
18483: IFFALSE 18561
// if IsSelected ( i ) then
18485: LD_VAR 0 2
18489: PPUSH
18490: CALL_OW 306
18494: IFFALSE 18559
// begin j := GetSide ( i ) ;
18496: LD_ADDR_VAR 0 3
18500: PUSH
18501: LD_VAR 0 2
18505: PPUSH
18506: CALL_OW 255
18510: ST_TO_ADDR
// if j = 8 then
18511: LD_VAR 0 3
18515: PUSH
18516: LD_INT 8
18518: EQUAL
18519: IFFALSE 18531
// j := 0 else
18521: LD_ADDR_VAR 0 3
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
18529: GO 18545
// j := j + 1 ;
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_VAR 0 3
18540: PUSH
18541: LD_INT 1
18543: PLUS
18544: ST_TO_ADDR
// SetSide ( i , j ) ;
18545: LD_VAR 0 2
18549: PPUSH
18550: LD_VAR 0 3
18554: PPUSH
18555: CALL_OW 235
// end ;
18559: GO 18482
18561: POP
18562: POP
// end ;
18563: LD_VAR 0 1
18567: RET
// export function hHackFog ; begin
18568: LD_INT 0
18570: PPUSH
// FogOff ( true ) ;
18571: LD_INT 1
18573: PPUSH
18574: CALL_OW 344
// end ;
18578: LD_VAR 0 1
18582: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18583: LD_INT 0
18585: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18586: LD_VAR 0 1
18590: PPUSH
18591: LD_VAR 0 2
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_INT 1
18603: PPUSH
18604: LD_INT 1
18606: PPUSH
18607: CALL_OW 483
// CenterOnXY ( x , y ) ;
18611: LD_VAR 0 2
18615: PPUSH
18616: LD_VAR 0 3
18620: PPUSH
18621: CALL_OW 84
// end ; end_of_file
18625: LD_VAR 0 4
18629: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18630: LD_INT 0
18632: PPUSH
18633: PPUSH
18634: PPUSH
18635: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18636: LD_VAR 0 1
18640: PPUSH
18641: CALL_OW 264
18645: PUSH
18646: LD_EXP 43
18650: EQUAL
18651: IFFALSE 18723
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18653: LD_INT 68
18655: PPUSH
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 255
18665: PPUSH
18666: CALL_OW 321
18670: PUSH
18671: LD_INT 2
18673: EQUAL
18674: IFFALSE 18686
// eff := 70 else
18676: LD_ADDR_VAR 0 4
18680: PUSH
18681: LD_INT 70
18683: ST_TO_ADDR
18684: GO 18694
// eff := 30 ;
18686: LD_ADDR_VAR 0 4
18690: PUSH
18691: LD_INT 30
18693: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18694: LD_VAR 0 1
18698: PPUSH
18699: CALL_OW 250
18703: PPUSH
18704: LD_VAR 0 1
18708: PPUSH
18709: CALL_OW 251
18713: PPUSH
18714: LD_VAR 0 4
18718: PPUSH
18719: CALL_OW 495
// end ; end ;
18723: LD_VAR 0 2
18727: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18728: LD_INT 0
18730: PPUSH
// end ;
18731: LD_VAR 0 4
18735: RET
// export function SOS_Command ( cmd ) ; begin
18736: LD_INT 0
18738: PPUSH
// end ;
18739: LD_VAR 0 2
18743: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18744: LD_INT 0
18746: PPUSH
// end ;
18747: LD_VAR 0 6
18751: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
18752: LD_INT 0
18754: PPUSH
18755: PPUSH
// if not vehicle or not factory then
18756: LD_VAR 0 1
18760: NOT
18761: PUSH
18762: LD_VAR 0 2
18766: NOT
18767: OR
18768: IFFALSE 18772
// exit ;
18770: GO 19003
// if factoryWaypoints >= factory then
18772: LD_EXP 117
18776: PUSH
18777: LD_VAR 0 2
18781: GREATEREQUAL
18782: IFFALSE 19003
// if factoryWaypoints [ factory ] then
18784: LD_EXP 117
18788: PUSH
18789: LD_VAR 0 2
18793: ARRAY
18794: IFFALSE 19003
// begin if GetControl ( vehicle ) = control_manual then
18796: LD_VAR 0 1
18800: PPUSH
18801: CALL_OW 263
18805: PUSH
18806: LD_INT 1
18808: EQUAL
18809: IFFALSE 18890
// begin driver := IsDrivenBy ( vehicle ) ;
18811: LD_ADDR_VAR 0 4
18815: PUSH
18816: LD_VAR 0 1
18820: PPUSH
18821: CALL_OW 311
18825: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18826: LD_VAR 0 4
18830: PPUSH
18831: LD_EXP 117
18835: PUSH
18836: LD_VAR 0 2
18840: ARRAY
18841: PUSH
18842: LD_INT 3
18844: ARRAY
18845: PPUSH
18846: LD_EXP 117
18850: PUSH
18851: LD_VAR 0 2
18855: ARRAY
18856: PUSH
18857: LD_INT 4
18859: ARRAY
18860: PPUSH
18861: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18865: LD_VAR 0 4
18869: PPUSH
18870: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
18874: LD_VAR 0 4
18878: PPUSH
18879: LD_VAR 0 2
18883: PPUSH
18884: CALL_OW 180
// end else
18888: GO 19003
// if GetControl ( vehicle ) = control_remote then
18890: LD_VAR 0 1
18894: PPUSH
18895: CALL_OW 263
18899: PUSH
18900: LD_INT 2
18902: EQUAL
18903: IFFALSE 18964
// begin wait ( 0 0$2 ) ;
18905: LD_INT 70
18907: PPUSH
18908: CALL_OW 67
// if Connect ( vehicle ) then
18912: LD_VAR 0 1
18916: PPUSH
18917: CALL 31227 0 1
18921: IFFALSE 18962
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18923: LD_VAR 0 1
18927: PPUSH
18928: LD_EXP 117
18932: PUSH
18933: LD_VAR 0 2
18937: ARRAY
18938: PUSH
18939: LD_INT 3
18941: ARRAY
18942: PPUSH
18943: LD_EXP 117
18947: PUSH
18948: LD_VAR 0 2
18952: ARRAY
18953: PUSH
18954: LD_INT 4
18956: ARRAY
18957: PPUSH
18958: CALL_OW 171
// end else
18962: GO 19003
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18964: LD_VAR 0 1
18968: PPUSH
18969: LD_EXP 117
18973: PUSH
18974: LD_VAR 0 2
18978: ARRAY
18979: PUSH
18980: LD_INT 3
18982: ARRAY
18983: PPUSH
18984: LD_EXP 117
18988: PUSH
18989: LD_VAR 0 2
18993: ARRAY
18994: PUSH
18995: LD_INT 4
18997: ARRAY
18998: PPUSH
18999: CALL_OW 171
// end ; end ;
19003: LD_VAR 0 3
19007: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19008: LD_INT 0
19010: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19011: LD_VAR 0 1
19015: PUSH
19016: LD_INT 250
19018: EQUAL
19019: PUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 264
19029: PUSH
19030: LD_EXP 46
19034: EQUAL
19035: AND
19036: IFFALSE 19057
// MinerPlaceMine ( unit , x , y ) ;
19038: LD_VAR 0 2
19042: PPUSH
19043: LD_VAR 0 4
19047: PPUSH
19048: LD_VAR 0 5
19052: PPUSH
19053: CALL 21785 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19057: LD_VAR 0 1
19061: PUSH
19062: LD_INT 251
19064: EQUAL
19065: PUSH
19066: LD_VAR 0 2
19070: PPUSH
19071: CALL_OW 264
19075: PUSH
19076: LD_EXP 46
19080: EQUAL
19081: AND
19082: IFFALSE 19103
// MinerDetonateMine ( unit , x , y ) ;
19084: LD_VAR 0 2
19088: PPUSH
19089: LD_VAR 0 4
19093: PPUSH
19094: LD_VAR 0 5
19098: PPUSH
19099: CALL 22062 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19103: LD_VAR 0 1
19107: PUSH
19108: LD_INT 252
19110: EQUAL
19111: PUSH
19112: LD_VAR 0 2
19116: PPUSH
19117: CALL_OW 264
19121: PUSH
19122: LD_EXP 46
19126: EQUAL
19127: AND
19128: IFFALSE 19149
// MinerCreateMinefield ( unit , x , y ) ;
19130: LD_VAR 0 2
19134: PPUSH
19135: LD_VAR 0 4
19139: PPUSH
19140: LD_VAR 0 5
19144: PPUSH
19145: CALL 22479 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19149: LD_VAR 0 1
19153: PUSH
19154: LD_INT 253
19156: EQUAL
19157: PUSH
19158: LD_VAR 0 2
19162: PPUSH
19163: CALL_OW 257
19167: PUSH
19168: LD_INT 5
19170: EQUAL
19171: AND
19172: IFFALSE 19193
// ComBinocular ( unit , x , y ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_VAR 0 4
19183: PPUSH
19184: LD_VAR 0 5
19188: PPUSH
19189: CALL 22850 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19193: LD_VAR 0 1
19197: PUSH
19198: LD_INT 254
19200: EQUAL
19201: PUSH
19202: LD_VAR 0 2
19206: PPUSH
19207: CALL_OW 264
19211: PUSH
19212: LD_EXP 41
19216: EQUAL
19217: AND
19218: PUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: CALL_OW 263
19228: PUSH
19229: LD_INT 3
19231: EQUAL
19232: AND
19233: IFFALSE 19249
// HackDestroyVehicle ( unit , selectedUnit ) ;
19235: LD_VAR 0 2
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: CALL 21145 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19249: LD_VAR 0 1
19253: PUSH
19254: LD_INT 255
19256: EQUAL
19257: PUSH
19258: LD_VAR 0 2
19262: PPUSH
19263: CALL_OW 264
19267: PUSH
19268: LD_INT 14
19270: PUSH
19271: LD_INT 53
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: IN
19278: AND
19279: PUSH
19280: LD_VAR 0 4
19284: PPUSH
19285: LD_VAR 0 5
19289: PPUSH
19290: CALL_OW 488
19294: AND
19295: IFFALSE 19319
// CutTreeXYR ( unit , x , y , 12 ) ;
19297: LD_VAR 0 2
19301: PPUSH
19302: LD_VAR 0 4
19306: PPUSH
19307: LD_VAR 0 5
19311: PPUSH
19312: LD_INT 12
19314: PPUSH
19315: CALL 19711 0 4
// if cmd = 256 then
19319: LD_VAR 0 1
19323: PUSH
19324: LD_INT 256
19326: EQUAL
19327: IFFALSE 19348
// SetFactoryWaypoint ( unit , x , y ) ;
19329: LD_VAR 0 2
19333: PPUSH
19334: LD_VAR 0 4
19338: PPUSH
19339: LD_VAR 0 5
19343: PPUSH
19344: CALL 19353 0 3
// end ;
19348: LD_VAR 0 6
19352: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19353: LD_INT 0
19355: PPUSH
19356: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19357: LD_VAR 0 1
19361: NOT
19362: PUSH
19363: LD_VAR 0 2
19367: PPUSH
19368: LD_VAR 0 3
19372: PPUSH
19373: CALL_OW 488
19377: NOT
19378: OR
19379: PUSH
19380: LD_VAR 0 1
19384: PPUSH
19385: CALL_OW 266
19389: PUSH
19390: LD_INT 3
19392: NONEQUAL
19393: PUSH
19394: LD_VAR 0 1
19398: PPUSH
19399: CALL_OW 247
19403: PUSH
19404: LD_INT 1
19406: EQUAL
19407: NOT
19408: AND
19409: OR
19410: IFFALSE 19414
// exit ;
19412: GO 19563
// if GetType ( factory ) = unit_human then
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL_OW 247
19423: PUSH
19424: LD_INT 1
19426: EQUAL
19427: IFFALSE 19444
// factory := IsInUnit ( factory ) ;
19429: LD_ADDR_VAR 0 1
19433: PUSH
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 310
19443: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19444: LD_VAR 0 1
19448: PPUSH
19449: CALL_OW 266
19453: PUSH
19454: LD_INT 3
19456: NONEQUAL
19457: IFFALSE 19461
// exit ;
19459: GO 19563
// if HexInfo ( x , y ) = factory then
19461: LD_VAR 0 2
19465: PPUSH
19466: LD_VAR 0 3
19470: PPUSH
19471: CALL_OW 428
19475: PUSH
19476: LD_VAR 0 1
19480: EQUAL
19481: IFFALSE 19508
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19483: LD_ADDR_EXP 117
19487: PUSH
19488: LD_EXP 117
19492: PPUSH
19493: LD_VAR 0 1
19497: PPUSH
19498: LD_INT 0
19500: PPUSH
19501: CALL_OW 1
19505: ST_TO_ADDR
19506: GO 19559
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19508: LD_ADDR_EXP 117
19512: PUSH
19513: LD_EXP 117
19517: PPUSH
19518: LD_VAR 0 1
19522: PPUSH
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 255
19532: PUSH
19533: LD_VAR 0 1
19537: PUSH
19538: LD_VAR 0 2
19542: PUSH
19543: LD_VAR 0 3
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: PPUSH
19554: CALL_OW 1
19558: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19559: CALL 19568 0 0
// end ;
19563: LD_VAR 0 4
19567: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
19568: LD_INT 0
19570: PPUSH
19571: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19572: LD_STRING resetFactoryWaypoint();
19574: PPUSH
19575: CALL_OW 559
// if factoryWaypoints then
19579: LD_EXP 117
19583: IFFALSE 19706
// begin for i := 1 to factoryWaypoints do
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: DOUBLE
19591: LD_INT 1
19593: DEC
19594: ST_TO_ADDR
19595: LD_EXP 117
19599: PUSH
19600: FOR_TO
19601: IFFALSE 19704
// if factoryWaypoints [ i ] then
19603: LD_EXP 117
19607: PUSH
19608: LD_VAR 0 2
19612: ARRAY
19613: IFFALSE 19702
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
19615: LD_STRING setFactoryWaypointXY(
19617: PUSH
19618: LD_EXP 117
19622: PUSH
19623: LD_VAR 0 2
19627: ARRAY
19628: PUSH
19629: LD_INT 1
19631: ARRAY
19632: STR
19633: PUSH
19634: LD_STRING ,
19636: STR
19637: PUSH
19638: LD_EXP 117
19642: PUSH
19643: LD_VAR 0 2
19647: ARRAY
19648: PUSH
19649: LD_INT 2
19651: ARRAY
19652: STR
19653: PUSH
19654: LD_STRING ,
19656: STR
19657: PUSH
19658: LD_EXP 117
19662: PUSH
19663: LD_VAR 0 2
19667: ARRAY
19668: PUSH
19669: LD_INT 3
19671: ARRAY
19672: STR
19673: PUSH
19674: LD_STRING ,
19676: STR
19677: PUSH
19678: LD_EXP 117
19682: PUSH
19683: LD_VAR 0 2
19687: ARRAY
19688: PUSH
19689: LD_INT 4
19691: ARRAY
19692: STR
19693: PUSH
19694: LD_STRING )
19696: STR
19697: PPUSH
19698: CALL_OW 559
19702: GO 19600
19704: POP
19705: POP
// end ; end ;
19706: LD_VAR 0 1
19710: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19711: LD_INT 0
19713: PPUSH
19714: PPUSH
19715: PPUSH
19716: PPUSH
19717: PPUSH
19718: PPUSH
19719: PPUSH
19720: PPUSH
19721: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19722: LD_VAR 0 1
19726: NOT
19727: PUSH
19728: LD_VAR 0 2
19732: PPUSH
19733: LD_VAR 0 3
19737: PPUSH
19738: CALL_OW 488
19742: NOT
19743: OR
19744: PUSH
19745: LD_VAR 0 4
19749: NOT
19750: OR
19751: IFFALSE 19755
// exit ;
19753: GO 20095
// list := [ ] ;
19755: LD_ADDR_VAR 0 13
19759: PUSH
19760: EMPTY
19761: ST_TO_ADDR
// if x - r < 0 then
19762: LD_VAR 0 2
19766: PUSH
19767: LD_VAR 0 4
19771: MINUS
19772: PUSH
19773: LD_INT 0
19775: LESS
19776: IFFALSE 19788
// min_x := 0 else
19778: LD_ADDR_VAR 0 7
19782: PUSH
19783: LD_INT 0
19785: ST_TO_ADDR
19786: GO 19804
// min_x := x - r ;
19788: LD_ADDR_VAR 0 7
19792: PUSH
19793: LD_VAR 0 2
19797: PUSH
19798: LD_VAR 0 4
19802: MINUS
19803: ST_TO_ADDR
// if y - r < 0 then
19804: LD_VAR 0 3
19808: PUSH
19809: LD_VAR 0 4
19813: MINUS
19814: PUSH
19815: LD_INT 0
19817: LESS
19818: IFFALSE 19830
// min_y := 0 else
19820: LD_ADDR_VAR 0 8
19824: PUSH
19825: LD_INT 0
19827: ST_TO_ADDR
19828: GO 19846
// min_y := y - r ;
19830: LD_ADDR_VAR 0 8
19834: PUSH
19835: LD_VAR 0 3
19839: PUSH
19840: LD_VAR 0 4
19844: MINUS
19845: ST_TO_ADDR
// max_x := x + r ;
19846: LD_ADDR_VAR 0 9
19850: PUSH
19851: LD_VAR 0 2
19855: PUSH
19856: LD_VAR 0 4
19860: PLUS
19861: ST_TO_ADDR
// max_y := y + r ;
19862: LD_ADDR_VAR 0 10
19866: PUSH
19867: LD_VAR 0 3
19871: PUSH
19872: LD_VAR 0 4
19876: PLUS
19877: ST_TO_ADDR
// for _x = min_x to max_x do
19878: LD_ADDR_VAR 0 11
19882: PUSH
19883: DOUBLE
19884: LD_VAR 0 7
19888: DEC
19889: ST_TO_ADDR
19890: LD_VAR 0 9
19894: PUSH
19895: FOR_TO
19896: IFFALSE 20013
// for _y = min_y to max_y do
19898: LD_ADDR_VAR 0 12
19902: PUSH
19903: DOUBLE
19904: LD_VAR 0 8
19908: DEC
19909: ST_TO_ADDR
19910: LD_VAR 0 10
19914: PUSH
19915: FOR_TO
19916: IFFALSE 20009
// begin if not ValidHex ( _x , _y ) then
19918: LD_VAR 0 11
19922: PPUSH
19923: LD_VAR 0 12
19927: PPUSH
19928: CALL_OW 488
19932: NOT
19933: IFFALSE 19937
// continue ;
19935: GO 19915
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19937: LD_VAR 0 11
19941: PPUSH
19942: LD_VAR 0 12
19946: PPUSH
19947: CALL_OW 351
19951: PUSH
19952: LD_VAR 0 11
19956: PPUSH
19957: LD_VAR 0 12
19961: PPUSH
19962: CALL_OW 554
19966: AND
19967: IFFALSE 20007
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19969: LD_ADDR_VAR 0 13
19973: PUSH
19974: LD_VAR 0 13
19978: PPUSH
19979: LD_VAR 0 13
19983: PUSH
19984: LD_INT 1
19986: PLUS
19987: PPUSH
19988: LD_VAR 0 11
19992: PUSH
19993: LD_VAR 0 12
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PPUSH
20002: CALL_OW 2
20006: ST_TO_ADDR
// end ;
20007: GO 19915
20009: POP
20010: POP
20011: GO 19895
20013: POP
20014: POP
// if not list then
20015: LD_VAR 0 13
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20095
// for i in list do
20024: LD_ADDR_VAR 0 6
20028: PUSH
20029: LD_VAR 0 13
20033: PUSH
20034: FOR_IN
20035: IFFALSE 20093
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20037: LD_VAR 0 1
20041: PPUSH
20042: LD_STRING M
20044: PUSH
20045: LD_VAR 0 6
20049: PUSH
20050: LD_INT 1
20052: ARRAY
20053: PUSH
20054: LD_VAR 0 6
20058: PUSH
20059: LD_INT 2
20061: ARRAY
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: LD_INT 0
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: PUSH
20084: EMPTY
20085: LIST
20086: PPUSH
20087: CALL_OW 447
20091: GO 20034
20093: POP
20094: POP
// end ;
20095: LD_VAR 0 5
20099: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20100: LD_EXP 118
20104: NOT
20105: IFFALSE 20155
20107: GO 20109
20109: DISABLE
// begin initHack := true ;
20110: LD_ADDR_EXP 118
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// hackTanks := [ ] ;
20118: LD_ADDR_EXP 119
20122: PUSH
20123: EMPTY
20124: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20125: LD_ADDR_EXP 120
20129: PUSH
20130: EMPTY
20131: ST_TO_ADDR
// hackLimit := 3 ;
20132: LD_ADDR_EXP 121
20136: PUSH
20137: LD_INT 3
20139: ST_TO_ADDR
// hackDist := 12 ;
20140: LD_ADDR_EXP 122
20144: PUSH
20145: LD_INT 12
20147: ST_TO_ADDR
// hackCounter := [ ] ;
20148: LD_ADDR_EXP 123
20152: PUSH
20153: EMPTY
20154: ST_TO_ADDR
// end ;
20155: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20156: LD_EXP 118
20160: PUSH
20161: LD_INT 34
20163: PUSH
20164: LD_EXP 41
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PPUSH
20173: CALL_OW 69
20177: AND
20178: IFFALSE 20433
20180: GO 20182
20182: DISABLE
20183: LD_INT 0
20185: PPUSH
20186: PPUSH
// begin enable ;
20187: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20188: LD_ADDR_VAR 0 1
20192: PUSH
20193: LD_INT 34
20195: PUSH
20196: LD_EXP 41
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PPUSH
20205: CALL_OW 69
20209: PUSH
20210: FOR_IN
20211: IFFALSE 20431
// begin if not i in hackTanks then
20213: LD_VAR 0 1
20217: PUSH
20218: LD_EXP 119
20222: IN
20223: NOT
20224: IFFALSE 20307
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20226: LD_ADDR_EXP 119
20230: PUSH
20231: LD_EXP 119
20235: PPUSH
20236: LD_EXP 119
20240: PUSH
20241: LD_INT 1
20243: PLUS
20244: PPUSH
20245: LD_VAR 0 1
20249: PPUSH
20250: CALL_OW 1
20254: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20255: LD_ADDR_EXP 120
20259: PUSH
20260: LD_EXP 120
20264: PPUSH
20265: LD_EXP 120
20269: PUSH
20270: LD_INT 1
20272: PLUS
20273: PPUSH
20274: EMPTY
20275: PPUSH
20276: CALL_OW 1
20280: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20281: LD_ADDR_EXP 123
20285: PUSH
20286: LD_EXP 123
20290: PPUSH
20291: LD_EXP 123
20295: PUSH
20296: LD_INT 1
20298: PLUS
20299: PPUSH
20300: EMPTY
20301: PPUSH
20302: CALL_OW 1
20306: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20307: LD_VAR 0 1
20311: PPUSH
20312: CALL_OW 302
20316: NOT
20317: IFFALSE 20330
// begin HackUnlinkAll ( i ) ;
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL 20436 0 1
// continue ;
20328: GO 20210
// end ; HackCheckCapturedStatus ( i ) ;
20330: LD_VAR 0 1
20334: PPUSH
20335: CALL 20879 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20339: LD_ADDR_VAR 0 2
20343: PUSH
20344: LD_INT 81
20346: PUSH
20347: LD_VAR 0 1
20351: PPUSH
20352: CALL_OW 255
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 33
20363: PUSH
20364: LD_INT 3
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 91
20373: PUSH
20374: LD_VAR 0 1
20378: PUSH
20379: LD_EXP 122
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 50
20391: PUSH
20392: EMPTY
20393: LIST
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: PPUSH
20401: CALL_OW 69
20405: ST_TO_ADDR
// if not tmp then
20406: LD_VAR 0 2
20410: NOT
20411: IFFALSE 20415
// continue ;
20413: GO 20210
// HackLink ( i , tmp ) ;
20415: LD_VAR 0 1
20419: PPUSH
20420: LD_VAR 0 2
20424: PPUSH
20425: CALL 20572 0 2
// end ;
20429: GO 20210
20431: POP
20432: POP
// end ;
20433: PPOPN 2
20435: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20436: LD_INT 0
20438: PPUSH
20439: PPUSH
20440: PPUSH
// if not hack in hackTanks then
20441: LD_VAR 0 1
20445: PUSH
20446: LD_EXP 119
20450: IN
20451: NOT
20452: IFFALSE 20456
// exit ;
20454: GO 20567
// index := GetElementIndex ( hackTanks , hack ) ;
20456: LD_ADDR_VAR 0 4
20460: PUSH
20461: LD_EXP 119
20465: PPUSH
20466: LD_VAR 0 1
20470: PPUSH
20471: CALL 28041 0 2
20475: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20476: LD_EXP 120
20480: PUSH
20481: LD_VAR 0 4
20485: ARRAY
20486: IFFALSE 20567
// begin for i in hackTanksCaptured [ index ] do
20488: LD_ADDR_VAR 0 3
20492: PUSH
20493: LD_EXP 120
20497: PUSH
20498: LD_VAR 0 4
20502: ARRAY
20503: PUSH
20504: FOR_IN
20505: IFFALSE 20531
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20507: LD_VAR 0 3
20511: PUSH
20512: LD_INT 1
20514: ARRAY
20515: PPUSH
20516: LD_VAR 0 3
20520: PUSH
20521: LD_INT 2
20523: ARRAY
20524: PPUSH
20525: CALL_OW 235
20529: GO 20504
20531: POP
20532: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20533: LD_ADDR_EXP 120
20537: PUSH
20538: LD_EXP 120
20542: PPUSH
20543: LD_VAR 0 4
20547: PPUSH
20548: EMPTY
20549: PPUSH
20550: CALL_OW 1
20554: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20555: LD_VAR 0 1
20559: PPUSH
20560: LD_INT 0
20562: PPUSH
20563: CALL_OW 505
// end ; end ;
20567: LD_VAR 0 2
20571: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20572: LD_INT 0
20574: PPUSH
20575: PPUSH
20576: PPUSH
// if not hack in hackTanks or not vehicles then
20577: LD_VAR 0 1
20581: PUSH
20582: LD_EXP 119
20586: IN
20587: NOT
20588: PUSH
20589: LD_VAR 0 2
20593: NOT
20594: OR
20595: IFFALSE 20599
// exit ;
20597: GO 20874
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20599: LD_ADDR_VAR 0 2
20603: PUSH
20604: LD_VAR 0 1
20608: PPUSH
20609: LD_VAR 0 2
20613: PPUSH
20614: LD_INT 1
20616: PPUSH
20617: LD_INT 1
20619: PPUSH
20620: CALL 28691 0 4
20624: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20625: LD_ADDR_VAR 0 5
20629: PUSH
20630: LD_EXP 119
20634: PPUSH
20635: LD_VAR 0 1
20639: PPUSH
20640: CALL 28041 0 2
20644: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20645: LD_EXP 120
20649: PUSH
20650: LD_VAR 0 5
20654: ARRAY
20655: PUSH
20656: LD_EXP 121
20660: LESS
20661: IFFALSE 20850
// begin for i := 1 to vehicles do
20663: LD_ADDR_VAR 0 4
20667: PUSH
20668: DOUBLE
20669: LD_INT 1
20671: DEC
20672: ST_TO_ADDR
20673: LD_VAR 0 2
20677: PUSH
20678: FOR_TO
20679: IFFALSE 20848
// begin if hackTanksCaptured [ index ] = hackLimit then
20681: LD_EXP 120
20685: PUSH
20686: LD_VAR 0 5
20690: ARRAY
20691: PUSH
20692: LD_EXP 121
20696: EQUAL
20697: IFFALSE 20701
// break ;
20699: GO 20848
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20701: LD_ADDR_EXP 123
20705: PUSH
20706: LD_EXP 123
20710: PPUSH
20711: LD_VAR 0 5
20715: PPUSH
20716: LD_EXP 123
20720: PUSH
20721: LD_VAR 0 5
20725: ARRAY
20726: PUSH
20727: LD_INT 1
20729: PLUS
20730: PPUSH
20731: CALL_OW 1
20735: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20736: LD_ADDR_EXP 120
20740: PUSH
20741: LD_EXP 120
20745: PPUSH
20746: LD_VAR 0 5
20750: PUSH
20751: LD_EXP 120
20755: PUSH
20756: LD_VAR 0 5
20760: ARRAY
20761: PUSH
20762: LD_INT 1
20764: PLUS
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PPUSH
20770: LD_VAR 0 2
20774: PUSH
20775: LD_VAR 0 4
20779: ARRAY
20780: PUSH
20781: LD_VAR 0 2
20785: PUSH
20786: LD_VAR 0 4
20790: ARRAY
20791: PPUSH
20792: CALL_OW 255
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PPUSH
20801: CALL 28256 0 3
20805: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20806: LD_VAR 0 2
20810: PUSH
20811: LD_VAR 0 4
20815: ARRAY
20816: PPUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 255
20826: PPUSH
20827: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20831: LD_VAR 0 2
20835: PUSH
20836: LD_VAR 0 4
20840: ARRAY
20841: PPUSH
20842: CALL_OW 141
// end ;
20846: GO 20678
20848: POP
20849: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20850: LD_VAR 0 1
20854: PPUSH
20855: LD_EXP 120
20859: PUSH
20860: LD_VAR 0 5
20864: ARRAY
20865: PUSH
20866: LD_INT 0
20868: PLUS
20869: PPUSH
20870: CALL_OW 505
// end ;
20874: LD_VAR 0 3
20878: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20879: LD_INT 0
20881: PPUSH
20882: PPUSH
20883: PPUSH
20884: PPUSH
// if not hack in hackTanks then
20885: LD_VAR 0 1
20889: PUSH
20890: LD_EXP 119
20894: IN
20895: NOT
20896: IFFALSE 20900
// exit ;
20898: GO 21140
// index := GetElementIndex ( hackTanks , hack ) ;
20900: LD_ADDR_VAR 0 4
20904: PUSH
20905: LD_EXP 119
20909: PPUSH
20910: LD_VAR 0 1
20914: PPUSH
20915: CALL 28041 0 2
20919: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20920: LD_ADDR_VAR 0 3
20924: PUSH
20925: DOUBLE
20926: LD_EXP 120
20930: PUSH
20931: LD_VAR 0 4
20935: ARRAY
20936: INC
20937: ST_TO_ADDR
20938: LD_INT 1
20940: PUSH
20941: FOR_DOWNTO
20942: IFFALSE 21114
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20944: LD_ADDR_VAR 0 5
20948: PUSH
20949: LD_EXP 120
20953: PUSH
20954: LD_VAR 0 4
20958: ARRAY
20959: PUSH
20960: LD_VAR 0 3
20964: ARRAY
20965: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20966: LD_VAR 0 5
20970: PUSH
20971: LD_INT 1
20973: ARRAY
20974: PPUSH
20975: CALL_OW 302
20979: NOT
20980: PUSH
20981: LD_VAR 0 5
20985: PUSH
20986: LD_INT 1
20988: ARRAY
20989: PPUSH
20990: CALL_OW 255
20994: PUSH
20995: LD_VAR 0 1
20999: PPUSH
21000: CALL_OW 255
21004: NONEQUAL
21005: OR
21006: IFFALSE 21112
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21008: LD_VAR 0 5
21012: PUSH
21013: LD_INT 1
21015: ARRAY
21016: PPUSH
21017: CALL_OW 305
21021: PUSH
21022: LD_VAR 0 5
21026: PUSH
21027: LD_INT 1
21029: ARRAY
21030: PPUSH
21031: CALL_OW 255
21035: PUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: CALL_OW 255
21045: EQUAL
21046: AND
21047: IFFALSE 21071
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21049: LD_VAR 0 5
21053: PUSH
21054: LD_INT 1
21056: ARRAY
21057: PPUSH
21058: LD_VAR 0 5
21062: PUSH
21063: LD_INT 2
21065: ARRAY
21066: PPUSH
21067: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21071: LD_ADDR_EXP 120
21075: PUSH
21076: LD_EXP 120
21080: PPUSH
21081: LD_VAR 0 4
21085: PPUSH
21086: LD_EXP 120
21090: PUSH
21091: LD_VAR 0 4
21095: ARRAY
21096: PPUSH
21097: LD_VAR 0 3
21101: PPUSH
21102: CALL_OW 3
21106: PPUSH
21107: CALL_OW 1
21111: ST_TO_ADDR
// end ; end ;
21112: GO 20941
21114: POP
21115: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21116: LD_VAR 0 1
21120: PPUSH
21121: LD_EXP 120
21125: PUSH
21126: LD_VAR 0 4
21130: ARRAY
21131: PUSH
21132: LD_INT 0
21134: PLUS
21135: PPUSH
21136: CALL_OW 505
// end ;
21140: LD_VAR 0 2
21144: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21145: LD_INT 0
21147: PPUSH
21148: PPUSH
21149: PPUSH
21150: PPUSH
// if not hack in hackTanks then
21151: LD_VAR 0 1
21155: PUSH
21156: LD_EXP 119
21160: IN
21161: NOT
21162: IFFALSE 21166
// exit ;
21164: GO 21251
// index := GetElementIndex ( hackTanks , hack ) ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: LD_EXP 119
21175: PPUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL 28041 0 2
21185: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21186: LD_ADDR_VAR 0 4
21190: PUSH
21191: DOUBLE
21192: LD_INT 1
21194: DEC
21195: ST_TO_ADDR
21196: LD_EXP 120
21200: PUSH
21201: LD_VAR 0 5
21205: ARRAY
21206: PUSH
21207: FOR_TO
21208: IFFALSE 21249
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21210: LD_EXP 120
21214: PUSH
21215: LD_VAR 0 5
21219: ARRAY
21220: PUSH
21221: LD_VAR 0 4
21225: ARRAY
21226: PUSH
21227: LD_INT 1
21229: ARRAY
21230: PUSH
21231: LD_VAR 0 2
21235: EQUAL
21236: IFFALSE 21247
// KillUnit ( vehicle ) ;
21238: LD_VAR 0 2
21242: PPUSH
21243: CALL_OW 66
21247: GO 21207
21249: POP
21250: POP
// end ;
21251: LD_VAR 0 3
21255: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21256: LD_EXP 124
21260: NOT
21261: IFFALSE 21296
21263: GO 21265
21265: DISABLE
// begin initMiner := true ;
21266: LD_ADDR_EXP 124
21270: PUSH
21271: LD_INT 1
21273: ST_TO_ADDR
// minersList := [ ] ;
21274: LD_ADDR_EXP 125
21278: PUSH
21279: EMPTY
21280: ST_TO_ADDR
// minerMinesList := [ ] ;
21281: LD_ADDR_EXP 126
21285: PUSH
21286: EMPTY
21287: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21288: LD_ADDR_EXP 127
21292: PUSH
21293: LD_INT 5
21295: ST_TO_ADDR
// end ;
21296: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21297: LD_EXP 124
21301: PUSH
21302: LD_INT 34
21304: PUSH
21305: LD_EXP 46
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 69
21318: AND
21319: IFFALSE 21782
21321: GO 21323
21323: DISABLE
21324: LD_INT 0
21326: PPUSH
21327: PPUSH
21328: PPUSH
21329: PPUSH
// begin enable ;
21330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21331: LD_ADDR_VAR 0 1
21335: PUSH
21336: LD_INT 34
21338: PUSH
21339: LD_EXP 46
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PPUSH
21348: CALL_OW 69
21352: PUSH
21353: FOR_IN
21354: IFFALSE 21426
// begin if not i in minersList then
21356: LD_VAR 0 1
21360: PUSH
21361: LD_EXP 125
21365: IN
21366: NOT
21367: IFFALSE 21424
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21369: LD_ADDR_EXP 125
21373: PUSH
21374: LD_EXP 125
21378: PPUSH
21379: LD_EXP 125
21383: PUSH
21384: LD_INT 1
21386: PLUS
21387: PPUSH
21388: LD_VAR 0 1
21392: PPUSH
21393: CALL_OW 1
21397: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21398: LD_ADDR_EXP 126
21402: PUSH
21403: LD_EXP 126
21407: PPUSH
21408: LD_EXP 126
21412: PUSH
21413: LD_INT 1
21415: PLUS
21416: PPUSH
21417: EMPTY
21418: PPUSH
21419: CALL_OW 1
21423: ST_TO_ADDR
// end end ;
21424: GO 21353
21426: POP
21427: POP
// for i := minerMinesList downto 1 do
21428: LD_ADDR_VAR 0 1
21432: PUSH
21433: DOUBLE
21434: LD_EXP 126
21438: INC
21439: ST_TO_ADDR
21440: LD_INT 1
21442: PUSH
21443: FOR_DOWNTO
21444: IFFALSE 21780
// begin if IsLive ( minersList [ i ] ) then
21446: LD_EXP 125
21450: PUSH
21451: LD_VAR 0 1
21455: ARRAY
21456: PPUSH
21457: CALL_OW 300
21461: IFFALSE 21489
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21463: LD_EXP 125
21467: PUSH
21468: LD_VAR 0 1
21472: ARRAY
21473: PPUSH
21474: LD_EXP 126
21478: PUSH
21479: LD_VAR 0 1
21483: ARRAY
21484: PPUSH
21485: CALL_OW 505
// if not minerMinesList [ i ] then
21489: LD_EXP 126
21493: PUSH
21494: LD_VAR 0 1
21498: ARRAY
21499: NOT
21500: IFFALSE 21504
// continue ;
21502: GO 21443
// for j := minerMinesList [ i ] downto 1 do
21504: LD_ADDR_VAR 0 2
21508: PUSH
21509: DOUBLE
21510: LD_EXP 126
21514: PUSH
21515: LD_VAR 0 1
21519: ARRAY
21520: INC
21521: ST_TO_ADDR
21522: LD_INT 1
21524: PUSH
21525: FOR_DOWNTO
21526: IFFALSE 21776
// begin side := GetSide ( minersList [ i ] ) ;
21528: LD_ADDR_VAR 0 3
21532: PUSH
21533: LD_EXP 125
21537: PUSH
21538: LD_VAR 0 1
21542: ARRAY
21543: PPUSH
21544: CALL_OW 255
21548: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21549: LD_ADDR_VAR 0 4
21553: PUSH
21554: LD_EXP 126
21558: PUSH
21559: LD_VAR 0 1
21563: ARRAY
21564: PUSH
21565: LD_VAR 0 2
21569: ARRAY
21570: PUSH
21571: LD_INT 1
21573: ARRAY
21574: PPUSH
21575: LD_EXP 126
21579: PUSH
21580: LD_VAR 0 1
21584: ARRAY
21585: PUSH
21586: LD_VAR 0 2
21590: ARRAY
21591: PUSH
21592: LD_INT 2
21594: ARRAY
21595: PPUSH
21596: CALL_OW 428
21600: ST_TO_ADDR
// if not tmp then
21601: LD_VAR 0 4
21605: NOT
21606: IFFALSE 21610
// continue ;
21608: GO 21525
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21610: LD_VAR 0 4
21614: PUSH
21615: LD_INT 81
21617: PUSH
21618: LD_VAR 0 3
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PPUSH
21627: CALL_OW 69
21631: IN
21632: PUSH
21633: LD_EXP 126
21637: PUSH
21638: LD_VAR 0 1
21642: ARRAY
21643: PUSH
21644: LD_VAR 0 2
21648: ARRAY
21649: PUSH
21650: LD_INT 1
21652: ARRAY
21653: PPUSH
21654: LD_EXP 126
21658: PUSH
21659: LD_VAR 0 1
21663: ARRAY
21664: PUSH
21665: LD_VAR 0 2
21669: ARRAY
21670: PUSH
21671: LD_INT 2
21673: ARRAY
21674: PPUSH
21675: CALL_OW 458
21679: AND
21680: IFFALSE 21774
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21682: LD_EXP 126
21686: PUSH
21687: LD_VAR 0 1
21691: ARRAY
21692: PUSH
21693: LD_VAR 0 2
21697: ARRAY
21698: PUSH
21699: LD_INT 1
21701: ARRAY
21702: PPUSH
21703: LD_EXP 126
21707: PUSH
21708: LD_VAR 0 1
21712: ARRAY
21713: PUSH
21714: LD_VAR 0 2
21718: ARRAY
21719: PUSH
21720: LD_INT 2
21722: ARRAY
21723: PPUSH
21724: LD_VAR 0 3
21728: PPUSH
21729: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21733: LD_ADDR_EXP 126
21737: PUSH
21738: LD_EXP 126
21742: PPUSH
21743: LD_VAR 0 1
21747: PPUSH
21748: LD_EXP 126
21752: PUSH
21753: LD_VAR 0 1
21757: ARRAY
21758: PPUSH
21759: LD_VAR 0 2
21763: PPUSH
21764: CALL_OW 3
21768: PPUSH
21769: CALL_OW 1
21773: ST_TO_ADDR
// end ; end ;
21774: GO 21525
21776: POP
21777: POP
// end ;
21778: GO 21443
21780: POP
21781: POP
// end ;
21782: PPOPN 4
21784: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
// result := false ;
21789: LD_ADDR_VAR 0 4
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21797: LD_VAR 0 1
21801: PPUSH
21802: CALL_OW 264
21806: PUSH
21807: LD_EXP 46
21811: EQUAL
21812: NOT
21813: IFFALSE 21817
// exit ;
21815: GO 22057
// index := GetElementIndex ( minersList , unit ) ;
21817: LD_ADDR_VAR 0 5
21821: PUSH
21822: LD_EXP 125
21826: PPUSH
21827: LD_VAR 0 1
21831: PPUSH
21832: CALL 28041 0 2
21836: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21837: LD_EXP 126
21841: PUSH
21842: LD_VAR 0 5
21846: ARRAY
21847: PUSH
21848: LD_EXP 127
21852: GREATEREQUAL
21853: IFFALSE 21857
// exit ;
21855: GO 22057
// ComMoveXY ( unit , x , y ) ;
21857: LD_VAR 0 1
21861: PPUSH
21862: LD_VAR 0 2
21866: PPUSH
21867: LD_VAR 0 3
21871: PPUSH
21872: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21876: LD_INT 35
21878: PPUSH
21879: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21883: LD_VAR 0 1
21887: PPUSH
21888: LD_VAR 0 2
21892: PPUSH
21893: LD_VAR 0 3
21897: PPUSH
21898: CALL 58760 0 3
21902: NOT
21903: PUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL_OW 314
21913: AND
21914: IFFALSE 21918
// exit ;
21916: GO 22057
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21918: LD_VAR 0 2
21922: PPUSH
21923: LD_VAR 0 3
21927: PPUSH
21928: CALL_OW 428
21932: PUSH
21933: LD_VAR 0 1
21937: EQUAL
21938: PUSH
21939: LD_VAR 0 1
21943: PPUSH
21944: CALL_OW 314
21948: NOT
21949: AND
21950: IFFALSE 21876
// PlaySoundXY ( x , y , PlantMine ) ;
21952: LD_VAR 0 2
21956: PPUSH
21957: LD_VAR 0 3
21961: PPUSH
21962: LD_STRING PlantMine
21964: PPUSH
21965: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21969: LD_VAR 0 2
21973: PPUSH
21974: LD_VAR 0 3
21978: PPUSH
21979: LD_VAR 0 1
21983: PPUSH
21984: CALL_OW 255
21988: PPUSH
21989: LD_INT 0
21991: PPUSH
21992: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21996: LD_ADDR_EXP 126
22000: PUSH
22001: LD_EXP 126
22005: PPUSH
22006: LD_VAR 0 5
22010: PUSH
22011: LD_EXP 126
22015: PUSH
22016: LD_VAR 0 5
22020: ARRAY
22021: PUSH
22022: LD_INT 1
22024: PLUS
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: LD_VAR 0 2
22034: PUSH
22035: LD_VAR 0 3
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL 28256 0 3
22048: ST_TO_ADDR
// result := true ;
22049: LD_ADDR_VAR 0 4
22053: PUSH
22054: LD_INT 1
22056: ST_TO_ADDR
// end ;
22057: LD_VAR 0 4
22061: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22062: LD_INT 0
22064: PPUSH
22065: PPUSH
22066: PPUSH
// if not unit in minersList then
22067: LD_VAR 0 1
22071: PUSH
22072: LD_EXP 125
22076: IN
22077: NOT
22078: IFFALSE 22082
// exit ;
22080: GO 22474
// index := GetElementIndex ( minersList , unit ) ;
22082: LD_ADDR_VAR 0 6
22086: PUSH
22087: LD_EXP 125
22091: PPUSH
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL 28041 0 2
22101: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22102: LD_ADDR_VAR 0 5
22106: PUSH
22107: DOUBLE
22108: LD_EXP 126
22112: PUSH
22113: LD_VAR 0 6
22117: ARRAY
22118: INC
22119: ST_TO_ADDR
22120: LD_INT 1
22122: PUSH
22123: FOR_DOWNTO
22124: IFFALSE 22285
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22126: LD_EXP 126
22130: PUSH
22131: LD_VAR 0 6
22135: ARRAY
22136: PUSH
22137: LD_VAR 0 5
22141: ARRAY
22142: PUSH
22143: LD_INT 1
22145: ARRAY
22146: PUSH
22147: LD_VAR 0 2
22151: EQUAL
22152: PUSH
22153: LD_EXP 126
22157: PUSH
22158: LD_VAR 0 6
22162: ARRAY
22163: PUSH
22164: LD_VAR 0 5
22168: ARRAY
22169: PUSH
22170: LD_INT 2
22172: ARRAY
22173: PUSH
22174: LD_VAR 0 3
22178: EQUAL
22179: AND
22180: IFFALSE 22283
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22182: LD_EXP 126
22186: PUSH
22187: LD_VAR 0 6
22191: ARRAY
22192: PUSH
22193: LD_VAR 0 5
22197: ARRAY
22198: PUSH
22199: LD_INT 1
22201: ARRAY
22202: PPUSH
22203: LD_EXP 126
22207: PUSH
22208: LD_VAR 0 6
22212: ARRAY
22213: PUSH
22214: LD_VAR 0 5
22218: ARRAY
22219: PUSH
22220: LD_INT 2
22222: ARRAY
22223: PPUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 255
22233: PPUSH
22234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22238: LD_ADDR_EXP 126
22242: PUSH
22243: LD_EXP 126
22247: PPUSH
22248: LD_VAR 0 6
22252: PPUSH
22253: LD_EXP 126
22257: PUSH
22258: LD_VAR 0 6
22262: ARRAY
22263: PPUSH
22264: LD_VAR 0 5
22268: PPUSH
22269: CALL_OW 3
22273: PPUSH
22274: CALL_OW 1
22278: ST_TO_ADDR
// exit ;
22279: POP
22280: POP
22281: GO 22474
// end ; end ;
22283: GO 22123
22285: POP
22286: POP
// for i := minerMinesList [ index ] downto 1 do
22287: LD_ADDR_VAR 0 5
22291: PUSH
22292: DOUBLE
22293: LD_EXP 126
22297: PUSH
22298: LD_VAR 0 6
22302: ARRAY
22303: INC
22304: ST_TO_ADDR
22305: LD_INT 1
22307: PUSH
22308: FOR_DOWNTO
22309: IFFALSE 22472
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22311: LD_EXP 126
22315: PUSH
22316: LD_VAR 0 6
22320: ARRAY
22321: PUSH
22322: LD_VAR 0 5
22326: ARRAY
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: PPUSH
22332: LD_EXP 126
22336: PUSH
22337: LD_VAR 0 6
22341: ARRAY
22342: PUSH
22343: LD_VAR 0 5
22347: ARRAY
22348: PUSH
22349: LD_INT 2
22351: ARRAY
22352: PPUSH
22353: LD_VAR 0 2
22357: PPUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: CALL_OW 298
22367: PUSH
22368: LD_INT 6
22370: LESS
22371: IFFALSE 22470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22373: LD_EXP 126
22377: PUSH
22378: LD_VAR 0 6
22382: ARRAY
22383: PUSH
22384: LD_VAR 0 5
22388: ARRAY
22389: PUSH
22390: LD_INT 1
22392: ARRAY
22393: PPUSH
22394: LD_EXP 126
22398: PUSH
22399: LD_VAR 0 6
22403: ARRAY
22404: PUSH
22405: LD_VAR 0 5
22409: ARRAY
22410: PUSH
22411: LD_INT 2
22413: ARRAY
22414: PPUSH
22415: LD_VAR 0 1
22419: PPUSH
22420: CALL_OW 255
22424: PPUSH
22425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22429: LD_ADDR_EXP 126
22433: PUSH
22434: LD_EXP 126
22438: PPUSH
22439: LD_VAR 0 6
22443: PPUSH
22444: LD_EXP 126
22448: PUSH
22449: LD_VAR 0 6
22453: ARRAY
22454: PPUSH
22455: LD_VAR 0 5
22459: PPUSH
22460: CALL_OW 3
22464: PPUSH
22465: CALL_OW 1
22469: ST_TO_ADDR
// end ; end ;
22470: GO 22308
22472: POP
22473: POP
// end ;
22474: LD_VAR 0 4
22478: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22479: LD_INT 0
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22490: LD_VAR 0 1
22494: PPUSH
22495: CALL_OW 264
22499: PUSH
22500: LD_EXP 46
22504: EQUAL
22505: NOT
22506: PUSH
22507: LD_VAR 0 1
22511: PUSH
22512: LD_EXP 125
22516: IN
22517: NOT
22518: OR
22519: IFFALSE 22523
// exit ;
22521: GO 22845
// index := GetElementIndex ( minersList , unit ) ;
22523: LD_ADDR_VAR 0 6
22527: PUSH
22528: LD_EXP 125
22532: PPUSH
22533: LD_VAR 0 1
22537: PPUSH
22538: CALL 28041 0 2
22542: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22543: LD_ADDR_VAR 0 8
22547: PUSH
22548: LD_EXP 127
22552: PUSH
22553: LD_EXP 126
22557: PUSH
22558: LD_VAR 0 6
22562: ARRAY
22563: MINUS
22564: ST_TO_ADDR
// if not minesFreeAmount then
22565: LD_VAR 0 8
22569: NOT
22570: IFFALSE 22574
// exit ;
22572: GO 22845
// tmp := [ ] ;
22574: LD_ADDR_VAR 0 7
22578: PUSH
22579: EMPTY
22580: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22581: LD_ADDR_VAR 0 5
22585: PUSH
22586: DOUBLE
22587: LD_INT 1
22589: DEC
22590: ST_TO_ADDR
22591: LD_VAR 0 8
22595: PUSH
22596: FOR_TO
22597: IFFALSE 22792
// begin _d := rand ( 0 , 5 ) ;
22599: LD_ADDR_VAR 0 11
22603: PUSH
22604: LD_INT 0
22606: PPUSH
22607: LD_INT 5
22609: PPUSH
22610: CALL_OW 12
22614: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22615: LD_ADDR_VAR 0 12
22619: PUSH
22620: LD_INT 2
22622: PPUSH
22623: LD_INT 6
22625: PPUSH
22626: CALL_OW 12
22630: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22631: LD_ADDR_VAR 0 9
22635: PUSH
22636: LD_VAR 0 2
22640: PPUSH
22641: LD_VAR 0 11
22645: PPUSH
22646: LD_VAR 0 12
22650: PPUSH
22651: CALL_OW 272
22655: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22656: LD_ADDR_VAR 0 10
22660: PUSH
22661: LD_VAR 0 3
22665: PPUSH
22666: LD_VAR 0 11
22670: PPUSH
22671: LD_VAR 0 12
22675: PPUSH
22676: CALL_OW 273
22680: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22681: LD_VAR 0 9
22685: PPUSH
22686: LD_VAR 0 10
22690: PPUSH
22691: CALL_OW 488
22695: PUSH
22696: LD_VAR 0 9
22700: PUSH
22701: LD_VAR 0 10
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_VAR 0 7
22714: IN
22715: NOT
22716: AND
22717: PUSH
22718: LD_VAR 0 9
22722: PPUSH
22723: LD_VAR 0 10
22727: PPUSH
22728: CALL_OW 458
22732: NOT
22733: AND
22734: IFFALSE 22776
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22736: LD_ADDR_VAR 0 7
22740: PUSH
22741: LD_VAR 0 7
22745: PPUSH
22746: LD_VAR 0 7
22750: PUSH
22751: LD_INT 1
22753: PLUS
22754: PPUSH
22755: LD_VAR 0 9
22759: PUSH
22760: LD_VAR 0 10
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PPUSH
22769: CALL_OW 1
22773: ST_TO_ADDR
22774: GO 22790
// i := i - 1 ;
22776: LD_ADDR_VAR 0 5
22780: PUSH
22781: LD_VAR 0 5
22785: PUSH
22786: LD_INT 1
22788: MINUS
22789: ST_TO_ADDR
// end ;
22790: GO 22596
22792: POP
22793: POP
// for i in tmp do
22794: LD_ADDR_VAR 0 5
22798: PUSH
22799: LD_VAR 0 7
22803: PUSH
22804: FOR_IN
22805: IFFALSE 22843
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22807: LD_VAR 0 1
22811: PPUSH
22812: LD_VAR 0 5
22816: PUSH
22817: LD_INT 1
22819: ARRAY
22820: PPUSH
22821: LD_VAR 0 5
22825: PUSH
22826: LD_INT 2
22828: ARRAY
22829: PPUSH
22830: CALL 21785 0 3
22834: NOT
22835: IFFALSE 22841
// exit ;
22837: POP
22838: POP
22839: GO 22845
22841: GO 22804
22843: POP
22844: POP
// end ;
22845: LD_VAR 0 4
22849: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22850: LD_INT 0
22852: PPUSH
22853: PPUSH
22854: PPUSH
22855: PPUSH
22856: PPUSH
22857: PPUSH
22858: PPUSH
// if not GetClass ( unit ) = class_sniper then
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 257
22868: PUSH
22869: LD_INT 5
22871: EQUAL
22872: NOT
22873: IFFALSE 22877
// exit ;
22875: GO 23265
// dist := 8 ;
22877: LD_ADDR_VAR 0 5
22881: PUSH
22882: LD_INT 8
22884: ST_TO_ADDR
// viewRange := 12 ;
22885: LD_ADDR_VAR 0 7
22889: PUSH
22890: LD_INT 12
22892: ST_TO_ADDR
// side := GetSide ( unit ) ;
22893: LD_ADDR_VAR 0 6
22897: PUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 255
22907: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22908: LD_INT 61
22910: PPUSH
22911: LD_VAR 0 6
22915: PPUSH
22916: CALL_OW 321
22920: PUSH
22921: LD_INT 2
22923: EQUAL
22924: IFFALSE 22934
// viewRange := 16 ;
22926: LD_ADDR_VAR 0 7
22930: PUSH
22931: LD_INT 16
22933: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22934: LD_VAR 0 1
22938: PPUSH
22939: LD_VAR 0 2
22943: PPUSH
22944: LD_VAR 0 3
22948: PPUSH
22949: CALL_OW 297
22953: PUSH
22954: LD_VAR 0 5
22958: GREATER
22959: IFFALSE 23038
// begin ComMoveXY ( unit , x , y ) ;
22961: LD_VAR 0 1
22965: PPUSH
22966: LD_VAR 0 2
22970: PPUSH
22971: LD_VAR 0 3
22975: PPUSH
22976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22980: LD_INT 35
22982: PPUSH
22983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22987: LD_VAR 0 1
22991: PPUSH
22992: LD_VAR 0 2
22996: PPUSH
22997: LD_VAR 0 3
23001: PPUSH
23002: CALL 58760 0 3
23006: NOT
23007: IFFALSE 23011
// exit ;
23009: GO 23265
// until GetDistUnitXY ( unit , x , y ) < dist ;
23011: LD_VAR 0 1
23015: PPUSH
23016: LD_VAR 0 2
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: CALL_OW 297
23030: PUSH
23031: LD_VAR 0 5
23035: LESS
23036: IFFALSE 22980
// end ; ComTurnXY ( unit , x , y ) ;
23038: LD_VAR 0 1
23042: PPUSH
23043: LD_VAR 0 2
23047: PPUSH
23048: LD_VAR 0 3
23052: PPUSH
23053: CALL_OW 118
// wait ( 5 ) ;
23057: LD_INT 5
23059: PPUSH
23060: CALL_OW 67
// _d := GetDir ( unit ) ;
23064: LD_ADDR_VAR 0 10
23068: PUSH
23069: LD_VAR 0 1
23073: PPUSH
23074: CALL_OW 254
23078: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23079: LD_ADDR_VAR 0 8
23083: PUSH
23084: LD_VAR 0 1
23088: PPUSH
23089: CALL_OW 250
23093: PPUSH
23094: LD_VAR 0 10
23098: PPUSH
23099: LD_VAR 0 5
23103: PPUSH
23104: CALL_OW 272
23108: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23109: LD_ADDR_VAR 0 9
23113: PUSH
23114: LD_VAR 0 1
23118: PPUSH
23119: CALL_OW 251
23123: PPUSH
23124: LD_VAR 0 10
23128: PPUSH
23129: LD_VAR 0 5
23133: PPUSH
23134: CALL_OW 273
23138: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23139: LD_VAR 0 8
23143: PPUSH
23144: LD_VAR 0 9
23148: PPUSH
23149: CALL_OW 488
23153: NOT
23154: IFFALSE 23158
// exit ;
23156: GO 23265
// ComAnimCustom ( unit , 1 ) ;
23158: LD_VAR 0 1
23162: PPUSH
23163: LD_INT 1
23165: PPUSH
23166: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23170: LD_VAR 0 8
23174: PPUSH
23175: LD_VAR 0 9
23179: PPUSH
23180: LD_VAR 0 6
23184: PPUSH
23185: LD_VAR 0 7
23189: PPUSH
23190: CALL_OW 330
// repeat wait ( 1 ) ;
23194: LD_INT 1
23196: PPUSH
23197: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23201: LD_VAR 0 1
23205: PPUSH
23206: CALL_OW 316
23210: PUSH
23211: LD_VAR 0 1
23215: PPUSH
23216: CALL_OW 314
23220: OR
23221: PUSH
23222: LD_VAR 0 1
23226: PPUSH
23227: CALL_OW 302
23231: NOT
23232: OR
23233: PUSH
23234: LD_VAR 0 1
23238: PPUSH
23239: CALL_OW 301
23243: OR
23244: IFFALSE 23194
// RemoveSeeing ( _x , _y , side ) ;
23246: LD_VAR 0 8
23250: PPUSH
23251: LD_VAR 0 9
23255: PPUSH
23256: LD_VAR 0 6
23260: PPUSH
23261: CALL_OW 331
// end ; end_of_file
23265: LD_VAR 0 4
23269: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23270: LD_INT 0
23272: PPUSH
23273: PPUSH
// if exist_mode then
23274: LD_VAR 0 2
23278: IFFALSE 23303
// unit := CreateCharacter ( prefix & ident ) else
23280: LD_ADDR_VAR 0 5
23284: PUSH
23285: LD_VAR 0 3
23289: PUSH
23290: LD_VAR 0 1
23294: STR
23295: PPUSH
23296: CALL_OW 34
23300: ST_TO_ADDR
23301: GO 23318
// unit := NewCharacter ( ident ) ;
23303: LD_ADDR_VAR 0 5
23307: PUSH
23308: LD_VAR 0 1
23312: PPUSH
23313: CALL_OW 25
23317: ST_TO_ADDR
// result := unit ;
23318: LD_ADDR_VAR 0 4
23322: PUSH
23323: LD_VAR 0 5
23327: ST_TO_ADDR
// end ;
23328: LD_VAR 0 4
23332: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23333: LD_INT 0
23335: PPUSH
23336: PPUSH
// if not side or not nation then
23337: LD_VAR 0 1
23341: NOT
23342: PUSH
23343: LD_VAR 0 2
23347: NOT
23348: OR
23349: IFFALSE 23353
// exit ;
23351: GO 24121
// case nation of nation_american :
23353: LD_VAR 0 2
23357: PUSH
23358: LD_INT 1
23360: DOUBLE
23361: EQUAL
23362: IFTRUE 23366
23364: GO 23580
23366: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23367: LD_ADDR_VAR 0 4
23371: PUSH
23372: LD_INT 35
23374: PUSH
23375: LD_INT 45
23377: PUSH
23378: LD_INT 46
23380: PUSH
23381: LD_INT 47
23383: PUSH
23384: LD_INT 82
23386: PUSH
23387: LD_INT 83
23389: PUSH
23390: LD_INT 84
23392: PUSH
23393: LD_INT 85
23395: PUSH
23396: LD_INT 86
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: LD_INT 6
23407: PUSH
23408: LD_INT 15
23410: PUSH
23411: LD_INT 16
23413: PUSH
23414: LD_INT 7
23416: PUSH
23417: LD_INT 12
23419: PUSH
23420: LD_INT 13
23422: PUSH
23423: LD_INT 10
23425: PUSH
23426: LD_INT 14
23428: PUSH
23429: LD_INT 20
23431: PUSH
23432: LD_INT 21
23434: PUSH
23435: LD_INT 22
23437: PUSH
23438: LD_INT 25
23440: PUSH
23441: LD_INT 32
23443: PUSH
23444: LD_INT 27
23446: PUSH
23447: LD_INT 36
23449: PUSH
23450: LD_INT 69
23452: PUSH
23453: LD_INT 39
23455: PUSH
23456: LD_INT 34
23458: PUSH
23459: LD_INT 40
23461: PUSH
23462: LD_INT 48
23464: PUSH
23465: LD_INT 49
23467: PUSH
23468: LD_INT 50
23470: PUSH
23471: LD_INT 51
23473: PUSH
23474: LD_INT 52
23476: PUSH
23477: LD_INT 53
23479: PUSH
23480: LD_INT 54
23482: PUSH
23483: LD_INT 55
23485: PUSH
23486: LD_INT 56
23488: PUSH
23489: LD_INT 57
23491: PUSH
23492: LD_INT 58
23494: PUSH
23495: LD_INT 59
23497: PUSH
23498: LD_INT 60
23500: PUSH
23501: LD_INT 61
23503: PUSH
23504: LD_INT 62
23506: PUSH
23507: LD_INT 80
23509: PUSH
23510: LD_INT 82
23512: PUSH
23513: LD_INT 83
23515: PUSH
23516: LD_INT 84
23518: PUSH
23519: LD_INT 85
23521: PUSH
23522: LD_INT 86
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: ST_TO_ADDR
23578: GO 24045
23580: LD_INT 2
23582: DOUBLE
23583: EQUAL
23584: IFTRUE 23588
23586: GO 23814
23588: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23589: LD_ADDR_VAR 0 4
23593: PUSH
23594: LD_INT 35
23596: PUSH
23597: LD_INT 45
23599: PUSH
23600: LD_INT 46
23602: PUSH
23603: LD_INT 47
23605: PUSH
23606: LD_INT 82
23608: PUSH
23609: LD_INT 83
23611: PUSH
23612: LD_INT 84
23614: PUSH
23615: LD_INT 85
23617: PUSH
23618: LD_INT 87
23620: PUSH
23621: LD_INT 70
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: LD_INT 11
23629: PUSH
23630: LD_INT 3
23632: PUSH
23633: LD_INT 4
23635: PUSH
23636: LD_INT 5
23638: PUSH
23639: LD_INT 6
23641: PUSH
23642: LD_INT 15
23644: PUSH
23645: LD_INT 18
23647: PUSH
23648: LD_INT 7
23650: PUSH
23651: LD_INT 17
23653: PUSH
23654: LD_INT 8
23656: PUSH
23657: LD_INT 20
23659: PUSH
23660: LD_INT 21
23662: PUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 72
23668: PUSH
23669: LD_INT 26
23671: PUSH
23672: LD_INT 69
23674: PUSH
23675: LD_INT 39
23677: PUSH
23678: LD_INT 40
23680: PUSH
23681: LD_INT 41
23683: PUSH
23684: LD_INT 42
23686: PUSH
23687: LD_INT 43
23689: PUSH
23690: LD_INT 48
23692: PUSH
23693: LD_INT 49
23695: PUSH
23696: LD_INT 50
23698: PUSH
23699: LD_INT 51
23701: PUSH
23702: LD_INT 52
23704: PUSH
23705: LD_INT 53
23707: PUSH
23708: LD_INT 54
23710: PUSH
23711: LD_INT 55
23713: PUSH
23714: LD_INT 56
23716: PUSH
23717: LD_INT 60
23719: PUSH
23720: LD_INT 61
23722: PUSH
23723: LD_INT 62
23725: PUSH
23726: LD_INT 66
23728: PUSH
23729: LD_INT 67
23731: PUSH
23732: LD_INT 68
23734: PUSH
23735: LD_INT 81
23737: PUSH
23738: LD_INT 82
23740: PUSH
23741: LD_INT 83
23743: PUSH
23744: LD_INT 84
23746: PUSH
23747: LD_INT 85
23749: PUSH
23750: LD_INT 87
23752: PUSH
23753: LD_INT 88
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: ST_TO_ADDR
23812: GO 24045
23814: LD_INT 3
23816: DOUBLE
23817: EQUAL
23818: IFTRUE 23822
23820: GO 24044
23822: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23823: LD_ADDR_VAR 0 4
23827: PUSH
23828: LD_INT 46
23830: PUSH
23831: LD_INT 47
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: LD_INT 82
23842: PUSH
23843: LD_INT 83
23845: PUSH
23846: LD_INT 84
23848: PUSH
23849: LD_INT 85
23851: PUSH
23852: LD_INT 86
23854: PUSH
23855: LD_INT 11
23857: PUSH
23858: LD_INT 9
23860: PUSH
23861: LD_INT 20
23863: PUSH
23864: LD_INT 19
23866: PUSH
23867: LD_INT 21
23869: PUSH
23870: LD_INT 24
23872: PUSH
23873: LD_INT 22
23875: PUSH
23876: LD_INT 25
23878: PUSH
23879: LD_INT 28
23881: PUSH
23882: LD_INT 29
23884: PUSH
23885: LD_INT 30
23887: PUSH
23888: LD_INT 31
23890: PUSH
23891: LD_INT 37
23893: PUSH
23894: LD_INT 38
23896: PUSH
23897: LD_INT 32
23899: PUSH
23900: LD_INT 27
23902: PUSH
23903: LD_INT 33
23905: PUSH
23906: LD_INT 69
23908: PUSH
23909: LD_INT 39
23911: PUSH
23912: LD_INT 34
23914: PUSH
23915: LD_INT 40
23917: PUSH
23918: LD_INT 71
23920: PUSH
23921: LD_INT 23
23923: PUSH
23924: LD_INT 44
23926: PUSH
23927: LD_INT 48
23929: PUSH
23930: LD_INT 49
23932: PUSH
23933: LD_INT 50
23935: PUSH
23936: LD_INT 51
23938: PUSH
23939: LD_INT 52
23941: PUSH
23942: LD_INT 53
23944: PUSH
23945: LD_INT 54
23947: PUSH
23948: LD_INT 55
23950: PUSH
23951: LD_INT 56
23953: PUSH
23954: LD_INT 57
23956: PUSH
23957: LD_INT 58
23959: PUSH
23960: LD_INT 59
23962: PUSH
23963: LD_INT 63
23965: PUSH
23966: LD_INT 64
23968: PUSH
23969: LD_INT 65
23971: PUSH
23972: LD_INT 82
23974: PUSH
23975: LD_INT 83
23977: PUSH
23978: LD_INT 84
23980: PUSH
23981: LD_INT 85
23983: PUSH
23984: LD_INT 86
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: ST_TO_ADDR
24042: GO 24045
24044: POP
// if state > - 1 and state < 3 then
24045: LD_VAR 0 3
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: GREATER
24054: PUSH
24055: LD_VAR 0 3
24059: PUSH
24060: LD_INT 3
24062: LESS
24063: AND
24064: IFFALSE 24121
// for i in result do
24066: LD_ADDR_VAR 0 5
24070: PUSH
24071: LD_VAR 0 4
24075: PUSH
24076: FOR_IN
24077: IFFALSE 24119
// if GetTech ( i , side ) <> state then
24079: LD_VAR 0 5
24083: PPUSH
24084: LD_VAR 0 1
24088: PPUSH
24089: CALL_OW 321
24093: PUSH
24094: LD_VAR 0 3
24098: NONEQUAL
24099: IFFALSE 24117
// result := result diff i ;
24101: LD_ADDR_VAR 0 4
24105: PUSH
24106: LD_VAR 0 4
24110: PUSH
24111: LD_VAR 0 5
24115: DIFF
24116: ST_TO_ADDR
24117: GO 24076
24119: POP
24120: POP
// end ;
24121: LD_VAR 0 4
24125: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24126: LD_INT 0
24128: PPUSH
24129: PPUSH
24130: PPUSH
// result := true ;
24131: LD_ADDR_VAR 0 3
24135: PUSH
24136: LD_INT 1
24138: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24139: LD_ADDR_VAR 0 5
24143: PUSH
24144: LD_VAR 0 2
24148: PPUSH
24149: CALL_OW 480
24153: ST_TO_ADDR
// if not tmp then
24154: LD_VAR 0 5
24158: NOT
24159: IFFALSE 24163
// exit ;
24161: GO 24212
// for i in tmp do
24163: LD_ADDR_VAR 0 4
24167: PUSH
24168: LD_VAR 0 5
24172: PUSH
24173: FOR_IN
24174: IFFALSE 24210
// if GetTech ( i , side ) <> state_researched then
24176: LD_VAR 0 4
24180: PPUSH
24181: LD_VAR 0 1
24185: PPUSH
24186: CALL_OW 321
24190: PUSH
24191: LD_INT 2
24193: NONEQUAL
24194: IFFALSE 24208
// begin result := false ;
24196: LD_ADDR_VAR 0 3
24200: PUSH
24201: LD_INT 0
24203: ST_TO_ADDR
// exit ;
24204: POP
24205: POP
24206: GO 24212
// end ;
24208: GO 24173
24210: POP
24211: POP
// end ;
24212: LD_VAR 0 3
24216: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24217: LD_INT 0
24219: PPUSH
24220: PPUSH
24221: PPUSH
24222: PPUSH
24223: PPUSH
24224: PPUSH
24225: PPUSH
24226: PPUSH
24227: PPUSH
24228: PPUSH
24229: PPUSH
24230: PPUSH
24231: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24232: LD_VAR 0 1
24236: NOT
24237: PUSH
24238: LD_VAR 0 1
24242: PPUSH
24243: CALL_OW 257
24247: PUSH
24248: LD_INT 9
24250: NONEQUAL
24251: OR
24252: IFFALSE 24256
// exit ;
24254: GO 24829
// side := GetSide ( unit ) ;
24256: LD_ADDR_VAR 0 9
24260: PUSH
24261: LD_VAR 0 1
24265: PPUSH
24266: CALL_OW 255
24270: ST_TO_ADDR
// tech_space := tech_spacanom ;
24271: LD_ADDR_VAR 0 12
24275: PUSH
24276: LD_INT 29
24278: ST_TO_ADDR
// tech_time := tech_taurad ;
24279: LD_ADDR_VAR 0 13
24283: PUSH
24284: LD_INT 28
24286: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24287: LD_ADDR_VAR 0 11
24291: PUSH
24292: LD_VAR 0 1
24296: PPUSH
24297: CALL_OW 310
24301: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24302: LD_VAR 0 11
24306: PPUSH
24307: CALL_OW 247
24311: PUSH
24312: LD_INT 2
24314: EQUAL
24315: IFFALSE 24319
// exit ;
24317: GO 24829
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24319: LD_ADDR_VAR 0 8
24323: PUSH
24324: LD_INT 81
24326: PUSH
24327: LD_VAR 0 9
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 3
24338: PUSH
24339: LD_INT 21
24341: PUSH
24342: LD_INT 3
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 69
24361: ST_TO_ADDR
// if not tmp then
24362: LD_VAR 0 8
24366: NOT
24367: IFFALSE 24371
// exit ;
24369: GO 24829
// if in_unit then
24371: LD_VAR 0 11
24375: IFFALSE 24399
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24377: LD_ADDR_VAR 0 10
24381: PUSH
24382: LD_VAR 0 8
24386: PPUSH
24387: LD_VAR 0 11
24391: PPUSH
24392: CALL_OW 74
24396: ST_TO_ADDR
24397: GO 24419
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24399: LD_ADDR_VAR 0 10
24403: PUSH
24404: LD_VAR 0 8
24408: PPUSH
24409: LD_VAR 0 1
24413: PPUSH
24414: CALL_OW 74
24418: ST_TO_ADDR
// if not enemy then
24419: LD_VAR 0 10
24423: NOT
24424: IFFALSE 24428
// exit ;
24426: GO 24829
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24428: LD_VAR 0 11
24432: PUSH
24433: LD_VAR 0 11
24437: PPUSH
24438: LD_VAR 0 10
24442: PPUSH
24443: CALL_OW 296
24447: PUSH
24448: LD_INT 13
24450: GREATER
24451: AND
24452: PUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: LD_VAR 0 10
24462: PPUSH
24463: CALL_OW 296
24467: PUSH
24468: LD_INT 12
24470: GREATER
24471: OR
24472: IFFALSE 24476
// exit ;
24474: GO 24829
// missile := [ 1 ] ;
24476: LD_ADDR_VAR 0 14
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: EMPTY
24485: LIST
24486: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24487: LD_VAR 0 9
24491: PPUSH
24492: LD_VAR 0 12
24496: PPUSH
24497: CALL_OW 325
24501: IFFALSE 24530
// missile := Replace ( missile , missile + 1 , 2 ) ;
24503: LD_ADDR_VAR 0 14
24507: PUSH
24508: LD_VAR 0 14
24512: PPUSH
24513: LD_VAR 0 14
24517: PUSH
24518: LD_INT 1
24520: PLUS
24521: PPUSH
24522: LD_INT 2
24524: PPUSH
24525: CALL_OW 1
24529: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24530: LD_VAR 0 9
24534: PPUSH
24535: LD_VAR 0 13
24539: PPUSH
24540: CALL_OW 325
24544: PUSH
24545: LD_VAR 0 10
24549: PPUSH
24550: CALL_OW 255
24554: PPUSH
24555: LD_VAR 0 13
24559: PPUSH
24560: CALL_OW 325
24564: NOT
24565: AND
24566: IFFALSE 24595
// missile := Replace ( missile , missile + 1 , 3 ) ;
24568: LD_ADDR_VAR 0 14
24572: PUSH
24573: LD_VAR 0 14
24577: PPUSH
24578: LD_VAR 0 14
24582: PUSH
24583: LD_INT 1
24585: PLUS
24586: PPUSH
24587: LD_INT 3
24589: PPUSH
24590: CALL_OW 1
24594: ST_TO_ADDR
// if missile < 2 then
24595: LD_VAR 0 14
24599: PUSH
24600: LD_INT 2
24602: LESS
24603: IFFALSE 24607
// exit ;
24605: GO 24829
// x := GetX ( enemy ) ;
24607: LD_ADDR_VAR 0 4
24611: PUSH
24612: LD_VAR 0 10
24616: PPUSH
24617: CALL_OW 250
24621: ST_TO_ADDR
// y := GetY ( enemy ) ;
24622: LD_ADDR_VAR 0 5
24626: PUSH
24627: LD_VAR 0 10
24631: PPUSH
24632: CALL_OW 251
24636: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24637: LD_ADDR_VAR 0 6
24641: PUSH
24642: LD_VAR 0 4
24646: PUSH
24647: LD_INT 1
24649: NEG
24650: PPUSH
24651: LD_INT 1
24653: PPUSH
24654: CALL_OW 12
24658: PLUS
24659: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24660: LD_ADDR_VAR 0 7
24664: PUSH
24665: LD_VAR 0 5
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PPUSH
24674: LD_INT 1
24676: PPUSH
24677: CALL_OW 12
24681: PLUS
24682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24683: LD_VAR 0 6
24687: PPUSH
24688: LD_VAR 0 7
24692: PPUSH
24693: CALL_OW 488
24697: NOT
24698: IFFALSE 24720
// begin _x := x ;
24700: LD_ADDR_VAR 0 6
24704: PUSH
24705: LD_VAR 0 4
24709: ST_TO_ADDR
// _y := y ;
24710: LD_ADDR_VAR 0 7
24714: PUSH
24715: LD_VAR 0 5
24719: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24720: LD_ADDR_VAR 0 3
24724: PUSH
24725: LD_INT 1
24727: PPUSH
24728: LD_VAR 0 14
24732: PPUSH
24733: CALL_OW 12
24737: ST_TO_ADDR
// case i of 1 :
24738: LD_VAR 0 3
24742: PUSH
24743: LD_INT 1
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24768
24751: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24752: LD_VAR 0 1
24756: PPUSH
24757: LD_VAR 0 10
24761: PPUSH
24762: CALL_OW 115
24766: GO 24829
24768: LD_INT 2
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24798
24776: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24777: LD_VAR 0 1
24781: PPUSH
24782: LD_VAR 0 6
24786: PPUSH
24787: LD_VAR 0 7
24791: PPUSH
24792: CALL_OW 153
24796: GO 24829
24798: LD_INT 3
24800: DOUBLE
24801: EQUAL
24802: IFTRUE 24806
24804: GO 24828
24806: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24807: LD_VAR 0 1
24811: PPUSH
24812: LD_VAR 0 6
24816: PPUSH
24817: LD_VAR 0 7
24821: PPUSH
24822: CALL_OW 154
24826: GO 24829
24828: POP
// end ;
24829: LD_VAR 0 2
24833: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24834: LD_INT 0
24836: PPUSH
24837: PPUSH
24838: PPUSH
24839: PPUSH
24840: PPUSH
24841: PPUSH
// if not unit or not building then
24842: LD_VAR 0 1
24846: NOT
24847: PUSH
24848: LD_VAR 0 2
24852: NOT
24853: OR
24854: IFFALSE 24858
// exit ;
24856: GO 25016
// x := GetX ( building ) ;
24858: LD_ADDR_VAR 0 5
24862: PUSH
24863: LD_VAR 0 2
24867: PPUSH
24868: CALL_OW 250
24872: ST_TO_ADDR
// y := GetY ( building ) ;
24873: LD_ADDR_VAR 0 6
24877: PUSH
24878: LD_VAR 0 2
24882: PPUSH
24883: CALL_OW 251
24887: ST_TO_ADDR
// for i = 0 to 5 do
24888: LD_ADDR_VAR 0 4
24892: PUSH
24893: DOUBLE
24894: LD_INT 0
24896: DEC
24897: ST_TO_ADDR
24898: LD_INT 5
24900: PUSH
24901: FOR_TO
24902: IFFALSE 25014
// begin _x := ShiftX ( x , i , 3 ) ;
24904: LD_ADDR_VAR 0 7
24908: PUSH
24909: LD_VAR 0 5
24913: PPUSH
24914: LD_VAR 0 4
24918: PPUSH
24919: LD_INT 3
24921: PPUSH
24922: CALL_OW 272
24926: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24927: LD_ADDR_VAR 0 8
24931: PUSH
24932: LD_VAR 0 6
24936: PPUSH
24937: LD_VAR 0 4
24941: PPUSH
24942: LD_INT 3
24944: PPUSH
24945: CALL_OW 273
24949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24950: LD_VAR 0 7
24954: PPUSH
24955: LD_VAR 0 8
24959: PPUSH
24960: CALL_OW 488
24964: NOT
24965: IFFALSE 24969
// continue ;
24967: GO 24901
// if HexInfo ( _x , _y ) = 0 then
24969: LD_VAR 0 7
24973: PPUSH
24974: LD_VAR 0 8
24978: PPUSH
24979: CALL_OW 428
24983: PUSH
24984: LD_INT 0
24986: EQUAL
24987: IFFALSE 25012
// begin ComMoveXY ( unit , _x , _y ) ;
24989: LD_VAR 0 1
24993: PPUSH
24994: LD_VAR 0 7
24998: PPUSH
24999: LD_VAR 0 8
25003: PPUSH
25004: CALL_OW 111
// exit ;
25008: POP
25009: POP
25010: GO 25016
// end ; end ;
25012: GO 24901
25014: POP
25015: POP
// end ;
25016: LD_VAR 0 3
25020: RET
// export function ScanBase ( side , base_area ) ; begin
25021: LD_INT 0
25023: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25024: LD_ADDR_VAR 0 3
25028: PUSH
25029: LD_VAR 0 2
25033: PPUSH
25034: LD_INT 81
25036: PUSH
25037: LD_VAR 0 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PPUSH
25046: CALL_OW 70
25050: ST_TO_ADDR
// end ;
25051: LD_VAR 0 3
25055: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25056: LD_INT 0
25058: PPUSH
25059: PPUSH
25060: PPUSH
25061: PPUSH
// result := false ;
25062: LD_ADDR_VAR 0 2
25066: PUSH
25067: LD_INT 0
25069: ST_TO_ADDR
// side := GetSide ( unit ) ;
25070: LD_ADDR_VAR 0 3
25074: PUSH
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL_OW 255
25084: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25085: LD_ADDR_VAR 0 4
25089: PUSH
25090: LD_VAR 0 1
25094: PPUSH
25095: CALL_OW 248
25099: ST_TO_ADDR
// case nat of 1 :
25100: LD_VAR 0 4
25104: PUSH
25105: LD_INT 1
25107: DOUBLE
25108: EQUAL
25109: IFTRUE 25113
25111: GO 25124
25113: POP
// tech := tech_lassight ; 2 :
25114: LD_ADDR_VAR 0 5
25118: PUSH
25119: LD_INT 12
25121: ST_TO_ADDR
25122: GO 25163
25124: LD_INT 2
25126: DOUBLE
25127: EQUAL
25128: IFTRUE 25132
25130: GO 25143
25132: POP
// tech := tech_mortar ; 3 :
25133: LD_ADDR_VAR 0 5
25137: PUSH
25138: LD_INT 41
25140: ST_TO_ADDR
25141: GO 25163
25143: LD_INT 3
25145: DOUBLE
25146: EQUAL
25147: IFTRUE 25151
25149: GO 25162
25151: POP
// tech := tech_bazooka ; end ;
25152: LD_ADDR_VAR 0 5
25156: PUSH
25157: LD_INT 44
25159: ST_TO_ADDR
25160: GO 25163
25162: POP
// if Researched ( side , tech ) then
25163: LD_VAR 0 3
25167: PPUSH
25168: LD_VAR 0 5
25172: PPUSH
25173: CALL_OW 325
25177: IFFALSE 25204
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25179: LD_ADDR_VAR 0 2
25183: PUSH
25184: LD_INT 5
25186: PUSH
25187: LD_INT 8
25189: PUSH
25190: LD_INT 9
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: PUSH
25198: LD_VAR 0 4
25202: ARRAY
25203: ST_TO_ADDR
// end ;
25204: LD_VAR 0 2
25208: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25209: LD_INT 0
25211: PPUSH
25212: PPUSH
25213: PPUSH
// if not mines then
25214: LD_VAR 0 2
25218: NOT
25219: IFFALSE 25223
// exit ;
25221: GO 25367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25223: LD_ADDR_VAR 0 5
25227: PUSH
25228: LD_INT 81
25230: PUSH
25231: LD_VAR 0 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 3
25242: PUSH
25243: LD_INT 21
25245: PUSH
25246: LD_INT 3
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PPUSH
25261: CALL_OW 69
25265: ST_TO_ADDR
// for i in mines do
25266: LD_ADDR_VAR 0 4
25270: PUSH
25271: LD_VAR 0 2
25275: PUSH
25276: FOR_IN
25277: IFFALSE 25365
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25279: LD_VAR 0 4
25283: PUSH
25284: LD_INT 1
25286: ARRAY
25287: PPUSH
25288: LD_VAR 0 4
25292: PUSH
25293: LD_INT 2
25295: ARRAY
25296: PPUSH
25297: CALL_OW 458
25301: NOT
25302: IFFALSE 25306
// continue ;
25304: GO 25276
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25306: LD_VAR 0 4
25310: PUSH
25311: LD_INT 1
25313: ARRAY
25314: PPUSH
25315: LD_VAR 0 4
25319: PUSH
25320: LD_INT 2
25322: ARRAY
25323: PPUSH
25324: CALL_OW 428
25328: PUSH
25329: LD_VAR 0 5
25333: IN
25334: IFFALSE 25363
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25336: LD_VAR 0 4
25340: PUSH
25341: LD_INT 1
25343: ARRAY
25344: PPUSH
25345: LD_VAR 0 4
25349: PUSH
25350: LD_INT 2
25352: ARRAY
25353: PPUSH
25354: LD_VAR 0 1
25358: PPUSH
25359: CALL_OW 456
// end ;
25363: GO 25276
25365: POP
25366: POP
// end ;
25367: LD_VAR 0 3
25371: RET
// export function Count ( array ) ; var i ; begin
25372: LD_INT 0
25374: PPUSH
25375: PPUSH
// result := 0 ;
25376: LD_ADDR_VAR 0 2
25380: PUSH
25381: LD_INT 0
25383: ST_TO_ADDR
// for i in array do
25384: LD_ADDR_VAR 0 3
25388: PUSH
25389: LD_VAR 0 1
25393: PUSH
25394: FOR_IN
25395: IFFALSE 25419
// if i then
25397: LD_VAR 0 3
25401: IFFALSE 25417
// result := result + 1 ;
25403: LD_ADDR_VAR 0 2
25407: PUSH
25408: LD_VAR 0 2
25412: PUSH
25413: LD_INT 1
25415: PLUS
25416: ST_TO_ADDR
25417: GO 25394
25419: POP
25420: POP
// end ;
25421: LD_VAR 0 2
25425: RET
// export function IsEmpty ( building ) ; begin
25426: LD_INT 0
25428: PPUSH
// if not building then
25429: LD_VAR 0 1
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25481
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25438: LD_ADDR_VAR 0 2
25442: PUSH
25443: LD_VAR 0 1
25447: PUSH
25448: LD_INT 22
25450: PUSH
25451: LD_VAR 0 1
25455: PPUSH
25456: CALL_OW 255
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 58
25467: PUSH
25468: EMPTY
25469: LIST
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PPUSH
25475: CALL_OW 69
25479: IN
25480: ST_TO_ADDR
// end ;
25481: LD_VAR 0 2
25485: RET
// export function IsNotFull ( building ) ; begin
25486: LD_INT 0
25488: PPUSH
// if not building then
25489: LD_VAR 0 1
25493: NOT
25494: IFFALSE 25498
// exit ;
25496: GO 25517
// result := UnitsInside ( building ) < 6 ;
25498: LD_ADDR_VAR 0 2
25502: PUSH
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL_OW 313
25512: PUSH
25513: LD_INT 6
25515: LESS
25516: ST_TO_ADDR
// end ;
25517: LD_VAR 0 2
25521: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25522: LD_INT 0
25524: PPUSH
25525: PPUSH
25526: PPUSH
25527: PPUSH
// tmp := [ ] ;
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: EMPTY
25534: ST_TO_ADDR
// list := [ ] ;
25535: LD_ADDR_VAR 0 5
25539: PUSH
25540: EMPTY
25541: ST_TO_ADDR
// for i = 16 to 25 do
25542: LD_ADDR_VAR 0 4
25546: PUSH
25547: DOUBLE
25548: LD_INT 16
25550: DEC
25551: ST_TO_ADDR
25552: LD_INT 25
25554: PUSH
25555: FOR_TO
25556: IFFALSE 25629
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25558: LD_ADDR_VAR 0 3
25562: PUSH
25563: LD_VAR 0 3
25567: PUSH
25568: LD_INT 22
25570: PUSH
25571: LD_VAR 0 1
25575: PPUSH
25576: CALL_OW 255
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 91
25587: PUSH
25588: LD_VAR 0 1
25592: PUSH
25593: LD_INT 6
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 30
25603: PUSH
25604: LD_VAR 0 4
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: PUSH
25618: EMPTY
25619: LIST
25620: PPUSH
25621: CALL_OW 69
25625: ADD
25626: ST_TO_ADDR
25627: GO 25555
25629: POP
25630: POP
// for i = 1 to tmp do
25631: LD_ADDR_VAR 0 4
25635: PUSH
25636: DOUBLE
25637: LD_INT 1
25639: DEC
25640: ST_TO_ADDR
25641: LD_VAR 0 3
25645: PUSH
25646: FOR_TO
25647: IFFALSE 25735
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25649: LD_ADDR_VAR 0 5
25653: PUSH
25654: LD_VAR 0 5
25658: PUSH
25659: LD_VAR 0 3
25663: PUSH
25664: LD_VAR 0 4
25668: ARRAY
25669: PPUSH
25670: CALL_OW 266
25674: PUSH
25675: LD_VAR 0 3
25679: PUSH
25680: LD_VAR 0 4
25684: ARRAY
25685: PPUSH
25686: CALL_OW 250
25690: PUSH
25691: LD_VAR 0 3
25695: PUSH
25696: LD_VAR 0 4
25700: ARRAY
25701: PPUSH
25702: CALL_OW 251
25706: PUSH
25707: LD_VAR 0 3
25711: PUSH
25712: LD_VAR 0 4
25716: ARRAY
25717: PPUSH
25718: CALL_OW 254
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: PUSH
25729: EMPTY
25730: LIST
25731: ADD
25732: ST_TO_ADDR
25733: GO 25646
25735: POP
25736: POP
// result := list ;
25737: LD_ADDR_VAR 0 2
25741: PUSH
25742: LD_VAR 0 5
25746: ST_TO_ADDR
// end ;
25747: LD_VAR 0 2
25751: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
// if not factory then
25761: LD_VAR 0 1
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 26363
// if control = control_apeman then
25770: LD_VAR 0 4
25774: PUSH
25775: LD_INT 5
25777: EQUAL
25778: IFFALSE 25887
// begin tmp := UnitsInside ( factory ) ;
25780: LD_ADDR_VAR 0 8
25784: PUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 313
25794: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25795: LD_VAR 0 8
25799: PPUSH
25800: LD_INT 25
25802: PUSH
25803: LD_INT 12
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PPUSH
25810: CALL_OW 72
25814: NOT
25815: IFFALSE 25825
// control := control_manual ;
25817: LD_ADDR_VAR 0 4
25821: PUSH
25822: LD_INT 1
25824: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25825: LD_ADDR_VAR 0 8
25829: PUSH
25830: LD_VAR 0 1
25834: PPUSH
25835: CALL 25522 0 1
25839: ST_TO_ADDR
// if tmp then
25840: LD_VAR 0 8
25844: IFFALSE 25887
// begin for i in tmp do
25846: LD_ADDR_VAR 0 7
25850: PUSH
25851: LD_VAR 0 8
25855: PUSH
25856: FOR_IN
25857: IFFALSE 25885
// if i [ 1 ] = b_ext_radio then
25859: LD_VAR 0 7
25863: PUSH
25864: LD_INT 1
25866: ARRAY
25867: PUSH
25868: LD_INT 22
25870: EQUAL
25871: IFFALSE 25883
// begin control := control_remote ;
25873: LD_ADDR_VAR 0 4
25877: PUSH
25878: LD_INT 2
25880: ST_TO_ADDR
// break ;
25881: GO 25885
// end ;
25883: GO 25856
25885: POP
25886: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25887: LD_VAR 0 1
25891: PPUSH
25892: LD_VAR 0 2
25896: PPUSH
25897: LD_VAR 0 3
25901: PPUSH
25902: LD_VAR 0 4
25906: PPUSH
25907: LD_VAR 0 5
25911: PPUSH
25912: CALL_OW 448
25916: IFFALSE 25951
// begin result := [ chassis , engine , control , weapon ] ;
25918: LD_ADDR_VAR 0 6
25922: PUSH
25923: LD_VAR 0 2
25927: PUSH
25928: LD_VAR 0 3
25932: PUSH
25933: LD_VAR 0 4
25937: PUSH
25938: LD_VAR 0 5
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: ST_TO_ADDR
// exit ;
25949: GO 26363
// end ; _chassis := AvailableChassisList ( factory ) ;
25951: LD_ADDR_VAR 0 9
25955: PUSH
25956: LD_VAR 0 1
25960: PPUSH
25961: CALL_OW 475
25965: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25966: LD_ADDR_VAR 0 11
25970: PUSH
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 476
25980: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25981: LD_ADDR_VAR 0 12
25985: PUSH
25986: LD_VAR 0 1
25990: PPUSH
25991: CALL_OW 477
25995: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25996: LD_ADDR_VAR 0 10
26000: PUSH
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 478
26010: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26011: LD_VAR 0 9
26015: NOT
26016: PUSH
26017: LD_VAR 0 11
26021: NOT
26022: OR
26023: PUSH
26024: LD_VAR 0 12
26028: NOT
26029: OR
26030: PUSH
26031: LD_VAR 0 10
26035: NOT
26036: OR
26037: IFFALSE 26072
// begin result := [ chassis , engine , control , weapon ] ;
26039: LD_ADDR_VAR 0 6
26043: PUSH
26044: LD_VAR 0 2
26048: PUSH
26049: LD_VAR 0 3
26053: PUSH
26054: LD_VAR 0 4
26058: PUSH
26059: LD_VAR 0 5
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: ST_TO_ADDR
// exit ;
26070: GO 26363
// end ; if not chassis in _chassis then
26072: LD_VAR 0 2
26076: PUSH
26077: LD_VAR 0 9
26081: IN
26082: NOT
26083: IFFALSE 26109
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26085: LD_ADDR_VAR 0 2
26089: PUSH
26090: LD_VAR 0 9
26094: PUSH
26095: LD_INT 1
26097: PPUSH
26098: LD_VAR 0 9
26102: PPUSH
26103: CALL_OW 12
26107: ARRAY
26108: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26109: LD_VAR 0 2
26113: PPUSH
26114: LD_VAR 0 3
26118: PPUSH
26119: CALL 26368 0 2
26123: NOT
26124: IFFALSE 26183
// repeat engine := _engine [ 1 ] ;
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_VAR 0 11
26135: PUSH
26136: LD_INT 1
26138: ARRAY
26139: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26140: LD_ADDR_VAR 0 11
26144: PUSH
26145: LD_VAR 0 11
26149: PPUSH
26150: LD_INT 1
26152: PPUSH
26153: CALL_OW 3
26157: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26158: LD_VAR 0 2
26162: PPUSH
26163: LD_VAR 0 3
26167: PPUSH
26168: CALL 26368 0 2
26172: PUSH
26173: LD_VAR 0 11
26177: PUSH
26178: EMPTY
26179: EQUAL
26180: OR
26181: IFFALSE 26126
// if not control in _control then
26183: LD_VAR 0 4
26187: PUSH
26188: LD_VAR 0 12
26192: IN
26193: NOT
26194: IFFALSE 26220
// control := _control [ rand ( 1 , _control ) ] ;
26196: LD_ADDR_VAR 0 4
26200: PUSH
26201: LD_VAR 0 12
26205: PUSH
26206: LD_INT 1
26208: PPUSH
26209: LD_VAR 0 12
26213: PPUSH
26214: CALL_OW 12
26218: ARRAY
26219: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26220: LD_VAR 0 2
26224: PPUSH
26225: LD_VAR 0 5
26229: PPUSH
26230: CALL 26588 0 2
26234: NOT
26235: IFFALSE 26294
// repeat weapon := _weapon [ 1 ] ;
26237: LD_ADDR_VAR 0 5
26241: PUSH
26242: LD_VAR 0 10
26246: PUSH
26247: LD_INT 1
26249: ARRAY
26250: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26251: LD_ADDR_VAR 0 10
26255: PUSH
26256: LD_VAR 0 10
26260: PPUSH
26261: LD_INT 1
26263: PPUSH
26264: CALL_OW 3
26268: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26269: LD_VAR 0 2
26273: PPUSH
26274: LD_VAR 0 5
26278: PPUSH
26279: CALL 26588 0 2
26283: PUSH
26284: LD_VAR 0 10
26288: PUSH
26289: EMPTY
26290: EQUAL
26291: OR
26292: IFFALSE 26237
// result := [ ] ;
26294: LD_ADDR_VAR 0 6
26298: PUSH
26299: EMPTY
26300: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26301: LD_VAR 0 1
26305: PPUSH
26306: LD_VAR 0 2
26310: PPUSH
26311: LD_VAR 0 3
26315: PPUSH
26316: LD_VAR 0 4
26320: PPUSH
26321: LD_VAR 0 5
26325: PPUSH
26326: CALL_OW 448
26330: IFFALSE 26363
// result := [ chassis , engine , control , weapon ] ;
26332: LD_ADDR_VAR 0 6
26336: PUSH
26337: LD_VAR 0 2
26341: PUSH
26342: LD_VAR 0 3
26346: PUSH
26347: LD_VAR 0 4
26351: PUSH
26352: LD_VAR 0 5
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: ST_TO_ADDR
// end ;
26363: LD_VAR 0 6
26367: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26368: LD_INT 0
26370: PPUSH
// if not chassis or not engine then
26371: LD_VAR 0 1
26375: NOT
26376: PUSH
26377: LD_VAR 0 2
26381: NOT
26382: OR
26383: IFFALSE 26387
// exit ;
26385: GO 26583
// case engine of engine_solar :
26387: LD_VAR 0 2
26391: PUSH
26392: LD_INT 2
26394: DOUBLE
26395: EQUAL
26396: IFTRUE 26400
26398: GO 26438
26400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26401: LD_ADDR_VAR 0 3
26405: PUSH
26406: LD_INT 11
26408: PUSH
26409: LD_INT 12
26411: PUSH
26412: LD_INT 13
26414: PUSH
26415: LD_INT 14
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: LD_INT 2
26423: PUSH
26424: LD_INT 3
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: ST_TO_ADDR
26436: GO 26567
26438: LD_INT 1
26440: DOUBLE
26441: EQUAL
26442: IFTRUE 26446
26444: GO 26508
26446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26447: LD_ADDR_VAR 0 3
26451: PUSH
26452: LD_INT 11
26454: PUSH
26455: LD_INT 12
26457: PUSH
26458: LD_INT 13
26460: PUSH
26461: LD_INT 14
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 3
26472: PUSH
26473: LD_INT 4
26475: PUSH
26476: LD_INT 5
26478: PUSH
26479: LD_INT 21
26481: PUSH
26482: LD_INT 23
26484: PUSH
26485: LD_INT 22
26487: PUSH
26488: LD_INT 24
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: ST_TO_ADDR
26506: GO 26567
26508: LD_INT 3
26510: DOUBLE
26511: EQUAL
26512: IFTRUE 26516
26514: GO 26566
26516: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26517: LD_ADDR_VAR 0 3
26521: PUSH
26522: LD_INT 13
26524: PUSH
26525: LD_INT 14
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: LD_INT 4
26536: PUSH
26537: LD_INT 5
26539: PUSH
26540: LD_INT 21
26542: PUSH
26543: LD_INT 22
26545: PUSH
26546: LD_INT 23
26548: PUSH
26549: LD_INT 24
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
26564: GO 26567
26566: POP
// result := ( chassis in result ) ;
26567: LD_ADDR_VAR 0 3
26571: PUSH
26572: LD_VAR 0 1
26576: PUSH
26577: LD_VAR 0 3
26581: IN
26582: ST_TO_ADDR
// end ;
26583: LD_VAR 0 3
26587: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26588: LD_INT 0
26590: PPUSH
// if not chassis or not weapon then
26591: LD_VAR 0 1
26595: NOT
26596: PUSH
26597: LD_VAR 0 2
26601: NOT
26602: OR
26603: IFFALSE 26607
// exit ;
26605: GO 27669
// case weapon of us_machine_gun :
26607: LD_VAR 0 2
26611: PUSH
26612: LD_INT 2
26614: DOUBLE
26615: EQUAL
26616: IFTRUE 26620
26618: GO 26650
26620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: LD_INT 2
26631: PUSH
26632: LD_INT 3
26634: PUSH
26635: LD_INT 4
26637: PUSH
26638: LD_INT 5
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: ST_TO_ADDR
26648: GO 27653
26650: LD_INT 3
26652: DOUBLE
26653: EQUAL
26654: IFTRUE 26658
26656: GO 26688
26658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26659: LD_ADDR_VAR 0 3
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 3
26672: PUSH
26673: LD_INT 4
26675: PUSH
26676: LD_INT 5
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: ST_TO_ADDR
26686: GO 27653
26688: LD_INT 11
26690: DOUBLE
26691: EQUAL
26692: IFTRUE 26696
26694: GO 26726
26696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26697: LD_ADDR_VAR 0 3
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: LD_INT 3
26710: PUSH
26711: LD_INT 4
26713: PUSH
26714: LD_INT 5
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: ST_TO_ADDR
26724: GO 27653
26726: LD_INT 4
26728: DOUBLE
26729: EQUAL
26730: IFTRUE 26734
26732: GO 26760
26734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: LD_INT 3
26745: PUSH
26746: LD_INT 4
26748: PUSH
26749: LD_INT 5
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: ST_TO_ADDR
26758: GO 27653
26760: LD_INT 5
26762: DOUBLE
26763: EQUAL
26764: IFTRUE 26768
26766: GO 26794
26768: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26769: LD_ADDR_VAR 0 3
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: LD_INT 4
26782: PUSH
26783: LD_INT 5
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: ST_TO_ADDR
26792: GO 27653
26794: LD_INT 9
26796: DOUBLE
26797: EQUAL
26798: IFTRUE 26802
26800: GO 26828
26802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26803: LD_ADDR_VAR 0 3
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: LD_INT 3
26813: PUSH
26814: LD_INT 4
26816: PUSH
26817: LD_INT 5
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: ST_TO_ADDR
26826: GO 27653
26828: LD_INT 7
26830: DOUBLE
26831: EQUAL
26832: IFTRUE 26836
26834: GO 26862
26836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26837: LD_ADDR_VAR 0 3
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 3
26847: PUSH
26848: LD_INT 4
26850: PUSH
26851: LD_INT 5
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: ST_TO_ADDR
26860: GO 27653
26862: LD_INT 12
26864: DOUBLE
26865: EQUAL
26866: IFTRUE 26870
26868: GO 26896
26870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26871: LD_ADDR_VAR 0 3
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: LD_INT 4
26884: PUSH
26885: LD_INT 5
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
26894: GO 27653
26896: LD_INT 13
26898: DOUBLE
26899: EQUAL
26900: IFTRUE 26904
26902: GO 26930
26904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26905: LD_ADDR_VAR 0 3
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: LD_INT 4
26918: PUSH
26919: LD_INT 5
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: ST_TO_ADDR
26928: GO 27653
26930: LD_INT 14
26932: DOUBLE
26933: EQUAL
26934: IFTRUE 26938
26936: GO 26956
26938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26939: LD_ADDR_VAR 0 3
26943: PUSH
26944: LD_INT 4
26946: PUSH
26947: LD_INT 5
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: ST_TO_ADDR
26954: GO 27653
26956: LD_INT 6
26958: DOUBLE
26959: EQUAL
26960: IFTRUE 26964
26962: GO 26982
26964: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26965: LD_ADDR_VAR 0 3
26969: PUSH
26970: LD_INT 4
26972: PUSH
26973: LD_INT 5
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: ST_TO_ADDR
26980: GO 27653
26982: LD_INT 10
26984: DOUBLE
26985: EQUAL
26986: IFTRUE 26990
26988: GO 27008
26990: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26991: LD_ADDR_VAR 0 3
26995: PUSH
26996: LD_INT 4
26998: PUSH
26999: LD_INT 5
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: ST_TO_ADDR
27006: GO 27653
27008: LD_INT 22
27010: DOUBLE
27011: EQUAL
27012: IFTRUE 27016
27014: GO 27042
27016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27017: LD_ADDR_VAR 0 3
27021: PUSH
27022: LD_INT 11
27024: PUSH
27025: LD_INT 12
27027: PUSH
27028: LD_INT 13
27030: PUSH
27031: LD_INT 14
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
27040: GO 27653
27042: LD_INT 23
27044: DOUBLE
27045: EQUAL
27046: IFTRUE 27050
27048: GO 27076
27050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27051: LD_ADDR_VAR 0 3
27055: PUSH
27056: LD_INT 11
27058: PUSH
27059: LD_INT 12
27061: PUSH
27062: LD_INT 13
27064: PUSH
27065: LD_INT 14
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: ST_TO_ADDR
27074: GO 27653
27076: LD_INT 24
27078: DOUBLE
27079: EQUAL
27080: IFTRUE 27084
27082: GO 27110
27084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27085: LD_ADDR_VAR 0 3
27089: PUSH
27090: LD_INT 11
27092: PUSH
27093: LD_INT 12
27095: PUSH
27096: LD_INT 13
27098: PUSH
27099: LD_INT 14
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: ST_TO_ADDR
27108: GO 27653
27110: LD_INT 30
27112: DOUBLE
27113: EQUAL
27114: IFTRUE 27118
27116: GO 27144
27118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_INT 11
27126: PUSH
27127: LD_INT 12
27129: PUSH
27130: LD_INT 13
27132: PUSH
27133: LD_INT 14
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: ST_TO_ADDR
27142: GO 27653
27144: LD_INT 25
27146: DOUBLE
27147: EQUAL
27148: IFTRUE 27152
27150: GO 27170
27152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27153: LD_ADDR_VAR 0 3
27157: PUSH
27158: LD_INT 13
27160: PUSH
27161: LD_INT 14
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: ST_TO_ADDR
27168: GO 27653
27170: LD_INT 27
27172: DOUBLE
27173: EQUAL
27174: IFTRUE 27178
27176: GO 27196
27178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: LD_INT 13
27186: PUSH
27187: LD_INT 14
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: ST_TO_ADDR
27194: GO 27653
27196: LD_EXP 44
27200: DOUBLE
27201: EQUAL
27202: IFTRUE 27206
27204: GO 27232
27206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27207: LD_ADDR_VAR 0 3
27211: PUSH
27212: LD_INT 11
27214: PUSH
27215: LD_INT 12
27217: PUSH
27218: LD_INT 13
27220: PUSH
27221: LD_INT 14
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: ST_TO_ADDR
27230: GO 27653
27232: LD_INT 28
27234: DOUBLE
27235: EQUAL
27236: IFTRUE 27240
27238: GO 27258
27240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27241: LD_ADDR_VAR 0 3
27245: PUSH
27246: LD_INT 13
27248: PUSH
27249: LD_INT 14
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: ST_TO_ADDR
27256: GO 27653
27258: LD_INT 29
27260: DOUBLE
27261: EQUAL
27262: IFTRUE 27266
27264: GO 27284
27266: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27267: LD_ADDR_VAR 0 3
27271: PUSH
27272: LD_INT 13
27274: PUSH
27275: LD_INT 14
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: ST_TO_ADDR
27282: GO 27653
27284: LD_INT 31
27286: DOUBLE
27287: EQUAL
27288: IFTRUE 27292
27290: GO 27310
27292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27293: LD_ADDR_VAR 0 3
27297: PUSH
27298: LD_INT 13
27300: PUSH
27301: LD_INT 14
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: ST_TO_ADDR
27308: GO 27653
27310: LD_INT 26
27312: DOUBLE
27313: EQUAL
27314: IFTRUE 27318
27316: GO 27336
27318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27319: LD_ADDR_VAR 0 3
27323: PUSH
27324: LD_INT 13
27326: PUSH
27327: LD_INT 14
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: ST_TO_ADDR
27334: GO 27653
27336: LD_INT 42
27338: DOUBLE
27339: EQUAL
27340: IFTRUE 27344
27342: GO 27370
27344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27345: LD_ADDR_VAR 0 3
27349: PUSH
27350: LD_INT 21
27352: PUSH
27353: LD_INT 22
27355: PUSH
27356: LD_INT 23
27358: PUSH
27359: LD_INT 24
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: ST_TO_ADDR
27368: GO 27653
27370: LD_INT 43
27372: DOUBLE
27373: EQUAL
27374: IFTRUE 27378
27376: GO 27404
27378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: LD_INT 21
27386: PUSH
27387: LD_INT 22
27389: PUSH
27390: LD_INT 23
27392: PUSH
27393: LD_INT 24
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
27402: GO 27653
27404: LD_INT 44
27406: DOUBLE
27407: EQUAL
27408: IFTRUE 27412
27410: GO 27438
27412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27413: LD_ADDR_VAR 0 3
27417: PUSH
27418: LD_INT 21
27420: PUSH
27421: LD_INT 22
27423: PUSH
27424: LD_INT 23
27426: PUSH
27427: LD_INT 24
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: ST_TO_ADDR
27436: GO 27653
27438: LD_INT 45
27440: DOUBLE
27441: EQUAL
27442: IFTRUE 27446
27444: GO 27472
27446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27447: LD_ADDR_VAR 0 3
27451: PUSH
27452: LD_INT 21
27454: PUSH
27455: LD_INT 22
27457: PUSH
27458: LD_INT 23
27460: PUSH
27461: LD_INT 24
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: ST_TO_ADDR
27470: GO 27653
27472: LD_INT 49
27474: DOUBLE
27475: EQUAL
27476: IFTRUE 27480
27478: GO 27506
27480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27481: LD_ADDR_VAR 0 3
27485: PUSH
27486: LD_INT 21
27488: PUSH
27489: LD_INT 22
27491: PUSH
27492: LD_INT 23
27494: PUSH
27495: LD_INT 24
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: ST_TO_ADDR
27504: GO 27653
27506: LD_INT 51
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27540
27514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27515: LD_ADDR_VAR 0 3
27519: PUSH
27520: LD_INT 21
27522: PUSH
27523: LD_INT 22
27525: PUSH
27526: LD_INT 23
27528: PUSH
27529: LD_INT 24
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: ST_TO_ADDR
27538: GO 27653
27540: LD_INT 52
27542: DOUBLE
27543: EQUAL
27544: IFTRUE 27548
27546: GO 27574
27548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27549: LD_ADDR_VAR 0 3
27553: PUSH
27554: LD_INT 21
27556: PUSH
27557: LD_INT 22
27559: PUSH
27560: LD_INT 23
27562: PUSH
27563: LD_INT 24
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: ST_TO_ADDR
27572: GO 27653
27574: LD_INT 53
27576: DOUBLE
27577: EQUAL
27578: IFTRUE 27582
27580: GO 27600
27582: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27583: LD_ADDR_VAR 0 3
27587: PUSH
27588: LD_INT 23
27590: PUSH
27591: LD_INT 24
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: ST_TO_ADDR
27598: GO 27653
27600: LD_INT 46
27602: DOUBLE
27603: EQUAL
27604: IFTRUE 27608
27606: GO 27626
27608: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27609: LD_ADDR_VAR 0 3
27613: PUSH
27614: LD_INT 23
27616: PUSH
27617: LD_INT 24
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: ST_TO_ADDR
27624: GO 27653
27626: LD_INT 47
27628: DOUBLE
27629: EQUAL
27630: IFTRUE 27634
27632: GO 27652
27634: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27635: LD_ADDR_VAR 0 3
27639: PUSH
27640: LD_INT 23
27642: PUSH
27643: LD_INT 24
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: ST_TO_ADDR
27650: GO 27653
27652: POP
// result := ( chassis in result ) ;
27653: LD_ADDR_VAR 0 3
27657: PUSH
27658: LD_VAR 0 1
27662: PUSH
27663: LD_VAR 0 3
27667: IN
27668: ST_TO_ADDR
// end ;
27669: LD_VAR 0 3
27673: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27674: LD_INT 0
27676: PPUSH
27677: PPUSH
27678: PPUSH
27679: PPUSH
27680: PPUSH
27681: PPUSH
27682: PPUSH
// result := array ;
27683: LD_ADDR_VAR 0 5
27687: PUSH
27688: LD_VAR 0 1
27692: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27693: LD_VAR 0 1
27697: NOT
27698: PUSH
27699: LD_VAR 0 2
27703: NOT
27704: OR
27705: PUSH
27706: LD_VAR 0 3
27710: NOT
27711: OR
27712: PUSH
27713: LD_VAR 0 2
27717: PUSH
27718: LD_VAR 0 1
27722: GREATER
27723: OR
27724: PUSH
27725: LD_VAR 0 3
27729: PUSH
27730: LD_VAR 0 1
27734: GREATER
27735: OR
27736: IFFALSE 27740
// exit ;
27738: GO 28036
// if direction then
27740: LD_VAR 0 4
27744: IFFALSE 27808
// begin d := 1 ;
27746: LD_ADDR_VAR 0 9
27750: PUSH
27751: LD_INT 1
27753: ST_TO_ADDR
// if i_from > i_to then
27754: LD_VAR 0 2
27758: PUSH
27759: LD_VAR 0 3
27763: GREATER
27764: IFFALSE 27790
// length := ( array - i_from ) + i_to else
27766: LD_ADDR_VAR 0 11
27770: PUSH
27771: LD_VAR 0 1
27775: PUSH
27776: LD_VAR 0 2
27780: MINUS
27781: PUSH
27782: LD_VAR 0 3
27786: PLUS
27787: ST_TO_ADDR
27788: GO 27806
// length := i_to - i_from ;
27790: LD_ADDR_VAR 0 11
27794: PUSH
27795: LD_VAR 0 3
27799: PUSH
27800: LD_VAR 0 2
27804: MINUS
27805: ST_TO_ADDR
// end else
27806: GO 27869
// begin d := - 1 ;
27808: LD_ADDR_VAR 0 9
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: ST_TO_ADDR
// if i_from > i_to then
27817: LD_VAR 0 2
27821: PUSH
27822: LD_VAR 0 3
27826: GREATER
27827: IFFALSE 27847
// length := i_from - i_to else
27829: LD_ADDR_VAR 0 11
27833: PUSH
27834: LD_VAR 0 2
27838: PUSH
27839: LD_VAR 0 3
27843: MINUS
27844: ST_TO_ADDR
27845: GO 27869
// length := ( array - i_to ) + i_from ;
27847: LD_ADDR_VAR 0 11
27851: PUSH
27852: LD_VAR 0 1
27856: PUSH
27857: LD_VAR 0 3
27861: MINUS
27862: PUSH
27863: LD_VAR 0 2
27867: PLUS
27868: ST_TO_ADDR
// end ; if not length then
27869: LD_VAR 0 11
27873: NOT
27874: IFFALSE 27878
// exit ;
27876: GO 28036
// tmp := array ;
27878: LD_ADDR_VAR 0 10
27882: PUSH
27883: LD_VAR 0 1
27887: ST_TO_ADDR
// for i = 1 to length do
27888: LD_ADDR_VAR 0 6
27892: PUSH
27893: DOUBLE
27894: LD_INT 1
27896: DEC
27897: ST_TO_ADDR
27898: LD_VAR 0 11
27902: PUSH
27903: FOR_TO
27904: IFFALSE 28024
// begin for j = 1 to array do
27906: LD_ADDR_VAR 0 7
27910: PUSH
27911: DOUBLE
27912: LD_INT 1
27914: DEC
27915: ST_TO_ADDR
27916: LD_VAR 0 1
27920: PUSH
27921: FOR_TO
27922: IFFALSE 28010
// begin k := j + d ;
27924: LD_ADDR_VAR 0 8
27928: PUSH
27929: LD_VAR 0 7
27933: PUSH
27934: LD_VAR 0 9
27938: PLUS
27939: ST_TO_ADDR
// if k > array then
27940: LD_VAR 0 8
27944: PUSH
27945: LD_VAR 0 1
27949: GREATER
27950: IFFALSE 27960
// k := 1 ;
27952: LD_ADDR_VAR 0 8
27956: PUSH
27957: LD_INT 1
27959: ST_TO_ADDR
// if not k then
27960: LD_VAR 0 8
27964: NOT
27965: IFFALSE 27977
// k := array ;
27967: LD_ADDR_VAR 0 8
27971: PUSH
27972: LD_VAR 0 1
27976: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27977: LD_ADDR_VAR 0 10
27981: PUSH
27982: LD_VAR 0 10
27986: PPUSH
27987: LD_VAR 0 8
27991: PPUSH
27992: LD_VAR 0 1
27996: PUSH
27997: LD_VAR 0 7
28001: ARRAY
28002: PPUSH
28003: CALL_OW 1
28007: ST_TO_ADDR
// end ;
28008: GO 27921
28010: POP
28011: POP
// array := tmp ;
28012: LD_ADDR_VAR 0 1
28016: PUSH
28017: LD_VAR 0 10
28021: ST_TO_ADDR
// end ;
28022: GO 27903
28024: POP
28025: POP
// result := array ;
28026: LD_ADDR_VAR 0 5
28030: PUSH
28031: LD_VAR 0 1
28035: ST_TO_ADDR
// end ;
28036: LD_VAR 0 5
28040: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28041: LD_INT 0
28043: PPUSH
28044: PPUSH
// result := 0 ;
28045: LD_ADDR_VAR 0 3
28049: PUSH
28050: LD_INT 0
28052: ST_TO_ADDR
// if not array or not value in array then
28053: LD_VAR 0 1
28057: NOT
28058: PUSH
28059: LD_VAR 0 2
28063: PUSH
28064: LD_VAR 0 1
28068: IN
28069: NOT
28070: OR
28071: IFFALSE 28075
// exit ;
28073: GO 28129
// for i = 1 to array do
28075: LD_ADDR_VAR 0 4
28079: PUSH
28080: DOUBLE
28081: LD_INT 1
28083: DEC
28084: ST_TO_ADDR
28085: LD_VAR 0 1
28089: PUSH
28090: FOR_TO
28091: IFFALSE 28127
// if value = array [ i ] then
28093: LD_VAR 0 2
28097: PUSH
28098: LD_VAR 0 1
28102: PUSH
28103: LD_VAR 0 4
28107: ARRAY
28108: EQUAL
28109: IFFALSE 28125
// begin result := i ;
28111: LD_ADDR_VAR 0 3
28115: PUSH
28116: LD_VAR 0 4
28120: ST_TO_ADDR
// exit ;
28121: POP
28122: POP
28123: GO 28129
// end ;
28125: GO 28090
28127: POP
28128: POP
// end ;
28129: LD_VAR 0 3
28133: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28134: LD_INT 0
28136: PPUSH
// vc_chassis := chassis ;
28137: LD_ADDR_OWVAR 37
28141: PUSH
28142: LD_VAR 0 1
28146: ST_TO_ADDR
// vc_engine := engine ;
28147: LD_ADDR_OWVAR 39
28151: PUSH
28152: LD_VAR 0 2
28156: ST_TO_ADDR
// vc_control := control ;
28157: LD_ADDR_OWVAR 38
28161: PUSH
28162: LD_VAR 0 3
28166: ST_TO_ADDR
// vc_weapon := weapon ;
28167: LD_ADDR_OWVAR 40
28171: PUSH
28172: LD_VAR 0 4
28176: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28177: LD_ADDR_OWVAR 41
28181: PUSH
28182: LD_VAR 0 5
28186: ST_TO_ADDR
// end ;
28187: LD_VAR 0 6
28191: RET
// export function WantPlant ( unit ) ; var task ; begin
28192: LD_INT 0
28194: PPUSH
28195: PPUSH
// result := false ;
28196: LD_ADDR_VAR 0 2
28200: PUSH
28201: LD_INT 0
28203: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28204: LD_ADDR_VAR 0 3
28208: PUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: CALL_OW 437
28218: ST_TO_ADDR
// if task then
28219: LD_VAR 0 3
28223: IFFALSE 28251
// if task [ 1 ] [ 1 ] = p then
28225: LD_VAR 0 3
28229: PUSH
28230: LD_INT 1
28232: ARRAY
28233: PUSH
28234: LD_INT 1
28236: ARRAY
28237: PUSH
28238: LD_STRING p
28240: EQUAL
28241: IFFALSE 28251
// result := true ;
28243: LD_ADDR_VAR 0 2
28247: PUSH
28248: LD_INT 1
28250: ST_TO_ADDR
// end ;
28251: LD_VAR 0 2
28255: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28256: LD_INT 0
28258: PPUSH
28259: PPUSH
28260: PPUSH
28261: PPUSH
// if pos < 1 then
28262: LD_VAR 0 2
28266: PUSH
28267: LD_INT 1
28269: LESS
28270: IFFALSE 28274
// exit ;
28272: GO 28577
// if pos = 1 then
28274: LD_VAR 0 2
28278: PUSH
28279: LD_INT 1
28281: EQUAL
28282: IFFALSE 28315
// result := Replace ( arr , pos [ 1 ] , value ) else
28284: LD_ADDR_VAR 0 4
28288: PUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: LD_VAR 0 2
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_VAR 0 3
28307: PPUSH
28308: CALL_OW 1
28312: ST_TO_ADDR
28313: GO 28577
// begin tmp := arr ;
28315: LD_ADDR_VAR 0 6
28319: PUSH
28320: LD_VAR 0 1
28324: ST_TO_ADDR
// s_arr := [ tmp ] ;
28325: LD_ADDR_VAR 0 7
28329: PUSH
28330: LD_VAR 0 6
28334: PUSH
28335: EMPTY
28336: LIST
28337: ST_TO_ADDR
// for i = 1 to pos - 1 do
28338: LD_ADDR_VAR 0 5
28342: PUSH
28343: DOUBLE
28344: LD_INT 1
28346: DEC
28347: ST_TO_ADDR
28348: LD_VAR 0 2
28352: PUSH
28353: LD_INT 1
28355: MINUS
28356: PUSH
28357: FOR_TO
28358: IFFALSE 28403
// begin tmp := tmp [ pos [ i ] ] ;
28360: LD_ADDR_VAR 0 6
28364: PUSH
28365: LD_VAR 0 6
28369: PUSH
28370: LD_VAR 0 2
28374: PUSH
28375: LD_VAR 0 5
28379: ARRAY
28380: ARRAY
28381: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28382: LD_ADDR_VAR 0 7
28386: PUSH
28387: LD_VAR 0 7
28391: PUSH
28392: LD_VAR 0 6
28396: PUSH
28397: EMPTY
28398: LIST
28399: ADD
28400: ST_TO_ADDR
// end ;
28401: GO 28357
28403: POP
28404: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28405: LD_ADDR_VAR 0 6
28409: PUSH
28410: LD_VAR 0 6
28414: PPUSH
28415: LD_VAR 0 2
28419: PUSH
28420: LD_VAR 0 2
28424: ARRAY
28425: PPUSH
28426: LD_VAR 0 3
28430: PPUSH
28431: CALL_OW 1
28435: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28436: LD_ADDR_VAR 0 7
28440: PUSH
28441: LD_VAR 0 7
28445: PPUSH
28446: LD_VAR 0 7
28450: PPUSH
28451: LD_VAR 0 6
28455: PPUSH
28456: CALL_OW 1
28460: ST_TO_ADDR
// for i = s_arr downto 2 do
28461: LD_ADDR_VAR 0 5
28465: PUSH
28466: DOUBLE
28467: LD_VAR 0 7
28471: INC
28472: ST_TO_ADDR
28473: LD_INT 2
28475: PUSH
28476: FOR_DOWNTO
28477: IFFALSE 28561
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28479: LD_ADDR_VAR 0 6
28483: PUSH
28484: LD_VAR 0 7
28488: PUSH
28489: LD_VAR 0 5
28493: PUSH
28494: LD_INT 1
28496: MINUS
28497: ARRAY
28498: PPUSH
28499: LD_VAR 0 2
28503: PUSH
28504: LD_VAR 0 5
28508: PUSH
28509: LD_INT 1
28511: MINUS
28512: ARRAY
28513: PPUSH
28514: LD_VAR 0 7
28518: PUSH
28519: LD_VAR 0 5
28523: ARRAY
28524: PPUSH
28525: CALL_OW 1
28529: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28530: LD_ADDR_VAR 0 7
28534: PUSH
28535: LD_VAR 0 7
28539: PPUSH
28540: LD_VAR 0 5
28544: PUSH
28545: LD_INT 1
28547: MINUS
28548: PPUSH
28549: LD_VAR 0 6
28553: PPUSH
28554: CALL_OW 1
28558: ST_TO_ADDR
// end ;
28559: GO 28476
28561: POP
28562: POP
// result := s_arr [ 1 ] ;
28563: LD_ADDR_VAR 0 4
28567: PUSH
28568: LD_VAR 0 7
28572: PUSH
28573: LD_INT 1
28575: ARRAY
28576: ST_TO_ADDR
// end ; end ;
28577: LD_VAR 0 4
28581: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
// if not list then
28586: LD_VAR 0 1
28590: NOT
28591: IFFALSE 28595
// exit ;
28593: GO 28686
// i := list [ pos1 ] ;
28595: LD_ADDR_VAR 0 5
28599: PUSH
28600: LD_VAR 0 1
28604: PUSH
28605: LD_VAR 0 2
28609: ARRAY
28610: ST_TO_ADDR
// if not i then
28611: LD_VAR 0 5
28615: NOT
28616: IFFALSE 28620
// exit ;
28618: GO 28686
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28620: LD_ADDR_VAR 0 1
28624: PUSH
28625: LD_VAR 0 1
28629: PPUSH
28630: LD_VAR 0 2
28634: PPUSH
28635: LD_VAR 0 1
28639: PUSH
28640: LD_VAR 0 3
28644: ARRAY
28645: PPUSH
28646: CALL_OW 1
28650: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28651: LD_ADDR_VAR 0 1
28655: PUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: LD_VAR 0 3
28665: PPUSH
28666: LD_VAR 0 5
28670: PPUSH
28671: CALL_OW 1
28675: ST_TO_ADDR
// result := list ;
28676: LD_ADDR_VAR 0 4
28680: PUSH
28681: LD_VAR 0 1
28685: ST_TO_ADDR
// end ;
28686: LD_VAR 0 4
28690: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28691: LD_INT 0
28693: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28694: LD_ADDR_VAR 0 5
28698: PUSH
28699: LD_VAR 0 1
28703: PPUSH
28704: CALL_OW 250
28708: PPUSH
28709: LD_VAR 0 1
28713: PPUSH
28714: CALL_OW 251
28718: PPUSH
28719: LD_VAR 0 2
28723: PPUSH
28724: LD_VAR 0 3
28728: PPUSH
28729: LD_VAR 0 4
28733: PPUSH
28734: CALL 28744 0 5
28738: ST_TO_ADDR
// end ;
28739: LD_VAR 0 5
28743: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28744: LD_INT 0
28746: PPUSH
28747: PPUSH
28748: PPUSH
28749: PPUSH
// if not list then
28750: LD_VAR 0 3
28754: NOT
28755: IFFALSE 28759
// exit ;
28757: GO 29147
// result := [ ] ;
28759: LD_ADDR_VAR 0 6
28763: PUSH
28764: EMPTY
28765: ST_TO_ADDR
// for i in list do
28766: LD_ADDR_VAR 0 7
28770: PUSH
28771: LD_VAR 0 3
28775: PUSH
28776: FOR_IN
28777: IFFALSE 28979
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28779: LD_ADDR_VAR 0 9
28783: PUSH
28784: LD_VAR 0 7
28788: PPUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: LD_VAR 0 2
28798: PPUSH
28799: CALL_OW 297
28803: ST_TO_ADDR
// if not result then
28804: LD_VAR 0 6
28808: NOT
28809: IFFALSE 28835
// result := [ [ i , tmp ] ] else
28811: LD_ADDR_VAR 0 6
28815: PUSH
28816: LD_VAR 0 7
28820: PUSH
28821: LD_VAR 0 9
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: ST_TO_ADDR
28833: GO 28977
// begin if result [ result ] [ 2 ] < tmp then
28835: LD_VAR 0 6
28839: PUSH
28840: LD_VAR 0 6
28844: ARRAY
28845: PUSH
28846: LD_INT 2
28848: ARRAY
28849: PUSH
28850: LD_VAR 0 9
28854: LESS
28855: IFFALSE 28897
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28857: LD_ADDR_VAR 0 6
28861: PUSH
28862: LD_VAR 0 6
28866: PPUSH
28867: LD_VAR 0 6
28871: PUSH
28872: LD_INT 1
28874: PLUS
28875: PPUSH
28876: LD_VAR 0 7
28880: PUSH
28881: LD_VAR 0 9
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PPUSH
28890: CALL_OW 2
28894: ST_TO_ADDR
28895: GO 28977
// for j = 1 to result do
28897: LD_ADDR_VAR 0 8
28901: PUSH
28902: DOUBLE
28903: LD_INT 1
28905: DEC
28906: ST_TO_ADDR
28907: LD_VAR 0 6
28911: PUSH
28912: FOR_TO
28913: IFFALSE 28975
// begin if tmp < result [ j ] [ 2 ] then
28915: LD_VAR 0 9
28919: PUSH
28920: LD_VAR 0 6
28924: PUSH
28925: LD_VAR 0 8
28929: ARRAY
28930: PUSH
28931: LD_INT 2
28933: ARRAY
28934: LESS
28935: IFFALSE 28973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28937: LD_ADDR_VAR 0 6
28941: PUSH
28942: LD_VAR 0 6
28946: PPUSH
28947: LD_VAR 0 8
28951: PPUSH
28952: LD_VAR 0 7
28956: PUSH
28957: LD_VAR 0 9
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PPUSH
28966: CALL_OW 2
28970: ST_TO_ADDR
// break ;
28971: GO 28975
// end ; end ;
28973: GO 28912
28975: POP
28976: POP
// end ; end ;
28977: GO 28776
28979: POP
28980: POP
// if result and not asc then
28981: LD_VAR 0 6
28985: PUSH
28986: LD_VAR 0 4
28990: NOT
28991: AND
28992: IFFALSE 29067
// begin tmp := result ;
28994: LD_ADDR_VAR 0 9
28998: PUSH
28999: LD_VAR 0 6
29003: ST_TO_ADDR
// for i = tmp downto 1 do
29004: LD_ADDR_VAR 0 7
29008: PUSH
29009: DOUBLE
29010: LD_VAR 0 9
29014: INC
29015: ST_TO_ADDR
29016: LD_INT 1
29018: PUSH
29019: FOR_DOWNTO
29020: IFFALSE 29065
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29022: LD_ADDR_VAR 0 6
29026: PUSH
29027: LD_VAR 0 6
29031: PPUSH
29032: LD_VAR 0 9
29036: PUSH
29037: LD_VAR 0 7
29041: MINUS
29042: PUSH
29043: LD_INT 1
29045: PLUS
29046: PPUSH
29047: LD_VAR 0 9
29051: PUSH
29052: LD_VAR 0 7
29056: ARRAY
29057: PPUSH
29058: CALL_OW 1
29062: ST_TO_ADDR
29063: GO 29019
29065: POP
29066: POP
// end ; tmp := [ ] ;
29067: LD_ADDR_VAR 0 9
29071: PUSH
29072: EMPTY
29073: ST_TO_ADDR
// if mode then
29074: LD_VAR 0 5
29078: IFFALSE 29147
// begin for i = 1 to result do
29080: LD_ADDR_VAR 0 7
29084: PUSH
29085: DOUBLE
29086: LD_INT 1
29088: DEC
29089: ST_TO_ADDR
29090: LD_VAR 0 6
29094: PUSH
29095: FOR_TO
29096: IFFALSE 29135
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29098: LD_ADDR_VAR 0 9
29102: PUSH
29103: LD_VAR 0 9
29107: PPUSH
29108: LD_VAR 0 7
29112: PPUSH
29113: LD_VAR 0 6
29117: PUSH
29118: LD_VAR 0 7
29122: ARRAY
29123: PUSH
29124: LD_INT 1
29126: ARRAY
29127: PPUSH
29128: CALL_OW 1
29132: ST_TO_ADDR
29133: GO 29095
29135: POP
29136: POP
// result := tmp ;
29137: LD_ADDR_VAR 0 6
29141: PUSH
29142: LD_VAR 0 9
29146: ST_TO_ADDR
// end ; end ;
29147: LD_VAR 0 6
29151: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29152: LD_INT 0
29154: PPUSH
29155: PPUSH
29156: PPUSH
29157: PPUSH
29158: PPUSH
29159: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29160: LD_ADDR_VAR 0 5
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: EMPTY
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: ST_TO_ADDR
// if not x or not y then
29182: LD_VAR 0 2
29186: NOT
29187: PUSH
29188: LD_VAR 0 3
29192: NOT
29193: OR
29194: IFFALSE 29198
// exit ;
29196: GO 30850
// if not range then
29198: LD_VAR 0 4
29202: NOT
29203: IFFALSE 29213
// range := 10 ;
29205: LD_ADDR_VAR 0 4
29209: PUSH
29210: LD_INT 10
29212: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29213: LD_ADDR_VAR 0 8
29217: PUSH
29218: LD_INT 81
29220: PUSH
29221: LD_VAR 0 1
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 92
29232: PUSH
29233: LD_VAR 0 2
29237: PUSH
29238: LD_VAR 0 3
29242: PUSH
29243: LD_VAR 0 4
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 3
29256: PUSH
29257: LD_INT 21
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: PPUSH
29276: CALL_OW 69
29280: ST_TO_ADDR
// if not tmp then
29281: LD_VAR 0 8
29285: NOT
29286: IFFALSE 29290
// exit ;
29288: GO 30850
// for i in tmp do
29290: LD_ADDR_VAR 0 6
29294: PUSH
29295: LD_VAR 0 8
29299: PUSH
29300: FOR_IN
29301: IFFALSE 30825
// begin points := [ 0 , 0 , 0 ] ;
29303: LD_ADDR_VAR 0 9
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: ST_TO_ADDR
// bpoints := 1 ;
29322: LD_ADDR_VAR 0 10
29326: PUSH
29327: LD_INT 1
29329: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29330: LD_VAR 0 6
29334: PPUSH
29335: CALL_OW 247
29339: PUSH
29340: LD_INT 1
29342: DOUBLE
29343: EQUAL
29344: IFTRUE 29348
29346: GO 29926
29348: POP
// begin if GetClass ( i ) = 1 then
29349: LD_VAR 0 6
29353: PPUSH
29354: CALL_OW 257
29358: PUSH
29359: LD_INT 1
29361: EQUAL
29362: IFFALSE 29383
// points := [ 10 , 5 , 3 ] ;
29364: LD_ADDR_VAR 0 9
29368: PUSH
29369: LD_INT 10
29371: PUSH
29372: LD_INT 5
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29383: LD_VAR 0 6
29387: PPUSH
29388: CALL_OW 257
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: LD_INT 4
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: LIST
29406: IN
29407: IFFALSE 29428
// points := [ 3 , 2 , 1 ] ;
29409: LD_ADDR_VAR 0 9
29413: PUSH
29414: LD_INT 3
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29428: LD_VAR 0 6
29432: PPUSH
29433: CALL_OW 257
29437: PUSH
29438: LD_INT 5
29440: EQUAL
29441: IFFALSE 29462
// points := [ 130 , 5 , 2 ] ;
29443: LD_ADDR_VAR 0 9
29447: PUSH
29448: LD_INT 130
29450: PUSH
29451: LD_INT 5
29453: PUSH
29454: LD_INT 2
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29462: LD_VAR 0 6
29466: PPUSH
29467: CALL_OW 257
29471: PUSH
29472: LD_INT 8
29474: EQUAL
29475: IFFALSE 29496
// points := [ 35 , 35 , 30 ] ;
29477: LD_ADDR_VAR 0 9
29481: PUSH
29482: LD_INT 35
29484: PUSH
29485: LD_INT 35
29487: PUSH
29488: LD_INT 30
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29496: LD_VAR 0 6
29500: PPUSH
29501: CALL_OW 257
29505: PUSH
29506: LD_INT 9
29508: EQUAL
29509: IFFALSE 29530
// points := [ 20 , 55 , 40 ] ;
29511: LD_ADDR_VAR 0 9
29515: PUSH
29516: LD_INT 20
29518: PUSH
29519: LD_INT 55
29521: PUSH
29522: LD_INT 40
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: LIST
29529: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29530: LD_VAR 0 6
29534: PPUSH
29535: CALL_OW 257
29539: PUSH
29540: LD_INT 12
29542: PUSH
29543: LD_INT 16
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: IN
29550: IFFALSE 29571
// points := [ 5 , 3 , 2 ] ;
29552: LD_ADDR_VAR 0 9
29556: PUSH
29557: LD_INT 5
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: LIST
29570: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29571: LD_VAR 0 6
29575: PPUSH
29576: CALL_OW 257
29580: PUSH
29581: LD_INT 17
29583: EQUAL
29584: IFFALSE 29605
// points := [ 100 , 50 , 75 ] ;
29586: LD_ADDR_VAR 0 9
29590: PUSH
29591: LD_INT 100
29593: PUSH
29594: LD_INT 50
29596: PUSH
29597: LD_INT 75
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: LIST
29604: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29605: LD_VAR 0 6
29609: PPUSH
29610: CALL_OW 257
29614: PUSH
29615: LD_INT 15
29617: EQUAL
29618: IFFALSE 29639
// points := [ 10 , 5 , 3 ] ;
29620: LD_ADDR_VAR 0 9
29624: PUSH
29625: LD_INT 10
29627: PUSH
29628: LD_INT 5
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29639: LD_VAR 0 6
29643: PPUSH
29644: CALL_OW 257
29648: PUSH
29649: LD_INT 14
29651: EQUAL
29652: IFFALSE 29673
// points := [ 10 , 0 , 0 ] ;
29654: LD_ADDR_VAR 0 9
29658: PUSH
29659: LD_INT 10
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 0
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29673: LD_VAR 0 6
29677: PPUSH
29678: CALL_OW 257
29682: PUSH
29683: LD_INT 11
29685: EQUAL
29686: IFFALSE 29707
// points := [ 30 , 10 , 5 ] ;
29688: LD_ADDR_VAR 0 9
29692: PUSH
29693: LD_INT 30
29695: PUSH
29696: LD_INT 10
29698: PUSH
29699: LD_INT 5
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29707: LD_VAR 0 1
29711: PPUSH
29712: LD_INT 5
29714: PPUSH
29715: CALL_OW 321
29719: PUSH
29720: LD_INT 2
29722: EQUAL
29723: IFFALSE 29740
// bpoints := bpoints * 1.8 ;
29725: LD_ADDR_VAR 0 10
29729: PUSH
29730: LD_VAR 0 10
29734: PUSH
29735: LD_REAL  1.80000000000000E+0000
29738: MUL
29739: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29740: LD_VAR 0 6
29744: PPUSH
29745: CALL_OW 257
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: LD_INT 4
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: IN
29768: PUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: LD_INT 51
29776: PPUSH
29777: CALL_OW 321
29781: PUSH
29782: LD_INT 2
29784: EQUAL
29785: AND
29786: IFFALSE 29803
// bpoints := bpoints * 1.2 ;
29788: LD_ADDR_VAR 0 10
29792: PUSH
29793: LD_VAR 0 10
29797: PUSH
29798: LD_REAL  1.20000000000000E+0000
29801: MUL
29802: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29803: LD_VAR 0 6
29807: PPUSH
29808: CALL_OW 257
29812: PUSH
29813: LD_INT 5
29815: PUSH
29816: LD_INT 7
29818: PUSH
29819: LD_INT 9
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: IN
29827: PUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: LD_INT 52
29835: PPUSH
29836: CALL_OW 321
29840: PUSH
29841: LD_INT 2
29843: EQUAL
29844: AND
29845: IFFALSE 29862
// bpoints := bpoints * 1.5 ;
29847: LD_ADDR_VAR 0 10
29851: PUSH
29852: LD_VAR 0 10
29856: PUSH
29857: LD_REAL  1.50000000000000E+0000
29860: MUL
29861: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29862: LD_VAR 0 1
29866: PPUSH
29867: LD_INT 66
29869: PPUSH
29870: CALL_OW 321
29874: PUSH
29875: LD_INT 2
29877: EQUAL
29878: IFFALSE 29895
// bpoints := bpoints * 1.1 ;
29880: LD_ADDR_VAR 0 10
29884: PUSH
29885: LD_VAR 0 10
29889: PUSH
29890: LD_REAL  1.10000000000000E+0000
29893: MUL
29894: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29895: LD_ADDR_VAR 0 10
29899: PUSH
29900: LD_VAR 0 10
29904: PUSH
29905: LD_VAR 0 6
29909: PPUSH
29910: LD_INT 1
29912: PPUSH
29913: CALL_OW 259
29917: PUSH
29918: LD_REAL  1.15000000000000E+0000
29921: MUL
29922: MUL
29923: ST_TO_ADDR
// end ; unit_vehicle :
29924: GO 30754
29926: LD_INT 2
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 30742
29934: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29935: LD_VAR 0 6
29939: PPUSH
29940: CALL_OW 264
29944: PUSH
29945: LD_INT 2
29947: PUSH
29948: LD_INT 42
29950: PUSH
29951: LD_INT 24
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: LIST
29958: IN
29959: IFFALSE 29980
// points := [ 25 , 5 , 3 ] ;
29961: LD_ADDR_VAR 0 9
29965: PUSH
29966: LD_INT 25
29968: PUSH
29969: LD_INT 5
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29980: LD_VAR 0 6
29984: PPUSH
29985: CALL_OW 264
29989: PUSH
29990: LD_INT 4
29992: PUSH
29993: LD_INT 43
29995: PUSH
29996: LD_INT 25
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: IN
30004: IFFALSE 30025
// points := [ 40 , 15 , 5 ] ;
30006: LD_ADDR_VAR 0 9
30010: PUSH
30011: LD_INT 40
30013: PUSH
30014: LD_INT 15
30016: PUSH
30017: LD_INT 5
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: LIST
30024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30025: LD_VAR 0 6
30029: PPUSH
30030: CALL_OW 264
30034: PUSH
30035: LD_INT 3
30037: PUSH
30038: LD_INT 23
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: IN
30045: IFFALSE 30066
// points := [ 7 , 25 , 8 ] ;
30047: LD_ADDR_VAR 0 9
30051: PUSH
30052: LD_INT 7
30054: PUSH
30055: LD_INT 25
30057: PUSH
30058: LD_INT 8
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30066: LD_VAR 0 6
30070: PPUSH
30071: CALL_OW 264
30075: PUSH
30076: LD_INT 5
30078: PUSH
30079: LD_INT 27
30081: PUSH
30082: LD_INT 44
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: IN
30090: IFFALSE 30111
// points := [ 14 , 50 , 16 ] ;
30092: LD_ADDR_VAR 0 9
30096: PUSH
30097: LD_INT 14
30099: PUSH
30100: LD_INT 50
30102: PUSH
30103: LD_INT 16
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30111: LD_VAR 0 6
30115: PPUSH
30116: CALL_OW 264
30120: PUSH
30121: LD_INT 6
30123: PUSH
30124: LD_INT 46
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: IN
30131: IFFALSE 30152
// points := [ 32 , 120 , 70 ] ;
30133: LD_ADDR_VAR 0 9
30137: PUSH
30138: LD_INT 32
30140: PUSH
30141: LD_INT 120
30143: PUSH
30144: LD_INT 70
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30152: LD_VAR 0 6
30156: PPUSH
30157: CALL_OW 264
30161: PUSH
30162: LD_INT 7
30164: PUSH
30165: LD_INT 28
30167: PUSH
30168: LD_INT 45
30170: PUSH
30171: LD_EXP 44
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: IN
30182: IFFALSE 30203
// points := [ 35 , 20 , 45 ] ;
30184: LD_ADDR_VAR 0 9
30188: PUSH
30189: LD_INT 35
30191: PUSH
30192: LD_INT 20
30194: PUSH
30195: LD_INT 45
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30203: LD_VAR 0 6
30207: PPUSH
30208: CALL_OW 264
30212: PUSH
30213: LD_INT 47
30215: PUSH
30216: EMPTY
30217: LIST
30218: IN
30219: IFFALSE 30240
// points := [ 67 , 45 , 75 ] ;
30221: LD_ADDR_VAR 0 9
30225: PUSH
30226: LD_INT 67
30228: PUSH
30229: LD_INT 45
30231: PUSH
30232: LD_INT 75
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30240: LD_VAR 0 6
30244: PPUSH
30245: CALL_OW 264
30249: PUSH
30250: LD_INT 26
30252: PUSH
30253: EMPTY
30254: LIST
30255: IN
30256: IFFALSE 30277
// points := [ 120 , 30 , 80 ] ;
30258: LD_ADDR_VAR 0 9
30262: PUSH
30263: LD_INT 120
30265: PUSH
30266: LD_INT 30
30268: PUSH
30269: LD_INT 80
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30277: LD_VAR 0 6
30281: PPUSH
30282: CALL_OW 264
30286: PUSH
30287: LD_INT 22
30289: PUSH
30290: EMPTY
30291: LIST
30292: IN
30293: IFFALSE 30314
// points := [ 40 , 1 , 1 ] ;
30295: LD_ADDR_VAR 0 9
30299: PUSH
30300: LD_INT 40
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30314: LD_VAR 0 6
30318: PPUSH
30319: CALL_OW 264
30323: PUSH
30324: LD_INT 29
30326: PUSH
30327: EMPTY
30328: LIST
30329: IN
30330: IFFALSE 30351
// points := [ 70 , 200 , 400 ] ;
30332: LD_ADDR_VAR 0 9
30336: PUSH
30337: LD_INT 70
30339: PUSH
30340: LD_INT 200
30342: PUSH
30343: LD_INT 400
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30351: LD_VAR 0 6
30355: PPUSH
30356: CALL_OW 264
30360: PUSH
30361: LD_INT 14
30363: PUSH
30364: LD_INT 53
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: IN
30371: IFFALSE 30392
// points := [ 40 , 10 , 20 ] ;
30373: LD_ADDR_VAR 0 9
30377: PUSH
30378: LD_INT 40
30380: PUSH
30381: LD_INT 10
30383: PUSH
30384: LD_INT 20
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30392: LD_VAR 0 6
30396: PPUSH
30397: CALL_OW 264
30401: PUSH
30402: LD_INT 9
30404: PUSH
30405: EMPTY
30406: LIST
30407: IN
30408: IFFALSE 30429
// points := [ 5 , 70 , 20 ] ;
30410: LD_ADDR_VAR 0 9
30414: PUSH
30415: LD_INT 5
30417: PUSH
30418: LD_INT 70
30420: PUSH
30421: LD_INT 20
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: LIST
30428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30429: LD_VAR 0 6
30433: PPUSH
30434: CALL_OW 264
30438: PUSH
30439: LD_INT 10
30441: PUSH
30442: EMPTY
30443: LIST
30444: IN
30445: IFFALSE 30466
// points := [ 35 , 110 , 70 ] ;
30447: LD_ADDR_VAR 0 9
30451: PUSH
30452: LD_INT 35
30454: PUSH
30455: LD_INT 110
30457: PUSH
30458: LD_INT 70
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30466: LD_VAR 0 6
30470: PPUSH
30471: CALL_OW 265
30475: PUSH
30476: LD_INT 25
30478: EQUAL
30479: IFFALSE 30500
// points := [ 80 , 65 , 100 ] ;
30481: LD_ADDR_VAR 0 9
30485: PUSH
30486: LD_INT 80
30488: PUSH
30489: LD_INT 65
30491: PUSH
30492: LD_INT 100
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30500: LD_VAR 0 6
30504: PPUSH
30505: CALL_OW 263
30509: PUSH
30510: LD_INT 1
30512: EQUAL
30513: IFFALSE 30548
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30515: LD_ADDR_VAR 0 10
30519: PUSH
30520: LD_VAR 0 10
30524: PUSH
30525: LD_VAR 0 6
30529: PPUSH
30530: CALL_OW 311
30534: PPUSH
30535: LD_INT 3
30537: PPUSH
30538: CALL_OW 259
30542: PUSH
30543: LD_INT 4
30545: MUL
30546: MUL
30547: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30548: LD_VAR 0 6
30552: PPUSH
30553: CALL_OW 263
30557: PUSH
30558: LD_INT 2
30560: EQUAL
30561: IFFALSE 30612
// begin j := IsControledBy ( i ) ;
30563: LD_ADDR_VAR 0 7
30567: PUSH
30568: LD_VAR 0 6
30572: PPUSH
30573: CALL_OW 312
30577: ST_TO_ADDR
// if j then
30578: LD_VAR 0 7
30582: IFFALSE 30612
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30584: LD_ADDR_VAR 0 10
30588: PUSH
30589: LD_VAR 0 10
30593: PUSH
30594: LD_VAR 0 7
30598: PPUSH
30599: LD_INT 3
30601: PPUSH
30602: CALL_OW 259
30606: PUSH
30607: LD_INT 3
30609: MUL
30610: MUL
30611: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30612: LD_VAR 0 6
30616: PPUSH
30617: CALL_OW 264
30621: PUSH
30622: LD_INT 5
30624: PUSH
30625: LD_INT 6
30627: PUSH
30628: LD_INT 46
30630: PUSH
30631: LD_INT 44
30633: PUSH
30634: LD_INT 47
30636: PUSH
30637: LD_INT 45
30639: PUSH
30640: LD_INT 28
30642: PUSH
30643: LD_INT 7
30645: PUSH
30646: LD_INT 27
30648: PUSH
30649: LD_INT 29
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: IN
30664: PUSH
30665: LD_VAR 0 1
30669: PPUSH
30670: LD_INT 52
30672: PPUSH
30673: CALL_OW 321
30677: PUSH
30678: LD_INT 2
30680: EQUAL
30681: AND
30682: IFFALSE 30699
// bpoints := bpoints * 1.2 ;
30684: LD_ADDR_VAR 0 10
30688: PUSH
30689: LD_VAR 0 10
30693: PUSH
30694: LD_REAL  1.20000000000000E+0000
30697: MUL
30698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30699: LD_VAR 0 6
30703: PPUSH
30704: CALL_OW 264
30708: PUSH
30709: LD_INT 6
30711: PUSH
30712: LD_INT 46
30714: PUSH
30715: LD_INT 47
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: IN
30723: IFFALSE 30740
// bpoints := bpoints * 1.2 ;
30725: LD_ADDR_VAR 0 10
30729: PUSH
30730: LD_VAR 0 10
30734: PUSH
30735: LD_REAL  1.20000000000000E+0000
30738: MUL
30739: ST_TO_ADDR
// end ; unit_building :
30740: GO 30754
30742: LD_INT 3
30744: DOUBLE
30745: EQUAL
30746: IFTRUE 30750
30748: GO 30753
30750: POP
// ; end ;
30751: GO 30754
30753: POP
// for j = 1 to 3 do
30754: LD_ADDR_VAR 0 7
30758: PUSH
30759: DOUBLE
30760: LD_INT 1
30762: DEC
30763: ST_TO_ADDR
30764: LD_INT 3
30766: PUSH
30767: FOR_TO
30768: IFFALSE 30821
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30770: LD_ADDR_VAR 0 5
30774: PUSH
30775: LD_VAR 0 5
30779: PPUSH
30780: LD_VAR 0 7
30784: PPUSH
30785: LD_VAR 0 5
30789: PUSH
30790: LD_VAR 0 7
30794: ARRAY
30795: PUSH
30796: LD_VAR 0 9
30800: PUSH
30801: LD_VAR 0 7
30805: ARRAY
30806: PUSH
30807: LD_VAR 0 10
30811: MUL
30812: PLUS
30813: PPUSH
30814: CALL_OW 1
30818: ST_TO_ADDR
30819: GO 30767
30821: POP
30822: POP
// end ;
30823: GO 29300
30825: POP
30826: POP
// result := Replace ( result , 4 , tmp ) ;
30827: LD_ADDR_VAR 0 5
30831: PUSH
30832: LD_VAR 0 5
30836: PPUSH
30837: LD_INT 4
30839: PPUSH
30840: LD_VAR 0 8
30844: PPUSH
30845: CALL_OW 1
30849: ST_TO_ADDR
// end ;
30850: LD_VAR 0 5
30854: RET
// export function DangerAtRange ( unit , range ) ; begin
30855: LD_INT 0
30857: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30858: LD_ADDR_VAR 0 3
30862: PUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: CALL_OW 255
30872: PPUSH
30873: LD_VAR 0 1
30877: PPUSH
30878: CALL_OW 250
30882: PPUSH
30883: LD_VAR 0 1
30887: PPUSH
30888: CALL_OW 251
30892: PPUSH
30893: LD_VAR 0 2
30897: PPUSH
30898: CALL 29152 0 4
30902: ST_TO_ADDR
// end ;
30903: LD_VAR 0 3
30907: RET
// export function DangerInArea ( side , area ) ; begin
30908: LD_INT 0
30910: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30911: LD_ADDR_VAR 0 3
30915: PUSH
30916: LD_VAR 0 2
30920: PPUSH
30921: LD_INT 81
30923: PUSH
30924: LD_VAR 0 1
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PPUSH
30933: CALL_OW 70
30937: ST_TO_ADDR
// end ;
30938: LD_VAR 0 3
30942: RET
// export function IsExtension ( b ) ; begin
30943: LD_INT 0
30945: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30946: LD_ADDR_VAR 0 2
30950: PUSH
30951: LD_VAR 0 1
30955: PUSH
30956: LD_INT 23
30958: PUSH
30959: LD_INT 20
30961: PUSH
30962: LD_INT 22
30964: PUSH
30965: LD_INT 17
30967: PUSH
30968: LD_INT 24
30970: PUSH
30971: LD_INT 21
30973: PUSH
30974: LD_INT 19
30976: PUSH
30977: LD_INT 16
30979: PUSH
30980: LD_INT 25
30982: PUSH
30983: LD_INT 18
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: IN
30998: ST_TO_ADDR
// end ;
30999: LD_VAR 0 2
31003: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31004: LD_INT 0
31006: PPUSH
31007: PPUSH
31008: PPUSH
// result := [ ] ;
31009: LD_ADDR_VAR 0 4
31013: PUSH
31014: EMPTY
31015: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31016: LD_ADDR_VAR 0 5
31020: PUSH
31021: LD_VAR 0 2
31025: PPUSH
31026: LD_INT 21
31028: PUSH
31029: LD_INT 3
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PPUSH
31036: CALL_OW 70
31040: ST_TO_ADDR
// if not tmp then
31041: LD_VAR 0 5
31045: NOT
31046: IFFALSE 31050
// exit ;
31048: GO 31114
// if checkLink then
31050: LD_VAR 0 3
31054: IFFALSE 31104
// begin for i in tmp do
31056: LD_ADDR_VAR 0 6
31060: PUSH
31061: LD_VAR 0 5
31065: PUSH
31066: FOR_IN
31067: IFFALSE 31102
// if GetBase ( i ) <> base then
31069: LD_VAR 0 6
31073: PPUSH
31074: CALL_OW 274
31078: PUSH
31079: LD_VAR 0 1
31083: NONEQUAL
31084: IFFALSE 31100
// ComLinkToBase ( base , i ) ;
31086: LD_VAR 0 1
31090: PPUSH
31091: LD_VAR 0 6
31095: PPUSH
31096: CALL_OW 169
31100: GO 31066
31102: POP
31103: POP
// end ; result := tmp ;
31104: LD_ADDR_VAR 0 4
31108: PUSH
31109: LD_VAR 0 5
31113: ST_TO_ADDR
// end ;
31114: LD_VAR 0 4
31118: RET
// export function ComComplete ( units , b ) ; var i ; begin
31119: LD_INT 0
31121: PPUSH
31122: PPUSH
// if not units then
31123: LD_VAR 0 1
31127: NOT
31128: IFFALSE 31132
// exit ;
31130: GO 31222
// for i in units do
31132: LD_ADDR_VAR 0 4
31136: PUSH
31137: LD_VAR 0 1
31141: PUSH
31142: FOR_IN
31143: IFFALSE 31220
// if BuildingStatus ( b ) = bs_build then
31145: LD_VAR 0 2
31149: PPUSH
31150: CALL_OW 461
31154: PUSH
31155: LD_INT 1
31157: EQUAL
31158: IFFALSE 31218
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31160: LD_VAR 0 4
31164: PPUSH
31165: LD_STRING h
31167: PUSH
31168: LD_VAR 0 2
31172: PPUSH
31173: CALL_OW 250
31177: PUSH
31178: LD_VAR 0 2
31182: PPUSH
31183: CALL_OW 251
31187: PUSH
31188: LD_VAR 0 2
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: PPUSH
31214: CALL_OW 446
31218: GO 31142
31220: POP
31221: POP
// end ;
31222: LD_VAR 0 3
31226: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31227: LD_INT 0
31229: PPUSH
31230: PPUSH
31231: PPUSH
31232: PPUSH
31233: PPUSH
31234: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31235: LD_VAR 0 1
31239: NOT
31240: PUSH
31241: LD_VAR 0 1
31245: PPUSH
31246: CALL_OW 263
31250: PUSH
31251: LD_INT 2
31253: NONEQUAL
31254: OR
31255: IFFALSE 31259
// exit ;
31257: GO 31575
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31259: LD_ADDR_VAR 0 6
31263: PUSH
31264: LD_INT 22
31266: PUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: CALL_OW 255
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: LD_INT 30
31286: PUSH
31287: LD_INT 36
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 34
31296: PUSH
31297: LD_INT 31
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: LIST
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PPUSH
31313: CALL_OW 69
31317: ST_TO_ADDR
// if not tmp then
31318: LD_VAR 0 6
31322: NOT
31323: IFFALSE 31327
// exit ;
31325: GO 31575
// result := [ ] ;
31327: LD_ADDR_VAR 0 2
31331: PUSH
31332: EMPTY
31333: ST_TO_ADDR
// for i in tmp do
31334: LD_ADDR_VAR 0 3
31338: PUSH
31339: LD_VAR 0 6
31343: PUSH
31344: FOR_IN
31345: IFFALSE 31416
// begin t := UnitsInside ( i ) ;
31347: LD_ADDR_VAR 0 4
31351: PUSH
31352: LD_VAR 0 3
31356: PPUSH
31357: CALL_OW 313
31361: ST_TO_ADDR
// if t then
31362: LD_VAR 0 4
31366: IFFALSE 31414
// for j in t do
31368: LD_ADDR_VAR 0 7
31372: PUSH
31373: LD_VAR 0 4
31377: PUSH
31378: FOR_IN
31379: IFFALSE 31412
// result := Replace ( result , result + 1 , j ) ;
31381: LD_ADDR_VAR 0 2
31385: PUSH
31386: LD_VAR 0 2
31390: PPUSH
31391: LD_VAR 0 2
31395: PUSH
31396: LD_INT 1
31398: PLUS
31399: PPUSH
31400: LD_VAR 0 7
31404: PPUSH
31405: CALL_OW 1
31409: ST_TO_ADDR
31410: GO 31378
31412: POP
31413: POP
// end ;
31414: GO 31344
31416: POP
31417: POP
// if not result then
31418: LD_VAR 0 2
31422: NOT
31423: IFFALSE 31427
// exit ;
31425: GO 31575
// mech := result [ 1 ] ;
31427: LD_ADDR_VAR 0 5
31431: PUSH
31432: LD_VAR 0 2
31436: PUSH
31437: LD_INT 1
31439: ARRAY
31440: ST_TO_ADDR
// if result > 1 then
31441: LD_VAR 0 2
31445: PUSH
31446: LD_INT 1
31448: GREATER
31449: IFFALSE 31561
// begin for i = 2 to result do
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: DOUBLE
31457: LD_INT 2
31459: DEC
31460: ST_TO_ADDR
31461: LD_VAR 0 2
31465: PUSH
31466: FOR_TO
31467: IFFALSE 31559
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31469: LD_ADDR_VAR 0 4
31473: PUSH
31474: LD_VAR 0 2
31478: PUSH
31479: LD_VAR 0 3
31483: ARRAY
31484: PPUSH
31485: LD_INT 3
31487: PPUSH
31488: CALL_OW 259
31492: PUSH
31493: LD_VAR 0 2
31497: PUSH
31498: LD_VAR 0 3
31502: ARRAY
31503: PPUSH
31504: CALL_OW 432
31508: MINUS
31509: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31510: LD_VAR 0 4
31514: PUSH
31515: LD_VAR 0 5
31519: PPUSH
31520: LD_INT 3
31522: PPUSH
31523: CALL_OW 259
31527: PUSH
31528: LD_VAR 0 5
31532: PPUSH
31533: CALL_OW 432
31537: MINUS
31538: GREATEREQUAL
31539: IFFALSE 31557
// mech := result [ i ] ;
31541: LD_ADDR_VAR 0 5
31545: PUSH
31546: LD_VAR 0 2
31550: PUSH
31551: LD_VAR 0 3
31555: ARRAY
31556: ST_TO_ADDR
// end ;
31557: GO 31466
31559: POP
31560: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31561: LD_VAR 0 1
31565: PPUSH
31566: LD_VAR 0 5
31570: PPUSH
31571: CALL_OW 135
// end ;
31575: LD_VAR 0 2
31579: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31580: LD_INT 0
31582: PPUSH
31583: PPUSH
31584: PPUSH
31585: PPUSH
31586: PPUSH
31587: PPUSH
31588: PPUSH
31589: PPUSH
31590: PPUSH
31591: PPUSH
31592: PPUSH
31593: PPUSH
31594: PPUSH
// result := [ ] ;
31595: LD_ADDR_VAR 0 7
31599: PUSH
31600: EMPTY
31601: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 266
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: IN
31622: NOT
31623: IFFALSE 31627
// exit ;
31625: GO 33261
// if name then
31627: LD_VAR 0 3
31631: IFFALSE 31647
// SetBName ( base_dep , name ) ;
31633: LD_VAR 0 1
31637: PPUSH
31638: LD_VAR 0 3
31642: PPUSH
31643: CALL_OW 500
// base := GetBase ( base_dep ) ;
31647: LD_ADDR_VAR 0 15
31651: PUSH
31652: LD_VAR 0 1
31656: PPUSH
31657: CALL_OW 274
31661: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31662: LD_ADDR_VAR 0 16
31666: PUSH
31667: LD_VAR 0 1
31671: PPUSH
31672: CALL_OW 255
31676: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31677: LD_ADDR_VAR 0 17
31681: PUSH
31682: LD_VAR 0 1
31686: PPUSH
31687: CALL_OW 248
31691: ST_TO_ADDR
// if sources then
31692: LD_VAR 0 5
31696: IFFALSE 31743
// for i = 1 to 3 do
31698: LD_ADDR_VAR 0 8
31702: PUSH
31703: DOUBLE
31704: LD_INT 1
31706: DEC
31707: ST_TO_ADDR
31708: LD_INT 3
31710: PUSH
31711: FOR_TO
31712: IFFALSE 31741
// AddResourceType ( base , i , sources [ i ] ) ;
31714: LD_VAR 0 15
31718: PPUSH
31719: LD_VAR 0 8
31723: PPUSH
31724: LD_VAR 0 5
31728: PUSH
31729: LD_VAR 0 8
31733: ARRAY
31734: PPUSH
31735: CALL_OW 276
31739: GO 31711
31741: POP
31742: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31743: LD_ADDR_VAR 0 18
31747: PUSH
31748: LD_VAR 0 15
31752: PPUSH
31753: LD_VAR 0 2
31757: PPUSH
31758: LD_INT 1
31760: PPUSH
31761: CALL 31004 0 3
31765: ST_TO_ADDR
// InitHc ;
31766: CALL_OW 19
// InitUc ;
31770: CALL_OW 18
// uc_side := side ;
31774: LD_ADDR_OWVAR 20
31778: PUSH
31779: LD_VAR 0 16
31783: ST_TO_ADDR
// uc_nation := nation ;
31784: LD_ADDR_OWVAR 21
31788: PUSH
31789: LD_VAR 0 17
31793: ST_TO_ADDR
// if buildings then
31794: LD_VAR 0 18
31798: IFFALSE 33120
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31800: LD_ADDR_VAR 0 19
31804: PUSH
31805: LD_VAR 0 18
31809: PPUSH
31810: LD_INT 2
31812: PUSH
31813: LD_INT 30
31815: PUSH
31816: LD_INT 29
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 30
31825: PUSH
31826: LD_INT 30
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: PPUSH
31838: CALL_OW 72
31842: ST_TO_ADDR
// if tmp then
31843: LD_VAR 0 19
31847: IFFALSE 31895
// for i in tmp do
31849: LD_ADDR_VAR 0 8
31853: PUSH
31854: LD_VAR 0 19
31858: PUSH
31859: FOR_IN
31860: IFFALSE 31893
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31862: LD_VAR 0 8
31866: PPUSH
31867: CALL_OW 250
31871: PPUSH
31872: LD_VAR 0 8
31876: PPUSH
31877: CALL_OW 251
31881: PPUSH
31882: LD_VAR 0 16
31886: PPUSH
31887: CALL_OW 441
31891: GO 31859
31893: POP
31894: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31895: LD_VAR 0 18
31899: PPUSH
31900: LD_INT 2
31902: PUSH
31903: LD_INT 30
31905: PUSH
31906: LD_INT 32
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 30
31915: PUSH
31916: LD_INT 33
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: PPUSH
31928: CALL_OW 72
31932: IFFALSE 32020
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31934: LD_ADDR_VAR 0 8
31938: PUSH
31939: LD_VAR 0 18
31943: PPUSH
31944: LD_INT 2
31946: PUSH
31947: LD_INT 30
31949: PUSH
31950: LD_INT 32
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 30
31959: PUSH
31960: LD_INT 33
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: PPUSH
31972: CALL_OW 72
31976: PUSH
31977: FOR_IN
31978: IFFALSE 32018
// begin if not GetBWeapon ( i ) then
31980: LD_VAR 0 8
31984: PPUSH
31985: CALL_OW 269
31989: NOT
31990: IFFALSE 32016
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31992: LD_VAR 0 8
31996: PPUSH
31997: LD_VAR 0 8
32001: PPUSH
32002: LD_VAR 0 2
32006: PPUSH
32007: CALL 33266 0 2
32011: PPUSH
32012: CALL_OW 431
// end ;
32016: GO 31977
32018: POP
32019: POP
// end ; for i = 1 to personel do
32020: LD_ADDR_VAR 0 8
32024: PUSH
32025: DOUBLE
32026: LD_INT 1
32028: DEC
32029: ST_TO_ADDR
32030: LD_VAR 0 6
32034: PUSH
32035: FOR_TO
32036: IFFALSE 33100
// begin if i > 4 then
32038: LD_VAR 0 8
32042: PUSH
32043: LD_INT 4
32045: GREATER
32046: IFFALSE 32050
// break ;
32048: GO 33100
// case i of 1 :
32050: LD_VAR 0 8
32054: PUSH
32055: LD_INT 1
32057: DOUBLE
32058: EQUAL
32059: IFTRUE 32063
32061: GO 32143
32063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32064: LD_ADDR_VAR 0 12
32068: PUSH
32069: LD_VAR 0 18
32073: PPUSH
32074: LD_INT 22
32076: PUSH
32077: LD_VAR 0 16
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 58
32088: PUSH
32089: EMPTY
32090: LIST
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: LD_INT 30
32097: PUSH
32098: LD_INT 32
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 30
32107: PUSH
32108: LD_INT 4
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 30
32117: PUSH
32118: LD_INT 5
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: PPUSH
32136: CALL_OW 72
32140: ST_TO_ADDR
32141: GO 32365
32143: LD_INT 2
32145: DOUBLE
32146: EQUAL
32147: IFTRUE 32151
32149: GO 32213
32151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32152: LD_ADDR_VAR 0 12
32156: PUSH
32157: LD_VAR 0 18
32161: PPUSH
32162: LD_INT 22
32164: PUSH
32165: LD_VAR 0 16
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: LD_INT 30
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 30
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: LIST
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PPUSH
32206: CALL_OW 72
32210: ST_TO_ADDR
32211: GO 32365
32213: LD_INT 3
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32283
32221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32222: LD_ADDR_VAR 0 12
32226: PUSH
32227: LD_VAR 0 18
32231: PPUSH
32232: LD_INT 22
32234: PUSH
32235: LD_VAR 0 16
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: LD_INT 30
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 30
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PPUSH
32276: CALL_OW 72
32280: ST_TO_ADDR
32281: GO 32365
32283: LD_INT 4
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32291
32289: GO 32364
32291: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32292: LD_ADDR_VAR 0 12
32296: PUSH
32297: LD_VAR 0 18
32301: PPUSH
32302: LD_INT 22
32304: PUSH
32305: LD_VAR 0 16
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 30
32319: PUSH
32320: LD_INT 6
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 30
32329: PUSH
32330: LD_INT 7
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 30
32339: PUSH
32340: LD_INT 8
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PPUSH
32357: CALL_OW 72
32361: ST_TO_ADDR
32362: GO 32365
32364: POP
// if i = 1 then
32365: LD_VAR 0 8
32369: PUSH
32370: LD_INT 1
32372: EQUAL
32373: IFFALSE 32484
// begin tmp := [ ] ;
32375: LD_ADDR_VAR 0 19
32379: PUSH
32380: EMPTY
32381: ST_TO_ADDR
// for j in f do
32382: LD_ADDR_VAR 0 9
32386: PUSH
32387: LD_VAR 0 12
32391: PUSH
32392: FOR_IN
32393: IFFALSE 32466
// if GetBType ( j ) = b_bunker then
32395: LD_VAR 0 9
32399: PPUSH
32400: CALL_OW 266
32404: PUSH
32405: LD_INT 32
32407: EQUAL
32408: IFFALSE 32435
// tmp := Insert ( tmp , 1 , j ) else
32410: LD_ADDR_VAR 0 19
32414: PUSH
32415: LD_VAR 0 19
32419: PPUSH
32420: LD_INT 1
32422: PPUSH
32423: LD_VAR 0 9
32427: PPUSH
32428: CALL_OW 2
32432: ST_TO_ADDR
32433: GO 32464
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32435: LD_ADDR_VAR 0 19
32439: PUSH
32440: LD_VAR 0 19
32444: PPUSH
32445: LD_VAR 0 19
32449: PUSH
32450: LD_INT 1
32452: PLUS
32453: PPUSH
32454: LD_VAR 0 9
32458: PPUSH
32459: CALL_OW 2
32463: ST_TO_ADDR
32464: GO 32392
32466: POP
32467: POP
// if tmp then
32468: LD_VAR 0 19
32472: IFFALSE 32484
// f := tmp ;
32474: LD_ADDR_VAR 0 12
32478: PUSH
32479: LD_VAR 0 19
32483: ST_TO_ADDR
// end ; x := personel [ i ] ;
32484: LD_ADDR_VAR 0 13
32488: PUSH
32489: LD_VAR 0 6
32493: PUSH
32494: LD_VAR 0 8
32498: ARRAY
32499: ST_TO_ADDR
// if x = - 1 then
32500: LD_VAR 0 13
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: EQUAL
32509: IFFALSE 32718
// begin for j in f do
32511: LD_ADDR_VAR 0 9
32515: PUSH
32516: LD_VAR 0 12
32520: PUSH
32521: FOR_IN
32522: IFFALSE 32714
// repeat InitHc ;
32524: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32528: LD_VAR 0 9
32532: PPUSH
32533: CALL_OW 266
32537: PUSH
32538: LD_INT 5
32540: EQUAL
32541: IFFALSE 32611
// begin if UnitsInside ( j ) < 3 then
32543: LD_VAR 0 9
32547: PPUSH
32548: CALL_OW 313
32552: PUSH
32553: LD_INT 3
32555: LESS
32556: IFFALSE 32592
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32558: LD_INT 0
32560: PPUSH
32561: LD_INT 5
32563: PUSH
32564: LD_INT 8
32566: PUSH
32567: LD_INT 9
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: PUSH
32575: LD_VAR 0 17
32579: ARRAY
32580: PPUSH
32581: LD_VAR 0 4
32585: PPUSH
32586: CALL_OW 380
32590: GO 32609
// PrepareHuman ( false , i , skill ) ;
32592: LD_INT 0
32594: PPUSH
32595: LD_VAR 0 8
32599: PPUSH
32600: LD_VAR 0 4
32604: PPUSH
32605: CALL_OW 380
// end else
32609: GO 32628
// PrepareHuman ( false , i , skill ) ;
32611: LD_INT 0
32613: PPUSH
32614: LD_VAR 0 8
32618: PPUSH
32619: LD_VAR 0 4
32623: PPUSH
32624: CALL_OW 380
// un := CreateHuman ;
32628: LD_ADDR_VAR 0 14
32632: PUSH
32633: CALL_OW 44
32637: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32638: LD_ADDR_VAR 0 7
32642: PUSH
32643: LD_VAR 0 7
32647: PPUSH
32648: LD_INT 1
32650: PPUSH
32651: LD_VAR 0 14
32655: PPUSH
32656: CALL_OW 2
32660: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32661: LD_VAR 0 14
32665: PPUSH
32666: LD_VAR 0 9
32670: PPUSH
32671: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32675: LD_VAR 0 9
32679: PPUSH
32680: CALL_OW 313
32684: PUSH
32685: LD_INT 6
32687: EQUAL
32688: PUSH
32689: LD_VAR 0 9
32693: PPUSH
32694: CALL_OW 266
32698: PUSH
32699: LD_INT 32
32701: PUSH
32702: LD_INT 31
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: IN
32709: OR
32710: IFFALSE 32524
32712: GO 32521
32714: POP
32715: POP
// end else
32716: GO 33098
// for j = 1 to x do
32718: LD_ADDR_VAR 0 9
32722: PUSH
32723: DOUBLE
32724: LD_INT 1
32726: DEC
32727: ST_TO_ADDR
32728: LD_VAR 0 13
32732: PUSH
32733: FOR_TO
32734: IFFALSE 33096
// begin InitHc ;
32736: CALL_OW 19
// if not f then
32740: LD_VAR 0 12
32744: NOT
32745: IFFALSE 32834
// begin PrepareHuman ( false , i , skill ) ;
32747: LD_INT 0
32749: PPUSH
32750: LD_VAR 0 8
32754: PPUSH
32755: LD_VAR 0 4
32759: PPUSH
32760: CALL_OW 380
// un := CreateHuman ;
32764: LD_ADDR_VAR 0 14
32768: PUSH
32769: CALL_OW 44
32773: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32774: LD_ADDR_VAR 0 7
32778: PUSH
32779: LD_VAR 0 7
32783: PPUSH
32784: LD_INT 1
32786: PPUSH
32787: LD_VAR 0 14
32791: PPUSH
32792: CALL_OW 2
32796: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32797: LD_VAR 0 14
32801: PPUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 250
32811: PPUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL_OW 251
32821: PPUSH
32822: LD_INT 10
32824: PPUSH
32825: LD_INT 0
32827: PPUSH
32828: CALL_OW 50
// continue ;
32832: GO 32733
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32834: LD_VAR 0 12
32838: PUSH
32839: LD_INT 1
32841: ARRAY
32842: PPUSH
32843: CALL_OW 313
32847: PUSH
32848: LD_VAR 0 12
32852: PUSH
32853: LD_INT 1
32855: ARRAY
32856: PPUSH
32857: CALL_OW 266
32861: PUSH
32862: LD_INT 32
32864: PUSH
32865: LD_INT 31
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: IN
32872: AND
32873: PUSH
32874: LD_VAR 0 12
32878: PUSH
32879: LD_INT 1
32881: ARRAY
32882: PPUSH
32883: CALL_OW 313
32887: PUSH
32888: LD_INT 6
32890: EQUAL
32891: OR
32892: IFFALSE 32912
// f := Delete ( f , 1 ) ;
32894: LD_ADDR_VAR 0 12
32898: PUSH
32899: LD_VAR 0 12
32903: PPUSH
32904: LD_INT 1
32906: PPUSH
32907: CALL_OW 3
32911: ST_TO_ADDR
// if not f then
32912: LD_VAR 0 12
32916: NOT
32917: IFFALSE 32935
// begin x := x + 2 ;
32919: LD_ADDR_VAR 0 13
32923: PUSH
32924: LD_VAR 0 13
32928: PUSH
32929: LD_INT 2
32931: PLUS
32932: ST_TO_ADDR
// continue ;
32933: GO 32733
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32935: LD_VAR 0 12
32939: PUSH
32940: LD_INT 1
32942: ARRAY
32943: PPUSH
32944: CALL_OW 266
32948: PUSH
32949: LD_INT 5
32951: EQUAL
32952: IFFALSE 33026
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32954: LD_VAR 0 12
32958: PUSH
32959: LD_INT 1
32961: ARRAY
32962: PPUSH
32963: CALL_OW 313
32967: PUSH
32968: LD_INT 3
32970: LESS
32971: IFFALSE 33007
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32973: LD_INT 0
32975: PPUSH
32976: LD_INT 5
32978: PUSH
32979: LD_INT 8
32981: PUSH
32982: LD_INT 9
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: PUSH
32990: LD_VAR 0 17
32994: ARRAY
32995: PPUSH
32996: LD_VAR 0 4
33000: PPUSH
33001: CALL_OW 380
33005: GO 33024
// PrepareHuman ( false , i , skill ) ;
33007: LD_INT 0
33009: PPUSH
33010: LD_VAR 0 8
33014: PPUSH
33015: LD_VAR 0 4
33019: PPUSH
33020: CALL_OW 380
// end else
33024: GO 33043
// PrepareHuman ( false , i , skill ) ;
33026: LD_INT 0
33028: PPUSH
33029: LD_VAR 0 8
33033: PPUSH
33034: LD_VAR 0 4
33038: PPUSH
33039: CALL_OW 380
// un := CreateHuman ;
33043: LD_ADDR_VAR 0 14
33047: PUSH
33048: CALL_OW 44
33052: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33053: LD_ADDR_VAR 0 7
33057: PUSH
33058: LD_VAR 0 7
33062: PPUSH
33063: LD_INT 1
33065: PPUSH
33066: LD_VAR 0 14
33070: PPUSH
33071: CALL_OW 2
33075: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33076: LD_VAR 0 14
33080: PPUSH
33081: LD_VAR 0 12
33085: PUSH
33086: LD_INT 1
33088: ARRAY
33089: PPUSH
33090: CALL_OW 52
// end ;
33094: GO 32733
33096: POP
33097: POP
// end ;
33098: GO 32035
33100: POP
33101: POP
// result := result ^ buildings ;
33102: LD_ADDR_VAR 0 7
33106: PUSH
33107: LD_VAR 0 7
33111: PUSH
33112: LD_VAR 0 18
33116: ADD
33117: ST_TO_ADDR
// end else
33118: GO 33261
// begin for i = 1 to personel do
33120: LD_ADDR_VAR 0 8
33124: PUSH
33125: DOUBLE
33126: LD_INT 1
33128: DEC
33129: ST_TO_ADDR
33130: LD_VAR 0 6
33134: PUSH
33135: FOR_TO
33136: IFFALSE 33259
// begin if i > 4 then
33138: LD_VAR 0 8
33142: PUSH
33143: LD_INT 4
33145: GREATER
33146: IFFALSE 33150
// break ;
33148: GO 33259
// x := personel [ i ] ;
33150: LD_ADDR_VAR 0 13
33154: PUSH
33155: LD_VAR 0 6
33159: PUSH
33160: LD_VAR 0 8
33164: ARRAY
33165: ST_TO_ADDR
// if x = - 1 then
33166: LD_VAR 0 13
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: EQUAL
33175: IFFALSE 33179
// continue ;
33177: GO 33135
// PrepareHuman ( false , i , skill ) ;
33179: LD_INT 0
33181: PPUSH
33182: LD_VAR 0 8
33186: PPUSH
33187: LD_VAR 0 4
33191: PPUSH
33192: CALL_OW 380
// un := CreateHuman ;
33196: LD_ADDR_VAR 0 14
33200: PUSH
33201: CALL_OW 44
33205: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33206: LD_VAR 0 14
33210: PPUSH
33211: LD_VAR 0 1
33215: PPUSH
33216: CALL_OW 250
33220: PPUSH
33221: LD_VAR 0 1
33225: PPUSH
33226: CALL_OW 251
33230: PPUSH
33231: LD_INT 10
33233: PPUSH
33234: LD_INT 0
33236: PPUSH
33237: CALL_OW 50
// result := result ^ un ;
33241: LD_ADDR_VAR 0 7
33245: PUSH
33246: LD_VAR 0 7
33250: PUSH
33251: LD_VAR 0 14
33255: ADD
33256: ST_TO_ADDR
// end ;
33257: GO 33135
33259: POP
33260: POP
// end ; end ;
33261: LD_VAR 0 7
33265: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33266: LD_INT 0
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
// result := false ;
33284: LD_ADDR_VAR 0 3
33288: PUSH
33289: LD_INT 0
33291: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33292: LD_VAR 0 1
33296: NOT
33297: PUSH
33298: LD_VAR 0 1
33302: PPUSH
33303: CALL_OW 266
33307: PUSH
33308: LD_INT 32
33310: PUSH
33311: LD_INT 33
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: IN
33318: NOT
33319: OR
33320: IFFALSE 33324
// exit ;
33322: GO 34433
// nat := GetNation ( tower ) ;
33324: LD_ADDR_VAR 0 12
33328: PUSH
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 248
33338: ST_TO_ADDR
// side := GetSide ( tower ) ;
33339: LD_ADDR_VAR 0 16
33343: PUSH
33344: LD_VAR 0 1
33348: PPUSH
33349: CALL_OW 255
33353: ST_TO_ADDR
// x := GetX ( tower ) ;
33354: LD_ADDR_VAR 0 10
33358: PUSH
33359: LD_VAR 0 1
33363: PPUSH
33364: CALL_OW 250
33368: ST_TO_ADDR
// y := GetY ( tower ) ;
33369: LD_ADDR_VAR 0 11
33373: PUSH
33374: LD_VAR 0 1
33378: PPUSH
33379: CALL_OW 251
33383: ST_TO_ADDR
// if not x or not y then
33384: LD_VAR 0 10
33388: NOT
33389: PUSH
33390: LD_VAR 0 11
33394: NOT
33395: OR
33396: IFFALSE 33400
// exit ;
33398: GO 34433
// weapon := 0 ;
33400: LD_ADDR_VAR 0 18
33404: PUSH
33405: LD_INT 0
33407: ST_TO_ADDR
// fac_list := [ ] ;
33408: LD_ADDR_VAR 0 17
33412: PUSH
33413: EMPTY
33414: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33415: LD_ADDR_VAR 0 6
33419: PUSH
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 274
33429: PPUSH
33430: LD_VAR 0 2
33434: PPUSH
33435: LD_INT 0
33437: PPUSH
33438: CALL 31004 0 3
33442: PPUSH
33443: LD_INT 30
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PPUSH
33453: CALL_OW 72
33457: ST_TO_ADDR
// if not factories then
33458: LD_VAR 0 6
33462: NOT
33463: IFFALSE 33467
// exit ;
33465: GO 34433
// for i in factories do
33467: LD_ADDR_VAR 0 8
33471: PUSH
33472: LD_VAR 0 6
33476: PUSH
33477: FOR_IN
33478: IFFALSE 33503
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33480: LD_ADDR_VAR 0 17
33484: PUSH
33485: LD_VAR 0 17
33489: PUSH
33490: LD_VAR 0 8
33494: PPUSH
33495: CALL_OW 478
33499: UNION
33500: ST_TO_ADDR
33501: GO 33477
33503: POP
33504: POP
// if not fac_list then
33505: LD_VAR 0 17
33509: NOT
33510: IFFALSE 33514
// exit ;
33512: GO 34433
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33514: LD_ADDR_VAR 0 5
33518: PUSH
33519: LD_INT 4
33521: PUSH
33522: LD_INT 5
33524: PUSH
33525: LD_INT 9
33527: PUSH
33528: LD_INT 10
33530: PUSH
33531: LD_INT 6
33533: PUSH
33534: LD_INT 7
33536: PUSH
33537: LD_INT 11
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 27
33551: PUSH
33552: LD_INT 28
33554: PUSH
33555: LD_INT 26
33557: PUSH
33558: LD_INT 30
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 43
33569: PUSH
33570: LD_INT 44
33572: PUSH
33573: LD_INT 46
33575: PUSH
33576: LD_INT 45
33578: PUSH
33579: LD_INT 47
33581: PUSH
33582: LD_INT 49
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: PUSH
33598: LD_VAR 0 12
33602: ARRAY
33603: ST_TO_ADDR
// list := list isect fac_list ;
33604: LD_ADDR_VAR 0 5
33608: PUSH
33609: LD_VAR 0 5
33613: PUSH
33614: LD_VAR 0 17
33618: ISECT
33619: ST_TO_ADDR
// if not list then
33620: LD_VAR 0 5
33624: NOT
33625: IFFALSE 33629
// exit ;
33627: GO 34433
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33629: LD_VAR 0 12
33633: PUSH
33634: LD_INT 3
33636: EQUAL
33637: PUSH
33638: LD_INT 49
33640: PUSH
33641: LD_VAR 0 5
33645: IN
33646: AND
33647: PUSH
33648: LD_INT 31
33650: PPUSH
33651: LD_VAR 0 16
33655: PPUSH
33656: CALL_OW 321
33660: PUSH
33661: LD_INT 2
33663: EQUAL
33664: AND
33665: IFFALSE 33725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33667: LD_INT 22
33669: PUSH
33670: LD_VAR 0 16
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 35
33681: PUSH
33682: LD_INT 49
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 91
33691: PUSH
33692: LD_VAR 0 1
33696: PUSH
33697: LD_INT 10
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: PPUSH
33710: CALL_OW 69
33714: NOT
33715: IFFALSE 33725
// weapon := ru_time_lapser ;
33717: LD_ADDR_VAR 0 18
33721: PUSH
33722: LD_INT 49
33724: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33725: LD_VAR 0 12
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: IN
33740: PUSH
33741: LD_INT 11
33743: PUSH
33744: LD_VAR 0 5
33748: IN
33749: PUSH
33750: LD_INT 30
33752: PUSH
33753: LD_VAR 0 5
33757: IN
33758: OR
33759: AND
33760: PUSH
33761: LD_INT 6
33763: PPUSH
33764: LD_VAR 0 16
33768: PPUSH
33769: CALL_OW 321
33773: PUSH
33774: LD_INT 2
33776: EQUAL
33777: AND
33778: IFFALSE 33943
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33780: LD_INT 22
33782: PUSH
33783: LD_VAR 0 16
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 35
33797: PUSH
33798: LD_INT 11
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 35
33807: PUSH
33808: LD_INT 30
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 91
33822: PUSH
33823: LD_VAR 0 1
33827: PUSH
33828: LD_INT 18
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: PPUSH
33841: CALL_OW 69
33845: NOT
33846: PUSH
33847: LD_INT 22
33849: PUSH
33850: LD_VAR 0 16
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 30
33864: PUSH
33865: LD_INT 32
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 30
33874: PUSH
33875: LD_INT 33
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 91
33889: PUSH
33890: LD_VAR 0 1
33894: PUSH
33895: LD_INT 12
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: LIST
33907: PUSH
33908: EMPTY
33909: LIST
33910: PPUSH
33911: CALL_OW 69
33915: PUSH
33916: LD_INT 2
33918: GREATER
33919: AND
33920: IFFALSE 33943
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33922: LD_ADDR_VAR 0 18
33926: PUSH
33927: LD_INT 11
33929: PUSH
33930: LD_INT 30
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_VAR 0 12
33941: ARRAY
33942: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33943: LD_VAR 0 18
33947: NOT
33948: PUSH
33949: LD_INT 40
33951: PPUSH
33952: LD_VAR 0 16
33956: PPUSH
33957: CALL_OW 321
33961: PUSH
33962: LD_INT 2
33964: EQUAL
33965: AND
33966: PUSH
33967: LD_INT 7
33969: PUSH
33970: LD_VAR 0 5
33974: IN
33975: PUSH
33976: LD_INT 28
33978: PUSH
33979: LD_VAR 0 5
33983: IN
33984: OR
33985: PUSH
33986: LD_INT 45
33988: PUSH
33989: LD_VAR 0 5
33993: IN
33994: OR
33995: AND
33996: IFFALSE 34250
// begin hex := GetHexInfo ( x , y ) ;
33998: LD_ADDR_VAR 0 4
34002: PUSH
34003: LD_VAR 0 10
34007: PPUSH
34008: LD_VAR 0 11
34012: PPUSH
34013: CALL_OW 546
34017: ST_TO_ADDR
// if hex [ 1 ] then
34018: LD_VAR 0 4
34022: PUSH
34023: LD_INT 1
34025: ARRAY
34026: IFFALSE 34030
// exit ;
34028: GO 34433
// height := hex [ 2 ] ;
34030: LD_ADDR_VAR 0 15
34034: PUSH
34035: LD_VAR 0 4
34039: PUSH
34040: LD_INT 2
34042: ARRAY
34043: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34044: LD_ADDR_VAR 0 14
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 3
34057: PUSH
34058: LD_INT 5
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: ST_TO_ADDR
// for i in tmp do
34067: LD_ADDR_VAR 0 8
34071: PUSH
34072: LD_VAR 0 14
34076: PUSH
34077: FOR_IN
34078: IFFALSE 34248
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34080: LD_ADDR_VAR 0 9
34084: PUSH
34085: LD_VAR 0 10
34089: PPUSH
34090: LD_VAR 0 8
34094: PPUSH
34095: LD_INT 5
34097: PPUSH
34098: CALL_OW 272
34102: PUSH
34103: LD_VAR 0 11
34107: PPUSH
34108: LD_VAR 0 8
34112: PPUSH
34113: LD_INT 5
34115: PPUSH
34116: CALL_OW 273
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34125: LD_VAR 0 9
34129: PUSH
34130: LD_INT 1
34132: ARRAY
34133: PPUSH
34134: LD_VAR 0 9
34138: PUSH
34139: LD_INT 2
34141: ARRAY
34142: PPUSH
34143: CALL_OW 488
34147: IFFALSE 34246
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34149: LD_ADDR_VAR 0 4
34153: PUSH
34154: LD_VAR 0 9
34158: PUSH
34159: LD_INT 1
34161: ARRAY
34162: PPUSH
34163: LD_VAR 0 9
34167: PUSH
34168: LD_INT 2
34170: ARRAY
34171: PPUSH
34172: CALL_OW 546
34176: ST_TO_ADDR
// if hex [ 1 ] then
34177: LD_VAR 0 4
34181: PUSH
34182: LD_INT 1
34184: ARRAY
34185: IFFALSE 34189
// continue ;
34187: GO 34077
// h := hex [ 2 ] ;
34189: LD_ADDR_VAR 0 13
34193: PUSH
34194: LD_VAR 0 4
34198: PUSH
34199: LD_INT 2
34201: ARRAY
34202: ST_TO_ADDR
// if h + 7 < height then
34203: LD_VAR 0 13
34207: PUSH
34208: LD_INT 7
34210: PLUS
34211: PUSH
34212: LD_VAR 0 15
34216: LESS
34217: IFFALSE 34246
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34219: LD_ADDR_VAR 0 18
34223: PUSH
34224: LD_INT 7
34226: PUSH
34227: LD_INT 28
34229: PUSH
34230: LD_INT 45
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: PUSH
34238: LD_VAR 0 12
34242: ARRAY
34243: ST_TO_ADDR
// break ;
34244: GO 34248
// end ; end ; end ;
34246: GO 34077
34248: POP
34249: POP
// end ; if not weapon then
34250: LD_VAR 0 18
34254: NOT
34255: IFFALSE 34315
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34257: LD_ADDR_VAR 0 5
34261: PUSH
34262: LD_VAR 0 5
34266: PUSH
34267: LD_INT 11
34269: PUSH
34270: LD_INT 30
34272: PUSH
34273: LD_INT 49
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: DIFF
34281: ST_TO_ADDR
// if not list then
34282: LD_VAR 0 5
34286: NOT
34287: IFFALSE 34291
// exit ;
34289: GO 34433
// weapon := list [ rand ( 1 , list ) ] ;
34291: LD_ADDR_VAR 0 18
34295: PUSH
34296: LD_VAR 0 5
34300: PUSH
34301: LD_INT 1
34303: PPUSH
34304: LD_VAR 0 5
34308: PPUSH
34309: CALL_OW 12
34313: ARRAY
34314: ST_TO_ADDR
// end ; if weapon then
34315: LD_VAR 0 18
34319: IFFALSE 34433
// begin tmp := CostOfWeapon ( weapon ) ;
34321: LD_ADDR_VAR 0 14
34325: PUSH
34326: LD_VAR 0 18
34330: PPUSH
34331: CALL_OW 451
34335: ST_TO_ADDR
// j := GetBase ( tower ) ;
34336: LD_ADDR_VAR 0 9
34340: PUSH
34341: LD_VAR 0 1
34345: PPUSH
34346: CALL_OW 274
34350: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34351: LD_VAR 0 9
34355: PPUSH
34356: LD_INT 1
34358: PPUSH
34359: CALL_OW 275
34363: PUSH
34364: LD_VAR 0 14
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: GREATEREQUAL
34373: PUSH
34374: LD_VAR 0 9
34378: PPUSH
34379: LD_INT 2
34381: PPUSH
34382: CALL_OW 275
34386: PUSH
34387: LD_VAR 0 14
34391: PUSH
34392: LD_INT 2
34394: ARRAY
34395: GREATEREQUAL
34396: AND
34397: PUSH
34398: LD_VAR 0 9
34402: PPUSH
34403: LD_INT 3
34405: PPUSH
34406: CALL_OW 275
34410: PUSH
34411: LD_VAR 0 14
34415: PUSH
34416: LD_INT 3
34418: ARRAY
34419: GREATEREQUAL
34420: AND
34421: IFFALSE 34433
// result := weapon ;
34423: LD_ADDR_VAR 0 3
34427: PUSH
34428: LD_VAR 0 18
34432: ST_TO_ADDR
// end ; end ;
34433: LD_VAR 0 3
34437: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34438: LD_INT 0
34440: PPUSH
34441: PPUSH
// result := true ;
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 1
34449: ST_TO_ADDR
// if array1 = array2 then
34450: LD_VAR 0 1
34454: PUSH
34455: LD_VAR 0 2
34459: EQUAL
34460: IFFALSE 34520
// begin for i = 1 to array1 do
34462: LD_ADDR_VAR 0 4
34466: PUSH
34467: DOUBLE
34468: LD_INT 1
34470: DEC
34471: ST_TO_ADDR
34472: LD_VAR 0 1
34476: PUSH
34477: FOR_TO
34478: IFFALSE 34516
// if array1 [ i ] <> array2 [ i ] then
34480: LD_VAR 0 1
34484: PUSH
34485: LD_VAR 0 4
34489: ARRAY
34490: PUSH
34491: LD_VAR 0 2
34495: PUSH
34496: LD_VAR 0 4
34500: ARRAY
34501: NONEQUAL
34502: IFFALSE 34514
// begin result := false ;
34504: LD_ADDR_VAR 0 3
34508: PUSH
34509: LD_INT 0
34511: ST_TO_ADDR
// break ;
34512: GO 34516
// end ;
34514: GO 34477
34516: POP
34517: POP
// end else
34518: GO 34528
// result := false ;
34520: LD_ADDR_VAR 0 3
34524: PUSH
34525: LD_INT 0
34527: ST_TO_ADDR
// end ;
34528: LD_VAR 0 3
34532: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34533: LD_INT 0
34535: PPUSH
34536: PPUSH
// if not array1 or not array2 then
34537: LD_VAR 0 1
34541: NOT
34542: PUSH
34543: LD_VAR 0 2
34547: NOT
34548: OR
34549: IFFALSE 34553
// exit ;
34551: GO 34617
// result := true ;
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_INT 1
34560: ST_TO_ADDR
// for i = 1 to array1 do
34561: LD_ADDR_VAR 0 4
34565: PUSH
34566: DOUBLE
34567: LD_INT 1
34569: DEC
34570: ST_TO_ADDR
34571: LD_VAR 0 1
34575: PUSH
34576: FOR_TO
34577: IFFALSE 34615
// if array1 [ i ] <> array2 [ i ] then
34579: LD_VAR 0 1
34583: PUSH
34584: LD_VAR 0 4
34588: ARRAY
34589: PUSH
34590: LD_VAR 0 2
34594: PUSH
34595: LD_VAR 0 4
34599: ARRAY
34600: NONEQUAL
34601: IFFALSE 34613
// begin result := false ;
34603: LD_ADDR_VAR 0 3
34607: PUSH
34608: LD_INT 0
34610: ST_TO_ADDR
// break ;
34611: GO 34615
// end ;
34613: GO 34576
34615: POP
34616: POP
// end ;
34617: LD_VAR 0 3
34621: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34622: LD_INT 0
34624: PPUSH
34625: PPUSH
34626: PPUSH
// pom := GetBase ( fac ) ;
34627: LD_ADDR_VAR 0 5
34631: PUSH
34632: LD_VAR 0 1
34636: PPUSH
34637: CALL_OW 274
34641: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34642: LD_ADDR_VAR 0 4
34646: PUSH
34647: LD_VAR 0 2
34651: PUSH
34652: LD_INT 1
34654: ARRAY
34655: PPUSH
34656: LD_VAR 0 2
34660: PUSH
34661: LD_INT 2
34663: ARRAY
34664: PPUSH
34665: LD_VAR 0 2
34669: PUSH
34670: LD_INT 3
34672: ARRAY
34673: PPUSH
34674: LD_VAR 0 2
34678: PUSH
34679: LD_INT 4
34681: ARRAY
34682: PPUSH
34683: CALL_OW 449
34687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34688: LD_ADDR_VAR 0 3
34692: PUSH
34693: LD_VAR 0 5
34697: PPUSH
34698: LD_INT 1
34700: PPUSH
34701: CALL_OW 275
34705: PUSH
34706: LD_VAR 0 4
34710: PUSH
34711: LD_INT 1
34713: ARRAY
34714: GREATEREQUAL
34715: PUSH
34716: LD_VAR 0 5
34720: PPUSH
34721: LD_INT 2
34723: PPUSH
34724: CALL_OW 275
34728: PUSH
34729: LD_VAR 0 4
34733: PUSH
34734: LD_INT 2
34736: ARRAY
34737: GREATEREQUAL
34738: AND
34739: PUSH
34740: LD_VAR 0 5
34744: PPUSH
34745: LD_INT 3
34747: PPUSH
34748: CALL_OW 275
34752: PUSH
34753: LD_VAR 0 4
34757: PUSH
34758: LD_INT 3
34760: ARRAY
34761: GREATEREQUAL
34762: AND
34763: ST_TO_ADDR
// end ;
34764: LD_VAR 0 3
34768: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34769: LD_INT 0
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
// pom := GetBase ( building ) ;
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 274
34789: ST_TO_ADDR
// if not pom then
34790: LD_VAR 0 3
34794: NOT
34795: IFFALSE 34799
// exit ;
34797: GO 34969
// btype := GetBType ( building ) ;
34799: LD_ADDR_VAR 0 5
34803: PUSH
34804: LD_VAR 0 1
34808: PPUSH
34809: CALL_OW 266
34813: ST_TO_ADDR
// if btype = b_armoury then
34814: LD_VAR 0 5
34818: PUSH
34819: LD_INT 4
34821: EQUAL
34822: IFFALSE 34832
// btype := b_barracks ;
34824: LD_ADDR_VAR 0 5
34828: PUSH
34829: LD_INT 5
34831: ST_TO_ADDR
// if btype = b_depot then
34832: LD_VAR 0 5
34836: PUSH
34837: LD_INT 0
34839: EQUAL
34840: IFFALSE 34850
// btype := b_warehouse ;
34842: LD_ADDR_VAR 0 5
34846: PUSH
34847: LD_INT 1
34849: ST_TO_ADDR
// if btype = b_workshop then
34850: LD_VAR 0 5
34854: PUSH
34855: LD_INT 2
34857: EQUAL
34858: IFFALSE 34868
// btype := b_factory ;
34860: LD_ADDR_VAR 0 5
34864: PUSH
34865: LD_INT 3
34867: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34868: LD_ADDR_VAR 0 4
34872: PUSH
34873: LD_VAR 0 5
34877: PPUSH
34878: LD_VAR 0 1
34882: PPUSH
34883: CALL_OW 248
34887: PPUSH
34888: CALL_OW 450
34892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34893: LD_ADDR_VAR 0 2
34897: PUSH
34898: LD_VAR 0 3
34902: PPUSH
34903: LD_INT 1
34905: PPUSH
34906: CALL_OW 275
34910: PUSH
34911: LD_VAR 0 4
34915: PUSH
34916: LD_INT 1
34918: ARRAY
34919: GREATEREQUAL
34920: PUSH
34921: LD_VAR 0 3
34925: PPUSH
34926: LD_INT 2
34928: PPUSH
34929: CALL_OW 275
34933: PUSH
34934: LD_VAR 0 4
34938: PUSH
34939: LD_INT 2
34941: ARRAY
34942: GREATEREQUAL
34943: AND
34944: PUSH
34945: LD_VAR 0 3
34949: PPUSH
34950: LD_INT 3
34952: PPUSH
34953: CALL_OW 275
34957: PUSH
34958: LD_VAR 0 4
34962: PUSH
34963: LD_INT 3
34965: ARRAY
34966: GREATEREQUAL
34967: AND
34968: ST_TO_ADDR
// end ;
34969: LD_VAR 0 2
34973: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34974: LD_INT 0
34976: PPUSH
34977: PPUSH
34978: PPUSH
// pom := GetBase ( building ) ;
34979: LD_ADDR_VAR 0 4
34983: PUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: CALL_OW 274
34993: ST_TO_ADDR
// if not pom then
34994: LD_VAR 0 4
34998: NOT
34999: IFFALSE 35003
// exit ;
35001: GO 35104
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35003: LD_ADDR_VAR 0 5
35007: PUSH
35008: LD_VAR 0 2
35012: PPUSH
35013: LD_VAR 0 1
35017: PPUSH
35018: CALL_OW 248
35022: PPUSH
35023: CALL_OW 450
35027: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35028: LD_ADDR_VAR 0 3
35032: PUSH
35033: LD_VAR 0 4
35037: PPUSH
35038: LD_INT 1
35040: PPUSH
35041: CALL_OW 275
35045: PUSH
35046: LD_VAR 0 5
35050: PUSH
35051: LD_INT 1
35053: ARRAY
35054: GREATEREQUAL
35055: PUSH
35056: LD_VAR 0 4
35060: PPUSH
35061: LD_INT 2
35063: PPUSH
35064: CALL_OW 275
35068: PUSH
35069: LD_VAR 0 5
35073: PUSH
35074: LD_INT 2
35076: ARRAY
35077: GREATEREQUAL
35078: AND
35079: PUSH
35080: LD_VAR 0 4
35084: PPUSH
35085: LD_INT 3
35087: PPUSH
35088: CALL_OW 275
35092: PUSH
35093: LD_VAR 0 5
35097: PUSH
35098: LD_INT 3
35100: ARRAY
35101: GREATEREQUAL
35102: AND
35103: ST_TO_ADDR
// end ;
35104: LD_VAR 0 3
35108: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35109: LD_INT 0
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
35116: PPUSH
35117: PPUSH
35118: PPUSH
35119: PPUSH
35120: PPUSH
35121: PPUSH
// result := false ;
35122: LD_ADDR_VAR 0 8
35126: PUSH
35127: LD_INT 0
35129: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35130: LD_VAR 0 5
35134: NOT
35135: PUSH
35136: LD_VAR 0 1
35140: NOT
35141: OR
35142: PUSH
35143: LD_VAR 0 2
35147: NOT
35148: OR
35149: PUSH
35150: LD_VAR 0 3
35154: NOT
35155: OR
35156: IFFALSE 35160
// exit ;
35158: GO 35974
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35160: LD_ADDR_VAR 0 14
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: LD_VAR 0 2
35174: PPUSH
35175: LD_VAR 0 3
35179: PPUSH
35180: LD_VAR 0 4
35184: PPUSH
35185: LD_VAR 0 5
35189: PUSH
35190: LD_INT 1
35192: ARRAY
35193: PPUSH
35194: CALL_OW 248
35198: PPUSH
35199: LD_INT 0
35201: PPUSH
35202: CALL 37211 0 6
35206: ST_TO_ADDR
// if not hexes then
35207: LD_VAR 0 14
35211: NOT
35212: IFFALSE 35216
// exit ;
35214: GO 35974
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35216: LD_ADDR_VAR 0 17
35220: PUSH
35221: LD_VAR 0 5
35225: PPUSH
35226: LD_INT 22
35228: PUSH
35229: LD_VAR 0 13
35233: PPUSH
35234: CALL_OW 255
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: LD_INT 30
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 30
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PPUSH
35275: CALL_OW 72
35279: ST_TO_ADDR
// for i = 1 to hexes do
35280: LD_ADDR_VAR 0 9
35284: PUSH
35285: DOUBLE
35286: LD_INT 1
35288: DEC
35289: ST_TO_ADDR
35290: LD_VAR 0 14
35294: PUSH
35295: FOR_TO
35296: IFFALSE 35972
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35298: LD_ADDR_VAR 0 13
35302: PUSH
35303: LD_VAR 0 14
35307: PUSH
35308: LD_VAR 0 9
35312: ARRAY
35313: PUSH
35314: LD_INT 1
35316: ARRAY
35317: PPUSH
35318: LD_VAR 0 14
35322: PUSH
35323: LD_VAR 0 9
35327: ARRAY
35328: PUSH
35329: LD_INT 2
35331: ARRAY
35332: PPUSH
35333: CALL_OW 428
35337: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35338: LD_VAR 0 14
35342: PUSH
35343: LD_VAR 0 9
35347: ARRAY
35348: PUSH
35349: LD_INT 1
35351: ARRAY
35352: PPUSH
35353: LD_VAR 0 14
35357: PUSH
35358: LD_VAR 0 9
35362: ARRAY
35363: PUSH
35364: LD_INT 2
35366: ARRAY
35367: PPUSH
35368: CALL_OW 351
35372: PUSH
35373: LD_VAR 0 14
35377: PUSH
35378: LD_VAR 0 9
35382: ARRAY
35383: PUSH
35384: LD_INT 1
35386: ARRAY
35387: PPUSH
35388: LD_VAR 0 14
35392: PUSH
35393: LD_VAR 0 9
35397: ARRAY
35398: PUSH
35399: LD_INT 2
35401: ARRAY
35402: PPUSH
35403: CALL_OW 488
35407: NOT
35408: OR
35409: PUSH
35410: LD_VAR 0 13
35414: PPUSH
35415: CALL_OW 247
35419: PUSH
35420: LD_INT 3
35422: EQUAL
35423: OR
35424: IFFALSE 35430
// exit ;
35426: POP
35427: POP
35428: GO 35974
// if not tmp then
35430: LD_VAR 0 13
35434: NOT
35435: IFFALSE 35439
// continue ;
35437: GO 35295
// result := true ;
35439: LD_ADDR_VAR 0 8
35443: PUSH
35444: LD_INT 1
35446: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35447: LD_VAR 0 6
35451: PUSH
35452: LD_VAR 0 13
35456: PPUSH
35457: CALL_OW 247
35461: PUSH
35462: LD_INT 2
35464: EQUAL
35465: AND
35466: PUSH
35467: LD_VAR 0 13
35471: PPUSH
35472: CALL_OW 263
35476: PUSH
35477: LD_INT 1
35479: EQUAL
35480: AND
35481: IFFALSE 35645
// begin if IsDrivenBy ( tmp ) then
35483: LD_VAR 0 13
35487: PPUSH
35488: CALL_OW 311
35492: IFFALSE 35496
// continue ;
35494: GO 35295
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35496: LD_VAR 0 6
35500: PPUSH
35501: LD_INT 3
35503: PUSH
35504: LD_INT 60
35506: PUSH
35507: EMPTY
35508: LIST
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 3
35516: PUSH
35517: LD_INT 55
35519: PUSH
35520: EMPTY
35521: LIST
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PPUSH
35531: CALL_OW 72
35535: IFFALSE 35643
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35537: LD_ADDR_VAR 0 18
35541: PUSH
35542: LD_VAR 0 6
35546: PPUSH
35547: LD_INT 3
35549: PUSH
35550: LD_INT 60
35552: PUSH
35553: EMPTY
35554: LIST
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: LD_INT 55
35565: PUSH
35566: EMPTY
35567: LIST
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PPUSH
35577: CALL_OW 72
35581: PUSH
35582: LD_INT 1
35584: ARRAY
35585: ST_TO_ADDR
// if IsInUnit ( driver ) then
35586: LD_VAR 0 18
35590: PPUSH
35591: CALL_OW 310
35595: IFFALSE 35606
// ComExit ( driver ) ;
35597: LD_VAR 0 18
35601: PPUSH
35602: CALL 60339 0 1
// AddComEnterUnit ( driver , tmp ) ;
35606: LD_VAR 0 18
35610: PPUSH
35611: LD_VAR 0 13
35615: PPUSH
35616: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35620: LD_VAR 0 18
35624: PPUSH
35625: LD_VAR 0 7
35629: PPUSH
35630: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35634: LD_VAR 0 18
35638: PPUSH
35639: CALL_OW 181
// end ; continue ;
35643: GO 35295
// end ; if not cleaners or not tmp in cleaners then
35645: LD_VAR 0 6
35649: NOT
35650: PUSH
35651: LD_VAR 0 13
35655: PUSH
35656: LD_VAR 0 6
35660: IN
35661: NOT
35662: OR
35663: IFFALSE 35970
// begin if dep then
35665: LD_VAR 0 17
35669: IFFALSE 35805
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35671: LD_ADDR_VAR 0 16
35675: PUSH
35676: LD_VAR 0 17
35680: PUSH
35681: LD_INT 1
35683: ARRAY
35684: PPUSH
35685: CALL_OW 250
35689: PPUSH
35690: LD_VAR 0 17
35694: PUSH
35695: LD_INT 1
35697: ARRAY
35698: PPUSH
35699: CALL_OW 254
35703: PPUSH
35704: LD_INT 5
35706: PPUSH
35707: CALL_OW 272
35711: PUSH
35712: LD_VAR 0 17
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: PPUSH
35721: CALL_OW 251
35725: PPUSH
35726: LD_VAR 0 17
35730: PUSH
35731: LD_INT 1
35733: ARRAY
35734: PPUSH
35735: CALL_OW 254
35739: PPUSH
35740: LD_INT 5
35742: PPUSH
35743: CALL_OW 273
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35752: LD_VAR 0 16
35756: PUSH
35757: LD_INT 1
35759: ARRAY
35760: PPUSH
35761: LD_VAR 0 16
35765: PUSH
35766: LD_INT 2
35768: ARRAY
35769: PPUSH
35770: CALL_OW 488
35774: IFFALSE 35805
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35776: LD_VAR 0 13
35780: PPUSH
35781: LD_VAR 0 16
35785: PUSH
35786: LD_INT 1
35788: ARRAY
35789: PPUSH
35790: LD_VAR 0 16
35794: PUSH
35795: LD_INT 2
35797: ARRAY
35798: PPUSH
35799: CALL_OW 111
// continue ;
35803: GO 35295
// end ; end ; r := GetDir ( tmp ) ;
35805: LD_ADDR_VAR 0 15
35809: PUSH
35810: LD_VAR 0 13
35814: PPUSH
35815: CALL_OW 254
35819: ST_TO_ADDR
// if r = 5 then
35820: LD_VAR 0 15
35824: PUSH
35825: LD_INT 5
35827: EQUAL
35828: IFFALSE 35838
// r := 0 ;
35830: LD_ADDR_VAR 0 15
35834: PUSH
35835: LD_INT 0
35837: ST_TO_ADDR
// for j = r to 5 do
35838: LD_ADDR_VAR 0 10
35842: PUSH
35843: DOUBLE
35844: LD_VAR 0 15
35848: DEC
35849: ST_TO_ADDR
35850: LD_INT 5
35852: PUSH
35853: FOR_TO
35854: IFFALSE 35968
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35856: LD_ADDR_VAR 0 11
35860: PUSH
35861: LD_VAR 0 13
35865: PPUSH
35866: CALL_OW 250
35870: PPUSH
35871: LD_VAR 0 10
35875: PPUSH
35876: LD_INT 2
35878: PPUSH
35879: CALL_OW 272
35883: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35884: LD_ADDR_VAR 0 12
35888: PUSH
35889: LD_VAR 0 13
35893: PPUSH
35894: CALL_OW 251
35898: PPUSH
35899: LD_VAR 0 10
35903: PPUSH
35904: LD_INT 2
35906: PPUSH
35907: CALL_OW 273
35911: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35912: LD_VAR 0 11
35916: PPUSH
35917: LD_VAR 0 12
35921: PPUSH
35922: CALL_OW 488
35926: PUSH
35927: LD_VAR 0 11
35931: PPUSH
35932: LD_VAR 0 12
35936: PPUSH
35937: CALL_OW 428
35941: NOT
35942: AND
35943: IFFALSE 35966
// begin ComMoveXY ( tmp , _x , _y ) ;
35945: LD_VAR 0 13
35949: PPUSH
35950: LD_VAR 0 11
35954: PPUSH
35955: LD_VAR 0 12
35959: PPUSH
35960: CALL_OW 111
// break ;
35964: GO 35968
// end ; end ;
35966: GO 35853
35968: POP
35969: POP
// end ; end ;
35970: GO 35295
35972: POP
35973: POP
// end ;
35974: LD_VAR 0 8
35978: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35979: LD_INT 0
35981: PPUSH
// result := true ;
35982: LD_ADDR_VAR 0 3
35986: PUSH
35987: LD_INT 1
35989: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35990: LD_VAR 0 2
35994: PUSH
35995: LD_INT 24
35997: DOUBLE
35998: EQUAL
35999: IFTRUE 36009
36001: LD_INT 33
36003: DOUBLE
36004: EQUAL
36005: IFTRUE 36009
36007: GO 36034
36009: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36010: LD_ADDR_VAR 0 3
36014: PUSH
36015: LD_INT 32
36017: PPUSH
36018: LD_VAR 0 1
36022: PPUSH
36023: CALL_OW 321
36027: PUSH
36028: LD_INT 2
36030: EQUAL
36031: ST_TO_ADDR
36032: GO 36354
36034: LD_INT 20
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36042
36040: GO 36067
36042: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36043: LD_ADDR_VAR 0 3
36047: PUSH
36048: LD_INT 6
36050: PPUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: CALL_OW 321
36060: PUSH
36061: LD_INT 2
36063: EQUAL
36064: ST_TO_ADDR
36065: GO 36354
36067: LD_INT 22
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36081
36073: LD_INT 36
36075: DOUBLE
36076: EQUAL
36077: IFTRUE 36081
36079: GO 36106
36081: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36082: LD_ADDR_VAR 0 3
36086: PUSH
36087: LD_INT 15
36089: PPUSH
36090: LD_VAR 0 1
36094: PPUSH
36095: CALL_OW 321
36099: PUSH
36100: LD_INT 2
36102: EQUAL
36103: ST_TO_ADDR
36104: GO 36354
36106: LD_INT 30
36108: DOUBLE
36109: EQUAL
36110: IFTRUE 36114
36112: GO 36139
36114: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36115: LD_ADDR_VAR 0 3
36119: PUSH
36120: LD_INT 20
36122: PPUSH
36123: LD_VAR 0 1
36127: PPUSH
36128: CALL_OW 321
36132: PUSH
36133: LD_INT 2
36135: EQUAL
36136: ST_TO_ADDR
36137: GO 36354
36139: LD_INT 28
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36153
36145: LD_INT 21
36147: DOUBLE
36148: EQUAL
36149: IFTRUE 36153
36151: GO 36178
36153: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36154: LD_ADDR_VAR 0 3
36158: PUSH
36159: LD_INT 21
36161: PPUSH
36162: LD_VAR 0 1
36166: PPUSH
36167: CALL_OW 321
36171: PUSH
36172: LD_INT 2
36174: EQUAL
36175: ST_TO_ADDR
36176: GO 36354
36178: LD_INT 16
36180: DOUBLE
36181: EQUAL
36182: IFTRUE 36186
36184: GO 36213
36186: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36187: LD_ADDR_VAR 0 3
36191: PUSH
36192: LD_EXP 52
36196: PPUSH
36197: LD_VAR 0 1
36201: PPUSH
36202: CALL_OW 321
36206: PUSH
36207: LD_INT 2
36209: EQUAL
36210: ST_TO_ADDR
36211: GO 36354
36213: LD_INT 19
36215: DOUBLE
36216: EQUAL
36217: IFTRUE 36227
36219: LD_INT 23
36221: DOUBLE
36222: EQUAL
36223: IFTRUE 36227
36225: GO 36254
36227: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36228: LD_ADDR_VAR 0 3
36232: PUSH
36233: LD_EXP 51
36237: PPUSH
36238: LD_VAR 0 1
36242: PPUSH
36243: CALL_OW 321
36247: PUSH
36248: LD_INT 2
36250: EQUAL
36251: ST_TO_ADDR
36252: GO 36354
36254: LD_INT 17
36256: DOUBLE
36257: EQUAL
36258: IFTRUE 36262
36260: GO 36287
36262: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36263: LD_ADDR_VAR 0 3
36267: PUSH
36268: LD_INT 39
36270: PPUSH
36271: LD_VAR 0 1
36275: PPUSH
36276: CALL_OW 321
36280: PUSH
36281: LD_INT 2
36283: EQUAL
36284: ST_TO_ADDR
36285: GO 36354
36287: LD_INT 18
36289: DOUBLE
36290: EQUAL
36291: IFTRUE 36295
36293: GO 36320
36295: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36296: LD_ADDR_VAR 0 3
36300: PUSH
36301: LD_INT 40
36303: PPUSH
36304: LD_VAR 0 1
36308: PPUSH
36309: CALL_OW 321
36313: PUSH
36314: LD_INT 2
36316: EQUAL
36317: ST_TO_ADDR
36318: GO 36354
36320: LD_INT 27
36322: DOUBLE
36323: EQUAL
36324: IFTRUE 36328
36326: GO 36353
36328: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36329: LD_ADDR_VAR 0 3
36333: PUSH
36334: LD_INT 35
36336: PPUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL_OW 321
36346: PUSH
36347: LD_INT 2
36349: EQUAL
36350: ST_TO_ADDR
36351: GO 36354
36353: POP
// end ;
36354: LD_VAR 0 3
36358: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36359: LD_INT 0
36361: PPUSH
36362: PPUSH
36363: PPUSH
36364: PPUSH
36365: PPUSH
36366: PPUSH
36367: PPUSH
36368: PPUSH
36369: PPUSH
36370: PPUSH
36371: PPUSH
// result := false ;
36372: LD_ADDR_VAR 0 6
36376: PUSH
36377: LD_INT 0
36379: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36380: LD_VAR 0 1
36384: NOT
36385: PUSH
36386: LD_VAR 0 1
36390: PPUSH
36391: CALL_OW 266
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: IN
36406: NOT
36407: OR
36408: PUSH
36409: LD_VAR 0 2
36413: NOT
36414: OR
36415: PUSH
36416: LD_VAR 0 5
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 2
36429: PUSH
36430: LD_INT 3
36432: PUSH
36433: LD_INT 4
36435: PUSH
36436: LD_INT 5
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: IN
36447: NOT
36448: OR
36449: PUSH
36450: LD_VAR 0 3
36454: PPUSH
36455: LD_VAR 0 4
36459: PPUSH
36460: CALL_OW 488
36464: NOT
36465: OR
36466: IFFALSE 36470
// exit ;
36468: GO 37206
// side := GetSide ( depot ) ;
36470: LD_ADDR_VAR 0 9
36474: PUSH
36475: LD_VAR 0 1
36479: PPUSH
36480: CALL_OW 255
36484: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36485: LD_VAR 0 9
36489: PPUSH
36490: LD_VAR 0 2
36494: PPUSH
36495: CALL 35979 0 2
36499: NOT
36500: IFFALSE 36504
// exit ;
36502: GO 37206
// pom := GetBase ( depot ) ;
36504: LD_ADDR_VAR 0 10
36508: PUSH
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL_OW 274
36518: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36519: LD_ADDR_VAR 0 11
36523: PUSH
36524: LD_VAR 0 2
36528: PPUSH
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL_OW 248
36538: PPUSH
36539: CALL_OW 450
36543: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36544: LD_VAR 0 10
36548: PPUSH
36549: LD_INT 1
36551: PPUSH
36552: CALL_OW 275
36556: PUSH
36557: LD_VAR 0 11
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: GREATEREQUAL
36566: PUSH
36567: LD_VAR 0 10
36571: PPUSH
36572: LD_INT 2
36574: PPUSH
36575: CALL_OW 275
36579: PUSH
36580: LD_VAR 0 11
36584: PUSH
36585: LD_INT 2
36587: ARRAY
36588: GREATEREQUAL
36589: AND
36590: PUSH
36591: LD_VAR 0 10
36595: PPUSH
36596: LD_INT 3
36598: PPUSH
36599: CALL_OW 275
36603: PUSH
36604: LD_VAR 0 11
36608: PUSH
36609: LD_INT 3
36611: ARRAY
36612: GREATEREQUAL
36613: AND
36614: NOT
36615: IFFALSE 36619
// exit ;
36617: GO 37206
// if GetBType ( depot ) = b_depot then
36619: LD_VAR 0 1
36623: PPUSH
36624: CALL_OW 266
36628: PUSH
36629: LD_INT 0
36631: EQUAL
36632: IFFALSE 36644
// dist := 28 else
36634: LD_ADDR_VAR 0 14
36638: PUSH
36639: LD_INT 28
36641: ST_TO_ADDR
36642: GO 36652
// dist := 36 ;
36644: LD_ADDR_VAR 0 14
36648: PUSH
36649: LD_INT 36
36651: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36652: LD_VAR 0 1
36656: PPUSH
36657: LD_VAR 0 3
36661: PPUSH
36662: LD_VAR 0 4
36666: PPUSH
36667: CALL_OW 297
36671: PUSH
36672: LD_VAR 0 14
36676: GREATER
36677: IFFALSE 36681
// exit ;
36679: GO 37206
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36681: LD_ADDR_VAR 0 12
36685: PUSH
36686: LD_VAR 0 2
36690: PPUSH
36691: LD_VAR 0 3
36695: PPUSH
36696: LD_VAR 0 4
36700: PPUSH
36701: LD_VAR 0 5
36705: PPUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 248
36715: PPUSH
36716: LD_INT 0
36718: PPUSH
36719: CALL 37211 0 6
36723: ST_TO_ADDR
// if not hexes then
36724: LD_VAR 0 12
36728: NOT
36729: IFFALSE 36733
// exit ;
36731: GO 37206
// hex := GetHexInfo ( x , y ) ;
36733: LD_ADDR_VAR 0 15
36737: PUSH
36738: LD_VAR 0 3
36742: PPUSH
36743: LD_VAR 0 4
36747: PPUSH
36748: CALL_OW 546
36752: ST_TO_ADDR
// if hex [ 1 ] then
36753: LD_VAR 0 15
36757: PUSH
36758: LD_INT 1
36760: ARRAY
36761: IFFALSE 36765
// exit ;
36763: GO 37206
// height := hex [ 2 ] ;
36765: LD_ADDR_VAR 0 13
36769: PUSH
36770: LD_VAR 0 15
36774: PUSH
36775: LD_INT 2
36777: ARRAY
36778: ST_TO_ADDR
// for i = 1 to hexes do
36779: LD_ADDR_VAR 0 7
36783: PUSH
36784: DOUBLE
36785: LD_INT 1
36787: DEC
36788: ST_TO_ADDR
36789: LD_VAR 0 12
36793: PUSH
36794: FOR_TO
36795: IFFALSE 37125
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36797: LD_VAR 0 12
36801: PUSH
36802: LD_VAR 0 7
36806: ARRAY
36807: PUSH
36808: LD_INT 1
36810: ARRAY
36811: PPUSH
36812: LD_VAR 0 12
36816: PUSH
36817: LD_VAR 0 7
36821: ARRAY
36822: PUSH
36823: LD_INT 2
36825: ARRAY
36826: PPUSH
36827: CALL_OW 488
36831: NOT
36832: PUSH
36833: LD_VAR 0 12
36837: PUSH
36838: LD_VAR 0 7
36842: ARRAY
36843: PUSH
36844: LD_INT 1
36846: ARRAY
36847: PPUSH
36848: LD_VAR 0 12
36852: PUSH
36853: LD_VAR 0 7
36857: ARRAY
36858: PUSH
36859: LD_INT 2
36861: ARRAY
36862: PPUSH
36863: CALL_OW 428
36867: PUSH
36868: LD_INT 0
36870: GREATER
36871: OR
36872: PUSH
36873: LD_VAR 0 12
36877: PUSH
36878: LD_VAR 0 7
36882: ARRAY
36883: PUSH
36884: LD_INT 1
36886: ARRAY
36887: PPUSH
36888: LD_VAR 0 12
36892: PUSH
36893: LD_VAR 0 7
36897: ARRAY
36898: PUSH
36899: LD_INT 2
36901: ARRAY
36902: PPUSH
36903: CALL_OW 351
36907: OR
36908: IFFALSE 36914
// exit ;
36910: POP
36911: POP
36912: GO 37206
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36914: LD_ADDR_VAR 0 8
36918: PUSH
36919: LD_VAR 0 12
36923: PUSH
36924: LD_VAR 0 7
36928: ARRAY
36929: PUSH
36930: LD_INT 1
36932: ARRAY
36933: PPUSH
36934: LD_VAR 0 12
36938: PUSH
36939: LD_VAR 0 7
36943: ARRAY
36944: PUSH
36945: LD_INT 2
36947: ARRAY
36948: PPUSH
36949: CALL_OW 546
36953: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36954: LD_VAR 0 8
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PUSH
36963: LD_VAR 0 8
36967: PUSH
36968: LD_INT 2
36970: ARRAY
36971: PUSH
36972: LD_VAR 0 13
36976: PUSH
36977: LD_INT 2
36979: PLUS
36980: GREATER
36981: OR
36982: PUSH
36983: LD_VAR 0 8
36987: PUSH
36988: LD_INT 2
36990: ARRAY
36991: PUSH
36992: LD_VAR 0 13
36996: PUSH
36997: LD_INT 2
36999: MINUS
37000: LESS
37001: OR
37002: PUSH
37003: LD_VAR 0 8
37007: PUSH
37008: LD_INT 3
37010: ARRAY
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 8
37017: PUSH
37018: LD_INT 9
37020: PUSH
37021: LD_INT 10
37023: PUSH
37024: LD_INT 11
37026: PUSH
37027: LD_INT 12
37029: PUSH
37030: LD_INT 13
37032: PUSH
37033: LD_INT 16
37035: PUSH
37036: LD_INT 17
37038: PUSH
37039: LD_INT 18
37041: PUSH
37042: LD_INT 19
37044: PUSH
37045: LD_INT 20
37047: PUSH
37048: LD_INT 21
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: IN
37066: NOT
37067: OR
37068: PUSH
37069: LD_VAR 0 8
37073: PUSH
37074: LD_INT 5
37076: ARRAY
37077: NOT
37078: OR
37079: PUSH
37080: LD_VAR 0 8
37084: PUSH
37085: LD_INT 6
37087: ARRAY
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 7
37097: PUSH
37098: LD_INT 9
37100: PUSH
37101: LD_INT 10
37103: PUSH
37104: LD_INT 11
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: IN
37115: NOT
37116: OR
37117: IFFALSE 37123
// exit ;
37119: POP
37120: POP
37121: GO 37206
// end ;
37123: GO 36794
37125: POP
37126: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37127: LD_VAR 0 9
37131: PPUSH
37132: LD_VAR 0 3
37136: PPUSH
37137: LD_VAR 0 4
37141: PPUSH
37142: LD_INT 20
37144: PPUSH
37145: CALL 29152 0 4
37149: PUSH
37150: LD_INT 4
37152: ARRAY
37153: IFFALSE 37157
// exit ;
37155: GO 37206
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37157: LD_VAR 0 2
37161: PUSH
37162: LD_INT 29
37164: PUSH
37165: LD_INT 30
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: IN
37172: PUSH
37173: LD_VAR 0 3
37177: PPUSH
37178: LD_VAR 0 4
37182: PPUSH
37183: LD_VAR 0 9
37187: PPUSH
37188: CALL_OW 440
37192: NOT
37193: AND
37194: IFFALSE 37198
// exit ;
37196: GO 37206
// result := true ;
37198: LD_ADDR_VAR 0 6
37202: PUSH
37203: LD_INT 1
37205: ST_TO_ADDR
// end ;
37206: LD_VAR 0 6
37210: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37211: LD_INT 0
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
37222: PPUSH
37223: PPUSH
37224: PPUSH
37225: PPUSH
37226: PPUSH
37227: PPUSH
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
37259: PPUSH
37260: PPUSH
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
// result = [ ] ;
37271: LD_ADDR_VAR 0 7
37275: PUSH
37276: EMPTY
37277: ST_TO_ADDR
// temp_list = [ ] ;
37278: LD_ADDR_VAR 0 9
37282: PUSH
37283: EMPTY
37284: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37285: LD_VAR 0 4
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: LD_INT 3
37301: PUSH
37302: LD_INT 4
37304: PUSH
37305: LD_INT 5
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: IN
37316: NOT
37317: PUSH
37318: LD_VAR 0 1
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: IN
37333: PUSH
37334: LD_VAR 0 5
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 3
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: IN
37353: NOT
37354: AND
37355: OR
37356: IFFALSE 37360
// exit ;
37358: GO 55751
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37360: LD_VAR 0 1
37364: PUSH
37365: LD_INT 6
37367: PUSH
37368: LD_INT 7
37370: PUSH
37371: LD_INT 8
37373: PUSH
37374: LD_INT 13
37376: PUSH
37377: LD_INT 12
37379: PUSH
37380: LD_INT 15
37382: PUSH
37383: LD_INT 11
37385: PUSH
37386: LD_INT 14
37388: PUSH
37389: LD_INT 10
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: IN
37403: IFFALSE 37413
// btype = b_lab ;
37405: LD_ADDR_VAR 0 1
37409: PUSH
37410: LD_INT 6
37412: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37413: LD_VAR 0 6
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: IN
37432: NOT
37433: PUSH
37434: LD_VAR 0 1
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 3
37450: PUSH
37451: LD_INT 6
37453: PUSH
37454: LD_INT 36
37456: PUSH
37457: LD_INT 4
37459: PUSH
37460: LD_INT 5
37462: PUSH
37463: LD_INT 31
37465: PUSH
37466: LD_INT 32
37468: PUSH
37469: LD_INT 33
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: IN
37485: NOT
37486: PUSH
37487: LD_VAR 0 6
37491: PUSH
37492: LD_INT 1
37494: EQUAL
37495: AND
37496: OR
37497: PUSH
37498: LD_VAR 0 1
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: IN
37513: NOT
37514: PUSH
37515: LD_VAR 0 6
37519: PUSH
37520: LD_INT 2
37522: EQUAL
37523: AND
37524: OR
37525: IFFALSE 37535
// mode = 0 ;
37527: LD_ADDR_VAR 0 6
37531: PUSH
37532: LD_INT 0
37534: ST_TO_ADDR
// case mode of 0 :
37535: LD_VAR 0 6
37539: PUSH
37540: LD_INT 0
37542: DOUBLE
37543: EQUAL
37544: IFTRUE 37548
37546: GO 49001
37548: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37549: LD_ADDR_VAR 0 11
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: LD_INT 2
37634: NEG
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: LD_INT 2
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: LD_INT 3
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37742: LD_ADDR_VAR 0 12
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37938: LD_ADDR_VAR 0 13
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: LD_INT 3
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: NEG
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 3
38109: NEG
38110: PUSH
38111: LD_INT 3
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38137: LD_ADDR_VAR 0 14
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: LD_INT 3
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 3
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38333: LD_ADDR_VAR 0 15
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: NEG
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 3
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 3
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38526: LD_ADDR_VAR 0 16
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: LD_INT 2
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 2
38649: NEG
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: LD_INT 2
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 3
38683: PUSH
38684: LD_INT 3
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 3
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38719: LD_ADDR_VAR 0 17
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 1
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 1
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 2
38895: NEG
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38949: LD_ADDR_VAR 0 18
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 2
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39179: LD_ADDR_VAR 0 19
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39409: LD_ADDR_VAR 0 20
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 2
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39639: LD_ADDR_VAR 0 21
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: NEG
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39869: LD_ADDR_VAR 0 22
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: LD_INT 2
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40099: LD_ADDR_VAR 0 23
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: NEG
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: LD_INT 3
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 3
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40379: LD_ADDR_VAR 0 24
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 2
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: LD_INT 2
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 3
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40655: LD_ADDR_VAR 0 25
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 3
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 3
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 3
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40929: LD_ADDR_VAR 0 26
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: NEG
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: LD_INT 2
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: LD_INT 3
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 3
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: NEG
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41205: LD_ADDR_VAR 0 27
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 3
41438: NEG
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: LD_INT 2
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41485: LD_ADDR_VAR 0 28
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: LD_INT 3
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 3
41732: NEG
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41767: LD_ADDR_VAR 0 29
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: LD_INT 3
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 3
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 3
42011: NEG
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42046: LD_ADDR_VAR 0 30
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 3
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: LD_INT 3
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 3
42289: NEG
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42324: LD_ADDR_VAR 0 31
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 3
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 3
42567: NEG
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42602: LD_ADDR_VAR 0 32
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 3
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 3
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42880: LD_ADDR_VAR 0 33
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: LD_INT 3
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 3
43124: NEG
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43159: LD_ADDR_VAR 0 34
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 3
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 3
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43439: LD_ADDR_VAR 0 35
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43551: LD_ADDR_VAR 0 36
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43663: LD_ADDR_VAR 0 37
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43775: LD_ADDR_VAR 0 38
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43887: LD_ADDR_VAR 0 39
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43999: LD_ADDR_VAR 0 40
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44111: LD_ADDR_VAR 0 41
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: LD_INT 3
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 3
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 3
44385: NEG
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 3
44396: NEG
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 3
44408: NEG
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 3
44420: NEG
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44461: LD_ADDR_VAR 0 42
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 3
44707: PUSH
44708: LD_INT 3
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 3
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 3
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 3
44758: NEG
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: LD_INT 3
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44811: LD_ADDR_VAR 0 43
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 3
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 3
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 3
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 3
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 3
45107: NEG
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45159: LD_ADDR_VAR 0 44
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: LD_INT 3
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 3
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 3
45402: PUSH
45403: LD_INT 3
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 3
45433: NEG
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 3
45468: NEG
45469: PUSH
45470: LD_INT 3
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45509: LD_ADDR_VAR 0 45
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 3
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 3
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 3
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 3
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 3
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: NEG
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45859: LD_ADDR_VAR 0 46
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 3
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46207: LD_ADDR_VAR 0 47
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46358: LD_ADDR_VAR 0 48
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46505: LD_ADDR_VAR 0 49
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46649: LD_ADDR_VAR 0 50
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46793: LD_ADDR_VAR 0 51
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46940: LD_ADDR_VAR 0 52
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47091: LD_ADDR_VAR 0 53
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47321: LD_ADDR_VAR 0 54
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47551: LD_ADDR_VAR 0 55
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47781: LD_ADDR_VAR 0 56
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48011: LD_ADDR_VAR 0 57
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48241: LD_ADDR_VAR 0 58
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48471: LD_ADDR_VAR 0 59
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48559: LD_ADDR_VAR 0 60
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48647: LD_ADDR_VAR 0 61
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48735: LD_ADDR_VAR 0 62
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48823: LD_ADDR_VAR 0 63
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48911: LD_ADDR_VAR 0 64
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: ST_TO_ADDR
// end ; 1 :
48999: GO 54896
49001: LD_INT 1
49003: DOUBLE
49004: EQUAL
49005: IFTRUE 49009
49007: GO 51632
49009: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49010: LD_ADDR_VAR 0 11
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 3
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 3
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49054: LD_ADDR_VAR 0 12
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: LIST
49094: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49095: LD_ADDR_VAR 0 13
49099: PUSH
49100: LD_INT 3
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 3
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 3
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: LIST
49134: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49135: LD_ADDR_VAR 0 14
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 3
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 3
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49176: LD_ADDR_VAR 0 15
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 3
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49220: LD_ADDR_VAR 0 16
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 3
49239: NEG
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 3
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49266: LD_ADDR_VAR 0 17
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 3
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 3
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49310: LD_ADDR_VAR 0 18
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49351: LD_ADDR_VAR 0 19
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 3
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 3
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49391: LD_ADDR_VAR 0 20
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49432: LD_ADDR_VAR 0 21
49436: PUSH
49437: LD_INT 2
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: NEG
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49476: LD_ADDR_VAR 0 22
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49522: LD_ADDR_VAR 0 23
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 4
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 3
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49566: LD_ADDR_VAR 0 24
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 4
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: LIST
49606: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49607: LD_ADDR_VAR 0 25
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: LD_INT 3
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 4
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: LD_INT 4
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49647: LD_ADDR_VAR 0 26
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 4
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 3
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49688: LD_ADDR_VAR 0 27
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 3
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 4
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: LIST
49731: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49732: LD_ADDR_VAR 0 28
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: LD_INT 3
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: NEG
49752: PUSH
49753: LD_INT 4
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 4
49763: NEG
49764: PUSH
49765: LD_INT 3
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: LIST
49777: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49778: LD_ADDR_VAR 0 29
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 3
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 4
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 4
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: LD_INT 5
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 5
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 4
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 6
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 6
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 5
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49933: LD_ADDR_VAR 0 30
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 3
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 4
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 4
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 4
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 5
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 5
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 5
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 6
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 6
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50076: LD_ADDR_VAR 0 31
50080: PUSH
50081: LD_INT 3
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 3
50093: PUSH
50094: LD_INT 3
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 4
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 4
50123: PUSH
50124: LD_INT 4
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 5
50143: PUSH
50144: LD_INT 4
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 5
50153: PUSH
50154: LD_INT 5
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 4
50163: PUSH
50164: LD_INT 5
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 6
50173: PUSH
50174: LD_INT 5
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 6
50183: PUSH
50184: LD_INT 6
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 5
50193: PUSH
50194: LD_INT 6
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50215: LD_ADDR_VAR 0 32
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 4
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 4
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 5
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 5
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 4
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: LD_INT 6
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 6
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 5
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50358: LD_ADDR_VAR 0 33
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 3
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 4
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 4
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 4
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 5
50444: NEG
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 5
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 5
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 6
50478: NEG
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 6
50489: NEG
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50513: LD_ADDR_VAR 0 34
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 3
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: LD_INT 3
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: LD_INT 4
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 4
50568: NEG
50569: PUSH
50570: LD_INT 3
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 4
50580: NEG
50581: PUSH
50582: LD_INT 4
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 4
50592: NEG
50593: PUSH
50594: LD_INT 5
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 5
50604: NEG
50605: PUSH
50606: LD_INT 4
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 5
50616: NEG
50617: PUSH
50618: LD_INT 5
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 5
50628: NEG
50629: PUSH
50630: LD_INT 6
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 6
50640: NEG
50641: PUSH
50642: LD_INT 5
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 6
50652: NEG
50653: PUSH
50654: LD_INT 6
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50676: LD_ADDR_VAR 0 41
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 3
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50720: LD_ADDR_VAR 0 42
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50761: LD_ADDR_VAR 0 43
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50801: LD_ADDR_VAR 0 44
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50842: LD_ADDR_VAR 0 45
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 3
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: LIST
50885: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50886: LD_ADDR_VAR 0 46
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50932: LD_ADDR_VAR 0 47
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 3
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50965: LD_ADDR_VAR 0 48
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50996: LD_ADDR_VAR 0 49
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51025: LD_ADDR_VAR 0 50
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51054: LD_ADDR_VAR 0 51
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51085: LD_ADDR_VAR 0 52
51089: PUSH
51090: LD_INT 3
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51118: LD_ADDR_VAR 0 53
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 3
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51162: LD_ADDR_VAR 0 54
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51203: LD_ADDR_VAR 0 55
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51243: LD_ADDR_VAR 0 56
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51284: LD_ADDR_VAR 0 57
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: NEG
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51328: LD_ADDR_VAR 0 58
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: LIST
51373: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51374: LD_ADDR_VAR 0 59
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51418: LD_ADDR_VAR 0 60
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51459: LD_ADDR_VAR 0 61
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51499: LD_ADDR_VAR 0 62
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51540: LD_ADDR_VAR 0 63
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: LIST
51583: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51584: LD_ADDR_VAR 0 64
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: ST_TO_ADDR
// end ; 2 :
51630: GO 54896
51632: LD_INT 2
51634: DOUBLE
51635: EQUAL
51636: IFTRUE 51640
51638: GO 54895
51640: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51641: LD_ADDR_VAR 0 29
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 4
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 5
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 5
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 4
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 5
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 3
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 4
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 4
51771: PUSH
51772: LD_INT 4
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 3
51781: PUSH
51782: LD_INT 4
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 4
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 4
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 4
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 4
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 5
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 5
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 4
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 5
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 3
51924: NEG
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 4
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 4
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 4
52026: NEG
52027: PUSH
52028: LD_INT 4
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 4
52038: NEG
52039: PUSH
52040: LD_INT 5
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: LD_INT 4
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 4
52074: NEG
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 5
52086: NEG
52087: PUSH
52088: LD_INT 4
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 5
52098: NEG
52099: PUSH
52100: LD_INT 5
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: LD_INT 5
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 5
52122: NEG
52123: PUSH
52124: LD_INT 3
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52179: LD_ADDR_VAR 0 30
52183: PUSH
52184: LD_INT 4
52186: PUSH
52187: LD_INT 4
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 4
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 5
52206: PUSH
52207: LD_INT 4
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 5
52216: PUSH
52217: LD_INT 5
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 4
52226: PUSH
52227: LD_INT 5
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: LD_INT 4
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 3
52246: PUSH
52247: LD_INT 3
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 5
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: LD_INT 5
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 3
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: LD_INT 4
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 4
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 4
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 4
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 4
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 4
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 5
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 5
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 5
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: NEG
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: LD_INT 4
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 3
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: NEG
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 4
52531: NEG
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 4
52543: NEG
52544: PUSH
52545: LD_INT 4
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: LD_INT 4
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 4
52567: NEG
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 4
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 5
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 4
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 4
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 5
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: LD_INT 5
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52726: LD_ADDR_VAR 0 31
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 4
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 4
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 5
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 5
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 4
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 5
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 3
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 4
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 4
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 4
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: LD_INT 4
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 4
52940: NEG
52941: PUSH
52942: LD_INT 5
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: LD_INT 4
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: NEG
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 4
52976: NEG
52977: PUSH
52978: LD_INT 3
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 5
52988: NEG
52989: PUSH
52990: LD_INT 4
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 5
53000: NEG
53001: PUSH
53002: LD_INT 5
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: LD_INT 5
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 5
53024: NEG
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 4
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 3
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 4
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: LD_INT 4
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 4
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 4
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 5
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 5
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 5
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53276: LD_ADDR_VAR 0 32
53280: PUSH
53281: LD_INT 4
53283: NEG
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 4
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 4
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 5
53339: NEG
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 5
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 5
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: NEG
53398: PUSH
53399: LD_INT 4
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: LD_INT 3
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 4
53445: NEG
53446: PUSH
53447: LD_INT 3
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 4
53457: NEG
53458: PUSH
53459: LD_INT 4
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: LD_INT 4
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 4
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 4
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 5
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 3
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 3
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: LD_INT 4
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 5
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 3
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: LD_INT 5
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 3
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 4
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 4
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 4
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 4
53688: PUSH
53689: LD_INT 4
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 4
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 5
53708: PUSH
53709: LD_INT 4
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 5
53718: PUSH
53719: LD_INT 5
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 4
53728: PUSH
53729: LD_INT 5
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: PUSH
53739: LD_INT 4
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 5
53758: PUSH
53759: LD_INT 3
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: LD_INT 5
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53823: LD_ADDR_VAR 0 33
53827: PUSH
53828: LD_INT 4
53830: NEG
53831: PUSH
53832: LD_INT 4
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 4
53842: NEG
53843: PUSH
53844: LD_INT 5
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: NEG
53855: PUSH
53856: LD_INT 4
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: LD_INT 3
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 4
53878: NEG
53879: PUSH
53880: LD_INT 3
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 5
53890: NEG
53891: PUSH
53892: LD_INT 4
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 5
53902: NEG
53903: PUSH
53904: LD_INT 5
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 5
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 5
53926: NEG
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 4
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 4
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: LD_INT 4
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 4
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 4
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 5
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 5
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 4
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 5
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 3
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 4
54153: PUSH
54154: LD_INT 3
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 4
54163: PUSH
54164: LD_INT 4
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: LD_INT 4
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 4
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 4
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 4
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 4
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 5
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 5
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 4
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: LD_INT 5
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: NEG
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54361: LD_ADDR_VAR 0 34
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 4
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 5
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 4
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 5
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: LD_INT 5
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 3
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 4
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 4
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 4
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 4
54563: PUSH
54564: LD_INT 4
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 4
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 5
54583: PUSH
54584: LD_INT 4
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 5
54593: PUSH
54594: LD_INT 5
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 4
54603: PUSH
54604: LD_INT 5
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: LD_INT 4
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: LD_INT 3
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 5
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: LD_INT 5
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 3
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 4
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 4
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 3
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 4
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 4
54746: NEG
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 3
54769: NEG
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 4
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 5
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 5
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 5
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// end ; end ;
54893: GO 54896
54895: POP
// case btype of b_depot , b_warehouse :
54896: LD_VAR 0 1
54900: PUSH
54901: LD_INT 0
54903: DOUBLE
54904: EQUAL
54905: IFTRUE 54915
54907: LD_INT 1
54909: DOUBLE
54910: EQUAL
54911: IFTRUE 54915
54913: GO 55116
54915: POP
// case nation of nation_american :
54916: LD_VAR 0 5
54920: PUSH
54921: LD_INT 1
54923: DOUBLE
54924: EQUAL
54925: IFTRUE 54929
54927: GO 54985
54929: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54930: LD_ADDR_VAR 0 9
54934: PUSH
54935: LD_VAR 0 11
54939: PUSH
54940: LD_VAR 0 12
54944: PUSH
54945: LD_VAR 0 13
54949: PUSH
54950: LD_VAR 0 14
54954: PUSH
54955: LD_VAR 0 15
54959: PUSH
54960: LD_VAR 0 16
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: PUSH
54973: LD_VAR 0 4
54977: PUSH
54978: LD_INT 1
54980: PLUS
54981: ARRAY
54982: ST_TO_ADDR
54983: GO 55114
54985: LD_INT 2
54987: DOUBLE
54988: EQUAL
54989: IFTRUE 54993
54991: GO 55049
54993: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54994: LD_ADDR_VAR 0 9
54998: PUSH
54999: LD_VAR 0 17
55003: PUSH
55004: LD_VAR 0 18
55008: PUSH
55009: LD_VAR 0 19
55013: PUSH
55014: LD_VAR 0 20
55018: PUSH
55019: LD_VAR 0 21
55023: PUSH
55024: LD_VAR 0 22
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: LD_VAR 0 4
55041: PUSH
55042: LD_INT 1
55044: PLUS
55045: ARRAY
55046: ST_TO_ADDR
55047: GO 55114
55049: LD_INT 3
55051: DOUBLE
55052: EQUAL
55053: IFTRUE 55057
55055: GO 55113
55057: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55058: LD_ADDR_VAR 0 9
55062: PUSH
55063: LD_VAR 0 23
55067: PUSH
55068: LD_VAR 0 24
55072: PUSH
55073: LD_VAR 0 25
55077: PUSH
55078: LD_VAR 0 26
55082: PUSH
55083: LD_VAR 0 27
55087: PUSH
55088: LD_VAR 0 28
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: PUSH
55101: LD_VAR 0 4
55105: PUSH
55106: LD_INT 1
55108: PLUS
55109: ARRAY
55110: ST_TO_ADDR
55111: GO 55114
55113: POP
55114: GO 55669
55116: LD_INT 2
55118: DOUBLE
55119: EQUAL
55120: IFTRUE 55130
55122: LD_INT 3
55124: DOUBLE
55125: EQUAL
55126: IFTRUE 55130
55128: GO 55186
55130: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55131: LD_ADDR_VAR 0 9
55135: PUSH
55136: LD_VAR 0 29
55140: PUSH
55141: LD_VAR 0 30
55145: PUSH
55146: LD_VAR 0 31
55150: PUSH
55151: LD_VAR 0 32
55155: PUSH
55156: LD_VAR 0 33
55160: PUSH
55161: LD_VAR 0 34
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: PUSH
55174: LD_VAR 0 4
55178: PUSH
55179: LD_INT 1
55181: PLUS
55182: ARRAY
55183: ST_TO_ADDR
55184: GO 55669
55186: LD_INT 16
55188: DOUBLE
55189: EQUAL
55190: IFTRUE 55248
55192: LD_INT 17
55194: DOUBLE
55195: EQUAL
55196: IFTRUE 55248
55198: LD_INT 18
55200: DOUBLE
55201: EQUAL
55202: IFTRUE 55248
55204: LD_INT 19
55206: DOUBLE
55207: EQUAL
55208: IFTRUE 55248
55210: LD_INT 22
55212: DOUBLE
55213: EQUAL
55214: IFTRUE 55248
55216: LD_INT 20
55218: DOUBLE
55219: EQUAL
55220: IFTRUE 55248
55222: LD_INT 21
55224: DOUBLE
55225: EQUAL
55226: IFTRUE 55248
55228: LD_INT 23
55230: DOUBLE
55231: EQUAL
55232: IFTRUE 55248
55234: LD_INT 24
55236: DOUBLE
55237: EQUAL
55238: IFTRUE 55248
55240: LD_INT 25
55242: DOUBLE
55243: EQUAL
55244: IFTRUE 55248
55246: GO 55304
55248: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55249: LD_ADDR_VAR 0 9
55253: PUSH
55254: LD_VAR 0 35
55258: PUSH
55259: LD_VAR 0 36
55263: PUSH
55264: LD_VAR 0 37
55268: PUSH
55269: LD_VAR 0 38
55273: PUSH
55274: LD_VAR 0 39
55278: PUSH
55279: LD_VAR 0 40
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: PUSH
55292: LD_VAR 0 4
55296: PUSH
55297: LD_INT 1
55299: PLUS
55300: ARRAY
55301: ST_TO_ADDR
55302: GO 55669
55304: LD_INT 6
55306: DOUBLE
55307: EQUAL
55308: IFTRUE 55360
55310: LD_INT 7
55312: DOUBLE
55313: EQUAL
55314: IFTRUE 55360
55316: LD_INT 8
55318: DOUBLE
55319: EQUAL
55320: IFTRUE 55360
55322: LD_INT 13
55324: DOUBLE
55325: EQUAL
55326: IFTRUE 55360
55328: LD_INT 12
55330: DOUBLE
55331: EQUAL
55332: IFTRUE 55360
55334: LD_INT 15
55336: DOUBLE
55337: EQUAL
55338: IFTRUE 55360
55340: LD_INT 11
55342: DOUBLE
55343: EQUAL
55344: IFTRUE 55360
55346: LD_INT 14
55348: DOUBLE
55349: EQUAL
55350: IFTRUE 55360
55352: LD_INT 10
55354: DOUBLE
55355: EQUAL
55356: IFTRUE 55360
55358: GO 55416
55360: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55361: LD_ADDR_VAR 0 9
55365: PUSH
55366: LD_VAR 0 41
55370: PUSH
55371: LD_VAR 0 42
55375: PUSH
55376: LD_VAR 0 43
55380: PUSH
55381: LD_VAR 0 44
55385: PUSH
55386: LD_VAR 0 45
55390: PUSH
55391: LD_VAR 0 46
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: PUSH
55404: LD_VAR 0 4
55408: PUSH
55409: LD_INT 1
55411: PLUS
55412: ARRAY
55413: ST_TO_ADDR
55414: GO 55669
55416: LD_INT 36
55418: DOUBLE
55419: EQUAL
55420: IFTRUE 55424
55422: GO 55480
55424: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55425: LD_ADDR_VAR 0 9
55429: PUSH
55430: LD_VAR 0 47
55434: PUSH
55435: LD_VAR 0 48
55439: PUSH
55440: LD_VAR 0 49
55444: PUSH
55445: LD_VAR 0 50
55449: PUSH
55450: LD_VAR 0 51
55454: PUSH
55455: LD_VAR 0 52
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: PUSH
55468: LD_VAR 0 4
55472: PUSH
55473: LD_INT 1
55475: PLUS
55476: ARRAY
55477: ST_TO_ADDR
55478: GO 55669
55480: LD_INT 4
55482: DOUBLE
55483: EQUAL
55484: IFTRUE 55506
55486: LD_INT 5
55488: DOUBLE
55489: EQUAL
55490: IFTRUE 55506
55492: LD_INT 34
55494: DOUBLE
55495: EQUAL
55496: IFTRUE 55506
55498: LD_INT 37
55500: DOUBLE
55501: EQUAL
55502: IFTRUE 55506
55504: GO 55562
55506: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55507: LD_ADDR_VAR 0 9
55511: PUSH
55512: LD_VAR 0 53
55516: PUSH
55517: LD_VAR 0 54
55521: PUSH
55522: LD_VAR 0 55
55526: PUSH
55527: LD_VAR 0 56
55531: PUSH
55532: LD_VAR 0 57
55536: PUSH
55537: LD_VAR 0 58
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: PUSH
55550: LD_VAR 0 4
55554: PUSH
55555: LD_INT 1
55557: PLUS
55558: ARRAY
55559: ST_TO_ADDR
55560: GO 55669
55562: LD_INT 31
55564: DOUBLE
55565: EQUAL
55566: IFTRUE 55612
55568: LD_INT 32
55570: DOUBLE
55571: EQUAL
55572: IFTRUE 55612
55574: LD_INT 33
55576: DOUBLE
55577: EQUAL
55578: IFTRUE 55612
55580: LD_INT 27
55582: DOUBLE
55583: EQUAL
55584: IFTRUE 55612
55586: LD_INT 26
55588: DOUBLE
55589: EQUAL
55590: IFTRUE 55612
55592: LD_INT 28
55594: DOUBLE
55595: EQUAL
55596: IFTRUE 55612
55598: LD_INT 29
55600: DOUBLE
55601: EQUAL
55602: IFTRUE 55612
55604: LD_INT 30
55606: DOUBLE
55607: EQUAL
55608: IFTRUE 55612
55610: GO 55668
55612: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55613: LD_ADDR_VAR 0 9
55617: PUSH
55618: LD_VAR 0 59
55622: PUSH
55623: LD_VAR 0 60
55627: PUSH
55628: LD_VAR 0 61
55632: PUSH
55633: LD_VAR 0 62
55637: PUSH
55638: LD_VAR 0 63
55642: PUSH
55643: LD_VAR 0 64
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: PUSH
55656: LD_VAR 0 4
55660: PUSH
55661: LD_INT 1
55663: PLUS
55664: ARRAY
55665: ST_TO_ADDR
55666: GO 55669
55668: POP
// temp_list2 = [ ] ;
55669: LD_ADDR_VAR 0 10
55673: PUSH
55674: EMPTY
55675: ST_TO_ADDR
// for i in temp_list do
55676: LD_ADDR_VAR 0 8
55680: PUSH
55681: LD_VAR 0 9
55685: PUSH
55686: FOR_IN
55687: IFFALSE 55739
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55689: LD_ADDR_VAR 0 10
55693: PUSH
55694: LD_VAR 0 10
55698: PUSH
55699: LD_VAR 0 8
55703: PUSH
55704: LD_INT 1
55706: ARRAY
55707: PUSH
55708: LD_VAR 0 2
55712: PLUS
55713: PUSH
55714: LD_VAR 0 8
55718: PUSH
55719: LD_INT 2
55721: ARRAY
55722: PUSH
55723: LD_VAR 0 3
55727: PLUS
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: ADD
55736: ST_TO_ADDR
55737: GO 55686
55739: POP
55740: POP
// result = temp_list2 ;
55741: LD_ADDR_VAR 0 7
55745: PUSH
55746: LD_VAR 0 10
55750: ST_TO_ADDR
// end ;
55751: LD_VAR 0 7
55755: RET
// export function EnemyInRange ( unit , dist ) ; begin
55756: LD_INT 0
55758: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55759: LD_ADDR_VAR 0 3
55763: PUSH
55764: LD_VAR 0 1
55768: PPUSH
55769: CALL_OW 255
55773: PPUSH
55774: LD_VAR 0 1
55778: PPUSH
55779: CALL_OW 250
55783: PPUSH
55784: LD_VAR 0 1
55788: PPUSH
55789: CALL_OW 251
55793: PPUSH
55794: LD_VAR 0 2
55798: PPUSH
55799: CALL 29152 0 4
55803: PUSH
55804: LD_INT 4
55806: ARRAY
55807: ST_TO_ADDR
// end ;
55808: LD_VAR 0 3
55812: RET
// export function PlayerSeeMe ( unit ) ; begin
55813: LD_INT 0
55815: PPUSH
// result := See ( your_side , unit ) ;
55816: LD_ADDR_VAR 0 2
55820: PUSH
55821: LD_OWVAR 2
55825: PPUSH
55826: LD_VAR 0 1
55830: PPUSH
55831: CALL_OW 292
55835: ST_TO_ADDR
// end ;
55836: LD_VAR 0 2
55840: RET
// export function ReverseDir ( unit ) ; begin
55841: LD_INT 0
55843: PPUSH
// if not unit then
55844: LD_VAR 0 1
55848: NOT
55849: IFFALSE 55853
// exit ;
55851: GO 55876
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55853: LD_ADDR_VAR 0 2
55857: PUSH
55858: LD_VAR 0 1
55862: PPUSH
55863: CALL_OW 254
55867: PUSH
55868: LD_INT 3
55870: PLUS
55871: PUSH
55872: LD_INT 6
55874: MOD
55875: ST_TO_ADDR
// end ;
55876: LD_VAR 0 2
55880: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55881: LD_INT 0
55883: PPUSH
55884: PPUSH
55885: PPUSH
55886: PPUSH
55887: PPUSH
// if not hexes then
55888: LD_VAR 0 2
55892: NOT
55893: IFFALSE 55897
// exit ;
55895: GO 56045
// dist := 9999 ;
55897: LD_ADDR_VAR 0 5
55901: PUSH
55902: LD_INT 9999
55904: ST_TO_ADDR
// for i = 1 to hexes do
55905: LD_ADDR_VAR 0 4
55909: PUSH
55910: DOUBLE
55911: LD_INT 1
55913: DEC
55914: ST_TO_ADDR
55915: LD_VAR 0 2
55919: PUSH
55920: FOR_TO
55921: IFFALSE 56033
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55923: LD_VAR 0 1
55927: PPUSH
55928: LD_VAR 0 2
55932: PUSH
55933: LD_VAR 0 4
55937: ARRAY
55938: PUSH
55939: LD_INT 1
55941: ARRAY
55942: PPUSH
55943: LD_VAR 0 2
55947: PUSH
55948: LD_VAR 0 4
55952: ARRAY
55953: PUSH
55954: LD_INT 2
55956: ARRAY
55957: PPUSH
55958: CALL_OW 297
55962: PUSH
55963: LD_VAR 0 5
55967: LESS
55968: IFFALSE 56031
// begin hex := hexes [ i ] ;
55970: LD_ADDR_VAR 0 7
55974: PUSH
55975: LD_VAR 0 2
55979: PUSH
55980: LD_VAR 0 4
55984: ARRAY
55985: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55986: LD_ADDR_VAR 0 5
55990: PUSH
55991: LD_VAR 0 1
55995: PPUSH
55996: LD_VAR 0 2
56000: PUSH
56001: LD_VAR 0 4
56005: ARRAY
56006: PUSH
56007: LD_INT 1
56009: ARRAY
56010: PPUSH
56011: LD_VAR 0 2
56015: PUSH
56016: LD_VAR 0 4
56020: ARRAY
56021: PUSH
56022: LD_INT 2
56024: ARRAY
56025: PPUSH
56026: CALL_OW 297
56030: ST_TO_ADDR
// end ; end ;
56031: GO 55920
56033: POP
56034: POP
// result := hex ;
56035: LD_ADDR_VAR 0 3
56039: PUSH
56040: LD_VAR 0 7
56044: ST_TO_ADDR
// end ;
56045: LD_VAR 0 3
56049: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56050: LD_INT 0
56052: PPUSH
56053: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56054: LD_VAR 0 1
56058: NOT
56059: PUSH
56060: LD_VAR 0 1
56064: PUSH
56065: LD_INT 21
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 23
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PPUSH
56089: CALL_OW 69
56093: IN
56094: NOT
56095: OR
56096: IFFALSE 56100
// exit ;
56098: GO 56147
// for i = 1 to 3 do
56100: LD_ADDR_VAR 0 3
56104: PUSH
56105: DOUBLE
56106: LD_INT 1
56108: DEC
56109: ST_TO_ADDR
56110: LD_INT 3
56112: PUSH
56113: FOR_TO
56114: IFFALSE 56145
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56116: LD_VAR 0 1
56120: PPUSH
56121: CALL_OW 250
56125: PPUSH
56126: LD_VAR 0 1
56130: PPUSH
56131: CALL_OW 251
56135: PPUSH
56136: LD_INT 1
56138: PPUSH
56139: CALL_OW 453
56143: GO 56113
56145: POP
56146: POP
// end ;
56147: LD_VAR 0 2
56151: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56152: LD_INT 0
56154: PPUSH
56155: PPUSH
56156: PPUSH
56157: PPUSH
56158: PPUSH
56159: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56160: LD_VAR 0 1
56164: NOT
56165: PUSH
56166: LD_VAR 0 2
56170: NOT
56171: OR
56172: PUSH
56173: LD_VAR 0 1
56177: PPUSH
56178: CALL_OW 314
56182: OR
56183: IFFALSE 56187
// exit ;
56185: GO 56628
// x := GetX ( enemy_unit ) ;
56187: LD_ADDR_VAR 0 7
56191: PUSH
56192: LD_VAR 0 2
56196: PPUSH
56197: CALL_OW 250
56201: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56202: LD_ADDR_VAR 0 8
56206: PUSH
56207: LD_VAR 0 2
56211: PPUSH
56212: CALL_OW 251
56216: ST_TO_ADDR
// if not x or not y then
56217: LD_VAR 0 7
56221: NOT
56222: PUSH
56223: LD_VAR 0 8
56227: NOT
56228: OR
56229: IFFALSE 56233
// exit ;
56231: GO 56628
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56233: LD_ADDR_VAR 0 6
56237: PUSH
56238: LD_VAR 0 7
56242: PPUSH
56243: LD_INT 0
56245: PPUSH
56246: LD_INT 4
56248: PPUSH
56249: CALL_OW 272
56253: PUSH
56254: LD_VAR 0 8
56258: PPUSH
56259: LD_INT 0
56261: PPUSH
56262: LD_INT 4
56264: PPUSH
56265: CALL_OW 273
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_VAR 0 7
56278: PPUSH
56279: LD_INT 1
56281: PPUSH
56282: LD_INT 4
56284: PPUSH
56285: CALL_OW 272
56289: PUSH
56290: LD_VAR 0 8
56294: PPUSH
56295: LD_INT 1
56297: PPUSH
56298: LD_INT 4
56300: PPUSH
56301: CALL_OW 273
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_VAR 0 7
56314: PPUSH
56315: LD_INT 2
56317: PPUSH
56318: LD_INT 4
56320: PPUSH
56321: CALL_OW 272
56325: PUSH
56326: LD_VAR 0 8
56330: PPUSH
56331: LD_INT 2
56333: PPUSH
56334: LD_INT 4
56336: PPUSH
56337: CALL_OW 273
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_VAR 0 7
56350: PPUSH
56351: LD_INT 3
56353: PPUSH
56354: LD_INT 4
56356: PPUSH
56357: CALL_OW 272
56361: PUSH
56362: LD_VAR 0 8
56366: PPUSH
56367: LD_INT 3
56369: PPUSH
56370: LD_INT 4
56372: PPUSH
56373: CALL_OW 273
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_VAR 0 7
56386: PPUSH
56387: LD_INT 4
56389: PPUSH
56390: LD_INT 4
56392: PPUSH
56393: CALL_OW 272
56397: PUSH
56398: LD_VAR 0 8
56402: PPUSH
56403: LD_INT 4
56405: PPUSH
56406: LD_INT 4
56408: PPUSH
56409: CALL_OW 273
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_VAR 0 7
56422: PPUSH
56423: LD_INT 5
56425: PPUSH
56426: LD_INT 4
56428: PPUSH
56429: CALL_OW 272
56433: PUSH
56434: LD_VAR 0 8
56438: PPUSH
56439: LD_INT 5
56441: PPUSH
56442: LD_INT 4
56444: PPUSH
56445: CALL_OW 273
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// for i = tmp downto 1 do
56462: LD_ADDR_VAR 0 4
56466: PUSH
56467: DOUBLE
56468: LD_VAR 0 6
56472: INC
56473: ST_TO_ADDR
56474: LD_INT 1
56476: PUSH
56477: FOR_DOWNTO
56478: IFFALSE 56579
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56480: LD_VAR 0 6
56484: PUSH
56485: LD_VAR 0 4
56489: ARRAY
56490: PUSH
56491: LD_INT 1
56493: ARRAY
56494: PPUSH
56495: LD_VAR 0 6
56499: PUSH
56500: LD_VAR 0 4
56504: ARRAY
56505: PUSH
56506: LD_INT 2
56508: ARRAY
56509: PPUSH
56510: CALL_OW 488
56514: NOT
56515: PUSH
56516: LD_VAR 0 6
56520: PUSH
56521: LD_VAR 0 4
56525: ARRAY
56526: PUSH
56527: LD_INT 1
56529: ARRAY
56530: PPUSH
56531: LD_VAR 0 6
56535: PUSH
56536: LD_VAR 0 4
56540: ARRAY
56541: PUSH
56542: LD_INT 2
56544: ARRAY
56545: PPUSH
56546: CALL_OW 428
56550: PUSH
56551: LD_INT 0
56553: NONEQUAL
56554: OR
56555: IFFALSE 56577
// tmp := Delete ( tmp , i ) ;
56557: LD_ADDR_VAR 0 6
56561: PUSH
56562: LD_VAR 0 6
56566: PPUSH
56567: LD_VAR 0 4
56571: PPUSH
56572: CALL_OW 3
56576: ST_TO_ADDR
56577: GO 56477
56579: POP
56580: POP
// j := GetClosestHex ( unit , tmp ) ;
56581: LD_ADDR_VAR 0 5
56585: PUSH
56586: LD_VAR 0 1
56590: PPUSH
56591: LD_VAR 0 6
56595: PPUSH
56596: CALL 55881 0 2
56600: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56601: LD_VAR 0 1
56605: PPUSH
56606: LD_VAR 0 5
56610: PUSH
56611: LD_INT 1
56613: ARRAY
56614: PPUSH
56615: LD_VAR 0 5
56619: PUSH
56620: LD_INT 2
56622: ARRAY
56623: PPUSH
56624: CALL_OW 111
// end ;
56628: LD_VAR 0 3
56632: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56633: LD_INT 0
56635: PPUSH
56636: PPUSH
56637: PPUSH
// uc_side = 0 ;
56638: LD_ADDR_OWVAR 20
56642: PUSH
56643: LD_INT 0
56645: ST_TO_ADDR
// uc_nation = 0 ;
56646: LD_ADDR_OWVAR 21
56650: PUSH
56651: LD_INT 0
56653: ST_TO_ADDR
// InitHc_All ( ) ;
56654: CALL_OW 584
// InitVc ;
56658: CALL_OW 20
// if mastodonts then
56662: LD_VAR 0 6
56666: IFFALSE 56733
// for i = 1 to mastodonts do
56668: LD_ADDR_VAR 0 11
56672: PUSH
56673: DOUBLE
56674: LD_INT 1
56676: DEC
56677: ST_TO_ADDR
56678: LD_VAR 0 6
56682: PUSH
56683: FOR_TO
56684: IFFALSE 56731
// begin vc_chassis := 31 ;
56686: LD_ADDR_OWVAR 37
56690: PUSH
56691: LD_INT 31
56693: ST_TO_ADDR
// vc_control := control_rider ;
56694: LD_ADDR_OWVAR 38
56698: PUSH
56699: LD_INT 4
56701: ST_TO_ADDR
// animal := CreateVehicle ;
56702: LD_ADDR_VAR 0 12
56706: PUSH
56707: CALL_OW 45
56711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56712: LD_VAR 0 12
56716: PPUSH
56717: LD_VAR 0 8
56721: PPUSH
56722: LD_INT 0
56724: PPUSH
56725: CALL 58868 0 3
// end ;
56729: GO 56683
56731: POP
56732: POP
// if horses then
56733: LD_VAR 0 5
56737: IFFALSE 56804
// for i = 1 to horses do
56739: LD_ADDR_VAR 0 11
56743: PUSH
56744: DOUBLE
56745: LD_INT 1
56747: DEC
56748: ST_TO_ADDR
56749: LD_VAR 0 5
56753: PUSH
56754: FOR_TO
56755: IFFALSE 56802
// begin hc_class := 21 ;
56757: LD_ADDR_OWVAR 28
56761: PUSH
56762: LD_INT 21
56764: ST_TO_ADDR
// hc_gallery :=  ;
56765: LD_ADDR_OWVAR 33
56769: PUSH
56770: LD_STRING 
56772: ST_TO_ADDR
// animal := CreateHuman ;
56773: LD_ADDR_VAR 0 12
56777: PUSH
56778: CALL_OW 44
56782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56783: LD_VAR 0 12
56787: PPUSH
56788: LD_VAR 0 8
56792: PPUSH
56793: LD_INT 0
56795: PPUSH
56796: CALL 58868 0 3
// end ;
56800: GO 56754
56802: POP
56803: POP
// if birds then
56804: LD_VAR 0 1
56808: IFFALSE 56875
// for i = 1 to birds do
56810: LD_ADDR_VAR 0 11
56814: PUSH
56815: DOUBLE
56816: LD_INT 1
56818: DEC
56819: ST_TO_ADDR
56820: LD_VAR 0 1
56824: PUSH
56825: FOR_TO
56826: IFFALSE 56873
// begin hc_class = 18 ;
56828: LD_ADDR_OWVAR 28
56832: PUSH
56833: LD_INT 18
56835: ST_TO_ADDR
// hc_gallery =  ;
56836: LD_ADDR_OWVAR 33
56840: PUSH
56841: LD_STRING 
56843: ST_TO_ADDR
// animal := CreateHuman ;
56844: LD_ADDR_VAR 0 12
56848: PUSH
56849: CALL_OW 44
56853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56854: LD_VAR 0 12
56858: PPUSH
56859: LD_VAR 0 8
56863: PPUSH
56864: LD_INT 0
56866: PPUSH
56867: CALL 58868 0 3
// end ;
56871: GO 56825
56873: POP
56874: POP
// if tigers then
56875: LD_VAR 0 2
56879: IFFALSE 56963
// for i = 1 to tigers do
56881: LD_ADDR_VAR 0 11
56885: PUSH
56886: DOUBLE
56887: LD_INT 1
56889: DEC
56890: ST_TO_ADDR
56891: LD_VAR 0 2
56895: PUSH
56896: FOR_TO
56897: IFFALSE 56961
// begin hc_class = class_tiger ;
56899: LD_ADDR_OWVAR 28
56903: PUSH
56904: LD_INT 14
56906: ST_TO_ADDR
// hc_gallery =  ;
56907: LD_ADDR_OWVAR 33
56911: PUSH
56912: LD_STRING 
56914: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56915: LD_ADDR_OWVAR 35
56919: PUSH
56920: LD_INT 7
56922: NEG
56923: PPUSH
56924: LD_INT 7
56926: PPUSH
56927: CALL_OW 12
56931: ST_TO_ADDR
// animal := CreateHuman ;
56932: LD_ADDR_VAR 0 12
56936: PUSH
56937: CALL_OW 44
56941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56942: LD_VAR 0 12
56946: PPUSH
56947: LD_VAR 0 8
56951: PPUSH
56952: LD_INT 0
56954: PPUSH
56955: CALL 58868 0 3
// end ;
56959: GO 56896
56961: POP
56962: POP
// if apemans then
56963: LD_VAR 0 3
56967: IFFALSE 57090
// for i = 1 to apemans do
56969: LD_ADDR_VAR 0 11
56973: PUSH
56974: DOUBLE
56975: LD_INT 1
56977: DEC
56978: ST_TO_ADDR
56979: LD_VAR 0 3
56983: PUSH
56984: FOR_TO
56985: IFFALSE 57088
// begin hc_class = class_apeman ;
56987: LD_ADDR_OWVAR 28
56991: PUSH
56992: LD_INT 12
56994: ST_TO_ADDR
// hc_gallery =  ;
56995: LD_ADDR_OWVAR 33
56999: PUSH
57000: LD_STRING 
57002: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57003: LD_ADDR_OWVAR 35
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PPUSH
57012: LD_INT 2
57014: PPUSH
57015: CALL_OW 12
57019: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57020: LD_ADDR_OWVAR 31
57024: PUSH
57025: LD_INT 1
57027: PPUSH
57028: LD_INT 3
57030: PPUSH
57031: CALL_OW 12
57035: PUSH
57036: LD_INT 1
57038: PPUSH
57039: LD_INT 3
57041: PPUSH
57042: CALL_OW 12
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// animal := CreateHuman ;
57059: LD_ADDR_VAR 0 12
57063: PUSH
57064: CALL_OW 44
57068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57069: LD_VAR 0 12
57073: PPUSH
57074: LD_VAR 0 8
57078: PPUSH
57079: LD_INT 0
57081: PPUSH
57082: CALL 58868 0 3
// end ;
57086: GO 56984
57088: POP
57089: POP
// if enchidnas then
57090: LD_VAR 0 4
57094: IFFALSE 57161
// for i = 1 to enchidnas do
57096: LD_ADDR_VAR 0 11
57100: PUSH
57101: DOUBLE
57102: LD_INT 1
57104: DEC
57105: ST_TO_ADDR
57106: LD_VAR 0 4
57110: PUSH
57111: FOR_TO
57112: IFFALSE 57159
// begin hc_class = 13 ;
57114: LD_ADDR_OWVAR 28
57118: PUSH
57119: LD_INT 13
57121: ST_TO_ADDR
// hc_gallery =  ;
57122: LD_ADDR_OWVAR 33
57126: PUSH
57127: LD_STRING 
57129: ST_TO_ADDR
// animal := CreateHuman ;
57130: LD_ADDR_VAR 0 12
57134: PUSH
57135: CALL_OW 44
57139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57140: LD_VAR 0 12
57144: PPUSH
57145: LD_VAR 0 8
57149: PPUSH
57150: LD_INT 0
57152: PPUSH
57153: CALL 58868 0 3
// end ;
57157: GO 57111
57159: POP
57160: POP
// if fishes then
57161: LD_VAR 0 7
57165: IFFALSE 57232
// for i = 1 to fishes do
57167: LD_ADDR_VAR 0 11
57171: PUSH
57172: DOUBLE
57173: LD_INT 1
57175: DEC
57176: ST_TO_ADDR
57177: LD_VAR 0 7
57181: PUSH
57182: FOR_TO
57183: IFFALSE 57230
// begin hc_class = 20 ;
57185: LD_ADDR_OWVAR 28
57189: PUSH
57190: LD_INT 20
57192: ST_TO_ADDR
// hc_gallery =  ;
57193: LD_ADDR_OWVAR 33
57197: PUSH
57198: LD_STRING 
57200: ST_TO_ADDR
// animal := CreateHuman ;
57201: LD_ADDR_VAR 0 12
57205: PUSH
57206: CALL_OW 44
57210: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57211: LD_VAR 0 12
57215: PPUSH
57216: LD_VAR 0 9
57220: PPUSH
57221: LD_INT 0
57223: PPUSH
57224: CALL 58868 0 3
// end ;
57228: GO 57182
57230: POP
57231: POP
// end ;
57232: LD_VAR 0 10
57236: RET
// export function WantHeal ( sci , unit ) ; begin
57237: LD_INT 0
57239: PPUSH
// if GetTaskList ( sci ) > 0 then
57240: LD_VAR 0 1
57244: PPUSH
57245: CALL_OW 437
57249: PUSH
57250: LD_INT 0
57252: GREATER
57253: IFFALSE 57323
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57255: LD_VAR 0 1
57259: PPUSH
57260: CALL_OW 437
57264: PUSH
57265: LD_INT 1
57267: ARRAY
57268: PUSH
57269: LD_INT 1
57271: ARRAY
57272: PUSH
57273: LD_STRING l
57275: EQUAL
57276: PUSH
57277: LD_VAR 0 1
57281: PPUSH
57282: CALL_OW 437
57286: PUSH
57287: LD_INT 1
57289: ARRAY
57290: PUSH
57291: LD_INT 4
57293: ARRAY
57294: PUSH
57295: LD_VAR 0 2
57299: EQUAL
57300: AND
57301: IFFALSE 57313
// result := true else
57303: LD_ADDR_VAR 0 3
57307: PUSH
57308: LD_INT 1
57310: ST_TO_ADDR
57311: GO 57321
// result := false ;
57313: LD_ADDR_VAR 0 3
57317: PUSH
57318: LD_INT 0
57320: ST_TO_ADDR
// end else
57321: GO 57331
// result := false ;
57323: LD_ADDR_VAR 0 3
57327: PUSH
57328: LD_INT 0
57330: ST_TO_ADDR
// end ;
57331: LD_VAR 0 3
57335: RET
// export function HealTarget ( sci ) ; begin
57336: LD_INT 0
57338: PPUSH
// if not sci then
57339: LD_VAR 0 1
57343: NOT
57344: IFFALSE 57348
// exit ;
57346: GO 57413
// result := 0 ;
57348: LD_ADDR_VAR 0 2
57352: PUSH
57353: LD_INT 0
57355: ST_TO_ADDR
// if GetTaskList ( sci ) then
57356: LD_VAR 0 1
57360: PPUSH
57361: CALL_OW 437
57365: IFFALSE 57413
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57367: LD_VAR 0 1
57371: PPUSH
57372: CALL_OW 437
57376: PUSH
57377: LD_INT 1
57379: ARRAY
57380: PUSH
57381: LD_INT 1
57383: ARRAY
57384: PUSH
57385: LD_STRING l
57387: EQUAL
57388: IFFALSE 57413
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57390: LD_ADDR_VAR 0 2
57394: PUSH
57395: LD_VAR 0 1
57399: PPUSH
57400: CALL_OW 437
57404: PUSH
57405: LD_INT 1
57407: ARRAY
57408: PUSH
57409: LD_INT 4
57411: ARRAY
57412: ST_TO_ADDR
// end ;
57413: LD_VAR 0 2
57417: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57418: LD_INT 0
57420: PPUSH
57421: PPUSH
57422: PPUSH
57423: PPUSH
// if not base_units then
57424: LD_VAR 0 1
57428: NOT
57429: IFFALSE 57433
// exit ;
57431: GO 57520
// result := false ;
57433: LD_ADDR_VAR 0 2
57437: PUSH
57438: LD_INT 0
57440: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57441: LD_ADDR_VAR 0 5
57445: PUSH
57446: LD_VAR 0 1
57450: PPUSH
57451: LD_INT 21
57453: PUSH
57454: LD_INT 3
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PPUSH
57461: CALL_OW 72
57465: ST_TO_ADDR
// if not tmp then
57466: LD_VAR 0 5
57470: NOT
57471: IFFALSE 57475
// exit ;
57473: GO 57520
// for i in tmp do
57475: LD_ADDR_VAR 0 3
57479: PUSH
57480: LD_VAR 0 5
57484: PUSH
57485: FOR_IN
57486: IFFALSE 57518
// begin result := EnemyInRange ( i , 22 ) ;
57488: LD_ADDR_VAR 0 2
57492: PUSH
57493: LD_VAR 0 3
57497: PPUSH
57498: LD_INT 22
57500: PPUSH
57501: CALL 55756 0 2
57505: ST_TO_ADDR
// if result then
57506: LD_VAR 0 2
57510: IFFALSE 57516
// exit ;
57512: POP
57513: POP
57514: GO 57520
// end ;
57516: GO 57485
57518: POP
57519: POP
// end ;
57520: LD_VAR 0 2
57524: RET
// export function FilterByTag ( units , tag ) ; begin
57525: LD_INT 0
57527: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57528: LD_ADDR_VAR 0 3
57532: PUSH
57533: LD_VAR 0 1
57537: PPUSH
57538: LD_INT 120
57540: PUSH
57541: LD_VAR 0 2
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PPUSH
57550: CALL_OW 72
57554: ST_TO_ADDR
// end ;
57555: LD_VAR 0 3
57559: RET
// export function IsDriver ( un ) ; begin
57560: LD_INT 0
57562: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57563: LD_ADDR_VAR 0 2
57567: PUSH
57568: LD_VAR 0 1
57572: PUSH
57573: LD_INT 55
57575: PUSH
57576: EMPTY
57577: LIST
57578: PPUSH
57579: CALL_OW 69
57583: IN
57584: ST_TO_ADDR
// end ;
57585: LD_VAR 0 2
57589: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57590: LD_INT 0
57592: PPUSH
57593: PPUSH
// list := [ ] ;
57594: LD_ADDR_VAR 0 5
57598: PUSH
57599: EMPTY
57600: ST_TO_ADDR
// case d of 0 :
57601: LD_VAR 0 3
57605: PUSH
57606: LD_INT 0
57608: DOUBLE
57609: EQUAL
57610: IFTRUE 57614
57612: GO 57747
57614: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57615: LD_ADDR_VAR 0 5
57619: PUSH
57620: LD_VAR 0 1
57624: PUSH
57625: LD_INT 4
57627: MINUS
57628: PUSH
57629: LD_VAR 0 2
57633: PUSH
57634: LD_INT 4
57636: MINUS
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: PUSH
57646: LD_VAR 0 1
57650: PUSH
57651: LD_INT 3
57653: MINUS
57654: PUSH
57655: LD_VAR 0 2
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: PUSH
57668: LD_VAR 0 1
57672: PUSH
57673: LD_INT 4
57675: PLUS
57676: PUSH
57677: LD_VAR 0 2
57681: PUSH
57682: LD_INT 4
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: LIST
57689: PUSH
57690: LD_VAR 0 1
57694: PUSH
57695: LD_INT 3
57697: PLUS
57698: PUSH
57699: LD_VAR 0 2
57703: PUSH
57704: LD_INT 3
57706: PLUS
57707: PUSH
57708: LD_INT 5
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: LIST
57715: PUSH
57716: LD_VAR 0 1
57720: PUSH
57721: LD_VAR 0 2
57725: PUSH
57726: LD_INT 4
57728: PLUS
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// end ; 1 :
57745: GO 58445
57747: LD_INT 1
57749: DOUBLE
57750: EQUAL
57751: IFTRUE 57755
57753: GO 57888
57755: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57756: LD_ADDR_VAR 0 5
57760: PUSH
57761: LD_VAR 0 1
57765: PUSH
57766: LD_VAR 0 2
57770: PUSH
57771: LD_INT 4
57773: MINUS
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: PUSH
57783: LD_VAR 0 1
57787: PUSH
57788: LD_INT 3
57790: MINUS
57791: PUSH
57792: LD_VAR 0 2
57796: PUSH
57797: LD_INT 3
57799: MINUS
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: PUSH
57809: LD_VAR 0 1
57813: PUSH
57814: LD_INT 4
57816: MINUS
57817: PUSH
57818: LD_VAR 0 2
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: PUSH
57831: LD_VAR 0 1
57835: PUSH
57836: LD_VAR 0 2
57840: PUSH
57841: LD_INT 3
57843: PLUS
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: PUSH
57853: LD_VAR 0 1
57857: PUSH
57858: LD_INT 4
57860: PLUS
57861: PUSH
57862: LD_VAR 0 2
57866: PUSH
57867: LD_INT 4
57869: PLUS
57870: PUSH
57871: LD_INT 5
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: LIST
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: ST_TO_ADDR
// end ; 2 :
57886: GO 58445
57888: LD_INT 2
57890: DOUBLE
57891: EQUAL
57892: IFTRUE 57896
57894: GO 58025
57896: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57897: LD_ADDR_VAR 0 5
57901: PUSH
57902: LD_VAR 0 1
57906: PUSH
57907: LD_VAR 0 2
57911: PUSH
57912: LD_INT 3
57914: MINUS
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: PUSH
57924: LD_VAR 0 1
57928: PUSH
57929: LD_INT 4
57931: PLUS
57932: PUSH
57933: LD_VAR 0 2
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: LIST
57945: PUSH
57946: LD_VAR 0 1
57950: PUSH
57951: LD_VAR 0 2
57955: PUSH
57956: LD_INT 4
57958: PLUS
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: PUSH
57968: LD_VAR 0 1
57972: PUSH
57973: LD_INT 3
57975: MINUS
57976: PUSH
57977: LD_VAR 0 2
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: PUSH
57990: LD_VAR 0 1
57994: PUSH
57995: LD_INT 4
57997: MINUS
57998: PUSH
57999: LD_VAR 0 2
58003: PUSH
58004: LD_INT 4
58006: MINUS
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: LIST
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// end ; 3 :
58023: GO 58445
58025: LD_INT 3
58027: DOUBLE
58028: EQUAL
58029: IFTRUE 58033
58031: GO 58166
58033: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58034: LD_ADDR_VAR 0 5
58038: PUSH
58039: LD_VAR 0 1
58043: PUSH
58044: LD_INT 3
58046: PLUS
58047: PUSH
58048: LD_VAR 0 2
58052: PUSH
58053: LD_INT 4
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: PUSH
58061: LD_VAR 0 1
58065: PUSH
58066: LD_INT 4
58068: PLUS
58069: PUSH
58070: LD_VAR 0 2
58074: PUSH
58075: LD_INT 4
58077: PLUS
58078: PUSH
58079: LD_INT 5
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: PUSH
58087: LD_VAR 0 1
58091: PUSH
58092: LD_INT 4
58094: MINUS
58095: PUSH
58096: LD_VAR 0 2
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: LIST
58108: PUSH
58109: LD_VAR 0 1
58113: PUSH
58114: LD_VAR 0 2
58118: PUSH
58119: LD_INT 4
58121: MINUS
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: PUSH
58131: LD_VAR 0 1
58135: PUSH
58136: LD_INT 3
58138: MINUS
58139: PUSH
58140: LD_VAR 0 2
58144: PUSH
58145: LD_INT 3
58147: MINUS
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: LIST
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// end ; 4 :
58164: GO 58445
58166: LD_INT 4
58168: DOUBLE
58169: EQUAL
58170: IFTRUE 58174
58172: GO 58307
58174: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58175: LD_ADDR_VAR 0 5
58179: PUSH
58180: LD_VAR 0 1
58184: PUSH
58185: LD_VAR 0 2
58189: PUSH
58190: LD_INT 4
58192: PLUS
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: PUSH
58202: LD_VAR 0 1
58206: PUSH
58207: LD_INT 3
58209: PLUS
58210: PUSH
58211: LD_VAR 0 2
58215: PUSH
58216: LD_INT 3
58218: PLUS
58219: PUSH
58220: LD_INT 5
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: LIST
58227: PUSH
58228: LD_VAR 0 1
58232: PUSH
58233: LD_INT 4
58235: PLUS
58236: PUSH
58237: LD_VAR 0 2
58241: PUSH
58242: LD_INT 4
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: PUSH
58250: LD_VAR 0 1
58254: PUSH
58255: LD_VAR 0 2
58259: PUSH
58260: LD_INT 3
58262: MINUS
58263: PUSH
58264: LD_INT 3
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: PUSH
58272: LD_VAR 0 1
58276: PUSH
58277: LD_INT 4
58279: MINUS
58280: PUSH
58281: LD_VAR 0 2
58285: PUSH
58286: LD_INT 4
58288: MINUS
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// end ; 5 :
58305: GO 58445
58307: LD_INT 5
58309: DOUBLE
58310: EQUAL
58311: IFTRUE 58315
58313: GO 58444
58315: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58316: LD_ADDR_VAR 0 5
58320: PUSH
58321: LD_VAR 0 1
58325: PUSH
58326: LD_INT 4
58328: MINUS
58329: PUSH
58330: LD_VAR 0 2
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: LIST
58342: PUSH
58343: LD_VAR 0 1
58347: PUSH
58348: LD_VAR 0 2
58352: PUSH
58353: LD_INT 4
58355: MINUS
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: LIST
58364: PUSH
58365: LD_VAR 0 1
58369: PUSH
58370: LD_INT 4
58372: PLUS
58373: PUSH
58374: LD_VAR 0 2
58378: PUSH
58379: LD_INT 4
58381: PLUS
58382: PUSH
58383: LD_INT 5
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: PUSH
58391: LD_VAR 0 1
58395: PUSH
58396: LD_INT 3
58398: PLUS
58399: PUSH
58400: LD_VAR 0 2
58404: PUSH
58405: LD_INT 4
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: LIST
58412: PUSH
58413: LD_VAR 0 1
58417: PUSH
58418: LD_VAR 0 2
58422: PUSH
58423: LD_INT 3
58425: PLUS
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// end ; end ;
58442: GO 58445
58444: POP
// result := list ;
58445: LD_ADDR_VAR 0 4
58449: PUSH
58450: LD_VAR 0 5
58454: ST_TO_ADDR
// end ;
58455: LD_VAR 0 4
58459: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58460: LD_INT 0
58462: PPUSH
58463: PPUSH
58464: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58465: LD_VAR 0 1
58469: NOT
58470: PUSH
58471: LD_VAR 0 2
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: LD_INT 4
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: IN
58494: NOT
58495: OR
58496: IFFALSE 58500
// exit ;
58498: GO 58592
// tmp := [ ] ;
58500: LD_ADDR_VAR 0 5
58504: PUSH
58505: EMPTY
58506: ST_TO_ADDR
// for i in units do
58507: LD_ADDR_VAR 0 4
58511: PUSH
58512: LD_VAR 0 1
58516: PUSH
58517: FOR_IN
58518: IFFALSE 58561
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58520: LD_ADDR_VAR 0 5
58524: PUSH
58525: LD_VAR 0 5
58529: PPUSH
58530: LD_VAR 0 5
58534: PUSH
58535: LD_INT 1
58537: PLUS
58538: PPUSH
58539: LD_VAR 0 4
58543: PPUSH
58544: LD_VAR 0 2
58548: PPUSH
58549: CALL_OW 259
58553: PPUSH
58554: CALL_OW 2
58558: ST_TO_ADDR
58559: GO 58517
58561: POP
58562: POP
// if not tmp then
58563: LD_VAR 0 5
58567: NOT
58568: IFFALSE 58572
// exit ;
58570: GO 58592
// result := SortListByListDesc ( units , tmp ) ;
58572: LD_ADDR_VAR 0 3
58576: PUSH
58577: LD_VAR 0 1
58581: PPUSH
58582: LD_VAR 0 5
58586: PPUSH
58587: CALL_OW 77
58591: ST_TO_ADDR
// end ;
58592: LD_VAR 0 3
58596: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58597: LD_INT 0
58599: PPUSH
58600: PPUSH
58601: PPUSH
// result := false ;
58602: LD_ADDR_VAR 0 3
58606: PUSH
58607: LD_INT 0
58609: ST_TO_ADDR
// x := GetX ( building ) ;
58610: LD_ADDR_VAR 0 4
58614: PUSH
58615: LD_VAR 0 2
58619: PPUSH
58620: CALL_OW 250
58624: ST_TO_ADDR
// y := GetY ( building ) ;
58625: LD_ADDR_VAR 0 5
58629: PUSH
58630: LD_VAR 0 2
58634: PPUSH
58635: CALL_OW 251
58639: ST_TO_ADDR
// if not building or not x or not y then
58640: LD_VAR 0 2
58644: NOT
58645: PUSH
58646: LD_VAR 0 4
58650: NOT
58651: OR
58652: PUSH
58653: LD_VAR 0 5
58657: NOT
58658: OR
58659: IFFALSE 58663
// exit ;
58661: GO 58755
// if GetTaskList ( unit ) then
58663: LD_VAR 0 1
58667: PPUSH
58668: CALL_OW 437
58672: IFFALSE 58755
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58674: LD_STRING e
58676: PUSH
58677: LD_VAR 0 1
58681: PPUSH
58682: CALL_OW 437
58686: PUSH
58687: LD_INT 1
58689: ARRAY
58690: PUSH
58691: LD_INT 1
58693: ARRAY
58694: EQUAL
58695: PUSH
58696: LD_VAR 0 4
58700: PUSH
58701: LD_VAR 0 1
58705: PPUSH
58706: CALL_OW 437
58710: PUSH
58711: LD_INT 1
58713: ARRAY
58714: PUSH
58715: LD_INT 2
58717: ARRAY
58718: EQUAL
58719: AND
58720: PUSH
58721: LD_VAR 0 5
58725: PUSH
58726: LD_VAR 0 1
58730: PPUSH
58731: CALL_OW 437
58735: PUSH
58736: LD_INT 1
58738: ARRAY
58739: PUSH
58740: LD_INT 3
58742: ARRAY
58743: EQUAL
58744: AND
58745: IFFALSE 58755
// result := true end ;
58747: LD_ADDR_VAR 0 3
58751: PUSH
58752: LD_INT 1
58754: ST_TO_ADDR
// end ;
58755: LD_VAR 0 3
58759: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58760: LD_INT 0
58762: PPUSH
// result := false ;
58763: LD_ADDR_VAR 0 4
58767: PUSH
58768: LD_INT 0
58770: ST_TO_ADDR
// if GetTaskList ( unit ) then
58771: LD_VAR 0 1
58775: PPUSH
58776: CALL_OW 437
58780: IFFALSE 58863
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58782: LD_STRING M
58784: PUSH
58785: LD_VAR 0 1
58789: PPUSH
58790: CALL_OW 437
58794: PUSH
58795: LD_INT 1
58797: ARRAY
58798: PUSH
58799: LD_INT 1
58801: ARRAY
58802: EQUAL
58803: PUSH
58804: LD_VAR 0 2
58808: PUSH
58809: LD_VAR 0 1
58813: PPUSH
58814: CALL_OW 437
58818: PUSH
58819: LD_INT 1
58821: ARRAY
58822: PUSH
58823: LD_INT 2
58825: ARRAY
58826: EQUAL
58827: AND
58828: PUSH
58829: LD_VAR 0 3
58833: PUSH
58834: LD_VAR 0 1
58838: PPUSH
58839: CALL_OW 437
58843: PUSH
58844: LD_INT 1
58846: ARRAY
58847: PUSH
58848: LD_INT 3
58850: ARRAY
58851: EQUAL
58852: AND
58853: IFFALSE 58863
// result := true ;
58855: LD_ADDR_VAR 0 4
58859: PUSH
58860: LD_INT 1
58862: ST_TO_ADDR
// end ; end ;
58863: LD_VAR 0 4
58867: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58868: LD_INT 0
58870: PPUSH
58871: PPUSH
58872: PPUSH
58873: PPUSH
// if not unit or not area then
58874: LD_VAR 0 1
58878: NOT
58879: PUSH
58880: LD_VAR 0 2
58884: NOT
58885: OR
58886: IFFALSE 58890
// exit ;
58888: GO 59054
// tmp := AreaToList ( area , i ) ;
58890: LD_ADDR_VAR 0 6
58894: PUSH
58895: LD_VAR 0 2
58899: PPUSH
58900: LD_VAR 0 5
58904: PPUSH
58905: CALL_OW 517
58909: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58910: LD_ADDR_VAR 0 5
58914: PUSH
58915: DOUBLE
58916: LD_INT 1
58918: DEC
58919: ST_TO_ADDR
58920: LD_VAR 0 6
58924: PUSH
58925: LD_INT 1
58927: ARRAY
58928: PUSH
58929: FOR_TO
58930: IFFALSE 59052
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58932: LD_ADDR_VAR 0 7
58936: PUSH
58937: LD_VAR 0 6
58941: PUSH
58942: LD_INT 1
58944: ARRAY
58945: PUSH
58946: LD_VAR 0 5
58950: ARRAY
58951: PUSH
58952: LD_VAR 0 6
58956: PUSH
58957: LD_INT 2
58959: ARRAY
58960: PUSH
58961: LD_VAR 0 5
58965: ARRAY
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58971: LD_VAR 0 7
58975: PUSH
58976: LD_INT 1
58978: ARRAY
58979: PPUSH
58980: LD_VAR 0 7
58984: PUSH
58985: LD_INT 2
58987: ARRAY
58988: PPUSH
58989: CALL_OW 428
58993: PUSH
58994: LD_INT 0
58996: EQUAL
58997: IFFALSE 59050
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58999: LD_VAR 0 1
59003: PPUSH
59004: LD_VAR 0 7
59008: PUSH
59009: LD_INT 1
59011: ARRAY
59012: PPUSH
59013: LD_VAR 0 7
59017: PUSH
59018: LD_INT 2
59020: ARRAY
59021: PPUSH
59022: LD_VAR 0 3
59026: PPUSH
59027: CALL_OW 48
// result := IsPlaced ( unit ) ;
59031: LD_ADDR_VAR 0 4
59035: PUSH
59036: LD_VAR 0 1
59040: PPUSH
59041: CALL_OW 305
59045: ST_TO_ADDR
// exit ;
59046: POP
59047: POP
59048: GO 59054
// end ; end ;
59050: GO 58929
59052: POP
59053: POP
// end ;
59054: LD_VAR 0 4
59058: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59059: LD_INT 0
59061: PPUSH
59062: PPUSH
59063: PPUSH
// if not side or side > 8 then
59064: LD_VAR 0 1
59068: NOT
59069: PUSH
59070: LD_VAR 0 1
59074: PUSH
59075: LD_INT 8
59077: GREATER
59078: OR
59079: IFFALSE 59083
// exit ;
59081: GO 59270
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59083: LD_ADDR_VAR 0 4
59087: PUSH
59088: LD_INT 22
59090: PUSH
59091: LD_VAR 0 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 21
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PPUSH
59114: CALL_OW 69
59118: ST_TO_ADDR
// if not tmp then
59119: LD_VAR 0 4
59123: NOT
59124: IFFALSE 59128
// exit ;
59126: GO 59270
// enable_addtolog := true ;
59128: LD_ADDR_OWVAR 81
59132: PUSH
59133: LD_INT 1
59135: ST_TO_ADDR
// AddToLog ( [ ) ;
59136: LD_STRING [
59138: PPUSH
59139: CALL_OW 561
// for i in tmp do
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: LD_VAR 0 4
59152: PUSH
59153: FOR_IN
59154: IFFALSE 59261
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59156: LD_STRING [
59158: PUSH
59159: LD_VAR 0 3
59163: PPUSH
59164: CALL_OW 266
59168: STR
59169: PUSH
59170: LD_STRING , 
59172: STR
59173: PUSH
59174: LD_VAR 0 3
59178: PPUSH
59179: CALL_OW 250
59183: STR
59184: PUSH
59185: LD_STRING , 
59187: STR
59188: PUSH
59189: LD_VAR 0 3
59193: PPUSH
59194: CALL_OW 251
59198: STR
59199: PUSH
59200: LD_STRING , 
59202: STR
59203: PUSH
59204: LD_VAR 0 3
59208: PPUSH
59209: CALL_OW 254
59213: STR
59214: PUSH
59215: LD_STRING , 
59217: STR
59218: PUSH
59219: LD_VAR 0 3
59223: PPUSH
59224: LD_INT 1
59226: PPUSH
59227: CALL_OW 268
59231: STR
59232: PUSH
59233: LD_STRING , 
59235: STR
59236: PUSH
59237: LD_VAR 0 3
59241: PPUSH
59242: LD_INT 2
59244: PPUSH
59245: CALL_OW 268
59249: STR
59250: PUSH
59251: LD_STRING ],
59253: STR
59254: PPUSH
59255: CALL_OW 561
// end ;
59259: GO 59153
59261: POP
59262: POP
// AddToLog ( ]; ) ;
59263: LD_STRING ];
59265: PPUSH
59266: CALL_OW 561
// end ;
59270: LD_VAR 0 2
59274: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59275: LD_INT 0
59277: PPUSH
59278: PPUSH
59279: PPUSH
59280: PPUSH
59281: PPUSH
// if not area or not rate or not max then
59282: LD_VAR 0 1
59286: NOT
59287: PUSH
59288: LD_VAR 0 2
59292: NOT
59293: OR
59294: PUSH
59295: LD_VAR 0 4
59299: NOT
59300: OR
59301: IFFALSE 59305
// exit ;
59303: GO 59494
// while 1 do
59305: LD_INT 1
59307: IFFALSE 59494
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59309: LD_ADDR_VAR 0 9
59313: PUSH
59314: LD_VAR 0 1
59318: PPUSH
59319: LD_INT 1
59321: PPUSH
59322: CALL_OW 287
59326: PUSH
59327: LD_INT 10
59329: MUL
59330: ST_TO_ADDR
// r := rate / 10 ;
59331: LD_ADDR_VAR 0 7
59335: PUSH
59336: LD_VAR 0 2
59340: PUSH
59341: LD_INT 10
59343: DIVREAL
59344: ST_TO_ADDR
// time := 1 1$00 ;
59345: LD_ADDR_VAR 0 8
59349: PUSH
59350: LD_INT 2100
59352: ST_TO_ADDR
// if amount < min then
59353: LD_VAR 0 9
59357: PUSH
59358: LD_VAR 0 3
59362: LESS
59363: IFFALSE 59381
// r := r * 2 else
59365: LD_ADDR_VAR 0 7
59369: PUSH
59370: LD_VAR 0 7
59374: PUSH
59375: LD_INT 2
59377: MUL
59378: ST_TO_ADDR
59379: GO 59407
// if amount > max then
59381: LD_VAR 0 9
59385: PUSH
59386: LD_VAR 0 4
59390: GREATER
59391: IFFALSE 59407
// r := r / 2 ;
59393: LD_ADDR_VAR 0 7
59397: PUSH
59398: LD_VAR 0 7
59402: PUSH
59403: LD_INT 2
59405: DIVREAL
59406: ST_TO_ADDR
// time := time / r ;
59407: LD_ADDR_VAR 0 8
59411: PUSH
59412: LD_VAR 0 8
59416: PUSH
59417: LD_VAR 0 7
59421: DIVREAL
59422: ST_TO_ADDR
// if time < 0 then
59423: LD_VAR 0 8
59427: PUSH
59428: LD_INT 0
59430: LESS
59431: IFFALSE 59448
// time := time * - 1 ;
59433: LD_ADDR_VAR 0 8
59437: PUSH
59438: LD_VAR 0 8
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: MUL
59447: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59448: LD_VAR 0 8
59452: PUSH
59453: LD_INT 35
59455: PPUSH
59456: LD_INT 875
59458: PPUSH
59459: CALL_OW 12
59463: PLUS
59464: PPUSH
59465: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59469: LD_INT 1
59471: PPUSH
59472: LD_INT 5
59474: PPUSH
59475: CALL_OW 12
59479: PPUSH
59480: LD_VAR 0 1
59484: PPUSH
59485: LD_INT 1
59487: PPUSH
59488: CALL_OW 55
// end ;
59492: GO 59305
// end ;
59494: LD_VAR 0 5
59498: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59499: LD_INT 0
59501: PPUSH
59502: PPUSH
59503: PPUSH
59504: PPUSH
59505: PPUSH
59506: PPUSH
59507: PPUSH
59508: PPUSH
// if not turrets or not factories then
59509: LD_VAR 0 1
59513: NOT
59514: PUSH
59515: LD_VAR 0 2
59519: NOT
59520: OR
59521: IFFALSE 59525
// exit ;
59523: GO 59832
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59525: LD_ADDR_VAR 0 10
59529: PUSH
59530: LD_INT 5
59532: PUSH
59533: LD_INT 6
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 4
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: PUSH
59553: LD_INT 5
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 24
59567: PUSH
59568: LD_INT 25
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 23
59577: PUSH
59578: LD_INT 27
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 42
59591: PUSH
59592: LD_INT 43
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 44
59601: PUSH
59602: LD_INT 46
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 45
59611: PUSH
59612: LD_INT 47
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: ST_TO_ADDR
// result := [ ] ;
59629: LD_ADDR_VAR 0 3
59633: PUSH
59634: EMPTY
59635: ST_TO_ADDR
// for i in turrets do
59636: LD_ADDR_VAR 0 4
59640: PUSH
59641: LD_VAR 0 1
59645: PUSH
59646: FOR_IN
59647: IFFALSE 59830
// begin nat := GetNation ( i ) ;
59649: LD_ADDR_VAR 0 7
59653: PUSH
59654: LD_VAR 0 4
59658: PPUSH
59659: CALL_OW 248
59663: ST_TO_ADDR
// weapon := 0 ;
59664: LD_ADDR_VAR 0 8
59668: PUSH
59669: LD_INT 0
59671: ST_TO_ADDR
// if not nat then
59672: LD_VAR 0 7
59676: NOT
59677: IFFALSE 59681
// continue ;
59679: GO 59646
// for j in list [ nat ] do
59681: LD_ADDR_VAR 0 5
59685: PUSH
59686: LD_VAR 0 10
59690: PUSH
59691: LD_VAR 0 7
59695: ARRAY
59696: PUSH
59697: FOR_IN
59698: IFFALSE 59739
// if GetBWeapon ( i ) = j [ 1 ] then
59700: LD_VAR 0 4
59704: PPUSH
59705: CALL_OW 269
59709: PUSH
59710: LD_VAR 0 5
59714: PUSH
59715: LD_INT 1
59717: ARRAY
59718: EQUAL
59719: IFFALSE 59737
// begin weapon := j [ 2 ] ;
59721: LD_ADDR_VAR 0 8
59725: PUSH
59726: LD_VAR 0 5
59730: PUSH
59731: LD_INT 2
59733: ARRAY
59734: ST_TO_ADDR
// break ;
59735: GO 59739
// end ;
59737: GO 59697
59739: POP
59740: POP
// if not weapon then
59741: LD_VAR 0 8
59745: NOT
59746: IFFALSE 59750
// continue ;
59748: GO 59646
// for k in factories do
59750: LD_ADDR_VAR 0 6
59754: PUSH
59755: LD_VAR 0 2
59759: PUSH
59760: FOR_IN
59761: IFFALSE 59826
// begin weapons := AvailableWeaponList ( k ) ;
59763: LD_ADDR_VAR 0 9
59767: PUSH
59768: LD_VAR 0 6
59772: PPUSH
59773: CALL_OW 478
59777: ST_TO_ADDR
// if not weapons then
59778: LD_VAR 0 9
59782: NOT
59783: IFFALSE 59787
// continue ;
59785: GO 59760
// if weapon in weapons then
59787: LD_VAR 0 8
59791: PUSH
59792: LD_VAR 0 9
59796: IN
59797: IFFALSE 59824
// begin result := [ i , weapon ] ;
59799: LD_ADDR_VAR 0 3
59803: PUSH
59804: LD_VAR 0 4
59808: PUSH
59809: LD_VAR 0 8
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: ST_TO_ADDR
// exit ;
59818: POP
59819: POP
59820: POP
59821: POP
59822: GO 59832
// end ; end ;
59824: GO 59760
59826: POP
59827: POP
// end ;
59828: GO 59646
59830: POP
59831: POP
// end ;
59832: LD_VAR 0 3
59836: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59837: LD_INT 0
59839: PPUSH
// if not side or side > 8 then
59840: LD_VAR 0 3
59844: NOT
59845: PUSH
59846: LD_VAR 0 3
59850: PUSH
59851: LD_INT 8
59853: GREATER
59854: OR
59855: IFFALSE 59859
// exit ;
59857: GO 59918
// if not range then
59859: LD_VAR 0 4
59863: NOT
59864: IFFALSE 59875
// range := - 12 ;
59866: LD_ADDR_VAR 0 4
59870: PUSH
59871: LD_INT 12
59873: NEG
59874: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59875: LD_VAR 0 1
59879: PPUSH
59880: LD_VAR 0 2
59884: PPUSH
59885: LD_VAR 0 3
59889: PPUSH
59890: LD_VAR 0 4
59894: PPUSH
59895: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59899: LD_VAR 0 1
59903: PPUSH
59904: LD_VAR 0 2
59908: PPUSH
59909: LD_VAR 0 3
59913: PPUSH
59914: CALL_OW 331
// end ;
59918: LD_VAR 0 5
59922: RET
// export function Video ( mode ) ; begin
59923: LD_INT 0
59925: PPUSH
// ingame_video = mode ;
59926: LD_ADDR_OWVAR 52
59930: PUSH
59931: LD_VAR 0 1
59935: ST_TO_ADDR
// interface_hidden = mode ;
59936: LD_ADDR_OWVAR 54
59940: PUSH
59941: LD_VAR 0 1
59945: ST_TO_ADDR
// end ;
59946: LD_VAR 0 2
59950: RET
// export function Join ( array , element ) ; begin
59951: LD_INT 0
59953: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59954: LD_ADDR_VAR 0 3
59958: PUSH
59959: LD_VAR 0 1
59963: PPUSH
59964: LD_VAR 0 1
59968: PUSH
59969: LD_INT 1
59971: PLUS
59972: PPUSH
59973: LD_VAR 0 2
59977: PPUSH
59978: CALL_OW 1
59982: ST_TO_ADDR
// end ;
59983: LD_VAR 0 3
59987: RET
// export function JoinUnion ( array , element ) ; begin
59988: LD_INT 0
59990: PPUSH
// result := array union element ;
59991: LD_ADDR_VAR 0 3
59995: PUSH
59996: LD_VAR 0 1
60000: PUSH
60001: LD_VAR 0 2
60005: UNION
60006: ST_TO_ADDR
// end ;
60007: LD_VAR 0 3
60011: RET
// export function GetBehemoths ( side ) ; begin
60012: LD_INT 0
60014: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60015: LD_ADDR_VAR 0 2
60019: PUSH
60020: LD_INT 22
60022: PUSH
60023: LD_VAR 0 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 31
60034: PUSH
60035: LD_INT 25
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PPUSH
60046: CALL_OW 69
60050: ST_TO_ADDR
// end ;
60051: LD_VAR 0 2
60055: RET
// export function Shuffle ( array ) ; var i , index ; begin
60056: LD_INT 0
60058: PPUSH
60059: PPUSH
60060: PPUSH
// result := [ ] ;
60061: LD_ADDR_VAR 0 2
60065: PUSH
60066: EMPTY
60067: ST_TO_ADDR
// if not array then
60068: LD_VAR 0 1
60072: NOT
60073: IFFALSE 60077
// exit ;
60075: GO 60176
// Randomize ;
60077: CALL_OW 10
// for i = array downto 1 do
60081: LD_ADDR_VAR 0 3
60085: PUSH
60086: DOUBLE
60087: LD_VAR 0 1
60091: INC
60092: ST_TO_ADDR
60093: LD_INT 1
60095: PUSH
60096: FOR_DOWNTO
60097: IFFALSE 60174
// begin index := rand ( 1 , array ) ;
60099: LD_ADDR_VAR 0 4
60103: PUSH
60104: LD_INT 1
60106: PPUSH
60107: LD_VAR 0 1
60111: PPUSH
60112: CALL_OW 12
60116: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60117: LD_ADDR_VAR 0 2
60121: PUSH
60122: LD_VAR 0 2
60126: PPUSH
60127: LD_VAR 0 2
60131: PUSH
60132: LD_INT 1
60134: PLUS
60135: PPUSH
60136: LD_VAR 0 1
60140: PUSH
60141: LD_VAR 0 4
60145: ARRAY
60146: PPUSH
60147: CALL_OW 2
60151: ST_TO_ADDR
// array := Delete ( array , index ) ;
60152: LD_ADDR_VAR 0 1
60156: PUSH
60157: LD_VAR 0 1
60161: PPUSH
60162: LD_VAR 0 4
60166: PPUSH
60167: CALL_OW 3
60171: ST_TO_ADDR
// end ;
60172: GO 60096
60174: POP
60175: POP
// end ;
60176: LD_VAR 0 2
60180: RET
// export function GetBaseMaterials ( base ) ; begin
60181: LD_INT 0
60183: PPUSH
// result := [ 0 , 0 , 0 ] ;
60184: LD_ADDR_VAR 0 2
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: ST_TO_ADDR
// if not base then
60203: LD_VAR 0 1
60207: NOT
60208: IFFALSE 60212
// exit ;
60210: GO 60261
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60212: LD_ADDR_VAR 0 2
60216: PUSH
60217: LD_VAR 0 1
60221: PPUSH
60222: LD_INT 1
60224: PPUSH
60225: CALL_OW 275
60229: PUSH
60230: LD_VAR 0 1
60234: PPUSH
60235: LD_INT 2
60237: PPUSH
60238: CALL_OW 275
60242: PUSH
60243: LD_VAR 0 1
60247: PPUSH
60248: LD_INT 3
60250: PPUSH
60251: CALL_OW 275
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: ST_TO_ADDR
// end ;
60261: LD_VAR 0 2
60265: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60266: LD_INT 0
60268: PPUSH
60269: PPUSH
// result := array ;
60270: LD_ADDR_VAR 0 3
60274: PUSH
60275: LD_VAR 0 1
60279: ST_TO_ADDR
// if size > 0 then
60280: LD_VAR 0 2
60284: PUSH
60285: LD_INT 0
60287: GREATER
60288: IFFALSE 60334
// for i := array downto size do
60290: LD_ADDR_VAR 0 4
60294: PUSH
60295: DOUBLE
60296: LD_VAR 0 1
60300: INC
60301: ST_TO_ADDR
60302: LD_VAR 0 2
60306: PUSH
60307: FOR_DOWNTO
60308: IFFALSE 60332
// result := Delete ( result , result ) ;
60310: LD_ADDR_VAR 0 3
60314: PUSH
60315: LD_VAR 0 3
60319: PPUSH
60320: LD_VAR 0 3
60324: PPUSH
60325: CALL_OW 3
60329: ST_TO_ADDR
60330: GO 60307
60332: POP
60333: POP
// end ;
60334: LD_VAR 0 3
60338: RET
// export function ComExit ( unit ) ; var tmp ; begin
60339: LD_INT 0
60341: PPUSH
60342: PPUSH
// if not IsInUnit ( unit ) then
60343: LD_VAR 0 1
60347: PPUSH
60348: CALL_OW 310
60352: NOT
60353: IFFALSE 60357
// exit ;
60355: GO 60417
// tmp := IsInUnit ( unit ) ;
60357: LD_ADDR_VAR 0 3
60361: PUSH
60362: LD_VAR 0 1
60366: PPUSH
60367: CALL_OW 310
60371: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60372: LD_VAR 0 3
60376: PPUSH
60377: CALL_OW 247
60381: PUSH
60382: LD_INT 2
60384: EQUAL
60385: IFFALSE 60398
// ComExitVehicle ( unit ) else
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 121
60396: GO 60407
// ComExitBuilding ( unit ) ;
60398: LD_VAR 0 1
60402: PPUSH
60403: CALL_OW 122
// result := tmp ;
60407: LD_ADDR_VAR 0 2
60411: PUSH
60412: LD_VAR 0 3
60416: ST_TO_ADDR
// end ;
60417: LD_VAR 0 2
60421: RET
// export function ComExitAll ( units ) ; var i ; begin
60422: LD_INT 0
60424: PPUSH
60425: PPUSH
// if not units then
60426: LD_VAR 0 1
60430: NOT
60431: IFFALSE 60435
// exit ;
60433: GO 60461
// for i in units do
60435: LD_ADDR_VAR 0 3
60439: PUSH
60440: LD_VAR 0 1
60444: PUSH
60445: FOR_IN
60446: IFFALSE 60459
// ComExit ( i ) ;
60448: LD_VAR 0 3
60452: PPUSH
60453: CALL 60339 0 1
60457: GO 60445
60459: POP
60460: POP
// end ;
60461: LD_VAR 0 2
60465: RET
// export function ResetHc ; begin
60466: LD_INT 0
60468: PPUSH
// InitHc ;
60469: CALL_OW 19
// hc_importance := 0 ;
60473: LD_ADDR_OWVAR 32
60477: PUSH
60478: LD_INT 0
60480: ST_TO_ADDR
// end ;
60481: LD_VAR 0 1
60485: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60486: LD_INT 0
60488: PPUSH
60489: PPUSH
60490: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60491: LD_ADDR_VAR 0 6
60495: PUSH
60496: LD_VAR 0 1
60500: PUSH
60501: LD_VAR 0 3
60505: PLUS
60506: PUSH
60507: LD_INT 2
60509: DIV
60510: ST_TO_ADDR
// if _x < 0 then
60511: LD_VAR 0 6
60515: PUSH
60516: LD_INT 0
60518: LESS
60519: IFFALSE 60536
// _x := _x * - 1 ;
60521: LD_ADDR_VAR 0 6
60525: PUSH
60526: LD_VAR 0 6
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: MUL
60535: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60536: LD_ADDR_VAR 0 7
60540: PUSH
60541: LD_VAR 0 2
60545: PUSH
60546: LD_VAR 0 4
60550: PLUS
60551: PUSH
60552: LD_INT 2
60554: DIV
60555: ST_TO_ADDR
// if _y < 0 then
60556: LD_VAR 0 7
60560: PUSH
60561: LD_INT 0
60563: LESS
60564: IFFALSE 60581
// _y := _y * - 1 ;
60566: LD_ADDR_VAR 0 7
60570: PUSH
60571: LD_VAR 0 7
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: MUL
60580: ST_TO_ADDR
// result := [ _x , _y ] ;
60581: LD_ADDR_VAR 0 5
60585: PUSH
60586: LD_VAR 0 6
60590: PUSH
60591: LD_VAR 0 7
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: ST_TO_ADDR
// end ;
60600: LD_VAR 0 5
60604: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60605: LD_INT 0
60607: PPUSH
60608: PPUSH
60609: PPUSH
60610: PPUSH
// task := GetTaskList ( unit ) ;
60611: LD_ADDR_VAR 0 7
60615: PUSH
60616: LD_VAR 0 1
60620: PPUSH
60621: CALL_OW 437
60625: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60626: LD_VAR 0 7
60630: NOT
60631: PUSH
60632: LD_VAR 0 1
60636: PPUSH
60637: LD_VAR 0 2
60641: PPUSH
60642: CALL_OW 308
60646: NOT
60647: AND
60648: IFFALSE 60652
// exit ;
60650: GO 60770
// if IsInArea ( unit , area ) then
60652: LD_VAR 0 1
60656: PPUSH
60657: LD_VAR 0 2
60661: PPUSH
60662: CALL_OW 308
60666: IFFALSE 60684
// begin ComMoveToArea ( unit , goAway ) ;
60668: LD_VAR 0 1
60672: PPUSH
60673: LD_VAR 0 3
60677: PPUSH
60678: CALL_OW 113
// exit ;
60682: GO 60770
// end ; if task [ 1 ] [ 1 ] <> M then
60684: LD_VAR 0 7
60688: PUSH
60689: LD_INT 1
60691: ARRAY
60692: PUSH
60693: LD_INT 1
60695: ARRAY
60696: PUSH
60697: LD_STRING M
60699: NONEQUAL
60700: IFFALSE 60704
// exit ;
60702: GO 60770
// x := task [ 1 ] [ 2 ] ;
60704: LD_ADDR_VAR 0 5
60708: PUSH
60709: LD_VAR 0 7
60713: PUSH
60714: LD_INT 1
60716: ARRAY
60717: PUSH
60718: LD_INT 2
60720: ARRAY
60721: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60722: LD_ADDR_VAR 0 6
60726: PUSH
60727: LD_VAR 0 7
60731: PUSH
60732: LD_INT 1
60734: ARRAY
60735: PUSH
60736: LD_INT 3
60738: ARRAY
60739: ST_TO_ADDR
// if InArea ( x , y , area ) then
60740: LD_VAR 0 5
60744: PPUSH
60745: LD_VAR 0 6
60749: PPUSH
60750: LD_VAR 0 2
60754: PPUSH
60755: CALL_OW 309
60759: IFFALSE 60770
// ComStop ( unit ) ;
60761: LD_VAR 0 1
60765: PPUSH
60766: CALL_OW 141
// end ;
60770: LD_VAR 0 4
60774: RET
// export function Abs ( value ) ; begin
60775: LD_INT 0
60777: PPUSH
// result := value ;
60778: LD_ADDR_VAR 0 2
60782: PUSH
60783: LD_VAR 0 1
60787: ST_TO_ADDR
// if value < 0 then
60788: LD_VAR 0 1
60792: PUSH
60793: LD_INT 0
60795: LESS
60796: IFFALSE 60813
// result := value * - 1 ;
60798: LD_ADDR_VAR 0 2
60802: PUSH
60803: LD_VAR 0 1
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: MUL
60812: ST_TO_ADDR
// end ;
60813: LD_VAR 0 2
60817: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60818: LD_INT 0
60820: PPUSH
60821: PPUSH
60822: PPUSH
60823: PPUSH
60824: PPUSH
60825: PPUSH
60826: PPUSH
60827: PPUSH
// if not unit or not building then
60828: LD_VAR 0 1
60832: NOT
60833: PUSH
60834: LD_VAR 0 2
60838: NOT
60839: OR
60840: IFFALSE 60844
// exit ;
60842: GO 61070
// x := GetX ( building ) ;
60844: LD_ADDR_VAR 0 4
60848: PUSH
60849: LD_VAR 0 2
60853: PPUSH
60854: CALL_OW 250
60858: ST_TO_ADDR
// y := GetY ( building ) ;
60859: LD_ADDR_VAR 0 6
60863: PUSH
60864: LD_VAR 0 2
60868: PPUSH
60869: CALL_OW 251
60873: ST_TO_ADDR
// d := GetDir ( building ) ;
60874: LD_ADDR_VAR 0 8
60878: PUSH
60879: LD_VAR 0 2
60883: PPUSH
60884: CALL_OW 254
60888: ST_TO_ADDR
// r := 4 ;
60889: LD_ADDR_VAR 0 9
60893: PUSH
60894: LD_INT 4
60896: ST_TO_ADDR
// for i := 1 to 5 do
60897: LD_ADDR_VAR 0 10
60901: PUSH
60902: DOUBLE
60903: LD_INT 1
60905: DEC
60906: ST_TO_ADDR
60907: LD_INT 5
60909: PUSH
60910: FOR_TO
60911: IFFALSE 61068
// begin _x := ShiftX ( x , d , r + i ) ;
60913: LD_ADDR_VAR 0 5
60917: PUSH
60918: LD_VAR 0 4
60922: PPUSH
60923: LD_VAR 0 8
60927: PPUSH
60928: LD_VAR 0 9
60932: PUSH
60933: LD_VAR 0 10
60937: PLUS
60938: PPUSH
60939: CALL_OW 272
60943: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60944: LD_ADDR_VAR 0 7
60948: PUSH
60949: LD_VAR 0 6
60953: PPUSH
60954: LD_VAR 0 8
60958: PPUSH
60959: LD_VAR 0 9
60963: PUSH
60964: LD_VAR 0 10
60968: PLUS
60969: PPUSH
60970: CALL_OW 273
60974: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60975: LD_VAR 0 5
60979: PPUSH
60980: LD_VAR 0 7
60984: PPUSH
60985: CALL_OW 488
60989: PUSH
60990: LD_VAR 0 5
60994: PPUSH
60995: LD_VAR 0 7
60999: PPUSH
61000: CALL_OW 428
61004: PPUSH
61005: CALL_OW 247
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: IN
61020: NOT
61021: AND
61022: IFFALSE 61066
// begin ComMoveXY ( unit , _x , _y ) ;
61024: LD_VAR 0 1
61028: PPUSH
61029: LD_VAR 0 5
61033: PPUSH
61034: LD_VAR 0 7
61038: PPUSH
61039: CALL_OW 111
// result := [ _x , _y ] ;
61043: LD_ADDR_VAR 0 3
61047: PUSH
61048: LD_VAR 0 5
61052: PUSH
61053: LD_VAR 0 7
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: ST_TO_ADDR
// exit ;
61062: POP
61063: POP
61064: GO 61070
// end ; end ;
61066: GO 60910
61068: POP
61069: POP
// end ;
61070: LD_VAR 0 3
61074: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61075: LD_INT 0
61077: PPUSH
61078: PPUSH
61079: PPUSH
// result := 0 ;
61080: LD_ADDR_VAR 0 3
61084: PUSH
61085: LD_INT 0
61087: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61088: LD_VAR 0 1
61092: PUSH
61093: LD_INT 0
61095: LESS
61096: PUSH
61097: LD_VAR 0 1
61101: PUSH
61102: LD_INT 8
61104: GREATER
61105: OR
61106: PUSH
61107: LD_VAR 0 2
61111: PUSH
61112: LD_INT 0
61114: LESS
61115: OR
61116: PUSH
61117: LD_VAR 0 2
61121: PUSH
61122: LD_INT 8
61124: GREATER
61125: OR
61126: IFFALSE 61130
// exit ;
61128: GO 61205
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61130: LD_ADDR_VAR 0 4
61134: PUSH
61135: LD_INT 22
61137: PUSH
61138: LD_VAR 0 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PPUSH
61147: CALL_OW 69
61151: PUSH
61152: FOR_IN
61153: IFFALSE 61203
// begin un := UnitShoot ( i ) ;
61155: LD_ADDR_VAR 0 5
61159: PUSH
61160: LD_VAR 0 4
61164: PPUSH
61165: CALL_OW 504
61169: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61170: LD_VAR 0 5
61174: PPUSH
61175: CALL_OW 255
61179: PUSH
61180: LD_VAR 0 1
61184: EQUAL
61185: IFFALSE 61201
// begin result := un ;
61187: LD_ADDR_VAR 0 3
61191: PUSH
61192: LD_VAR 0 5
61196: ST_TO_ADDR
// exit ;
61197: POP
61198: POP
61199: GO 61205
// end ; end ;
61201: GO 61152
61203: POP
61204: POP
// end ;
61205: LD_VAR 0 3
61209: RET
// export function GetCargoBay ( units ) ; begin
61210: LD_INT 0
61212: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61213: LD_ADDR_VAR 0 2
61217: PUSH
61218: LD_VAR 0 1
61222: PPUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 34
61228: PUSH
61229: LD_INT 12
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 34
61238: PUSH
61239: LD_INT 51
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 34
61248: PUSH
61249: LD_INT 32
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 34
61258: PUSH
61259: LD_EXP 40
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: PPUSH
61275: CALL_OW 72
61279: ST_TO_ADDR
// end ;
61280: LD_VAR 0 2
61284: RET
// export function Negate ( value ) ; begin
61285: LD_INT 0
61287: PPUSH
// result := not value ;
61288: LD_ADDR_VAR 0 2
61292: PUSH
61293: LD_VAR 0 1
61297: NOT
61298: ST_TO_ADDR
// end ;
61299: LD_VAR 0 2
61303: RET
// export function Inc ( value ) ; begin
61304: LD_INT 0
61306: PPUSH
// result := value + 1 ;
61307: LD_ADDR_VAR 0 2
61311: PUSH
61312: LD_VAR 0 1
61316: PUSH
61317: LD_INT 1
61319: PLUS
61320: ST_TO_ADDR
// end ;
61321: LD_VAR 0 2
61325: RET
// export function Dec ( value ) ; begin
61326: LD_INT 0
61328: PPUSH
// result := value - 1 ;
61329: LD_ADDR_VAR 0 2
61333: PUSH
61334: LD_VAR 0 1
61338: PUSH
61339: LD_INT 1
61341: MINUS
61342: ST_TO_ADDR
// end ;
61343: LD_VAR 0 2
61347: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61348: LD_INT 0
61350: PPUSH
61351: PPUSH
61352: PPUSH
61353: PPUSH
61354: PPUSH
61355: PPUSH
61356: PPUSH
61357: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61358: LD_VAR 0 1
61362: PPUSH
61363: LD_VAR 0 2
61367: PPUSH
61368: CALL_OW 488
61372: NOT
61373: PUSH
61374: LD_VAR 0 3
61378: PPUSH
61379: LD_VAR 0 4
61383: PPUSH
61384: CALL_OW 488
61388: NOT
61389: OR
61390: IFFALSE 61403
// begin result := - 1 ;
61392: LD_ADDR_VAR 0 5
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: ST_TO_ADDR
// exit ;
61401: GO 61638
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61403: LD_ADDR_VAR 0 12
61407: PUSH
61408: LD_VAR 0 1
61412: PPUSH
61413: LD_VAR 0 2
61417: PPUSH
61418: LD_VAR 0 3
61422: PPUSH
61423: LD_VAR 0 4
61427: PPUSH
61428: CALL 60486 0 4
61432: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61433: LD_ADDR_VAR 0 11
61437: PUSH
61438: LD_VAR 0 1
61442: PPUSH
61443: LD_VAR 0 2
61447: PPUSH
61448: LD_VAR 0 12
61452: PUSH
61453: LD_INT 1
61455: ARRAY
61456: PPUSH
61457: LD_VAR 0 12
61461: PUSH
61462: LD_INT 2
61464: ARRAY
61465: PPUSH
61466: CALL_OW 298
61470: ST_TO_ADDR
// distance := 9999 ;
61471: LD_ADDR_VAR 0 10
61475: PUSH
61476: LD_INT 9999
61478: ST_TO_ADDR
// for i := 0 to 5 do
61479: LD_ADDR_VAR 0 6
61483: PUSH
61484: DOUBLE
61485: LD_INT 0
61487: DEC
61488: ST_TO_ADDR
61489: LD_INT 5
61491: PUSH
61492: FOR_TO
61493: IFFALSE 61636
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61495: LD_ADDR_VAR 0 7
61499: PUSH
61500: LD_VAR 0 1
61504: PPUSH
61505: LD_VAR 0 6
61509: PPUSH
61510: LD_VAR 0 11
61514: PPUSH
61515: CALL_OW 272
61519: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61520: LD_ADDR_VAR 0 8
61524: PUSH
61525: LD_VAR 0 2
61529: PPUSH
61530: LD_VAR 0 6
61534: PPUSH
61535: LD_VAR 0 11
61539: PPUSH
61540: CALL_OW 273
61544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61545: LD_VAR 0 7
61549: PPUSH
61550: LD_VAR 0 8
61554: PPUSH
61555: CALL_OW 488
61559: NOT
61560: IFFALSE 61564
// continue ;
61562: GO 61492
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61564: LD_ADDR_VAR 0 9
61568: PUSH
61569: LD_VAR 0 12
61573: PUSH
61574: LD_INT 1
61576: ARRAY
61577: PPUSH
61578: LD_VAR 0 12
61582: PUSH
61583: LD_INT 2
61585: ARRAY
61586: PPUSH
61587: LD_VAR 0 7
61591: PPUSH
61592: LD_VAR 0 8
61596: PPUSH
61597: CALL_OW 298
61601: ST_TO_ADDR
// if tmp < distance then
61602: LD_VAR 0 9
61606: PUSH
61607: LD_VAR 0 10
61611: LESS
61612: IFFALSE 61634
// begin result := i ;
61614: LD_ADDR_VAR 0 5
61618: PUSH
61619: LD_VAR 0 6
61623: ST_TO_ADDR
// distance := tmp ;
61624: LD_ADDR_VAR 0 10
61628: PUSH
61629: LD_VAR 0 9
61633: ST_TO_ADDR
// end ; end ;
61634: GO 61492
61636: POP
61637: POP
// end ;
61638: LD_VAR 0 5
61642: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61643: LD_INT 0
61645: PPUSH
61646: PPUSH
// if not driver or not IsInUnit ( driver ) then
61647: LD_VAR 0 1
61651: NOT
61652: PUSH
61653: LD_VAR 0 1
61657: PPUSH
61658: CALL_OW 310
61662: NOT
61663: OR
61664: IFFALSE 61668
// exit ;
61666: GO 61758
// vehicle := IsInUnit ( driver ) ;
61668: LD_ADDR_VAR 0 3
61672: PUSH
61673: LD_VAR 0 1
61677: PPUSH
61678: CALL_OW 310
61682: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61683: LD_VAR 0 1
61687: PPUSH
61688: LD_STRING \
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: PUSH
61718: LD_STRING E
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_VAR 0 3
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PPUSH
61754: CALL_OW 446
// end ;
61758: LD_VAR 0 2
61762: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61763: LD_INT 0
61765: PPUSH
61766: PPUSH
// if not driver or not IsInUnit ( driver ) then
61767: LD_VAR 0 1
61771: NOT
61772: PUSH
61773: LD_VAR 0 1
61777: PPUSH
61778: CALL_OW 310
61782: NOT
61783: OR
61784: IFFALSE 61788
// exit ;
61786: GO 61878
// vehicle := IsInUnit ( driver ) ;
61788: LD_ADDR_VAR 0 3
61792: PUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: CALL_OW 310
61802: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61803: LD_VAR 0 1
61807: PPUSH
61808: LD_STRING \
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: PUSH
61838: LD_STRING E
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_VAR 0 3
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PPUSH
61874: CALL_OW 447
// end ;
61878: LD_VAR 0 2
61882: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61883: LD_INT 0
61885: PPUSH
61886: PPUSH
61887: PPUSH
// tmp := [ ] ;
61888: LD_ADDR_VAR 0 5
61892: PUSH
61893: EMPTY
61894: ST_TO_ADDR
// for i in units do
61895: LD_ADDR_VAR 0 4
61899: PUSH
61900: LD_VAR 0 1
61904: PUSH
61905: FOR_IN
61906: IFFALSE 61944
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61908: LD_ADDR_VAR 0 5
61912: PUSH
61913: LD_VAR 0 5
61917: PPUSH
61918: LD_VAR 0 5
61922: PUSH
61923: LD_INT 1
61925: PLUS
61926: PPUSH
61927: LD_VAR 0 4
61931: PPUSH
61932: CALL_OW 256
61936: PPUSH
61937: CALL_OW 2
61941: ST_TO_ADDR
61942: GO 61905
61944: POP
61945: POP
// if not tmp then
61946: LD_VAR 0 5
61950: NOT
61951: IFFALSE 61955
// exit ;
61953: GO 62003
// if asc then
61955: LD_VAR 0 2
61959: IFFALSE 61983
// result := SortListByListAsc ( units , tmp ) else
61961: LD_ADDR_VAR 0 3
61965: PUSH
61966: LD_VAR 0 1
61970: PPUSH
61971: LD_VAR 0 5
61975: PPUSH
61976: CALL_OW 76
61980: ST_TO_ADDR
61981: GO 62003
// result := SortListByListDesc ( units , tmp ) ;
61983: LD_ADDR_VAR 0 3
61987: PUSH
61988: LD_VAR 0 1
61992: PPUSH
61993: LD_VAR 0 5
61997: PPUSH
61998: CALL_OW 77
62002: ST_TO_ADDR
// end ;
62003: LD_VAR 0 3
62007: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62008: LD_INT 0
62010: PPUSH
62011: PPUSH
// task := GetTaskList ( mech ) ;
62012: LD_ADDR_VAR 0 4
62016: PUSH
62017: LD_VAR 0 1
62021: PPUSH
62022: CALL_OW 437
62026: ST_TO_ADDR
// if not task then
62027: LD_VAR 0 4
62031: NOT
62032: IFFALSE 62036
// exit ;
62034: GO 62078
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: LD_VAR 0 4
62045: PUSH
62046: LD_INT 1
62048: ARRAY
62049: PUSH
62050: LD_INT 1
62052: ARRAY
62053: PUSH
62054: LD_STRING r
62056: EQUAL
62057: PUSH
62058: LD_VAR 0 4
62062: PUSH
62063: LD_INT 1
62065: ARRAY
62066: PUSH
62067: LD_INT 4
62069: ARRAY
62070: PUSH
62071: LD_VAR 0 2
62075: EQUAL
62076: AND
62077: ST_TO_ADDR
// end ;
62078: LD_VAR 0 3
62082: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62083: LD_INT 0
62085: PPUSH
// SetDir ( unit , d ) ;
62086: LD_VAR 0 1
62090: PPUSH
62091: LD_VAR 0 4
62095: PPUSH
62096: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62100: LD_VAR 0 1
62104: PPUSH
62105: LD_VAR 0 2
62109: PPUSH
62110: LD_VAR 0 3
62114: PPUSH
62115: LD_VAR 0 5
62119: PPUSH
62120: CALL_OW 48
// end ;
62124: LD_VAR 0 6
62128: RET
// export function ToNaturalNumber ( number ) ; begin
62129: LD_INT 0
62131: PPUSH
// result := number div 1 ;
62132: LD_ADDR_VAR 0 2
62136: PUSH
62137: LD_VAR 0 1
62141: PUSH
62142: LD_INT 1
62144: DIV
62145: ST_TO_ADDR
// if number < 0 then
62146: LD_VAR 0 1
62150: PUSH
62151: LD_INT 0
62153: LESS
62154: IFFALSE 62164
// result := 0 ;
62156: LD_ADDR_VAR 0 2
62160: PUSH
62161: LD_INT 0
62163: ST_TO_ADDR
// end ;
62164: LD_VAR 0 2
62168: RET
// export function SortByClass ( units , class ) ; var un ; begin
62169: LD_INT 0
62171: PPUSH
62172: PPUSH
// if not units or not class then
62173: LD_VAR 0 1
62177: NOT
62178: PUSH
62179: LD_VAR 0 2
62183: NOT
62184: OR
62185: IFFALSE 62189
// exit ;
62187: GO 62284
// result := [ ] ;
62189: LD_ADDR_VAR 0 3
62193: PUSH
62194: EMPTY
62195: ST_TO_ADDR
// for un in units do
62196: LD_ADDR_VAR 0 4
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: FOR_IN
62207: IFFALSE 62282
// if GetClass ( un ) = class then
62209: LD_VAR 0 4
62213: PPUSH
62214: CALL_OW 257
62218: PUSH
62219: LD_VAR 0 2
62223: EQUAL
62224: IFFALSE 62251
// result := Insert ( result , 1 , un ) else
62226: LD_ADDR_VAR 0 3
62230: PUSH
62231: LD_VAR 0 3
62235: PPUSH
62236: LD_INT 1
62238: PPUSH
62239: LD_VAR 0 4
62243: PPUSH
62244: CALL_OW 2
62248: ST_TO_ADDR
62249: GO 62280
// result := Replace ( result , result + 1 , un ) ;
62251: LD_ADDR_VAR 0 3
62255: PUSH
62256: LD_VAR 0 3
62260: PPUSH
62261: LD_VAR 0 3
62265: PUSH
62266: LD_INT 1
62268: PLUS
62269: PPUSH
62270: LD_VAR 0 4
62274: PPUSH
62275: CALL_OW 1
62279: ST_TO_ADDR
62280: GO 62206
62282: POP
62283: POP
// end ;
62284: LD_VAR 0 3
62288: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62289: LD_INT 0
62291: PPUSH
62292: PPUSH
62293: PPUSH
62294: PPUSH
62295: PPUSH
62296: PPUSH
62297: PPUSH
// result := [ ] ;
62298: LD_ADDR_VAR 0 4
62302: PUSH
62303: EMPTY
62304: ST_TO_ADDR
// if x - r < 0 then
62305: LD_VAR 0 1
62309: PUSH
62310: LD_VAR 0 3
62314: MINUS
62315: PUSH
62316: LD_INT 0
62318: LESS
62319: IFFALSE 62331
// min_x := 0 else
62321: LD_ADDR_VAR 0 8
62325: PUSH
62326: LD_INT 0
62328: ST_TO_ADDR
62329: GO 62347
// min_x := x - r ;
62331: LD_ADDR_VAR 0 8
62335: PUSH
62336: LD_VAR 0 1
62340: PUSH
62341: LD_VAR 0 3
62345: MINUS
62346: ST_TO_ADDR
// if y - r < 0 then
62347: LD_VAR 0 2
62351: PUSH
62352: LD_VAR 0 3
62356: MINUS
62357: PUSH
62358: LD_INT 0
62360: LESS
62361: IFFALSE 62373
// min_y := 0 else
62363: LD_ADDR_VAR 0 7
62367: PUSH
62368: LD_INT 0
62370: ST_TO_ADDR
62371: GO 62389
// min_y := y - r ;
62373: LD_ADDR_VAR 0 7
62377: PUSH
62378: LD_VAR 0 2
62382: PUSH
62383: LD_VAR 0 3
62387: MINUS
62388: ST_TO_ADDR
// max_x := x + r ;
62389: LD_ADDR_VAR 0 9
62393: PUSH
62394: LD_VAR 0 1
62398: PUSH
62399: LD_VAR 0 3
62403: PLUS
62404: ST_TO_ADDR
// max_y := y + r ;
62405: LD_ADDR_VAR 0 10
62409: PUSH
62410: LD_VAR 0 2
62414: PUSH
62415: LD_VAR 0 3
62419: PLUS
62420: ST_TO_ADDR
// for _x = min_x to max_x do
62421: LD_ADDR_VAR 0 5
62425: PUSH
62426: DOUBLE
62427: LD_VAR 0 8
62431: DEC
62432: ST_TO_ADDR
62433: LD_VAR 0 9
62437: PUSH
62438: FOR_TO
62439: IFFALSE 62540
// for _y = min_y to max_y do
62441: LD_ADDR_VAR 0 6
62445: PUSH
62446: DOUBLE
62447: LD_VAR 0 7
62451: DEC
62452: ST_TO_ADDR
62453: LD_VAR 0 10
62457: PUSH
62458: FOR_TO
62459: IFFALSE 62536
// begin if not ValidHex ( _x , _y ) then
62461: LD_VAR 0 5
62465: PPUSH
62466: LD_VAR 0 6
62470: PPUSH
62471: CALL_OW 488
62475: NOT
62476: IFFALSE 62480
// continue ;
62478: GO 62458
// if GetResourceTypeXY ( _x , _y ) then
62480: LD_VAR 0 5
62484: PPUSH
62485: LD_VAR 0 6
62489: PPUSH
62490: CALL_OW 283
62494: IFFALSE 62534
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62496: LD_ADDR_VAR 0 4
62500: PUSH
62501: LD_VAR 0 4
62505: PPUSH
62506: LD_VAR 0 4
62510: PUSH
62511: LD_INT 1
62513: PLUS
62514: PPUSH
62515: LD_VAR 0 5
62519: PUSH
62520: LD_VAR 0 6
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PPUSH
62529: CALL_OW 1
62533: ST_TO_ADDR
// end ;
62534: GO 62458
62536: POP
62537: POP
62538: GO 62438
62540: POP
62541: POP
// end ;
62542: LD_VAR 0 4
62546: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62547: LD_INT 0
62549: PPUSH
62550: PPUSH
62551: PPUSH
62552: PPUSH
62553: PPUSH
62554: PPUSH
62555: PPUSH
62556: PPUSH
// if not units then
62557: LD_VAR 0 1
62561: NOT
62562: IFFALSE 62566
// exit ;
62564: GO 62991
// result := UnitFilter ( units , [ f_ok ] ) ;
62566: LD_ADDR_VAR 0 3
62570: PUSH
62571: LD_VAR 0 1
62575: PPUSH
62576: LD_INT 50
62578: PUSH
62579: EMPTY
62580: LIST
62581: PPUSH
62582: CALL_OW 72
62586: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62587: LD_ADDR_VAR 0 8
62591: PUSH
62592: LD_VAR 0 1
62596: PUSH
62597: LD_INT 1
62599: ARRAY
62600: PPUSH
62601: CALL_OW 255
62605: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
62606: LD_ADDR_VAR 0 10
62610: PUSH
62611: LD_INT 29
62613: PUSH
62614: LD_EXP 43
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: ST_TO_ADDR
// if not result then
62623: LD_VAR 0 3
62627: NOT
62628: IFFALSE 62632
// exit ;
62630: GO 62991
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62632: LD_ADDR_VAR 0 5
62636: PUSH
62637: LD_INT 81
62639: PUSH
62640: LD_VAR 0 8
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PPUSH
62649: CALL_OW 69
62653: ST_TO_ADDR
// for i in result do
62654: LD_ADDR_VAR 0 4
62658: PUSH
62659: LD_VAR 0 3
62663: PUSH
62664: FOR_IN
62665: IFFALSE 62989
// begin tag := GetTag ( i ) + 1 ;
62667: LD_ADDR_VAR 0 9
62671: PUSH
62672: LD_VAR 0 4
62676: PPUSH
62677: CALL_OW 110
62681: PUSH
62682: LD_INT 1
62684: PLUS
62685: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62686: LD_ADDR_VAR 0 7
62690: PUSH
62691: LD_VAR 0 4
62695: PPUSH
62696: CALL_OW 250
62700: PPUSH
62701: LD_VAR 0 4
62705: PPUSH
62706: CALL_OW 251
62710: PPUSH
62711: LD_INT 6
62713: PPUSH
62714: CALL 62289 0 3
62718: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62719: LD_VAR 0 7
62723: PUSH
62724: LD_VAR 0 4
62728: PPUSH
62729: CALL_OW 264
62733: PUSH
62734: LD_VAR 0 10
62738: IN
62739: NOT
62740: AND
62741: IFFALSE 62780
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62743: LD_VAR 0 4
62747: PPUSH
62748: LD_VAR 0 7
62752: PUSH
62753: LD_INT 1
62755: ARRAY
62756: PUSH
62757: LD_INT 1
62759: ARRAY
62760: PPUSH
62761: LD_VAR 0 7
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PUSH
62770: LD_INT 2
62772: ARRAY
62773: PPUSH
62774: CALL_OW 116
62778: GO 62987
// if path > tag then
62780: LD_VAR 0 2
62784: PUSH
62785: LD_VAR 0 9
62789: GREATER
62790: IFFALSE 62957
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
62792: LD_ADDR_VAR 0 6
62796: PUSH
62797: LD_VAR 0 5
62801: PPUSH
62802: LD_INT 91
62804: PUSH
62805: LD_VAR 0 4
62809: PUSH
62810: LD_INT 12
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: PPUSH
62818: CALL_OW 72
62822: ST_TO_ADDR
// if nearEnemy then
62823: LD_VAR 0 6
62827: IFFALSE 62855
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62829: LD_VAR 0 4
62833: PPUSH
62834: LD_VAR 0 6
62838: PPUSH
62839: LD_VAR 0 4
62843: PPUSH
62844: CALL_OW 74
62848: PPUSH
62849: CALL_OW 115
62853: GO 62955
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62855: LD_VAR 0 4
62859: PPUSH
62860: LD_VAR 0 2
62864: PUSH
62865: LD_VAR 0 9
62869: ARRAY
62870: PUSH
62871: LD_INT 1
62873: ARRAY
62874: PPUSH
62875: LD_VAR 0 2
62879: PUSH
62880: LD_VAR 0 9
62884: ARRAY
62885: PUSH
62886: LD_INT 2
62888: ARRAY
62889: PPUSH
62890: CALL_OW 297
62894: PUSH
62895: LD_INT 6
62897: GREATER
62898: IFFALSE 62941
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62900: LD_VAR 0 4
62904: PPUSH
62905: LD_VAR 0 2
62909: PUSH
62910: LD_VAR 0 9
62914: ARRAY
62915: PUSH
62916: LD_INT 1
62918: ARRAY
62919: PPUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_VAR 0 9
62929: ARRAY
62930: PUSH
62931: LD_INT 2
62933: ARRAY
62934: PPUSH
62935: CALL_OW 114
62939: GO 62955
// SetTag ( i , tag ) ;
62941: LD_VAR 0 4
62945: PPUSH
62946: LD_VAR 0 9
62950: PPUSH
62951: CALL_OW 109
// end else
62955: GO 62987
// if enemy then
62957: LD_VAR 0 5
62961: IFFALSE 62987
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62963: LD_VAR 0 4
62967: PPUSH
62968: LD_VAR 0 5
62972: PPUSH
62973: LD_VAR 0 4
62977: PPUSH
62978: CALL_OW 74
62982: PPUSH
62983: CALL_OW 115
// end ;
62987: GO 62664
62989: POP
62990: POP
// end ;
62991: LD_VAR 0 3
62995: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62996: LD_INT 0
62998: PPUSH
62999: PPUSH
63000: PPUSH
// if not unit or IsInUnit ( unit ) then
63001: LD_VAR 0 1
63005: NOT
63006: PUSH
63007: LD_VAR 0 1
63011: PPUSH
63012: CALL_OW 310
63016: OR
63017: IFFALSE 63021
// exit ;
63019: GO 63112
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63021: LD_ADDR_VAR 0 4
63025: PUSH
63026: LD_VAR 0 1
63030: PPUSH
63031: CALL_OW 250
63035: PPUSH
63036: LD_VAR 0 2
63040: PPUSH
63041: LD_INT 1
63043: PPUSH
63044: CALL_OW 272
63048: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63049: LD_ADDR_VAR 0 5
63053: PUSH
63054: LD_VAR 0 1
63058: PPUSH
63059: CALL_OW 251
63063: PPUSH
63064: LD_VAR 0 2
63068: PPUSH
63069: LD_INT 1
63071: PPUSH
63072: CALL_OW 273
63076: ST_TO_ADDR
// if ValidHex ( x , y ) then
63077: LD_VAR 0 4
63081: PPUSH
63082: LD_VAR 0 5
63086: PPUSH
63087: CALL_OW 488
63091: IFFALSE 63112
// ComTurnXY ( unit , x , y ) ;
63093: LD_VAR 0 1
63097: PPUSH
63098: LD_VAR 0 4
63102: PPUSH
63103: LD_VAR 0 5
63107: PPUSH
63108: CALL_OW 118
// end ;
63112: LD_VAR 0 3
63116: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63117: LD_INT 0
63119: PPUSH
63120: PPUSH
// result := false ;
63121: LD_ADDR_VAR 0 3
63125: PUSH
63126: LD_INT 0
63128: ST_TO_ADDR
// if not units then
63129: LD_VAR 0 2
63133: NOT
63134: IFFALSE 63138
// exit ;
63136: GO 63183
// for i in units do
63138: LD_ADDR_VAR 0 4
63142: PUSH
63143: LD_VAR 0 2
63147: PUSH
63148: FOR_IN
63149: IFFALSE 63181
// if See ( side , i ) then
63151: LD_VAR 0 1
63155: PPUSH
63156: LD_VAR 0 4
63160: PPUSH
63161: CALL_OW 292
63165: IFFALSE 63179
// begin result := true ;
63167: LD_ADDR_VAR 0 3
63171: PUSH
63172: LD_INT 1
63174: ST_TO_ADDR
// exit ;
63175: POP
63176: POP
63177: GO 63183
// end ;
63179: GO 63148
63181: POP
63182: POP
// end ;
63183: LD_VAR 0 3
63187: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63188: LD_INT 0
63190: PPUSH
63191: PPUSH
63192: PPUSH
63193: PPUSH
// if not unit or not points then
63194: LD_VAR 0 1
63198: NOT
63199: PUSH
63200: LD_VAR 0 2
63204: NOT
63205: OR
63206: IFFALSE 63210
// exit ;
63208: GO 63300
// dist := 99999 ;
63210: LD_ADDR_VAR 0 5
63214: PUSH
63215: LD_INT 99999
63217: ST_TO_ADDR
// for i in points do
63218: LD_ADDR_VAR 0 4
63222: PUSH
63223: LD_VAR 0 2
63227: PUSH
63228: FOR_IN
63229: IFFALSE 63298
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63231: LD_ADDR_VAR 0 6
63235: PUSH
63236: LD_VAR 0 1
63240: PPUSH
63241: LD_VAR 0 4
63245: PUSH
63246: LD_INT 1
63248: ARRAY
63249: PPUSH
63250: LD_VAR 0 4
63254: PUSH
63255: LD_INT 2
63257: ARRAY
63258: PPUSH
63259: CALL_OW 297
63263: ST_TO_ADDR
// if tmpDist < dist then
63264: LD_VAR 0 6
63268: PUSH
63269: LD_VAR 0 5
63273: LESS
63274: IFFALSE 63296
// begin result := i ;
63276: LD_ADDR_VAR 0 3
63280: PUSH
63281: LD_VAR 0 4
63285: ST_TO_ADDR
// dist := tmpDist ;
63286: LD_ADDR_VAR 0 5
63290: PUSH
63291: LD_VAR 0 6
63295: ST_TO_ADDR
// end ; end ;
63296: GO 63228
63298: POP
63299: POP
// end ;
63300: LD_VAR 0 3
63304: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63305: LD_INT 0
63307: PPUSH
// uc_side := side ;
63308: LD_ADDR_OWVAR 20
63312: PUSH
63313: LD_VAR 0 1
63317: ST_TO_ADDR
// uc_nation := 3 ;
63318: LD_ADDR_OWVAR 21
63322: PUSH
63323: LD_INT 3
63325: ST_TO_ADDR
// vc_chassis := 25 ;
63326: LD_ADDR_OWVAR 37
63330: PUSH
63331: LD_INT 25
63333: ST_TO_ADDR
// vc_engine := engine_siberite ;
63334: LD_ADDR_OWVAR 39
63338: PUSH
63339: LD_INT 3
63341: ST_TO_ADDR
// vc_control := control_computer ;
63342: LD_ADDR_OWVAR 38
63346: PUSH
63347: LD_INT 3
63349: ST_TO_ADDR
// vc_weapon := 59 ;
63350: LD_ADDR_OWVAR 40
63354: PUSH
63355: LD_INT 59
63357: ST_TO_ADDR
// result := CreateVehicle ;
63358: LD_ADDR_VAR 0 5
63362: PUSH
63363: CALL_OW 45
63367: ST_TO_ADDR
// SetDir ( result , d ) ;
63368: LD_VAR 0 5
63372: PPUSH
63373: LD_VAR 0 4
63377: PPUSH
63378: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63382: LD_VAR 0 5
63386: PPUSH
63387: LD_VAR 0 2
63391: PPUSH
63392: LD_VAR 0 3
63396: PPUSH
63397: LD_INT 0
63399: PPUSH
63400: CALL_OW 48
// end ; end_of_file
63404: LD_VAR 0 5
63408: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63409: LD_VAR 0 1
63413: PPUSH
63414: LD_VAR 0 2
63418: PPUSH
63419: LD_VAR 0 3
63423: PPUSH
63424: LD_VAR 0 4
63428: PPUSH
63429: LD_VAR 0 5
63433: PPUSH
63434: LD_VAR 0 6
63438: PPUSH
63439: CALL 4343 0 6
// end ;
63443: PPOPN 6
63445: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63446: CALL 4318 0 0
// end ;
63450: PPOPN 1
63452: END
