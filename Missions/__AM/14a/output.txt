// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20037 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 19931 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20053 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 24242 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 24242 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 29259 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 29259 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 29259 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 29259 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 24242 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 24242 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 24242 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 24242 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 24242 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 24242 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 24242 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 24242 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 24242 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 24242 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 24242 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 24242 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 24242 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 24242 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 24242 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 29259 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_EXP 40
3767: PUSH
3768: LD_INT 32
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: IN
3777: PUSH
3778: LD_EXP 3
3782: PPUSH
3783: CALL_OW 310
3787: PPUSH
3788: CALL_OW 264
3792: PUSH
3793: LD_INT 51
3795: PUSH
3796: LD_INT 12
3798: PUSH
3799: LD_EXP 40
3803: PUSH
3804: LD_INT 32
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: IN
3813: OR
3814: AND
3815: IFFALSE 4025
3817: GO 3819
3819: DISABLE
3820: LD_INT 0
3822: PPUSH
3823: PPUSH
3824: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3825: LD_ADDR_VAR 0 2
3829: PUSH
3830: LD_EXP 2
3834: PPUSH
3835: CALL_OW 310
3839: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: LD_EXP 3
3849: PPUSH
3850: CALL_OW 310
3854: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3855: LD_VAR 0 2
3859: PPUSH
3860: CALL_OW 265
3864: PUSH
3865: LD_VAR 0 2
3869: PPUSH
3870: CALL_OW 262
3874: PUSH
3875: LD_INT 1
3877: PUSH
3878: LD_VAR 0 2
3882: PPUSH
3883: CALL_OW 264
3887: PUSH
3888: LD_VAR 0 2
3892: PPUSH
3893: CALL_OW 271
3897: PUSH
3898: LD_VAR 0 2
3902: PPUSH
3903: CALL_OW 248
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PPUSH
3916: LD_STRING 14a_JMMVeh
3918: PPUSH
3919: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3923: LD_VAR 0 3
3927: PPUSH
3928: CALL_OW 265
3932: PUSH
3933: LD_VAR 0 3
3937: PPUSH
3938: CALL_OW 262
3942: PUSH
3943: LD_INT 1
3945: PUSH
3946: LD_VAR 0 3
3950: PPUSH
3951: CALL_OW 264
3955: PUSH
3956: LD_VAR 0 3
3960: PPUSH
3961: CALL_OW 271
3965: PUSH
3966: LD_VAR 0 3
3970: PPUSH
3971: CALL_OW 248
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: LD_STRING 14a_BurlakVeh
3986: PPUSH
3987: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3991: LD_EXP 2
3995: PPUSH
3996: LD_STRING 14a_JMM
3998: PPUSH
3999: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4003: LD_EXP 3
4007: PPUSH
4008: LD_STRING 14a_Burlak
4010: PPUSH
4011: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4015: LD_INT 1
4017: PPUSH
4018: LD_STRING %_cont
4020: PPUSH
4021: CALL_OW 340
// end ;
4025: PPOPN 3
4027: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4028: LD_INT 22
4030: PUSH
4031: LD_INT 4
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: LD_INT 24
4043: PUSH
4044: LD_INT 950
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL_OW 69
4063: IFFALSE 4075
4065: GO 4067
4067: DISABLE
// YouLost ( FriendlyFire ) ;
4068: LD_STRING FriendlyFire
4070: PPUSH
4071: CALL_OW 104
4075: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4076: LD_EXP 3
4080: PPUSH
4081: CALL_OW 301
4085: IFFALSE 4097
4087: GO 4089
4089: DISABLE
// YouLost ( Burlak ) ;
4090: LD_STRING Burlak
4092: PPUSH
4093: CALL_OW 104
4097: END
// every 0 0$1 trigger IsDead ( JMM ) do
4098: LD_EXP 2
4102: PPUSH
4103: CALL_OW 301
4107: IFFALSE 4119
4109: GO 4111
4111: DISABLE
// YouLost ( JMM ) ; end_of_file
4112: LD_STRING JMM
4114: PPUSH
4115: CALL_OW 104
4119: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
4120: LD_INT 0
4122: PPUSH
// ar_miner := 81 ;
4123: LD_ADDR_EXP 46
4127: PUSH
4128: LD_INT 81
4130: ST_TO_ADDR
// ar_crane := 88 ;
4131: LD_ADDR_EXP 45
4135: PUSH
4136: LD_INT 88
4138: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4139: LD_ADDR_EXP 40
4143: PUSH
4144: LD_INT 89
4146: ST_TO_ADDR
// us_hack := 99 ;
4147: LD_ADDR_EXP 41
4151: PUSH
4152: LD_INT 99
4154: ST_TO_ADDR
// us_artillery := 97 ;
4155: LD_ADDR_EXP 42
4159: PUSH
4160: LD_INT 97
4162: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4163: LD_ADDR_EXP 43
4167: PUSH
4168: LD_INT 91
4170: ST_TO_ADDR
// ar_mortar := 92 ;
4171: LD_ADDR_EXP 44
4175: PUSH
4176: LD_INT 92
4178: ST_TO_ADDR
// ru_flamethrower := 93 ;
4179: LD_ADDR_EXP 47
4183: PUSH
4184: LD_INT 93
4186: ST_TO_ADDR
// ru_radar := 98 ;
4187: LD_ADDR_EXP 39
4191: PUSH
4192: LD_INT 98
4194: ST_TO_ADDR
// tech_Artillery := 80 ;
4195: LD_ADDR_EXP 48
4199: PUSH
4200: LD_INT 80
4202: ST_TO_ADDR
// tech_RadMat := 81 ;
4203: LD_ADDR_EXP 49
4207: PUSH
4208: LD_INT 81
4210: ST_TO_ADDR
// tech_BasicTools := 82 ;
4211: LD_ADDR_EXP 50
4215: PUSH
4216: LD_INT 82
4218: ST_TO_ADDR
// tech_Cargo := 83 ;
4219: LD_ADDR_EXP 51
4223: PUSH
4224: LD_INT 83
4226: ST_TO_ADDR
// tech_Track := 84 ;
4227: LD_ADDR_EXP 52
4231: PUSH
4232: LD_INT 84
4234: ST_TO_ADDR
// tech_Crane := 85 ;
4235: LD_ADDR_EXP 53
4239: PUSH
4240: LD_INT 85
4242: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4243: LD_ADDR_EXP 54
4247: PUSH
4248: LD_INT 86
4250: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4251: LD_ADDR_EXP 55
4255: PUSH
4256: LD_INT 87
4258: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4259: LD_ADDR_EXP 56
4263: PUSH
4264: LD_INT 88
4266: ST_TO_ADDR
// end ;
4267: LD_VAR 0 1
4271: RET
// every 1 do
4272: GO 4274
4274: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4275: CALL 4120 0 0
4279: END
// every 0 0$1 do
4280: GO 4282
4282: DISABLE
// begin enable ;
4283: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4284: LD_STRING updateTimer(
4286: PUSH
4287: LD_OWVAR 1
4291: STR
4292: PUSH
4293: LD_STRING );
4295: STR
4296: PPUSH
4297: CALL_OW 559
// end ;
4301: END
// export function SOS_MapStart ( ) ; begin
4302: LD_INT 0
4304: PPUSH
// if streamModeActive then
4305: LD_EXP 57
4309: IFFALSE 4318
// DefineStreamItems ( true ) ;
4311: LD_INT 1
4313: PPUSH
4314: CALL 5972 0 1
// UpdateFactoryWaypoints ( ) ;
4318: CALL 18833 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4322: CALL 19090 0 0
// end ;
4326: LD_VAR 0 1
4330: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4331: LD_INT 0
4333: PPUSH
// if p2 = 100 then
4334: LD_VAR 0 2
4338: PUSH
4339: LD_INT 100
4341: EQUAL
4342: IFFALSE 5345
// begin if not StreamModeActive then
4344: LD_EXP 57
4348: NOT
4349: IFFALSE 4359
// StreamModeActive := true ;
4351: LD_ADDR_EXP 57
4355: PUSH
4356: LD_INT 1
4358: ST_TO_ADDR
// if p3 = 0 then
4359: LD_VAR 0 3
4363: PUSH
4364: LD_INT 0
4366: EQUAL
4367: IFFALSE 4373
// InitStreamMode ;
4369: CALL 5508 0 0
// if p3 = 1 then
4373: LD_VAR 0 3
4377: PUSH
4378: LD_INT 1
4380: EQUAL
4381: IFFALSE 4391
// sRocket := true ;
4383: LD_ADDR_EXP 62
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// if p3 = 2 then
4391: LD_VAR 0 3
4395: PUSH
4396: LD_INT 2
4398: EQUAL
4399: IFFALSE 4409
// sSpeed := true ;
4401: LD_ADDR_EXP 61
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// if p3 = 3 then
4409: LD_VAR 0 3
4413: PUSH
4414: LD_INT 3
4416: EQUAL
4417: IFFALSE 4427
// sEngine := true ;
4419: LD_ADDR_EXP 63
4423: PUSH
4424: LD_INT 1
4426: ST_TO_ADDR
// if p3 = 4 then
4427: LD_VAR 0 3
4431: PUSH
4432: LD_INT 4
4434: EQUAL
4435: IFFALSE 4445
// sSpec := true ;
4437: LD_ADDR_EXP 60
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// if p3 = 5 then
4445: LD_VAR 0 3
4449: PUSH
4450: LD_INT 5
4452: EQUAL
4453: IFFALSE 4463
// sLevel := true ;
4455: LD_ADDR_EXP 64
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// if p3 = 6 then
4463: LD_VAR 0 3
4467: PUSH
4468: LD_INT 6
4470: EQUAL
4471: IFFALSE 4481
// sArmoury := true ;
4473: LD_ADDR_EXP 65
4477: PUSH
4478: LD_INT 1
4480: ST_TO_ADDR
// if p3 = 7 then
4481: LD_VAR 0 3
4485: PUSH
4486: LD_INT 7
4488: EQUAL
4489: IFFALSE 4499
// sRadar := true ;
4491: LD_ADDR_EXP 66
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// if p3 = 8 then
4499: LD_VAR 0 3
4503: PUSH
4504: LD_INT 8
4506: EQUAL
4507: IFFALSE 4517
// sBunker := true ;
4509: LD_ADDR_EXP 67
4513: PUSH
4514: LD_INT 1
4516: ST_TO_ADDR
// if p3 = 9 then
4517: LD_VAR 0 3
4521: PUSH
4522: LD_INT 9
4524: EQUAL
4525: IFFALSE 4535
// sHack := true ;
4527: LD_ADDR_EXP 68
4531: PUSH
4532: LD_INT 1
4534: ST_TO_ADDR
// if p3 = 10 then
4535: LD_VAR 0 3
4539: PUSH
4540: LD_INT 10
4542: EQUAL
4543: IFFALSE 4553
// sFire := true ;
4545: LD_ADDR_EXP 69
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// if p3 = 11 then
4553: LD_VAR 0 3
4557: PUSH
4558: LD_INT 11
4560: EQUAL
4561: IFFALSE 4571
// sRefresh := true ;
4563: LD_ADDR_EXP 70
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// if p3 = 12 then
4571: LD_VAR 0 3
4575: PUSH
4576: LD_INT 12
4578: EQUAL
4579: IFFALSE 4589
// sExp := true ;
4581: LD_ADDR_EXP 71
4585: PUSH
4586: LD_INT 1
4588: ST_TO_ADDR
// if p3 = 13 then
4589: LD_VAR 0 3
4593: PUSH
4594: LD_INT 13
4596: EQUAL
4597: IFFALSE 4607
// sDepot := true ;
4599: LD_ADDR_EXP 72
4603: PUSH
4604: LD_INT 1
4606: ST_TO_ADDR
// if p3 = 14 then
4607: LD_VAR 0 3
4611: PUSH
4612: LD_INT 14
4614: EQUAL
4615: IFFALSE 4625
// sFlag := true ;
4617: LD_ADDR_EXP 73
4621: PUSH
4622: LD_INT 1
4624: ST_TO_ADDR
// if p3 = 15 then
4625: LD_VAR 0 3
4629: PUSH
4630: LD_INT 15
4632: EQUAL
4633: IFFALSE 4643
// sKamikadze := true ;
4635: LD_ADDR_EXP 81
4639: PUSH
4640: LD_INT 1
4642: ST_TO_ADDR
// if p3 = 16 then
4643: LD_VAR 0 3
4647: PUSH
4648: LD_INT 16
4650: EQUAL
4651: IFFALSE 4661
// sTroll := true ;
4653: LD_ADDR_EXP 82
4657: PUSH
4658: LD_INT 1
4660: ST_TO_ADDR
// if p3 = 17 then
4661: LD_VAR 0 3
4665: PUSH
4666: LD_INT 17
4668: EQUAL
4669: IFFALSE 4679
// sSlow := true ;
4671: LD_ADDR_EXP 83
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// if p3 = 18 then
4679: LD_VAR 0 3
4683: PUSH
4684: LD_INT 18
4686: EQUAL
4687: IFFALSE 4697
// sLack := true ;
4689: LD_ADDR_EXP 84
4693: PUSH
4694: LD_INT 1
4696: ST_TO_ADDR
// if p3 = 19 then
4697: LD_VAR 0 3
4701: PUSH
4702: LD_INT 19
4704: EQUAL
4705: IFFALSE 4715
// sTank := true ;
4707: LD_ADDR_EXP 86
4711: PUSH
4712: LD_INT 1
4714: ST_TO_ADDR
// if p3 = 20 then
4715: LD_VAR 0 3
4719: PUSH
4720: LD_INT 20
4722: EQUAL
4723: IFFALSE 4733
// sRemote := true ;
4725: LD_ADDR_EXP 87
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
// if p3 = 21 then
4733: LD_VAR 0 3
4737: PUSH
4738: LD_INT 21
4740: EQUAL
4741: IFFALSE 4751
// sPowell := true ;
4743: LD_ADDR_EXP 88
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// if p3 = 22 then
4751: LD_VAR 0 3
4755: PUSH
4756: LD_INT 22
4758: EQUAL
4759: IFFALSE 4769
// sTeleport := true ;
4761: LD_ADDR_EXP 91
4765: PUSH
4766: LD_INT 1
4768: ST_TO_ADDR
// if p3 = 23 then
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 23
4776: EQUAL
4777: IFFALSE 4787
// sOilTower := true ;
4779: LD_ADDR_EXP 93
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// if p3 = 24 then
4787: LD_VAR 0 3
4791: PUSH
4792: LD_INT 24
4794: EQUAL
4795: IFFALSE 4805
// sShovel := true ;
4797: LD_ADDR_EXP 94
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// if p3 = 25 then
4805: LD_VAR 0 3
4809: PUSH
4810: LD_INT 25
4812: EQUAL
4813: IFFALSE 4823
// sSheik := true ;
4815: LD_ADDR_EXP 95
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// if p3 = 26 then
4823: LD_VAR 0 3
4827: PUSH
4828: LD_INT 26
4830: EQUAL
4831: IFFALSE 4841
// sEarthquake := true ;
4833: LD_ADDR_EXP 97
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// if p3 = 27 then
4841: LD_VAR 0 3
4845: PUSH
4846: LD_INT 27
4848: EQUAL
4849: IFFALSE 4859
// sAI := true ;
4851: LD_ADDR_EXP 98
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// if p3 = 28 then
4859: LD_VAR 0 3
4863: PUSH
4864: LD_INT 28
4866: EQUAL
4867: IFFALSE 4877
// sCargo := true ;
4869: LD_ADDR_EXP 101
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// if p3 = 29 then
4877: LD_VAR 0 3
4881: PUSH
4882: LD_INT 29
4884: EQUAL
4885: IFFALSE 4895
// sDLaser := true ;
4887: LD_ADDR_EXP 102
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// if p3 = 30 then
4895: LD_VAR 0 3
4899: PUSH
4900: LD_INT 30
4902: EQUAL
4903: IFFALSE 4913
// sExchange := true ;
4905: LD_ADDR_EXP 103
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// if p3 = 31 then
4913: LD_VAR 0 3
4917: PUSH
4918: LD_INT 31
4920: EQUAL
4921: IFFALSE 4931
// sFac := true ;
4923: LD_ADDR_EXP 104
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// if p3 = 32 then
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 32
4938: EQUAL
4939: IFFALSE 4949
// sPower := true ;
4941: LD_ADDR_EXP 105
4945: PUSH
4946: LD_INT 1
4948: ST_TO_ADDR
// if p3 = 33 then
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 33
4956: EQUAL
4957: IFFALSE 4967
// sRandom := true ;
4959: LD_ADDR_EXP 106
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// if p3 = 34 then
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 34
4974: EQUAL
4975: IFFALSE 4985
// sShield := true ;
4977: LD_ADDR_EXP 107
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// if p3 = 35 then
4985: LD_VAR 0 3
4989: PUSH
4990: LD_INT 35
4992: EQUAL
4993: IFFALSE 5003
// sTime := true ;
4995: LD_ADDR_EXP 108
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// if p3 = 36 then
5003: LD_VAR 0 3
5007: PUSH
5008: LD_INT 36
5010: EQUAL
5011: IFFALSE 5021
// sTools := true ;
5013: LD_ADDR_EXP 109
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// if p3 = 101 then
5021: LD_VAR 0 3
5025: PUSH
5026: LD_INT 101
5028: EQUAL
5029: IFFALSE 5039
// sSold := true ;
5031: LD_ADDR_EXP 74
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// if p3 = 102 then
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 102
5046: EQUAL
5047: IFFALSE 5057
// sDiff := true ;
5049: LD_ADDR_EXP 75
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// if p3 = 103 then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 103
5064: EQUAL
5065: IFFALSE 5075
// sFog := true ;
5067: LD_ADDR_EXP 78
5071: PUSH
5072: LD_INT 1
5074: ST_TO_ADDR
// if p3 = 104 then
5075: LD_VAR 0 3
5079: PUSH
5080: LD_INT 104
5082: EQUAL
5083: IFFALSE 5093
// sReset := true ;
5085: LD_ADDR_EXP 79
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// if p3 = 105 then
5093: LD_VAR 0 3
5097: PUSH
5098: LD_INT 105
5100: EQUAL
5101: IFFALSE 5111
// sSun := true ;
5103: LD_ADDR_EXP 80
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// if p3 = 106 then
5111: LD_VAR 0 3
5115: PUSH
5116: LD_INT 106
5118: EQUAL
5119: IFFALSE 5129
// sTiger := true ;
5121: LD_ADDR_EXP 76
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// if p3 = 107 then
5129: LD_VAR 0 3
5133: PUSH
5134: LD_INT 107
5136: EQUAL
5137: IFFALSE 5147
// sBomb := true ;
5139: LD_ADDR_EXP 77
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// if p3 = 108 then
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 108
5154: EQUAL
5155: IFFALSE 5165
// sWound := true ;
5157: LD_ADDR_EXP 85
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// if p3 = 109 then
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 109
5172: EQUAL
5173: IFFALSE 5183
// sBetray := true ;
5175: LD_ADDR_EXP 89
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// if p3 = 110 then
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 110
5190: EQUAL
5191: IFFALSE 5201
// sContamin := true ;
5193: LD_ADDR_EXP 90
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// if p3 = 111 then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 111
5208: EQUAL
5209: IFFALSE 5219
// sOil := true ;
5211: LD_ADDR_EXP 92
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// if p3 = 112 then
5219: LD_VAR 0 3
5223: PUSH
5224: LD_INT 112
5226: EQUAL
5227: IFFALSE 5237
// sStu := true ;
5229: LD_ADDR_EXP 96
5233: PUSH
5234: LD_INT 1
5236: ST_TO_ADDR
// if p3 = 113 then
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 113
5244: EQUAL
5245: IFFALSE 5255
// sBazooka := true ;
5247: LD_ADDR_EXP 99
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// if p3 = 114 then
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 114
5262: EQUAL
5263: IFFALSE 5273
// sMortar := true ;
5265: LD_ADDR_EXP 100
5269: PUSH
5270: LD_INT 1
5272: ST_TO_ADDR
// if p3 = 115 then
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 115
5280: EQUAL
5281: IFFALSE 5291
// sRanger := true ;
5283: LD_ADDR_EXP 110
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// if p3 = 116 then
5291: LD_VAR 0 3
5295: PUSH
5296: LD_INT 116
5298: EQUAL
5299: IFFALSE 5309
// sComputer := true ;
5301: LD_ADDR_EXP 111
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// if p3 = 117 then
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 117
5316: EQUAL
5317: IFFALSE 5327
// s30 := true ;
5319: LD_ADDR_EXP 112
5323: PUSH
5324: LD_INT 1
5326: ST_TO_ADDR
// if p3 = 118 then
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 118
5334: EQUAL
5335: IFFALSE 5345
// s60 := true ;
5337: LD_ADDR_EXP 113
5341: PUSH
5342: LD_INT 1
5344: ST_TO_ADDR
// end ; if p2 = 101 then
5345: LD_VAR 0 2
5349: PUSH
5350: LD_INT 101
5352: EQUAL
5353: IFFALSE 5481
// begin case p3 of 1 :
5355: LD_VAR 0 3
5359: PUSH
5360: LD_INT 1
5362: DOUBLE
5363: EQUAL
5364: IFTRUE 5368
5366: GO 5375
5368: POP
// hHackUnlimitedResources ; 2 :
5369: CALL 17579 0 0
5373: GO 5481
5375: LD_INT 2
5377: DOUBLE
5378: EQUAL
5379: IFTRUE 5383
5381: GO 5390
5383: POP
// hHackSetLevel10 ; 3 :
5384: CALL 17712 0 0
5388: GO 5481
5390: LD_INT 3
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5405
5398: POP
// hHackSetLevel10YourUnits ; 4 :
5399: CALL 17797 0 0
5403: GO 5481
5405: LD_INT 4
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5420
5413: POP
// hHackInvincible ; 5 :
5414: CALL 18245 0 0
5418: GO 5481
5420: LD_INT 5
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5435
5428: POP
// hHackInvisible ; 6 :
5429: CALL 18356 0 0
5433: GO 5481
5435: LD_INT 6
5437: DOUBLE
5438: EQUAL
5439: IFTRUE 5443
5441: GO 5450
5443: POP
// hHackChangeYourSide ; 7 :
5444: CALL 18413 0 0
5448: GO 5481
5450: LD_INT 7
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5465
5458: POP
// hHackChangeUnitSide ; 8 :
5459: CALL 18455 0 0
5463: GO 5481
5465: LD_INT 8
5467: DOUBLE
5468: EQUAL
5469: IFTRUE 5473
5471: GO 5480
5473: POP
// hHackFog ; end ;
5474: CALL 18556 0 0
5478: GO 5481
5480: POP
// end ; end ;
5481: LD_VAR 0 7
5485: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5486: GO 5488
5488: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5489: LD_STRING initStreamRollete();
5491: PPUSH
5492: CALL_OW 559
// InitStreamMode ;
5496: CALL 5508 0 0
// DefineStreamItems ( false ) ;
5500: LD_INT 0
5502: PPUSH
5503: CALL 5972 0 1
// end ;
5507: END
// function InitStreamMode ; begin
5508: LD_INT 0
5510: PPUSH
// streamModeActive := false ;
5511: LD_ADDR_EXP 57
5515: PUSH
5516: LD_INT 0
5518: ST_TO_ADDR
// normalCounter := 36 ;
5519: LD_ADDR_EXP 58
5523: PUSH
5524: LD_INT 36
5526: ST_TO_ADDR
// hardcoreCounter := 18 ;
5527: LD_ADDR_EXP 59
5531: PUSH
5532: LD_INT 18
5534: ST_TO_ADDR
// sRocket := false ;
5535: LD_ADDR_EXP 62
5539: PUSH
5540: LD_INT 0
5542: ST_TO_ADDR
// sSpeed := false ;
5543: LD_ADDR_EXP 61
5547: PUSH
5548: LD_INT 0
5550: ST_TO_ADDR
// sEngine := false ;
5551: LD_ADDR_EXP 63
5555: PUSH
5556: LD_INT 0
5558: ST_TO_ADDR
// sSpec := false ;
5559: LD_ADDR_EXP 60
5563: PUSH
5564: LD_INT 0
5566: ST_TO_ADDR
// sLevel := false ;
5567: LD_ADDR_EXP 64
5571: PUSH
5572: LD_INT 0
5574: ST_TO_ADDR
// sArmoury := false ;
5575: LD_ADDR_EXP 65
5579: PUSH
5580: LD_INT 0
5582: ST_TO_ADDR
// sRadar := false ;
5583: LD_ADDR_EXP 66
5587: PUSH
5588: LD_INT 0
5590: ST_TO_ADDR
// sBunker := false ;
5591: LD_ADDR_EXP 67
5595: PUSH
5596: LD_INT 0
5598: ST_TO_ADDR
// sHack := false ;
5599: LD_ADDR_EXP 68
5603: PUSH
5604: LD_INT 0
5606: ST_TO_ADDR
// sFire := false ;
5607: LD_ADDR_EXP 69
5611: PUSH
5612: LD_INT 0
5614: ST_TO_ADDR
// sRefresh := false ;
5615: LD_ADDR_EXP 70
5619: PUSH
5620: LD_INT 0
5622: ST_TO_ADDR
// sExp := false ;
5623: LD_ADDR_EXP 71
5627: PUSH
5628: LD_INT 0
5630: ST_TO_ADDR
// sDepot := false ;
5631: LD_ADDR_EXP 72
5635: PUSH
5636: LD_INT 0
5638: ST_TO_ADDR
// sFlag := false ;
5639: LD_ADDR_EXP 73
5643: PUSH
5644: LD_INT 0
5646: ST_TO_ADDR
// sKamikadze := false ;
5647: LD_ADDR_EXP 81
5651: PUSH
5652: LD_INT 0
5654: ST_TO_ADDR
// sTroll := false ;
5655: LD_ADDR_EXP 82
5659: PUSH
5660: LD_INT 0
5662: ST_TO_ADDR
// sSlow := false ;
5663: LD_ADDR_EXP 83
5667: PUSH
5668: LD_INT 0
5670: ST_TO_ADDR
// sLack := false ;
5671: LD_ADDR_EXP 84
5675: PUSH
5676: LD_INT 0
5678: ST_TO_ADDR
// sTank := false ;
5679: LD_ADDR_EXP 86
5683: PUSH
5684: LD_INT 0
5686: ST_TO_ADDR
// sRemote := false ;
5687: LD_ADDR_EXP 87
5691: PUSH
5692: LD_INT 0
5694: ST_TO_ADDR
// sPowell := false ;
5695: LD_ADDR_EXP 88
5699: PUSH
5700: LD_INT 0
5702: ST_TO_ADDR
// sTeleport := false ;
5703: LD_ADDR_EXP 91
5707: PUSH
5708: LD_INT 0
5710: ST_TO_ADDR
// sOilTower := false ;
5711: LD_ADDR_EXP 93
5715: PUSH
5716: LD_INT 0
5718: ST_TO_ADDR
// sShovel := false ;
5719: LD_ADDR_EXP 94
5723: PUSH
5724: LD_INT 0
5726: ST_TO_ADDR
// sSheik := false ;
5727: LD_ADDR_EXP 95
5731: PUSH
5732: LD_INT 0
5734: ST_TO_ADDR
// sEarthquake := false ;
5735: LD_ADDR_EXP 97
5739: PUSH
5740: LD_INT 0
5742: ST_TO_ADDR
// sAI := false ;
5743: LD_ADDR_EXP 98
5747: PUSH
5748: LD_INT 0
5750: ST_TO_ADDR
// sCargo := false ;
5751: LD_ADDR_EXP 101
5755: PUSH
5756: LD_INT 0
5758: ST_TO_ADDR
// sDLaser := false ;
5759: LD_ADDR_EXP 102
5763: PUSH
5764: LD_INT 0
5766: ST_TO_ADDR
// sExchange := false ;
5767: LD_ADDR_EXP 103
5771: PUSH
5772: LD_INT 0
5774: ST_TO_ADDR
// sFac := false ;
5775: LD_ADDR_EXP 104
5779: PUSH
5780: LD_INT 0
5782: ST_TO_ADDR
// sPower := false ;
5783: LD_ADDR_EXP 105
5787: PUSH
5788: LD_INT 0
5790: ST_TO_ADDR
// sRandom := false ;
5791: LD_ADDR_EXP 106
5795: PUSH
5796: LD_INT 0
5798: ST_TO_ADDR
// sShield := false ;
5799: LD_ADDR_EXP 107
5803: PUSH
5804: LD_INT 0
5806: ST_TO_ADDR
// sTime := false ;
5807: LD_ADDR_EXP 108
5811: PUSH
5812: LD_INT 0
5814: ST_TO_ADDR
// sTools := false ;
5815: LD_ADDR_EXP 109
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// sSold := false ;
5823: LD_ADDR_EXP 74
5827: PUSH
5828: LD_INT 0
5830: ST_TO_ADDR
// sDiff := false ;
5831: LD_ADDR_EXP 75
5835: PUSH
5836: LD_INT 0
5838: ST_TO_ADDR
// sFog := false ;
5839: LD_ADDR_EXP 78
5843: PUSH
5844: LD_INT 0
5846: ST_TO_ADDR
// sReset := false ;
5847: LD_ADDR_EXP 79
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// sSun := false ;
5855: LD_ADDR_EXP 80
5859: PUSH
5860: LD_INT 0
5862: ST_TO_ADDR
// sTiger := false ;
5863: LD_ADDR_EXP 76
5867: PUSH
5868: LD_INT 0
5870: ST_TO_ADDR
// sBomb := false ;
5871: LD_ADDR_EXP 77
5875: PUSH
5876: LD_INT 0
5878: ST_TO_ADDR
// sWound := false ;
5879: LD_ADDR_EXP 85
5883: PUSH
5884: LD_INT 0
5886: ST_TO_ADDR
// sBetray := false ;
5887: LD_ADDR_EXP 89
5891: PUSH
5892: LD_INT 0
5894: ST_TO_ADDR
// sContamin := false ;
5895: LD_ADDR_EXP 90
5899: PUSH
5900: LD_INT 0
5902: ST_TO_ADDR
// sOil := false ;
5903: LD_ADDR_EXP 92
5907: PUSH
5908: LD_INT 0
5910: ST_TO_ADDR
// sStu := false ;
5911: LD_ADDR_EXP 96
5915: PUSH
5916: LD_INT 0
5918: ST_TO_ADDR
// sBazooka := false ;
5919: LD_ADDR_EXP 99
5923: PUSH
5924: LD_INT 0
5926: ST_TO_ADDR
// sMortar := false ;
5927: LD_ADDR_EXP 100
5931: PUSH
5932: LD_INT 0
5934: ST_TO_ADDR
// sRanger := false ;
5935: LD_ADDR_EXP 110
5939: PUSH
5940: LD_INT 0
5942: ST_TO_ADDR
// sComputer := false ;
5943: LD_ADDR_EXP 111
5947: PUSH
5948: LD_INT 0
5950: ST_TO_ADDR
// s30 := false ;
5951: LD_ADDR_EXP 112
5955: PUSH
5956: LD_INT 0
5958: ST_TO_ADDR
// s60 := false ;
5959: LD_ADDR_EXP 113
5963: PUSH
5964: LD_INT 0
5966: ST_TO_ADDR
// end ;
5967: LD_VAR 0 1
5971: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5972: LD_INT 0
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
5979: PPUSH
5980: PPUSH
// result := [ ] ;
5981: LD_ADDR_VAR 0 2
5985: PUSH
5986: EMPTY
5987: ST_TO_ADDR
// if campaign_id = 1 then
5988: LD_OWVAR 69
5992: PUSH
5993: LD_INT 1
5995: EQUAL
5996: IFFALSE 9162
// begin case mission_number of 1 :
5998: LD_OWVAR 70
6002: PUSH
6003: LD_INT 1
6005: DOUBLE
6006: EQUAL
6007: IFTRUE 6011
6009: GO 6087
6011: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6012: LD_ADDR_VAR 0 2
6016: PUSH
6017: LD_INT 2
6019: PUSH
6020: LD_INT 4
6022: PUSH
6023: LD_INT 11
6025: PUSH
6026: LD_INT 12
6028: PUSH
6029: LD_INT 15
6031: PUSH
6032: LD_INT 16
6034: PUSH
6035: LD_INT 22
6037: PUSH
6038: LD_INT 23
6040: PUSH
6041: LD_INT 26
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 101
6057: PUSH
6058: LD_INT 102
6060: PUSH
6061: LD_INT 106
6063: PUSH
6064: LD_INT 116
6066: PUSH
6067: LD_INT 117
6069: PUSH
6070: LD_INT 118
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: ST_TO_ADDR
6085: GO 9160
6087: LD_INT 2
6089: DOUBLE
6090: EQUAL
6091: IFTRUE 6095
6093: GO 6179
6095: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6096: LD_ADDR_VAR 0 2
6100: PUSH
6101: LD_INT 2
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 11
6109: PUSH
6110: LD_INT 12
6112: PUSH
6113: LD_INT 15
6115: PUSH
6116: LD_INT 16
6118: PUSH
6119: LD_INT 22
6121: PUSH
6122: LD_INT 23
6124: PUSH
6125: LD_INT 26
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 101
6141: PUSH
6142: LD_INT 102
6144: PUSH
6145: LD_INT 105
6147: PUSH
6148: LD_INT 106
6150: PUSH
6151: LD_INT 108
6153: PUSH
6154: LD_INT 116
6156: PUSH
6157: LD_INT 117
6159: PUSH
6160: LD_INT 118
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: ST_TO_ADDR
6177: GO 9160
6179: LD_INT 3
6181: DOUBLE
6182: EQUAL
6183: IFTRUE 6187
6185: GO 6275
6187: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6188: LD_ADDR_VAR 0 2
6192: PUSH
6193: LD_INT 2
6195: PUSH
6196: LD_INT 4
6198: PUSH
6199: LD_INT 5
6201: PUSH
6202: LD_INT 11
6204: PUSH
6205: LD_INT 12
6207: PUSH
6208: LD_INT 15
6210: PUSH
6211: LD_INT 16
6213: PUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 26
6219: PUSH
6220: LD_INT 36
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 101
6237: PUSH
6238: LD_INT 102
6240: PUSH
6241: LD_INT 105
6243: PUSH
6244: LD_INT 106
6246: PUSH
6247: LD_INT 108
6249: PUSH
6250: LD_INT 116
6252: PUSH
6253: LD_INT 117
6255: PUSH
6256: LD_INT 118
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: ST_TO_ADDR
6273: GO 9160
6275: LD_INT 4
6277: DOUBLE
6278: EQUAL
6279: IFTRUE 6283
6281: GO 6379
6283: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6284: LD_ADDR_VAR 0 2
6288: PUSH
6289: LD_INT 2
6291: PUSH
6292: LD_INT 4
6294: PUSH
6295: LD_INT 5
6297: PUSH
6298: LD_INT 8
6300: PUSH
6301: LD_INT 11
6303: PUSH
6304: LD_INT 12
6306: PUSH
6307: LD_INT 15
6309: PUSH
6310: LD_INT 16
6312: PUSH
6313: LD_INT 22
6315: PUSH
6316: LD_INT 23
6318: PUSH
6319: LD_INT 26
6321: PUSH
6322: LD_INT 36
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 101
6341: PUSH
6342: LD_INT 102
6344: PUSH
6345: LD_INT 105
6347: PUSH
6348: LD_INT 106
6350: PUSH
6351: LD_INT 108
6353: PUSH
6354: LD_INT 116
6356: PUSH
6357: LD_INT 117
6359: PUSH
6360: LD_INT 118
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: ST_TO_ADDR
6377: GO 9160
6379: LD_INT 5
6381: DOUBLE
6382: EQUAL
6383: IFTRUE 6387
6385: GO 6499
6387: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6388: LD_ADDR_VAR 0 2
6392: PUSH
6393: LD_INT 2
6395: PUSH
6396: LD_INT 4
6398: PUSH
6399: LD_INT 5
6401: PUSH
6402: LD_INT 6
6404: PUSH
6405: LD_INT 8
6407: PUSH
6408: LD_INT 11
6410: PUSH
6411: LD_INT 12
6413: PUSH
6414: LD_INT 15
6416: PUSH
6417: LD_INT 16
6419: PUSH
6420: LD_INT 22
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 25
6428: PUSH
6429: LD_INT 26
6431: PUSH
6432: LD_INT 36
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 101
6453: PUSH
6454: LD_INT 102
6456: PUSH
6457: LD_INT 105
6459: PUSH
6460: LD_INT 106
6462: PUSH
6463: LD_INT 108
6465: PUSH
6466: LD_INT 109
6468: PUSH
6469: LD_INT 112
6471: PUSH
6472: LD_INT 116
6474: PUSH
6475: LD_INT 117
6477: PUSH
6478: LD_INT 118
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: ST_TO_ADDR
6497: GO 9160
6499: LD_INT 6
6501: DOUBLE
6502: EQUAL
6503: IFTRUE 6507
6505: GO 6639
6507: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6508: LD_ADDR_VAR 0 2
6512: PUSH
6513: LD_INT 2
6515: PUSH
6516: LD_INT 4
6518: PUSH
6519: LD_INT 5
6521: PUSH
6522: LD_INT 6
6524: PUSH
6525: LD_INT 8
6527: PUSH
6528: LD_INT 11
6530: PUSH
6531: LD_INT 12
6533: PUSH
6534: LD_INT 15
6536: PUSH
6537: LD_INT 16
6539: PUSH
6540: LD_INT 20
6542: PUSH
6543: LD_INT 21
6545: PUSH
6546: LD_INT 22
6548: PUSH
6549: LD_INT 23
6551: PUSH
6552: LD_INT 25
6554: PUSH
6555: LD_INT 26
6557: PUSH
6558: LD_INT 30
6560: PUSH
6561: LD_INT 31
6563: PUSH
6564: LD_INT 32
6566: PUSH
6567: LD_INT 36
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 101
6593: PUSH
6594: LD_INT 102
6596: PUSH
6597: LD_INT 105
6599: PUSH
6600: LD_INT 106
6602: PUSH
6603: LD_INT 108
6605: PUSH
6606: LD_INT 109
6608: PUSH
6609: LD_INT 112
6611: PUSH
6612: LD_INT 116
6614: PUSH
6615: LD_INT 117
6617: PUSH
6618: LD_INT 118
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: ST_TO_ADDR
6637: GO 9160
6639: LD_INT 7
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6759
6647: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6648: LD_ADDR_VAR 0 2
6652: PUSH
6653: LD_INT 2
6655: PUSH
6656: LD_INT 4
6658: PUSH
6659: LD_INT 5
6661: PUSH
6662: LD_INT 7
6664: PUSH
6665: LD_INT 11
6667: PUSH
6668: LD_INT 12
6670: PUSH
6671: LD_INT 15
6673: PUSH
6674: LD_INT 16
6676: PUSH
6677: LD_INT 20
6679: PUSH
6680: LD_INT 21
6682: PUSH
6683: LD_INT 22
6685: PUSH
6686: LD_INT 23
6688: PUSH
6689: LD_INT 25
6691: PUSH
6692: LD_INT 26
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 101
6713: PUSH
6714: LD_INT 102
6716: PUSH
6717: LD_INT 103
6719: PUSH
6720: LD_INT 105
6722: PUSH
6723: LD_INT 106
6725: PUSH
6726: LD_INT 108
6728: PUSH
6729: LD_INT 112
6731: PUSH
6732: LD_INT 116
6734: PUSH
6735: LD_INT 117
6737: PUSH
6738: LD_INT 118
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: ST_TO_ADDR
6757: GO 9160
6759: LD_INT 8
6761: DOUBLE
6762: EQUAL
6763: IFTRUE 6767
6765: GO 6907
6767: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: LD_INT 2
6775: PUSH
6776: LD_INT 4
6778: PUSH
6779: LD_INT 5
6781: PUSH
6782: LD_INT 6
6784: PUSH
6785: LD_INT 7
6787: PUSH
6788: LD_INT 8
6790: PUSH
6791: LD_INT 11
6793: PUSH
6794: LD_INT 12
6796: PUSH
6797: LD_INT 15
6799: PUSH
6800: LD_INT 16
6802: PUSH
6803: LD_INT 20
6805: PUSH
6806: LD_INT 21
6808: PUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 23
6814: PUSH
6815: LD_INT 25
6817: PUSH
6818: LD_INT 26
6820: PUSH
6821: LD_INT 30
6823: PUSH
6824: LD_INT 31
6826: PUSH
6827: LD_INT 32
6829: PUSH
6830: LD_INT 36
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 101
6857: PUSH
6858: LD_INT 102
6860: PUSH
6861: LD_INT 103
6863: PUSH
6864: LD_INT 105
6866: PUSH
6867: LD_INT 106
6869: PUSH
6870: LD_INT 108
6872: PUSH
6873: LD_INT 109
6875: PUSH
6876: LD_INT 112
6878: PUSH
6879: LD_INT 116
6881: PUSH
6882: LD_INT 117
6884: PUSH
6885: LD_INT 118
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: ST_TO_ADDR
6905: GO 9160
6907: LD_INT 9
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 7063
6915: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 4
6926: PUSH
6927: LD_INT 5
6929: PUSH
6930: LD_INT 6
6932: PUSH
6933: LD_INT 7
6935: PUSH
6936: LD_INT 8
6938: PUSH
6939: LD_INT 11
6941: PUSH
6942: LD_INT 12
6944: PUSH
6945: LD_INT 15
6947: PUSH
6948: LD_INT 16
6950: PUSH
6951: LD_INT 20
6953: PUSH
6954: LD_INT 21
6956: PUSH
6957: LD_INT 22
6959: PUSH
6960: LD_INT 23
6962: PUSH
6963: LD_INT 25
6965: PUSH
6966: LD_INT 26
6968: PUSH
6969: LD_INT 28
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 31
6977: PUSH
6978: LD_INT 32
6980: PUSH
6981: LD_INT 36
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 101
7009: PUSH
7010: LD_INT 102
7012: PUSH
7013: LD_INT 103
7015: PUSH
7016: LD_INT 105
7018: PUSH
7019: LD_INT 106
7021: PUSH
7022: LD_INT 108
7024: PUSH
7025: LD_INT 109
7027: PUSH
7028: LD_INT 112
7030: PUSH
7031: LD_INT 114
7033: PUSH
7034: LD_INT 116
7036: PUSH
7037: LD_INT 117
7039: PUSH
7040: LD_INT 118
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: ST_TO_ADDR
7061: GO 9160
7063: LD_INT 10
7065: DOUBLE
7066: EQUAL
7067: IFTRUE 7071
7069: GO 7267
7071: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: LD_INT 2
7079: PUSH
7080: LD_INT 4
7082: PUSH
7083: LD_INT 5
7085: PUSH
7086: LD_INT 6
7088: PUSH
7089: LD_INT 7
7091: PUSH
7092: LD_INT 8
7094: PUSH
7095: LD_INT 9
7097: PUSH
7098: LD_INT 10
7100: PUSH
7101: LD_INT 11
7103: PUSH
7104: LD_INT 12
7106: PUSH
7107: LD_INT 13
7109: PUSH
7110: LD_INT 14
7112: PUSH
7113: LD_INT 15
7115: PUSH
7116: LD_INT 16
7118: PUSH
7119: LD_INT 17
7121: PUSH
7122: LD_INT 18
7124: PUSH
7125: LD_INT 19
7127: PUSH
7128: LD_INT 20
7130: PUSH
7131: LD_INT 21
7133: PUSH
7134: LD_INT 22
7136: PUSH
7137: LD_INT 23
7139: PUSH
7140: LD_INT 24
7142: PUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 26
7148: PUSH
7149: LD_INT 28
7151: PUSH
7152: LD_INT 30
7154: PUSH
7155: LD_INT 31
7157: PUSH
7158: LD_INT 32
7160: PUSH
7161: LD_INT 36
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 101
7197: PUSH
7198: LD_INT 102
7200: PUSH
7201: LD_INT 103
7203: PUSH
7204: LD_INT 104
7206: PUSH
7207: LD_INT 105
7209: PUSH
7210: LD_INT 106
7212: PUSH
7213: LD_INT 107
7215: PUSH
7216: LD_INT 108
7218: PUSH
7219: LD_INT 109
7221: PUSH
7222: LD_INT 110
7224: PUSH
7225: LD_INT 111
7227: PUSH
7228: LD_INT 112
7230: PUSH
7231: LD_INT 114
7233: PUSH
7234: LD_INT 116
7236: PUSH
7237: LD_INT 117
7239: PUSH
7240: LD_INT 118
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: ST_TO_ADDR
7265: GO 9160
7267: LD_INT 11
7269: DOUBLE
7270: EQUAL
7271: IFTRUE 7275
7273: GO 7479
7275: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7276: LD_ADDR_VAR 0 2
7280: PUSH
7281: LD_INT 2
7283: PUSH
7284: LD_INT 3
7286: PUSH
7287: LD_INT 4
7289: PUSH
7290: LD_INT 5
7292: PUSH
7293: LD_INT 6
7295: PUSH
7296: LD_INT 7
7298: PUSH
7299: LD_INT 8
7301: PUSH
7302: LD_INT 9
7304: PUSH
7305: LD_INT 10
7307: PUSH
7308: LD_INT 11
7310: PUSH
7311: LD_INT 12
7313: PUSH
7314: LD_INT 13
7316: PUSH
7317: LD_INT 14
7319: PUSH
7320: LD_INT 15
7322: PUSH
7323: LD_INT 16
7325: PUSH
7326: LD_INT 17
7328: PUSH
7329: LD_INT 18
7331: PUSH
7332: LD_INT 19
7334: PUSH
7335: LD_INT 20
7337: PUSH
7338: LD_INT 21
7340: PUSH
7341: LD_INT 22
7343: PUSH
7344: LD_INT 23
7346: PUSH
7347: LD_INT 24
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 26
7355: PUSH
7356: LD_INT 28
7358: PUSH
7359: LD_INT 30
7361: PUSH
7362: LD_INT 31
7364: PUSH
7365: LD_INT 32
7367: PUSH
7368: LD_INT 34
7370: PUSH
7371: LD_INT 36
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 101
7409: PUSH
7410: LD_INT 102
7412: PUSH
7413: LD_INT 103
7415: PUSH
7416: LD_INT 104
7418: PUSH
7419: LD_INT 105
7421: PUSH
7422: LD_INT 106
7424: PUSH
7425: LD_INT 107
7427: PUSH
7428: LD_INT 108
7430: PUSH
7431: LD_INT 109
7433: PUSH
7434: LD_INT 110
7436: PUSH
7437: LD_INT 111
7439: PUSH
7440: LD_INT 112
7442: PUSH
7443: LD_INT 114
7445: PUSH
7446: LD_INT 116
7448: PUSH
7449: LD_INT 117
7451: PUSH
7452: LD_INT 118
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: ST_TO_ADDR
7477: GO 9160
7479: LD_INT 12
7481: DOUBLE
7482: EQUAL
7483: IFTRUE 7487
7485: GO 7707
7487: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7488: LD_ADDR_VAR 0 2
7492: PUSH
7493: LD_INT 1
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: LD_INT 4
7504: PUSH
7505: LD_INT 5
7507: PUSH
7508: LD_INT 6
7510: PUSH
7511: LD_INT 7
7513: PUSH
7514: LD_INT 8
7516: PUSH
7517: LD_INT 9
7519: PUSH
7520: LD_INT 10
7522: PUSH
7523: LD_INT 11
7525: PUSH
7526: LD_INT 12
7528: PUSH
7529: LD_INT 13
7531: PUSH
7532: LD_INT 14
7534: PUSH
7535: LD_INT 15
7537: PUSH
7538: LD_INT 16
7540: PUSH
7541: LD_INT 17
7543: PUSH
7544: LD_INT 18
7546: PUSH
7547: LD_INT 19
7549: PUSH
7550: LD_INT 20
7552: PUSH
7553: LD_INT 21
7555: PUSH
7556: LD_INT 22
7558: PUSH
7559: LD_INT 23
7561: PUSH
7562: LD_INT 24
7564: PUSH
7565: LD_INT 25
7567: PUSH
7568: LD_INT 26
7570: PUSH
7571: LD_INT 27
7573: PUSH
7574: LD_INT 28
7576: PUSH
7577: LD_INT 30
7579: PUSH
7580: LD_INT 31
7582: PUSH
7583: LD_INT 32
7585: PUSH
7586: LD_INT 33
7588: PUSH
7589: LD_INT 34
7591: PUSH
7592: LD_INT 36
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 101
7633: PUSH
7634: LD_INT 102
7636: PUSH
7637: LD_INT 103
7639: PUSH
7640: LD_INT 104
7642: PUSH
7643: LD_INT 105
7645: PUSH
7646: LD_INT 106
7648: PUSH
7649: LD_INT 107
7651: PUSH
7652: LD_INT 108
7654: PUSH
7655: LD_INT 109
7657: PUSH
7658: LD_INT 110
7660: PUSH
7661: LD_INT 111
7663: PUSH
7664: LD_INT 112
7666: PUSH
7667: LD_INT 113
7669: PUSH
7670: LD_INT 114
7672: PUSH
7673: LD_INT 116
7675: PUSH
7676: LD_INT 117
7678: PUSH
7679: LD_INT 118
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: ST_TO_ADDR
7705: GO 9160
7707: LD_INT 13
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7923
7715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7716: LD_ADDR_VAR 0 2
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 3
7729: PUSH
7730: LD_INT 4
7732: PUSH
7733: LD_INT 5
7735: PUSH
7736: LD_INT 8
7738: PUSH
7739: LD_INT 9
7741: PUSH
7742: LD_INT 10
7744: PUSH
7745: LD_INT 11
7747: PUSH
7748: LD_INT 12
7750: PUSH
7751: LD_INT 14
7753: PUSH
7754: LD_INT 15
7756: PUSH
7757: LD_INT 16
7759: PUSH
7760: LD_INT 17
7762: PUSH
7763: LD_INT 18
7765: PUSH
7766: LD_INT 19
7768: PUSH
7769: LD_INT 20
7771: PUSH
7772: LD_INT 21
7774: PUSH
7775: LD_INT 22
7777: PUSH
7778: LD_INT 23
7780: PUSH
7781: LD_INT 24
7783: PUSH
7784: LD_INT 25
7786: PUSH
7787: LD_INT 26
7789: PUSH
7790: LD_INT 27
7792: PUSH
7793: LD_INT 28
7795: PUSH
7796: LD_INT 30
7798: PUSH
7799: LD_INT 31
7801: PUSH
7802: LD_INT 32
7804: PUSH
7805: LD_INT 33
7807: PUSH
7808: LD_INT 34
7810: PUSH
7811: LD_INT 36
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 101
7849: PUSH
7850: LD_INT 102
7852: PUSH
7853: LD_INT 103
7855: PUSH
7856: LD_INT 104
7858: PUSH
7859: LD_INT 105
7861: PUSH
7862: LD_INT 106
7864: PUSH
7865: LD_INT 107
7867: PUSH
7868: LD_INT 108
7870: PUSH
7871: LD_INT 109
7873: PUSH
7874: LD_INT 110
7876: PUSH
7877: LD_INT 111
7879: PUSH
7880: LD_INT 112
7882: PUSH
7883: LD_INT 113
7885: PUSH
7886: LD_INT 114
7888: PUSH
7889: LD_INT 116
7891: PUSH
7892: LD_INT 117
7894: PUSH
7895: LD_INT 118
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: ST_TO_ADDR
7921: GO 9160
7923: LD_INT 14
7925: DOUBLE
7926: EQUAL
7927: IFTRUE 7931
7929: GO 8155
7931: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7932: LD_ADDR_VAR 0 2
7936: PUSH
7937: LD_INT 1
7939: PUSH
7940: LD_INT 2
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 4
7948: PUSH
7949: LD_INT 5
7951: PUSH
7952: LD_INT 6
7954: PUSH
7955: LD_INT 7
7957: PUSH
7958: LD_INT 8
7960: PUSH
7961: LD_INT 9
7963: PUSH
7964: LD_INT 10
7966: PUSH
7967: LD_INT 11
7969: PUSH
7970: LD_INT 12
7972: PUSH
7973: LD_INT 13
7975: PUSH
7976: LD_INT 14
7978: PUSH
7979: LD_INT 15
7981: PUSH
7982: LD_INT 16
7984: PUSH
7985: LD_INT 17
7987: PUSH
7988: LD_INT 18
7990: PUSH
7991: LD_INT 19
7993: PUSH
7994: LD_INT 20
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 22
8002: PUSH
8003: LD_INT 23
8005: PUSH
8006: LD_INT 24
8008: PUSH
8009: LD_INT 25
8011: PUSH
8012: LD_INT 26
8014: PUSH
8015: LD_INT 27
8017: PUSH
8018: LD_INT 28
8020: PUSH
8021: LD_INT 29
8023: PUSH
8024: LD_INT 30
8026: PUSH
8027: LD_INT 31
8029: PUSH
8030: LD_INT 32
8032: PUSH
8033: LD_INT 33
8035: PUSH
8036: LD_INT 34
8038: PUSH
8039: LD_INT 36
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 101
8081: PUSH
8082: LD_INT 102
8084: PUSH
8085: LD_INT 103
8087: PUSH
8088: LD_INT 104
8090: PUSH
8091: LD_INT 105
8093: PUSH
8094: LD_INT 106
8096: PUSH
8097: LD_INT 107
8099: PUSH
8100: LD_INT 108
8102: PUSH
8103: LD_INT 109
8105: PUSH
8106: LD_INT 110
8108: PUSH
8109: LD_INT 111
8111: PUSH
8112: LD_INT 112
8114: PUSH
8115: LD_INT 113
8117: PUSH
8118: LD_INT 114
8120: PUSH
8121: LD_INT 116
8123: PUSH
8124: LD_INT 117
8126: PUSH
8127: LD_INT 118
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: ST_TO_ADDR
8153: GO 9160
8155: LD_INT 15
8157: DOUBLE
8158: EQUAL
8159: IFTRUE 8163
8161: GO 8387
8163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8164: LD_ADDR_VAR 0 2
8168: PUSH
8169: LD_INT 1
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 3
8177: PUSH
8178: LD_INT 4
8180: PUSH
8181: LD_INT 5
8183: PUSH
8184: LD_INT 6
8186: PUSH
8187: LD_INT 7
8189: PUSH
8190: LD_INT 8
8192: PUSH
8193: LD_INT 9
8195: PUSH
8196: LD_INT 10
8198: PUSH
8199: LD_INT 11
8201: PUSH
8202: LD_INT 12
8204: PUSH
8205: LD_INT 13
8207: PUSH
8208: LD_INT 14
8210: PUSH
8211: LD_INT 15
8213: PUSH
8214: LD_INT 16
8216: PUSH
8217: LD_INT 17
8219: PUSH
8220: LD_INT 18
8222: PUSH
8223: LD_INT 19
8225: PUSH
8226: LD_INT 20
8228: PUSH
8229: LD_INT 21
8231: PUSH
8232: LD_INT 22
8234: PUSH
8235: LD_INT 23
8237: PUSH
8238: LD_INT 24
8240: PUSH
8241: LD_INT 25
8243: PUSH
8244: LD_INT 26
8246: PUSH
8247: LD_INT 27
8249: PUSH
8250: LD_INT 28
8252: PUSH
8253: LD_INT 29
8255: PUSH
8256: LD_INT 30
8258: PUSH
8259: LD_INT 31
8261: PUSH
8262: LD_INT 32
8264: PUSH
8265: LD_INT 33
8267: PUSH
8268: LD_INT 34
8270: PUSH
8271: LD_INT 36
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 101
8313: PUSH
8314: LD_INT 102
8316: PUSH
8317: LD_INT 103
8319: PUSH
8320: LD_INT 104
8322: PUSH
8323: LD_INT 105
8325: PUSH
8326: LD_INT 106
8328: PUSH
8329: LD_INT 107
8331: PUSH
8332: LD_INT 108
8334: PUSH
8335: LD_INT 109
8337: PUSH
8338: LD_INT 110
8340: PUSH
8341: LD_INT 111
8343: PUSH
8344: LD_INT 112
8346: PUSH
8347: LD_INT 113
8349: PUSH
8350: LD_INT 114
8352: PUSH
8353: LD_INT 116
8355: PUSH
8356: LD_INT 117
8358: PUSH
8359: LD_INT 118
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: ST_TO_ADDR
8385: GO 9160
8387: LD_INT 16
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8531
8395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: LD_INT 4
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: LD_INT 7
8412: PUSH
8413: LD_INT 11
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 15
8421: PUSH
8422: LD_INT 16
8424: PUSH
8425: LD_INT 20
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 23
8436: PUSH
8437: LD_INT 25
8439: PUSH
8440: LD_INT 26
8442: PUSH
8443: LD_INT 30
8445: PUSH
8446: LD_INT 31
8448: PUSH
8449: LD_INT 32
8451: PUSH
8452: LD_INT 33
8454: PUSH
8455: LD_INT 34
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 101
8481: PUSH
8482: LD_INT 102
8484: PUSH
8485: LD_INT 103
8487: PUSH
8488: LD_INT 106
8490: PUSH
8491: LD_INT 108
8493: PUSH
8494: LD_INT 112
8496: PUSH
8497: LD_INT 113
8499: PUSH
8500: LD_INT 114
8502: PUSH
8503: LD_INT 116
8505: PUSH
8506: LD_INT 117
8508: PUSH
8509: LD_INT 118
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: ST_TO_ADDR
8529: GO 9160
8531: LD_INT 17
8533: DOUBLE
8534: EQUAL
8535: IFTRUE 8539
8537: GO 8763
8539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8540: LD_ADDR_VAR 0 2
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: LD_INT 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_INT 7
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: LD_INT 9
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 13
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 27
8625: PUSH
8626: LD_INT 28
8628: PUSH
8629: LD_INT 29
8631: PUSH
8632: LD_INT 30
8634: PUSH
8635: LD_INT 31
8637: PUSH
8638: LD_INT 32
8640: PUSH
8641: LD_INT 33
8643: PUSH
8644: LD_INT 34
8646: PUSH
8647: LD_INT 36
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 101
8689: PUSH
8690: LD_INT 102
8692: PUSH
8693: LD_INT 103
8695: PUSH
8696: LD_INT 104
8698: PUSH
8699: LD_INT 105
8701: PUSH
8702: LD_INT 106
8704: PUSH
8705: LD_INT 107
8707: PUSH
8708: LD_INT 108
8710: PUSH
8711: LD_INT 109
8713: PUSH
8714: LD_INT 110
8716: PUSH
8717: LD_INT 111
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: LD_INT 113
8725: PUSH
8726: LD_INT 114
8728: PUSH
8729: LD_INT 116
8731: PUSH
8732: LD_INT 117
8734: PUSH
8735: LD_INT 118
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: ST_TO_ADDR
8761: GO 9160
8763: LD_INT 18
8765: DOUBLE
8766: EQUAL
8767: IFTRUE 8771
8769: GO 8919
8771: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8772: LD_ADDR_VAR 0 2
8776: PUSH
8777: LD_INT 2
8779: PUSH
8780: LD_INT 4
8782: PUSH
8783: LD_INT 5
8785: PUSH
8786: LD_INT 7
8788: PUSH
8789: LD_INT 11
8791: PUSH
8792: LD_INT 12
8794: PUSH
8795: LD_INT 15
8797: PUSH
8798: LD_INT 16
8800: PUSH
8801: LD_INT 20
8803: PUSH
8804: LD_INT 21
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_INT 23
8812: PUSH
8813: LD_INT 25
8815: PUSH
8816: LD_INT 26
8818: PUSH
8819: LD_INT 30
8821: PUSH
8822: LD_INT 31
8824: PUSH
8825: LD_INT 32
8827: PUSH
8828: LD_INT 33
8830: PUSH
8831: LD_INT 34
8833: PUSH
8834: LD_INT 35
8836: PUSH
8837: LD_INT 36
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 101
8865: PUSH
8866: LD_INT 102
8868: PUSH
8869: LD_INT 103
8871: PUSH
8872: LD_INT 106
8874: PUSH
8875: LD_INT 108
8877: PUSH
8878: LD_INT 112
8880: PUSH
8881: LD_INT 113
8883: PUSH
8884: LD_INT 114
8886: PUSH
8887: LD_INT 115
8889: PUSH
8890: LD_INT 116
8892: PUSH
8893: LD_INT 117
8895: PUSH
8896: LD_INT 118
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: ST_TO_ADDR
8917: GO 9160
8919: LD_INT 19
8921: DOUBLE
8922: EQUAL
8923: IFTRUE 8927
8925: GO 9159
8927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8928: LD_ADDR_VAR 0 2
8932: PUSH
8933: LD_INT 1
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: LD_INT 3
8941: PUSH
8942: LD_INT 4
8944: PUSH
8945: LD_INT 5
8947: PUSH
8948: LD_INT 6
8950: PUSH
8951: LD_INT 7
8953: PUSH
8954: LD_INT 8
8956: PUSH
8957: LD_INT 9
8959: PUSH
8960: LD_INT 10
8962: PUSH
8963: LD_INT 11
8965: PUSH
8966: LD_INT 12
8968: PUSH
8969: LD_INT 13
8971: PUSH
8972: LD_INT 14
8974: PUSH
8975: LD_INT 15
8977: PUSH
8978: LD_INT 16
8980: PUSH
8981: LD_INT 17
8983: PUSH
8984: LD_INT 18
8986: PUSH
8987: LD_INT 19
8989: PUSH
8990: LD_INT 20
8992: PUSH
8993: LD_INT 21
8995: PUSH
8996: LD_INT 22
8998: PUSH
8999: LD_INT 23
9001: PUSH
9002: LD_INT 24
9004: PUSH
9005: LD_INT 25
9007: PUSH
9008: LD_INT 26
9010: PUSH
9011: LD_INT 27
9013: PUSH
9014: LD_INT 28
9016: PUSH
9017: LD_INT 29
9019: PUSH
9020: LD_INT 30
9022: PUSH
9023: LD_INT 31
9025: PUSH
9026: LD_INT 32
9028: PUSH
9029: LD_INT 33
9031: PUSH
9032: LD_INT 34
9034: PUSH
9035: LD_INT 35
9037: PUSH
9038: LD_INT 36
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 101
9081: PUSH
9082: LD_INT 102
9084: PUSH
9085: LD_INT 103
9087: PUSH
9088: LD_INT 104
9090: PUSH
9091: LD_INT 105
9093: PUSH
9094: LD_INT 106
9096: PUSH
9097: LD_INT 107
9099: PUSH
9100: LD_INT 108
9102: PUSH
9103: LD_INT 109
9105: PUSH
9106: LD_INT 110
9108: PUSH
9109: LD_INT 111
9111: PUSH
9112: LD_INT 112
9114: PUSH
9115: LD_INT 113
9117: PUSH
9118: LD_INT 114
9120: PUSH
9121: LD_INT 115
9123: PUSH
9124: LD_INT 116
9126: PUSH
9127: LD_INT 117
9129: PUSH
9130: LD_INT 118
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: ST_TO_ADDR
9157: GO 9160
9159: POP
// end else
9160: GO 9391
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9162: LD_ADDR_VAR 0 2
9166: PUSH
9167: LD_INT 1
9169: PUSH
9170: LD_INT 2
9172: PUSH
9173: LD_INT 3
9175: PUSH
9176: LD_INT 4
9178: PUSH
9179: LD_INT 5
9181: PUSH
9182: LD_INT 6
9184: PUSH
9185: LD_INT 7
9187: PUSH
9188: LD_INT 8
9190: PUSH
9191: LD_INT 9
9193: PUSH
9194: LD_INT 10
9196: PUSH
9197: LD_INT 11
9199: PUSH
9200: LD_INT 12
9202: PUSH
9203: LD_INT 13
9205: PUSH
9206: LD_INT 14
9208: PUSH
9209: LD_INT 15
9211: PUSH
9212: LD_INT 16
9214: PUSH
9215: LD_INT 17
9217: PUSH
9218: LD_INT 18
9220: PUSH
9221: LD_INT 19
9223: PUSH
9224: LD_INT 20
9226: PUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 22
9232: PUSH
9233: LD_INT 23
9235: PUSH
9236: LD_INT 24
9238: PUSH
9239: LD_INT 25
9241: PUSH
9242: LD_INT 26
9244: PUSH
9245: LD_INT 27
9247: PUSH
9248: LD_INT 28
9250: PUSH
9251: LD_INT 29
9253: PUSH
9254: LD_INT 30
9256: PUSH
9257: LD_INT 31
9259: PUSH
9260: LD_INT 32
9262: PUSH
9263: LD_INT 33
9265: PUSH
9266: LD_INT 34
9268: PUSH
9269: LD_INT 35
9271: PUSH
9272: LD_INT 36
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 101
9315: PUSH
9316: LD_INT 102
9318: PUSH
9319: LD_INT 103
9321: PUSH
9322: LD_INT 104
9324: PUSH
9325: LD_INT 105
9327: PUSH
9328: LD_INT 106
9330: PUSH
9331: LD_INT 107
9333: PUSH
9334: LD_INT 108
9336: PUSH
9337: LD_INT 109
9339: PUSH
9340: LD_INT 110
9342: PUSH
9343: LD_INT 111
9345: PUSH
9346: LD_INT 112
9348: PUSH
9349: LD_INT 113
9351: PUSH
9352: LD_INT 114
9354: PUSH
9355: LD_INT 115
9357: PUSH
9358: LD_INT 116
9360: PUSH
9361: LD_INT 117
9363: PUSH
9364: LD_INT 118
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: ST_TO_ADDR
// if result then
9391: LD_VAR 0 2
9395: IFFALSE 10181
// begin normal :=  ;
9397: LD_ADDR_VAR 0 5
9401: PUSH
9402: LD_STRING 
9404: ST_TO_ADDR
// hardcore :=  ;
9405: LD_ADDR_VAR 0 6
9409: PUSH
9410: LD_STRING 
9412: ST_TO_ADDR
// active :=  ;
9413: LD_ADDR_VAR 0 7
9417: PUSH
9418: LD_STRING 
9420: ST_TO_ADDR
// for i = 1 to normalCounter do
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: DOUBLE
9427: LD_INT 1
9429: DEC
9430: ST_TO_ADDR
9431: LD_EXP 58
9435: PUSH
9436: FOR_TO
9437: IFFALSE 9538
// begin tmp := 0 ;
9439: LD_ADDR_VAR 0 3
9443: PUSH
9444: LD_STRING 0
9446: ST_TO_ADDR
// if result [ 1 ] then
9447: LD_VAR 0 2
9451: PUSH
9452: LD_INT 1
9454: ARRAY
9455: IFFALSE 9520
// if result [ 1 ] [ 1 ] = i then
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PUSH
9466: LD_INT 1
9468: ARRAY
9469: PUSH
9470: LD_VAR 0 8
9474: EQUAL
9475: IFFALSE 9520
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9477: LD_ADDR_VAR 0 2
9481: PUSH
9482: LD_VAR 0 2
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: LD_VAR 0 2
9494: PUSH
9495: LD_INT 1
9497: ARRAY
9498: PPUSH
9499: LD_INT 1
9501: PPUSH
9502: CALL_OW 3
9506: PPUSH
9507: CALL_OW 1
9511: ST_TO_ADDR
// tmp := 1 ;
9512: LD_ADDR_VAR 0 3
9516: PUSH
9517: LD_STRING 1
9519: ST_TO_ADDR
// end ; normal := normal & tmp ;
9520: LD_ADDR_VAR 0 5
9524: PUSH
9525: LD_VAR 0 5
9529: PUSH
9530: LD_VAR 0 3
9534: STR
9535: ST_TO_ADDR
// end ;
9536: GO 9436
9538: POP
9539: POP
// for i = 1 to hardcoreCounter do
9540: LD_ADDR_VAR 0 8
9544: PUSH
9545: DOUBLE
9546: LD_INT 1
9548: DEC
9549: ST_TO_ADDR
9550: LD_EXP 59
9554: PUSH
9555: FOR_TO
9556: IFFALSE 9661
// begin tmp := 0 ;
9558: LD_ADDR_VAR 0 3
9562: PUSH
9563: LD_STRING 0
9565: ST_TO_ADDR
// if result [ 2 ] then
9566: LD_VAR 0 2
9570: PUSH
9571: LD_INT 2
9573: ARRAY
9574: IFFALSE 9643
// if result [ 2 ] [ 1 ] = 100 + i then
9576: LD_VAR 0 2
9580: PUSH
9581: LD_INT 2
9583: ARRAY
9584: PUSH
9585: LD_INT 1
9587: ARRAY
9588: PUSH
9589: LD_INT 100
9591: PUSH
9592: LD_VAR 0 8
9596: PLUS
9597: EQUAL
9598: IFFALSE 9643
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_VAR 0 2
9609: PPUSH
9610: LD_INT 2
9612: PPUSH
9613: LD_VAR 0 2
9617: PUSH
9618: LD_INT 2
9620: ARRAY
9621: PPUSH
9622: LD_INT 1
9624: PPUSH
9625: CALL_OW 3
9629: PPUSH
9630: CALL_OW 1
9634: ST_TO_ADDR
// tmp := 1 ;
9635: LD_ADDR_VAR 0 3
9639: PUSH
9640: LD_STRING 1
9642: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9643: LD_ADDR_VAR 0 6
9647: PUSH
9648: LD_VAR 0 6
9652: PUSH
9653: LD_VAR 0 3
9657: STR
9658: ST_TO_ADDR
// end ;
9659: GO 9555
9661: POP
9662: POP
// if isGameLoad then
9663: LD_VAR 0 1
9667: IFFALSE 10142
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9669: LD_ADDR_VAR 0 4
9673: PUSH
9674: LD_EXP 62
9678: PUSH
9679: LD_EXP 61
9683: PUSH
9684: LD_EXP 63
9688: PUSH
9689: LD_EXP 60
9693: PUSH
9694: LD_EXP 64
9698: PUSH
9699: LD_EXP 65
9703: PUSH
9704: LD_EXP 66
9708: PUSH
9709: LD_EXP 67
9713: PUSH
9714: LD_EXP 68
9718: PUSH
9719: LD_EXP 69
9723: PUSH
9724: LD_EXP 70
9728: PUSH
9729: LD_EXP 71
9733: PUSH
9734: LD_EXP 72
9738: PUSH
9739: LD_EXP 73
9743: PUSH
9744: LD_EXP 81
9748: PUSH
9749: LD_EXP 82
9753: PUSH
9754: LD_EXP 83
9758: PUSH
9759: LD_EXP 84
9763: PUSH
9764: LD_EXP 86
9768: PUSH
9769: LD_EXP 87
9773: PUSH
9774: LD_EXP 88
9778: PUSH
9779: LD_EXP 91
9783: PUSH
9784: LD_EXP 93
9788: PUSH
9789: LD_EXP 94
9793: PUSH
9794: LD_EXP 95
9798: PUSH
9799: LD_EXP 97
9803: PUSH
9804: LD_EXP 98
9808: PUSH
9809: LD_EXP 101
9813: PUSH
9814: LD_EXP 102
9818: PUSH
9819: LD_EXP 103
9823: PUSH
9824: LD_EXP 104
9828: PUSH
9829: LD_EXP 105
9833: PUSH
9834: LD_EXP 106
9838: PUSH
9839: LD_EXP 107
9843: PUSH
9844: LD_EXP 108
9848: PUSH
9849: LD_EXP 109
9853: PUSH
9854: LD_EXP 74
9858: PUSH
9859: LD_EXP 75
9863: PUSH
9864: LD_EXP 78
9868: PUSH
9869: LD_EXP 79
9873: PUSH
9874: LD_EXP 80
9878: PUSH
9879: LD_EXP 76
9883: PUSH
9884: LD_EXP 77
9888: PUSH
9889: LD_EXP 85
9893: PUSH
9894: LD_EXP 89
9898: PUSH
9899: LD_EXP 90
9903: PUSH
9904: LD_EXP 92
9908: PUSH
9909: LD_EXP 96
9913: PUSH
9914: LD_EXP 99
9918: PUSH
9919: LD_EXP 100
9923: PUSH
9924: LD_EXP 110
9928: PUSH
9929: LD_EXP 111
9933: PUSH
9934: LD_EXP 112
9938: PUSH
9939: LD_EXP 113
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: ST_TO_ADDR
// tmp :=  ;
10000: LD_ADDR_VAR 0 3
10004: PUSH
10005: LD_STRING 
10007: ST_TO_ADDR
// for i = 1 to normalCounter do
10008: LD_ADDR_VAR 0 8
10012: PUSH
10013: DOUBLE
10014: LD_INT 1
10016: DEC
10017: ST_TO_ADDR
10018: LD_EXP 58
10022: PUSH
10023: FOR_TO
10024: IFFALSE 10060
// begin if flags [ i ] then
10026: LD_VAR 0 4
10030: PUSH
10031: LD_VAR 0 8
10035: ARRAY
10036: IFFALSE 10058
// tmp := tmp & i & ; ;
10038: LD_ADDR_VAR 0 3
10042: PUSH
10043: LD_VAR 0 3
10047: PUSH
10048: LD_VAR 0 8
10052: STR
10053: PUSH
10054: LD_STRING ;
10056: STR
10057: ST_TO_ADDR
// end ;
10058: GO 10023
10060: POP
10061: POP
// for i = 1 to hardcoreCounter do
10062: LD_ADDR_VAR 0 8
10066: PUSH
10067: DOUBLE
10068: LD_INT 1
10070: DEC
10071: ST_TO_ADDR
10072: LD_EXP 59
10076: PUSH
10077: FOR_TO
10078: IFFALSE 10124
// begin if flags [ normalCounter + i ] then
10080: LD_VAR 0 4
10084: PUSH
10085: LD_EXP 58
10089: PUSH
10090: LD_VAR 0 8
10094: PLUS
10095: ARRAY
10096: IFFALSE 10122
// tmp := tmp & ( 100 + i ) & ; ;
10098: LD_ADDR_VAR 0 3
10102: PUSH
10103: LD_VAR 0 3
10107: PUSH
10108: LD_INT 100
10110: PUSH
10111: LD_VAR 0 8
10115: PLUS
10116: STR
10117: PUSH
10118: LD_STRING ;
10120: STR
10121: ST_TO_ADDR
// end ;
10122: GO 10077
10124: POP
10125: POP
// if tmp then
10126: LD_VAR 0 3
10130: IFFALSE 10142
// active := tmp ;
10132: LD_ADDR_VAR 0 7
10136: PUSH
10137: LD_VAR 0 3
10141: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10142: LD_STRING getStreamItemsFromMission("
10144: PUSH
10145: LD_VAR 0 5
10149: STR
10150: PUSH
10151: LD_STRING ","
10153: STR
10154: PUSH
10155: LD_VAR 0 6
10159: STR
10160: PUSH
10161: LD_STRING ","
10163: STR
10164: PUSH
10165: LD_VAR 0 7
10169: STR
10170: PUSH
10171: LD_STRING ")
10173: STR
10174: PPUSH
10175: CALL_OW 559
// end else
10179: GO 10188
// ToLua ( getStreamItemsFromMission("","","") ) ;
10181: LD_STRING getStreamItemsFromMission("","","")
10183: PPUSH
10184: CALL_OW 559
// end ;
10188: LD_VAR 0 2
10192: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10193: LD_EXP 57
10197: PUSH
10198: LD_EXP 62
10202: AND
10203: IFFALSE 10327
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin enable ;
10212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10213: LD_ADDR_VAR 0 2
10217: PUSH
10218: LD_INT 22
10220: PUSH
10221: LD_OWVAR 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 2
10232: PUSH
10233: LD_INT 34
10235: PUSH
10236: LD_INT 7
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 34
10245: PUSH
10246: LD_INT 45
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 34
10255: PUSH
10256: LD_INT 28
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 34
10265: PUSH
10266: LD_INT 47
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: ST_TO_ADDR
// if not tmp then
10289: LD_VAR 0 2
10293: NOT
10294: IFFALSE 10298
// exit ;
10296: GO 10327
// for i in tmp do
10298: LD_ADDR_VAR 0 1
10302: PUSH
10303: LD_VAR 0 2
10307: PUSH
10308: FOR_IN
10309: IFFALSE 10325
// begin SetLives ( i , 0 ) ;
10311: LD_VAR 0 1
10315: PPUSH
10316: LD_INT 0
10318: PPUSH
10319: CALL_OW 234
// end ;
10323: GO 10308
10325: POP
10326: POP
// end ;
10327: PPOPN 2
10329: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10330: LD_EXP 57
10334: PUSH
10335: LD_EXP 63
10339: AND
10340: IFFALSE 10424
10342: GO 10344
10344: DISABLE
10345: LD_INT 0
10347: PPUSH
10348: PPUSH
// begin enable ;
10349: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: LD_INT 22
10357: PUSH
10358: LD_OWVAR 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 32
10369: PUSH
10370: LD_INT 3
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 69
10385: ST_TO_ADDR
// if not tmp then
10386: LD_VAR 0 2
10390: NOT
10391: IFFALSE 10395
// exit ;
10393: GO 10424
// for i in tmp do
10395: LD_ADDR_VAR 0 1
10399: PUSH
10400: LD_VAR 0 2
10404: PUSH
10405: FOR_IN
10406: IFFALSE 10422
// begin SetLives ( i , 0 ) ;
10408: LD_VAR 0 1
10412: PPUSH
10413: LD_INT 0
10415: PPUSH
10416: CALL_OW 234
// end ;
10420: GO 10405
10422: POP
10423: POP
// end ;
10424: PPOPN 2
10426: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10427: LD_EXP 57
10431: PUSH
10432: LD_EXP 60
10436: AND
10437: IFFALSE 10530
10439: GO 10441
10441: DISABLE
10442: LD_INT 0
10444: PPUSH
// begin enable ;
10445: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10446: LD_ADDR_VAR 0 1
10450: PUSH
10451: LD_INT 22
10453: PUSH
10454: LD_OWVAR 2
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 2
10465: PUSH
10466: LD_INT 25
10468: PUSH
10469: LD_INT 5
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 25
10478: PUSH
10479: LD_INT 9
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 25
10488: PUSH
10489: LD_INT 8
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 69
10510: PUSH
10511: FOR_IN
10512: IFFALSE 10528
// begin SetClass ( i , 1 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 336
// end ;
10526: GO 10511
10528: POP
10529: POP
// end ;
10530: PPOPN 1
10532: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10533: LD_EXP 57
10537: PUSH
10538: LD_EXP 61
10542: AND
10543: PUSH
10544: LD_OWVAR 65
10548: PUSH
10549: LD_INT 7
10551: LESS
10552: AND
10553: IFFALSE 10567
10555: GO 10557
10557: DISABLE
// begin enable ;
10558: ENABLE
// game_speed := 7 ;
10559: LD_ADDR_OWVAR 65
10563: PUSH
10564: LD_INT 7
10566: ST_TO_ADDR
// end ;
10567: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10568: LD_EXP 57
10572: PUSH
10573: LD_EXP 64
10577: AND
10578: IFFALSE 10780
10580: GO 10582
10582: DISABLE
10583: LD_INT 0
10585: PPUSH
10586: PPUSH
10587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10588: LD_ADDR_VAR 0 3
10592: PUSH
10593: LD_INT 81
10595: PUSH
10596: LD_OWVAR 2
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 21
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PPUSH
10619: CALL_OW 69
10623: ST_TO_ADDR
// if not tmp then
10624: LD_VAR 0 3
10628: NOT
10629: IFFALSE 10633
// exit ;
10631: GO 10780
// if tmp > 5 then
10633: LD_VAR 0 3
10637: PUSH
10638: LD_INT 5
10640: GREATER
10641: IFFALSE 10653
// k := 5 else
10643: LD_ADDR_VAR 0 2
10647: PUSH
10648: LD_INT 5
10650: ST_TO_ADDR
10651: GO 10663
// k := tmp ;
10653: LD_ADDR_VAR 0 2
10657: PUSH
10658: LD_VAR 0 3
10662: ST_TO_ADDR
// for i := 1 to k do
10663: LD_ADDR_VAR 0 1
10667: PUSH
10668: DOUBLE
10669: LD_INT 1
10671: DEC
10672: ST_TO_ADDR
10673: LD_VAR 0 2
10677: PUSH
10678: FOR_TO
10679: IFFALSE 10778
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10681: LD_VAR 0 3
10685: PUSH
10686: LD_VAR 0 1
10690: ARRAY
10691: PPUSH
10692: LD_VAR 0 1
10696: PUSH
10697: LD_INT 4
10699: MOD
10700: PUSH
10701: LD_INT 1
10703: PLUS
10704: PPUSH
10705: CALL_OW 259
10709: PUSH
10710: LD_INT 10
10712: LESS
10713: IFFALSE 10776
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10715: LD_VAR 0 3
10719: PUSH
10720: LD_VAR 0 1
10724: ARRAY
10725: PPUSH
10726: LD_VAR 0 1
10730: PUSH
10731: LD_INT 4
10733: MOD
10734: PUSH
10735: LD_INT 1
10737: PLUS
10738: PPUSH
10739: LD_VAR 0 3
10743: PUSH
10744: LD_VAR 0 1
10748: ARRAY
10749: PPUSH
10750: LD_VAR 0 1
10754: PUSH
10755: LD_INT 4
10757: MOD
10758: PUSH
10759: LD_INT 1
10761: PLUS
10762: PPUSH
10763: CALL_OW 259
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: PPUSH
10772: CALL_OW 237
10776: GO 10678
10778: POP
10779: POP
// end ;
10780: PPOPN 3
10782: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10783: LD_EXP 57
10787: PUSH
10788: LD_EXP 65
10792: AND
10793: IFFALSE 10813
10795: GO 10797
10797: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10798: LD_INT 4
10800: PPUSH
10801: LD_OWVAR 2
10805: PPUSH
10806: LD_INT 0
10808: PPUSH
10809: CALL_OW 324
10813: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10814: LD_EXP 57
10818: PUSH
10819: LD_EXP 94
10823: AND
10824: IFFALSE 10844
10826: GO 10828
10828: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10829: LD_INT 19
10831: PPUSH
10832: LD_OWVAR 2
10836: PPUSH
10837: LD_INT 0
10839: PPUSH
10840: CALL_OW 324
10844: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10845: LD_EXP 57
10849: PUSH
10850: LD_EXP 66
10854: AND
10855: IFFALSE 10957
10857: GO 10859
10859: DISABLE
10860: LD_INT 0
10862: PPUSH
10863: PPUSH
// begin enable ;
10864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10865: LD_ADDR_VAR 0 2
10869: PUSH
10870: LD_INT 22
10872: PUSH
10873: LD_OWVAR 2
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 2
10884: PUSH
10885: LD_INT 34
10887: PUSH
10888: LD_INT 11
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 34
10897: PUSH
10898: LD_INT 30
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: LIST
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PPUSH
10914: CALL_OW 69
10918: ST_TO_ADDR
// if not tmp then
10919: LD_VAR 0 2
10923: NOT
10924: IFFALSE 10928
// exit ;
10926: GO 10957
// for i in tmp do
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: LD_VAR 0 2
10937: PUSH
10938: FOR_IN
10939: IFFALSE 10955
// begin SetLives ( i , 0 ) ;
10941: LD_VAR 0 1
10945: PPUSH
10946: LD_INT 0
10948: PPUSH
10949: CALL_OW 234
// end ;
10953: GO 10938
10955: POP
10956: POP
// end ;
10957: PPOPN 2
10959: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10960: LD_EXP 57
10964: PUSH
10965: LD_EXP 67
10969: AND
10970: IFFALSE 10990
10972: GO 10974
10974: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10975: LD_INT 32
10977: PPUSH
10978: LD_OWVAR 2
10982: PPUSH
10983: LD_INT 0
10985: PPUSH
10986: CALL_OW 324
10990: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10991: LD_EXP 57
10995: PUSH
10996: LD_EXP 68
11000: AND
11001: IFFALSE 11182
11003: GO 11005
11005: DISABLE
11006: LD_INT 0
11008: PPUSH
11009: PPUSH
11010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11011: LD_ADDR_VAR 0 2
11015: PUSH
11016: LD_INT 22
11018: PUSH
11019: LD_OWVAR 2
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 33
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PPUSH
11042: CALL_OW 69
11046: ST_TO_ADDR
// if not tmp then
11047: LD_VAR 0 2
11051: NOT
11052: IFFALSE 11056
// exit ;
11054: GO 11182
// side := 0 ;
11056: LD_ADDR_VAR 0 3
11060: PUSH
11061: LD_INT 0
11063: ST_TO_ADDR
// for i := 1 to 8 do
11064: LD_ADDR_VAR 0 1
11068: PUSH
11069: DOUBLE
11070: LD_INT 1
11072: DEC
11073: ST_TO_ADDR
11074: LD_INT 8
11076: PUSH
11077: FOR_TO
11078: IFFALSE 11126
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11080: LD_OWVAR 2
11084: PUSH
11085: LD_VAR 0 1
11089: NONEQUAL
11090: PUSH
11091: LD_OWVAR 2
11095: PPUSH
11096: LD_VAR 0 1
11100: PPUSH
11101: CALL_OW 81
11105: PUSH
11106: LD_INT 2
11108: EQUAL
11109: AND
11110: IFFALSE 11124
// begin side := i ;
11112: LD_ADDR_VAR 0 3
11116: PUSH
11117: LD_VAR 0 1
11121: ST_TO_ADDR
// break ;
11122: GO 11126
// end ;
11124: GO 11077
11126: POP
11127: POP
// if not side then
11128: LD_VAR 0 3
11132: NOT
11133: IFFALSE 11137
// exit ;
11135: GO 11182
// for i := 1 to tmp do
11137: LD_ADDR_VAR 0 1
11141: PUSH
11142: DOUBLE
11143: LD_INT 1
11145: DEC
11146: ST_TO_ADDR
11147: LD_VAR 0 2
11151: PUSH
11152: FOR_TO
11153: IFFALSE 11180
// if Prob ( 60 ) then
11155: LD_INT 60
11157: PPUSH
11158: CALL_OW 13
11162: IFFALSE 11178
// SetSide ( i , side ) ;
11164: LD_VAR 0 1
11168: PPUSH
11169: LD_VAR 0 3
11173: PPUSH
11174: CALL_OW 235
11178: GO 11152
11180: POP
11181: POP
// end ;
11182: PPOPN 3
11184: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11185: LD_EXP 57
11189: PUSH
11190: LD_EXP 70
11194: AND
11195: IFFALSE 11314
11197: GO 11199
11199: DISABLE
11200: LD_INT 0
11202: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11203: LD_ADDR_VAR 0 1
11207: PUSH
11208: LD_INT 22
11210: PUSH
11211: LD_OWVAR 2
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 21
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: LD_INT 0
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11312
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11260: LD_VAR 0 1
11264: PPUSH
11265: CALL_OW 257
11269: PUSH
11270: LD_INT 1
11272: PUSH
11273: LD_INT 2
11275: PUSH
11276: LD_INT 3
11278: PUSH
11279: LD_INT 4
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: IN
11288: IFFALSE 11310
// SetClass ( un , rand ( 1 , 4 ) ) ;
11290: LD_VAR 0 1
11294: PPUSH
11295: LD_INT 1
11297: PPUSH
11298: LD_INT 4
11300: PPUSH
11301: CALL_OW 12
11305: PPUSH
11306: CALL_OW 336
11310: GO 11257
11312: POP
11313: POP
// end ;
11314: PPOPN 1
11316: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11317: LD_EXP 57
11321: PUSH
11322: LD_EXP 69
11326: AND
11327: IFFALSE 11406
11329: GO 11331
11331: DISABLE
11332: LD_INT 0
11334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11335: LD_ADDR_VAR 0 1
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_OWVAR 2
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 21
11354: PUSH
11355: LD_INT 3
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// if not tmp then
11371: LD_VAR 0 1
11375: NOT
11376: IFFALSE 11380
// exit ;
11378: GO 11406
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11380: LD_VAR 0 1
11384: PUSH
11385: LD_INT 1
11387: PPUSH
11388: LD_VAR 0 1
11392: PPUSH
11393: CALL_OW 12
11397: ARRAY
11398: PPUSH
11399: LD_INT 100
11401: PPUSH
11402: CALL_OW 234
// end ;
11406: PPOPN 1
11408: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11409: LD_EXP 57
11413: PUSH
11414: LD_EXP 71
11418: AND
11419: IFFALSE 11517
11421: GO 11423
11423: DISABLE
11424: LD_INT 0
11426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11427: LD_ADDR_VAR 0 1
11431: PUSH
11432: LD_INT 22
11434: PUSH
11435: LD_OWVAR 2
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 21
11446: PUSH
11447: LD_INT 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 69
11462: ST_TO_ADDR
// if not tmp then
11463: LD_VAR 0 1
11467: NOT
11468: IFFALSE 11472
// exit ;
11470: GO 11517
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11472: LD_VAR 0 1
11476: PUSH
11477: LD_INT 1
11479: PPUSH
11480: LD_VAR 0 1
11484: PPUSH
11485: CALL_OW 12
11489: ARRAY
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: LD_INT 4
11496: PPUSH
11497: CALL_OW 12
11501: PPUSH
11502: LD_INT 3000
11504: PPUSH
11505: LD_INT 9000
11507: PPUSH
11508: CALL_OW 12
11512: PPUSH
11513: CALL_OW 492
// end ;
11517: PPOPN 1
11519: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11520: LD_EXP 57
11524: PUSH
11525: LD_EXP 72
11529: AND
11530: IFFALSE 11550
11532: GO 11534
11534: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11535: LD_INT 1
11537: PPUSH
11538: LD_OWVAR 2
11542: PPUSH
11543: LD_INT 0
11545: PPUSH
11546: CALL_OW 324
11550: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11551: LD_EXP 57
11555: PUSH
11556: LD_EXP 73
11560: AND
11561: IFFALSE 11644
11563: GO 11565
11565: DISABLE
11566: LD_INT 0
11568: PPUSH
11569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11570: LD_ADDR_VAR 0 2
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_OWVAR 2
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 3
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PPUSH
11601: CALL_OW 69
11605: ST_TO_ADDR
// if not tmp then
11606: LD_VAR 0 2
11610: NOT
11611: IFFALSE 11615
// exit ;
11613: GO 11644
// for i in tmp do
11615: LD_ADDR_VAR 0 1
11619: PUSH
11620: LD_VAR 0 2
11624: PUSH
11625: FOR_IN
11626: IFFALSE 11642
// SetBLevel ( i , 10 ) ;
11628: LD_VAR 0 1
11632: PPUSH
11633: LD_INT 10
11635: PPUSH
11636: CALL_OW 241
11640: GO 11625
11642: POP
11643: POP
// end ;
11644: PPOPN 2
11646: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11647: LD_EXP 57
11651: PUSH
11652: LD_EXP 74
11656: AND
11657: IFFALSE 11768
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
11666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11667: LD_ADDR_VAR 0 3
11671: PUSH
11672: LD_INT 22
11674: PUSH
11675: LD_OWVAR 2
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 25
11686: PUSH
11687: LD_INT 1
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 69
11702: ST_TO_ADDR
// if not tmp then
11703: LD_VAR 0 3
11707: NOT
11708: IFFALSE 11712
// exit ;
11710: GO 11768
// un := tmp [ rand ( 1 , tmp ) ] ;
11712: LD_ADDR_VAR 0 2
11716: PUSH
11717: LD_VAR 0 3
11721: PUSH
11722: LD_INT 1
11724: PPUSH
11725: LD_VAR 0 3
11729: PPUSH
11730: CALL_OW 12
11734: ARRAY
11735: ST_TO_ADDR
// if Crawls ( un ) then
11736: LD_VAR 0 2
11740: PPUSH
11741: CALL_OW 318
11745: IFFALSE 11756
// ComWalk ( un ) ;
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11756: LD_VAR 0 2
11760: PPUSH
11761: LD_INT 5
11763: PPUSH
11764: CALL_OW 336
// end ;
11768: PPOPN 3
11770: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11771: LD_EXP 57
11775: PUSH
11776: LD_EXP 75
11780: AND
11781: PUSH
11782: LD_OWVAR 67
11786: PUSH
11787: LD_INT 4
11789: LESS
11790: AND
11791: IFFALSE 11810
11793: GO 11795
11795: DISABLE
// begin Difficulty := Difficulty + 1 ;
11796: LD_ADDR_OWVAR 67
11800: PUSH
11801: LD_OWVAR 67
11805: PUSH
11806: LD_INT 1
11808: PLUS
11809: ST_TO_ADDR
// end ;
11810: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11811: LD_EXP 57
11815: PUSH
11816: LD_EXP 76
11820: AND
11821: IFFALSE 11924
11823: GO 11825
11825: DISABLE
11826: LD_INT 0
11828: PPUSH
// begin for i := 1 to 5 do
11829: LD_ADDR_VAR 0 1
11833: PUSH
11834: DOUBLE
11835: LD_INT 1
11837: DEC
11838: ST_TO_ADDR
11839: LD_INT 5
11841: PUSH
11842: FOR_TO
11843: IFFALSE 11922
// begin uc_nation := nation_nature ;
11845: LD_ADDR_OWVAR 21
11849: PUSH
11850: LD_INT 0
11852: ST_TO_ADDR
// uc_side := 0 ;
11853: LD_ADDR_OWVAR 20
11857: PUSH
11858: LD_INT 0
11860: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11861: LD_ADDR_OWVAR 29
11865: PUSH
11866: LD_INT 12
11868: PUSH
11869: LD_INT 12
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: ST_TO_ADDR
// hc_agressivity := 20 ;
11876: LD_ADDR_OWVAR 35
11880: PUSH
11881: LD_INT 20
11883: ST_TO_ADDR
// hc_class := class_tiger ;
11884: LD_ADDR_OWVAR 28
11888: PUSH
11889: LD_INT 14
11891: ST_TO_ADDR
// hc_gallery :=  ;
11892: LD_ADDR_OWVAR 33
11896: PUSH
11897: LD_STRING 
11899: ST_TO_ADDR
// hc_name :=  ;
11900: LD_ADDR_OWVAR 26
11904: PUSH
11905: LD_STRING 
11907: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11908: CALL_OW 44
11912: PPUSH
11913: LD_INT 0
11915: PPUSH
11916: CALL_OW 51
// end ;
11920: GO 11842
11922: POP
11923: POP
// end ;
11924: PPOPN 1
11926: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11927: LD_EXP 57
11931: PUSH
11932: LD_EXP 77
11936: AND
11937: IFFALSE 11946
11939: GO 11941
11941: DISABLE
// StreamSibBomb ;
11942: CALL 11947 0 0
11946: END
// export function StreamSibBomb ; var i , x , y ; begin
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
// result := false ;
11953: LD_ADDR_VAR 0 1
11957: PUSH
11958: LD_INT 0
11960: ST_TO_ADDR
// for i := 1 to 16 do
11961: LD_ADDR_VAR 0 2
11965: PUSH
11966: DOUBLE
11967: LD_INT 1
11969: DEC
11970: ST_TO_ADDR
11971: LD_INT 16
11973: PUSH
11974: FOR_TO
11975: IFFALSE 12174
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11977: LD_ADDR_VAR 0 3
11981: PUSH
11982: LD_INT 10
11984: PUSH
11985: LD_INT 20
11987: PUSH
11988: LD_INT 30
11990: PUSH
11991: LD_INT 40
11993: PUSH
11994: LD_INT 50
11996: PUSH
11997: LD_INT 60
11999: PUSH
12000: LD_INT 70
12002: PUSH
12003: LD_INT 80
12005: PUSH
12006: LD_INT 90
12008: PUSH
12009: LD_INT 100
12011: PUSH
12012: LD_INT 110
12014: PUSH
12015: LD_INT 120
12017: PUSH
12018: LD_INT 130
12020: PUSH
12021: LD_INT 140
12023: PUSH
12024: LD_INT 150
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 1
12046: PPUSH
12047: LD_INT 15
12049: PPUSH
12050: CALL_OW 12
12054: ARRAY
12055: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12056: LD_ADDR_VAR 0 4
12060: PUSH
12061: LD_INT 10
12063: PUSH
12064: LD_INT 20
12066: PUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 40
12072: PUSH
12073: LD_INT 50
12075: PUSH
12076: LD_INT 60
12078: PUSH
12079: LD_INT 70
12081: PUSH
12082: LD_INT 80
12084: PUSH
12085: LD_INT 90
12087: PUSH
12088: LD_INT 100
12090: PUSH
12091: LD_INT 110
12093: PUSH
12094: LD_INT 120
12096: PUSH
12097: LD_INT 130
12099: PUSH
12100: LD_INT 140
12102: PUSH
12103: LD_INT 150
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 1
12125: PPUSH
12126: LD_INT 15
12128: PPUSH
12129: CALL_OW 12
12133: ARRAY
12134: ST_TO_ADDR
// if ValidHex ( x , y ) then
12135: LD_VAR 0 3
12139: PPUSH
12140: LD_VAR 0 4
12144: PPUSH
12145: CALL_OW 488
12149: IFFALSE 12172
// begin result := [ x , y ] ;
12151: LD_ADDR_VAR 0 1
12155: PUSH
12156: LD_VAR 0 3
12160: PUSH
12161: LD_VAR 0 4
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: ST_TO_ADDR
// break ;
12170: GO 12174
// end ; end ;
12172: GO 11974
12174: POP
12175: POP
// if result then
12176: LD_VAR 0 1
12180: IFFALSE 12240
// begin ToLua ( playSibBomb() ) ;
12182: LD_STRING playSibBomb()
12184: PPUSH
12185: CALL_OW 559
// wait ( 0 0$14 ) ;
12189: LD_INT 490
12191: PPUSH
12192: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12196: LD_VAR 0 1
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: PPUSH
12205: LD_VAR 0 1
12209: PUSH
12210: LD_INT 2
12212: ARRAY
12213: PPUSH
12214: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12218: LD_VAR 0 1
12222: PUSH
12223: LD_INT 1
12225: ARRAY
12226: PPUSH
12227: LD_VAR 0 1
12231: PUSH
12232: LD_INT 2
12234: ARRAY
12235: PPUSH
12236: CALL_OW 429
// end ; end ;
12240: LD_VAR 0 1
12244: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12245: LD_EXP 57
12249: PUSH
12250: LD_EXP 79
12254: AND
12255: IFFALSE 12267
12257: GO 12259
12259: DISABLE
// YouLost (  ) ;
12260: LD_STRING 
12262: PPUSH
12263: CALL_OW 104
12267: END
// every 0 0$1 trigger StreamModeActive and sFog do
12268: LD_EXP 57
12272: PUSH
12273: LD_EXP 78
12277: AND
12278: IFFALSE 12292
12280: GO 12282
12282: DISABLE
// FogOff ( your_side ) ;
12283: LD_OWVAR 2
12287: PPUSH
12288: CALL_OW 344
12292: END
// every 0 0$1 trigger StreamModeActive and sSun do
12293: LD_EXP 57
12297: PUSH
12298: LD_EXP 80
12302: AND
12303: IFFALSE 12331
12305: GO 12307
12307: DISABLE
// begin solar_recharge_percent := 0 ;
12308: LD_ADDR_OWVAR 79
12312: PUSH
12313: LD_INT 0
12315: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12316: LD_INT 10500
12318: PPUSH
12319: CALL_OW 67
// solar_recharge_percent := 100 ;
12323: LD_ADDR_OWVAR 79
12327: PUSH
12328: LD_INT 100
12330: ST_TO_ADDR
// end ;
12331: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12332: LD_EXP 57
12336: PUSH
12337: LD_EXP 81
12341: AND
12342: IFFALSE 12581
12344: GO 12346
12346: DISABLE
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// begin tmp := [ ] ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: EMPTY
12358: ST_TO_ADDR
// for i := 1 to 6 do
12359: LD_ADDR_VAR 0 1
12363: PUSH
12364: DOUBLE
12365: LD_INT 1
12367: DEC
12368: ST_TO_ADDR
12369: LD_INT 6
12371: PUSH
12372: FOR_TO
12373: IFFALSE 12478
// begin uc_nation := nation_nature ;
12375: LD_ADDR_OWVAR 21
12379: PUSH
12380: LD_INT 0
12382: ST_TO_ADDR
// uc_side := 0 ;
12383: LD_ADDR_OWVAR 20
12387: PUSH
12388: LD_INT 0
12390: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12391: LD_ADDR_OWVAR 29
12395: PUSH
12396: LD_INT 12
12398: PUSH
12399: LD_INT 12
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: ST_TO_ADDR
// hc_agressivity := 20 ;
12406: LD_ADDR_OWVAR 35
12410: PUSH
12411: LD_INT 20
12413: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12414: LD_ADDR_OWVAR 28
12418: PUSH
12419: LD_INT 17
12421: ST_TO_ADDR
// hc_gallery :=  ;
12422: LD_ADDR_OWVAR 33
12426: PUSH
12427: LD_STRING 
12429: ST_TO_ADDR
// hc_name :=  ;
12430: LD_ADDR_OWVAR 26
12434: PUSH
12435: LD_STRING 
12437: ST_TO_ADDR
// un := CreateHuman ;
12438: LD_ADDR_VAR 0 2
12442: PUSH
12443: CALL_OW 44
12447: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12448: LD_VAR 0 2
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 51
// tmp := tmp ^ un ;
12460: LD_ADDR_VAR 0 3
12464: PUSH
12465: LD_VAR 0 3
12469: PUSH
12470: LD_VAR 0 2
12474: ADD
12475: ST_TO_ADDR
// end ;
12476: GO 12372
12478: POP
12479: POP
// repeat wait ( 0 0$1 ) ;
12480: LD_INT 35
12482: PPUSH
12483: CALL_OW 67
// for un in tmp do
12487: LD_ADDR_VAR 0 2
12491: PUSH
12492: LD_VAR 0 3
12496: PUSH
12497: FOR_IN
12498: IFFALSE 12572
// begin if IsDead ( un ) then
12500: LD_VAR 0 2
12504: PPUSH
12505: CALL_OW 301
12509: IFFALSE 12529
// begin tmp := tmp diff un ;
12511: LD_ADDR_VAR 0 3
12515: PUSH
12516: LD_VAR 0 3
12520: PUSH
12521: LD_VAR 0 2
12525: DIFF
12526: ST_TO_ADDR
// continue ;
12527: GO 12497
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12529: LD_VAR 0 2
12533: PPUSH
12534: LD_INT 3
12536: PUSH
12537: LD_INT 22
12539: PUSH
12540: LD_INT 0
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: PPUSH
12556: LD_VAR 0 2
12560: PPUSH
12561: CALL_OW 74
12565: PPUSH
12566: CALL_OW 115
// end ;
12570: GO 12497
12572: POP
12573: POP
// until not tmp ;
12574: LD_VAR 0 3
12578: NOT
12579: IFFALSE 12480
// end ;
12581: PPOPN 3
12583: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12584: LD_EXP 57
12588: PUSH
12589: LD_EXP 82
12593: AND
12594: IFFALSE 12648
12596: GO 12598
12598: DISABLE
// begin ToLua ( displayTroll(); ) ;
12599: LD_STRING displayTroll();
12601: PPUSH
12602: CALL_OW 559
// wait ( 3 3$00 ) ;
12606: LD_INT 6300
12608: PPUSH
12609: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12613: LD_STRING hideTroll();
12615: PPUSH
12616: CALL_OW 559
// wait ( 1 1$00 ) ;
12620: LD_INT 2100
12622: PPUSH
12623: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12627: LD_STRING displayTroll();
12629: PPUSH
12630: CALL_OW 559
// wait ( 1 1$00 ) ;
12634: LD_INT 2100
12636: PPUSH
12637: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12641: LD_STRING hideTroll();
12643: PPUSH
12644: CALL_OW 559
// end ;
12648: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12649: LD_EXP 57
12653: PUSH
12654: LD_EXP 83
12658: AND
12659: IFFALSE 12722
12661: GO 12663
12663: DISABLE
12664: LD_INT 0
12666: PPUSH
// begin p := 0 ;
12667: LD_ADDR_VAR 0 1
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// repeat game_speed := 1 ;
12675: LD_ADDR_OWVAR 65
12679: PUSH
12680: LD_INT 1
12682: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12683: LD_INT 35
12685: PPUSH
12686: CALL_OW 67
// p := p + 1 ;
12690: LD_ADDR_VAR 0 1
12694: PUSH
12695: LD_VAR 0 1
12699: PUSH
12700: LD_INT 1
12702: PLUS
12703: ST_TO_ADDR
// until p >= 60 ;
12704: LD_VAR 0 1
12708: PUSH
12709: LD_INT 60
12711: GREATEREQUAL
12712: IFFALSE 12675
// game_speed := 4 ;
12714: LD_ADDR_OWVAR 65
12718: PUSH
12719: LD_INT 4
12721: ST_TO_ADDR
// end ;
12722: PPOPN 1
12724: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12725: LD_EXP 57
12729: PUSH
12730: LD_EXP 84
12734: AND
12735: IFFALSE 12881
12737: GO 12739
12739: DISABLE
12740: LD_INT 0
12742: PPUSH
12743: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12744: LD_ADDR_VAR 0 1
12748: PUSH
12749: LD_INT 22
12751: PUSH
12752: LD_OWVAR 2
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 2
12763: PUSH
12764: LD_INT 30
12766: PUSH
12767: LD_INT 0
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 30
12776: PUSH
12777: LD_INT 1
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 69
12797: ST_TO_ADDR
// if not depot then
12798: LD_VAR 0 1
12802: NOT
12803: IFFALSE 12807
// exit ;
12805: GO 12881
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12807: LD_ADDR_VAR 0 2
12811: PUSH
12812: LD_VAR 0 1
12816: PUSH
12817: LD_INT 1
12819: PPUSH
12820: LD_VAR 0 1
12824: PPUSH
12825: CALL_OW 12
12829: ARRAY
12830: PPUSH
12831: CALL_OW 274
12835: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12836: LD_VAR 0 2
12840: PPUSH
12841: LD_INT 1
12843: PPUSH
12844: LD_INT 0
12846: PPUSH
12847: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12851: LD_VAR 0 2
12855: PPUSH
12856: LD_INT 2
12858: PPUSH
12859: LD_INT 0
12861: PPUSH
12862: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12866: LD_VAR 0 2
12870: PPUSH
12871: LD_INT 3
12873: PPUSH
12874: LD_INT 0
12876: PPUSH
12877: CALL_OW 277
// end ;
12881: PPOPN 2
12883: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12884: LD_EXP 57
12888: PUSH
12889: LD_EXP 85
12893: AND
12894: IFFALSE 12991
12896: GO 12898
12898: DISABLE
12899: LD_INT 0
12901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12902: LD_ADDR_VAR 0 1
12906: PUSH
12907: LD_INT 22
12909: PUSH
12910: LD_OWVAR 2
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 21
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 3
12931: PUSH
12932: LD_INT 23
12934: PUSH
12935: LD_INT 0
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: ST_TO_ADDR
// if not tmp then
12956: LD_VAR 0 1
12960: NOT
12961: IFFALSE 12965
// exit ;
12963: GO 12991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12965: LD_VAR 0 1
12969: PUSH
12970: LD_INT 1
12972: PPUSH
12973: LD_VAR 0 1
12977: PPUSH
12978: CALL_OW 12
12982: ARRAY
12983: PPUSH
12984: LD_INT 200
12986: PPUSH
12987: CALL_OW 234
// end ;
12991: PPOPN 1
12993: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12994: LD_EXP 57
12998: PUSH
12999: LD_EXP 86
13003: AND
13004: IFFALSE 13083
13006: GO 13008
13008: DISABLE
13009: LD_INT 0
13011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13012: LD_ADDR_VAR 0 1
13016: PUSH
13017: LD_INT 22
13019: PUSH
13020: LD_OWVAR 2
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 21
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PPUSH
13043: CALL_OW 69
13047: ST_TO_ADDR
// if not tmp then
13048: LD_VAR 0 1
13052: NOT
13053: IFFALSE 13057
// exit ;
13055: GO 13083
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13057: LD_VAR 0 1
13061: PUSH
13062: LD_INT 1
13064: PPUSH
13065: LD_VAR 0 1
13069: PPUSH
13070: CALL_OW 12
13074: ARRAY
13075: PPUSH
13076: LD_INT 60
13078: PPUSH
13079: CALL_OW 234
// end ;
13083: PPOPN 1
13085: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13086: LD_EXP 57
13090: PUSH
13091: LD_EXP 87
13095: AND
13096: IFFALSE 13195
13098: GO 13100
13100: DISABLE
13101: LD_INT 0
13103: PPUSH
13104: PPUSH
// begin enable ;
13105: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: LD_OWVAR 2
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 61
13125: PUSH
13126: EMPTY
13127: LIST
13128: PUSH
13129: LD_INT 33
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: PPUSH
13144: CALL_OW 69
13148: ST_TO_ADDR
// if not tmp then
13149: LD_VAR 0 1
13153: NOT
13154: IFFALSE 13158
// exit ;
13156: GO 13195
// for i in tmp do
13158: LD_ADDR_VAR 0 2
13162: PUSH
13163: LD_VAR 0 1
13167: PUSH
13168: FOR_IN
13169: IFFALSE 13193
// if IsControledBy ( i ) then
13171: LD_VAR 0 2
13175: PPUSH
13176: CALL_OW 312
13180: IFFALSE 13191
// ComUnlink ( i ) ;
13182: LD_VAR 0 2
13186: PPUSH
13187: CALL_OW 136
13191: GO 13168
13193: POP
13194: POP
// end ;
13195: PPOPN 2
13197: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13198: LD_EXP 57
13202: PUSH
13203: LD_EXP 88
13207: AND
13208: IFFALSE 13348
13210: GO 13212
13212: DISABLE
13213: LD_INT 0
13215: PPUSH
13216: PPUSH
// begin ToLua ( displayPowell(); ) ;
13217: LD_STRING displayPowell();
13219: PPUSH
13220: CALL_OW 559
// uc_side := 0 ;
13224: LD_ADDR_OWVAR 20
13228: PUSH
13229: LD_INT 0
13231: ST_TO_ADDR
// uc_nation := 2 ;
13232: LD_ADDR_OWVAR 21
13236: PUSH
13237: LD_INT 2
13239: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13240: LD_ADDR_OWVAR 37
13244: PUSH
13245: LD_INT 14
13247: ST_TO_ADDR
// vc_engine := engine_siberite ;
13248: LD_ADDR_OWVAR 39
13252: PUSH
13253: LD_INT 3
13255: ST_TO_ADDR
// vc_control := control_apeman ;
13256: LD_ADDR_OWVAR 38
13260: PUSH
13261: LD_INT 5
13263: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13264: LD_ADDR_OWVAR 40
13268: PUSH
13269: LD_INT 29
13271: ST_TO_ADDR
// un := CreateVehicle ;
13272: LD_ADDR_VAR 0 2
13276: PUSH
13277: CALL_OW 45
13281: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13282: LD_VAR 0 2
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13294: LD_INT 35
13296: PPUSH
13297: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13301: LD_VAR 0 2
13305: PPUSH
13306: LD_INT 22
13308: PUSH
13309: LD_OWVAR 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 69
13322: PPUSH
13323: LD_VAR 0 2
13327: PPUSH
13328: CALL_OW 74
13332: PPUSH
13333: CALL_OW 115
// until IsDead ( un ) ;
13337: LD_VAR 0 2
13341: PPUSH
13342: CALL_OW 301
13346: IFFALSE 13294
// end ;
13348: PPOPN 2
13350: END
// every 0 0$1 trigger StreamModeActive and sStu do
13351: LD_EXP 57
13355: PUSH
13356: LD_EXP 96
13360: AND
13361: IFFALSE 13377
13363: GO 13365
13365: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13366: LD_STRING displayStucuk();
13368: PPUSH
13369: CALL_OW 559
// ResetFog ;
13373: CALL_OW 335
// end ;
13377: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13378: LD_EXP 57
13382: PUSH
13383: LD_EXP 89
13387: AND
13388: IFFALSE 13529
13390: GO 13392
13392: DISABLE
13393: LD_INT 0
13395: PPUSH
13396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13397: LD_ADDR_VAR 0 2
13401: PUSH
13402: LD_INT 22
13404: PUSH
13405: LD_OWVAR 2
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 21
13416: PUSH
13417: LD_INT 1
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 69
13432: ST_TO_ADDR
// if not tmp then
13433: LD_VAR 0 2
13437: NOT
13438: IFFALSE 13442
// exit ;
13440: GO 13529
// un := tmp [ rand ( 1 , tmp ) ] ;
13442: LD_ADDR_VAR 0 1
13446: PUSH
13447: LD_VAR 0 2
13451: PUSH
13452: LD_INT 1
13454: PPUSH
13455: LD_VAR 0 2
13459: PPUSH
13460: CALL_OW 12
13464: ARRAY
13465: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13466: LD_VAR 0 1
13470: PPUSH
13471: LD_INT 0
13473: PPUSH
13474: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13478: LD_VAR 0 1
13482: PPUSH
13483: LD_OWVAR 3
13487: PUSH
13488: LD_VAR 0 1
13492: DIFF
13493: PPUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: CALL_OW 74
13503: PPUSH
13504: CALL_OW 115
// wait ( 0 0$20 ) ;
13508: LD_INT 700
13510: PPUSH
13511: CALL_OW 67
// SetSide ( un , your_side ) ;
13515: LD_VAR 0 1
13519: PPUSH
13520: LD_OWVAR 2
13524: PPUSH
13525: CALL_OW 235
// end ;
13529: PPOPN 2
13531: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13532: LD_EXP 57
13536: PUSH
13537: LD_EXP 90
13541: AND
13542: IFFALSE 13648
13544: GO 13546
13546: DISABLE
13547: LD_INT 0
13549: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13550: LD_ADDR_VAR 0 1
13554: PUSH
13555: LD_INT 22
13557: PUSH
13558: LD_OWVAR 2
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: LD_INT 30
13572: PUSH
13573: LD_INT 0
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 30
13582: PUSH
13583: LD_INT 1
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PPUSH
13599: CALL_OW 69
13603: ST_TO_ADDR
// if not depot then
13604: LD_VAR 0 1
13608: NOT
13609: IFFALSE 13613
// exit ;
13611: GO 13648
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13613: LD_VAR 0 1
13617: PUSH
13618: LD_INT 1
13620: ARRAY
13621: PPUSH
13622: CALL_OW 250
13626: PPUSH
13627: LD_VAR 0 1
13631: PUSH
13632: LD_INT 1
13634: ARRAY
13635: PPUSH
13636: CALL_OW 251
13640: PPUSH
13641: LD_INT 70
13643: PPUSH
13644: CALL_OW 495
// end ;
13648: PPOPN 1
13650: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13651: LD_EXP 57
13655: PUSH
13656: LD_EXP 91
13660: AND
13661: IFFALSE 13872
13663: GO 13665
13665: DISABLE
13666: LD_INT 0
13668: PPUSH
13669: PPUSH
13670: PPUSH
13671: PPUSH
13672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13673: LD_ADDR_VAR 0 5
13677: PUSH
13678: LD_INT 22
13680: PUSH
13681: LD_OWVAR 2
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 21
13692: PUSH
13693: LD_INT 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 69
13708: ST_TO_ADDR
// if not tmp then
13709: LD_VAR 0 5
13713: NOT
13714: IFFALSE 13718
// exit ;
13716: GO 13872
// for i in tmp do
13718: LD_ADDR_VAR 0 1
13722: PUSH
13723: LD_VAR 0 5
13727: PUSH
13728: FOR_IN
13729: IFFALSE 13870
// begin d := rand ( 0 , 5 ) ;
13731: LD_ADDR_VAR 0 4
13735: PUSH
13736: LD_INT 0
13738: PPUSH
13739: LD_INT 5
13741: PPUSH
13742: CALL_OW 12
13746: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_VAR 0 1
13756: PPUSH
13757: CALL_OW 250
13761: PPUSH
13762: LD_VAR 0 4
13766: PPUSH
13767: LD_INT 3
13769: PPUSH
13770: LD_INT 12
13772: PPUSH
13773: CALL_OW 12
13777: PPUSH
13778: CALL_OW 272
13782: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 251
13797: PPUSH
13798: LD_VAR 0 4
13802: PPUSH
13803: LD_INT 3
13805: PPUSH
13806: LD_INT 12
13808: PPUSH
13809: CALL_OW 12
13813: PPUSH
13814: CALL_OW 273
13818: ST_TO_ADDR
// if ValidHex ( x , y ) then
13819: LD_VAR 0 2
13823: PPUSH
13824: LD_VAR 0 3
13828: PPUSH
13829: CALL_OW 488
13833: IFFALSE 13868
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13835: LD_VAR 0 1
13839: PPUSH
13840: LD_VAR 0 2
13844: PPUSH
13845: LD_VAR 0 3
13849: PPUSH
13850: LD_INT 3
13852: PPUSH
13853: LD_INT 6
13855: PPUSH
13856: CALL_OW 12
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: CALL_OW 483
// end ;
13868: GO 13728
13870: POP
13871: POP
// end ;
13872: PPOPN 5
13874: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13875: LD_EXP 57
13879: PUSH
13880: LD_EXP 92
13884: AND
13885: IFFALSE 13979
13887: GO 13889
13889: DISABLE
13890: LD_INT 0
13892: PPUSH
13893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13894: LD_ADDR_VAR 0 2
13898: PUSH
13899: LD_INT 22
13901: PUSH
13902: LD_OWVAR 2
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 32
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 2
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: PPUSH
13936: CALL_OW 69
13940: ST_TO_ADDR
// if not tmp then
13941: LD_VAR 0 2
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 13979
// for i in tmp do
13950: LD_ADDR_VAR 0 1
13954: PUSH
13955: LD_VAR 0 2
13959: PUSH
13960: FOR_IN
13961: IFFALSE 13977
// SetFuel ( i , 0 ) ;
13963: LD_VAR 0 1
13967: PPUSH
13968: LD_INT 0
13970: PPUSH
13971: CALL_OW 240
13975: GO 13960
13977: POP
13978: POP
// end ;
13979: PPOPN 2
13981: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13982: LD_EXP 57
13986: PUSH
13987: LD_EXP 93
13991: AND
13992: IFFALSE 14058
13994: GO 13996
13996: DISABLE
13997: LD_INT 0
13999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14000: LD_ADDR_VAR 0 1
14004: PUSH
14005: LD_INT 22
14007: PUSH
14008: LD_OWVAR 2
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 30
14019: PUSH
14020: LD_INT 29
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 69
14035: ST_TO_ADDR
// if not tmp then
14036: LD_VAR 0 1
14040: NOT
14041: IFFALSE 14045
// exit ;
14043: GO 14058
// DestroyUnit ( tmp [ 1 ] ) ;
14045: LD_VAR 0 1
14049: PUSH
14050: LD_INT 1
14052: ARRAY
14053: PPUSH
14054: CALL_OW 65
// end ;
14058: PPOPN 1
14060: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14061: LD_EXP 57
14065: PUSH
14066: LD_EXP 95
14070: AND
14071: IFFALSE 14200
14073: GO 14075
14075: DISABLE
14076: LD_INT 0
14078: PPUSH
// begin uc_side := 0 ;
14079: LD_ADDR_OWVAR 20
14083: PUSH
14084: LD_INT 0
14086: ST_TO_ADDR
// uc_nation := nation_arabian ;
14087: LD_ADDR_OWVAR 21
14091: PUSH
14092: LD_INT 2
14094: ST_TO_ADDR
// hc_gallery :=  ;
14095: LD_ADDR_OWVAR 33
14099: PUSH
14100: LD_STRING 
14102: ST_TO_ADDR
// hc_name :=  ;
14103: LD_ADDR_OWVAR 26
14107: PUSH
14108: LD_STRING 
14110: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14111: LD_INT 1
14113: PPUSH
14114: LD_INT 11
14116: PPUSH
14117: LD_INT 10
14119: PPUSH
14120: CALL_OW 380
// un := CreateHuman ;
14124: LD_ADDR_VAR 0 1
14128: PUSH
14129: CALL_OW 44
14133: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_INT 1
14141: PPUSH
14142: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14146: LD_INT 35
14148: PPUSH
14149: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14153: LD_VAR 0 1
14157: PPUSH
14158: LD_INT 22
14160: PUSH
14161: LD_OWVAR 2
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 69
14174: PPUSH
14175: LD_VAR 0 1
14179: PPUSH
14180: CALL_OW 74
14184: PPUSH
14185: CALL_OW 115
// until IsDead ( un ) ;
14189: LD_VAR 0 1
14193: PPUSH
14194: CALL_OW 301
14198: IFFALSE 14146
// end ;
14200: PPOPN 1
14202: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14203: LD_EXP 57
14207: PUSH
14208: LD_EXP 97
14212: AND
14213: IFFALSE 14225
14215: GO 14217
14217: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14218: LD_STRING earthquake(getX(game), 0, 32)
14220: PPUSH
14221: CALL_OW 559
14225: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14226: LD_EXP 57
14230: PUSH
14231: LD_EXP 98
14235: AND
14236: IFFALSE 14327
14238: GO 14240
14240: DISABLE
14241: LD_INT 0
14243: PPUSH
// begin enable ;
14244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14245: LD_ADDR_VAR 0 1
14249: PUSH
14250: LD_INT 22
14252: PUSH
14253: LD_OWVAR 2
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 21
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 33
14274: PUSH
14275: LD_INT 3
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: ST_TO_ADDR
// if not tmp then
14292: LD_VAR 0 1
14296: NOT
14297: IFFALSE 14301
// exit ;
14299: GO 14327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14301: LD_VAR 0 1
14305: PUSH
14306: LD_INT 1
14308: PPUSH
14309: LD_VAR 0 1
14313: PPUSH
14314: CALL_OW 12
14318: ARRAY
14319: PPUSH
14320: LD_INT 1
14322: PPUSH
14323: CALL_OW 234
// end ;
14327: PPOPN 1
14329: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14330: LD_EXP 57
14334: PUSH
14335: LD_EXP 99
14339: AND
14340: IFFALSE 14481
14342: GO 14344
14344: DISABLE
14345: LD_INT 0
14347: PPUSH
14348: PPUSH
14349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14350: LD_ADDR_VAR 0 3
14354: PUSH
14355: LD_INT 22
14357: PUSH
14358: LD_OWVAR 2
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 25
14369: PUSH
14370: LD_INT 1
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PPUSH
14381: CALL_OW 69
14385: ST_TO_ADDR
// if not tmp then
14386: LD_VAR 0 3
14390: NOT
14391: IFFALSE 14395
// exit ;
14393: GO 14481
// un := tmp [ rand ( 1 , tmp ) ] ;
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: LD_VAR 0 3
14404: PUSH
14405: LD_INT 1
14407: PPUSH
14408: LD_VAR 0 3
14412: PPUSH
14413: CALL_OW 12
14417: ARRAY
14418: ST_TO_ADDR
// if Crawls ( un ) then
14419: LD_VAR 0 2
14423: PPUSH
14424: CALL_OW 318
14428: IFFALSE 14439
// ComWalk ( un ) ;
14430: LD_VAR 0 2
14434: PPUSH
14435: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14439: LD_VAR 0 2
14443: PPUSH
14444: LD_INT 9
14446: PPUSH
14447: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14451: LD_INT 28
14453: PPUSH
14454: LD_OWVAR 2
14458: PPUSH
14459: LD_INT 2
14461: PPUSH
14462: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14466: LD_INT 29
14468: PPUSH
14469: LD_OWVAR 2
14473: PPUSH
14474: LD_INT 2
14476: PPUSH
14477: CALL_OW 322
// end ;
14481: PPOPN 3
14483: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14484: LD_EXP 57
14488: PUSH
14489: LD_EXP 100
14493: AND
14494: IFFALSE 14605
14496: GO 14498
14498: DISABLE
14499: LD_INT 0
14501: PPUSH
14502: PPUSH
14503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14504: LD_ADDR_VAR 0 3
14508: PUSH
14509: LD_INT 22
14511: PUSH
14512: LD_OWVAR 2
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 25
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PPUSH
14535: CALL_OW 69
14539: ST_TO_ADDR
// if not tmp then
14540: LD_VAR 0 3
14544: NOT
14545: IFFALSE 14549
// exit ;
14547: GO 14605
// un := tmp [ rand ( 1 , tmp ) ] ;
14549: LD_ADDR_VAR 0 2
14553: PUSH
14554: LD_VAR 0 3
14558: PUSH
14559: LD_INT 1
14561: PPUSH
14562: LD_VAR 0 3
14566: PPUSH
14567: CALL_OW 12
14571: ARRAY
14572: ST_TO_ADDR
// if Crawls ( un ) then
14573: LD_VAR 0 2
14577: PPUSH
14578: CALL_OW 318
14582: IFFALSE 14593
// ComWalk ( un ) ;
14584: LD_VAR 0 2
14588: PPUSH
14589: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14593: LD_VAR 0 2
14597: PPUSH
14598: LD_INT 8
14600: PPUSH
14601: CALL_OW 336
// end ;
14605: PPOPN 3
14607: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14608: LD_EXP 57
14612: PUSH
14613: LD_EXP 101
14617: AND
14618: IFFALSE 14762
14620: GO 14622
14622: DISABLE
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14627: LD_ADDR_VAR 0 2
14631: PUSH
14632: LD_INT 22
14634: PUSH
14635: LD_OWVAR 2
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 21
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: LD_INT 34
14659: PUSH
14660: LD_INT 12
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 34
14669: PUSH
14670: LD_INT 51
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 34
14679: PUSH
14680: LD_INT 32
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: PPUSH
14698: CALL_OW 69
14702: ST_TO_ADDR
// if not tmp then
14703: LD_VAR 0 2
14707: NOT
14708: IFFALSE 14712
// exit ;
14710: GO 14762
// for i in tmp do
14712: LD_ADDR_VAR 0 1
14716: PUSH
14717: LD_VAR 0 2
14721: PUSH
14722: FOR_IN
14723: IFFALSE 14760
// if GetCargo ( i , mat_artifact ) = 0 then
14725: LD_VAR 0 1
14729: PPUSH
14730: LD_INT 4
14732: PPUSH
14733: CALL_OW 289
14737: PUSH
14738: LD_INT 0
14740: EQUAL
14741: IFFALSE 14758
// SetCargo ( i , mat_siberit , 100 ) ;
14743: LD_VAR 0 1
14747: PPUSH
14748: LD_INT 3
14750: PPUSH
14751: LD_INT 100
14753: PPUSH
14754: CALL_OW 290
14758: GO 14722
14760: POP
14761: POP
// end ;
14762: PPOPN 2
14764: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14765: LD_EXP 57
14769: PUSH
14770: LD_EXP 102
14774: AND
14775: IFFALSE 14958
14777: GO 14779
14779: DISABLE
14780: LD_INT 0
14782: PPUSH
14783: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14784: LD_ADDR_VAR 0 2
14788: PUSH
14789: LD_INT 22
14791: PUSH
14792: LD_OWVAR 2
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: ST_TO_ADDR
// if not tmp then
14806: LD_VAR 0 2
14810: NOT
14811: IFFALSE 14815
// exit ;
14813: GO 14958
// for i := 1 to 2 do
14815: LD_ADDR_VAR 0 1
14819: PUSH
14820: DOUBLE
14821: LD_INT 1
14823: DEC
14824: ST_TO_ADDR
14825: LD_INT 2
14827: PUSH
14828: FOR_TO
14829: IFFALSE 14956
// begin uc_side := your_side ;
14831: LD_ADDR_OWVAR 20
14835: PUSH
14836: LD_OWVAR 2
14840: ST_TO_ADDR
// uc_nation := nation_american ;
14841: LD_ADDR_OWVAR 21
14845: PUSH
14846: LD_INT 1
14848: ST_TO_ADDR
// vc_chassis := us_morphling ;
14849: LD_ADDR_OWVAR 37
14853: PUSH
14854: LD_INT 5
14856: ST_TO_ADDR
// vc_engine := engine_siberite ;
14857: LD_ADDR_OWVAR 39
14861: PUSH
14862: LD_INT 3
14864: ST_TO_ADDR
// vc_control := control_computer ;
14865: LD_ADDR_OWVAR 38
14869: PUSH
14870: LD_INT 3
14872: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14873: LD_ADDR_OWVAR 40
14877: PUSH
14878: LD_INT 10
14880: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14881: LD_VAR 0 2
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PPUSH
14890: CALL_OW 310
14894: NOT
14895: IFFALSE 14942
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14897: CALL_OW 45
14901: PPUSH
14902: LD_VAR 0 2
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: CALL_OW 250
14915: PPUSH
14916: LD_VAR 0 2
14920: PUSH
14921: LD_INT 1
14923: ARRAY
14924: PPUSH
14925: CALL_OW 251
14929: PPUSH
14930: LD_INT 12
14932: PPUSH
14933: LD_INT 1
14935: PPUSH
14936: CALL_OW 50
14940: GO 14954
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14942: CALL_OW 45
14946: PPUSH
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 51
// end ;
14954: GO 14828
14956: POP
14957: POP
// end ;
14958: PPOPN 2
14960: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14961: LD_EXP 57
14965: PUSH
14966: LD_EXP 103
14970: AND
14971: IFFALSE 15193
14973: GO 14975
14975: DISABLE
14976: LD_INT 0
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
14982: PPUSH
14983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14984: LD_ADDR_VAR 0 6
14988: PUSH
14989: LD_INT 22
14991: PUSH
14992: LD_OWVAR 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 21
15003: PUSH
15004: LD_INT 1
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 3
15013: PUSH
15014: LD_INT 23
15016: PUSH
15017: LD_INT 0
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: PPUSH
15033: CALL_OW 69
15037: ST_TO_ADDR
// if not tmp then
15038: LD_VAR 0 6
15042: NOT
15043: IFFALSE 15047
// exit ;
15045: GO 15193
// s1 := rand ( 1 , 4 ) ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_INT 1
15054: PPUSH
15055: LD_INT 4
15057: PPUSH
15058: CALL_OW 12
15062: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15063: LD_ADDR_VAR 0 4
15067: PUSH
15068: LD_VAR 0 6
15072: PUSH
15073: LD_INT 1
15075: ARRAY
15076: PPUSH
15077: LD_VAR 0 2
15081: PPUSH
15082: CALL_OW 259
15086: ST_TO_ADDR
// if s1 = 1 then
15087: LD_VAR 0 2
15091: PUSH
15092: LD_INT 1
15094: EQUAL
15095: IFFALSE 15115
// s2 := rand ( 2 , 4 ) else
15097: LD_ADDR_VAR 0 3
15101: PUSH
15102: LD_INT 2
15104: PPUSH
15105: LD_INT 4
15107: PPUSH
15108: CALL_OW 12
15112: ST_TO_ADDR
15113: GO 15123
// s2 := 1 ;
15115: LD_ADDR_VAR 0 3
15119: PUSH
15120: LD_INT 1
15122: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15123: LD_ADDR_VAR 0 5
15127: PUSH
15128: LD_VAR 0 6
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 3
15141: PPUSH
15142: CALL_OW 259
15146: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15147: LD_VAR 0 6
15151: PUSH
15152: LD_INT 1
15154: ARRAY
15155: PPUSH
15156: LD_VAR 0 2
15160: PPUSH
15161: LD_VAR 0 5
15165: PPUSH
15166: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15170: LD_VAR 0 6
15174: PUSH
15175: LD_INT 1
15177: ARRAY
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: LD_VAR 0 4
15188: PPUSH
15189: CALL_OW 237
// end ;
15193: PPOPN 6
15195: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15196: LD_EXP 57
15200: PUSH
15201: LD_EXP 104
15205: AND
15206: IFFALSE 15285
15208: GO 15210
15210: DISABLE
15211: LD_INT 0
15213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15214: LD_ADDR_VAR 0 1
15218: PUSH
15219: LD_INT 22
15221: PUSH
15222: LD_OWVAR 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 30
15233: PUSH
15234: LD_INT 3
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 69
15249: ST_TO_ADDR
// if not tmp then
15250: LD_VAR 0 1
15254: NOT
15255: IFFALSE 15259
// exit ;
15257: GO 15285
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15259: LD_VAR 0 1
15263: PUSH
15264: LD_INT 1
15266: PPUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: CALL_OW 12
15276: ARRAY
15277: PPUSH
15278: LD_INT 1
15280: PPUSH
15281: CALL_OW 234
// end ;
15285: PPOPN 1
15287: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15288: LD_EXP 57
15292: PUSH
15293: LD_EXP 105
15297: AND
15298: IFFALSE 15410
15300: GO 15302
15302: DISABLE
15303: LD_INT 0
15305: PPUSH
15306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15307: LD_ADDR_VAR 0 2
15311: PUSH
15312: LD_INT 22
15314: PUSH
15315: LD_OWVAR 2
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: LD_INT 30
15329: PUSH
15330: LD_INT 27
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: LD_INT 26
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 30
15349: PUSH
15350: LD_INT 28
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PPUSH
15367: CALL_OW 69
15371: ST_TO_ADDR
// if not tmp then
15372: LD_VAR 0 2
15376: NOT
15377: IFFALSE 15381
// exit ;
15379: GO 15410
// for i in tmp do
15381: LD_ADDR_VAR 0 1
15385: PUSH
15386: LD_VAR 0 2
15390: PUSH
15391: FOR_IN
15392: IFFALSE 15408
// SetLives ( i , 1 ) ;
15394: LD_VAR 0 1
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 234
15406: GO 15391
15408: POP
15409: POP
// end ;
15410: PPOPN 2
15412: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15413: LD_EXP 57
15417: PUSH
15418: LD_EXP 106
15422: AND
15423: IFFALSE 15710
15425: GO 15427
15427: DISABLE
15428: LD_INT 0
15430: PPUSH
15431: PPUSH
15432: PPUSH
// begin i := rand ( 1 , 7 ) ;
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: LD_INT 1
15440: PPUSH
15441: LD_INT 7
15443: PPUSH
15444: CALL_OW 12
15448: ST_TO_ADDR
// case i of 1 :
15449: LD_VAR 0 1
15453: PUSH
15454: LD_INT 1
15456: DOUBLE
15457: EQUAL
15458: IFTRUE 15462
15460: GO 15472
15462: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15463: LD_STRING earthquake(getX(game), 0, 32)
15465: PPUSH
15466: CALL_OW 559
15470: GO 15710
15472: LD_INT 2
15474: DOUBLE
15475: EQUAL
15476: IFTRUE 15480
15478: GO 15494
15480: POP
// begin ToLua ( displayStucuk(); ) ;
15481: LD_STRING displayStucuk();
15483: PPUSH
15484: CALL_OW 559
// ResetFog ;
15488: CALL_OW 335
// end ; 3 :
15492: GO 15710
15494: LD_INT 3
15496: DOUBLE
15497: EQUAL
15498: IFTRUE 15502
15500: GO 15606
15502: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15503: LD_ADDR_VAR 0 2
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_OWVAR 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 25
15522: PUSH
15523: LD_INT 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: ST_TO_ADDR
// if not tmp then
15539: LD_VAR 0 2
15543: NOT
15544: IFFALSE 15548
// exit ;
15546: GO 15710
// un := tmp [ rand ( 1 , tmp ) ] ;
15548: LD_ADDR_VAR 0 3
15552: PUSH
15553: LD_VAR 0 2
15557: PUSH
15558: LD_INT 1
15560: PPUSH
15561: LD_VAR 0 2
15565: PPUSH
15566: CALL_OW 12
15570: ARRAY
15571: ST_TO_ADDR
// if Crawls ( un ) then
15572: LD_VAR 0 3
15576: PPUSH
15577: CALL_OW 318
15581: IFFALSE 15592
// ComWalk ( un ) ;
15583: LD_VAR 0 3
15587: PPUSH
15588: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15592: LD_VAR 0 3
15596: PPUSH
15597: LD_INT 8
15599: PPUSH
15600: CALL_OW 336
// end ; 4 :
15604: GO 15710
15606: LD_INT 4
15608: DOUBLE
15609: EQUAL
15610: IFTRUE 15614
15612: GO 15688
15614: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15615: LD_ADDR_VAR 0 2
15619: PUSH
15620: LD_INT 22
15622: PUSH
15623: LD_OWVAR 2
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 30
15634: PUSH
15635: LD_INT 29
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 69
15650: ST_TO_ADDR
// if not tmp then
15651: LD_VAR 0 2
15655: NOT
15656: IFFALSE 15660
// exit ;
15658: GO 15710
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15660: LD_VAR 0 2
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PPUSH
15669: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15673: LD_VAR 0 2
15677: PUSH
15678: LD_INT 1
15680: ARRAY
15681: PPUSH
15682: CALL_OW 65
// end ; 5 .. 7 :
15686: GO 15710
15688: LD_INT 5
15690: DOUBLE
15691: GREATEREQUAL
15692: IFFALSE 15700
15694: LD_INT 7
15696: DOUBLE
15697: LESSEQUAL
15698: IFTRUE 15702
15700: GO 15709
15702: POP
// StreamSibBomb ; end ;
15703: CALL 11947 0 0
15707: GO 15710
15709: POP
// end ;
15710: PPOPN 3
15712: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15713: LD_EXP 57
15717: PUSH
15718: LD_EXP 107
15722: AND
15723: IFFALSE 15879
15725: GO 15727
15727: DISABLE
15728: LD_INT 0
15730: PPUSH
15731: PPUSH
15732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15733: LD_ADDR_VAR 0 2
15737: PUSH
15738: LD_INT 81
15740: PUSH
15741: LD_OWVAR 2
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 2
15752: PUSH
15753: LD_INT 21
15755: PUSH
15756: LD_INT 1
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 21
15765: PUSH
15766: LD_INT 2
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PPUSH
15782: CALL_OW 69
15786: ST_TO_ADDR
// if not tmp then
15787: LD_VAR 0 2
15791: NOT
15792: IFFALSE 15796
// exit ;
15794: GO 15879
// p := 0 ;
15796: LD_ADDR_VAR 0 3
15800: PUSH
15801: LD_INT 0
15803: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15804: LD_INT 35
15806: PPUSH
15807: CALL_OW 67
// p := p + 1 ;
15811: LD_ADDR_VAR 0 3
15815: PUSH
15816: LD_VAR 0 3
15820: PUSH
15821: LD_INT 1
15823: PLUS
15824: ST_TO_ADDR
// for i in tmp do
15825: LD_ADDR_VAR 0 1
15829: PUSH
15830: LD_VAR 0 2
15834: PUSH
15835: FOR_IN
15836: IFFALSE 15867
// if GetLives ( i ) < 1000 then
15838: LD_VAR 0 1
15842: PPUSH
15843: CALL_OW 256
15847: PUSH
15848: LD_INT 1000
15850: LESS
15851: IFFALSE 15865
// SetLives ( i , 1000 ) ;
15853: LD_VAR 0 1
15857: PPUSH
15858: LD_INT 1000
15860: PPUSH
15861: CALL_OW 234
15865: GO 15835
15867: POP
15868: POP
// until p > 20 ;
15869: LD_VAR 0 3
15873: PUSH
15874: LD_INT 20
15876: GREATER
15877: IFFALSE 15804
// end ;
15879: PPOPN 3
15881: END
// every 0 0$1 trigger StreamModeActive and sTime do
15882: LD_EXP 57
15886: PUSH
15887: LD_EXP 108
15891: AND
15892: IFFALSE 15927
15894: GO 15896
15896: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15897: LD_INT 28
15899: PPUSH
15900: LD_OWVAR 2
15904: PPUSH
15905: LD_INT 2
15907: PPUSH
15908: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15912: LD_INT 30
15914: PPUSH
15915: LD_OWVAR 2
15919: PPUSH
15920: LD_INT 2
15922: PPUSH
15923: CALL_OW 322
// end ;
15927: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15928: LD_EXP 57
15932: PUSH
15933: LD_EXP 109
15937: AND
15938: IFFALSE 16059
15940: GO 15942
15942: DISABLE
15943: LD_INT 0
15945: PPUSH
15946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15947: LD_ADDR_VAR 0 2
15951: PUSH
15952: LD_INT 22
15954: PUSH
15955: LD_OWVAR 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 21
15966: PUSH
15967: LD_INT 1
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 3
15976: PUSH
15977: LD_INT 23
15979: PUSH
15980: LD_INT 0
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 69
16000: ST_TO_ADDR
// if not tmp then
16001: LD_VAR 0 2
16005: NOT
16006: IFFALSE 16010
// exit ;
16008: GO 16059
// for i in tmp do
16010: LD_ADDR_VAR 0 1
16014: PUSH
16015: LD_VAR 0 2
16019: PUSH
16020: FOR_IN
16021: IFFALSE 16057
// begin if Crawls ( i ) then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 318
16032: IFFALSE 16043
// ComWalk ( i ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 138
// SetClass ( i , 2 ) ;
16043: LD_VAR 0 1
16047: PPUSH
16048: LD_INT 2
16050: PPUSH
16051: CALL_OW 336
// end ;
16055: GO 16020
16057: POP
16058: POP
// end ;
16059: PPOPN 2
16061: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16062: LD_EXP 57
16066: PUSH
16067: LD_EXP 110
16071: AND
16072: IFFALSE 16360
16074: GO 16076
16076: DISABLE
16077: LD_INT 0
16079: PPUSH
16080: PPUSH
16081: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16082: LD_OWVAR 2
16086: PPUSH
16087: LD_INT 9
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: LD_INT 1
16095: PPUSH
16096: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16100: LD_INT 9
16102: PPUSH
16103: LD_OWVAR 2
16107: PPUSH
16108: CALL_OW 343
// uc_side := 9 ;
16112: LD_ADDR_OWVAR 20
16116: PUSH
16117: LD_INT 9
16119: ST_TO_ADDR
// uc_nation := 2 ;
16120: LD_ADDR_OWVAR 21
16124: PUSH
16125: LD_INT 2
16127: ST_TO_ADDR
// hc_name := Dark Warrior ;
16128: LD_ADDR_OWVAR 26
16132: PUSH
16133: LD_STRING Dark Warrior
16135: ST_TO_ADDR
// hc_gallery :=  ;
16136: LD_ADDR_OWVAR 33
16140: PUSH
16141: LD_STRING 
16143: ST_TO_ADDR
// hc_noskilllimit := true ;
16144: LD_ADDR_OWVAR 76
16148: PUSH
16149: LD_INT 1
16151: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16152: LD_ADDR_OWVAR 31
16156: PUSH
16157: LD_INT 30
16159: PUSH
16160: LD_INT 30
16162: PUSH
16163: LD_INT 30
16165: PUSH
16166: LD_INT 30
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: ST_TO_ADDR
// un := CreateHuman ;
16175: LD_ADDR_VAR 0 3
16179: PUSH
16180: CALL_OW 44
16184: ST_TO_ADDR
// hc_noskilllimit := false ;
16185: LD_ADDR_OWVAR 76
16189: PUSH
16190: LD_INT 0
16192: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16193: LD_VAR 0 3
16197: PPUSH
16198: LD_INT 1
16200: PPUSH
16201: CALL_OW 51
// ToLua ( playRanger() ) ;
16205: LD_STRING playRanger()
16207: PPUSH
16208: CALL_OW 559
// p := 0 ;
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_INT 0
16219: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16220: LD_INT 35
16222: PPUSH
16223: CALL_OW 67
// p := p + 1 ;
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: LD_VAR 0 2
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16241: LD_VAR 0 3
16245: PPUSH
16246: CALL_OW 256
16250: PUSH
16251: LD_INT 1000
16253: LESS
16254: IFFALSE 16268
// SetLives ( un , 1000 ) ;
16256: LD_VAR 0 3
16260: PPUSH
16261: LD_INT 1000
16263: PPUSH
16264: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16268: LD_VAR 0 3
16272: PPUSH
16273: LD_INT 81
16275: PUSH
16276: LD_OWVAR 2
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 91
16287: PUSH
16288: LD_VAR 0 3
16292: PUSH
16293: LD_INT 30
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: PPUSH
16310: LD_VAR 0 3
16314: PPUSH
16315: CALL_OW 74
16319: PPUSH
16320: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16324: LD_VAR 0 2
16328: PUSH
16329: LD_INT 80
16331: GREATER
16332: PUSH
16333: LD_VAR 0 3
16337: PPUSH
16338: CALL_OW 301
16342: OR
16343: IFFALSE 16220
// if un then
16345: LD_VAR 0 3
16349: IFFALSE 16360
// RemoveUnit ( un ) ;
16351: LD_VAR 0 3
16355: PPUSH
16356: CALL_OW 64
// end ;
16360: PPOPN 3
16362: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16363: LD_EXP 111
16367: IFFALSE 16483
16369: GO 16371
16371: DISABLE
16372: LD_INT 0
16374: PPUSH
16375: PPUSH
16376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16377: LD_ADDR_VAR 0 2
16381: PUSH
16382: LD_INT 81
16384: PUSH
16385: LD_OWVAR 2
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 21
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PPUSH
16408: CALL_OW 69
16412: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16413: LD_STRING playComputer()
16415: PPUSH
16416: CALL_OW 559
// if not tmp then
16420: LD_VAR 0 2
16424: NOT
16425: IFFALSE 16429
// exit ;
16427: GO 16483
// for i in tmp do
16429: LD_ADDR_VAR 0 1
16433: PUSH
16434: LD_VAR 0 2
16438: PUSH
16439: FOR_IN
16440: IFFALSE 16481
// for j := 1 to 4 do
16442: LD_ADDR_VAR 0 3
16446: PUSH
16447: DOUBLE
16448: LD_INT 1
16450: DEC
16451: ST_TO_ADDR
16452: LD_INT 4
16454: PUSH
16455: FOR_TO
16456: IFFALSE 16477
// SetSkill ( i , j , 10 ) ;
16458: LD_VAR 0 1
16462: PPUSH
16463: LD_VAR 0 3
16467: PPUSH
16468: LD_INT 10
16470: PPUSH
16471: CALL_OW 237
16475: GO 16455
16477: POP
16478: POP
16479: GO 16439
16481: POP
16482: POP
// end ;
16483: PPOPN 3
16485: END
// every 0 0$1 trigger s30 do var i , tmp ;
16486: LD_EXP 112
16490: IFFALSE 16559
16492: GO 16494
16494: DISABLE
16495: LD_INT 0
16497: PPUSH
16498: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16499: LD_ADDR_VAR 0 2
16503: PUSH
16504: LD_INT 22
16506: PUSH
16507: LD_OWVAR 2
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 69
16520: ST_TO_ADDR
// if not tmp then
16521: LD_VAR 0 2
16525: NOT
16526: IFFALSE 16530
// exit ;
16528: GO 16559
// for i in tmp do
16530: LD_ADDR_VAR 0 1
16534: PUSH
16535: LD_VAR 0 2
16539: PUSH
16540: FOR_IN
16541: IFFALSE 16557
// SetLives ( i , 300 ) ;
16543: LD_VAR 0 1
16547: PPUSH
16548: LD_INT 300
16550: PPUSH
16551: CALL_OW 234
16555: GO 16540
16557: POP
16558: POP
// end ;
16559: PPOPN 2
16561: END
// every 0 0$1 trigger s60 do var i , tmp ;
16562: LD_EXP 113
16566: IFFALSE 16635
16568: GO 16570
16570: DISABLE
16571: LD_INT 0
16573: PPUSH
16574: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_INT 22
16582: PUSH
16583: LD_OWVAR 2
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PPUSH
16592: CALL_OW 69
16596: ST_TO_ADDR
// if not tmp then
16597: LD_VAR 0 2
16601: NOT
16602: IFFALSE 16606
// exit ;
16604: GO 16635
// for i in tmp do
16606: LD_ADDR_VAR 0 1
16610: PUSH
16611: LD_VAR 0 2
16615: PUSH
16616: FOR_IN
16617: IFFALSE 16633
// SetLives ( i , 600 ) ;
16619: LD_VAR 0 1
16623: PPUSH
16624: LD_INT 600
16626: PPUSH
16627: CALL_OW 234
16631: GO 16616
16633: POP
16634: POP
// end ;
16635: PPOPN 2
16637: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16638: LD_INT 0
16640: PPUSH
// case cmd of 301 :
16641: LD_VAR 0 1
16645: PUSH
16646: LD_INT 301
16648: DOUBLE
16649: EQUAL
16650: IFTRUE 16654
16652: GO 16686
16654: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16655: LD_VAR 0 6
16659: PPUSH
16660: LD_VAR 0 7
16664: PPUSH
16665: LD_VAR 0 8
16669: PPUSH
16670: LD_VAR 0 4
16674: PPUSH
16675: LD_VAR 0 5
16679: PPUSH
16680: CALL 17887 0 5
16684: GO 16807
16686: LD_INT 302
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16731
16694: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16695: LD_VAR 0 6
16699: PPUSH
16700: LD_VAR 0 7
16704: PPUSH
16705: LD_VAR 0 8
16709: PPUSH
16710: LD_VAR 0 9
16714: PPUSH
16715: LD_VAR 0 4
16719: PPUSH
16720: LD_VAR 0 5
16724: PPUSH
16725: CALL 17978 0 6
16729: GO 16807
16731: LD_INT 303
16733: DOUBLE
16734: EQUAL
16735: IFTRUE 16739
16737: GO 16776
16739: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16740: LD_VAR 0 6
16744: PPUSH
16745: LD_VAR 0 7
16749: PPUSH
16750: LD_VAR 0 8
16754: PPUSH
16755: LD_VAR 0 9
16759: PPUSH
16760: LD_VAR 0 4
16764: PPUSH
16765: LD_VAR 0 5
16769: PPUSH
16770: CALL 16812 0 6
16774: GO 16807
16776: LD_INT 304
16778: DOUBLE
16779: EQUAL
16780: IFTRUE 16784
16782: GO 16806
16784: POP
// hHackTeleport ( unit , x , y ) ; end ;
16785: LD_VAR 0 2
16789: PPUSH
16790: LD_VAR 0 4
16794: PPUSH
16795: LD_VAR 0 5
16799: PPUSH
16800: CALL 18571 0 3
16804: GO 16807
16806: POP
// end ;
16807: LD_VAR 0 12
16811: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16812: LD_INT 0
16814: PPUSH
16815: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16816: LD_VAR 0 1
16820: PUSH
16821: LD_INT 1
16823: LESS
16824: PUSH
16825: LD_VAR 0 1
16829: PUSH
16830: LD_INT 3
16832: GREATER
16833: OR
16834: PUSH
16835: LD_VAR 0 5
16839: PPUSH
16840: LD_VAR 0 6
16844: PPUSH
16845: CALL_OW 428
16849: OR
16850: IFFALSE 16854
// exit ;
16852: GO 17574
// uc_side := your_side ;
16854: LD_ADDR_OWVAR 20
16858: PUSH
16859: LD_OWVAR 2
16863: ST_TO_ADDR
// uc_nation := nation ;
16864: LD_ADDR_OWVAR 21
16868: PUSH
16869: LD_VAR 0 1
16873: ST_TO_ADDR
// bc_level = 1 ;
16874: LD_ADDR_OWVAR 43
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
// case btype of 1 :
16882: LD_VAR 0 2
16886: PUSH
16887: LD_INT 1
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16906
16895: POP
// bc_type := b_depot ; 2 :
16896: LD_ADDR_OWVAR 42
16900: PUSH
16901: LD_INT 0
16903: ST_TO_ADDR
16904: GO 17518
16906: LD_INT 2
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16925
16914: POP
// bc_type := b_warehouse ; 3 :
16915: LD_ADDR_OWVAR 42
16919: PUSH
16920: LD_INT 1
16922: ST_TO_ADDR
16923: GO 17518
16925: LD_INT 3
16927: DOUBLE
16928: EQUAL
16929: IFTRUE 16933
16931: GO 16944
16933: POP
// bc_type := b_lab ; 4 .. 9 :
16934: LD_ADDR_OWVAR 42
16938: PUSH
16939: LD_INT 6
16941: ST_TO_ADDR
16942: GO 17518
16944: LD_INT 4
16946: DOUBLE
16947: GREATEREQUAL
16948: IFFALSE 16956
16950: LD_INT 9
16952: DOUBLE
16953: LESSEQUAL
16954: IFTRUE 16958
16956: GO 17010
16958: POP
// begin bc_type := b_lab_half ;
16959: LD_ADDR_OWVAR 42
16963: PUSH
16964: LD_INT 7
16966: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16967: LD_ADDR_OWVAR 44
16971: PUSH
16972: LD_INT 10
16974: PUSH
16975: LD_INT 11
16977: PUSH
16978: LD_INT 12
16980: PUSH
16981: LD_INT 15
16983: PUSH
16984: LD_INT 14
16986: PUSH
16987: LD_INT 13
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: PUSH
16998: LD_VAR 0 2
17002: PUSH
17003: LD_INT 3
17005: MINUS
17006: ARRAY
17007: ST_TO_ADDR
// end ; 10 .. 13 :
17008: GO 17518
17010: LD_INT 10
17012: DOUBLE
17013: GREATEREQUAL
17014: IFFALSE 17022
17016: LD_INT 13
17018: DOUBLE
17019: LESSEQUAL
17020: IFTRUE 17024
17022: GO 17101
17024: POP
// begin bc_type := b_lab_full ;
17025: LD_ADDR_OWVAR 42
17029: PUSH
17030: LD_INT 8
17032: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17033: LD_ADDR_OWVAR 44
17037: PUSH
17038: LD_INT 10
17040: PUSH
17041: LD_INT 12
17043: PUSH
17044: LD_INT 14
17046: PUSH
17047: LD_INT 13
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: LD_VAR 0 2
17060: PUSH
17061: LD_INT 9
17063: MINUS
17064: ARRAY
17065: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17066: LD_ADDR_OWVAR 45
17070: PUSH
17071: LD_INT 11
17073: PUSH
17074: LD_INT 15
17076: PUSH
17077: LD_INT 12
17079: PUSH
17080: LD_INT 15
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: PUSH
17089: LD_VAR 0 2
17093: PUSH
17094: LD_INT 9
17096: MINUS
17097: ARRAY
17098: ST_TO_ADDR
// end ; 14 :
17099: GO 17518
17101: LD_INT 14
17103: DOUBLE
17104: EQUAL
17105: IFTRUE 17109
17107: GO 17120
17109: POP
// bc_type := b_workshop ; 15 :
17110: LD_ADDR_OWVAR 42
17114: PUSH
17115: LD_INT 2
17117: ST_TO_ADDR
17118: GO 17518
17120: LD_INT 15
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17139
17128: POP
// bc_type := b_factory ; 16 :
17129: LD_ADDR_OWVAR 42
17133: PUSH
17134: LD_INT 3
17136: ST_TO_ADDR
17137: GO 17518
17139: LD_INT 16
17141: DOUBLE
17142: EQUAL
17143: IFTRUE 17147
17145: GO 17158
17147: POP
// bc_type := b_ext_gun ; 17 :
17148: LD_ADDR_OWVAR 42
17152: PUSH
17153: LD_INT 17
17155: ST_TO_ADDR
17156: GO 17518
17158: LD_INT 17
17160: DOUBLE
17161: EQUAL
17162: IFTRUE 17166
17164: GO 17194
17166: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17167: LD_ADDR_OWVAR 42
17171: PUSH
17172: LD_INT 19
17174: PUSH
17175: LD_INT 23
17177: PUSH
17178: LD_INT 19
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: LD_VAR 0 1
17190: ARRAY
17191: ST_TO_ADDR
17192: GO 17518
17194: LD_INT 18
17196: DOUBLE
17197: EQUAL
17198: IFTRUE 17202
17200: GO 17213
17202: POP
// bc_type := b_ext_radar ; 19 :
17203: LD_ADDR_OWVAR 42
17207: PUSH
17208: LD_INT 20
17210: ST_TO_ADDR
17211: GO 17518
17213: LD_INT 19
17215: DOUBLE
17216: EQUAL
17217: IFTRUE 17221
17219: GO 17232
17221: POP
// bc_type := b_ext_radio ; 20 :
17222: LD_ADDR_OWVAR 42
17226: PUSH
17227: LD_INT 22
17229: ST_TO_ADDR
17230: GO 17518
17232: LD_INT 20
17234: DOUBLE
17235: EQUAL
17236: IFTRUE 17240
17238: GO 17251
17240: POP
// bc_type := b_ext_siberium ; 21 :
17241: LD_ADDR_OWVAR 42
17245: PUSH
17246: LD_INT 21
17248: ST_TO_ADDR
17249: GO 17518
17251: LD_INT 21
17253: DOUBLE
17254: EQUAL
17255: IFTRUE 17259
17257: GO 17270
17259: POP
// bc_type := b_ext_computer ; 22 :
17260: LD_ADDR_OWVAR 42
17264: PUSH
17265: LD_INT 24
17267: ST_TO_ADDR
17268: GO 17518
17270: LD_INT 22
17272: DOUBLE
17273: EQUAL
17274: IFTRUE 17278
17276: GO 17289
17278: POP
// bc_type := b_ext_track ; 23 :
17279: LD_ADDR_OWVAR 42
17283: PUSH
17284: LD_INT 16
17286: ST_TO_ADDR
17287: GO 17518
17289: LD_INT 23
17291: DOUBLE
17292: EQUAL
17293: IFTRUE 17297
17295: GO 17308
17297: POP
// bc_type := b_ext_laser ; 24 :
17298: LD_ADDR_OWVAR 42
17302: PUSH
17303: LD_INT 25
17305: ST_TO_ADDR
17306: GO 17518
17308: LD_INT 24
17310: DOUBLE
17311: EQUAL
17312: IFTRUE 17316
17314: GO 17327
17316: POP
// bc_type := b_control_tower ; 25 :
17317: LD_ADDR_OWVAR 42
17321: PUSH
17322: LD_INT 36
17324: ST_TO_ADDR
17325: GO 17518
17327: LD_INT 25
17329: DOUBLE
17330: EQUAL
17331: IFTRUE 17335
17333: GO 17346
17335: POP
// bc_type := b_breastwork ; 26 :
17336: LD_ADDR_OWVAR 42
17340: PUSH
17341: LD_INT 31
17343: ST_TO_ADDR
17344: GO 17518
17346: LD_INT 26
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17354
17352: GO 17365
17354: POP
// bc_type := b_bunker ; 27 :
17355: LD_ADDR_OWVAR 42
17359: PUSH
17360: LD_INT 32
17362: ST_TO_ADDR
17363: GO 17518
17365: LD_INT 27
17367: DOUBLE
17368: EQUAL
17369: IFTRUE 17373
17371: GO 17384
17373: POP
// bc_type := b_turret ; 28 :
17374: LD_ADDR_OWVAR 42
17378: PUSH
17379: LD_INT 33
17381: ST_TO_ADDR
17382: GO 17518
17384: LD_INT 28
17386: DOUBLE
17387: EQUAL
17388: IFTRUE 17392
17390: GO 17403
17392: POP
// bc_type := b_armoury ; 29 :
17393: LD_ADDR_OWVAR 42
17397: PUSH
17398: LD_INT 4
17400: ST_TO_ADDR
17401: GO 17518
17403: LD_INT 29
17405: DOUBLE
17406: EQUAL
17407: IFTRUE 17411
17409: GO 17422
17411: POP
// bc_type := b_barracks ; 30 :
17412: LD_ADDR_OWVAR 42
17416: PUSH
17417: LD_INT 5
17419: ST_TO_ADDR
17420: GO 17518
17422: LD_INT 30
17424: DOUBLE
17425: EQUAL
17426: IFTRUE 17430
17428: GO 17441
17430: POP
// bc_type := b_solar_power ; 31 :
17431: LD_ADDR_OWVAR 42
17435: PUSH
17436: LD_INT 27
17438: ST_TO_ADDR
17439: GO 17518
17441: LD_INT 31
17443: DOUBLE
17444: EQUAL
17445: IFTRUE 17449
17447: GO 17460
17449: POP
// bc_type := b_oil_power ; 32 :
17450: LD_ADDR_OWVAR 42
17454: PUSH
17455: LD_INT 26
17457: ST_TO_ADDR
17458: GO 17518
17460: LD_INT 32
17462: DOUBLE
17463: EQUAL
17464: IFTRUE 17468
17466: GO 17479
17468: POP
// bc_type := b_siberite_power ; 33 :
17469: LD_ADDR_OWVAR 42
17473: PUSH
17474: LD_INT 28
17476: ST_TO_ADDR
17477: GO 17518
17479: LD_INT 33
17481: DOUBLE
17482: EQUAL
17483: IFTRUE 17487
17485: GO 17498
17487: POP
// bc_type := b_oil_mine ; 34 :
17488: LD_ADDR_OWVAR 42
17492: PUSH
17493: LD_INT 29
17495: ST_TO_ADDR
17496: GO 17518
17498: LD_INT 34
17500: DOUBLE
17501: EQUAL
17502: IFTRUE 17506
17504: GO 17517
17506: POP
// bc_type := b_siberite_mine ; end ;
17507: LD_ADDR_OWVAR 42
17511: PUSH
17512: LD_INT 30
17514: ST_TO_ADDR
17515: GO 17518
17517: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17518: LD_ADDR_VAR 0 8
17522: PUSH
17523: LD_VAR 0 5
17527: PPUSH
17528: LD_VAR 0 6
17532: PPUSH
17533: LD_VAR 0 3
17537: PPUSH
17538: CALL_OW 47
17542: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17543: LD_OWVAR 42
17547: PUSH
17548: LD_INT 32
17550: PUSH
17551: LD_INT 33
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: IN
17558: IFFALSE 17574
// PlaceWeaponTurret ( b , weapon ) ;
17560: LD_VAR 0 8
17564: PPUSH
17565: LD_VAR 0 4
17569: PPUSH
17570: CALL_OW 431
// end ;
17574: LD_VAR 0 7
17578: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17579: LD_INT 0
17581: PPUSH
17582: PPUSH
17583: PPUSH
17584: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17585: LD_ADDR_VAR 0 4
17589: PUSH
17590: LD_INT 22
17592: PUSH
17593: LD_OWVAR 2
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 2
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 30
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 69
17638: ST_TO_ADDR
// if not tmp then
17639: LD_VAR 0 4
17643: NOT
17644: IFFALSE 17648
// exit ;
17646: GO 17707
// for i in tmp do
17648: LD_ADDR_VAR 0 2
17652: PUSH
17653: LD_VAR 0 4
17657: PUSH
17658: FOR_IN
17659: IFFALSE 17705
// for j = 1 to 3 do
17661: LD_ADDR_VAR 0 3
17665: PUSH
17666: DOUBLE
17667: LD_INT 1
17669: DEC
17670: ST_TO_ADDR
17671: LD_INT 3
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17701
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17677: LD_VAR 0 2
17681: PPUSH
17682: CALL_OW 274
17686: PPUSH
17687: LD_VAR 0 3
17691: PPUSH
17692: LD_INT 99999
17694: PPUSH
17695: CALL_OW 277
17699: GO 17674
17701: POP
17702: POP
17703: GO 17658
17705: POP
17706: POP
// end ;
17707: LD_VAR 0 1
17711: RET
// export function hHackSetLevel10 ; var i , j ; begin
17712: LD_INT 0
17714: PPUSH
17715: PPUSH
17716: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17717: LD_ADDR_VAR 0 2
17721: PUSH
17722: LD_INT 21
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: PUSH
17737: FOR_IN
17738: IFFALSE 17790
// if IsSelected ( i ) then
17740: LD_VAR 0 2
17744: PPUSH
17745: CALL_OW 306
17749: IFFALSE 17788
// begin for j := 1 to 4 do
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 4
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17786
// SetSkill ( i , j , 10 ) ;
17767: LD_VAR 0 2
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 10
17779: PPUSH
17780: CALL_OW 237
17784: GO 17764
17786: POP
17787: POP
// end ;
17788: GO 17737
17790: POP
17791: POP
// end ;
17792: LD_VAR 0 1
17796: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17797: LD_INT 0
17799: PPUSH
17800: PPUSH
17801: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: LD_INT 22
17809: PUSH
17810: LD_OWVAR 2
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 21
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PPUSH
17833: CALL_OW 69
17837: PUSH
17838: FOR_IN
17839: IFFALSE 17880
// begin for j := 1 to 4 do
17841: LD_ADDR_VAR 0 3
17845: PUSH
17846: DOUBLE
17847: LD_INT 1
17849: DEC
17850: ST_TO_ADDR
17851: LD_INT 4
17853: PUSH
17854: FOR_TO
17855: IFFALSE 17876
// SetSkill ( i , j , 10 ) ;
17857: LD_VAR 0 2
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: LD_INT 10
17869: PPUSH
17870: CALL_OW 237
17874: GO 17854
17876: POP
17877: POP
// end ;
17878: GO 17838
17880: POP
17881: POP
// end ;
17882: LD_VAR 0 1
17886: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17887: LD_INT 0
17889: PPUSH
// uc_side := your_side ;
17890: LD_ADDR_OWVAR 20
17894: PUSH
17895: LD_OWVAR 2
17899: ST_TO_ADDR
// uc_nation := nation ;
17900: LD_ADDR_OWVAR 21
17904: PUSH
17905: LD_VAR 0 1
17909: ST_TO_ADDR
// InitHc ;
17910: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17914: LD_INT 0
17916: PPUSH
17917: LD_VAR 0 2
17921: PPUSH
17922: LD_VAR 0 3
17926: PPUSH
17927: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17931: LD_VAR 0 4
17935: PPUSH
17936: LD_VAR 0 5
17940: PPUSH
17941: CALL_OW 428
17945: PUSH
17946: LD_INT 0
17948: EQUAL
17949: IFFALSE 17973
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17951: CALL_OW 44
17955: PPUSH
17956: LD_VAR 0 4
17960: PPUSH
17961: LD_VAR 0 5
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: CALL_OW 48
// end ;
17973: LD_VAR 0 6
17977: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17978: LD_INT 0
17980: PPUSH
17981: PPUSH
// uc_side := your_side ;
17982: LD_ADDR_OWVAR 20
17986: PUSH
17987: LD_OWVAR 2
17991: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17992: LD_VAR 0 1
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: LD_INT 3
18005: PUSH
18006: LD_INT 4
18008: PUSH
18009: LD_INT 5
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: IN
18019: IFFALSE 18031
// uc_nation := nation_american else
18021: LD_ADDR_OWVAR 21
18025: PUSH
18026: LD_INT 1
18028: ST_TO_ADDR
18029: GO 18074
// if chassis in [ 11 , 12 , 13 , 14 ] then
18031: LD_VAR 0 1
18035: PUSH
18036: LD_INT 11
18038: PUSH
18039: LD_INT 12
18041: PUSH
18042: LD_INT 13
18044: PUSH
18045: LD_INT 14
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: IN
18054: IFFALSE 18066
// uc_nation := nation_arabian else
18056: LD_ADDR_OWVAR 21
18060: PUSH
18061: LD_INT 2
18063: ST_TO_ADDR
18064: GO 18074
// uc_nation := nation_russian ;
18066: LD_ADDR_OWVAR 21
18070: PUSH
18071: LD_INT 3
18073: ST_TO_ADDR
// vc_chassis := chassis ;
18074: LD_ADDR_OWVAR 37
18078: PUSH
18079: LD_VAR 0 1
18083: ST_TO_ADDR
// vc_engine := engine ;
18084: LD_ADDR_OWVAR 39
18088: PUSH
18089: LD_VAR 0 2
18093: ST_TO_ADDR
// vc_control := control ;
18094: LD_ADDR_OWVAR 38
18098: PUSH
18099: LD_VAR 0 3
18103: ST_TO_ADDR
// vc_weapon := weapon ;
18104: LD_ADDR_OWVAR 40
18108: PUSH
18109: LD_VAR 0 4
18113: ST_TO_ADDR
// un := CreateVehicle ;
18114: LD_ADDR_VAR 0 8
18118: PUSH
18119: CALL_OW 45
18123: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18124: LD_VAR 0 8
18128: PPUSH
18129: LD_INT 0
18131: PPUSH
18132: LD_INT 5
18134: PPUSH
18135: CALL_OW 12
18139: PPUSH
18140: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18144: LD_VAR 0 8
18148: PPUSH
18149: LD_VAR 0 5
18153: PPUSH
18154: LD_VAR 0 6
18158: PPUSH
18159: LD_INT 1
18161: PPUSH
18162: CALL_OW 48
// end ;
18166: LD_VAR 0 7
18170: RET
// export hInvincible ; every 1 do
18171: GO 18173
18173: DISABLE
// hInvincible := [ ] ;
18174: LD_ADDR_EXP 114
18178: PUSH
18179: EMPTY
18180: ST_TO_ADDR
18181: END
// every 10 do var i ;
18182: GO 18184
18184: DISABLE
18185: LD_INT 0
18187: PPUSH
// begin enable ;
18188: ENABLE
// if not hInvincible then
18189: LD_EXP 114
18193: NOT
18194: IFFALSE 18198
// exit ;
18196: GO 18242
// for i in hInvincible do
18198: LD_ADDR_VAR 0 1
18202: PUSH
18203: LD_EXP 114
18207: PUSH
18208: FOR_IN
18209: IFFALSE 18240
// if GetLives ( i ) < 1000 then
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 256
18220: PUSH
18221: LD_INT 1000
18223: LESS
18224: IFFALSE 18238
// SetLives ( i , 1000 ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_INT 1000
18233: PPUSH
18234: CALL_OW 234
18238: GO 18208
18240: POP
18241: POP
// end ;
18242: PPOPN 1
18244: END
// export function hHackInvincible ; var i ; begin
18245: LD_INT 0
18247: PPUSH
18248: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18249: LD_ADDR_VAR 0 2
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: LD_INT 21
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 21
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: PPUSH
18282: CALL_OW 69
18286: PUSH
18287: FOR_IN
18288: IFFALSE 18349
// if IsSelected ( i ) then
18290: LD_VAR 0 2
18294: PPUSH
18295: CALL_OW 306
18299: IFFALSE 18347
// begin if i in hInvincible then
18301: LD_VAR 0 2
18305: PUSH
18306: LD_EXP 114
18310: IN
18311: IFFALSE 18331
// hInvincible := hInvincible diff i else
18313: LD_ADDR_EXP 114
18317: PUSH
18318: LD_EXP 114
18322: PUSH
18323: LD_VAR 0 2
18327: DIFF
18328: ST_TO_ADDR
18329: GO 18347
// hInvincible := hInvincible union i ;
18331: LD_ADDR_EXP 114
18335: PUSH
18336: LD_EXP 114
18340: PUSH
18341: LD_VAR 0 2
18345: UNION
18346: ST_TO_ADDR
// end ;
18347: GO 18287
18349: POP
18350: POP
// end ;
18351: LD_VAR 0 1
18355: RET
// export function hHackInvisible ; var i , j ; begin
18356: LD_INT 0
18358: PPUSH
18359: PPUSH
18360: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18361: LD_ADDR_VAR 0 2
18365: PUSH
18366: LD_INT 21
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PPUSH
18376: CALL_OW 69
18380: PUSH
18381: FOR_IN
18382: IFFALSE 18406
// if IsSelected ( i ) then
18384: LD_VAR 0 2
18388: PPUSH
18389: CALL_OW 306
18393: IFFALSE 18404
// ComForceInvisible ( i ) ;
18395: LD_VAR 0 2
18399: PPUSH
18400: CALL_OW 496
18404: GO 18381
18406: POP
18407: POP
// end ;
18408: LD_VAR 0 1
18412: RET
// export function hHackChangeYourSide ; begin
18413: LD_INT 0
18415: PPUSH
// if your_side = 8 then
18416: LD_OWVAR 2
18420: PUSH
18421: LD_INT 8
18423: EQUAL
18424: IFFALSE 18436
// your_side := 0 else
18426: LD_ADDR_OWVAR 2
18430: PUSH
18431: LD_INT 0
18433: ST_TO_ADDR
18434: GO 18450
// your_side := your_side + 1 ;
18436: LD_ADDR_OWVAR 2
18440: PUSH
18441: LD_OWVAR 2
18445: PUSH
18446: LD_INT 1
18448: PLUS
18449: ST_TO_ADDR
// end ;
18450: LD_VAR 0 1
18454: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18455: LD_INT 0
18457: PPUSH
18458: PPUSH
18459: PPUSH
// for i in all_units do
18460: LD_ADDR_VAR 0 2
18464: PUSH
18465: LD_OWVAR 3
18469: PUSH
18470: FOR_IN
18471: IFFALSE 18549
// if IsSelected ( i ) then
18473: LD_VAR 0 2
18477: PPUSH
18478: CALL_OW 306
18482: IFFALSE 18547
// begin j := GetSide ( i ) ;
18484: LD_ADDR_VAR 0 3
18488: PUSH
18489: LD_VAR 0 2
18493: PPUSH
18494: CALL_OW 255
18498: ST_TO_ADDR
// if j = 8 then
18499: LD_VAR 0 3
18503: PUSH
18504: LD_INT 8
18506: EQUAL
18507: IFFALSE 18519
// j := 0 else
18509: LD_ADDR_VAR 0 3
18513: PUSH
18514: LD_INT 0
18516: ST_TO_ADDR
18517: GO 18533
// j := j + 1 ;
18519: LD_ADDR_VAR 0 3
18523: PUSH
18524: LD_VAR 0 3
18528: PUSH
18529: LD_INT 1
18531: PLUS
18532: ST_TO_ADDR
// SetSide ( i , j ) ;
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_VAR 0 3
18542: PPUSH
18543: CALL_OW 235
// end ;
18547: GO 18470
18549: POP
18550: POP
// end ;
18551: LD_VAR 0 1
18555: RET
// export function hHackFog ; begin
18556: LD_INT 0
18558: PPUSH
// FogOff ( true ) ;
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 344
// end ;
18566: LD_VAR 0 1
18570: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18571: LD_INT 0
18573: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18574: LD_VAR 0 1
18578: PPUSH
18579: LD_VAR 0 2
18583: PPUSH
18584: LD_VAR 0 3
18588: PPUSH
18589: LD_INT 1
18591: PPUSH
18592: LD_INT 1
18594: PPUSH
18595: CALL_OW 483
// CenterOnXY ( x , y ) ;
18599: LD_VAR 0 2
18603: PPUSH
18604: LD_VAR 0 3
18608: PPUSH
18609: CALL_OW 84
// end ;
18613: LD_VAR 0 4
18617: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18618: LD_INT 0
18620: PPUSH
18621: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18622: LD_VAR 0 1
18626: NOT
18627: PUSH
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_VAR 0 3
18637: PPUSH
18638: CALL_OW 488
18642: NOT
18643: OR
18644: PUSH
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 266
18654: PUSH
18655: LD_INT 3
18657: NONEQUAL
18658: PUSH
18659: LD_VAR 0 1
18663: PPUSH
18664: CALL_OW 247
18668: PUSH
18669: LD_INT 1
18671: EQUAL
18672: NOT
18673: AND
18674: OR
18675: IFFALSE 18679
// exit ;
18677: GO 18828
// if GetType ( factory ) = unit_human then
18679: LD_VAR 0 1
18683: PPUSH
18684: CALL_OW 247
18688: PUSH
18689: LD_INT 1
18691: EQUAL
18692: IFFALSE 18709
// factory := IsInUnit ( factory ) ;
18694: LD_ADDR_VAR 0 1
18698: PUSH
18699: LD_VAR 0 1
18703: PPUSH
18704: CALL_OW 310
18708: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18709: LD_VAR 0 1
18713: PPUSH
18714: CALL_OW 266
18718: PUSH
18719: LD_INT 3
18721: NONEQUAL
18722: IFFALSE 18726
// exit ;
18724: GO 18828
// if HexInfo ( x , y ) = factory then
18726: LD_VAR 0 2
18730: PPUSH
18731: LD_VAR 0 3
18735: PPUSH
18736: CALL_OW 428
18740: PUSH
18741: LD_VAR 0 1
18745: EQUAL
18746: IFFALSE 18773
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18748: LD_ADDR_EXP 115
18752: PUSH
18753: LD_EXP 115
18757: PPUSH
18758: LD_VAR 0 1
18762: PPUSH
18763: LD_INT 0
18765: PPUSH
18766: CALL_OW 1
18770: ST_TO_ADDR
18771: GO 18824
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18773: LD_ADDR_EXP 115
18777: PUSH
18778: LD_EXP 115
18782: PPUSH
18783: LD_VAR 0 1
18787: PPUSH
18788: LD_VAR 0 1
18792: PPUSH
18793: CALL_OW 255
18797: PUSH
18798: LD_VAR 0 1
18802: PUSH
18803: LD_VAR 0 2
18807: PUSH
18808: LD_VAR 0 3
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: PPUSH
18819: CALL_OW 1
18823: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18824: CALL 18833 0 0
// end ;
18828: LD_VAR 0 4
18832: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18833: LD_INT 0
18835: PPUSH
18836: PPUSH
18837: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18838: LD_STRING resetFactoryWaypoint();
18840: PPUSH
18841: CALL_OW 559
// if factoryWaypoints then
18845: LD_EXP 115
18849: IFFALSE 18975
// begin list := PrepareArray ( factoryWaypoints ) ;
18851: LD_ADDR_VAR 0 3
18855: PUSH
18856: LD_EXP 115
18860: PPUSH
18861: CALL 65407 0 1
18865: ST_TO_ADDR
// for i := 1 to list do
18866: LD_ADDR_VAR 0 2
18870: PUSH
18871: DOUBLE
18872: LD_INT 1
18874: DEC
18875: ST_TO_ADDR
18876: LD_VAR 0 3
18880: PUSH
18881: FOR_TO
18882: IFFALSE 18973
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18884: LD_STRING setFactoryWaypointXY(
18886: PUSH
18887: LD_VAR 0 3
18891: PUSH
18892: LD_VAR 0 2
18896: ARRAY
18897: PUSH
18898: LD_INT 1
18900: ARRAY
18901: STR
18902: PUSH
18903: LD_STRING ,
18905: STR
18906: PUSH
18907: LD_VAR 0 3
18911: PUSH
18912: LD_VAR 0 2
18916: ARRAY
18917: PUSH
18918: LD_INT 2
18920: ARRAY
18921: STR
18922: PUSH
18923: LD_STRING ,
18925: STR
18926: PUSH
18927: LD_VAR 0 3
18931: PUSH
18932: LD_VAR 0 2
18936: ARRAY
18937: PUSH
18938: LD_INT 3
18940: ARRAY
18941: STR
18942: PUSH
18943: LD_STRING ,
18945: STR
18946: PUSH
18947: LD_VAR 0 3
18951: PUSH
18952: LD_VAR 0 2
18956: ARRAY
18957: PUSH
18958: LD_INT 4
18960: ARRAY
18961: STR
18962: PUSH
18963: LD_STRING )
18965: STR
18966: PPUSH
18967: CALL_OW 559
18971: GO 18881
18973: POP
18974: POP
// end ; end ;
18975: LD_VAR 0 1
18979: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
18980: LD_INT 0
18982: PPUSH
// if HexInfo ( x , y ) = warehouse then
18983: LD_VAR 0 2
18987: PPUSH
18988: LD_VAR 0 3
18992: PPUSH
18993: CALL_OW 428
18997: PUSH
18998: LD_VAR 0 1
19002: EQUAL
19003: IFFALSE 19030
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19005: LD_ADDR_EXP 116
19009: PUSH
19010: LD_EXP 116
19014: PPUSH
19015: LD_VAR 0 1
19019: PPUSH
19020: LD_INT 0
19022: PPUSH
19023: CALL_OW 1
19027: ST_TO_ADDR
19028: GO 19081
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19030: LD_ADDR_EXP 116
19034: PUSH
19035: LD_EXP 116
19039: PPUSH
19040: LD_VAR 0 1
19044: PPUSH
19045: LD_VAR 0 1
19049: PPUSH
19050: CALL_OW 255
19054: PUSH
19055: LD_VAR 0 1
19059: PUSH
19060: LD_VAR 0 2
19064: PUSH
19065: LD_VAR 0 3
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: PPUSH
19076: CALL_OW 1
19080: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19081: CALL 19090 0 0
// end ;
19085: LD_VAR 0 4
19089: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19090: LD_INT 0
19092: PPUSH
19093: PPUSH
19094: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19095: LD_STRING resetWarehouseGatheringPoints();
19097: PPUSH
19098: CALL_OW 559
// if warehouseGatheringPoints then
19102: LD_EXP 116
19106: IFFALSE 19232
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19108: LD_ADDR_VAR 0 3
19112: PUSH
19113: LD_EXP 116
19117: PPUSH
19118: CALL 65407 0 1
19122: ST_TO_ADDR
// for i := 1 to list do
19123: LD_ADDR_VAR 0 2
19127: PUSH
19128: DOUBLE
19129: LD_INT 1
19131: DEC
19132: ST_TO_ADDR
19133: LD_VAR 0 3
19137: PUSH
19138: FOR_TO
19139: IFFALSE 19230
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19141: LD_STRING setWarehouseGatheringPointXY(
19143: PUSH
19144: LD_VAR 0 3
19148: PUSH
19149: LD_VAR 0 2
19153: ARRAY
19154: PUSH
19155: LD_INT 1
19157: ARRAY
19158: STR
19159: PUSH
19160: LD_STRING ,
19162: STR
19163: PUSH
19164: LD_VAR 0 3
19168: PUSH
19169: LD_VAR 0 2
19173: ARRAY
19174: PUSH
19175: LD_INT 2
19177: ARRAY
19178: STR
19179: PUSH
19180: LD_STRING ,
19182: STR
19183: PUSH
19184: LD_VAR 0 3
19188: PUSH
19189: LD_VAR 0 2
19193: ARRAY
19194: PUSH
19195: LD_INT 3
19197: ARRAY
19198: STR
19199: PUSH
19200: LD_STRING ,
19202: STR
19203: PUSH
19204: LD_VAR 0 3
19208: PUSH
19209: LD_VAR 0 2
19213: ARRAY
19214: PUSH
19215: LD_INT 4
19217: ARRAY
19218: STR
19219: PUSH
19220: LD_STRING )
19222: STR
19223: PPUSH
19224: CALL_OW 559
19228: GO 19138
19230: POP
19231: POP
// end ; end ;
19232: LD_VAR 0 1
19236: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19237: LD_EXP 116
19241: IFFALSE 19928
19243: GO 19245
19245: DISABLE
19246: LD_INT 0
19248: PPUSH
19249: PPUSH
19250: PPUSH
19251: PPUSH
19252: PPUSH
19253: PPUSH
19254: PPUSH
19255: PPUSH
19256: PPUSH
// begin enable ;
19257: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19258: LD_ADDR_VAR 0 3
19262: PUSH
19263: LD_EXP 116
19267: PPUSH
19268: CALL 65407 0 1
19272: ST_TO_ADDR
// if not list then
19273: LD_VAR 0 3
19277: NOT
19278: IFFALSE 19282
// exit ;
19280: GO 19928
// for i := 1 to list do
19282: LD_ADDR_VAR 0 1
19286: PUSH
19287: DOUBLE
19288: LD_INT 1
19290: DEC
19291: ST_TO_ADDR
19292: LD_VAR 0 3
19296: PUSH
19297: FOR_TO
19298: IFFALSE 19926
// begin depot := list [ i ] [ 2 ] ;
19300: LD_ADDR_VAR 0 8
19304: PUSH
19305: LD_VAR 0 3
19309: PUSH
19310: LD_VAR 0 1
19314: ARRAY
19315: PUSH
19316: LD_INT 2
19318: ARRAY
19319: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19320: LD_ADDR_VAR 0 5
19324: PUSH
19325: LD_VAR 0 3
19329: PUSH
19330: LD_VAR 0 1
19334: ARRAY
19335: PUSH
19336: LD_INT 1
19338: ARRAY
19339: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19340: LD_VAR 0 8
19344: PPUSH
19345: CALL_OW 301
19349: PUSH
19350: LD_VAR 0 5
19354: PUSH
19355: LD_VAR 0 8
19359: PPUSH
19360: CALL_OW 255
19364: NONEQUAL
19365: OR
19366: IFFALSE 19395
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19368: LD_ADDR_EXP 116
19372: PUSH
19373: LD_EXP 116
19377: PPUSH
19378: LD_VAR 0 8
19382: PPUSH
19383: LD_INT 0
19385: PPUSH
19386: CALL_OW 1
19390: ST_TO_ADDR
// exit ;
19391: POP
19392: POP
19393: GO 19928
// end ; x := list [ i ] [ 3 ] ;
19395: LD_ADDR_VAR 0 6
19399: PUSH
19400: LD_VAR 0 3
19404: PUSH
19405: LD_VAR 0 1
19409: ARRAY
19410: PUSH
19411: LD_INT 3
19413: ARRAY
19414: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19415: LD_ADDR_VAR 0 7
19419: PUSH
19420: LD_VAR 0 3
19424: PUSH
19425: LD_VAR 0 1
19429: ARRAY
19430: PUSH
19431: LD_INT 4
19433: ARRAY
19434: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19435: LD_ADDR_VAR 0 9
19439: PUSH
19440: LD_VAR 0 6
19444: PPUSH
19445: LD_VAR 0 7
19449: PPUSH
19450: LD_INT 16
19452: PPUSH
19453: CALL 63991 0 3
19457: ST_TO_ADDR
// if not cratesNearbyPoint then
19458: LD_VAR 0 9
19462: NOT
19463: IFFALSE 19469
// exit ;
19465: POP
19466: POP
19467: GO 19928
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19469: LD_ADDR_VAR 0 4
19473: PUSH
19474: LD_INT 22
19476: PUSH
19477: LD_VAR 0 5
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 3
19488: PUSH
19489: LD_INT 60
19491: PUSH
19492: EMPTY
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 91
19501: PUSH
19502: LD_VAR 0 8
19506: PUSH
19507: LD_INT 6
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: LD_INT 25
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 25
19530: PUSH
19531: LD_INT 16
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: PPUSH
19549: CALL_OW 69
19553: PUSH
19554: LD_VAR 0 8
19558: PPUSH
19559: CALL_OW 313
19563: PPUSH
19564: LD_INT 3
19566: PUSH
19567: LD_INT 60
19569: PUSH
19570: EMPTY
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 2
19579: PUSH
19580: LD_INT 25
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 25
19592: PUSH
19593: LD_INT 16
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PPUSH
19609: CALL_OW 72
19613: UNION
19614: ST_TO_ADDR
// if tmp then
19615: LD_VAR 0 4
19619: IFFALSE 19699
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19621: LD_ADDR_VAR 0 4
19625: PUSH
19626: LD_VAR 0 4
19630: PPUSH
19631: LD_INT 3
19633: PPUSH
19634: CALL 61958 0 2
19638: ST_TO_ADDR
// for j in tmp do
19639: LD_ADDR_VAR 0 2
19643: PUSH
19644: LD_VAR 0 4
19648: PUSH
19649: FOR_IN
19650: IFFALSE 19693
// begin if IsInUnit ( j ) then
19652: LD_VAR 0 2
19656: PPUSH
19657: CALL_OW 310
19661: IFFALSE 19672
// ComExit ( j ) ;
19663: LD_VAR 0 2
19667: PPUSH
19668: CALL 62041 0 1
// AddComCollect ( j , x , y ) ;
19672: LD_VAR 0 2
19676: PPUSH
19677: LD_VAR 0 6
19681: PPUSH
19682: LD_VAR 0 7
19686: PPUSH
19687: CALL_OW 177
// end ;
19691: GO 19649
19693: POP
19694: POP
// exit ;
19695: POP
19696: POP
19697: GO 19928
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19699: LD_ADDR_VAR 0 4
19703: PUSH
19704: LD_INT 22
19706: PUSH
19707: LD_VAR 0 5
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 91
19718: PUSH
19719: LD_VAR 0 8
19723: PUSH
19724: LD_INT 8
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 2
19734: PUSH
19735: LD_INT 34
19737: PUSH
19738: LD_INT 12
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 34
19747: PUSH
19748: LD_INT 51
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 34
19757: PUSH
19758: LD_INT 32
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 34
19767: PUSH
19768: LD_EXP 40
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: PPUSH
19789: CALL_OW 69
19793: ST_TO_ADDR
// if tmp then
19794: LD_VAR 0 4
19798: IFFALSE 19924
// begin for j in tmp do
19800: LD_ADDR_VAR 0 2
19804: PUSH
19805: LD_VAR 0 4
19809: PUSH
19810: FOR_IN
19811: IFFALSE 19922
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19813: LD_VAR 0 2
19817: PPUSH
19818: CALL_OW 262
19822: PUSH
19823: LD_INT 3
19825: EQUAL
19826: PUSH
19827: LD_VAR 0 2
19831: PPUSH
19832: CALL_OW 261
19836: PUSH
19837: LD_INT 20
19839: GREATER
19840: OR
19841: PUSH
19842: LD_VAR 0 2
19846: PPUSH
19847: CALL_OW 314
19851: NOT
19852: AND
19853: PUSH
19854: LD_VAR 0 2
19858: PPUSH
19859: CALL_OW 263
19863: PUSH
19864: LD_INT 1
19866: NONEQUAL
19867: PUSH
19868: LD_VAR 0 2
19872: PPUSH
19873: CALL_OW 311
19877: OR
19878: AND
19879: IFFALSE 19920
// begin ComCollect ( j , x , y ) ;
19881: LD_VAR 0 2
19885: PPUSH
19886: LD_VAR 0 6
19890: PPUSH
19891: LD_VAR 0 7
19895: PPUSH
19896: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19900: LD_VAR 0 2
19904: PPUSH
19905: LD_VAR 0 8
19909: PPUSH
19910: CALL_OW 172
// exit ;
19914: POP
19915: POP
19916: POP
19917: POP
19918: GO 19928
// end ;
19920: GO 19810
19922: POP
19923: POP
// end ; end ;
19924: GO 19297
19926: POP
19927: POP
// end ; end_of_file
19928: PPOPN 9
19930: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19931: LD_INT 0
19933: PPUSH
19934: PPUSH
19935: PPUSH
19936: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 264
19946: PUSH
19947: LD_EXP 43
19951: EQUAL
19952: IFFALSE 20024
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19954: LD_INT 68
19956: PPUSH
19957: LD_VAR 0 1
19961: PPUSH
19962: CALL_OW 255
19966: PPUSH
19967: CALL_OW 321
19971: PUSH
19972: LD_INT 2
19974: EQUAL
19975: IFFALSE 19987
// eff := 70 else
19977: LD_ADDR_VAR 0 4
19981: PUSH
19982: LD_INT 70
19984: ST_TO_ADDR
19985: GO 19995
// eff := 30 ;
19987: LD_ADDR_VAR 0 4
19991: PUSH
19992: LD_INT 30
19994: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19995: LD_VAR 0 1
19999: PPUSH
20000: CALL_OW 250
20004: PPUSH
20005: LD_VAR 0 1
20009: PPUSH
20010: CALL_OW 251
20014: PPUSH
20015: LD_VAR 0 4
20019: PPUSH
20020: CALL_OW 495
// end ; end ;
20024: LD_VAR 0 2
20028: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20029: LD_INT 0
20031: PPUSH
// end ;
20032: LD_VAR 0 4
20036: RET
// export function SOS_Command ( cmd ) ; begin
20037: LD_INT 0
20039: PPUSH
// end ;
20040: LD_VAR 0 2
20044: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20045: LD_INT 0
20047: PPUSH
// end ;
20048: LD_VAR 0 6
20052: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20053: LD_INT 0
20055: PPUSH
20056: PPUSH
// if not vehicle or not factory then
20057: LD_VAR 0 1
20061: NOT
20062: PUSH
20063: LD_VAR 0 2
20067: NOT
20068: OR
20069: IFFALSE 20073
// exit ;
20071: GO 20304
// if factoryWaypoints >= factory then
20073: LD_EXP 115
20077: PUSH
20078: LD_VAR 0 2
20082: GREATEREQUAL
20083: IFFALSE 20304
// if factoryWaypoints [ factory ] then
20085: LD_EXP 115
20089: PUSH
20090: LD_VAR 0 2
20094: ARRAY
20095: IFFALSE 20304
// begin if GetControl ( vehicle ) = control_manual then
20097: LD_VAR 0 1
20101: PPUSH
20102: CALL_OW 263
20106: PUSH
20107: LD_INT 1
20109: EQUAL
20110: IFFALSE 20191
// begin driver := IsDrivenBy ( vehicle ) ;
20112: LD_ADDR_VAR 0 4
20116: PUSH
20117: LD_VAR 0 1
20121: PPUSH
20122: CALL_OW 311
20126: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20127: LD_VAR 0 4
20131: PPUSH
20132: LD_EXP 115
20136: PUSH
20137: LD_VAR 0 2
20141: ARRAY
20142: PUSH
20143: LD_INT 3
20145: ARRAY
20146: PPUSH
20147: LD_EXP 115
20151: PUSH
20152: LD_VAR 0 2
20156: ARRAY
20157: PUSH
20158: LD_INT 4
20160: ARRAY
20161: PPUSH
20162: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20166: LD_VAR 0 4
20170: PPUSH
20171: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20175: LD_VAR 0 4
20179: PPUSH
20180: LD_VAR 0 2
20184: PPUSH
20185: CALL_OW 180
// end else
20189: GO 20304
// if GetControl ( vehicle ) = control_remote then
20191: LD_VAR 0 1
20195: PPUSH
20196: CALL_OW 263
20200: PUSH
20201: LD_INT 2
20203: EQUAL
20204: IFFALSE 20265
// begin wait ( 0 0$2 ) ;
20206: LD_INT 70
20208: PPUSH
20209: CALL_OW 67
// if Connect ( vehicle ) then
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL 32352 0 1
20222: IFFALSE 20263
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20224: LD_VAR 0 1
20228: PPUSH
20229: LD_EXP 115
20233: PUSH
20234: LD_VAR 0 2
20238: ARRAY
20239: PUSH
20240: LD_INT 3
20242: ARRAY
20243: PPUSH
20244: LD_EXP 115
20248: PUSH
20249: LD_VAR 0 2
20253: ARRAY
20254: PUSH
20255: LD_INT 4
20257: ARRAY
20258: PPUSH
20259: CALL_OW 171
// end else
20263: GO 20304
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20265: LD_VAR 0 1
20269: PPUSH
20270: LD_EXP 115
20274: PUSH
20275: LD_VAR 0 2
20279: ARRAY
20280: PUSH
20281: LD_INT 3
20283: ARRAY
20284: PPUSH
20285: LD_EXP 115
20289: PUSH
20290: LD_VAR 0 2
20294: ARRAY
20295: PUSH
20296: LD_INT 4
20298: ARRAY
20299: PPUSH
20300: CALL_OW 171
// end ; end ;
20304: LD_VAR 0 3
20308: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20309: LD_INT 0
20311: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20312: LD_VAR 0 1
20316: PUSH
20317: LD_INT 250
20319: EQUAL
20320: PUSH
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 264
20330: PUSH
20331: LD_EXP 46
20335: EQUAL
20336: AND
20337: IFFALSE 20358
// MinerPlaceMine ( unit , x , y ) ;
20339: LD_VAR 0 2
20343: PPUSH
20344: LD_VAR 0 4
20348: PPUSH
20349: LD_VAR 0 5
20353: PPUSH
20354: CALL 22757 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20358: LD_VAR 0 1
20362: PUSH
20363: LD_INT 251
20365: EQUAL
20366: PUSH
20367: LD_VAR 0 2
20371: PPUSH
20372: CALL_OW 264
20376: PUSH
20377: LD_EXP 46
20381: EQUAL
20382: AND
20383: IFFALSE 20404
// MinerDetonateMine ( unit , x , y ) ;
20385: LD_VAR 0 2
20389: PPUSH
20390: LD_VAR 0 4
20394: PPUSH
20395: LD_VAR 0 5
20399: PPUSH
20400: CALL 23034 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20404: LD_VAR 0 1
20408: PUSH
20409: LD_INT 252
20411: EQUAL
20412: PUSH
20413: LD_VAR 0 2
20417: PPUSH
20418: CALL_OW 264
20422: PUSH
20423: LD_EXP 46
20427: EQUAL
20428: AND
20429: IFFALSE 20450
// MinerCreateMinefield ( unit , x , y ) ;
20431: LD_VAR 0 2
20435: PPUSH
20436: LD_VAR 0 4
20440: PPUSH
20441: LD_VAR 0 5
20445: PPUSH
20446: CALL 23451 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20450: LD_VAR 0 1
20454: PUSH
20455: LD_INT 253
20457: EQUAL
20458: PUSH
20459: LD_VAR 0 2
20463: PPUSH
20464: CALL_OW 257
20468: PUSH
20469: LD_INT 5
20471: EQUAL
20472: AND
20473: IFFALSE 20494
// ComBinocular ( unit , x , y ) ;
20475: LD_VAR 0 2
20479: PPUSH
20480: LD_VAR 0 4
20484: PPUSH
20485: LD_VAR 0 5
20489: PPUSH
20490: CALL 23822 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20494: LD_VAR 0 1
20498: PUSH
20499: LD_INT 254
20501: EQUAL
20502: PUSH
20503: LD_VAR 0 2
20507: PPUSH
20508: CALL_OW 264
20512: PUSH
20513: LD_EXP 41
20517: EQUAL
20518: AND
20519: PUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: CALL_OW 263
20529: PUSH
20530: LD_INT 3
20532: EQUAL
20533: AND
20534: IFFALSE 20550
// HackDestroyVehicle ( unit , selectedUnit ) ;
20536: LD_VAR 0 2
20540: PPUSH
20541: LD_VAR 0 3
20545: PPUSH
20546: CALL 22117 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20550: LD_VAR 0 1
20554: PUSH
20555: LD_INT 255
20557: EQUAL
20558: PUSH
20559: LD_VAR 0 2
20563: PPUSH
20564: CALL_OW 264
20568: PUSH
20569: LD_INT 14
20571: PUSH
20572: LD_INT 53
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: IN
20579: AND
20580: PUSH
20581: LD_VAR 0 4
20585: PPUSH
20586: LD_VAR 0 5
20590: PPUSH
20591: CALL_OW 488
20595: AND
20596: IFFALSE 20620
// CutTreeXYR ( unit , x , y , 12 ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: LD_VAR 0 4
20607: PPUSH
20608: LD_VAR 0 5
20612: PPUSH
20613: LD_INT 12
20615: PPUSH
20616: CALL 20683 0 4
// if cmd = 256 then
20620: LD_VAR 0 1
20624: PUSH
20625: LD_INT 256
20627: EQUAL
20628: IFFALSE 20649
// SetFactoryWaypoint ( unit , x , y ) ;
20630: LD_VAR 0 2
20634: PPUSH
20635: LD_VAR 0 4
20639: PPUSH
20640: LD_VAR 0 5
20644: PPUSH
20645: CALL 18618 0 3
// if cmd = 257 then
20649: LD_VAR 0 1
20653: PUSH
20654: LD_INT 257
20656: EQUAL
20657: IFFALSE 20678
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20659: LD_VAR 0 2
20663: PPUSH
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_VAR 0 5
20673: PPUSH
20674: CALL 18980 0 3
// end ;
20678: LD_VAR 0 6
20682: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20683: LD_INT 0
20685: PPUSH
20686: PPUSH
20687: PPUSH
20688: PPUSH
20689: PPUSH
20690: PPUSH
20691: PPUSH
20692: PPUSH
20693: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20694: LD_VAR 0 1
20698: NOT
20699: PUSH
20700: LD_VAR 0 2
20704: PPUSH
20705: LD_VAR 0 3
20709: PPUSH
20710: CALL_OW 488
20714: NOT
20715: OR
20716: PUSH
20717: LD_VAR 0 4
20721: NOT
20722: OR
20723: IFFALSE 20727
// exit ;
20725: GO 21067
// list := [ ] ;
20727: LD_ADDR_VAR 0 13
20731: PUSH
20732: EMPTY
20733: ST_TO_ADDR
// if x - r < 0 then
20734: LD_VAR 0 2
20738: PUSH
20739: LD_VAR 0 4
20743: MINUS
20744: PUSH
20745: LD_INT 0
20747: LESS
20748: IFFALSE 20760
// min_x := 0 else
20750: LD_ADDR_VAR 0 7
20754: PUSH
20755: LD_INT 0
20757: ST_TO_ADDR
20758: GO 20776
// min_x := x - r ;
20760: LD_ADDR_VAR 0 7
20764: PUSH
20765: LD_VAR 0 2
20769: PUSH
20770: LD_VAR 0 4
20774: MINUS
20775: ST_TO_ADDR
// if y - r < 0 then
20776: LD_VAR 0 3
20780: PUSH
20781: LD_VAR 0 4
20785: MINUS
20786: PUSH
20787: LD_INT 0
20789: LESS
20790: IFFALSE 20802
// min_y := 0 else
20792: LD_ADDR_VAR 0 8
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
20800: GO 20818
// min_y := y - r ;
20802: LD_ADDR_VAR 0 8
20806: PUSH
20807: LD_VAR 0 3
20811: PUSH
20812: LD_VAR 0 4
20816: MINUS
20817: ST_TO_ADDR
// max_x := x + r ;
20818: LD_ADDR_VAR 0 9
20822: PUSH
20823: LD_VAR 0 2
20827: PUSH
20828: LD_VAR 0 4
20832: PLUS
20833: ST_TO_ADDR
// max_y := y + r ;
20834: LD_ADDR_VAR 0 10
20838: PUSH
20839: LD_VAR 0 3
20843: PUSH
20844: LD_VAR 0 4
20848: PLUS
20849: ST_TO_ADDR
// for _x = min_x to max_x do
20850: LD_ADDR_VAR 0 11
20854: PUSH
20855: DOUBLE
20856: LD_VAR 0 7
20860: DEC
20861: ST_TO_ADDR
20862: LD_VAR 0 9
20866: PUSH
20867: FOR_TO
20868: IFFALSE 20985
// for _y = min_y to max_y do
20870: LD_ADDR_VAR 0 12
20874: PUSH
20875: DOUBLE
20876: LD_VAR 0 8
20880: DEC
20881: ST_TO_ADDR
20882: LD_VAR 0 10
20886: PUSH
20887: FOR_TO
20888: IFFALSE 20981
// begin if not ValidHex ( _x , _y ) then
20890: LD_VAR 0 11
20894: PPUSH
20895: LD_VAR 0 12
20899: PPUSH
20900: CALL_OW 488
20904: NOT
20905: IFFALSE 20909
// continue ;
20907: GO 20887
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20909: LD_VAR 0 11
20913: PPUSH
20914: LD_VAR 0 12
20918: PPUSH
20919: CALL_OW 351
20923: PUSH
20924: LD_VAR 0 11
20928: PPUSH
20929: LD_VAR 0 12
20933: PPUSH
20934: CALL_OW 554
20938: AND
20939: IFFALSE 20979
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20941: LD_ADDR_VAR 0 13
20945: PUSH
20946: LD_VAR 0 13
20950: PPUSH
20951: LD_VAR 0 13
20955: PUSH
20956: LD_INT 1
20958: PLUS
20959: PPUSH
20960: LD_VAR 0 11
20964: PUSH
20965: LD_VAR 0 12
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PPUSH
20974: CALL_OW 2
20978: ST_TO_ADDR
// end ;
20979: GO 20887
20981: POP
20982: POP
20983: GO 20867
20985: POP
20986: POP
// if not list then
20987: LD_VAR 0 13
20991: NOT
20992: IFFALSE 20996
// exit ;
20994: GO 21067
// for i in list do
20996: LD_ADDR_VAR 0 6
21000: PUSH
21001: LD_VAR 0 13
21005: PUSH
21006: FOR_IN
21007: IFFALSE 21065
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21009: LD_VAR 0 1
21013: PPUSH
21014: LD_STRING M
21016: PUSH
21017: LD_VAR 0 6
21021: PUSH
21022: LD_INT 1
21024: ARRAY
21025: PUSH
21026: LD_VAR 0 6
21030: PUSH
21031: LD_INT 2
21033: ARRAY
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: PUSH
21056: EMPTY
21057: LIST
21058: PPUSH
21059: CALL_OW 447
21063: GO 21006
21065: POP
21066: POP
// end ;
21067: LD_VAR 0 5
21071: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21072: LD_EXP 118
21076: NOT
21077: IFFALSE 21127
21079: GO 21081
21081: DISABLE
// begin initHack := true ;
21082: LD_ADDR_EXP 118
21086: PUSH
21087: LD_INT 1
21089: ST_TO_ADDR
// hackTanks := [ ] ;
21090: LD_ADDR_EXP 119
21094: PUSH
21095: EMPTY
21096: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21097: LD_ADDR_EXP 120
21101: PUSH
21102: EMPTY
21103: ST_TO_ADDR
// hackLimit := 3 ;
21104: LD_ADDR_EXP 121
21108: PUSH
21109: LD_INT 3
21111: ST_TO_ADDR
// hackDist := 12 ;
21112: LD_ADDR_EXP 122
21116: PUSH
21117: LD_INT 12
21119: ST_TO_ADDR
// hackCounter := [ ] ;
21120: LD_ADDR_EXP 123
21124: PUSH
21125: EMPTY
21126: ST_TO_ADDR
// end ;
21127: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21128: LD_EXP 118
21132: PUSH
21133: LD_INT 34
21135: PUSH
21136: LD_EXP 41
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: AND
21150: IFFALSE 21405
21152: GO 21154
21154: DISABLE
21155: LD_INT 0
21157: PPUSH
21158: PPUSH
// begin enable ;
21159: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21160: LD_ADDR_VAR 0 1
21164: PUSH
21165: LD_INT 34
21167: PUSH
21168: LD_EXP 41
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 69
21181: PUSH
21182: FOR_IN
21183: IFFALSE 21403
// begin if not i in hackTanks then
21185: LD_VAR 0 1
21189: PUSH
21190: LD_EXP 119
21194: IN
21195: NOT
21196: IFFALSE 21279
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21198: LD_ADDR_EXP 119
21202: PUSH
21203: LD_EXP 119
21207: PPUSH
21208: LD_EXP 119
21212: PUSH
21213: LD_INT 1
21215: PLUS
21216: PPUSH
21217: LD_VAR 0 1
21221: PPUSH
21222: CALL_OW 1
21226: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21227: LD_ADDR_EXP 120
21231: PUSH
21232: LD_EXP 120
21236: PPUSH
21237: LD_EXP 120
21241: PUSH
21242: LD_INT 1
21244: PLUS
21245: PPUSH
21246: EMPTY
21247: PPUSH
21248: CALL_OW 1
21252: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21253: LD_ADDR_EXP 123
21257: PUSH
21258: LD_EXP 123
21262: PPUSH
21263: LD_EXP 123
21267: PUSH
21268: LD_INT 1
21270: PLUS
21271: PPUSH
21272: EMPTY
21273: PPUSH
21274: CALL_OW 1
21278: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21279: LD_VAR 0 1
21283: PPUSH
21284: CALL_OW 302
21288: NOT
21289: IFFALSE 21302
// begin HackUnlinkAll ( i ) ;
21291: LD_VAR 0 1
21295: PPUSH
21296: CALL 21408 0 1
// continue ;
21300: GO 21182
// end ; HackCheckCapturedStatus ( i ) ;
21302: LD_VAR 0 1
21306: PPUSH
21307: CALL 21851 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21311: LD_ADDR_VAR 0 2
21315: PUSH
21316: LD_INT 81
21318: PUSH
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 255
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 33
21335: PUSH
21336: LD_INT 3
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 91
21345: PUSH
21346: LD_VAR 0 1
21350: PUSH
21351: LD_EXP 122
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 50
21363: PUSH
21364: EMPTY
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: PPUSH
21373: CALL_OW 69
21377: ST_TO_ADDR
// if not tmp then
21378: LD_VAR 0 2
21382: NOT
21383: IFFALSE 21387
// continue ;
21385: GO 21182
// HackLink ( i , tmp ) ;
21387: LD_VAR 0 1
21391: PPUSH
21392: LD_VAR 0 2
21396: PPUSH
21397: CALL 21544 0 2
// end ;
21401: GO 21182
21403: POP
21404: POP
// end ;
21405: PPOPN 2
21407: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21408: LD_INT 0
21410: PPUSH
21411: PPUSH
21412: PPUSH
// if not hack in hackTanks then
21413: LD_VAR 0 1
21417: PUSH
21418: LD_EXP 119
21422: IN
21423: NOT
21424: IFFALSE 21428
// exit ;
21426: GO 21539
// index := GetElementIndex ( hackTanks , hack ) ;
21428: LD_ADDR_VAR 0 4
21432: PUSH
21433: LD_EXP 119
21437: PPUSH
21438: LD_VAR 0 1
21442: PPUSH
21443: CALL 29166 0 2
21447: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21448: LD_EXP 120
21452: PUSH
21453: LD_VAR 0 4
21457: ARRAY
21458: IFFALSE 21539
// begin for i in hackTanksCaptured [ index ] do
21460: LD_ADDR_VAR 0 3
21464: PUSH
21465: LD_EXP 120
21469: PUSH
21470: LD_VAR 0 4
21474: ARRAY
21475: PUSH
21476: FOR_IN
21477: IFFALSE 21503
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21479: LD_VAR 0 3
21483: PUSH
21484: LD_INT 1
21486: ARRAY
21487: PPUSH
21488: LD_VAR 0 3
21492: PUSH
21493: LD_INT 2
21495: ARRAY
21496: PPUSH
21497: CALL_OW 235
21501: GO 21476
21503: POP
21504: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21505: LD_ADDR_EXP 120
21509: PUSH
21510: LD_EXP 120
21514: PPUSH
21515: LD_VAR 0 4
21519: PPUSH
21520: EMPTY
21521: PPUSH
21522: CALL_OW 1
21526: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21527: LD_VAR 0 1
21531: PPUSH
21532: LD_INT 0
21534: PPUSH
21535: CALL_OW 505
// end ; end ;
21539: LD_VAR 0 2
21543: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21544: LD_INT 0
21546: PPUSH
21547: PPUSH
21548: PPUSH
// if not hack in hackTanks or not vehicles then
21549: LD_VAR 0 1
21553: PUSH
21554: LD_EXP 119
21558: IN
21559: NOT
21560: PUSH
21561: LD_VAR 0 2
21565: NOT
21566: OR
21567: IFFALSE 21571
// exit ;
21569: GO 21846
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21571: LD_ADDR_VAR 0 2
21575: PUSH
21576: LD_VAR 0 1
21580: PPUSH
21581: LD_VAR 0 2
21585: PPUSH
21586: LD_INT 1
21588: PPUSH
21589: LD_INT 1
21591: PPUSH
21592: CALL 29816 0 4
21596: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21597: LD_ADDR_VAR 0 5
21601: PUSH
21602: LD_EXP 119
21606: PPUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL 29166 0 2
21616: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21617: LD_EXP 120
21621: PUSH
21622: LD_VAR 0 5
21626: ARRAY
21627: PUSH
21628: LD_EXP 121
21632: LESS
21633: IFFALSE 21822
// begin for i := 1 to vehicles do
21635: LD_ADDR_VAR 0 4
21639: PUSH
21640: DOUBLE
21641: LD_INT 1
21643: DEC
21644: ST_TO_ADDR
21645: LD_VAR 0 2
21649: PUSH
21650: FOR_TO
21651: IFFALSE 21820
// begin if hackTanksCaptured [ index ] = hackLimit then
21653: LD_EXP 120
21657: PUSH
21658: LD_VAR 0 5
21662: ARRAY
21663: PUSH
21664: LD_EXP 121
21668: EQUAL
21669: IFFALSE 21673
// break ;
21671: GO 21820
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21673: LD_ADDR_EXP 123
21677: PUSH
21678: LD_EXP 123
21682: PPUSH
21683: LD_VAR 0 5
21687: PPUSH
21688: LD_EXP 123
21692: PUSH
21693: LD_VAR 0 5
21697: ARRAY
21698: PUSH
21699: LD_INT 1
21701: PLUS
21702: PPUSH
21703: CALL_OW 1
21707: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21708: LD_ADDR_EXP 120
21712: PUSH
21713: LD_EXP 120
21717: PPUSH
21718: LD_VAR 0 5
21722: PUSH
21723: LD_EXP 120
21727: PUSH
21728: LD_VAR 0 5
21732: ARRAY
21733: PUSH
21734: LD_INT 1
21736: PLUS
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PPUSH
21742: LD_VAR 0 2
21746: PUSH
21747: LD_VAR 0 4
21751: ARRAY
21752: PUSH
21753: LD_VAR 0 2
21757: PUSH
21758: LD_VAR 0 4
21762: ARRAY
21763: PPUSH
21764: CALL_OW 255
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PPUSH
21773: CALL 29381 0 3
21777: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21778: LD_VAR 0 2
21782: PUSH
21783: LD_VAR 0 4
21787: ARRAY
21788: PPUSH
21789: LD_VAR 0 1
21793: PPUSH
21794: CALL_OW 255
21798: PPUSH
21799: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21803: LD_VAR 0 2
21807: PUSH
21808: LD_VAR 0 4
21812: ARRAY
21813: PPUSH
21814: CALL_OW 141
// end ;
21818: GO 21650
21820: POP
21821: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21822: LD_VAR 0 1
21826: PPUSH
21827: LD_EXP 120
21831: PUSH
21832: LD_VAR 0 5
21836: ARRAY
21837: PUSH
21838: LD_INT 0
21840: PLUS
21841: PPUSH
21842: CALL_OW 505
// end ;
21846: LD_VAR 0 3
21850: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
21855: PPUSH
21856: PPUSH
// if not hack in hackTanks then
21857: LD_VAR 0 1
21861: PUSH
21862: LD_EXP 119
21866: IN
21867: NOT
21868: IFFALSE 21872
// exit ;
21870: GO 22112
// index := GetElementIndex ( hackTanks , hack ) ;
21872: LD_ADDR_VAR 0 4
21876: PUSH
21877: LD_EXP 119
21881: PPUSH
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL 29166 0 2
21891: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21892: LD_ADDR_VAR 0 3
21896: PUSH
21897: DOUBLE
21898: LD_EXP 120
21902: PUSH
21903: LD_VAR 0 4
21907: ARRAY
21908: INC
21909: ST_TO_ADDR
21910: LD_INT 1
21912: PUSH
21913: FOR_DOWNTO
21914: IFFALSE 22086
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21916: LD_ADDR_VAR 0 5
21920: PUSH
21921: LD_EXP 120
21925: PUSH
21926: LD_VAR 0 4
21930: ARRAY
21931: PUSH
21932: LD_VAR 0 3
21936: ARRAY
21937: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21938: LD_VAR 0 5
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PPUSH
21947: CALL_OW 302
21951: NOT
21952: PUSH
21953: LD_VAR 0 5
21957: PUSH
21958: LD_INT 1
21960: ARRAY
21961: PPUSH
21962: CALL_OW 255
21966: PUSH
21967: LD_VAR 0 1
21971: PPUSH
21972: CALL_OW 255
21976: NONEQUAL
21977: OR
21978: IFFALSE 22084
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21980: LD_VAR 0 5
21984: PUSH
21985: LD_INT 1
21987: ARRAY
21988: PPUSH
21989: CALL_OW 305
21993: PUSH
21994: LD_VAR 0 5
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: PPUSH
22003: CALL_OW 255
22007: PUSH
22008: LD_VAR 0 1
22012: PPUSH
22013: CALL_OW 255
22017: EQUAL
22018: AND
22019: IFFALSE 22043
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22021: LD_VAR 0 5
22025: PUSH
22026: LD_INT 1
22028: ARRAY
22029: PPUSH
22030: LD_VAR 0 5
22034: PUSH
22035: LD_INT 2
22037: ARRAY
22038: PPUSH
22039: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22043: LD_ADDR_EXP 120
22047: PUSH
22048: LD_EXP 120
22052: PPUSH
22053: LD_VAR 0 4
22057: PPUSH
22058: LD_EXP 120
22062: PUSH
22063: LD_VAR 0 4
22067: ARRAY
22068: PPUSH
22069: LD_VAR 0 3
22073: PPUSH
22074: CALL_OW 3
22078: PPUSH
22079: CALL_OW 1
22083: ST_TO_ADDR
// end ; end ;
22084: GO 21913
22086: POP
22087: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22088: LD_VAR 0 1
22092: PPUSH
22093: LD_EXP 120
22097: PUSH
22098: LD_VAR 0 4
22102: ARRAY
22103: PUSH
22104: LD_INT 0
22106: PLUS
22107: PPUSH
22108: CALL_OW 505
// end ;
22112: LD_VAR 0 2
22116: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22117: LD_INT 0
22119: PPUSH
22120: PPUSH
22121: PPUSH
22122: PPUSH
// if not hack in hackTanks then
22123: LD_VAR 0 1
22127: PUSH
22128: LD_EXP 119
22132: IN
22133: NOT
22134: IFFALSE 22138
// exit ;
22136: GO 22223
// index := GetElementIndex ( hackTanks , hack ) ;
22138: LD_ADDR_VAR 0 5
22142: PUSH
22143: LD_EXP 119
22147: PPUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL 29166 0 2
22157: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22158: LD_ADDR_VAR 0 4
22162: PUSH
22163: DOUBLE
22164: LD_INT 1
22166: DEC
22167: ST_TO_ADDR
22168: LD_EXP 120
22172: PUSH
22173: LD_VAR 0 5
22177: ARRAY
22178: PUSH
22179: FOR_TO
22180: IFFALSE 22221
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22182: LD_EXP 120
22186: PUSH
22187: LD_VAR 0 5
22191: ARRAY
22192: PUSH
22193: LD_VAR 0 4
22197: ARRAY
22198: PUSH
22199: LD_INT 1
22201: ARRAY
22202: PUSH
22203: LD_VAR 0 2
22207: EQUAL
22208: IFFALSE 22219
// KillUnit ( vehicle ) ;
22210: LD_VAR 0 2
22214: PPUSH
22215: CALL_OW 66
22219: GO 22179
22221: POP
22222: POP
// end ;
22223: LD_VAR 0 3
22227: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22228: LD_EXP 124
22232: NOT
22233: IFFALSE 22268
22235: GO 22237
22237: DISABLE
// begin initMiner := true ;
22238: LD_ADDR_EXP 124
22242: PUSH
22243: LD_INT 1
22245: ST_TO_ADDR
// minersList := [ ] ;
22246: LD_ADDR_EXP 125
22250: PUSH
22251: EMPTY
22252: ST_TO_ADDR
// minerMinesList := [ ] ;
22253: LD_ADDR_EXP 126
22257: PUSH
22258: EMPTY
22259: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22260: LD_ADDR_EXP 127
22264: PUSH
22265: LD_INT 5
22267: ST_TO_ADDR
// end ;
22268: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22269: LD_EXP 124
22273: PUSH
22274: LD_INT 34
22276: PUSH
22277: LD_EXP 46
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PPUSH
22286: CALL_OW 69
22290: AND
22291: IFFALSE 22754
22293: GO 22295
22295: DISABLE
22296: LD_INT 0
22298: PPUSH
22299: PPUSH
22300: PPUSH
22301: PPUSH
// begin enable ;
22302: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22303: LD_ADDR_VAR 0 1
22307: PUSH
22308: LD_INT 34
22310: PUSH
22311: LD_EXP 46
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PPUSH
22320: CALL_OW 69
22324: PUSH
22325: FOR_IN
22326: IFFALSE 22398
// begin if not i in minersList then
22328: LD_VAR 0 1
22332: PUSH
22333: LD_EXP 125
22337: IN
22338: NOT
22339: IFFALSE 22396
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22341: LD_ADDR_EXP 125
22345: PUSH
22346: LD_EXP 125
22350: PPUSH
22351: LD_EXP 125
22355: PUSH
22356: LD_INT 1
22358: PLUS
22359: PPUSH
22360: LD_VAR 0 1
22364: PPUSH
22365: CALL_OW 1
22369: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22370: LD_ADDR_EXP 126
22374: PUSH
22375: LD_EXP 126
22379: PPUSH
22380: LD_EXP 126
22384: PUSH
22385: LD_INT 1
22387: PLUS
22388: PPUSH
22389: EMPTY
22390: PPUSH
22391: CALL_OW 1
22395: ST_TO_ADDR
// end end ;
22396: GO 22325
22398: POP
22399: POP
// for i := minerMinesList downto 1 do
22400: LD_ADDR_VAR 0 1
22404: PUSH
22405: DOUBLE
22406: LD_EXP 126
22410: INC
22411: ST_TO_ADDR
22412: LD_INT 1
22414: PUSH
22415: FOR_DOWNTO
22416: IFFALSE 22752
// begin if IsLive ( minersList [ i ] ) then
22418: LD_EXP 125
22422: PUSH
22423: LD_VAR 0 1
22427: ARRAY
22428: PPUSH
22429: CALL_OW 300
22433: IFFALSE 22461
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22435: LD_EXP 125
22439: PUSH
22440: LD_VAR 0 1
22444: ARRAY
22445: PPUSH
22446: LD_EXP 126
22450: PUSH
22451: LD_VAR 0 1
22455: ARRAY
22456: PPUSH
22457: CALL_OW 505
// if not minerMinesList [ i ] then
22461: LD_EXP 126
22465: PUSH
22466: LD_VAR 0 1
22470: ARRAY
22471: NOT
22472: IFFALSE 22476
// continue ;
22474: GO 22415
// for j := minerMinesList [ i ] downto 1 do
22476: LD_ADDR_VAR 0 2
22480: PUSH
22481: DOUBLE
22482: LD_EXP 126
22486: PUSH
22487: LD_VAR 0 1
22491: ARRAY
22492: INC
22493: ST_TO_ADDR
22494: LD_INT 1
22496: PUSH
22497: FOR_DOWNTO
22498: IFFALSE 22748
// begin side := GetSide ( minersList [ i ] ) ;
22500: LD_ADDR_VAR 0 3
22504: PUSH
22505: LD_EXP 125
22509: PUSH
22510: LD_VAR 0 1
22514: ARRAY
22515: PPUSH
22516: CALL_OW 255
22520: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22521: LD_ADDR_VAR 0 4
22525: PUSH
22526: LD_EXP 126
22530: PUSH
22531: LD_VAR 0 1
22535: ARRAY
22536: PUSH
22537: LD_VAR 0 2
22541: ARRAY
22542: PUSH
22543: LD_INT 1
22545: ARRAY
22546: PPUSH
22547: LD_EXP 126
22551: PUSH
22552: LD_VAR 0 1
22556: ARRAY
22557: PUSH
22558: LD_VAR 0 2
22562: ARRAY
22563: PUSH
22564: LD_INT 2
22566: ARRAY
22567: PPUSH
22568: CALL_OW 428
22572: ST_TO_ADDR
// if not tmp then
22573: LD_VAR 0 4
22577: NOT
22578: IFFALSE 22582
// continue ;
22580: GO 22497
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22582: LD_VAR 0 4
22586: PUSH
22587: LD_INT 81
22589: PUSH
22590: LD_VAR 0 3
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PPUSH
22599: CALL_OW 69
22603: IN
22604: PUSH
22605: LD_EXP 126
22609: PUSH
22610: LD_VAR 0 1
22614: ARRAY
22615: PUSH
22616: LD_VAR 0 2
22620: ARRAY
22621: PUSH
22622: LD_INT 1
22624: ARRAY
22625: PPUSH
22626: LD_EXP 126
22630: PUSH
22631: LD_VAR 0 1
22635: ARRAY
22636: PUSH
22637: LD_VAR 0 2
22641: ARRAY
22642: PUSH
22643: LD_INT 2
22645: ARRAY
22646: PPUSH
22647: CALL_OW 458
22651: AND
22652: IFFALSE 22746
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22654: LD_EXP 126
22658: PUSH
22659: LD_VAR 0 1
22663: ARRAY
22664: PUSH
22665: LD_VAR 0 2
22669: ARRAY
22670: PUSH
22671: LD_INT 1
22673: ARRAY
22674: PPUSH
22675: LD_EXP 126
22679: PUSH
22680: LD_VAR 0 1
22684: ARRAY
22685: PUSH
22686: LD_VAR 0 2
22690: ARRAY
22691: PUSH
22692: LD_INT 2
22694: ARRAY
22695: PPUSH
22696: LD_VAR 0 3
22700: PPUSH
22701: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22705: LD_ADDR_EXP 126
22709: PUSH
22710: LD_EXP 126
22714: PPUSH
22715: LD_VAR 0 1
22719: PPUSH
22720: LD_EXP 126
22724: PUSH
22725: LD_VAR 0 1
22729: ARRAY
22730: PPUSH
22731: LD_VAR 0 2
22735: PPUSH
22736: CALL_OW 3
22740: PPUSH
22741: CALL_OW 1
22745: ST_TO_ADDR
// end ; end ;
22746: GO 22497
22748: POP
22749: POP
// end ;
22750: GO 22415
22752: POP
22753: POP
// end ;
22754: PPOPN 4
22756: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22757: LD_INT 0
22759: PPUSH
22760: PPUSH
// result := false ;
22761: LD_ADDR_VAR 0 4
22765: PUSH
22766: LD_INT 0
22768: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 264
22778: PUSH
22779: LD_EXP 46
22783: EQUAL
22784: NOT
22785: IFFALSE 22789
// exit ;
22787: GO 23029
// index := GetElementIndex ( minersList , unit ) ;
22789: LD_ADDR_VAR 0 5
22793: PUSH
22794: LD_EXP 125
22798: PPUSH
22799: LD_VAR 0 1
22803: PPUSH
22804: CALL 29166 0 2
22808: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22809: LD_EXP 126
22813: PUSH
22814: LD_VAR 0 5
22818: ARRAY
22819: PUSH
22820: LD_EXP 127
22824: GREATEREQUAL
22825: IFFALSE 22829
// exit ;
22827: GO 23029
// ComMoveXY ( unit , x , y ) ;
22829: LD_VAR 0 1
22833: PPUSH
22834: LD_VAR 0 2
22838: PPUSH
22839: LD_VAR 0 3
22843: PPUSH
22844: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22848: LD_INT 35
22850: PPUSH
22851: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22855: LD_VAR 0 1
22859: PPUSH
22860: LD_VAR 0 2
22864: PPUSH
22865: LD_VAR 0 3
22869: PPUSH
22870: CALL 60452 0 3
22874: NOT
22875: PUSH
22876: LD_VAR 0 1
22880: PPUSH
22881: CALL_OW 314
22885: AND
22886: IFFALSE 22890
// exit ;
22888: GO 23029
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22890: LD_VAR 0 2
22894: PPUSH
22895: LD_VAR 0 3
22899: PPUSH
22900: CALL_OW 428
22904: PUSH
22905: LD_VAR 0 1
22909: EQUAL
22910: PUSH
22911: LD_VAR 0 1
22915: PPUSH
22916: CALL_OW 314
22920: NOT
22921: AND
22922: IFFALSE 22848
// PlaySoundXY ( x , y , PlantMine ) ;
22924: LD_VAR 0 2
22928: PPUSH
22929: LD_VAR 0 3
22933: PPUSH
22934: LD_STRING PlantMine
22936: PPUSH
22937: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22941: LD_VAR 0 2
22945: PPUSH
22946: LD_VAR 0 3
22950: PPUSH
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 255
22960: PPUSH
22961: LD_INT 0
22963: PPUSH
22964: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22968: LD_ADDR_EXP 126
22972: PUSH
22973: LD_EXP 126
22977: PPUSH
22978: LD_VAR 0 5
22982: PUSH
22983: LD_EXP 126
22987: PUSH
22988: LD_VAR 0 5
22992: ARRAY
22993: PUSH
22994: LD_INT 1
22996: PLUS
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PPUSH
23002: LD_VAR 0 2
23006: PUSH
23007: LD_VAR 0 3
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PPUSH
23016: CALL 29381 0 3
23020: ST_TO_ADDR
// result := true ;
23021: LD_ADDR_VAR 0 4
23025: PUSH
23026: LD_INT 1
23028: ST_TO_ADDR
// end ;
23029: LD_VAR 0 4
23033: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23034: LD_INT 0
23036: PPUSH
23037: PPUSH
23038: PPUSH
// if not unit in minersList then
23039: LD_VAR 0 1
23043: PUSH
23044: LD_EXP 125
23048: IN
23049: NOT
23050: IFFALSE 23054
// exit ;
23052: GO 23446
// index := GetElementIndex ( minersList , unit ) ;
23054: LD_ADDR_VAR 0 6
23058: PUSH
23059: LD_EXP 125
23063: PPUSH
23064: LD_VAR 0 1
23068: PPUSH
23069: CALL 29166 0 2
23073: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23074: LD_ADDR_VAR 0 5
23078: PUSH
23079: DOUBLE
23080: LD_EXP 126
23084: PUSH
23085: LD_VAR 0 6
23089: ARRAY
23090: INC
23091: ST_TO_ADDR
23092: LD_INT 1
23094: PUSH
23095: FOR_DOWNTO
23096: IFFALSE 23257
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23098: LD_EXP 126
23102: PUSH
23103: LD_VAR 0 6
23107: ARRAY
23108: PUSH
23109: LD_VAR 0 5
23113: ARRAY
23114: PUSH
23115: LD_INT 1
23117: ARRAY
23118: PUSH
23119: LD_VAR 0 2
23123: EQUAL
23124: PUSH
23125: LD_EXP 126
23129: PUSH
23130: LD_VAR 0 6
23134: ARRAY
23135: PUSH
23136: LD_VAR 0 5
23140: ARRAY
23141: PUSH
23142: LD_INT 2
23144: ARRAY
23145: PUSH
23146: LD_VAR 0 3
23150: EQUAL
23151: AND
23152: IFFALSE 23255
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23154: LD_EXP 126
23158: PUSH
23159: LD_VAR 0 6
23163: ARRAY
23164: PUSH
23165: LD_VAR 0 5
23169: ARRAY
23170: PUSH
23171: LD_INT 1
23173: ARRAY
23174: PPUSH
23175: LD_EXP 126
23179: PUSH
23180: LD_VAR 0 6
23184: ARRAY
23185: PUSH
23186: LD_VAR 0 5
23190: ARRAY
23191: PUSH
23192: LD_INT 2
23194: ARRAY
23195: PPUSH
23196: LD_VAR 0 1
23200: PPUSH
23201: CALL_OW 255
23205: PPUSH
23206: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23210: LD_ADDR_EXP 126
23214: PUSH
23215: LD_EXP 126
23219: PPUSH
23220: LD_VAR 0 6
23224: PPUSH
23225: LD_EXP 126
23229: PUSH
23230: LD_VAR 0 6
23234: ARRAY
23235: PPUSH
23236: LD_VAR 0 5
23240: PPUSH
23241: CALL_OW 3
23245: PPUSH
23246: CALL_OW 1
23250: ST_TO_ADDR
// exit ;
23251: POP
23252: POP
23253: GO 23446
// end ; end ;
23255: GO 23095
23257: POP
23258: POP
// for i := minerMinesList [ index ] downto 1 do
23259: LD_ADDR_VAR 0 5
23263: PUSH
23264: DOUBLE
23265: LD_EXP 126
23269: PUSH
23270: LD_VAR 0 6
23274: ARRAY
23275: INC
23276: ST_TO_ADDR
23277: LD_INT 1
23279: PUSH
23280: FOR_DOWNTO
23281: IFFALSE 23444
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23283: LD_EXP 126
23287: PUSH
23288: LD_VAR 0 6
23292: ARRAY
23293: PUSH
23294: LD_VAR 0 5
23298: ARRAY
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: PPUSH
23304: LD_EXP 126
23308: PUSH
23309: LD_VAR 0 6
23313: ARRAY
23314: PUSH
23315: LD_VAR 0 5
23319: ARRAY
23320: PUSH
23321: LD_INT 2
23323: ARRAY
23324: PPUSH
23325: LD_VAR 0 2
23329: PPUSH
23330: LD_VAR 0 3
23334: PPUSH
23335: CALL_OW 298
23339: PUSH
23340: LD_INT 6
23342: LESS
23343: IFFALSE 23442
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23345: LD_EXP 126
23349: PUSH
23350: LD_VAR 0 6
23354: ARRAY
23355: PUSH
23356: LD_VAR 0 5
23360: ARRAY
23361: PUSH
23362: LD_INT 1
23364: ARRAY
23365: PPUSH
23366: LD_EXP 126
23370: PUSH
23371: LD_VAR 0 6
23375: ARRAY
23376: PUSH
23377: LD_VAR 0 5
23381: ARRAY
23382: PUSH
23383: LD_INT 2
23385: ARRAY
23386: PPUSH
23387: LD_VAR 0 1
23391: PPUSH
23392: CALL_OW 255
23396: PPUSH
23397: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23401: LD_ADDR_EXP 126
23405: PUSH
23406: LD_EXP 126
23410: PPUSH
23411: LD_VAR 0 6
23415: PPUSH
23416: LD_EXP 126
23420: PUSH
23421: LD_VAR 0 6
23425: ARRAY
23426: PPUSH
23427: LD_VAR 0 5
23431: PPUSH
23432: CALL_OW 3
23436: PPUSH
23437: CALL_OW 1
23441: ST_TO_ADDR
// end ; end ;
23442: GO 23280
23444: POP
23445: POP
// end ;
23446: LD_VAR 0 4
23450: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23451: LD_INT 0
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23462: LD_VAR 0 1
23466: PPUSH
23467: CALL_OW 264
23471: PUSH
23472: LD_EXP 46
23476: EQUAL
23477: NOT
23478: PUSH
23479: LD_VAR 0 1
23483: PUSH
23484: LD_EXP 125
23488: IN
23489: NOT
23490: OR
23491: IFFALSE 23495
// exit ;
23493: GO 23817
// index := GetElementIndex ( minersList , unit ) ;
23495: LD_ADDR_VAR 0 6
23499: PUSH
23500: LD_EXP 125
23504: PPUSH
23505: LD_VAR 0 1
23509: PPUSH
23510: CALL 29166 0 2
23514: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23515: LD_ADDR_VAR 0 8
23519: PUSH
23520: LD_EXP 127
23524: PUSH
23525: LD_EXP 126
23529: PUSH
23530: LD_VAR 0 6
23534: ARRAY
23535: MINUS
23536: ST_TO_ADDR
// if not minesFreeAmount then
23537: LD_VAR 0 8
23541: NOT
23542: IFFALSE 23546
// exit ;
23544: GO 23817
// tmp := [ ] ;
23546: LD_ADDR_VAR 0 7
23550: PUSH
23551: EMPTY
23552: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23553: LD_ADDR_VAR 0 5
23557: PUSH
23558: DOUBLE
23559: LD_INT 1
23561: DEC
23562: ST_TO_ADDR
23563: LD_VAR 0 8
23567: PUSH
23568: FOR_TO
23569: IFFALSE 23764
// begin _d := rand ( 0 , 5 ) ;
23571: LD_ADDR_VAR 0 11
23575: PUSH
23576: LD_INT 0
23578: PPUSH
23579: LD_INT 5
23581: PPUSH
23582: CALL_OW 12
23586: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23587: LD_ADDR_VAR 0 12
23591: PUSH
23592: LD_INT 2
23594: PPUSH
23595: LD_INT 6
23597: PPUSH
23598: CALL_OW 12
23602: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23603: LD_ADDR_VAR 0 9
23607: PUSH
23608: LD_VAR 0 2
23612: PPUSH
23613: LD_VAR 0 11
23617: PPUSH
23618: LD_VAR 0 12
23622: PPUSH
23623: CALL_OW 272
23627: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23628: LD_ADDR_VAR 0 10
23632: PUSH
23633: LD_VAR 0 3
23637: PPUSH
23638: LD_VAR 0 11
23642: PPUSH
23643: LD_VAR 0 12
23647: PPUSH
23648: CALL_OW 273
23652: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23653: LD_VAR 0 9
23657: PPUSH
23658: LD_VAR 0 10
23662: PPUSH
23663: CALL_OW 488
23667: PUSH
23668: LD_VAR 0 9
23672: PUSH
23673: LD_VAR 0 10
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_VAR 0 7
23686: IN
23687: NOT
23688: AND
23689: PUSH
23690: LD_VAR 0 9
23694: PPUSH
23695: LD_VAR 0 10
23699: PPUSH
23700: CALL_OW 458
23704: NOT
23705: AND
23706: IFFALSE 23748
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23708: LD_ADDR_VAR 0 7
23712: PUSH
23713: LD_VAR 0 7
23717: PPUSH
23718: LD_VAR 0 7
23722: PUSH
23723: LD_INT 1
23725: PLUS
23726: PPUSH
23727: LD_VAR 0 9
23731: PUSH
23732: LD_VAR 0 10
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PPUSH
23741: CALL_OW 1
23745: ST_TO_ADDR
23746: GO 23762
// i := i - 1 ;
23748: LD_ADDR_VAR 0 5
23752: PUSH
23753: LD_VAR 0 5
23757: PUSH
23758: LD_INT 1
23760: MINUS
23761: ST_TO_ADDR
// end ;
23762: GO 23568
23764: POP
23765: POP
// for i in tmp do
23766: LD_ADDR_VAR 0 5
23770: PUSH
23771: LD_VAR 0 7
23775: PUSH
23776: FOR_IN
23777: IFFALSE 23815
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_VAR 0 5
23788: PUSH
23789: LD_INT 1
23791: ARRAY
23792: PPUSH
23793: LD_VAR 0 5
23797: PUSH
23798: LD_INT 2
23800: ARRAY
23801: PPUSH
23802: CALL 22757 0 3
23806: NOT
23807: IFFALSE 23813
// exit ;
23809: POP
23810: POP
23811: GO 23817
23813: GO 23776
23815: POP
23816: POP
// end ;
23817: LD_VAR 0 4
23821: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23822: LD_INT 0
23824: PPUSH
23825: PPUSH
23826: PPUSH
23827: PPUSH
23828: PPUSH
23829: PPUSH
23830: PPUSH
// if not GetClass ( unit ) = class_sniper then
23831: LD_VAR 0 1
23835: PPUSH
23836: CALL_OW 257
23840: PUSH
23841: LD_INT 5
23843: EQUAL
23844: NOT
23845: IFFALSE 23849
// exit ;
23847: GO 24237
// dist := 8 ;
23849: LD_ADDR_VAR 0 5
23853: PUSH
23854: LD_INT 8
23856: ST_TO_ADDR
// viewRange := 12 ;
23857: LD_ADDR_VAR 0 7
23861: PUSH
23862: LD_INT 12
23864: ST_TO_ADDR
// side := GetSide ( unit ) ;
23865: LD_ADDR_VAR 0 6
23869: PUSH
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL_OW 255
23879: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23880: LD_INT 61
23882: PPUSH
23883: LD_VAR 0 6
23887: PPUSH
23888: CALL_OW 321
23892: PUSH
23893: LD_INT 2
23895: EQUAL
23896: IFFALSE 23906
// viewRange := 16 ;
23898: LD_ADDR_VAR 0 7
23902: PUSH
23903: LD_INT 16
23905: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23906: LD_VAR 0 1
23910: PPUSH
23911: LD_VAR 0 2
23915: PPUSH
23916: LD_VAR 0 3
23920: PPUSH
23921: CALL_OW 297
23925: PUSH
23926: LD_VAR 0 5
23930: GREATER
23931: IFFALSE 24010
// begin ComMoveXY ( unit , x , y ) ;
23933: LD_VAR 0 1
23937: PPUSH
23938: LD_VAR 0 2
23942: PPUSH
23943: LD_VAR 0 3
23947: PPUSH
23948: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23952: LD_INT 35
23954: PPUSH
23955: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23959: LD_VAR 0 1
23963: PPUSH
23964: LD_VAR 0 2
23968: PPUSH
23969: LD_VAR 0 3
23973: PPUSH
23974: CALL 60452 0 3
23978: NOT
23979: IFFALSE 23983
// exit ;
23981: GO 24237
// until GetDistUnitXY ( unit , x , y ) < dist ;
23983: LD_VAR 0 1
23987: PPUSH
23988: LD_VAR 0 2
23992: PPUSH
23993: LD_VAR 0 3
23997: PPUSH
23998: CALL_OW 297
24002: PUSH
24003: LD_VAR 0 5
24007: LESS
24008: IFFALSE 23952
// end ; ComTurnXY ( unit , x , y ) ;
24010: LD_VAR 0 1
24014: PPUSH
24015: LD_VAR 0 2
24019: PPUSH
24020: LD_VAR 0 3
24024: PPUSH
24025: CALL_OW 118
// wait ( 5 ) ;
24029: LD_INT 5
24031: PPUSH
24032: CALL_OW 67
// _d := GetDir ( unit ) ;
24036: LD_ADDR_VAR 0 10
24040: PUSH
24041: LD_VAR 0 1
24045: PPUSH
24046: CALL_OW 254
24050: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24051: LD_ADDR_VAR 0 8
24055: PUSH
24056: LD_VAR 0 1
24060: PPUSH
24061: CALL_OW 250
24065: PPUSH
24066: LD_VAR 0 10
24070: PPUSH
24071: LD_VAR 0 5
24075: PPUSH
24076: CALL_OW 272
24080: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24081: LD_ADDR_VAR 0 9
24085: PUSH
24086: LD_VAR 0 1
24090: PPUSH
24091: CALL_OW 251
24095: PPUSH
24096: LD_VAR 0 10
24100: PPUSH
24101: LD_VAR 0 5
24105: PPUSH
24106: CALL_OW 273
24110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24111: LD_VAR 0 8
24115: PPUSH
24116: LD_VAR 0 9
24120: PPUSH
24121: CALL_OW 488
24125: NOT
24126: IFFALSE 24130
// exit ;
24128: GO 24237
// ComAnimCustom ( unit , 1 ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: LD_INT 1
24137: PPUSH
24138: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24142: LD_VAR 0 8
24146: PPUSH
24147: LD_VAR 0 9
24151: PPUSH
24152: LD_VAR 0 6
24156: PPUSH
24157: LD_VAR 0 7
24161: PPUSH
24162: CALL_OW 330
// repeat wait ( 1 ) ;
24166: LD_INT 1
24168: PPUSH
24169: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL_OW 316
24182: PUSH
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 314
24192: OR
24193: PUSH
24194: LD_VAR 0 1
24198: PPUSH
24199: CALL_OW 302
24203: NOT
24204: OR
24205: PUSH
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 301
24215: OR
24216: IFFALSE 24166
// RemoveSeeing ( _x , _y , side ) ;
24218: LD_VAR 0 8
24222: PPUSH
24223: LD_VAR 0 9
24227: PPUSH
24228: LD_VAR 0 6
24232: PPUSH
24233: CALL_OW 331
// end ; end_of_file
24237: LD_VAR 0 4
24241: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24242: LD_INT 0
24244: PPUSH
24245: PPUSH
// if exist_mode then
24246: LD_VAR 0 2
24250: IFFALSE 24275
// unit := CreateCharacter ( prefix & ident ) else
24252: LD_ADDR_VAR 0 5
24256: PUSH
24257: LD_VAR 0 3
24261: PUSH
24262: LD_VAR 0 1
24266: STR
24267: PPUSH
24268: CALL_OW 34
24272: ST_TO_ADDR
24273: GO 24290
// unit := NewCharacter ( ident ) ;
24275: LD_ADDR_VAR 0 5
24279: PUSH
24280: LD_VAR 0 1
24284: PPUSH
24285: CALL_OW 25
24289: ST_TO_ADDR
// result := unit ;
24290: LD_ADDR_VAR 0 4
24294: PUSH
24295: LD_VAR 0 5
24299: ST_TO_ADDR
// end ;
24300: LD_VAR 0 4
24304: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24305: LD_INT 0
24307: PPUSH
24308: PPUSH
// if not side or not nation then
24309: LD_VAR 0 1
24313: NOT
24314: PUSH
24315: LD_VAR 0 2
24319: NOT
24320: OR
24321: IFFALSE 24325
// exit ;
24323: GO 25093
// case nation of nation_american :
24325: LD_VAR 0 2
24329: PUSH
24330: LD_INT 1
24332: DOUBLE
24333: EQUAL
24334: IFTRUE 24338
24336: GO 24552
24338: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24339: LD_ADDR_VAR 0 4
24343: PUSH
24344: LD_INT 35
24346: PUSH
24347: LD_INT 45
24349: PUSH
24350: LD_INT 46
24352: PUSH
24353: LD_INT 47
24355: PUSH
24356: LD_INT 82
24358: PUSH
24359: LD_INT 83
24361: PUSH
24362: LD_INT 84
24364: PUSH
24365: LD_INT 85
24367: PUSH
24368: LD_INT 86
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: LD_INT 6
24379: PUSH
24380: LD_INT 15
24382: PUSH
24383: LD_INT 16
24385: PUSH
24386: LD_INT 7
24388: PUSH
24389: LD_INT 12
24391: PUSH
24392: LD_INT 13
24394: PUSH
24395: LD_INT 10
24397: PUSH
24398: LD_INT 14
24400: PUSH
24401: LD_INT 20
24403: PUSH
24404: LD_INT 21
24406: PUSH
24407: LD_INT 22
24409: PUSH
24410: LD_INT 25
24412: PUSH
24413: LD_INT 32
24415: PUSH
24416: LD_INT 27
24418: PUSH
24419: LD_INT 36
24421: PUSH
24422: LD_INT 69
24424: PUSH
24425: LD_INT 39
24427: PUSH
24428: LD_INT 34
24430: PUSH
24431: LD_INT 40
24433: PUSH
24434: LD_INT 48
24436: PUSH
24437: LD_INT 49
24439: PUSH
24440: LD_INT 50
24442: PUSH
24443: LD_INT 51
24445: PUSH
24446: LD_INT 52
24448: PUSH
24449: LD_INT 53
24451: PUSH
24452: LD_INT 54
24454: PUSH
24455: LD_INT 55
24457: PUSH
24458: LD_INT 56
24460: PUSH
24461: LD_INT 57
24463: PUSH
24464: LD_INT 58
24466: PUSH
24467: LD_INT 59
24469: PUSH
24470: LD_INT 60
24472: PUSH
24473: LD_INT 61
24475: PUSH
24476: LD_INT 62
24478: PUSH
24479: LD_INT 80
24481: PUSH
24482: LD_INT 82
24484: PUSH
24485: LD_INT 83
24487: PUSH
24488: LD_INT 84
24490: PUSH
24491: LD_INT 85
24493: PUSH
24494: LD_INT 86
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: ST_TO_ADDR
24550: GO 25017
24552: LD_INT 2
24554: DOUBLE
24555: EQUAL
24556: IFTRUE 24560
24558: GO 24786
24560: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24561: LD_ADDR_VAR 0 4
24565: PUSH
24566: LD_INT 35
24568: PUSH
24569: LD_INT 45
24571: PUSH
24572: LD_INT 46
24574: PUSH
24575: LD_INT 47
24577: PUSH
24578: LD_INT 82
24580: PUSH
24581: LD_INT 83
24583: PUSH
24584: LD_INT 84
24586: PUSH
24587: LD_INT 85
24589: PUSH
24590: LD_INT 87
24592: PUSH
24593: LD_INT 70
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 11
24601: PUSH
24602: LD_INT 3
24604: PUSH
24605: LD_INT 4
24607: PUSH
24608: LD_INT 5
24610: PUSH
24611: LD_INT 6
24613: PUSH
24614: LD_INT 15
24616: PUSH
24617: LD_INT 18
24619: PUSH
24620: LD_INT 7
24622: PUSH
24623: LD_INT 17
24625: PUSH
24626: LD_INT 8
24628: PUSH
24629: LD_INT 20
24631: PUSH
24632: LD_INT 21
24634: PUSH
24635: LD_INT 22
24637: PUSH
24638: LD_INT 72
24640: PUSH
24641: LD_INT 26
24643: PUSH
24644: LD_INT 69
24646: PUSH
24647: LD_INT 39
24649: PUSH
24650: LD_INT 40
24652: PUSH
24653: LD_INT 41
24655: PUSH
24656: LD_INT 42
24658: PUSH
24659: LD_INT 43
24661: PUSH
24662: LD_INT 48
24664: PUSH
24665: LD_INT 49
24667: PUSH
24668: LD_INT 50
24670: PUSH
24671: LD_INT 51
24673: PUSH
24674: LD_INT 52
24676: PUSH
24677: LD_INT 53
24679: PUSH
24680: LD_INT 54
24682: PUSH
24683: LD_INT 55
24685: PUSH
24686: LD_INT 56
24688: PUSH
24689: LD_INT 60
24691: PUSH
24692: LD_INT 61
24694: PUSH
24695: LD_INT 62
24697: PUSH
24698: LD_INT 66
24700: PUSH
24701: LD_INT 67
24703: PUSH
24704: LD_INT 68
24706: PUSH
24707: LD_INT 81
24709: PUSH
24710: LD_INT 82
24712: PUSH
24713: LD_INT 83
24715: PUSH
24716: LD_INT 84
24718: PUSH
24719: LD_INT 85
24721: PUSH
24722: LD_INT 87
24724: PUSH
24725: LD_INT 88
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: ST_TO_ADDR
24784: GO 25017
24786: LD_INT 3
24788: DOUBLE
24789: EQUAL
24790: IFTRUE 24794
24792: GO 25016
24794: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24795: LD_ADDR_VAR 0 4
24799: PUSH
24800: LD_INT 46
24802: PUSH
24803: LD_INT 47
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: LD_INT 82
24814: PUSH
24815: LD_INT 83
24817: PUSH
24818: LD_INT 84
24820: PUSH
24821: LD_INT 85
24823: PUSH
24824: LD_INT 86
24826: PUSH
24827: LD_INT 11
24829: PUSH
24830: LD_INT 9
24832: PUSH
24833: LD_INT 20
24835: PUSH
24836: LD_INT 19
24838: PUSH
24839: LD_INT 21
24841: PUSH
24842: LD_INT 24
24844: PUSH
24845: LD_INT 22
24847: PUSH
24848: LD_INT 25
24850: PUSH
24851: LD_INT 28
24853: PUSH
24854: LD_INT 29
24856: PUSH
24857: LD_INT 30
24859: PUSH
24860: LD_INT 31
24862: PUSH
24863: LD_INT 37
24865: PUSH
24866: LD_INT 38
24868: PUSH
24869: LD_INT 32
24871: PUSH
24872: LD_INT 27
24874: PUSH
24875: LD_INT 33
24877: PUSH
24878: LD_INT 69
24880: PUSH
24881: LD_INT 39
24883: PUSH
24884: LD_INT 34
24886: PUSH
24887: LD_INT 40
24889: PUSH
24890: LD_INT 71
24892: PUSH
24893: LD_INT 23
24895: PUSH
24896: LD_INT 44
24898: PUSH
24899: LD_INT 48
24901: PUSH
24902: LD_INT 49
24904: PUSH
24905: LD_INT 50
24907: PUSH
24908: LD_INT 51
24910: PUSH
24911: LD_INT 52
24913: PUSH
24914: LD_INT 53
24916: PUSH
24917: LD_INT 54
24919: PUSH
24920: LD_INT 55
24922: PUSH
24923: LD_INT 56
24925: PUSH
24926: LD_INT 57
24928: PUSH
24929: LD_INT 58
24931: PUSH
24932: LD_INT 59
24934: PUSH
24935: LD_INT 63
24937: PUSH
24938: LD_INT 64
24940: PUSH
24941: LD_INT 65
24943: PUSH
24944: LD_INT 82
24946: PUSH
24947: LD_INT 83
24949: PUSH
24950: LD_INT 84
24952: PUSH
24953: LD_INT 85
24955: PUSH
24956: LD_INT 86
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: ST_TO_ADDR
25014: GO 25017
25016: POP
// if state > - 1 and state < 3 then
25017: LD_VAR 0 3
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: GREATER
25026: PUSH
25027: LD_VAR 0 3
25031: PUSH
25032: LD_INT 3
25034: LESS
25035: AND
25036: IFFALSE 25093
// for i in result do
25038: LD_ADDR_VAR 0 5
25042: PUSH
25043: LD_VAR 0 4
25047: PUSH
25048: FOR_IN
25049: IFFALSE 25091
// if GetTech ( i , side ) <> state then
25051: LD_VAR 0 5
25055: PPUSH
25056: LD_VAR 0 1
25060: PPUSH
25061: CALL_OW 321
25065: PUSH
25066: LD_VAR 0 3
25070: NONEQUAL
25071: IFFALSE 25089
// result := result diff i ;
25073: LD_ADDR_VAR 0 4
25077: PUSH
25078: LD_VAR 0 4
25082: PUSH
25083: LD_VAR 0 5
25087: DIFF
25088: ST_TO_ADDR
25089: GO 25048
25091: POP
25092: POP
// end ;
25093: LD_VAR 0 4
25097: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25098: LD_INT 0
25100: PPUSH
25101: PPUSH
25102: PPUSH
// result := true ;
25103: LD_ADDR_VAR 0 3
25107: PUSH
25108: LD_INT 1
25110: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25111: LD_ADDR_VAR 0 5
25115: PUSH
25116: LD_VAR 0 2
25120: PPUSH
25121: CALL_OW 480
25125: ST_TO_ADDR
// if not tmp then
25126: LD_VAR 0 5
25130: NOT
25131: IFFALSE 25135
// exit ;
25133: GO 25184
// for i in tmp do
25135: LD_ADDR_VAR 0 4
25139: PUSH
25140: LD_VAR 0 5
25144: PUSH
25145: FOR_IN
25146: IFFALSE 25182
// if GetTech ( i , side ) <> state_researched then
25148: LD_VAR 0 4
25152: PPUSH
25153: LD_VAR 0 1
25157: PPUSH
25158: CALL_OW 321
25162: PUSH
25163: LD_INT 2
25165: NONEQUAL
25166: IFFALSE 25180
// begin result := false ;
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_INT 0
25175: ST_TO_ADDR
// exit ;
25176: POP
25177: POP
25178: GO 25184
// end ;
25180: GO 25145
25182: POP
25183: POP
// end ;
25184: LD_VAR 0 3
25188: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25189: LD_INT 0
25191: PPUSH
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25204: LD_VAR 0 1
25208: NOT
25209: PUSH
25210: LD_VAR 0 1
25214: PPUSH
25215: CALL_OW 257
25219: PUSH
25220: LD_INT 9
25222: NONEQUAL
25223: OR
25224: IFFALSE 25228
// exit ;
25226: GO 25801
// side := GetSide ( unit ) ;
25228: LD_ADDR_VAR 0 9
25232: PUSH
25233: LD_VAR 0 1
25237: PPUSH
25238: CALL_OW 255
25242: ST_TO_ADDR
// tech_space := tech_spacanom ;
25243: LD_ADDR_VAR 0 12
25247: PUSH
25248: LD_INT 29
25250: ST_TO_ADDR
// tech_time := tech_taurad ;
25251: LD_ADDR_VAR 0 13
25255: PUSH
25256: LD_INT 28
25258: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25259: LD_ADDR_VAR 0 11
25263: PUSH
25264: LD_VAR 0 1
25268: PPUSH
25269: CALL_OW 310
25273: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25274: LD_VAR 0 11
25278: PPUSH
25279: CALL_OW 247
25283: PUSH
25284: LD_INT 2
25286: EQUAL
25287: IFFALSE 25291
// exit ;
25289: GO 25801
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25291: LD_ADDR_VAR 0 8
25295: PUSH
25296: LD_INT 81
25298: PUSH
25299: LD_VAR 0 9
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 3
25310: PUSH
25311: LD_INT 21
25313: PUSH
25314: LD_INT 3
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PPUSH
25329: CALL_OW 69
25333: ST_TO_ADDR
// if not tmp then
25334: LD_VAR 0 8
25338: NOT
25339: IFFALSE 25343
// exit ;
25341: GO 25801
// if in_unit then
25343: LD_VAR 0 11
25347: IFFALSE 25371
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25349: LD_ADDR_VAR 0 10
25353: PUSH
25354: LD_VAR 0 8
25358: PPUSH
25359: LD_VAR 0 11
25363: PPUSH
25364: CALL_OW 74
25368: ST_TO_ADDR
25369: GO 25391
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25371: LD_ADDR_VAR 0 10
25375: PUSH
25376: LD_VAR 0 8
25380: PPUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 74
25390: ST_TO_ADDR
// if not enemy then
25391: LD_VAR 0 10
25395: NOT
25396: IFFALSE 25400
// exit ;
25398: GO 25801
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25400: LD_VAR 0 11
25404: PUSH
25405: LD_VAR 0 11
25409: PPUSH
25410: LD_VAR 0 10
25414: PPUSH
25415: CALL_OW 296
25419: PUSH
25420: LD_INT 13
25422: GREATER
25423: AND
25424: PUSH
25425: LD_VAR 0 1
25429: PPUSH
25430: LD_VAR 0 10
25434: PPUSH
25435: CALL_OW 296
25439: PUSH
25440: LD_INT 12
25442: GREATER
25443: OR
25444: IFFALSE 25448
// exit ;
25446: GO 25801
// missile := [ 1 ] ;
25448: LD_ADDR_VAR 0 14
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25459: LD_VAR 0 9
25463: PPUSH
25464: LD_VAR 0 12
25468: PPUSH
25469: CALL_OW 325
25473: IFFALSE 25502
// missile := Replace ( missile , missile + 1 , 2 ) ;
25475: LD_ADDR_VAR 0 14
25479: PUSH
25480: LD_VAR 0 14
25484: PPUSH
25485: LD_VAR 0 14
25489: PUSH
25490: LD_INT 1
25492: PLUS
25493: PPUSH
25494: LD_INT 2
25496: PPUSH
25497: CALL_OW 1
25501: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25502: LD_VAR 0 9
25506: PPUSH
25507: LD_VAR 0 13
25511: PPUSH
25512: CALL_OW 325
25516: PUSH
25517: LD_VAR 0 10
25521: PPUSH
25522: CALL_OW 255
25526: PPUSH
25527: LD_VAR 0 13
25531: PPUSH
25532: CALL_OW 325
25536: NOT
25537: AND
25538: IFFALSE 25567
// missile := Replace ( missile , missile + 1 , 3 ) ;
25540: LD_ADDR_VAR 0 14
25544: PUSH
25545: LD_VAR 0 14
25549: PPUSH
25550: LD_VAR 0 14
25554: PUSH
25555: LD_INT 1
25557: PLUS
25558: PPUSH
25559: LD_INT 3
25561: PPUSH
25562: CALL_OW 1
25566: ST_TO_ADDR
// if missile < 2 then
25567: LD_VAR 0 14
25571: PUSH
25572: LD_INT 2
25574: LESS
25575: IFFALSE 25579
// exit ;
25577: GO 25801
// x := GetX ( enemy ) ;
25579: LD_ADDR_VAR 0 4
25583: PUSH
25584: LD_VAR 0 10
25588: PPUSH
25589: CALL_OW 250
25593: ST_TO_ADDR
// y := GetY ( enemy ) ;
25594: LD_ADDR_VAR 0 5
25598: PUSH
25599: LD_VAR 0 10
25603: PPUSH
25604: CALL_OW 251
25608: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25609: LD_ADDR_VAR 0 6
25613: PUSH
25614: LD_VAR 0 4
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PPUSH
25623: LD_INT 1
25625: PPUSH
25626: CALL_OW 12
25630: PLUS
25631: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25632: LD_ADDR_VAR 0 7
25636: PUSH
25637: LD_VAR 0 5
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PPUSH
25646: LD_INT 1
25648: PPUSH
25649: CALL_OW 12
25653: PLUS
25654: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25655: LD_VAR 0 6
25659: PPUSH
25660: LD_VAR 0 7
25664: PPUSH
25665: CALL_OW 488
25669: NOT
25670: IFFALSE 25692
// begin _x := x ;
25672: LD_ADDR_VAR 0 6
25676: PUSH
25677: LD_VAR 0 4
25681: ST_TO_ADDR
// _y := y ;
25682: LD_ADDR_VAR 0 7
25686: PUSH
25687: LD_VAR 0 5
25691: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25692: LD_ADDR_VAR 0 3
25696: PUSH
25697: LD_INT 1
25699: PPUSH
25700: LD_VAR 0 14
25704: PPUSH
25705: CALL_OW 12
25709: ST_TO_ADDR
// case i of 1 :
25710: LD_VAR 0 3
25714: PUSH
25715: LD_INT 1
25717: DOUBLE
25718: EQUAL
25719: IFTRUE 25723
25721: GO 25740
25723: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25724: LD_VAR 0 1
25728: PPUSH
25729: LD_VAR 0 10
25733: PPUSH
25734: CALL_OW 115
25738: GO 25801
25740: LD_INT 2
25742: DOUBLE
25743: EQUAL
25744: IFTRUE 25748
25746: GO 25770
25748: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25749: LD_VAR 0 1
25753: PPUSH
25754: LD_VAR 0 6
25758: PPUSH
25759: LD_VAR 0 7
25763: PPUSH
25764: CALL_OW 153
25768: GO 25801
25770: LD_INT 3
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25800
25778: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25779: LD_VAR 0 1
25783: PPUSH
25784: LD_VAR 0 6
25788: PPUSH
25789: LD_VAR 0 7
25793: PPUSH
25794: CALL_OW 154
25798: GO 25801
25800: POP
// end ;
25801: LD_VAR 0 2
25805: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25806: LD_INT 0
25808: PPUSH
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
25813: PPUSH
// if not unit or not building then
25814: LD_VAR 0 1
25818: NOT
25819: PUSH
25820: LD_VAR 0 2
25824: NOT
25825: OR
25826: IFFALSE 25830
// exit ;
25828: GO 25988
// x := GetX ( building ) ;
25830: LD_ADDR_VAR 0 5
25834: PUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: CALL_OW 250
25844: ST_TO_ADDR
// y := GetY ( building ) ;
25845: LD_ADDR_VAR 0 6
25849: PUSH
25850: LD_VAR 0 2
25854: PPUSH
25855: CALL_OW 251
25859: ST_TO_ADDR
// for i = 0 to 5 do
25860: LD_ADDR_VAR 0 4
25864: PUSH
25865: DOUBLE
25866: LD_INT 0
25868: DEC
25869: ST_TO_ADDR
25870: LD_INT 5
25872: PUSH
25873: FOR_TO
25874: IFFALSE 25986
// begin _x := ShiftX ( x , i , 3 ) ;
25876: LD_ADDR_VAR 0 7
25880: PUSH
25881: LD_VAR 0 5
25885: PPUSH
25886: LD_VAR 0 4
25890: PPUSH
25891: LD_INT 3
25893: PPUSH
25894: CALL_OW 272
25898: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25899: LD_ADDR_VAR 0 8
25903: PUSH
25904: LD_VAR 0 6
25908: PPUSH
25909: LD_VAR 0 4
25913: PPUSH
25914: LD_INT 3
25916: PPUSH
25917: CALL_OW 273
25921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25922: LD_VAR 0 7
25926: PPUSH
25927: LD_VAR 0 8
25931: PPUSH
25932: CALL_OW 488
25936: NOT
25937: IFFALSE 25941
// continue ;
25939: GO 25873
// if HexInfo ( _x , _y ) = 0 then
25941: LD_VAR 0 7
25945: PPUSH
25946: LD_VAR 0 8
25950: PPUSH
25951: CALL_OW 428
25955: PUSH
25956: LD_INT 0
25958: EQUAL
25959: IFFALSE 25984
// begin ComMoveXY ( unit , _x , _y ) ;
25961: LD_VAR 0 1
25965: PPUSH
25966: LD_VAR 0 7
25970: PPUSH
25971: LD_VAR 0 8
25975: PPUSH
25976: CALL_OW 111
// exit ;
25980: POP
25981: POP
25982: GO 25988
// end ; end ;
25984: GO 25873
25986: POP
25987: POP
// end ;
25988: LD_VAR 0 3
25992: RET
// export function ScanBase ( side , base_area ) ; begin
25993: LD_INT 0
25995: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25996: LD_ADDR_VAR 0 3
26000: PUSH
26001: LD_VAR 0 2
26005: PPUSH
26006: LD_INT 81
26008: PUSH
26009: LD_VAR 0 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PPUSH
26018: CALL_OW 70
26022: ST_TO_ADDR
// end ;
26023: LD_VAR 0 3
26027: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26028: LD_INT 0
26030: PPUSH
26031: PPUSH
26032: PPUSH
26033: PPUSH
// result := false ;
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: LD_INT 0
26041: ST_TO_ADDR
// side := GetSide ( unit ) ;
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_VAR 0 1
26051: PPUSH
26052: CALL_OW 255
26056: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26057: LD_ADDR_VAR 0 4
26061: PUSH
26062: LD_VAR 0 1
26066: PPUSH
26067: CALL_OW 248
26071: ST_TO_ADDR
// case nat of 1 :
26072: LD_VAR 0 4
26076: PUSH
26077: LD_INT 1
26079: DOUBLE
26080: EQUAL
26081: IFTRUE 26085
26083: GO 26096
26085: POP
// tech := tech_lassight ; 2 :
26086: LD_ADDR_VAR 0 5
26090: PUSH
26091: LD_INT 12
26093: ST_TO_ADDR
26094: GO 26135
26096: LD_INT 2
26098: DOUBLE
26099: EQUAL
26100: IFTRUE 26104
26102: GO 26115
26104: POP
// tech := tech_mortar ; 3 :
26105: LD_ADDR_VAR 0 5
26109: PUSH
26110: LD_INT 41
26112: ST_TO_ADDR
26113: GO 26135
26115: LD_INT 3
26117: DOUBLE
26118: EQUAL
26119: IFTRUE 26123
26121: GO 26134
26123: POP
// tech := tech_bazooka ; end ;
26124: LD_ADDR_VAR 0 5
26128: PUSH
26129: LD_INT 44
26131: ST_TO_ADDR
26132: GO 26135
26134: POP
// if Researched ( side , tech ) then
26135: LD_VAR 0 3
26139: PPUSH
26140: LD_VAR 0 5
26144: PPUSH
26145: CALL_OW 325
26149: IFFALSE 26176
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26151: LD_ADDR_VAR 0 2
26155: PUSH
26156: LD_INT 5
26158: PUSH
26159: LD_INT 8
26161: PUSH
26162: LD_INT 9
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: PUSH
26170: LD_VAR 0 4
26174: ARRAY
26175: ST_TO_ADDR
// end ;
26176: LD_VAR 0 2
26180: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26181: LD_INT 0
26183: PPUSH
26184: PPUSH
26185: PPUSH
// if not mines then
26186: LD_VAR 0 2
26190: NOT
26191: IFFALSE 26195
// exit ;
26193: GO 26339
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26195: LD_ADDR_VAR 0 5
26199: PUSH
26200: LD_INT 81
26202: PUSH
26203: LD_VAR 0 1
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 3
26214: PUSH
26215: LD_INT 21
26217: PUSH
26218: LD_INT 3
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PPUSH
26233: CALL_OW 69
26237: ST_TO_ADDR
// for i in mines do
26238: LD_ADDR_VAR 0 4
26242: PUSH
26243: LD_VAR 0 2
26247: PUSH
26248: FOR_IN
26249: IFFALSE 26337
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26251: LD_VAR 0 4
26255: PUSH
26256: LD_INT 1
26258: ARRAY
26259: PPUSH
26260: LD_VAR 0 4
26264: PUSH
26265: LD_INT 2
26267: ARRAY
26268: PPUSH
26269: CALL_OW 458
26273: NOT
26274: IFFALSE 26278
// continue ;
26276: GO 26248
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26278: LD_VAR 0 4
26282: PUSH
26283: LD_INT 1
26285: ARRAY
26286: PPUSH
26287: LD_VAR 0 4
26291: PUSH
26292: LD_INT 2
26294: ARRAY
26295: PPUSH
26296: CALL_OW 428
26300: PUSH
26301: LD_VAR 0 5
26305: IN
26306: IFFALSE 26335
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26308: LD_VAR 0 4
26312: PUSH
26313: LD_INT 1
26315: ARRAY
26316: PPUSH
26317: LD_VAR 0 4
26321: PUSH
26322: LD_INT 2
26324: ARRAY
26325: PPUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL_OW 456
// end ;
26335: GO 26248
26337: POP
26338: POP
// end ;
26339: LD_VAR 0 3
26343: RET
// export function Count ( array ) ; var i ; begin
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
// result := 0 ;
26348: LD_ADDR_VAR 0 2
26352: PUSH
26353: LD_INT 0
26355: ST_TO_ADDR
// for i in array do
26356: LD_ADDR_VAR 0 3
26360: PUSH
26361: LD_VAR 0 1
26365: PUSH
26366: FOR_IN
26367: IFFALSE 26391
// if i then
26369: LD_VAR 0 3
26373: IFFALSE 26389
// result := result + 1 ;
26375: LD_ADDR_VAR 0 2
26379: PUSH
26380: LD_VAR 0 2
26384: PUSH
26385: LD_INT 1
26387: PLUS
26388: ST_TO_ADDR
26389: GO 26366
26391: POP
26392: POP
// end ;
26393: LD_VAR 0 2
26397: RET
// export function IsEmpty ( building ) ; begin
26398: LD_INT 0
26400: PPUSH
// if not building then
26401: LD_VAR 0 1
26405: NOT
26406: IFFALSE 26410
// exit ;
26408: GO 26453
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26410: LD_ADDR_VAR 0 2
26414: PUSH
26415: LD_VAR 0 1
26419: PUSH
26420: LD_INT 22
26422: PUSH
26423: LD_VAR 0 1
26427: PPUSH
26428: CALL_OW 255
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 58
26439: PUSH
26440: EMPTY
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PPUSH
26447: CALL_OW 69
26451: IN
26452: ST_TO_ADDR
// end ;
26453: LD_VAR 0 2
26457: RET
// export function IsNotFull ( building ) ; var places ; begin
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
// if not building then
26462: LD_VAR 0 1
26466: NOT
26467: IFFALSE 26471
// exit ;
26469: GO 26642
// result := false ;
26471: LD_ADDR_VAR 0 2
26475: PUSH
26476: LD_INT 0
26478: ST_TO_ADDR
// places := 0 ;
26479: LD_ADDR_VAR 0 3
26483: PUSH
26484: LD_INT 0
26486: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26487: LD_VAR 0 1
26491: PPUSH
26492: CALL_OW 266
26496: PUSH
26497: LD_INT 0
26499: DOUBLE
26500: EQUAL
26501: IFTRUE 26559
26503: LD_INT 1
26505: DOUBLE
26506: EQUAL
26507: IFTRUE 26559
26509: LD_INT 6
26511: DOUBLE
26512: EQUAL
26513: IFTRUE 26559
26515: LD_INT 7
26517: DOUBLE
26518: EQUAL
26519: IFTRUE 26559
26521: LD_INT 8
26523: DOUBLE
26524: EQUAL
26525: IFTRUE 26559
26527: LD_INT 4
26529: DOUBLE
26530: EQUAL
26531: IFTRUE 26559
26533: LD_INT 5
26535: DOUBLE
26536: EQUAL
26537: IFTRUE 26559
26539: LD_INT 2
26541: DOUBLE
26542: EQUAL
26543: IFTRUE 26559
26545: LD_INT 3
26547: DOUBLE
26548: EQUAL
26549: IFTRUE 26559
26551: LD_INT 35
26553: DOUBLE
26554: EQUAL
26555: IFTRUE 26559
26557: GO 26570
26559: POP
// places := 6 ; b_bunker , b_breastwork :
26560: LD_ADDR_VAR 0 3
26564: PUSH
26565: LD_INT 6
26567: ST_TO_ADDR
26568: GO 26615
26570: LD_INT 32
26572: DOUBLE
26573: EQUAL
26574: IFTRUE 26584
26576: LD_INT 31
26578: DOUBLE
26579: EQUAL
26580: IFTRUE 26584
26582: GO 26595
26584: POP
// places := 1 ; b_control_tower :
26585: LD_ADDR_VAR 0 3
26589: PUSH
26590: LD_INT 1
26592: ST_TO_ADDR
26593: GO 26615
26595: LD_INT 36
26597: DOUBLE
26598: EQUAL
26599: IFTRUE 26603
26601: GO 26614
26603: POP
// places := 3 ; end ;
26604: LD_ADDR_VAR 0 3
26608: PUSH
26609: LD_INT 3
26611: ST_TO_ADDR
26612: GO 26615
26614: POP
// if places then
26615: LD_VAR 0 3
26619: IFFALSE 26642
// result := UnitsInside ( building ) < places ;
26621: LD_ADDR_VAR 0 2
26625: PUSH
26626: LD_VAR 0 1
26630: PPUSH
26631: CALL_OW 313
26635: PUSH
26636: LD_VAR 0 3
26640: LESS
26641: ST_TO_ADDR
// end ;
26642: LD_VAR 0 2
26646: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26647: LD_INT 0
26649: PPUSH
26650: PPUSH
26651: PPUSH
26652: PPUSH
// tmp := [ ] ;
26653: LD_ADDR_VAR 0 3
26657: PUSH
26658: EMPTY
26659: ST_TO_ADDR
// list := [ ] ;
26660: LD_ADDR_VAR 0 5
26664: PUSH
26665: EMPTY
26666: ST_TO_ADDR
// for i = 16 to 25 do
26667: LD_ADDR_VAR 0 4
26671: PUSH
26672: DOUBLE
26673: LD_INT 16
26675: DEC
26676: ST_TO_ADDR
26677: LD_INT 25
26679: PUSH
26680: FOR_TO
26681: IFFALSE 26754
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26683: LD_ADDR_VAR 0 3
26687: PUSH
26688: LD_VAR 0 3
26692: PUSH
26693: LD_INT 22
26695: PUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 255
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 91
26712: PUSH
26713: LD_VAR 0 1
26717: PUSH
26718: LD_INT 6
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 30
26728: PUSH
26729: LD_VAR 0 4
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: PUSH
26743: EMPTY
26744: LIST
26745: PPUSH
26746: CALL_OW 69
26750: ADD
26751: ST_TO_ADDR
26752: GO 26680
26754: POP
26755: POP
// for i = 1 to tmp do
26756: LD_ADDR_VAR 0 4
26760: PUSH
26761: DOUBLE
26762: LD_INT 1
26764: DEC
26765: ST_TO_ADDR
26766: LD_VAR 0 3
26770: PUSH
26771: FOR_TO
26772: IFFALSE 26860
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26774: LD_ADDR_VAR 0 5
26778: PUSH
26779: LD_VAR 0 5
26783: PUSH
26784: LD_VAR 0 3
26788: PUSH
26789: LD_VAR 0 4
26793: ARRAY
26794: PPUSH
26795: CALL_OW 266
26799: PUSH
26800: LD_VAR 0 3
26804: PUSH
26805: LD_VAR 0 4
26809: ARRAY
26810: PPUSH
26811: CALL_OW 250
26815: PUSH
26816: LD_VAR 0 3
26820: PUSH
26821: LD_VAR 0 4
26825: ARRAY
26826: PPUSH
26827: CALL_OW 251
26831: PUSH
26832: LD_VAR 0 3
26836: PUSH
26837: LD_VAR 0 4
26841: ARRAY
26842: PPUSH
26843: CALL_OW 254
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: ADD
26857: ST_TO_ADDR
26858: GO 26771
26860: POP
26861: POP
// result := list ;
26862: LD_ADDR_VAR 0 2
26866: PUSH
26867: LD_VAR 0 5
26871: ST_TO_ADDR
// end ;
26872: LD_VAR 0 2
26876: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26877: LD_INT 0
26879: PPUSH
26880: PPUSH
26881: PPUSH
26882: PPUSH
26883: PPUSH
26884: PPUSH
26885: PPUSH
// if not factory then
26886: LD_VAR 0 1
26890: NOT
26891: IFFALSE 26895
// exit ;
26893: GO 27488
// if control = control_apeman then
26895: LD_VAR 0 4
26899: PUSH
26900: LD_INT 5
26902: EQUAL
26903: IFFALSE 27012
// begin tmp := UnitsInside ( factory ) ;
26905: LD_ADDR_VAR 0 8
26909: PUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: CALL_OW 313
26919: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26920: LD_VAR 0 8
26924: PPUSH
26925: LD_INT 25
26927: PUSH
26928: LD_INT 12
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PPUSH
26935: CALL_OW 72
26939: NOT
26940: IFFALSE 26950
// control := control_manual ;
26942: LD_ADDR_VAR 0 4
26946: PUSH
26947: LD_INT 1
26949: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26950: LD_ADDR_VAR 0 8
26954: PUSH
26955: LD_VAR 0 1
26959: PPUSH
26960: CALL 26647 0 1
26964: ST_TO_ADDR
// if tmp then
26965: LD_VAR 0 8
26969: IFFALSE 27012
// begin for i in tmp do
26971: LD_ADDR_VAR 0 7
26975: PUSH
26976: LD_VAR 0 8
26980: PUSH
26981: FOR_IN
26982: IFFALSE 27010
// if i [ 1 ] = b_ext_radio then
26984: LD_VAR 0 7
26988: PUSH
26989: LD_INT 1
26991: ARRAY
26992: PUSH
26993: LD_INT 22
26995: EQUAL
26996: IFFALSE 27008
// begin control := control_remote ;
26998: LD_ADDR_VAR 0 4
27002: PUSH
27003: LD_INT 2
27005: ST_TO_ADDR
// break ;
27006: GO 27010
// end ;
27008: GO 26981
27010: POP
27011: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27012: LD_VAR 0 1
27016: PPUSH
27017: LD_VAR 0 2
27021: PPUSH
27022: LD_VAR 0 3
27026: PPUSH
27027: LD_VAR 0 4
27031: PPUSH
27032: LD_VAR 0 5
27036: PPUSH
27037: CALL_OW 448
27041: IFFALSE 27076
// begin result := [ chassis , engine , control , weapon ] ;
27043: LD_ADDR_VAR 0 6
27047: PUSH
27048: LD_VAR 0 2
27052: PUSH
27053: LD_VAR 0 3
27057: PUSH
27058: LD_VAR 0 4
27062: PUSH
27063: LD_VAR 0 5
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: ST_TO_ADDR
// exit ;
27074: GO 27488
// end ; _chassis := AvailableChassisList ( factory ) ;
27076: LD_ADDR_VAR 0 9
27080: PUSH
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 475
27090: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27091: LD_ADDR_VAR 0 11
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: CALL_OW 476
27105: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27106: LD_ADDR_VAR 0 12
27110: PUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 477
27120: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27121: LD_ADDR_VAR 0 10
27125: PUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 478
27135: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27136: LD_VAR 0 9
27140: NOT
27141: PUSH
27142: LD_VAR 0 11
27146: NOT
27147: OR
27148: PUSH
27149: LD_VAR 0 12
27153: NOT
27154: OR
27155: PUSH
27156: LD_VAR 0 10
27160: NOT
27161: OR
27162: IFFALSE 27197
// begin result := [ chassis , engine , control , weapon ] ;
27164: LD_ADDR_VAR 0 6
27168: PUSH
27169: LD_VAR 0 2
27173: PUSH
27174: LD_VAR 0 3
27178: PUSH
27179: LD_VAR 0 4
27183: PUSH
27184: LD_VAR 0 5
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: ST_TO_ADDR
// exit ;
27195: GO 27488
// end ; if not chassis in _chassis then
27197: LD_VAR 0 2
27201: PUSH
27202: LD_VAR 0 9
27206: IN
27207: NOT
27208: IFFALSE 27234
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27210: LD_ADDR_VAR 0 2
27214: PUSH
27215: LD_VAR 0 9
27219: PUSH
27220: LD_INT 1
27222: PPUSH
27223: LD_VAR 0 9
27227: PPUSH
27228: CALL_OW 12
27232: ARRAY
27233: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27234: LD_VAR 0 2
27238: PPUSH
27239: LD_VAR 0 3
27243: PPUSH
27244: CALL 27493 0 2
27248: NOT
27249: IFFALSE 27308
// repeat engine := _engine [ 1 ] ;
27251: LD_ADDR_VAR 0 3
27255: PUSH
27256: LD_VAR 0 11
27260: PUSH
27261: LD_INT 1
27263: ARRAY
27264: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27265: LD_ADDR_VAR 0 11
27269: PUSH
27270: LD_VAR 0 11
27274: PPUSH
27275: LD_INT 1
27277: PPUSH
27278: CALL_OW 3
27282: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27283: LD_VAR 0 2
27287: PPUSH
27288: LD_VAR 0 3
27292: PPUSH
27293: CALL 27493 0 2
27297: PUSH
27298: LD_VAR 0 11
27302: PUSH
27303: EMPTY
27304: EQUAL
27305: OR
27306: IFFALSE 27251
// if not control in _control then
27308: LD_VAR 0 4
27312: PUSH
27313: LD_VAR 0 12
27317: IN
27318: NOT
27319: IFFALSE 27345
// control := _control [ rand ( 1 , _control ) ] ;
27321: LD_ADDR_VAR 0 4
27325: PUSH
27326: LD_VAR 0 12
27330: PUSH
27331: LD_INT 1
27333: PPUSH
27334: LD_VAR 0 12
27338: PPUSH
27339: CALL_OW 12
27343: ARRAY
27344: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27345: LD_VAR 0 2
27349: PPUSH
27350: LD_VAR 0 5
27354: PPUSH
27355: CALL 27713 0 2
27359: NOT
27360: IFFALSE 27419
// repeat weapon := _weapon [ 1 ] ;
27362: LD_ADDR_VAR 0 5
27366: PUSH
27367: LD_VAR 0 10
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27376: LD_ADDR_VAR 0 10
27380: PUSH
27381: LD_VAR 0 10
27385: PPUSH
27386: LD_INT 1
27388: PPUSH
27389: CALL_OW 3
27393: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27394: LD_VAR 0 2
27398: PPUSH
27399: LD_VAR 0 5
27403: PPUSH
27404: CALL 27713 0 2
27408: PUSH
27409: LD_VAR 0 10
27413: PUSH
27414: EMPTY
27415: EQUAL
27416: OR
27417: IFFALSE 27362
// result := [ ] ;
27419: LD_ADDR_VAR 0 6
27423: PUSH
27424: EMPTY
27425: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27426: LD_VAR 0 1
27430: PPUSH
27431: LD_VAR 0 2
27435: PPUSH
27436: LD_VAR 0 3
27440: PPUSH
27441: LD_VAR 0 4
27445: PPUSH
27446: LD_VAR 0 5
27450: PPUSH
27451: CALL_OW 448
27455: IFFALSE 27488
// result := [ chassis , engine , control , weapon ] ;
27457: LD_ADDR_VAR 0 6
27461: PUSH
27462: LD_VAR 0 2
27466: PUSH
27467: LD_VAR 0 3
27471: PUSH
27472: LD_VAR 0 4
27476: PUSH
27477: LD_VAR 0 5
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// end ;
27488: LD_VAR 0 6
27492: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27493: LD_INT 0
27495: PPUSH
// if not chassis or not engine then
27496: LD_VAR 0 1
27500: NOT
27501: PUSH
27502: LD_VAR 0 2
27506: NOT
27507: OR
27508: IFFALSE 27512
// exit ;
27510: GO 27708
// case engine of engine_solar :
27512: LD_VAR 0 2
27516: PUSH
27517: LD_INT 2
27519: DOUBLE
27520: EQUAL
27521: IFTRUE 27525
27523: GO 27563
27525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27526: LD_ADDR_VAR 0 3
27530: PUSH
27531: LD_INT 11
27533: PUSH
27534: LD_INT 12
27536: PUSH
27537: LD_INT 13
27539: PUSH
27540: LD_INT 14
27542: PUSH
27543: LD_INT 1
27545: PUSH
27546: LD_INT 2
27548: PUSH
27549: LD_INT 3
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: ST_TO_ADDR
27561: GO 27692
27563: LD_INT 1
27565: DOUBLE
27566: EQUAL
27567: IFTRUE 27571
27569: GO 27633
27571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27572: LD_ADDR_VAR 0 3
27576: PUSH
27577: LD_INT 11
27579: PUSH
27580: LD_INT 12
27582: PUSH
27583: LD_INT 13
27585: PUSH
27586: LD_INT 14
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: LD_INT 3
27597: PUSH
27598: LD_INT 4
27600: PUSH
27601: LD_INT 5
27603: PUSH
27604: LD_INT 21
27606: PUSH
27607: LD_INT 23
27609: PUSH
27610: LD_INT 22
27612: PUSH
27613: LD_INT 24
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: ST_TO_ADDR
27631: GO 27692
27633: LD_INT 3
27635: DOUBLE
27636: EQUAL
27637: IFTRUE 27641
27639: GO 27691
27641: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27642: LD_ADDR_VAR 0 3
27646: PUSH
27647: LD_INT 13
27649: PUSH
27650: LD_INT 14
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: LD_INT 4
27661: PUSH
27662: LD_INT 5
27664: PUSH
27665: LD_INT 21
27667: PUSH
27668: LD_INT 22
27670: PUSH
27671: LD_INT 23
27673: PUSH
27674: LD_INT 24
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
27689: GO 27692
27691: POP
// result := ( chassis in result ) ;
27692: LD_ADDR_VAR 0 3
27696: PUSH
27697: LD_VAR 0 1
27701: PUSH
27702: LD_VAR 0 3
27706: IN
27707: ST_TO_ADDR
// end ;
27708: LD_VAR 0 3
27712: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27713: LD_INT 0
27715: PPUSH
// if not chassis or not weapon then
27716: LD_VAR 0 1
27720: NOT
27721: PUSH
27722: LD_VAR 0 2
27726: NOT
27727: OR
27728: IFFALSE 27732
// exit ;
27730: GO 28794
// case weapon of us_machine_gun :
27732: LD_VAR 0 2
27736: PUSH
27737: LD_INT 2
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27775
27745: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: LD_INT 2
27756: PUSH
27757: LD_INT 3
27759: PUSH
27760: LD_INT 4
27762: PUSH
27763: LD_INT 5
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: ST_TO_ADDR
27773: GO 28778
27775: LD_INT 3
27777: DOUBLE
27778: EQUAL
27779: IFTRUE 27783
27781: GO 27813
27783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27784: LD_ADDR_VAR 0 3
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: LD_INT 4
27800: PUSH
27801: LD_INT 5
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: ST_TO_ADDR
27811: GO 28778
27813: LD_INT 11
27815: DOUBLE
27816: EQUAL
27817: IFTRUE 27821
27819: GO 27851
27821: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27822: LD_ADDR_VAR 0 3
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: LD_INT 3
27835: PUSH
27836: LD_INT 4
27838: PUSH
27839: LD_INT 5
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: ST_TO_ADDR
27849: GO 28778
27851: LD_INT 4
27853: DOUBLE
27854: EQUAL
27855: IFTRUE 27859
27857: GO 27885
27859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27860: LD_ADDR_VAR 0 3
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 3
27870: PUSH
27871: LD_INT 4
27873: PUSH
27874: LD_INT 5
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: ST_TO_ADDR
27883: GO 28778
27885: LD_INT 5
27887: DOUBLE
27888: EQUAL
27889: IFTRUE 27893
27891: GO 27919
27893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27894: LD_ADDR_VAR 0 3
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: LD_INT 3
27904: PUSH
27905: LD_INT 4
27907: PUSH
27908: LD_INT 5
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
27917: GO 28778
27919: LD_INT 9
27921: DOUBLE
27922: EQUAL
27923: IFTRUE 27927
27925: GO 27953
27927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27928: LD_ADDR_VAR 0 3
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: LD_INT 3
27938: PUSH
27939: LD_INT 4
27941: PUSH
27942: LD_INT 5
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
27951: GO 28778
27953: LD_INT 7
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27961
27959: GO 27987
27961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27962: LD_ADDR_VAR 0 3
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: LD_INT 3
27972: PUSH
27973: LD_INT 4
27975: PUSH
27976: LD_INT 5
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: ST_TO_ADDR
27985: GO 28778
27987: LD_INT 12
27989: DOUBLE
27990: EQUAL
27991: IFTRUE 27995
27993: GO 28021
27995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27996: LD_ADDR_VAR 0 3
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: LD_INT 3
28006: PUSH
28007: LD_INT 4
28009: PUSH
28010: LD_INT 5
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: ST_TO_ADDR
28019: GO 28778
28021: LD_INT 13
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28029
28027: GO 28055
28029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28030: LD_ADDR_VAR 0 3
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 3
28040: PUSH
28041: LD_INT 4
28043: PUSH
28044: LD_INT 5
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: ST_TO_ADDR
28053: GO 28778
28055: LD_INT 14
28057: DOUBLE
28058: EQUAL
28059: IFTRUE 28063
28061: GO 28081
28063: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: LD_INT 4
28071: PUSH
28072: LD_INT 5
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: ST_TO_ADDR
28079: GO 28778
28081: LD_INT 6
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28107
28089: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_INT 4
28097: PUSH
28098: LD_INT 5
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: ST_TO_ADDR
28105: GO 28778
28107: LD_INT 10
28109: DOUBLE
28110: EQUAL
28111: IFTRUE 28115
28113: GO 28133
28115: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28116: LD_ADDR_VAR 0 3
28120: PUSH
28121: LD_INT 4
28123: PUSH
28124: LD_INT 5
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: ST_TO_ADDR
28131: GO 28778
28133: LD_INT 22
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28167
28141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: LD_INT 11
28149: PUSH
28150: LD_INT 12
28152: PUSH
28153: LD_INT 13
28155: PUSH
28156: LD_INT 14
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
28165: GO 28778
28167: LD_INT 23
28169: DOUBLE
28170: EQUAL
28171: IFTRUE 28175
28173: GO 28201
28175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28176: LD_ADDR_VAR 0 3
28180: PUSH
28181: LD_INT 11
28183: PUSH
28184: LD_INT 12
28186: PUSH
28187: LD_INT 13
28189: PUSH
28190: LD_INT 14
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
28199: GO 28778
28201: LD_INT 24
28203: DOUBLE
28204: EQUAL
28205: IFTRUE 28209
28207: GO 28235
28209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28210: LD_ADDR_VAR 0 3
28214: PUSH
28215: LD_INT 11
28217: PUSH
28218: LD_INT 12
28220: PUSH
28221: LD_INT 13
28223: PUSH
28224: LD_INT 14
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: ST_TO_ADDR
28233: GO 28778
28235: LD_INT 30
28237: DOUBLE
28238: EQUAL
28239: IFTRUE 28243
28241: GO 28269
28243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28244: LD_ADDR_VAR 0 3
28248: PUSH
28249: LD_INT 11
28251: PUSH
28252: LD_INT 12
28254: PUSH
28255: LD_INT 13
28257: PUSH
28258: LD_INT 14
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: ST_TO_ADDR
28267: GO 28778
28269: LD_INT 25
28271: DOUBLE
28272: EQUAL
28273: IFTRUE 28277
28275: GO 28295
28277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28278: LD_ADDR_VAR 0 3
28282: PUSH
28283: LD_INT 13
28285: PUSH
28286: LD_INT 14
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: ST_TO_ADDR
28293: GO 28778
28295: LD_INT 27
28297: DOUBLE
28298: EQUAL
28299: IFTRUE 28303
28301: GO 28321
28303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_INT 13
28311: PUSH
28312: LD_INT 14
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: ST_TO_ADDR
28319: GO 28778
28321: LD_EXP 44
28325: DOUBLE
28326: EQUAL
28327: IFTRUE 28331
28329: GO 28357
28331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28332: LD_ADDR_VAR 0 3
28336: PUSH
28337: LD_INT 11
28339: PUSH
28340: LD_INT 12
28342: PUSH
28343: LD_INT 13
28345: PUSH
28346: LD_INT 14
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: ST_TO_ADDR
28355: GO 28778
28357: LD_INT 28
28359: DOUBLE
28360: EQUAL
28361: IFTRUE 28365
28363: GO 28383
28365: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28366: LD_ADDR_VAR 0 3
28370: PUSH
28371: LD_INT 13
28373: PUSH
28374: LD_INT 14
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: ST_TO_ADDR
28381: GO 28778
28383: LD_INT 29
28385: DOUBLE
28386: EQUAL
28387: IFTRUE 28391
28389: GO 28409
28391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28392: LD_ADDR_VAR 0 3
28396: PUSH
28397: LD_INT 13
28399: PUSH
28400: LD_INT 14
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: ST_TO_ADDR
28407: GO 28778
28409: LD_INT 31
28411: DOUBLE
28412: EQUAL
28413: IFTRUE 28417
28415: GO 28435
28417: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28418: LD_ADDR_VAR 0 3
28422: PUSH
28423: LD_INT 13
28425: PUSH
28426: LD_INT 14
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: ST_TO_ADDR
28433: GO 28778
28435: LD_INT 26
28437: DOUBLE
28438: EQUAL
28439: IFTRUE 28443
28441: GO 28461
28443: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28444: LD_ADDR_VAR 0 3
28448: PUSH
28449: LD_INT 13
28451: PUSH
28452: LD_INT 14
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: ST_TO_ADDR
28459: GO 28778
28461: LD_INT 42
28463: DOUBLE
28464: EQUAL
28465: IFTRUE 28469
28467: GO 28495
28469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28470: LD_ADDR_VAR 0 3
28474: PUSH
28475: LD_INT 21
28477: PUSH
28478: LD_INT 22
28480: PUSH
28481: LD_INT 23
28483: PUSH
28484: LD_INT 24
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: ST_TO_ADDR
28493: GO 28778
28495: LD_INT 43
28497: DOUBLE
28498: EQUAL
28499: IFTRUE 28503
28501: GO 28529
28503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28504: LD_ADDR_VAR 0 3
28508: PUSH
28509: LD_INT 21
28511: PUSH
28512: LD_INT 22
28514: PUSH
28515: LD_INT 23
28517: PUSH
28518: LD_INT 24
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: ST_TO_ADDR
28527: GO 28778
28529: LD_INT 44
28531: DOUBLE
28532: EQUAL
28533: IFTRUE 28537
28535: GO 28563
28537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28538: LD_ADDR_VAR 0 3
28542: PUSH
28543: LD_INT 21
28545: PUSH
28546: LD_INT 22
28548: PUSH
28549: LD_INT 23
28551: PUSH
28552: LD_INT 24
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
28561: GO 28778
28563: LD_INT 45
28565: DOUBLE
28566: EQUAL
28567: IFTRUE 28571
28569: GO 28597
28571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28572: LD_ADDR_VAR 0 3
28576: PUSH
28577: LD_INT 21
28579: PUSH
28580: LD_INT 22
28582: PUSH
28583: LD_INT 23
28585: PUSH
28586: LD_INT 24
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: ST_TO_ADDR
28595: GO 28778
28597: LD_INT 49
28599: DOUBLE
28600: EQUAL
28601: IFTRUE 28605
28603: GO 28631
28605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28606: LD_ADDR_VAR 0 3
28610: PUSH
28611: LD_INT 21
28613: PUSH
28614: LD_INT 22
28616: PUSH
28617: LD_INT 23
28619: PUSH
28620: LD_INT 24
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: ST_TO_ADDR
28629: GO 28778
28631: LD_INT 51
28633: DOUBLE
28634: EQUAL
28635: IFTRUE 28639
28637: GO 28665
28639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: LD_INT 21
28647: PUSH
28648: LD_INT 22
28650: PUSH
28651: LD_INT 23
28653: PUSH
28654: LD_INT 24
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: ST_TO_ADDR
28663: GO 28778
28665: LD_INT 52
28667: DOUBLE
28668: EQUAL
28669: IFTRUE 28673
28671: GO 28699
28673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28674: LD_ADDR_VAR 0 3
28678: PUSH
28679: LD_INT 21
28681: PUSH
28682: LD_INT 22
28684: PUSH
28685: LD_INT 23
28687: PUSH
28688: LD_INT 24
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: ST_TO_ADDR
28697: GO 28778
28699: LD_INT 53
28701: DOUBLE
28702: EQUAL
28703: IFTRUE 28707
28705: GO 28725
28707: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28708: LD_ADDR_VAR 0 3
28712: PUSH
28713: LD_INT 23
28715: PUSH
28716: LD_INT 24
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: ST_TO_ADDR
28723: GO 28778
28725: LD_INT 46
28727: DOUBLE
28728: EQUAL
28729: IFTRUE 28733
28731: GO 28751
28733: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28734: LD_ADDR_VAR 0 3
28738: PUSH
28739: LD_INT 23
28741: PUSH
28742: LD_INT 24
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: ST_TO_ADDR
28749: GO 28778
28751: LD_INT 47
28753: DOUBLE
28754: EQUAL
28755: IFTRUE 28759
28757: GO 28777
28759: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28760: LD_ADDR_VAR 0 3
28764: PUSH
28765: LD_INT 23
28767: PUSH
28768: LD_INT 24
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: ST_TO_ADDR
28775: GO 28778
28777: POP
// result := ( chassis in result ) ;
28778: LD_ADDR_VAR 0 3
28782: PUSH
28783: LD_VAR 0 1
28787: PUSH
28788: LD_VAR 0 3
28792: IN
28793: ST_TO_ADDR
// end ;
28794: LD_VAR 0 3
28798: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28799: LD_INT 0
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
// result := array ;
28808: LD_ADDR_VAR 0 5
28812: PUSH
28813: LD_VAR 0 1
28817: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28818: LD_VAR 0 1
28822: NOT
28823: PUSH
28824: LD_VAR 0 2
28828: NOT
28829: OR
28830: PUSH
28831: LD_VAR 0 3
28835: NOT
28836: OR
28837: PUSH
28838: LD_VAR 0 2
28842: PUSH
28843: LD_VAR 0 1
28847: GREATER
28848: OR
28849: PUSH
28850: LD_VAR 0 3
28854: PUSH
28855: LD_VAR 0 1
28859: GREATER
28860: OR
28861: IFFALSE 28865
// exit ;
28863: GO 29161
// if direction then
28865: LD_VAR 0 4
28869: IFFALSE 28933
// begin d := 1 ;
28871: LD_ADDR_VAR 0 9
28875: PUSH
28876: LD_INT 1
28878: ST_TO_ADDR
// if i_from > i_to then
28879: LD_VAR 0 2
28883: PUSH
28884: LD_VAR 0 3
28888: GREATER
28889: IFFALSE 28915
// length := ( array - i_from ) + i_to else
28891: LD_ADDR_VAR 0 11
28895: PUSH
28896: LD_VAR 0 1
28900: PUSH
28901: LD_VAR 0 2
28905: MINUS
28906: PUSH
28907: LD_VAR 0 3
28911: PLUS
28912: ST_TO_ADDR
28913: GO 28931
// length := i_to - i_from ;
28915: LD_ADDR_VAR 0 11
28919: PUSH
28920: LD_VAR 0 3
28924: PUSH
28925: LD_VAR 0 2
28929: MINUS
28930: ST_TO_ADDR
// end else
28931: GO 28994
// begin d := - 1 ;
28933: LD_ADDR_VAR 0 9
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: ST_TO_ADDR
// if i_from > i_to then
28942: LD_VAR 0 2
28946: PUSH
28947: LD_VAR 0 3
28951: GREATER
28952: IFFALSE 28972
// length := i_from - i_to else
28954: LD_ADDR_VAR 0 11
28958: PUSH
28959: LD_VAR 0 2
28963: PUSH
28964: LD_VAR 0 3
28968: MINUS
28969: ST_TO_ADDR
28970: GO 28994
// length := ( array - i_to ) + i_from ;
28972: LD_ADDR_VAR 0 11
28976: PUSH
28977: LD_VAR 0 1
28981: PUSH
28982: LD_VAR 0 3
28986: MINUS
28987: PUSH
28988: LD_VAR 0 2
28992: PLUS
28993: ST_TO_ADDR
// end ; if not length then
28994: LD_VAR 0 11
28998: NOT
28999: IFFALSE 29003
// exit ;
29001: GO 29161
// tmp := array ;
29003: LD_ADDR_VAR 0 10
29007: PUSH
29008: LD_VAR 0 1
29012: ST_TO_ADDR
// for i = 1 to length do
29013: LD_ADDR_VAR 0 6
29017: PUSH
29018: DOUBLE
29019: LD_INT 1
29021: DEC
29022: ST_TO_ADDR
29023: LD_VAR 0 11
29027: PUSH
29028: FOR_TO
29029: IFFALSE 29149
// begin for j = 1 to array do
29031: LD_ADDR_VAR 0 7
29035: PUSH
29036: DOUBLE
29037: LD_INT 1
29039: DEC
29040: ST_TO_ADDR
29041: LD_VAR 0 1
29045: PUSH
29046: FOR_TO
29047: IFFALSE 29135
// begin k := j + d ;
29049: LD_ADDR_VAR 0 8
29053: PUSH
29054: LD_VAR 0 7
29058: PUSH
29059: LD_VAR 0 9
29063: PLUS
29064: ST_TO_ADDR
// if k > array then
29065: LD_VAR 0 8
29069: PUSH
29070: LD_VAR 0 1
29074: GREATER
29075: IFFALSE 29085
// k := 1 ;
29077: LD_ADDR_VAR 0 8
29081: PUSH
29082: LD_INT 1
29084: ST_TO_ADDR
// if not k then
29085: LD_VAR 0 8
29089: NOT
29090: IFFALSE 29102
// k := array ;
29092: LD_ADDR_VAR 0 8
29096: PUSH
29097: LD_VAR 0 1
29101: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29102: LD_ADDR_VAR 0 10
29106: PUSH
29107: LD_VAR 0 10
29111: PPUSH
29112: LD_VAR 0 8
29116: PPUSH
29117: LD_VAR 0 1
29121: PUSH
29122: LD_VAR 0 7
29126: ARRAY
29127: PPUSH
29128: CALL_OW 1
29132: ST_TO_ADDR
// end ;
29133: GO 29046
29135: POP
29136: POP
// array := tmp ;
29137: LD_ADDR_VAR 0 1
29141: PUSH
29142: LD_VAR 0 10
29146: ST_TO_ADDR
// end ;
29147: GO 29028
29149: POP
29150: POP
// result := array ;
29151: LD_ADDR_VAR 0 5
29155: PUSH
29156: LD_VAR 0 1
29160: ST_TO_ADDR
// end ;
29161: LD_VAR 0 5
29165: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29166: LD_INT 0
29168: PPUSH
29169: PPUSH
// result := 0 ;
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_INT 0
29177: ST_TO_ADDR
// if not array or not value in array then
29178: LD_VAR 0 1
29182: NOT
29183: PUSH
29184: LD_VAR 0 2
29188: PUSH
29189: LD_VAR 0 1
29193: IN
29194: NOT
29195: OR
29196: IFFALSE 29200
// exit ;
29198: GO 29254
// for i = 1 to array do
29200: LD_ADDR_VAR 0 4
29204: PUSH
29205: DOUBLE
29206: LD_INT 1
29208: DEC
29209: ST_TO_ADDR
29210: LD_VAR 0 1
29214: PUSH
29215: FOR_TO
29216: IFFALSE 29252
// if value = array [ i ] then
29218: LD_VAR 0 2
29222: PUSH
29223: LD_VAR 0 1
29227: PUSH
29228: LD_VAR 0 4
29232: ARRAY
29233: EQUAL
29234: IFFALSE 29250
// begin result := i ;
29236: LD_ADDR_VAR 0 3
29240: PUSH
29241: LD_VAR 0 4
29245: ST_TO_ADDR
// exit ;
29246: POP
29247: POP
29248: GO 29254
// end ;
29250: GO 29215
29252: POP
29253: POP
// end ;
29254: LD_VAR 0 3
29258: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29259: LD_INT 0
29261: PPUSH
// vc_chassis := chassis ;
29262: LD_ADDR_OWVAR 37
29266: PUSH
29267: LD_VAR 0 1
29271: ST_TO_ADDR
// vc_engine := engine ;
29272: LD_ADDR_OWVAR 39
29276: PUSH
29277: LD_VAR 0 2
29281: ST_TO_ADDR
// vc_control := control ;
29282: LD_ADDR_OWVAR 38
29286: PUSH
29287: LD_VAR 0 3
29291: ST_TO_ADDR
// vc_weapon := weapon ;
29292: LD_ADDR_OWVAR 40
29296: PUSH
29297: LD_VAR 0 4
29301: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29302: LD_ADDR_OWVAR 41
29306: PUSH
29307: LD_VAR 0 5
29311: ST_TO_ADDR
// end ;
29312: LD_VAR 0 6
29316: RET
// export function WantPlant ( unit ) ; var task ; begin
29317: LD_INT 0
29319: PPUSH
29320: PPUSH
// result := false ;
29321: LD_ADDR_VAR 0 2
29325: PUSH
29326: LD_INT 0
29328: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 437
29343: ST_TO_ADDR
// if task then
29344: LD_VAR 0 3
29348: IFFALSE 29376
// if task [ 1 ] [ 1 ] = p then
29350: LD_VAR 0 3
29354: PUSH
29355: LD_INT 1
29357: ARRAY
29358: PUSH
29359: LD_INT 1
29361: ARRAY
29362: PUSH
29363: LD_STRING p
29365: EQUAL
29366: IFFALSE 29376
// result := true ;
29368: LD_ADDR_VAR 0 2
29372: PUSH
29373: LD_INT 1
29375: ST_TO_ADDR
// end ;
29376: LD_VAR 0 2
29380: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29381: LD_INT 0
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
// if pos < 1 then
29387: LD_VAR 0 2
29391: PUSH
29392: LD_INT 1
29394: LESS
29395: IFFALSE 29399
// exit ;
29397: GO 29702
// if pos = 1 then
29399: LD_VAR 0 2
29403: PUSH
29404: LD_INT 1
29406: EQUAL
29407: IFFALSE 29440
// result := Replace ( arr , pos [ 1 ] , value ) else
29409: LD_ADDR_VAR 0 4
29413: PUSH
29414: LD_VAR 0 1
29418: PPUSH
29419: LD_VAR 0 2
29423: PUSH
29424: LD_INT 1
29426: ARRAY
29427: PPUSH
29428: LD_VAR 0 3
29432: PPUSH
29433: CALL_OW 1
29437: ST_TO_ADDR
29438: GO 29702
// begin tmp := arr ;
29440: LD_ADDR_VAR 0 6
29444: PUSH
29445: LD_VAR 0 1
29449: ST_TO_ADDR
// s_arr := [ tmp ] ;
29450: LD_ADDR_VAR 0 7
29454: PUSH
29455: LD_VAR 0 6
29459: PUSH
29460: EMPTY
29461: LIST
29462: ST_TO_ADDR
// for i = 1 to pos - 1 do
29463: LD_ADDR_VAR 0 5
29467: PUSH
29468: DOUBLE
29469: LD_INT 1
29471: DEC
29472: ST_TO_ADDR
29473: LD_VAR 0 2
29477: PUSH
29478: LD_INT 1
29480: MINUS
29481: PUSH
29482: FOR_TO
29483: IFFALSE 29528
// begin tmp := tmp [ pos [ i ] ] ;
29485: LD_ADDR_VAR 0 6
29489: PUSH
29490: LD_VAR 0 6
29494: PUSH
29495: LD_VAR 0 2
29499: PUSH
29500: LD_VAR 0 5
29504: ARRAY
29505: ARRAY
29506: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29507: LD_ADDR_VAR 0 7
29511: PUSH
29512: LD_VAR 0 7
29516: PUSH
29517: LD_VAR 0 6
29521: PUSH
29522: EMPTY
29523: LIST
29524: ADD
29525: ST_TO_ADDR
// end ;
29526: GO 29482
29528: POP
29529: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29530: LD_ADDR_VAR 0 6
29534: PUSH
29535: LD_VAR 0 6
29539: PPUSH
29540: LD_VAR 0 2
29544: PUSH
29545: LD_VAR 0 2
29549: ARRAY
29550: PPUSH
29551: LD_VAR 0 3
29555: PPUSH
29556: CALL_OW 1
29560: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29561: LD_ADDR_VAR 0 7
29565: PUSH
29566: LD_VAR 0 7
29570: PPUSH
29571: LD_VAR 0 7
29575: PPUSH
29576: LD_VAR 0 6
29580: PPUSH
29581: CALL_OW 1
29585: ST_TO_ADDR
// for i = s_arr downto 2 do
29586: LD_ADDR_VAR 0 5
29590: PUSH
29591: DOUBLE
29592: LD_VAR 0 7
29596: INC
29597: ST_TO_ADDR
29598: LD_INT 2
29600: PUSH
29601: FOR_DOWNTO
29602: IFFALSE 29686
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29604: LD_ADDR_VAR 0 6
29608: PUSH
29609: LD_VAR 0 7
29613: PUSH
29614: LD_VAR 0 5
29618: PUSH
29619: LD_INT 1
29621: MINUS
29622: ARRAY
29623: PPUSH
29624: LD_VAR 0 2
29628: PUSH
29629: LD_VAR 0 5
29633: PUSH
29634: LD_INT 1
29636: MINUS
29637: ARRAY
29638: PPUSH
29639: LD_VAR 0 7
29643: PUSH
29644: LD_VAR 0 5
29648: ARRAY
29649: PPUSH
29650: CALL_OW 1
29654: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29655: LD_ADDR_VAR 0 7
29659: PUSH
29660: LD_VAR 0 7
29664: PPUSH
29665: LD_VAR 0 5
29669: PUSH
29670: LD_INT 1
29672: MINUS
29673: PPUSH
29674: LD_VAR 0 6
29678: PPUSH
29679: CALL_OW 1
29683: ST_TO_ADDR
// end ;
29684: GO 29601
29686: POP
29687: POP
// result := s_arr [ 1 ] ;
29688: LD_ADDR_VAR 0 4
29692: PUSH
29693: LD_VAR 0 7
29697: PUSH
29698: LD_INT 1
29700: ARRAY
29701: ST_TO_ADDR
// end ; end ;
29702: LD_VAR 0 4
29706: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
// if not list then
29711: LD_VAR 0 1
29715: NOT
29716: IFFALSE 29720
// exit ;
29718: GO 29811
// i := list [ pos1 ] ;
29720: LD_ADDR_VAR 0 5
29724: PUSH
29725: LD_VAR 0 1
29729: PUSH
29730: LD_VAR 0 2
29734: ARRAY
29735: ST_TO_ADDR
// if not i then
29736: LD_VAR 0 5
29740: NOT
29741: IFFALSE 29745
// exit ;
29743: GO 29811
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_VAR 0 1
29754: PPUSH
29755: LD_VAR 0 2
29759: PPUSH
29760: LD_VAR 0 1
29764: PUSH
29765: LD_VAR 0 3
29769: ARRAY
29770: PPUSH
29771: CALL_OW 1
29775: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29776: LD_ADDR_VAR 0 1
29780: PUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: LD_VAR 0 3
29790: PPUSH
29791: LD_VAR 0 5
29795: PPUSH
29796: CALL_OW 1
29800: ST_TO_ADDR
// result := list ;
29801: LD_ADDR_VAR 0 4
29805: PUSH
29806: LD_VAR 0 1
29810: ST_TO_ADDR
// end ;
29811: LD_VAR 0 4
29815: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29816: LD_INT 0
29818: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29819: LD_ADDR_VAR 0 5
29823: PUSH
29824: LD_VAR 0 1
29828: PPUSH
29829: CALL_OW 250
29833: PPUSH
29834: LD_VAR 0 1
29838: PPUSH
29839: CALL_OW 251
29843: PPUSH
29844: LD_VAR 0 2
29848: PPUSH
29849: LD_VAR 0 3
29853: PPUSH
29854: LD_VAR 0 4
29858: PPUSH
29859: CALL 29869 0 5
29863: ST_TO_ADDR
// end ;
29864: LD_VAR 0 5
29868: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29869: LD_INT 0
29871: PPUSH
29872: PPUSH
29873: PPUSH
29874: PPUSH
// if not list then
29875: LD_VAR 0 3
29879: NOT
29880: IFFALSE 29884
// exit ;
29882: GO 30272
// result := [ ] ;
29884: LD_ADDR_VAR 0 6
29888: PUSH
29889: EMPTY
29890: ST_TO_ADDR
// for i in list do
29891: LD_ADDR_VAR 0 7
29895: PUSH
29896: LD_VAR 0 3
29900: PUSH
29901: FOR_IN
29902: IFFALSE 30104
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29904: LD_ADDR_VAR 0 9
29908: PUSH
29909: LD_VAR 0 7
29913: PPUSH
29914: LD_VAR 0 1
29918: PPUSH
29919: LD_VAR 0 2
29923: PPUSH
29924: CALL_OW 297
29928: ST_TO_ADDR
// if not result then
29929: LD_VAR 0 6
29933: NOT
29934: IFFALSE 29960
// result := [ [ i , tmp ] ] else
29936: LD_ADDR_VAR 0 6
29940: PUSH
29941: LD_VAR 0 7
29945: PUSH
29946: LD_VAR 0 9
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: ST_TO_ADDR
29958: GO 30102
// begin if result [ result ] [ 2 ] < tmp then
29960: LD_VAR 0 6
29964: PUSH
29965: LD_VAR 0 6
29969: ARRAY
29970: PUSH
29971: LD_INT 2
29973: ARRAY
29974: PUSH
29975: LD_VAR 0 9
29979: LESS
29980: IFFALSE 30022
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29982: LD_ADDR_VAR 0 6
29986: PUSH
29987: LD_VAR 0 6
29991: PPUSH
29992: LD_VAR 0 6
29996: PUSH
29997: LD_INT 1
29999: PLUS
30000: PPUSH
30001: LD_VAR 0 7
30005: PUSH
30006: LD_VAR 0 9
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PPUSH
30015: CALL_OW 2
30019: ST_TO_ADDR
30020: GO 30102
// for j = 1 to result do
30022: LD_ADDR_VAR 0 8
30026: PUSH
30027: DOUBLE
30028: LD_INT 1
30030: DEC
30031: ST_TO_ADDR
30032: LD_VAR 0 6
30036: PUSH
30037: FOR_TO
30038: IFFALSE 30100
// begin if tmp < result [ j ] [ 2 ] then
30040: LD_VAR 0 9
30044: PUSH
30045: LD_VAR 0 6
30049: PUSH
30050: LD_VAR 0 8
30054: ARRAY
30055: PUSH
30056: LD_INT 2
30058: ARRAY
30059: LESS
30060: IFFALSE 30098
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30062: LD_ADDR_VAR 0 6
30066: PUSH
30067: LD_VAR 0 6
30071: PPUSH
30072: LD_VAR 0 8
30076: PPUSH
30077: LD_VAR 0 7
30081: PUSH
30082: LD_VAR 0 9
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PPUSH
30091: CALL_OW 2
30095: ST_TO_ADDR
// break ;
30096: GO 30100
// end ; end ;
30098: GO 30037
30100: POP
30101: POP
// end ; end ;
30102: GO 29901
30104: POP
30105: POP
// if result and not asc then
30106: LD_VAR 0 6
30110: PUSH
30111: LD_VAR 0 4
30115: NOT
30116: AND
30117: IFFALSE 30192
// begin tmp := result ;
30119: LD_ADDR_VAR 0 9
30123: PUSH
30124: LD_VAR 0 6
30128: ST_TO_ADDR
// for i = tmp downto 1 do
30129: LD_ADDR_VAR 0 7
30133: PUSH
30134: DOUBLE
30135: LD_VAR 0 9
30139: INC
30140: ST_TO_ADDR
30141: LD_INT 1
30143: PUSH
30144: FOR_DOWNTO
30145: IFFALSE 30190
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30147: LD_ADDR_VAR 0 6
30151: PUSH
30152: LD_VAR 0 6
30156: PPUSH
30157: LD_VAR 0 9
30161: PUSH
30162: LD_VAR 0 7
30166: MINUS
30167: PUSH
30168: LD_INT 1
30170: PLUS
30171: PPUSH
30172: LD_VAR 0 9
30176: PUSH
30177: LD_VAR 0 7
30181: ARRAY
30182: PPUSH
30183: CALL_OW 1
30187: ST_TO_ADDR
30188: GO 30144
30190: POP
30191: POP
// end ; tmp := [ ] ;
30192: LD_ADDR_VAR 0 9
30196: PUSH
30197: EMPTY
30198: ST_TO_ADDR
// if mode then
30199: LD_VAR 0 5
30203: IFFALSE 30272
// begin for i = 1 to result do
30205: LD_ADDR_VAR 0 7
30209: PUSH
30210: DOUBLE
30211: LD_INT 1
30213: DEC
30214: ST_TO_ADDR
30215: LD_VAR 0 6
30219: PUSH
30220: FOR_TO
30221: IFFALSE 30260
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30223: LD_ADDR_VAR 0 9
30227: PUSH
30228: LD_VAR 0 9
30232: PPUSH
30233: LD_VAR 0 7
30237: PPUSH
30238: LD_VAR 0 6
30242: PUSH
30243: LD_VAR 0 7
30247: ARRAY
30248: PUSH
30249: LD_INT 1
30251: ARRAY
30252: PPUSH
30253: CALL_OW 1
30257: ST_TO_ADDR
30258: GO 30220
30260: POP
30261: POP
// result := tmp ;
30262: LD_ADDR_VAR 0 6
30266: PUSH
30267: LD_VAR 0 9
30271: ST_TO_ADDR
// end ; end ;
30272: LD_VAR 0 6
30276: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30277: LD_INT 0
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30285: LD_ADDR_VAR 0 5
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: EMPTY
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: ST_TO_ADDR
// if not x or not y then
30307: LD_VAR 0 2
30311: NOT
30312: PUSH
30313: LD_VAR 0 3
30317: NOT
30318: OR
30319: IFFALSE 30323
// exit ;
30321: GO 31975
// if not range then
30323: LD_VAR 0 4
30327: NOT
30328: IFFALSE 30338
// range := 10 ;
30330: LD_ADDR_VAR 0 4
30334: PUSH
30335: LD_INT 10
30337: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30338: LD_ADDR_VAR 0 8
30342: PUSH
30343: LD_INT 81
30345: PUSH
30346: LD_VAR 0 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 92
30357: PUSH
30358: LD_VAR 0 2
30362: PUSH
30363: LD_VAR 0 3
30367: PUSH
30368: LD_VAR 0 4
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 3
30381: PUSH
30382: LD_INT 21
30384: PUSH
30385: LD_INT 3
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: PPUSH
30401: CALL_OW 69
30405: ST_TO_ADDR
// if not tmp then
30406: LD_VAR 0 8
30410: NOT
30411: IFFALSE 30415
// exit ;
30413: GO 31975
// for i in tmp do
30415: LD_ADDR_VAR 0 6
30419: PUSH
30420: LD_VAR 0 8
30424: PUSH
30425: FOR_IN
30426: IFFALSE 31950
// begin points := [ 0 , 0 , 0 ] ;
30428: LD_ADDR_VAR 0 9
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: ST_TO_ADDR
// bpoints := 1 ;
30447: LD_ADDR_VAR 0 10
30451: PUSH
30452: LD_INT 1
30454: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30455: LD_VAR 0 6
30459: PPUSH
30460: CALL_OW 247
30464: PUSH
30465: LD_INT 1
30467: DOUBLE
30468: EQUAL
30469: IFTRUE 30473
30471: GO 31051
30473: POP
// begin if GetClass ( i ) = 1 then
30474: LD_VAR 0 6
30478: PPUSH
30479: CALL_OW 257
30483: PUSH
30484: LD_INT 1
30486: EQUAL
30487: IFFALSE 30508
// points := [ 10 , 5 , 3 ] ;
30489: LD_ADDR_VAR 0 9
30493: PUSH
30494: LD_INT 10
30496: PUSH
30497: LD_INT 5
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30508: LD_VAR 0 6
30512: PPUSH
30513: CALL_OW 257
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: IN
30532: IFFALSE 30553
// points := [ 3 , 2 , 1 ] ;
30534: LD_ADDR_VAR 0 9
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30553: LD_VAR 0 6
30557: PPUSH
30558: CALL_OW 257
30562: PUSH
30563: LD_INT 5
30565: EQUAL
30566: IFFALSE 30587
// points := [ 130 , 5 , 2 ] ;
30568: LD_ADDR_VAR 0 9
30572: PUSH
30573: LD_INT 130
30575: PUSH
30576: LD_INT 5
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30587: LD_VAR 0 6
30591: PPUSH
30592: CALL_OW 257
30596: PUSH
30597: LD_INT 8
30599: EQUAL
30600: IFFALSE 30621
// points := [ 35 , 35 , 30 ] ;
30602: LD_ADDR_VAR 0 9
30606: PUSH
30607: LD_INT 35
30609: PUSH
30610: LD_INT 35
30612: PUSH
30613: LD_INT 30
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30621: LD_VAR 0 6
30625: PPUSH
30626: CALL_OW 257
30630: PUSH
30631: LD_INT 9
30633: EQUAL
30634: IFFALSE 30655
// points := [ 20 , 55 , 40 ] ;
30636: LD_ADDR_VAR 0 9
30640: PUSH
30641: LD_INT 20
30643: PUSH
30644: LD_INT 55
30646: PUSH
30647: LD_INT 40
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30655: LD_VAR 0 6
30659: PPUSH
30660: CALL_OW 257
30664: PUSH
30665: LD_INT 12
30667: PUSH
30668: LD_INT 16
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: IN
30675: IFFALSE 30696
// points := [ 5 , 3 , 2 ] ;
30677: LD_ADDR_VAR 0 9
30681: PUSH
30682: LD_INT 5
30684: PUSH
30685: LD_INT 3
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30696: LD_VAR 0 6
30700: PPUSH
30701: CALL_OW 257
30705: PUSH
30706: LD_INT 17
30708: EQUAL
30709: IFFALSE 30730
// points := [ 100 , 50 , 75 ] ;
30711: LD_ADDR_VAR 0 9
30715: PUSH
30716: LD_INT 100
30718: PUSH
30719: LD_INT 50
30721: PUSH
30722: LD_INT 75
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30730: LD_VAR 0 6
30734: PPUSH
30735: CALL_OW 257
30739: PUSH
30740: LD_INT 15
30742: EQUAL
30743: IFFALSE 30764
// points := [ 10 , 5 , 3 ] ;
30745: LD_ADDR_VAR 0 9
30749: PUSH
30750: LD_INT 10
30752: PUSH
30753: LD_INT 5
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30764: LD_VAR 0 6
30768: PPUSH
30769: CALL_OW 257
30773: PUSH
30774: LD_INT 14
30776: EQUAL
30777: IFFALSE 30798
// points := [ 10 , 0 , 0 ] ;
30779: LD_ADDR_VAR 0 9
30783: PUSH
30784: LD_INT 10
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: LIST
30797: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30798: LD_VAR 0 6
30802: PPUSH
30803: CALL_OW 257
30807: PUSH
30808: LD_INT 11
30810: EQUAL
30811: IFFALSE 30832
// points := [ 30 , 10 , 5 ] ;
30813: LD_ADDR_VAR 0 9
30817: PUSH
30818: LD_INT 30
30820: PUSH
30821: LD_INT 10
30823: PUSH
30824: LD_INT 5
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30832: LD_VAR 0 1
30836: PPUSH
30837: LD_INT 5
30839: PPUSH
30840: CALL_OW 321
30844: PUSH
30845: LD_INT 2
30847: EQUAL
30848: IFFALSE 30865
// bpoints := bpoints * 1.8 ;
30850: LD_ADDR_VAR 0 10
30854: PUSH
30855: LD_VAR 0 10
30859: PUSH
30860: LD_REAL  1.80000000000000E+0000
30863: MUL
30864: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30865: LD_VAR 0 6
30869: PPUSH
30870: CALL_OW 257
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 4
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: IN
30893: PUSH
30894: LD_VAR 0 1
30898: PPUSH
30899: LD_INT 51
30901: PPUSH
30902: CALL_OW 321
30906: PUSH
30907: LD_INT 2
30909: EQUAL
30910: AND
30911: IFFALSE 30928
// bpoints := bpoints * 1.2 ;
30913: LD_ADDR_VAR 0 10
30917: PUSH
30918: LD_VAR 0 10
30922: PUSH
30923: LD_REAL  1.20000000000000E+0000
30926: MUL
30927: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30928: LD_VAR 0 6
30932: PPUSH
30933: CALL_OW 257
30937: PUSH
30938: LD_INT 5
30940: PUSH
30941: LD_INT 7
30943: PUSH
30944: LD_INT 9
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: IN
30952: PUSH
30953: LD_VAR 0 1
30957: PPUSH
30958: LD_INT 52
30960: PPUSH
30961: CALL_OW 321
30965: PUSH
30966: LD_INT 2
30968: EQUAL
30969: AND
30970: IFFALSE 30987
// bpoints := bpoints * 1.5 ;
30972: LD_ADDR_VAR 0 10
30976: PUSH
30977: LD_VAR 0 10
30981: PUSH
30982: LD_REAL  1.50000000000000E+0000
30985: MUL
30986: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30987: LD_VAR 0 1
30991: PPUSH
30992: LD_INT 66
30994: PPUSH
30995: CALL_OW 321
30999: PUSH
31000: LD_INT 2
31002: EQUAL
31003: IFFALSE 31020
// bpoints := bpoints * 1.1 ;
31005: LD_ADDR_VAR 0 10
31009: PUSH
31010: LD_VAR 0 10
31014: PUSH
31015: LD_REAL  1.10000000000000E+0000
31018: MUL
31019: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31020: LD_ADDR_VAR 0 10
31024: PUSH
31025: LD_VAR 0 10
31029: PUSH
31030: LD_VAR 0 6
31034: PPUSH
31035: LD_INT 1
31037: PPUSH
31038: CALL_OW 259
31042: PUSH
31043: LD_REAL  1.15000000000000E+0000
31046: MUL
31047: MUL
31048: ST_TO_ADDR
// end ; unit_vehicle :
31049: GO 31879
31051: LD_INT 2
31053: DOUBLE
31054: EQUAL
31055: IFTRUE 31059
31057: GO 31867
31059: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31060: LD_VAR 0 6
31064: PPUSH
31065: CALL_OW 264
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: LD_INT 42
31075: PUSH
31076: LD_INT 24
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: IN
31084: IFFALSE 31105
// points := [ 25 , 5 , 3 ] ;
31086: LD_ADDR_VAR 0 9
31090: PUSH
31091: LD_INT 25
31093: PUSH
31094: LD_INT 5
31096: PUSH
31097: LD_INT 3
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31105: LD_VAR 0 6
31109: PPUSH
31110: CALL_OW 264
31114: PUSH
31115: LD_INT 4
31117: PUSH
31118: LD_INT 43
31120: PUSH
31121: LD_INT 25
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: IN
31129: IFFALSE 31150
// points := [ 40 , 15 , 5 ] ;
31131: LD_ADDR_VAR 0 9
31135: PUSH
31136: LD_INT 40
31138: PUSH
31139: LD_INT 15
31141: PUSH
31142: LD_INT 5
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31150: LD_VAR 0 6
31154: PPUSH
31155: CALL_OW 264
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: LD_INT 23
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: IN
31170: IFFALSE 31191
// points := [ 7 , 25 , 8 ] ;
31172: LD_ADDR_VAR 0 9
31176: PUSH
31177: LD_INT 7
31179: PUSH
31180: LD_INT 25
31182: PUSH
31183: LD_INT 8
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31191: LD_VAR 0 6
31195: PPUSH
31196: CALL_OW 264
31200: PUSH
31201: LD_INT 5
31203: PUSH
31204: LD_INT 27
31206: PUSH
31207: LD_INT 44
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: IN
31215: IFFALSE 31236
// points := [ 14 , 50 , 16 ] ;
31217: LD_ADDR_VAR 0 9
31221: PUSH
31222: LD_INT 14
31224: PUSH
31225: LD_INT 50
31227: PUSH
31228: LD_INT 16
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31236: LD_VAR 0 6
31240: PPUSH
31241: CALL_OW 264
31245: PUSH
31246: LD_INT 6
31248: PUSH
31249: LD_INT 46
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: IN
31256: IFFALSE 31277
// points := [ 32 , 120 , 70 ] ;
31258: LD_ADDR_VAR 0 9
31262: PUSH
31263: LD_INT 32
31265: PUSH
31266: LD_INT 120
31268: PUSH
31269: LD_INT 70
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31277: LD_VAR 0 6
31281: PPUSH
31282: CALL_OW 264
31286: PUSH
31287: LD_INT 7
31289: PUSH
31290: LD_INT 28
31292: PUSH
31293: LD_INT 45
31295: PUSH
31296: LD_EXP 44
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: IN
31307: IFFALSE 31328
// points := [ 35 , 20 , 45 ] ;
31309: LD_ADDR_VAR 0 9
31313: PUSH
31314: LD_INT 35
31316: PUSH
31317: LD_INT 20
31319: PUSH
31320: LD_INT 45
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31328: LD_VAR 0 6
31332: PPUSH
31333: CALL_OW 264
31337: PUSH
31338: LD_INT 47
31340: PUSH
31341: EMPTY
31342: LIST
31343: IN
31344: IFFALSE 31365
// points := [ 67 , 45 , 75 ] ;
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_INT 67
31353: PUSH
31354: LD_INT 45
31356: PUSH
31357: LD_INT 75
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31365: LD_VAR 0 6
31369: PPUSH
31370: CALL_OW 264
31374: PUSH
31375: LD_INT 26
31377: PUSH
31378: EMPTY
31379: LIST
31380: IN
31381: IFFALSE 31402
// points := [ 120 , 30 , 80 ] ;
31383: LD_ADDR_VAR 0 9
31387: PUSH
31388: LD_INT 120
31390: PUSH
31391: LD_INT 30
31393: PUSH
31394: LD_INT 80
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31402: LD_VAR 0 6
31406: PPUSH
31407: CALL_OW 264
31411: PUSH
31412: LD_INT 22
31414: PUSH
31415: EMPTY
31416: LIST
31417: IN
31418: IFFALSE 31439
// points := [ 40 , 1 , 1 ] ;
31420: LD_ADDR_VAR 0 9
31424: PUSH
31425: LD_INT 40
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31439: LD_VAR 0 6
31443: PPUSH
31444: CALL_OW 264
31448: PUSH
31449: LD_INT 29
31451: PUSH
31452: EMPTY
31453: LIST
31454: IN
31455: IFFALSE 31476
// points := [ 70 , 200 , 400 ] ;
31457: LD_ADDR_VAR 0 9
31461: PUSH
31462: LD_INT 70
31464: PUSH
31465: LD_INT 200
31467: PUSH
31468: LD_INT 400
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31476: LD_VAR 0 6
31480: PPUSH
31481: CALL_OW 264
31485: PUSH
31486: LD_INT 14
31488: PUSH
31489: LD_INT 53
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: IN
31496: IFFALSE 31517
// points := [ 40 , 10 , 20 ] ;
31498: LD_ADDR_VAR 0 9
31502: PUSH
31503: LD_INT 40
31505: PUSH
31506: LD_INT 10
31508: PUSH
31509: LD_INT 20
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31517: LD_VAR 0 6
31521: PPUSH
31522: CALL_OW 264
31526: PUSH
31527: LD_INT 9
31529: PUSH
31530: EMPTY
31531: LIST
31532: IN
31533: IFFALSE 31554
// points := [ 5 , 70 , 20 ] ;
31535: LD_ADDR_VAR 0 9
31539: PUSH
31540: LD_INT 5
31542: PUSH
31543: LD_INT 70
31545: PUSH
31546: LD_INT 20
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: LIST
31553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31554: LD_VAR 0 6
31558: PPUSH
31559: CALL_OW 264
31563: PUSH
31564: LD_INT 10
31566: PUSH
31567: EMPTY
31568: LIST
31569: IN
31570: IFFALSE 31591
// points := [ 35 , 110 , 70 ] ;
31572: LD_ADDR_VAR 0 9
31576: PUSH
31577: LD_INT 35
31579: PUSH
31580: LD_INT 110
31582: PUSH
31583: LD_INT 70
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31591: LD_VAR 0 6
31595: PPUSH
31596: CALL_OW 265
31600: PUSH
31601: LD_INT 25
31603: EQUAL
31604: IFFALSE 31625
// points := [ 80 , 65 , 100 ] ;
31606: LD_ADDR_VAR 0 9
31610: PUSH
31611: LD_INT 80
31613: PUSH
31614: LD_INT 65
31616: PUSH
31617: LD_INT 100
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31625: LD_VAR 0 6
31629: PPUSH
31630: CALL_OW 263
31634: PUSH
31635: LD_INT 1
31637: EQUAL
31638: IFFALSE 31673
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31640: LD_ADDR_VAR 0 10
31644: PUSH
31645: LD_VAR 0 10
31649: PUSH
31650: LD_VAR 0 6
31654: PPUSH
31655: CALL_OW 311
31659: PPUSH
31660: LD_INT 3
31662: PPUSH
31663: CALL_OW 259
31667: PUSH
31668: LD_INT 4
31670: MUL
31671: MUL
31672: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31673: LD_VAR 0 6
31677: PPUSH
31678: CALL_OW 263
31682: PUSH
31683: LD_INT 2
31685: EQUAL
31686: IFFALSE 31737
// begin j := IsControledBy ( i ) ;
31688: LD_ADDR_VAR 0 7
31692: PUSH
31693: LD_VAR 0 6
31697: PPUSH
31698: CALL_OW 312
31702: ST_TO_ADDR
// if j then
31703: LD_VAR 0 7
31707: IFFALSE 31737
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31709: LD_ADDR_VAR 0 10
31713: PUSH
31714: LD_VAR 0 10
31718: PUSH
31719: LD_VAR 0 7
31723: PPUSH
31724: LD_INT 3
31726: PPUSH
31727: CALL_OW 259
31731: PUSH
31732: LD_INT 3
31734: MUL
31735: MUL
31736: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31737: LD_VAR 0 6
31741: PPUSH
31742: CALL_OW 264
31746: PUSH
31747: LD_INT 5
31749: PUSH
31750: LD_INT 6
31752: PUSH
31753: LD_INT 46
31755: PUSH
31756: LD_INT 44
31758: PUSH
31759: LD_INT 47
31761: PUSH
31762: LD_INT 45
31764: PUSH
31765: LD_INT 28
31767: PUSH
31768: LD_INT 7
31770: PUSH
31771: LD_INT 27
31773: PUSH
31774: LD_INT 29
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: IN
31789: PUSH
31790: LD_VAR 0 1
31794: PPUSH
31795: LD_INT 52
31797: PPUSH
31798: CALL_OW 321
31802: PUSH
31803: LD_INT 2
31805: EQUAL
31806: AND
31807: IFFALSE 31824
// bpoints := bpoints * 1.2 ;
31809: LD_ADDR_VAR 0 10
31813: PUSH
31814: LD_VAR 0 10
31818: PUSH
31819: LD_REAL  1.20000000000000E+0000
31822: MUL
31823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31824: LD_VAR 0 6
31828: PPUSH
31829: CALL_OW 264
31833: PUSH
31834: LD_INT 6
31836: PUSH
31837: LD_INT 46
31839: PUSH
31840: LD_INT 47
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: IN
31848: IFFALSE 31865
// bpoints := bpoints * 1.2 ;
31850: LD_ADDR_VAR 0 10
31854: PUSH
31855: LD_VAR 0 10
31859: PUSH
31860: LD_REAL  1.20000000000000E+0000
31863: MUL
31864: ST_TO_ADDR
// end ; unit_building :
31865: GO 31879
31867: LD_INT 3
31869: DOUBLE
31870: EQUAL
31871: IFTRUE 31875
31873: GO 31878
31875: POP
// ; end ;
31876: GO 31879
31878: POP
// for j = 1 to 3 do
31879: LD_ADDR_VAR 0 7
31883: PUSH
31884: DOUBLE
31885: LD_INT 1
31887: DEC
31888: ST_TO_ADDR
31889: LD_INT 3
31891: PUSH
31892: FOR_TO
31893: IFFALSE 31946
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31895: LD_ADDR_VAR 0 5
31899: PUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: LD_VAR 0 7
31909: PPUSH
31910: LD_VAR 0 5
31914: PUSH
31915: LD_VAR 0 7
31919: ARRAY
31920: PUSH
31921: LD_VAR 0 9
31925: PUSH
31926: LD_VAR 0 7
31930: ARRAY
31931: PUSH
31932: LD_VAR 0 10
31936: MUL
31937: PLUS
31938: PPUSH
31939: CALL_OW 1
31943: ST_TO_ADDR
31944: GO 31892
31946: POP
31947: POP
// end ;
31948: GO 30425
31950: POP
31951: POP
// result := Replace ( result , 4 , tmp ) ;
31952: LD_ADDR_VAR 0 5
31956: PUSH
31957: LD_VAR 0 5
31961: PPUSH
31962: LD_INT 4
31964: PPUSH
31965: LD_VAR 0 8
31969: PPUSH
31970: CALL_OW 1
31974: ST_TO_ADDR
// end ;
31975: LD_VAR 0 5
31979: RET
// export function DangerAtRange ( unit , range ) ; begin
31980: LD_INT 0
31982: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31983: LD_ADDR_VAR 0 3
31987: PUSH
31988: LD_VAR 0 1
31992: PPUSH
31993: CALL_OW 255
31997: PPUSH
31998: LD_VAR 0 1
32002: PPUSH
32003: CALL_OW 250
32007: PPUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 251
32017: PPUSH
32018: LD_VAR 0 2
32022: PPUSH
32023: CALL 30277 0 4
32027: ST_TO_ADDR
// end ;
32028: LD_VAR 0 3
32032: RET
// export function DangerInArea ( side , area ) ; begin
32033: LD_INT 0
32035: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32036: LD_ADDR_VAR 0 3
32040: PUSH
32041: LD_VAR 0 2
32045: PPUSH
32046: LD_INT 81
32048: PUSH
32049: LD_VAR 0 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PPUSH
32058: CALL_OW 70
32062: ST_TO_ADDR
// end ;
32063: LD_VAR 0 3
32067: RET
// export function IsExtension ( b ) ; begin
32068: LD_INT 0
32070: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32071: LD_ADDR_VAR 0 2
32075: PUSH
32076: LD_VAR 0 1
32080: PUSH
32081: LD_INT 23
32083: PUSH
32084: LD_INT 20
32086: PUSH
32087: LD_INT 22
32089: PUSH
32090: LD_INT 17
32092: PUSH
32093: LD_INT 24
32095: PUSH
32096: LD_INT 21
32098: PUSH
32099: LD_INT 19
32101: PUSH
32102: LD_INT 16
32104: PUSH
32105: LD_INT 25
32107: PUSH
32108: LD_INT 18
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: IN
32123: ST_TO_ADDR
// end ;
32124: LD_VAR 0 2
32128: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32129: LD_INT 0
32131: PPUSH
32132: PPUSH
32133: PPUSH
// result := [ ] ;
32134: LD_ADDR_VAR 0 4
32138: PUSH
32139: EMPTY
32140: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32141: LD_ADDR_VAR 0 5
32145: PUSH
32146: LD_VAR 0 2
32150: PPUSH
32151: LD_INT 21
32153: PUSH
32154: LD_INT 3
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PPUSH
32161: CALL_OW 70
32165: ST_TO_ADDR
// if not tmp then
32166: LD_VAR 0 5
32170: NOT
32171: IFFALSE 32175
// exit ;
32173: GO 32239
// if checkLink then
32175: LD_VAR 0 3
32179: IFFALSE 32229
// begin for i in tmp do
32181: LD_ADDR_VAR 0 6
32185: PUSH
32186: LD_VAR 0 5
32190: PUSH
32191: FOR_IN
32192: IFFALSE 32227
// if GetBase ( i ) <> base then
32194: LD_VAR 0 6
32198: PPUSH
32199: CALL_OW 274
32203: PUSH
32204: LD_VAR 0 1
32208: NONEQUAL
32209: IFFALSE 32225
// ComLinkToBase ( base , i ) ;
32211: LD_VAR 0 1
32215: PPUSH
32216: LD_VAR 0 6
32220: PPUSH
32221: CALL_OW 169
32225: GO 32191
32227: POP
32228: POP
// end ; result := tmp ;
32229: LD_ADDR_VAR 0 4
32233: PUSH
32234: LD_VAR 0 5
32238: ST_TO_ADDR
// end ;
32239: LD_VAR 0 4
32243: RET
// export function ComComplete ( units , b ) ; var i ; begin
32244: LD_INT 0
32246: PPUSH
32247: PPUSH
// if not units then
32248: LD_VAR 0 1
32252: NOT
32253: IFFALSE 32257
// exit ;
32255: GO 32347
// for i in units do
32257: LD_ADDR_VAR 0 4
32261: PUSH
32262: LD_VAR 0 1
32266: PUSH
32267: FOR_IN
32268: IFFALSE 32345
// if BuildingStatus ( b ) = bs_build then
32270: LD_VAR 0 2
32274: PPUSH
32275: CALL_OW 461
32279: PUSH
32280: LD_INT 1
32282: EQUAL
32283: IFFALSE 32343
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32285: LD_VAR 0 4
32289: PPUSH
32290: LD_STRING h
32292: PUSH
32293: LD_VAR 0 2
32297: PPUSH
32298: CALL_OW 250
32302: PUSH
32303: LD_VAR 0 2
32307: PPUSH
32308: CALL_OW 251
32312: PUSH
32313: LD_VAR 0 2
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: PUSH
32336: EMPTY
32337: LIST
32338: PPUSH
32339: CALL_OW 446
32343: GO 32267
32345: POP
32346: POP
// end ;
32347: LD_VAR 0 3
32351: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32352: LD_INT 0
32354: PPUSH
32355: PPUSH
32356: PPUSH
32357: PPUSH
32358: PPUSH
32359: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32360: LD_VAR 0 1
32364: NOT
32365: PUSH
32366: LD_VAR 0 1
32370: PPUSH
32371: CALL_OW 263
32375: PUSH
32376: LD_INT 2
32378: NONEQUAL
32379: OR
32380: IFFALSE 32384
// exit ;
32382: GO 32700
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32384: LD_ADDR_VAR 0 6
32388: PUSH
32389: LD_INT 22
32391: PUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 255
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 2
32408: PUSH
32409: LD_INT 30
32411: PUSH
32412: LD_INT 36
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 34
32421: PUSH
32422: LD_INT 31
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 69
32442: ST_TO_ADDR
// if not tmp then
32443: LD_VAR 0 6
32447: NOT
32448: IFFALSE 32452
// exit ;
32450: GO 32700
// result := [ ] ;
32452: LD_ADDR_VAR 0 2
32456: PUSH
32457: EMPTY
32458: ST_TO_ADDR
// for i in tmp do
32459: LD_ADDR_VAR 0 3
32463: PUSH
32464: LD_VAR 0 6
32468: PUSH
32469: FOR_IN
32470: IFFALSE 32541
// begin t := UnitsInside ( i ) ;
32472: LD_ADDR_VAR 0 4
32476: PUSH
32477: LD_VAR 0 3
32481: PPUSH
32482: CALL_OW 313
32486: ST_TO_ADDR
// if t then
32487: LD_VAR 0 4
32491: IFFALSE 32539
// for j in t do
32493: LD_ADDR_VAR 0 7
32497: PUSH
32498: LD_VAR 0 4
32502: PUSH
32503: FOR_IN
32504: IFFALSE 32537
// result := Replace ( result , result + 1 , j ) ;
32506: LD_ADDR_VAR 0 2
32510: PUSH
32511: LD_VAR 0 2
32515: PPUSH
32516: LD_VAR 0 2
32520: PUSH
32521: LD_INT 1
32523: PLUS
32524: PPUSH
32525: LD_VAR 0 7
32529: PPUSH
32530: CALL_OW 1
32534: ST_TO_ADDR
32535: GO 32503
32537: POP
32538: POP
// end ;
32539: GO 32469
32541: POP
32542: POP
// if not result then
32543: LD_VAR 0 2
32547: NOT
32548: IFFALSE 32552
// exit ;
32550: GO 32700
// mech := result [ 1 ] ;
32552: LD_ADDR_VAR 0 5
32556: PUSH
32557: LD_VAR 0 2
32561: PUSH
32562: LD_INT 1
32564: ARRAY
32565: ST_TO_ADDR
// if result > 1 then
32566: LD_VAR 0 2
32570: PUSH
32571: LD_INT 1
32573: GREATER
32574: IFFALSE 32686
// begin for i = 2 to result do
32576: LD_ADDR_VAR 0 3
32580: PUSH
32581: DOUBLE
32582: LD_INT 2
32584: DEC
32585: ST_TO_ADDR
32586: LD_VAR 0 2
32590: PUSH
32591: FOR_TO
32592: IFFALSE 32684
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32594: LD_ADDR_VAR 0 4
32598: PUSH
32599: LD_VAR 0 2
32603: PUSH
32604: LD_VAR 0 3
32608: ARRAY
32609: PPUSH
32610: LD_INT 3
32612: PPUSH
32613: CALL_OW 259
32617: PUSH
32618: LD_VAR 0 2
32622: PUSH
32623: LD_VAR 0 3
32627: ARRAY
32628: PPUSH
32629: CALL_OW 432
32633: MINUS
32634: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32635: LD_VAR 0 4
32639: PUSH
32640: LD_VAR 0 5
32644: PPUSH
32645: LD_INT 3
32647: PPUSH
32648: CALL_OW 259
32652: PUSH
32653: LD_VAR 0 5
32657: PPUSH
32658: CALL_OW 432
32662: MINUS
32663: GREATEREQUAL
32664: IFFALSE 32682
// mech := result [ i ] ;
32666: LD_ADDR_VAR 0 5
32670: PUSH
32671: LD_VAR 0 2
32675: PUSH
32676: LD_VAR 0 3
32680: ARRAY
32681: ST_TO_ADDR
// end ;
32682: GO 32591
32684: POP
32685: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32686: LD_VAR 0 1
32690: PPUSH
32691: LD_VAR 0 5
32695: PPUSH
32696: CALL_OW 135
// end ;
32700: LD_VAR 0 2
32704: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32705: LD_INT 0
32707: PPUSH
32708: PPUSH
32709: PPUSH
32710: PPUSH
32711: PPUSH
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
// result := [ ] ;
32720: LD_ADDR_VAR 0 7
32724: PUSH
32725: EMPTY
32726: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 266
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: IN
32747: NOT
32748: IFFALSE 32752
// exit ;
32750: GO 34386
// if name then
32752: LD_VAR 0 3
32756: IFFALSE 32772
// SetBName ( base_dep , name ) ;
32758: LD_VAR 0 1
32762: PPUSH
32763: LD_VAR 0 3
32767: PPUSH
32768: CALL_OW 500
// base := GetBase ( base_dep ) ;
32772: LD_ADDR_VAR 0 15
32776: PUSH
32777: LD_VAR 0 1
32781: PPUSH
32782: CALL_OW 274
32786: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32787: LD_ADDR_VAR 0 16
32791: PUSH
32792: LD_VAR 0 1
32796: PPUSH
32797: CALL_OW 255
32801: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32802: LD_ADDR_VAR 0 17
32806: PUSH
32807: LD_VAR 0 1
32811: PPUSH
32812: CALL_OW 248
32816: ST_TO_ADDR
// if sources then
32817: LD_VAR 0 5
32821: IFFALSE 32868
// for i = 1 to 3 do
32823: LD_ADDR_VAR 0 8
32827: PUSH
32828: DOUBLE
32829: LD_INT 1
32831: DEC
32832: ST_TO_ADDR
32833: LD_INT 3
32835: PUSH
32836: FOR_TO
32837: IFFALSE 32866
// AddResourceType ( base , i , sources [ i ] ) ;
32839: LD_VAR 0 15
32843: PPUSH
32844: LD_VAR 0 8
32848: PPUSH
32849: LD_VAR 0 5
32853: PUSH
32854: LD_VAR 0 8
32858: ARRAY
32859: PPUSH
32860: CALL_OW 276
32864: GO 32836
32866: POP
32867: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32868: LD_ADDR_VAR 0 18
32872: PUSH
32873: LD_VAR 0 15
32877: PPUSH
32878: LD_VAR 0 2
32882: PPUSH
32883: LD_INT 1
32885: PPUSH
32886: CALL 32129 0 3
32890: ST_TO_ADDR
// InitHc ;
32891: CALL_OW 19
// InitUc ;
32895: CALL_OW 18
// uc_side := side ;
32899: LD_ADDR_OWVAR 20
32903: PUSH
32904: LD_VAR 0 16
32908: ST_TO_ADDR
// uc_nation := nation ;
32909: LD_ADDR_OWVAR 21
32913: PUSH
32914: LD_VAR 0 17
32918: ST_TO_ADDR
// if buildings then
32919: LD_VAR 0 18
32923: IFFALSE 34245
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32925: LD_ADDR_VAR 0 19
32929: PUSH
32930: LD_VAR 0 18
32934: PPUSH
32935: LD_INT 2
32937: PUSH
32938: LD_INT 30
32940: PUSH
32941: LD_INT 29
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 30
32950: PUSH
32951: LD_INT 30
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: PPUSH
32963: CALL_OW 72
32967: ST_TO_ADDR
// if tmp then
32968: LD_VAR 0 19
32972: IFFALSE 33020
// for i in tmp do
32974: LD_ADDR_VAR 0 8
32978: PUSH
32979: LD_VAR 0 19
32983: PUSH
32984: FOR_IN
32985: IFFALSE 33018
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32987: LD_VAR 0 8
32991: PPUSH
32992: CALL_OW 250
32996: PPUSH
32997: LD_VAR 0 8
33001: PPUSH
33002: CALL_OW 251
33006: PPUSH
33007: LD_VAR 0 16
33011: PPUSH
33012: CALL_OW 441
33016: GO 32984
33018: POP
33019: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33020: LD_VAR 0 18
33024: PPUSH
33025: LD_INT 2
33027: PUSH
33028: LD_INT 30
33030: PUSH
33031: LD_INT 32
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 30
33040: PUSH
33041: LD_INT 33
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: PPUSH
33053: CALL_OW 72
33057: IFFALSE 33145
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33059: LD_ADDR_VAR 0 8
33063: PUSH
33064: LD_VAR 0 18
33068: PPUSH
33069: LD_INT 2
33071: PUSH
33072: LD_INT 30
33074: PUSH
33075: LD_INT 32
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 30
33084: PUSH
33085: LD_INT 33
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: PPUSH
33097: CALL_OW 72
33101: PUSH
33102: FOR_IN
33103: IFFALSE 33143
// begin if not GetBWeapon ( i ) then
33105: LD_VAR 0 8
33109: PPUSH
33110: CALL_OW 269
33114: NOT
33115: IFFALSE 33141
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33117: LD_VAR 0 8
33121: PPUSH
33122: LD_VAR 0 8
33126: PPUSH
33127: LD_VAR 0 2
33131: PPUSH
33132: CALL 34391 0 2
33136: PPUSH
33137: CALL_OW 431
// end ;
33141: GO 33102
33143: POP
33144: POP
// end ; for i = 1 to personel do
33145: LD_ADDR_VAR 0 8
33149: PUSH
33150: DOUBLE
33151: LD_INT 1
33153: DEC
33154: ST_TO_ADDR
33155: LD_VAR 0 6
33159: PUSH
33160: FOR_TO
33161: IFFALSE 34225
// begin if i > 4 then
33163: LD_VAR 0 8
33167: PUSH
33168: LD_INT 4
33170: GREATER
33171: IFFALSE 33175
// break ;
33173: GO 34225
// case i of 1 :
33175: LD_VAR 0 8
33179: PUSH
33180: LD_INT 1
33182: DOUBLE
33183: EQUAL
33184: IFTRUE 33188
33186: GO 33268
33188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33189: LD_ADDR_VAR 0 12
33193: PUSH
33194: LD_VAR 0 18
33198: PPUSH
33199: LD_INT 22
33201: PUSH
33202: LD_VAR 0 16
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 58
33213: PUSH
33214: EMPTY
33215: LIST
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: LD_INT 30
33222: PUSH
33223: LD_INT 32
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 30
33232: PUSH
33233: LD_INT 4
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 30
33242: PUSH
33243: LD_INT 5
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: PPUSH
33261: CALL_OW 72
33265: ST_TO_ADDR
33266: GO 33490
33268: LD_INT 2
33270: DOUBLE
33271: EQUAL
33272: IFTRUE 33276
33274: GO 33338
33276: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33277: LD_ADDR_VAR 0 12
33281: PUSH
33282: LD_VAR 0 18
33286: PPUSH
33287: LD_INT 22
33289: PUSH
33290: LD_VAR 0 16
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: LD_INT 30
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 30
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PPUSH
33331: CALL_OW 72
33335: ST_TO_ADDR
33336: GO 33490
33338: LD_INT 3
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33346
33344: GO 33408
33346: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33347: LD_ADDR_VAR 0 12
33351: PUSH
33352: LD_VAR 0 18
33356: PPUSH
33357: LD_INT 22
33359: PUSH
33360: LD_VAR 0 16
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 30
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 30
33384: PUSH
33385: LD_INT 3
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PPUSH
33401: CALL_OW 72
33405: ST_TO_ADDR
33406: GO 33490
33408: LD_INT 4
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33416
33414: GO 33489
33416: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33417: LD_ADDR_VAR 0 12
33421: PUSH
33422: LD_VAR 0 18
33426: PPUSH
33427: LD_INT 22
33429: PUSH
33430: LD_VAR 0 16
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 30
33444: PUSH
33445: LD_INT 6
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 30
33454: PUSH
33455: LD_INT 7
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 30
33464: PUSH
33465: LD_INT 8
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PPUSH
33482: CALL_OW 72
33486: ST_TO_ADDR
33487: GO 33490
33489: POP
// if i = 1 then
33490: LD_VAR 0 8
33494: PUSH
33495: LD_INT 1
33497: EQUAL
33498: IFFALSE 33609
// begin tmp := [ ] ;
33500: LD_ADDR_VAR 0 19
33504: PUSH
33505: EMPTY
33506: ST_TO_ADDR
// for j in f do
33507: LD_ADDR_VAR 0 9
33511: PUSH
33512: LD_VAR 0 12
33516: PUSH
33517: FOR_IN
33518: IFFALSE 33591
// if GetBType ( j ) = b_bunker then
33520: LD_VAR 0 9
33524: PPUSH
33525: CALL_OW 266
33529: PUSH
33530: LD_INT 32
33532: EQUAL
33533: IFFALSE 33560
// tmp := Insert ( tmp , 1 , j ) else
33535: LD_ADDR_VAR 0 19
33539: PUSH
33540: LD_VAR 0 19
33544: PPUSH
33545: LD_INT 1
33547: PPUSH
33548: LD_VAR 0 9
33552: PPUSH
33553: CALL_OW 2
33557: ST_TO_ADDR
33558: GO 33589
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33560: LD_ADDR_VAR 0 19
33564: PUSH
33565: LD_VAR 0 19
33569: PPUSH
33570: LD_VAR 0 19
33574: PUSH
33575: LD_INT 1
33577: PLUS
33578: PPUSH
33579: LD_VAR 0 9
33583: PPUSH
33584: CALL_OW 2
33588: ST_TO_ADDR
33589: GO 33517
33591: POP
33592: POP
// if tmp then
33593: LD_VAR 0 19
33597: IFFALSE 33609
// f := tmp ;
33599: LD_ADDR_VAR 0 12
33603: PUSH
33604: LD_VAR 0 19
33608: ST_TO_ADDR
// end ; x := personel [ i ] ;
33609: LD_ADDR_VAR 0 13
33613: PUSH
33614: LD_VAR 0 6
33618: PUSH
33619: LD_VAR 0 8
33623: ARRAY
33624: ST_TO_ADDR
// if x = - 1 then
33625: LD_VAR 0 13
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: EQUAL
33634: IFFALSE 33843
// begin for j in f do
33636: LD_ADDR_VAR 0 9
33640: PUSH
33641: LD_VAR 0 12
33645: PUSH
33646: FOR_IN
33647: IFFALSE 33839
// repeat InitHc ;
33649: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33653: LD_VAR 0 9
33657: PPUSH
33658: CALL_OW 266
33662: PUSH
33663: LD_INT 5
33665: EQUAL
33666: IFFALSE 33736
// begin if UnitsInside ( j ) < 3 then
33668: LD_VAR 0 9
33672: PPUSH
33673: CALL_OW 313
33677: PUSH
33678: LD_INT 3
33680: LESS
33681: IFFALSE 33717
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33683: LD_INT 0
33685: PPUSH
33686: LD_INT 5
33688: PUSH
33689: LD_INT 8
33691: PUSH
33692: LD_INT 9
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: PUSH
33700: LD_VAR 0 17
33704: ARRAY
33705: PPUSH
33706: LD_VAR 0 4
33710: PPUSH
33711: CALL_OW 380
33715: GO 33734
// PrepareHuman ( false , i , skill ) ;
33717: LD_INT 0
33719: PPUSH
33720: LD_VAR 0 8
33724: PPUSH
33725: LD_VAR 0 4
33729: PPUSH
33730: CALL_OW 380
// end else
33734: GO 33753
// PrepareHuman ( false , i , skill ) ;
33736: LD_INT 0
33738: PPUSH
33739: LD_VAR 0 8
33743: PPUSH
33744: LD_VAR 0 4
33748: PPUSH
33749: CALL_OW 380
// un := CreateHuman ;
33753: LD_ADDR_VAR 0 14
33757: PUSH
33758: CALL_OW 44
33762: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33763: LD_ADDR_VAR 0 7
33767: PUSH
33768: LD_VAR 0 7
33772: PPUSH
33773: LD_INT 1
33775: PPUSH
33776: LD_VAR 0 14
33780: PPUSH
33781: CALL_OW 2
33785: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33786: LD_VAR 0 14
33790: PPUSH
33791: LD_VAR 0 9
33795: PPUSH
33796: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33800: LD_VAR 0 9
33804: PPUSH
33805: CALL_OW 313
33809: PUSH
33810: LD_INT 6
33812: EQUAL
33813: PUSH
33814: LD_VAR 0 9
33818: PPUSH
33819: CALL_OW 266
33823: PUSH
33824: LD_INT 32
33826: PUSH
33827: LD_INT 31
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: IN
33834: OR
33835: IFFALSE 33649
33837: GO 33646
33839: POP
33840: POP
// end else
33841: GO 34223
// for j = 1 to x do
33843: LD_ADDR_VAR 0 9
33847: PUSH
33848: DOUBLE
33849: LD_INT 1
33851: DEC
33852: ST_TO_ADDR
33853: LD_VAR 0 13
33857: PUSH
33858: FOR_TO
33859: IFFALSE 34221
// begin InitHc ;
33861: CALL_OW 19
// if not f then
33865: LD_VAR 0 12
33869: NOT
33870: IFFALSE 33959
// begin PrepareHuman ( false , i , skill ) ;
33872: LD_INT 0
33874: PPUSH
33875: LD_VAR 0 8
33879: PPUSH
33880: LD_VAR 0 4
33884: PPUSH
33885: CALL_OW 380
// un := CreateHuman ;
33889: LD_ADDR_VAR 0 14
33893: PUSH
33894: CALL_OW 44
33898: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33899: LD_ADDR_VAR 0 7
33903: PUSH
33904: LD_VAR 0 7
33908: PPUSH
33909: LD_INT 1
33911: PPUSH
33912: LD_VAR 0 14
33916: PPUSH
33917: CALL_OW 2
33921: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33922: LD_VAR 0 14
33926: PPUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 250
33936: PPUSH
33937: LD_VAR 0 1
33941: PPUSH
33942: CALL_OW 251
33946: PPUSH
33947: LD_INT 10
33949: PPUSH
33950: LD_INT 0
33952: PPUSH
33953: CALL_OW 50
// continue ;
33957: GO 33858
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33959: LD_VAR 0 12
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: PPUSH
33968: CALL_OW 313
33972: PUSH
33973: LD_VAR 0 12
33977: PUSH
33978: LD_INT 1
33980: ARRAY
33981: PPUSH
33982: CALL_OW 266
33986: PUSH
33987: LD_INT 32
33989: PUSH
33990: LD_INT 31
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: IN
33997: AND
33998: PUSH
33999: LD_VAR 0 12
34003: PUSH
34004: LD_INT 1
34006: ARRAY
34007: PPUSH
34008: CALL_OW 313
34012: PUSH
34013: LD_INT 6
34015: EQUAL
34016: OR
34017: IFFALSE 34037
// f := Delete ( f , 1 ) ;
34019: LD_ADDR_VAR 0 12
34023: PUSH
34024: LD_VAR 0 12
34028: PPUSH
34029: LD_INT 1
34031: PPUSH
34032: CALL_OW 3
34036: ST_TO_ADDR
// if not f then
34037: LD_VAR 0 12
34041: NOT
34042: IFFALSE 34060
// begin x := x + 2 ;
34044: LD_ADDR_VAR 0 13
34048: PUSH
34049: LD_VAR 0 13
34053: PUSH
34054: LD_INT 2
34056: PLUS
34057: ST_TO_ADDR
// continue ;
34058: GO 33858
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34060: LD_VAR 0 12
34064: PUSH
34065: LD_INT 1
34067: ARRAY
34068: PPUSH
34069: CALL_OW 266
34073: PUSH
34074: LD_INT 5
34076: EQUAL
34077: IFFALSE 34151
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34079: LD_VAR 0 12
34083: PUSH
34084: LD_INT 1
34086: ARRAY
34087: PPUSH
34088: CALL_OW 313
34092: PUSH
34093: LD_INT 3
34095: LESS
34096: IFFALSE 34132
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34098: LD_INT 0
34100: PPUSH
34101: LD_INT 5
34103: PUSH
34104: LD_INT 8
34106: PUSH
34107: LD_INT 9
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: PUSH
34115: LD_VAR 0 17
34119: ARRAY
34120: PPUSH
34121: LD_VAR 0 4
34125: PPUSH
34126: CALL_OW 380
34130: GO 34149
// PrepareHuman ( false , i , skill ) ;
34132: LD_INT 0
34134: PPUSH
34135: LD_VAR 0 8
34139: PPUSH
34140: LD_VAR 0 4
34144: PPUSH
34145: CALL_OW 380
// end else
34149: GO 34168
// PrepareHuman ( false , i , skill ) ;
34151: LD_INT 0
34153: PPUSH
34154: LD_VAR 0 8
34158: PPUSH
34159: LD_VAR 0 4
34163: PPUSH
34164: CALL_OW 380
// un := CreateHuman ;
34168: LD_ADDR_VAR 0 14
34172: PUSH
34173: CALL_OW 44
34177: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34178: LD_ADDR_VAR 0 7
34182: PUSH
34183: LD_VAR 0 7
34187: PPUSH
34188: LD_INT 1
34190: PPUSH
34191: LD_VAR 0 14
34195: PPUSH
34196: CALL_OW 2
34200: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34201: LD_VAR 0 14
34205: PPUSH
34206: LD_VAR 0 12
34210: PUSH
34211: LD_INT 1
34213: ARRAY
34214: PPUSH
34215: CALL_OW 52
// end ;
34219: GO 33858
34221: POP
34222: POP
// end ;
34223: GO 33160
34225: POP
34226: POP
// result := result ^ buildings ;
34227: LD_ADDR_VAR 0 7
34231: PUSH
34232: LD_VAR 0 7
34236: PUSH
34237: LD_VAR 0 18
34241: ADD
34242: ST_TO_ADDR
// end else
34243: GO 34386
// begin for i = 1 to personel do
34245: LD_ADDR_VAR 0 8
34249: PUSH
34250: DOUBLE
34251: LD_INT 1
34253: DEC
34254: ST_TO_ADDR
34255: LD_VAR 0 6
34259: PUSH
34260: FOR_TO
34261: IFFALSE 34384
// begin if i > 4 then
34263: LD_VAR 0 8
34267: PUSH
34268: LD_INT 4
34270: GREATER
34271: IFFALSE 34275
// break ;
34273: GO 34384
// x := personel [ i ] ;
34275: LD_ADDR_VAR 0 13
34279: PUSH
34280: LD_VAR 0 6
34284: PUSH
34285: LD_VAR 0 8
34289: ARRAY
34290: ST_TO_ADDR
// if x = - 1 then
34291: LD_VAR 0 13
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: EQUAL
34300: IFFALSE 34304
// continue ;
34302: GO 34260
// PrepareHuman ( false , i , skill ) ;
34304: LD_INT 0
34306: PPUSH
34307: LD_VAR 0 8
34311: PPUSH
34312: LD_VAR 0 4
34316: PPUSH
34317: CALL_OW 380
// un := CreateHuman ;
34321: LD_ADDR_VAR 0 14
34325: PUSH
34326: CALL_OW 44
34330: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34331: LD_VAR 0 14
34335: PPUSH
34336: LD_VAR 0 1
34340: PPUSH
34341: CALL_OW 250
34345: PPUSH
34346: LD_VAR 0 1
34350: PPUSH
34351: CALL_OW 251
34355: PPUSH
34356: LD_INT 10
34358: PPUSH
34359: LD_INT 0
34361: PPUSH
34362: CALL_OW 50
// result := result ^ un ;
34366: LD_ADDR_VAR 0 7
34370: PUSH
34371: LD_VAR 0 7
34375: PUSH
34376: LD_VAR 0 14
34380: ADD
34381: ST_TO_ADDR
// end ;
34382: GO 34260
34384: POP
34385: POP
// end ; end ;
34386: LD_VAR 0 7
34390: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34391: LD_INT 0
34393: PPUSH
34394: PPUSH
34395: PPUSH
34396: PPUSH
34397: PPUSH
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
34402: PPUSH
34403: PPUSH
34404: PPUSH
34405: PPUSH
34406: PPUSH
34407: PPUSH
34408: PPUSH
// result := false ;
34409: LD_ADDR_VAR 0 3
34413: PUSH
34414: LD_INT 0
34416: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34417: LD_VAR 0 1
34421: NOT
34422: PUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL_OW 266
34432: PUSH
34433: LD_INT 32
34435: PUSH
34436: LD_INT 33
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: IN
34443: NOT
34444: OR
34445: IFFALSE 34449
// exit ;
34447: GO 35558
// nat := GetNation ( tower ) ;
34449: LD_ADDR_VAR 0 12
34453: PUSH
34454: LD_VAR 0 1
34458: PPUSH
34459: CALL_OW 248
34463: ST_TO_ADDR
// side := GetSide ( tower ) ;
34464: LD_ADDR_VAR 0 16
34468: PUSH
34469: LD_VAR 0 1
34473: PPUSH
34474: CALL_OW 255
34478: ST_TO_ADDR
// x := GetX ( tower ) ;
34479: LD_ADDR_VAR 0 10
34483: PUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 250
34493: ST_TO_ADDR
// y := GetY ( tower ) ;
34494: LD_ADDR_VAR 0 11
34498: PUSH
34499: LD_VAR 0 1
34503: PPUSH
34504: CALL_OW 251
34508: ST_TO_ADDR
// if not x or not y then
34509: LD_VAR 0 10
34513: NOT
34514: PUSH
34515: LD_VAR 0 11
34519: NOT
34520: OR
34521: IFFALSE 34525
// exit ;
34523: GO 35558
// weapon := 0 ;
34525: LD_ADDR_VAR 0 18
34529: PUSH
34530: LD_INT 0
34532: ST_TO_ADDR
// fac_list := [ ] ;
34533: LD_ADDR_VAR 0 17
34537: PUSH
34538: EMPTY
34539: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34540: LD_ADDR_VAR 0 6
34544: PUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 274
34554: PPUSH
34555: LD_VAR 0 2
34559: PPUSH
34560: LD_INT 0
34562: PPUSH
34563: CALL 32129 0 3
34567: PPUSH
34568: LD_INT 30
34570: PUSH
34571: LD_INT 3
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PPUSH
34578: CALL_OW 72
34582: ST_TO_ADDR
// if not factories then
34583: LD_VAR 0 6
34587: NOT
34588: IFFALSE 34592
// exit ;
34590: GO 35558
// for i in factories do
34592: LD_ADDR_VAR 0 8
34596: PUSH
34597: LD_VAR 0 6
34601: PUSH
34602: FOR_IN
34603: IFFALSE 34628
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34605: LD_ADDR_VAR 0 17
34609: PUSH
34610: LD_VAR 0 17
34614: PUSH
34615: LD_VAR 0 8
34619: PPUSH
34620: CALL_OW 478
34624: UNION
34625: ST_TO_ADDR
34626: GO 34602
34628: POP
34629: POP
// if not fac_list then
34630: LD_VAR 0 17
34634: NOT
34635: IFFALSE 34639
// exit ;
34637: GO 35558
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34639: LD_ADDR_VAR 0 5
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: LD_INT 5
34649: PUSH
34650: LD_INT 9
34652: PUSH
34653: LD_INT 10
34655: PUSH
34656: LD_INT 6
34658: PUSH
34659: LD_INT 7
34661: PUSH
34662: LD_INT 11
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 27
34676: PUSH
34677: LD_INT 28
34679: PUSH
34680: LD_INT 26
34682: PUSH
34683: LD_INT 30
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 43
34694: PUSH
34695: LD_INT 44
34697: PUSH
34698: LD_INT 46
34700: PUSH
34701: LD_INT 45
34703: PUSH
34704: LD_INT 47
34706: PUSH
34707: LD_INT 49
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: PUSH
34723: LD_VAR 0 12
34727: ARRAY
34728: ST_TO_ADDR
// list := list isect fac_list ;
34729: LD_ADDR_VAR 0 5
34733: PUSH
34734: LD_VAR 0 5
34738: PUSH
34739: LD_VAR 0 17
34743: ISECT
34744: ST_TO_ADDR
// if not list then
34745: LD_VAR 0 5
34749: NOT
34750: IFFALSE 34754
// exit ;
34752: GO 35558
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34754: LD_VAR 0 12
34758: PUSH
34759: LD_INT 3
34761: EQUAL
34762: PUSH
34763: LD_INT 49
34765: PUSH
34766: LD_VAR 0 5
34770: IN
34771: AND
34772: PUSH
34773: LD_INT 31
34775: PPUSH
34776: LD_VAR 0 16
34780: PPUSH
34781: CALL_OW 321
34785: PUSH
34786: LD_INT 2
34788: EQUAL
34789: AND
34790: IFFALSE 34850
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34792: LD_INT 22
34794: PUSH
34795: LD_VAR 0 16
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 35
34806: PUSH
34807: LD_INT 49
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 91
34816: PUSH
34817: LD_VAR 0 1
34821: PUSH
34822: LD_INT 10
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: LIST
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: PPUSH
34835: CALL_OW 69
34839: NOT
34840: IFFALSE 34850
// weapon := ru_time_lapser ;
34842: LD_ADDR_VAR 0 18
34846: PUSH
34847: LD_INT 49
34849: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34850: LD_VAR 0 12
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: IN
34865: PUSH
34866: LD_INT 11
34868: PUSH
34869: LD_VAR 0 5
34873: IN
34874: PUSH
34875: LD_INT 30
34877: PUSH
34878: LD_VAR 0 5
34882: IN
34883: OR
34884: AND
34885: PUSH
34886: LD_INT 6
34888: PPUSH
34889: LD_VAR 0 16
34893: PPUSH
34894: CALL_OW 321
34898: PUSH
34899: LD_INT 2
34901: EQUAL
34902: AND
34903: IFFALSE 35068
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34905: LD_INT 22
34907: PUSH
34908: LD_VAR 0 16
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: LD_INT 35
34922: PUSH
34923: LD_INT 11
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 35
34932: PUSH
34933: LD_INT 30
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 91
34947: PUSH
34948: LD_VAR 0 1
34952: PUSH
34953: LD_INT 18
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: PPUSH
34966: CALL_OW 69
34970: NOT
34971: PUSH
34972: LD_INT 22
34974: PUSH
34975: LD_VAR 0 16
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: LD_INT 30
34989: PUSH
34990: LD_INT 32
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 30
34999: PUSH
35000: LD_INT 33
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 91
35014: PUSH
35015: LD_VAR 0 1
35019: PUSH
35020: LD_INT 12
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: LIST
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: PUSH
35033: EMPTY
35034: LIST
35035: PPUSH
35036: CALL_OW 69
35040: PUSH
35041: LD_INT 2
35043: GREATER
35044: AND
35045: IFFALSE 35068
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35047: LD_ADDR_VAR 0 18
35051: PUSH
35052: LD_INT 11
35054: PUSH
35055: LD_INT 30
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_VAR 0 12
35066: ARRAY
35067: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35068: LD_VAR 0 18
35072: NOT
35073: PUSH
35074: LD_INT 40
35076: PPUSH
35077: LD_VAR 0 16
35081: PPUSH
35082: CALL_OW 321
35086: PUSH
35087: LD_INT 2
35089: EQUAL
35090: AND
35091: PUSH
35092: LD_INT 7
35094: PUSH
35095: LD_VAR 0 5
35099: IN
35100: PUSH
35101: LD_INT 28
35103: PUSH
35104: LD_VAR 0 5
35108: IN
35109: OR
35110: PUSH
35111: LD_INT 45
35113: PUSH
35114: LD_VAR 0 5
35118: IN
35119: OR
35120: AND
35121: IFFALSE 35375
// begin hex := GetHexInfo ( x , y ) ;
35123: LD_ADDR_VAR 0 4
35127: PUSH
35128: LD_VAR 0 10
35132: PPUSH
35133: LD_VAR 0 11
35137: PPUSH
35138: CALL_OW 546
35142: ST_TO_ADDR
// if hex [ 1 ] then
35143: LD_VAR 0 4
35147: PUSH
35148: LD_INT 1
35150: ARRAY
35151: IFFALSE 35155
// exit ;
35153: GO 35558
// height := hex [ 2 ] ;
35155: LD_ADDR_VAR 0 15
35159: PUSH
35160: LD_VAR 0 4
35164: PUSH
35165: LD_INT 2
35167: ARRAY
35168: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35169: LD_ADDR_VAR 0 14
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: LD_INT 5
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
// for i in tmp do
35192: LD_ADDR_VAR 0 8
35196: PUSH
35197: LD_VAR 0 14
35201: PUSH
35202: FOR_IN
35203: IFFALSE 35373
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35205: LD_ADDR_VAR 0 9
35209: PUSH
35210: LD_VAR 0 10
35214: PPUSH
35215: LD_VAR 0 8
35219: PPUSH
35220: LD_INT 5
35222: PPUSH
35223: CALL_OW 272
35227: PUSH
35228: LD_VAR 0 11
35232: PPUSH
35233: LD_VAR 0 8
35237: PPUSH
35238: LD_INT 5
35240: PPUSH
35241: CALL_OW 273
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35250: LD_VAR 0 9
35254: PUSH
35255: LD_INT 1
35257: ARRAY
35258: PPUSH
35259: LD_VAR 0 9
35263: PUSH
35264: LD_INT 2
35266: ARRAY
35267: PPUSH
35268: CALL_OW 488
35272: IFFALSE 35371
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35274: LD_ADDR_VAR 0 4
35278: PUSH
35279: LD_VAR 0 9
35283: PUSH
35284: LD_INT 1
35286: ARRAY
35287: PPUSH
35288: LD_VAR 0 9
35292: PUSH
35293: LD_INT 2
35295: ARRAY
35296: PPUSH
35297: CALL_OW 546
35301: ST_TO_ADDR
// if hex [ 1 ] then
35302: LD_VAR 0 4
35306: PUSH
35307: LD_INT 1
35309: ARRAY
35310: IFFALSE 35314
// continue ;
35312: GO 35202
// h := hex [ 2 ] ;
35314: LD_ADDR_VAR 0 13
35318: PUSH
35319: LD_VAR 0 4
35323: PUSH
35324: LD_INT 2
35326: ARRAY
35327: ST_TO_ADDR
// if h + 7 < height then
35328: LD_VAR 0 13
35332: PUSH
35333: LD_INT 7
35335: PLUS
35336: PUSH
35337: LD_VAR 0 15
35341: LESS
35342: IFFALSE 35371
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35344: LD_ADDR_VAR 0 18
35348: PUSH
35349: LD_INT 7
35351: PUSH
35352: LD_INT 28
35354: PUSH
35355: LD_INT 45
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: LIST
35362: PUSH
35363: LD_VAR 0 12
35367: ARRAY
35368: ST_TO_ADDR
// break ;
35369: GO 35373
// end ; end ; end ;
35371: GO 35202
35373: POP
35374: POP
// end ; if not weapon then
35375: LD_VAR 0 18
35379: NOT
35380: IFFALSE 35440
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35382: LD_ADDR_VAR 0 5
35386: PUSH
35387: LD_VAR 0 5
35391: PUSH
35392: LD_INT 11
35394: PUSH
35395: LD_INT 30
35397: PUSH
35398: LD_INT 49
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: DIFF
35406: ST_TO_ADDR
// if not list then
35407: LD_VAR 0 5
35411: NOT
35412: IFFALSE 35416
// exit ;
35414: GO 35558
// weapon := list [ rand ( 1 , list ) ] ;
35416: LD_ADDR_VAR 0 18
35420: PUSH
35421: LD_VAR 0 5
35425: PUSH
35426: LD_INT 1
35428: PPUSH
35429: LD_VAR 0 5
35433: PPUSH
35434: CALL_OW 12
35438: ARRAY
35439: ST_TO_ADDR
// end ; if weapon then
35440: LD_VAR 0 18
35444: IFFALSE 35558
// begin tmp := CostOfWeapon ( weapon ) ;
35446: LD_ADDR_VAR 0 14
35450: PUSH
35451: LD_VAR 0 18
35455: PPUSH
35456: CALL_OW 451
35460: ST_TO_ADDR
// j := GetBase ( tower ) ;
35461: LD_ADDR_VAR 0 9
35465: PUSH
35466: LD_VAR 0 1
35470: PPUSH
35471: CALL_OW 274
35475: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35476: LD_VAR 0 9
35480: PPUSH
35481: LD_INT 1
35483: PPUSH
35484: CALL_OW 275
35488: PUSH
35489: LD_VAR 0 14
35493: PUSH
35494: LD_INT 1
35496: ARRAY
35497: GREATEREQUAL
35498: PUSH
35499: LD_VAR 0 9
35503: PPUSH
35504: LD_INT 2
35506: PPUSH
35507: CALL_OW 275
35511: PUSH
35512: LD_VAR 0 14
35516: PUSH
35517: LD_INT 2
35519: ARRAY
35520: GREATEREQUAL
35521: AND
35522: PUSH
35523: LD_VAR 0 9
35527: PPUSH
35528: LD_INT 3
35530: PPUSH
35531: CALL_OW 275
35535: PUSH
35536: LD_VAR 0 14
35540: PUSH
35541: LD_INT 3
35543: ARRAY
35544: GREATEREQUAL
35545: AND
35546: IFFALSE 35558
// result := weapon ;
35548: LD_ADDR_VAR 0 3
35552: PUSH
35553: LD_VAR 0 18
35557: ST_TO_ADDR
// end ; end ;
35558: LD_VAR 0 3
35562: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35563: LD_INT 0
35565: PPUSH
35566: PPUSH
// result := true ;
35567: LD_ADDR_VAR 0 3
35571: PUSH
35572: LD_INT 1
35574: ST_TO_ADDR
// if array1 = array2 then
35575: LD_VAR 0 1
35579: PUSH
35580: LD_VAR 0 2
35584: EQUAL
35585: IFFALSE 35645
// begin for i = 1 to array1 do
35587: LD_ADDR_VAR 0 4
35591: PUSH
35592: DOUBLE
35593: LD_INT 1
35595: DEC
35596: ST_TO_ADDR
35597: LD_VAR 0 1
35601: PUSH
35602: FOR_TO
35603: IFFALSE 35641
// if array1 [ i ] <> array2 [ i ] then
35605: LD_VAR 0 1
35609: PUSH
35610: LD_VAR 0 4
35614: ARRAY
35615: PUSH
35616: LD_VAR 0 2
35620: PUSH
35621: LD_VAR 0 4
35625: ARRAY
35626: NONEQUAL
35627: IFFALSE 35639
// begin result := false ;
35629: LD_ADDR_VAR 0 3
35633: PUSH
35634: LD_INT 0
35636: ST_TO_ADDR
// break ;
35637: GO 35641
// end ;
35639: GO 35602
35641: POP
35642: POP
// end else
35643: GO 35653
// result := false ;
35645: LD_ADDR_VAR 0 3
35649: PUSH
35650: LD_INT 0
35652: ST_TO_ADDR
// end ;
35653: LD_VAR 0 3
35657: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35658: LD_INT 0
35660: PPUSH
35661: PPUSH
// if not array1 or not array2 then
35662: LD_VAR 0 1
35666: NOT
35667: PUSH
35668: LD_VAR 0 2
35672: NOT
35673: OR
35674: IFFALSE 35678
// exit ;
35676: GO 35742
// result := true ;
35678: LD_ADDR_VAR 0 3
35682: PUSH
35683: LD_INT 1
35685: ST_TO_ADDR
// for i = 1 to array1 do
35686: LD_ADDR_VAR 0 4
35690: PUSH
35691: DOUBLE
35692: LD_INT 1
35694: DEC
35695: ST_TO_ADDR
35696: LD_VAR 0 1
35700: PUSH
35701: FOR_TO
35702: IFFALSE 35740
// if array1 [ i ] <> array2 [ i ] then
35704: LD_VAR 0 1
35708: PUSH
35709: LD_VAR 0 4
35713: ARRAY
35714: PUSH
35715: LD_VAR 0 2
35719: PUSH
35720: LD_VAR 0 4
35724: ARRAY
35725: NONEQUAL
35726: IFFALSE 35738
// begin result := false ;
35728: LD_ADDR_VAR 0 3
35732: PUSH
35733: LD_INT 0
35735: ST_TO_ADDR
// break ;
35736: GO 35740
// end ;
35738: GO 35701
35740: POP
35741: POP
// end ;
35742: LD_VAR 0 3
35746: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35747: LD_INT 0
35749: PPUSH
35750: PPUSH
35751: PPUSH
// pom := GetBase ( fac ) ;
35752: LD_ADDR_VAR 0 5
35756: PUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 274
35766: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35767: LD_ADDR_VAR 0 4
35771: PUSH
35772: LD_VAR 0 2
35776: PUSH
35777: LD_INT 1
35779: ARRAY
35780: PPUSH
35781: LD_VAR 0 2
35785: PUSH
35786: LD_INT 2
35788: ARRAY
35789: PPUSH
35790: LD_VAR 0 2
35794: PUSH
35795: LD_INT 3
35797: ARRAY
35798: PPUSH
35799: LD_VAR 0 2
35803: PUSH
35804: LD_INT 4
35806: ARRAY
35807: PPUSH
35808: CALL_OW 449
35812: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35813: LD_ADDR_VAR 0 3
35817: PUSH
35818: LD_VAR 0 5
35822: PPUSH
35823: LD_INT 1
35825: PPUSH
35826: CALL_OW 275
35830: PUSH
35831: LD_VAR 0 4
35835: PUSH
35836: LD_INT 1
35838: ARRAY
35839: GREATEREQUAL
35840: PUSH
35841: LD_VAR 0 5
35845: PPUSH
35846: LD_INT 2
35848: PPUSH
35849: CALL_OW 275
35853: PUSH
35854: LD_VAR 0 4
35858: PUSH
35859: LD_INT 2
35861: ARRAY
35862: GREATEREQUAL
35863: AND
35864: PUSH
35865: LD_VAR 0 5
35869: PPUSH
35870: LD_INT 3
35872: PPUSH
35873: CALL_OW 275
35877: PUSH
35878: LD_VAR 0 4
35882: PUSH
35883: LD_INT 3
35885: ARRAY
35886: GREATEREQUAL
35887: AND
35888: ST_TO_ADDR
// end ;
35889: LD_VAR 0 3
35893: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35894: LD_INT 0
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
// pom := GetBase ( building ) ;
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 274
35914: ST_TO_ADDR
// if not pom then
35915: LD_VAR 0 3
35919: NOT
35920: IFFALSE 35924
// exit ;
35922: GO 36094
// btype := GetBType ( building ) ;
35924: LD_ADDR_VAR 0 5
35928: PUSH
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL_OW 266
35938: ST_TO_ADDR
// if btype = b_armoury then
35939: LD_VAR 0 5
35943: PUSH
35944: LD_INT 4
35946: EQUAL
35947: IFFALSE 35957
// btype := b_barracks ;
35949: LD_ADDR_VAR 0 5
35953: PUSH
35954: LD_INT 5
35956: ST_TO_ADDR
// if btype = b_depot then
35957: LD_VAR 0 5
35961: PUSH
35962: LD_INT 0
35964: EQUAL
35965: IFFALSE 35975
// btype := b_warehouse ;
35967: LD_ADDR_VAR 0 5
35971: PUSH
35972: LD_INT 1
35974: ST_TO_ADDR
// if btype = b_workshop then
35975: LD_VAR 0 5
35979: PUSH
35980: LD_INT 2
35982: EQUAL
35983: IFFALSE 35993
// btype := b_factory ;
35985: LD_ADDR_VAR 0 5
35989: PUSH
35990: LD_INT 3
35992: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35993: LD_ADDR_VAR 0 4
35997: PUSH
35998: LD_VAR 0 5
36002: PPUSH
36003: LD_VAR 0 1
36007: PPUSH
36008: CALL_OW 248
36012: PPUSH
36013: CALL_OW 450
36017: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36018: LD_ADDR_VAR 0 2
36022: PUSH
36023: LD_VAR 0 3
36027: PPUSH
36028: LD_INT 1
36030: PPUSH
36031: CALL_OW 275
36035: PUSH
36036: LD_VAR 0 4
36040: PUSH
36041: LD_INT 1
36043: ARRAY
36044: GREATEREQUAL
36045: PUSH
36046: LD_VAR 0 3
36050: PPUSH
36051: LD_INT 2
36053: PPUSH
36054: CALL_OW 275
36058: PUSH
36059: LD_VAR 0 4
36063: PUSH
36064: LD_INT 2
36066: ARRAY
36067: GREATEREQUAL
36068: AND
36069: PUSH
36070: LD_VAR 0 3
36074: PPUSH
36075: LD_INT 3
36077: PPUSH
36078: CALL_OW 275
36082: PUSH
36083: LD_VAR 0 4
36087: PUSH
36088: LD_INT 3
36090: ARRAY
36091: GREATEREQUAL
36092: AND
36093: ST_TO_ADDR
// end ;
36094: LD_VAR 0 2
36098: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36099: LD_INT 0
36101: PPUSH
36102: PPUSH
36103: PPUSH
// pom := GetBase ( building ) ;
36104: LD_ADDR_VAR 0 4
36108: PUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 274
36118: ST_TO_ADDR
// if not pom then
36119: LD_VAR 0 4
36123: NOT
36124: IFFALSE 36128
// exit ;
36126: GO 36229
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36128: LD_ADDR_VAR 0 5
36132: PUSH
36133: LD_VAR 0 2
36137: PPUSH
36138: LD_VAR 0 1
36142: PPUSH
36143: CALL_OW 248
36147: PPUSH
36148: CALL_OW 450
36152: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36153: LD_ADDR_VAR 0 3
36157: PUSH
36158: LD_VAR 0 4
36162: PPUSH
36163: LD_INT 1
36165: PPUSH
36166: CALL_OW 275
36170: PUSH
36171: LD_VAR 0 5
36175: PUSH
36176: LD_INT 1
36178: ARRAY
36179: GREATEREQUAL
36180: PUSH
36181: LD_VAR 0 4
36185: PPUSH
36186: LD_INT 2
36188: PPUSH
36189: CALL_OW 275
36193: PUSH
36194: LD_VAR 0 5
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: GREATEREQUAL
36203: AND
36204: PUSH
36205: LD_VAR 0 4
36209: PPUSH
36210: LD_INT 3
36212: PPUSH
36213: CALL_OW 275
36217: PUSH
36218: LD_VAR 0 5
36222: PUSH
36223: LD_INT 3
36225: ARRAY
36226: GREATEREQUAL
36227: AND
36228: ST_TO_ADDR
// end ;
36229: LD_VAR 0 3
36233: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36234: LD_INT 0
36236: PPUSH
36237: PPUSH
36238: PPUSH
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
// result := false ;
36247: LD_ADDR_VAR 0 8
36251: PUSH
36252: LD_INT 0
36254: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36255: LD_VAR 0 5
36259: NOT
36260: PUSH
36261: LD_VAR 0 1
36265: NOT
36266: OR
36267: PUSH
36268: LD_VAR 0 2
36272: NOT
36273: OR
36274: PUSH
36275: LD_VAR 0 3
36279: NOT
36280: OR
36281: IFFALSE 36285
// exit ;
36283: GO 37099
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36285: LD_ADDR_VAR 0 14
36289: PUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: LD_VAR 0 2
36299: PPUSH
36300: LD_VAR 0 3
36304: PPUSH
36305: LD_VAR 0 4
36309: PPUSH
36310: LD_VAR 0 5
36314: PUSH
36315: LD_INT 1
36317: ARRAY
36318: PPUSH
36319: CALL_OW 248
36323: PPUSH
36324: LD_INT 0
36326: PPUSH
36327: CALL 38336 0 6
36331: ST_TO_ADDR
// if not hexes then
36332: LD_VAR 0 14
36336: NOT
36337: IFFALSE 36341
// exit ;
36339: GO 37099
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36341: LD_ADDR_VAR 0 17
36345: PUSH
36346: LD_VAR 0 5
36350: PPUSH
36351: LD_INT 22
36353: PUSH
36354: LD_VAR 0 13
36358: PPUSH
36359: CALL_OW 255
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: LD_INT 30
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 30
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PPUSH
36400: CALL_OW 72
36404: ST_TO_ADDR
// for i = 1 to hexes do
36405: LD_ADDR_VAR 0 9
36409: PUSH
36410: DOUBLE
36411: LD_INT 1
36413: DEC
36414: ST_TO_ADDR
36415: LD_VAR 0 14
36419: PUSH
36420: FOR_TO
36421: IFFALSE 37097
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36423: LD_ADDR_VAR 0 13
36427: PUSH
36428: LD_VAR 0 14
36432: PUSH
36433: LD_VAR 0 9
36437: ARRAY
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: PPUSH
36443: LD_VAR 0 14
36447: PUSH
36448: LD_VAR 0 9
36452: ARRAY
36453: PUSH
36454: LD_INT 2
36456: ARRAY
36457: PPUSH
36458: CALL_OW 428
36462: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36463: LD_VAR 0 14
36467: PUSH
36468: LD_VAR 0 9
36472: ARRAY
36473: PUSH
36474: LD_INT 1
36476: ARRAY
36477: PPUSH
36478: LD_VAR 0 14
36482: PUSH
36483: LD_VAR 0 9
36487: ARRAY
36488: PUSH
36489: LD_INT 2
36491: ARRAY
36492: PPUSH
36493: CALL_OW 351
36497: PUSH
36498: LD_VAR 0 14
36502: PUSH
36503: LD_VAR 0 9
36507: ARRAY
36508: PUSH
36509: LD_INT 1
36511: ARRAY
36512: PPUSH
36513: LD_VAR 0 14
36517: PUSH
36518: LD_VAR 0 9
36522: ARRAY
36523: PUSH
36524: LD_INT 2
36526: ARRAY
36527: PPUSH
36528: CALL_OW 488
36532: NOT
36533: OR
36534: PUSH
36535: LD_VAR 0 13
36539: PPUSH
36540: CALL_OW 247
36544: PUSH
36545: LD_INT 3
36547: EQUAL
36548: OR
36549: IFFALSE 36555
// exit ;
36551: POP
36552: POP
36553: GO 37099
// if not tmp then
36555: LD_VAR 0 13
36559: NOT
36560: IFFALSE 36564
// continue ;
36562: GO 36420
// result := true ;
36564: LD_ADDR_VAR 0 8
36568: PUSH
36569: LD_INT 1
36571: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36572: LD_VAR 0 6
36576: PUSH
36577: LD_VAR 0 13
36581: PPUSH
36582: CALL_OW 247
36586: PUSH
36587: LD_INT 2
36589: EQUAL
36590: AND
36591: PUSH
36592: LD_VAR 0 13
36596: PPUSH
36597: CALL_OW 263
36601: PUSH
36602: LD_INT 1
36604: EQUAL
36605: AND
36606: IFFALSE 36770
// begin if IsDrivenBy ( tmp ) then
36608: LD_VAR 0 13
36612: PPUSH
36613: CALL_OW 311
36617: IFFALSE 36621
// continue ;
36619: GO 36420
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36621: LD_VAR 0 6
36625: PPUSH
36626: LD_INT 3
36628: PUSH
36629: LD_INT 60
36631: PUSH
36632: EMPTY
36633: LIST
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 3
36641: PUSH
36642: LD_INT 55
36644: PUSH
36645: EMPTY
36646: LIST
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PPUSH
36656: CALL_OW 72
36660: IFFALSE 36768
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36662: LD_ADDR_VAR 0 18
36666: PUSH
36667: LD_VAR 0 6
36671: PPUSH
36672: LD_INT 3
36674: PUSH
36675: LD_INT 60
36677: PUSH
36678: EMPTY
36679: LIST
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 3
36687: PUSH
36688: LD_INT 55
36690: PUSH
36691: EMPTY
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PPUSH
36702: CALL_OW 72
36706: PUSH
36707: LD_INT 1
36709: ARRAY
36710: ST_TO_ADDR
// if IsInUnit ( driver ) then
36711: LD_VAR 0 18
36715: PPUSH
36716: CALL_OW 310
36720: IFFALSE 36731
// ComExit ( driver ) ;
36722: LD_VAR 0 18
36726: PPUSH
36727: CALL 62041 0 1
// AddComEnterUnit ( driver , tmp ) ;
36731: LD_VAR 0 18
36735: PPUSH
36736: LD_VAR 0 13
36740: PPUSH
36741: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36745: LD_VAR 0 18
36749: PPUSH
36750: LD_VAR 0 7
36754: PPUSH
36755: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36759: LD_VAR 0 18
36763: PPUSH
36764: CALL_OW 181
// end ; continue ;
36768: GO 36420
// end ; if not cleaners or not tmp in cleaners then
36770: LD_VAR 0 6
36774: NOT
36775: PUSH
36776: LD_VAR 0 13
36780: PUSH
36781: LD_VAR 0 6
36785: IN
36786: NOT
36787: OR
36788: IFFALSE 37095
// begin if dep then
36790: LD_VAR 0 17
36794: IFFALSE 36930
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36796: LD_ADDR_VAR 0 16
36800: PUSH
36801: LD_VAR 0 17
36805: PUSH
36806: LD_INT 1
36808: ARRAY
36809: PPUSH
36810: CALL_OW 250
36814: PPUSH
36815: LD_VAR 0 17
36819: PUSH
36820: LD_INT 1
36822: ARRAY
36823: PPUSH
36824: CALL_OW 254
36828: PPUSH
36829: LD_INT 5
36831: PPUSH
36832: CALL_OW 272
36836: PUSH
36837: LD_VAR 0 17
36841: PUSH
36842: LD_INT 1
36844: ARRAY
36845: PPUSH
36846: CALL_OW 251
36850: PPUSH
36851: LD_VAR 0 17
36855: PUSH
36856: LD_INT 1
36858: ARRAY
36859: PPUSH
36860: CALL_OW 254
36864: PPUSH
36865: LD_INT 5
36867: PPUSH
36868: CALL_OW 273
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36877: LD_VAR 0 16
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: PPUSH
36886: LD_VAR 0 16
36890: PUSH
36891: LD_INT 2
36893: ARRAY
36894: PPUSH
36895: CALL_OW 488
36899: IFFALSE 36930
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36901: LD_VAR 0 13
36905: PPUSH
36906: LD_VAR 0 16
36910: PUSH
36911: LD_INT 1
36913: ARRAY
36914: PPUSH
36915: LD_VAR 0 16
36919: PUSH
36920: LD_INT 2
36922: ARRAY
36923: PPUSH
36924: CALL_OW 111
// continue ;
36928: GO 36420
// end ; end ; r := GetDir ( tmp ) ;
36930: LD_ADDR_VAR 0 15
36934: PUSH
36935: LD_VAR 0 13
36939: PPUSH
36940: CALL_OW 254
36944: ST_TO_ADDR
// if r = 5 then
36945: LD_VAR 0 15
36949: PUSH
36950: LD_INT 5
36952: EQUAL
36953: IFFALSE 36963
// r := 0 ;
36955: LD_ADDR_VAR 0 15
36959: PUSH
36960: LD_INT 0
36962: ST_TO_ADDR
// for j = r to 5 do
36963: LD_ADDR_VAR 0 10
36967: PUSH
36968: DOUBLE
36969: LD_VAR 0 15
36973: DEC
36974: ST_TO_ADDR
36975: LD_INT 5
36977: PUSH
36978: FOR_TO
36979: IFFALSE 37093
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36981: LD_ADDR_VAR 0 11
36985: PUSH
36986: LD_VAR 0 13
36990: PPUSH
36991: CALL_OW 250
36995: PPUSH
36996: LD_VAR 0 10
37000: PPUSH
37001: LD_INT 2
37003: PPUSH
37004: CALL_OW 272
37008: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37009: LD_ADDR_VAR 0 12
37013: PUSH
37014: LD_VAR 0 13
37018: PPUSH
37019: CALL_OW 251
37023: PPUSH
37024: LD_VAR 0 10
37028: PPUSH
37029: LD_INT 2
37031: PPUSH
37032: CALL_OW 273
37036: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37037: LD_VAR 0 11
37041: PPUSH
37042: LD_VAR 0 12
37046: PPUSH
37047: CALL_OW 488
37051: PUSH
37052: LD_VAR 0 11
37056: PPUSH
37057: LD_VAR 0 12
37061: PPUSH
37062: CALL_OW 428
37066: NOT
37067: AND
37068: IFFALSE 37091
// begin ComMoveXY ( tmp , _x , _y ) ;
37070: LD_VAR 0 13
37074: PPUSH
37075: LD_VAR 0 11
37079: PPUSH
37080: LD_VAR 0 12
37084: PPUSH
37085: CALL_OW 111
// break ;
37089: GO 37093
// end ; end ;
37091: GO 36978
37093: POP
37094: POP
// end ; end ;
37095: GO 36420
37097: POP
37098: POP
// end ;
37099: LD_VAR 0 8
37103: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37104: LD_INT 0
37106: PPUSH
// result := true ;
37107: LD_ADDR_VAR 0 3
37111: PUSH
37112: LD_INT 1
37114: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37115: LD_VAR 0 2
37119: PUSH
37120: LD_INT 24
37122: DOUBLE
37123: EQUAL
37124: IFTRUE 37134
37126: LD_INT 33
37128: DOUBLE
37129: EQUAL
37130: IFTRUE 37134
37132: GO 37159
37134: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37135: LD_ADDR_VAR 0 3
37139: PUSH
37140: LD_INT 32
37142: PPUSH
37143: LD_VAR 0 1
37147: PPUSH
37148: CALL_OW 321
37152: PUSH
37153: LD_INT 2
37155: EQUAL
37156: ST_TO_ADDR
37157: GO 37479
37159: LD_INT 20
37161: DOUBLE
37162: EQUAL
37163: IFTRUE 37167
37165: GO 37192
37167: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37168: LD_ADDR_VAR 0 3
37172: PUSH
37173: LD_INT 6
37175: PPUSH
37176: LD_VAR 0 1
37180: PPUSH
37181: CALL_OW 321
37185: PUSH
37186: LD_INT 2
37188: EQUAL
37189: ST_TO_ADDR
37190: GO 37479
37192: LD_INT 22
37194: DOUBLE
37195: EQUAL
37196: IFTRUE 37206
37198: LD_INT 36
37200: DOUBLE
37201: EQUAL
37202: IFTRUE 37206
37204: GO 37231
37206: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37207: LD_ADDR_VAR 0 3
37211: PUSH
37212: LD_INT 15
37214: PPUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 321
37224: PUSH
37225: LD_INT 2
37227: EQUAL
37228: ST_TO_ADDR
37229: GO 37479
37231: LD_INT 30
37233: DOUBLE
37234: EQUAL
37235: IFTRUE 37239
37237: GO 37264
37239: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37240: LD_ADDR_VAR 0 3
37244: PUSH
37245: LD_INT 20
37247: PPUSH
37248: LD_VAR 0 1
37252: PPUSH
37253: CALL_OW 321
37257: PUSH
37258: LD_INT 2
37260: EQUAL
37261: ST_TO_ADDR
37262: GO 37479
37264: LD_INT 28
37266: DOUBLE
37267: EQUAL
37268: IFTRUE 37278
37270: LD_INT 21
37272: DOUBLE
37273: EQUAL
37274: IFTRUE 37278
37276: GO 37303
37278: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37279: LD_ADDR_VAR 0 3
37283: PUSH
37284: LD_INT 21
37286: PPUSH
37287: LD_VAR 0 1
37291: PPUSH
37292: CALL_OW 321
37296: PUSH
37297: LD_INT 2
37299: EQUAL
37300: ST_TO_ADDR
37301: GO 37479
37303: LD_INT 16
37305: DOUBLE
37306: EQUAL
37307: IFTRUE 37311
37309: GO 37338
37311: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_EXP 52
37321: PPUSH
37322: LD_VAR 0 1
37326: PPUSH
37327: CALL_OW 321
37331: PUSH
37332: LD_INT 2
37334: EQUAL
37335: ST_TO_ADDR
37336: GO 37479
37338: LD_INT 19
37340: DOUBLE
37341: EQUAL
37342: IFTRUE 37352
37344: LD_INT 23
37346: DOUBLE
37347: EQUAL
37348: IFTRUE 37352
37350: GO 37379
37352: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37353: LD_ADDR_VAR 0 3
37357: PUSH
37358: LD_EXP 51
37362: PPUSH
37363: LD_VAR 0 1
37367: PPUSH
37368: CALL_OW 321
37372: PUSH
37373: LD_INT 2
37375: EQUAL
37376: ST_TO_ADDR
37377: GO 37479
37379: LD_INT 17
37381: DOUBLE
37382: EQUAL
37383: IFTRUE 37387
37385: GO 37412
37387: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37388: LD_ADDR_VAR 0 3
37392: PUSH
37393: LD_INT 39
37395: PPUSH
37396: LD_VAR 0 1
37400: PPUSH
37401: CALL_OW 321
37405: PUSH
37406: LD_INT 2
37408: EQUAL
37409: ST_TO_ADDR
37410: GO 37479
37412: LD_INT 18
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37420
37418: GO 37445
37420: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_INT 40
37428: PPUSH
37429: LD_VAR 0 1
37433: PPUSH
37434: CALL_OW 321
37438: PUSH
37439: LD_INT 2
37441: EQUAL
37442: ST_TO_ADDR
37443: GO 37479
37445: LD_INT 27
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37453
37451: GO 37478
37453: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: LD_INT 35
37461: PPUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 321
37471: PUSH
37472: LD_INT 2
37474: EQUAL
37475: ST_TO_ADDR
37476: GO 37479
37478: POP
// end ;
37479: LD_VAR 0 3
37483: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37484: LD_INT 0
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
// result := false ;
37497: LD_ADDR_VAR 0 6
37501: PUSH
37502: LD_INT 0
37504: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37505: LD_VAR 0 1
37509: NOT
37510: PUSH
37511: LD_VAR 0 1
37515: PPUSH
37516: CALL_OW 266
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: IN
37531: NOT
37532: OR
37533: PUSH
37534: LD_VAR 0 2
37538: NOT
37539: OR
37540: PUSH
37541: LD_VAR 0 5
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: LD_INT 3
37557: PUSH
37558: LD_INT 4
37560: PUSH
37561: LD_INT 5
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: IN
37572: NOT
37573: OR
37574: PUSH
37575: LD_VAR 0 3
37579: PPUSH
37580: LD_VAR 0 4
37584: PPUSH
37585: CALL_OW 488
37589: NOT
37590: OR
37591: IFFALSE 37595
// exit ;
37593: GO 38331
// side := GetSide ( depot ) ;
37595: LD_ADDR_VAR 0 9
37599: PUSH
37600: LD_VAR 0 1
37604: PPUSH
37605: CALL_OW 255
37609: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37610: LD_VAR 0 9
37614: PPUSH
37615: LD_VAR 0 2
37619: PPUSH
37620: CALL 37104 0 2
37624: NOT
37625: IFFALSE 37629
// exit ;
37627: GO 38331
// pom := GetBase ( depot ) ;
37629: LD_ADDR_VAR 0 10
37633: PUSH
37634: LD_VAR 0 1
37638: PPUSH
37639: CALL_OW 274
37643: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37644: LD_ADDR_VAR 0 11
37648: PUSH
37649: LD_VAR 0 2
37653: PPUSH
37654: LD_VAR 0 1
37658: PPUSH
37659: CALL_OW 248
37663: PPUSH
37664: CALL_OW 450
37668: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37669: LD_VAR 0 10
37673: PPUSH
37674: LD_INT 1
37676: PPUSH
37677: CALL_OW 275
37681: PUSH
37682: LD_VAR 0 11
37686: PUSH
37687: LD_INT 1
37689: ARRAY
37690: GREATEREQUAL
37691: PUSH
37692: LD_VAR 0 10
37696: PPUSH
37697: LD_INT 2
37699: PPUSH
37700: CALL_OW 275
37704: PUSH
37705: LD_VAR 0 11
37709: PUSH
37710: LD_INT 2
37712: ARRAY
37713: GREATEREQUAL
37714: AND
37715: PUSH
37716: LD_VAR 0 10
37720: PPUSH
37721: LD_INT 3
37723: PPUSH
37724: CALL_OW 275
37728: PUSH
37729: LD_VAR 0 11
37733: PUSH
37734: LD_INT 3
37736: ARRAY
37737: GREATEREQUAL
37738: AND
37739: NOT
37740: IFFALSE 37744
// exit ;
37742: GO 38331
// if GetBType ( depot ) = b_depot then
37744: LD_VAR 0 1
37748: PPUSH
37749: CALL_OW 266
37753: PUSH
37754: LD_INT 0
37756: EQUAL
37757: IFFALSE 37769
// dist := 28 else
37759: LD_ADDR_VAR 0 14
37763: PUSH
37764: LD_INT 28
37766: ST_TO_ADDR
37767: GO 37777
// dist := 36 ;
37769: LD_ADDR_VAR 0 14
37773: PUSH
37774: LD_INT 36
37776: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37777: LD_VAR 0 1
37781: PPUSH
37782: LD_VAR 0 3
37786: PPUSH
37787: LD_VAR 0 4
37791: PPUSH
37792: CALL_OW 297
37796: PUSH
37797: LD_VAR 0 14
37801: GREATER
37802: IFFALSE 37806
// exit ;
37804: GO 38331
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37806: LD_ADDR_VAR 0 12
37810: PUSH
37811: LD_VAR 0 2
37815: PPUSH
37816: LD_VAR 0 3
37820: PPUSH
37821: LD_VAR 0 4
37825: PPUSH
37826: LD_VAR 0 5
37830: PPUSH
37831: LD_VAR 0 1
37835: PPUSH
37836: CALL_OW 248
37840: PPUSH
37841: LD_INT 0
37843: PPUSH
37844: CALL 38336 0 6
37848: ST_TO_ADDR
// if not hexes then
37849: LD_VAR 0 12
37853: NOT
37854: IFFALSE 37858
// exit ;
37856: GO 38331
// hex := GetHexInfo ( x , y ) ;
37858: LD_ADDR_VAR 0 15
37862: PUSH
37863: LD_VAR 0 3
37867: PPUSH
37868: LD_VAR 0 4
37872: PPUSH
37873: CALL_OW 546
37877: ST_TO_ADDR
// if hex [ 1 ] then
37878: LD_VAR 0 15
37882: PUSH
37883: LD_INT 1
37885: ARRAY
37886: IFFALSE 37890
// exit ;
37888: GO 38331
// height := hex [ 2 ] ;
37890: LD_ADDR_VAR 0 13
37894: PUSH
37895: LD_VAR 0 15
37899: PUSH
37900: LD_INT 2
37902: ARRAY
37903: ST_TO_ADDR
// for i = 1 to hexes do
37904: LD_ADDR_VAR 0 7
37908: PUSH
37909: DOUBLE
37910: LD_INT 1
37912: DEC
37913: ST_TO_ADDR
37914: LD_VAR 0 12
37918: PUSH
37919: FOR_TO
37920: IFFALSE 38250
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37922: LD_VAR 0 12
37926: PUSH
37927: LD_VAR 0 7
37931: ARRAY
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PPUSH
37937: LD_VAR 0 12
37941: PUSH
37942: LD_VAR 0 7
37946: ARRAY
37947: PUSH
37948: LD_INT 2
37950: ARRAY
37951: PPUSH
37952: CALL_OW 488
37956: NOT
37957: PUSH
37958: LD_VAR 0 12
37962: PUSH
37963: LD_VAR 0 7
37967: ARRAY
37968: PUSH
37969: LD_INT 1
37971: ARRAY
37972: PPUSH
37973: LD_VAR 0 12
37977: PUSH
37978: LD_VAR 0 7
37982: ARRAY
37983: PUSH
37984: LD_INT 2
37986: ARRAY
37987: PPUSH
37988: CALL_OW 428
37992: PUSH
37993: LD_INT 0
37995: GREATER
37996: OR
37997: PUSH
37998: LD_VAR 0 12
38002: PUSH
38003: LD_VAR 0 7
38007: ARRAY
38008: PUSH
38009: LD_INT 1
38011: ARRAY
38012: PPUSH
38013: LD_VAR 0 12
38017: PUSH
38018: LD_VAR 0 7
38022: ARRAY
38023: PUSH
38024: LD_INT 2
38026: ARRAY
38027: PPUSH
38028: CALL_OW 351
38032: OR
38033: IFFALSE 38039
// exit ;
38035: POP
38036: POP
38037: GO 38331
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38039: LD_ADDR_VAR 0 8
38043: PUSH
38044: LD_VAR 0 12
38048: PUSH
38049: LD_VAR 0 7
38053: ARRAY
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 12
38063: PUSH
38064: LD_VAR 0 7
38068: ARRAY
38069: PUSH
38070: LD_INT 2
38072: ARRAY
38073: PPUSH
38074: CALL_OW 546
38078: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38079: LD_VAR 0 8
38083: PUSH
38084: LD_INT 1
38086: ARRAY
38087: PUSH
38088: LD_VAR 0 8
38092: PUSH
38093: LD_INT 2
38095: ARRAY
38096: PUSH
38097: LD_VAR 0 13
38101: PUSH
38102: LD_INT 2
38104: PLUS
38105: GREATER
38106: OR
38107: PUSH
38108: LD_VAR 0 8
38112: PUSH
38113: LD_INT 2
38115: ARRAY
38116: PUSH
38117: LD_VAR 0 13
38121: PUSH
38122: LD_INT 2
38124: MINUS
38125: LESS
38126: OR
38127: PUSH
38128: LD_VAR 0 8
38132: PUSH
38133: LD_INT 3
38135: ARRAY
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 8
38142: PUSH
38143: LD_INT 9
38145: PUSH
38146: LD_INT 10
38148: PUSH
38149: LD_INT 11
38151: PUSH
38152: LD_INT 12
38154: PUSH
38155: LD_INT 13
38157: PUSH
38158: LD_INT 16
38160: PUSH
38161: LD_INT 17
38163: PUSH
38164: LD_INT 18
38166: PUSH
38167: LD_INT 19
38169: PUSH
38170: LD_INT 20
38172: PUSH
38173: LD_INT 21
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: IN
38191: NOT
38192: OR
38193: PUSH
38194: LD_VAR 0 8
38198: PUSH
38199: LD_INT 5
38201: ARRAY
38202: NOT
38203: OR
38204: PUSH
38205: LD_VAR 0 8
38209: PUSH
38210: LD_INT 6
38212: ARRAY
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: LD_INT 7
38222: PUSH
38223: LD_INT 9
38225: PUSH
38226: LD_INT 10
38228: PUSH
38229: LD_INT 11
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: IN
38240: NOT
38241: OR
38242: IFFALSE 38248
// exit ;
38244: POP
38245: POP
38246: GO 38331
// end ;
38248: GO 37919
38250: POP
38251: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38252: LD_VAR 0 9
38256: PPUSH
38257: LD_VAR 0 3
38261: PPUSH
38262: LD_VAR 0 4
38266: PPUSH
38267: LD_INT 20
38269: PPUSH
38270: CALL 30277 0 4
38274: PUSH
38275: LD_INT 4
38277: ARRAY
38278: IFFALSE 38282
// exit ;
38280: GO 38331
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38282: LD_VAR 0 2
38286: PUSH
38287: LD_INT 29
38289: PUSH
38290: LD_INT 30
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: IN
38297: PUSH
38298: LD_VAR 0 3
38302: PPUSH
38303: LD_VAR 0 4
38307: PPUSH
38308: LD_VAR 0 9
38312: PPUSH
38313: CALL_OW 440
38317: NOT
38318: AND
38319: IFFALSE 38323
// exit ;
38321: GO 38331
// result := true ;
38323: LD_ADDR_VAR 0 6
38327: PUSH
38328: LD_INT 1
38330: ST_TO_ADDR
// end ;
38331: LD_VAR 0 6
38335: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38336: LD_INT 0
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
38347: PPUSH
38348: PPUSH
38349: PPUSH
38350: PPUSH
38351: PPUSH
38352: PPUSH
38353: PPUSH
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
// result = [ ] ;
38396: LD_ADDR_VAR 0 7
38400: PUSH
38401: EMPTY
38402: ST_TO_ADDR
// temp_list = [ ] ;
38403: LD_ADDR_VAR 0 9
38407: PUSH
38408: EMPTY
38409: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38410: LD_VAR 0 4
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 3
38426: PUSH
38427: LD_INT 4
38429: PUSH
38430: LD_INT 5
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: IN
38441: NOT
38442: PUSH
38443: LD_VAR 0 1
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: IN
38458: PUSH
38459: LD_VAR 0 5
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: LD_INT 2
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: IN
38478: NOT
38479: AND
38480: OR
38481: IFFALSE 38485
// exit ;
38483: GO 56876
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38485: LD_VAR 0 1
38489: PUSH
38490: LD_INT 6
38492: PUSH
38493: LD_INT 7
38495: PUSH
38496: LD_INT 8
38498: PUSH
38499: LD_INT 13
38501: PUSH
38502: LD_INT 12
38504: PUSH
38505: LD_INT 15
38507: PUSH
38508: LD_INT 11
38510: PUSH
38511: LD_INT 14
38513: PUSH
38514: LD_INT 10
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: IN
38528: IFFALSE 38538
// btype = b_lab ;
38530: LD_ADDR_VAR 0 1
38534: PUSH
38535: LD_INT 6
38537: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38538: LD_VAR 0 6
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: IN
38557: NOT
38558: PUSH
38559: LD_VAR 0 1
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 6
38578: PUSH
38579: LD_INT 36
38581: PUSH
38582: LD_INT 4
38584: PUSH
38585: LD_INT 5
38587: PUSH
38588: LD_INT 31
38590: PUSH
38591: LD_INT 32
38593: PUSH
38594: LD_INT 33
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: IN
38610: NOT
38611: PUSH
38612: LD_VAR 0 6
38616: PUSH
38617: LD_INT 1
38619: EQUAL
38620: AND
38621: OR
38622: PUSH
38623: LD_VAR 0 1
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 3
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: IN
38638: NOT
38639: PUSH
38640: LD_VAR 0 6
38644: PUSH
38645: LD_INT 2
38647: EQUAL
38648: AND
38649: OR
38650: IFFALSE 38660
// mode = 0 ;
38652: LD_ADDR_VAR 0 6
38656: PUSH
38657: LD_INT 0
38659: ST_TO_ADDR
// case mode of 0 :
38660: LD_VAR 0 6
38664: PUSH
38665: LD_INT 0
38667: DOUBLE
38668: EQUAL
38669: IFTRUE 38673
38671: GO 50126
38673: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38674: LD_ADDR_VAR 0 11
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 2
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38867: LD_ADDR_VAR 0 12
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: NEG
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 3
39024: NEG
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 3
39035: NEG
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39063: LD_ADDR_VAR 0 13
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: NEG
39211: PUSH
39212: LD_INT 3
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 3
39222: NEG
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 3
39234: NEG
39235: PUSH
39236: LD_INT 3
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39262: LD_ADDR_VAR 0 14
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 2
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: LD_INT 3
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 3
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39458: LD_ADDR_VAR 0 15
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 3
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39651: LD_ADDR_VAR 0 16
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 3
39808: PUSH
39809: LD_INT 3
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39844: LD_ADDR_VAR 0 17
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: NEG
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40074: LD_ADDR_VAR 0 18
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40304: LD_ADDR_VAR 0 19
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40534: LD_ADDR_VAR 0 20
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40764: LD_ADDR_VAR 0 21
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: LD_INT 2
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40994: LD_ADDR_VAR 0 22
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41224: LD_ADDR_VAR 0 23
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: LD_INT 3
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: LD_INT 3
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41504: LD_ADDR_VAR 0 24
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 2
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 2
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 3
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41780: LD_ADDR_VAR 0 25
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 3
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 3
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 3
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42054: LD_ADDR_VAR 0 26
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 2
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42330: LD_ADDR_VAR 0 27
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 3
42563: NEG
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 3
42575: NEG
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42610: LD_ADDR_VAR 0 28
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 3
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42892: LD_ADDR_VAR 0 29
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: LD_INT 3
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43171: LD_ADDR_VAR 0 30
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 3
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 2
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: LD_INT 3
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43449: LD_ADDR_VAR 0 31
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: LD_INT 3
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 3
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43727: LD_ADDR_VAR 0 32
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 3
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 3
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44005: LD_ADDR_VAR 0 33
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 3
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 3
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 3
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 3
44249: NEG
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44284: LD_ADDR_VAR 0 34
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 3
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 3
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44564: LD_ADDR_VAR 0 35
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44676: LD_ADDR_VAR 0 36
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44788: LD_ADDR_VAR 0 37
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44900: LD_ADDR_VAR 0 38
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45012: LD_ADDR_VAR 0 39
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45124: LD_ADDR_VAR 0 40
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45236: LD_ADDR_VAR 0 41
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 3
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: LD_INT 3
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: NEG
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 3
45545: NEG
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45586: LD_ADDR_VAR 0 42
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 3
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 3
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 3
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: NEG
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: LD_INT 3
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45936: LD_ADDR_VAR 0 43
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 3
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 3
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46284: LD_ADDR_VAR 0 44
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 3
46558: NEG
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: LD_INT 3
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46634: LD_ADDR_VAR 0 45
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 3
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 3
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 3
46931: NEG
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46984: LD_ADDR_VAR 0 46
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 3
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 3
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47332: LD_ADDR_VAR 0 47
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47483: LD_ADDR_VAR 0 48
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47630: LD_ADDR_VAR 0 49
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47774: LD_ADDR_VAR 0 50
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47918: LD_ADDR_VAR 0 51
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48065: LD_ADDR_VAR 0 52
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48216: LD_ADDR_VAR 0 53
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48446: LD_ADDR_VAR 0 54
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48676: LD_ADDR_VAR 0 55
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48906: LD_ADDR_VAR 0 56
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49136: LD_ADDR_VAR 0 57
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49366: LD_ADDR_VAR 0 58
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49596: LD_ADDR_VAR 0 59
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49684: LD_ADDR_VAR 0 60
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49772: LD_ADDR_VAR 0 61
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49860: LD_ADDR_VAR 0 62
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49948: LD_ADDR_VAR 0 63
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50036: LD_ADDR_VAR 0 64
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: ST_TO_ADDR
// end ; 1 :
50124: GO 56021
50126: LD_INT 1
50128: DOUBLE
50129: EQUAL
50130: IFTRUE 50134
50132: GO 52757
50134: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50135: LD_ADDR_VAR 0 11
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50179: LD_ADDR_VAR 0 12
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: LIST
50219: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50220: LD_ADDR_VAR 0 13
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 3
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50260: LD_ADDR_VAR 0 14
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: LIST
50300: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50301: LD_ADDR_VAR 0 15
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50345: LD_ADDR_VAR 0 16
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 3
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50391: LD_ADDR_VAR 0 17
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 3
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50435: LD_ADDR_VAR 0 18
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 3
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50476: LD_ADDR_VAR 0 19
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 3
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50516: LD_ADDR_VAR 0 20
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 3
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 3
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50557: LD_ADDR_VAR 0 21
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50601: LD_ADDR_VAR 0 22
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 3
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: NEG
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50647: LD_ADDR_VAR 0 23
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 3
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 4
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50691: LD_ADDR_VAR 0 24
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 4
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50732: LD_ADDR_VAR 0 25
50736: PUSH
50737: LD_INT 3
50739: PUSH
50740: LD_INT 3
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 4
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 4
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50772: LD_ADDR_VAR 0 26
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 3
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50813: LD_ADDR_VAR 0 27
50817: PUSH
50818: LD_INT 3
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 3
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 4
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50857: LD_ADDR_VAR 0 28
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: LD_INT 3
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: LD_INT 4
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 4
50888: NEG
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50903: LD_ADDR_VAR 0 29
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 3
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 4
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 4
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 5
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 5
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 4
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 6
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 6
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 5
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51058: LD_ADDR_VAR 0 30
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 3
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 4
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 4
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 5
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 5
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 5
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 6
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 6
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51201: LD_ADDR_VAR 0 31
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 3
51218: PUSH
51219: LD_INT 3
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 3
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 4
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 4
51248: PUSH
51249: LD_INT 4
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: LD_INT 4
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 5
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 5
51278: PUSH
51279: LD_INT 5
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: LD_INT 5
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 6
51298: PUSH
51299: LD_INT 5
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 6
51308: PUSH
51309: LD_INT 6
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 5
51318: PUSH
51319: LD_INT 6
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51340: LD_ADDR_VAR 0 32
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 4
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 4
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 3
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 5
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 5
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 4
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 6
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 6
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 5
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51483: LD_ADDR_VAR 0 33
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 4
51535: NEG
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 4
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 5
51569: NEG
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 5
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 5
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 6
51603: NEG
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 6
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51638: LD_ADDR_VAR 0 34
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: LD_INT 3
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: NEG
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 4
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 4
51693: NEG
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 4
51705: NEG
51706: PUSH
51707: LD_INT 4
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 4
51717: NEG
51718: PUSH
51719: LD_INT 5
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 5
51729: NEG
51730: PUSH
51731: LD_INT 4
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 5
51741: NEG
51742: PUSH
51743: LD_INT 5
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 5
51753: NEG
51754: PUSH
51755: LD_INT 6
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 6
51765: NEG
51766: PUSH
51767: LD_INT 5
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 6
51777: NEG
51778: PUSH
51779: LD_INT 6
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51801: LD_ADDR_VAR 0 41
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: LIST
51844: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51845: LD_ADDR_VAR 0 42
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51886: LD_ADDR_VAR 0 43
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51926: LD_ADDR_VAR 0 44
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 3
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51967: LD_ADDR_VAR 0 45
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52011: LD_ADDR_VAR 0 46
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: LD_INT 3
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 3
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52057: LD_ADDR_VAR 0 47
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 3
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52090: LD_ADDR_VAR 0 48
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52121: LD_ADDR_VAR 0 49
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52150: LD_ADDR_VAR 0 50
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52179: LD_ADDR_VAR 0 51
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52210: LD_ADDR_VAR 0 52
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52243: LD_ADDR_VAR 0 53
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 3
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 3
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52287: LD_ADDR_VAR 0 54
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52328: LD_ADDR_VAR 0 55
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52368: LD_ADDR_VAR 0 56
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 3
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 3
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52409: LD_ADDR_VAR 0 57
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: NEG
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52453: LD_ADDR_VAR 0 58
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: LD_INT 3
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 3
52484: NEG
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52499: LD_ADDR_VAR 0 59
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52543: LD_ADDR_VAR 0 60
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52584: LD_ADDR_VAR 0 61
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52624: LD_ADDR_VAR 0 62
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52665: LD_ADDR_VAR 0 63
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: LIST
52708: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52709: LD_ADDR_VAR 0 64
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: LD_INT 2
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// end ; 2 :
52755: GO 56021
52757: LD_INT 2
52759: DOUBLE
52760: EQUAL
52761: IFTRUE 52765
52763: GO 56020
52765: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52766: LD_ADDR_VAR 0 29
52770: PUSH
52771: LD_INT 4
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 4
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 5
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 5
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 5
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 3
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 4
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 4
52896: PUSH
52897: LD_INT 4
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 4
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 4
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: LD_INT 4
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 4
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 4
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 5
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 5
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 4
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 5
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 3
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 3
53049: NEG
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 3
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 4
53105: NEG
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 4
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 4
53128: NEG
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 4
53151: NEG
53152: PUSH
53153: LD_INT 4
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 4
53163: NEG
53164: PUSH
53165: LD_INT 5
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: LD_INT 4
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 3
53187: NEG
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 4
53199: NEG
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: LD_INT 4
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 5
53223: NEG
53224: PUSH
53225: LD_INT 5
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 5
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 5
53247: NEG
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53304: LD_ADDR_VAR 0 30
53308: PUSH
53309: LD_INT 4
53311: PUSH
53312: LD_INT 4
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 4
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 5
53331: PUSH
53332: LD_INT 4
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 5
53341: PUSH
53342: LD_INT 5
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 4
53351: PUSH
53352: LD_INT 5
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 4
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 5
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 5
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 4
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 4
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 4
53494: NEG
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 4
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 3
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 4
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 5
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 5
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 5
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 3
53585: NEG
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: LD_INT 4
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: LD_INT 3
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 4
53668: NEG
53669: PUSH
53670: LD_INT 4
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 4
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 4
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 5
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 4
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 3
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 4
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 5
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 3
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: LD_INT 5
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53851: LD_ADDR_VAR 0 31
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 4
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 3
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 5
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 4
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 5
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 4
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 4
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 4
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 4
54053: NEG
54054: PUSH
54055: LD_INT 4
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 4
54065: NEG
54066: PUSH
54067: LD_INT 5
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: LD_INT 4
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: LD_INT 3
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 4
54101: NEG
54102: PUSH
54103: LD_INT 3
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 5
54113: NEG
54114: PUSH
54115: LD_INT 4
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 5
54125: NEG
54126: PUSH
54127: LD_INT 5
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: LD_INT 5
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 5
54149: NEG
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 4
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 4
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 4
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 4
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 4
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 5
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 5
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 4
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 3
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 5
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54401: LD_ADDR_VAR 0 32
54405: PUSH
54406: LD_INT 4
54408: NEG
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 4
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 3
54431: NEG
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 3
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 4
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 5
54464: NEG
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 5
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 5
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: LD_INT 3
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: NEG
54523: PUSH
54524: LD_INT 4
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 3
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 4
54570: NEG
54571: PUSH
54572: LD_INT 3
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 4
54582: NEG
54583: PUSH
54584: LD_INT 4
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 4
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 4
54606: NEG
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 5
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 4
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 5
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 3
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: NEG
54709: PUSH
54710: LD_INT 5
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 4
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 4
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 4
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: PUSH
54814: LD_INT 4
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 4
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: LD_INT 4
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 5
54843: PUSH
54844: LD_INT 5
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 4
54853: PUSH
54854: LD_INT 5
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: LD_INT 4
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 5
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: LD_INT 5
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54948: LD_ADDR_VAR 0 33
54952: PUSH
54953: LD_INT 4
54955: NEG
54956: PUSH
54957: LD_INT 4
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 4
54967: NEG
54968: PUSH
54969: LD_INT 5
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: LD_INT 4
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: NEG
54992: PUSH
54993: LD_INT 3
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 4
55003: NEG
55004: PUSH
55005: LD_INT 3
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: LD_INT 4
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 5
55027: NEG
55028: PUSH
55029: LD_INT 5
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 3
55039: NEG
55040: PUSH
55041: LD_INT 5
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 5
55051: NEG
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 4
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 4
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 4
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 4
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 5
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 5
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 4
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 5
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 4
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 4
55288: PUSH
55289: LD_INT 4
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: LD_INT 4
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 4
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: LD_INT 4
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 4
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 4
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 5
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 5
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 4
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 3
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55486: LD_ADDR_VAR 0 34
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 4
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 5
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 4
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 3
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 4
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 5
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 5
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 3
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 4
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 4
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 4
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 4
55688: PUSH
55689: LD_INT 4
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 5
55708: PUSH
55709: LD_INT 4
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 5
55718: PUSH
55719: LD_INT 5
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 4
55728: PUSH
55729: LD_INT 5
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: LD_INT 4
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 5
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: LD_INT 5
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 4
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 4
55871: NEG
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 4
55882: NEG
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 4
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 5
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 5
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 5
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: ST_TO_ADDR
// end ; end ;
56018: GO 56021
56020: POP
// case btype of b_depot , b_warehouse :
56021: LD_VAR 0 1
56025: PUSH
56026: LD_INT 0
56028: DOUBLE
56029: EQUAL
56030: IFTRUE 56040
56032: LD_INT 1
56034: DOUBLE
56035: EQUAL
56036: IFTRUE 56040
56038: GO 56241
56040: POP
// case nation of nation_american :
56041: LD_VAR 0 5
56045: PUSH
56046: LD_INT 1
56048: DOUBLE
56049: EQUAL
56050: IFTRUE 56054
56052: GO 56110
56054: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56055: LD_ADDR_VAR 0 9
56059: PUSH
56060: LD_VAR 0 11
56064: PUSH
56065: LD_VAR 0 12
56069: PUSH
56070: LD_VAR 0 13
56074: PUSH
56075: LD_VAR 0 14
56079: PUSH
56080: LD_VAR 0 15
56084: PUSH
56085: LD_VAR 0 16
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: PUSH
56098: LD_VAR 0 4
56102: PUSH
56103: LD_INT 1
56105: PLUS
56106: ARRAY
56107: ST_TO_ADDR
56108: GO 56239
56110: LD_INT 2
56112: DOUBLE
56113: EQUAL
56114: IFTRUE 56118
56116: GO 56174
56118: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56119: LD_ADDR_VAR 0 9
56123: PUSH
56124: LD_VAR 0 17
56128: PUSH
56129: LD_VAR 0 18
56133: PUSH
56134: LD_VAR 0 19
56138: PUSH
56139: LD_VAR 0 20
56143: PUSH
56144: LD_VAR 0 21
56148: PUSH
56149: LD_VAR 0 22
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: PUSH
56162: LD_VAR 0 4
56166: PUSH
56167: LD_INT 1
56169: PLUS
56170: ARRAY
56171: ST_TO_ADDR
56172: GO 56239
56174: LD_INT 3
56176: DOUBLE
56177: EQUAL
56178: IFTRUE 56182
56180: GO 56238
56182: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56183: LD_ADDR_VAR 0 9
56187: PUSH
56188: LD_VAR 0 23
56192: PUSH
56193: LD_VAR 0 24
56197: PUSH
56198: LD_VAR 0 25
56202: PUSH
56203: LD_VAR 0 26
56207: PUSH
56208: LD_VAR 0 27
56212: PUSH
56213: LD_VAR 0 28
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: PUSH
56226: LD_VAR 0 4
56230: PUSH
56231: LD_INT 1
56233: PLUS
56234: ARRAY
56235: ST_TO_ADDR
56236: GO 56239
56238: POP
56239: GO 56794
56241: LD_INT 2
56243: DOUBLE
56244: EQUAL
56245: IFTRUE 56255
56247: LD_INT 3
56249: DOUBLE
56250: EQUAL
56251: IFTRUE 56255
56253: GO 56311
56255: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56256: LD_ADDR_VAR 0 9
56260: PUSH
56261: LD_VAR 0 29
56265: PUSH
56266: LD_VAR 0 30
56270: PUSH
56271: LD_VAR 0 31
56275: PUSH
56276: LD_VAR 0 32
56280: PUSH
56281: LD_VAR 0 33
56285: PUSH
56286: LD_VAR 0 34
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: LD_VAR 0 4
56303: PUSH
56304: LD_INT 1
56306: PLUS
56307: ARRAY
56308: ST_TO_ADDR
56309: GO 56794
56311: LD_INT 16
56313: DOUBLE
56314: EQUAL
56315: IFTRUE 56373
56317: LD_INT 17
56319: DOUBLE
56320: EQUAL
56321: IFTRUE 56373
56323: LD_INT 18
56325: DOUBLE
56326: EQUAL
56327: IFTRUE 56373
56329: LD_INT 19
56331: DOUBLE
56332: EQUAL
56333: IFTRUE 56373
56335: LD_INT 22
56337: DOUBLE
56338: EQUAL
56339: IFTRUE 56373
56341: LD_INT 20
56343: DOUBLE
56344: EQUAL
56345: IFTRUE 56373
56347: LD_INT 21
56349: DOUBLE
56350: EQUAL
56351: IFTRUE 56373
56353: LD_INT 23
56355: DOUBLE
56356: EQUAL
56357: IFTRUE 56373
56359: LD_INT 24
56361: DOUBLE
56362: EQUAL
56363: IFTRUE 56373
56365: LD_INT 25
56367: DOUBLE
56368: EQUAL
56369: IFTRUE 56373
56371: GO 56429
56373: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56374: LD_ADDR_VAR 0 9
56378: PUSH
56379: LD_VAR 0 35
56383: PUSH
56384: LD_VAR 0 36
56388: PUSH
56389: LD_VAR 0 37
56393: PUSH
56394: LD_VAR 0 38
56398: PUSH
56399: LD_VAR 0 39
56403: PUSH
56404: LD_VAR 0 40
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: PUSH
56417: LD_VAR 0 4
56421: PUSH
56422: LD_INT 1
56424: PLUS
56425: ARRAY
56426: ST_TO_ADDR
56427: GO 56794
56429: LD_INT 6
56431: DOUBLE
56432: EQUAL
56433: IFTRUE 56485
56435: LD_INT 7
56437: DOUBLE
56438: EQUAL
56439: IFTRUE 56485
56441: LD_INT 8
56443: DOUBLE
56444: EQUAL
56445: IFTRUE 56485
56447: LD_INT 13
56449: DOUBLE
56450: EQUAL
56451: IFTRUE 56485
56453: LD_INT 12
56455: DOUBLE
56456: EQUAL
56457: IFTRUE 56485
56459: LD_INT 15
56461: DOUBLE
56462: EQUAL
56463: IFTRUE 56485
56465: LD_INT 11
56467: DOUBLE
56468: EQUAL
56469: IFTRUE 56485
56471: LD_INT 14
56473: DOUBLE
56474: EQUAL
56475: IFTRUE 56485
56477: LD_INT 10
56479: DOUBLE
56480: EQUAL
56481: IFTRUE 56485
56483: GO 56541
56485: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56486: LD_ADDR_VAR 0 9
56490: PUSH
56491: LD_VAR 0 41
56495: PUSH
56496: LD_VAR 0 42
56500: PUSH
56501: LD_VAR 0 43
56505: PUSH
56506: LD_VAR 0 44
56510: PUSH
56511: LD_VAR 0 45
56515: PUSH
56516: LD_VAR 0 46
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: PUSH
56529: LD_VAR 0 4
56533: PUSH
56534: LD_INT 1
56536: PLUS
56537: ARRAY
56538: ST_TO_ADDR
56539: GO 56794
56541: LD_INT 36
56543: DOUBLE
56544: EQUAL
56545: IFTRUE 56549
56547: GO 56605
56549: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56550: LD_ADDR_VAR 0 9
56554: PUSH
56555: LD_VAR 0 47
56559: PUSH
56560: LD_VAR 0 48
56564: PUSH
56565: LD_VAR 0 49
56569: PUSH
56570: LD_VAR 0 50
56574: PUSH
56575: LD_VAR 0 51
56579: PUSH
56580: LD_VAR 0 52
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: PUSH
56593: LD_VAR 0 4
56597: PUSH
56598: LD_INT 1
56600: PLUS
56601: ARRAY
56602: ST_TO_ADDR
56603: GO 56794
56605: LD_INT 4
56607: DOUBLE
56608: EQUAL
56609: IFTRUE 56631
56611: LD_INT 5
56613: DOUBLE
56614: EQUAL
56615: IFTRUE 56631
56617: LD_INT 34
56619: DOUBLE
56620: EQUAL
56621: IFTRUE 56631
56623: LD_INT 37
56625: DOUBLE
56626: EQUAL
56627: IFTRUE 56631
56629: GO 56687
56631: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56632: LD_ADDR_VAR 0 9
56636: PUSH
56637: LD_VAR 0 53
56641: PUSH
56642: LD_VAR 0 54
56646: PUSH
56647: LD_VAR 0 55
56651: PUSH
56652: LD_VAR 0 56
56656: PUSH
56657: LD_VAR 0 57
56661: PUSH
56662: LD_VAR 0 58
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: PUSH
56675: LD_VAR 0 4
56679: PUSH
56680: LD_INT 1
56682: PLUS
56683: ARRAY
56684: ST_TO_ADDR
56685: GO 56794
56687: LD_INT 31
56689: DOUBLE
56690: EQUAL
56691: IFTRUE 56737
56693: LD_INT 32
56695: DOUBLE
56696: EQUAL
56697: IFTRUE 56737
56699: LD_INT 33
56701: DOUBLE
56702: EQUAL
56703: IFTRUE 56737
56705: LD_INT 27
56707: DOUBLE
56708: EQUAL
56709: IFTRUE 56737
56711: LD_INT 26
56713: DOUBLE
56714: EQUAL
56715: IFTRUE 56737
56717: LD_INT 28
56719: DOUBLE
56720: EQUAL
56721: IFTRUE 56737
56723: LD_INT 29
56725: DOUBLE
56726: EQUAL
56727: IFTRUE 56737
56729: LD_INT 30
56731: DOUBLE
56732: EQUAL
56733: IFTRUE 56737
56735: GO 56793
56737: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56738: LD_ADDR_VAR 0 9
56742: PUSH
56743: LD_VAR 0 59
56747: PUSH
56748: LD_VAR 0 60
56752: PUSH
56753: LD_VAR 0 61
56757: PUSH
56758: LD_VAR 0 62
56762: PUSH
56763: LD_VAR 0 63
56767: PUSH
56768: LD_VAR 0 64
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: PUSH
56781: LD_VAR 0 4
56785: PUSH
56786: LD_INT 1
56788: PLUS
56789: ARRAY
56790: ST_TO_ADDR
56791: GO 56794
56793: POP
// temp_list2 = [ ] ;
56794: LD_ADDR_VAR 0 10
56798: PUSH
56799: EMPTY
56800: ST_TO_ADDR
// for i in temp_list do
56801: LD_ADDR_VAR 0 8
56805: PUSH
56806: LD_VAR 0 9
56810: PUSH
56811: FOR_IN
56812: IFFALSE 56864
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56814: LD_ADDR_VAR 0 10
56818: PUSH
56819: LD_VAR 0 10
56823: PUSH
56824: LD_VAR 0 8
56828: PUSH
56829: LD_INT 1
56831: ARRAY
56832: PUSH
56833: LD_VAR 0 2
56837: PLUS
56838: PUSH
56839: LD_VAR 0 8
56843: PUSH
56844: LD_INT 2
56846: ARRAY
56847: PUSH
56848: LD_VAR 0 3
56852: PLUS
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: ADD
56861: ST_TO_ADDR
56862: GO 56811
56864: POP
56865: POP
// result = temp_list2 ;
56866: LD_ADDR_VAR 0 7
56870: PUSH
56871: LD_VAR 0 10
56875: ST_TO_ADDR
// end ;
56876: LD_VAR 0 7
56880: RET
// export function EnemyInRange ( unit , dist ) ; begin
56881: LD_INT 0
56883: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56884: LD_ADDR_VAR 0 3
56888: PUSH
56889: LD_VAR 0 1
56893: PPUSH
56894: CALL_OW 255
56898: PPUSH
56899: LD_VAR 0 1
56903: PPUSH
56904: CALL_OW 250
56908: PPUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 251
56918: PPUSH
56919: LD_VAR 0 2
56923: PPUSH
56924: CALL 30277 0 4
56928: PUSH
56929: LD_INT 4
56931: ARRAY
56932: ST_TO_ADDR
// end ;
56933: LD_VAR 0 3
56937: RET
// export function PlayerSeeMe ( unit ) ; begin
56938: LD_INT 0
56940: PPUSH
// result := See ( your_side , unit ) ;
56941: LD_ADDR_VAR 0 2
56945: PUSH
56946: LD_OWVAR 2
56950: PPUSH
56951: LD_VAR 0 1
56955: PPUSH
56956: CALL_OW 292
56960: ST_TO_ADDR
// end ;
56961: LD_VAR 0 2
56965: RET
// export function ReverseDir ( unit ) ; begin
56966: LD_INT 0
56968: PPUSH
// if not unit then
56969: LD_VAR 0 1
56973: NOT
56974: IFFALSE 56978
// exit ;
56976: GO 57001
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56978: LD_ADDR_VAR 0 2
56982: PUSH
56983: LD_VAR 0 1
56987: PPUSH
56988: CALL_OW 254
56992: PUSH
56993: LD_INT 3
56995: PLUS
56996: PUSH
56997: LD_INT 6
56999: MOD
57000: ST_TO_ADDR
// end ;
57001: LD_VAR 0 2
57005: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57006: LD_INT 0
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
57012: PPUSH
// if not hexes then
57013: LD_VAR 0 2
57017: NOT
57018: IFFALSE 57022
// exit ;
57020: GO 57170
// dist := 9999 ;
57022: LD_ADDR_VAR 0 5
57026: PUSH
57027: LD_INT 9999
57029: ST_TO_ADDR
// for i = 1 to hexes do
57030: LD_ADDR_VAR 0 4
57034: PUSH
57035: DOUBLE
57036: LD_INT 1
57038: DEC
57039: ST_TO_ADDR
57040: LD_VAR 0 2
57044: PUSH
57045: FOR_TO
57046: IFFALSE 57158
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57048: LD_VAR 0 1
57052: PPUSH
57053: LD_VAR 0 2
57057: PUSH
57058: LD_VAR 0 4
57062: ARRAY
57063: PUSH
57064: LD_INT 1
57066: ARRAY
57067: PPUSH
57068: LD_VAR 0 2
57072: PUSH
57073: LD_VAR 0 4
57077: ARRAY
57078: PUSH
57079: LD_INT 2
57081: ARRAY
57082: PPUSH
57083: CALL_OW 297
57087: PUSH
57088: LD_VAR 0 5
57092: LESS
57093: IFFALSE 57156
// begin hex := hexes [ i ] ;
57095: LD_ADDR_VAR 0 7
57099: PUSH
57100: LD_VAR 0 2
57104: PUSH
57105: LD_VAR 0 4
57109: ARRAY
57110: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57111: LD_ADDR_VAR 0 5
57115: PUSH
57116: LD_VAR 0 1
57120: PPUSH
57121: LD_VAR 0 2
57125: PUSH
57126: LD_VAR 0 4
57130: ARRAY
57131: PUSH
57132: LD_INT 1
57134: ARRAY
57135: PPUSH
57136: LD_VAR 0 2
57140: PUSH
57141: LD_VAR 0 4
57145: ARRAY
57146: PUSH
57147: LD_INT 2
57149: ARRAY
57150: PPUSH
57151: CALL_OW 297
57155: ST_TO_ADDR
// end ; end ;
57156: GO 57045
57158: POP
57159: POP
// result := hex ;
57160: LD_ADDR_VAR 0 3
57164: PUSH
57165: LD_VAR 0 7
57169: ST_TO_ADDR
// end ;
57170: LD_VAR 0 3
57174: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57175: LD_INT 0
57177: PPUSH
57178: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57179: LD_VAR 0 1
57183: NOT
57184: PUSH
57185: LD_VAR 0 1
57189: PUSH
57190: LD_INT 21
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 23
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PPUSH
57214: CALL_OW 69
57218: IN
57219: NOT
57220: OR
57221: IFFALSE 57225
// exit ;
57223: GO 57272
// for i = 1 to 3 do
57225: LD_ADDR_VAR 0 3
57229: PUSH
57230: DOUBLE
57231: LD_INT 1
57233: DEC
57234: ST_TO_ADDR
57235: LD_INT 3
57237: PUSH
57238: FOR_TO
57239: IFFALSE 57270
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57241: LD_VAR 0 1
57245: PPUSH
57246: CALL_OW 250
57250: PPUSH
57251: LD_VAR 0 1
57255: PPUSH
57256: CALL_OW 251
57260: PPUSH
57261: LD_INT 1
57263: PPUSH
57264: CALL_OW 453
57268: GO 57238
57270: POP
57271: POP
// end ;
57272: LD_VAR 0 2
57276: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57277: LD_INT 0
57279: PPUSH
57280: PPUSH
57281: PPUSH
57282: PPUSH
57283: PPUSH
57284: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57285: LD_VAR 0 1
57289: NOT
57290: PUSH
57291: LD_VAR 0 2
57295: NOT
57296: OR
57297: PUSH
57298: LD_VAR 0 1
57302: PPUSH
57303: CALL_OW 314
57307: OR
57308: IFFALSE 57312
// exit ;
57310: GO 57753
// x := GetX ( enemy_unit ) ;
57312: LD_ADDR_VAR 0 7
57316: PUSH
57317: LD_VAR 0 2
57321: PPUSH
57322: CALL_OW 250
57326: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57327: LD_ADDR_VAR 0 8
57331: PUSH
57332: LD_VAR 0 2
57336: PPUSH
57337: CALL_OW 251
57341: ST_TO_ADDR
// if not x or not y then
57342: LD_VAR 0 7
57346: NOT
57347: PUSH
57348: LD_VAR 0 8
57352: NOT
57353: OR
57354: IFFALSE 57358
// exit ;
57356: GO 57753
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57358: LD_ADDR_VAR 0 6
57362: PUSH
57363: LD_VAR 0 7
57367: PPUSH
57368: LD_INT 0
57370: PPUSH
57371: LD_INT 4
57373: PPUSH
57374: CALL_OW 272
57378: PUSH
57379: LD_VAR 0 8
57383: PPUSH
57384: LD_INT 0
57386: PPUSH
57387: LD_INT 4
57389: PPUSH
57390: CALL_OW 273
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_VAR 0 7
57403: PPUSH
57404: LD_INT 1
57406: PPUSH
57407: LD_INT 4
57409: PPUSH
57410: CALL_OW 272
57414: PUSH
57415: LD_VAR 0 8
57419: PPUSH
57420: LD_INT 1
57422: PPUSH
57423: LD_INT 4
57425: PPUSH
57426: CALL_OW 273
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_VAR 0 7
57439: PPUSH
57440: LD_INT 2
57442: PPUSH
57443: LD_INT 4
57445: PPUSH
57446: CALL_OW 272
57450: PUSH
57451: LD_VAR 0 8
57455: PPUSH
57456: LD_INT 2
57458: PPUSH
57459: LD_INT 4
57461: PPUSH
57462: CALL_OW 273
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_VAR 0 7
57475: PPUSH
57476: LD_INT 3
57478: PPUSH
57479: LD_INT 4
57481: PPUSH
57482: CALL_OW 272
57486: PUSH
57487: LD_VAR 0 8
57491: PPUSH
57492: LD_INT 3
57494: PPUSH
57495: LD_INT 4
57497: PPUSH
57498: CALL_OW 273
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_VAR 0 7
57511: PPUSH
57512: LD_INT 4
57514: PPUSH
57515: LD_INT 4
57517: PPUSH
57518: CALL_OW 272
57522: PUSH
57523: LD_VAR 0 8
57527: PPUSH
57528: LD_INT 4
57530: PPUSH
57531: LD_INT 4
57533: PPUSH
57534: CALL_OW 273
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_VAR 0 7
57547: PPUSH
57548: LD_INT 5
57550: PPUSH
57551: LD_INT 4
57553: PPUSH
57554: CALL_OW 272
57558: PUSH
57559: LD_VAR 0 8
57563: PPUSH
57564: LD_INT 5
57566: PPUSH
57567: LD_INT 4
57569: PPUSH
57570: CALL_OW 273
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: ST_TO_ADDR
// for i = tmp downto 1 do
57587: LD_ADDR_VAR 0 4
57591: PUSH
57592: DOUBLE
57593: LD_VAR 0 6
57597: INC
57598: ST_TO_ADDR
57599: LD_INT 1
57601: PUSH
57602: FOR_DOWNTO
57603: IFFALSE 57704
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57605: LD_VAR 0 6
57609: PUSH
57610: LD_VAR 0 4
57614: ARRAY
57615: PUSH
57616: LD_INT 1
57618: ARRAY
57619: PPUSH
57620: LD_VAR 0 6
57624: PUSH
57625: LD_VAR 0 4
57629: ARRAY
57630: PUSH
57631: LD_INT 2
57633: ARRAY
57634: PPUSH
57635: CALL_OW 488
57639: NOT
57640: PUSH
57641: LD_VAR 0 6
57645: PUSH
57646: LD_VAR 0 4
57650: ARRAY
57651: PUSH
57652: LD_INT 1
57654: ARRAY
57655: PPUSH
57656: LD_VAR 0 6
57660: PUSH
57661: LD_VAR 0 4
57665: ARRAY
57666: PUSH
57667: LD_INT 2
57669: ARRAY
57670: PPUSH
57671: CALL_OW 428
57675: PUSH
57676: LD_INT 0
57678: NONEQUAL
57679: OR
57680: IFFALSE 57702
// tmp := Delete ( tmp , i ) ;
57682: LD_ADDR_VAR 0 6
57686: PUSH
57687: LD_VAR 0 6
57691: PPUSH
57692: LD_VAR 0 4
57696: PPUSH
57697: CALL_OW 3
57701: ST_TO_ADDR
57702: GO 57602
57704: POP
57705: POP
// j := GetClosestHex ( unit , tmp ) ;
57706: LD_ADDR_VAR 0 5
57710: PUSH
57711: LD_VAR 0 1
57715: PPUSH
57716: LD_VAR 0 6
57720: PPUSH
57721: CALL 57006 0 2
57725: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57726: LD_VAR 0 1
57730: PPUSH
57731: LD_VAR 0 5
57735: PUSH
57736: LD_INT 1
57738: ARRAY
57739: PPUSH
57740: LD_VAR 0 5
57744: PUSH
57745: LD_INT 2
57747: ARRAY
57748: PPUSH
57749: CALL_OW 111
// end ;
57753: LD_VAR 0 3
57757: RET
// export function PrepareApemanSoldier ( ) ; begin
57758: LD_INT 0
57760: PPUSH
// uc_nation := 0 ;
57761: LD_ADDR_OWVAR 21
57765: PUSH
57766: LD_INT 0
57768: ST_TO_ADDR
// hc_sex := sex_male ;
57769: LD_ADDR_OWVAR 27
57773: PUSH
57774: LD_INT 1
57776: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57777: LD_ADDR_OWVAR 28
57781: PUSH
57782: LD_INT 15
57784: ST_TO_ADDR
// hc_gallery :=  ;
57785: LD_ADDR_OWVAR 33
57789: PUSH
57790: LD_STRING 
57792: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57793: LD_ADDR_OWVAR 31
57797: PUSH
57798: LD_INT 0
57800: PPUSH
57801: LD_INT 3
57803: PPUSH
57804: CALL_OW 12
57808: PUSH
57809: LD_INT 0
57811: PPUSH
57812: LD_INT 3
57814: PPUSH
57815: CALL_OW 12
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: ST_TO_ADDR
// end ;
57832: LD_VAR 0 1
57836: RET
// export function PrepareApemanEngineer ( ) ; begin
57837: LD_INT 0
57839: PPUSH
// uc_nation := 0 ;
57840: LD_ADDR_OWVAR 21
57844: PUSH
57845: LD_INT 0
57847: ST_TO_ADDR
// hc_sex := sex_male ;
57848: LD_ADDR_OWVAR 27
57852: PUSH
57853: LD_INT 1
57855: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57856: LD_ADDR_OWVAR 28
57860: PUSH
57861: LD_INT 16
57863: ST_TO_ADDR
// hc_gallery :=  ;
57864: LD_ADDR_OWVAR 33
57868: PUSH
57869: LD_STRING 
57871: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57872: LD_ADDR_OWVAR 31
57876: PUSH
57877: LD_INT 0
57879: PPUSH
57880: LD_INT 3
57882: PPUSH
57883: CALL_OW 12
57887: PUSH
57888: LD_INT 0
57890: PPUSH
57891: LD_INT 3
57893: PPUSH
57894: CALL_OW 12
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: ST_TO_ADDR
// end ;
57911: LD_VAR 0 1
57915: RET
// export function PrepareApeman ( agressivity ) ; begin
57916: LD_INT 0
57918: PPUSH
// uc_side := 0 ;
57919: LD_ADDR_OWVAR 20
57923: PUSH
57924: LD_INT 0
57926: ST_TO_ADDR
// uc_nation := 0 ;
57927: LD_ADDR_OWVAR 21
57931: PUSH
57932: LD_INT 0
57934: ST_TO_ADDR
// hc_sex := sex_male ;
57935: LD_ADDR_OWVAR 27
57939: PUSH
57940: LD_INT 1
57942: ST_TO_ADDR
// hc_class := class_apeman ;
57943: LD_ADDR_OWVAR 28
57947: PUSH
57948: LD_INT 12
57950: ST_TO_ADDR
// hc_gallery :=  ;
57951: LD_ADDR_OWVAR 33
57955: PUSH
57956: LD_STRING 
57958: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57959: LD_ADDR_OWVAR 35
57963: PUSH
57964: LD_VAR 0 1
57968: NEG
57969: PPUSH
57970: LD_VAR 0 1
57974: PPUSH
57975: CALL_OW 12
57979: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57980: LD_ADDR_OWVAR 31
57984: PUSH
57985: LD_INT 0
57987: PPUSH
57988: LD_INT 3
57990: PPUSH
57991: CALL_OW 12
57995: PUSH
57996: LD_INT 0
57998: PPUSH
57999: LD_INT 3
58001: PPUSH
58002: CALL_OW 12
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// end ;
58019: LD_VAR 0 2
58023: RET
// export function PrepareTiger ( agressivity ) ; begin
58024: LD_INT 0
58026: PPUSH
// uc_side := 0 ;
58027: LD_ADDR_OWVAR 20
58031: PUSH
58032: LD_INT 0
58034: ST_TO_ADDR
// uc_nation := 0 ;
58035: LD_ADDR_OWVAR 21
58039: PUSH
58040: LD_INT 0
58042: ST_TO_ADDR
// hc_class := class_tiger ;
58043: LD_ADDR_OWVAR 28
58047: PUSH
58048: LD_INT 14
58050: ST_TO_ADDR
// hc_gallery :=  ;
58051: LD_ADDR_OWVAR 33
58055: PUSH
58056: LD_STRING 
58058: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58059: LD_ADDR_OWVAR 35
58063: PUSH
58064: LD_VAR 0 1
58068: NEG
58069: PPUSH
58070: LD_VAR 0 1
58074: PPUSH
58075: CALL_OW 12
58079: ST_TO_ADDR
// end ;
58080: LD_VAR 0 2
58084: RET
// export function PrepareEnchidna ( ) ; begin
58085: LD_INT 0
58087: PPUSH
// uc_side := 0 ;
58088: LD_ADDR_OWVAR 20
58092: PUSH
58093: LD_INT 0
58095: ST_TO_ADDR
// uc_nation := 0 ;
58096: LD_ADDR_OWVAR 21
58100: PUSH
58101: LD_INT 0
58103: ST_TO_ADDR
// hc_class := class_baggie ;
58104: LD_ADDR_OWVAR 28
58108: PUSH
58109: LD_INT 13
58111: ST_TO_ADDR
// hc_gallery :=  ;
58112: LD_ADDR_OWVAR 33
58116: PUSH
58117: LD_STRING 
58119: ST_TO_ADDR
// end ;
58120: LD_VAR 0 1
58124: RET
// export function PrepareFrog ( ) ; begin
58125: LD_INT 0
58127: PPUSH
// uc_side := 0 ;
58128: LD_ADDR_OWVAR 20
58132: PUSH
58133: LD_INT 0
58135: ST_TO_ADDR
// uc_nation := 0 ;
58136: LD_ADDR_OWVAR 21
58140: PUSH
58141: LD_INT 0
58143: ST_TO_ADDR
// hc_class := class_frog ;
58144: LD_ADDR_OWVAR 28
58148: PUSH
58149: LD_INT 19
58151: ST_TO_ADDR
// hc_gallery :=  ;
58152: LD_ADDR_OWVAR 33
58156: PUSH
58157: LD_STRING 
58159: ST_TO_ADDR
// end ;
58160: LD_VAR 0 1
58164: RET
// export function PrepareFish ( ) ; begin
58165: LD_INT 0
58167: PPUSH
// uc_side := 0 ;
58168: LD_ADDR_OWVAR 20
58172: PUSH
58173: LD_INT 0
58175: ST_TO_ADDR
// uc_nation := 0 ;
58176: LD_ADDR_OWVAR 21
58180: PUSH
58181: LD_INT 0
58183: ST_TO_ADDR
// hc_class := class_fish ;
58184: LD_ADDR_OWVAR 28
58188: PUSH
58189: LD_INT 20
58191: ST_TO_ADDR
// hc_gallery :=  ;
58192: LD_ADDR_OWVAR 33
58196: PUSH
58197: LD_STRING 
58199: ST_TO_ADDR
// end ;
58200: LD_VAR 0 1
58204: RET
// export function PrepareBird ( ) ; begin
58205: LD_INT 0
58207: PPUSH
// uc_side := 0 ;
58208: LD_ADDR_OWVAR 20
58212: PUSH
58213: LD_INT 0
58215: ST_TO_ADDR
// uc_nation := 0 ;
58216: LD_ADDR_OWVAR 21
58220: PUSH
58221: LD_INT 0
58223: ST_TO_ADDR
// hc_class := class_phororhacos ;
58224: LD_ADDR_OWVAR 28
58228: PUSH
58229: LD_INT 18
58231: ST_TO_ADDR
// hc_gallery :=  ;
58232: LD_ADDR_OWVAR 33
58236: PUSH
58237: LD_STRING 
58239: ST_TO_ADDR
// end ;
58240: LD_VAR 0 1
58244: RET
// export function PrepareHorse ( ) ; begin
58245: LD_INT 0
58247: PPUSH
// uc_side := 0 ;
58248: LD_ADDR_OWVAR 20
58252: PUSH
58253: LD_INT 0
58255: ST_TO_ADDR
// uc_nation := 0 ;
58256: LD_ADDR_OWVAR 21
58260: PUSH
58261: LD_INT 0
58263: ST_TO_ADDR
// hc_class := class_horse ;
58264: LD_ADDR_OWVAR 28
58268: PUSH
58269: LD_INT 21
58271: ST_TO_ADDR
// hc_gallery :=  ;
58272: LD_ADDR_OWVAR 33
58276: PUSH
58277: LD_STRING 
58279: ST_TO_ADDR
// end ;
58280: LD_VAR 0 1
58284: RET
// export function PrepareMastodont ( ) ; begin
58285: LD_INT 0
58287: PPUSH
// uc_side := 0 ;
58288: LD_ADDR_OWVAR 20
58292: PUSH
58293: LD_INT 0
58295: ST_TO_ADDR
// uc_nation := 0 ;
58296: LD_ADDR_OWVAR 21
58300: PUSH
58301: LD_INT 0
58303: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58304: LD_ADDR_OWVAR 37
58308: PUSH
58309: LD_INT 31
58311: ST_TO_ADDR
// vc_control := control_rider ;
58312: LD_ADDR_OWVAR 38
58316: PUSH
58317: LD_INT 4
58319: ST_TO_ADDR
// end ;
58320: LD_VAR 0 1
58324: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
58329: PPUSH
// uc_side = 0 ;
58330: LD_ADDR_OWVAR 20
58334: PUSH
58335: LD_INT 0
58337: ST_TO_ADDR
// uc_nation = 0 ;
58338: LD_ADDR_OWVAR 21
58342: PUSH
58343: LD_INT 0
58345: ST_TO_ADDR
// InitHc_All ( ) ;
58346: CALL_OW 584
// InitVc ;
58350: CALL_OW 20
// if mastodonts then
58354: LD_VAR 0 6
58358: IFFALSE 58425
// for i = 1 to mastodonts do
58360: LD_ADDR_VAR 0 11
58364: PUSH
58365: DOUBLE
58366: LD_INT 1
58368: DEC
58369: ST_TO_ADDR
58370: LD_VAR 0 6
58374: PUSH
58375: FOR_TO
58376: IFFALSE 58423
// begin vc_chassis := 31 ;
58378: LD_ADDR_OWVAR 37
58382: PUSH
58383: LD_INT 31
58385: ST_TO_ADDR
// vc_control := control_rider ;
58386: LD_ADDR_OWVAR 38
58390: PUSH
58391: LD_INT 4
58393: ST_TO_ADDR
// animal := CreateVehicle ;
58394: LD_ADDR_VAR 0 12
58398: PUSH
58399: CALL_OW 45
58403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58404: LD_VAR 0 12
58408: PPUSH
58409: LD_VAR 0 8
58413: PPUSH
58414: LD_INT 0
58416: PPUSH
58417: CALL 60560 0 3
// end ;
58421: GO 58375
58423: POP
58424: POP
// if horses then
58425: LD_VAR 0 5
58429: IFFALSE 58496
// for i = 1 to horses do
58431: LD_ADDR_VAR 0 11
58435: PUSH
58436: DOUBLE
58437: LD_INT 1
58439: DEC
58440: ST_TO_ADDR
58441: LD_VAR 0 5
58445: PUSH
58446: FOR_TO
58447: IFFALSE 58494
// begin hc_class := 21 ;
58449: LD_ADDR_OWVAR 28
58453: PUSH
58454: LD_INT 21
58456: ST_TO_ADDR
// hc_gallery :=  ;
58457: LD_ADDR_OWVAR 33
58461: PUSH
58462: LD_STRING 
58464: ST_TO_ADDR
// animal := CreateHuman ;
58465: LD_ADDR_VAR 0 12
58469: PUSH
58470: CALL_OW 44
58474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58475: LD_VAR 0 12
58479: PPUSH
58480: LD_VAR 0 8
58484: PPUSH
58485: LD_INT 0
58487: PPUSH
58488: CALL 60560 0 3
// end ;
58492: GO 58446
58494: POP
58495: POP
// if birds then
58496: LD_VAR 0 1
58500: IFFALSE 58567
// for i = 1 to birds do
58502: LD_ADDR_VAR 0 11
58506: PUSH
58507: DOUBLE
58508: LD_INT 1
58510: DEC
58511: ST_TO_ADDR
58512: LD_VAR 0 1
58516: PUSH
58517: FOR_TO
58518: IFFALSE 58565
// begin hc_class = 18 ;
58520: LD_ADDR_OWVAR 28
58524: PUSH
58525: LD_INT 18
58527: ST_TO_ADDR
// hc_gallery =  ;
58528: LD_ADDR_OWVAR 33
58532: PUSH
58533: LD_STRING 
58535: ST_TO_ADDR
// animal := CreateHuman ;
58536: LD_ADDR_VAR 0 12
58540: PUSH
58541: CALL_OW 44
58545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58546: LD_VAR 0 12
58550: PPUSH
58551: LD_VAR 0 8
58555: PPUSH
58556: LD_INT 0
58558: PPUSH
58559: CALL 60560 0 3
// end ;
58563: GO 58517
58565: POP
58566: POP
// if tigers then
58567: LD_VAR 0 2
58571: IFFALSE 58655
// for i = 1 to tigers do
58573: LD_ADDR_VAR 0 11
58577: PUSH
58578: DOUBLE
58579: LD_INT 1
58581: DEC
58582: ST_TO_ADDR
58583: LD_VAR 0 2
58587: PUSH
58588: FOR_TO
58589: IFFALSE 58653
// begin hc_class = class_tiger ;
58591: LD_ADDR_OWVAR 28
58595: PUSH
58596: LD_INT 14
58598: ST_TO_ADDR
// hc_gallery =  ;
58599: LD_ADDR_OWVAR 33
58603: PUSH
58604: LD_STRING 
58606: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58607: LD_ADDR_OWVAR 35
58611: PUSH
58612: LD_INT 7
58614: NEG
58615: PPUSH
58616: LD_INT 7
58618: PPUSH
58619: CALL_OW 12
58623: ST_TO_ADDR
// animal := CreateHuman ;
58624: LD_ADDR_VAR 0 12
58628: PUSH
58629: CALL_OW 44
58633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58634: LD_VAR 0 12
58638: PPUSH
58639: LD_VAR 0 8
58643: PPUSH
58644: LD_INT 0
58646: PPUSH
58647: CALL 60560 0 3
// end ;
58651: GO 58588
58653: POP
58654: POP
// if apemans then
58655: LD_VAR 0 3
58659: IFFALSE 58782
// for i = 1 to apemans do
58661: LD_ADDR_VAR 0 11
58665: PUSH
58666: DOUBLE
58667: LD_INT 1
58669: DEC
58670: ST_TO_ADDR
58671: LD_VAR 0 3
58675: PUSH
58676: FOR_TO
58677: IFFALSE 58780
// begin hc_class = class_apeman ;
58679: LD_ADDR_OWVAR 28
58683: PUSH
58684: LD_INT 12
58686: ST_TO_ADDR
// hc_gallery =  ;
58687: LD_ADDR_OWVAR 33
58691: PUSH
58692: LD_STRING 
58694: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58695: LD_ADDR_OWVAR 35
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PPUSH
58704: LD_INT 2
58706: PPUSH
58707: CALL_OW 12
58711: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58712: LD_ADDR_OWVAR 31
58716: PUSH
58717: LD_INT 1
58719: PPUSH
58720: LD_INT 3
58722: PPUSH
58723: CALL_OW 12
58727: PUSH
58728: LD_INT 1
58730: PPUSH
58731: LD_INT 3
58733: PPUSH
58734: CALL_OW 12
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: ST_TO_ADDR
// animal := CreateHuman ;
58751: LD_ADDR_VAR 0 12
58755: PUSH
58756: CALL_OW 44
58760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58761: LD_VAR 0 12
58765: PPUSH
58766: LD_VAR 0 8
58770: PPUSH
58771: LD_INT 0
58773: PPUSH
58774: CALL 60560 0 3
// end ;
58778: GO 58676
58780: POP
58781: POP
// if enchidnas then
58782: LD_VAR 0 4
58786: IFFALSE 58853
// for i = 1 to enchidnas do
58788: LD_ADDR_VAR 0 11
58792: PUSH
58793: DOUBLE
58794: LD_INT 1
58796: DEC
58797: ST_TO_ADDR
58798: LD_VAR 0 4
58802: PUSH
58803: FOR_TO
58804: IFFALSE 58851
// begin hc_class = 13 ;
58806: LD_ADDR_OWVAR 28
58810: PUSH
58811: LD_INT 13
58813: ST_TO_ADDR
// hc_gallery =  ;
58814: LD_ADDR_OWVAR 33
58818: PUSH
58819: LD_STRING 
58821: ST_TO_ADDR
// animal := CreateHuman ;
58822: LD_ADDR_VAR 0 12
58826: PUSH
58827: CALL_OW 44
58831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58832: LD_VAR 0 12
58836: PPUSH
58837: LD_VAR 0 8
58841: PPUSH
58842: LD_INT 0
58844: PPUSH
58845: CALL 60560 0 3
// end ;
58849: GO 58803
58851: POP
58852: POP
// if fishes then
58853: LD_VAR 0 7
58857: IFFALSE 58924
// for i = 1 to fishes do
58859: LD_ADDR_VAR 0 11
58863: PUSH
58864: DOUBLE
58865: LD_INT 1
58867: DEC
58868: ST_TO_ADDR
58869: LD_VAR 0 7
58873: PUSH
58874: FOR_TO
58875: IFFALSE 58922
// begin hc_class = 20 ;
58877: LD_ADDR_OWVAR 28
58881: PUSH
58882: LD_INT 20
58884: ST_TO_ADDR
// hc_gallery =  ;
58885: LD_ADDR_OWVAR 33
58889: PUSH
58890: LD_STRING 
58892: ST_TO_ADDR
// animal := CreateHuman ;
58893: LD_ADDR_VAR 0 12
58897: PUSH
58898: CALL_OW 44
58902: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58903: LD_VAR 0 12
58907: PPUSH
58908: LD_VAR 0 9
58912: PPUSH
58913: LD_INT 0
58915: PPUSH
58916: CALL 60560 0 3
// end ;
58920: GO 58874
58922: POP
58923: POP
// end ;
58924: LD_VAR 0 10
58928: RET
// export function WantHeal ( sci , unit ) ; begin
58929: LD_INT 0
58931: PPUSH
// if GetTaskList ( sci ) > 0 then
58932: LD_VAR 0 1
58936: PPUSH
58937: CALL_OW 437
58941: PUSH
58942: LD_INT 0
58944: GREATER
58945: IFFALSE 59015
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58947: LD_VAR 0 1
58951: PPUSH
58952: CALL_OW 437
58956: PUSH
58957: LD_INT 1
58959: ARRAY
58960: PUSH
58961: LD_INT 1
58963: ARRAY
58964: PUSH
58965: LD_STRING l
58967: EQUAL
58968: PUSH
58969: LD_VAR 0 1
58973: PPUSH
58974: CALL_OW 437
58978: PUSH
58979: LD_INT 1
58981: ARRAY
58982: PUSH
58983: LD_INT 4
58985: ARRAY
58986: PUSH
58987: LD_VAR 0 2
58991: EQUAL
58992: AND
58993: IFFALSE 59005
// result := true else
58995: LD_ADDR_VAR 0 3
58999: PUSH
59000: LD_INT 1
59002: ST_TO_ADDR
59003: GO 59013
// result := false ;
59005: LD_ADDR_VAR 0 3
59009: PUSH
59010: LD_INT 0
59012: ST_TO_ADDR
// end else
59013: GO 59023
// result := false ;
59015: LD_ADDR_VAR 0 3
59019: PUSH
59020: LD_INT 0
59022: ST_TO_ADDR
// end ;
59023: LD_VAR 0 3
59027: RET
// export function HealTarget ( sci ) ; begin
59028: LD_INT 0
59030: PPUSH
// if not sci then
59031: LD_VAR 0 1
59035: NOT
59036: IFFALSE 59040
// exit ;
59038: GO 59105
// result := 0 ;
59040: LD_ADDR_VAR 0 2
59044: PUSH
59045: LD_INT 0
59047: ST_TO_ADDR
// if GetTaskList ( sci ) then
59048: LD_VAR 0 1
59052: PPUSH
59053: CALL_OW 437
59057: IFFALSE 59105
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59059: LD_VAR 0 1
59063: PPUSH
59064: CALL_OW 437
59068: PUSH
59069: LD_INT 1
59071: ARRAY
59072: PUSH
59073: LD_INT 1
59075: ARRAY
59076: PUSH
59077: LD_STRING l
59079: EQUAL
59080: IFFALSE 59105
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59082: LD_ADDR_VAR 0 2
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: CALL_OW 437
59096: PUSH
59097: LD_INT 1
59099: ARRAY
59100: PUSH
59101: LD_INT 4
59103: ARRAY
59104: ST_TO_ADDR
// end ;
59105: LD_VAR 0 2
59109: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59110: LD_INT 0
59112: PPUSH
59113: PPUSH
59114: PPUSH
59115: PPUSH
// if not base_units then
59116: LD_VAR 0 1
59120: NOT
59121: IFFALSE 59125
// exit ;
59123: GO 59212
// result := false ;
59125: LD_ADDR_VAR 0 2
59129: PUSH
59130: LD_INT 0
59132: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59133: LD_ADDR_VAR 0 5
59137: PUSH
59138: LD_VAR 0 1
59142: PPUSH
59143: LD_INT 21
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PPUSH
59153: CALL_OW 72
59157: ST_TO_ADDR
// if not tmp then
59158: LD_VAR 0 5
59162: NOT
59163: IFFALSE 59167
// exit ;
59165: GO 59212
// for i in tmp do
59167: LD_ADDR_VAR 0 3
59171: PUSH
59172: LD_VAR 0 5
59176: PUSH
59177: FOR_IN
59178: IFFALSE 59210
// begin result := EnemyInRange ( i , 22 ) ;
59180: LD_ADDR_VAR 0 2
59184: PUSH
59185: LD_VAR 0 3
59189: PPUSH
59190: LD_INT 22
59192: PPUSH
59193: CALL 56881 0 2
59197: ST_TO_ADDR
// if result then
59198: LD_VAR 0 2
59202: IFFALSE 59208
// exit ;
59204: POP
59205: POP
59206: GO 59212
// end ;
59208: GO 59177
59210: POP
59211: POP
// end ;
59212: LD_VAR 0 2
59216: RET
// export function FilterByTag ( units , tag ) ; begin
59217: LD_INT 0
59219: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59220: LD_ADDR_VAR 0 3
59224: PUSH
59225: LD_VAR 0 1
59229: PPUSH
59230: LD_INT 120
59232: PUSH
59233: LD_VAR 0 2
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PPUSH
59242: CALL_OW 72
59246: ST_TO_ADDR
// end ;
59247: LD_VAR 0 3
59251: RET
// export function IsDriver ( un ) ; begin
59252: LD_INT 0
59254: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59255: LD_ADDR_VAR 0 2
59259: PUSH
59260: LD_VAR 0 1
59264: PUSH
59265: LD_INT 55
59267: PUSH
59268: EMPTY
59269: LIST
59270: PPUSH
59271: CALL_OW 69
59275: IN
59276: ST_TO_ADDR
// end ;
59277: LD_VAR 0 2
59281: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59282: LD_INT 0
59284: PPUSH
59285: PPUSH
// list := [ ] ;
59286: LD_ADDR_VAR 0 5
59290: PUSH
59291: EMPTY
59292: ST_TO_ADDR
// case d of 0 :
59293: LD_VAR 0 3
59297: PUSH
59298: LD_INT 0
59300: DOUBLE
59301: EQUAL
59302: IFTRUE 59306
59304: GO 59439
59306: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59307: LD_ADDR_VAR 0 5
59311: PUSH
59312: LD_VAR 0 1
59316: PUSH
59317: LD_INT 4
59319: MINUS
59320: PUSH
59321: LD_VAR 0 2
59325: PUSH
59326: LD_INT 4
59328: MINUS
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: PUSH
59338: LD_VAR 0 1
59342: PUSH
59343: LD_INT 3
59345: MINUS
59346: PUSH
59347: LD_VAR 0 2
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: PUSH
59360: LD_VAR 0 1
59364: PUSH
59365: LD_INT 4
59367: PLUS
59368: PUSH
59369: LD_VAR 0 2
59373: PUSH
59374: LD_INT 4
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: PUSH
59382: LD_VAR 0 1
59386: PUSH
59387: LD_INT 3
59389: PLUS
59390: PUSH
59391: LD_VAR 0 2
59395: PUSH
59396: LD_INT 3
59398: PLUS
59399: PUSH
59400: LD_INT 5
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: LIST
59407: PUSH
59408: LD_VAR 0 1
59412: PUSH
59413: LD_VAR 0 2
59417: PUSH
59418: LD_INT 4
59420: PLUS
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// end ; 1 :
59437: GO 60137
59439: LD_INT 1
59441: DOUBLE
59442: EQUAL
59443: IFTRUE 59447
59445: GO 59580
59447: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59448: LD_ADDR_VAR 0 5
59452: PUSH
59453: LD_VAR 0 1
59457: PUSH
59458: LD_VAR 0 2
59462: PUSH
59463: LD_INT 4
59465: MINUS
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: PUSH
59475: LD_VAR 0 1
59479: PUSH
59480: LD_INT 3
59482: MINUS
59483: PUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_INT 3
59491: MINUS
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: PUSH
59501: LD_VAR 0 1
59505: PUSH
59506: LD_INT 4
59508: MINUS
59509: PUSH
59510: LD_VAR 0 2
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: PUSH
59523: LD_VAR 0 1
59527: PUSH
59528: LD_VAR 0 2
59532: PUSH
59533: LD_INT 3
59535: PLUS
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: PUSH
59545: LD_VAR 0 1
59549: PUSH
59550: LD_INT 4
59552: PLUS
59553: PUSH
59554: LD_VAR 0 2
59558: PUSH
59559: LD_INT 4
59561: PLUS
59562: PUSH
59563: LD_INT 5
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: ST_TO_ADDR
// end ; 2 :
59578: GO 60137
59580: LD_INT 2
59582: DOUBLE
59583: EQUAL
59584: IFTRUE 59588
59586: GO 59717
59588: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59589: LD_ADDR_VAR 0 5
59593: PUSH
59594: LD_VAR 0 1
59598: PUSH
59599: LD_VAR 0 2
59603: PUSH
59604: LD_INT 3
59606: MINUS
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: LIST
59615: PUSH
59616: LD_VAR 0 1
59620: PUSH
59621: LD_INT 4
59623: PLUS
59624: PUSH
59625: LD_VAR 0 2
59629: PUSH
59630: LD_INT 4
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: PUSH
59638: LD_VAR 0 1
59642: PUSH
59643: LD_VAR 0 2
59647: PUSH
59648: LD_INT 4
59650: PLUS
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: PUSH
59660: LD_VAR 0 1
59664: PUSH
59665: LD_INT 3
59667: MINUS
59668: PUSH
59669: LD_VAR 0 2
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: PUSH
59682: LD_VAR 0 1
59686: PUSH
59687: LD_INT 4
59689: MINUS
59690: PUSH
59691: LD_VAR 0 2
59695: PUSH
59696: LD_INT 4
59698: MINUS
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: ST_TO_ADDR
// end ; 3 :
59715: GO 60137
59717: LD_INT 3
59719: DOUBLE
59720: EQUAL
59721: IFTRUE 59725
59723: GO 59858
59725: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59726: LD_ADDR_VAR 0 5
59730: PUSH
59731: LD_VAR 0 1
59735: PUSH
59736: LD_INT 3
59738: PLUS
59739: PUSH
59740: LD_VAR 0 2
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: PUSH
59753: LD_VAR 0 1
59757: PUSH
59758: LD_INT 4
59760: PLUS
59761: PUSH
59762: LD_VAR 0 2
59766: PUSH
59767: LD_INT 4
59769: PLUS
59770: PUSH
59771: LD_INT 5
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: PUSH
59779: LD_VAR 0 1
59783: PUSH
59784: LD_INT 4
59786: MINUS
59787: PUSH
59788: LD_VAR 0 2
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: PUSH
59801: LD_VAR 0 1
59805: PUSH
59806: LD_VAR 0 2
59810: PUSH
59811: LD_INT 4
59813: MINUS
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: LIST
59822: PUSH
59823: LD_VAR 0 1
59827: PUSH
59828: LD_INT 3
59830: MINUS
59831: PUSH
59832: LD_VAR 0 2
59836: PUSH
59837: LD_INT 3
59839: MINUS
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// end ; 4 :
59856: GO 60137
59858: LD_INT 4
59860: DOUBLE
59861: EQUAL
59862: IFTRUE 59866
59864: GO 59999
59866: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59867: LD_ADDR_VAR 0 5
59871: PUSH
59872: LD_VAR 0 1
59876: PUSH
59877: LD_VAR 0 2
59881: PUSH
59882: LD_INT 4
59884: PLUS
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: PUSH
59894: LD_VAR 0 1
59898: PUSH
59899: LD_INT 3
59901: PLUS
59902: PUSH
59903: LD_VAR 0 2
59907: PUSH
59908: LD_INT 3
59910: PLUS
59911: PUSH
59912: LD_INT 5
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: PUSH
59920: LD_VAR 0 1
59924: PUSH
59925: LD_INT 4
59927: PLUS
59928: PUSH
59929: LD_VAR 0 2
59933: PUSH
59934: LD_INT 4
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: PUSH
59942: LD_VAR 0 1
59946: PUSH
59947: LD_VAR 0 2
59951: PUSH
59952: LD_INT 3
59954: MINUS
59955: PUSH
59956: LD_INT 3
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: PUSH
59964: LD_VAR 0 1
59968: PUSH
59969: LD_INT 4
59971: MINUS
59972: PUSH
59973: LD_VAR 0 2
59977: PUSH
59978: LD_INT 4
59980: MINUS
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: ST_TO_ADDR
// end ; 5 :
59997: GO 60137
59999: LD_INT 5
60001: DOUBLE
60002: EQUAL
60003: IFTRUE 60007
60005: GO 60136
60007: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60008: LD_ADDR_VAR 0 5
60012: PUSH
60013: LD_VAR 0 1
60017: PUSH
60018: LD_INT 4
60020: MINUS
60021: PUSH
60022: LD_VAR 0 2
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: LIST
60034: PUSH
60035: LD_VAR 0 1
60039: PUSH
60040: LD_VAR 0 2
60044: PUSH
60045: LD_INT 4
60047: MINUS
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: LIST
60056: PUSH
60057: LD_VAR 0 1
60061: PUSH
60062: LD_INT 4
60064: PLUS
60065: PUSH
60066: LD_VAR 0 2
60070: PUSH
60071: LD_INT 4
60073: PLUS
60074: PUSH
60075: LD_INT 5
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: PUSH
60083: LD_VAR 0 1
60087: PUSH
60088: LD_INT 3
60090: PLUS
60091: PUSH
60092: LD_VAR 0 2
60096: PUSH
60097: LD_INT 4
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: PUSH
60105: LD_VAR 0 1
60109: PUSH
60110: LD_VAR 0 2
60114: PUSH
60115: LD_INT 3
60117: PLUS
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: ST_TO_ADDR
// end ; end ;
60134: GO 60137
60136: POP
// result := list ;
60137: LD_ADDR_VAR 0 4
60141: PUSH
60142: LD_VAR 0 5
60146: ST_TO_ADDR
// end ;
60147: LD_VAR 0 4
60151: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60152: LD_INT 0
60154: PPUSH
60155: PPUSH
60156: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60157: LD_VAR 0 1
60161: NOT
60162: PUSH
60163: LD_VAR 0 2
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: LD_INT 4
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: IN
60186: NOT
60187: OR
60188: IFFALSE 60192
// exit ;
60190: GO 60284
// tmp := [ ] ;
60192: LD_ADDR_VAR 0 5
60196: PUSH
60197: EMPTY
60198: ST_TO_ADDR
// for i in units do
60199: LD_ADDR_VAR 0 4
60203: PUSH
60204: LD_VAR 0 1
60208: PUSH
60209: FOR_IN
60210: IFFALSE 60253
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60212: LD_ADDR_VAR 0 5
60216: PUSH
60217: LD_VAR 0 5
60221: PPUSH
60222: LD_VAR 0 5
60226: PUSH
60227: LD_INT 1
60229: PLUS
60230: PPUSH
60231: LD_VAR 0 4
60235: PPUSH
60236: LD_VAR 0 2
60240: PPUSH
60241: CALL_OW 259
60245: PPUSH
60246: CALL_OW 2
60250: ST_TO_ADDR
60251: GO 60209
60253: POP
60254: POP
// if not tmp then
60255: LD_VAR 0 5
60259: NOT
60260: IFFALSE 60264
// exit ;
60262: GO 60284
// result := SortListByListDesc ( units , tmp ) ;
60264: LD_ADDR_VAR 0 3
60268: PUSH
60269: LD_VAR 0 1
60273: PPUSH
60274: LD_VAR 0 5
60278: PPUSH
60279: CALL_OW 77
60283: ST_TO_ADDR
// end ;
60284: LD_VAR 0 3
60288: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60289: LD_INT 0
60291: PPUSH
60292: PPUSH
60293: PPUSH
// result := false ;
60294: LD_ADDR_VAR 0 3
60298: PUSH
60299: LD_INT 0
60301: ST_TO_ADDR
// x := GetX ( building ) ;
60302: LD_ADDR_VAR 0 4
60306: PUSH
60307: LD_VAR 0 2
60311: PPUSH
60312: CALL_OW 250
60316: ST_TO_ADDR
// y := GetY ( building ) ;
60317: LD_ADDR_VAR 0 5
60321: PUSH
60322: LD_VAR 0 2
60326: PPUSH
60327: CALL_OW 251
60331: ST_TO_ADDR
// if not building or not x or not y then
60332: LD_VAR 0 2
60336: NOT
60337: PUSH
60338: LD_VAR 0 4
60342: NOT
60343: OR
60344: PUSH
60345: LD_VAR 0 5
60349: NOT
60350: OR
60351: IFFALSE 60355
// exit ;
60353: GO 60447
// if GetTaskList ( unit ) then
60355: LD_VAR 0 1
60359: PPUSH
60360: CALL_OW 437
60364: IFFALSE 60447
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60366: LD_STRING e
60368: PUSH
60369: LD_VAR 0 1
60373: PPUSH
60374: CALL_OW 437
60378: PUSH
60379: LD_INT 1
60381: ARRAY
60382: PUSH
60383: LD_INT 1
60385: ARRAY
60386: EQUAL
60387: PUSH
60388: LD_VAR 0 4
60392: PUSH
60393: LD_VAR 0 1
60397: PPUSH
60398: CALL_OW 437
60402: PUSH
60403: LD_INT 1
60405: ARRAY
60406: PUSH
60407: LD_INT 2
60409: ARRAY
60410: EQUAL
60411: AND
60412: PUSH
60413: LD_VAR 0 5
60417: PUSH
60418: LD_VAR 0 1
60422: PPUSH
60423: CALL_OW 437
60427: PUSH
60428: LD_INT 1
60430: ARRAY
60431: PUSH
60432: LD_INT 3
60434: ARRAY
60435: EQUAL
60436: AND
60437: IFFALSE 60447
// result := true end ;
60439: LD_ADDR_VAR 0 3
60443: PUSH
60444: LD_INT 1
60446: ST_TO_ADDR
// end ;
60447: LD_VAR 0 3
60451: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60452: LD_INT 0
60454: PPUSH
// result := false ;
60455: LD_ADDR_VAR 0 4
60459: PUSH
60460: LD_INT 0
60462: ST_TO_ADDR
// if GetTaskList ( unit ) then
60463: LD_VAR 0 1
60467: PPUSH
60468: CALL_OW 437
60472: IFFALSE 60555
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60474: LD_STRING M
60476: PUSH
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 437
60486: PUSH
60487: LD_INT 1
60489: ARRAY
60490: PUSH
60491: LD_INT 1
60493: ARRAY
60494: EQUAL
60495: PUSH
60496: LD_VAR 0 2
60500: PUSH
60501: LD_VAR 0 1
60505: PPUSH
60506: CALL_OW 437
60510: PUSH
60511: LD_INT 1
60513: ARRAY
60514: PUSH
60515: LD_INT 2
60517: ARRAY
60518: EQUAL
60519: AND
60520: PUSH
60521: LD_VAR 0 3
60525: PUSH
60526: LD_VAR 0 1
60530: PPUSH
60531: CALL_OW 437
60535: PUSH
60536: LD_INT 1
60538: ARRAY
60539: PUSH
60540: LD_INT 3
60542: ARRAY
60543: EQUAL
60544: AND
60545: IFFALSE 60555
// result := true ;
60547: LD_ADDR_VAR 0 4
60551: PUSH
60552: LD_INT 1
60554: ST_TO_ADDR
// end ; end ;
60555: LD_VAR 0 4
60559: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60560: LD_INT 0
60562: PPUSH
60563: PPUSH
60564: PPUSH
60565: PPUSH
// if not unit or not area then
60566: LD_VAR 0 1
60570: NOT
60571: PUSH
60572: LD_VAR 0 2
60576: NOT
60577: OR
60578: IFFALSE 60582
// exit ;
60580: GO 60746
// tmp := AreaToList ( area , i ) ;
60582: LD_ADDR_VAR 0 6
60586: PUSH
60587: LD_VAR 0 2
60591: PPUSH
60592: LD_VAR 0 5
60596: PPUSH
60597: CALL_OW 517
60601: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60602: LD_ADDR_VAR 0 5
60606: PUSH
60607: DOUBLE
60608: LD_INT 1
60610: DEC
60611: ST_TO_ADDR
60612: LD_VAR 0 6
60616: PUSH
60617: LD_INT 1
60619: ARRAY
60620: PUSH
60621: FOR_TO
60622: IFFALSE 60744
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60624: LD_ADDR_VAR 0 7
60628: PUSH
60629: LD_VAR 0 6
60633: PUSH
60634: LD_INT 1
60636: ARRAY
60637: PUSH
60638: LD_VAR 0 5
60642: ARRAY
60643: PUSH
60644: LD_VAR 0 6
60648: PUSH
60649: LD_INT 2
60651: ARRAY
60652: PUSH
60653: LD_VAR 0 5
60657: ARRAY
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60663: LD_VAR 0 7
60667: PUSH
60668: LD_INT 1
60670: ARRAY
60671: PPUSH
60672: LD_VAR 0 7
60676: PUSH
60677: LD_INT 2
60679: ARRAY
60680: PPUSH
60681: CALL_OW 428
60685: PUSH
60686: LD_INT 0
60688: EQUAL
60689: IFFALSE 60742
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60691: LD_VAR 0 1
60695: PPUSH
60696: LD_VAR 0 7
60700: PUSH
60701: LD_INT 1
60703: ARRAY
60704: PPUSH
60705: LD_VAR 0 7
60709: PUSH
60710: LD_INT 2
60712: ARRAY
60713: PPUSH
60714: LD_VAR 0 3
60718: PPUSH
60719: CALL_OW 48
// result := IsPlaced ( unit ) ;
60723: LD_ADDR_VAR 0 4
60727: PUSH
60728: LD_VAR 0 1
60732: PPUSH
60733: CALL_OW 305
60737: ST_TO_ADDR
// exit ;
60738: POP
60739: POP
60740: GO 60746
// end ; end ;
60742: GO 60621
60744: POP
60745: POP
// end ;
60746: LD_VAR 0 4
60750: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60751: LD_INT 0
60753: PPUSH
60754: PPUSH
60755: PPUSH
// if not side or side > 8 then
60756: LD_VAR 0 1
60760: NOT
60761: PUSH
60762: LD_VAR 0 1
60766: PUSH
60767: LD_INT 8
60769: GREATER
60770: OR
60771: IFFALSE 60775
// exit ;
60773: GO 60962
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60775: LD_ADDR_VAR 0 4
60779: PUSH
60780: LD_INT 22
60782: PUSH
60783: LD_VAR 0 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 21
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PPUSH
60806: CALL_OW 69
60810: ST_TO_ADDR
// if not tmp then
60811: LD_VAR 0 4
60815: NOT
60816: IFFALSE 60820
// exit ;
60818: GO 60962
// enable_addtolog := true ;
60820: LD_ADDR_OWVAR 81
60824: PUSH
60825: LD_INT 1
60827: ST_TO_ADDR
// AddToLog ( [ ) ;
60828: LD_STRING [
60830: PPUSH
60831: CALL_OW 561
// for i in tmp do
60835: LD_ADDR_VAR 0 3
60839: PUSH
60840: LD_VAR 0 4
60844: PUSH
60845: FOR_IN
60846: IFFALSE 60953
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60848: LD_STRING [
60850: PUSH
60851: LD_VAR 0 3
60855: PPUSH
60856: CALL_OW 266
60860: STR
60861: PUSH
60862: LD_STRING , 
60864: STR
60865: PUSH
60866: LD_VAR 0 3
60870: PPUSH
60871: CALL_OW 250
60875: STR
60876: PUSH
60877: LD_STRING , 
60879: STR
60880: PUSH
60881: LD_VAR 0 3
60885: PPUSH
60886: CALL_OW 251
60890: STR
60891: PUSH
60892: LD_STRING , 
60894: STR
60895: PUSH
60896: LD_VAR 0 3
60900: PPUSH
60901: CALL_OW 254
60905: STR
60906: PUSH
60907: LD_STRING , 
60909: STR
60910: PUSH
60911: LD_VAR 0 3
60915: PPUSH
60916: LD_INT 1
60918: PPUSH
60919: CALL_OW 268
60923: STR
60924: PUSH
60925: LD_STRING , 
60927: STR
60928: PUSH
60929: LD_VAR 0 3
60933: PPUSH
60934: LD_INT 2
60936: PPUSH
60937: CALL_OW 268
60941: STR
60942: PUSH
60943: LD_STRING ],
60945: STR
60946: PPUSH
60947: CALL_OW 561
// end ;
60951: GO 60845
60953: POP
60954: POP
// AddToLog ( ]; ) ;
60955: LD_STRING ];
60957: PPUSH
60958: CALL_OW 561
// end ;
60962: LD_VAR 0 2
60966: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60967: LD_INT 0
60969: PPUSH
60970: PPUSH
60971: PPUSH
60972: PPUSH
60973: PPUSH
// if not area or not rate or not max then
60974: LD_VAR 0 1
60978: NOT
60979: PUSH
60980: LD_VAR 0 2
60984: NOT
60985: OR
60986: PUSH
60987: LD_VAR 0 4
60991: NOT
60992: OR
60993: IFFALSE 60997
// exit ;
60995: GO 61186
// while 1 do
60997: LD_INT 1
60999: IFFALSE 61186
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61001: LD_ADDR_VAR 0 9
61005: PUSH
61006: LD_VAR 0 1
61010: PPUSH
61011: LD_INT 1
61013: PPUSH
61014: CALL_OW 287
61018: PUSH
61019: LD_INT 10
61021: MUL
61022: ST_TO_ADDR
// r := rate / 10 ;
61023: LD_ADDR_VAR 0 7
61027: PUSH
61028: LD_VAR 0 2
61032: PUSH
61033: LD_INT 10
61035: DIVREAL
61036: ST_TO_ADDR
// time := 1 1$00 ;
61037: LD_ADDR_VAR 0 8
61041: PUSH
61042: LD_INT 2100
61044: ST_TO_ADDR
// if amount < min then
61045: LD_VAR 0 9
61049: PUSH
61050: LD_VAR 0 3
61054: LESS
61055: IFFALSE 61073
// r := r * 2 else
61057: LD_ADDR_VAR 0 7
61061: PUSH
61062: LD_VAR 0 7
61066: PUSH
61067: LD_INT 2
61069: MUL
61070: ST_TO_ADDR
61071: GO 61099
// if amount > max then
61073: LD_VAR 0 9
61077: PUSH
61078: LD_VAR 0 4
61082: GREATER
61083: IFFALSE 61099
// r := r / 2 ;
61085: LD_ADDR_VAR 0 7
61089: PUSH
61090: LD_VAR 0 7
61094: PUSH
61095: LD_INT 2
61097: DIVREAL
61098: ST_TO_ADDR
// time := time / r ;
61099: LD_ADDR_VAR 0 8
61103: PUSH
61104: LD_VAR 0 8
61108: PUSH
61109: LD_VAR 0 7
61113: DIVREAL
61114: ST_TO_ADDR
// if time < 0 then
61115: LD_VAR 0 8
61119: PUSH
61120: LD_INT 0
61122: LESS
61123: IFFALSE 61140
// time := time * - 1 ;
61125: LD_ADDR_VAR 0 8
61129: PUSH
61130: LD_VAR 0 8
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: MUL
61139: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61140: LD_VAR 0 8
61144: PUSH
61145: LD_INT 35
61147: PPUSH
61148: LD_INT 875
61150: PPUSH
61151: CALL_OW 12
61155: PLUS
61156: PPUSH
61157: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61161: LD_INT 1
61163: PPUSH
61164: LD_INT 5
61166: PPUSH
61167: CALL_OW 12
61171: PPUSH
61172: LD_VAR 0 1
61176: PPUSH
61177: LD_INT 1
61179: PPUSH
61180: CALL_OW 55
// end ;
61184: GO 60997
// end ;
61186: LD_VAR 0 5
61190: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61191: LD_INT 0
61193: PPUSH
61194: PPUSH
61195: PPUSH
61196: PPUSH
61197: PPUSH
61198: PPUSH
61199: PPUSH
61200: PPUSH
// if not turrets or not factories then
61201: LD_VAR 0 1
61205: NOT
61206: PUSH
61207: LD_VAR 0 2
61211: NOT
61212: OR
61213: IFFALSE 61217
// exit ;
61215: GO 61524
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61217: LD_ADDR_VAR 0 10
61221: PUSH
61222: LD_INT 5
61224: PUSH
61225: LD_INT 6
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 4
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 3
61244: PUSH
61245: LD_INT 5
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 24
61259: PUSH
61260: LD_INT 25
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 23
61269: PUSH
61270: LD_INT 27
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 42
61283: PUSH
61284: LD_INT 43
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 44
61293: PUSH
61294: LD_INT 46
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 45
61303: PUSH
61304: LD_INT 47
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: LIST
61320: ST_TO_ADDR
// result := [ ] ;
61321: LD_ADDR_VAR 0 3
61325: PUSH
61326: EMPTY
61327: ST_TO_ADDR
// for i in turrets do
61328: LD_ADDR_VAR 0 4
61332: PUSH
61333: LD_VAR 0 1
61337: PUSH
61338: FOR_IN
61339: IFFALSE 61522
// begin nat := GetNation ( i ) ;
61341: LD_ADDR_VAR 0 7
61345: PUSH
61346: LD_VAR 0 4
61350: PPUSH
61351: CALL_OW 248
61355: ST_TO_ADDR
// weapon := 0 ;
61356: LD_ADDR_VAR 0 8
61360: PUSH
61361: LD_INT 0
61363: ST_TO_ADDR
// if not nat then
61364: LD_VAR 0 7
61368: NOT
61369: IFFALSE 61373
// continue ;
61371: GO 61338
// for j in list [ nat ] do
61373: LD_ADDR_VAR 0 5
61377: PUSH
61378: LD_VAR 0 10
61382: PUSH
61383: LD_VAR 0 7
61387: ARRAY
61388: PUSH
61389: FOR_IN
61390: IFFALSE 61431
// if GetBWeapon ( i ) = j [ 1 ] then
61392: LD_VAR 0 4
61396: PPUSH
61397: CALL_OW 269
61401: PUSH
61402: LD_VAR 0 5
61406: PUSH
61407: LD_INT 1
61409: ARRAY
61410: EQUAL
61411: IFFALSE 61429
// begin weapon := j [ 2 ] ;
61413: LD_ADDR_VAR 0 8
61417: PUSH
61418: LD_VAR 0 5
61422: PUSH
61423: LD_INT 2
61425: ARRAY
61426: ST_TO_ADDR
// break ;
61427: GO 61431
// end ;
61429: GO 61389
61431: POP
61432: POP
// if not weapon then
61433: LD_VAR 0 8
61437: NOT
61438: IFFALSE 61442
// continue ;
61440: GO 61338
// for k in factories do
61442: LD_ADDR_VAR 0 6
61446: PUSH
61447: LD_VAR 0 2
61451: PUSH
61452: FOR_IN
61453: IFFALSE 61518
// begin weapons := AvailableWeaponList ( k ) ;
61455: LD_ADDR_VAR 0 9
61459: PUSH
61460: LD_VAR 0 6
61464: PPUSH
61465: CALL_OW 478
61469: ST_TO_ADDR
// if not weapons then
61470: LD_VAR 0 9
61474: NOT
61475: IFFALSE 61479
// continue ;
61477: GO 61452
// if weapon in weapons then
61479: LD_VAR 0 8
61483: PUSH
61484: LD_VAR 0 9
61488: IN
61489: IFFALSE 61516
// begin result := [ i , weapon ] ;
61491: LD_ADDR_VAR 0 3
61495: PUSH
61496: LD_VAR 0 4
61500: PUSH
61501: LD_VAR 0 8
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: ST_TO_ADDR
// exit ;
61510: POP
61511: POP
61512: POP
61513: POP
61514: GO 61524
// end ; end ;
61516: GO 61452
61518: POP
61519: POP
// end ;
61520: GO 61338
61522: POP
61523: POP
// end ;
61524: LD_VAR 0 3
61528: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61529: LD_INT 0
61531: PPUSH
// if not side or side > 8 then
61532: LD_VAR 0 3
61536: NOT
61537: PUSH
61538: LD_VAR 0 3
61542: PUSH
61543: LD_INT 8
61545: GREATER
61546: OR
61547: IFFALSE 61551
// exit ;
61549: GO 61610
// if not range then
61551: LD_VAR 0 4
61555: NOT
61556: IFFALSE 61567
// range := - 12 ;
61558: LD_ADDR_VAR 0 4
61562: PUSH
61563: LD_INT 12
61565: NEG
61566: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61567: LD_VAR 0 1
61571: PPUSH
61572: LD_VAR 0 2
61576: PPUSH
61577: LD_VAR 0 3
61581: PPUSH
61582: LD_VAR 0 4
61586: PPUSH
61587: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61591: LD_VAR 0 1
61595: PPUSH
61596: LD_VAR 0 2
61600: PPUSH
61601: LD_VAR 0 3
61605: PPUSH
61606: CALL_OW 331
// end ;
61610: LD_VAR 0 5
61614: RET
// export function Video ( mode ) ; begin
61615: LD_INT 0
61617: PPUSH
// ingame_video = mode ;
61618: LD_ADDR_OWVAR 52
61622: PUSH
61623: LD_VAR 0 1
61627: ST_TO_ADDR
// interface_hidden = mode ;
61628: LD_ADDR_OWVAR 54
61632: PUSH
61633: LD_VAR 0 1
61637: ST_TO_ADDR
// end ;
61638: LD_VAR 0 2
61642: RET
// export function Join ( array , element ) ; begin
61643: LD_INT 0
61645: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61646: LD_ADDR_VAR 0 3
61650: PUSH
61651: LD_VAR 0 1
61655: PPUSH
61656: LD_VAR 0 1
61660: PUSH
61661: LD_INT 1
61663: PLUS
61664: PPUSH
61665: LD_VAR 0 2
61669: PPUSH
61670: CALL_OW 1
61674: ST_TO_ADDR
// end ;
61675: LD_VAR 0 3
61679: RET
// export function JoinUnion ( array , element ) ; begin
61680: LD_INT 0
61682: PPUSH
// result := array union element ;
61683: LD_ADDR_VAR 0 3
61687: PUSH
61688: LD_VAR 0 1
61692: PUSH
61693: LD_VAR 0 2
61697: UNION
61698: ST_TO_ADDR
// end ;
61699: LD_VAR 0 3
61703: RET
// export function GetBehemoths ( side ) ; begin
61704: LD_INT 0
61706: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61707: LD_ADDR_VAR 0 2
61711: PUSH
61712: LD_INT 22
61714: PUSH
61715: LD_VAR 0 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 31
61726: PUSH
61727: LD_INT 25
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PPUSH
61738: CALL_OW 69
61742: ST_TO_ADDR
// end ;
61743: LD_VAR 0 2
61747: RET
// export function Shuffle ( array ) ; var i , index ; begin
61748: LD_INT 0
61750: PPUSH
61751: PPUSH
61752: PPUSH
// result := [ ] ;
61753: LD_ADDR_VAR 0 2
61757: PUSH
61758: EMPTY
61759: ST_TO_ADDR
// if not array then
61760: LD_VAR 0 1
61764: NOT
61765: IFFALSE 61769
// exit ;
61767: GO 61868
// Randomize ;
61769: CALL_OW 10
// for i = array downto 1 do
61773: LD_ADDR_VAR 0 3
61777: PUSH
61778: DOUBLE
61779: LD_VAR 0 1
61783: INC
61784: ST_TO_ADDR
61785: LD_INT 1
61787: PUSH
61788: FOR_DOWNTO
61789: IFFALSE 61866
// begin index := rand ( 1 , array ) ;
61791: LD_ADDR_VAR 0 4
61795: PUSH
61796: LD_INT 1
61798: PPUSH
61799: LD_VAR 0 1
61803: PPUSH
61804: CALL_OW 12
61808: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61809: LD_ADDR_VAR 0 2
61813: PUSH
61814: LD_VAR 0 2
61818: PPUSH
61819: LD_VAR 0 2
61823: PUSH
61824: LD_INT 1
61826: PLUS
61827: PPUSH
61828: LD_VAR 0 1
61832: PUSH
61833: LD_VAR 0 4
61837: ARRAY
61838: PPUSH
61839: CALL_OW 2
61843: ST_TO_ADDR
// array := Delete ( array , index ) ;
61844: LD_ADDR_VAR 0 1
61848: PUSH
61849: LD_VAR 0 1
61853: PPUSH
61854: LD_VAR 0 4
61858: PPUSH
61859: CALL_OW 3
61863: ST_TO_ADDR
// end ;
61864: GO 61788
61866: POP
61867: POP
// end ;
61868: LD_VAR 0 2
61872: RET
// export function GetBaseMaterials ( base ) ; begin
61873: LD_INT 0
61875: PPUSH
// result := [ 0 , 0 , 0 ] ;
61876: LD_ADDR_VAR 0 2
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: ST_TO_ADDR
// if not base then
61895: LD_VAR 0 1
61899: NOT
61900: IFFALSE 61904
// exit ;
61902: GO 61953
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61904: LD_ADDR_VAR 0 2
61908: PUSH
61909: LD_VAR 0 1
61913: PPUSH
61914: LD_INT 1
61916: PPUSH
61917: CALL_OW 275
61921: PUSH
61922: LD_VAR 0 1
61926: PPUSH
61927: LD_INT 2
61929: PPUSH
61930: CALL_OW 275
61934: PUSH
61935: LD_VAR 0 1
61939: PPUSH
61940: LD_INT 3
61942: PPUSH
61943: CALL_OW 275
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: ST_TO_ADDR
// end ;
61953: LD_VAR 0 2
61957: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61958: LD_INT 0
61960: PPUSH
61961: PPUSH
// result := array ;
61962: LD_ADDR_VAR 0 3
61966: PUSH
61967: LD_VAR 0 1
61971: ST_TO_ADDR
// if size >= result then
61972: LD_VAR 0 2
61976: PUSH
61977: LD_VAR 0 3
61981: GREATEREQUAL
61982: IFFALSE 61986
// exit ;
61984: GO 62036
// if size then
61986: LD_VAR 0 2
61990: IFFALSE 62036
// for i := array downto size do
61992: LD_ADDR_VAR 0 4
61996: PUSH
61997: DOUBLE
61998: LD_VAR 0 1
62002: INC
62003: ST_TO_ADDR
62004: LD_VAR 0 2
62008: PUSH
62009: FOR_DOWNTO
62010: IFFALSE 62034
// result := Delete ( result , result ) ;
62012: LD_ADDR_VAR 0 3
62016: PUSH
62017: LD_VAR 0 3
62021: PPUSH
62022: LD_VAR 0 3
62026: PPUSH
62027: CALL_OW 3
62031: ST_TO_ADDR
62032: GO 62009
62034: POP
62035: POP
// end ;
62036: LD_VAR 0 3
62040: RET
// export function ComExit ( unit ) ; var tmp ; begin
62041: LD_INT 0
62043: PPUSH
62044: PPUSH
// if not IsInUnit ( unit ) then
62045: LD_VAR 0 1
62049: PPUSH
62050: CALL_OW 310
62054: NOT
62055: IFFALSE 62059
// exit ;
62057: GO 62119
// tmp := IsInUnit ( unit ) ;
62059: LD_ADDR_VAR 0 3
62063: PUSH
62064: LD_VAR 0 1
62068: PPUSH
62069: CALL_OW 310
62073: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62074: LD_VAR 0 3
62078: PPUSH
62079: CALL_OW 247
62083: PUSH
62084: LD_INT 2
62086: EQUAL
62087: IFFALSE 62100
// ComExitVehicle ( unit ) else
62089: LD_VAR 0 1
62093: PPUSH
62094: CALL_OW 121
62098: GO 62109
// ComExitBuilding ( unit ) ;
62100: LD_VAR 0 1
62104: PPUSH
62105: CALL_OW 122
// result := tmp ;
62109: LD_ADDR_VAR 0 2
62113: PUSH
62114: LD_VAR 0 3
62118: ST_TO_ADDR
// end ;
62119: LD_VAR 0 2
62123: RET
// export function ComExitAll ( units ) ; var i ; begin
62124: LD_INT 0
62126: PPUSH
62127: PPUSH
// if not units then
62128: LD_VAR 0 1
62132: NOT
62133: IFFALSE 62137
// exit ;
62135: GO 62163
// for i in units do
62137: LD_ADDR_VAR 0 3
62141: PUSH
62142: LD_VAR 0 1
62146: PUSH
62147: FOR_IN
62148: IFFALSE 62161
// ComExit ( i ) ;
62150: LD_VAR 0 3
62154: PPUSH
62155: CALL 62041 0 1
62159: GO 62147
62161: POP
62162: POP
// end ;
62163: LD_VAR 0 2
62167: RET
// export function ResetHc ; begin
62168: LD_INT 0
62170: PPUSH
// InitHc ;
62171: CALL_OW 19
// hc_importance := 0 ;
62175: LD_ADDR_OWVAR 32
62179: PUSH
62180: LD_INT 0
62182: ST_TO_ADDR
// end ;
62183: LD_VAR 0 1
62187: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62188: LD_INT 0
62190: PPUSH
62191: PPUSH
62192: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62193: LD_ADDR_VAR 0 6
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: LD_VAR 0 3
62207: PLUS
62208: PUSH
62209: LD_INT 2
62211: DIV
62212: ST_TO_ADDR
// if _x < 0 then
62213: LD_VAR 0 6
62217: PUSH
62218: LD_INT 0
62220: LESS
62221: IFFALSE 62238
// _x := _x * - 1 ;
62223: LD_ADDR_VAR 0 6
62227: PUSH
62228: LD_VAR 0 6
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: MUL
62237: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62238: LD_ADDR_VAR 0 7
62242: PUSH
62243: LD_VAR 0 2
62247: PUSH
62248: LD_VAR 0 4
62252: PLUS
62253: PUSH
62254: LD_INT 2
62256: DIV
62257: ST_TO_ADDR
// if _y < 0 then
62258: LD_VAR 0 7
62262: PUSH
62263: LD_INT 0
62265: LESS
62266: IFFALSE 62283
// _y := _y * - 1 ;
62268: LD_ADDR_VAR 0 7
62272: PUSH
62273: LD_VAR 0 7
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: MUL
62282: ST_TO_ADDR
// result := [ _x , _y ] ;
62283: LD_ADDR_VAR 0 5
62287: PUSH
62288: LD_VAR 0 6
62292: PUSH
62293: LD_VAR 0 7
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// end ;
62302: LD_VAR 0 5
62306: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62307: LD_INT 0
62309: PPUSH
62310: PPUSH
62311: PPUSH
62312: PPUSH
// task := GetTaskList ( unit ) ;
62313: LD_ADDR_VAR 0 7
62317: PUSH
62318: LD_VAR 0 1
62322: PPUSH
62323: CALL_OW 437
62327: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62328: LD_VAR 0 7
62332: NOT
62333: PUSH
62334: LD_VAR 0 1
62338: PPUSH
62339: LD_VAR 0 2
62343: PPUSH
62344: CALL_OW 308
62348: NOT
62349: AND
62350: IFFALSE 62354
// exit ;
62352: GO 62472
// if IsInArea ( unit , area ) then
62354: LD_VAR 0 1
62358: PPUSH
62359: LD_VAR 0 2
62363: PPUSH
62364: CALL_OW 308
62368: IFFALSE 62386
// begin ComMoveToArea ( unit , goAway ) ;
62370: LD_VAR 0 1
62374: PPUSH
62375: LD_VAR 0 3
62379: PPUSH
62380: CALL_OW 113
// exit ;
62384: GO 62472
// end ; if task [ 1 ] [ 1 ] <> M then
62386: LD_VAR 0 7
62390: PUSH
62391: LD_INT 1
62393: ARRAY
62394: PUSH
62395: LD_INT 1
62397: ARRAY
62398: PUSH
62399: LD_STRING M
62401: NONEQUAL
62402: IFFALSE 62406
// exit ;
62404: GO 62472
// x := task [ 1 ] [ 2 ] ;
62406: LD_ADDR_VAR 0 5
62410: PUSH
62411: LD_VAR 0 7
62415: PUSH
62416: LD_INT 1
62418: ARRAY
62419: PUSH
62420: LD_INT 2
62422: ARRAY
62423: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62424: LD_ADDR_VAR 0 6
62428: PUSH
62429: LD_VAR 0 7
62433: PUSH
62434: LD_INT 1
62436: ARRAY
62437: PUSH
62438: LD_INT 3
62440: ARRAY
62441: ST_TO_ADDR
// if InArea ( x , y , area ) then
62442: LD_VAR 0 5
62446: PPUSH
62447: LD_VAR 0 6
62451: PPUSH
62452: LD_VAR 0 2
62456: PPUSH
62457: CALL_OW 309
62461: IFFALSE 62472
// ComStop ( unit ) ;
62463: LD_VAR 0 1
62467: PPUSH
62468: CALL_OW 141
// end ;
62472: LD_VAR 0 4
62476: RET
// export function Abs ( value ) ; begin
62477: LD_INT 0
62479: PPUSH
// result := value ;
62480: LD_ADDR_VAR 0 2
62484: PUSH
62485: LD_VAR 0 1
62489: ST_TO_ADDR
// if value < 0 then
62490: LD_VAR 0 1
62494: PUSH
62495: LD_INT 0
62497: LESS
62498: IFFALSE 62515
// result := value * - 1 ;
62500: LD_ADDR_VAR 0 2
62504: PUSH
62505: LD_VAR 0 1
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: MUL
62514: ST_TO_ADDR
// end ;
62515: LD_VAR 0 2
62519: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62520: LD_INT 0
62522: PPUSH
62523: PPUSH
62524: PPUSH
62525: PPUSH
62526: PPUSH
62527: PPUSH
62528: PPUSH
62529: PPUSH
// if not unit or not building then
62530: LD_VAR 0 1
62534: NOT
62535: PUSH
62536: LD_VAR 0 2
62540: NOT
62541: OR
62542: IFFALSE 62546
// exit ;
62544: GO 62772
// x := GetX ( building ) ;
62546: LD_ADDR_VAR 0 4
62550: PUSH
62551: LD_VAR 0 2
62555: PPUSH
62556: CALL_OW 250
62560: ST_TO_ADDR
// y := GetY ( building ) ;
62561: LD_ADDR_VAR 0 6
62565: PUSH
62566: LD_VAR 0 2
62570: PPUSH
62571: CALL_OW 251
62575: ST_TO_ADDR
// d := GetDir ( building ) ;
62576: LD_ADDR_VAR 0 8
62580: PUSH
62581: LD_VAR 0 2
62585: PPUSH
62586: CALL_OW 254
62590: ST_TO_ADDR
// r := 4 ;
62591: LD_ADDR_VAR 0 9
62595: PUSH
62596: LD_INT 4
62598: ST_TO_ADDR
// for i := 1 to 5 do
62599: LD_ADDR_VAR 0 10
62603: PUSH
62604: DOUBLE
62605: LD_INT 1
62607: DEC
62608: ST_TO_ADDR
62609: LD_INT 5
62611: PUSH
62612: FOR_TO
62613: IFFALSE 62770
// begin _x := ShiftX ( x , d , r + i ) ;
62615: LD_ADDR_VAR 0 5
62619: PUSH
62620: LD_VAR 0 4
62624: PPUSH
62625: LD_VAR 0 8
62629: PPUSH
62630: LD_VAR 0 9
62634: PUSH
62635: LD_VAR 0 10
62639: PLUS
62640: PPUSH
62641: CALL_OW 272
62645: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62646: LD_ADDR_VAR 0 7
62650: PUSH
62651: LD_VAR 0 6
62655: PPUSH
62656: LD_VAR 0 8
62660: PPUSH
62661: LD_VAR 0 9
62665: PUSH
62666: LD_VAR 0 10
62670: PLUS
62671: PPUSH
62672: CALL_OW 273
62676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62677: LD_VAR 0 5
62681: PPUSH
62682: LD_VAR 0 7
62686: PPUSH
62687: CALL_OW 488
62691: PUSH
62692: LD_VAR 0 5
62696: PPUSH
62697: LD_VAR 0 7
62701: PPUSH
62702: CALL_OW 428
62706: PPUSH
62707: CALL_OW 247
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: LD_INT 2
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: IN
62722: NOT
62723: AND
62724: IFFALSE 62768
// begin ComMoveXY ( unit , _x , _y ) ;
62726: LD_VAR 0 1
62730: PPUSH
62731: LD_VAR 0 5
62735: PPUSH
62736: LD_VAR 0 7
62740: PPUSH
62741: CALL_OW 111
// result := [ _x , _y ] ;
62745: LD_ADDR_VAR 0 3
62749: PUSH
62750: LD_VAR 0 5
62754: PUSH
62755: LD_VAR 0 7
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: ST_TO_ADDR
// exit ;
62764: POP
62765: POP
62766: GO 62772
// end ; end ;
62768: GO 62612
62770: POP
62771: POP
// end ;
62772: LD_VAR 0 3
62776: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62777: LD_INT 0
62779: PPUSH
62780: PPUSH
62781: PPUSH
// result := 0 ;
62782: LD_ADDR_VAR 0 3
62786: PUSH
62787: LD_INT 0
62789: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62790: LD_VAR 0 1
62794: PUSH
62795: LD_INT 0
62797: LESS
62798: PUSH
62799: LD_VAR 0 1
62803: PUSH
62804: LD_INT 8
62806: GREATER
62807: OR
62808: PUSH
62809: LD_VAR 0 2
62813: PUSH
62814: LD_INT 0
62816: LESS
62817: OR
62818: PUSH
62819: LD_VAR 0 2
62823: PUSH
62824: LD_INT 8
62826: GREATER
62827: OR
62828: IFFALSE 62832
// exit ;
62830: GO 62907
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62832: LD_ADDR_VAR 0 4
62836: PUSH
62837: LD_INT 22
62839: PUSH
62840: LD_VAR 0 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PPUSH
62849: CALL_OW 69
62853: PUSH
62854: FOR_IN
62855: IFFALSE 62905
// begin un := UnitShoot ( i ) ;
62857: LD_ADDR_VAR 0 5
62861: PUSH
62862: LD_VAR 0 4
62866: PPUSH
62867: CALL_OW 504
62871: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62872: LD_VAR 0 5
62876: PPUSH
62877: CALL_OW 255
62881: PUSH
62882: LD_VAR 0 1
62886: EQUAL
62887: IFFALSE 62903
// begin result := un ;
62889: LD_ADDR_VAR 0 3
62893: PUSH
62894: LD_VAR 0 5
62898: ST_TO_ADDR
// exit ;
62899: POP
62900: POP
62901: GO 62907
// end ; end ;
62903: GO 62854
62905: POP
62906: POP
// end ;
62907: LD_VAR 0 3
62911: RET
// export function GetCargoBay ( units ) ; begin
62912: LD_INT 0
62914: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62915: LD_ADDR_VAR 0 2
62919: PUSH
62920: LD_VAR 0 1
62924: PPUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 34
62930: PUSH
62931: LD_INT 12
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 34
62940: PUSH
62941: LD_INT 51
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 34
62950: PUSH
62951: LD_INT 32
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 34
62960: PUSH
62961: LD_EXP 40
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: PPUSH
62977: CALL_OW 72
62981: ST_TO_ADDR
// end ;
62982: LD_VAR 0 2
62986: RET
// export function Negate ( value ) ; begin
62987: LD_INT 0
62989: PPUSH
// result := not value ;
62990: LD_ADDR_VAR 0 2
62994: PUSH
62995: LD_VAR 0 1
62999: NOT
63000: ST_TO_ADDR
// end ;
63001: LD_VAR 0 2
63005: RET
// export function Inc ( value ) ; begin
63006: LD_INT 0
63008: PPUSH
// result := value + 1 ;
63009: LD_ADDR_VAR 0 2
63013: PUSH
63014: LD_VAR 0 1
63018: PUSH
63019: LD_INT 1
63021: PLUS
63022: ST_TO_ADDR
// end ;
63023: LD_VAR 0 2
63027: RET
// export function Dec ( value ) ; begin
63028: LD_INT 0
63030: PPUSH
// result := value - 1 ;
63031: LD_ADDR_VAR 0 2
63035: PUSH
63036: LD_VAR 0 1
63040: PUSH
63041: LD_INT 1
63043: MINUS
63044: ST_TO_ADDR
// end ;
63045: LD_VAR 0 2
63049: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63050: LD_INT 0
63052: PPUSH
63053: PPUSH
63054: PPUSH
63055: PPUSH
63056: PPUSH
63057: PPUSH
63058: PPUSH
63059: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63060: LD_VAR 0 1
63064: PPUSH
63065: LD_VAR 0 2
63069: PPUSH
63070: CALL_OW 488
63074: NOT
63075: PUSH
63076: LD_VAR 0 3
63080: PPUSH
63081: LD_VAR 0 4
63085: PPUSH
63086: CALL_OW 488
63090: NOT
63091: OR
63092: IFFALSE 63105
// begin result := - 1 ;
63094: LD_ADDR_VAR 0 5
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: ST_TO_ADDR
// exit ;
63103: GO 63340
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63105: LD_ADDR_VAR 0 12
63109: PUSH
63110: LD_VAR 0 1
63114: PPUSH
63115: LD_VAR 0 2
63119: PPUSH
63120: LD_VAR 0 3
63124: PPUSH
63125: LD_VAR 0 4
63129: PPUSH
63130: CALL 62188 0 4
63134: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63135: LD_ADDR_VAR 0 11
63139: PUSH
63140: LD_VAR 0 1
63144: PPUSH
63145: LD_VAR 0 2
63149: PPUSH
63150: LD_VAR 0 12
63154: PUSH
63155: LD_INT 1
63157: ARRAY
63158: PPUSH
63159: LD_VAR 0 12
63163: PUSH
63164: LD_INT 2
63166: ARRAY
63167: PPUSH
63168: CALL_OW 298
63172: ST_TO_ADDR
// distance := 9999 ;
63173: LD_ADDR_VAR 0 10
63177: PUSH
63178: LD_INT 9999
63180: ST_TO_ADDR
// for i := 0 to 5 do
63181: LD_ADDR_VAR 0 6
63185: PUSH
63186: DOUBLE
63187: LD_INT 0
63189: DEC
63190: ST_TO_ADDR
63191: LD_INT 5
63193: PUSH
63194: FOR_TO
63195: IFFALSE 63338
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63197: LD_ADDR_VAR 0 7
63201: PUSH
63202: LD_VAR 0 1
63206: PPUSH
63207: LD_VAR 0 6
63211: PPUSH
63212: LD_VAR 0 11
63216: PPUSH
63217: CALL_OW 272
63221: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63222: LD_ADDR_VAR 0 8
63226: PUSH
63227: LD_VAR 0 2
63231: PPUSH
63232: LD_VAR 0 6
63236: PPUSH
63237: LD_VAR 0 11
63241: PPUSH
63242: CALL_OW 273
63246: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63247: LD_VAR 0 7
63251: PPUSH
63252: LD_VAR 0 8
63256: PPUSH
63257: CALL_OW 488
63261: NOT
63262: IFFALSE 63266
// continue ;
63264: GO 63194
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63266: LD_ADDR_VAR 0 9
63270: PUSH
63271: LD_VAR 0 12
63275: PUSH
63276: LD_INT 1
63278: ARRAY
63279: PPUSH
63280: LD_VAR 0 12
63284: PUSH
63285: LD_INT 2
63287: ARRAY
63288: PPUSH
63289: LD_VAR 0 7
63293: PPUSH
63294: LD_VAR 0 8
63298: PPUSH
63299: CALL_OW 298
63303: ST_TO_ADDR
// if tmp < distance then
63304: LD_VAR 0 9
63308: PUSH
63309: LD_VAR 0 10
63313: LESS
63314: IFFALSE 63336
// begin result := i ;
63316: LD_ADDR_VAR 0 5
63320: PUSH
63321: LD_VAR 0 6
63325: ST_TO_ADDR
// distance := tmp ;
63326: LD_ADDR_VAR 0 10
63330: PUSH
63331: LD_VAR 0 9
63335: ST_TO_ADDR
// end ; end ;
63336: GO 63194
63338: POP
63339: POP
// end ;
63340: LD_VAR 0 5
63344: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63345: LD_INT 0
63347: PPUSH
63348: PPUSH
// if not driver or not IsInUnit ( driver ) then
63349: LD_VAR 0 1
63353: NOT
63354: PUSH
63355: LD_VAR 0 1
63359: PPUSH
63360: CALL_OW 310
63364: NOT
63365: OR
63366: IFFALSE 63370
// exit ;
63368: GO 63460
// vehicle := IsInUnit ( driver ) ;
63370: LD_ADDR_VAR 0 3
63374: PUSH
63375: LD_VAR 0 1
63379: PPUSH
63380: CALL_OW 310
63384: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63385: LD_VAR 0 1
63389: PPUSH
63390: LD_STRING \
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: PUSH
63420: LD_STRING E
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_VAR 0 3
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PPUSH
63456: CALL_OW 446
// end ;
63460: LD_VAR 0 2
63464: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63465: LD_INT 0
63467: PPUSH
63468: PPUSH
// if not driver or not IsInUnit ( driver ) then
63469: LD_VAR 0 1
63473: NOT
63474: PUSH
63475: LD_VAR 0 1
63479: PPUSH
63480: CALL_OW 310
63484: NOT
63485: OR
63486: IFFALSE 63490
// exit ;
63488: GO 63580
// vehicle := IsInUnit ( driver ) ;
63490: LD_ADDR_VAR 0 3
63494: PUSH
63495: LD_VAR 0 1
63499: PPUSH
63500: CALL_OW 310
63504: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63505: LD_VAR 0 1
63509: PPUSH
63510: LD_STRING \
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: PUSH
63540: LD_STRING E
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: LD_VAR 0 3
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PPUSH
63576: CALL_OW 447
// end ;
63580: LD_VAR 0 2
63584: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63585: LD_INT 0
63587: PPUSH
63588: PPUSH
63589: PPUSH
// tmp := [ ] ;
63590: LD_ADDR_VAR 0 5
63594: PUSH
63595: EMPTY
63596: ST_TO_ADDR
// for i in units do
63597: LD_ADDR_VAR 0 4
63601: PUSH
63602: LD_VAR 0 1
63606: PUSH
63607: FOR_IN
63608: IFFALSE 63646
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63610: LD_ADDR_VAR 0 5
63614: PUSH
63615: LD_VAR 0 5
63619: PPUSH
63620: LD_VAR 0 5
63624: PUSH
63625: LD_INT 1
63627: PLUS
63628: PPUSH
63629: LD_VAR 0 4
63633: PPUSH
63634: CALL_OW 256
63638: PPUSH
63639: CALL_OW 2
63643: ST_TO_ADDR
63644: GO 63607
63646: POP
63647: POP
// if not tmp then
63648: LD_VAR 0 5
63652: NOT
63653: IFFALSE 63657
// exit ;
63655: GO 63705
// if asc then
63657: LD_VAR 0 2
63661: IFFALSE 63685
// result := SortListByListAsc ( units , tmp ) else
63663: LD_ADDR_VAR 0 3
63667: PUSH
63668: LD_VAR 0 1
63672: PPUSH
63673: LD_VAR 0 5
63677: PPUSH
63678: CALL_OW 76
63682: ST_TO_ADDR
63683: GO 63705
// result := SortListByListDesc ( units , tmp ) ;
63685: LD_ADDR_VAR 0 3
63689: PUSH
63690: LD_VAR 0 1
63694: PPUSH
63695: LD_VAR 0 5
63699: PPUSH
63700: CALL_OW 77
63704: ST_TO_ADDR
// end ;
63705: LD_VAR 0 3
63709: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63710: LD_INT 0
63712: PPUSH
63713: PPUSH
// task := GetTaskList ( mech ) ;
63714: LD_ADDR_VAR 0 4
63718: PUSH
63719: LD_VAR 0 1
63723: PPUSH
63724: CALL_OW 437
63728: ST_TO_ADDR
// if not task then
63729: LD_VAR 0 4
63733: NOT
63734: IFFALSE 63738
// exit ;
63736: GO 63780
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63738: LD_ADDR_VAR 0 3
63742: PUSH
63743: LD_VAR 0 4
63747: PUSH
63748: LD_INT 1
63750: ARRAY
63751: PUSH
63752: LD_INT 1
63754: ARRAY
63755: PUSH
63756: LD_STRING r
63758: EQUAL
63759: PUSH
63760: LD_VAR 0 4
63764: PUSH
63765: LD_INT 1
63767: ARRAY
63768: PUSH
63769: LD_INT 4
63771: ARRAY
63772: PUSH
63773: LD_VAR 0 2
63777: EQUAL
63778: AND
63779: ST_TO_ADDR
// end ;
63780: LD_VAR 0 3
63784: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63785: LD_INT 0
63787: PPUSH
// SetDir ( unit , d ) ;
63788: LD_VAR 0 1
63792: PPUSH
63793: LD_VAR 0 4
63797: PPUSH
63798: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63802: LD_VAR 0 1
63806: PPUSH
63807: LD_VAR 0 2
63811: PPUSH
63812: LD_VAR 0 3
63816: PPUSH
63817: LD_VAR 0 5
63821: PPUSH
63822: CALL_OW 48
// end ;
63826: LD_VAR 0 6
63830: RET
// export function ToNaturalNumber ( number ) ; begin
63831: LD_INT 0
63833: PPUSH
// result := number div 1 ;
63834: LD_ADDR_VAR 0 2
63838: PUSH
63839: LD_VAR 0 1
63843: PUSH
63844: LD_INT 1
63846: DIV
63847: ST_TO_ADDR
// if number < 0 then
63848: LD_VAR 0 1
63852: PUSH
63853: LD_INT 0
63855: LESS
63856: IFFALSE 63866
// result := 0 ;
63858: LD_ADDR_VAR 0 2
63862: PUSH
63863: LD_INT 0
63865: ST_TO_ADDR
// end ;
63866: LD_VAR 0 2
63870: RET
// export function SortByClass ( units , class ) ; var un ; begin
63871: LD_INT 0
63873: PPUSH
63874: PPUSH
// if not units or not class then
63875: LD_VAR 0 1
63879: NOT
63880: PUSH
63881: LD_VAR 0 2
63885: NOT
63886: OR
63887: IFFALSE 63891
// exit ;
63889: GO 63986
// result := [ ] ;
63891: LD_ADDR_VAR 0 3
63895: PUSH
63896: EMPTY
63897: ST_TO_ADDR
// for un in units do
63898: LD_ADDR_VAR 0 4
63902: PUSH
63903: LD_VAR 0 1
63907: PUSH
63908: FOR_IN
63909: IFFALSE 63984
// if GetClass ( un ) = class then
63911: LD_VAR 0 4
63915: PPUSH
63916: CALL_OW 257
63920: PUSH
63921: LD_VAR 0 2
63925: EQUAL
63926: IFFALSE 63953
// result := Insert ( result , 1 , un ) else
63928: LD_ADDR_VAR 0 3
63932: PUSH
63933: LD_VAR 0 3
63937: PPUSH
63938: LD_INT 1
63940: PPUSH
63941: LD_VAR 0 4
63945: PPUSH
63946: CALL_OW 2
63950: ST_TO_ADDR
63951: GO 63982
// result := Replace ( result , result + 1 , un ) ;
63953: LD_ADDR_VAR 0 3
63957: PUSH
63958: LD_VAR 0 3
63962: PPUSH
63963: LD_VAR 0 3
63967: PUSH
63968: LD_INT 1
63970: PLUS
63971: PPUSH
63972: LD_VAR 0 4
63976: PPUSH
63977: CALL_OW 1
63981: ST_TO_ADDR
63982: GO 63908
63984: POP
63985: POP
// end ;
63986: LD_VAR 0 3
63990: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63991: LD_INT 0
63993: PPUSH
63994: PPUSH
63995: PPUSH
63996: PPUSH
63997: PPUSH
63998: PPUSH
63999: PPUSH
// result := [ ] ;
64000: LD_ADDR_VAR 0 4
64004: PUSH
64005: EMPTY
64006: ST_TO_ADDR
// if x - r < 0 then
64007: LD_VAR 0 1
64011: PUSH
64012: LD_VAR 0 3
64016: MINUS
64017: PUSH
64018: LD_INT 0
64020: LESS
64021: IFFALSE 64033
// min_x := 0 else
64023: LD_ADDR_VAR 0 8
64027: PUSH
64028: LD_INT 0
64030: ST_TO_ADDR
64031: GO 64049
// min_x := x - r ;
64033: LD_ADDR_VAR 0 8
64037: PUSH
64038: LD_VAR 0 1
64042: PUSH
64043: LD_VAR 0 3
64047: MINUS
64048: ST_TO_ADDR
// if y - r < 0 then
64049: LD_VAR 0 2
64053: PUSH
64054: LD_VAR 0 3
64058: MINUS
64059: PUSH
64060: LD_INT 0
64062: LESS
64063: IFFALSE 64075
// min_y := 0 else
64065: LD_ADDR_VAR 0 7
64069: PUSH
64070: LD_INT 0
64072: ST_TO_ADDR
64073: GO 64091
// min_y := y - r ;
64075: LD_ADDR_VAR 0 7
64079: PUSH
64080: LD_VAR 0 2
64084: PUSH
64085: LD_VAR 0 3
64089: MINUS
64090: ST_TO_ADDR
// max_x := x + r ;
64091: LD_ADDR_VAR 0 9
64095: PUSH
64096: LD_VAR 0 1
64100: PUSH
64101: LD_VAR 0 3
64105: PLUS
64106: ST_TO_ADDR
// max_y := y + r ;
64107: LD_ADDR_VAR 0 10
64111: PUSH
64112: LD_VAR 0 2
64116: PUSH
64117: LD_VAR 0 3
64121: PLUS
64122: ST_TO_ADDR
// for _x = min_x to max_x do
64123: LD_ADDR_VAR 0 5
64127: PUSH
64128: DOUBLE
64129: LD_VAR 0 8
64133: DEC
64134: ST_TO_ADDR
64135: LD_VAR 0 9
64139: PUSH
64140: FOR_TO
64141: IFFALSE 64242
// for _y = min_y to max_y do
64143: LD_ADDR_VAR 0 6
64147: PUSH
64148: DOUBLE
64149: LD_VAR 0 7
64153: DEC
64154: ST_TO_ADDR
64155: LD_VAR 0 10
64159: PUSH
64160: FOR_TO
64161: IFFALSE 64238
// begin if not ValidHex ( _x , _y ) then
64163: LD_VAR 0 5
64167: PPUSH
64168: LD_VAR 0 6
64172: PPUSH
64173: CALL_OW 488
64177: NOT
64178: IFFALSE 64182
// continue ;
64180: GO 64160
// if GetResourceTypeXY ( _x , _y ) then
64182: LD_VAR 0 5
64186: PPUSH
64187: LD_VAR 0 6
64191: PPUSH
64192: CALL_OW 283
64196: IFFALSE 64236
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64198: LD_ADDR_VAR 0 4
64202: PUSH
64203: LD_VAR 0 4
64207: PPUSH
64208: LD_VAR 0 4
64212: PUSH
64213: LD_INT 1
64215: PLUS
64216: PPUSH
64217: LD_VAR 0 5
64221: PUSH
64222: LD_VAR 0 6
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PPUSH
64231: CALL_OW 1
64235: ST_TO_ADDR
// end ;
64236: GO 64160
64238: POP
64239: POP
64240: GO 64140
64242: POP
64243: POP
// end ;
64244: LD_VAR 0 4
64248: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64249: LD_INT 0
64251: PPUSH
64252: PPUSH
64253: PPUSH
64254: PPUSH
64255: PPUSH
64256: PPUSH
64257: PPUSH
64258: PPUSH
// if not units then
64259: LD_VAR 0 1
64263: NOT
64264: IFFALSE 64268
// exit ;
64266: GO 64794
// result := UnitFilter ( units , [ f_ok ] ) ;
64268: LD_ADDR_VAR 0 3
64272: PUSH
64273: LD_VAR 0 1
64277: PPUSH
64278: LD_INT 50
64280: PUSH
64281: EMPTY
64282: LIST
64283: PPUSH
64284: CALL_OW 72
64288: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64289: LD_ADDR_VAR 0 8
64293: PUSH
64294: LD_VAR 0 1
64298: PUSH
64299: LD_INT 1
64301: ARRAY
64302: PPUSH
64303: CALL_OW 255
64307: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64308: LD_ADDR_VAR 0 10
64312: PUSH
64313: LD_INT 29
64315: PUSH
64316: LD_EXP 43
64320: PUSH
64321: LD_INT 49
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: LIST
64328: ST_TO_ADDR
// if not result then
64329: LD_VAR 0 3
64333: NOT
64334: IFFALSE 64338
// exit ;
64336: GO 64794
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64338: LD_ADDR_VAR 0 5
64342: PUSH
64343: LD_INT 81
64345: PUSH
64346: LD_VAR 0 8
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PPUSH
64355: CALL_OW 69
64359: ST_TO_ADDR
// for i in result do
64360: LD_ADDR_VAR 0 4
64364: PUSH
64365: LD_VAR 0 3
64369: PUSH
64370: FOR_IN
64371: IFFALSE 64792
// begin tag := GetTag ( i ) + 1 ;
64373: LD_ADDR_VAR 0 9
64377: PUSH
64378: LD_VAR 0 4
64382: PPUSH
64383: CALL_OW 110
64387: PUSH
64388: LD_INT 1
64390: PLUS
64391: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64392: LD_ADDR_VAR 0 7
64396: PUSH
64397: LD_VAR 0 4
64401: PPUSH
64402: CALL_OW 250
64406: PPUSH
64407: LD_VAR 0 4
64411: PPUSH
64412: CALL_OW 251
64416: PPUSH
64417: LD_INT 6
64419: PPUSH
64420: CALL 63991 0 3
64424: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64425: LD_VAR 0 4
64429: PPUSH
64430: CALL_OW 247
64434: PUSH
64435: LD_INT 2
64437: EQUAL
64438: PUSH
64439: LD_VAR 0 7
64443: AND
64444: PUSH
64445: LD_VAR 0 4
64449: PPUSH
64450: CALL_OW 264
64454: PUSH
64455: LD_VAR 0 10
64459: IN
64460: NOT
64461: AND
64462: IFFALSE 64501
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64464: LD_VAR 0 4
64468: PPUSH
64469: LD_VAR 0 7
64473: PUSH
64474: LD_INT 1
64476: ARRAY
64477: PUSH
64478: LD_INT 1
64480: ARRAY
64481: PPUSH
64482: LD_VAR 0 7
64486: PUSH
64487: LD_INT 1
64489: ARRAY
64490: PUSH
64491: LD_INT 2
64493: ARRAY
64494: PPUSH
64495: CALL_OW 116
64499: GO 64790
// if path > tag then
64501: LD_VAR 0 2
64505: PUSH
64506: LD_VAR 0 9
64510: GREATER
64511: IFFALSE 64719
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64513: LD_ADDR_VAR 0 6
64517: PUSH
64518: LD_VAR 0 5
64522: PPUSH
64523: LD_INT 91
64525: PUSH
64526: LD_VAR 0 4
64530: PUSH
64531: LD_INT 8
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: PPUSH
64539: CALL_OW 72
64543: ST_TO_ADDR
// if nearEnemy then
64544: LD_VAR 0 6
64548: IFFALSE 64617
// begin if GetWeapon ( i ) = ru_time_lapser then
64550: LD_VAR 0 4
64554: PPUSH
64555: CALL_OW 264
64559: PUSH
64560: LD_INT 49
64562: EQUAL
64563: IFFALSE 64591
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64565: LD_VAR 0 4
64569: PPUSH
64570: LD_VAR 0 6
64574: PPUSH
64575: LD_VAR 0 4
64579: PPUSH
64580: CALL_OW 74
64584: PPUSH
64585: CALL_OW 112
64589: GO 64615
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64591: LD_VAR 0 4
64595: PPUSH
64596: LD_VAR 0 6
64600: PPUSH
64601: LD_VAR 0 4
64605: PPUSH
64606: CALL_OW 74
64610: PPUSH
64611: CALL_OW 115
// end else
64615: GO 64717
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64617: LD_VAR 0 4
64621: PPUSH
64622: LD_VAR 0 2
64626: PUSH
64627: LD_VAR 0 9
64631: ARRAY
64632: PUSH
64633: LD_INT 1
64635: ARRAY
64636: PPUSH
64637: LD_VAR 0 2
64641: PUSH
64642: LD_VAR 0 9
64646: ARRAY
64647: PUSH
64648: LD_INT 2
64650: ARRAY
64651: PPUSH
64652: CALL_OW 297
64656: PUSH
64657: LD_INT 6
64659: GREATER
64660: IFFALSE 64703
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64662: LD_VAR 0 4
64666: PPUSH
64667: LD_VAR 0 2
64671: PUSH
64672: LD_VAR 0 9
64676: ARRAY
64677: PUSH
64678: LD_INT 1
64680: ARRAY
64681: PPUSH
64682: LD_VAR 0 2
64686: PUSH
64687: LD_VAR 0 9
64691: ARRAY
64692: PUSH
64693: LD_INT 2
64695: ARRAY
64696: PPUSH
64697: CALL_OW 114
64701: GO 64717
// SetTag ( i , tag ) ;
64703: LD_VAR 0 4
64707: PPUSH
64708: LD_VAR 0 9
64712: PPUSH
64713: CALL_OW 109
// end else
64717: GO 64790
// if enemy then
64719: LD_VAR 0 5
64723: IFFALSE 64790
// begin if GetWeapon ( i ) = ru_time_lapser then
64725: LD_VAR 0 4
64729: PPUSH
64730: CALL_OW 264
64734: PUSH
64735: LD_INT 49
64737: EQUAL
64738: IFFALSE 64766
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64740: LD_VAR 0 4
64744: PPUSH
64745: LD_VAR 0 5
64749: PPUSH
64750: LD_VAR 0 4
64754: PPUSH
64755: CALL_OW 74
64759: PPUSH
64760: CALL_OW 112
64764: GO 64790
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64766: LD_VAR 0 4
64770: PPUSH
64771: LD_VAR 0 5
64775: PPUSH
64776: LD_VAR 0 4
64780: PPUSH
64781: CALL_OW 74
64785: PPUSH
64786: CALL_OW 115
// end ; end ;
64790: GO 64370
64792: POP
64793: POP
// end ;
64794: LD_VAR 0 3
64798: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64799: LD_INT 0
64801: PPUSH
64802: PPUSH
64803: PPUSH
// if not unit or IsInUnit ( unit ) then
64804: LD_VAR 0 1
64808: NOT
64809: PUSH
64810: LD_VAR 0 1
64814: PPUSH
64815: CALL_OW 310
64819: OR
64820: IFFALSE 64824
// exit ;
64822: GO 64915
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64824: LD_ADDR_VAR 0 4
64828: PUSH
64829: LD_VAR 0 1
64833: PPUSH
64834: CALL_OW 250
64838: PPUSH
64839: LD_VAR 0 2
64843: PPUSH
64844: LD_INT 1
64846: PPUSH
64847: CALL_OW 272
64851: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64852: LD_ADDR_VAR 0 5
64856: PUSH
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 251
64866: PPUSH
64867: LD_VAR 0 2
64871: PPUSH
64872: LD_INT 1
64874: PPUSH
64875: CALL_OW 273
64879: ST_TO_ADDR
// if ValidHex ( x , y ) then
64880: LD_VAR 0 4
64884: PPUSH
64885: LD_VAR 0 5
64889: PPUSH
64890: CALL_OW 488
64894: IFFALSE 64915
// ComTurnXY ( unit , x , y ) ;
64896: LD_VAR 0 1
64900: PPUSH
64901: LD_VAR 0 4
64905: PPUSH
64906: LD_VAR 0 5
64910: PPUSH
64911: CALL_OW 118
// end ;
64915: LD_VAR 0 3
64919: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64920: LD_INT 0
64922: PPUSH
64923: PPUSH
// result := false ;
64924: LD_ADDR_VAR 0 3
64928: PUSH
64929: LD_INT 0
64931: ST_TO_ADDR
// if not units then
64932: LD_VAR 0 2
64936: NOT
64937: IFFALSE 64941
// exit ;
64939: GO 64986
// for i in units do
64941: LD_ADDR_VAR 0 4
64945: PUSH
64946: LD_VAR 0 2
64950: PUSH
64951: FOR_IN
64952: IFFALSE 64984
// if See ( side , i ) then
64954: LD_VAR 0 1
64958: PPUSH
64959: LD_VAR 0 4
64963: PPUSH
64964: CALL_OW 292
64968: IFFALSE 64982
// begin result := true ;
64970: LD_ADDR_VAR 0 3
64974: PUSH
64975: LD_INT 1
64977: ST_TO_ADDR
// exit ;
64978: POP
64979: POP
64980: GO 64986
// end ;
64982: GO 64951
64984: POP
64985: POP
// end ;
64986: LD_VAR 0 3
64990: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64991: LD_INT 0
64993: PPUSH
64994: PPUSH
64995: PPUSH
64996: PPUSH
// if not unit or not points then
64997: LD_VAR 0 1
65001: NOT
65002: PUSH
65003: LD_VAR 0 2
65007: NOT
65008: OR
65009: IFFALSE 65013
// exit ;
65011: GO 65103
// dist := 99999 ;
65013: LD_ADDR_VAR 0 5
65017: PUSH
65018: LD_INT 99999
65020: ST_TO_ADDR
// for i in points do
65021: LD_ADDR_VAR 0 4
65025: PUSH
65026: LD_VAR 0 2
65030: PUSH
65031: FOR_IN
65032: IFFALSE 65101
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65034: LD_ADDR_VAR 0 6
65038: PUSH
65039: LD_VAR 0 1
65043: PPUSH
65044: LD_VAR 0 4
65048: PUSH
65049: LD_INT 1
65051: ARRAY
65052: PPUSH
65053: LD_VAR 0 4
65057: PUSH
65058: LD_INT 2
65060: ARRAY
65061: PPUSH
65062: CALL_OW 297
65066: ST_TO_ADDR
// if tmpDist < dist then
65067: LD_VAR 0 6
65071: PUSH
65072: LD_VAR 0 5
65076: LESS
65077: IFFALSE 65099
// begin result := i ;
65079: LD_ADDR_VAR 0 3
65083: PUSH
65084: LD_VAR 0 4
65088: ST_TO_ADDR
// dist := tmpDist ;
65089: LD_ADDR_VAR 0 5
65093: PUSH
65094: LD_VAR 0 6
65098: ST_TO_ADDR
// end ; end ;
65099: GO 65031
65101: POP
65102: POP
// end ;
65103: LD_VAR 0 3
65107: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65108: LD_INT 0
65110: PPUSH
// uc_side := side ;
65111: LD_ADDR_OWVAR 20
65115: PUSH
65116: LD_VAR 0 1
65120: ST_TO_ADDR
// uc_nation := 3 ;
65121: LD_ADDR_OWVAR 21
65125: PUSH
65126: LD_INT 3
65128: ST_TO_ADDR
// vc_chassis := 25 ;
65129: LD_ADDR_OWVAR 37
65133: PUSH
65134: LD_INT 25
65136: ST_TO_ADDR
// vc_engine := engine_siberite ;
65137: LD_ADDR_OWVAR 39
65141: PUSH
65142: LD_INT 3
65144: ST_TO_ADDR
// vc_control := control_computer ;
65145: LD_ADDR_OWVAR 38
65149: PUSH
65150: LD_INT 3
65152: ST_TO_ADDR
// vc_weapon := 59 ;
65153: LD_ADDR_OWVAR 40
65157: PUSH
65158: LD_INT 59
65160: ST_TO_ADDR
// result := CreateVehicle ;
65161: LD_ADDR_VAR 0 5
65165: PUSH
65166: CALL_OW 45
65170: ST_TO_ADDR
// SetDir ( result , d ) ;
65171: LD_VAR 0 5
65175: PPUSH
65176: LD_VAR 0 4
65180: PPUSH
65181: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65185: LD_VAR 0 5
65189: PPUSH
65190: LD_VAR 0 2
65194: PPUSH
65195: LD_VAR 0 3
65199: PPUSH
65200: LD_INT 0
65202: PPUSH
65203: CALL_OW 48
// end ;
65207: LD_VAR 0 5
65211: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65212: LD_INT 0
65214: PPUSH
65215: PPUSH
65216: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65217: LD_ADDR_VAR 0 2
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65240: LD_VAR 0 1
65244: NOT
65245: PUSH
65246: LD_VAR 0 1
65250: PPUSH
65251: CALL_OW 264
65255: PUSH
65256: LD_INT 12
65258: PUSH
65259: LD_INT 51
65261: PUSH
65262: LD_INT 32
65264: PUSH
65265: LD_EXP 40
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: IN
65276: NOT
65277: OR
65278: IFFALSE 65282
// exit ;
65280: GO 65380
// for i := 1 to 3 do
65282: LD_ADDR_VAR 0 3
65286: PUSH
65287: DOUBLE
65288: LD_INT 1
65290: DEC
65291: ST_TO_ADDR
65292: LD_INT 3
65294: PUSH
65295: FOR_TO
65296: IFFALSE 65378
// begin tmp := GetCargo ( cargo , i ) ;
65298: LD_ADDR_VAR 0 4
65302: PUSH
65303: LD_VAR 0 1
65307: PPUSH
65308: LD_VAR 0 3
65312: PPUSH
65313: CALL_OW 289
65317: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65318: LD_ADDR_VAR 0 2
65322: PUSH
65323: LD_VAR 0 2
65327: PPUSH
65328: LD_VAR 0 3
65332: PPUSH
65333: LD_VAR 0 4
65337: PPUSH
65338: CALL_OW 1
65342: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65343: LD_ADDR_VAR 0 2
65347: PUSH
65348: LD_VAR 0 2
65352: PPUSH
65353: LD_INT 4
65355: PPUSH
65356: LD_VAR 0 2
65360: PUSH
65361: LD_INT 4
65363: ARRAY
65364: PUSH
65365: LD_VAR 0 4
65369: PLUS
65370: PPUSH
65371: CALL_OW 1
65375: ST_TO_ADDR
// end ;
65376: GO 65295
65378: POP
65379: POP
// end ;
65380: LD_VAR 0 2
65384: RET
// export function Length ( array ) ; begin
65385: LD_INT 0
65387: PPUSH
// result := array + 0 ;
65388: LD_ADDR_VAR 0 2
65392: PUSH
65393: LD_VAR 0 1
65397: PUSH
65398: LD_INT 0
65400: PLUS
65401: ST_TO_ADDR
// end ;
65402: LD_VAR 0 2
65406: RET
// export function PrepareArray ( array ) ; begin
65407: LD_INT 0
65409: PPUSH
// result := array diff 0 ;
65410: LD_ADDR_VAR 0 2
65414: PUSH
65415: LD_VAR 0 1
65419: PUSH
65420: LD_INT 0
65422: DIFF
65423: ST_TO_ADDR
// if not result [ 1 ] then
65424: LD_VAR 0 2
65428: PUSH
65429: LD_INT 1
65431: ARRAY
65432: NOT
65433: IFFALSE 65453
// result := Delete ( result , 1 ) ;
65435: LD_ADDR_VAR 0 2
65439: PUSH
65440: LD_VAR 0 2
65444: PPUSH
65445: LD_INT 1
65447: PPUSH
65448: CALL_OW 3
65452: ST_TO_ADDR
// end ; end_of_file
65453: LD_VAR 0 2
65457: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65458: LD_VAR 0 1
65462: PPUSH
65463: LD_VAR 0 2
65467: PPUSH
65468: LD_VAR 0 3
65472: PPUSH
65473: LD_VAR 0 4
65477: PPUSH
65478: LD_VAR 0 5
65482: PPUSH
65483: LD_VAR 0 6
65487: PPUSH
65488: CALL 4331 0 6
// end ;
65492: PPOPN 6
65494: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65495: LD_INT 0
65497: PPUSH
// begin if not units then
65498: LD_VAR 0 1
65502: NOT
65503: IFFALSE 65507
// exit ;
65505: GO 65507
// end ;
65507: PPOPN 7
65509: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65510: CALL 4302 0 0
// end ;
65514: PPOPN 1
65516: END
