// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 94 0 0
// PrepareAlliance ;
  30: CALL 758 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3550 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 15447 0 1
// end ; end_of_file
  91: PPOPN 1
  93: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 101: LD_ADDR_VAR 0 3
 105: PUSH
 106: LD_STRING 13a_buildings
 108: PPUSH
 109: LD_INT 7
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: LD_INT 1
 117: PUSH
 118: LD_INT 70
 120: PUSH
 121: LD_INT 46
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 10
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: PPUSH
 154: CALL_OW 30
 158: ST_TO_ADDR
// bc_kind1 := - 1 ;
 159: LD_ADDR_OWVAR 44
 163: PUSH
 164: LD_INT 1
 166: NEG
 167: ST_TO_ADDR
// bc_kind2 := - 1 ;
 168: LD_ADDR_OWVAR 45
 172: PUSH
 173: LD_INT 1
 175: NEG
 176: ST_TO_ADDR
// for i in tmp do
 177: LD_ADDR_VAR 0 2
 181: PUSH
 182: LD_VAR 0 3
 186: PUSH
 187: FOR_IN
 188: IFFALSE 433
// begin uc_side := 7 ;
 190: LD_ADDR_OWVAR 20
 194: PUSH
 195: LD_INT 7
 197: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 198: LD_ADDR_OWVAR 21
 202: PUSH
 203: LD_VAR 0 2
 207: PUSH
 208: LD_INT 2
 210: ARRAY
 211: ST_TO_ADDR
// if i [ 2 ] = 2 then
 212: LD_VAR 0 2
 216: PUSH
 217: LD_INT 2
 219: ARRAY
 220: PUSH
 221: LD_INT 2
 223: EQUAL
 224: IFFALSE 234
// uc_side := 4 ;
 226: LD_ADDR_OWVAR 20
 230: PUSH
 231: LD_INT 4
 233: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 234: LD_ADDR_OWVAR 42
 238: PUSH
 239: LD_VAR 0 2
 243: PUSH
 244: LD_INT 3
 246: ARRAY
 247: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 248: LD_VAR 0 2
 252: PUSH
 253: LD_INT 3
 255: ARRAY
 256: PUSH
 257: LD_INT 29
 259: PUSH
 260: LD_INT 30
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: IN
 267: IFFALSE 300
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 269: LD_VAR 0 2
 273: PUSH
 274: LD_INT 4
 276: ARRAY
 277: PPUSH
 278: LD_VAR 0 2
 282: PUSH
 283: LD_INT 5
 285: ARRAY
 286: PPUSH
 287: LD_VAR 0 2
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PPUSH
 296: CALL_OW 441
// if i [ 8 ] then
 300: LD_VAR 0 2
 304: PUSH
 305: LD_INT 8
 307: ARRAY
 308: IFFALSE 324
// bc_kind1 := i [ 8 ] ;
 310: LD_ADDR_OWVAR 44
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_INT 8
 322: ARRAY
 323: ST_TO_ADDR
// if i [ 9 ] then
 324: LD_VAR 0 2
 328: PUSH
 329: LD_INT 9
 331: ARRAY
 332: IFFALSE 348
// bc_kind2 := i [ 9 ] ;
 334: LD_ADDR_OWVAR 45
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 9
 346: ARRAY
 347: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 348: LD_ADDR_VAR 0 4
 352: PUSH
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 4
 360: ARRAY
 361: PPUSH
 362: LD_VAR 0 2
 366: PUSH
 367: LD_INT 5
 369: ARRAY
 370: PPUSH
 371: LD_VAR 0 2
 375: PUSH
 376: LD_INT 6
 378: ARRAY
 379: PPUSH
 380: CALL_OW 47
 384: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_VAR 0 2
 394: PUSH
 395: LD_INT 7
 397: ARRAY
 398: PPUSH
 399: CALL_OW 241
// if i [ 10 ] then
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 10
 410: ARRAY
 411: IFFALSE 431
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 413: LD_VAR 0 4
 417: PPUSH
 418: LD_VAR 0 2
 422: PUSH
 423: LD_INT 10
 425: ARRAY
 426: PPUSH
 427: CALL_OW 431
// end ;
 431: GO 187
 433: POP
 434: POP
// if HexInfo ( 144 , 65 ) = 0 then
 435: LD_INT 144
 437: PPUSH
 438: LD_INT 65
 440: PPUSH
 441: CALL_OW 428
 445: PUSH
 446: LD_INT 0
 448: EQUAL
 449: IFFALSE 486
// begin uc_side := 4 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 4
 458: ST_TO_ADDR
// bc_type := b_warehouse ;
 459: LD_ADDR_OWVAR 42
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: LD_INT 144
 474: PPUSH
 475: LD_INT 65
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 47
 485: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 486: LD_ADDR_VAR 0 2
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 2
 503: PUSH
 504: LD_INT 30
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 30
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PPUSH
 533: CALL_OW 69
 537: PUSH
 538: FOR_IN
 539: IFFALSE 591
// for j = 1 to 3 do
 541: LD_ADDR_VAR 0 5
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 587
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 557: LD_VAR 0 2
 561: PPUSH
 562: CALL_OW 274
 566: PPUSH
 567: LD_VAR 0 5
 571: PPUSH
 572: LD_INT 3000
 574: PUSH
 575: LD_VAR 0 5
 579: DIVREAL
 580: PPUSH
 581: CALL_OW 277
 585: GO 554
 587: POP
 588: POP
 589: GO 538
 591: POP
 592: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_INT 3
 600: PPUSH
 601: LD_INT 22
 603: PUSH
 604: LD_INT 7
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PPUSH
 611: CALL_OW 70
 615: PUSH
 616: FOR_IN
 617: IFFALSE 630
// RemoveUnit ( i ) ;
 619: LD_VAR 0 2
 623: PPUSH
 624: CALL_OW 64
 628: GO 616
 630: POP
 631: POP
// end ;
 632: LD_VAR 0 1
 636: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
// if exist_mode then
 641: LD_VAR 0 2
 645: IFFALSE 670
// unit := CreateCharacter ( prefix & ident ) else
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_VAR 0 3
 656: PUSH
 657: LD_VAR 0 1
 661: STR
 662: PPUSH
 663: CALL_OW 34
 667: ST_TO_ADDR
 668: GO 685
// unit := NewCharacter ( ident ) ;
 670: LD_ADDR_VAR 0 5
 674: PUSH
 675: LD_VAR 0 1
 679: PPUSH
 680: CALL_OW 25
 684: ST_TO_ADDR
// result := unit ;
 685: LD_ADDR_VAR 0 4
 689: PUSH
 690: LD_VAR 0 5
 694: ST_TO_ADDR
// end ;
 695: LD_VAR 0 4
 699: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
 700: LD_INT 0
 702: PPUSH
// vc_chassis := chassis ;
 703: LD_ADDR_OWVAR 37
 707: PUSH
 708: LD_VAR 0 1
 712: ST_TO_ADDR
// vc_engine := engine ;
 713: LD_ADDR_OWVAR 39
 717: PUSH
 718: LD_VAR 0 2
 722: ST_TO_ADDR
// vc_control := control ;
 723: LD_ADDR_OWVAR 38
 727: PUSH
 728: LD_VAR 0 3
 732: ST_TO_ADDR
// vc_weapon := weapon ;
 733: LD_ADDR_OWVAR 40
 737: PUSH
 738: LD_VAR 0 4
 742: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 743: LD_ADDR_OWVAR 41
 747: PUSH
 748: LD_VAR 0 5
 752: ST_TO_ADDR
// end ; end_of_file
 753: LD_VAR 0 6
 757: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
// uc_side := 7 ;
 764: LD_ADDR_OWVAR 20
 768: PUSH
 769: LD_INT 7
 771: ST_TO_ADDR
// uc_nation := 1 ;
 772: LD_ADDR_OWVAR 21
 776: PUSH
 777: LD_INT 1
 779: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 780: LD_ADDR_EXP 2
 784: PUSH
 785: LD_STRING JMM
 787: PPUSH
 788: LD_EXP 1
 792: NOT
 793: PPUSH
 794: LD_STRING 13a_
 796: PPUSH
 797: CALL 637 0 3
 801: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 802: LD_ADDR_EXP 3
 806: PUSH
 807: LD_STRING Burlak
 809: PPUSH
 810: LD_EXP 1
 814: NOT
 815: PPUSH
 816: LD_STRING 13a_
 818: PPUSH
 819: CALL 637 0 3
 823: ST_TO_ADDR
// if debug then
 824: LD_EXP 1
 828: IFFALSE 863
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 4
 835: PPUSH
 836: LD_INT 10
 838: PPUSH
 839: CALL_OW 380
// JMM := CreateHuman ;
 843: LD_ADDR_EXP 2
 847: PUSH
 848: CALL_OW 44
 852: ST_TO_ADDR
// Burlak := CreateHuman ;
 853: LD_ADDR_EXP 3
 857: PUSH
 858: CALL_OW 44
 862: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 863: LD_ADDR_EXP 4
 867: PUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 7
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 2
 883: PUSH
 884: LD_INT 23
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 23
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 30
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PPUSH
 924: CALL_OW 70
 928: ST_TO_ADDR
// if freedom then
 929: LD_EXP 4
 933: IFFALSE 1060
// begin freedom := freedom [ 1 ] ;
 935: LD_ADDR_EXP 4
 939: PUSH
 940: LD_EXP 4
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 949: LD_EXP 4
 953: PPUSH
 954: LD_STRING freedom
 956: PPUSH
 957: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 961: LD_EXP 4
 965: PPUSH
 966: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 970: LD_EXP 2
 974: PPUSH
 975: LD_EXP 4
 979: PPUSH
 980: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 984: LD_EXP 3
 988: PPUSH
 989: LD_EXP 4
 993: PPUSH
 994: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 998: LD_EXP 4
1002: PPUSH
1003: CALL_OW 274
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: LD_INT 1000
1013: PPUSH
1014: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
1018: LD_EXP 4
1022: PPUSH
1023: CALL_OW 274
1027: PPUSH
1028: LD_INT 2
1030: PPUSH
1031: LD_INT 400
1033: PPUSH
1034: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
1038: LD_EXP 4
1042: PPUSH
1043: CALL_OW 274
1047: PPUSH
1048: LD_INT 3
1050: PPUSH
1051: LD_INT 30
1053: PPUSH
1054: CALL_OW 277
// end else
1058: GO 1147
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
1060: LD_EXP 2
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
1075: LD_EXP 3
1079: PPUSH
1080: LD_EXP 2
1084: PPUSH
1085: CALL_OW 250
1089: PPUSH
1090: LD_EXP 2
1094: PPUSH
1095: CALL_OW 251
1099: PPUSH
1100: LD_INT 8
1102: PPUSH
1103: LD_INT 0
1105: PPUSH
1106: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1110: LD_EXP 2
1114: PPUSH
1115: LD_EXP 3
1119: PPUSH
1120: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1124: LD_EXP 3
1128: PPUSH
1129: LD_EXP 2
1133: PPUSH
1134: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1138: LD_EXP 2
1142: PPUSH
1143: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1147: LD_EXP 2
1151: PPUSH
1152: LD_INT 2
1154: PPUSH
1155: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1159: LD_ADDR_VAR 0 2
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: LD_INT 3
1169: PUSH
1170: LD_INT 4
1172: PUSH
1173: LD_INT 5
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 5
1184: PUSH
1185: LD_INT 9
1187: PUSH
1188: LD_INT 7
1190: PUSH
1191: LD_INT 4
1193: PUSH
1194: LD_INT 12
1196: PUSH
1197: EMPTY
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: ST_TO_ADDR
// for i = 1 to 5 do
1208: LD_ADDR_VAR 0 3
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 5
1220: PUSH
1221: FOR_TO
1222: IFFALSE 1406
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 1
1231: ARRAY
1232: PUSH
1233: LD_VAR 0 3
1237: PUSH
1238: LD_INT 4
1240: MOD
1241: PUSH
1242: LD_INT 1
1244: PLUS
1245: ARRAY
1246: PPUSH
1247: LD_INT 1
1249: PUSH
1250: LD_INT 3
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 1
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 12
1267: ARRAY
1268: PPUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_VAR 0 2
1276: PUSH
1277: LD_INT 2
1279: ARRAY
1280: PUSH
1281: LD_VAR 0 3
1285: PUSH
1286: LD_INT 5
1288: MOD
1289: PUSH
1290: LD_INT 1
1292: PLUS
1293: ARRAY
1294: PPUSH
1295: LD_INT 100
1297: PPUSH
1298: CALL 700 0 5
// veh := CreateVehicle ;
1302: LD_ADDR_VAR 0 4
1306: PUSH
1307: CALL_OW 45
1311: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1312: LD_VAR 0 4
1316: PPUSH
1317: LD_INT 0
1319: PPUSH
1320: LD_INT 5
1322: PPUSH
1323: CALL_OW 12
1327: PPUSH
1328: CALL_OW 233
// if freedom then
1332: LD_EXP 4
1336: IFFALSE 1369
// begin if IsInArea ( freedom , freedom_base ) then
1338: LD_EXP 4
1342: PPUSH
1343: LD_INT 1
1345: PPUSH
1346: CALL_OW 308
1350: IFFALSE 1367
// PlaceUnitArea ( veh , freedom_base , false ) end else
1352: LD_VAR 0 4
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL_OW 49
1367: GO 1404
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1369: LD_VAR 0 4
1373: PPUSH
1374: LD_EXP 2
1378: PPUSH
1379: CALL_OW 250
1383: PPUSH
1384: LD_EXP 2
1388: PPUSH
1389: CALL_OW 251
1393: PPUSH
1394: LD_INT 14
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 50
// end ;
1404: GO 1221
1406: POP
1407: POP
// uc_nation := 3 ;
1408: LD_ADDR_OWVAR 21
1412: PUSH
1413: LD_INT 3
1415: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: LD_INT 21
1423: PUSH
1424: LD_INT 22
1426: PUSH
1427: LD_INT 23
1429: PUSH
1430: LD_INT 24
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 43
1441: PUSH
1442: LD_INT 44
1444: PUSH
1445: LD_INT 45
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: ST_TO_ADDR
// for i = 1 to 5 do
1457: LD_ADDR_VAR 0 3
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_INT 5
1469: PUSH
1470: FOR_TO
1471: IFFALSE 1598
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1473: LD_VAR 0 2
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PUSH
1482: LD_VAR 0 3
1486: PUSH
1487: LD_INT 4
1489: MOD
1490: PUSH
1491: LD_INT 1
1493: PLUS
1494: ARRAY
1495: PPUSH
1496: LD_INT 1
1498: PUSH
1499: LD_INT 3
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 1
1508: PPUSH
1509: LD_INT 2
1511: PPUSH
1512: CALL_OW 12
1516: ARRAY
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: LD_VAR 0 2
1525: PUSH
1526: LD_INT 2
1528: ARRAY
1529: PUSH
1530: LD_VAR 0 3
1534: PUSH
1535: LD_INT 3
1537: MOD
1538: PUSH
1539: LD_INT 1
1541: PLUS
1542: ARRAY
1543: PPUSH
1544: LD_INT 100
1546: PPUSH
1547: CALL 700 0 5
// veh := CreateVehicle ;
1551: LD_ADDR_VAR 0 4
1555: PUSH
1556: CALL_OW 45
1560: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1561: LD_VAR 0 4
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 5
1571: PPUSH
1572: CALL_OW 12
1576: PPUSH
1577: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1581: LD_VAR 0 4
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: LD_INT 0
1591: PPUSH
1592: CALL_OW 49
// end ;
1596: GO 1470
1598: POP
1599: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1600: LD_INT 2
1602: PUSH
1603: LD_INT 34
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 34
1615: PUSH
1616: LD_INT 51
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 69
1632: NOT
1633: IFFALSE 1699
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1635: LD_INT 22
1637: PPUSH
1638: LD_INT 3
1640: PPUSH
1641: LD_INT 1
1643: PPUSH
1644: LD_INT 51
1646: PPUSH
1647: LD_INT 0
1649: PPUSH
1650: CALL 700 0 5
// veh := CreateVehicle ;
1654: LD_ADDR_VAR 0 4
1658: PUSH
1659: CALL_OW 45
1663: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1664: LD_VAR 0 4
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: LD_INT 5
1674: PPUSH
1675: CALL_OW 12
1679: PPUSH
1680: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1684: LD_VAR 0 4
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1699: LD_ADDR_VAR 0 2
1703: PUSH
1704: LD_STRING 13a_Masha
1706: PPUSH
1707: EMPTY
1708: PPUSH
1709: CALL_OW 30
1713: ST_TO_ADDR
// if tmp then
1714: LD_VAR 0 2
1718: IFFALSE 1801
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1720: LD_VAR 0 2
1724: PUSH
1725: LD_INT 1
1727: ARRAY
1728: PPUSH
1729: LD_VAR 0 2
1733: PUSH
1734: LD_INT 2
1736: ARRAY
1737: PPUSH
1738: LD_VAR 0 2
1742: PUSH
1743: LD_INT 3
1745: ARRAY
1746: PPUSH
1747: LD_VAR 0 2
1751: PUSH
1752: LD_INT 4
1754: ARRAY
1755: PPUSH
1756: LD_INT 100
1758: PPUSH
1759: CALL 700 0 5
// Masha := CreateVehicle ;
1763: LD_ADDR_EXP 36
1767: PUSH
1768: CALL_OW 45
1772: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1773: LD_EXP 36
1777: PPUSH
1778: LD_INT 1
1780: PPUSH
1781: LD_INT 0
1783: PPUSH
1784: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1788: LD_EXP 36
1792: PPUSH
1793: LD_INT 7
1795: NEG
1796: PPUSH
1797: CALL_OW 242
// end ; uc_side := 4 ;
1801: LD_ADDR_OWVAR 20
1805: PUSH
1806: LD_INT 4
1808: ST_TO_ADDR
// tmp := [ ] ;
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: EMPTY
1815: ST_TO_ADDR
// squad1 := [ ] ;
1816: LD_ADDR_EXP 37
1820: PUSH
1821: EMPTY
1822: ST_TO_ADDR
// squad2 := [ ] ;
1823: LD_ADDR_EXP 38
1827: PUSH
1828: EMPTY
1829: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1830: LD_ADDR_EXP 19
1834: PUSH
1835: LD_STRING Joan
1837: PPUSH
1838: LD_EXP 1
1842: NOT
1843: PPUSH
1844: LD_STRING 13a_
1846: PPUSH
1847: CALL 637 0 3
1851: ST_TO_ADDR
// if Joan then
1852: LD_EXP 19
1856: IFFALSE 1874
// tmp := tmp ^ Joan ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: LD_VAR 0 2
1867: PUSH
1868: LD_EXP 19
1872: ADD
1873: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1874: LD_ADDR_EXP 5
1878: PUSH
1879: LD_STRING Roth
1881: PPUSH
1882: LD_EXP 1
1886: NOT
1887: PPUSH
1888: LD_STRING 13a_
1890: PPUSH
1891: CALL 637 0 3
1895: ST_TO_ADDR
// if Roth then
1896: LD_EXP 5
1900: IFFALSE 1918
// tmp := tmp ^ Roth ;
1902: LD_ADDR_VAR 0 2
1906: PUSH
1907: LD_VAR 0 2
1911: PUSH
1912: LD_EXP 5
1916: ADD
1917: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1918: LD_ADDR_EXP 10
1922: PUSH
1923: LD_STRING Denis
1925: PPUSH
1926: LD_EXP 1
1930: NOT
1931: PPUSH
1932: LD_STRING 13a_
1934: PPUSH
1935: CALL 637 0 3
1939: ST_TO_ADDR
// if Denis then
1940: LD_EXP 10
1944: IFFALSE 1962
// tmp := tmp ^ Denis ;
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 2
1955: PUSH
1956: LD_EXP 10
1960: ADD
1961: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1962: LD_ADDR_EXP 20
1966: PUSH
1967: LD_STRING DeltaDoctor
1969: PPUSH
1970: LD_EXP 1
1974: NOT
1975: PPUSH
1976: LD_STRING 13a_
1978: PPUSH
1979: CALL 637 0 3
1983: ST_TO_ADDR
// if DeltaDoctor then
1984: LD_EXP 20
1988: IFFALSE 2006
// tmp := tmp ^ DeltaDoctor ;
1990: LD_ADDR_VAR 0 2
1994: PUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_EXP 20
2004: ADD
2005: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
2006: LD_ADDR_EXP 18
2010: PUSH
2011: LD_STRING Simms
2013: PPUSH
2014: LD_EXP 1
2018: NOT
2019: PPUSH
2020: LD_STRING 13a_
2022: PPUSH
2023: CALL 637 0 3
2027: ST_TO_ADDR
// if Simms then
2028: LD_EXP 18
2032: IFFALSE 2050
// tmp := tmp ^ Simms ;
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: LD_VAR 0 2
2043: PUSH
2044: LD_EXP 18
2048: ADD
2049: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
2050: LD_ADDR_EXP 21
2054: PUSH
2055: LD_STRING Gossudarov
2057: PPUSH
2058: LD_EXP 1
2062: NOT
2063: PPUSH
2064: LD_STRING 13a_
2066: PPUSH
2067: CALL 637 0 3
2071: ST_TO_ADDR
// if Gossudarov then
2072: LD_EXP 21
2076: IFFALSE 2094
// tmp := tmp ^ Gossudarov ;
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: LD_VAR 0 2
2087: PUSH
2088: LD_EXP 21
2092: ADD
2093: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2094: LD_ADDR_EXP 22
2098: PUSH
2099: LD_STRING Kirilenkova
2101: PPUSH
2102: LD_EXP 1
2106: NOT
2107: PPUSH
2108: LD_STRING 13a_
2110: PPUSH
2111: CALL 637 0 3
2115: ST_TO_ADDR
// if Kirilenkova then
2116: LD_EXP 22
2120: IFFALSE 2138
// tmp := tmp ^ Kirilenkova ;
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: LD_VAR 0 2
2131: PUSH
2132: LD_EXP 22
2136: ADD
2137: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2138: LD_ADDR_EXP 25
2142: PUSH
2143: LD_STRING Petrosyan
2145: PPUSH
2146: LD_EXP 1
2150: NOT
2151: PPUSH
2152: LD_STRING 13a_
2154: PPUSH
2155: CALL 637 0 3
2159: ST_TO_ADDR
// if Petrosyan then
2160: LD_EXP 25
2164: IFFALSE 2182
// tmp := tmp ^ Petrosyan ;
2166: LD_ADDR_VAR 0 2
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_EXP 25
2180: ADD
2181: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2182: LD_ADDR_EXP 26
2186: PUSH
2187: LD_STRING Petrosyan
2189: PPUSH
2190: LD_EXP 1
2194: NOT
2195: PPUSH
2196: LD_STRING 13a_
2198: PPUSH
2199: CALL 637 0 3
2203: ST_TO_ADDR
// if Scholtze then
2204: LD_EXP 26
2208: IFFALSE 2226
// tmp := tmp ^ Scholtze ;
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: LD_VAR 0 2
2219: PUSH
2220: LD_EXP 26
2224: ADD
2225: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2226: LD_ADDR_EXP 24
2230: PUSH
2231: LD_STRING Dolgov
2233: PPUSH
2234: LD_EXP 1
2238: NOT
2239: PPUSH
2240: LD_STRING 13a_
2242: PPUSH
2243: CALL 637 0 3
2247: ST_TO_ADDR
// if Dolgov then
2248: LD_EXP 24
2252: IFFALSE 2270
// tmp := tmp ^ Dolgov ;
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: LD_VAR 0 2
2263: PUSH
2264: LD_EXP 24
2268: ADD
2269: ST_TO_ADDR
// for i in tmp do
2270: LD_ADDR_VAR 0 3
2274: PUSH
2275: LD_VAR 0 2
2279: PUSH
2280: FOR_IN
2281: IFFALSE 2306
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2283: LD_VAR 0 3
2287: PPUSH
2288: LD_INT 160
2290: PPUSH
2291: LD_INT 78
2293: PPUSH
2294: LD_INT 22
2296: PPUSH
2297: LD_INT 0
2299: PPUSH
2300: CALL_OW 50
2304: GO 2280
2306: POP
2307: POP
// squad1 := tmp ;
2308: LD_ADDR_EXP 37
2312: PUSH
2313: LD_VAR 0 2
2317: ST_TO_ADDR
// tmp := [ ] ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: EMPTY
2324: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2325: LD_ADDR_EXP 30
2329: PUSH
2330: LD_STRING Petrova
2332: PPUSH
2333: LD_EXP 1
2337: NOT
2338: PPUSH
2339: LD_STRING 13a_
2341: PPUSH
2342: CALL 637 0 3
2346: ST_TO_ADDR
// if Petrovova then
2347: LD_EXP 30
2351: IFFALSE 2369
// tmp := tmp ^ Petrovova ;
2353: LD_ADDR_VAR 0 2
2357: PUSH
2358: LD_VAR 0 2
2362: PUSH
2363: LD_EXP 30
2367: ADD
2368: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2369: LD_ADDR_EXP 23
2373: PUSH
2374: LD_STRING Titov
2376: PPUSH
2377: LD_EXP 1
2381: NOT
2382: PPUSH
2383: LD_STRING 13a_
2385: PPUSH
2386: CALL 637 0 3
2390: ST_TO_ADDR
// if Titov then
2391: LD_EXP 23
2395: IFFALSE 2413
// tmp := tmp ^ Titov ;
2397: LD_ADDR_VAR 0 2
2401: PUSH
2402: LD_VAR 0 2
2406: PUSH
2407: LD_EXP 23
2411: ADD
2412: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2413: LD_ADDR_EXP 33
2417: PUSH
2418: LD_STRING Karamazov
2420: PPUSH
2421: LD_EXP 1
2425: NOT
2426: PPUSH
2427: LD_STRING 13a_
2429: PPUSH
2430: CALL 637 0 3
2434: ST_TO_ADDR
// if Karamazov then
2435: LD_EXP 33
2439: IFFALSE 2457
// tmp := tmp ^ Karamazov ;
2441: LD_ADDR_VAR 0 2
2445: PUSH
2446: LD_VAR 0 2
2450: PUSH
2451: LD_EXP 33
2455: ADD
2456: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2457: LD_ADDR_EXP 16
2461: PUSH
2462: LD_STRING Frank
2464: PPUSH
2465: LD_EXP 1
2469: NOT
2470: PPUSH
2471: LD_STRING 13a_
2473: PPUSH
2474: CALL 637 0 3
2478: ST_TO_ADDR
// if Frank then
2479: LD_EXP 16
2483: IFFALSE 2501
// tmp := tmp ^ Frank ;
2485: LD_ADDR_VAR 0 2
2489: PUSH
2490: LD_VAR 0 2
2494: PUSH
2495: LD_EXP 16
2499: ADD
2500: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2501: LD_ADDR_EXP 7
2505: PUSH
2506: LD_STRING Donaldson
2508: PPUSH
2509: LD_EXP 1
2513: NOT
2514: PPUSH
2515: LD_STRING 13a_
2517: PPUSH
2518: CALL 637 0 3
2522: ST_TO_ADDR
// if Donaldson then
2523: LD_EXP 7
2527: IFFALSE 2545
// tmp := tmp ^ Donaldson ;
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: LD_VAR 0 2
2538: PUSH
2539: LD_EXP 7
2543: ADD
2544: ST_TO_ADDR
// for i in tmp do
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: LD_VAR 0 2
2554: PUSH
2555: FOR_IN
2556: IFFALSE 2596
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2558: LD_VAR 0 3
2562: PPUSH
2563: LD_INT 117
2565: PPUSH
2566: LD_INT 8
2568: PPUSH
2569: LD_INT 6
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2579: LD_VAR 0 3
2583: PPUSH
2584: LD_INT 117
2586: PPUSH
2587: LD_INT 8
2589: PPUSH
2590: CALL_OW 118
// end ;
2594: GO 2555
2596: POP
2597: POP
// squad2 := tmp ;
2598: LD_ADDR_EXP 38
2602: PUSH
2603: LD_VAR 0 2
2607: ST_TO_ADDR
// uc_side := 0 ;
2608: LD_ADDR_OWVAR 20
2612: PUSH
2613: LD_INT 0
2615: ST_TO_ADDR
// uc_nation := 0 ;
2616: LD_ADDR_OWVAR 21
2620: PUSH
2621: LD_INT 0
2623: ST_TO_ADDR
// InitHc ;
2624: CALL_OW 19
// hc_importance := 0 ;
2628: LD_ADDR_OWVAR 32
2632: PUSH
2633: LD_INT 0
2635: ST_TO_ADDR
// hc_name := Find some goods! ;
2636: LD_ADDR_OWVAR 26
2640: PUSH
2641: LD_STRING Find some goods!
2643: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2644: LD_INT 0
2646: PPUSH
2647: LD_INT 12
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2657: CALL_OW 44
2661: PPUSH
2662: LD_INT 96
2664: PPUSH
2665: LD_INT 108
2667: PPUSH
2668: LD_INT 0
2670: PPUSH
2671: CALL_OW 48
// InitHc ;
2675: CALL_OW 19
// end ;
2679: LD_VAR 0 1
2683: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2684: LD_INT 22
2686: PUSH
2687: LD_INT 7
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 23
2696: PUSH
2697: LD_INT 0
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: IFFALSE 3177
2714: GO 2716
2716: DISABLE
2717: LD_INT 0
2719: PPUSH
2720: PPUSH
// begin InGameOn ;
2721: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2725: LD_INT 22
2727: PUSH
2728: LD_INT 7
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 23
2737: PUSH
2738: LD_INT 0
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: CALL_OW 69
2753: PUSH
2754: LD_INT 1
2756: ARRAY
2757: PPUSH
2758: CALL_OW 64
// game_speed := 4 ;
2762: LD_ADDR_OWVAR 65
2766: PUSH
2767: LD_INT 4
2769: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2770: LD_EXP 2
2774: PPUSH
2775: LD_INT 93
2777: PPUSH
2778: LD_INT 100
2780: PPUSH
2781: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2785: LD_EXP 3
2789: PPUSH
2790: LD_INT 93
2792: PPUSH
2793: LD_INT 99
2795: PPUSH
2796: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2800: LD_EXP 2
2804: PUSH
2805: LD_EXP 3
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PPUSH
2814: LD_INT 81
2816: PPUSH
2817: LD_INT 112
2819: PPUSH
2820: CALL_OW 178
// wait ( 0 0$5 ) ;
2824: LD_INT 175
2826: PPUSH
2827: CALL_OW 67
// music_nat := 2 ;
2831: LD_ADDR_OWVAR 71
2835: PUSH
2836: LD_INT 2
2838: ST_TO_ADDR
// music_class := 4 ;
2839: LD_ADDR_OWVAR 72
2843: PUSH
2844: LD_INT 4
2846: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2847: LD_INT 80
2849: PPUSH
2850: LD_INT 130
2852: PPUSH
2853: CALL_OW 86
// uc_nation := 2 ;
2857: LD_ADDR_OWVAR 21
2861: PUSH
2862: LD_INT 2
2864: ST_TO_ADDR
// uc_side := 2 ;
2865: LD_ADDR_OWVAR 20
2869: PUSH
2870: LD_INT 2
2872: ST_TO_ADDR
// hc_gallery = sandar ;
2873: LD_ADDR_OWVAR 33
2877: PUSH
2878: LD_STRING sandar
2880: ST_TO_ADDR
// hc_face_number = 1 ;
2881: LD_ADDR_OWVAR 34
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// hc_name = Louis Schulz ;
2889: LD_ADDR_OWVAR 26
2893: PUSH
2894: LD_STRING Louis Schulz
2896: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2897: LD_ADDR_OWVAR 29
2901: PUSH
2902: LD_INT 13
2904: PUSH
2905: LD_INT 11
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2912: LD_ADDR_OWVAR 30
2916: PUSH
2917: LD_INT 0
2919: PUSH
2920: LD_INT 0
2922: PUSH
2923: LD_INT 0
2925: PUSH
2926: LD_INT 0
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2935: LD_ADDR_OWVAR 31
2939: PUSH
2940: LD_INT 10
2942: PUSH
2943: LD_INT 6
2945: PUSH
2946: LD_INT 7
2948: PUSH
2949: LD_INT 7
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: ST_TO_ADDR
// hc_sex = sex_male ;
2958: LD_ADDR_OWVAR 27
2962: PUSH
2963: LD_INT 1
2965: ST_TO_ADDR
// hc_class = 1 ;
2966: LD_ADDR_OWVAR 28
2970: PUSH
2971: LD_INT 1
2973: ST_TO_ADDR
// hc_importance = 100 ;
2974: LD_ADDR_OWVAR 32
2978: PUSH
2979: LD_INT 100
2981: ST_TO_ADDR
// Louis = CreateHuman ;
2982: LD_ADDR_VAR 0 1
2986: PUSH
2987: CALL_OW 44
2991: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2992: LD_INT 14
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 1
3000: PPUSH
3001: LD_INT 26
3003: PPUSH
3004: LD_INT 100
3006: PPUSH
3007: CALL 700 0 5
// veh := CreateVehicle ;
3011: LD_ADDR_VAR 0 2
3015: PUSH
3016: CALL_OW 45
3020: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_INT 2
3028: NEG
3029: PPUSH
3030: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 80
3041: PPUSH
3042: LD_INT 130
3044: PPUSH
3045: LD_INT 0
3047: PPUSH
3048: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
3052: LD_VAR 0 1
3056: PPUSH
3057: LD_VAR 0 2
3061: PPUSH
3062: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
3066: LD_VAR 0 1
3070: PPUSH
3071: LD_INT 80
3073: PPUSH
3074: LD_INT 109
3076: PPUSH
3077: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
3081: LD_VAR 0 1
3085: PPUSH
3086: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 80
3097: PPUSH
3098: LD_INT 131
3100: PPUSH
3101: CALL_OW 171
// wait ( 0 0$06 ) ;
3105: LD_INT 210
3107: PPUSH
3108: CALL_OW 67
// InGameOff ;
3112: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3116: LD_INT 35
3118: PPUSH
3119: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3123: LD_VAR 0 1
3127: PPUSH
3128: LD_INT 80
3130: PPUSH
3131: LD_INT 131
3133: PPUSH
3134: CALL_OW 307
3138: IFFALSE 3116
// SetSide ( veh , 7 ) ;
3140: LD_VAR 0 2
3144: PPUSH
3145: LD_INT 7
3147: PPUSH
3148: CALL_OW 235
// RemoveUnit ( Louis ) ;
3152: LD_VAR 0 1
3156: PPUSH
3157: CALL_OW 64
// music_nat := 3 ;
3161: LD_ADDR_OWVAR 71
3165: PUSH
3166: LD_INT 3
3168: ST_TO_ADDR
// music_class := 0 ;
3169: LD_ADDR_OWVAR 72
3173: PUSH
3174: LD_INT 0
3176: ST_TO_ADDR
// end ;
3177: PPOPN 2
3179: END
// every 0 0$10 trigger squad1 do var i , xy ;
3180: LD_EXP 37
3184: IFFALSE 3547
3186: GO 3188
3188: DISABLE
3189: LD_INT 0
3191: PPUSH
3192: PPUSH
// begin enable ;
3193: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3194: LD_ADDR_VAR 0 1
3198: PUSH
3199: LD_EXP 37
3203: PUSH
3204: LD_INT 1
3206: PPUSH
3207: LD_EXP 37
3211: PPUSH
3212: CALL_OW 12
3216: ARRAY
3217: ST_TO_ADDR
// if IsInUnit ( i ) then
3218: LD_VAR 0 1
3222: PPUSH
3223: CALL_OW 310
3227: IFFALSE 3231
// exit ;
3229: GO 3547
// ComRemember ( i ) ;
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3240: LD_ADDR_VAR 0 2
3244: PUSH
3245: LD_VAR 0 1
3249: PPUSH
3250: CALL_OW 250
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: LD_INT 5
3260: PPUSH
3261: CALL_OW 12
3265: PPUSH
3266: LD_INT 2
3268: PPUSH
3269: LD_INT 7
3271: PPUSH
3272: CALL_OW 12
3276: PPUSH
3277: CALL_OW 272
3281: PUSH
3282: LD_VAR 0 1
3286: PPUSH
3287: CALL_OW 251
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: LD_INT 5
3297: PPUSH
3298: CALL_OW 12
3302: PPUSH
3303: LD_INT 2
3305: PPUSH
3306: LD_INT 7
3308: PPUSH
3309: CALL_OW 12
3313: PPUSH
3314: CALL_OW 273
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3323: LD_VAR 0 2
3327: PUSH
3328: LD_INT 1
3330: ARRAY
3331: PPUSH
3332: LD_VAR 0 2
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: PPUSH
3341: CALL_OW 428
3345: PUSH
3346: LD_INT 0
3348: NONEQUAL
3349: PUSH
3350: LD_VAR 0 2
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: LD_VAR 0 2
3363: PUSH
3364: LD_INT 2
3366: ARRAY
3367: PPUSH
3368: CALL_OW 488
3372: NOT
3373: OR
3374: IFFALSE 3378
// exit ;
3376: GO 3547
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_VAR 0 2
3387: PUSH
3388: LD_INT 1
3390: ARRAY
3391: PPUSH
3392: LD_VAR 0 2
3396: PUSH
3397: LD_INT 2
3399: ARRAY
3400: PPUSH
3401: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3405: LD_VAR 0 1
3409: PPUSH
3410: LD_INT 350
3412: PPUSH
3413: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3417: LD_INT 60
3419: PPUSH
3420: CALL_OW 13
3424: PUSH
3425: LD_INT 22
3427: PUSH
3428: LD_INT 4
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 21
3437: PUSH
3438: LD_INT 3
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: AND
3454: IFFALSE 3538
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3456: LD_VAR 0 1
3460: PPUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 21
3473: PUSH
3474: LD_INT 3
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: PPUSH
3490: LD_VAR 0 1
3494: PPUSH
3495: CALL_OW 74
3499: PPUSH
3500: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3504: LD_INT 1050
3506: PPUSH
3507: CALL_OW 67
// until IsInUnit ( i ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: CALL_OW 310
3520: IFFALSE 3504
// wait ( 0 0$30 ) ;
3522: LD_INT 1050
3524: PPUSH
3525: CALL_OW 67
// AddComExitBuilding ( i ) ;
3529: LD_VAR 0 1
3533: PPUSH
3534: CALL_OW 182
// end ; AddComReturn ( i ) ;
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 204
// end ; end_of_file
3547: PPOPN 2
3549: END
// export function Action ; begin
3550: LD_INT 0
3552: PPUSH
// InGameOn ;
3553: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3557: LD_EXP 2
3561: PPUSH
3562: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3566: LD_EXP 2
3570: PPUSH
3571: LD_STRING D1-JMM-1
3573: PPUSH
3574: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3578: LD_EXP 3
3582: PPUSH
3583: LD_STRING D1-Bur-1
3585: PPUSH
3586: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3590: LD_EXP 2
3594: PPUSH
3595: LD_STRING D1-JMM-2
3597: PPUSH
3598: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3602: LD_EXP 3
3606: PPUSH
3607: LD_STRING D1-Bur-2
3609: PPUSH
3610: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3614: LD_EXP 2
3618: PPUSH
3619: LD_STRING D1-JMM-3
3621: PPUSH
3622: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3626: LD_EXP 3
3630: PPUSH
3631: LD_STRING D1-Bur-3
3633: PPUSH
3634: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3638: LD_EXP 2
3642: PPUSH
3643: LD_STRING D1-JMM-4
3645: PPUSH
3646: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3650: LD_EXP 3
3654: PPUSH
3655: LD_STRING D1-Bur-4
3657: PPUSH
3658: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3662: LD_EXP 2
3666: PPUSH
3667: LD_STRING D1-JMM-5
3669: PPUSH
3670: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3674: LD_EXP 3
3678: PPUSH
3679: LD_STRING D1-Bur-5
3681: PPUSH
3682: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3686: LD_EXP 2
3690: PPUSH
3691: LD_STRING D1-JMM-6
3693: PPUSH
3694: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3698: LD_EXP 3
3702: PPUSH
3703: LD_STRING D1-Bur-6
3705: PPUSH
3706: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3710: LD_EXP 2
3714: PPUSH
3715: LD_STRING D1-JMM-7
3717: PPUSH
3718: CALL_OW 88
// wait ( 20 ) ;
3722: LD_INT 20
3724: PPUSH
3725: CALL_OW 67
// Query ( QTruck ) ;
3729: LD_STRING QTruck
3731: PPUSH
3732: CALL_OW 97
// InGameOff ;
3736: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3740: LD_STRING MArtPickup
3742: PPUSH
3743: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3747: LD_INT 2
3749: PPUSH
3750: LD_INT 1
3752: PPUSH
3753: CALL_OW 424
// end ;
3757: LD_VAR 0 1
3761: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3762: LD_INT 2
3764: PPUSH
3765: LD_INT 21
3767: PUSH
3768: LD_INT 2
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 33
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 3
3787: PUSH
3788: LD_INT 58
3790: PUSH
3791: EMPTY
3792: LIST
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 70
3807: PUSH
3808: LD_INT 2
3810: EQUAL
3811: PUSH
3812: LD_EXP 2
3816: PPUSH
3817: CALL_OW 310
3821: AND
3822: PUSH
3823: LD_EXP 3
3827: PPUSH
3828: CALL_OW 310
3832: AND
3833: PUSH
3834: LD_EXP 2
3838: PPUSH
3839: CALL_OW 310
3843: PPUSH
3844: CALL_OW 264
3848: PUSH
3849: LD_INT 51
3851: PUSH
3852: LD_INT 12
3854: PUSH
3855: LD_EXP 40
3859: PUSH
3860: LD_INT 32
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: IN
3869: PUSH
3870: LD_EXP 3
3874: PPUSH
3875: CALL_OW 310
3879: PPUSH
3880: CALL_OW 264
3884: PUSH
3885: LD_INT 51
3887: PUSH
3888: LD_INT 12
3890: PUSH
3891: LD_EXP 40
3895: PUSH
3896: LD_INT 32
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: IN
3905: OR
3906: AND
3907: IFFALSE 4117
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
3915: PPUSH
3916: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: LD_EXP 2
3926: PPUSH
3927: CALL_OW 310
3931: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3932: LD_ADDR_VAR 0 3
3936: PUSH
3937: LD_EXP 3
3941: PPUSH
3942: CALL_OW 310
3946: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3947: LD_VAR 0 2
3951: PPUSH
3952: CALL_OW 265
3956: PUSH
3957: LD_VAR 0 2
3961: PPUSH
3962: CALL_OW 262
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_VAR 0 2
3974: PPUSH
3975: CALL_OW 264
3979: PUSH
3980: LD_VAR 0 2
3984: PPUSH
3985: CALL_OW 271
3989: PUSH
3990: LD_VAR 0 2
3994: PPUSH
3995: CALL_OW 248
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: PPUSH
4008: LD_STRING 14a_JMMVeh
4010: PPUSH
4011: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
4015: LD_VAR 0 3
4019: PPUSH
4020: CALL_OW 265
4024: PUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: CALL_OW 262
4034: PUSH
4035: LD_INT 1
4037: PUSH
4038: LD_VAR 0 3
4042: PPUSH
4043: CALL_OW 264
4047: PUSH
4048: LD_VAR 0 3
4052: PPUSH
4053: CALL_OW 271
4057: PUSH
4058: LD_VAR 0 3
4062: PPUSH
4063: CALL_OW 248
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: PPUSH
4076: LD_STRING 14a_BurlakVeh
4078: PPUSH
4079: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
4083: LD_EXP 2
4087: PPUSH
4088: LD_STRING 14a_JMM
4090: PPUSH
4091: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4095: LD_EXP 3
4099: PPUSH
4100: LD_STRING 14a_Burlak
4102: PPUSH
4103: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4107: LD_INT 1
4109: PPUSH
4110: LD_STRING %_cont
4112: PPUSH
4113: CALL_OW 340
// end ;
4117: PPOPN 3
4119: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4120: LD_INT 22
4122: PUSH
4123: LD_INT 4
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 24
4135: PUSH
4136: LD_INT 950
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PPUSH
4151: CALL_OW 69
4155: IFFALSE 4167
4157: GO 4159
4159: DISABLE
// YouLost ( FriendlyFire ) ;
4160: LD_STRING FriendlyFire
4162: PPUSH
4163: CALL_OW 104
4167: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4168: LD_EXP 3
4172: PPUSH
4173: CALL_OW 301
4177: IFFALSE 4189
4179: GO 4181
4181: DISABLE
// YouLost ( Burlak ) ;
4182: LD_STRING Burlak
4184: PPUSH
4185: CALL_OW 104
4189: END
// every 0 0$1 trigger IsDead ( JMM ) do
4190: LD_EXP 2
4194: PPUSH
4195: CALL_OW 301
4199: IFFALSE 4211
4201: GO 4203
4203: DISABLE
// YouLost ( JMM ) ; end_of_file
4204: LD_STRING JMM
4206: PPUSH
4207: CALL_OW 104
4211: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
4212: GO 4214
4214: DISABLE
// begin ru_radar := 98 ;
4215: LD_ADDR_EXP 39
4219: PUSH
4220: LD_INT 98
4222: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4223: LD_ADDR_EXP 40
4227: PUSH
4228: LD_INT 89
4230: ST_TO_ADDR
// us_hack := 99 ;
4231: LD_ADDR_EXP 41
4235: PUSH
4236: LD_INT 99
4238: ST_TO_ADDR
// us_artillery := 97 ;
4239: LD_ADDR_EXP 42
4243: PUSH
4244: LD_INT 97
4246: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4247: LD_ADDR_EXP 43
4251: PUSH
4252: LD_INT 91
4254: ST_TO_ADDR
// tech_Artillery := 80 ;
4255: LD_ADDR_EXP 44
4259: PUSH
4260: LD_INT 80
4262: ST_TO_ADDR
// tech_RadMat := 81 ;
4263: LD_ADDR_EXP 45
4267: PUSH
4268: LD_INT 81
4270: ST_TO_ADDR
// tech_BasicTools := 82 ;
4271: LD_ADDR_EXP 46
4275: PUSH
4276: LD_INT 82
4278: ST_TO_ADDR
// tech_Cargo := 83 ;
4279: LD_ADDR_EXP 47
4283: PUSH
4284: LD_INT 83
4286: ST_TO_ADDR
// tech_Track := 84 ;
4287: LD_ADDR_EXP 48
4291: PUSH
4292: LD_INT 84
4294: ST_TO_ADDR
// tech_Crane := 85 ;
4295: LD_ADDR_EXP 49
4299: PUSH
4300: LD_INT 85
4302: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4303: LD_ADDR_EXP 50
4307: PUSH
4308: LD_INT 86
4310: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4311: LD_ADDR_EXP 51
4315: PUSH
4316: LD_INT 87
4318: ST_TO_ADDR
// end ; end_of_file end_of_file
4319: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4320: GO 4322
4322: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4323: LD_STRING initStreamRollete();
4325: PPUSH
4326: CALL_OW 559
// InitStreamMode ;
4330: CALL 4339 0 0
// DefineStreamItems ( ) ;
4334: CALL 4779 0 0
// end ;
4338: END
// function InitStreamMode ; begin
4339: LD_INT 0
4341: PPUSH
// streamModeActive := false ;
4342: LD_ADDR_EXP 52
4346: PUSH
4347: LD_INT 0
4349: ST_TO_ADDR
// normalCounter := 36 ;
4350: LD_ADDR_EXP 53
4354: PUSH
4355: LD_INT 36
4357: ST_TO_ADDR
// hardcoreCounter := 16 ;
4358: LD_ADDR_EXP 54
4362: PUSH
4363: LD_INT 16
4365: ST_TO_ADDR
// sRocket := false ;
4366: LD_ADDR_EXP 57
4370: PUSH
4371: LD_INT 0
4373: ST_TO_ADDR
// sSpeed := false ;
4374: LD_ADDR_EXP 56
4378: PUSH
4379: LD_INT 0
4381: ST_TO_ADDR
// sEngine := false ;
4382: LD_ADDR_EXP 58
4386: PUSH
4387: LD_INT 0
4389: ST_TO_ADDR
// sSpec := false ;
4390: LD_ADDR_EXP 55
4394: PUSH
4395: LD_INT 0
4397: ST_TO_ADDR
// sLevel := false ;
4398: LD_ADDR_EXP 59
4402: PUSH
4403: LD_INT 0
4405: ST_TO_ADDR
// sArmoury := false ;
4406: LD_ADDR_EXP 60
4410: PUSH
4411: LD_INT 0
4413: ST_TO_ADDR
// sRadar := false ;
4414: LD_ADDR_EXP 61
4418: PUSH
4419: LD_INT 0
4421: ST_TO_ADDR
// sBunker := false ;
4422: LD_ADDR_EXP 62
4426: PUSH
4427: LD_INT 0
4429: ST_TO_ADDR
// sHack := false ;
4430: LD_ADDR_EXP 63
4434: PUSH
4435: LD_INT 0
4437: ST_TO_ADDR
// sFire := false ;
4438: LD_ADDR_EXP 64
4442: PUSH
4443: LD_INT 0
4445: ST_TO_ADDR
// sRefresh := false ;
4446: LD_ADDR_EXP 65
4450: PUSH
4451: LD_INT 0
4453: ST_TO_ADDR
// sExp := false ;
4454: LD_ADDR_EXP 66
4458: PUSH
4459: LD_INT 0
4461: ST_TO_ADDR
// sDepot := false ;
4462: LD_ADDR_EXP 67
4466: PUSH
4467: LD_INT 0
4469: ST_TO_ADDR
// sFlag := false ;
4470: LD_ADDR_EXP 68
4474: PUSH
4475: LD_INT 0
4477: ST_TO_ADDR
// sKamikadze := false ;
4478: LD_ADDR_EXP 76
4482: PUSH
4483: LD_INT 0
4485: ST_TO_ADDR
// sTroll := false ;
4486: LD_ADDR_EXP 77
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// sSlow := false ;
4494: LD_ADDR_EXP 78
4498: PUSH
4499: LD_INT 0
4501: ST_TO_ADDR
// sLack := false ;
4502: LD_ADDR_EXP 79
4506: PUSH
4507: LD_INT 0
4509: ST_TO_ADDR
// sTank := false ;
4510: LD_ADDR_EXP 81
4514: PUSH
4515: LD_INT 0
4517: ST_TO_ADDR
// sRemote := false ;
4518: LD_ADDR_EXP 82
4522: PUSH
4523: LD_INT 0
4525: ST_TO_ADDR
// sPowell := false ;
4526: LD_ADDR_EXP 83
4530: PUSH
4531: LD_INT 0
4533: ST_TO_ADDR
// sTeleport := false ;
4534: LD_ADDR_EXP 86
4538: PUSH
4539: LD_INT 0
4541: ST_TO_ADDR
// sOilTower := false ;
4542: LD_ADDR_EXP 88
4546: PUSH
4547: LD_INT 0
4549: ST_TO_ADDR
// sShovel := false ;
4550: LD_ADDR_EXP 89
4554: PUSH
4555: LD_INT 0
4557: ST_TO_ADDR
// sSheik := false ;
4558: LD_ADDR_EXP 90
4562: PUSH
4563: LD_INT 0
4565: ST_TO_ADDR
// sEarthquake := false ;
4566: LD_ADDR_EXP 92
4570: PUSH
4571: LD_INT 0
4573: ST_TO_ADDR
// sAI := false ;
4574: LD_ADDR_EXP 93
4578: PUSH
4579: LD_INT 0
4581: ST_TO_ADDR
// sCargo := false ;
4582: LD_ADDR_EXP 96
4586: PUSH
4587: LD_INT 0
4589: ST_TO_ADDR
// sDLaser := false ;
4590: LD_ADDR_EXP 97
4594: PUSH
4595: LD_INT 0
4597: ST_TO_ADDR
// sExchange := false ;
4598: LD_ADDR_EXP 98
4602: PUSH
4603: LD_INT 0
4605: ST_TO_ADDR
// sFac := false ;
4606: LD_ADDR_EXP 99
4610: PUSH
4611: LD_INT 0
4613: ST_TO_ADDR
// sPower := false ;
4614: LD_ADDR_EXP 100
4618: PUSH
4619: LD_INT 0
4621: ST_TO_ADDR
// sRandom := false ;
4622: LD_ADDR_EXP 101
4626: PUSH
4627: LD_INT 0
4629: ST_TO_ADDR
// sShield := false ;
4630: LD_ADDR_EXP 102
4634: PUSH
4635: LD_INT 0
4637: ST_TO_ADDR
// sTime := false ;
4638: LD_ADDR_EXP 103
4642: PUSH
4643: LD_INT 0
4645: ST_TO_ADDR
// sTools := false ;
4646: LD_ADDR_EXP 104
4650: PUSH
4651: LD_INT 0
4653: ST_TO_ADDR
// sSold := false ;
4654: LD_ADDR_EXP 69
4658: PUSH
4659: LD_INT 0
4661: ST_TO_ADDR
// sDiff := false ;
4662: LD_ADDR_EXP 70
4666: PUSH
4667: LD_INT 0
4669: ST_TO_ADDR
// sFog := false ;
4670: LD_ADDR_EXP 73
4674: PUSH
4675: LD_INT 0
4677: ST_TO_ADDR
// sReset := false ;
4678: LD_ADDR_EXP 74
4682: PUSH
4683: LD_INT 0
4685: ST_TO_ADDR
// sSun := false ;
4686: LD_ADDR_EXP 75
4690: PUSH
4691: LD_INT 0
4693: ST_TO_ADDR
// sTiger := false ;
4694: LD_ADDR_EXP 71
4698: PUSH
4699: LD_INT 0
4701: ST_TO_ADDR
// sBomb := false ;
4702: LD_ADDR_EXP 72
4706: PUSH
4707: LD_INT 0
4709: ST_TO_ADDR
// sWound := false ;
4710: LD_ADDR_EXP 80
4714: PUSH
4715: LD_INT 0
4717: ST_TO_ADDR
// sBetray := false ;
4718: LD_ADDR_EXP 84
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// sContamin := false ;
4726: LD_ADDR_EXP 85
4730: PUSH
4731: LD_INT 0
4733: ST_TO_ADDR
// sOil := false ;
4734: LD_ADDR_EXP 87
4738: PUSH
4739: LD_INT 0
4741: ST_TO_ADDR
// sStu := false ;
4742: LD_ADDR_EXP 91
4746: PUSH
4747: LD_INT 0
4749: ST_TO_ADDR
// sBazooka := false ;
4750: LD_ADDR_EXP 94
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
// sMortar := false ;
4758: LD_ADDR_EXP 95
4762: PUSH
4763: LD_INT 0
4765: ST_TO_ADDR
// sRanger := false ;
4766: LD_ADDR_EXP 105
4770: PUSH
4771: LD_INT 0
4773: ST_TO_ADDR
// end ;
4774: LD_VAR 0 1
4778: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4779: LD_INT 0
4781: PPUSH
4782: PPUSH
4783: PPUSH
4784: PPUSH
4785: PPUSH
// result := [ ] ;
4786: LD_ADDR_VAR 0 1
4790: PUSH
4791: EMPTY
4792: ST_TO_ADDR
// if campaign_id = 1 then
4793: LD_OWVAR 69
4797: PUSH
4798: LD_INT 1
4800: EQUAL
4801: IFFALSE 7739
// begin case mission_number of 1 :
4803: LD_OWVAR 70
4807: PUSH
4808: LD_INT 1
4810: DOUBLE
4811: EQUAL
4812: IFTRUE 4816
4814: GO 4880
4816: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4817: LD_ADDR_VAR 0 1
4821: PUSH
4822: LD_INT 2
4824: PUSH
4825: LD_INT 4
4827: PUSH
4828: LD_INT 11
4830: PUSH
4831: LD_INT 12
4833: PUSH
4834: LD_INT 15
4836: PUSH
4837: LD_INT 16
4839: PUSH
4840: LD_INT 22
4842: PUSH
4843: LD_INT 23
4845: PUSH
4846: LD_INT 26
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 101
4862: PUSH
4863: LD_INT 102
4865: PUSH
4866: LD_INT 106
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: ST_TO_ADDR
4878: GO 7737
4880: LD_INT 2
4882: DOUBLE
4883: EQUAL
4884: IFTRUE 4888
4886: GO 4960
4888: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 2
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: LD_INT 11
4902: PUSH
4903: LD_INT 12
4905: PUSH
4906: LD_INT 15
4908: PUSH
4909: LD_INT 16
4911: PUSH
4912: LD_INT 22
4914: PUSH
4915: LD_INT 23
4917: PUSH
4918: LD_INT 26
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 101
4934: PUSH
4935: LD_INT 102
4937: PUSH
4938: LD_INT 105
4940: PUSH
4941: LD_INT 106
4943: PUSH
4944: LD_INT 108
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: ST_TO_ADDR
4958: GO 7737
4960: LD_INT 3
4962: DOUBLE
4963: EQUAL
4964: IFTRUE 4968
4966: GO 5044
4968: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4969: LD_ADDR_VAR 0 1
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: LD_INT 4
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: LD_INT 11
4985: PUSH
4986: LD_INT 12
4988: PUSH
4989: LD_INT 15
4991: PUSH
4992: LD_INT 16
4994: PUSH
4995: LD_INT 22
4997: PUSH
4998: LD_INT 26
5000: PUSH
5001: LD_INT 36
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 101
5018: PUSH
5019: LD_INT 102
5021: PUSH
5022: LD_INT 105
5024: PUSH
5025: LD_INT 106
5027: PUSH
5028: LD_INT 108
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: ST_TO_ADDR
5042: GO 7737
5044: LD_INT 4
5046: DOUBLE
5047: EQUAL
5048: IFTRUE 5052
5050: GO 5136
5052: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5053: LD_ADDR_VAR 0 1
5057: PUSH
5058: LD_INT 2
5060: PUSH
5061: LD_INT 4
5063: PUSH
5064: LD_INT 5
5066: PUSH
5067: LD_INT 8
5069: PUSH
5070: LD_INT 11
5072: PUSH
5073: LD_INT 12
5075: PUSH
5076: LD_INT 15
5078: PUSH
5079: LD_INT 16
5081: PUSH
5082: LD_INT 22
5084: PUSH
5085: LD_INT 23
5087: PUSH
5088: LD_INT 26
5090: PUSH
5091: LD_INT 36
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PUSH
5108: LD_INT 101
5110: PUSH
5111: LD_INT 102
5113: PUSH
5114: LD_INT 105
5116: PUSH
5117: LD_INT 106
5119: PUSH
5120: LD_INT 108
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: ST_TO_ADDR
5134: GO 7737
5136: LD_INT 5
5138: DOUBLE
5139: EQUAL
5140: IFTRUE 5144
5142: GO 5244
5144: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5145: LD_ADDR_VAR 0 1
5149: PUSH
5150: LD_INT 2
5152: PUSH
5153: LD_INT 4
5155: PUSH
5156: LD_INT 5
5158: PUSH
5159: LD_INT 6
5161: PUSH
5162: LD_INT 8
5164: PUSH
5165: LD_INT 11
5167: PUSH
5168: LD_INT 12
5170: PUSH
5171: LD_INT 15
5173: PUSH
5174: LD_INT 16
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 23
5182: PUSH
5183: LD_INT 25
5185: PUSH
5186: LD_INT 26
5188: PUSH
5189: LD_INT 36
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 101
5210: PUSH
5211: LD_INT 102
5213: PUSH
5214: LD_INT 105
5216: PUSH
5217: LD_INT 106
5219: PUSH
5220: LD_INT 108
5222: PUSH
5223: LD_INT 109
5225: PUSH
5226: LD_INT 112
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: ST_TO_ADDR
5242: GO 7737
5244: LD_INT 6
5246: DOUBLE
5247: EQUAL
5248: IFTRUE 5252
5250: GO 5372
5252: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5253: LD_ADDR_VAR 0 1
5257: PUSH
5258: LD_INT 2
5260: PUSH
5261: LD_INT 4
5263: PUSH
5264: LD_INT 5
5266: PUSH
5267: LD_INT 6
5269: PUSH
5270: LD_INT 8
5272: PUSH
5273: LD_INT 11
5275: PUSH
5276: LD_INT 12
5278: PUSH
5279: LD_INT 15
5281: PUSH
5282: LD_INT 16
5284: PUSH
5285: LD_INT 20
5287: PUSH
5288: LD_INT 21
5290: PUSH
5291: LD_INT 22
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 25
5299: PUSH
5300: LD_INT 26
5302: PUSH
5303: LD_INT 30
5305: PUSH
5306: LD_INT 31
5308: PUSH
5309: LD_INT 32
5311: PUSH
5312: LD_INT 36
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 101
5338: PUSH
5339: LD_INT 102
5341: PUSH
5342: LD_INT 105
5344: PUSH
5345: LD_INT 106
5347: PUSH
5348: LD_INT 108
5350: PUSH
5351: LD_INT 109
5353: PUSH
5354: LD_INT 112
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: ST_TO_ADDR
5370: GO 7737
5372: LD_INT 7
5374: DOUBLE
5375: EQUAL
5376: IFTRUE 5380
5378: GO 5480
5380: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5381: LD_ADDR_VAR 0 1
5385: PUSH
5386: LD_INT 2
5388: PUSH
5389: LD_INT 4
5391: PUSH
5392: LD_INT 5
5394: PUSH
5395: LD_INT 7
5397: PUSH
5398: LD_INT 11
5400: PUSH
5401: LD_INT 12
5403: PUSH
5404: LD_INT 15
5406: PUSH
5407: LD_INT 16
5409: PUSH
5410: LD_INT 20
5412: PUSH
5413: LD_INT 21
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 23
5421: PUSH
5422: LD_INT 25
5424: PUSH
5425: LD_INT 26
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 101
5446: PUSH
5447: LD_INT 102
5449: PUSH
5450: LD_INT 103
5452: PUSH
5453: LD_INT 105
5455: PUSH
5456: LD_INT 106
5458: PUSH
5459: LD_INT 108
5461: PUSH
5462: LD_INT 112
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: ST_TO_ADDR
5478: GO 7737
5480: LD_INT 8
5482: DOUBLE
5483: EQUAL
5484: IFTRUE 5488
5486: GO 5616
5488: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5489: LD_ADDR_VAR 0 1
5493: PUSH
5494: LD_INT 2
5496: PUSH
5497: LD_INT 4
5499: PUSH
5500: LD_INT 5
5502: PUSH
5503: LD_INT 6
5505: PUSH
5506: LD_INT 7
5508: PUSH
5509: LD_INT 8
5511: PUSH
5512: LD_INT 11
5514: PUSH
5515: LD_INT 12
5517: PUSH
5518: LD_INT 15
5520: PUSH
5521: LD_INT 16
5523: PUSH
5524: LD_INT 20
5526: PUSH
5527: LD_INT 21
5529: PUSH
5530: LD_INT 22
5532: PUSH
5533: LD_INT 23
5535: PUSH
5536: LD_INT 25
5538: PUSH
5539: LD_INT 26
5541: PUSH
5542: LD_INT 30
5544: PUSH
5545: LD_INT 31
5547: PUSH
5548: LD_INT 32
5550: PUSH
5551: LD_INT 36
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 101
5578: PUSH
5579: LD_INT 102
5581: PUSH
5582: LD_INT 103
5584: PUSH
5585: LD_INT 105
5587: PUSH
5588: LD_INT 106
5590: PUSH
5591: LD_INT 108
5593: PUSH
5594: LD_INT 109
5596: PUSH
5597: LD_INT 112
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: ST_TO_ADDR
5614: GO 7737
5616: LD_INT 9
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5624
5622: GO 5760
5624: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5625: LD_ADDR_VAR 0 1
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 4
5635: PUSH
5636: LD_INT 5
5638: PUSH
5639: LD_INT 6
5641: PUSH
5642: LD_INT 7
5644: PUSH
5645: LD_INT 8
5647: PUSH
5648: LD_INT 11
5650: PUSH
5651: LD_INT 12
5653: PUSH
5654: LD_INT 15
5656: PUSH
5657: LD_INT 16
5659: PUSH
5660: LD_INT 20
5662: PUSH
5663: LD_INT 21
5665: PUSH
5666: LD_INT 22
5668: PUSH
5669: LD_INT 23
5671: PUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 26
5677: PUSH
5678: LD_INT 28
5680: PUSH
5681: LD_INT 30
5683: PUSH
5684: LD_INT 31
5686: PUSH
5687: LD_INT 32
5689: PUSH
5690: LD_INT 36
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 101
5718: PUSH
5719: LD_INT 102
5721: PUSH
5722: LD_INT 103
5724: PUSH
5725: LD_INT 105
5727: PUSH
5728: LD_INT 106
5730: PUSH
5731: LD_INT 108
5733: PUSH
5734: LD_INT 109
5736: PUSH
5737: LD_INT 112
5739: PUSH
5740: LD_INT 114
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: ST_TO_ADDR
5758: GO 7737
5760: LD_INT 10
5762: DOUBLE
5763: EQUAL
5764: IFTRUE 5768
5766: GO 5952
5768: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5769: LD_ADDR_VAR 0 1
5773: PUSH
5774: LD_INT 2
5776: PUSH
5777: LD_INT 4
5779: PUSH
5780: LD_INT 5
5782: PUSH
5783: LD_INT 6
5785: PUSH
5786: LD_INT 7
5788: PUSH
5789: LD_INT 8
5791: PUSH
5792: LD_INT 9
5794: PUSH
5795: LD_INT 10
5797: PUSH
5798: LD_INT 11
5800: PUSH
5801: LD_INT 12
5803: PUSH
5804: LD_INT 13
5806: PUSH
5807: LD_INT 14
5809: PUSH
5810: LD_INT 15
5812: PUSH
5813: LD_INT 16
5815: PUSH
5816: LD_INT 17
5818: PUSH
5819: LD_INT 18
5821: PUSH
5822: LD_INT 19
5824: PUSH
5825: LD_INT 20
5827: PUSH
5828: LD_INT 21
5830: PUSH
5831: LD_INT 22
5833: PUSH
5834: LD_INT 23
5836: PUSH
5837: LD_INT 24
5839: PUSH
5840: LD_INT 25
5842: PUSH
5843: LD_INT 26
5845: PUSH
5846: LD_INT 28
5848: PUSH
5849: LD_INT 30
5851: PUSH
5852: LD_INT 31
5854: PUSH
5855: LD_INT 32
5857: PUSH
5858: LD_INT 36
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 101
5894: PUSH
5895: LD_INT 102
5897: PUSH
5898: LD_INT 103
5900: PUSH
5901: LD_INT 104
5903: PUSH
5904: LD_INT 105
5906: PUSH
5907: LD_INT 106
5909: PUSH
5910: LD_INT 107
5912: PUSH
5913: LD_INT 108
5915: PUSH
5916: LD_INT 109
5918: PUSH
5919: LD_INT 110
5921: PUSH
5922: LD_INT 111
5924: PUSH
5925: LD_INT 112
5927: PUSH
5928: LD_INT 114
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: ST_TO_ADDR
5950: GO 7737
5952: LD_INT 11
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5960
5958: GO 6152
5960: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5961: LD_ADDR_VAR 0 1
5965: PUSH
5966: LD_INT 2
5968: PUSH
5969: LD_INT 3
5971: PUSH
5972: LD_INT 4
5974: PUSH
5975: LD_INT 5
5977: PUSH
5978: LD_INT 6
5980: PUSH
5981: LD_INT 7
5983: PUSH
5984: LD_INT 8
5986: PUSH
5987: LD_INT 9
5989: PUSH
5990: LD_INT 10
5992: PUSH
5993: LD_INT 11
5995: PUSH
5996: LD_INT 12
5998: PUSH
5999: LD_INT 13
6001: PUSH
6002: LD_INT 14
6004: PUSH
6005: LD_INT 15
6007: PUSH
6008: LD_INT 16
6010: PUSH
6011: LD_INT 17
6013: PUSH
6014: LD_INT 18
6016: PUSH
6017: LD_INT 19
6019: PUSH
6020: LD_INT 20
6022: PUSH
6023: LD_INT 21
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 23
6031: PUSH
6032: LD_INT 24
6034: PUSH
6035: LD_INT 25
6037: PUSH
6038: LD_INT 26
6040: PUSH
6041: LD_INT 28
6043: PUSH
6044: LD_INT 30
6046: PUSH
6047: LD_INT 31
6049: PUSH
6050: LD_INT 32
6052: PUSH
6053: LD_INT 34
6055: PUSH
6056: LD_INT 36
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 101
6094: PUSH
6095: LD_INT 102
6097: PUSH
6098: LD_INT 103
6100: PUSH
6101: LD_INT 104
6103: PUSH
6104: LD_INT 105
6106: PUSH
6107: LD_INT 106
6109: PUSH
6110: LD_INT 107
6112: PUSH
6113: LD_INT 108
6115: PUSH
6116: LD_INT 109
6118: PUSH
6119: LD_INT 110
6121: PUSH
6122: LD_INT 111
6124: PUSH
6125: LD_INT 112
6127: PUSH
6128: LD_INT 114
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: ST_TO_ADDR
6150: GO 7737
6152: LD_INT 12
6154: DOUBLE
6155: EQUAL
6156: IFTRUE 6160
6158: GO 6368
6160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 2
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 6
6183: PUSH
6184: LD_INT 7
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: LD_INT 9
6192: PUSH
6193: LD_INT 10
6195: PUSH
6196: LD_INT 11
6198: PUSH
6199: LD_INT 12
6201: PUSH
6202: LD_INT 13
6204: PUSH
6205: LD_INT 14
6207: PUSH
6208: LD_INT 15
6210: PUSH
6211: LD_INT 16
6213: PUSH
6214: LD_INT 17
6216: PUSH
6217: LD_INT 18
6219: PUSH
6220: LD_INT 19
6222: PUSH
6223: LD_INT 20
6225: PUSH
6226: LD_INT 21
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 23
6234: PUSH
6235: LD_INT 24
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 26
6243: PUSH
6244: LD_INT 27
6246: PUSH
6247: LD_INT 28
6249: PUSH
6250: LD_INT 30
6252: PUSH
6253: LD_INT 31
6255: PUSH
6256: LD_INT 32
6258: PUSH
6259: LD_INT 33
6261: PUSH
6262: LD_INT 34
6264: PUSH
6265: LD_INT 36
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 101
6306: PUSH
6307: LD_INT 102
6309: PUSH
6310: LD_INT 103
6312: PUSH
6313: LD_INT 104
6315: PUSH
6316: LD_INT 105
6318: PUSH
6319: LD_INT 106
6321: PUSH
6322: LD_INT 107
6324: PUSH
6325: LD_INT 108
6327: PUSH
6328: LD_INT 109
6330: PUSH
6331: LD_INT 110
6333: PUSH
6334: LD_INT 111
6336: PUSH
6337: LD_INT 112
6339: PUSH
6340: LD_INT 113
6342: PUSH
6343: LD_INT 114
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: ST_TO_ADDR
6366: GO 7737
6368: LD_INT 13
6370: DOUBLE
6371: EQUAL
6372: IFTRUE 6376
6374: GO 6572
6376: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6377: LD_ADDR_VAR 0 1
6381: PUSH
6382: LD_INT 1
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: LD_INT 4
6393: PUSH
6394: LD_INT 5
6396: PUSH
6397: LD_INT 8
6399: PUSH
6400: LD_INT 9
6402: PUSH
6403: LD_INT 10
6405: PUSH
6406: LD_INT 11
6408: PUSH
6409: LD_INT 12
6411: PUSH
6412: LD_INT 14
6414: PUSH
6415: LD_INT 15
6417: PUSH
6418: LD_INT 16
6420: PUSH
6421: LD_INT 17
6423: PUSH
6424: LD_INT 18
6426: PUSH
6427: LD_INT 19
6429: PUSH
6430: LD_INT 20
6432: PUSH
6433: LD_INT 21
6435: PUSH
6436: LD_INT 22
6438: PUSH
6439: LD_INT 23
6441: PUSH
6442: LD_INT 24
6444: PUSH
6445: LD_INT 25
6447: PUSH
6448: LD_INT 26
6450: PUSH
6451: LD_INT 27
6453: PUSH
6454: LD_INT 28
6456: PUSH
6457: LD_INT 30
6459: PUSH
6460: LD_INT 31
6462: PUSH
6463: LD_INT 32
6465: PUSH
6466: LD_INT 33
6468: PUSH
6469: LD_INT 34
6471: PUSH
6472: LD_INT 36
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 101
6510: PUSH
6511: LD_INT 102
6513: PUSH
6514: LD_INT 103
6516: PUSH
6517: LD_INT 104
6519: PUSH
6520: LD_INT 105
6522: PUSH
6523: LD_INT 106
6525: PUSH
6526: LD_INT 107
6528: PUSH
6529: LD_INT 108
6531: PUSH
6532: LD_INT 109
6534: PUSH
6535: LD_INT 110
6537: PUSH
6538: LD_INT 111
6540: PUSH
6541: LD_INT 112
6543: PUSH
6544: LD_INT 113
6546: PUSH
6547: LD_INT 114
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: ST_TO_ADDR
6570: GO 7737
6572: LD_INT 14
6574: DOUBLE
6575: EQUAL
6576: IFTRUE 6580
6578: GO 6792
6580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6581: LD_ADDR_VAR 0 1
6585: PUSH
6586: LD_INT 1
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 4
6597: PUSH
6598: LD_INT 5
6600: PUSH
6601: LD_INT 6
6603: PUSH
6604: LD_INT 7
6606: PUSH
6607: LD_INT 8
6609: PUSH
6610: LD_INT 9
6612: PUSH
6613: LD_INT 10
6615: PUSH
6616: LD_INT 11
6618: PUSH
6619: LD_INT 12
6621: PUSH
6622: LD_INT 13
6624: PUSH
6625: LD_INT 14
6627: PUSH
6628: LD_INT 15
6630: PUSH
6631: LD_INT 16
6633: PUSH
6634: LD_INT 17
6636: PUSH
6637: LD_INT 18
6639: PUSH
6640: LD_INT 19
6642: PUSH
6643: LD_INT 20
6645: PUSH
6646: LD_INT 21
6648: PUSH
6649: LD_INT 22
6651: PUSH
6652: LD_INT 23
6654: PUSH
6655: LD_INT 24
6657: PUSH
6658: LD_INT 25
6660: PUSH
6661: LD_INT 26
6663: PUSH
6664: LD_INT 27
6666: PUSH
6667: LD_INT 28
6669: PUSH
6670: LD_INT 29
6672: PUSH
6673: LD_INT 30
6675: PUSH
6676: LD_INT 31
6678: PUSH
6679: LD_INT 32
6681: PUSH
6682: LD_INT 33
6684: PUSH
6685: LD_INT 34
6687: PUSH
6688: LD_INT 36
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 101
6730: PUSH
6731: LD_INT 102
6733: PUSH
6734: LD_INT 103
6736: PUSH
6737: LD_INT 104
6739: PUSH
6740: LD_INT 105
6742: PUSH
6743: LD_INT 106
6745: PUSH
6746: LD_INT 107
6748: PUSH
6749: LD_INT 108
6751: PUSH
6752: LD_INT 109
6754: PUSH
6755: LD_INT 110
6757: PUSH
6758: LD_INT 111
6760: PUSH
6761: LD_INT 112
6763: PUSH
6764: LD_INT 113
6766: PUSH
6767: LD_INT 114
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: ST_TO_ADDR
6790: GO 7737
6792: LD_INT 15
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 7012
6800: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6801: LD_ADDR_VAR 0 1
6805: PUSH
6806: LD_INT 1
6808: PUSH
6809: LD_INT 2
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 4
6817: PUSH
6818: LD_INT 5
6820: PUSH
6821: LD_INT 6
6823: PUSH
6824: LD_INT 7
6826: PUSH
6827: LD_INT 8
6829: PUSH
6830: LD_INT 9
6832: PUSH
6833: LD_INT 10
6835: PUSH
6836: LD_INT 11
6838: PUSH
6839: LD_INT 12
6841: PUSH
6842: LD_INT 13
6844: PUSH
6845: LD_INT 14
6847: PUSH
6848: LD_INT 15
6850: PUSH
6851: LD_INT 16
6853: PUSH
6854: LD_INT 17
6856: PUSH
6857: LD_INT 18
6859: PUSH
6860: LD_INT 19
6862: PUSH
6863: LD_INT 20
6865: PUSH
6866: LD_INT 21
6868: PUSH
6869: LD_INT 22
6871: PUSH
6872: LD_INT 23
6874: PUSH
6875: LD_INT 24
6877: PUSH
6878: LD_INT 25
6880: PUSH
6881: LD_INT 26
6883: PUSH
6884: LD_INT 27
6886: PUSH
6887: LD_INT 28
6889: PUSH
6890: LD_INT 29
6892: PUSH
6893: LD_INT 30
6895: PUSH
6896: LD_INT 31
6898: PUSH
6899: LD_INT 32
6901: PUSH
6902: LD_INT 33
6904: PUSH
6905: LD_INT 34
6907: PUSH
6908: LD_INT 36
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 101
6950: PUSH
6951: LD_INT 102
6953: PUSH
6954: LD_INT 103
6956: PUSH
6957: LD_INT 104
6959: PUSH
6960: LD_INT 105
6962: PUSH
6963: LD_INT 106
6965: PUSH
6966: LD_INT 107
6968: PUSH
6969: LD_INT 108
6971: PUSH
6972: LD_INT 109
6974: PUSH
6975: LD_INT 110
6977: PUSH
6978: LD_INT 111
6980: PUSH
6981: LD_INT 112
6983: PUSH
6984: LD_INT 113
6986: PUSH
6987: LD_INT 114
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: ST_TO_ADDR
7010: GO 7737
7012: LD_INT 16
7014: DOUBLE
7015: EQUAL
7016: IFTRUE 7020
7018: GO 7144
7020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7021: LD_ADDR_VAR 0 1
7025: PUSH
7026: LD_INT 2
7028: PUSH
7029: LD_INT 4
7031: PUSH
7032: LD_INT 5
7034: PUSH
7035: LD_INT 7
7037: PUSH
7038: LD_INT 11
7040: PUSH
7041: LD_INT 12
7043: PUSH
7044: LD_INT 15
7046: PUSH
7047: LD_INT 16
7049: PUSH
7050: LD_INT 20
7052: PUSH
7053: LD_INT 21
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 23
7061: PUSH
7062: LD_INT 25
7064: PUSH
7065: LD_INT 26
7067: PUSH
7068: LD_INT 30
7070: PUSH
7071: LD_INT 31
7073: PUSH
7074: LD_INT 32
7076: PUSH
7077: LD_INT 33
7079: PUSH
7080: LD_INT 34
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 101
7106: PUSH
7107: LD_INT 102
7109: PUSH
7110: LD_INT 103
7112: PUSH
7113: LD_INT 106
7115: PUSH
7116: LD_INT 108
7118: PUSH
7119: LD_INT 112
7121: PUSH
7122: LD_INT 113
7124: PUSH
7125: LD_INT 114
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: ST_TO_ADDR
7142: GO 7737
7144: LD_INT 17
7146: DOUBLE
7147: EQUAL
7148: IFTRUE 7152
7150: GO 7364
7152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7153: LD_ADDR_VAR 0 1
7157: PUSH
7158: LD_INT 1
7160: PUSH
7161: LD_INT 2
7163: PUSH
7164: LD_INT 3
7166: PUSH
7167: LD_INT 4
7169: PUSH
7170: LD_INT 5
7172: PUSH
7173: LD_INT 6
7175: PUSH
7176: LD_INT 7
7178: PUSH
7179: LD_INT 8
7181: PUSH
7182: LD_INT 9
7184: PUSH
7185: LD_INT 10
7187: PUSH
7188: LD_INT 11
7190: PUSH
7191: LD_INT 12
7193: PUSH
7194: LD_INT 13
7196: PUSH
7197: LD_INT 14
7199: PUSH
7200: LD_INT 15
7202: PUSH
7203: LD_INT 16
7205: PUSH
7206: LD_INT 17
7208: PUSH
7209: LD_INT 18
7211: PUSH
7212: LD_INT 19
7214: PUSH
7215: LD_INT 20
7217: PUSH
7218: LD_INT 21
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 23
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 25
7232: PUSH
7233: LD_INT 26
7235: PUSH
7236: LD_INT 27
7238: PUSH
7239: LD_INT 28
7241: PUSH
7242: LD_INT 29
7244: PUSH
7245: LD_INT 30
7247: PUSH
7248: LD_INT 31
7250: PUSH
7251: LD_INT 32
7253: PUSH
7254: LD_INT 33
7256: PUSH
7257: LD_INT 34
7259: PUSH
7260: LD_INT 36
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 101
7302: PUSH
7303: LD_INT 102
7305: PUSH
7306: LD_INT 103
7308: PUSH
7309: LD_INT 104
7311: PUSH
7312: LD_INT 105
7314: PUSH
7315: LD_INT 106
7317: PUSH
7318: LD_INT 107
7320: PUSH
7321: LD_INT 108
7323: PUSH
7324: LD_INT 109
7326: PUSH
7327: LD_INT 110
7329: PUSH
7330: LD_INT 111
7332: PUSH
7333: LD_INT 112
7335: PUSH
7336: LD_INT 113
7338: PUSH
7339: LD_INT 114
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: ST_TO_ADDR
7362: GO 7737
7364: LD_INT 18
7366: DOUBLE
7367: EQUAL
7368: IFTRUE 7372
7370: GO 7508
7372: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7373: LD_ADDR_VAR 0 1
7377: PUSH
7378: LD_INT 2
7380: PUSH
7381: LD_INT 4
7383: PUSH
7384: LD_INT 5
7386: PUSH
7387: LD_INT 7
7389: PUSH
7390: LD_INT 11
7392: PUSH
7393: LD_INT 12
7395: PUSH
7396: LD_INT 15
7398: PUSH
7399: LD_INT 16
7401: PUSH
7402: LD_INT 20
7404: PUSH
7405: LD_INT 21
7407: PUSH
7408: LD_INT 22
7410: PUSH
7411: LD_INT 23
7413: PUSH
7414: LD_INT 25
7416: PUSH
7417: LD_INT 26
7419: PUSH
7420: LD_INT 30
7422: PUSH
7423: LD_INT 31
7425: PUSH
7426: LD_INT 32
7428: PUSH
7429: LD_INT 33
7431: PUSH
7432: LD_INT 34
7434: PUSH
7435: LD_INT 35
7437: PUSH
7438: LD_INT 36
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 101
7466: PUSH
7467: LD_INT 102
7469: PUSH
7470: LD_INT 103
7472: PUSH
7473: LD_INT 106
7475: PUSH
7476: LD_INT 108
7478: PUSH
7479: LD_INT 112
7481: PUSH
7482: LD_INT 113
7484: PUSH
7485: LD_INT 114
7487: PUSH
7488: LD_INT 115
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: ST_TO_ADDR
7506: GO 7737
7508: LD_INT 19
7510: DOUBLE
7511: EQUAL
7512: IFTRUE 7516
7514: GO 7736
7516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7517: LD_ADDR_VAR 0 1
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: LD_INT 2
7527: PUSH
7528: LD_INT 3
7530: PUSH
7531: LD_INT 4
7533: PUSH
7534: LD_INT 5
7536: PUSH
7537: LD_INT 6
7539: PUSH
7540: LD_INT 7
7542: PUSH
7543: LD_INT 8
7545: PUSH
7546: LD_INT 9
7548: PUSH
7549: LD_INT 10
7551: PUSH
7552: LD_INT 11
7554: PUSH
7555: LD_INT 12
7557: PUSH
7558: LD_INT 13
7560: PUSH
7561: LD_INT 14
7563: PUSH
7564: LD_INT 15
7566: PUSH
7567: LD_INT 16
7569: PUSH
7570: LD_INT 17
7572: PUSH
7573: LD_INT 18
7575: PUSH
7576: LD_INT 19
7578: PUSH
7579: LD_INT 20
7581: PUSH
7582: LD_INT 21
7584: PUSH
7585: LD_INT 22
7587: PUSH
7588: LD_INT 23
7590: PUSH
7591: LD_INT 24
7593: PUSH
7594: LD_INT 25
7596: PUSH
7597: LD_INT 26
7599: PUSH
7600: LD_INT 27
7602: PUSH
7603: LD_INT 28
7605: PUSH
7606: LD_INT 29
7608: PUSH
7609: LD_INT 30
7611: PUSH
7612: LD_INT 31
7614: PUSH
7615: LD_INT 32
7617: PUSH
7618: LD_INT 33
7620: PUSH
7621: LD_INT 34
7623: PUSH
7624: LD_INT 35
7626: PUSH
7627: LD_INT 36
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 101
7670: PUSH
7671: LD_INT 102
7673: PUSH
7674: LD_INT 103
7676: PUSH
7677: LD_INT 104
7679: PUSH
7680: LD_INT 105
7682: PUSH
7683: LD_INT 106
7685: PUSH
7686: LD_INT 107
7688: PUSH
7689: LD_INT 108
7691: PUSH
7692: LD_INT 109
7694: PUSH
7695: LD_INT 110
7697: PUSH
7698: LD_INT 111
7700: PUSH
7701: LD_INT 112
7703: PUSH
7704: LD_INT 113
7706: PUSH
7707: LD_INT 114
7709: PUSH
7710: LD_INT 115
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: ST_TO_ADDR
7734: GO 7737
7736: POP
// end else
7737: GO 7956
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
7739: LD_ADDR_VAR 0 1
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: LD_INT 2
7749: PUSH
7750: LD_INT 3
7752: PUSH
7753: LD_INT 4
7755: PUSH
7756: LD_INT 5
7758: PUSH
7759: LD_INT 6
7761: PUSH
7762: LD_INT 7
7764: PUSH
7765: LD_INT 8
7767: PUSH
7768: LD_INT 9
7770: PUSH
7771: LD_INT 10
7773: PUSH
7774: LD_INT 11
7776: PUSH
7777: LD_INT 12
7779: PUSH
7780: LD_INT 13
7782: PUSH
7783: LD_INT 14
7785: PUSH
7786: LD_INT 15
7788: PUSH
7789: LD_INT 16
7791: PUSH
7792: LD_INT 17
7794: PUSH
7795: LD_INT 18
7797: PUSH
7798: LD_INT 19
7800: PUSH
7801: LD_INT 20
7803: PUSH
7804: LD_INT 21
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 23
7812: PUSH
7813: LD_INT 24
7815: PUSH
7816: LD_INT 25
7818: PUSH
7819: LD_INT 26
7821: PUSH
7822: LD_INT 27
7824: PUSH
7825: LD_INT 28
7827: PUSH
7828: LD_INT 29
7830: PUSH
7831: LD_INT 30
7833: PUSH
7834: LD_INT 31
7836: PUSH
7837: LD_INT 32
7839: PUSH
7840: LD_INT 33
7842: PUSH
7843: LD_INT 34
7845: PUSH
7846: LD_INT 35
7848: PUSH
7849: LD_INT 36
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 101
7892: PUSH
7893: LD_INT 102
7895: PUSH
7896: LD_INT 103
7898: PUSH
7899: LD_INT 104
7901: PUSH
7902: LD_INT 105
7904: PUSH
7905: LD_INT 106
7907: PUSH
7908: LD_INT 107
7910: PUSH
7911: LD_INT 108
7913: PUSH
7914: LD_INT 109
7916: PUSH
7917: LD_INT 110
7919: PUSH
7920: LD_INT 111
7922: PUSH
7923: LD_INT 112
7925: PUSH
7926: LD_INT 113
7928: PUSH
7929: LD_INT 114
7931: PUSH
7932: LD_INT 115
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: ST_TO_ADDR
// if result then
7956: LD_VAR 0 1
7960: IFFALSE 8249
// begin normal :=  ;
7962: LD_ADDR_VAR 0 3
7966: PUSH
7967: LD_STRING 
7969: ST_TO_ADDR
// hardcore :=  ;
7970: LD_ADDR_VAR 0 4
7974: PUSH
7975: LD_STRING 
7977: ST_TO_ADDR
// for i = 1 to normalCounter do
7978: LD_ADDR_VAR 0 5
7982: PUSH
7983: DOUBLE
7984: LD_INT 1
7986: DEC
7987: ST_TO_ADDR
7988: LD_EXP 53
7992: PUSH
7993: FOR_TO
7994: IFFALSE 8095
// begin tmp := 0 ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_STRING 0
8003: ST_TO_ADDR
// if result [ 1 ] then
8004: LD_VAR 0 1
8008: PUSH
8009: LD_INT 1
8011: ARRAY
8012: IFFALSE 8077
// if result [ 1 ] [ 1 ] = i then
8014: LD_VAR 0 1
8018: PUSH
8019: LD_INT 1
8021: ARRAY
8022: PUSH
8023: LD_INT 1
8025: ARRAY
8026: PUSH
8027: LD_VAR 0 5
8031: EQUAL
8032: IFFALSE 8077
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8034: LD_ADDR_VAR 0 1
8038: PUSH
8039: LD_VAR 0 1
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: LD_VAR 0 1
8051: PUSH
8052: LD_INT 1
8054: ARRAY
8055: PPUSH
8056: LD_INT 1
8058: PPUSH
8059: CALL_OW 3
8063: PPUSH
8064: CALL_OW 1
8068: ST_TO_ADDR
// tmp := 1 ;
8069: LD_ADDR_VAR 0 2
8073: PUSH
8074: LD_STRING 1
8076: ST_TO_ADDR
// end ; normal := normal & tmp ;
8077: LD_ADDR_VAR 0 3
8081: PUSH
8082: LD_VAR 0 3
8086: PUSH
8087: LD_VAR 0 2
8091: STR
8092: ST_TO_ADDR
// end ;
8093: GO 7993
8095: POP
8096: POP
// for i = 1 to hardcoreCounter do
8097: LD_ADDR_VAR 0 5
8101: PUSH
8102: DOUBLE
8103: LD_INT 1
8105: DEC
8106: ST_TO_ADDR
8107: LD_EXP 54
8111: PUSH
8112: FOR_TO
8113: IFFALSE 8218
// begin tmp := 0 ;
8115: LD_ADDR_VAR 0 2
8119: PUSH
8120: LD_STRING 0
8122: ST_TO_ADDR
// if result [ 2 ] then
8123: LD_VAR 0 1
8127: PUSH
8128: LD_INT 2
8130: ARRAY
8131: IFFALSE 8200
// if result [ 2 ] [ 1 ] = 100 + i then
8133: LD_VAR 0 1
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_INT 1
8144: ARRAY
8145: PUSH
8146: LD_INT 100
8148: PUSH
8149: LD_VAR 0 5
8153: PLUS
8154: EQUAL
8155: IFFALSE 8200
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8157: LD_ADDR_VAR 0 1
8161: PUSH
8162: LD_VAR 0 1
8166: PPUSH
8167: LD_INT 2
8169: PPUSH
8170: LD_VAR 0 1
8174: PUSH
8175: LD_INT 2
8177: ARRAY
8178: PPUSH
8179: LD_INT 1
8181: PPUSH
8182: CALL_OW 3
8186: PPUSH
8187: CALL_OW 1
8191: ST_TO_ADDR
// tmp := 1 ;
8192: LD_ADDR_VAR 0 2
8196: PUSH
8197: LD_STRING 1
8199: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8200: LD_ADDR_VAR 0 4
8204: PUSH
8205: LD_VAR 0 4
8209: PUSH
8210: LD_VAR 0 2
8214: STR
8215: ST_TO_ADDR
// end ;
8216: GO 8112
8218: POP
8219: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8220: LD_STRING getStreamItemsFromMission("
8222: PUSH
8223: LD_VAR 0 3
8227: STR
8228: PUSH
8229: LD_STRING ","
8231: STR
8232: PUSH
8233: LD_VAR 0 4
8237: STR
8238: PUSH
8239: LD_STRING ")
8241: STR
8242: PPUSH
8243: CALL_OW 559
// end else
8247: GO 8256
// ToLua ( getStreamItemsFromMission("","") ) ;
8249: LD_STRING getStreamItemsFromMission("","")
8251: PPUSH
8252: CALL_OW 559
// end ;
8256: LD_VAR 0 1
8260: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8261: LD_VAR 0 2
8265: PUSH
8266: LD_INT 100
8268: EQUAL
8269: IFFALSE 9218
// begin if not StreamModeActive then
8271: LD_EXP 52
8275: NOT
8276: IFFALSE 8286
// StreamModeActive := true ;
8278: LD_ADDR_EXP 52
8282: PUSH
8283: LD_INT 1
8285: ST_TO_ADDR
// if p3 = 0 then
8286: LD_VAR 0 3
8290: PUSH
8291: LD_INT 0
8293: EQUAL
8294: IFFALSE 8300
// InitStreamMode ;
8296: CALL 4339 0 0
// if p3 = 1 then
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 1
8307: EQUAL
8308: IFFALSE 8318
// sRocket := true ;
8310: LD_ADDR_EXP 57
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// if p3 = 2 then
8318: LD_VAR 0 3
8322: PUSH
8323: LD_INT 2
8325: EQUAL
8326: IFFALSE 8336
// sSpeed := true ;
8328: LD_ADDR_EXP 56
8332: PUSH
8333: LD_INT 1
8335: ST_TO_ADDR
// if p3 = 3 then
8336: LD_VAR 0 3
8340: PUSH
8341: LD_INT 3
8343: EQUAL
8344: IFFALSE 8354
// sEngine := true ;
8346: LD_ADDR_EXP 58
8350: PUSH
8351: LD_INT 1
8353: ST_TO_ADDR
// if p3 = 4 then
8354: LD_VAR 0 3
8358: PUSH
8359: LD_INT 4
8361: EQUAL
8362: IFFALSE 8372
// sSpec := true ;
8364: LD_ADDR_EXP 55
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// if p3 = 5 then
8372: LD_VAR 0 3
8376: PUSH
8377: LD_INT 5
8379: EQUAL
8380: IFFALSE 8390
// sLevel := true ;
8382: LD_ADDR_EXP 59
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// if p3 = 6 then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 6
8397: EQUAL
8398: IFFALSE 8408
// sArmoury := true ;
8400: LD_ADDR_EXP 60
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// if p3 = 7 then
8408: LD_VAR 0 3
8412: PUSH
8413: LD_INT 7
8415: EQUAL
8416: IFFALSE 8426
// sRadar := true ;
8418: LD_ADDR_EXP 61
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// if p3 = 8 then
8426: LD_VAR 0 3
8430: PUSH
8431: LD_INT 8
8433: EQUAL
8434: IFFALSE 8444
// sBunker := true ;
8436: LD_ADDR_EXP 62
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// if p3 = 9 then
8444: LD_VAR 0 3
8448: PUSH
8449: LD_INT 9
8451: EQUAL
8452: IFFALSE 8462
// sHack := true ;
8454: LD_ADDR_EXP 63
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// if p3 = 10 then
8462: LD_VAR 0 3
8466: PUSH
8467: LD_INT 10
8469: EQUAL
8470: IFFALSE 8480
// sFire := true ;
8472: LD_ADDR_EXP 64
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// if p3 = 11 then
8480: LD_VAR 0 3
8484: PUSH
8485: LD_INT 11
8487: EQUAL
8488: IFFALSE 8498
// sRefresh := true ;
8490: LD_ADDR_EXP 65
8494: PUSH
8495: LD_INT 1
8497: ST_TO_ADDR
// if p3 = 12 then
8498: LD_VAR 0 3
8502: PUSH
8503: LD_INT 12
8505: EQUAL
8506: IFFALSE 8516
// sExp := true ;
8508: LD_ADDR_EXP 66
8512: PUSH
8513: LD_INT 1
8515: ST_TO_ADDR
// if p3 = 13 then
8516: LD_VAR 0 3
8520: PUSH
8521: LD_INT 13
8523: EQUAL
8524: IFFALSE 8534
// sDepot := true ;
8526: LD_ADDR_EXP 67
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// if p3 = 14 then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_INT 14
8541: EQUAL
8542: IFFALSE 8552
// sFlag := true ;
8544: LD_ADDR_EXP 68
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// if p3 = 15 then
8552: LD_VAR 0 3
8556: PUSH
8557: LD_INT 15
8559: EQUAL
8560: IFFALSE 8570
// sKamikadze := true ;
8562: LD_ADDR_EXP 76
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// if p3 = 16 then
8570: LD_VAR 0 3
8574: PUSH
8575: LD_INT 16
8577: EQUAL
8578: IFFALSE 8588
// sTroll := true ;
8580: LD_ADDR_EXP 77
8584: PUSH
8585: LD_INT 1
8587: ST_TO_ADDR
// if p3 = 17 then
8588: LD_VAR 0 3
8592: PUSH
8593: LD_INT 17
8595: EQUAL
8596: IFFALSE 8606
// sSlow := true ;
8598: LD_ADDR_EXP 78
8602: PUSH
8603: LD_INT 1
8605: ST_TO_ADDR
// if p3 = 18 then
8606: LD_VAR 0 3
8610: PUSH
8611: LD_INT 18
8613: EQUAL
8614: IFFALSE 8624
// sLack := true ;
8616: LD_ADDR_EXP 79
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// if p3 = 19 then
8624: LD_VAR 0 3
8628: PUSH
8629: LD_INT 19
8631: EQUAL
8632: IFFALSE 8642
// sTank := true ;
8634: LD_ADDR_EXP 81
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// if p3 = 20 then
8642: LD_VAR 0 3
8646: PUSH
8647: LD_INT 20
8649: EQUAL
8650: IFFALSE 8660
// sRemote := true ;
8652: LD_ADDR_EXP 82
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// if p3 = 21 then
8660: LD_VAR 0 3
8664: PUSH
8665: LD_INT 21
8667: EQUAL
8668: IFFALSE 8678
// sPowell := true ;
8670: LD_ADDR_EXP 83
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if p3 = 22 then
8678: LD_VAR 0 3
8682: PUSH
8683: LD_INT 22
8685: EQUAL
8686: IFFALSE 8696
// sTeleport := true ;
8688: LD_ADDR_EXP 86
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// if p3 = 23 then
8696: LD_VAR 0 3
8700: PUSH
8701: LD_INT 23
8703: EQUAL
8704: IFFALSE 8714
// sOilTower := true ;
8706: LD_ADDR_EXP 88
8710: PUSH
8711: LD_INT 1
8713: ST_TO_ADDR
// if p3 = 24 then
8714: LD_VAR 0 3
8718: PUSH
8719: LD_INT 24
8721: EQUAL
8722: IFFALSE 8732
// sShovel := true ;
8724: LD_ADDR_EXP 89
8728: PUSH
8729: LD_INT 1
8731: ST_TO_ADDR
// if p3 = 25 then
8732: LD_VAR 0 3
8736: PUSH
8737: LD_INT 25
8739: EQUAL
8740: IFFALSE 8750
// sSheik := true ;
8742: LD_ADDR_EXP 90
8746: PUSH
8747: LD_INT 1
8749: ST_TO_ADDR
// if p3 = 26 then
8750: LD_VAR 0 3
8754: PUSH
8755: LD_INT 26
8757: EQUAL
8758: IFFALSE 8768
// sEarthquake := true ;
8760: LD_ADDR_EXP 92
8764: PUSH
8765: LD_INT 1
8767: ST_TO_ADDR
// if p3 = 27 then
8768: LD_VAR 0 3
8772: PUSH
8773: LD_INT 27
8775: EQUAL
8776: IFFALSE 8786
// sAI := true ;
8778: LD_ADDR_EXP 93
8782: PUSH
8783: LD_INT 1
8785: ST_TO_ADDR
// if p3 = 28 then
8786: LD_VAR 0 3
8790: PUSH
8791: LD_INT 28
8793: EQUAL
8794: IFFALSE 8804
// sCargo := true ;
8796: LD_ADDR_EXP 96
8800: PUSH
8801: LD_INT 1
8803: ST_TO_ADDR
// if p3 = 29 then
8804: LD_VAR 0 3
8808: PUSH
8809: LD_INT 29
8811: EQUAL
8812: IFFALSE 8822
// sDLaser := true ;
8814: LD_ADDR_EXP 97
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// if p3 = 30 then
8822: LD_VAR 0 3
8826: PUSH
8827: LD_INT 30
8829: EQUAL
8830: IFFALSE 8840
// sExchange := true ;
8832: LD_ADDR_EXP 98
8836: PUSH
8837: LD_INT 1
8839: ST_TO_ADDR
// if p3 = 31 then
8840: LD_VAR 0 3
8844: PUSH
8845: LD_INT 31
8847: EQUAL
8848: IFFALSE 8858
// sFac := true ;
8850: LD_ADDR_EXP 99
8854: PUSH
8855: LD_INT 1
8857: ST_TO_ADDR
// if p3 = 32 then
8858: LD_VAR 0 3
8862: PUSH
8863: LD_INT 32
8865: EQUAL
8866: IFFALSE 8876
// sPower := true ;
8868: LD_ADDR_EXP 100
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// if p3 = 33 then
8876: LD_VAR 0 3
8880: PUSH
8881: LD_INT 33
8883: EQUAL
8884: IFFALSE 8894
// sRandom := true ;
8886: LD_ADDR_EXP 101
8890: PUSH
8891: LD_INT 1
8893: ST_TO_ADDR
// if p3 = 34 then
8894: LD_VAR 0 3
8898: PUSH
8899: LD_INT 34
8901: EQUAL
8902: IFFALSE 8912
// sShield := true ;
8904: LD_ADDR_EXP 102
8908: PUSH
8909: LD_INT 1
8911: ST_TO_ADDR
// if p3 = 35 then
8912: LD_VAR 0 3
8916: PUSH
8917: LD_INT 35
8919: EQUAL
8920: IFFALSE 8930
// sTime := true ;
8922: LD_ADDR_EXP 103
8926: PUSH
8927: LD_INT 1
8929: ST_TO_ADDR
// if p3 = 36 then
8930: LD_VAR 0 3
8934: PUSH
8935: LD_INT 36
8937: EQUAL
8938: IFFALSE 8948
// sTools := true ;
8940: LD_ADDR_EXP 104
8944: PUSH
8945: LD_INT 1
8947: ST_TO_ADDR
// if p3 = 101 then
8948: LD_VAR 0 3
8952: PUSH
8953: LD_INT 101
8955: EQUAL
8956: IFFALSE 8966
// sSold := true ;
8958: LD_ADDR_EXP 69
8962: PUSH
8963: LD_INT 1
8965: ST_TO_ADDR
// if p3 = 102 then
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 102
8973: EQUAL
8974: IFFALSE 8984
// sDiff := true ;
8976: LD_ADDR_EXP 70
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// if p3 = 103 then
8984: LD_VAR 0 3
8988: PUSH
8989: LD_INT 103
8991: EQUAL
8992: IFFALSE 9002
// sFog := true ;
8994: LD_ADDR_EXP 73
8998: PUSH
8999: LD_INT 1
9001: ST_TO_ADDR
// if p3 = 104 then
9002: LD_VAR 0 3
9006: PUSH
9007: LD_INT 104
9009: EQUAL
9010: IFFALSE 9020
// sReset := true ;
9012: LD_ADDR_EXP 74
9016: PUSH
9017: LD_INT 1
9019: ST_TO_ADDR
// if p3 = 105 then
9020: LD_VAR 0 3
9024: PUSH
9025: LD_INT 105
9027: EQUAL
9028: IFFALSE 9038
// sSun := true ;
9030: LD_ADDR_EXP 75
9034: PUSH
9035: LD_INT 1
9037: ST_TO_ADDR
// if p3 = 106 then
9038: LD_VAR 0 3
9042: PUSH
9043: LD_INT 106
9045: EQUAL
9046: IFFALSE 9056
// sTiger := true ;
9048: LD_ADDR_EXP 71
9052: PUSH
9053: LD_INT 1
9055: ST_TO_ADDR
// if p3 = 107 then
9056: LD_VAR 0 3
9060: PUSH
9061: LD_INT 107
9063: EQUAL
9064: IFFALSE 9074
// sBomb := true ;
9066: LD_ADDR_EXP 72
9070: PUSH
9071: LD_INT 1
9073: ST_TO_ADDR
// if p3 = 108 then
9074: LD_VAR 0 3
9078: PUSH
9079: LD_INT 108
9081: EQUAL
9082: IFFALSE 9092
// sWound := true ;
9084: LD_ADDR_EXP 80
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// if p3 = 109 then
9092: LD_VAR 0 3
9096: PUSH
9097: LD_INT 109
9099: EQUAL
9100: IFFALSE 9110
// sBetray := true ;
9102: LD_ADDR_EXP 84
9106: PUSH
9107: LD_INT 1
9109: ST_TO_ADDR
// if p3 = 110 then
9110: LD_VAR 0 3
9114: PUSH
9115: LD_INT 110
9117: EQUAL
9118: IFFALSE 9128
// sContamin := true ;
9120: LD_ADDR_EXP 85
9124: PUSH
9125: LD_INT 1
9127: ST_TO_ADDR
// if p3 = 111 then
9128: LD_VAR 0 3
9132: PUSH
9133: LD_INT 111
9135: EQUAL
9136: IFFALSE 9146
// sOil := true ;
9138: LD_ADDR_EXP 87
9142: PUSH
9143: LD_INT 1
9145: ST_TO_ADDR
// if p3 = 112 then
9146: LD_VAR 0 3
9150: PUSH
9151: LD_INT 112
9153: EQUAL
9154: IFFALSE 9164
// sStu := true ;
9156: LD_ADDR_EXP 91
9160: PUSH
9161: LD_INT 1
9163: ST_TO_ADDR
// if p3 = 113 then
9164: LD_VAR 0 3
9168: PUSH
9169: LD_INT 113
9171: EQUAL
9172: IFFALSE 9182
// sBazooka := true ;
9174: LD_ADDR_EXP 94
9178: PUSH
9179: LD_INT 1
9181: ST_TO_ADDR
// if p3 = 114 then
9182: LD_VAR 0 3
9186: PUSH
9187: LD_INT 114
9189: EQUAL
9190: IFFALSE 9200
// sMortar := true ;
9192: LD_ADDR_EXP 95
9196: PUSH
9197: LD_INT 1
9199: ST_TO_ADDR
// if p3 = 115 then
9200: LD_VAR 0 3
9204: PUSH
9205: LD_INT 115
9207: EQUAL
9208: IFFALSE 9218
// sRanger := true ;
9210: LD_ADDR_EXP 105
9214: PUSH
9215: LD_INT 1
9217: ST_TO_ADDR
// end ; end ;
9218: PPOPN 6
9220: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9221: LD_EXP 52
9225: PUSH
9226: LD_EXP 57
9230: AND
9231: IFFALSE 9355
9233: GO 9235
9235: DISABLE
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
// begin enable ;
9240: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_OWVAR 2
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 2
9260: PUSH
9261: LD_INT 34
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 34
9273: PUSH
9274: LD_INT 45
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: LD_INT 34
9283: PUSH
9284: LD_INT 28
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 34
9293: PUSH
9294: LD_INT 47
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: ST_TO_ADDR
// if not tmp then
9317: LD_VAR 0 2
9321: NOT
9322: IFFALSE 9326
// exit ;
9324: GO 9355
// for i in tmp do
9326: LD_ADDR_VAR 0 1
9330: PUSH
9331: LD_VAR 0 2
9335: PUSH
9336: FOR_IN
9337: IFFALSE 9353
// begin SetLives ( i , 0 ) ;
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 0
9346: PPUSH
9347: CALL_OW 234
// end ;
9351: GO 9336
9353: POP
9354: POP
// end ;
9355: PPOPN 2
9357: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9358: LD_EXP 52
9362: PUSH
9363: LD_EXP 58
9367: AND
9368: IFFALSE 9452
9370: GO 9372
9372: DISABLE
9373: LD_INT 0
9375: PPUSH
9376: PPUSH
// begin enable ;
9377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9378: LD_ADDR_VAR 0 2
9382: PUSH
9383: LD_INT 22
9385: PUSH
9386: LD_OWVAR 2
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 32
9397: PUSH
9398: LD_INT 3
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PPUSH
9409: CALL_OW 69
9413: ST_TO_ADDR
// if not tmp then
9414: LD_VAR 0 2
9418: NOT
9419: IFFALSE 9423
// exit ;
9421: GO 9452
// for i in tmp do
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_VAR 0 2
9432: PUSH
9433: FOR_IN
9434: IFFALSE 9450
// begin SetLives ( i , 0 ) ;
9436: LD_VAR 0 1
9440: PPUSH
9441: LD_INT 0
9443: PPUSH
9444: CALL_OW 234
// end ;
9448: GO 9433
9450: POP
9451: POP
// end ;
9452: PPOPN 2
9454: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9455: LD_EXP 52
9459: PUSH
9460: LD_EXP 55
9464: AND
9465: IFFALSE 9558
9467: GO 9469
9469: DISABLE
9470: LD_INT 0
9472: PPUSH
// begin enable ;
9473: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9474: LD_ADDR_VAR 0 1
9478: PUSH
9479: LD_INT 22
9481: PUSH
9482: LD_OWVAR 2
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 2
9493: PUSH
9494: LD_INT 25
9496: PUSH
9497: LD_INT 5
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 25
9506: PUSH
9507: LD_INT 9
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: LD_INT 25
9516: PUSH
9517: LD_INT 8
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: PUSH
9539: FOR_IN
9540: IFFALSE 9556
// begin SetClass ( i , 1 ) ;
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 1
9549: PPUSH
9550: CALL_OW 336
// end ;
9554: GO 9539
9556: POP
9557: POP
// end ;
9558: PPOPN 1
9560: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9561: LD_EXP 52
9565: PUSH
9566: LD_EXP 56
9570: AND
9571: PUSH
9572: LD_OWVAR 65
9576: PUSH
9577: LD_INT 7
9579: LESS
9580: AND
9581: IFFALSE 9595
9583: GO 9585
9585: DISABLE
// begin enable ;
9586: ENABLE
// game_speed := 7 ;
9587: LD_ADDR_OWVAR 65
9591: PUSH
9592: LD_INT 7
9594: ST_TO_ADDR
// end ;
9595: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9596: LD_EXP 52
9600: PUSH
9601: LD_EXP 59
9605: AND
9606: IFFALSE 9808
9608: GO 9610
9610: DISABLE
9611: LD_INT 0
9613: PPUSH
9614: PPUSH
9615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: LD_INT 81
9623: PUSH
9624: LD_OWVAR 2
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 21
9635: PUSH
9636: LD_INT 1
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: ST_TO_ADDR
// if not tmp then
9652: LD_VAR 0 3
9656: NOT
9657: IFFALSE 9661
// exit ;
9659: GO 9808
// if tmp > 5 then
9661: LD_VAR 0 3
9665: PUSH
9666: LD_INT 5
9668: GREATER
9669: IFFALSE 9681
// k := 5 else
9671: LD_ADDR_VAR 0 2
9675: PUSH
9676: LD_INT 5
9678: ST_TO_ADDR
9679: GO 9691
// k := tmp ;
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: LD_VAR 0 3
9690: ST_TO_ADDR
// for i := 1 to k do
9691: LD_ADDR_VAR 0 1
9695: PUSH
9696: DOUBLE
9697: LD_INT 1
9699: DEC
9700: ST_TO_ADDR
9701: LD_VAR 0 2
9705: PUSH
9706: FOR_TO
9707: IFFALSE 9806
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9709: LD_VAR 0 3
9713: PUSH
9714: LD_VAR 0 1
9718: ARRAY
9719: PPUSH
9720: LD_VAR 0 1
9724: PUSH
9725: LD_INT 4
9727: MOD
9728: PUSH
9729: LD_INT 1
9731: PLUS
9732: PPUSH
9733: CALL_OW 259
9737: PUSH
9738: LD_INT 10
9740: LESS
9741: IFFALSE 9804
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9743: LD_VAR 0 3
9747: PUSH
9748: LD_VAR 0 1
9752: ARRAY
9753: PPUSH
9754: LD_VAR 0 1
9758: PUSH
9759: LD_INT 4
9761: MOD
9762: PUSH
9763: LD_INT 1
9765: PLUS
9766: PPUSH
9767: LD_VAR 0 3
9771: PUSH
9772: LD_VAR 0 1
9776: ARRAY
9777: PPUSH
9778: LD_VAR 0 1
9782: PUSH
9783: LD_INT 4
9785: MOD
9786: PUSH
9787: LD_INT 1
9789: PLUS
9790: PPUSH
9791: CALL_OW 259
9795: PUSH
9796: LD_INT 1
9798: PLUS
9799: PPUSH
9800: CALL_OW 237
9804: GO 9706
9806: POP
9807: POP
// end ;
9808: PPOPN 3
9810: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9811: LD_EXP 52
9815: PUSH
9816: LD_EXP 60
9820: AND
9821: IFFALSE 9841
9823: GO 9825
9825: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9826: LD_INT 4
9828: PPUSH
9829: LD_OWVAR 2
9833: PPUSH
9834: LD_INT 0
9836: PPUSH
9837: CALL_OW 324
9841: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9842: LD_EXP 52
9846: PUSH
9847: LD_EXP 89
9851: AND
9852: IFFALSE 9872
9854: GO 9856
9856: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9857: LD_INT 19
9859: PPUSH
9860: LD_OWVAR 2
9864: PPUSH
9865: LD_INT 0
9867: PPUSH
9868: CALL_OW 324
9872: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9873: LD_EXP 52
9877: PUSH
9878: LD_EXP 61
9882: AND
9883: IFFALSE 9985
9885: GO 9887
9887: DISABLE
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
// begin enable ;
9892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9893: LD_ADDR_VAR 0 2
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_OWVAR 2
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: LD_INT 34
9915: PUSH
9916: LD_INT 11
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 34
9925: PUSH
9926: LD_INT 30
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PPUSH
9942: CALL_OW 69
9946: ST_TO_ADDR
// if not tmp then
9947: LD_VAR 0 2
9951: NOT
9952: IFFALSE 9956
// exit ;
9954: GO 9985
// for i in tmp do
9956: LD_ADDR_VAR 0 1
9960: PUSH
9961: LD_VAR 0 2
9965: PUSH
9966: FOR_IN
9967: IFFALSE 9983
// begin SetLives ( i , 0 ) ;
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_INT 0
9976: PPUSH
9977: CALL_OW 234
// end ;
9981: GO 9966
9983: POP
9984: POP
// end ;
9985: PPOPN 2
9987: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9988: LD_EXP 52
9992: PUSH
9993: LD_EXP 62
9997: AND
9998: IFFALSE 10018
10000: GO 10002
10002: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10003: LD_INT 32
10005: PPUSH
10006: LD_OWVAR 2
10010: PPUSH
10011: LD_INT 0
10013: PPUSH
10014: CALL_OW 324
10018: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10019: LD_EXP 52
10023: PUSH
10024: LD_EXP 63
10028: AND
10029: IFFALSE 10210
10031: GO 10033
10033: DISABLE
10034: LD_INT 0
10036: PPUSH
10037: PPUSH
10038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10039: LD_ADDR_VAR 0 2
10043: PUSH
10044: LD_INT 22
10046: PUSH
10047: LD_OWVAR 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 33
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PPUSH
10070: CALL_OW 69
10074: ST_TO_ADDR
// if not tmp then
10075: LD_VAR 0 2
10079: NOT
10080: IFFALSE 10084
// exit ;
10082: GO 10210
// side := 0 ;
10084: LD_ADDR_VAR 0 3
10088: PUSH
10089: LD_INT 0
10091: ST_TO_ADDR
// for i := 1 to 8 do
10092: LD_ADDR_VAR 0 1
10096: PUSH
10097: DOUBLE
10098: LD_INT 1
10100: DEC
10101: ST_TO_ADDR
10102: LD_INT 8
10104: PUSH
10105: FOR_TO
10106: IFFALSE 10154
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10108: LD_OWVAR 2
10112: PUSH
10113: LD_VAR 0 1
10117: NONEQUAL
10118: PUSH
10119: LD_OWVAR 2
10123: PPUSH
10124: LD_VAR 0 1
10128: PPUSH
10129: CALL_OW 81
10133: PUSH
10134: LD_INT 2
10136: EQUAL
10137: AND
10138: IFFALSE 10152
// begin side := i ;
10140: LD_ADDR_VAR 0 3
10144: PUSH
10145: LD_VAR 0 1
10149: ST_TO_ADDR
// break ;
10150: GO 10154
// end ;
10152: GO 10105
10154: POP
10155: POP
// if not side then
10156: LD_VAR 0 3
10160: NOT
10161: IFFALSE 10165
// exit ;
10163: GO 10210
// for i := 1 to tmp do
10165: LD_ADDR_VAR 0 1
10169: PUSH
10170: DOUBLE
10171: LD_INT 1
10173: DEC
10174: ST_TO_ADDR
10175: LD_VAR 0 2
10179: PUSH
10180: FOR_TO
10181: IFFALSE 10208
// if Prob ( 60 ) then
10183: LD_INT 60
10185: PPUSH
10186: CALL_OW 13
10190: IFFALSE 10206
// SetSide ( i , side ) ;
10192: LD_VAR 0 1
10196: PPUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: CALL_OW 235
10206: GO 10180
10208: POP
10209: POP
// end ;
10210: PPOPN 3
10212: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10213: LD_EXP 52
10217: PUSH
10218: LD_EXP 65
10222: AND
10223: IFFALSE 10342
10225: GO 10227
10227: DISABLE
10228: LD_INT 0
10230: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10231: LD_ADDR_VAR 0 1
10235: PUSH
10236: LD_INT 22
10238: PUSH
10239: LD_OWVAR 2
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 21
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 3
10260: PUSH
10261: LD_INT 23
10263: PUSH
10264: LD_INT 0
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: PPUSH
10280: CALL_OW 69
10284: PUSH
10285: FOR_IN
10286: IFFALSE 10340
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 257
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 3
10306: PUSH
10307: LD_INT 4
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: IN
10316: IFFALSE 10338
// SetClass ( un , rand ( 1 , 4 ) ) ;
10318: LD_VAR 0 1
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_INT 4
10328: PPUSH
10329: CALL_OW 12
10333: PPUSH
10334: CALL_OW 336
10338: GO 10285
10340: POP
10341: POP
// end ;
10342: PPOPN 1
10344: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10345: LD_EXP 52
10349: PUSH
10350: LD_EXP 64
10354: AND
10355: IFFALSE 10434
10357: GO 10359
10359: DISABLE
10360: LD_INT 0
10362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10363: LD_ADDR_VAR 0 1
10367: PUSH
10368: LD_INT 22
10370: PUSH
10371: LD_OWVAR 2
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 21
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: ST_TO_ADDR
// if not tmp then
10399: LD_VAR 0 1
10403: NOT
10404: IFFALSE 10408
// exit ;
10406: GO 10434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10408: LD_VAR 0 1
10412: PUSH
10413: LD_INT 1
10415: PPUSH
10416: LD_VAR 0 1
10420: PPUSH
10421: CALL_OW 12
10425: ARRAY
10426: PPUSH
10427: LD_INT 100
10429: PPUSH
10430: CALL_OW 234
// end ;
10434: PPOPN 1
10436: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10437: LD_EXP 52
10441: PUSH
10442: LD_EXP 66
10446: AND
10447: IFFALSE 10545
10449: GO 10451
10451: DISABLE
10452: LD_INT 0
10454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10455: LD_ADDR_VAR 0 1
10459: PUSH
10460: LD_INT 22
10462: PUSH
10463: LD_OWVAR 2
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 21
10474: PUSH
10475: LD_INT 1
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 69
10490: ST_TO_ADDR
// if not tmp then
10491: LD_VAR 0 1
10495: NOT
10496: IFFALSE 10500
// exit ;
10498: GO 10545
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10500: LD_VAR 0 1
10504: PUSH
10505: LD_INT 1
10507: PPUSH
10508: LD_VAR 0 1
10512: PPUSH
10513: CALL_OW 12
10517: ARRAY
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: LD_INT 4
10524: PPUSH
10525: CALL_OW 12
10529: PPUSH
10530: LD_INT 3000
10532: PPUSH
10533: LD_INT 9000
10535: PPUSH
10536: CALL_OW 12
10540: PPUSH
10541: CALL_OW 492
// end ;
10545: PPOPN 1
10547: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10548: LD_EXP 52
10552: PUSH
10553: LD_EXP 67
10557: AND
10558: IFFALSE 10578
10560: GO 10562
10562: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10563: LD_INT 1
10565: PPUSH
10566: LD_OWVAR 2
10570: PPUSH
10571: LD_INT 0
10573: PPUSH
10574: CALL_OW 324
10578: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10579: LD_EXP 52
10583: PUSH
10584: LD_EXP 68
10588: AND
10589: IFFALSE 10672
10591: GO 10593
10593: DISABLE
10594: LD_INT 0
10596: PPUSH
10597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: LD_INT 22
10605: PUSH
10606: LD_OWVAR 2
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 21
10617: PUSH
10618: LD_INT 3
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PPUSH
10629: CALL_OW 69
10633: ST_TO_ADDR
// if not tmp then
10634: LD_VAR 0 2
10638: NOT
10639: IFFALSE 10643
// exit ;
10641: GO 10672
// for i in tmp do
10643: LD_ADDR_VAR 0 1
10647: PUSH
10648: LD_VAR 0 2
10652: PUSH
10653: FOR_IN
10654: IFFALSE 10670
// SetBLevel ( i , 10 ) ;
10656: LD_VAR 0 1
10660: PPUSH
10661: LD_INT 10
10663: PPUSH
10664: CALL_OW 241
10668: GO 10653
10670: POP
10671: POP
// end ;
10672: PPOPN 2
10674: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10675: LD_EXP 52
10679: PUSH
10680: LD_EXP 69
10684: AND
10685: IFFALSE 10796
10687: GO 10689
10689: DISABLE
10690: LD_INT 0
10692: PPUSH
10693: PPUSH
10694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10695: LD_ADDR_VAR 0 3
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_OWVAR 2
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 25
10714: PUSH
10715: LD_INT 1
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: ST_TO_ADDR
// if not tmp then
10731: LD_VAR 0 3
10735: NOT
10736: IFFALSE 10740
// exit ;
10738: GO 10796
// un := tmp [ rand ( 1 , tmp ) ] ;
10740: LD_ADDR_VAR 0 2
10744: PUSH
10745: LD_VAR 0 3
10749: PUSH
10750: LD_INT 1
10752: PPUSH
10753: LD_VAR 0 3
10757: PPUSH
10758: CALL_OW 12
10762: ARRAY
10763: ST_TO_ADDR
// if Crawls ( un ) then
10764: LD_VAR 0 2
10768: PPUSH
10769: CALL_OW 318
10773: IFFALSE 10784
// ComWalk ( un ) ;
10775: LD_VAR 0 2
10779: PPUSH
10780: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10784: LD_VAR 0 2
10788: PPUSH
10789: LD_INT 5
10791: PPUSH
10792: CALL_OW 336
// end ;
10796: PPOPN 3
10798: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10799: LD_EXP 52
10803: PUSH
10804: LD_EXP 70
10808: AND
10809: PUSH
10810: LD_OWVAR 67
10814: PUSH
10815: LD_INT 3
10817: LESS
10818: AND
10819: IFFALSE 10838
10821: GO 10823
10823: DISABLE
// Difficulty := Difficulty + 1 ;
10824: LD_ADDR_OWVAR 67
10828: PUSH
10829: LD_OWVAR 67
10833: PUSH
10834: LD_INT 1
10836: PLUS
10837: ST_TO_ADDR
10838: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10839: LD_EXP 52
10843: PUSH
10844: LD_EXP 71
10848: AND
10849: IFFALSE 10952
10851: GO 10853
10853: DISABLE
10854: LD_INT 0
10856: PPUSH
// begin for i := 1 to 5 do
10857: LD_ADDR_VAR 0 1
10861: PUSH
10862: DOUBLE
10863: LD_INT 1
10865: DEC
10866: ST_TO_ADDR
10867: LD_INT 5
10869: PUSH
10870: FOR_TO
10871: IFFALSE 10950
// begin uc_nation := nation_nature ;
10873: LD_ADDR_OWVAR 21
10877: PUSH
10878: LD_INT 0
10880: ST_TO_ADDR
// uc_side := 0 ;
10881: LD_ADDR_OWVAR 20
10885: PUSH
10886: LD_INT 0
10888: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10889: LD_ADDR_OWVAR 29
10893: PUSH
10894: LD_INT 12
10896: PUSH
10897: LD_INT 12
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: ST_TO_ADDR
// hc_agressivity := 20 ;
10904: LD_ADDR_OWVAR 35
10908: PUSH
10909: LD_INT 20
10911: ST_TO_ADDR
// hc_class := class_tiger ;
10912: LD_ADDR_OWVAR 28
10916: PUSH
10917: LD_INT 14
10919: ST_TO_ADDR
// hc_gallery :=  ;
10920: LD_ADDR_OWVAR 33
10924: PUSH
10925: LD_STRING 
10927: ST_TO_ADDR
// hc_name :=  ;
10928: LD_ADDR_OWVAR 26
10932: PUSH
10933: LD_STRING 
10935: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10936: CALL_OW 44
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 51
// end ;
10948: GO 10870
10950: POP
10951: POP
// end ;
10952: PPOPN 1
10954: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10955: LD_EXP 52
10959: PUSH
10960: LD_EXP 72
10964: AND
10965: IFFALSE 10974
10967: GO 10969
10969: DISABLE
// StreamSibBomb ;
10970: CALL 10975 0 0
10974: END
// export function StreamSibBomb ; var i , x , y ; begin
10975: LD_INT 0
10977: PPUSH
10978: PPUSH
10979: PPUSH
10980: PPUSH
// result := false ;
10981: LD_ADDR_VAR 0 1
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// for i := 1 to 16 do
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: DOUBLE
10995: LD_INT 1
10997: DEC
10998: ST_TO_ADDR
10999: LD_INT 16
11001: PUSH
11002: FOR_TO
11003: IFFALSE 11202
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11005: LD_ADDR_VAR 0 3
11009: PUSH
11010: LD_INT 10
11012: PUSH
11013: LD_INT 20
11015: PUSH
11016: LD_INT 30
11018: PUSH
11019: LD_INT 40
11021: PUSH
11022: LD_INT 50
11024: PUSH
11025: LD_INT 60
11027: PUSH
11028: LD_INT 70
11030: PUSH
11031: LD_INT 80
11033: PUSH
11034: LD_INT 90
11036: PUSH
11037: LD_INT 100
11039: PUSH
11040: LD_INT 110
11042: PUSH
11043: LD_INT 120
11045: PUSH
11046: LD_INT 130
11048: PUSH
11049: LD_INT 140
11051: PUSH
11052: LD_INT 150
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 1
11074: PPUSH
11075: LD_INT 15
11077: PPUSH
11078: CALL_OW 12
11082: ARRAY
11083: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11084: LD_ADDR_VAR 0 4
11088: PUSH
11089: LD_INT 10
11091: PUSH
11092: LD_INT 20
11094: PUSH
11095: LD_INT 30
11097: PUSH
11098: LD_INT 40
11100: PUSH
11101: LD_INT 50
11103: PUSH
11104: LD_INT 60
11106: PUSH
11107: LD_INT 70
11109: PUSH
11110: LD_INT 80
11112: PUSH
11113: LD_INT 90
11115: PUSH
11116: LD_INT 100
11118: PUSH
11119: LD_INT 110
11121: PUSH
11122: LD_INT 120
11124: PUSH
11125: LD_INT 130
11127: PUSH
11128: LD_INT 140
11130: PUSH
11131: LD_INT 150
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 1
11153: PPUSH
11154: LD_INT 15
11156: PPUSH
11157: CALL_OW 12
11161: ARRAY
11162: ST_TO_ADDR
// if ValidHex ( x , y ) then
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_VAR 0 4
11172: PPUSH
11173: CALL_OW 488
11177: IFFALSE 11200
// begin result := [ x , y ] ;
11179: LD_ADDR_VAR 0 1
11183: PUSH
11184: LD_VAR 0 3
11188: PUSH
11189: LD_VAR 0 4
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: ST_TO_ADDR
// break ;
11198: GO 11202
// end ; end ;
11200: GO 11002
11202: POP
11203: POP
// if result then
11204: LD_VAR 0 1
11208: IFFALSE 11268
// begin ToLua ( playSibBomb() ) ;
11210: LD_STRING playSibBomb()
11212: PPUSH
11213: CALL_OW 559
// wait ( 0 0$14 ) ;
11217: LD_INT 490
11219: PPUSH
11220: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11224: LD_VAR 0 1
11228: PUSH
11229: LD_INT 1
11231: ARRAY
11232: PPUSH
11233: LD_VAR 0 1
11237: PUSH
11238: LD_INT 2
11240: ARRAY
11241: PPUSH
11242: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11246: LD_VAR 0 1
11250: PUSH
11251: LD_INT 1
11253: ARRAY
11254: PPUSH
11255: LD_VAR 0 1
11259: PUSH
11260: LD_INT 2
11262: ARRAY
11263: PPUSH
11264: CALL_OW 429
// end ; end ;
11268: LD_VAR 0 1
11272: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11273: LD_EXP 52
11277: PUSH
11278: LD_EXP 74
11282: AND
11283: IFFALSE 11295
11285: GO 11287
11287: DISABLE
// YouLost (  ) ;
11288: LD_STRING 
11290: PPUSH
11291: CALL_OW 104
11295: END
// every 0 0$1 trigger StreamModeActive and sFog do
11296: LD_EXP 52
11300: PUSH
11301: LD_EXP 73
11305: AND
11306: IFFALSE 11320
11308: GO 11310
11310: DISABLE
// FogOff ( your_side ) ;
11311: LD_OWVAR 2
11315: PPUSH
11316: CALL_OW 344
11320: END
// every 0 0$1 trigger StreamModeActive and sSun do
11321: LD_EXP 52
11325: PUSH
11326: LD_EXP 75
11330: AND
11331: IFFALSE 11359
11333: GO 11335
11335: DISABLE
// begin solar_recharge_percent := 0 ;
11336: LD_ADDR_OWVAR 79
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11344: LD_INT 10500
11346: PPUSH
11347: CALL_OW 67
// solar_recharge_percent := 100 ;
11351: LD_ADDR_OWVAR 79
11355: PUSH
11356: LD_INT 100
11358: ST_TO_ADDR
// end ;
11359: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11360: LD_EXP 52
11364: PUSH
11365: LD_EXP 76
11369: AND
11370: IFFALSE 11609
11372: GO 11374
11374: DISABLE
11375: LD_INT 0
11377: PPUSH
11378: PPUSH
11379: PPUSH
// begin tmp := [ ] ;
11380: LD_ADDR_VAR 0 3
11384: PUSH
11385: EMPTY
11386: ST_TO_ADDR
// for i := 1 to 6 do
11387: LD_ADDR_VAR 0 1
11391: PUSH
11392: DOUBLE
11393: LD_INT 1
11395: DEC
11396: ST_TO_ADDR
11397: LD_INT 6
11399: PUSH
11400: FOR_TO
11401: IFFALSE 11506
// begin uc_nation := nation_nature ;
11403: LD_ADDR_OWVAR 21
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// uc_side := 0 ;
11411: LD_ADDR_OWVAR 20
11415: PUSH
11416: LD_INT 0
11418: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11419: LD_ADDR_OWVAR 29
11423: PUSH
11424: LD_INT 12
11426: PUSH
11427: LD_INT 12
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: ST_TO_ADDR
// hc_agressivity := 20 ;
11434: LD_ADDR_OWVAR 35
11438: PUSH
11439: LD_INT 20
11441: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11442: LD_ADDR_OWVAR 28
11446: PUSH
11447: LD_INT 17
11449: ST_TO_ADDR
// hc_gallery :=  ;
11450: LD_ADDR_OWVAR 33
11454: PUSH
11455: LD_STRING 
11457: ST_TO_ADDR
// hc_name :=  ;
11458: LD_ADDR_OWVAR 26
11462: PUSH
11463: LD_STRING 
11465: ST_TO_ADDR
// un := CreateHuman ;
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: CALL_OW 44
11475: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11476: LD_VAR 0 2
11480: PPUSH
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 51
// tmp := tmp ^ un ;
11488: LD_ADDR_VAR 0 3
11492: PUSH
11493: LD_VAR 0 3
11497: PUSH
11498: LD_VAR 0 2
11502: ADD
11503: ST_TO_ADDR
// end ;
11504: GO 11400
11506: POP
11507: POP
// repeat wait ( 0 0$1 ) ;
11508: LD_INT 35
11510: PPUSH
11511: CALL_OW 67
// for un in tmp do
11515: LD_ADDR_VAR 0 2
11519: PUSH
11520: LD_VAR 0 3
11524: PUSH
11525: FOR_IN
11526: IFFALSE 11600
// begin if IsDead ( un ) then
11528: LD_VAR 0 2
11532: PPUSH
11533: CALL_OW 301
11537: IFFALSE 11557
// begin tmp := tmp diff un ;
11539: LD_ADDR_VAR 0 3
11543: PUSH
11544: LD_VAR 0 3
11548: PUSH
11549: LD_VAR 0 2
11553: DIFF
11554: ST_TO_ADDR
// continue ;
11555: GO 11525
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11557: LD_VAR 0 2
11561: PPUSH
11562: LD_INT 3
11564: PUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 0
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PPUSH
11579: CALL_OW 69
11583: PPUSH
11584: LD_VAR 0 2
11588: PPUSH
11589: CALL_OW 74
11593: PPUSH
11594: CALL_OW 115
// end ;
11598: GO 11525
11600: POP
11601: POP
// until not tmp ;
11602: LD_VAR 0 3
11606: NOT
11607: IFFALSE 11508
// end ;
11609: PPOPN 3
11611: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11612: LD_EXP 52
11616: PUSH
11617: LD_EXP 77
11621: AND
11622: IFFALSE 11676
11624: GO 11626
11626: DISABLE
// begin ToLua ( displayTroll(); ) ;
11627: LD_STRING displayTroll();
11629: PPUSH
11630: CALL_OW 559
// wait ( 3 3$00 ) ;
11634: LD_INT 6300
11636: PPUSH
11637: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11641: LD_STRING hideTroll();
11643: PPUSH
11644: CALL_OW 559
// wait ( 1 1$00 ) ;
11648: LD_INT 2100
11650: PPUSH
11651: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11655: LD_STRING displayTroll();
11657: PPUSH
11658: CALL_OW 559
// wait ( 1 1$00 ) ;
11662: LD_INT 2100
11664: PPUSH
11665: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11669: LD_STRING hideTroll();
11671: PPUSH
11672: CALL_OW 559
// end ;
11676: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11677: LD_EXP 52
11681: PUSH
11682: LD_EXP 78
11686: AND
11687: IFFALSE 11750
11689: GO 11691
11691: DISABLE
11692: LD_INT 0
11694: PPUSH
// begin p := 0 ;
11695: LD_ADDR_VAR 0 1
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// repeat game_speed := 1 ;
11703: LD_ADDR_OWVAR 65
11707: PUSH
11708: LD_INT 1
11710: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11711: LD_INT 35
11713: PPUSH
11714: CALL_OW 67
// p := p + 1 ;
11718: LD_ADDR_VAR 0 1
11722: PUSH
11723: LD_VAR 0 1
11727: PUSH
11728: LD_INT 1
11730: PLUS
11731: ST_TO_ADDR
// until p >= 60 ;
11732: LD_VAR 0 1
11736: PUSH
11737: LD_INT 60
11739: GREATEREQUAL
11740: IFFALSE 11703
// game_speed := 4 ;
11742: LD_ADDR_OWVAR 65
11746: PUSH
11747: LD_INT 4
11749: ST_TO_ADDR
// end ;
11750: PPOPN 1
11752: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11753: LD_EXP 52
11757: PUSH
11758: LD_EXP 79
11762: AND
11763: IFFALSE 11909
11765: GO 11767
11767: DISABLE
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: LD_OWVAR 2
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 30
11804: PUSH
11805: LD_INT 1
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 69
11825: ST_TO_ADDR
// if not depot then
11826: LD_VAR 0 1
11830: NOT
11831: IFFALSE 11835
// exit ;
11833: GO 11909
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11835: LD_ADDR_VAR 0 2
11839: PUSH
11840: LD_VAR 0 1
11844: PUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL_OW 12
11857: ARRAY
11858: PPUSH
11859: CALL_OW 274
11863: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11864: LD_VAR 0 2
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: LD_INT 0
11874: PPUSH
11875: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11879: LD_VAR 0 2
11883: PPUSH
11884: LD_INT 2
11886: PPUSH
11887: LD_INT 0
11889: PPUSH
11890: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11894: LD_VAR 0 2
11898: PPUSH
11899: LD_INT 3
11901: PPUSH
11902: LD_INT 0
11904: PPUSH
11905: CALL_OW 277
// end ;
11909: PPOPN 2
11911: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11912: LD_EXP 52
11916: PUSH
11917: LD_EXP 80
11921: AND
11922: IFFALSE 12019
11924: GO 11926
11926: DISABLE
11927: LD_INT 0
11929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11930: LD_ADDR_VAR 0 1
11934: PUSH
11935: LD_INT 22
11937: PUSH
11938: LD_OWVAR 2
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 21
11949: PUSH
11950: LD_INT 1
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 3
11959: PUSH
11960: LD_INT 23
11962: PUSH
11963: LD_INT 0
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 69
11983: ST_TO_ADDR
// if not tmp then
11984: LD_VAR 0 1
11988: NOT
11989: IFFALSE 11993
// exit ;
11991: GO 12019
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11993: LD_VAR 0 1
11997: PUSH
11998: LD_INT 1
12000: PPUSH
12001: LD_VAR 0 1
12005: PPUSH
12006: CALL_OW 12
12010: ARRAY
12011: PPUSH
12012: LD_INT 200
12014: PPUSH
12015: CALL_OW 234
// end ;
12019: PPOPN 1
12021: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12022: LD_EXP 52
12026: PUSH
12027: LD_EXP 81
12031: AND
12032: IFFALSE 12111
12034: GO 12036
12036: DISABLE
12037: LD_INT 0
12039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12040: LD_ADDR_VAR 0 1
12044: PUSH
12045: LD_INT 22
12047: PUSH
12048: LD_OWVAR 2
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 21
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: ST_TO_ADDR
// if not tmp then
12076: LD_VAR 0 1
12080: NOT
12081: IFFALSE 12085
// exit ;
12083: GO 12111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 1
12092: PPUSH
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 12
12102: ARRAY
12103: PPUSH
12104: LD_INT 60
12106: PPUSH
12107: CALL_OW 234
// end ;
12111: PPOPN 1
12113: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12114: LD_EXP 52
12118: PUSH
12119: LD_EXP 82
12123: AND
12124: IFFALSE 12223
12126: GO 12128
12128: DISABLE
12129: LD_INT 0
12131: PPUSH
12132: PPUSH
// begin enable ;
12133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12134: LD_ADDR_VAR 0 1
12138: PUSH
12139: LD_INT 22
12141: PUSH
12142: LD_OWVAR 2
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 61
12153: PUSH
12154: EMPTY
12155: LIST
12156: PUSH
12157: LD_INT 33
12159: PUSH
12160: LD_INT 2
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 69
12176: ST_TO_ADDR
// if not tmp then
12177: LD_VAR 0 1
12181: NOT
12182: IFFALSE 12186
// exit ;
12184: GO 12223
// for i in tmp do
12186: LD_ADDR_VAR 0 2
12190: PUSH
12191: LD_VAR 0 1
12195: PUSH
12196: FOR_IN
12197: IFFALSE 12221
// if IsControledBy ( i ) then
12199: LD_VAR 0 2
12203: PPUSH
12204: CALL_OW 312
12208: IFFALSE 12219
// ComUnlink ( i ) ;
12210: LD_VAR 0 2
12214: PPUSH
12215: CALL_OW 136
12219: GO 12196
12221: POP
12222: POP
// end ;
12223: PPOPN 2
12225: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12226: LD_EXP 52
12230: PUSH
12231: LD_EXP 83
12235: AND
12236: IFFALSE 12376
12238: GO 12240
12240: DISABLE
12241: LD_INT 0
12243: PPUSH
12244: PPUSH
// begin ToLua ( displayPowell(); ) ;
12245: LD_STRING displayPowell();
12247: PPUSH
12248: CALL_OW 559
// uc_side := 0 ;
12252: LD_ADDR_OWVAR 20
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// uc_nation := 2 ;
12260: LD_ADDR_OWVAR 21
12264: PUSH
12265: LD_INT 2
12267: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12268: LD_ADDR_OWVAR 37
12272: PUSH
12273: LD_INT 14
12275: ST_TO_ADDR
// vc_engine := engine_siberite ;
12276: LD_ADDR_OWVAR 39
12280: PUSH
12281: LD_INT 3
12283: ST_TO_ADDR
// vc_control := control_apeman ;
12284: LD_ADDR_OWVAR 38
12288: PUSH
12289: LD_INT 5
12291: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12292: LD_ADDR_OWVAR 40
12296: PUSH
12297: LD_INT 29
12299: ST_TO_ADDR
// un := CreateVehicle ;
12300: LD_ADDR_VAR 0 2
12304: PUSH
12305: CALL_OW 45
12309: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12310: LD_VAR 0 2
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12322: LD_INT 35
12324: PPUSH
12325: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12329: LD_VAR 0 2
12333: PPUSH
12334: LD_INT 22
12336: PUSH
12337: LD_OWVAR 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PPUSH
12346: CALL_OW 69
12350: PPUSH
12351: LD_VAR 0 2
12355: PPUSH
12356: CALL_OW 74
12360: PPUSH
12361: CALL_OW 115
// until IsDead ( un ) ;
12365: LD_VAR 0 2
12369: PPUSH
12370: CALL_OW 301
12374: IFFALSE 12322
// end ;
12376: PPOPN 2
12378: END
// every 0 0$1 trigger StreamModeActive and sStu do
12379: LD_EXP 52
12383: PUSH
12384: LD_EXP 91
12388: AND
12389: IFFALSE 12405
12391: GO 12393
12393: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12394: LD_STRING displayStucuk();
12396: PPUSH
12397: CALL_OW 559
// ResetFog ;
12401: CALL_OW 335
// end ;
12405: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12406: LD_EXP 52
12410: PUSH
12411: LD_EXP 84
12415: AND
12416: IFFALSE 12557
12418: GO 12420
12420: DISABLE
12421: LD_INT 0
12423: PPUSH
12424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: LD_INT 22
12432: PUSH
12433: LD_OWVAR 2
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 21
12444: PUSH
12445: LD_INT 1
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PPUSH
12456: CALL_OW 69
12460: ST_TO_ADDR
// if not tmp then
12461: LD_VAR 0 2
12465: NOT
12466: IFFALSE 12470
// exit ;
12468: GO 12557
// un := tmp [ rand ( 1 , tmp ) ] ;
12470: LD_ADDR_VAR 0 1
12474: PUSH
12475: LD_VAR 0 2
12479: PUSH
12480: LD_INT 1
12482: PPUSH
12483: LD_VAR 0 2
12487: PPUSH
12488: CALL_OW 12
12492: ARRAY
12493: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12494: LD_VAR 0 1
12498: PPUSH
12499: LD_INT 0
12501: PPUSH
12502: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12506: LD_VAR 0 1
12510: PPUSH
12511: LD_OWVAR 3
12515: PUSH
12516: LD_VAR 0 1
12520: DIFF
12521: PPUSH
12522: LD_VAR 0 1
12526: PPUSH
12527: CALL_OW 74
12531: PPUSH
12532: CALL_OW 115
// wait ( 0 0$20 ) ;
12536: LD_INT 700
12538: PPUSH
12539: CALL_OW 67
// SetSide ( un , your_side ) ;
12543: LD_VAR 0 1
12547: PPUSH
12548: LD_OWVAR 2
12552: PPUSH
12553: CALL_OW 235
// end ;
12557: PPOPN 2
12559: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12560: LD_EXP 52
12564: PUSH
12565: LD_EXP 85
12569: AND
12570: IFFALSE 12676
12572: GO 12574
12574: DISABLE
12575: LD_INT 0
12577: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12578: LD_ADDR_VAR 0 1
12582: PUSH
12583: LD_INT 22
12585: PUSH
12586: LD_OWVAR 2
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 2
12597: PUSH
12598: LD_INT 30
12600: PUSH
12601: LD_INT 0
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 69
12631: ST_TO_ADDR
// if not depot then
12632: LD_VAR 0 1
12636: NOT
12637: IFFALSE 12641
// exit ;
12639: GO 12676
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12641: LD_VAR 0 1
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PPUSH
12650: CALL_OW 250
12654: PPUSH
12655: LD_VAR 0 1
12659: PUSH
12660: LD_INT 1
12662: ARRAY
12663: PPUSH
12664: CALL_OW 251
12668: PPUSH
12669: LD_INT 70
12671: PPUSH
12672: CALL_OW 495
// end ;
12676: PPOPN 1
12678: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12679: LD_EXP 52
12683: PUSH
12684: LD_EXP 86
12688: AND
12689: IFFALSE 12900
12691: GO 12693
12693: DISABLE
12694: LD_INT 0
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
12700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12701: LD_ADDR_VAR 0 5
12705: PUSH
12706: LD_INT 22
12708: PUSH
12709: LD_OWVAR 2
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 21
12720: PUSH
12721: LD_INT 1
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: ST_TO_ADDR
// if not tmp then
12737: LD_VAR 0 5
12741: NOT
12742: IFFALSE 12746
// exit ;
12744: GO 12900
// for i in tmp do
12746: LD_ADDR_VAR 0 1
12750: PUSH
12751: LD_VAR 0 5
12755: PUSH
12756: FOR_IN
12757: IFFALSE 12898
// begin d := rand ( 0 , 5 ) ;
12759: LD_ADDR_VAR 0 4
12763: PUSH
12764: LD_INT 0
12766: PPUSH
12767: LD_INT 5
12769: PPUSH
12770: CALL_OW 12
12774: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12775: LD_ADDR_VAR 0 2
12779: PUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 250
12789: PPUSH
12790: LD_VAR 0 4
12794: PPUSH
12795: LD_INT 3
12797: PPUSH
12798: LD_INT 12
12800: PPUSH
12801: CALL_OW 12
12805: PPUSH
12806: CALL_OW 272
12810: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12811: LD_ADDR_VAR 0 3
12815: PUSH
12816: LD_VAR 0 1
12820: PPUSH
12821: CALL_OW 251
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: LD_INT 3
12833: PPUSH
12834: LD_INT 12
12836: PPUSH
12837: CALL_OW 12
12841: PPUSH
12842: CALL_OW 273
12846: ST_TO_ADDR
// if ValidHex ( x , y ) then
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: CALL_OW 488
12861: IFFALSE 12896
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12863: LD_VAR 0 1
12867: PPUSH
12868: LD_VAR 0 2
12872: PPUSH
12873: LD_VAR 0 3
12877: PPUSH
12878: LD_INT 3
12880: PPUSH
12881: LD_INT 6
12883: PPUSH
12884: CALL_OW 12
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 483
// end ;
12896: GO 12756
12898: POP
12899: POP
// end ;
12900: PPOPN 5
12902: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12903: LD_EXP 52
12907: PUSH
12908: LD_EXP 87
12912: AND
12913: IFFALSE 13007
12915: GO 12917
12917: DISABLE
12918: LD_INT 0
12920: PPUSH
12921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12922: LD_ADDR_VAR 0 2
12926: PUSH
12927: LD_INT 22
12929: PUSH
12930: LD_OWVAR 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 32
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 2
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: ST_TO_ADDR
// if not tmp then
12969: LD_VAR 0 2
12973: NOT
12974: IFFALSE 12978
// exit ;
12976: GO 13007
// for i in tmp do
12978: LD_ADDR_VAR 0 1
12982: PUSH
12983: LD_VAR 0 2
12987: PUSH
12988: FOR_IN
12989: IFFALSE 13005
// SetFuel ( i , 0 ) ;
12991: LD_VAR 0 1
12995: PPUSH
12996: LD_INT 0
12998: PPUSH
12999: CALL_OW 240
13003: GO 12988
13005: POP
13006: POP
// end ;
13007: PPOPN 2
13009: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13010: LD_EXP 52
13014: PUSH
13015: LD_EXP 88
13019: AND
13020: IFFALSE 13086
13022: GO 13024
13024: DISABLE
13025: LD_INT 0
13027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13028: LD_ADDR_VAR 0 1
13032: PUSH
13033: LD_INT 22
13035: PUSH
13036: LD_OWVAR 2
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 30
13047: PUSH
13048: LD_INT 29
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PPUSH
13059: CALL_OW 69
13063: ST_TO_ADDR
// if not tmp then
13064: LD_VAR 0 1
13068: NOT
13069: IFFALSE 13073
// exit ;
13071: GO 13086
// DestroyUnit ( tmp [ 1 ] ) ;
13073: LD_VAR 0 1
13077: PUSH
13078: LD_INT 1
13080: ARRAY
13081: PPUSH
13082: CALL_OW 65
// end ;
13086: PPOPN 1
13088: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13089: LD_EXP 52
13093: PUSH
13094: LD_EXP 90
13098: AND
13099: IFFALSE 13228
13101: GO 13103
13103: DISABLE
13104: LD_INT 0
13106: PPUSH
// begin uc_side := 0 ;
13107: LD_ADDR_OWVAR 20
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// uc_nation := nation_arabian ;
13115: LD_ADDR_OWVAR 21
13119: PUSH
13120: LD_INT 2
13122: ST_TO_ADDR
// hc_gallery :=  ;
13123: LD_ADDR_OWVAR 33
13127: PUSH
13128: LD_STRING 
13130: ST_TO_ADDR
// hc_name :=  ;
13131: LD_ADDR_OWVAR 26
13135: PUSH
13136: LD_STRING 
13138: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13139: LD_INT 1
13141: PPUSH
13142: LD_INT 11
13144: PPUSH
13145: LD_INT 10
13147: PPUSH
13148: CALL_OW 380
// un := CreateHuman ;
13152: LD_ADDR_VAR 0 1
13156: PUSH
13157: CALL_OW 44
13161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13162: LD_VAR 0 1
13166: PPUSH
13167: LD_INT 1
13169: PPUSH
13170: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13174: LD_INT 35
13176: PPUSH
13177: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_INT 22
13188: PUSH
13189: LD_OWVAR 2
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PPUSH
13198: CALL_OW 69
13202: PPUSH
13203: LD_VAR 0 1
13207: PPUSH
13208: CALL_OW 74
13212: PPUSH
13213: CALL_OW 115
// until IsDead ( un ) ;
13217: LD_VAR 0 1
13221: PPUSH
13222: CALL_OW 301
13226: IFFALSE 13174
// end ;
13228: PPOPN 1
13230: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13231: LD_EXP 52
13235: PUSH
13236: LD_EXP 92
13240: AND
13241: IFFALSE 13253
13243: GO 13245
13245: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13246: LD_STRING earthquake(getX(game), 0, 32)
13248: PPUSH
13249: CALL_OW 559
13253: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13254: LD_EXP 52
13258: PUSH
13259: LD_EXP 93
13263: AND
13264: IFFALSE 13355
13266: GO 13268
13268: DISABLE
13269: LD_INT 0
13271: PPUSH
// begin enable ;
13272: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13273: LD_ADDR_VAR 0 1
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_OWVAR 2
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 21
13292: PUSH
13293: LD_INT 2
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 33
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: PPUSH
13315: CALL_OW 69
13319: ST_TO_ADDR
// if not tmp then
13320: LD_VAR 0 1
13324: NOT
13325: IFFALSE 13329
// exit ;
13327: GO 13355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13329: LD_VAR 0 1
13333: PUSH
13334: LD_INT 1
13336: PPUSH
13337: LD_VAR 0 1
13341: PPUSH
13342: CALL_OW 12
13346: ARRAY
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: CALL_OW 234
// end ;
13355: PPOPN 1
13357: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13358: LD_EXP 52
13362: PUSH
13363: LD_EXP 94
13367: AND
13368: IFFALSE 13509
13370: GO 13372
13372: DISABLE
13373: LD_INT 0
13375: PPUSH
13376: PPUSH
13377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13378: LD_ADDR_VAR 0 3
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_OWVAR 2
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: ST_TO_ADDR
// if not tmp then
13414: LD_VAR 0 3
13418: NOT
13419: IFFALSE 13423
// exit ;
13421: GO 13509
// un := tmp [ rand ( 1 , tmp ) ] ;
13423: LD_ADDR_VAR 0 2
13427: PUSH
13428: LD_VAR 0 3
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_VAR 0 3
13440: PPUSH
13441: CALL_OW 12
13445: ARRAY
13446: ST_TO_ADDR
// if Crawls ( un ) then
13447: LD_VAR 0 2
13451: PPUSH
13452: CALL_OW 318
13456: IFFALSE 13467
// ComWalk ( un ) ;
13458: LD_VAR 0 2
13462: PPUSH
13463: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13467: LD_VAR 0 2
13471: PPUSH
13472: LD_INT 9
13474: PPUSH
13475: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13479: LD_INT 28
13481: PPUSH
13482: LD_OWVAR 2
13486: PPUSH
13487: LD_INT 2
13489: PPUSH
13490: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13494: LD_INT 29
13496: PPUSH
13497: LD_OWVAR 2
13501: PPUSH
13502: LD_INT 2
13504: PPUSH
13505: CALL_OW 322
// end ;
13509: PPOPN 3
13511: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13512: LD_EXP 52
13516: PUSH
13517: LD_EXP 95
13521: AND
13522: IFFALSE 13633
13524: GO 13526
13526: DISABLE
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
13531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13532: LD_ADDR_VAR 0 3
13536: PUSH
13537: LD_INT 22
13539: PUSH
13540: LD_OWVAR 2
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 25
13551: PUSH
13552: LD_INT 1
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PPUSH
13563: CALL_OW 69
13567: ST_TO_ADDR
// if not tmp then
13568: LD_VAR 0 3
13572: NOT
13573: IFFALSE 13577
// exit ;
13575: GO 13633
// un := tmp [ rand ( 1 , tmp ) ] ;
13577: LD_ADDR_VAR 0 2
13581: PUSH
13582: LD_VAR 0 3
13586: PUSH
13587: LD_INT 1
13589: PPUSH
13590: LD_VAR 0 3
13594: PPUSH
13595: CALL_OW 12
13599: ARRAY
13600: ST_TO_ADDR
// if Crawls ( un ) then
13601: LD_VAR 0 2
13605: PPUSH
13606: CALL_OW 318
13610: IFFALSE 13621
// ComWalk ( un ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13621: LD_VAR 0 2
13625: PPUSH
13626: LD_INT 8
13628: PPUSH
13629: CALL_OW 336
// end ;
13633: PPOPN 3
13635: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13636: LD_EXP 52
13640: PUSH
13641: LD_EXP 96
13645: AND
13646: IFFALSE 13790
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
13654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13655: LD_ADDR_VAR 0 2
13659: PUSH
13660: LD_INT 22
13662: PUSH
13663: LD_OWVAR 2
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_INT 21
13674: PUSH
13675: LD_INT 2
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 2
13684: PUSH
13685: LD_INT 34
13687: PUSH
13688: LD_INT 12
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 34
13697: PUSH
13698: LD_INT 51
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: LD_INT 34
13707: PUSH
13708: LD_INT 32
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: ST_TO_ADDR
// if not tmp then
13731: LD_VAR 0 2
13735: NOT
13736: IFFALSE 13740
// exit ;
13738: GO 13790
// for i in tmp do
13740: LD_ADDR_VAR 0 1
13744: PUSH
13745: LD_VAR 0 2
13749: PUSH
13750: FOR_IN
13751: IFFALSE 13788
// if GetCargo ( i , mat_artifact ) = 0 then
13753: LD_VAR 0 1
13757: PPUSH
13758: LD_INT 4
13760: PPUSH
13761: CALL_OW 289
13765: PUSH
13766: LD_INT 0
13768: EQUAL
13769: IFFALSE 13786
// SetCargo ( i , mat_siberit , 100 ) ;
13771: LD_VAR 0 1
13775: PPUSH
13776: LD_INT 3
13778: PPUSH
13779: LD_INT 100
13781: PPUSH
13782: CALL_OW 290
13786: GO 13750
13788: POP
13789: POP
// end ;
13790: PPOPN 2
13792: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13793: LD_EXP 52
13797: PUSH
13798: LD_EXP 97
13802: AND
13803: IFFALSE 13956
13805: GO 13807
13807: DISABLE
13808: LD_INT 0
13810: PPUSH
13811: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13812: LD_ADDR_VAR 0 2
13816: PUSH
13817: LD_INT 22
13819: PUSH
13820: LD_OWVAR 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PPUSH
13829: CALL_OW 69
13833: ST_TO_ADDR
// if not tmp then
13834: LD_VAR 0 2
13838: NOT
13839: IFFALSE 13843
// exit ;
13841: GO 13956
// for i := 1 to 2 do
13843: LD_ADDR_VAR 0 1
13847: PUSH
13848: DOUBLE
13849: LD_INT 1
13851: DEC
13852: ST_TO_ADDR
13853: LD_INT 2
13855: PUSH
13856: FOR_TO
13857: IFFALSE 13954
// begin uc_side := your_side ;
13859: LD_ADDR_OWVAR 20
13863: PUSH
13864: LD_OWVAR 2
13868: ST_TO_ADDR
// uc_nation := nation_american ;
13869: LD_ADDR_OWVAR 21
13873: PUSH
13874: LD_INT 1
13876: ST_TO_ADDR
// vc_chassis := us_morphling ;
13877: LD_ADDR_OWVAR 37
13881: PUSH
13882: LD_INT 5
13884: ST_TO_ADDR
// vc_engine := engine_siberite ;
13885: LD_ADDR_OWVAR 39
13889: PUSH
13890: LD_INT 3
13892: ST_TO_ADDR
// vc_control := control_computer ;
13893: LD_ADDR_OWVAR 38
13897: PUSH
13898: LD_INT 3
13900: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13901: LD_ADDR_OWVAR 40
13905: PUSH
13906: LD_INT 10
13908: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
13909: CALL_OW 45
13913: PPUSH
13914: LD_VAR 0 2
13918: PUSH
13919: LD_INT 1
13921: ARRAY
13922: PPUSH
13923: CALL_OW 250
13927: PPUSH
13928: LD_VAR 0 2
13932: PUSH
13933: LD_INT 1
13935: ARRAY
13936: PPUSH
13937: CALL_OW 251
13941: PPUSH
13942: LD_INT 12
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 50
// end ;
13952: GO 13856
13954: POP
13955: POP
// end ;
13956: PPOPN 2
13958: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13959: LD_EXP 52
13963: PUSH
13964: LD_EXP 98
13968: AND
13969: IFFALSE 14191
13971: GO 13973
13973: DISABLE
13974: LD_INT 0
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13982: LD_ADDR_VAR 0 6
13986: PUSH
13987: LD_INT 22
13989: PUSH
13990: LD_OWVAR 2
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 1
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 3
14011: PUSH
14012: LD_INT 23
14014: PUSH
14015: LD_INT 0
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 69
14035: ST_TO_ADDR
// if not tmp then
14036: LD_VAR 0 6
14040: NOT
14041: IFFALSE 14045
// exit ;
14043: GO 14191
// s1 := rand ( 1 , 4 ) ;
14045: LD_ADDR_VAR 0 2
14049: PUSH
14050: LD_INT 1
14052: PPUSH
14053: LD_INT 4
14055: PPUSH
14056: CALL_OW 12
14060: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14061: LD_ADDR_VAR 0 4
14065: PUSH
14066: LD_VAR 0 6
14070: PUSH
14071: LD_INT 1
14073: ARRAY
14074: PPUSH
14075: LD_VAR 0 2
14079: PPUSH
14080: CALL_OW 259
14084: ST_TO_ADDR
// if s1 = 1 then
14085: LD_VAR 0 2
14089: PUSH
14090: LD_INT 1
14092: EQUAL
14093: IFFALSE 14113
// s2 := rand ( 2 , 4 ) else
14095: LD_ADDR_VAR 0 3
14099: PUSH
14100: LD_INT 2
14102: PPUSH
14103: LD_INT 4
14105: PPUSH
14106: CALL_OW 12
14110: ST_TO_ADDR
14111: GO 14121
// s2 := 1 ;
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14121: LD_ADDR_VAR 0 5
14125: PUSH
14126: LD_VAR 0 6
14130: PUSH
14131: LD_INT 1
14133: ARRAY
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: CALL_OW 259
14144: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14145: LD_VAR 0 6
14149: PUSH
14150: LD_INT 1
14152: ARRAY
14153: PPUSH
14154: LD_VAR 0 2
14158: PPUSH
14159: LD_VAR 0 5
14163: PPUSH
14164: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14168: LD_VAR 0 6
14172: PUSH
14173: LD_INT 1
14175: ARRAY
14176: PPUSH
14177: LD_VAR 0 3
14181: PPUSH
14182: LD_VAR 0 4
14186: PPUSH
14187: CALL_OW 237
// end ;
14191: PPOPN 6
14193: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14194: LD_EXP 52
14198: PUSH
14199: LD_EXP 99
14203: AND
14204: IFFALSE 14283
14206: GO 14208
14208: DISABLE
14209: LD_INT 0
14211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14212: LD_ADDR_VAR 0 1
14216: PUSH
14217: LD_INT 22
14219: PUSH
14220: LD_OWVAR 2
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: LD_INT 3
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PPUSH
14243: CALL_OW 69
14247: ST_TO_ADDR
// if not tmp then
14248: LD_VAR 0 1
14252: NOT
14253: IFFALSE 14257
// exit ;
14255: GO 14283
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14257: LD_VAR 0 1
14261: PUSH
14262: LD_INT 1
14264: PPUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 12
14274: ARRAY
14275: PPUSH
14276: LD_INT 1
14278: PPUSH
14279: CALL_OW 234
// end ;
14283: PPOPN 1
14285: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14286: LD_EXP 52
14290: PUSH
14291: LD_EXP 100
14295: AND
14296: IFFALSE 14408
14298: GO 14300
14300: DISABLE
14301: LD_INT 0
14303: PPUSH
14304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14305: LD_ADDR_VAR 0 2
14309: PUSH
14310: LD_INT 22
14312: PUSH
14313: LD_OWVAR 2
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 2
14324: PUSH
14325: LD_INT 30
14327: PUSH
14328: LD_INT 27
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 30
14337: PUSH
14338: LD_INT 26
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 30
14347: PUSH
14348: LD_INT 28
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: ST_TO_ADDR
// if not tmp then
14370: LD_VAR 0 2
14374: NOT
14375: IFFALSE 14379
// exit ;
14377: GO 14408
// for i in tmp do
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: LD_VAR 0 2
14388: PUSH
14389: FOR_IN
14390: IFFALSE 14406
// SetLives ( i , 1 ) ;
14392: LD_VAR 0 1
14396: PPUSH
14397: LD_INT 1
14399: PPUSH
14400: CALL_OW 234
14404: GO 14389
14406: POP
14407: POP
// end ;
14408: PPOPN 2
14410: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14411: LD_EXP 52
14415: PUSH
14416: LD_EXP 101
14420: AND
14421: IFFALSE 14695
14423: GO 14425
14425: DISABLE
14426: LD_INT 0
14428: PPUSH
14429: PPUSH
14430: PPUSH
// begin i := rand ( 1 , 7 ) ;
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_INT 1
14438: PPUSH
14439: LD_INT 7
14441: PPUSH
14442: CALL_OW 12
14446: ST_TO_ADDR
// case i of 1 :
14447: LD_VAR 0 1
14451: PUSH
14452: LD_INT 1
14454: DOUBLE
14455: EQUAL
14456: IFTRUE 14460
14458: GO 14470
14460: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14461: LD_STRING earthquake(getX(game), 0, 32)
14463: PPUSH
14464: CALL_OW 559
14468: GO 14695
14470: LD_INT 2
14472: DOUBLE
14473: EQUAL
14474: IFTRUE 14478
14476: GO 14492
14478: POP
// begin ToLua ( displayStucuk(); ) ;
14479: LD_STRING displayStucuk();
14481: PPUSH
14482: CALL_OW 559
// ResetFog ;
14486: CALL_OW 335
// end ; 3 :
14490: GO 14695
14492: LD_INT 3
14494: DOUBLE
14495: EQUAL
14496: IFTRUE 14500
14498: GO 14604
14500: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14501: LD_ADDR_VAR 0 2
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_OWVAR 2
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 25
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: ST_TO_ADDR
// if not tmp then
14537: LD_VAR 0 2
14541: NOT
14542: IFFALSE 14546
// exit ;
14544: GO 14695
// un := tmp [ rand ( 1 , tmp ) ] ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_VAR 0 2
14555: PUSH
14556: LD_INT 1
14558: PPUSH
14559: LD_VAR 0 2
14563: PPUSH
14564: CALL_OW 12
14568: ARRAY
14569: ST_TO_ADDR
// if Crawls ( un ) then
14570: LD_VAR 0 3
14574: PPUSH
14575: CALL_OW 318
14579: IFFALSE 14590
// ComWalk ( un ) ;
14581: LD_VAR 0 3
14585: PPUSH
14586: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14590: LD_VAR 0 3
14594: PPUSH
14595: LD_INT 8
14597: PPUSH
14598: CALL_OW 336
// end ; 4 :
14602: GO 14695
14604: LD_INT 4
14606: DOUBLE
14607: EQUAL
14608: IFTRUE 14612
14610: GO 14673
14612: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14613: LD_ADDR_VAR 0 2
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_OWVAR 2
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 29
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: ST_TO_ADDR
// if not tmp then
14649: LD_VAR 0 2
14653: NOT
14654: IFFALSE 14658
// exit ;
14656: GO 14695
// DestroyUnit ( tmp [ 1 ] ) ;
14658: LD_VAR 0 2
14662: PUSH
14663: LD_INT 1
14665: ARRAY
14666: PPUSH
14667: CALL_OW 65
// end ; 5 .. 7 :
14671: GO 14695
14673: LD_INT 5
14675: DOUBLE
14676: GREATEREQUAL
14677: IFFALSE 14685
14679: LD_INT 7
14681: DOUBLE
14682: LESSEQUAL
14683: IFTRUE 14687
14685: GO 14694
14687: POP
// StreamSibBomb ; end ;
14688: CALL 10975 0 0
14692: GO 14695
14694: POP
// end ;
14695: PPOPN 3
14697: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14698: LD_EXP 52
14702: PUSH
14703: LD_EXP 102
14707: AND
14708: IFFALSE 14864
14710: GO 14712
14712: DISABLE
14713: LD_INT 0
14715: PPUSH
14716: PPUSH
14717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14718: LD_ADDR_VAR 0 2
14722: PUSH
14723: LD_INT 81
14725: PUSH
14726: LD_OWVAR 2
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: LD_INT 21
14740: PUSH
14741: LD_INT 1
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 2
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: CALL_OW 69
14771: ST_TO_ADDR
// if not tmp then
14772: LD_VAR 0 2
14776: NOT
14777: IFFALSE 14781
// exit ;
14779: GO 14864
// p := 0 ;
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_INT 0
14788: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14789: LD_INT 35
14791: PPUSH
14792: CALL_OW 67
// p := p + 1 ;
14796: LD_ADDR_VAR 0 3
14800: PUSH
14801: LD_VAR 0 3
14805: PUSH
14806: LD_INT 1
14808: PLUS
14809: ST_TO_ADDR
// for i in tmp do
14810: LD_ADDR_VAR 0 1
14814: PUSH
14815: LD_VAR 0 2
14819: PUSH
14820: FOR_IN
14821: IFFALSE 14852
// if GetLives ( i ) < 1000 then
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 256
14832: PUSH
14833: LD_INT 1000
14835: LESS
14836: IFFALSE 14850
// SetLives ( i , 1000 ) ;
14838: LD_VAR 0 1
14842: PPUSH
14843: LD_INT 1000
14845: PPUSH
14846: CALL_OW 234
14850: GO 14820
14852: POP
14853: POP
// until p > 20 ;
14854: LD_VAR 0 3
14858: PUSH
14859: LD_INT 20
14861: GREATER
14862: IFFALSE 14789
// end ;
14864: PPOPN 3
14866: END
// every 0 0$1 trigger StreamModeActive and sTime do
14867: LD_EXP 52
14871: PUSH
14872: LD_EXP 103
14876: AND
14877: IFFALSE 14912
14879: GO 14881
14881: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14882: LD_INT 28
14884: PPUSH
14885: LD_OWVAR 2
14889: PPUSH
14890: LD_INT 2
14892: PPUSH
14893: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14897: LD_INT 30
14899: PPUSH
14900: LD_OWVAR 2
14904: PPUSH
14905: LD_INT 2
14907: PPUSH
14908: CALL_OW 322
// end ;
14912: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14913: LD_EXP 52
14917: PUSH
14918: LD_EXP 104
14922: AND
14923: IFFALSE 15044
14925: GO 14927
14927: DISABLE
14928: LD_INT 0
14930: PPUSH
14931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14932: LD_ADDR_VAR 0 2
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_OWVAR 2
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 21
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 3
14961: PUSH
14962: LD_INT 23
14964: PUSH
14965: LD_INT 0
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 69
14985: ST_TO_ADDR
// if not tmp then
14986: LD_VAR 0 2
14990: NOT
14991: IFFALSE 14995
// exit ;
14993: GO 15044
// for i in tmp do
14995: LD_ADDR_VAR 0 1
14999: PUSH
15000: LD_VAR 0 2
15004: PUSH
15005: FOR_IN
15006: IFFALSE 15042
// begin if Crawls ( i ) then
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 318
15017: IFFALSE 15028
// ComWalk ( i ) ;
15019: LD_VAR 0 1
15023: PPUSH
15024: CALL_OW 138
// SetClass ( i , 2 ) ;
15028: LD_VAR 0 1
15032: PPUSH
15033: LD_INT 2
15035: PPUSH
15036: CALL_OW 336
// end ;
15040: GO 15005
15042: POP
15043: POP
// end ;
15044: PPOPN 2
15046: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15047: LD_EXP 52
15051: PUSH
15052: LD_EXP 105
15056: AND
15057: IFFALSE 15338
15059: GO 15061
15061: DISABLE
15062: LD_INT 0
15064: PPUSH
15065: PPUSH
15066: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15067: LD_OWVAR 2
15071: PPUSH
15072: LD_INT 9
15074: PPUSH
15075: LD_INT 1
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15085: LD_INT 9
15087: PPUSH
15088: LD_OWVAR 2
15092: PPUSH
15093: CALL_OW 343
// uc_side := 9 ;
15097: LD_ADDR_OWVAR 20
15101: PUSH
15102: LD_INT 9
15104: ST_TO_ADDR
// uc_nation := 2 ;
15105: LD_ADDR_OWVAR 21
15109: PUSH
15110: LD_INT 2
15112: ST_TO_ADDR
// hc_name := Dark Warrior ;
15113: LD_ADDR_OWVAR 26
15117: PUSH
15118: LD_STRING Dark Warrior
15120: ST_TO_ADDR
// hc_gallery :=  ;
15121: LD_ADDR_OWVAR 33
15125: PUSH
15126: LD_STRING 
15128: ST_TO_ADDR
// hc_noskilllimit := true ;
15129: LD_ADDR_OWVAR 76
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15137: LD_ADDR_OWVAR 31
15141: PUSH
15142: LD_INT 30
15144: PUSH
15145: LD_INT 30
15147: PUSH
15148: LD_INT 30
15150: PUSH
15151: LD_INT 30
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: ST_TO_ADDR
// un := CreateHuman ;
15160: LD_ADDR_VAR 0 3
15164: PUSH
15165: CALL_OW 44
15169: ST_TO_ADDR
// hc_noskilllimit := false ;
15170: LD_ADDR_OWVAR 76
15174: PUSH
15175: LD_INT 0
15177: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15178: LD_VAR 0 3
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 51
// p := 0 ;
15190: LD_ADDR_VAR 0 2
15194: PUSH
15195: LD_INT 0
15197: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15198: LD_INT 35
15200: PPUSH
15201: CALL_OW 67
// p := p + 1 ;
15205: LD_ADDR_VAR 0 2
15209: PUSH
15210: LD_VAR 0 2
15214: PUSH
15215: LD_INT 1
15217: PLUS
15218: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15219: LD_VAR 0 3
15223: PPUSH
15224: CALL_OW 256
15228: PUSH
15229: LD_INT 1000
15231: LESS
15232: IFFALSE 15246
// SetLives ( un , 1000 ) ;
15234: LD_VAR 0 3
15238: PPUSH
15239: LD_INT 1000
15241: PPUSH
15242: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_INT 81
15253: PUSH
15254: LD_OWVAR 2
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 91
15265: PUSH
15266: LD_VAR 0 3
15270: PUSH
15271: LD_INT 30
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PPUSH
15283: CALL_OW 69
15287: PPUSH
15288: LD_VAR 0 3
15292: PPUSH
15293: CALL_OW 74
15297: PPUSH
15298: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15302: LD_VAR 0 2
15306: PUSH
15307: LD_INT 60
15309: GREATER
15310: PUSH
15311: LD_VAR 0 3
15315: PPUSH
15316: CALL_OW 301
15320: OR
15321: IFFALSE 15198
// if un then
15323: LD_VAR 0 3
15327: IFFALSE 15338
// RemoveUnit ( un ) ;
15329: LD_VAR 0 3
15333: PPUSH
15334: CALL_OW 64
// end ; end_of_file
15338: PPOPN 3
15340: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
15345: PPUSH
15346: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15347: LD_VAR 0 1
15351: PPUSH
15352: CALL_OW 264
15356: PUSH
15357: LD_EXP 43
15361: EQUAL
15362: IFFALSE 15434
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15364: LD_INT 68
15366: PPUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 255
15376: PPUSH
15377: CALL_OW 321
15381: PUSH
15382: LD_INT 2
15384: EQUAL
15385: IFFALSE 15397
// eff := 70 else
15387: LD_ADDR_VAR 0 4
15391: PUSH
15392: LD_INT 70
15394: ST_TO_ADDR
15395: GO 15405
// eff := 30 ;
15397: LD_ADDR_VAR 0 4
15401: PUSH
15402: LD_INT 30
15404: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15405: LD_VAR 0 1
15409: PPUSH
15410: CALL_OW 250
15414: PPUSH
15415: LD_VAR 0 1
15419: PPUSH
15420: CALL_OW 251
15424: PPUSH
15425: LD_VAR 0 4
15429: PPUSH
15430: CALL_OW 495
// end ; end ;
15434: LD_VAR 0 2
15438: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15439: LD_INT 0
15441: PPUSH
// end ;
15442: LD_VAR 0 4
15446: RET
// export function SOS_Command ( cmd ) ; begin
15447: LD_INT 0
15449: PPUSH
// end ;
15450: LD_VAR 0 2
15454: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15455: LD_VAR 0 1
15459: PUSH
15460: LD_INT 255
15462: EQUAL
15463: PUSH
15464: LD_VAR 0 2
15468: PPUSH
15469: CALL_OW 264
15473: PUSH
15474: LD_INT 14
15476: PUSH
15477: LD_INT 53
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: IN
15484: AND
15485: PUSH
15486: LD_VAR 0 4
15490: PPUSH
15491: LD_VAR 0 5
15495: PPUSH
15496: CALL_OW 488
15500: AND
15501: IFFALSE 15525
// CutTreeXYR ( unit , x , y , 12 ) ;
15503: LD_VAR 0 2
15507: PPUSH
15508: LD_VAR 0 4
15512: PPUSH
15513: LD_VAR 0 5
15517: PPUSH
15518: LD_INT 12
15520: PPUSH
15521: CALL 15528 0 4
// end ;
15525: PPOPN 5
15527: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15528: LD_INT 0
15530: PPUSH
15531: PPUSH
15532: PPUSH
15533: PPUSH
15534: PPUSH
15535: PPUSH
15536: PPUSH
15537: PPUSH
15538: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15539: LD_VAR 0 1
15543: NOT
15544: PUSH
15545: LD_VAR 0 2
15549: PPUSH
15550: LD_VAR 0 3
15554: PPUSH
15555: CALL_OW 488
15559: NOT
15560: OR
15561: PUSH
15562: LD_VAR 0 4
15566: NOT
15567: OR
15568: IFFALSE 15572
// exit ;
15570: GO 15912
// list := [ ] ;
15572: LD_ADDR_VAR 0 13
15576: PUSH
15577: EMPTY
15578: ST_TO_ADDR
// if x - r < 0 then
15579: LD_VAR 0 2
15583: PUSH
15584: LD_VAR 0 4
15588: MINUS
15589: PUSH
15590: LD_INT 0
15592: LESS
15593: IFFALSE 15605
// min_x := 0 else
15595: LD_ADDR_VAR 0 7
15599: PUSH
15600: LD_INT 0
15602: ST_TO_ADDR
15603: GO 15621
// min_x := x - r ;
15605: LD_ADDR_VAR 0 7
15609: PUSH
15610: LD_VAR 0 2
15614: PUSH
15615: LD_VAR 0 4
15619: MINUS
15620: ST_TO_ADDR
// if y - r < 0 then
15621: LD_VAR 0 3
15625: PUSH
15626: LD_VAR 0 4
15630: MINUS
15631: PUSH
15632: LD_INT 0
15634: LESS
15635: IFFALSE 15647
// min_y := 0 else
15637: LD_ADDR_VAR 0 8
15641: PUSH
15642: LD_INT 0
15644: ST_TO_ADDR
15645: GO 15663
// min_y := y - r ;
15647: LD_ADDR_VAR 0 8
15651: PUSH
15652: LD_VAR 0 3
15656: PUSH
15657: LD_VAR 0 4
15661: MINUS
15662: ST_TO_ADDR
// max_x := x + r ;
15663: LD_ADDR_VAR 0 9
15667: PUSH
15668: LD_VAR 0 2
15672: PUSH
15673: LD_VAR 0 4
15677: PLUS
15678: ST_TO_ADDR
// max_y := y + r ;
15679: LD_ADDR_VAR 0 10
15683: PUSH
15684: LD_VAR 0 3
15688: PUSH
15689: LD_VAR 0 4
15693: PLUS
15694: ST_TO_ADDR
// for _x = min_x to max_x do
15695: LD_ADDR_VAR 0 11
15699: PUSH
15700: DOUBLE
15701: LD_VAR 0 7
15705: DEC
15706: ST_TO_ADDR
15707: LD_VAR 0 9
15711: PUSH
15712: FOR_TO
15713: IFFALSE 15830
// for _y = min_y to max_y do
15715: LD_ADDR_VAR 0 12
15719: PUSH
15720: DOUBLE
15721: LD_VAR 0 8
15725: DEC
15726: ST_TO_ADDR
15727: LD_VAR 0 10
15731: PUSH
15732: FOR_TO
15733: IFFALSE 15826
// begin if not ValidHex ( _x , _y ) then
15735: LD_VAR 0 11
15739: PPUSH
15740: LD_VAR 0 12
15744: PPUSH
15745: CALL_OW 488
15749: NOT
15750: IFFALSE 15754
// continue ;
15752: GO 15732
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15754: LD_VAR 0 11
15758: PPUSH
15759: LD_VAR 0 12
15763: PPUSH
15764: CALL_OW 351
15768: PUSH
15769: LD_VAR 0 11
15773: PPUSH
15774: LD_VAR 0 12
15778: PPUSH
15779: CALL_OW 554
15783: AND
15784: IFFALSE 15824
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15786: LD_ADDR_VAR 0 13
15790: PUSH
15791: LD_VAR 0 13
15795: PPUSH
15796: LD_VAR 0 13
15800: PUSH
15801: LD_INT 1
15803: PLUS
15804: PPUSH
15805: LD_VAR 0 11
15809: PUSH
15810: LD_VAR 0 12
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PPUSH
15819: CALL_OW 2
15823: ST_TO_ADDR
// end ;
15824: GO 15732
15826: POP
15827: POP
15828: GO 15712
15830: POP
15831: POP
// if not list then
15832: LD_VAR 0 13
15836: NOT
15837: IFFALSE 15841
// exit ;
15839: GO 15912
// for i in list do
15841: LD_ADDR_VAR 0 6
15845: PUSH
15846: LD_VAR 0 13
15850: PUSH
15851: FOR_IN
15852: IFFALSE 15910
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15854: LD_VAR 0 1
15858: PPUSH
15859: LD_STRING M
15861: PUSH
15862: LD_VAR 0 6
15866: PUSH
15867: LD_INT 1
15869: ARRAY
15870: PUSH
15871: LD_VAR 0 6
15875: PUSH
15876: LD_INT 2
15878: ARRAY
15879: PUSH
15880: LD_INT 0
15882: PUSH
15883: LD_INT 0
15885: PUSH
15886: LD_INT 0
15888: PUSH
15889: LD_INT 0
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: PUSH
15901: EMPTY
15902: LIST
15903: PPUSH
15904: CALL_OW 447
15908: GO 15851
15910: POP
15911: POP
// end ;
15912: LD_VAR 0 5
15916: RET
