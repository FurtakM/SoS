// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20014 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 19910 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20030 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 24199 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 24199 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 29214 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 29214 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 29214 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 29214 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 24199 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 24199 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 24199 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 24199 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 24199 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 24199 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 24199 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 24199 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 24199 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 24199 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 24199 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 24199 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 24199 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 24199 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 24199 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 29214 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_INT 89
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: IN
3775: PUSH
3776: LD_EXP 3
3780: PPUSH
3781: CALL_OW 310
3785: PPUSH
3786: CALL_OW 264
3790: PUSH
3791: LD_INT 51
3793: PUSH
3794: LD_INT 12
3796: PUSH
3797: LD_INT 89
3799: PUSH
3800: LD_INT 32
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: IN
3809: OR
3810: AND
3811: IFFALSE 4021
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_EXP 2
3830: PPUSH
3831: CALL_OW 310
3835: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 310
3850: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3851: LD_VAR 0 2
3855: PPUSH
3856: CALL_OW 265
3860: PUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: CALL_OW 262
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_VAR 0 2
3878: PPUSH
3879: CALL_OW 264
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 271
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 248
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_STRING 14a_JMMVeh
3914: PPUSH
3915: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: CALL_OW 265
3928: PUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 262
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 264
3951: PUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 271
3961: PUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 248
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_STRING 14a_BurlakVeh
3982: PPUSH
3983: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3987: LD_EXP 2
3991: PPUSH
3992: LD_STRING 14a_JMM
3994: PPUSH
3995: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3999: LD_EXP 3
4003: PPUSH
4004: LD_STRING 14a_Burlak
4006: PPUSH
4007: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING %_cont
4016: PPUSH
4017: CALL_OW 340
// end ;
4021: PPOPN 3
4023: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4024: LD_INT 22
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 24
4039: PUSH
4040: LD_INT 950
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 69
4059: IFFALSE 4071
4061: GO 4063
4063: DISABLE
// YouLost ( FriendlyFire ) ;
4064: LD_STRING FriendlyFire
4066: PPUSH
4067: CALL_OW 104
4071: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4072: LD_EXP 3
4076: PPUSH
4077: CALL_OW 301
4081: IFFALSE 4093
4083: GO 4085
4085: DISABLE
// YouLost ( Burlak ) ;
4086: LD_STRING Burlak
4088: PPUSH
4089: CALL_OW 104
4093: END
// every 0 0$1 trigger IsDead ( JMM ) do
4094: LD_EXP 2
4098: PPUSH
4099: CALL_OW 301
4103: IFFALSE 4115
4105: GO 4107
4107: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4108: LD_STRING JMM
4110: PPUSH
4111: CALL_OW 104
4115: END
// export globalGameSaveCounter ; every 0 0$1 do
4116: GO 4118
4118: DISABLE
// begin enable ;
4119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4120: LD_STRING updateTimer(
4122: PUSH
4123: LD_OWVAR 1
4127: STR
4128: PUSH
4129: LD_STRING );
4131: STR
4132: PPUSH
4133: CALL_OW 559
// end ;
4137: END
// every 0 0$1 do
4138: GO 4140
4140: DISABLE
// begin globalGameSaveCounter := 0 ;
4141: LD_ADDR_EXP 39
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4149: LD_STRING setGameSaveCounter(0)
4151: PPUSH
4152: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4156: LD_STRING initStreamRollete();
4158: PPUSH
4159: CALL_OW 559
// InitStreamMode ;
4163: CALL 5489 0 0
// DefineStreamItems ( false ) ;
4167: LD_INT 0
4169: PPUSH
4170: CALL 5953 0 1
// end ;
4174: END
// export function SOS_MapStart ( ) ; begin
4175: LD_INT 0
4177: PPUSH
// if streamModeActive then
4178: LD_EXP 40
4182: IFFALSE 4191
// DefineStreamItems ( true ) ;
4184: LD_INT 1
4186: PPUSH
4187: CALL 5953 0 1
// UpdateLuaVariables ( ) ;
4191: CALL 4208 0 0
// UpdateFactoryWaypoints ( ) ;
4195: CALL 18814 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4199: CALL 19071 0 0
// end ;
4203: LD_VAR 0 1
4207: RET
// function UpdateLuaVariables ( ) ; begin
4208: LD_INT 0
4210: PPUSH
// if globalGameSaveCounter then
4211: LD_EXP 39
4215: IFFALSE 4249
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4217: LD_ADDR_EXP 39
4221: PUSH
4222: LD_EXP 39
4226: PPUSH
4227: CALL 63028 0 1
4231: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4232: LD_STRING setGameSaveCounter(
4234: PUSH
4235: LD_EXP 39
4239: STR
4240: PUSH
4241: LD_STRING )
4243: STR
4244: PPUSH
4245: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4249: LD_STRING setGameDifficulty(
4251: PUSH
4252: LD_OWVAR 67
4256: STR
4257: PUSH
4258: LD_STRING )
4260: STR
4261: PPUSH
4262: CALL_OW 559
// end ;
4266: LD_VAR 0 1
4270: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4271: LD_INT 0
4273: PPUSH
// if p2 = stream_mode then
4274: LD_VAR 0 2
4278: PUSH
4279: LD_INT 100
4281: EQUAL
4282: IFFALSE 5285
// begin if not StreamModeActive then
4284: LD_EXP 40
4288: NOT
4289: IFFALSE 4299
// StreamModeActive := true ;
4291: LD_ADDR_EXP 40
4295: PUSH
4296: LD_INT 1
4298: ST_TO_ADDR
// if p3 = 0 then
4299: LD_VAR 0 3
4303: PUSH
4304: LD_INT 0
4306: EQUAL
4307: IFFALSE 4313
// InitStreamMode ;
4309: CALL 5489 0 0
// if p3 = 1 then
4313: LD_VAR 0 3
4317: PUSH
4318: LD_INT 1
4320: EQUAL
4321: IFFALSE 4331
// sRocket := true ;
4323: LD_ADDR_EXP 45
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// if p3 = 2 then
4331: LD_VAR 0 3
4335: PUSH
4336: LD_INT 2
4338: EQUAL
4339: IFFALSE 4349
// sSpeed := true ;
4341: LD_ADDR_EXP 44
4345: PUSH
4346: LD_INT 1
4348: ST_TO_ADDR
// if p3 = 3 then
4349: LD_VAR 0 3
4353: PUSH
4354: LD_INT 3
4356: EQUAL
4357: IFFALSE 4367
// sEngine := true ;
4359: LD_ADDR_EXP 46
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// if p3 = 4 then
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 4
4374: EQUAL
4375: IFFALSE 4385
// sSpec := true ;
4377: LD_ADDR_EXP 43
4381: PUSH
4382: LD_INT 1
4384: ST_TO_ADDR
// if p3 = 5 then
4385: LD_VAR 0 3
4389: PUSH
4390: LD_INT 5
4392: EQUAL
4393: IFFALSE 4403
// sLevel := true ;
4395: LD_ADDR_EXP 47
4399: PUSH
4400: LD_INT 1
4402: ST_TO_ADDR
// if p3 = 6 then
4403: LD_VAR 0 3
4407: PUSH
4408: LD_INT 6
4410: EQUAL
4411: IFFALSE 4421
// sArmoury := true ;
4413: LD_ADDR_EXP 48
4417: PUSH
4418: LD_INT 1
4420: ST_TO_ADDR
// if p3 = 7 then
4421: LD_VAR 0 3
4425: PUSH
4426: LD_INT 7
4428: EQUAL
4429: IFFALSE 4439
// sRadar := true ;
4431: LD_ADDR_EXP 49
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// if p3 = 8 then
4439: LD_VAR 0 3
4443: PUSH
4444: LD_INT 8
4446: EQUAL
4447: IFFALSE 4457
// sBunker := true ;
4449: LD_ADDR_EXP 50
4453: PUSH
4454: LD_INT 1
4456: ST_TO_ADDR
// if p3 = 9 then
4457: LD_VAR 0 3
4461: PUSH
4462: LD_INT 9
4464: EQUAL
4465: IFFALSE 4475
// sHack := true ;
4467: LD_ADDR_EXP 51
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// if p3 = 10 then
4475: LD_VAR 0 3
4479: PUSH
4480: LD_INT 10
4482: EQUAL
4483: IFFALSE 4493
// sFire := true ;
4485: LD_ADDR_EXP 52
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// if p3 = 11 then
4493: LD_VAR 0 3
4497: PUSH
4498: LD_INT 11
4500: EQUAL
4501: IFFALSE 4511
// sRefresh := true ;
4503: LD_ADDR_EXP 53
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// if p3 = 12 then
4511: LD_VAR 0 3
4515: PUSH
4516: LD_INT 12
4518: EQUAL
4519: IFFALSE 4529
// sExp := true ;
4521: LD_ADDR_EXP 54
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if p3 = 13 then
4529: LD_VAR 0 3
4533: PUSH
4534: LD_INT 13
4536: EQUAL
4537: IFFALSE 4547
// sDepot := true ;
4539: LD_ADDR_EXP 55
4543: PUSH
4544: LD_INT 1
4546: ST_TO_ADDR
// if p3 = 14 then
4547: LD_VAR 0 3
4551: PUSH
4552: LD_INT 14
4554: EQUAL
4555: IFFALSE 4565
// sFlag := true ;
4557: LD_ADDR_EXP 56
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if p3 = 15 then
4565: LD_VAR 0 3
4569: PUSH
4570: LD_INT 15
4572: EQUAL
4573: IFFALSE 4583
// sKamikadze := true ;
4575: LD_ADDR_EXP 64
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// if p3 = 16 then
4583: LD_VAR 0 3
4587: PUSH
4588: LD_INT 16
4590: EQUAL
4591: IFFALSE 4601
// sTroll := true ;
4593: LD_ADDR_EXP 65
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// if p3 = 17 then
4601: LD_VAR 0 3
4605: PUSH
4606: LD_INT 17
4608: EQUAL
4609: IFFALSE 4619
// sSlow := true ;
4611: LD_ADDR_EXP 66
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// if p3 = 18 then
4619: LD_VAR 0 3
4623: PUSH
4624: LD_INT 18
4626: EQUAL
4627: IFFALSE 4637
// sLack := true ;
4629: LD_ADDR_EXP 67
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// if p3 = 19 then
4637: LD_VAR 0 3
4641: PUSH
4642: LD_INT 19
4644: EQUAL
4645: IFFALSE 4655
// sTank := true ;
4647: LD_ADDR_EXP 69
4651: PUSH
4652: LD_INT 1
4654: ST_TO_ADDR
// if p3 = 20 then
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 20
4662: EQUAL
4663: IFFALSE 4673
// sRemote := true ;
4665: LD_ADDR_EXP 70
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// if p3 = 21 then
4673: LD_VAR 0 3
4677: PUSH
4678: LD_INT 21
4680: EQUAL
4681: IFFALSE 4691
// sPowell := true ;
4683: LD_ADDR_EXP 71
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// if p3 = 22 then
4691: LD_VAR 0 3
4695: PUSH
4696: LD_INT 22
4698: EQUAL
4699: IFFALSE 4709
// sTeleport := true ;
4701: LD_ADDR_EXP 74
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// if p3 = 23 then
4709: LD_VAR 0 3
4713: PUSH
4714: LD_INT 23
4716: EQUAL
4717: IFFALSE 4727
// sOilTower := true ;
4719: LD_ADDR_EXP 76
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// if p3 = 24 then
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 24
4734: EQUAL
4735: IFFALSE 4745
// sShovel := true ;
4737: LD_ADDR_EXP 77
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// if p3 = 25 then
4745: LD_VAR 0 3
4749: PUSH
4750: LD_INT 25
4752: EQUAL
4753: IFFALSE 4763
// sSheik := true ;
4755: LD_ADDR_EXP 78
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// if p3 = 26 then
4763: LD_VAR 0 3
4767: PUSH
4768: LD_INT 26
4770: EQUAL
4771: IFFALSE 4781
// sEarthquake := true ;
4773: LD_ADDR_EXP 80
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// if p3 = 27 then
4781: LD_VAR 0 3
4785: PUSH
4786: LD_INT 27
4788: EQUAL
4789: IFFALSE 4799
// sAI := true ;
4791: LD_ADDR_EXP 81
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// if p3 = 28 then
4799: LD_VAR 0 3
4803: PUSH
4804: LD_INT 28
4806: EQUAL
4807: IFFALSE 4817
// sCargo := true ;
4809: LD_ADDR_EXP 84
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// if p3 = 29 then
4817: LD_VAR 0 3
4821: PUSH
4822: LD_INT 29
4824: EQUAL
4825: IFFALSE 4835
// sDLaser := true ;
4827: LD_ADDR_EXP 85
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// if p3 = 30 then
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 30
4842: EQUAL
4843: IFFALSE 4853
// sExchange := true ;
4845: LD_ADDR_EXP 86
4849: PUSH
4850: LD_INT 1
4852: ST_TO_ADDR
// if p3 = 31 then
4853: LD_VAR 0 3
4857: PUSH
4858: LD_INT 31
4860: EQUAL
4861: IFFALSE 4871
// sFac := true ;
4863: LD_ADDR_EXP 87
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// if p3 = 32 then
4871: LD_VAR 0 3
4875: PUSH
4876: LD_INT 32
4878: EQUAL
4879: IFFALSE 4889
// sPower := true ;
4881: LD_ADDR_EXP 88
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// if p3 = 33 then
4889: LD_VAR 0 3
4893: PUSH
4894: LD_INT 33
4896: EQUAL
4897: IFFALSE 4907
// sRandom := true ;
4899: LD_ADDR_EXP 89
4903: PUSH
4904: LD_INT 1
4906: ST_TO_ADDR
// if p3 = 34 then
4907: LD_VAR 0 3
4911: PUSH
4912: LD_INT 34
4914: EQUAL
4915: IFFALSE 4925
// sShield := true ;
4917: LD_ADDR_EXP 90
4921: PUSH
4922: LD_INT 1
4924: ST_TO_ADDR
// if p3 = 35 then
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 35
4932: EQUAL
4933: IFFALSE 4943
// sTime := true ;
4935: LD_ADDR_EXP 91
4939: PUSH
4940: LD_INT 1
4942: ST_TO_ADDR
// if p3 = 36 then
4943: LD_VAR 0 3
4947: PUSH
4948: LD_INT 36
4950: EQUAL
4951: IFFALSE 4961
// sTools := true ;
4953: LD_ADDR_EXP 92
4957: PUSH
4958: LD_INT 1
4960: ST_TO_ADDR
// if p3 = 101 then
4961: LD_VAR 0 3
4965: PUSH
4966: LD_INT 101
4968: EQUAL
4969: IFFALSE 4979
// sSold := true ;
4971: LD_ADDR_EXP 57
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if p3 = 102 then
4979: LD_VAR 0 3
4983: PUSH
4984: LD_INT 102
4986: EQUAL
4987: IFFALSE 4997
// sDiff := true ;
4989: LD_ADDR_EXP 58
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if p3 = 103 then
4997: LD_VAR 0 3
5001: PUSH
5002: LD_INT 103
5004: EQUAL
5005: IFFALSE 5015
// sFog := true ;
5007: LD_ADDR_EXP 61
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// if p3 = 104 then
5015: LD_VAR 0 3
5019: PUSH
5020: LD_INT 104
5022: EQUAL
5023: IFFALSE 5033
// sReset := true ;
5025: LD_ADDR_EXP 62
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// if p3 = 105 then
5033: LD_VAR 0 3
5037: PUSH
5038: LD_INT 105
5040: EQUAL
5041: IFFALSE 5051
// sSun := true ;
5043: LD_ADDR_EXP 63
5047: PUSH
5048: LD_INT 1
5050: ST_TO_ADDR
// if p3 = 106 then
5051: LD_VAR 0 3
5055: PUSH
5056: LD_INT 106
5058: EQUAL
5059: IFFALSE 5069
// sTiger := true ;
5061: LD_ADDR_EXP 59
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// if p3 = 107 then
5069: LD_VAR 0 3
5073: PUSH
5074: LD_INT 107
5076: EQUAL
5077: IFFALSE 5087
// sBomb := true ;
5079: LD_ADDR_EXP 60
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// if p3 = 108 then
5087: LD_VAR 0 3
5091: PUSH
5092: LD_INT 108
5094: EQUAL
5095: IFFALSE 5105
// sWound := true ;
5097: LD_ADDR_EXP 68
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// if p3 = 109 then
5105: LD_VAR 0 3
5109: PUSH
5110: LD_INT 109
5112: EQUAL
5113: IFFALSE 5123
// sBetray := true ;
5115: LD_ADDR_EXP 72
5119: PUSH
5120: LD_INT 1
5122: ST_TO_ADDR
// if p3 = 110 then
5123: LD_VAR 0 3
5127: PUSH
5128: LD_INT 110
5130: EQUAL
5131: IFFALSE 5141
// sContamin := true ;
5133: LD_ADDR_EXP 73
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// if p3 = 111 then
5141: LD_VAR 0 3
5145: PUSH
5146: LD_INT 111
5148: EQUAL
5149: IFFALSE 5159
// sOil := true ;
5151: LD_ADDR_EXP 75
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// if p3 = 112 then
5159: LD_VAR 0 3
5163: PUSH
5164: LD_INT 112
5166: EQUAL
5167: IFFALSE 5177
// sStu := true ;
5169: LD_ADDR_EXP 79
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// if p3 = 113 then
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 113
5184: EQUAL
5185: IFFALSE 5195
// sBazooka := true ;
5187: LD_ADDR_EXP 82
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// if p3 = 114 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 114
5202: EQUAL
5203: IFFALSE 5213
// sMortar := true ;
5205: LD_ADDR_EXP 83
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if p3 = 115 then
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 115
5220: EQUAL
5221: IFFALSE 5231
// sRanger := true ;
5223: LD_ADDR_EXP 93
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// if p3 = 116 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 116
5238: EQUAL
5239: IFFALSE 5249
// sComputer := true ;
5241: LD_ADDR_EXP 94
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if p3 = 117 then
5249: LD_VAR 0 3
5253: PUSH
5254: LD_INT 117
5256: EQUAL
5257: IFFALSE 5267
// s30 := true ;
5259: LD_ADDR_EXP 95
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if p3 = 118 then
5267: LD_VAR 0 3
5271: PUSH
5272: LD_INT 118
5274: EQUAL
5275: IFFALSE 5285
// s60 := true ;
5277: LD_ADDR_EXP 96
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ; if p2 = hack_mode then
5285: LD_VAR 0 2
5289: PUSH
5290: LD_INT 101
5292: EQUAL
5293: IFFALSE 5421
// begin case p3 of 1 :
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 1
5302: DOUBLE
5303: EQUAL
5304: IFTRUE 5308
5306: GO 5315
5308: POP
// hHackUnlimitedResources ; 2 :
5309: CALL 17560 0 0
5313: GO 5421
5315: LD_INT 2
5317: DOUBLE
5318: EQUAL
5319: IFTRUE 5323
5321: GO 5330
5323: POP
// hHackSetLevel10 ; 3 :
5324: CALL 17693 0 0
5328: GO 5421
5330: LD_INT 3
5332: DOUBLE
5333: EQUAL
5334: IFTRUE 5338
5336: GO 5345
5338: POP
// hHackSetLevel10YourUnits ; 4 :
5339: CALL 17778 0 0
5343: GO 5421
5345: LD_INT 4
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5360
5353: POP
// hHackInvincible ; 5 :
5354: CALL 18226 0 0
5358: GO 5421
5360: LD_INT 5
5362: DOUBLE
5363: EQUAL
5364: IFTRUE 5368
5366: GO 5375
5368: POP
// hHackInvisible ; 6 :
5369: CALL 18337 0 0
5373: GO 5421
5375: LD_INT 6
5377: DOUBLE
5378: EQUAL
5379: IFTRUE 5383
5381: GO 5390
5383: POP
// hHackChangeYourSide ; 7 :
5384: CALL 18394 0 0
5388: GO 5421
5390: LD_INT 7
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5405
5398: POP
// hHackChangeUnitSide ; 8 :
5399: CALL 18436 0 0
5403: GO 5421
5405: LD_INT 8
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5420
5413: POP
// hHackFog ; end ;
5414: CALL 18537 0 0
5418: GO 5421
5420: POP
// end ; if p2 = game_save_mode then
5421: LD_VAR 0 2
5425: PUSH
5426: LD_INT 102
5428: EQUAL
5429: IFFALSE 5484
// begin if p3 = 1 then
5431: LD_VAR 0 3
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5451
// globalGameSaveCounter := p4 ;
5441: LD_ADDR_EXP 39
5445: PUSH
5446: LD_VAR 0 4
5450: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5451: LD_VAR 0 3
5455: PUSH
5456: LD_INT 2
5458: EQUAL
5459: PUSH
5460: LD_EXP 39
5464: AND
5465: IFFALSE 5484
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5467: LD_STRING setGameSaveCounter(
5469: PUSH
5470: LD_EXP 39
5474: STR
5475: PUSH
5476: LD_STRING )
5478: STR
5479: PPUSH
5480: CALL_OW 559
// end ; end ;
5484: LD_VAR 0 7
5488: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5489: LD_INT 0
5491: PPUSH
// streamModeActive := false ;
5492: LD_ADDR_EXP 40
5496: PUSH
5497: LD_INT 0
5499: ST_TO_ADDR
// normalCounter := 36 ;
5500: LD_ADDR_EXP 41
5504: PUSH
5505: LD_INT 36
5507: ST_TO_ADDR
// hardcoreCounter := 18 ;
5508: LD_ADDR_EXP 42
5512: PUSH
5513: LD_INT 18
5515: ST_TO_ADDR
// sRocket := false ;
5516: LD_ADDR_EXP 45
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// sSpeed := false ;
5524: LD_ADDR_EXP 44
5528: PUSH
5529: LD_INT 0
5531: ST_TO_ADDR
// sEngine := false ;
5532: LD_ADDR_EXP 46
5536: PUSH
5537: LD_INT 0
5539: ST_TO_ADDR
// sSpec := false ;
5540: LD_ADDR_EXP 43
5544: PUSH
5545: LD_INT 0
5547: ST_TO_ADDR
// sLevel := false ;
5548: LD_ADDR_EXP 47
5552: PUSH
5553: LD_INT 0
5555: ST_TO_ADDR
// sArmoury := false ;
5556: LD_ADDR_EXP 48
5560: PUSH
5561: LD_INT 0
5563: ST_TO_ADDR
// sRadar := false ;
5564: LD_ADDR_EXP 49
5568: PUSH
5569: LD_INT 0
5571: ST_TO_ADDR
// sBunker := false ;
5572: LD_ADDR_EXP 50
5576: PUSH
5577: LD_INT 0
5579: ST_TO_ADDR
// sHack := false ;
5580: LD_ADDR_EXP 51
5584: PUSH
5585: LD_INT 0
5587: ST_TO_ADDR
// sFire := false ;
5588: LD_ADDR_EXP 52
5592: PUSH
5593: LD_INT 0
5595: ST_TO_ADDR
// sRefresh := false ;
5596: LD_ADDR_EXP 53
5600: PUSH
5601: LD_INT 0
5603: ST_TO_ADDR
// sExp := false ;
5604: LD_ADDR_EXP 54
5608: PUSH
5609: LD_INT 0
5611: ST_TO_ADDR
// sDepot := false ;
5612: LD_ADDR_EXP 55
5616: PUSH
5617: LD_INT 0
5619: ST_TO_ADDR
// sFlag := false ;
5620: LD_ADDR_EXP 56
5624: PUSH
5625: LD_INT 0
5627: ST_TO_ADDR
// sKamikadze := false ;
5628: LD_ADDR_EXP 64
5632: PUSH
5633: LD_INT 0
5635: ST_TO_ADDR
// sTroll := false ;
5636: LD_ADDR_EXP 65
5640: PUSH
5641: LD_INT 0
5643: ST_TO_ADDR
// sSlow := false ;
5644: LD_ADDR_EXP 66
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// sLack := false ;
5652: LD_ADDR_EXP 67
5656: PUSH
5657: LD_INT 0
5659: ST_TO_ADDR
// sTank := false ;
5660: LD_ADDR_EXP 69
5664: PUSH
5665: LD_INT 0
5667: ST_TO_ADDR
// sRemote := false ;
5668: LD_ADDR_EXP 70
5672: PUSH
5673: LD_INT 0
5675: ST_TO_ADDR
// sPowell := false ;
5676: LD_ADDR_EXP 71
5680: PUSH
5681: LD_INT 0
5683: ST_TO_ADDR
// sTeleport := false ;
5684: LD_ADDR_EXP 74
5688: PUSH
5689: LD_INT 0
5691: ST_TO_ADDR
// sOilTower := false ;
5692: LD_ADDR_EXP 76
5696: PUSH
5697: LD_INT 0
5699: ST_TO_ADDR
// sShovel := false ;
5700: LD_ADDR_EXP 77
5704: PUSH
5705: LD_INT 0
5707: ST_TO_ADDR
// sSheik := false ;
5708: LD_ADDR_EXP 78
5712: PUSH
5713: LD_INT 0
5715: ST_TO_ADDR
// sEarthquake := false ;
5716: LD_ADDR_EXP 80
5720: PUSH
5721: LD_INT 0
5723: ST_TO_ADDR
// sAI := false ;
5724: LD_ADDR_EXP 81
5728: PUSH
5729: LD_INT 0
5731: ST_TO_ADDR
// sCargo := false ;
5732: LD_ADDR_EXP 84
5736: PUSH
5737: LD_INT 0
5739: ST_TO_ADDR
// sDLaser := false ;
5740: LD_ADDR_EXP 85
5744: PUSH
5745: LD_INT 0
5747: ST_TO_ADDR
// sExchange := false ;
5748: LD_ADDR_EXP 86
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// sFac := false ;
5756: LD_ADDR_EXP 87
5760: PUSH
5761: LD_INT 0
5763: ST_TO_ADDR
// sPower := false ;
5764: LD_ADDR_EXP 88
5768: PUSH
5769: LD_INT 0
5771: ST_TO_ADDR
// sRandom := false ;
5772: LD_ADDR_EXP 89
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// sShield := false ;
5780: LD_ADDR_EXP 90
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// sTime := false ;
5788: LD_ADDR_EXP 91
5792: PUSH
5793: LD_INT 0
5795: ST_TO_ADDR
// sTools := false ;
5796: LD_ADDR_EXP 92
5800: PUSH
5801: LD_INT 0
5803: ST_TO_ADDR
// sSold := false ;
5804: LD_ADDR_EXP 57
5808: PUSH
5809: LD_INT 0
5811: ST_TO_ADDR
// sDiff := false ;
5812: LD_ADDR_EXP 58
5816: PUSH
5817: LD_INT 0
5819: ST_TO_ADDR
// sFog := false ;
5820: LD_ADDR_EXP 61
5824: PUSH
5825: LD_INT 0
5827: ST_TO_ADDR
// sReset := false ;
5828: LD_ADDR_EXP 62
5832: PUSH
5833: LD_INT 0
5835: ST_TO_ADDR
// sSun := false ;
5836: LD_ADDR_EXP 63
5840: PUSH
5841: LD_INT 0
5843: ST_TO_ADDR
// sTiger := false ;
5844: LD_ADDR_EXP 59
5848: PUSH
5849: LD_INT 0
5851: ST_TO_ADDR
// sBomb := false ;
5852: LD_ADDR_EXP 60
5856: PUSH
5857: LD_INT 0
5859: ST_TO_ADDR
// sWound := false ;
5860: LD_ADDR_EXP 68
5864: PUSH
5865: LD_INT 0
5867: ST_TO_ADDR
// sBetray := false ;
5868: LD_ADDR_EXP 72
5872: PUSH
5873: LD_INT 0
5875: ST_TO_ADDR
// sContamin := false ;
5876: LD_ADDR_EXP 73
5880: PUSH
5881: LD_INT 0
5883: ST_TO_ADDR
// sOil := false ;
5884: LD_ADDR_EXP 75
5888: PUSH
5889: LD_INT 0
5891: ST_TO_ADDR
// sStu := false ;
5892: LD_ADDR_EXP 79
5896: PUSH
5897: LD_INT 0
5899: ST_TO_ADDR
// sBazooka := false ;
5900: LD_ADDR_EXP 82
5904: PUSH
5905: LD_INT 0
5907: ST_TO_ADDR
// sMortar := false ;
5908: LD_ADDR_EXP 83
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// sRanger := false ;
5916: LD_ADDR_EXP 93
5920: PUSH
5921: LD_INT 0
5923: ST_TO_ADDR
// sComputer := false ;
5924: LD_ADDR_EXP 94
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// s30 := false ;
5932: LD_ADDR_EXP 95
5936: PUSH
5937: LD_INT 0
5939: ST_TO_ADDR
// s60 := false ;
5940: LD_ADDR_EXP 96
5944: PUSH
5945: LD_INT 0
5947: ST_TO_ADDR
// end ;
5948: LD_VAR 0 1
5952: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5953: LD_INT 0
5955: PPUSH
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
// result := [ ] ;
5962: LD_ADDR_VAR 0 2
5966: PUSH
5967: EMPTY
5968: ST_TO_ADDR
// if campaign_id = 1 then
5969: LD_OWVAR 69
5973: PUSH
5974: LD_INT 1
5976: EQUAL
5977: IFFALSE 9143
// begin case mission_number of 1 :
5979: LD_OWVAR 70
5983: PUSH
5984: LD_INT 1
5986: DOUBLE
5987: EQUAL
5988: IFTRUE 5992
5990: GO 6068
5992: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: LD_INT 11
6006: PUSH
6007: LD_INT 12
6009: PUSH
6010: LD_INT 15
6012: PUSH
6013: LD_INT 16
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 23
6021: PUSH
6022: LD_INT 26
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 101
6038: PUSH
6039: LD_INT 102
6041: PUSH
6042: LD_INT 106
6044: PUSH
6045: LD_INT 116
6047: PUSH
6048: LD_INT 117
6050: PUSH
6051: LD_INT 118
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: ST_TO_ADDR
6066: GO 9141
6068: LD_INT 2
6070: DOUBLE
6071: EQUAL
6072: IFTRUE 6076
6074: GO 6160
6076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: LD_INT 4
6087: PUSH
6088: LD_INT 11
6090: PUSH
6091: LD_INT 12
6093: PUSH
6094: LD_INT 15
6096: PUSH
6097: LD_INT 16
6099: PUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 23
6105: PUSH
6106: LD_INT 26
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 101
6122: PUSH
6123: LD_INT 102
6125: PUSH
6126: LD_INT 105
6128: PUSH
6129: LD_INT 106
6131: PUSH
6132: LD_INT 108
6134: PUSH
6135: LD_INT 116
6137: PUSH
6138: LD_INT 117
6140: PUSH
6141: LD_INT 118
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: ST_TO_ADDR
6158: GO 9141
6160: LD_INT 3
6162: DOUBLE
6163: EQUAL
6164: IFTRUE 6168
6166: GO 6256
6168: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6169: LD_ADDR_VAR 0 2
6173: PUSH
6174: LD_INT 2
6176: PUSH
6177: LD_INT 4
6179: PUSH
6180: LD_INT 5
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 15
6191: PUSH
6192: LD_INT 16
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_INT 26
6200: PUSH
6201: LD_INT 36
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 101
6218: PUSH
6219: LD_INT 102
6221: PUSH
6222: LD_INT 105
6224: PUSH
6225: LD_INT 106
6227: PUSH
6228: LD_INT 108
6230: PUSH
6231: LD_INT 116
6233: PUSH
6234: LD_INT 117
6236: PUSH
6237: LD_INT 118
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
6254: GO 9141
6256: LD_INT 4
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6360
6264: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: LD_INT 4
6275: PUSH
6276: LD_INT 5
6278: PUSH
6279: LD_INT 8
6281: PUSH
6282: LD_INT 11
6284: PUSH
6285: LD_INT 12
6287: PUSH
6288: LD_INT 15
6290: PUSH
6291: LD_INT 16
6293: PUSH
6294: LD_INT 22
6296: PUSH
6297: LD_INT 23
6299: PUSH
6300: LD_INT 26
6302: PUSH
6303: LD_INT 36
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 101
6322: PUSH
6323: LD_INT 102
6325: PUSH
6326: LD_INT 105
6328: PUSH
6329: LD_INT 106
6331: PUSH
6332: LD_INT 108
6334: PUSH
6335: LD_INT 116
6337: PUSH
6338: LD_INT 117
6340: PUSH
6341: LD_INT 118
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 9141
6360: LD_INT 5
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6480
6368: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 4
6379: PUSH
6380: LD_INT 5
6382: PUSH
6383: LD_INT 6
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 12
6394: PUSH
6395: LD_INT 15
6397: PUSH
6398: LD_INT 16
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 23
6406: PUSH
6407: LD_INT 25
6409: PUSH
6410: LD_INT 26
6412: PUSH
6413: LD_INT 36
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 101
6434: PUSH
6435: LD_INT 102
6437: PUSH
6438: LD_INT 105
6440: PUSH
6441: LD_INT 106
6443: PUSH
6444: LD_INT 108
6446: PUSH
6447: LD_INT 109
6449: PUSH
6450: LD_INT 112
6452: PUSH
6453: LD_INT 116
6455: PUSH
6456: LD_INT 117
6458: PUSH
6459: LD_INT 118
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: ST_TO_ADDR
6478: GO 9141
6480: LD_INT 6
6482: DOUBLE
6483: EQUAL
6484: IFTRUE 6488
6486: GO 6620
6488: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_INT 2
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: LD_INT 6
6505: PUSH
6506: LD_INT 8
6508: PUSH
6509: LD_INT 11
6511: PUSH
6512: LD_INT 12
6514: PUSH
6515: LD_INT 15
6517: PUSH
6518: LD_INT 16
6520: PUSH
6521: LD_INT 20
6523: PUSH
6524: LD_INT 21
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 23
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 31
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: LD_INT 36
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 101
6574: PUSH
6575: LD_INT 102
6577: PUSH
6578: LD_INT 105
6580: PUSH
6581: LD_INT 106
6583: PUSH
6584: LD_INT 108
6586: PUSH
6587: LD_INT 109
6589: PUSH
6590: LD_INT 112
6592: PUSH
6593: LD_INT 116
6595: PUSH
6596: LD_INT 117
6598: PUSH
6599: LD_INT 118
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: ST_TO_ADDR
6618: GO 9141
6620: LD_INT 7
6622: DOUBLE
6623: EQUAL
6624: IFTRUE 6628
6626: GO 6740
6628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6629: LD_ADDR_VAR 0 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 4
6639: PUSH
6640: LD_INT 5
6642: PUSH
6643: LD_INT 7
6645: PUSH
6646: LD_INT 11
6648: PUSH
6649: LD_INT 12
6651: PUSH
6652: LD_INT 15
6654: PUSH
6655: LD_INT 16
6657: PUSH
6658: LD_INT 20
6660: PUSH
6661: LD_INT 21
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_INT 23
6669: PUSH
6670: LD_INT 25
6672: PUSH
6673: LD_INT 26
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 101
6694: PUSH
6695: LD_INT 102
6697: PUSH
6698: LD_INT 103
6700: PUSH
6701: LD_INT 105
6703: PUSH
6704: LD_INT 106
6706: PUSH
6707: LD_INT 108
6709: PUSH
6710: LD_INT 112
6712: PUSH
6713: LD_INT 116
6715: PUSH
6716: LD_INT 117
6718: PUSH
6719: LD_INT 118
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: ST_TO_ADDR
6738: GO 9141
6740: LD_INT 8
6742: DOUBLE
6743: EQUAL
6744: IFTRUE 6748
6746: GO 6888
6748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6749: LD_ADDR_VAR 0 2
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: LD_INT 4
6759: PUSH
6760: LD_INT 5
6762: PUSH
6763: LD_INT 6
6765: PUSH
6766: LD_INT 7
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 15
6780: PUSH
6781: LD_INT 16
6783: PUSH
6784: LD_INT 20
6786: PUSH
6787: LD_INT 21
6789: PUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 23
6795: PUSH
6796: LD_INT 25
6798: PUSH
6799: LD_INT 26
6801: PUSH
6802: LD_INT 30
6804: PUSH
6805: LD_INT 31
6807: PUSH
6808: LD_INT 32
6810: PUSH
6811: LD_INT 36
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 101
6838: PUSH
6839: LD_INT 102
6841: PUSH
6842: LD_INT 103
6844: PUSH
6845: LD_INT 105
6847: PUSH
6848: LD_INT 106
6850: PUSH
6851: LD_INT 108
6853: PUSH
6854: LD_INT 109
6856: PUSH
6857: LD_INT 112
6859: PUSH
6860: LD_INT 116
6862: PUSH
6863: LD_INT 117
6865: PUSH
6866: LD_INT 118
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: ST_TO_ADDR
6886: GO 9141
6888: LD_INT 9
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 7044
6896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6897: LD_ADDR_VAR 0 2
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: LD_INT 4
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 6
6913: PUSH
6914: LD_INT 7
6916: PUSH
6917: LD_INT 8
6919: PUSH
6920: LD_INT 11
6922: PUSH
6923: LD_INT 12
6925: PUSH
6926: LD_INT 15
6928: PUSH
6929: LD_INT 16
6931: PUSH
6932: LD_INT 20
6934: PUSH
6935: LD_INT 21
6937: PUSH
6938: LD_INT 22
6940: PUSH
6941: LD_INT 23
6943: PUSH
6944: LD_INT 25
6946: PUSH
6947: LD_INT 26
6949: PUSH
6950: LD_INT 28
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 31
6958: PUSH
6959: LD_INT 32
6961: PUSH
6962: LD_INT 36
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 101
6990: PUSH
6991: LD_INT 102
6993: PUSH
6994: LD_INT 103
6996: PUSH
6997: LD_INT 105
6999: PUSH
7000: LD_INT 106
7002: PUSH
7003: LD_INT 108
7005: PUSH
7006: LD_INT 109
7008: PUSH
7009: LD_INT 112
7011: PUSH
7012: LD_INT 114
7014: PUSH
7015: LD_INT 116
7017: PUSH
7018: LD_INT 117
7020: PUSH
7021: LD_INT 118
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: ST_TO_ADDR
7042: GO 9141
7044: LD_INT 10
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7248
7052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 4
7063: PUSH
7064: LD_INT 5
7066: PUSH
7067: LD_INT 6
7069: PUSH
7070: LD_INT 7
7072: PUSH
7073: LD_INT 8
7075: PUSH
7076: LD_INT 9
7078: PUSH
7079: LD_INT 10
7081: PUSH
7082: LD_INT 11
7084: PUSH
7085: LD_INT 12
7087: PUSH
7088: LD_INT 13
7090: PUSH
7091: LD_INT 14
7093: PUSH
7094: LD_INT 15
7096: PUSH
7097: LD_INT 16
7099: PUSH
7100: LD_INT 17
7102: PUSH
7103: LD_INT 18
7105: PUSH
7106: LD_INT 19
7108: PUSH
7109: LD_INT 20
7111: PUSH
7112: LD_INT 21
7114: PUSH
7115: LD_INT 22
7117: PUSH
7118: LD_INT 23
7120: PUSH
7121: LD_INT 24
7123: PUSH
7124: LD_INT 25
7126: PUSH
7127: LD_INT 26
7129: PUSH
7130: LD_INT 28
7132: PUSH
7133: LD_INT 30
7135: PUSH
7136: LD_INT 31
7138: PUSH
7139: LD_INT 32
7141: PUSH
7142: LD_INT 36
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 101
7178: PUSH
7179: LD_INT 102
7181: PUSH
7182: LD_INT 103
7184: PUSH
7185: LD_INT 104
7187: PUSH
7188: LD_INT 105
7190: PUSH
7191: LD_INT 106
7193: PUSH
7194: LD_INT 107
7196: PUSH
7197: LD_INT 108
7199: PUSH
7200: LD_INT 109
7202: PUSH
7203: LD_INT 110
7205: PUSH
7206: LD_INT 111
7208: PUSH
7209: LD_INT 112
7211: PUSH
7212: LD_INT 114
7214: PUSH
7215: LD_INT 116
7217: PUSH
7218: LD_INT 117
7220: PUSH
7221: LD_INT 118
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 9141
7248: LD_INT 11
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7460
7256: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: LD_INT 6
7276: PUSH
7277: LD_INT 7
7279: PUSH
7280: LD_INT 8
7282: PUSH
7283: LD_INT 9
7285: PUSH
7286: LD_INT 10
7288: PUSH
7289: LD_INT 11
7291: PUSH
7292: LD_INT 12
7294: PUSH
7295: LD_INT 13
7297: PUSH
7298: LD_INT 14
7300: PUSH
7301: LD_INT 15
7303: PUSH
7304: LD_INT 16
7306: PUSH
7307: LD_INT 17
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 19
7315: PUSH
7316: LD_INT 20
7318: PUSH
7319: LD_INT 21
7321: PUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 23
7327: PUSH
7328: LD_INT 24
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 26
7336: PUSH
7337: LD_INT 28
7339: PUSH
7340: LD_INT 30
7342: PUSH
7343: LD_INT 31
7345: PUSH
7346: LD_INT 32
7348: PUSH
7349: LD_INT 34
7351: PUSH
7352: LD_INT 36
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 101
7390: PUSH
7391: LD_INT 102
7393: PUSH
7394: LD_INT 103
7396: PUSH
7397: LD_INT 104
7399: PUSH
7400: LD_INT 105
7402: PUSH
7403: LD_INT 106
7405: PUSH
7406: LD_INT 107
7408: PUSH
7409: LD_INT 108
7411: PUSH
7412: LD_INT 109
7414: PUSH
7415: LD_INT 110
7417: PUSH
7418: LD_INT 111
7420: PUSH
7421: LD_INT 112
7423: PUSH
7424: LD_INT 114
7426: PUSH
7427: LD_INT 116
7429: PUSH
7430: LD_INT 117
7432: PUSH
7433: LD_INT 118
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: ST_TO_ADDR
7458: GO 9141
7460: LD_INT 12
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7688
7468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7469: LD_ADDR_VAR 0 2
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 4
7485: PUSH
7486: LD_INT 5
7488: PUSH
7489: LD_INT 6
7491: PUSH
7492: LD_INT 7
7494: PUSH
7495: LD_INT 8
7497: PUSH
7498: LD_INT 9
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 11
7506: PUSH
7507: LD_INT 12
7509: PUSH
7510: LD_INT 13
7512: PUSH
7513: LD_INT 14
7515: PUSH
7516: LD_INT 15
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: LD_INT 17
7524: PUSH
7525: LD_INT 18
7527: PUSH
7528: LD_INT 19
7530: PUSH
7531: LD_INT 20
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 23
7542: PUSH
7543: LD_INT 24
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 26
7551: PUSH
7552: LD_INT 27
7554: PUSH
7555: LD_INT 28
7557: PUSH
7558: LD_INT 30
7560: PUSH
7561: LD_INT 31
7563: PUSH
7564: LD_INT 32
7566: PUSH
7567: LD_INT 33
7569: PUSH
7570: LD_INT 34
7572: PUSH
7573: LD_INT 36
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 101
7614: PUSH
7615: LD_INT 102
7617: PUSH
7618: LD_INT 103
7620: PUSH
7621: LD_INT 104
7623: PUSH
7624: LD_INT 105
7626: PUSH
7627: LD_INT 106
7629: PUSH
7630: LD_INT 107
7632: PUSH
7633: LD_INT 108
7635: PUSH
7636: LD_INT 109
7638: PUSH
7639: LD_INT 110
7641: PUSH
7642: LD_INT 111
7644: PUSH
7645: LD_INT 112
7647: PUSH
7648: LD_INT 113
7650: PUSH
7651: LD_INT 114
7653: PUSH
7654: LD_INT 116
7656: PUSH
7657: LD_INT 117
7659: PUSH
7660: LD_INT 118
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 9141
7688: LD_INT 13
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7904
7696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 8
7719: PUSH
7720: LD_INT 9
7722: PUSH
7723: LD_INT 10
7725: PUSH
7726: LD_INT 11
7728: PUSH
7729: LD_INT 12
7731: PUSH
7732: LD_INT 14
7734: PUSH
7735: LD_INT 15
7737: PUSH
7738: LD_INT 16
7740: PUSH
7741: LD_INT 17
7743: PUSH
7744: LD_INT 18
7746: PUSH
7747: LD_INT 19
7749: PUSH
7750: LD_INT 20
7752: PUSH
7753: LD_INT 21
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 23
7761: PUSH
7762: LD_INT 24
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 26
7770: PUSH
7771: LD_INT 27
7773: PUSH
7774: LD_INT 28
7776: PUSH
7777: LD_INT 30
7779: PUSH
7780: LD_INT 31
7782: PUSH
7783: LD_INT 32
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 34
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 101
7830: PUSH
7831: LD_INT 102
7833: PUSH
7834: LD_INT 103
7836: PUSH
7837: LD_INT 104
7839: PUSH
7840: LD_INT 105
7842: PUSH
7843: LD_INT 106
7845: PUSH
7846: LD_INT 107
7848: PUSH
7849: LD_INT 108
7851: PUSH
7852: LD_INT 109
7854: PUSH
7855: LD_INT 110
7857: PUSH
7858: LD_INT 111
7860: PUSH
7861: LD_INT 112
7863: PUSH
7864: LD_INT 113
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: LD_INT 116
7872: PUSH
7873: LD_INT 117
7875: PUSH
7876: LD_INT 118
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: ST_TO_ADDR
7902: GO 9141
7904: LD_INT 14
7906: DOUBLE
7907: EQUAL
7908: IFTRUE 7912
7910: GO 8136
7912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 4
7929: PUSH
7930: LD_INT 5
7932: PUSH
7933: LD_INT 6
7935: PUSH
7936: LD_INT 7
7938: PUSH
7939: LD_INT 8
7941: PUSH
7942: LD_INT 9
7944: PUSH
7945: LD_INT 10
7947: PUSH
7948: LD_INT 11
7950: PUSH
7951: LD_INT 12
7953: PUSH
7954: LD_INT 13
7956: PUSH
7957: LD_INT 14
7959: PUSH
7960: LD_INT 15
7962: PUSH
7963: LD_INT 16
7965: PUSH
7966: LD_INT 17
7968: PUSH
7969: LD_INT 18
7971: PUSH
7972: LD_INT 19
7974: PUSH
7975: LD_INT 20
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 23
7986: PUSH
7987: LD_INT 24
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 26
7995: PUSH
7996: LD_INT 27
7998: PUSH
7999: LD_INT 28
8001: PUSH
8002: LD_INT 29
8004: PUSH
8005: LD_INT 30
8007: PUSH
8008: LD_INT 31
8010: PUSH
8011: LD_INT 32
8013: PUSH
8014: LD_INT 33
8016: PUSH
8017: LD_INT 34
8019: PUSH
8020: LD_INT 36
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 101
8062: PUSH
8063: LD_INT 102
8065: PUSH
8066: LD_INT 103
8068: PUSH
8069: LD_INT 104
8071: PUSH
8072: LD_INT 105
8074: PUSH
8075: LD_INT 106
8077: PUSH
8078: LD_INT 107
8080: PUSH
8081: LD_INT 108
8083: PUSH
8084: LD_INT 109
8086: PUSH
8087: LD_INT 110
8089: PUSH
8090: LD_INT 111
8092: PUSH
8093: LD_INT 112
8095: PUSH
8096: LD_INT 113
8098: PUSH
8099: LD_INT 114
8101: PUSH
8102: LD_INT 116
8104: PUSH
8105: LD_INT 117
8107: PUSH
8108: LD_INT 118
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: ST_TO_ADDR
8134: GO 9141
8136: LD_INT 15
8138: DOUBLE
8139: EQUAL
8140: IFTRUE 8144
8142: GO 8368
8144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8145: LD_ADDR_VAR 0 2
8149: PUSH
8150: LD_INT 1
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 6
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: LD_INT 8
8173: PUSH
8174: LD_INT 9
8176: PUSH
8177: LD_INT 10
8179: PUSH
8180: LD_INT 11
8182: PUSH
8183: LD_INT 12
8185: PUSH
8186: LD_INT 13
8188: PUSH
8189: LD_INT 14
8191: PUSH
8192: LD_INT 15
8194: PUSH
8195: LD_INT 16
8197: PUSH
8198: LD_INT 17
8200: PUSH
8201: LD_INT 18
8203: PUSH
8204: LD_INT 19
8206: PUSH
8207: LD_INT 20
8209: PUSH
8210: LD_INT 21
8212: PUSH
8213: LD_INT 22
8215: PUSH
8216: LD_INT 23
8218: PUSH
8219: LD_INT 24
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 26
8227: PUSH
8228: LD_INT 27
8230: PUSH
8231: LD_INT 28
8233: PUSH
8234: LD_INT 29
8236: PUSH
8237: LD_INT 30
8239: PUSH
8240: LD_INT 31
8242: PUSH
8243: LD_INT 32
8245: PUSH
8246: LD_INT 33
8248: PUSH
8249: LD_INT 34
8251: PUSH
8252: LD_INT 36
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 101
8294: PUSH
8295: LD_INT 102
8297: PUSH
8298: LD_INT 103
8300: PUSH
8301: LD_INT 104
8303: PUSH
8304: LD_INT 105
8306: PUSH
8307: LD_INT 106
8309: PUSH
8310: LD_INT 107
8312: PUSH
8313: LD_INT 108
8315: PUSH
8316: LD_INT 109
8318: PUSH
8319: LD_INT 110
8321: PUSH
8322: LD_INT 111
8324: PUSH
8325: LD_INT 112
8327: PUSH
8328: LD_INT 113
8330: PUSH
8331: LD_INT 114
8333: PUSH
8334: LD_INT 116
8336: PUSH
8337: LD_INT 117
8339: PUSH
8340: LD_INT 118
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: ST_TO_ADDR
8366: GO 9141
8368: LD_INT 16
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8512
8376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8377: LD_ADDR_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 4
8387: PUSH
8388: LD_INT 5
8390: PUSH
8391: LD_INT 7
8393: PUSH
8394: LD_INT 11
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: LD_INT 15
8402: PUSH
8403: LD_INT 16
8405: PUSH
8406: LD_INT 20
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 22
8414: PUSH
8415: LD_INT 23
8417: PUSH
8418: LD_INT 25
8420: PUSH
8421: LD_INT 26
8423: PUSH
8424: LD_INT 30
8426: PUSH
8427: LD_INT 31
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: LD_INT 33
8435: PUSH
8436: LD_INT 34
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 101
8462: PUSH
8463: LD_INT 102
8465: PUSH
8466: LD_INT 103
8468: PUSH
8469: LD_INT 106
8471: PUSH
8472: LD_INT 108
8474: PUSH
8475: LD_INT 112
8477: PUSH
8478: LD_INT 113
8480: PUSH
8481: LD_INT 114
8483: PUSH
8484: LD_INT 116
8486: PUSH
8487: LD_INT 117
8489: PUSH
8490: LD_INT 118
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: ST_TO_ADDR
8510: GO 9141
8512: LD_INT 17
8514: DOUBLE
8515: EQUAL
8516: IFTRUE 8520
8518: GO 8744
8520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: LD_INT 4
8537: PUSH
8538: LD_INT 5
8540: PUSH
8541: LD_INT 6
8543: PUSH
8544: LD_INT 7
8546: PUSH
8547: LD_INT 8
8549: PUSH
8550: LD_INT 9
8552: PUSH
8553: LD_INT 10
8555: PUSH
8556: LD_INT 11
8558: PUSH
8559: LD_INT 12
8561: PUSH
8562: LD_INT 13
8564: PUSH
8565: LD_INT 14
8567: PUSH
8568: LD_INT 15
8570: PUSH
8571: LD_INT 16
8573: PUSH
8574: LD_INT 17
8576: PUSH
8577: LD_INT 18
8579: PUSH
8580: LD_INT 19
8582: PUSH
8583: LD_INT 20
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 23
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 26
8603: PUSH
8604: LD_INT 27
8606: PUSH
8607: LD_INT 28
8609: PUSH
8610: LD_INT 29
8612: PUSH
8613: LD_INT 30
8615: PUSH
8616: LD_INT 31
8618: PUSH
8619: LD_INT 32
8621: PUSH
8622: LD_INT 33
8624: PUSH
8625: LD_INT 34
8627: PUSH
8628: LD_INT 36
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 101
8670: PUSH
8671: LD_INT 102
8673: PUSH
8674: LD_INT 103
8676: PUSH
8677: LD_INT 104
8679: PUSH
8680: LD_INT 105
8682: PUSH
8683: LD_INT 106
8685: PUSH
8686: LD_INT 107
8688: PUSH
8689: LD_INT 108
8691: PUSH
8692: LD_INT 109
8694: PUSH
8695: LD_INT 110
8697: PUSH
8698: LD_INT 111
8700: PUSH
8701: LD_INT 112
8703: PUSH
8704: LD_INT 113
8706: PUSH
8707: LD_INT 114
8709: PUSH
8710: LD_INT 116
8712: PUSH
8713: LD_INT 117
8715: PUSH
8716: LD_INT 118
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: ST_TO_ADDR
8742: GO 9141
8744: LD_INT 18
8746: DOUBLE
8747: EQUAL
8748: IFTRUE 8752
8750: GO 8900
8752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8753: LD_ADDR_VAR 0 2
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: LD_INT 4
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 7
8769: PUSH
8770: LD_INT 11
8772: PUSH
8773: LD_INT 12
8775: PUSH
8776: LD_INT 15
8778: PUSH
8779: LD_INT 16
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 26
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 31
8805: PUSH
8806: LD_INT 32
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 34
8814: PUSH
8815: LD_INT 35
8817: PUSH
8818: LD_INT 36
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 101
8846: PUSH
8847: LD_INT 102
8849: PUSH
8850: LD_INT 103
8852: PUSH
8853: LD_INT 106
8855: PUSH
8856: LD_INT 108
8858: PUSH
8859: LD_INT 112
8861: PUSH
8862: LD_INT 113
8864: PUSH
8865: LD_INT 114
8867: PUSH
8868: LD_INT 115
8870: PUSH
8871: LD_INT 116
8873: PUSH
8874: LD_INT 117
8876: PUSH
8877: LD_INT 118
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: ST_TO_ADDR
8898: GO 9141
8900: LD_INT 19
8902: DOUBLE
8903: EQUAL
8904: IFTRUE 8908
8906: GO 9140
8908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: LD_INT 2
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 4
8925: PUSH
8926: LD_INT 5
8928: PUSH
8929: LD_INT 6
8931: PUSH
8932: LD_INT 7
8934: PUSH
8935: LD_INT 8
8937: PUSH
8938: LD_INT 9
8940: PUSH
8941: LD_INT 10
8943: PUSH
8944: LD_INT 11
8946: PUSH
8947: LD_INT 12
8949: PUSH
8950: LD_INT 13
8952: PUSH
8953: LD_INT 14
8955: PUSH
8956: LD_INT 15
8958: PUSH
8959: LD_INT 16
8961: PUSH
8962: LD_INT 17
8964: PUSH
8965: LD_INT 18
8967: PUSH
8968: LD_INT 19
8970: PUSH
8971: LD_INT 20
8973: PUSH
8974: LD_INT 21
8976: PUSH
8977: LD_INT 22
8979: PUSH
8980: LD_INT 23
8982: PUSH
8983: LD_INT 24
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 27
8994: PUSH
8995: LD_INT 28
8997: PUSH
8998: LD_INT 29
9000: PUSH
9001: LD_INT 30
9003: PUSH
9004: LD_INT 31
9006: PUSH
9007: LD_INT 32
9009: PUSH
9010: LD_INT 33
9012: PUSH
9013: LD_INT 34
9015: PUSH
9016: LD_INT 35
9018: PUSH
9019: LD_INT 36
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 101
9062: PUSH
9063: LD_INT 102
9065: PUSH
9066: LD_INT 103
9068: PUSH
9069: LD_INT 104
9071: PUSH
9072: LD_INT 105
9074: PUSH
9075: LD_INT 106
9077: PUSH
9078: LD_INT 107
9080: PUSH
9081: LD_INT 108
9083: PUSH
9084: LD_INT 109
9086: PUSH
9087: LD_INT 110
9089: PUSH
9090: LD_INT 111
9092: PUSH
9093: LD_INT 112
9095: PUSH
9096: LD_INT 113
9098: PUSH
9099: LD_INT 114
9101: PUSH
9102: LD_INT 115
9104: PUSH
9105: LD_INT 116
9107: PUSH
9108: LD_INT 117
9110: PUSH
9111: LD_INT 118
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: ST_TO_ADDR
9138: GO 9141
9140: POP
// end else
9141: GO 9372
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9143: LD_ADDR_VAR 0 2
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: LD_INT 2
9153: PUSH
9154: LD_INT 3
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: LD_INT 5
9162: PUSH
9163: LD_INT 6
9165: PUSH
9166: LD_INT 7
9168: PUSH
9169: LD_INT 8
9171: PUSH
9172: LD_INT 9
9174: PUSH
9175: LD_INT 10
9177: PUSH
9178: LD_INT 11
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: LD_INT 13
9186: PUSH
9187: LD_INT 14
9189: PUSH
9190: LD_INT 15
9192: PUSH
9193: LD_INT 16
9195: PUSH
9196: LD_INT 17
9198: PUSH
9199: LD_INT 18
9201: PUSH
9202: LD_INT 19
9204: PUSH
9205: LD_INT 20
9207: PUSH
9208: LD_INT 21
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 23
9216: PUSH
9217: LD_INT 24
9219: PUSH
9220: LD_INT 25
9222: PUSH
9223: LD_INT 26
9225: PUSH
9226: LD_INT 27
9228: PUSH
9229: LD_INT 28
9231: PUSH
9232: LD_INT 29
9234: PUSH
9235: LD_INT 30
9237: PUSH
9238: LD_INT 31
9240: PUSH
9241: LD_INT 32
9243: PUSH
9244: LD_INT 33
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 35
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 101
9296: PUSH
9297: LD_INT 102
9299: PUSH
9300: LD_INT 103
9302: PUSH
9303: LD_INT 104
9305: PUSH
9306: LD_INT 105
9308: PUSH
9309: LD_INT 106
9311: PUSH
9312: LD_INT 107
9314: PUSH
9315: LD_INT 108
9317: PUSH
9318: LD_INT 109
9320: PUSH
9321: LD_INT 110
9323: PUSH
9324: LD_INT 111
9326: PUSH
9327: LD_INT 112
9329: PUSH
9330: LD_INT 113
9332: PUSH
9333: LD_INT 114
9335: PUSH
9336: LD_INT 115
9338: PUSH
9339: LD_INT 116
9341: PUSH
9342: LD_INT 117
9344: PUSH
9345: LD_INT 118
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: ST_TO_ADDR
// if result then
9372: LD_VAR 0 2
9376: IFFALSE 10162
// begin normal :=  ;
9378: LD_ADDR_VAR 0 5
9382: PUSH
9383: LD_STRING 
9385: ST_TO_ADDR
// hardcore :=  ;
9386: LD_ADDR_VAR 0 6
9390: PUSH
9391: LD_STRING 
9393: ST_TO_ADDR
// active :=  ;
9394: LD_ADDR_VAR 0 7
9398: PUSH
9399: LD_STRING 
9401: ST_TO_ADDR
// for i = 1 to normalCounter do
9402: LD_ADDR_VAR 0 8
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_EXP 41
9416: PUSH
9417: FOR_TO
9418: IFFALSE 9519
// begin tmp := 0 ;
9420: LD_ADDR_VAR 0 3
9424: PUSH
9425: LD_STRING 0
9427: ST_TO_ADDR
// if result [ 1 ] then
9428: LD_VAR 0 2
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: IFFALSE 9501
// if result [ 1 ] [ 1 ] = i then
9438: LD_VAR 0 2
9442: PUSH
9443: LD_INT 1
9445: ARRAY
9446: PUSH
9447: LD_INT 1
9449: ARRAY
9450: PUSH
9451: LD_VAR 0 8
9455: EQUAL
9456: IFFALSE 9501
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9458: LD_ADDR_VAR 0 2
9462: PUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: CALL_OW 3
9487: PPUSH
9488: CALL_OW 1
9492: ST_TO_ADDR
// tmp := 1 ;
9493: LD_ADDR_VAR 0 3
9497: PUSH
9498: LD_STRING 1
9500: ST_TO_ADDR
// end ; normal := normal & tmp ;
9501: LD_ADDR_VAR 0 5
9505: PUSH
9506: LD_VAR 0 5
9510: PUSH
9511: LD_VAR 0 3
9515: STR
9516: ST_TO_ADDR
// end ;
9517: GO 9417
9519: POP
9520: POP
// for i = 1 to hardcoreCounter do
9521: LD_ADDR_VAR 0 8
9525: PUSH
9526: DOUBLE
9527: LD_INT 1
9529: DEC
9530: ST_TO_ADDR
9531: LD_EXP 42
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9642
// begin tmp := 0 ;
9539: LD_ADDR_VAR 0 3
9543: PUSH
9544: LD_STRING 0
9546: ST_TO_ADDR
// if result [ 2 ] then
9547: LD_VAR 0 2
9551: PUSH
9552: LD_INT 2
9554: ARRAY
9555: IFFALSE 9624
// if result [ 2 ] [ 1 ] = 100 + i then
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 2
9564: ARRAY
9565: PUSH
9566: LD_INT 1
9568: ARRAY
9569: PUSH
9570: LD_INT 100
9572: PUSH
9573: LD_VAR 0 8
9577: PLUS
9578: EQUAL
9579: IFFALSE 9624
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9581: LD_ADDR_VAR 0 2
9585: PUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: LD_INT 2
9593: PPUSH
9594: LD_VAR 0 2
9598: PUSH
9599: LD_INT 2
9601: ARRAY
9602: PPUSH
9603: LD_INT 1
9605: PPUSH
9606: CALL_OW 3
9610: PPUSH
9611: CALL_OW 1
9615: ST_TO_ADDR
// tmp := 1 ;
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: LD_STRING 1
9623: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9624: LD_ADDR_VAR 0 6
9628: PUSH
9629: LD_VAR 0 6
9633: PUSH
9634: LD_VAR 0 3
9638: STR
9639: ST_TO_ADDR
// end ;
9640: GO 9536
9642: POP
9643: POP
// if isGameLoad then
9644: LD_VAR 0 1
9648: IFFALSE 10123
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9650: LD_ADDR_VAR 0 4
9654: PUSH
9655: LD_EXP 45
9659: PUSH
9660: LD_EXP 44
9664: PUSH
9665: LD_EXP 46
9669: PUSH
9670: LD_EXP 43
9674: PUSH
9675: LD_EXP 47
9679: PUSH
9680: LD_EXP 48
9684: PUSH
9685: LD_EXP 49
9689: PUSH
9690: LD_EXP 50
9694: PUSH
9695: LD_EXP 51
9699: PUSH
9700: LD_EXP 52
9704: PUSH
9705: LD_EXP 53
9709: PUSH
9710: LD_EXP 54
9714: PUSH
9715: LD_EXP 55
9719: PUSH
9720: LD_EXP 56
9724: PUSH
9725: LD_EXP 64
9729: PUSH
9730: LD_EXP 65
9734: PUSH
9735: LD_EXP 66
9739: PUSH
9740: LD_EXP 67
9744: PUSH
9745: LD_EXP 69
9749: PUSH
9750: LD_EXP 70
9754: PUSH
9755: LD_EXP 71
9759: PUSH
9760: LD_EXP 74
9764: PUSH
9765: LD_EXP 76
9769: PUSH
9770: LD_EXP 77
9774: PUSH
9775: LD_EXP 78
9779: PUSH
9780: LD_EXP 80
9784: PUSH
9785: LD_EXP 81
9789: PUSH
9790: LD_EXP 84
9794: PUSH
9795: LD_EXP 85
9799: PUSH
9800: LD_EXP 86
9804: PUSH
9805: LD_EXP 87
9809: PUSH
9810: LD_EXP 88
9814: PUSH
9815: LD_EXP 89
9819: PUSH
9820: LD_EXP 90
9824: PUSH
9825: LD_EXP 91
9829: PUSH
9830: LD_EXP 92
9834: PUSH
9835: LD_EXP 57
9839: PUSH
9840: LD_EXP 58
9844: PUSH
9845: LD_EXP 61
9849: PUSH
9850: LD_EXP 62
9854: PUSH
9855: LD_EXP 63
9859: PUSH
9860: LD_EXP 59
9864: PUSH
9865: LD_EXP 60
9869: PUSH
9870: LD_EXP 68
9874: PUSH
9875: LD_EXP 72
9879: PUSH
9880: LD_EXP 73
9884: PUSH
9885: LD_EXP 75
9889: PUSH
9890: LD_EXP 79
9894: PUSH
9895: LD_EXP 82
9899: PUSH
9900: LD_EXP 83
9904: PUSH
9905: LD_EXP 93
9909: PUSH
9910: LD_EXP 94
9914: PUSH
9915: LD_EXP 95
9919: PUSH
9920: LD_EXP 96
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: ST_TO_ADDR
// tmp :=  ;
9981: LD_ADDR_VAR 0 3
9985: PUSH
9986: LD_STRING 
9988: ST_TO_ADDR
// for i = 1 to normalCounter do
9989: LD_ADDR_VAR 0 8
9993: PUSH
9994: DOUBLE
9995: LD_INT 1
9997: DEC
9998: ST_TO_ADDR
9999: LD_EXP 41
10003: PUSH
10004: FOR_TO
10005: IFFALSE 10041
// begin if flags [ i ] then
10007: LD_VAR 0 4
10011: PUSH
10012: LD_VAR 0 8
10016: ARRAY
10017: IFFALSE 10039
// tmp := tmp & i & ; ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_VAR 0 3
10028: PUSH
10029: LD_VAR 0 8
10033: STR
10034: PUSH
10035: LD_STRING ;
10037: STR
10038: ST_TO_ADDR
// end ;
10039: GO 10004
10041: POP
10042: POP
// for i = 1 to hardcoreCounter do
10043: LD_ADDR_VAR 0 8
10047: PUSH
10048: DOUBLE
10049: LD_INT 1
10051: DEC
10052: ST_TO_ADDR
10053: LD_EXP 42
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10105
// begin if flags [ normalCounter + i ] then
10061: LD_VAR 0 4
10065: PUSH
10066: LD_EXP 41
10070: PUSH
10071: LD_VAR 0 8
10075: PLUS
10076: ARRAY
10077: IFFALSE 10103
// tmp := tmp & ( 100 + i ) & ; ;
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_VAR 0 3
10088: PUSH
10089: LD_INT 100
10091: PUSH
10092: LD_VAR 0 8
10096: PLUS
10097: STR
10098: PUSH
10099: LD_STRING ;
10101: STR
10102: ST_TO_ADDR
// end ;
10103: GO 10058
10105: POP
10106: POP
// if tmp then
10107: LD_VAR 0 3
10111: IFFALSE 10123
// active := tmp ;
10113: LD_ADDR_VAR 0 7
10117: PUSH
10118: LD_VAR 0 3
10122: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10123: LD_STRING getStreamItemsFromMission("
10125: PUSH
10126: LD_VAR 0 5
10130: STR
10131: PUSH
10132: LD_STRING ","
10134: STR
10135: PUSH
10136: LD_VAR 0 6
10140: STR
10141: PUSH
10142: LD_STRING ","
10144: STR
10145: PUSH
10146: LD_VAR 0 7
10150: STR
10151: PUSH
10152: LD_STRING ")
10154: STR
10155: PPUSH
10156: CALL_OW 559
// end else
10160: GO 10169
// ToLua ( getStreamItemsFromMission("","","") ) ;
10162: LD_STRING getStreamItemsFromMission("","","")
10164: PPUSH
10165: CALL_OW 559
// end ;
10169: LD_VAR 0 2
10173: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10174: LD_EXP 40
10178: PUSH
10179: LD_EXP 45
10183: AND
10184: IFFALSE 10308
10186: GO 10188
10188: DISABLE
10189: LD_INT 0
10191: PPUSH
10192: PPUSH
// begin enable ;
10193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10194: LD_ADDR_VAR 0 2
10198: PUSH
10199: LD_INT 22
10201: PUSH
10202: LD_OWVAR 2
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: LD_INT 34
10216: PUSH
10217: LD_INT 7
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 45
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 28
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 47
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: ST_TO_ADDR
// if not tmp then
10270: LD_VAR 0 2
10274: NOT
10275: IFFALSE 10279
// exit ;
10277: GO 10308
// for i in tmp do
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_VAR 0 2
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10306
// begin SetLives ( i , 0 ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_INT 0
10299: PPUSH
10300: CALL_OW 234
// end ;
10304: GO 10289
10306: POP
10307: POP
// end ;
10308: PPOPN 2
10310: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10311: LD_EXP 40
10315: PUSH
10316: LD_EXP 46
10320: AND
10321: IFFALSE 10405
10323: GO 10325
10325: DISABLE
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// begin enable ;
10330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10331: LD_ADDR_VAR 0 2
10335: PUSH
10336: LD_INT 22
10338: PUSH
10339: LD_OWVAR 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 32
10350: PUSH
10351: LD_INT 3
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 69
10366: ST_TO_ADDR
// if not tmp then
10367: LD_VAR 0 2
10371: NOT
10372: IFFALSE 10376
// exit ;
10374: GO 10405
// for i in tmp do
10376: LD_ADDR_VAR 0 1
10380: PUSH
10381: LD_VAR 0 2
10385: PUSH
10386: FOR_IN
10387: IFFALSE 10403
// begin SetLives ( i , 0 ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_INT 0
10396: PPUSH
10397: CALL_OW 234
// end ;
10401: GO 10386
10403: POP
10404: POP
// end ;
10405: PPOPN 2
10407: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10408: LD_EXP 40
10412: PUSH
10413: LD_EXP 43
10417: AND
10418: IFFALSE 10511
10420: GO 10422
10422: DISABLE
10423: LD_INT 0
10425: PPUSH
// begin enable ;
10426: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10427: LD_ADDR_VAR 0 1
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_OWVAR 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 5
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 25
10459: PUSH
10460: LD_INT 9
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 25
10469: PUSH
10470: LD_INT 8
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: PUSH
10492: FOR_IN
10493: IFFALSE 10509
// begin SetClass ( i , 1 ) ;
10495: LD_VAR 0 1
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 336
// end ;
10507: GO 10492
10509: POP
10510: POP
// end ;
10511: PPOPN 1
10513: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10514: LD_EXP 40
10518: PUSH
10519: LD_EXP 44
10523: AND
10524: PUSH
10525: LD_OWVAR 65
10529: PUSH
10530: LD_INT 7
10532: LESS
10533: AND
10534: IFFALSE 10548
10536: GO 10538
10538: DISABLE
// begin enable ;
10539: ENABLE
// game_speed := 7 ;
10540: LD_ADDR_OWVAR 65
10544: PUSH
10545: LD_INT 7
10547: ST_TO_ADDR
// end ;
10548: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10549: LD_EXP 40
10553: PUSH
10554: LD_EXP 47
10558: AND
10559: IFFALSE 10761
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_INT 81
10576: PUSH
10577: LD_OWVAR 2
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 69
10604: ST_TO_ADDR
// if not tmp then
10605: LD_VAR 0 3
10609: NOT
10610: IFFALSE 10614
// exit ;
10612: GO 10761
// if tmp > 5 then
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 5
10621: GREATER
10622: IFFALSE 10634
// k := 5 else
10624: LD_ADDR_VAR 0 2
10628: PUSH
10629: LD_INT 5
10631: ST_TO_ADDR
10632: GO 10644
// k := tmp ;
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: LD_VAR 0 3
10643: ST_TO_ADDR
// for i := 1 to k do
10644: LD_ADDR_VAR 0 1
10648: PUSH
10649: DOUBLE
10650: LD_INT 1
10652: DEC
10653: ST_TO_ADDR
10654: LD_VAR 0 2
10658: PUSH
10659: FOR_TO
10660: IFFALSE 10759
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10662: LD_VAR 0 3
10666: PUSH
10667: LD_VAR 0 1
10671: ARRAY
10672: PPUSH
10673: LD_VAR 0 1
10677: PUSH
10678: LD_INT 4
10680: MOD
10681: PUSH
10682: LD_INT 1
10684: PLUS
10685: PPUSH
10686: CALL_OW 259
10690: PUSH
10691: LD_INT 10
10693: LESS
10694: IFFALSE 10757
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10696: LD_VAR 0 3
10700: PUSH
10701: LD_VAR 0 1
10705: ARRAY
10706: PPUSH
10707: LD_VAR 0 1
10711: PUSH
10712: LD_INT 4
10714: MOD
10715: PUSH
10716: LD_INT 1
10718: PLUS
10719: PPUSH
10720: LD_VAR 0 3
10724: PUSH
10725: LD_VAR 0 1
10729: ARRAY
10730: PPUSH
10731: LD_VAR 0 1
10735: PUSH
10736: LD_INT 4
10738: MOD
10739: PUSH
10740: LD_INT 1
10742: PLUS
10743: PPUSH
10744: CALL_OW 259
10748: PUSH
10749: LD_INT 1
10751: PLUS
10752: PPUSH
10753: CALL_OW 237
10757: GO 10659
10759: POP
10760: POP
// end ;
10761: PPOPN 3
10763: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10764: LD_EXP 40
10768: PUSH
10769: LD_EXP 48
10773: AND
10774: IFFALSE 10794
10776: GO 10778
10778: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10779: LD_INT 4
10781: PPUSH
10782: LD_OWVAR 2
10786: PPUSH
10787: LD_INT 0
10789: PPUSH
10790: CALL_OW 324
10794: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 77
10804: AND
10805: IFFALSE 10825
10807: GO 10809
10809: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10810: LD_INT 19
10812: PPUSH
10813: LD_OWVAR 2
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 324
10825: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10826: LD_EXP 40
10830: PUSH
10831: LD_EXP 49
10835: AND
10836: IFFALSE 10938
10838: GO 10840
10840: DISABLE
10841: LD_INT 0
10843: PPUSH
10844: PPUSH
// begin enable ;
10845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_INT 22
10853: PUSH
10854: LD_OWVAR 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 2
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 11
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 34
10878: PUSH
10879: LD_INT 30
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: ST_TO_ADDR
// if not tmp then
10900: LD_VAR 0 2
10904: NOT
10905: IFFALSE 10909
// exit ;
10907: GO 10938
// for i in tmp do
10909: LD_ADDR_VAR 0 1
10913: PUSH
10914: LD_VAR 0 2
10918: PUSH
10919: FOR_IN
10920: IFFALSE 10936
// begin SetLives ( i , 0 ) ;
10922: LD_VAR 0 1
10926: PPUSH
10927: LD_INT 0
10929: PPUSH
10930: CALL_OW 234
// end ;
10934: GO 10919
10936: POP
10937: POP
// end ;
10938: PPOPN 2
10940: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10941: LD_EXP 40
10945: PUSH
10946: LD_EXP 50
10950: AND
10951: IFFALSE 10971
10953: GO 10955
10955: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10956: LD_INT 32
10958: PPUSH
10959: LD_OWVAR 2
10963: PPUSH
10964: LD_INT 0
10966: PPUSH
10967: CALL_OW 324
10971: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10972: LD_EXP 40
10976: PUSH
10977: LD_EXP 51
10981: AND
10982: IFFALSE 11163
10984: GO 10986
10986: DISABLE
10987: LD_INT 0
10989: PPUSH
10990: PPUSH
10991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: LD_INT 22
10999: PUSH
11000: LD_OWVAR 2
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 33
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: ST_TO_ADDR
// if not tmp then
11028: LD_VAR 0 2
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11163
// side := 0 ;
11037: LD_ADDR_VAR 0 3
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// for i := 1 to 8 do
11045: LD_ADDR_VAR 0 1
11049: PUSH
11050: DOUBLE
11051: LD_INT 1
11053: DEC
11054: ST_TO_ADDR
11055: LD_INT 8
11057: PUSH
11058: FOR_TO
11059: IFFALSE 11107
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11061: LD_OWVAR 2
11065: PUSH
11066: LD_VAR 0 1
11070: NONEQUAL
11071: PUSH
11072: LD_OWVAR 2
11076: PPUSH
11077: LD_VAR 0 1
11081: PPUSH
11082: CALL_OW 81
11086: PUSH
11087: LD_INT 2
11089: EQUAL
11090: AND
11091: IFFALSE 11105
// begin side := i ;
11093: LD_ADDR_VAR 0 3
11097: PUSH
11098: LD_VAR 0 1
11102: ST_TO_ADDR
// break ;
11103: GO 11107
// end ;
11105: GO 11058
11107: POP
11108: POP
// if not side then
11109: LD_VAR 0 3
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11163
// for i := 1 to tmp do
11118: LD_ADDR_VAR 0 1
11122: PUSH
11123: DOUBLE
11124: LD_INT 1
11126: DEC
11127: ST_TO_ADDR
11128: LD_VAR 0 2
11132: PUSH
11133: FOR_TO
11134: IFFALSE 11161
// if Prob ( 60 ) then
11136: LD_INT 60
11138: PPUSH
11139: CALL_OW 13
11143: IFFALSE 11159
// SetSide ( i , side ) ;
11145: LD_VAR 0 1
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: CALL_OW 235
11159: GO 11133
11161: POP
11162: POP
// end ;
11163: PPOPN 3
11165: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11166: LD_EXP 40
11170: PUSH
11171: LD_EXP 53
11175: AND
11176: IFFALSE 11295
11178: GO 11180
11180: DISABLE
11181: LD_INT 0
11183: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11184: LD_ADDR_VAR 0 1
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_OWVAR 2
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 21
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 3
11213: PUSH
11214: LD_INT 23
11216: PUSH
11217: LD_INT 0
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 69
11237: PUSH
11238: FOR_IN
11239: IFFALSE 11293
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11241: LD_VAR 0 1
11245: PPUSH
11246: CALL_OW 257
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: IN
11269: IFFALSE 11291
// SetClass ( un , rand ( 1 , 4 ) ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: LD_INT 4
11281: PPUSH
11282: CALL_OW 12
11286: PPUSH
11287: CALL_OW 336
11291: GO 11238
11293: POP
11294: POP
// end ;
11295: PPOPN 1
11297: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11298: LD_EXP 40
11302: PUSH
11303: LD_EXP 52
11307: AND
11308: IFFALSE 11387
11310: GO 11312
11312: DISABLE
11313: LD_INT 0
11315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11316: LD_ADDR_VAR 0 1
11320: PUSH
11321: LD_INT 22
11323: PUSH
11324: LD_OWVAR 2
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 21
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// if not tmp then
11352: LD_VAR 0 1
11356: NOT
11357: IFFALSE 11361
// exit ;
11359: GO 11387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11361: LD_VAR 0 1
11365: PUSH
11366: LD_INT 1
11368: PPUSH
11369: LD_VAR 0 1
11373: PPUSH
11374: CALL_OW 12
11378: ARRAY
11379: PPUSH
11380: LD_INT 100
11382: PPUSH
11383: CALL_OW 234
// end ;
11387: PPOPN 1
11389: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11390: LD_EXP 40
11394: PUSH
11395: LD_EXP 54
11399: AND
11400: IFFALSE 11498
11402: GO 11404
11404: DISABLE
11405: LD_INT 0
11407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11408: LD_ADDR_VAR 0 1
11412: PUSH
11413: LD_INT 22
11415: PUSH
11416: LD_OWVAR 2
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 69
11443: ST_TO_ADDR
// if not tmp then
11444: LD_VAR 0 1
11448: NOT
11449: IFFALSE 11453
// exit ;
11451: GO 11498
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11453: LD_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 12
11470: ARRAY
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: LD_INT 4
11477: PPUSH
11478: CALL_OW 12
11482: PPUSH
11483: LD_INT 3000
11485: PPUSH
11486: LD_INT 9000
11488: PPUSH
11489: CALL_OW 12
11493: PPUSH
11494: CALL_OW 492
// end ;
11498: PPOPN 1
11500: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11501: LD_EXP 40
11505: PUSH
11506: LD_EXP 55
11510: AND
11511: IFFALSE 11531
11513: GO 11515
11515: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11516: LD_INT 1
11518: PPUSH
11519: LD_OWVAR 2
11523: PPUSH
11524: LD_INT 0
11526: PPUSH
11527: CALL_OW 324
11531: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11532: LD_EXP 40
11536: PUSH
11537: LD_EXP 56
11541: AND
11542: IFFALSE 11625
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11551: LD_ADDR_VAR 0 2
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_OWVAR 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 21
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: ST_TO_ADDR
// if not tmp then
11587: LD_VAR 0 2
11591: NOT
11592: IFFALSE 11596
// exit ;
11594: GO 11625
// for i in tmp do
11596: LD_ADDR_VAR 0 1
11600: PUSH
11601: LD_VAR 0 2
11605: PUSH
11606: FOR_IN
11607: IFFALSE 11623
// SetBLevel ( i , 10 ) ;
11609: LD_VAR 0 1
11613: PPUSH
11614: LD_INT 10
11616: PPUSH
11617: CALL_OW 241
11621: GO 11606
11623: POP
11624: POP
// end ;
11625: PPOPN 2
11627: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11628: LD_EXP 40
11632: PUSH
11633: LD_EXP 57
11637: AND
11638: IFFALSE 11749
11640: GO 11642
11642: DISABLE
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
11647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11648: LD_ADDR_VAR 0 3
11652: PUSH
11653: LD_INT 22
11655: PUSH
11656: LD_OWVAR 2
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 25
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 69
11683: ST_TO_ADDR
// if not tmp then
11684: LD_VAR 0 3
11688: NOT
11689: IFFALSE 11693
// exit ;
11691: GO 11749
// un := tmp [ rand ( 1 , tmp ) ] ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_VAR 0 3
11702: PUSH
11703: LD_INT 1
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: CALL_OW 12
11715: ARRAY
11716: ST_TO_ADDR
// if Crawls ( un ) then
11717: LD_VAR 0 2
11721: PPUSH
11722: CALL_OW 318
11726: IFFALSE 11737
// ComWalk ( un ) ;
11728: LD_VAR 0 2
11732: PPUSH
11733: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_INT 5
11744: PPUSH
11745: CALL_OW 336
// end ;
11749: PPOPN 3
11751: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11752: LD_EXP 40
11756: PUSH
11757: LD_EXP 58
11761: AND
11762: PUSH
11763: LD_OWVAR 67
11767: PUSH
11768: LD_INT 4
11770: LESS
11771: AND
11772: IFFALSE 11791
11774: GO 11776
11776: DISABLE
// begin Difficulty := Difficulty + 1 ;
11777: LD_ADDR_OWVAR 67
11781: PUSH
11782: LD_OWVAR 67
11786: PUSH
11787: LD_INT 1
11789: PLUS
11790: ST_TO_ADDR
// end ;
11791: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11792: LD_EXP 40
11796: PUSH
11797: LD_EXP 59
11801: AND
11802: IFFALSE 11905
11804: GO 11806
11806: DISABLE
11807: LD_INT 0
11809: PPUSH
// begin for i := 1 to 5 do
11810: LD_ADDR_VAR 0 1
11814: PUSH
11815: DOUBLE
11816: LD_INT 1
11818: DEC
11819: ST_TO_ADDR
11820: LD_INT 5
11822: PUSH
11823: FOR_TO
11824: IFFALSE 11903
// begin uc_nation := nation_nature ;
11826: LD_ADDR_OWVAR 21
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// uc_side := 0 ;
11834: LD_ADDR_OWVAR 20
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11842: LD_ADDR_OWVAR 29
11846: PUSH
11847: LD_INT 12
11849: PUSH
11850: LD_INT 12
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: ST_TO_ADDR
// hc_agressivity := 20 ;
11857: LD_ADDR_OWVAR 35
11861: PUSH
11862: LD_INT 20
11864: ST_TO_ADDR
// hc_class := class_tiger ;
11865: LD_ADDR_OWVAR 28
11869: PUSH
11870: LD_INT 14
11872: ST_TO_ADDR
// hc_gallery :=  ;
11873: LD_ADDR_OWVAR 33
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// hc_name :=  ;
11881: LD_ADDR_OWVAR 26
11885: PUSH
11886: LD_STRING 
11888: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11889: CALL_OW 44
11893: PPUSH
11894: LD_INT 0
11896: PPUSH
11897: CALL_OW 51
// end ;
11901: GO 11823
11903: POP
11904: POP
// end ;
11905: PPOPN 1
11907: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11908: LD_EXP 40
11912: PUSH
11913: LD_EXP 60
11917: AND
11918: IFFALSE 11927
11920: GO 11922
11922: DISABLE
// StreamSibBomb ;
11923: CALL 11928 0 0
11927: END
// export function StreamSibBomb ; var i , x , y ; begin
11928: LD_INT 0
11930: PPUSH
11931: PPUSH
11932: PPUSH
11933: PPUSH
// result := false ;
11934: LD_ADDR_VAR 0 1
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// for i := 1 to 16 do
11942: LD_ADDR_VAR 0 2
11946: PUSH
11947: DOUBLE
11948: LD_INT 1
11950: DEC
11951: ST_TO_ADDR
11952: LD_INT 16
11954: PUSH
11955: FOR_TO
11956: IFFALSE 12155
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 10
11965: PUSH
11966: LD_INT 20
11968: PUSH
11969: LD_INT 30
11971: PUSH
11972: LD_INT 40
11974: PUSH
11975: LD_INT 50
11977: PUSH
11978: LD_INT 60
11980: PUSH
11981: LD_INT 70
11983: PUSH
11984: LD_INT 80
11986: PUSH
11987: LD_INT 90
11989: PUSH
11990: LD_INT 100
11992: PUSH
11993: LD_INT 110
11995: PUSH
11996: LD_INT 120
11998: PUSH
11999: LD_INT 130
12001: PUSH
12002: LD_INT 140
12004: PUSH
12005: LD_INT 150
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 1
12027: PPUSH
12028: LD_INT 15
12030: PPUSH
12031: CALL_OW 12
12035: ARRAY
12036: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12037: LD_ADDR_VAR 0 4
12041: PUSH
12042: LD_INT 10
12044: PUSH
12045: LD_INT 20
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 40
12053: PUSH
12054: LD_INT 50
12056: PUSH
12057: LD_INT 60
12059: PUSH
12060: LD_INT 70
12062: PUSH
12063: LD_INT 80
12065: PUSH
12066: LD_INT 90
12068: PUSH
12069: LD_INT 100
12071: PUSH
12072: LD_INT 110
12074: PUSH
12075: LD_INT 120
12077: PUSH
12078: LD_INT 130
12080: PUSH
12081: LD_INT 140
12083: PUSH
12084: LD_INT 150
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 1
12106: PPUSH
12107: LD_INT 15
12109: PPUSH
12110: CALL_OW 12
12114: ARRAY
12115: ST_TO_ADDR
// if ValidHex ( x , y ) then
12116: LD_VAR 0 3
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: CALL_OW 488
12130: IFFALSE 12153
// begin result := [ x , y ] ;
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: LD_VAR 0 4
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: ST_TO_ADDR
// break ;
12151: GO 12155
// end ; end ;
12153: GO 11955
12155: POP
12156: POP
// if result then
12157: LD_VAR 0 1
12161: IFFALSE 12221
// begin ToLua ( playSibBomb() ) ;
12163: LD_STRING playSibBomb()
12165: PPUSH
12166: CALL_OW 559
// wait ( 0 0$14 ) ;
12170: LD_INT 490
12172: PPUSH
12173: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12177: LD_VAR 0 1
12181: PUSH
12182: LD_INT 1
12184: ARRAY
12185: PPUSH
12186: LD_VAR 0 1
12190: PUSH
12191: LD_INT 2
12193: ARRAY
12194: PPUSH
12195: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12199: LD_VAR 0 1
12203: PUSH
12204: LD_INT 1
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 2
12215: ARRAY
12216: PPUSH
12217: CALL_OW 429
// end ; end ;
12221: LD_VAR 0 1
12225: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12226: LD_EXP 40
12230: PUSH
12231: LD_EXP 62
12235: AND
12236: IFFALSE 12248
12238: GO 12240
12240: DISABLE
// YouLost (  ) ;
12241: LD_STRING 
12243: PPUSH
12244: CALL_OW 104
12248: END
// every 0 0$1 trigger StreamModeActive and sFog do
12249: LD_EXP 40
12253: PUSH
12254: LD_EXP 61
12258: AND
12259: IFFALSE 12273
12261: GO 12263
12263: DISABLE
// FogOff ( your_side ) ;
12264: LD_OWVAR 2
12268: PPUSH
12269: CALL_OW 344
12273: END
// every 0 0$1 trigger StreamModeActive and sSun do
12274: LD_EXP 40
12278: PUSH
12279: LD_EXP 63
12283: AND
12284: IFFALSE 12312
12286: GO 12288
12288: DISABLE
// begin solar_recharge_percent := 0 ;
12289: LD_ADDR_OWVAR 79
12293: PUSH
12294: LD_INT 0
12296: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12297: LD_INT 10500
12299: PPUSH
12300: CALL_OW 67
// solar_recharge_percent := 100 ;
12304: LD_ADDR_OWVAR 79
12308: PUSH
12309: LD_INT 100
12311: ST_TO_ADDR
// end ;
12312: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12313: LD_EXP 40
12317: PUSH
12318: LD_EXP 64
12322: AND
12323: IFFALSE 12562
12325: GO 12327
12327: DISABLE
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
// begin tmp := [ ] ;
12333: LD_ADDR_VAR 0 3
12337: PUSH
12338: EMPTY
12339: ST_TO_ADDR
// for i := 1 to 6 do
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: DOUBLE
12346: LD_INT 1
12348: DEC
12349: ST_TO_ADDR
12350: LD_INT 6
12352: PUSH
12353: FOR_TO
12354: IFFALSE 12459
// begin uc_nation := nation_nature ;
12356: LD_ADDR_OWVAR 21
12360: PUSH
12361: LD_INT 0
12363: ST_TO_ADDR
// uc_side := 0 ;
12364: LD_ADDR_OWVAR 20
12368: PUSH
12369: LD_INT 0
12371: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12372: LD_ADDR_OWVAR 29
12376: PUSH
12377: LD_INT 12
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: ST_TO_ADDR
// hc_agressivity := 20 ;
12387: LD_ADDR_OWVAR 35
12391: PUSH
12392: LD_INT 20
12394: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12395: LD_ADDR_OWVAR 28
12399: PUSH
12400: LD_INT 17
12402: ST_TO_ADDR
// hc_gallery :=  ;
12403: LD_ADDR_OWVAR 33
12407: PUSH
12408: LD_STRING 
12410: ST_TO_ADDR
// hc_name :=  ;
12411: LD_ADDR_OWVAR 26
12415: PUSH
12416: LD_STRING 
12418: ST_TO_ADDR
// un := CreateHuman ;
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: CALL_OW 44
12428: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12429: LD_VAR 0 2
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 51
// tmp := tmp ^ un ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_VAR 0 3
12450: PUSH
12451: LD_VAR 0 2
12455: ADD
12456: ST_TO_ADDR
// end ;
12457: GO 12353
12459: POP
12460: POP
// repeat wait ( 0 0$1 ) ;
12461: LD_INT 35
12463: PPUSH
12464: CALL_OW 67
// for un in tmp do
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_VAR 0 3
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12553
// begin if IsDead ( un ) then
12481: LD_VAR 0 2
12485: PPUSH
12486: CALL_OW 301
12490: IFFALSE 12510
// begin tmp := tmp diff un ;
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_VAR 0 3
12501: PUSH
12502: LD_VAR 0 2
12506: DIFF
12507: ST_TO_ADDR
// continue ;
12508: GO 12478
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12510: LD_VAR 0 2
12514: PPUSH
12515: LD_INT 3
12517: PUSH
12518: LD_INT 22
12520: PUSH
12521: LD_INT 0
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: PPUSH
12537: LD_VAR 0 2
12541: PPUSH
12542: CALL_OW 74
12546: PPUSH
12547: CALL_OW 115
// end ;
12551: GO 12478
12553: POP
12554: POP
// until not tmp ;
12555: LD_VAR 0 3
12559: NOT
12560: IFFALSE 12461
// end ;
12562: PPOPN 3
12564: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12565: LD_EXP 40
12569: PUSH
12570: LD_EXP 65
12574: AND
12575: IFFALSE 12629
12577: GO 12579
12579: DISABLE
// begin ToLua ( displayTroll(); ) ;
12580: LD_STRING displayTroll();
12582: PPUSH
12583: CALL_OW 559
// wait ( 3 3$00 ) ;
12587: LD_INT 6300
12589: PPUSH
12590: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12594: LD_STRING hideTroll();
12596: PPUSH
12597: CALL_OW 559
// wait ( 1 1$00 ) ;
12601: LD_INT 2100
12603: PPUSH
12604: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12608: LD_STRING displayTroll();
12610: PPUSH
12611: CALL_OW 559
// wait ( 1 1$00 ) ;
12615: LD_INT 2100
12617: PPUSH
12618: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12622: LD_STRING hideTroll();
12624: PPUSH
12625: CALL_OW 559
// end ;
12629: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12630: LD_EXP 40
12634: PUSH
12635: LD_EXP 66
12639: AND
12640: IFFALSE 12703
12642: GO 12644
12644: DISABLE
12645: LD_INT 0
12647: PPUSH
// begin p := 0 ;
12648: LD_ADDR_VAR 0 1
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// repeat game_speed := 1 ;
12656: LD_ADDR_OWVAR 65
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12664: LD_INT 35
12666: PPUSH
12667: CALL_OW 67
// p := p + 1 ;
12671: LD_ADDR_VAR 0 1
12675: PUSH
12676: LD_VAR 0 1
12680: PUSH
12681: LD_INT 1
12683: PLUS
12684: ST_TO_ADDR
// until p >= 60 ;
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 60
12692: GREATEREQUAL
12693: IFFALSE 12656
// game_speed := 4 ;
12695: LD_ADDR_OWVAR 65
12699: PUSH
12700: LD_INT 4
12702: ST_TO_ADDR
// end ;
12703: PPOPN 1
12705: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12706: LD_EXP 40
12710: PUSH
12711: LD_EXP 67
12715: AND
12716: IFFALSE 12862
12718: GO 12720
12720: DISABLE
12721: LD_INT 0
12723: PPUSH
12724: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_OWVAR 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 0
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 30
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: ST_TO_ADDR
// if not depot then
12779: LD_VAR 0 1
12783: NOT
12784: IFFALSE 12788
// exit ;
12786: GO 12862
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12788: LD_ADDR_VAR 0 2
12792: PUSH
12793: LD_VAR 0 1
12797: PUSH
12798: LD_INT 1
12800: PPUSH
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 12
12810: ARRAY
12811: PPUSH
12812: CALL_OW 274
12816: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12817: LD_VAR 0 2
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: LD_INT 0
12827: PPUSH
12828: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12832: LD_VAR 0 2
12836: PPUSH
12837: LD_INT 2
12839: PPUSH
12840: LD_INT 0
12842: PPUSH
12843: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_INT 3
12854: PPUSH
12855: LD_INT 0
12857: PPUSH
12858: CALL_OW 277
// end ;
12862: PPOPN 2
12864: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12865: LD_EXP 40
12869: PUSH
12870: LD_EXP 68
12874: AND
12875: IFFALSE 12972
12877: GO 12879
12879: DISABLE
12880: LD_INT 0
12882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12883: LD_ADDR_VAR 0 1
12887: PUSH
12888: LD_INT 22
12890: PUSH
12891: LD_OWVAR 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 21
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 23
12915: PUSH
12916: LD_INT 0
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 69
12936: ST_TO_ADDR
// if not tmp then
12937: LD_VAR 0 1
12941: NOT
12942: IFFALSE 12946
// exit ;
12944: GO 12972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_VAR 0 1
12958: PPUSH
12959: CALL_OW 12
12963: ARRAY
12964: PPUSH
12965: LD_INT 200
12967: PPUSH
12968: CALL_OW 234
// end ;
12972: PPOPN 1
12974: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12975: LD_EXP 40
12979: PUSH
12980: LD_EXP 69
12984: AND
12985: IFFALSE 13064
12987: GO 12989
12989: DISABLE
12990: LD_INT 0
12992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_OWVAR 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 21
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: ST_TO_ADDR
// if not tmp then
13029: LD_VAR 0 1
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13038: LD_VAR 0 1
13042: PUSH
13043: LD_INT 1
13045: PPUSH
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 12
13055: ARRAY
13056: PPUSH
13057: LD_INT 60
13059: PPUSH
13060: CALL_OW 234
// end ;
13064: PPOPN 1
13066: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13067: LD_EXP 40
13071: PUSH
13072: LD_EXP 70
13076: AND
13077: IFFALSE 13176
13079: GO 13081
13081: DISABLE
13082: LD_INT 0
13084: PPUSH
13085: PPUSH
// begin enable ;
13086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_OWVAR 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 61
13106: PUSH
13107: EMPTY
13108: LIST
13109: PUSH
13110: LD_INT 33
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: ST_TO_ADDR
// if not tmp then
13130: LD_VAR 0 1
13134: NOT
13135: IFFALSE 13139
// exit ;
13137: GO 13176
// for i in tmp do
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_VAR 0 1
13148: PUSH
13149: FOR_IN
13150: IFFALSE 13174
// if IsControledBy ( i ) then
13152: LD_VAR 0 2
13156: PPUSH
13157: CALL_OW 312
13161: IFFALSE 13172
// ComUnlink ( i ) ;
13163: LD_VAR 0 2
13167: PPUSH
13168: CALL_OW 136
13172: GO 13149
13174: POP
13175: POP
// end ;
13176: PPOPN 2
13178: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13179: LD_EXP 40
13183: PUSH
13184: LD_EXP 71
13188: AND
13189: IFFALSE 13329
13191: GO 13193
13193: DISABLE
13194: LD_INT 0
13196: PPUSH
13197: PPUSH
// begin ToLua ( displayPowell(); ) ;
13198: LD_STRING displayPowell();
13200: PPUSH
13201: CALL_OW 559
// uc_side := 0 ;
13205: LD_ADDR_OWVAR 20
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// uc_nation := 2 ;
13213: LD_ADDR_OWVAR 21
13217: PUSH
13218: LD_INT 2
13220: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13221: LD_ADDR_OWVAR 37
13225: PUSH
13226: LD_INT 14
13228: ST_TO_ADDR
// vc_engine := engine_siberite ;
13229: LD_ADDR_OWVAR 39
13233: PUSH
13234: LD_INT 3
13236: ST_TO_ADDR
// vc_control := control_apeman ;
13237: LD_ADDR_OWVAR 38
13241: PUSH
13242: LD_INT 5
13244: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13245: LD_ADDR_OWVAR 40
13249: PUSH
13250: LD_INT 29
13252: ST_TO_ADDR
// un := CreateVehicle ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: CALL_OW 45
13262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13263: LD_VAR 0 2
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13275: LD_INT 35
13277: PPUSH
13278: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13282: LD_VAR 0 2
13286: PPUSH
13287: LD_INT 22
13289: PUSH
13290: LD_OWVAR 2
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 69
13303: PPUSH
13304: LD_VAR 0 2
13308: PPUSH
13309: CALL_OW 74
13313: PPUSH
13314: CALL_OW 115
// until IsDead ( un ) ;
13318: LD_VAR 0 2
13322: PPUSH
13323: CALL_OW 301
13327: IFFALSE 13275
// end ;
13329: PPOPN 2
13331: END
// every 0 0$1 trigger StreamModeActive and sStu do
13332: LD_EXP 40
13336: PUSH
13337: LD_EXP 79
13341: AND
13342: IFFALSE 13358
13344: GO 13346
13346: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13347: LD_STRING displayStucuk();
13349: PPUSH
13350: CALL_OW 559
// ResetFog ;
13354: CALL_OW 335
// end ;
13358: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13359: LD_EXP 40
13363: PUSH
13364: LD_EXP 72
13368: AND
13369: IFFALSE 13510
13371: GO 13373
13373: DISABLE
13374: LD_INT 0
13376: PPUSH
13377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_OWVAR 2
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 21
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: ST_TO_ADDR
// if not tmp then
13414: LD_VAR 0 2
13418: NOT
13419: IFFALSE 13423
// exit ;
13421: GO 13510
// un := tmp [ rand ( 1 , tmp ) ] ;
13423: LD_ADDR_VAR 0 1
13427: PUSH
13428: LD_VAR 0 2
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_VAR 0 2
13440: PPUSH
13441: CALL_OW 12
13445: ARRAY
13446: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13447: LD_VAR 0 1
13451: PPUSH
13452: LD_INT 0
13454: PPUSH
13455: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13459: LD_VAR 0 1
13463: PPUSH
13464: LD_OWVAR 3
13468: PUSH
13469: LD_VAR 0 1
13473: DIFF
13474: PPUSH
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 74
13484: PPUSH
13485: CALL_OW 115
// wait ( 0 0$20 ) ;
13489: LD_INT 700
13491: PPUSH
13492: CALL_OW 67
// SetSide ( un , your_side ) ;
13496: LD_VAR 0 1
13500: PPUSH
13501: LD_OWVAR 2
13505: PPUSH
13506: CALL_OW 235
// end ;
13510: PPOPN 2
13512: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13513: LD_EXP 40
13517: PUSH
13518: LD_EXP 73
13522: AND
13523: IFFALSE 13629
13525: GO 13527
13527: DISABLE
13528: LD_INT 0
13530: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_OWVAR 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: LD_INT 30
13553: PUSH
13554: LD_INT 0
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 30
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PPUSH
13580: CALL_OW 69
13584: ST_TO_ADDR
// if not depot then
13585: LD_VAR 0 1
13589: NOT
13590: IFFALSE 13594
// exit ;
13592: GO 13629
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13594: LD_VAR 0 1
13598: PUSH
13599: LD_INT 1
13601: ARRAY
13602: PPUSH
13603: CALL_OW 250
13607: PPUSH
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: CALL_OW 251
13621: PPUSH
13622: LD_INT 70
13624: PPUSH
13625: CALL_OW 495
// end ;
13629: PPOPN 1
13631: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13632: LD_EXP 40
13636: PUSH
13637: LD_EXP 74
13641: AND
13642: IFFALSE 13853
13644: GO 13646
13646: DISABLE
13647: LD_INT 0
13649: PPUSH
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13654: LD_ADDR_VAR 0 5
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 5
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13853
// for i in tmp do
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_VAR 0 5
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13851
// begin d := rand ( 0 , 5 ) ;
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: LD_INT 0
13719: PPUSH
13720: LD_INT 5
13722: PPUSH
13723: CALL_OW 12
13727: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13728: LD_ADDR_VAR 0 2
13732: PUSH
13733: LD_VAR 0 1
13737: PPUSH
13738: CALL_OW 250
13742: PPUSH
13743: LD_VAR 0 4
13747: PPUSH
13748: LD_INT 3
13750: PPUSH
13751: LD_INT 12
13753: PPUSH
13754: CALL_OW 12
13758: PPUSH
13759: CALL_OW 272
13763: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13764: LD_ADDR_VAR 0 3
13768: PUSH
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 251
13778: PPUSH
13779: LD_VAR 0 4
13783: PPUSH
13784: LD_INT 3
13786: PPUSH
13787: LD_INT 12
13789: PPUSH
13790: CALL_OW 12
13794: PPUSH
13795: CALL_OW 273
13799: ST_TO_ADDR
// if ValidHex ( x , y ) then
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: CALL_OW 488
13814: IFFALSE 13849
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_VAR 0 2
13825: PPUSH
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 3
13833: PPUSH
13834: LD_INT 6
13836: PPUSH
13837: CALL_OW 12
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 483
// end ;
13849: GO 13709
13851: POP
13852: POP
// end ;
13853: PPOPN 5
13855: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13856: LD_EXP 40
13860: PUSH
13861: LD_EXP 75
13865: AND
13866: IFFALSE 13960
13868: GO 13870
13870: DISABLE
13871: LD_INT 0
13873: PPUSH
13874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_INT 22
13882: PUSH
13883: LD_OWVAR 2
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 32
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: ST_TO_ADDR
// if not tmp then
13922: LD_VAR 0 2
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13960
// for i in tmp do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_VAR 0 2
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13958
// SetFuel ( i , 0 ) ;
13944: LD_VAR 0 1
13948: PPUSH
13949: LD_INT 0
13951: PPUSH
13952: CALL_OW 240
13956: GO 13941
13958: POP
13959: POP
// end ;
13960: PPOPN 2
13962: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13963: LD_EXP 40
13967: PUSH
13968: LD_EXP 76
13972: AND
13973: IFFALSE 14039
13975: GO 13977
13977: DISABLE
13978: LD_INT 0
13980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13981: LD_ADDR_VAR 0 1
13985: PUSH
13986: LD_INT 22
13988: PUSH
13989: LD_OWVAR 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 30
14000: PUSH
14001: LD_INT 29
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PPUSH
14012: CALL_OW 69
14016: ST_TO_ADDR
// if not tmp then
14017: LD_VAR 0 1
14021: NOT
14022: IFFALSE 14026
// exit ;
14024: GO 14039
// DestroyUnit ( tmp [ 1 ] ) ;
14026: LD_VAR 0 1
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: CALL_OW 65
// end ;
14039: PPOPN 1
14041: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14042: LD_EXP 40
14046: PUSH
14047: LD_EXP 78
14051: AND
14052: IFFALSE 14181
14054: GO 14056
14056: DISABLE
14057: LD_INT 0
14059: PPUSH
// begin uc_side := 0 ;
14060: LD_ADDR_OWVAR 20
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// uc_nation := nation_arabian ;
14068: LD_ADDR_OWVAR 21
14072: PUSH
14073: LD_INT 2
14075: ST_TO_ADDR
// hc_gallery :=  ;
14076: LD_ADDR_OWVAR 33
14080: PUSH
14081: LD_STRING 
14083: ST_TO_ADDR
// hc_name :=  ;
14084: LD_ADDR_OWVAR 26
14088: PUSH
14089: LD_STRING 
14091: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14092: LD_INT 1
14094: PPUSH
14095: LD_INT 11
14097: PPUSH
14098: LD_INT 10
14100: PPUSH
14101: CALL_OW 380
// un := CreateHuman ;
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: CALL_OW 44
14114: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14115: LD_VAR 0 1
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14127: LD_INT 35
14129: PPUSH
14130: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_INT 22
14141: PUSH
14142: LD_OWVAR 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: PPUSH
14156: LD_VAR 0 1
14160: PPUSH
14161: CALL_OW 74
14165: PPUSH
14166: CALL_OW 115
// until IsDead ( un ) ;
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 301
14179: IFFALSE 14127
// end ;
14181: PPOPN 1
14183: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14184: LD_EXP 40
14188: PUSH
14189: LD_EXP 80
14193: AND
14194: IFFALSE 14206
14196: GO 14198
14198: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14199: LD_STRING earthquake(getX(game), 0, 32)
14201: PPUSH
14202: CALL_OW 559
14206: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14207: LD_EXP 40
14211: PUSH
14212: LD_EXP 81
14216: AND
14217: IFFALSE 14308
14219: GO 14221
14221: DISABLE
14222: LD_INT 0
14224: PPUSH
// begin enable ;
14225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_OWVAR 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 2
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 33
14255: PUSH
14256: LD_INT 3
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// if not tmp then
14273: LD_VAR 0 1
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 14308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14282: LD_VAR 0 1
14286: PUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_VAR 0 1
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 234
// end ;
14308: PPOPN 1
14310: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14311: LD_EXP 40
14315: PUSH
14316: LD_EXP 82
14320: AND
14321: IFFALSE 14462
14323: GO 14325
14325: DISABLE
14326: LD_INT 0
14328: PPUSH
14329: PPUSH
14330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_OWVAR 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 25
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: ST_TO_ADDR
// if not tmp then
14367: LD_VAR 0 3
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 14462
// un := tmp [ rand ( 1 , tmp ) ] ;
14376: LD_ADDR_VAR 0 2
14380: PUSH
14381: LD_VAR 0 3
14385: PUSH
14386: LD_INT 1
14388: PPUSH
14389: LD_VAR 0 3
14393: PPUSH
14394: CALL_OW 12
14398: ARRAY
14399: ST_TO_ADDR
// if Crawls ( un ) then
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 318
14409: IFFALSE 14420
// ComWalk ( un ) ;
14411: LD_VAR 0 2
14415: PPUSH
14416: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14420: LD_VAR 0 2
14424: PPUSH
14425: LD_INT 9
14427: PPUSH
14428: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14432: LD_INT 28
14434: PPUSH
14435: LD_OWVAR 2
14439: PPUSH
14440: LD_INT 2
14442: PPUSH
14443: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14447: LD_INT 29
14449: PPUSH
14450: LD_OWVAR 2
14454: PPUSH
14455: LD_INT 2
14457: PPUSH
14458: CALL_OW 322
// end ;
14462: PPOPN 3
14464: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14465: LD_EXP 40
14469: PUSH
14470: LD_EXP 83
14474: AND
14475: IFFALSE 14586
14477: GO 14479
14479: DISABLE
14480: LD_INT 0
14482: PPUSH
14483: PPUSH
14484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_OWVAR 2
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 25
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 69
14520: ST_TO_ADDR
// if not tmp then
14521: LD_VAR 0 3
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 14586
// un := tmp [ rand ( 1 , tmp ) ] ;
14530: LD_ADDR_VAR 0 2
14534: PUSH
14535: LD_VAR 0 3
14539: PUSH
14540: LD_INT 1
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// if Crawls ( un ) then
14554: LD_VAR 0 2
14558: PPUSH
14559: CALL_OW 318
14563: IFFALSE 14574
// ComWalk ( un ) ;
14565: LD_VAR 0 2
14569: PPUSH
14570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14574: LD_VAR 0 2
14578: PPUSH
14579: LD_INT 8
14581: PPUSH
14582: CALL_OW 336
// end ;
14586: PPOPN 3
14588: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14589: LD_EXP 40
14593: PUSH
14594: LD_EXP 84
14598: AND
14599: IFFALSE 14743
14601: GO 14603
14603: DISABLE
14604: LD_INT 0
14606: PPUSH
14607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14608: LD_ADDR_VAR 0 2
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_OWVAR 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 21
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: LD_INT 34
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 34
14650: PUSH
14651: LD_INT 51
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 32
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: ST_TO_ADDR
// if not tmp then
14684: LD_VAR 0 2
14688: NOT
14689: IFFALSE 14693
// exit ;
14691: GO 14743
// for i in tmp do
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: FOR_IN
14704: IFFALSE 14741
// if GetCargo ( i , mat_artifact ) = 0 then
14706: LD_VAR 0 1
14710: PPUSH
14711: LD_INT 4
14713: PPUSH
14714: CALL_OW 289
14718: PUSH
14719: LD_INT 0
14721: EQUAL
14722: IFFALSE 14739
// SetCargo ( i , mat_siberit , 100 ) ;
14724: LD_VAR 0 1
14728: PPUSH
14729: LD_INT 3
14731: PPUSH
14732: LD_INT 100
14734: PPUSH
14735: CALL_OW 290
14739: GO 14703
14741: POP
14742: POP
// end ;
14743: PPOPN 2
14745: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14746: LD_EXP 40
14750: PUSH
14751: LD_EXP 85
14755: AND
14756: IFFALSE 14939
14758: GO 14760
14760: DISABLE
14761: LD_INT 0
14763: PPUSH
14764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14765: LD_ADDR_VAR 0 2
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_OWVAR 2
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 2
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14939
// for i := 1 to 2 do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: DOUBLE
14802: LD_INT 1
14804: DEC
14805: ST_TO_ADDR
14806: LD_INT 2
14808: PUSH
14809: FOR_TO
14810: IFFALSE 14937
// begin uc_side := your_side ;
14812: LD_ADDR_OWVAR 20
14816: PUSH
14817: LD_OWVAR 2
14821: ST_TO_ADDR
// uc_nation := nation_american ;
14822: LD_ADDR_OWVAR 21
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// vc_chassis := us_morphling ;
14830: LD_ADDR_OWVAR 37
14834: PUSH
14835: LD_INT 5
14837: ST_TO_ADDR
// vc_engine := engine_siberite ;
14838: LD_ADDR_OWVAR 39
14842: PUSH
14843: LD_INT 3
14845: ST_TO_ADDR
// vc_control := control_computer ;
14846: LD_ADDR_OWVAR 38
14850: PUSH
14851: LD_INT 3
14853: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14854: LD_ADDR_OWVAR 40
14858: PUSH
14859: LD_INT 10
14861: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14862: LD_VAR 0 2
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: CALL_OW 310
14875: NOT
14876: IFFALSE 14923
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14878: CALL_OW 45
14882: PPUSH
14883: LD_VAR 0 2
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: CALL_OW 250
14896: PPUSH
14897: LD_VAR 0 2
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: PPUSH
14906: CALL_OW 251
14910: PPUSH
14911: LD_INT 12
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 50
14921: GO 14935
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14923: CALL_OW 45
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 51
// end ;
14935: GO 14809
14937: POP
14938: POP
// end ;
14939: PPOPN 2
14941: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14942: LD_EXP 40
14946: PUSH
14947: LD_EXP 86
14951: AND
14952: IFFALSE 15174
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14965: LD_ADDR_VAR 0 6
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_OWVAR 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 3
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 0
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: ST_TO_ADDR
// if not tmp then
15019: LD_VAR 0 6
15023: NOT
15024: IFFALSE 15028
// exit ;
15026: GO 15174
// s1 := rand ( 1 , 4 ) ;
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_INT 1
15035: PPUSH
15036: LD_INT 4
15038: PPUSH
15039: CALL_OW 12
15043: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15044: LD_ADDR_VAR 0 4
15048: PUSH
15049: LD_VAR 0 6
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: PPUSH
15058: LD_VAR 0 2
15062: PPUSH
15063: CALL_OW 259
15067: ST_TO_ADDR
// if s1 = 1 then
15068: LD_VAR 0 2
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: IFFALSE 15096
// s2 := rand ( 2 , 4 ) else
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: LD_INT 2
15085: PPUSH
15086: LD_INT 4
15088: PPUSH
15089: CALL_OW 12
15093: ST_TO_ADDR
15094: GO 15104
// s2 := 1 ;
15096: LD_ADDR_VAR 0 3
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15104: LD_ADDR_VAR 0 5
15108: PUSH
15109: LD_VAR 0 6
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: CALL_OW 259
15127: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15128: LD_VAR 0 6
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 2
15141: PPUSH
15142: LD_VAR 0 5
15146: PPUSH
15147: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15151: LD_VAR 0 6
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: LD_VAR 0 3
15164: PPUSH
15165: LD_VAR 0 4
15169: PPUSH
15170: CALL_OW 237
// end ;
15174: PPOPN 6
15176: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15177: LD_EXP 40
15181: PUSH
15182: LD_EXP 87
15186: AND
15187: IFFALSE 15266
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15195: LD_ADDR_VAR 0 1
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 30
15214: PUSH
15215: LD_INT 3
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 1
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15240: LD_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 12
15257: ARRAY
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: CALL_OW 234
// end ;
15266: PPOPN 1
15268: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15269: LD_EXP 40
15273: PUSH
15274: LD_EXP 88
15278: AND
15279: IFFALSE 15391
15281: GO 15283
15283: DISABLE
15284: LD_INT 0
15286: PPUSH
15287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15288: LD_ADDR_VAR 0 2
15292: PUSH
15293: LD_INT 22
15295: PUSH
15296: LD_OWVAR 2
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 30
15310: PUSH
15311: LD_INT 27
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 26
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 28
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: ST_TO_ADDR
// if not tmp then
15353: LD_VAR 0 2
15357: NOT
15358: IFFALSE 15362
// exit ;
15360: GO 15391
// for i in tmp do
15362: LD_ADDR_VAR 0 1
15366: PUSH
15367: LD_VAR 0 2
15371: PUSH
15372: FOR_IN
15373: IFFALSE 15389
// SetLives ( i , 1 ) ;
15375: LD_VAR 0 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 234
15387: GO 15372
15389: POP
15390: POP
// end ;
15391: PPOPN 2
15393: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15394: LD_EXP 40
15398: PUSH
15399: LD_EXP 89
15403: AND
15404: IFFALSE 15691
15406: GO 15408
15408: DISABLE
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// begin i := rand ( 1 , 7 ) ;
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: LD_INT 1
15421: PPUSH
15422: LD_INT 7
15424: PPUSH
15425: CALL_OW 12
15429: ST_TO_ADDR
// case i of 1 :
15430: LD_VAR 0 1
15434: PUSH
15435: LD_INT 1
15437: DOUBLE
15438: EQUAL
15439: IFTRUE 15443
15441: GO 15453
15443: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15444: LD_STRING earthquake(getX(game), 0, 32)
15446: PPUSH
15447: CALL_OW 559
15451: GO 15691
15453: LD_INT 2
15455: DOUBLE
15456: EQUAL
15457: IFTRUE 15461
15459: GO 15475
15461: POP
// begin ToLua ( displayStucuk(); ) ;
15462: LD_STRING displayStucuk();
15464: PPUSH
15465: CALL_OW 559
// ResetFog ;
15469: CALL_OW 335
// end ; 3 :
15473: GO 15691
15475: LD_INT 3
15477: DOUBLE
15478: EQUAL
15479: IFTRUE 15483
15481: GO 15587
15483: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15484: LD_ADDR_VAR 0 2
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_OWVAR 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: ST_TO_ADDR
// if not tmp then
15520: LD_VAR 0 2
15524: NOT
15525: IFFALSE 15529
// exit ;
15527: GO 15691
// un := tmp [ rand ( 1 , tmp ) ] ;
15529: LD_ADDR_VAR 0 3
15533: PUSH
15534: LD_VAR 0 2
15538: PUSH
15539: LD_INT 1
15541: PPUSH
15542: LD_VAR 0 2
15546: PPUSH
15547: CALL_OW 12
15551: ARRAY
15552: ST_TO_ADDR
// if Crawls ( un ) then
15553: LD_VAR 0 3
15557: PPUSH
15558: CALL_OW 318
15562: IFFALSE 15573
// ComWalk ( un ) ;
15564: LD_VAR 0 3
15568: PPUSH
15569: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_INT 8
15580: PPUSH
15581: CALL_OW 336
// end ; 4 :
15585: GO 15691
15587: LD_INT 4
15589: DOUBLE
15590: EQUAL
15591: IFTRUE 15595
15593: GO 15669
15595: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15596: LD_ADDR_VAR 0 2
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_OWVAR 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 30
15615: PUSH
15616: LD_INT 29
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 69
15631: ST_TO_ADDR
// if not tmp then
15632: LD_VAR 0 2
15636: NOT
15637: IFFALSE 15641
// exit ;
15639: GO 15691
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15641: LD_VAR 0 2
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15654: LD_VAR 0 2
15658: PUSH
15659: LD_INT 1
15661: ARRAY
15662: PPUSH
15663: CALL_OW 65
// end ; 5 .. 7 :
15667: GO 15691
15669: LD_INT 5
15671: DOUBLE
15672: GREATEREQUAL
15673: IFFALSE 15681
15675: LD_INT 7
15677: DOUBLE
15678: LESSEQUAL
15679: IFTRUE 15683
15681: GO 15690
15683: POP
// StreamSibBomb ; end ;
15684: CALL 11928 0 0
15688: GO 15691
15690: POP
// end ;
15691: PPOPN 3
15693: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15694: LD_EXP 40
15698: PUSH
15699: LD_EXP 90
15703: AND
15704: IFFALSE 15860
15706: GO 15708
15708: DISABLE
15709: LD_INT 0
15711: PPUSH
15712: PPUSH
15713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15714: LD_ADDR_VAR 0 2
15718: PUSH
15719: LD_INT 81
15721: PUSH
15722: LD_OWVAR 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 2
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 21
15746: PUSH
15747: LD_INT 2
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PPUSH
15763: CALL_OW 69
15767: ST_TO_ADDR
// if not tmp then
15768: LD_VAR 0 2
15772: NOT
15773: IFFALSE 15777
// exit ;
15775: GO 15860
// p := 0 ;
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_INT 0
15784: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15785: LD_INT 35
15787: PPUSH
15788: CALL_OW 67
// p := p + 1 ;
15792: LD_ADDR_VAR 0 3
15796: PUSH
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 1
15804: PLUS
15805: ST_TO_ADDR
// for i in tmp do
15806: LD_ADDR_VAR 0 1
15810: PUSH
15811: LD_VAR 0 2
15815: PUSH
15816: FOR_IN
15817: IFFALSE 15848
// if GetLives ( i ) < 1000 then
15819: LD_VAR 0 1
15823: PPUSH
15824: CALL_OW 256
15828: PUSH
15829: LD_INT 1000
15831: LESS
15832: IFFALSE 15846
// SetLives ( i , 1000 ) ;
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_INT 1000
15841: PPUSH
15842: CALL_OW 234
15846: GO 15816
15848: POP
15849: POP
// until p > 20 ;
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 20
15857: GREATER
15858: IFFALSE 15785
// end ;
15860: PPOPN 3
15862: END
// every 0 0$1 trigger StreamModeActive and sTime do
15863: LD_EXP 40
15867: PUSH
15868: LD_EXP 91
15872: AND
15873: IFFALSE 15908
15875: GO 15877
15877: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15878: LD_INT 28
15880: PPUSH
15881: LD_OWVAR 2
15885: PPUSH
15886: LD_INT 2
15888: PPUSH
15889: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15893: LD_INT 30
15895: PPUSH
15896: LD_OWVAR 2
15900: PPUSH
15901: LD_INT 2
15903: PPUSH
15904: CALL_OW 322
// end ;
15908: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15909: LD_EXP 40
15913: PUSH
15914: LD_EXP 92
15918: AND
15919: IFFALSE 16040
15921: GO 15923
15923: DISABLE
15924: LD_INT 0
15926: PPUSH
15927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_INT 22
15935: PUSH
15936: LD_OWVAR 2
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 21
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 23
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: PPUSH
15977: CALL_OW 69
15981: ST_TO_ADDR
// if not tmp then
15982: LD_VAR 0 2
15986: NOT
15987: IFFALSE 15991
// exit ;
15989: GO 16040
// for i in tmp do
15991: LD_ADDR_VAR 0 1
15995: PUSH
15996: LD_VAR 0 2
16000: PUSH
16001: FOR_IN
16002: IFFALSE 16038
// begin if Crawls ( i ) then
16004: LD_VAR 0 1
16008: PPUSH
16009: CALL_OW 318
16013: IFFALSE 16024
// ComWalk ( i ) ;
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL_OW 138
// SetClass ( i , 2 ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: LD_INT 2
16031: PPUSH
16032: CALL_OW 336
// end ;
16036: GO 16001
16038: POP
16039: POP
// end ;
16040: PPOPN 2
16042: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16043: LD_EXP 40
16047: PUSH
16048: LD_EXP 93
16052: AND
16053: IFFALSE 16341
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
16062: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16063: LD_OWVAR 2
16067: PPUSH
16068: LD_INT 9
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16081: LD_INT 9
16083: PPUSH
16084: LD_OWVAR 2
16088: PPUSH
16089: CALL_OW 343
// uc_side := 9 ;
16093: LD_ADDR_OWVAR 20
16097: PUSH
16098: LD_INT 9
16100: ST_TO_ADDR
// uc_nation := 2 ;
16101: LD_ADDR_OWVAR 21
16105: PUSH
16106: LD_INT 2
16108: ST_TO_ADDR
// hc_name := Dark Warrior ;
16109: LD_ADDR_OWVAR 26
16113: PUSH
16114: LD_STRING Dark Warrior
16116: ST_TO_ADDR
// hc_gallery :=  ;
16117: LD_ADDR_OWVAR 33
16121: PUSH
16122: LD_STRING 
16124: ST_TO_ADDR
// hc_noskilllimit := true ;
16125: LD_ADDR_OWVAR 76
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16133: LD_ADDR_OWVAR 31
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 30
16143: PUSH
16144: LD_INT 30
16146: PUSH
16147: LD_INT 30
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: ST_TO_ADDR
// un := CreateHuman ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: CALL_OW 44
16165: ST_TO_ADDR
// hc_noskilllimit := false ;
16166: LD_ADDR_OWVAR 76
16170: PUSH
16171: LD_INT 0
16173: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 51
// ToLua ( playRanger() ) ;
16186: LD_STRING playRanger()
16188: PPUSH
16189: CALL_OW 559
// p := 0 ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16201: LD_INT 35
16203: PPUSH
16204: CALL_OW 67
// p := p + 1 ;
16208: LD_ADDR_VAR 0 2
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16222: LD_VAR 0 3
16226: PPUSH
16227: CALL_OW 256
16231: PUSH
16232: LD_INT 1000
16234: LESS
16235: IFFALSE 16249
// SetLives ( un , 1000 ) ;
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_INT 1000
16244: PPUSH
16245: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 81
16256: PUSH
16257: LD_OWVAR 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 91
16268: PUSH
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 30
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PPUSH
16291: LD_VAR 0 3
16295: PPUSH
16296: CALL_OW 74
16300: PPUSH
16301: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16305: LD_VAR 0 2
16309: PUSH
16310: LD_INT 80
16312: GREATER
16313: PUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: CALL_OW 301
16323: OR
16324: IFFALSE 16201
// if un then
16326: LD_VAR 0 3
16330: IFFALSE 16341
// RemoveUnit ( un ) ;
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 64
// end ;
16341: PPOPN 3
16343: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16344: LD_EXP 94
16348: IFFALSE 16464
16350: GO 16352
16352: DISABLE
16353: LD_INT 0
16355: PPUSH
16356: PPUSH
16357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_INT 81
16365: PUSH
16366: LD_OWVAR 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 21
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PPUSH
16389: CALL_OW 69
16393: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16394: LD_STRING playComputer()
16396: PPUSH
16397: CALL_OW 559
// if not tmp then
16401: LD_VAR 0 2
16405: NOT
16406: IFFALSE 16410
// exit ;
16408: GO 16464
// for i in tmp do
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: FOR_IN
16421: IFFALSE 16462
// for j := 1 to 4 do
16423: LD_ADDR_VAR 0 3
16427: PUSH
16428: DOUBLE
16429: LD_INT 1
16431: DEC
16432: ST_TO_ADDR
16433: LD_INT 4
16435: PUSH
16436: FOR_TO
16437: IFFALSE 16458
// SetSkill ( i , j , 10 ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 10
16451: PPUSH
16452: CALL_OW 237
16456: GO 16436
16458: POP
16459: POP
16460: GO 16420
16462: POP
16463: POP
// end ;
16464: PPOPN 3
16466: END
// every 0 0$1 trigger s30 do var i , tmp ;
16467: LD_EXP 95
16471: IFFALSE 16540
16473: GO 16475
16475: DISABLE
16476: LD_INT 0
16478: PPUSH
16479: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: ST_TO_ADDR
// if not tmp then
16502: LD_VAR 0 2
16506: NOT
16507: IFFALSE 16511
// exit ;
16509: GO 16540
// for i in tmp do
16511: LD_ADDR_VAR 0 1
16515: PUSH
16516: LD_VAR 0 2
16520: PUSH
16521: FOR_IN
16522: IFFALSE 16538
// SetLives ( i , 300 ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_INT 300
16531: PPUSH
16532: CALL_OW 234
16536: GO 16521
16538: POP
16539: POP
// end ;
16540: PPOPN 2
16542: END
// every 0 0$1 trigger s60 do var i , tmp ;
16543: LD_EXP 96
16547: IFFALSE 16616
16549: GO 16551
16551: DISABLE
16552: LD_INT 0
16554: PPUSH
16555: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_OWVAR 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// if not tmp then
16578: LD_VAR 0 2
16582: NOT
16583: IFFALSE 16587
// exit ;
16585: GO 16616
// for i in tmp do
16587: LD_ADDR_VAR 0 1
16591: PUSH
16592: LD_VAR 0 2
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16614
// SetLives ( i , 600 ) ;
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_INT 600
16607: PPUSH
16608: CALL_OW 234
16612: GO 16597
16614: POP
16615: POP
// end ;
16616: PPOPN 2
16618: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16619: LD_INT 0
16621: PPUSH
// case cmd of 301 :
16622: LD_VAR 0 1
16626: PUSH
16627: LD_INT 301
16629: DOUBLE
16630: EQUAL
16631: IFTRUE 16635
16633: GO 16667
16635: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16636: LD_VAR 0 6
16640: PPUSH
16641: LD_VAR 0 7
16645: PPUSH
16646: LD_VAR 0 8
16650: PPUSH
16651: LD_VAR 0 4
16655: PPUSH
16656: LD_VAR 0 5
16660: PPUSH
16661: CALL 17868 0 5
16665: GO 16788
16667: LD_INT 302
16669: DOUBLE
16670: EQUAL
16671: IFTRUE 16675
16673: GO 16712
16675: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16676: LD_VAR 0 6
16680: PPUSH
16681: LD_VAR 0 7
16685: PPUSH
16686: LD_VAR 0 8
16690: PPUSH
16691: LD_VAR 0 9
16695: PPUSH
16696: LD_VAR 0 4
16700: PPUSH
16701: LD_VAR 0 5
16705: PPUSH
16706: CALL 17959 0 6
16710: GO 16788
16712: LD_INT 303
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16757
16720: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16721: LD_VAR 0 6
16725: PPUSH
16726: LD_VAR 0 7
16730: PPUSH
16731: LD_VAR 0 8
16735: PPUSH
16736: LD_VAR 0 9
16740: PPUSH
16741: LD_VAR 0 4
16745: PPUSH
16746: LD_VAR 0 5
16750: PPUSH
16751: CALL 16793 0 6
16755: GO 16788
16757: LD_INT 304
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16787
16765: POP
// hHackTeleport ( unit , x , y ) ; end ;
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_VAR 0 4
16775: PPUSH
16776: LD_VAR 0 5
16780: PPUSH
16781: CALL 18552 0 3
16785: GO 16788
16787: POP
// end ;
16788: LD_VAR 0 12
16792: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16793: LD_INT 0
16795: PPUSH
16796: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16797: LD_VAR 0 1
16801: PUSH
16802: LD_INT 1
16804: LESS
16805: PUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 3
16813: GREATER
16814: OR
16815: PUSH
16816: LD_VAR 0 5
16820: PPUSH
16821: LD_VAR 0 6
16825: PPUSH
16826: CALL_OW 428
16830: OR
16831: IFFALSE 16835
// exit ;
16833: GO 17555
// uc_side := your_side ;
16835: LD_ADDR_OWVAR 20
16839: PUSH
16840: LD_OWVAR 2
16844: ST_TO_ADDR
// uc_nation := nation ;
16845: LD_ADDR_OWVAR 21
16849: PUSH
16850: LD_VAR 0 1
16854: ST_TO_ADDR
// bc_level = 1 ;
16855: LD_ADDR_OWVAR 43
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// case btype of 1 :
16863: LD_VAR 0 2
16867: PUSH
16868: LD_INT 1
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16887
16876: POP
// bc_type := b_depot ; 2 :
16877: LD_ADDR_OWVAR 42
16881: PUSH
16882: LD_INT 0
16884: ST_TO_ADDR
16885: GO 17499
16887: LD_INT 2
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16906
16895: POP
// bc_type := b_warehouse ; 3 :
16896: LD_ADDR_OWVAR 42
16900: PUSH
16901: LD_INT 1
16903: ST_TO_ADDR
16904: GO 17499
16906: LD_INT 3
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16925
16914: POP
// bc_type := b_lab ; 4 .. 9 :
16915: LD_ADDR_OWVAR 42
16919: PUSH
16920: LD_INT 6
16922: ST_TO_ADDR
16923: GO 17499
16925: LD_INT 4
16927: DOUBLE
16928: GREATEREQUAL
16929: IFFALSE 16937
16931: LD_INT 9
16933: DOUBLE
16934: LESSEQUAL
16935: IFTRUE 16939
16937: GO 16991
16939: POP
// begin bc_type := b_lab_half ;
16940: LD_ADDR_OWVAR 42
16944: PUSH
16945: LD_INT 7
16947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16948: LD_ADDR_OWVAR 44
16952: PUSH
16953: LD_INT 10
16955: PUSH
16956: LD_INT 11
16958: PUSH
16959: LD_INT 12
16961: PUSH
16962: LD_INT 15
16964: PUSH
16965: LD_INT 14
16967: PUSH
16968: LD_INT 13
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PUSH
16979: LD_VAR 0 2
16983: PUSH
16984: LD_INT 3
16986: MINUS
16987: ARRAY
16988: ST_TO_ADDR
// end ; 10 .. 13 :
16989: GO 17499
16991: LD_INT 10
16993: DOUBLE
16994: GREATEREQUAL
16995: IFFALSE 17003
16997: LD_INT 13
16999: DOUBLE
17000: LESSEQUAL
17001: IFTRUE 17005
17003: GO 17082
17005: POP
// begin bc_type := b_lab_full ;
17006: LD_ADDR_OWVAR 42
17010: PUSH
17011: LD_INT 8
17013: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17014: LD_ADDR_OWVAR 44
17018: PUSH
17019: LD_INT 10
17021: PUSH
17022: LD_INT 12
17024: PUSH
17025: LD_INT 14
17027: PUSH
17028: LD_INT 13
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: LD_VAR 0 2
17041: PUSH
17042: LD_INT 9
17044: MINUS
17045: ARRAY
17046: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17047: LD_ADDR_OWVAR 45
17051: PUSH
17052: LD_INT 11
17054: PUSH
17055: LD_INT 15
17057: PUSH
17058: LD_INT 12
17060: PUSH
17061: LD_INT 15
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: PUSH
17070: LD_VAR 0 2
17074: PUSH
17075: LD_INT 9
17077: MINUS
17078: ARRAY
17079: ST_TO_ADDR
// end ; 14 :
17080: GO 17499
17082: LD_INT 14
17084: DOUBLE
17085: EQUAL
17086: IFTRUE 17090
17088: GO 17101
17090: POP
// bc_type := b_workshop ; 15 :
17091: LD_ADDR_OWVAR 42
17095: PUSH
17096: LD_INT 2
17098: ST_TO_ADDR
17099: GO 17499
17101: LD_INT 15
17103: DOUBLE
17104: EQUAL
17105: IFTRUE 17109
17107: GO 17120
17109: POP
// bc_type := b_factory ; 16 :
17110: LD_ADDR_OWVAR 42
17114: PUSH
17115: LD_INT 3
17117: ST_TO_ADDR
17118: GO 17499
17120: LD_INT 16
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17139
17128: POP
// bc_type := b_ext_gun ; 17 :
17129: LD_ADDR_OWVAR 42
17133: PUSH
17134: LD_INT 17
17136: ST_TO_ADDR
17137: GO 17499
17139: LD_INT 17
17141: DOUBLE
17142: EQUAL
17143: IFTRUE 17147
17145: GO 17175
17147: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17148: LD_ADDR_OWVAR 42
17152: PUSH
17153: LD_INT 19
17155: PUSH
17156: LD_INT 23
17158: PUSH
17159: LD_INT 19
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: PUSH
17167: LD_VAR 0 1
17171: ARRAY
17172: ST_TO_ADDR
17173: GO 17499
17175: LD_INT 18
17177: DOUBLE
17178: EQUAL
17179: IFTRUE 17183
17181: GO 17194
17183: POP
// bc_type := b_ext_radar ; 19 :
17184: LD_ADDR_OWVAR 42
17188: PUSH
17189: LD_INT 20
17191: ST_TO_ADDR
17192: GO 17499
17194: LD_INT 19
17196: DOUBLE
17197: EQUAL
17198: IFTRUE 17202
17200: GO 17213
17202: POP
// bc_type := b_ext_radio ; 20 :
17203: LD_ADDR_OWVAR 42
17207: PUSH
17208: LD_INT 22
17210: ST_TO_ADDR
17211: GO 17499
17213: LD_INT 20
17215: DOUBLE
17216: EQUAL
17217: IFTRUE 17221
17219: GO 17232
17221: POP
// bc_type := b_ext_siberium ; 21 :
17222: LD_ADDR_OWVAR 42
17226: PUSH
17227: LD_INT 21
17229: ST_TO_ADDR
17230: GO 17499
17232: LD_INT 21
17234: DOUBLE
17235: EQUAL
17236: IFTRUE 17240
17238: GO 17251
17240: POP
// bc_type := b_ext_computer ; 22 :
17241: LD_ADDR_OWVAR 42
17245: PUSH
17246: LD_INT 24
17248: ST_TO_ADDR
17249: GO 17499
17251: LD_INT 22
17253: DOUBLE
17254: EQUAL
17255: IFTRUE 17259
17257: GO 17270
17259: POP
// bc_type := b_ext_track ; 23 :
17260: LD_ADDR_OWVAR 42
17264: PUSH
17265: LD_INT 16
17267: ST_TO_ADDR
17268: GO 17499
17270: LD_INT 23
17272: DOUBLE
17273: EQUAL
17274: IFTRUE 17278
17276: GO 17289
17278: POP
// bc_type := b_ext_laser ; 24 :
17279: LD_ADDR_OWVAR 42
17283: PUSH
17284: LD_INT 25
17286: ST_TO_ADDR
17287: GO 17499
17289: LD_INT 24
17291: DOUBLE
17292: EQUAL
17293: IFTRUE 17297
17295: GO 17308
17297: POP
// bc_type := b_control_tower ; 25 :
17298: LD_ADDR_OWVAR 42
17302: PUSH
17303: LD_INT 36
17305: ST_TO_ADDR
17306: GO 17499
17308: LD_INT 25
17310: DOUBLE
17311: EQUAL
17312: IFTRUE 17316
17314: GO 17327
17316: POP
// bc_type := b_breastwork ; 26 :
17317: LD_ADDR_OWVAR 42
17321: PUSH
17322: LD_INT 31
17324: ST_TO_ADDR
17325: GO 17499
17327: LD_INT 26
17329: DOUBLE
17330: EQUAL
17331: IFTRUE 17335
17333: GO 17346
17335: POP
// bc_type := b_bunker ; 27 :
17336: LD_ADDR_OWVAR 42
17340: PUSH
17341: LD_INT 32
17343: ST_TO_ADDR
17344: GO 17499
17346: LD_INT 27
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17354
17352: GO 17365
17354: POP
// bc_type := b_turret ; 28 :
17355: LD_ADDR_OWVAR 42
17359: PUSH
17360: LD_INT 33
17362: ST_TO_ADDR
17363: GO 17499
17365: LD_INT 28
17367: DOUBLE
17368: EQUAL
17369: IFTRUE 17373
17371: GO 17384
17373: POP
// bc_type := b_armoury ; 29 :
17374: LD_ADDR_OWVAR 42
17378: PUSH
17379: LD_INT 4
17381: ST_TO_ADDR
17382: GO 17499
17384: LD_INT 29
17386: DOUBLE
17387: EQUAL
17388: IFTRUE 17392
17390: GO 17403
17392: POP
// bc_type := b_barracks ; 30 :
17393: LD_ADDR_OWVAR 42
17397: PUSH
17398: LD_INT 5
17400: ST_TO_ADDR
17401: GO 17499
17403: LD_INT 30
17405: DOUBLE
17406: EQUAL
17407: IFTRUE 17411
17409: GO 17422
17411: POP
// bc_type := b_solar_power ; 31 :
17412: LD_ADDR_OWVAR 42
17416: PUSH
17417: LD_INT 27
17419: ST_TO_ADDR
17420: GO 17499
17422: LD_INT 31
17424: DOUBLE
17425: EQUAL
17426: IFTRUE 17430
17428: GO 17441
17430: POP
// bc_type := b_oil_power ; 32 :
17431: LD_ADDR_OWVAR 42
17435: PUSH
17436: LD_INT 26
17438: ST_TO_ADDR
17439: GO 17499
17441: LD_INT 32
17443: DOUBLE
17444: EQUAL
17445: IFTRUE 17449
17447: GO 17460
17449: POP
// bc_type := b_siberite_power ; 33 :
17450: LD_ADDR_OWVAR 42
17454: PUSH
17455: LD_INT 28
17457: ST_TO_ADDR
17458: GO 17499
17460: LD_INT 33
17462: DOUBLE
17463: EQUAL
17464: IFTRUE 17468
17466: GO 17479
17468: POP
// bc_type := b_oil_mine ; 34 :
17469: LD_ADDR_OWVAR 42
17473: PUSH
17474: LD_INT 29
17476: ST_TO_ADDR
17477: GO 17499
17479: LD_INT 34
17481: DOUBLE
17482: EQUAL
17483: IFTRUE 17487
17485: GO 17498
17487: POP
// bc_type := b_siberite_mine ; end ;
17488: LD_ADDR_OWVAR 42
17492: PUSH
17493: LD_INT 30
17495: ST_TO_ADDR
17496: GO 17499
17498: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17499: LD_ADDR_VAR 0 8
17503: PUSH
17504: LD_VAR 0 5
17508: PPUSH
17509: LD_VAR 0 6
17513: PPUSH
17514: LD_VAR 0 3
17518: PPUSH
17519: CALL_OW 47
17523: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17524: LD_OWVAR 42
17528: PUSH
17529: LD_INT 32
17531: PUSH
17532: LD_INT 33
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: IN
17539: IFFALSE 17555
// PlaceWeaponTurret ( b , weapon ) ;
17541: LD_VAR 0 8
17545: PPUSH
17546: LD_VAR 0 4
17550: PPUSH
17551: CALL_OW 431
// end ;
17555: LD_VAR 0 7
17559: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
17564: PPUSH
17565: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17566: LD_ADDR_VAR 0 4
17570: PUSH
17571: LD_INT 22
17573: PUSH
17574: LD_OWVAR 2
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: LD_INT 30
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 30
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PPUSH
17615: CALL_OW 69
17619: ST_TO_ADDR
// if not tmp then
17620: LD_VAR 0 4
17624: NOT
17625: IFFALSE 17629
// exit ;
17627: GO 17688
// for i in tmp do
17629: LD_ADDR_VAR 0 2
17633: PUSH
17634: LD_VAR 0 4
17638: PUSH
17639: FOR_IN
17640: IFFALSE 17686
// for j = 1 to 3 do
17642: LD_ADDR_VAR 0 3
17646: PUSH
17647: DOUBLE
17648: LD_INT 1
17650: DEC
17651: ST_TO_ADDR
17652: LD_INT 3
17654: PUSH
17655: FOR_TO
17656: IFFALSE 17682
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17658: LD_VAR 0 2
17662: PPUSH
17663: CALL_OW 274
17667: PPUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_INT 99999
17675: PPUSH
17676: CALL_OW 277
17680: GO 17655
17682: POP
17683: POP
17684: GO 17639
17686: POP
17687: POP
// end ;
17688: LD_VAR 0 1
17692: RET
// export function hHackSetLevel10 ; var i , j ; begin
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
17697: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17698: LD_ADDR_VAR 0 2
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PPUSH
17713: CALL_OW 69
17717: PUSH
17718: FOR_IN
17719: IFFALSE 17771
// if IsSelected ( i ) then
17721: LD_VAR 0 2
17725: PPUSH
17726: CALL_OW 306
17730: IFFALSE 17769
// begin for j := 1 to 4 do
17732: LD_ADDR_VAR 0 3
17736: PUSH
17737: DOUBLE
17738: LD_INT 1
17740: DEC
17741: ST_TO_ADDR
17742: LD_INT 4
17744: PUSH
17745: FOR_TO
17746: IFFALSE 17767
// SetSkill ( i , j , 10 ) ;
17748: LD_VAR 0 2
17752: PPUSH
17753: LD_VAR 0 3
17757: PPUSH
17758: LD_INT 10
17760: PPUSH
17761: CALL_OW 237
17765: GO 17745
17767: POP
17768: POP
// end ;
17769: GO 17718
17771: POP
17772: POP
// end ;
17773: LD_VAR 0 1
17777: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17778: LD_INT 0
17780: PPUSH
17781: PPUSH
17782: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17783: LD_ADDR_VAR 0 2
17787: PUSH
17788: LD_INT 22
17790: PUSH
17791: LD_OWVAR 2
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 21
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PPUSH
17814: CALL_OW 69
17818: PUSH
17819: FOR_IN
17820: IFFALSE 17861
// begin for j := 1 to 4 do
17822: LD_ADDR_VAR 0 3
17826: PUSH
17827: DOUBLE
17828: LD_INT 1
17830: DEC
17831: ST_TO_ADDR
17832: LD_INT 4
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17857
// SetSkill ( i , j , 10 ) ;
17838: LD_VAR 0 2
17842: PPUSH
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 10
17850: PPUSH
17851: CALL_OW 237
17855: GO 17835
17857: POP
17858: POP
// end ;
17859: GO 17819
17861: POP
17862: POP
// end ;
17863: LD_VAR 0 1
17867: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17868: LD_INT 0
17870: PPUSH
// uc_side := your_side ;
17871: LD_ADDR_OWVAR 20
17875: PUSH
17876: LD_OWVAR 2
17880: ST_TO_ADDR
// uc_nation := nation ;
17881: LD_ADDR_OWVAR 21
17885: PUSH
17886: LD_VAR 0 1
17890: ST_TO_ADDR
// InitHc ;
17891: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17895: LD_INT 0
17897: PPUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: LD_VAR 0 3
17907: PPUSH
17908: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17912: LD_VAR 0 4
17916: PPUSH
17917: LD_VAR 0 5
17921: PPUSH
17922: CALL_OW 428
17926: PUSH
17927: LD_INT 0
17929: EQUAL
17930: IFFALSE 17954
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17932: CALL_OW 44
17936: PPUSH
17937: LD_VAR 0 4
17941: PPUSH
17942: LD_VAR 0 5
17946: PPUSH
17947: LD_INT 1
17949: PPUSH
17950: CALL_OW 48
// end ;
17954: LD_VAR 0 6
17958: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17959: LD_INT 0
17961: PPUSH
17962: PPUSH
// uc_side := your_side ;
17963: LD_ADDR_OWVAR 20
17967: PUSH
17968: LD_OWVAR 2
17972: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17973: LD_VAR 0 1
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: LD_INT 4
17989: PUSH
17990: LD_INT 5
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: IN
18000: IFFALSE 18012
// uc_nation := nation_american else
18002: LD_ADDR_OWVAR 21
18006: PUSH
18007: LD_INT 1
18009: ST_TO_ADDR
18010: GO 18055
// if chassis in [ 11 , 12 , 13 , 14 ] then
18012: LD_VAR 0 1
18016: PUSH
18017: LD_INT 11
18019: PUSH
18020: LD_INT 12
18022: PUSH
18023: LD_INT 13
18025: PUSH
18026: LD_INT 14
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: IN
18035: IFFALSE 18047
// uc_nation := nation_arabian else
18037: LD_ADDR_OWVAR 21
18041: PUSH
18042: LD_INT 2
18044: ST_TO_ADDR
18045: GO 18055
// uc_nation := nation_russian ;
18047: LD_ADDR_OWVAR 21
18051: PUSH
18052: LD_INT 3
18054: ST_TO_ADDR
// vc_chassis := chassis ;
18055: LD_ADDR_OWVAR 37
18059: PUSH
18060: LD_VAR 0 1
18064: ST_TO_ADDR
// vc_engine := engine ;
18065: LD_ADDR_OWVAR 39
18069: PUSH
18070: LD_VAR 0 2
18074: ST_TO_ADDR
// vc_control := control ;
18075: LD_ADDR_OWVAR 38
18079: PUSH
18080: LD_VAR 0 3
18084: ST_TO_ADDR
// vc_weapon := weapon ;
18085: LD_ADDR_OWVAR 40
18089: PUSH
18090: LD_VAR 0 4
18094: ST_TO_ADDR
// un := CreateVehicle ;
18095: LD_ADDR_VAR 0 8
18099: PUSH
18100: CALL_OW 45
18104: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18105: LD_VAR 0 8
18109: PPUSH
18110: LD_INT 0
18112: PPUSH
18113: LD_INT 5
18115: PPUSH
18116: CALL_OW 12
18120: PPUSH
18121: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18125: LD_VAR 0 8
18129: PPUSH
18130: LD_VAR 0 5
18134: PPUSH
18135: LD_VAR 0 6
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL_OW 48
// end ;
18147: LD_VAR 0 7
18151: RET
// export hInvincible ; every 1 do
18152: GO 18154
18154: DISABLE
// hInvincible := [ ] ;
18155: LD_ADDR_EXP 97
18159: PUSH
18160: EMPTY
18161: ST_TO_ADDR
18162: END
// every 10 do var i ;
18163: GO 18165
18165: DISABLE
18166: LD_INT 0
18168: PPUSH
// begin enable ;
18169: ENABLE
// if not hInvincible then
18170: LD_EXP 97
18174: NOT
18175: IFFALSE 18179
// exit ;
18177: GO 18223
// for i in hInvincible do
18179: LD_ADDR_VAR 0 1
18183: PUSH
18184: LD_EXP 97
18188: PUSH
18189: FOR_IN
18190: IFFALSE 18221
// if GetLives ( i ) < 1000 then
18192: LD_VAR 0 1
18196: PPUSH
18197: CALL_OW 256
18201: PUSH
18202: LD_INT 1000
18204: LESS
18205: IFFALSE 18219
// SetLives ( i , 1000 ) ;
18207: LD_VAR 0 1
18211: PPUSH
18212: LD_INT 1000
18214: PPUSH
18215: CALL_OW 234
18219: GO 18189
18221: POP
18222: POP
// end ;
18223: PPOPN 1
18225: END
// export function hHackInvincible ; var i ; begin
18226: LD_INT 0
18228: PPUSH
18229: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18230: LD_ADDR_VAR 0 2
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: LD_INT 21
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 21
18250: PUSH
18251: LD_INT 2
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: PUSH
18268: FOR_IN
18269: IFFALSE 18330
// if IsSelected ( i ) then
18271: LD_VAR 0 2
18275: PPUSH
18276: CALL_OW 306
18280: IFFALSE 18328
// begin if i in hInvincible then
18282: LD_VAR 0 2
18286: PUSH
18287: LD_EXP 97
18291: IN
18292: IFFALSE 18312
// hInvincible := hInvincible diff i else
18294: LD_ADDR_EXP 97
18298: PUSH
18299: LD_EXP 97
18303: PUSH
18304: LD_VAR 0 2
18308: DIFF
18309: ST_TO_ADDR
18310: GO 18328
// hInvincible := hInvincible union i ;
18312: LD_ADDR_EXP 97
18316: PUSH
18317: LD_EXP 97
18321: PUSH
18322: LD_VAR 0 2
18326: UNION
18327: ST_TO_ADDR
// end ;
18328: GO 18268
18330: POP
18331: POP
// end ;
18332: LD_VAR 0 1
18336: RET
// export function hHackInvisible ; var i , j ; begin
18337: LD_INT 0
18339: PPUSH
18340: PPUSH
18341: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18342: LD_ADDR_VAR 0 2
18346: PUSH
18347: LD_INT 21
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PPUSH
18357: CALL_OW 69
18361: PUSH
18362: FOR_IN
18363: IFFALSE 18387
// if IsSelected ( i ) then
18365: LD_VAR 0 2
18369: PPUSH
18370: CALL_OW 306
18374: IFFALSE 18385
// ComForceInvisible ( i ) ;
18376: LD_VAR 0 2
18380: PPUSH
18381: CALL_OW 496
18385: GO 18362
18387: POP
18388: POP
// end ;
18389: LD_VAR 0 1
18393: RET
// export function hHackChangeYourSide ; begin
18394: LD_INT 0
18396: PPUSH
// if your_side = 8 then
18397: LD_OWVAR 2
18401: PUSH
18402: LD_INT 8
18404: EQUAL
18405: IFFALSE 18417
// your_side := 0 else
18407: LD_ADDR_OWVAR 2
18411: PUSH
18412: LD_INT 0
18414: ST_TO_ADDR
18415: GO 18431
// your_side := your_side + 1 ;
18417: LD_ADDR_OWVAR 2
18421: PUSH
18422: LD_OWVAR 2
18426: PUSH
18427: LD_INT 1
18429: PLUS
18430: ST_TO_ADDR
// end ;
18431: LD_VAR 0 1
18435: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18436: LD_INT 0
18438: PPUSH
18439: PPUSH
18440: PPUSH
// for i in all_units do
18441: LD_ADDR_VAR 0 2
18445: PUSH
18446: LD_OWVAR 3
18450: PUSH
18451: FOR_IN
18452: IFFALSE 18530
// if IsSelected ( i ) then
18454: LD_VAR 0 2
18458: PPUSH
18459: CALL_OW 306
18463: IFFALSE 18528
// begin j := GetSide ( i ) ;
18465: LD_ADDR_VAR 0 3
18469: PUSH
18470: LD_VAR 0 2
18474: PPUSH
18475: CALL_OW 255
18479: ST_TO_ADDR
// if j = 8 then
18480: LD_VAR 0 3
18484: PUSH
18485: LD_INT 8
18487: EQUAL
18488: IFFALSE 18500
// j := 0 else
18490: LD_ADDR_VAR 0 3
18494: PUSH
18495: LD_INT 0
18497: ST_TO_ADDR
18498: GO 18514
// j := j + 1 ;
18500: LD_ADDR_VAR 0 3
18504: PUSH
18505: LD_VAR 0 3
18509: PUSH
18510: LD_INT 1
18512: PLUS
18513: ST_TO_ADDR
// SetSide ( i , j ) ;
18514: LD_VAR 0 2
18518: PPUSH
18519: LD_VAR 0 3
18523: PPUSH
18524: CALL_OW 235
// end ;
18528: GO 18451
18530: POP
18531: POP
// end ;
18532: LD_VAR 0 1
18536: RET
// export function hHackFog ; begin
18537: LD_INT 0
18539: PPUSH
// FogOff ( true ) ;
18540: LD_INT 1
18542: PPUSH
18543: CALL_OW 344
// end ;
18547: LD_VAR 0 1
18551: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18552: LD_INT 0
18554: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18555: LD_VAR 0 1
18559: PPUSH
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_VAR 0 3
18569: PPUSH
18570: LD_INT 1
18572: PPUSH
18573: LD_INT 1
18575: PPUSH
18576: CALL_OW 483
// CenterOnXY ( x , y ) ;
18580: LD_VAR 0 2
18584: PPUSH
18585: LD_VAR 0 3
18589: PPUSH
18590: CALL_OW 84
// end ;
18594: LD_VAR 0 4
18598: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18599: LD_INT 0
18601: PPUSH
18602: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18603: LD_VAR 0 1
18607: NOT
18608: PUSH
18609: LD_VAR 0 2
18613: PPUSH
18614: LD_VAR 0 3
18618: PPUSH
18619: CALL_OW 488
18623: NOT
18624: OR
18625: PUSH
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 266
18635: PUSH
18636: LD_INT 3
18638: NONEQUAL
18639: PUSH
18640: LD_VAR 0 1
18644: PPUSH
18645: CALL_OW 247
18649: PUSH
18650: LD_INT 1
18652: EQUAL
18653: NOT
18654: AND
18655: OR
18656: IFFALSE 18660
// exit ;
18658: GO 18809
// if GetType ( factory ) = unit_human then
18660: LD_VAR 0 1
18664: PPUSH
18665: CALL_OW 247
18669: PUSH
18670: LD_INT 1
18672: EQUAL
18673: IFFALSE 18690
// factory := IsInUnit ( factory ) ;
18675: LD_ADDR_VAR 0 1
18679: PUSH
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 310
18689: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL_OW 266
18699: PUSH
18700: LD_INT 3
18702: NONEQUAL
18703: IFFALSE 18707
// exit ;
18705: GO 18809
// if HexInfo ( x , y ) = factory then
18707: LD_VAR 0 2
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: CALL_OW 428
18721: PUSH
18722: LD_VAR 0 1
18726: EQUAL
18727: IFFALSE 18754
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18729: LD_ADDR_EXP 98
18733: PUSH
18734: LD_EXP 98
18738: PPUSH
18739: LD_VAR 0 1
18743: PPUSH
18744: LD_INT 0
18746: PPUSH
18747: CALL_OW 1
18751: ST_TO_ADDR
18752: GO 18805
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18754: LD_ADDR_EXP 98
18758: PUSH
18759: LD_EXP 98
18763: PPUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: LD_VAR 0 1
18773: PPUSH
18774: CALL_OW 255
18778: PUSH
18779: LD_VAR 0 1
18783: PUSH
18784: LD_VAR 0 2
18788: PUSH
18789: LD_VAR 0 3
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 1
18804: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18805: CALL 18814 0 0
// end ;
18809: LD_VAR 0 4
18813: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
18818: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18819: LD_STRING resetFactoryWaypoint();
18821: PPUSH
18822: CALL_OW 559
// if factoryWaypoints then
18826: LD_EXP 98
18830: IFFALSE 18956
// begin list := PrepareArray ( factoryWaypoints ) ;
18832: LD_ADDR_VAR 0 3
18836: PUSH
18837: LD_EXP 98
18841: PPUSH
18842: CALL 65425 0 1
18846: ST_TO_ADDR
// for i := 1 to list do
18847: LD_ADDR_VAR 0 2
18851: PUSH
18852: DOUBLE
18853: LD_INT 1
18855: DEC
18856: ST_TO_ADDR
18857: LD_VAR 0 3
18861: PUSH
18862: FOR_TO
18863: IFFALSE 18954
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18865: LD_STRING setFactoryWaypointXY(
18867: PUSH
18868: LD_VAR 0 3
18872: PUSH
18873: LD_VAR 0 2
18877: ARRAY
18878: PUSH
18879: LD_INT 1
18881: ARRAY
18882: STR
18883: PUSH
18884: LD_STRING ,
18886: STR
18887: PUSH
18888: LD_VAR 0 3
18892: PUSH
18893: LD_VAR 0 2
18897: ARRAY
18898: PUSH
18899: LD_INT 2
18901: ARRAY
18902: STR
18903: PUSH
18904: LD_STRING ,
18906: STR
18907: PUSH
18908: LD_VAR 0 3
18912: PUSH
18913: LD_VAR 0 2
18917: ARRAY
18918: PUSH
18919: LD_INT 3
18921: ARRAY
18922: STR
18923: PUSH
18924: LD_STRING ,
18926: STR
18927: PUSH
18928: LD_VAR 0 3
18932: PUSH
18933: LD_VAR 0 2
18937: ARRAY
18938: PUSH
18939: LD_INT 4
18941: ARRAY
18942: STR
18943: PUSH
18944: LD_STRING )
18946: STR
18947: PPUSH
18948: CALL_OW 559
18952: GO 18862
18954: POP
18955: POP
// end ; end ;
18956: LD_VAR 0 1
18960: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
18961: LD_INT 0
18963: PPUSH
// if HexInfo ( x , y ) = warehouse then
18964: LD_VAR 0 2
18968: PPUSH
18969: LD_VAR 0 3
18973: PPUSH
18974: CALL_OW 428
18978: PUSH
18979: LD_VAR 0 1
18983: EQUAL
18984: IFFALSE 19011
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
18986: LD_ADDR_EXP 99
18990: PUSH
18991: LD_EXP 99
18995: PPUSH
18996: LD_VAR 0 1
19000: PPUSH
19001: LD_INT 0
19003: PPUSH
19004: CALL_OW 1
19008: ST_TO_ADDR
19009: GO 19062
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19011: LD_ADDR_EXP 99
19015: PUSH
19016: LD_EXP 99
19020: PPUSH
19021: LD_VAR 0 1
19025: PPUSH
19026: LD_VAR 0 1
19030: PPUSH
19031: CALL_OW 255
19035: PUSH
19036: LD_VAR 0 1
19040: PUSH
19041: LD_VAR 0 2
19045: PUSH
19046: LD_VAR 0 3
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 1
19061: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19062: CALL 19071 0 0
// end ;
19066: LD_VAR 0 4
19070: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19071: LD_INT 0
19073: PPUSH
19074: PPUSH
19075: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19076: LD_STRING resetWarehouseGatheringPoints();
19078: PPUSH
19079: CALL_OW 559
// if warehouseGatheringPoints then
19083: LD_EXP 99
19087: IFFALSE 19213
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19089: LD_ADDR_VAR 0 3
19093: PUSH
19094: LD_EXP 99
19098: PPUSH
19099: CALL 65425 0 1
19103: ST_TO_ADDR
// for i := 1 to list do
19104: LD_ADDR_VAR 0 2
19108: PUSH
19109: DOUBLE
19110: LD_INT 1
19112: DEC
19113: ST_TO_ADDR
19114: LD_VAR 0 3
19118: PUSH
19119: FOR_TO
19120: IFFALSE 19211
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19122: LD_STRING setWarehouseGatheringPointXY(
19124: PUSH
19125: LD_VAR 0 3
19129: PUSH
19130: LD_VAR 0 2
19134: ARRAY
19135: PUSH
19136: LD_INT 1
19138: ARRAY
19139: STR
19140: PUSH
19141: LD_STRING ,
19143: STR
19144: PUSH
19145: LD_VAR 0 3
19149: PUSH
19150: LD_VAR 0 2
19154: ARRAY
19155: PUSH
19156: LD_INT 2
19158: ARRAY
19159: STR
19160: PUSH
19161: LD_STRING ,
19163: STR
19164: PUSH
19165: LD_VAR 0 3
19169: PUSH
19170: LD_VAR 0 2
19174: ARRAY
19175: PUSH
19176: LD_INT 3
19178: ARRAY
19179: STR
19180: PUSH
19181: LD_STRING ,
19183: STR
19184: PUSH
19185: LD_VAR 0 3
19189: PUSH
19190: LD_VAR 0 2
19194: ARRAY
19195: PUSH
19196: LD_INT 4
19198: ARRAY
19199: STR
19200: PUSH
19201: LD_STRING )
19203: STR
19204: PPUSH
19205: CALL_OW 559
19209: GO 19119
19211: POP
19212: POP
// end ; end ;
19213: LD_VAR 0 1
19217: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19218: LD_EXP 99
19222: IFFALSE 19907
19224: GO 19226
19226: DISABLE
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
// begin enable ;
19238: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_EXP 99
19248: PPUSH
19249: CALL 65425 0 1
19253: ST_TO_ADDR
// if not list then
19254: LD_VAR 0 3
19258: NOT
19259: IFFALSE 19263
// exit ;
19261: GO 19907
// for i := 1 to list do
19263: LD_ADDR_VAR 0 1
19267: PUSH
19268: DOUBLE
19269: LD_INT 1
19271: DEC
19272: ST_TO_ADDR
19273: LD_VAR 0 3
19277: PUSH
19278: FOR_TO
19279: IFFALSE 19905
// begin depot := list [ i ] [ 2 ] ;
19281: LD_ADDR_VAR 0 8
19285: PUSH
19286: LD_VAR 0 3
19290: PUSH
19291: LD_VAR 0 1
19295: ARRAY
19296: PUSH
19297: LD_INT 2
19299: ARRAY
19300: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19301: LD_ADDR_VAR 0 5
19305: PUSH
19306: LD_VAR 0 3
19310: PUSH
19311: LD_VAR 0 1
19315: ARRAY
19316: PUSH
19317: LD_INT 1
19319: ARRAY
19320: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19321: LD_VAR 0 8
19325: PPUSH
19326: CALL_OW 301
19330: PUSH
19331: LD_VAR 0 5
19335: PUSH
19336: LD_VAR 0 8
19340: PPUSH
19341: CALL_OW 255
19345: NONEQUAL
19346: OR
19347: IFFALSE 19376
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19349: LD_ADDR_EXP 99
19353: PUSH
19354: LD_EXP 99
19358: PPUSH
19359: LD_VAR 0 8
19363: PPUSH
19364: LD_INT 0
19366: PPUSH
19367: CALL_OW 1
19371: ST_TO_ADDR
// exit ;
19372: POP
19373: POP
19374: GO 19907
// end ; x := list [ i ] [ 3 ] ;
19376: LD_ADDR_VAR 0 6
19380: PUSH
19381: LD_VAR 0 3
19385: PUSH
19386: LD_VAR 0 1
19390: ARRAY
19391: PUSH
19392: LD_INT 3
19394: ARRAY
19395: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19396: LD_ADDR_VAR 0 7
19400: PUSH
19401: LD_VAR 0 3
19405: PUSH
19406: LD_VAR 0 1
19410: ARRAY
19411: PUSH
19412: LD_INT 4
19414: ARRAY
19415: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19416: LD_ADDR_VAR 0 9
19420: PUSH
19421: LD_VAR 0 6
19425: PPUSH
19426: LD_VAR 0 7
19430: PPUSH
19431: LD_INT 16
19433: PPUSH
19434: CALL 64013 0 3
19438: ST_TO_ADDR
// if not cratesNearbyPoint then
19439: LD_VAR 0 9
19443: NOT
19444: IFFALSE 19450
// exit ;
19446: POP
19447: POP
19448: GO 19907
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19450: LD_ADDR_VAR 0 4
19454: PUSH
19455: LD_INT 22
19457: PUSH
19458: LD_VAR 0 5
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 3
19469: PUSH
19470: LD_INT 60
19472: PUSH
19473: EMPTY
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 91
19482: PUSH
19483: LD_VAR 0 8
19487: PUSH
19488: LD_INT 6
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: LD_INT 25
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 25
19511: PUSH
19512: LD_INT 16
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 69
19534: PUSH
19535: LD_VAR 0 8
19539: PPUSH
19540: CALL_OW 313
19544: PPUSH
19545: LD_INT 3
19547: PUSH
19548: LD_INT 60
19550: PUSH
19551: EMPTY
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: LD_INT 25
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 25
19573: PUSH
19574: LD_INT 16
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PPUSH
19590: CALL_OW 72
19594: UNION
19595: ST_TO_ADDR
// if tmp then
19596: LD_VAR 0 4
19600: IFFALSE 19680
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19602: LD_ADDR_VAR 0 4
19606: PUSH
19607: LD_VAR 0 4
19611: PPUSH
19612: LD_INT 3
19614: PPUSH
19615: CALL 61982 0 2
19619: ST_TO_ADDR
// for j in tmp do
19620: LD_ADDR_VAR 0 2
19624: PUSH
19625: LD_VAR 0 4
19629: PUSH
19630: FOR_IN
19631: IFFALSE 19674
// begin if IsInUnit ( j ) then
19633: LD_VAR 0 2
19637: PPUSH
19638: CALL_OW 310
19642: IFFALSE 19653
// ComExit ( j ) ;
19644: LD_VAR 0 2
19648: PPUSH
19649: CALL 62065 0 1
// AddComCollect ( j , x , y ) ;
19653: LD_VAR 0 2
19657: PPUSH
19658: LD_VAR 0 6
19662: PPUSH
19663: LD_VAR 0 7
19667: PPUSH
19668: CALL_OW 177
// end ;
19672: GO 19630
19674: POP
19675: POP
// exit ;
19676: POP
19677: POP
19678: GO 19907
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19680: LD_ADDR_VAR 0 4
19684: PUSH
19685: LD_INT 22
19687: PUSH
19688: LD_VAR 0 5
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 91
19699: PUSH
19700: LD_VAR 0 8
19704: PUSH
19705: LD_INT 8
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 2
19715: PUSH
19716: LD_INT 34
19718: PUSH
19719: LD_INT 12
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 34
19728: PUSH
19729: LD_INT 51
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 34
19738: PUSH
19739: LD_INT 32
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 34
19748: PUSH
19749: LD_INT 89
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: LIST
19767: PPUSH
19768: CALL_OW 69
19772: ST_TO_ADDR
// if tmp then
19773: LD_VAR 0 4
19777: IFFALSE 19903
// begin for j in tmp do
19779: LD_ADDR_VAR 0 2
19783: PUSH
19784: LD_VAR 0 4
19788: PUSH
19789: FOR_IN
19790: IFFALSE 19901
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19792: LD_VAR 0 2
19796: PPUSH
19797: CALL_OW 262
19801: PUSH
19802: LD_INT 3
19804: EQUAL
19805: PUSH
19806: LD_VAR 0 2
19810: PPUSH
19811: CALL_OW 261
19815: PUSH
19816: LD_INT 20
19818: GREATER
19819: OR
19820: PUSH
19821: LD_VAR 0 2
19825: PPUSH
19826: CALL_OW 314
19830: NOT
19831: AND
19832: PUSH
19833: LD_VAR 0 2
19837: PPUSH
19838: CALL_OW 263
19842: PUSH
19843: LD_INT 1
19845: NONEQUAL
19846: PUSH
19847: LD_VAR 0 2
19851: PPUSH
19852: CALL_OW 311
19856: OR
19857: AND
19858: IFFALSE 19899
// begin ComCollect ( j , x , y ) ;
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 6
19869: PPUSH
19870: LD_VAR 0 7
19874: PPUSH
19875: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19879: LD_VAR 0 2
19883: PPUSH
19884: LD_VAR 0 8
19888: PPUSH
19889: CALL_OW 172
// exit ;
19893: POP
19894: POP
19895: POP
19896: POP
19897: GO 19907
// end ;
19899: GO 19789
19901: POP
19902: POP
// end ; end ;
19903: GO 19278
19905: POP
19906: POP
// end ; end_of_file
19907: PPOPN 9
19909: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19910: LD_INT 0
19912: PPUSH
19913: PPUSH
19914: PPUSH
19915: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL_OW 264
19925: PUSH
19926: LD_INT 91
19928: EQUAL
19929: IFFALSE 20001
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19931: LD_INT 68
19933: PPUSH
19934: LD_VAR 0 1
19938: PPUSH
19939: CALL_OW 255
19943: PPUSH
19944: CALL_OW 321
19948: PUSH
19949: LD_INT 2
19951: EQUAL
19952: IFFALSE 19964
// eff := 70 else
19954: LD_ADDR_VAR 0 4
19958: PUSH
19959: LD_INT 70
19961: ST_TO_ADDR
19962: GO 19972
// eff := 30 ;
19964: LD_ADDR_VAR 0 4
19968: PUSH
19969: LD_INT 30
19971: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19972: LD_VAR 0 1
19976: PPUSH
19977: CALL_OW 250
19981: PPUSH
19982: LD_VAR 0 1
19986: PPUSH
19987: CALL_OW 251
19991: PPUSH
19992: LD_VAR 0 4
19996: PPUSH
19997: CALL_OW 495
// end ; end ;
20001: LD_VAR 0 2
20005: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20006: LD_INT 0
20008: PPUSH
// end ;
20009: LD_VAR 0 4
20013: RET
// export function SOS_Command ( cmd ) ; begin
20014: LD_INT 0
20016: PPUSH
// end ;
20017: LD_VAR 0 2
20021: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20022: LD_INT 0
20024: PPUSH
// end ;
20025: LD_VAR 0 6
20029: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20030: LD_INT 0
20032: PPUSH
20033: PPUSH
// if not vehicle or not factory then
20034: LD_VAR 0 1
20038: NOT
20039: PUSH
20040: LD_VAR 0 2
20044: NOT
20045: OR
20046: IFFALSE 20050
// exit ;
20048: GO 20281
// if factoryWaypoints >= factory then
20050: LD_EXP 98
20054: PUSH
20055: LD_VAR 0 2
20059: GREATEREQUAL
20060: IFFALSE 20281
// if factoryWaypoints [ factory ] then
20062: LD_EXP 98
20066: PUSH
20067: LD_VAR 0 2
20071: ARRAY
20072: IFFALSE 20281
// begin if GetControl ( vehicle ) = control_manual then
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 263
20083: PUSH
20084: LD_INT 1
20086: EQUAL
20087: IFFALSE 20168
// begin driver := IsDrivenBy ( vehicle ) ;
20089: LD_ADDR_VAR 0 4
20093: PUSH
20094: LD_VAR 0 1
20098: PPUSH
20099: CALL_OW 311
20103: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20104: LD_VAR 0 4
20108: PPUSH
20109: LD_EXP 98
20113: PUSH
20114: LD_VAR 0 2
20118: ARRAY
20119: PUSH
20120: LD_INT 3
20122: ARRAY
20123: PPUSH
20124: LD_EXP 98
20128: PUSH
20129: LD_VAR 0 2
20133: ARRAY
20134: PUSH
20135: LD_INT 4
20137: ARRAY
20138: PPUSH
20139: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20143: LD_VAR 0 4
20147: PPUSH
20148: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20152: LD_VAR 0 4
20156: PPUSH
20157: LD_VAR 0 2
20161: PPUSH
20162: CALL_OW 180
// end else
20166: GO 20281
// if GetControl ( vehicle ) = control_remote then
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 263
20177: PUSH
20178: LD_INT 2
20180: EQUAL
20181: IFFALSE 20242
// begin wait ( 0 0$2 ) ;
20183: LD_INT 70
20185: PPUSH
20186: CALL_OW 67
// if Connect ( vehicle ) then
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL 32305 0 1
20199: IFFALSE 20240
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20201: LD_VAR 0 1
20205: PPUSH
20206: LD_EXP 98
20210: PUSH
20211: LD_VAR 0 2
20215: ARRAY
20216: PUSH
20217: LD_INT 3
20219: ARRAY
20220: PPUSH
20221: LD_EXP 98
20225: PUSH
20226: LD_VAR 0 2
20230: ARRAY
20231: PUSH
20232: LD_INT 4
20234: ARRAY
20235: PPUSH
20236: CALL_OW 171
// end else
20240: GO 20281
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20242: LD_VAR 0 1
20246: PPUSH
20247: LD_EXP 98
20251: PUSH
20252: LD_VAR 0 2
20256: ARRAY
20257: PUSH
20258: LD_INT 3
20260: ARRAY
20261: PPUSH
20262: LD_EXP 98
20266: PUSH
20267: LD_VAR 0 2
20271: ARRAY
20272: PUSH
20273: LD_INT 4
20275: ARRAY
20276: PPUSH
20277: CALL_OW 171
// end ; end ;
20281: LD_VAR 0 3
20285: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20286: LD_INT 0
20288: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20289: LD_VAR 0 1
20293: PUSH
20294: LD_INT 250
20296: EQUAL
20297: PUSH
20298: LD_VAR 0 2
20302: PPUSH
20303: CALL_OW 264
20307: PUSH
20308: LD_INT 81
20310: EQUAL
20311: AND
20312: IFFALSE 20333
// MinerPlaceMine ( unit , x , y ) ;
20314: LD_VAR 0 2
20318: PPUSH
20319: LD_VAR 0 4
20323: PPUSH
20324: LD_VAR 0 5
20328: PPUSH
20329: CALL 22718 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20333: LD_VAR 0 1
20337: PUSH
20338: LD_INT 251
20340: EQUAL
20341: PUSH
20342: LD_VAR 0 2
20346: PPUSH
20347: CALL_OW 264
20351: PUSH
20352: LD_INT 81
20354: EQUAL
20355: AND
20356: IFFALSE 20377
// MinerDetonateMine ( unit , x , y ) ;
20358: LD_VAR 0 2
20362: PPUSH
20363: LD_VAR 0 4
20367: PPUSH
20368: LD_VAR 0 5
20372: PPUSH
20373: CALL 22993 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20377: LD_VAR 0 1
20381: PUSH
20382: LD_INT 252
20384: EQUAL
20385: PUSH
20386: LD_VAR 0 2
20390: PPUSH
20391: CALL_OW 264
20395: PUSH
20396: LD_INT 81
20398: EQUAL
20399: AND
20400: IFFALSE 20421
// MinerCreateMinefield ( unit , x , y ) ;
20402: LD_VAR 0 2
20406: PPUSH
20407: LD_VAR 0 4
20411: PPUSH
20412: LD_VAR 0 5
20416: PPUSH
20417: CALL 23410 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20421: LD_VAR 0 1
20425: PUSH
20426: LD_INT 253
20428: EQUAL
20429: PUSH
20430: LD_VAR 0 2
20434: PPUSH
20435: CALL_OW 257
20439: PUSH
20440: LD_INT 5
20442: EQUAL
20443: AND
20444: IFFALSE 20465
// ComBinocular ( unit , x , y ) ;
20446: LD_VAR 0 2
20450: PPUSH
20451: LD_VAR 0 4
20455: PPUSH
20456: LD_VAR 0 5
20460: PPUSH
20461: CALL 23779 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20465: LD_VAR 0 1
20469: PUSH
20470: LD_INT 254
20472: EQUAL
20473: PUSH
20474: LD_VAR 0 2
20478: PPUSH
20479: CALL_OW 264
20483: PUSH
20484: LD_INT 99
20486: EQUAL
20487: AND
20488: PUSH
20489: LD_VAR 0 3
20493: PPUSH
20494: CALL_OW 263
20498: PUSH
20499: LD_INT 3
20501: EQUAL
20502: AND
20503: IFFALSE 20519
// HackDestroyVehicle ( unit , selectedUnit ) ;
20505: LD_VAR 0 2
20509: PPUSH
20510: LD_VAR 0 3
20514: PPUSH
20515: CALL 22082 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20519: LD_VAR 0 1
20523: PUSH
20524: LD_INT 255
20526: EQUAL
20527: PUSH
20528: LD_VAR 0 2
20532: PPUSH
20533: CALL_OW 264
20537: PUSH
20538: LD_INT 14
20540: PUSH
20541: LD_INT 53
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: IN
20548: AND
20549: PUSH
20550: LD_VAR 0 4
20554: PPUSH
20555: LD_VAR 0 5
20559: PPUSH
20560: CALL_OW 488
20564: AND
20565: IFFALSE 20589
// CutTreeXYR ( unit , x , y , 12 ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_VAR 0 4
20576: PPUSH
20577: LD_VAR 0 5
20581: PPUSH
20582: LD_INT 12
20584: PPUSH
20585: CALL 20652 0 4
// if cmd = 256 then
20589: LD_VAR 0 1
20593: PUSH
20594: LD_INT 256
20596: EQUAL
20597: IFFALSE 20618
// SetFactoryWaypoint ( unit , x , y ) ;
20599: LD_VAR 0 2
20603: PPUSH
20604: LD_VAR 0 4
20608: PPUSH
20609: LD_VAR 0 5
20613: PPUSH
20614: CALL 18599 0 3
// if cmd = 257 then
20618: LD_VAR 0 1
20622: PUSH
20623: LD_INT 257
20625: EQUAL
20626: IFFALSE 20647
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20628: LD_VAR 0 2
20632: PPUSH
20633: LD_VAR 0 4
20637: PPUSH
20638: LD_VAR 0 5
20642: PPUSH
20643: CALL 18961 0 3
// end ;
20647: LD_VAR 0 6
20651: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20652: LD_INT 0
20654: PPUSH
20655: PPUSH
20656: PPUSH
20657: PPUSH
20658: PPUSH
20659: PPUSH
20660: PPUSH
20661: PPUSH
20662: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20663: LD_VAR 0 1
20667: NOT
20668: PUSH
20669: LD_VAR 0 2
20673: PPUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: CALL_OW 488
20683: NOT
20684: OR
20685: PUSH
20686: LD_VAR 0 4
20690: NOT
20691: OR
20692: IFFALSE 20696
// exit ;
20694: GO 21036
// list := [ ] ;
20696: LD_ADDR_VAR 0 13
20700: PUSH
20701: EMPTY
20702: ST_TO_ADDR
// if x - r < 0 then
20703: LD_VAR 0 2
20707: PUSH
20708: LD_VAR 0 4
20712: MINUS
20713: PUSH
20714: LD_INT 0
20716: LESS
20717: IFFALSE 20729
// min_x := 0 else
20719: LD_ADDR_VAR 0 7
20723: PUSH
20724: LD_INT 0
20726: ST_TO_ADDR
20727: GO 20745
// min_x := x - r ;
20729: LD_ADDR_VAR 0 7
20733: PUSH
20734: LD_VAR 0 2
20738: PUSH
20739: LD_VAR 0 4
20743: MINUS
20744: ST_TO_ADDR
// if y - r < 0 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_VAR 0 4
20754: MINUS
20755: PUSH
20756: LD_INT 0
20758: LESS
20759: IFFALSE 20771
// min_y := 0 else
20761: LD_ADDR_VAR 0 8
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
20769: GO 20787
// min_y := y - r ;
20771: LD_ADDR_VAR 0 8
20775: PUSH
20776: LD_VAR 0 3
20780: PUSH
20781: LD_VAR 0 4
20785: MINUS
20786: ST_TO_ADDR
// max_x := x + r ;
20787: LD_ADDR_VAR 0 9
20791: PUSH
20792: LD_VAR 0 2
20796: PUSH
20797: LD_VAR 0 4
20801: PLUS
20802: ST_TO_ADDR
// max_y := y + r ;
20803: LD_ADDR_VAR 0 10
20807: PUSH
20808: LD_VAR 0 3
20812: PUSH
20813: LD_VAR 0 4
20817: PLUS
20818: ST_TO_ADDR
// for _x = min_x to max_x do
20819: LD_ADDR_VAR 0 11
20823: PUSH
20824: DOUBLE
20825: LD_VAR 0 7
20829: DEC
20830: ST_TO_ADDR
20831: LD_VAR 0 9
20835: PUSH
20836: FOR_TO
20837: IFFALSE 20954
// for _y = min_y to max_y do
20839: LD_ADDR_VAR 0 12
20843: PUSH
20844: DOUBLE
20845: LD_VAR 0 8
20849: DEC
20850: ST_TO_ADDR
20851: LD_VAR 0 10
20855: PUSH
20856: FOR_TO
20857: IFFALSE 20950
// begin if not ValidHex ( _x , _y ) then
20859: LD_VAR 0 11
20863: PPUSH
20864: LD_VAR 0 12
20868: PPUSH
20869: CALL_OW 488
20873: NOT
20874: IFFALSE 20878
// continue ;
20876: GO 20856
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20878: LD_VAR 0 11
20882: PPUSH
20883: LD_VAR 0 12
20887: PPUSH
20888: CALL_OW 351
20892: PUSH
20893: LD_VAR 0 11
20897: PPUSH
20898: LD_VAR 0 12
20902: PPUSH
20903: CALL_OW 554
20907: AND
20908: IFFALSE 20948
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20910: LD_ADDR_VAR 0 13
20914: PUSH
20915: LD_VAR 0 13
20919: PPUSH
20920: LD_VAR 0 13
20924: PUSH
20925: LD_INT 1
20927: PLUS
20928: PPUSH
20929: LD_VAR 0 11
20933: PUSH
20934: LD_VAR 0 12
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 2
20947: ST_TO_ADDR
// end ;
20948: GO 20856
20950: POP
20951: POP
20952: GO 20836
20954: POP
20955: POP
// if not list then
20956: LD_VAR 0 13
20960: NOT
20961: IFFALSE 20965
// exit ;
20963: GO 21036
// for i in list do
20965: LD_ADDR_VAR 0 6
20969: PUSH
20970: LD_VAR 0 13
20974: PUSH
20975: FOR_IN
20976: IFFALSE 21034
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20978: LD_VAR 0 1
20982: PPUSH
20983: LD_STRING M
20985: PUSH
20986: LD_VAR 0 6
20990: PUSH
20991: LD_INT 1
20993: ARRAY
20994: PUSH
20995: LD_VAR 0 6
20999: PUSH
21000: LD_INT 2
21002: ARRAY
21003: PUSH
21004: LD_INT 0
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: PPUSH
21028: CALL_OW 447
21032: GO 20975
21034: POP
21035: POP
// end ;
21036: LD_VAR 0 5
21040: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21041: LD_EXP 101
21045: NOT
21046: IFFALSE 21096
21048: GO 21050
21050: DISABLE
// begin initHack := true ;
21051: LD_ADDR_EXP 101
21055: PUSH
21056: LD_INT 1
21058: ST_TO_ADDR
// hackTanks := [ ] ;
21059: LD_ADDR_EXP 102
21063: PUSH
21064: EMPTY
21065: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21066: LD_ADDR_EXP 103
21070: PUSH
21071: EMPTY
21072: ST_TO_ADDR
// hackLimit := 3 ;
21073: LD_ADDR_EXP 104
21077: PUSH
21078: LD_INT 3
21080: ST_TO_ADDR
// hackDist := 12 ;
21081: LD_ADDR_EXP 105
21085: PUSH
21086: LD_INT 12
21088: ST_TO_ADDR
// hackCounter := [ ] ;
21089: LD_ADDR_EXP 106
21093: PUSH
21094: EMPTY
21095: ST_TO_ADDR
// end ;
21096: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21097: LD_EXP 101
21101: PUSH
21102: LD_INT 34
21104: PUSH
21105: LD_INT 99
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PPUSH
21112: CALL_OW 69
21116: AND
21117: IFFALSE 21370
21119: GO 21121
21121: DISABLE
21122: LD_INT 0
21124: PPUSH
21125: PPUSH
// begin enable ;
21126: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21127: LD_ADDR_VAR 0 1
21131: PUSH
21132: LD_INT 34
21134: PUSH
21135: LD_INT 99
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 69
21146: PUSH
21147: FOR_IN
21148: IFFALSE 21368
// begin if not i in hackTanks then
21150: LD_VAR 0 1
21154: PUSH
21155: LD_EXP 102
21159: IN
21160: NOT
21161: IFFALSE 21244
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21163: LD_ADDR_EXP 102
21167: PUSH
21168: LD_EXP 102
21172: PPUSH
21173: LD_EXP 102
21177: PUSH
21178: LD_INT 1
21180: PLUS
21181: PPUSH
21182: LD_VAR 0 1
21186: PPUSH
21187: CALL_OW 1
21191: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21192: LD_ADDR_EXP 103
21196: PUSH
21197: LD_EXP 103
21201: PPUSH
21202: LD_EXP 103
21206: PUSH
21207: LD_INT 1
21209: PLUS
21210: PPUSH
21211: EMPTY
21212: PPUSH
21213: CALL_OW 1
21217: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21218: LD_ADDR_EXP 106
21222: PUSH
21223: LD_EXP 106
21227: PPUSH
21228: LD_EXP 106
21232: PUSH
21233: LD_INT 1
21235: PLUS
21236: PPUSH
21237: EMPTY
21238: PPUSH
21239: CALL_OW 1
21243: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 302
21253: NOT
21254: IFFALSE 21267
// begin HackUnlinkAll ( i ) ;
21256: LD_VAR 0 1
21260: PPUSH
21261: CALL 21373 0 1
// continue ;
21265: GO 21147
// end ; HackCheckCapturedStatus ( i ) ;
21267: LD_VAR 0 1
21271: PPUSH
21272: CALL 21816 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21276: LD_ADDR_VAR 0 2
21280: PUSH
21281: LD_INT 81
21283: PUSH
21284: LD_VAR 0 1
21288: PPUSH
21289: CALL_OW 255
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 33
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 91
21310: PUSH
21311: LD_VAR 0 1
21315: PUSH
21316: LD_EXP 105
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 50
21328: PUSH
21329: EMPTY
21330: LIST
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: PPUSH
21338: CALL_OW 69
21342: ST_TO_ADDR
// if not tmp then
21343: LD_VAR 0 2
21347: NOT
21348: IFFALSE 21352
// continue ;
21350: GO 21147
// HackLink ( i , tmp ) ;
21352: LD_VAR 0 1
21356: PPUSH
21357: LD_VAR 0 2
21361: PPUSH
21362: CALL 21509 0 2
// end ;
21366: GO 21147
21368: POP
21369: POP
// end ;
21370: PPOPN 2
21372: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21373: LD_INT 0
21375: PPUSH
21376: PPUSH
21377: PPUSH
// if not hack in hackTanks then
21378: LD_VAR 0 1
21382: PUSH
21383: LD_EXP 102
21387: IN
21388: NOT
21389: IFFALSE 21393
// exit ;
21391: GO 21504
// index := GetElementIndex ( hackTanks , hack ) ;
21393: LD_ADDR_VAR 0 4
21397: PUSH
21398: LD_EXP 102
21402: PPUSH
21403: LD_VAR 0 1
21407: PPUSH
21408: CALL 29121 0 2
21412: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21413: LD_EXP 103
21417: PUSH
21418: LD_VAR 0 4
21422: ARRAY
21423: IFFALSE 21504
// begin for i in hackTanksCaptured [ index ] do
21425: LD_ADDR_VAR 0 3
21429: PUSH
21430: LD_EXP 103
21434: PUSH
21435: LD_VAR 0 4
21439: ARRAY
21440: PUSH
21441: FOR_IN
21442: IFFALSE 21468
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21444: LD_VAR 0 3
21448: PUSH
21449: LD_INT 1
21451: ARRAY
21452: PPUSH
21453: LD_VAR 0 3
21457: PUSH
21458: LD_INT 2
21460: ARRAY
21461: PPUSH
21462: CALL_OW 235
21466: GO 21441
21468: POP
21469: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21470: LD_ADDR_EXP 103
21474: PUSH
21475: LD_EXP 103
21479: PPUSH
21480: LD_VAR 0 4
21484: PPUSH
21485: EMPTY
21486: PPUSH
21487: CALL_OW 1
21491: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21492: LD_VAR 0 1
21496: PPUSH
21497: LD_INT 0
21499: PPUSH
21500: CALL_OW 505
// end ; end ;
21504: LD_VAR 0 2
21508: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21509: LD_INT 0
21511: PPUSH
21512: PPUSH
21513: PPUSH
// if not hack in hackTanks or not vehicles then
21514: LD_VAR 0 1
21518: PUSH
21519: LD_EXP 102
21523: IN
21524: NOT
21525: PUSH
21526: LD_VAR 0 2
21530: NOT
21531: OR
21532: IFFALSE 21536
// exit ;
21534: GO 21811
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21536: LD_ADDR_VAR 0 2
21540: PUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: LD_VAR 0 2
21550: PPUSH
21551: LD_INT 1
21553: PPUSH
21554: LD_INT 1
21556: PPUSH
21557: CALL 29771 0 4
21561: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21562: LD_ADDR_VAR 0 5
21566: PUSH
21567: LD_EXP 102
21571: PPUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL 29121 0 2
21581: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21582: LD_EXP 103
21586: PUSH
21587: LD_VAR 0 5
21591: ARRAY
21592: PUSH
21593: LD_EXP 104
21597: LESS
21598: IFFALSE 21787
// begin for i := 1 to vehicles do
21600: LD_ADDR_VAR 0 4
21604: PUSH
21605: DOUBLE
21606: LD_INT 1
21608: DEC
21609: ST_TO_ADDR
21610: LD_VAR 0 2
21614: PUSH
21615: FOR_TO
21616: IFFALSE 21785
// begin if hackTanksCaptured [ index ] = hackLimit then
21618: LD_EXP 103
21622: PUSH
21623: LD_VAR 0 5
21627: ARRAY
21628: PUSH
21629: LD_EXP 104
21633: EQUAL
21634: IFFALSE 21638
// break ;
21636: GO 21785
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21638: LD_ADDR_EXP 106
21642: PUSH
21643: LD_EXP 106
21647: PPUSH
21648: LD_VAR 0 5
21652: PPUSH
21653: LD_EXP 106
21657: PUSH
21658: LD_VAR 0 5
21662: ARRAY
21663: PUSH
21664: LD_INT 1
21666: PLUS
21667: PPUSH
21668: CALL_OW 1
21672: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21673: LD_ADDR_EXP 103
21677: PUSH
21678: LD_EXP 103
21682: PPUSH
21683: LD_VAR 0 5
21687: PUSH
21688: LD_EXP 103
21692: PUSH
21693: LD_VAR 0 5
21697: ARRAY
21698: PUSH
21699: LD_INT 1
21701: PLUS
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PPUSH
21707: LD_VAR 0 2
21711: PUSH
21712: LD_VAR 0 4
21716: ARRAY
21717: PUSH
21718: LD_VAR 0 2
21722: PUSH
21723: LD_VAR 0 4
21727: ARRAY
21728: PPUSH
21729: CALL_OW 255
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PPUSH
21738: CALL 29336 0 3
21742: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21743: LD_VAR 0 2
21747: PUSH
21748: LD_VAR 0 4
21752: ARRAY
21753: PPUSH
21754: LD_VAR 0 1
21758: PPUSH
21759: CALL_OW 255
21763: PPUSH
21764: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21768: LD_VAR 0 2
21772: PUSH
21773: LD_VAR 0 4
21777: ARRAY
21778: PPUSH
21779: CALL_OW 141
// end ;
21783: GO 21615
21785: POP
21786: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_EXP 103
21796: PUSH
21797: LD_VAR 0 5
21801: ARRAY
21802: PUSH
21803: LD_INT 0
21805: PLUS
21806: PPUSH
21807: CALL_OW 505
// end ;
21811: LD_VAR 0 3
21815: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21816: LD_INT 0
21818: PPUSH
21819: PPUSH
21820: PPUSH
21821: PPUSH
// if not hack in hackTanks then
21822: LD_VAR 0 1
21826: PUSH
21827: LD_EXP 102
21831: IN
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 22077
// index := GetElementIndex ( hackTanks , hack ) ;
21837: LD_ADDR_VAR 0 4
21841: PUSH
21842: LD_EXP 102
21846: PPUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL 29121 0 2
21856: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21857: LD_ADDR_VAR 0 3
21861: PUSH
21862: DOUBLE
21863: LD_EXP 103
21867: PUSH
21868: LD_VAR 0 4
21872: ARRAY
21873: INC
21874: ST_TO_ADDR
21875: LD_INT 1
21877: PUSH
21878: FOR_DOWNTO
21879: IFFALSE 22051
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21881: LD_ADDR_VAR 0 5
21885: PUSH
21886: LD_EXP 103
21890: PUSH
21891: LD_VAR 0 4
21895: ARRAY
21896: PUSH
21897: LD_VAR 0 3
21901: ARRAY
21902: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21903: LD_VAR 0 5
21907: PUSH
21908: LD_INT 1
21910: ARRAY
21911: PPUSH
21912: CALL_OW 302
21916: NOT
21917: PUSH
21918: LD_VAR 0 5
21922: PUSH
21923: LD_INT 1
21925: ARRAY
21926: PPUSH
21927: CALL_OW 255
21931: PUSH
21932: LD_VAR 0 1
21936: PPUSH
21937: CALL_OW 255
21941: NONEQUAL
21942: OR
21943: IFFALSE 22049
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21945: LD_VAR 0 5
21949: PUSH
21950: LD_INT 1
21952: ARRAY
21953: PPUSH
21954: CALL_OW 305
21958: PUSH
21959: LD_VAR 0 5
21963: PUSH
21964: LD_INT 1
21966: ARRAY
21967: PPUSH
21968: CALL_OW 255
21972: PUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 255
21982: EQUAL
21983: AND
21984: IFFALSE 22008
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21986: LD_VAR 0 5
21990: PUSH
21991: LD_INT 1
21993: ARRAY
21994: PPUSH
21995: LD_VAR 0 5
21999: PUSH
22000: LD_INT 2
22002: ARRAY
22003: PPUSH
22004: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22008: LD_ADDR_EXP 103
22012: PUSH
22013: LD_EXP 103
22017: PPUSH
22018: LD_VAR 0 4
22022: PPUSH
22023: LD_EXP 103
22027: PUSH
22028: LD_VAR 0 4
22032: ARRAY
22033: PPUSH
22034: LD_VAR 0 3
22038: PPUSH
22039: CALL_OW 3
22043: PPUSH
22044: CALL_OW 1
22048: ST_TO_ADDR
// end ; end ;
22049: GO 21878
22051: POP
22052: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22053: LD_VAR 0 1
22057: PPUSH
22058: LD_EXP 103
22062: PUSH
22063: LD_VAR 0 4
22067: ARRAY
22068: PUSH
22069: LD_INT 0
22071: PLUS
22072: PPUSH
22073: CALL_OW 505
// end ;
22077: LD_VAR 0 2
22081: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22082: LD_INT 0
22084: PPUSH
22085: PPUSH
22086: PPUSH
22087: PPUSH
// if not hack in hackTanks then
22088: LD_VAR 0 1
22092: PUSH
22093: LD_EXP 102
22097: IN
22098: NOT
22099: IFFALSE 22103
// exit ;
22101: GO 22188
// index := GetElementIndex ( hackTanks , hack ) ;
22103: LD_ADDR_VAR 0 5
22107: PUSH
22108: LD_EXP 102
22112: PPUSH
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL 29121 0 2
22122: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22123: LD_ADDR_VAR 0 4
22127: PUSH
22128: DOUBLE
22129: LD_INT 1
22131: DEC
22132: ST_TO_ADDR
22133: LD_EXP 103
22137: PUSH
22138: LD_VAR 0 5
22142: ARRAY
22143: PUSH
22144: FOR_TO
22145: IFFALSE 22186
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22147: LD_EXP 103
22151: PUSH
22152: LD_VAR 0 5
22156: ARRAY
22157: PUSH
22158: LD_VAR 0 4
22162: ARRAY
22163: PUSH
22164: LD_INT 1
22166: ARRAY
22167: PUSH
22168: LD_VAR 0 2
22172: EQUAL
22173: IFFALSE 22184
// KillUnit ( vehicle ) ;
22175: LD_VAR 0 2
22179: PPUSH
22180: CALL_OW 66
22184: GO 22144
22186: POP
22187: POP
// end ;
22188: LD_VAR 0 3
22192: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22193: LD_EXP 107
22197: NOT
22198: IFFALSE 22233
22200: GO 22202
22202: DISABLE
// begin initMiner := true ;
22203: LD_ADDR_EXP 107
22207: PUSH
22208: LD_INT 1
22210: ST_TO_ADDR
// minersList := [ ] ;
22211: LD_ADDR_EXP 108
22215: PUSH
22216: EMPTY
22217: ST_TO_ADDR
// minerMinesList := [ ] ;
22218: LD_ADDR_EXP 109
22222: PUSH
22223: EMPTY
22224: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22225: LD_ADDR_EXP 110
22229: PUSH
22230: LD_INT 5
22232: ST_TO_ADDR
// end ;
22233: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22234: LD_EXP 107
22238: PUSH
22239: LD_INT 34
22241: PUSH
22242: LD_INT 81
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PPUSH
22249: CALL_OW 69
22253: AND
22254: IFFALSE 22715
22256: GO 22258
22258: DISABLE
22259: LD_INT 0
22261: PPUSH
22262: PPUSH
22263: PPUSH
22264: PPUSH
// begin enable ;
22265: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22266: LD_ADDR_VAR 0 1
22270: PUSH
22271: LD_INT 34
22273: PUSH
22274: LD_INT 81
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PPUSH
22281: CALL_OW 69
22285: PUSH
22286: FOR_IN
22287: IFFALSE 22359
// begin if not i in minersList then
22289: LD_VAR 0 1
22293: PUSH
22294: LD_EXP 108
22298: IN
22299: NOT
22300: IFFALSE 22357
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22302: LD_ADDR_EXP 108
22306: PUSH
22307: LD_EXP 108
22311: PPUSH
22312: LD_EXP 108
22316: PUSH
22317: LD_INT 1
22319: PLUS
22320: PPUSH
22321: LD_VAR 0 1
22325: PPUSH
22326: CALL_OW 1
22330: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22331: LD_ADDR_EXP 109
22335: PUSH
22336: LD_EXP 109
22340: PPUSH
22341: LD_EXP 109
22345: PUSH
22346: LD_INT 1
22348: PLUS
22349: PPUSH
22350: EMPTY
22351: PPUSH
22352: CALL_OW 1
22356: ST_TO_ADDR
// end end ;
22357: GO 22286
22359: POP
22360: POP
// for i := minerMinesList downto 1 do
22361: LD_ADDR_VAR 0 1
22365: PUSH
22366: DOUBLE
22367: LD_EXP 109
22371: INC
22372: ST_TO_ADDR
22373: LD_INT 1
22375: PUSH
22376: FOR_DOWNTO
22377: IFFALSE 22713
// begin if IsLive ( minersList [ i ] ) then
22379: LD_EXP 108
22383: PUSH
22384: LD_VAR 0 1
22388: ARRAY
22389: PPUSH
22390: CALL_OW 300
22394: IFFALSE 22422
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22396: LD_EXP 108
22400: PUSH
22401: LD_VAR 0 1
22405: ARRAY
22406: PPUSH
22407: LD_EXP 109
22411: PUSH
22412: LD_VAR 0 1
22416: ARRAY
22417: PPUSH
22418: CALL_OW 505
// if not minerMinesList [ i ] then
22422: LD_EXP 109
22426: PUSH
22427: LD_VAR 0 1
22431: ARRAY
22432: NOT
22433: IFFALSE 22437
// continue ;
22435: GO 22376
// for j := minerMinesList [ i ] downto 1 do
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: DOUBLE
22443: LD_EXP 109
22447: PUSH
22448: LD_VAR 0 1
22452: ARRAY
22453: INC
22454: ST_TO_ADDR
22455: LD_INT 1
22457: PUSH
22458: FOR_DOWNTO
22459: IFFALSE 22709
// begin side := GetSide ( minersList [ i ] ) ;
22461: LD_ADDR_VAR 0 3
22465: PUSH
22466: LD_EXP 108
22470: PUSH
22471: LD_VAR 0 1
22475: ARRAY
22476: PPUSH
22477: CALL_OW 255
22481: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22482: LD_ADDR_VAR 0 4
22486: PUSH
22487: LD_EXP 109
22491: PUSH
22492: LD_VAR 0 1
22496: ARRAY
22497: PUSH
22498: LD_VAR 0 2
22502: ARRAY
22503: PUSH
22504: LD_INT 1
22506: ARRAY
22507: PPUSH
22508: LD_EXP 109
22512: PUSH
22513: LD_VAR 0 1
22517: ARRAY
22518: PUSH
22519: LD_VAR 0 2
22523: ARRAY
22524: PUSH
22525: LD_INT 2
22527: ARRAY
22528: PPUSH
22529: CALL_OW 428
22533: ST_TO_ADDR
// if not tmp then
22534: LD_VAR 0 4
22538: NOT
22539: IFFALSE 22543
// continue ;
22541: GO 22458
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22543: LD_VAR 0 4
22547: PUSH
22548: LD_INT 81
22550: PUSH
22551: LD_VAR 0 3
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL_OW 69
22564: IN
22565: PUSH
22566: LD_EXP 109
22570: PUSH
22571: LD_VAR 0 1
22575: ARRAY
22576: PUSH
22577: LD_VAR 0 2
22581: ARRAY
22582: PUSH
22583: LD_INT 1
22585: ARRAY
22586: PPUSH
22587: LD_EXP 109
22591: PUSH
22592: LD_VAR 0 1
22596: ARRAY
22597: PUSH
22598: LD_VAR 0 2
22602: ARRAY
22603: PUSH
22604: LD_INT 2
22606: ARRAY
22607: PPUSH
22608: CALL_OW 458
22612: AND
22613: IFFALSE 22707
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22615: LD_EXP 109
22619: PUSH
22620: LD_VAR 0 1
22624: ARRAY
22625: PUSH
22626: LD_VAR 0 2
22630: ARRAY
22631: PUSH
22632: LD_INT 1
22634: ARRAY
22635: PPUSH
22636: LD_EXP 109
22640: PUSH
22641: LD_VAR 0 1
22645: ARRAY
22646: PUSH
22647: LD_VAR 0 2
22651: ARRAY
22652: PUSH
22653: LD_INT 2
22655: ARRAY
22656: PPUSH
22657: LD_VAR 0 3
22661: PPUSH
22662: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22666: LD_ADDR_EXP 109
22670: PUSH
22671: LD_EXP 109
22675: PPUSH
22676: LD_VAR 0 1
22680: PPUSH
22681: LD_EXP 109
22685: PUSH
22686: LD_VAR 0 1
22690: ARRAY
22691: PPUSH
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 3
22701: PPUSH
22702: CALL_OW 1
22706: ST_TO_ADDR
// end ; end ;
22707: GO 22458
22709: POP
22710: POP
// end ;
22711: GO 22376
22713: POP
22714: POP
// end ;
22715: PPOPN 4
22717: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22718: LD_INT 0
22720: PPUSH
22721: PPUSH
// result := false ;
22722: LD_ADDR_VAR 0 4
22726: PUSH
22727: LD_INT 0
22729: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22730: LD_VAR 0 1
22734: PPUSH
22735: CALL_OW 264
22739: PUSH
22740: LD_INT 81
22742: EQUAL
22743: NOT
22744: IFFALSE 22748
// exit ;
22746: GO 22988
// index := GetElementIndex ( minersList , unit ) ;
22748: LD_ADDR_VAR 0 5
22752: PUSH
22753: LD_EXP 108
22757: PPUSH
22758: LD_VAR 0 1
22762: PPUSH
22763: CALL 29121 0 2
22767: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22768: LD_EXP 109
22772: PUSH
22773: LD_VAR 0 5
22777: ARRAY
22778: PUSH
22779: LD_EXP 110
22783: GREATEREQUAL
22784: IFFALSE 22788
// exit ;
22786: GO 22988
// ComMoveXY ( unit , x , y ) ;
22788: LD_VAR 0 1
22792: PPUSH
22793: LD_VAR 0 2
22797: PPUSH
22798: LD_VAR 0 3
22802: PPUSH
22803: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22807: LD_INT 35
22809: PPUSH
22810: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_VAR 0 2
22823: PPUSH
22824: LD_VAR 0 3
22828: PPUSH
22829: CALL 60476 0 3
22833: NOT
22834: PUSH
22835: LD_VAR 0 1
22839: PPUSH
22840: CALL_OW 314
22844: AND
22845: IFFALSE 22849
// exit ;
22847: GO 22988
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22849: LD_VAR 0 2
22853: PPUSH
22854: LD_VAR 0 3
22858: PPUSH
22859: CALL_OW 428
22863: PUSH
22864: LD_VAR 0 1
22868: EQUAL
22869: PUSH
22870: LD_VAR 0 1
22874: PPUSH
22875: CALL_OW 314
22879: NOT
22880: AND
22881: IFFALSE 22807
// PlaySoundXY ( x , y , PlantMine ) ;
22883: LD_VAR 0 2
22887: PPUSH
22888: LD_VAR 0 3
22892: PPUSH
22893: LD_STRING PlantMine
22895: PPUSH
22896: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22900: LD_VAR 0 2
22904: PPUSH
22905: LD_VAR 0 3
22909: PPUSH
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL_OW 255
22919: PPUSH
22920: LD_INT 0
22922: PPUSH
22923: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22927: LD_ADDR_EXP 109
22931: PUSH
22932: LD_EXP 109
22936: PPUSH
22937: LD_VAR 0 5
22941: PUSH
22942: LD_EXP 109
22946: PUSH
22947: LD_VAR 0 5
22951: ARRAY
22952: PUSH
22953: LD_INT 1
22955: PLUS
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PPUSH
22961: LD_VAR 0 2
22965: PUSH
22966: LD_VAR 0 3
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL 29336 0 3
22979: ST_TO_ADDR
// result := true ;
22980: LD_ADDR_VAR 0 4
22984: PUSH
22985: LD_INT 1
22987: ST_TO_ADDR
// end ;
22988: LD_VAR 0 4
22992: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22993: LD_INT 0
22995: PPUSH
22996: PPUSH
22997: PPUSH
// if not unit in minersList then
22998: LD_VAR 0 1
23002: PUSH
23003: LD_EXP 108
23007: IN
23008: NOT
23009: IFFALSE 23013
// exit ;
23011: GO 23405
// index := GetElementIndex ( minersList , unit ) ;
23013: LD_ADDR_VAR 0 6
23017: PUSH
23018: LD_EXP 108
23022: PPUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL 29121 0 2
23032: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23033: LD_ADDR_VAR 0 5
23037: PUSH
23038: DOUBLE
23039: LD_EXP 109
23043: PUSH
23044: LD_VAR 0 6
23048: ARRAY
23049: INC
23050: ST_TO_ADDR
23051: LD_INT 1
23053: PUSH
23054: FOR_DOWNTO
23055: IFFALSE 23216
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23057: LD_EXP 109
23061: PUSH
23062: LD_VAR 0 6
23066: ARRAY
23067: PUSH
23068: LD_VAR 0 5
23072: ARRAY
23073: PUSH
23074: LD_INT 1
23076: ARRAY
23077: PUSH
23078: LD_VAR 0 2
23082: EQUAL
23083: PUSH
23084: LD_EXP 109
23088: PUSH
23089: LD_VAR 0 6
23093: ARRAY
23094: PUSH
23095: LD_VAR 0 5
23099: ARRAY
23100: PUSH
23101: LD_INT 2
23103: ARRAY
23104: PUSH
23105: LD_VAR 0 3
23109: EQUAL
23110: AND
23111: IFFALSE 23214
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23113: LD_EXP 109
23117: PUSH
23118: LD_VAR 0 6
23122: ARRAY
23123: PUSH
23124: LD_VAR 0 5
23128: ARRAY
23129: PUSH
23130: LD_INT 1
23132: ARRAY
23133: PPUSH
23134: LD_EXP 109
23138: PUSH
23139: LD_VAR 0 6
23143: ARRAY
23144: PUSH
23145: LD_VAR 0 5
23149: ARRAY
23150: PUSH
23151: LD_INT 2
23153: ARRAY
23154: PPUSH
23155: LD_VAR 0 1
23159: PPUSH
23160: CALL_OW 255
23164: PPUSH
23165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23169: LD_ADDR_EXP 109
23173: PUSH
23174: LD_EXP 109
23178: PPUSH
23179: LD_VAR 0 6
23183: PPUSH
23184: LD_EXP 109
23188: PUSH
23189: LD_VAR 0 6
23193: ARRAY
23194: PPUSH
23195: LD_VAR 0 5
23199: PPUSH
23200: CALL_OW 3
23204: PPUSH
23205: CALL_OW 1
23209: ST_TO_ADDR
// exit ;
23210: POP
23211: POP
23212: GO 23405
// end ; end ;
23214: GO 23054
23216: POP
23217: POP
// for i := minerMinesList [ index ] downto 1 do
23218: LD_ADDR_VAR 0 5
23222: PUSH
23223: DOUBLE
23224: LD_EXP 109
23228: PUSH
23229: LD_VAR 0 6
23233: ARRAY
23234: INC
23235: ST_TO_ADDR
23236: LD_INT 1
23238: PUSH
23239: FOR_DOWNTO
23240: IFFALSE 23403
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23242: LD_EXP 109
23246: PUSH
23247: LD_VAR 0 6
23251: ARRAY
23252: PUSH
23253: LD_VAR 0 5
23257: ARRAY
23258: PUSH
23259: LD_INT 1
23261: ARRAY
23262: PPUSH
23263: LD_EXP 109
23267: PUSH
23268: LD_VAR 0 6
23272: ARRAY
23273: PUSH
23274: LD_VAR 0 5
23278: ARRAY
23279: PUSH
23280: LD_INT 2
23282: ARRAY
23283: PPUSH
23284: LD_VAR 0 2
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: CALL_OW 298
23298: PUSH
23299: LD_INT 6
23301: LESS
23302: IFFALSE 23401
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23304: LD_EXP 109
23308: PUSH
23309: LD_VAR 0 6
23313: ARRAY
23314: PUSH
23315: LD_VAR 0 5
23319: ARRAY
23320: PUSH
23321: LD_INT 1
23323: ARRAY
23324: PPUSH
23325: LD_EXP 109
23329: PUSH
23330: LD_VAR 0 6
23334: ARRAY
23335: PUSH
23336: LD_VAR 0 5
23340: ARRAY
23341: PUSH
23342: LD_INT 2
23344: ARRAY
23345: PPUSH
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 255
23355: PPUSH
23356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23360: LD_ADDR_EXP 109
23364: PUSH
23365: LD_EXP 109
23369: PPUSH
23370: LD_VAR 0 6
23374: PPUSH
23375: LD_EXP 109
23379: PUSH
23380: LD_VAR 0 6
23384: ARRAY
23385: PPUSH
23386: LD_VAR 0 5
23390: PPUSH
23391: CALL_OW 3
23395: PPUSH
23396: CALL_OW 1
23400: ST_TO_ADDR
// end ; end ;
23401: GO 23239
23403: POP
23404: POP
// end ;
23405: LD_VAR 0 4
23409: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23410: LD_INT 0
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
23416: PPUSH
23417: PPUSH
23418: PPUSH
23419: PPUSH
23420: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23421: LD_VAR 0 1
23425: PPUSH
23426: CALL_OW 264
23430: PUSH
23431: LD_INT 81
23433: EQUAL
23434: NOT
23435: PUSH
23436: LD_VAR 0 1
23440: PUSH
23441: LD_EXP 108
23445: IN
23446: NOT
23447: OR
23448: IFFALSE 23452
// exit ;
23450: GO 23774
// index := GetElementIndex ( minersList , unit ) ;
23452: LD_ADDR_VAR 0 6
23456: PUSH
23457: LD_EXP 108
23461: PPUSH
23462: LD_VAR 0 1
23466: PPUSH
23467: CALL 29121 0 2
23471: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23472: LD_ADDR_VAR 0 8
23476: PUSH
23477: LD_EXP 110
23481: PUSH
23482: LD_EXP 109
23486: PUSH
23487: LD_VAR 0 6
23491: ARRAY
23492: MINUS
23493: ST_TO_ADDR
// if not minesFreeAmount then
23494: LD_VAR 0 8
23498: NOT
23499: IFFALSE 23503
// exit ;
23501: GO 23774
// tmp := [ ] ;
23503: LD_ADDR_VAR 0 7
23507: PUSH
23508: EMPTY
23509: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23510: LD_ADDR_VAR 0 5
23514: PUSH
23515: DOUBLE
23516: LD_INT 1
23518: DEC
23519: ST_TO_ADDR
23520: LD_VAR 0 8
23524: PUSH
23525: FOR_TO
23526: IFFALSE 23721
// begin _d := rand ( 0 , 5 ) ;
23528: LD_ADDR_VAR 0 11
23532: PUSH
23533: LD_INT 0
23535: PPUSH
23536: LD_INT 5
23538: PPUSH
23539: CALL_OW 12
23543: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23544: LD_ADDR_VAR 0 12
23548: PUSH
23549: LD_INT 2
23551: PPUSH
23552: LD_INT 6
23554: PPUSH
23555: CALL_OW 12
23559: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23560: LD_ADDR_VAR 0 9
23564: PUSH
23565: LD_VAR 0 2
23569: PPUSH
23570: LD_VAR 0 11
23574: PPUSH
23575: LD_VAR 0 12
23579: PPUSH
23580: CALL_OW 272
23584: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23585: LD_ADDR_VAR 0 10
23589: PUSH
23590: LD_VAR 0 3
23594: PPUSH
23595: LD_VAR 0 11
23599: PPUSH
23600: LD_VAR 0 12
23604: PPUSH
23605: CALL_OW 273
23609: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23610: LD_VAR 0 9
23614: PPUSH
23615: LD_VAR 0 10
23619: PPUSH
23620: CALL_OW 488
23624: PUSH
23625: LD_VAR 0 9
23629: PUSH
23630: LD_VAR 0 10
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_VAR 0 7
23643: IN
23644: NOT
23645: AND
23646: PUSH
23647: LD_VAR 0 9
23651: PPUSH
23652: LD_VAR 0 10
23656: PPUSH
23657: CALL_OW 458
23661: NOT
23662: AND
23663: IFFALSE 23705
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23665: LD_ADDR_VAR 0 7
23669: PUSH
23670: LD_VAR 0 7
23674: PPUSH
23675: LD_VAR 0 7
23679: PUSH
23680: LD_INT 1
23682: PLUS
23683: PPUSH
23684: LD_VAR 0 9
23688: PUSH
23689: LD_VAR 0 10
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 1
23702: ST_TO_ADDR
23703: GO 23719
// i := i - 1 ;
23705: LD_ADDR_VAR 0 5
23709: PUSH
23710: LD_VAR 0 5
23714: PUSH
23715: LD_INT 1
23717: MINUS
23718: ST_TO_ADDR
// end ;
23719: GO 23525
23721: POP
23722: POP
// for i in tmp do
23723: LD_ADDR_VAR 0 5
23727: PUSH
23728: LD_VAR 0 7
23732: PUSH
23733: FOR_IN
23734: IFFALSE 23772
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23736: LD_VAR 0 1
23740: PPUSH
23741: LD_VAR 0 5
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PPUSH
23750: LD_VAR 0 5
23754: PUSH
23755: LD_INT 2
23757: ARRAY
23758: PPUSH
23759: CALL 22718 0 3
23763: NOT
23764: IFFALSE 23770
// exit ;
23766: POP
23767: POP
23768: GO 23774
23770: GO 23733
23772: POP
23773: POP
// end ;
23774: LD_VAR 0 4
23778: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
23787: PPUSH
// if not GetClass ( unit ) = class_sniper then
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 257
23797: PUSH
23798: LD_INT 5
23800: EQUAL
23801: NOT
23802: IFFALSE 23806
// exit ;
23804: GO 24194
// dist := 8 ;
23806: LD_ADDR_VAR 0 5
23810: PUSH
23811: LD_INT 8
23813: ST_TO_ADDR
// viewRange := 12 ;
23814: LD_ADDR_VAR 0 7
23818: PUSH
23819: LD_INT 12
23821: ST_TO_ADDR
// side := GetSide ( unit ) ;
23822: LD_ADDR_VAR 0 6
23826: PUSH
23827: LD_VAR 0 1
23831: PPUSH
23832: CALL_OW 255
23836: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23837: LD_INT 61
23839: PPUSH
23840: LD_VAR 0 6
23844: PPUSH
23845: CALL_OW 321
23849: PUSH
23850: LD_INT 2
23852: EQUAL
23853: IFFALSE 23863
// viewRange := 16 ;
23855: LD_ADDR_VAR 0 7
23859: PUSH
23860: LD_INT 16
23862: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_VAR 0 2
23872: PPUSH
23873: LD_VAR 0 3
23877: PPUSH
23878: CALL_OW 297
23882: PUSH
23883: LD_VAR 0 5
23887: GREATER
23888: IFFALSE 23967
// begin ComMoveXY ( unit , x , y ) ;
23890: LD_VAR 0 1
23894: PPUSH
23895: LD_VAR 0 2
23899: PPUSH
23900: LD_VAR 0 3
23904: PPUSH
23905: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23909: LD_INT 35
23911: PPUSH
23912: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_VAR 0 2
23925: PPUSH
23926: LD_VAR 0 3
23930: PPUSH
23931: CALL 60476 0 3
23935: NOT
23936: IFFALSE 23940
// exit ;
23938: GO 24194
// until GetDistUnitXY ( unit , x , y ) < dist ;
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_VAR 0 2
23949: PPUSH
23950: LD_VAR 0 3
23954: PPUSH
23955: CALL_OW 297
23959: PUSH
23960: LD_VAR 0 5
23964: LESS
23965: IFFALSE 23909
// end ; ComTurnXY ( unit , x , y ) ;
23967: LD_VAR 0 1
23971: PPUSH
23972: LD_VAR 0 2
23976: PPUSH
23977: LD_VAR 0 3
23981: PPUSH
23982: CALL_OW 118
// wait ( 5 ) ;
23986: LD_INT 5
23988: PPUSH
23989: CALL_OW 67
// _d := GetDir ( unit ) ;
23993: LD_ADDR_VAR 0 10
23997: PUSH
23998: LD_VAR 0 1
24002: PPUSH
24003: CALL_OW 254
24007: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24008: LD_ADDR_VAR 0 8
24012: PUSH
24013: LD_VAR 0 1
24017: PPUSH
24018: CALL_OW 250
24022: PPUSH
24023: LD_VAR 0 10
24027: PPUSH
24028: LD_VAR 0 5
24032: PPUSH
24033: CALL_OW 272
24037: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24038: LD_ADDR_VAR 0 9
24042: PUSH
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL_OW 251
24052: PPUSH
24053: LD_VAR 0 10
24057: PPUSH
24058: LD_VAR 0 5
24062: PPUSH
24063: CALL_OW 273
24067: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24068: LD_VAR 0 8
24072: PPUSH
24073: LD_VAR 0 9
24077: PPUSH
24078: CALL_OW 488
24082: NOT
24083: IFFALSE 24087
// exit ;
24085: GO 24194
// ComAnimCustom ( unit , 1 ) ;
24087: LD_VAR 0 1
24091: PPUSH
24092: LD_INT 1
24094: PPUSH
24095: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24099: LD_VAR 0 8
24103: PPUSH
24104: LD_VAR 0 9
24108: PPUSH
24109: LD_VAR 0 6
24113: PPUSH
24114: LD_VAR 0 7
24118: PPUSH
24119: CALL_OW 330
// repeat wait ( 1 ) ;
24123: LD_INT 1
24125: PPUSH
24126: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: CALL_OW 316
24139: PUSH
24140: LD_VAR 0 1
24144: PPUSH
24145: CALL_OW 314
24149: OR
24150: PUSH
24151: LD_VAR 0 1
24155: PPUSH
24156: CALL_OW 302
24160: NOT
24161: OR
24162: PUSH
24163: LD_VAR 0 1
24167: PPUSH
24168: CALL_OW 301
24172: OR
24173: IFFALSE 24123
// RemoveSeeing ( _x , _y , side ) ;
24175: LD_VAR 0 8
24179: PPUSH
24180: LD_VAR 0 9
24184: PPUSH
24185: LD_VAR 0 6
24189: PPUSH
24190: CALL_OW 331
// end ; end_of_file
24194: LD_VAR 0 4
24198: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24199: LD_INT 0
24201: PPUSH
24202: PPUSH
// if exist_mode then
24203: LD_VAR 0 2
24207: IFFALSE 24232
// unit := CreateCharacter ( prefix & ident ) else
24209: LD_ADDR_VAR 0 5
24213: PUSH
24214: LD_VAR 0 3
24218: PUSH
24219: LD_VAR 0 1
24223: STR
24224: PPUSH
24225: CALL_OW 34
24229: ST_TO_ADDR
24230: GO 24247
// unit := NewCharacter ( ident ) ;
24232: LD_ADDR_VAR 0 5
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 25
24246: ST_TO_ADDR
// result := unit ;
24247: LD_ADDR_VAR 0 4
24251: PUSH
24252: LD_VAR 0 5
24256: ST_TO_ADDR
// end ;
24257: LD_VAR 0 4
24261: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24262: LD_INT 0
24264: PPUSH
24265: PPUSH
// if not side or not nation then
24266: LD_VAR 0 1
24270: NOT
24271: PUSH
24272: LD_VAR 0 2
24276: NOT
24277: OR
24278: IFFALSE 24282
// exit ;
24280: GO 25050
// case nation of nation_american :
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 1
24289: DOUBLE
24290: EQUAL
24291: IFTRUE 24295
24293: GO 24509
24295: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_INT 35
24303: PUSH
24304: LD_INT 45
24306: PUSH
24307: LD_INT 46
24309: PUSH
24310: LD_INT 47
24312: PUSH
24313: LD_INT 82
24315: PUSH
24316: LD_INT 83
24318: PUSH
24319: LD_INT 84
24321: PUSH
24322: LD_INT 85
24324: PUSH
24325: LD_INT 86
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 6
24336: PUSH
24337: LD_INT 15
24339: PUSH
24340: LD_INT 16
24342: PUSH
24343: LD_INT 7
24345: PUSH
24346: LD_INT 12
24348: PUSH
24349: LD_INT 13
24351: PUSH
24352: LD_INT 10
24354: PUSH
24355: LD_INT 14
24357: PUSH
24358: LD_INT 20
24360: PUSH
24361: LD_INT 21
24363: PUSH
24364: LD_INT 22
24366: PUSH
24367: LD_INT 25
24369: PUSH
24370: LD_INT 32
24372: PUSH
24373: LD_INT 27
24375: PUSH
24376: LD_INT 36
24378: PUSH
24379: LD_INT 69
24381: PUSH
24382: LD_INT 39
24384: PUSH
24385: LD_INT 34
24387: PUSH
24388: LD_INT 40
24390: PUSH
24391: LD_INT 48
24393: PUSH
24394: LD_INT 49
24396: PUSH
24397: LD_INT 50
24399: PUSH
24400: LD_INT 51
24402: PUSH
24403: LD_INT 52
24405: PUSH
24406: LD_INT 53
24408: PUSH
24409: LD_INT 54
24411: PUSH
24412: LD_INT 55
24414: PUSH
24415: LD_INT 56
24417: PUSH
24418: LD_INT 57
24420: PUSH
24421: LD_INT 58
24423: PUSH
24424: LD_INT 59
24426: PUSH
24427: LD_INT 60
24429: PUSH
24430: LD_INT 61
24432: PUSH
24433: LD_INT 62
24435: PUSH
24436: LD_INT 80
24438: PUSH
24439: LD_INT 82
24441: PUSH
24442: LD_INT 83
24444: PUSH
24445: LD_INT 84
24447: PUSH
24448: LD_INT 85
24450: PUSH
24451: LD_INT 86
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: ST_TO_ADDR
24507: GO 24974
24509: LD_INT 2
24511: DOUBLE
24512: EQUAL
24513: IFTRUE 24517
24515: GO 24743
24517: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24518: LD_ADDR_VAR 0 4
24522: PUSH
24523: LD_INT 35
24525: PUSH
24526: LD_INT 45
24528: PUSH
24529: LD_INT 46
24531: PUSH
24532: LD_INT 47
24534: PUSH
24535: LD_INT 82
24537: PUSH
24538: LD_INT 83
24540: PUSH
24541: LD_INT 84
24543: PUSH
24544: LD_INT 85
24546: PUSH
24547: LD_INT 87
24549: PUSH
24550: LD_INT 70
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: LD_INT 11
24558: PUSH
24559: LD_INT 3
24561: PUSH
24562: LD_INT 4
24564: PUSH
24565: LD_INT 5
24567: PUSH
24568: LD_INT 6
24570: PUSH
24571: LD_INT 15
24573: PUSH
24574: LD_INT 18
24576: PUSH
24577: LD_INT 7
24579: PUSH
24580: LD_INT 17
24582: PUSH
24583: LD_INT 8
24585: PUSH
24586: LD_INT 20
24588: PUSH
24589: LD_INT 21
24591: PUSH
24592: LD_INT 22
24594: PUSH
24595: LD_INT 72
24597: PUSH
24598: LD_INT 26
24600: PUSH
24601: LD_INT 69
24603: PUSH
24604: LD_INT 39
24606: PUSH
24607: LD_INT 40
24609: PUSH
24610: LD_INT 41
24612: PUSH
24613: LD_INT 42
24615: PUSH
24616: LD_INT 43
24618: PUSH
24619: LD_INT 48
24621: PUSH
24622: LD_INT 49
24624: PUSH
24625: LD_INT 50
24627: PUSH
24628: LD_INT 51
24630: PUSH
24631: LD_INT 52
24633: PUSH
24634: LD_INT 53
24636: PUSH
24637: LD_INT 54
24639: PUSH
24640: LD_INT 55
24642: PUSH
24643: LD_INT 56
24645: PUSH
24646: LD_INT 60
24648: PUSH
24649: LD_INT 61
24651: PUSH
24652: LD_INT 62
24654: PUSH
24655: LD_INT 66
24657: PUSH
24658: LD_INT 67
24660: PUSH
24661: LD_INT 68
24663: PUSH
24664: LD_INT 81
24666: PUSH
24667: LD_INT 82
24669: PUSH
24670: LD_INT 83
24672: PUSH
24673: LD_INT 84
24675: PUSH
24676: LD_INT 85
24678: PUSH
24679: LD_INT 87
24681: PUSH
24682: LD_INT 88
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: ST_TO_ADDR
24741: GO 24974
24743: LD_INT 3
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24973
24751: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24752: LD_ADDR_VAR 0 4
24756: PUSH
24757: LD_INT 46
24759: PUSH
24760: LD_INT 47
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: LD_INT 82
24771: PUSH
24772: LD_INT 83
24774: PUSH
24775: LD_INT 84
24777: PUSH
24778: LD_INT 85
24780: PUSH
24781: LD_INT 86
24783: PUSH
24784: LD_INT 11
24786: PUSH
24787: LD_INT 9
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 19
24795: PUSH
24796: LD_INT 21
24798: PUSH
24799: LD_INT 24
24801: PUSH
24802: LD_INT 22
24804: PUSH
24805: LD_INT 25
24807: PUSH
24808: LD_INT 28
24810: PUSH
24811: LD_INT 29
24813: PUSH
24814: LD_INT 30
24816: PUSH
24817: LD_INT 31
24819: PUSH
24820: LD_INT 37
24822: PUSH
24823: LD_INT 38
24825: PUSH
24826: LD_INT 32
24828: PUSH
24829: LD_INT 27
24831: PUSH
24832: LD_INT 33
24834: PUSH
24835: LD_INT 69
24837: PUSH
24838: LD_INT 39
24840: PUSH
24841: LD_INT 34
24843: PUSH
24844: LD_INT 40
24846: PUSH
24847: LD_INT 71
24849: PUSH
24850: LD_INT 23
24852: PUSH
24853: LD_INT 44
24855: PUSH
24856: LD_INT 48
24858: PUSH
24859: LD_INT 49
24861: PUSH
24862: LD_INT 50
24864: PUSH
24865: LD_INT 51
24867: PUSH
24868: LD_INT 52
24870: PUSH
24871: LD_INT 53
24873: PUSH
24874: LD_INT 54
24876: PUSH
24877: LD_INT 55
24879: PUSH
24880: LD_INT 56
24882: PUSH
24883: LD_INT 57
24885: PUSH
24886: LD_INT 58
24888: PUSH
24889: LD_INT 59
24891: PUSH
24892: LD_INT 63
24894: PUSH
24895: LD_INT 64
24897: PUSH
24898: LD_INT 65
24900: PUSH
24901: LD_INT 82
24903: PUSH
24904: LD_INT 83
24906: PUSH
24907: LD_INT 84
24909: PUSH
24910: LD_INT 85
24912: PUSH
24913: LD_INT 86
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: ST_TO_ADDR
24971: GO 24974
24973: POP
// if state > - 1 and state < 3 then
24974: LD_VAR 0 3
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: GREATER
24983: PUSH
24984: LD_VAR 0 3
24988: PUSH
24989: LD_INT 3
24991: LESS
24992: AND
24993: IFFALSE 25050
// for i in result do
24995: LD_ADDR_VAR 0 5
24999: PUSH
25000: LD_VAR 0 4
25004: PUSH
25005: FOR_IN
25006: IFFALSE 25048
// if GetTech ( i , side ) <> state then
25008: LD_VAR 0 5
25012: PPUSH
25013: LD_VAR 0 1
25017: PPUSH
25018: CALL_OW 321
25022: PUSH
25023: LD_VAR 0 3
25027: NONEQUAL
25028: IFFALSE 25046
// result := result diff i ;
25030: LD_ADDR_VAR 0 4
25034: PUSH
25035: LD_VAR 0 4
25039: PUSH
25040: LD_VAR 0 5
25044: DIFF
25045: ST_TO_ADDR
25046: GO 25005
25048: POP
25049: POP
// end ;
25050: LD_VAR 0 4
25054: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25055: LD_INT 0
25057: PPUSH
25058: PPUSH
25059: PPUSH
// result := true ;
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_INT 1
25067: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25068: LD_ADDR_VAR 0 5
25072: PUSH
25073: LD_VAR 0 2
25077: PPUSH
25078: CALL_OW 480
25082: ST_TO_ADDR
// if not tmp then
25083: LD_VAR 0 5
25087: NOT
25088: IFFALSE 25092
// exit ;
25090: GO 25141
// for i in tmp do
25092: LD_ADDR_VAR 0 4
25096: PUSH
25097: LD_VAR 0 5
25101: PUSH
25102: FOR_IN
25103: IFFALSE 25139
// if GetTech ( i , side ) <> state_researched then
25105: LD_VAR 0 4
25109: PPUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 321
25119: PUSH
25120: LD_INT 2
25122: NONEQUAL
25123: IFFALSE 25137
// begin result := false ;
25125: LD_ADDR_VAR 0 3
25129: PUSH
25130: LD_INT 0
25132: ST_TO_ADDR
// exit ;
25133: POP
25134: POP
25135: GO 25141
// end ;
25137: GO 25102
25139: POP
25140: POP
// end ;
25141: LD_VAR 0 3
25145: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25146: LD_INT 0
25148: PPUSH
25149: PPUSH
25150: PPUSH
25151: PPUSH
25152: PPUSH
25153: PPUSH
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
25160: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25161: LD_VAR 0 1
25165: NOT
25166: PUSH
25167: LD_VAR 0 1
25171: PPUSH
25172: CALL_OW 257
25176: PUSH
25177: LD_INT 9
25179: NONEQUAL
25180: OR
25181: IFFALSE 25185
// exit ;
25183: GO 25758
// side := GetSide ( unit ) ;
25185: LD_ADDR_VAR 0 9
25189: PUSH
25190: LD_VAR 0 1
25194: PPUSH
25195: CALL_OW 255
25199: ST_TO_ADDR
// tech_space := tech_spacanom ;
25200: LD_ADDR_VAR 0 12
25204: PUSH
25205: LD_INT 29
25207: ST_TO_ADDR
// tech_time := tech_taurad ;
25208: LD_ADDR_VAR 0 13
25212: PUSH
25213: LD_INT 28
25215: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25216: LD_ADDR_VAR 0 11
25220: PUSH
25221: LD_VAR 0 1
25225: PPUSH
25226: CALL_OW 310
25230: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25231: LD_VAR 0 11
25235: PPUSH
25236: CALL_OW 247
25240: PUSH
25241: LD_INT 2
25243: EQUAL
25244: IFFALSE 25248
// exit ;
25246: GO 25758
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25248: LD_ADDR_VAR 0 8
25252: PUSH
25253: LD_INT 81
25255: PUSH
25256: LD_VAR 0 9
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 3
25267: PUSH
25268: LD_INT 21
25270: PUSH
25271: LD_INT 3
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PPUSH
25286: CALL_OW 69
25290: ST_TO_ADDR
// if not tmp then
25291: LD_VAR 0 8
25295: NOT
25296: IFFALSE 25300
// exit ;
25298: GO 25758
// if in_unit then
25300: LD_VAR 0 11
25304: IFFALSE 25328
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25306: LD_ADDR_VAR 0 10
25310: PUSH
25311: LD_VAR 0 8
25315: PPUSH
25316: LD_VAR 0 11
25320: PPUSH
25321: CALL_OW 74
25325: ST_TO_ADDR
25326: GO 25348
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25328: LD_ADDR_VAR 0 10
25332: PUSH
25333: LD_VAR 0 8
25337: PPUSH
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL_OW 74
25347: ST_TO_ADDR
// if not enemy then
25348: LD_VAR 0 10
25352: NOT
25353: IFFALSE 25357
// exit ;
25355: GO 25758
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25357: LD_VAR 0 11
25361: PUSH
25362: LD_VAR 0 11
25366: PPUSH
25367: LD_VAR 0 10
25371: PPUSH
25372: CALL_OW 296
25376: PUSH
25377: LD_INT 13
25379: GREATER
25380: AND
25381: PUSH
25382: LD_VAR 0 1
25386: PPUSH
25387: LD_VAR 0 10
25391: PPUSH
25392: CALL_OW 296
25396: PUSH
25397: LD_INT 12
25399: GREATER
25400: OR
25401: IFFALSE 25405
// exit ;
25403: GO 25758
// missile := [ 1 ] ;
25405: LD_ADDR_VAR 0 14
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25416: LD_VAR 0 9
25420: PPUSH
25421: LD_VAR 0 12
25425: PPUSH
25426: CALL_OW 325
25430: IFFALSE 25459
// missile := Replace ( missile , missile + 1 , 2 ) ;
25432: LD_ADDR_VAR 0 14
25436: PUSH
25437: LD_VAR 0 14
25441: PPUSH
25442: LD_VAR 0 14
25446: PUSH
25447: LD_INT 1
25449: PLUS
25450: PPUSH
25451: LD_INT 2
25453: PPUSH
25454: CALL_OW 1
25458: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25459: LD_VAR 0 9
25463: PPUSH
25464: LD_VAR 0 13
25468: PPUSH
25469: CALL_OW 325
25473: PUSH
25474: LD_VAR 0 10
25478: PPUSH
25479: CALL_OW 255
25483: PPUSH
25484: LD_VAR 0 13
25488: PPUSH
25489: CALL_OW 325
25493: NOT
25494: AND
25495: IFFALSE 25524
// missile := Replace ( missile , missile + 1 , 3 ) ;
25497: LD_ADDR_VAR 0 14
25501: PUSH
25502: LD_VAR 0 14
25506: PPUSH
25507: LD_VAR 0 14
25511: PUSH
25512: LD_INT 1
25514: PLUS
25515: PPUSH
25516: LD_INT 3
25518: PPUSH
25519: CALL_OW 1
25523: ST_TO_ADDR
// if missile < 2 then
25524: LD_VAR 0 14
25528: PUSH
25529: LD_INT 2
25531: LESS
25532: IFFALSE 25536
// exit ;
25534: GO 25758
// x := GetX ( enemy ) ;
25536: LD_ADDR_VAR 0 4
25540: PUSH
25541: LD_VAR 0 10
25545: PPUSH
25546: CALL_OW 250
25550: ST_TO_ADDR
// y := GetY ( enemy ) ;
25551: LD_ADDR_VAR 0 5
25555: PUSH
25556: LD_VAR 0 10
25560: PPUSH
25561: CALL_OW 251
25565: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25566: LD_ADDR_VAR 0 6
25570: PUSH
25571: LD_VAR 0 4
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PPUSH
25580: LD_INT 1
25582: PPUSH
25583: CALL_OW 12
25587: PLUS
25588: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25589: LD_ADDR_VAR 0 7
25593: PUSH
25594: LD_VAR 0 5
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PPUSH
25603: LD_INT 1
25605: PPUSH
25606: CALL_OW 12
25610: PLUS
25611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25612: LD_VAR 0 6
25616: PPUSH
25617: LD_VAR 0 7
25621: PPUSH
25622: CALL_OW 488
25626: NOT
25627: IFFALSE 25649
// begin _x := x ;
25629: LD_ADDR_VAR 0 6
25633: PUSH
25634: LD_VAR 0 4
25638: ST_TO_ADDR
// _y := y ;
25639: LD_ADDR_VAR 0 7
25643: PUSH
25644: LD_VAR 0 5
25648: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25649: LD_ADDR_VAR 0 3
25653: PUSH
25654: LD_INT 1
25656: PPUSH
25657: LD_VAR 0 14
25661: PPUSH
25662: CALL_OW 12
25666: ST_TO_ADDR
// case i of 1 :
25667: LD_VAR 0 3
25671: PUSH
25672: LD_INT 1
25674: DOUBLE
25675: EQUAL
25676: IFTRUE 25680
25678: GO 25697
25680: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25681: LD_VAR 0 1
25685: PPUSH
25686: LD_VAR 0 10
25690: PPUSH
25691: CALL_OW 115
25695: GO 25758
25697: LD_INT 2
25699: DOUBLE
25700: EQUAL
25701: IFTRUE 25705
25703: GO 25727
25705: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25706: LD_VAR 0 1
25710: PPUSH
25711: LD_VAR 0 6
25715: PPUSH
25716: LD_VAR 0 7
25720: PPUSH
25721: CALL_OW 153
25725: GO 25758
25727: LD_INT 3
25729: DOUBLE
25730: EQUAL
25731: IFTRUE 25735
25733: GO 25757
25735: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25736: LD_VAR 0 1
25740: PPUSH
25741: LD_VAR 0 6
25745: PPUSH
25746: LD_VAR 0 7
25750: PPUSH
25751: CALL_OW 154
25755: GO 25758
25757: POP
// end ;
25758: LD_VAR 0 2
25762: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
25767: PPUSH
25768: PPUSH
25769: PPUSH
25770: PPUSH
// if not unit or not building then
25771: LD_VAR 0 1
25775: NOT
25776: PUSH
25777: LD_VAR 0 2
25781: NOT
25782: OR
25783: IFFALSE 25787
// exit ;
25785: GO 25945
// x := GetX ( building ) ;
25787: LD_ADDR_VAR 0 5
25791: PUSH
25792: LD_VAR 0 2
25796: PPUSH
25797: CALL_OW 250
25801: ST_TO_ADDR
// y := GetY ( building ) ;
25802: LD_ADDR_VAR 0 6
25806: PUSH
25807: LD_VAR 0 2
25811: PPUSH
25812: CALL_OW 251
25816: ST_TO_ADDR
// for i = 0 to 5 do
25817: LD_ADDR_VAR 0 4
25821: PUSH
25822: DOUBLE
25823: LD_INT 0
25825: DEC
25826: ST_TO_ADDR
25827: LD_INT 5
25829: PUSH
25830: FOR_TO
25831: IFFALSE 25943
// begin _x := ShiftX ( x , i , 3 ) ;
25833: LD_ADDR_VAR 0 7
25837: PUSH
25838: LD_VAR 0 5
25842: PPUSH
25843: LD_VAR 0 4
25847: PPUSH
25848: LD_INT 3
25850: PPUSH
25851: CALL_OW 272
25855: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25856: LD_ADDR_VAR 0 8
25860: PUSH
25861: LD_VAR 0 6
25865: PPUSH
25866: LD_VAR 0 4
25870: PPUSH
25871: LD_INT 3
25873: PPUSH
25874: CALL_OW 273
25878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25879: LD_VAR 0 7
25883: PPUSH
25884: LD_VAR 0 8
25888: PPUSH
25889: CALL_OW 488
25893: NOT
25894: IFFALSE 25898
// continue ;
25896: GO 25830
// if HexInfo ( _x , _y ) = 0 then
25898: LD_VAR 0 7
25902: PPUSH
25903: LD_VAR 0 8
25907: PPUSH
25908: CALL_OW 428
25912: PUSH
25913: LD_INT 0
25915: EQUAL
25916: IFFALSE 25941
// begin ComMoveXY ( unit , _x , _y ) ;
25918: LD_VAR 0 1
25922: PPUSH
25923: LD_VAR 0 7
25927: PPUSH
25928: LD_VAR 0 8
25932: PPUSH
25933: CALL_OW 111
// exit ;
25937: POP
25938: POP
25939: GO 25945
// end ; end ;
25941: GO 25830
25943: POP
25944: POP
// end ;
25945: LD_VAR 0 3
25949: RET
// export function ScanBase ( side , base_area ) ; begin
25950: LD_INT 0
25952: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25953: LD_ADDR_VAR 0 3
25957: PUSH
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_INT 81
25965: PUSH
25966: LD_VAR 0 1
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PPUSH
25975: CALL_OW 70
25979: ST_TO_ADDR
// end ;
25980: LD_VAR 0 3
25984: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
// result := false ;
25991: LD_ADDR_VAR 0 2
25995: PUSH
25996: LD_INT 0
25998: ST_TO_ADDR
// side := GetSide ( unit ) ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_VAR 0 1
26008: PPUSH
26009: CALL_OW 255
26013: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26014: LD_ADDR_VAR 0 4
26018: PUSH
26019: LD_VAR 0 1
26023: PPUSH
26024: CALL_OW 248
26028: ST_TO_ADDR
// case nat of 1 :
26029: LD_VAR 0 4
26033: PUSH
26034: LD_INT 1
26036: DOUBLE
26037: EQUAL
26038: IFTRUE 26042
26040: GO 26053
26042: POP
// tech := tech_lassight ; 2 :
26043: LD_ADDR_VAR 0 5
26047: PUSH
26048: LD_INT 12
26050: ST_TO_ADDR
26051: GO 26092
26053: LD_INT 2
26055: DOUBLE
26056: EQUAL
26057: IFTRUE 26061
26059: GO 26072
26061: POP
// tech := tech_mortar ; 3 :
26062: LD_ADDR_VAR 0 5
26066: PUSH
26067: LD_INT 41
26069: ST_TO_ADDR
26070: GO 26092
26072: LD_INT 3
26074: DOUBLE
26075: EQUAL
26076: IFTRUE 26080
26078: GO 26091
26080: POP
// tech := tech_bazooka ; end ;
26081: LD_ADDR_VAR 0 5
26085: PUSH
26086: LD_INT 44
26088: ST_TO_ADDR
26089: GO 26092
26091: POP
// if Researched ( side , tech ) then
26092: LD_VAR 0 3
26096: PPUSH
26097: LD_VAR 0 5
26101: PPUSH
26102: CALL_OW 325
26106: IFFALSE 26133
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26108: LD_ADDR_VAR 0 2
26112: PUSH
26113: LD_INT 5
26115: PUSH
26116: LD_INT 8
26118: PUSH
26119: LD_INT 9
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: LIST
26126: PUSH
26127: LD_VAR 0 4
26131: ARRAY
26132: ST_TO_ADDR
// end ;
26133: LD_VAR 0 2
26137: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26138: LD_INT 0
26140: PPUSH
26141: PPUSH
26142: PPUSH
// if not mines then
26143: LD_VAR 0 2
26147: NOT
26148: IFFALSE 26152
// exit ;
26150: GO 26296
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26152: LD_ADDR_VAR 0 5
26156: PUSH
26157: LD_INT 81
26159: PUSH
26160: LD_VAR 0 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 3
26171: PUSH
26172: LD_INT 21
26174: PUSH
26175: LD_INT 3
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PPUSH
26190: CALL_OW 69
26194: ST_TO_ADDR
// for i in mines do
26195: LD_ADDR_VAR 0 4
26199: PUSH
26200: LD_VAR 0 2
26204: PUSH
26205: FOR_IN
26206: IFFALSE 26294
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26208: LD_VAR 0 4
26212: PUSH
26213: LD_INT 1
26215: ARRAY
26216: PPUSH
26217: LD_VAR 0 4
26221: PUSH
26222: LD_INT 2
26224: ARRAY
26225: PPUSH
26226: CALL_OW 458
26230: NOT
26231: IFFALSE 26235
// continue ;
26233: GO 26205
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26235: LD_VAR 0 4
26239: PUSH
26240: LD_INT 1
26242: ARRAY
26243: PPUSH
26244: LD_VAR 0 4
26248: PUSH
26249: LD_INT 2
26251: ARRAY
26252: PPUSH
26253: CALL_OW 428
26257: PUSH
26258: LD_VAR 0 5
26262: IN
26263: IFFALSE 26292
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26265: LD_VAR 0 4
26269: PUSH
26270: LD_INT 1
26272: ARRAY
26273: PPUSH
26274: LD_VAR 0 4
26278: PUSH
26279: LD_INT 2
26281: ARRAY
26282: PPUSH
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 456
// end ;
26292: GO 26205
26294: POP
26295: POP
// end ;
26296: LD_VAR 0 3
26300: RET
// export function Count ( array ) ; var i ; begin
26301: LD_INT 0
26303: PPUSH
26304: PPUSH
// result := 0 ;
26305: LD_ADDR_VAR 0 2
26309: PUSH
26310: LD_INT 0
26312: ST_TO_ADDR
// for i in array do
26313: LD_ADDR_VAR 0 3
26317: PUSH
26318: LD_VAR 0 1
26322: PUSH
26323: FOR_IN
26324: IFFALSE 26348
// if i then
26326: LD_VAR 0 3
26330: IFFALSE 26346
// result := result + 1 ;
26332: LD_ADDR_VAR 0 2
26336: PUSH
26337: LD_VAR 0 2
26341: PUSH
26342: LD_INT 1
26344: PLUS
26345: ST_TO_ADDR
26346: GO 26323
26348: POP
26349: POP
// end ;
26350: LD_VAR 0 2
26354: RET
// export function IsEmpty ( building ) ; begin
26355: LD_INT 0
26357: PPUSH
// if not building then
26358: LD_VAR 0 1
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 26410
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26367: LD_ADDR_VAR 0 2
26371: PUSH
26372: LD_VAR 0 1
26376: PUSH
26377: LD_INT 22
26379: PUSH
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 255
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 58
26396: PUSH
26397: EMPTY
26398: LIST
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PPUSH
26404: CALL_OW 69
26408: IN
26409: ST_TO_ADDR
// end ;
26410: LD_VAR 0 2
26414: RET
// export function IsNotFull ( building ) ; var places ; begin
26415: LD_INT 0
26417: PPUSH
26418: PPUSH
// if not building then
26419: LD_VAR 0 1
26423: NOT
26424: IFFALSE 26428
// exit ;
26426: GO 26599
// result := false ;
26428: LD_ADDR_VAR 0 2
26432: PUSH
26433: LD_INT 0
26435: ST_TO_ADDR
// places := 0 ;
26436: LD_ADDR_VAR 0 3
26440: PUSH
26441: LD_INT 0
26443: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26444: LD_VAR 0 1
26448: PPUSH
26449: CALL_OW 266
26453: PUSH
26454: LD_INT 0
26456: DOUBLE
26457: EQUAL
26458: IFTRUE 26516
26460: LD_INT 1
26462: DOUBLE
26463: EQUAL
26464: IFTRUE 26516
26466: LD_INT 6
26468: DOUBLE
26469: EQUAL
26470: IFTRUE 26516
26472: LD_INT 7
26474: DOUBLE
26475: EQUAL
26476: IFTRUE 26516
26478: LD_INT 8
26480: DOUBLE
26481: EQUAL
26482: IFTRUE 26516
26484: LD_INT 4
26486: DOUBLE
26487: EQUAL
26488: IFTRUE 26516
26490: LD_INT 5
26492: DOUBLE
26493: EQUAL
26494: IFTRUE 26516
26496: LD_INT 2
26498: DOUBLE
26499: EQUAL
26500: IFTRUE 26516
26502: LD_INT 3
26504: DOUBLE
26505: EQUAL
26506: IFTRUE 26516
26508: LD_INT 35
26510: DOUBLE
26511: EQUAL
26512: IFTRUE 26516
26514: GO 26527
26516: POP
// places := 6 ; b_bunker , b_breastwork :
26517: LD_ADDR_VAR 0 3
26521: PUSH
26522: LD_INT 6
26524: ST_TO_ADDR
26525: GO 26572
26527: LD_INT 32
26529: DOUBLE
26530: EQUAL
26531: IFTRUE 26541
26533: LD_INT 31
26535: DOUBLE
26536: EQUAL
26537: IFTRUE 26541
26539: GO 26552
26541: POP
// places := 1 ; b_control_tower :
26542: LD_ADDR_VAR 0 3
26546: PUSH
26547: LD_INT 1
26549: ST_TO_ADDR
26550: GO 26572
26552: LD_INT 36
26554: DOUBLE
26555: EQUAL
26556: IFTRUE 26560
26558: GO 26571
26560: POP
// places := 3 ; end ;
26561: LD_ADDR_VAR 0 3
26565: PUSH
26566: LD_INT 3
26568: ST_TO_ADDR
26569: GO 26572
26571: POP
// if places then
26572: LD_VAR 0 3
26576: IFFALSE 26599
// result := UnitsInside ( building ) < places ;
26578: LD_ADDR_VAR 0 2
26582: PUSH
26583: LD_VAR 0 1
26587: PPUSH
26588: CALL_OW 313
26592: PUSH
26593: LD_VAR 0 3
26597: LESS
26598: ST_TO_ADDR
// end ;
26599: LD_VAR 0 2
26603: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26604: LD_INT 0
26606: PPUSH
26607: PPUSH
26608: PPUSH
26609: PPUSH
// tmp := [ ] ;
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: EMPTY
26616: ST_TO_ADDR
// list := [ ] ;
26617: LD_ADDR_VAR 0 5
26621: PUSH
26622: EMPTY
26623: ST_TO_ADDR
// for i = 16 to 25 do
26624: LD_ADDR_VAR 0 4
26628: PUSH
26629: DOUBLE
26630: LD_INT 16
26632: DEC
26633: ST_TO_ADDR
26634: LD_INT 25
26636: PUSH
26637: FOR_TO
26638: IFFALSE 26711
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_VAR 0 3
26649: PUSH
26650: LD_INT 22
26652: PUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 255
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 91
26669: PUSH
26670: LD_VAR 0 1
26674: PUSH
26675: LD_INT 6
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 30
26685: PUSH
26686: LD_VAR 0 4
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: LIST
26699: PUSH
26700: EMPTY
26701: LIST
26702: PPUSH
26703: CALL_OW 69
26707: ADD
26708: ST_TO_ADDR
26709: GO 26637
26711: POP
26712: POP
// for i = 1 to tmp do
26713: LD_ADDR_VAR 0 4
26717: PUSH
26718: DOUBLE
26719: LD_INT 1
26721: DEC
26722: ST_TO_ADDR
26723: LD_VAR 0 3
26727: PUSH
26728: FOR_TO
26729: IFFALSE 26817
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26731: LD_ADDR_VAR 0 5
26735: PUSH
26736: LD_VAR 0 5
26740: PUSH
26741: LD_VAR 0 3
26745: PUSH
26746: LD_VAR 0 4
26750: ARRAY
26751: PPUSH
26752: CALL_OW 266
26756: PUSH
26757: LD_VAR 0 3
26761: PUSH
26762: LD_VAR 0 4
26766: ARRAY
26767: PPUSH
26768: CALL_OW 250
26772: PUSH
26773: LD_VAR 0 3
26777: PUSH
26778: LD_VAR 0 4
26782: ARRAY
26783: PPUSH
26784: CALL_OW 251
26788: PUSH
26789: LD_VAR 0 3
26793: PUSH
26794: LD_VAR 0 4
26798: ARRAY
26799: PPUSH
26800: CALL_OW 254
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: ADD
26814: ST_TO_ADDR
26815: GO 26728
26817: POP
26818: POP
// result := list ;
26819: LD_ADDR_VAR 0 2
26823: PUSH
26824: LD_VAR 0 5
26828: ST_TO_ADDR
// end ;
26829: LD_VAR 0 2
26833: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26834: LD_INT 0
26836: PPUSH
26837: PPUSH
26838: PPUSH
26839: PPUSH
26840: PPUSH
26841: PPUSH
26842: PPUSH
// if not factory then
26843: LD_VAR 0 1
26847: NOT
26848: IFFALSE 26852
// exit ;
26850: GO 27445
// if control = control_apeman then
26852: LD_VAR 0 4
26856: PUSH
26857: LD_INT 5
26859: EQUAL
26860: IFFALSE 26969
// begin tmp := UnitsInside ( factory ) ;
26862: LD_ADDR_VAR 0 8
26866: PUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 313
26876: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26877: LD_VAR 0 8
26881: PPUSH
26882: LD_INT 25
26884: PUSH
26885: LD_INT 12
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PPUSH
26892: CALL_OW 72
26896: NOT
26897: IFFALSE 26907
// control := control_manual ;
26899: LD_ADDR_VAR 0 4
26903: PUSH
26904: LD_INT 1
26906: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26907: LD_ADDR_VAR 0 8
26911: PUSH
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL 26604 0 1
26921: ST_TO_ADDR
// if tmp then
26922: LD_VAR 0 8
26926: IFFALSE 26969
// begin for i in tmp do
26928: LD_ADDR_VAR 0 7
26932: PUSH
26933: LD_VAR 0 8
26937: PUSH
26938: FOR_IN
26939: IFFALSE 26967
// if i [ 1 ] = b_ext_radio then
26941: LD_VAR 0 7
26945: PUSH
26946: LD_INT 1
26948: ARRAY
26949: PUSH
26950: LD_INT 22
26952: EQUAL
26953: IFFALSE 26965
// begin control := control_remote ;
26955: LD_ADDR_VAR 0 4
26959: PUSH
26960: LD_INT 2
26962: ST_TO_ADDR
// break ;
26963: GO 26967
// end ;
26965: GO 26938
26967: POP
26968: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26969: LD_VAR 0 1
26973: PPUSH
26974: LD_VAR 0 2
26978: PPUSH
26979: LD_VAR 0 3
26983: PPUSH
26984: LD_VAR 0 4
26988: PPUSH
26989: LD_VAR 0 5
26993: PPUSH
26994: CALL_OW 448
26998: IFFALSE 27033
// begin result := [ chassis , engine , control , weapon ] ;
27000: LD_ADDR_VAR 0 6
27004: PUSH
27005: LD_VAR 0 2
27009: PUSH
27010: LD_VAR 0 3
27014: PUSH
27015: LD_VAR 0 4
27019: PUSH
27020: LD_VAR 0 5
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: ST_TO_ADDR
// exit ;
27031: GO 27445
// end ; _chassis := AvailableChassisList ( factory ) ;
27033: LD_ADDR_VAR 0 9
27037: PUSH
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 475
27047: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27048: LD_ADDR_VAR 0 11
27052: PUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 476
27062: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27063: LD_ADDR_VAR 0 12
27067: PUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 477
27077: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27078: LD_ADDR_VAR 0 10
27082: PUSH
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL_OW 478
27092: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27093: LD_VAR 0 9
27097: NOT
27098: PUSH
27099: LD_VAR 0 11
27103: NOT
27104: OR
27105: PUSH
27106: LD_VAR 0 12
27110: NOT
27111: OR
27112: PUSH
27113: LD_VAR 0 10
27117: NOT
27118: OR
27119: IFFALSE 27154
// begin result := [ chassis , engine , control , weapon ] ;
27121: LD_ADDR_VAR 0 6
27125: PUSH
27126: LD_VAR 0 2
27130: PUSH
27131: LD_VAR 0 3
27135: PUSH
27136: LD_VAR 0 4
27140: PUSH
27141: LD_VAR 0 5
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: ST_TO_ADDR
// exit ;
27152: GO 27445
// end ; if not chassis in _chassis then
27154: LD_VAR 0 2
27158: PUSH
27159: LD_VAR 0 9
27163: IN
27164: NOT
27165: IFFALSE 27191
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27167: LD_ADDR_VAR 0 2
27171: PUSH
27172: LD_VAR 0 9
27176: PUSH
27177: LD_INT 1
27179: PPUSH
27180: LD_VAR 0 9
27184: PPUSH
27185: CALL_OW 12
27189: ARRAY
27190: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27191: LD_VAR 0 2
27195: PPUSH
27196: LD_VAR 0 3
27200: PPUSH
27201: CALL 27450 0 2
27205: NOT
27206: IFFALSE 27265
// repeat engine := _engine [ 1 ] ;
27208: LD_ADDR_VAR 0 3
27212: PUSH
27213: LD_VAR 0 11
27217: PUSH
27218: LD_INT 1
27220: ARRAY
27221: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27222: LD_ADDR_VAR 0 11
27226: PUSH
27227: LD_VAR 0 11
27231: PPUSH
27232: LD_INT 1
27234: PPUSH
27235: CALL_OW 3
27239: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27240: LD_VAR 0 2
27244: PPUSH
27245: LD_VAR 0 3
27249: PPUSH
27250: CALL 27450 0 2
27254: PUSH
27255: LD_VAR 0 11
27259: PUSH
27260: EMPTY
27261: EQUAL
27262: OR
27263: IFFALSE 27208
// if not control in _control then
27265: LD_VAR 0 4
27269: PUSH
27270: LD_VAR 0 12
27274: IN
27275: NOT
27276: IFFALSE 27302
// control := _control [ rand ( 1 , _control ) ] ;
27278: LD_ADDR_VAR 0 4
27282: PUSH
27283: LD_VAR 0 12
27287: PUSH
27288: LD_INT 1
27290: PPUSH
27291: LD_VAR 0 12
27295: PPUSH
27296: CALL_OW 12
27300: ARRAY
27301: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27302: LD_VAR 0 2
27306: PPUSH
27307: LD_VAR 0 5
27311: PPUSH
27312: CALL 27670 0 2
27316: NOT
27317: IFFALSE 27376
// repeat weapon := _weapon [ 1 ] ;
27319: LD_ADDR_VAR 0 5
27323: PUSH
27324: LD_VAR 0 10
27328: PUSH
27329: LD_INT 1
27331: ARRAY
27332: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27333: LD_ADDR_VAR 0 10
27337: PUSH
27338: LD_VAR 0 10
27342: PPUSH
27343: LD_INT 1
27345: PPUSH
27346: CALL_OW 3
27350: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_VAR 0 5
27360: PPUSH
27361: CALL 27670 0 2
27365: PUSH
27366: LD_VAR 0 10
27370: PUSH
27371: EMPTY
27372: EQUAL
27373: OR
27374: IFFALSE 27319
// result := [ ] ;
27376: LD_ADDR_VAR 0 6
27380: PUSH
27381: EMPTY
27382: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27383: LD_VAR 0 1
27387: PPUSH
27388: LD_VAR 0 2
27392: PPUSH
27393: LD_VAR 0 3
27397: PPUSH
27398: LD_VAR 0 4
27402: PPUSH
27403: LD_VAR 0 5
27407: PPUSH
27408: CALL_OW 448
27412: IFFALSE 27445
// result := [ chassis , engine , control , weapon ] ;
27414: LD_ADDR_VAR 0 6
27418: PUSH
27419: LD_VAR 0 2
27423: PUSH
27424: LD_VAR 0 3
27428: PUSH
27429: LD_VAR 0 4
27433: PUSH
27434: LD_VAR 0 5
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: ST_TO_ADDR
// end ;
27445: LD_VAR 0 6
27449: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27450: LD_INT 0
27452: PPUSH
// if not chassis or not engine then
27453: LD_VAR 0 1
27457: NOT
27458: PUSH
27459: LD_VAR 0 2
27463: NOT
27464: OR
27465: IFFALSE 27469
// exit ;
27467: GO 27665
// case engine of engine_solar :
27469: LD_VAR 0 2
27473: PUSH
27474: LD_INT 2
27476: DOUBLE
27477: EQUAL
27478: IFTRUE 27482
27480: GO 27520
27482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27483: LD_ADDR_VAR 0 3
27487: PUSH
27488: LD_INT 11
27490: PUSH
27491: LD_INT 12
27493: PUSH
27494: LD_INT 13
27496: PUSH
27497: LD_INT 14
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 3
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: ST_TO_ADDR
27518: GO 27649
27520: LD_INT 1
27522: DOUBLE
27523: EQUAL
27524: IFTRUE 27528
27526: GO 27590
27528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27529: LD_ADDR_VAR 0 3
27533: PUSH
27534: LD_INT 11
27536: PUSH
27537: LD_INT 12
27539: PUSH
27540: LD_INT 13
27542: PUSH
27543: LD_INT 14
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: LD_INT 2
27551: PUSH
27552: LD_INT 3
27554: PUSH
27555: LD_INT 4
27557: PUSH
27558: LD_INT 5
27560: PUSH
27561: LD_INT 21
27563: PUSH
27564: LD_INT 23
27566: PUSH
27567: LD_INT 22
27569: PUSH
27570: LD_INT 24
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: ST_TO_ADDR
27588: GO 27649
27590: LD_INT 3
27592: DOUBLE
27593: EQUAL
27594: IFTRUE 27598
27596: GO 27648
27598: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27599: LD_ADDR_VAR 0 3
27603: PUSH
27604: LD_INT 13
27606: PUSH
27607: LD_INT 14
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: LD_INT 3
27615: PUSH
27616: LD_INT 4
27618: PUSH
27619: LD_INT 5
27621: PUSH
27622: LD_INT 21
27624: PUSH
27625: LD_INT 22
27627: PUSH
27628: LD_INT 23
27630: PUSH
27631: LD_INT 24
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: ST_TO_ADDR
27646: GO 27649
27648: POP
// result := ( chassis in result ) ;
27649: LD_ADDR_VAR 0 3
27653: PUSH
27654: LD_VAR 0 1
27658: PUSH
27659: LD_VAR 0 3
27663: IN
27664: ST_TO_ADDR
// end ;
27665: LD_VAR 0 3
27669: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27670: LD_INT 0
27672: PPUSH
// if not chassis or not weapon then
27673: LD_VAR 0 1
27677: NOT
27678: PUSH
27679: LD_VAR 0 2
27683: NOT
27684: OR
27685: IFFALSE 27689
// exit ;
27687: GO 28749
// case weapon of us_machine_gun :
27689: LD_VAR 0 2
27693: PUSH
27694: LD_INT 2
27696: DOUBLE
27697: EQUAL
27698: IFTRUE 27702
27700: GO 27732
27702: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27703: LD_ADDR_VAR 0 3
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: LD_INT 3
27716: PUSH
27717: LD_INT 4
27719: PUSH
27720: LD_INT 5
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: ST_TO_ADDR
27730: GO 28733
27732: LD_INT 3
27734: DOUBLE
27735: EQUAL
27736: IFTRUE 27740
27738: GO 27770
27740: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27741: LD_ADDR_VAR 0 3
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: LD_INT 3
27754: PUSH
27755: LD_INT 4
27757: PUSH
27758: LD_INT 5
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: ST_TO_ADDR
27768: GO 28733
27770: LD_INT 11
27772: DOUBLE
27773: EQUAL
27774: IFTRUE 27778
27776: GO 27808
27778: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27779: LD_ADDR_VAR 0 3
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: LD_INT 4
27795: PUSH
27796: LD_INT 5
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: ST_TO_ADDR
27806: GO 28733
27808: LD_INT 4
27810: DOUBLE
27811: EQUAL
27812: IFTRUE 27816
27814: GO 27842
27816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27817: LD_ADDR_VAR 0 3
27821: PUSH
27822: LD_INT 2
27824: PUSH
27825: LD_INT 3
27827: PUSH
27828: LD_INT 4
27830: PUSH
27831: LD_INT 5
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: ST_TO_ADDR
27840: GO 28733
27842: LD_INT 5
27844: DOUBLE
27845: EQUAL
27846: IFTRUE 27850
27848: GO 27876
27850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27851: LD_ADDR_VAR 0 3
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: LD_INT 3
27861: PUSH
27862: LD_INT 4
27864: PUSH
27865: LD_INT 5
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: ST_TO_ADDR
27874: GO 28733
27876: LD_INT 9
27878: DOUBLE
27879: EQUAL
27880: IFTRUE 27884
27882: GO 27910
27884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27885: LD_ADDR_VAR 0 3
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: LD_INT 3
27895: PUSH
27896: LD_INT 4
27898: PUSH
27899: LD_INT 5
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
27908: GO 28733
27910: LD_INT 7
27912: DOUBLE
27913: EQUAL
27914: IFTRUE 27918
27916: GO 27944
27918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27919: LD_ADDR_VAR 0 3
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: LD_INT 3
27929: PUSH
27930: LD_INT 4
27932: PUSH
27933: LD_INT 5
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
27942: GO 28733
27944: LD_INT 12
27946: DOUBLE
27947: EQUAL
27948: IFTRUE 27952
27950: GO 27978
27952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27953: LD_ADDR_VAR 0 3
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 3
27963: PUSH
27964: LD_INT 4
27966: PUSH
27967: LD_INT 5
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: ST_TO_ADDR
27976: GO 28733
27978: LD_INT 13
27980: DOUBLE
27981: EQUAL
27982: IFTRUE 27986
27984: GO 28012
27986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27987: LD_ADDR_VAR 0 3
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: LD_INT 4
28000: PUSH
28001: LD_INT 5
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: ST_TO_ADDR
28010: GO 28733
28012: LD_INT 14
28014: DOUBLE
28015: EQUAL
28016: IFTRUE 28020
28018: GO 28038
28020: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28021: LD_ADDR_VAR 0 3
28025: PUSH
28026: LD_INT 4
28028: PUSH
28029: LD_INT 5
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: ST_TO_ADDR
28036: GO 28733
28038: LD_INT 6
28040: DOUBLE
28041: EQUAL
28042: IFTRUE 28046
28044: GO 28064
28046: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28047: LD_ADDR_VAR 0 3
28051: PUSH
28052: LD_INT 4
28054: PUSH
28055: LD_INT 5
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: ST_TO_ADDR
28062: GO 28733
28064: LD_INT 10
28066: DOUBLE
28067: EQUAL
28068: IFTRUE 28072
28070: GO 28090
28072: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28073: LD_ADDR_VAR 0 3
28077: PUSH
28078: LD_INT 4
28080: PUSH
28081: LD_INT 5
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: ST_TO_ADDR
28088: GO 28733
28090: LD_INT 22
28092: DOUBLE
28093: EQUAL
28094: IFTRUE 28098
28096: GO 28124
28098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28099: LD_ADDR_VAR 0 3
28103: PUSH
28104: LD_INT 11
28106: PUSH
28107: LD_INT 12
28109: PUSH
28110: LD_INT 13
28112: PUSH
28113: LD_INT 14
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: ST_TO_ADDR
28122: GO 28733
28124: LD_INT 23
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28158
28132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_INT 11
28140: PUSH
28141: LD_INT 12
28143: PUSH
28144: LD_INT 13
28146: PUSH
28147: LD_INT 14
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: ST_TO_ADDR
28156: GO 28733
28158: LD_INT 24
28160: DOUBLE
28161: EQUAL
28162: IFTRUE 28166
28164: GO 28192
28166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28167: LD_ADDR_VAR 0 3
28171: PUSH
28172: LD_INT 11
28174: PUSH
28175: LD_INT 12
28177: PUSH
28178: LD_INT 13
28180: PUSH
28181: LD_INT 14
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: ST_TO_ADDR
28190: GO 28733
28192: LD_INT 30
28194: DOUBLE
28195: EQUAL
28196: IFTRUE 28200
28198: GO 28226
28200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28201: LD_ADDR_VAR 0 3
28205: PUSH
28206: LD_INT 11
28208: PUSH
28209: LD_INT 12
28211: PUSH
28212: LD_INT 13
28214: PUSH
28215: LD_INT 14
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: ST_TO_ADDR
28224: GO 28733
28226: LD_INT 25
28228: DOUBLE
28229: EQUAL
28230: IFTRUE 28234
28232: GO 28252
28234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28235: LD_ADDR_VAR 0 3
28239: PUSH
28240: LD_INT 13
28242: PUSH
28243: LD_INT 14
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: ST_TO_ADDR
28250: GO 28733
28252: LD_INT 27
28254: DOUBLE
28255: EQUAL
28256: IFTRUE 28260
28258: GO 28278
28260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28261: LD_ADDR_VAR 0 3
28265: PUSH
28266: LD_INT 13
28268: PUSH
28269: LD_INT 14
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: ST_TO_ADDR
28276: GO 28733
28278: LD_INT 92
28280: DOUBLE
28281: EQUAL
28282: IFTRUE 28286
28284: GO 28312
28286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28287: LD_ADDR_VAR 0 3
28291: PUSH
28292: LD_INT 11
28294: PUSH
28295: LD_INT 12
28297: PUSH
28298: LD_INT 13
28300: PUSH
28301: LD_INT 14
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
28310: GO 28733
28312: LD_INT 28
28314: DOUBLE
28315: EQUAL
28316: IFTRUE 28320
28318: GO 28338
28320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28321: LD_ADDR_VAR 0 3
28325: PUSH
28326: LD_INT 13
28328: PUSH
28329: LD_INT 14
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: ST_TO_ADDR
28336: GO 28733
28338: LD_INT 29
28340: DOUBLE
28341: EQUAL
28342: IFTRUE 28346
28344: GO 28364
28346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28347: LD_ADDR_VAR 0 3
28351: PUSH
28352: LD_INT 13
28354: PUSH
28355: LD_INT 14
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: ST_TO_ADDR
28362: GO 28733
28364: LD_INT 31
28366: DOUBLE
28367: EQUAL
28368: IFTRUE 28372
28370: GO 28390
28372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28373: LD_ADDR_VAR 0 3
28377: PUSH
28378: LD_INT 13
28380: PUSH
28381: LD_INT 14
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: ST_TO_ADDR
28388: GO 28733
28390: LD_INT 26
28392: DOUBLE
28393: EQUAL
28394: IFTRUE 28398
28396: GO 28416
28398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: LD_INT 13
28406: PUSH
28407: LD_INT 14
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: ST_TO_ADDR
28414: GO 28733
28416: LD_INT 42
28418: DOUBLE
28419: EQUAL
28420: IFTRUE 28424
28422: GO 28450
28424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28425: LD_ADDR_VAR 0 3
28429: PUSH
28430: LD_INT 21
28432: PUSH
28433: LD_INT 22
28435: PUSH
28436: LD_INT 23
28438: PUSH
28439: LD_INT 24
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: ST_TO_ADDR
28448: GO 28733
28450: LD_INT 43
28452: DOUBLE
28453: EQUAL
28454: IFTRUE 28458
28456: GO 28484
28458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28459: LD_ADDR_VAR 0 3
28463: PUSH
28464: LD_INT 21
28466: PUSH
28467: LD_INT 22
28469: PUSH
28470: LD_INT 23
28472: PUSH
28473: LD_INT 24
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: ST_TO_ADDR
28482: GO 28733
28484: LD_INT 44
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28518
28492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28493: LD_ADDR_VAR 0 3
28497: PUSH
28498: LD_INT 21
28500: PUSH
28501: LD_INT 22
28503: PUSH
28504: LD_INT 23
28506: PUSH
28507: LD_INT 24
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
28516: GO 28733
28518: LD_INT 45
28520: DOUBLE
28521: EQUAL
28522: IFTRUE 28526
28524: GO 28552
28526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28527: LD_ADDR_VAR 0 3
28531: PUSH
28532: LD_INT 21
28534: PUSH
28535: LD_INT 22
28537: PUSH
28538: LD_INT 23
28540: PUSH
28541: LD_INT 24
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: ST_TO_ADDR
28550: GO 28733
28552: LD_INT 49
28554: DOUBLE
28555: EQUAL
28556: IFTRUE 28560
28558: GO 28586
28560: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28561: LD_ADDR_VAR 0 3
28565: PUSH
28566: LD_INT 21
28568: PUSH
28569: LD_INT 22
28571: PUSH
28572: LD_INT 23
28574: PUSH
28575: LD_INT 24
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: ST_TO_ADDR
28584: GO 28733
28586: LD_INT 51
28588: DOUBLE
28589: EQUAL
28590: IFTRUE 28594
28592: GO 28620
28594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28595: LD_ADDR_VAR 0 3
28599: PUSH
28600: LD_INT 21
28602: PUSH
28603: LD_INT 22
28605: PUSH
28606: LD_INT 23
28608: PUSH
28609: LD_INT 24
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: ST_TO_ADDR
28618: GO 28733
28620: LD_INT 52
28622: DOUBLE
28623: EQUAL
28624: IFTRUE 28628
28626: GO 28654
28628: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28629: LD_ADDR_VAR 0 3
28633: PUSH
28634: LD_INT 21
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_INT 23
28642: PUSH
28643: LD_INT 24
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: ST_TO_ADDR
28652: GO 28733
28654: LD_INT 53
28656: DOUBLE
28657: EQUAL
28658: IFTRUE 28662
28660: GO 28680
28662: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28663: LD_ADDR_VAR 0 3
28667: PUSH
28668: LD_INT 23
28670: PUSH
28671: LD_INT 24
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: ST_TO_ADDR
28678: GO 28733
28680: LD_INT 46
28682: DOUBLE
28683: EQUAL
28684: IFTRUE 28688
28686: GO 28706
28688: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28689: LD_ADDR_VAR 0 3
28693: PUSH
28694: LD_INT 23
28696: PUSH
28697: LD_INT 24
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: ST_TO_ADDR
28704: GO 28733
28706: LD_INT 47
28708: DOUBLE
28709: EQUAL
28710: IFTRUE 28714
28712: GO 28732
28714: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28715: LD_ADDR_VAR 0 3
28719: PUSH
28720: LD_INT 23
28722: PUSH
28723: LD_INT 24
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: ST_TO_ADDR
28730: GO 28733
28732: POP
// result := ( chassis in result ) ;
28733: LD_ADDR_VAR 0 3
28737: PUSH
28738: LD_VAR 0 1
28742: PUSH
28743: LD_VAR 0 3
28747: IN
28748: ST_TO_ADDR
// end ;
28749: LD_VAR 0 3
28753: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
28758: PPUSH
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
// result := array ;
28763: LD_ADDR_VAR 0 5
28767: PUSH
28768: LD_VAR 0 1
28772: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28773: LD_VAR 0 1
28777: NOT
28778: PUSH
28779: LD_VAR 0 2
28783: NOT
28784: OR
28785: PUSH
28786: LD_VAR 0 3
28790: NOT
28791: OR
28792: PUSH
28793: LD_VAR 0 2
28797: PUSH
28798: LD_VAR 0 1
28802: GREATER
28803: OR
28804: PUSH
28805: LD_VAR 0 3
28809: PUSH
28810: LD_VAR 0 1
28814: GREATER
28815: OR
28816: IFFALSE 28820
// exit ;
28818: GO 29116
// if direction then
28820: LD_VAR 0 4
28824: IFFALSE 28888
// begin d := 1 ;
28826: LD_ADDR_VAR 0 9
28830: PUSH
28831: LD_INT 1
28833: ST_TO_ADDR
// if i_from > i_to then
28834: LD_VAR 0 2
28838: PUSH
28839: LD_VAR 0 3
28843: GREATER
28844: IFFALSE 28870
// length := ( array - i_from ) + i_to else
28846: LD_ADDR_VAR 0 11
28850: PUSH
28851: LD_VAR 0 1
28855: PUSH
28856: LD_VAR 0 2
28860: MINUS
28861: PUSH
28862: LD_VAR 0 3
28866: PLUS
28867: ST_TO_ADDR
28868: GO 28886
// length := i_to - i_from ;
28870: LD_ADDR_VAR 0 11
28874: PUSH
28875: LD_VAR 0 3
28879: PUSH
28880: LD_VAR 0 2
28884: MINUS
28885: ST_TO_ADDR
// end else
28886: GO 28949
// begin d := - 1 ;
28888: LD_ADDR_VAR 0 9
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: ST_TO_ADDR
// if i_from > i_to then
28897: LD_VAR 0 2
28901: PUSH
28902: LD_VAR 0 3
28906: GREATER
28907: IFFALSE 28927
// length := i_from - i_to else
28909: LD_ADDR_VAR 0 11
28913: PUSH
28914: LD_VAR 0 2
28918: PUSH
28919: LD_VAR 0 3
28923: MINUS
28924: ST_TO_ADDR
28925: GO 28949
// length := ( array - i_to ) + i_from ;
28927: LD_ADDR_VAR 0 11
28931: PUSH
28932: LD_VAR 0 1
28936: PUSH
28937: LD_VAR 0 3
28941: MINUS
28942: PUSH
28943: LD_VAR 0 2
28947: PLUS
28948: ST_TO_ADDR
// end ; if not length then
28949: LD_VAR 0 11
28953: NOT
28954: IFFALSE 28958
// exit ;
28956: GO 29116
// tmp := array ;
28958: LD_ADDR_VAR 0 10
28962: PUSH
28963: LD_VAR 0 1
28967: ST_TO_ADDR
// for i = 1 to length do
28968: LD_ADDR_VAR 0 6
28972: PUSH
28973: DOUBLE
28974: LD_INT 1
28976: DEC
28977: ST_TO_ADDR
28978: LD_VAR 0 11
28982: PUSH
28983: FOR_TO
28984: IFFALSE 29104
// begin for j = 1 to array do
28986: LD_ADDR_VAR 0 7
28990: PUSH
28991: DOUBLE
28992: LD_INT 1
28994: DEC
28995: ST_TO_ADDR
28996: LD_VAR 0 1
29000: PUSH
29001: FOR_TO
29002: IFFALSE 29090
// begin k := j + d ;
29004: LD_ADDR_VAR 0 8
29008: PUSH
29009: LD_VAR 0 7
29013: PUSH
29014: LD_VAR 0 9
29018: PLUS
29019: ST_TO_ADDR
// if k > array then
29020: LD_VAR 0 8
29024: PUSH
29025: LD_VAR 0 1
29029: GREATER
29030: IFFALSE 29040
// k := 1 ;
29032: LD_ADDR_VAR 0 8
29036: PUSH
29037: LD_INT 1
29039: ST_TO_ADDR
// if not k then
29040: LD_VAR 0 8
29044: NOT
29045: IFFALSE 29057
// k := array ;
29047: LD_ADDR_VAR 0 8
29051: PUSH
29052: LD_VAR 0 1
29056: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29057: LD_ADDR_VAR 0 10
29061: PUSH
29062: LD_VAR 0 10
29066: PPUSH
29067: LD_VAR 0 8
29071: PPUSH
29072: LD_VAR 0 1
29076: PUSH
29077: LD_VAR 0 7
29081: ARRAY
29082: PPUSH
29083: CALL_OW 1
29087: ST_TO_ADDR
// end ;
29088: GO 29001
29090: POP
29091: POP
// array := tmp ;
29092: LD_ADDR_VAR 0 1
29096: PUSH
29097: LD_VAR 0 10
29101: ST_TO_ADDR
// end ;
29102: GO 28983
29104: POP
29105: POP
// result := array ;
29106: LD_ADDR_VAR 0 5
29110: PUSH
29111: LD_VAR 0 1
29115: ST_TO_ADDR
// end ;
29116: LD_VAR 0 5
29120: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29121: LD_INT 0
29123: PPUSH
29124: PPUSH
// result := 0 ;
29125: LD_ADDR_VAR 0 3
29129: PUSH
29130: LD_INT 0
29132: ST_TO_ADDR
// if not array or not value in array then
29133: LD_VAR 0 1
29137: NOT
29138: PUSH
29139: LD_VAR 0 2
29143: PUSH
29144: LD_VAR 0 1
29148: IN
29149: NOT
29150: OR
29151: IFFALSE 29155
// exit ;
29153: GO 29209
// for i = 1 to array do
29155: LD_ADDR_VAR 0 4
29159: PUSH
29160: DOUBLE
29161: LD_INT 1
29163: DEC
29164: ST_TO_ADDR
29165: LD_VAR 0 1
29169: PUSH
29170: FOR_TO
29171: IFFALSE 29207
// if value = array [ i ] then
29173: LD_VAR 0 2
29177: PUSH
29178: LD_VAR 0 1
29182: PUSH
29183: LD_VAR 0 4
29187: ARRAY
29188: EQUAL
29189: IFFALSE 29205
// begin result := i ;
29191: LD_ADDR_VAR 0 3
29195: PUSH
29196: LD_VAR 0 4
29200: ST_TO_ADDR
// exit ;
29201: POP
29202: POP
29203: GO 29209
// end ;
29205: GO 29170
29207: POP
29208: POP
// end ;
29209: LD_VAR 0 3
29213: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29214: LD_INT 0
29216: PPUSH
// vc_chassis := chassis ;
29217: LD_ADDR_OWVAR 37
29221: PUSH
29222: LD_VAR 0 1
29226: ST_TO_ADDR
// vc_engine := engine ;
29227: LD_ADDR_OWVAR 39
29231: PUSH
29232: LD_VAR 0 2
29236: ST_TO_ADDR
// vc_control := control ;
29237: LD_ADDR_OWVAR 38
29241: PUSH
29242: LD_VAR 0 3
29246: ST_TO_ADDR
// vc_weapon := weapon ;
29247: LD_ADDR_OWVAR 40
29251: PUSH
29252: LD_VAR 0 4
29256: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29257: LD_ADDR_OWVAR 41
29261: PUSH
29262: LD_VAR 0 5
29266: ST_TO_ADDR
// end ;
29267: LD_VAR 0 6
29271: RET
// export function WantPlant ( unit ) ; var task ; begin
29272: LD_INT 0
29274: PPUSH
29275: PPUSH
// result := false ;
29276: LD_ADDR_VAR 0 2
29280: PUSH
29281: LD_INT 0
29283: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_VAR 0 1
29293: PPUSH
29294: CALL_OW 437
29298: ST_TO_ADDR
// if task then
29299: LD_VAR 0 3
29303: IFFALSE 29331
// if task [ 1 ] [ 1 ] = p then
29305: LD_VAR 0 3
29309: PUSH
29310: LD_INT 1
29312: ARRAY
29313: PUSH
29314: LD_INT 1
29316: ARRAY
29317: PUSH
29318: LD_STRING p
29320: EQUAL
29321: IFFALSE 29331
// result := true ;
29323: LD_ADDR_VAR 0 2
29327: PUSH
29328: LD_INT 1
29330: ST_TO_ADDR
// end ;
29331: LD_VAR 0 2
29335: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29336: LD_INT 0
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
// if pos < 1 then
29342: LD_VAR 0 2
29346: PUSH
29347: LD_INT 1
29349: LESS
29350: IFFALSE 29354
// exit ;
29352: GO 29657
// if pos = 1 then
29354: LD_VAR 0 2
29358: PUSH
29359: LD_INT 1
29361: EQUAL
29362: IFFALSE 29395
// result := Replace ( arr , pos [ 1 ] , value ) else
29364: LD_ADDR_VAR 0 4
29368: PUSH
29369: LD_VAR 0 1
29373: PPUSH
29374: LD_VAR 0 2
29378: PUSH
29379: LD_INT 1
29381: ARRAY
29382: PPUSH
29383: LD_VAR 0 3
29387: PPUSH
29388: CALL_OW 1
29392: ST_TO_ADDR
29393: GO 29657
// begin tmp := arr ;
29395: LD_ADDR_VAR 0 6
29399: PUSH
29400: LD_VAR 0 1
29404: ST_TO_ADDR
// s_arr := [ tmp ] ;
29405: LD_ADDR_VAR 0 7
29409: PUSH
29410: LD_VAR 0 6
29414: PUSH
29415: EMPTY
29416: LIST
29417: ST_TO_ADDR
// for i = 1 to pos - 1 do
29418: LD_ADDR_VAR 0 5
29422: PUSH
29423: DOUBLE
29424: LD_INT 1
29426: DEC
29427: ST_TO_ADDR
29428: LD_VAR 0 2
29432: PUSH
29433: LD_INT 1
29435: MINUS
29436: PUSH
29437: FOR_TO
29438: IFFALSE 29483
// begin tmp := tmp [ pos [ i ] ] ;
29440: LD_ADDR_VAR 0 6
29444: PUSH
29445: LD_VAR 0 6
29449: PUSH
29450: LD_VAR 0 2
29454: PUSH
29455: LD_VAR 0 5
29459: ARRAY
29460: ARRAY
29461: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29462: LD_ADDR_VAR 0 7
29466: PUSH
29467: LD_VAR 0 7
29471: PUSH
29472: LD_VAR 0 6
29476: PUSH
29477: EMPTY
29478: LIST
29479: ADD
29480: ST_TO_ADDR
// end ;
29481: GO 29437
29483: POP
29484: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29485: LD_ADDR_VAR 0 6
29489: PUSH
29490: LD_VAR 0 6
29494: PPUSH
29495: LD_VAR 0 2
29499: PUSH
29500: LD_VAR 0 2
29504: ARRAY
29505: PPUSH
29506: LD_VAR 0 3
29510: PPUSH
29511: CALL_OW 1
29515: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29516: LD_ADDR_VAR 0 7
29520: PUSH
29521: LD_VAR 0 7
29525: PPUSH
29526: LD_VAR 0 7
29530: PPUSH
29531: LD_VAR 0 6
29535: PPUSH
29536: CALL_OW 1
29540: ST_TO_ADDR
// for i = s_arr downto 2 do
29541: LD_ADDR_VAR 0 5
29545: PUSH
29546: DOUBLE
29547: LD_VAR 0 7
29551: INC
29552: ST_TO_ADDR
29553: LD_INT 2
29555: PUSH
29556: FOR_DOWNTO
29557: IFFALSE 29641
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29559: LD_ADDR_VAR 0 6
29563: PUSH
29564: LD_VAR 0 7
29568: PUSH
29569: LD_VAR 0 5
29573: PUSH
29574: LD_INT 1
29576: MINUS
29577: ARRAY
29578: PPUSH
29579: LD_VAR 0 2
29583: PUSH
29584: LD_VAR 0 5
29588: PUSH
29589: LD_INT 1
29591: MINUS
29592: ARRAY
29593: PPUSH
29594: LD_VAR 0 7
29598: PUSH
29599: LD_VAR 0 5
29603: ARRAY
29604: PPUSH
29605: CALL_OW 1
29609: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29610: LD_ADDR_VAR 0 7
29614: PUSH
29615: LD_VAR 0 7
29619: PPUSH
29620: LD_VAR 0 5
29624: PUSH
29625: LD_INT 1
29627: MINUS
29628: PPUSH
29629: LD_VAR 0 6
29633: PPUSH
29634: CALL_OW 1
29638: ST_TO_ADDR
// end ;
29639: GO 29556
29641: POP
29642: POP
// result := s_arr [ 1 ] ;
29643: LD_ADDR_VAR 0 4
29647: PUSH
29648: LD_VAR 0 7
29652: PUSH
29653: LD_INT 1
29655: ARRAY
29656: ST_TO_ADDR
// end ; end ;
29657: LD_VAR 0 4
29661: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29662: LD_INT 0
29664: PPUSH
29665: PPUSH
// if not list then
29666: LD_VAR 0 1
29670: NOT
29671: IFFALSE 29675
// exit ;
29673: GO 29766
// i := list [ pos1 ] ;
29675: LD_ADDR_VAR 0 5
29679: PUSH
29680: LD_VAR 0 1
29684: PUSH
29685: LD_VAR 0 2
29689: ARRAY
29690: ST_TO_ADDR
// if not i then
29691: LD_VAR 0 5
29695: NOT
29696: IFFALSE 29700
// exit ;
29698: GO 29766
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29700: LD_ADDR_VAR 0 1
29704: PUSH
29705: LD_VAR 0 1
29709: PPUSH
29710: LD_VAR 0 2
29714: PPUSH
29715: LD_VAR 0 1
29719: PUSH
29720: LD_VAR 0 3
29724: ARRAY
29725: PPUSH
29726: CALL_OW 1
29730: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29731: LD_ADDR_VAR 0 1
29735: PUSH
29736: LD_VAR 0 1
29740: PPUSH
29741: LD_VAR 0 3
29745: PPUSH
29746: LD_VAR 0 5
29750: PPUSH
29751: CALL_OW 1
29755: ST_TO_ADDR
// result := list ;
29756: LD_ADDR_VAR 0 4
29760: PUSH
29761: LD_VAR 0 1
29765: ST_TO_ADDR
// end ;
29766: LD_VAR 0 4
29770: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29771: LD_INT 0
29773: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29774: LD_ADDR_VAR 0 5
29778: PUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 250
29788: PPUSH
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL_OW 251
29798: PPUSH
29799: LD_VAR 0 2
29803: PPUSH
29804: LD_VAR 0 3
29808: PPUSH
29809: LD_VAR 0 4
29813: PPUSH
29814: CALL 29824 0 5
29818: ST_TO_ADDR
// end ;
29819: LD_VAR 0 5
29823: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29824: LD_INT 0
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
// if not list then
29830: LD_VAR 0 3
29834: NOT
29835: IFFALSE 29839
// exit ;
29837: GO 30227
// result := [ ] ;
29839: LD_ADDR_VAR 0 6
29843: PUSH
29844: EMPTY
29845: ST_TO_ADDR
// for i in list do
29846: LD_ADDR_VAR 0 7
29850: PUSH
29851: LD_VAR 0 3
29855: PUSH
29856: FOR_IN
29857: IFFALSE 30059
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29859: LD_ADDR_VAR 0 9
29863: PUSH
29864: LD_VAR 0 7
29868: PPUSH
29869: LD_VAR 0 1
29873: PPUSH
29874: LD_VAR 0 2
29878: PPUSH
29879: CALL_OW 297
29883: ST_TO_ADDR
// if not result then
29884: LD_VAR 0 6
29888: NOT
29889: IFFALSE 29915
// result := [ [ i , tmp ] ] else
29891: LD_ADDR_VAR 0 6
29895: PUSH
29896: LD_VAR 0 7
29900: PUSH
29901: LD_VAR 0 9
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: ST_TO_ADDR
29913: GO 30057
// begin if result [ result ] [ 2 ] < tmp then
29915: LD_VAR 0 6
29919: PUSH
29920: LD_VAR 0 6
29924: ARRAY
29925: PUSH
29926: LD_INT 2
29928: ARRAY
29929: PUSH
29930: LD_VAR 0 9
29934: LESS
29935: IFFALSE 29977
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29937: LD_ADDR_VAR 0 6
29941: PUSH
29942: LD_VAR 0 6
29946: PPUSH
29947: LD_VAR 0 6
29951: PUSH
29952: LD_INT 1
29954: PLUS
29955: PPUSH
29956: LD_VAR 0 7
29960: PUSH
29961: LD_VAR 0 9
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PPUSH
29970: CALL_OW 2
29974: ST_TO_ADDR
29975: GO 30057
// for j = 1 to result do
29977: LD_ADDR_VAR 0 8
29981: PUSH
29982: DOUBLE
29983: LD_INT 1
29985: DEC
29986: ST_TO_ADDR
29987: LD_VAR 0 6
29991: PUSH
29992: FOR_TO
29993: IFFALSE 30055
// begin if tmp < result [ j ] [ 2 ] then
29995: LD_VAR 0 9
29999: PUSH
30000: LD_VAR 0 6
30004: PUSH
30005: LD_VAR 0 8
30009: ARRAY
30010: PUSH
30011: LD_INT 2
30013: ARRAY
30014: LESS
30015: IFFALSE 30053
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30017: LD_ADDR_VAR 0 6
30021: PUSH
30022: LD_VAR 0 6
30026: PPUSH
30027: LD_VAR 0 8
30031: PPUSH
30032: LD_VAR 0 7
30036: PUSH
30037: LD_VAR 0 9
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PPUSH
30046: CALL_OW 2
30050: ST_TO_ADDR
// break ;
30051: GO 30055
// end ; end ;
30053: GO 29992
30055: POP
30056: POP
// end ; end ;
30057: GO 29856
30059: POP
30060: POP
// if result and not asc then
30061: LD_VAR 0 6
30065: PUSH
30066: LD_VAR 0 4
30070: NOT
30071: AND
30072: IFFALSE 30147
// begin tmp := result ;
30074: LD_ADDR_VAR 0 9
30078: PUSH
30079: LD_VAR 0 6
30083: ST_TO_ADDR
// for i = tmp downto 1 do
30084: LD_ADDR_VAR 0 7
30088: PUSH
30089: DOUBLE
30090: LD_VAR 0 9
30094: INC
30095: ST_TO_ADDR
30096: LD_INT 1
30098: PUSH
30099: FOR_DOWNTO
30100: IFFALSE 30145
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30102: LD_ADDR_VAR 0 6
30106: PUSH
30107: LD_VAR 0 6
30111: PPUSH
30112: LD_VAR 0 9
30116: PUSH
30117: LD_VAR 0 7
30121: MINUS
30122: PUSH
30123: LD_INT 1
30125: PLUS
30126: PPUSH
30127: LD_VAR 0 9
30131: PUSH
30132: LD_VAR 0 7
30136: ARRAY
30137: PPUSH
30138: CALL_OW 1
30142: ST_TO_ADDR
30143: GO 30099
30145: POP
30146: POP
// end ; tmp := [ ] ;
30147: LD_ADDR_VAR 0 9
30151: PUSH
30152: EMPTY
30153: ST_TO_ADDR
// if mode then
30154: LD_VAR 0 5
30158: IFFALSE 30227
// begin for i = 1 to result do
30160: LD_ADDR_VAR 0 7
30164: PUSH
30165: DOUBLE
30166: LD_INT 1
30168: DEC
30169: ST_TO_ADDR
30170: LD_VAR 0 6
30174: PUSH
30175: FOR_TO
30176: IFFALSE 30215
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30178: LD_ADDR_VAR 0 9
30182: PUSH
30183: LD_VAR 0 9
30187: PPUSH
30188: LD_VAR 0 7
30192: PPUSH
30193: LD_VAR 0 6
30197: PUSH
30198: LD_VAR 0 7
30202: ARRAY
30203: PUSH
30204: LD_INT 1
30206: ARRAY
30207: PPUSH
30208: CALL_OW 1
30212: ST_TO_ADDR
30213: GO 30175
30215: POP
30216: POP
// result := tmp ;
30217: LD_ADDR_VAR 0 6
30221: PUSH
30222: LD_VAR 0 9
30226: ST_TO_ADDR
// end ; end ;
30227: LD_VAR 0 6
30231: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30232: LD_INT 0
30234: PPUSH
30235: PPUSH
30236: PPUSH
30237: PPUSH
30238: PPUSH
30239: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30240: LD_ADDR_VAR 0 5
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: ST_TO_ADDR
// if not x or not y then
30262: LD_VAR 0 2
30266: NOT
30267: PUSH
30268: LD_VAR 0 3
30272: NOT
30273: OR
30274: IFFALSE 30278
// exit ;
30276: GO 31928
// if not range then
30278: LD_VAR 0 4
30282: NOT
30283: IFFALSE 30293
// range := 10 ;
30285: LD_ADDR_VAR 0 4
30289: PUSH
30290: LD_INT 10
30292: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30293: LD_ADDR_VAR 0 8
30297: PUSH
30298: LD_INT 81
30300: PUSH
30301: LD_VAR 0 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 92
30312: PUSH
30313: LD_VAR 0 2
30317: PUSH
30318: LD_VAR 0 3
30322: PUSH
30323: LD_VAR 0 4
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: LD_INT 21
30339: PUSH
30340: LD_INT 3
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: PPUSH
30356: CALL_OW 69
30360: ST_TO_ADDR
// if not tmp then
30361: LD_VAR 0 8
30365: NOT
30366: IFFALSE 30370
// exit ;
30368: GO 31928
// for i in tmp do
30370: LD_ADDR_VAR 0 6
30374: PUSH
30375: LD_VAR 0 8
30379: PUSH
30380: FOR_IN
30381: IFFALSE 31903
// begin points := [ 0 , 0 , 0 ] ;
30383: LD_ADDR_VAR 0 9
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: ST_TO_ADDR
// bpoints := 1 ;
30402: LD_ADDR_VAR 0 10
30406: PUSH
30407: LD_INT 1
30409: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30410: LD_VAR 0 6
30414: PPUSH
30415: CALL_OW 247
30419: PUSH
30420: LD_INT 1
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 31006
30428: POP
// begin if GetClass ( i ) = 1 then
30429: LD_VAR 0 6
30433: PPUSH
30434: CALL_OW 257
30438: PUSH
30439: LD_INT 1
30441: EQUAL
30442: IFFALSE 30463
// points := [ 10 , 5 , 3 ] ;
30444: LD_ADDR_VAR 0 9
30448: PUSH
30449: LD_INT 10
30451: PUSH
30452: LD_INT 5
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: LIST
30462: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30463: LD_VAR 0 6
30467: PPUSH
30468: CALL_OW 257
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 3
30478: PUSH
30479: LD_INT 4
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: IN
30487: IFFALSE 30508
// points := [ 3 , 2 , 1 ] ;
30489: LD_ADDR_VAR 0 9
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: LD_INT 2
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30508: LD_VAR 0 6
30512: PPUSH
30513: CALL_OW 257
30517: PUSH
30518: LD_INT 5
30520: EQUAL
30521: IFFALSE 30542
// points := [ 130 , 5 , 2 ] ;
30523: LD_ADDR_VAR 0 9
30527: PUSH
30528: LD_INT 130
30530: PUSH
30531: LD_INT 5
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30542: LD_VAR 0 6
30546: PPUSH
30547: CALL_OW 257
30551: PUSH
30552: LD_INT 8
30554: EQUAL
30555: IFFALSE 30576
// points := [ 35 , 35 , 30 ] ;
30557: LD_ADDR_VAR 0 9
30561: PUSH
30562: LD_INT 35
30564: PUSH
30565: LD_INT 35
30567: PUSH
30568: LD_INT 30
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30576: LD_VAR 0 6
30580: PPUSH
30581: CALL_OW 257
30585: PUSH
30586: LD_INT 9
30588: EQUAL
30589: IFFALSE 30610
// points := [ 20 , 55 , 40 ] ;
30591: LD_ADDR_VAR 0 9
30595: PUSH
30596: LD_INT 20
30598: PUSH
30599: LD_INT 55
30601: PUSH
30602: LD_INT 40
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30610: LD_VAR 0 6
30614: PPUSH
30615: CALL_OW 257
30619: PUSH
30620: LD_INT 12
30622: PUSH
30623: LD_INT 16
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: IN
30630: IFFALSE 30651
// points := [ 5 , 3 , 2 ] ;
30632: LD_ADDR_VAR 0 9
30636: PUSH
30637: LD_INT 5
30639: PUSH
30640: LD_INT 3
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30651: LD_VAR 0 6
30655: PPUSH
30656: CALL_OW 257
30660: PUSH
30661: LD_INT 17
30663: EQUAL
30664: IFFALSE 30685
// points := [ 100 , 50 , 75 ] ;
30666: LD_ADDR_VAR 0 9
30670: PUSH
30671: LD_INT 100
30673: PUSH
30674: LD_INT 50
30676: PUSH
30677: LD_INT 75
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30685: LD_VAR 0 6
30689: PPUSH
30690: CALL_OW 257
30694: PUSH
30695: LD_INT 15
30697: EQUAL
30698: IFFALSE 30719
// points := [ 10 , 5 , 3 ] ;
30700: LD_ADDR_VAR 0 9
30704: PUSH
30705: LD_INT 10
30707: PUSH
30708: LD_INT 5
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30719: LD_VAR 0 6
30723: PPUSH
30724: CALL_OW 257
30728: PUSH
30729: LD_INT 14
30731: EQUAL
30732: IFFALSE 30753
// points := [ 10 , 0 , 0 ] ;
30734: LD_ADDR_VAR 0 9
30738: PUSH
30739: LD_INT 10
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30753: LD_VAR 0 6
30757: PPUSH
30758: CALL_OW 257
30762: PUSH
30763: LD_INT 11
30765: EQUAL
30766: IFFALSE 30787
// points := [ 30 , 10 , 5 ] ;
30768: LD_ADDR_VAR 0 9
30772: PUSH
30773: LD_INT 30
30775: PUSH
30776: LD_INT 10
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30787: LD_VAR 0 1
30791: PPUSH
30792: LD_INT 5
30794: PPUSH
30795: CALL_OW 321
30799: PUSH
30800: LD_INT 2
30802: EQUAL
30803: IFFALSE 30820
// bpoints := bpoints * 1.8 ;
30805: LD_ADDR_VAR 0 10
30809: PUSH
30810: LD_VAR 0 10
30814: PUSH
30815: LD_REAL  1.80000000000000E+0000
30818: MUL
30819: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30820: LD_VAR 0 6
30824: PPUSH
30825: CALL_OW 257
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: LD_INT 4
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: IN
30848: PUSH
30849: LD_VAR 0 1
30853: PPUSH
30854: LD_INT 51
30856: PPUSH
30857: CALL_OW 321
30861: PUSH
30862: LD_INT 2
30864: EQUAL
30865: AND
30866: IFFALSE 30883
// bpoints := bpoints * 1.2 ;
30868: LD_ADDR_VAR 0 10
30872: PUSH
30873: LD_VAR 0 10
30877: PUSH
30878: LD_REAL  1.20000000000000E+0000
30881: MUL
30882: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30883: LD_VAR 0 6
30887: PPUSH
30888: CALL_OW 257
30892: PUSH
30893: LD_INT 5
30895: PUSH
30896: LD_INT 7
30898: PUSH
30899: LD_INT 9
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: IN
30907: PUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: LD_INT 52
30915: PPUSH
30916: CALL_OW 321
30920: PUSH
30921: LD_INT 2
30923: EQUAL
30924: AND
30925: IFFALSE 30942
// bpoints := bpoints * 1.5 ;
30927: LD_ADDR_VAR 0 10
30931: PUSH
30932: LD_VAR 0 10
30936: PUSH
30937: LD_REAL  1.50000000000000E+0000
30940: MUL
30941: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30942: LD_VAR 0 1
30946: PPUSH
30947: LD_INT 66
30949: PPUSH
30950: CALL_OW 321
30954: PUSH
30955: LD_INT 2
30957: EQUAL
30958: IFFALSE 30975
// bpoints := bpoints * 1.1 ;
30960: LD_ADDR_VAR 0 10
30964: PUSH
30965: LD_VAR 0 10
30969: PUSH
30970: LD_REAL  1.10000000000000E+0000
30973: MUL
30974: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30975: LD_ADDR_VAR 0 10
30979: PUSH
30980: LD_VAR 0 10
30984: PUSH
30985: LD_VAR 0 6
30989: PPUSH
30990: LD_INT 1
30992: PPUSH
30993: CALL_OW 259
30997: PUSH
30998: LD_REAL  1.15000000000000E+0000
31001: MUL
31002: MUL
31003: ST_TO_ADDR
// end ; unit_vehicle :
31004: GO 31832
31006: LD_INT 2
31008: DOUBLE
31009: EQUAL
31010: IFTRUE 31014
31012: GO 31820
31014: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31015: LD_VAR 0 6
31019: PPUSH
31020: CALL_OW 264
31024: PUSH
31025: LD_INT 2
31027: PUSH
31028: LD_INT 42
31030: PUSH
31031: LD_INT 24
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: IN
31039: IFFALSE 31060
// points := [ 25 , 5 , 3 ] ;
31041: LD_ADDR_VAR 0 9
31045: PUSH
31046: LD_INT 25
31048: PUSH
31049: LD_INT 5
31051: PUSH
31052: LD_INT 3
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31060: LD_VAR 0 6
31064: PPUSH
31065: CALL_OW 264
31069: PUSH
31070: LD_INT 4
31072: PUSH
31073: LD_INT 43
31075: PUSH
31076: LD_INT 25
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: IN
31084: IFFALSE 31105
// points := [ 40 , 15 , 5 ] ;
31086: LD_ADDR_VAR 0 9
31090: PUSH
31091: LD_INT 40
31093: PUSH
31094: LD_INT 15
31096: PUSH
31097: LD_INT 5
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31105: LD_VAR 0 6
31109: PPUSH
31110: CALL_OW 264
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: LD_INT 23
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: IN
31125: IFFALSE 31146
// points := [ 7 , 25 , 8 ] ;
31127: LD_ADDR_VAR 0 9
31131: PUSH
31132: LD_INT 7
31134: PUSH
31135: LD_INT 25
31137: PUSH
31138: LD_INT 8
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: LIST
31145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31146: LD_VAR 0 6
31150: PPUSH
31151: CALL_OW 264
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: LD_INT 27
31161: PUSH
31162: LD_INT 44
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: IN
31170: IFFALSE 31191
// points := [ 14 , 50 , 16 ] ;
31172: LD_ADDR_VAR 0 9
31176: PUSH
31177: LD_INT 14
31179: PUSH
31180: LD_INT 50
31182: PUSH
31183: LD_INT 16
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31191: LD_VAR 0 6
31195: PPUSH
31196: CALL_OW 264
31200: PUSH
31201: LD_INT 6
31203: PUSH
31204: LD_INT 46
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: IN
31211: IFFALSE 31232
// points := [ 32 , 120 , 70 ] ;
31213: LD_ADDR_VAR 0 9
31217: PUSH
31218: LD_INT 32
31220: PUSH
31221: LD_INT 120
31223: PUSH
31224: LD_INT 70
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: LIST
31231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31232: LD_VAR 0 6
31236: PPUSH
31237: CALL_OW 264
31241: PUSH
31242: LD_INT 7
31244: PUSH
31245: LD_INT 28
31247: PUSH
31248: LD_INT 45
31250: PUSH
31251: LD_INT 92
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: IN
31260: IFFALSE 31281
// points := [ 35 , 20 , 45 ] ;
31262: LD_ADDR_VAR 0 9
31266: PUSH
31267: LD_INT 35
31269: PUSH
31270: LD_INT 20
31272: PUSH
31273: LD_INT 45
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31281: LD_VAR 0 6
31285: PPUSH
31286: CALL_OW 264
31290: PUSH
31291: LD_INT 47
31293: PUSH
31294: EMPTY
31295: LIST
31296: IN
31297: IFFALSE 31318
// points := [ 67 , 45 , 75 ] ;
31299: LD_ADDR_VAR 0 9
31303: PUSH
31304: LD_INT 67
31306: PUSH
31307: LD_INT 45
31309: PUSH
31310: LD_INT 75
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31318: LD_VAR 0 6
31322: PPUSH
31323: CALL_OW 264
31327: PUSH
31328: LD_INT 26
31330: PUSH
31331: EMPTY
31332: LIST
31333: IN
31334: IFFALSE 31355
// points := [ 120 , 30 , 80 ] ;
31336: LD_ADDR_VAR 0 9
31340: PUSH
31341: LD_INT 120
31343: PUSH
31344: LD_INT 30
31346: PUSH
31347: LD_INT 80
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31355: LD_VAR 0 6
31359: PPUSH
31360: CALL_OW 264
31364: PUSH
31365: LD_INT 22
31367: PUSH
31368: EMPTY
31369: LIST
31370: IN
31371: IFFALSE 31392
// points := [ 40 , 1 , 1 ] ;
31373: LD_ADDR_VAR 0 9
31377: PUSH
31378: LD_INT 40
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31392: LD_VAR 0 6
31396: PPUSH
31397: CALL_OW 264
31401: PUSH
31402: LD_INT 29
31404: PUSH
31405: EMPTY
31406: LIST
31407: IN
31408: IFFALSE 31429
// points := [ 70 , 200 , 400 ] ;
31410: LD_ADDR_VAR 0 9
31414: PUSH
31415: LD_INT 70
31417: PUSH
31418: LD_INT 200
31420: PUSH
31421: LD_INT 400
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: LIST
31428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31429: LD_VAR 0 6
31433: PPUSH
31434: CALL_OW 264
31438: PUSH
31439: LD_INT 14
31441: PUSH
31442: LD_INT 53
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: IN
31449: IFFALSE 31470
// points := [ 40 , 10 , 20 ] ;
31451: LD_ADDR_VAR 0 9
31455: PUSH
31456: LD_INT 40
31458: PUSH
31459: LD_INT 10
31461: PUSH
31462: LD_INT 20
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31470: LD_VAR 0 6
31474: PPUSH
31475: CALL_OW 264
31479: PUSH
31480: LD_INT 9
31482: PUSH
31483: EMPTY
31484: LIST
31485: IN
31486: IFFALSE 31507
// points := [ 5 , 70 , 20 ] ;
31488: LD_ADDR_VAR 0 9
31492: PUSH
31493: LD_INT 5
31495: PUSH
31496: LD_INT 70
31498: PUSH
31499: LD_INT 20
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31507: LD_VAR 0 6
31511: PPUSH
31512: CALL_OW 264
31516: PUSH
31517: LD_INT 10
31519: PUSH
31520: EMPTY
31521: LIST
31522: IN
31523: IFFALSE 31544
// points := [ 35 , 110 , 70 ] ;
31525: LD_ADDR_VAR 0 9
31529: PUSH
31530: LD_INT 35
31532: PUSH
31533: LD_INT 110
31535: PUSH
31536: LD_INT 70
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31544: LD_VAR 0 6
31548: PPUSH
31549: CALL_OW 265
31553: PUSH
31554: LD_INT 25
31556: EQUAL
31557: IFFALSE 31578
// points := [ 80 , 65 , 100 ] ;
31559: LD_ADDR_VAR 0 9
31563: PUSH
31564: LD_INT 80
31566: PUSH
31567: LD_INT 65
31569: PUSH
31570: LD_INT 100
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31578: LD_VAR 0 6
31582: PPUSH
31583: CALL_OW 263
31587: PUSH
31588: LD_INT 1
31590: EQUAL
31591: IFFALSE 31626
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31593: LD_ADDR_VAR 0 10
31597: PUSH
31598: LD_VAR 0 10
31602: PUSH
31603: LD_VAR 0 6
31607: PPUSH
31608: CALL_OW 311
31612: PPUSH
31613: LD_INT 3
31615: PPUSH
31616: CALL_OW 259
31620: PUSH
31621: LD_INT 4
31623: MUL
31624: MUL
31625: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31626: LD_VAR 0 6
31630: PPUSH
31631: CALL_OW 263
31635: PUSH
31636: LD_INT 2
31638: EQUAL
31639: IFFALSE 31690
// begin j := IsControledBy ( i ) ;
31641: LD_ADDR_VAR 0 7
31645: PUSH
31646: LD_VAR 0 6
31650: PPUSH
31651: CALL_OW 312
31655: ST_TO_ADDR
// if j then
31656: LD_VAR 0 7
31660: IFFALSE 31690
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31662: LD_ADDR_VAR 0 10
31666: PUSH
31667: LD_VAR 0 10
31671: PUSH
31672: LD_VAR 0 7
31676: PPUSH
31677: LD_INT 3
31679: PPUSH
31680: CALL_OW 259
31684: PUSH
31685: LD_INT 3
31687: MUL
31688: MUL
31689: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31690: LD_VAR 0 6
31694: PPUSH
31695: CALL_OW 264
31699: PUSH
31700: LD_INT 5
31702: PUSH
31703: LD_INT 6
31705: PUSH
31706: LD_INT 46
31708: PUSH
31709: LD_INT 44
31711: PUSH
31712: LD_INT 47
31714: PUSH
31715: LD_INT 45
31717: PUSH
31718: LD_INT 28
31720: PUSH
31721: LD_INT 7
31723: PUSH
31724: LD_INT 27
31726: PUSH
31727: LD_INT 29
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: IN
31742: PUSH
31743: LD_VAR 0 1
31747: PPUSH
31748: LD_INT 52
31750: PPUSH
31751: CALL_OW 321
31755: PUSH
31756: LD_INT 2
31758: EQUAL
31759: AND
31760: IFFALSE 31777
// bpoints := bpoints * 1.2 ;
31762: LD_ADDR_VAR 0 10
31766: PUSH
31767: LD_VAR 0 10
31771: PUSH
31772: LD_REAL  1.20000000000000E+0000
31775: MUL
31776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31777: LD_VAR 0 6
31781: PPUSH
31782: CALL_OW 264
31786: PUSH
31787: LD_INT 6
31789: PUSH
31790: LD_INT 46
31792: PUSH
31793: LD_INT 47
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: IN
31801: IFFALSE 31818
// bpoints := bpoints * 1.2 ;
31803: LD_ADDR_VAR 0 10
31807: PUSH
31808: LD_VAR 0 10
31812: PUSH
31813: LD_REAL  1.20000000000000E+0000
31816: MUL
31817: ST_TO_ADDR
// end ; unit_building :
31818: GO 31832
31820: LD_INT 3
31822: DOUBLE
31823: EQUAL
31824: IFTRUE 31828
31826: GO 31831
31828: POP
// ; end ;
31829: GO 31832
31831: POP
// for j = 1 to 3 do
31832: LD_ADDR_VAR 0 7
31836: PUSH
31837: DOUBLE
31838: LD_INT 1
31840: DEC
31841: ST_TO_ADDR
31842: LD_INT 3
31844: PUSH
31845: FOR_TO
31846: IFFALSE 31899
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31848: LD_ADDR_VAR 0 5
31852: PUSH
31853: LD_VAR 0 5
31857: PPUSH
31858: LD_VAR 0 7
31862: PPUSH
31863: LD_VAR 0 5
31867: PUSH
31868: LD_VAR 0 7
31872: ARRAY
31873: PUSH
31874: LD_VAR 0 9
31878: PUSH
31879: LD_VAR 0 7
31883: ARRAY
31884: PUSH
31885: LD_VAR 0 10
31889: MUL
31890: PLUS
31891: PPUSH
31892: CALL_OW 1
31896: ST_TO_ADDR
31897: GO 31845
31899: POP
31900: POP
// end ;
31901: GO 30380
31903: POP
31904: POP
// result := Replace ( result , 4 , tmp ) ;
31905: LD_ADDR_VAR 0 5
31909: PUSH
31910: LD_VAR 0 5
31914: PPUSH
31915: LD_INT 4
31917: PPUSH
31918: LD_VAR 0 8
31922: PPUSH
31923: CALL_OW 1
31927: ST_TO_ADDR
// end ;
31928: LD_VAR 0 5
31932: RET
// export function DangerAtRange ( unit , range ) ; begin
31933: LD_INT 0
31935: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31936: LD_ADDR_VAR 0 3
31940: PUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 255
31950: PPUSH
31951: LD_VAR 0 1
31955: PPUSH
31956: CALL_OW 250
31960: PPUSH
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL_OW 251
31970: PPUSH
31971: LD_VAR 0 2
31975: PPUSH
31976: CALL 30232 0 4
31980: ST_TO_ADDR
// end ;
31981: LD_VAR 0 3
31985: RET
// export function DangerInArea ( side , area ) ; begin
31986: LD_INT 0
31988: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31989: LD_ADDR_VAR 0 3
31993: PUSH
31994: LD_VAR 0 2
31998: PPUSH
31999: LD_INT 81
32001: PUSH
32002: LD_VAR 0 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PPUSH
32011: CALL_OW 70
32015: ST_TO_ADDR
// end ;
32016: LD_VAR 0 3
32020: RET
// export function IsExtension ( b ) ; begin
32021: LD_INT 0
32023: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32024: LD_ADDR_VAR 0 2
32028: PUSH
32029: LD_VAR 0 1
32033: PUSH
32034: LD_INT 23
32036: PUSH
32037: LD_INT 20
32039: PUSH
32040: LD_INT 22
32042: PUSH
32043: LD_INT 17
32045: PUSH
32046: LD_INT 24
32048: PUSH
32049: LD_INT 21
32051: PUSH
32052: LD_INT 19
32054: PUSH
32055: LD_INT 16
32057: PUSH
32058: LD_INT 25
32060: PUSH
32061: LD_INT 18
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: IN
32076: ST_TO_ADDR
// end ;
32077: LD_VAR 0 2
32081: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32082: LD_INT 0
32084: PPUSH
32085: PPUSH
32086: PPUSH
// result := [ ] ;
32087: LD_ADDR_VAR 0 4
32091: PUSH
32092: EMPTY
32093: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32094: LD_ADDR_VAR 0 5
32098: PUSH
32099: LD_VAR 0 2
32103: PPUSH
32104: LD_INT 21
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PPUSH
32114: CALL_OW 70
32118: ST_TO_ADDR
// if not tmp then
32119: LD_VAR 0 5
32123: NOT
32124: IFFALSE 32128
// exit ;
32126: GO 32192
// if checkLink then
32128: LD_VAR 0 3
32132: IFFALSE 32182
// begin for i in tmp do
32134: LD_ADDR_VAR 0 6
32138: PUSH
32139: LD_VAR 0 5
32143: PUSH
32144: FOR_IN
32145: IFFALSE 32180
// if GetBase ( i ) <> base then
32147: LD_VAR 0 6
32151: PPUSH
32152: CALL_OW 274
32156: PUSH
32157: LD_VAR 0 1
32161: NONEQUAL
32162: IFFALSE 32178
// ComLinkToBase ( base , i ) ;
32164: LD_VAR 0 1
32168: PPUSH
32169: LD_VAR 0 6
32173: PPUSH
32174: CALL_OW 169
32178: GO 32144
32180: POP
32181: POP
// end ; result := tmp ;
32182: LD_ADDR_VAR 0 4
32186: PUSH
32187: LD_VAR 0 5
32191: ST_TO_ADDR
// end ;
32192: LD_VAR 0 4
32196: RET
// export function ComComplete ( units , b ) ; var i ; begin
32197: LD_INT 0
32199: PPUSH
32200: PPUSH
// if not units then
32201: LD_VAR 0 1
32205: NOT
32206: IFFALSE 32210
// exit ;
32208: GO 32300
// for i in units do
32210: LD_ADDR_VAR 0 4
32214: PUSH
32215: LD_VAR 0 1
32219: PUSH
32220: FOR_IN
32221: IFFALSE 32298
// if BuildingStatus ( b ) = bs_build then
32223: LD_VAR 0 2
32227: PPUSH
32228: CALL_OW 461
32232: PUSH
32233: LD_INT 1
32235: EQUAL
32236: IFFALSE 32296
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32238: LD_VAR 0 4
32242: PPUSH
32243: LD_STRING h
32245: PUSH
32246: LD_VAR 0 2
32250: PPUSH
32251: CALL_OW 250
32255: PUSH
32256: LD_VAR 0 2
32260: PPUSH
32261: CALL_OW 251
32265: PUSH
32266: LD_VAR 0 2
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: PUSH
32289: EMPTY
32290: LIST
32291: PPUSH
32292: CALL_OW 446
32296: GO 32220
32298: POP
32299: POP
// end ;
32300: LD_VAR 0 3
32304: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32305: LD_INT 0
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
32311: PPUSH
32312: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32313: LD_VAR 0 1
32317: NOT
32318: PUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 263
32328: PUSH
32329: LD_INT 2
32331: NONEQUAL
32332: OR
32333: IFFALSE 32337
// exit ;
32335: GO 32653
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32337: LD_ADDR_VAR 0 6
32341: PUSH
32342: LD_INT 22
32344: PUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 255
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: LD_INT 30
32364: PUSH
32365: LD_INT 36
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 34
32374: PUSH
32375: LD_INT 31
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PPUSH
32391: CALL_OW 69
32395: ST_TO_ADDR
// if not tmp then
32396: LD_VAR 0 6
32400: NOT
32401: IFFALSE 32405
// exit ;
32403: GO 32653
// result := [ ] ;
32405: LD_ADDR_VAR 0 2
32409: PUSH
32410: EMPTY
32411: ST_TO_ADDR
// for i in tmp do
32412: LD_ADDR_VAR 0 3
32416: PUSH
32417: LD_VAR 0 6
32421: PUSH
32422: FOR_IN
32423: IFFALSE 32494
// begin t := UnitsInside ( i ) ;
32425: LD_ADDR_VAR 0 4
32429: PUSH
32430: LD_VAR 0 3
32434: PPUSH
32435: CALL_OW 313
32439: ST_TO_ADDR
// if t then
32440: LD_VAR 0 4
32444: IFFALSE 32492
// for j in t do
32446: LD_ADDR_VAR 0 7
32450: PUSH
32451: LD_VAR 0 4
32455: PUSH
32456: FOR_IN
32457: IFFALSE 32490
// result := Replace ( result , result + 1 , j ) ;
32459: LD_ADDR_VAR 0 2
32463: PUSH
32464: LD_VAR 0 2
32468: PPUSH
32469: LD_VAR 0 2
32473: PUSH
32474: LD_INT 1
32476: PLUS
32477: PPUSH
32478: LD_VAR 0 7
32482: PPUSH
32483: CALL_OW 1
32487: ST_TO_ADDR
32488: GO 32456
32490: POP
32491: POP
// end ;
32492: GO 32422
32494: POP
32495: POP
// if not result then
32496: LD_VAR 0 2
32500: NOT
32501: IFFALSE 32505
// exit ;
32503: GO 32653
// mech := result [ 1 ] ;
32505: LD_ADDR_VAR 0 5
32509: PUSH
32510: LD_VAR 0 2
32514: PUSH
32515: LD_INT 1
32517: ARRAY
32518: ST_TO_ADDR
// if result > 1 then
32519: LD_VAR 0 2
32523: PUSH
32524: LD_INT 1
32526: GREATER
32527: IFFALSE 32639
// begin for i = 2 to result do
32529: LD_ADDR_VAR 0 3
32533: PUSH
32534: DOUBLE
32535: LD_INT 2
32537: DEC
32538: ST_TO_ADDR
32539: LD_VAR 0 2
32543: PUSH
32544: FOR_TO
32545: IFFALSE 32637
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32547: LD_ADDR_VAR 0 4
32551: PUSH
32552: LD_VAR 0 2
32556: PUSH
32557: LD_VAR 0 3
32561: ARRAY
32562: PPUSH
32563: LD_INT 3
32565: PPUSH
32566: CALL_OW 259
32570: PUSH
32571: LD_VAR 0 2
32575: PUSH
32576: LD_VAR 0 3
32580: ARRAY
32581: PPUSH
32582: CALL_OW 432
32586: MINUS
32587: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32588: LD_VAR 0 4
32592: PUSH
32593: LD_VAR 0 5
32597: PPUSH
32598: LD_INT 3
32600: PPUSH
32601: CALL_OW 259
32605: PUSH
32606: LD_VAR 0 5
32610: PPUSH
32611: CALL_OW 432
32615: MINUS
32616: GREATEREQUAL
32617: IFFALSE 32635
// mech := result [ i ] ;
32619: LD_ADDR_VAR 0 5
32623: PUSH
32624: LD_VAR 0 2
32628: PUSH
32629: LD_VAR 0 3
32633: ARRAY
32634: ST_TO_ADDR
// end ;
32635: GO 32544
32637: POP
32638: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32639: LD_VAR 0 1
32643: PPUSH
32644: LD_VAR 0 5
32648: PPUSH
32649: CALL_OW 135
// end ;
32653: LD_VAR 0 2
32657: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32658: LD_INT 0
32660: PPUSH
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
32667: PPUSH
32668: PPUSH
32669: PPUSH
32670: PPUSH
32671: PPUSH
32672: PPUSH
// result := [ ] ;
32673: LD_ADDR_VAR 0 7
32677: PUSH
32678: EMPTY
32679: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32680: LD_VAR 0 1
32684: PPUSH
32685: CALL_OW 266
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: IN
32700: NOT
32701: IFFALSE 32705
// exit ;
32703: GO 34339
// if name then
32705: LD_VAR 0 3
32709: IFFALSE 32725
// SetBName ( base_dep , name ) ;
32711: LD_VAR 0 1
32715: PPUSH
32716: LD_VAR 0 3
32720: PPUSH
32721: CALL_OW 500
// base := GetBase ( base_dep ) ;
32725: LD_ADDR_VAR 0 15
32729: PUSH
32730: LD_VAR 0 1
32734: PPUSH
32735: CALL_OW 274
32739: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32740: LD_ADDR_VAR 0 16
32744: PUSH
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL_OW 255
32754: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32755: LD_ADDR_VAR 0 17
32759: PUSH
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 248
32769: ST_TO_ADDR
// if sources then
32770: LD_VAR 0 5
32774: IFFALSE 32821
// for i = 1 to 3 do
32776: LD_ADDR_VAR 0 8
32780: PUSH
32781: DOUBLE
32782: LD_INT 1
32784: DEC
32785: ST_TO_ADDR
32786: LD_INT 3
32788: PUSH
32789: FOR_TO
32790: IFFALSE 32819
// AddResourceType ( base , i , sources [ i ] ) ;
32792: LD_VAR 0 15
32796: PPUSH
32797: LD_VAR 0 8
32801: PPUSH
32802: LD_VAR 0 5
32806: PUSH
32807: LD_VAR 0 8
32811: ARRAY
32812: PPUSH
32813: CALL_OW 276
32817: GO 32789
32819: POP
32820: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32821: LD_ADDR_VAR 0 18
32825: PUSH
32826: LD_VAR 0 15
32830: PPUSH
32831: LD_VAR 0 2
32835: PPUSH
32836: LD_INT 1
32838: PPUSH
32839: CALL 32082 0 3
32843: ST_TO_ADDR
// InitHc ;
32844: CALL_OW 19
// InitUc ;
32848: CALL_OW 18
// uc_side := side ;
32852: LD_ADDR_OWVAR 20
32856: PUSH
32857: LD_VAR 0 16
32861: ST_TO_ADDR
// uc_nation := nation ;
32862: LD_ADDR_OWVAR 21
32866: PUSH
32867: LD_VAR 0 17
32871: ST_TO_ADDR
// if buildings then
32872: LD_VAR 0 18
32876: IFFALSE 34198
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32878: LD_ADDR_VAR 0 19
32882: PUSH
32883: LD_VAR 0 18
32887: PPUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 30
32893: PUSH
32894: LD_INT 29
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 30
32903: PUSH
32904: LD_INT 30
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: PPUSH
32916: CALL_OW 72
32920: ST_TO_ADDR
// if tmp then
32921: LD_VAR 0 19
32925: IFFALSE 32973
// for i in tmp do
32927: LD_ADDR_VAR 0 8
32931: PUSH
32932: LD_VAR 0 19
32936: PUSH
32937: FOR_IN
32938: IFFALSE 32971
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32940: LD_VAR 0 8
32944: PPUSH
32945: CALL_OW 250
32949: PPUSH
32950: LD_VAR 0 8
32954: PPUSH
32955: CALL_OW 251
32959: PPUSH
32960: LD_VAR 0 16
32964: PPUSH
32965: CALL_OW 441
32969: GO 32937
32971: POP
32972: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32973: LD_VAR 0 18
32977: PPUSH
32978: LD_INT 2
32980: PUSH
32981: LD_INT 30
32983: PUSH
32984: LD_INT 32
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 30
32993: PUSH
32994: LD_INT 33
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: PPUSH
33006: CALL_OW 72
33010: IFFALSE 33098
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33012: LD_ADDR_VAR 0 8
33016: PUSH
33017: LD_VAR 0 18
33021: PPUSH
33022: LD_INT 2
33024: PUSH
33025: LD_INT 30
33027: PUSH
33028: LD_INT 32
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 30
33037: PUSH
33038: LD_INT 33
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: PPUSH
33050: CALL_OW 72
33054: PUSH
33055: FOR_IN
33056: IFFALSE 33096
// begin if not GetBWeapon ( i ) then
33058: LD_VAR 0 8
33062: PPUSH
33063: CALL_OW 269
33067: NOT
33068: IFFALSE 33094
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33070: LD_VAR 0 8
33074: PPUSH
33075: LD_VAR 0 8
33079: PPUSH
33080: LD_VAR 0 2
33084: PPUSH
33085: CALL 34344 0 2
33089: PPUSH
33090: CALL_OW 431
// end ;
33094: GO 33055
33096: POP
33097: POP
// end ; for i = 1 to personel do
33098: LD_ADDR_VAR 0 8
33102: PUSH
33103: DOUBLE
33104: LD_INT 1
33106: DEC
33107: ST_TO_ADDR
33108: LD_VAR 0 6
33112: PUSH
33113: FOR_TO
33114: IFFALSE 34178
// begin if i > 4 then
33116: LD_VAR 0 8
33120: PUSH
33121: LD_INT 4
33123: GREATER
33124: IFFALSE 33128
// break ;
33126: GO 34178
// case i of 1 :
33128: LD_VAR 0 8
33132: PUSH
33133: LD_INT 1
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33221
33141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33142: LD_ADDR_VAR 0 12
33146: PUSH
33147: LD_VAR 0 18
33151: PPUSH
33152: LD_INT 22
33154: PUSH
33155: LD_VAR 0 16
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 58
33166: PUSH
33167: EMPTY
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: LD_INT 30
33175: PUSH
33176: LD_INT 32
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 30
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 30
33195: PUSH
33196: LD_INT 5
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: PPUSH
33214: CALL_OW 72
33218: ST_TO_ADDR
33219: GO 33443
33221: LD_INT 2
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33291
33229: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33230: LD_ADDR_VAR 0 12
33234: PUSH
33235: LD_VAR 0 18
33239: PPUSH
33240: LD_INT 22
33242: PUSH
33243: LD_VAR 0 16
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 30
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 30
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PPUSH
33284: CALL_OW 72
33288: ST_TO_ADDR
33289: GO 33443
33291: LD_INT 3
33293: DOUBLE
33294: EQUAL
33295: IFTRUE 33299
33297: GO 33361
33299: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33300: LD_ADDR_VAR 0 12
33304: PUSH
33305: LD_VAR 0 18
33309: PPUSH
33310: LD_INT 22
33312: PUSH
33313: LD_VAR 0 16
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: LD_INT 30
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 30
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: LIST
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PPUSH
33354: CALL_OW 72
33358: ST_TO_ADDR
33359: GO 33443
33361: LD_INT 4
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33369
33367: GO 33442
33369: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33370: LD_ADDR_VAR 0 12
33374: PUSH
33375: LD_VAR 0 18
33379: PPUSH
33380: LD_INT 22
33382: PUSH
33383: LD_VAR 0 16
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 30
33397: PUSH
33398: LD_INT 6
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 30
33407: PUSH
33408: LD_INT 7
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 30
33417: PUSH
33418: LD_INT 8
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PPUSH
33435: CALL_OW 72
33439: ST_TO_ADDR
33440: GO 33443
33442: POP
// if i = 1 then
33443: LD_VAR 0 8
33447: PUSH
33448: LD_INT 1
33450: EQUAL
33451: IFFALSE 33562
// begin tmp := [ ] ;
33453: LD_ADDR_VAR 0 19
33457: PUSH
33458: EMPTY
33459: ST_TO_ADDR
// for j in f do
33460: LD_ADDR_VAR 0 9
33464: PUSH
33465: LD_VAR 0 12
33469: PUSH
33470: FOR_IN
33471: IFFALSE 33544
// if GetBType ( j ) = b_bunker then
33473: LD_VAR 0 9
33477: PPUSH
33478: CALL_OW 266
33482: PUSH
33483: LD_INT 32
33485: EQUAL
33486: IFFALSE 33513
// tmp := Insert ( tmp , 1 , j ) else
33488: LD_ADDR_VAR 0 19
33492: PUSH
33493: LD_VAR 0 19
33497: PPUSH
33498: LD_INT 1
33500: PPUSH
33501: LD_VAR 0 9
33505: PPUSH
33506: CALL_OW 2
33510: ST_TO_ADDR
33511: GO 33542
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33513: LD_ADDR_VAR 0 19
33517: PUSH
33518: LD_VAR 0 19
33522: PPUSH
33523: LD_VAR 0 19
33527: PUSH
33528: LD_INT 1
33530: PLUS
33531: PPUSH
33532: LD_VAR 0 9
33536: PPUSH
33537: CALL_OW 2
33541: ST_TO_ADDR
33542: GO 33470
33544: POP
33545: POP
// if tmp then
33546: LD_VAR 0 19
33550: IFFALSE 33562
// f := tmp ;
33552: LD_ADDR_VAR 0 12
33556: PUSH
33557: LD_VAR 0 19
33561: ST_TO_ADDR
// end ; x := personel [ i ] ;
33562: LD_ADDR_VAR 0 13
33566: PUSH
33567: LD_VAR 0 6
33571: PUSH
33572: LD_VAR 0 8
33576: ARRAY
33577: ST_TO_ADDR
// if x = - 1 then
33578: LD_VAR 0 13
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: EQUAL
33587: IFFALSE 33796
// begin for j in f do
33589: LD_ADDR_VAR 0 9
33593: PUSH
33594: LD_VAR 0 12
33598: PUSH
33599: FOR_IN
33600: IFFALSE 33792
// repeat InitHc ;
33602: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33606: LD_VAR 0 9
33610: PPUSH
33611: CALL_OW 266
33615: PUSH
33616: LD_INT 5
33618: EQUAL
33619: IFFALSE 33689
// begin if UnitsInside ( j ) < 3 then
33621: LD_VAR 0 9
33625: PPUSH
33626: CALL_OW 313
33630: PUSH
33631: LD_INT 3
33633: LESS
33634: IFFALSE 33670
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33636: LD_INT 0
33638: PPUSH
33639: LD_INT 5
33641: PUSH
33642: LD_INT 8
33644: PUSH
33645: LD_INT 9
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: PUSH
33653: LD_VAR 0 17
33657: ARRAY
33658: PPUSH
33659: LD_VAR 0 4
33663: PPUSH
33664: CALL_OW 380
33668: GO 33687
// PrepareHuman ( false , i , skill ) ;
33670: LD_INT 0
33672: PPUSH
33673: LD_VAR 0 8
33677: PPUSH
33678: LD_VAR 0 4
33682: PPUSH
33683: CALL_OW 380
// end else
33687: GO 33706
// PrepareHuman ( false , i , skill ) ;
33689: LD_INT 0
33691: PPUSH
33692: LD_VAR 0 8
33696: PPUSH
33697: LD_VAR 0 4
33701: PPUSH
33702: CALL_OW 380
// un := CreateHuman ;
33706: LD_ADDR_VAR 0 14
33710: PUSH
33711: CALL_OW 44
33715: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33716: LD_ADDR_VAR 0 7
33720: PUSH
33721: LD_VAR 0 7
33725: PPUSH
33726: LD_INT 1
33728: PPUSH
33729: LD_VAR 0 14
33733: PPUSH
33734: CALL_OW 2
33738: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33739: LD_VAR 0 14
33743: PPUSH
33744: LD_VAR 0 9
33748: PPUSH
33749: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33753: LD_VAR 0 9
33757: PPUSH
33758: CALL_OW 313
33762: PUSH
33763: LD_INT 6
33765: EQUAL
33766: PUSH
33767: LD_VAR 0 9
33771: PPUSH
33772: CALL_OW 266
33776: PUSH
33777: LD_INT 32
33779: PUSH
33780: LD_INT 31
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: IN
33787: OR
33788: IFFALSE 33602
33790: GO 33599
33792: POP
33793: POP
// end else
33794: GO 34176
// for j = 1 to x do
33796: LD_ADDR_VAR 0 9
33800: PUSH
33801: DOUBLE
33802: LD_INT 1
33804: DEC
33805: ST_TO_ADDR
33806: LD_VAR 0 13
33810: PUSH
33811: FOR_TO
33812: IFFALSE 34174
// begin InitHc ;
33814: CALL_OW 19
// if not f then
33818: LD_VAR 0 12
33822: NOT
33823: IFFALSE 33912
// begin PrepareHuman ( false , i , skill ) ;
33825: LD_INT 0
33827: PPUSH
33828: LD_VAR 0 8
33832: PPUSH
33833: LD_VAR 0 4
33837: PPUSH
33838: CALL_OW 380
// un := CreateHuman ;
33842: LD_ADDR_VAR 0 14
33846: PUSH
33847: CALL_OW 44
33851: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33852: LD_ADDR_VAR 0 7
33856: PUSH
33857: LD_VAR 0 7
33861: PPUSH
33862: LD_INT 1
33864: PPUSH
33865: LD_VAR 0 14
33869: PPUSH
33870: CALL_OW 2
33874: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33875: LD_VAR 0 14
33879: PPUSH
33880: LD_VAR 0 1
33884: PPUSH
33885: CALL_OW 250
33889: PPUSH
33890: LD_VAR 0 1
33894: PPUSH
33895: CALL_OW 251
33899: PPUSH
33900: LD_INT 10
33902: PPUSH
33903: LD_INT 0
33905: PPUSH
33906: CALL_OW 50
// continue ;
33910: GO 33811
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33912: LD_VAR 0 12
33916: PUSH
33917: LD_INT 1
33919: ARRAY
33920: PPUSH
33921: CALL_OW 313
33925: PUSH
33926: LD_VAR 0 12
33930: PUSH
33931: LD_INT 1
33933: ARRAY
33934: PPUSH
33935: CALL_OW 266
33939: PUSH
33940: LD_INT 32
33942: PUSH
33943: LD_INT 31
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: IN
33950: AND
33951: PUSH
33952: LD_VAR 0 12
33956: PUSH
33957: LD_INT 1
33959: ARRAY
33960: PPUSH
33961: CALL_OW 313
33965: PUSH
33966: LD_INT 6
33968: EQUAL
33969: OR
33970: IFFALSE 33990
// f := Delete ( f , 1 ) ;
33972: LD_ADDR_VAR 0 12
33976: PUSH
33977: LD_VAR 0 12
33981: PPUSH
33982: LD_INT 1
33984: PPUSH
33985: CALL_OW 3
33989: ST_TO_ADDR
// if not f then
33990: LD_VAR 0 12
33994: NOT
33995: IFFALSE 34013
// begin x := x + 2 ;
33997: LD_ADDR_VAR 0 13
34001: PUSH
34002: LD_VAR 0 13
34006: PUSH
34007: LD_INT 2
34009: PLUS
34010: ST_TO_ADDR
// continue ;
34011: GO 33811
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34013: LD_VAR 0 12
34017: PUSH
34018: LD_INT 1
34020: ARRAY
34021: PPUSH
34022: CALL_OW 266
34026: PUSH
34027: LD_INT 5
34029: EQUAL
34030: IFFALSE 34104
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34032: LD_VAR 0 12
34036: PUSH
34037: LD_INT 1
34039: ARRAY
34040: PPUSH
34041: CALL_OW 313
34045: PUSH
34046: LD_INT 3
34048: LESS
34049: IFFALSE 34085
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34051: LD_INT 0
34053: PPUSH
34054: LD_INT 5
34056: PUSH
34057: LD_INT 8
34059: PUSH
34060: LD_INT 9
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: PUSH
34068: LD_VAR 0 17
34072: ARRAY
34073: PPUSH
34074: LD_VAR 0 4
34078: PPUSH
34079: CALL_OW 380
34083: GO 34102
// PrepareHuman ( false , i , skill ) ;
34085: LD_INT 0
34087: PPUSH
34088: LD_VAR 0 8
34092: PPUSH
34093: LD_VAR 0 4
34097: PPUSH
34098: CALL_OW 380
// end else
34102: GO 34121
// PrepareHuman ( false , i , skill ) ;
34104: LD_INT 0
34106: PPUSH
34107: LD_VAR 0 8
34111: PPUSH
34112: LD_VAR 0 4
34116: PPUSH
34117: CALL_OW 380
// un := CreateHuman ;
34121: LD_ADDR_VAR 0 14
34125: PUSH
34126: CALL_OW 44
34130: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34131: LD_ADDR_VAR 0 7
34135: PUSH
34136: LD_VAR 0 7
34140: PPUSH
34141: LD_INT 1
34143: PPUSH
34144: LD_VAR 0 14
34148: PPUSH
34149: CALL_OW 2
34153: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34154: LD_VAR 0 14
34158: PPUSH
34159: LD_VAR 0 12
34163: PUSH
34164: LD_INT 1
34166: ARRAY
34167: PPUSH
34168: CALL_OW 52
// end ;
34172: GO 33811
34174: POP
34175: POP
// end ;
34176: GO 33113
34178: POP
34179: POP
// result := result ^ buildings ;
34180: LD_ADDR_VAR 0 7
34184: PUSH
34185: LD_VAR 0 7
34189: PUSH
34190: LD_VAR 0 18
34194: ADD
34195: ST_TO_ADDR
// end else
34196: GO 34339
// begin for i = 1 to personel do
34198: LD_ADDR_VAR 0 8
34202: PUSH
34203: DOUBLE
34204: LD_INT 1
34206: DEC
34207: ST_TO_ADDR
34208: LD_VAR 0 6
34212: PUSH
34213: FOR_TO
34214: IFFALSE 34337
// begin if i > 4 then
34216: LD_VAR 0 8
34220: PUSH
34221: LD_INT 4
34223: GREATER
34224: IFFALSE 34228
// break ;
34226: GO 34337
// x := personel [ i ] ;
34228: LD_ADDR_VAR 0 13
34232: PUSH
34233: LD_VAR 0 6
34237: PUSH
34238: LD_VAR 0 8
34242: ARRAY
34243: ST_TO_ADDR
// if x = - 1 then
34244: LD_VAR 0 13
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: EQUAL
34253: IFFALSE 34257
// continue ;
34255: GO 34213
// PrepareHuman ( false , i , skill ) ;
34257: LD_INT 0
34259: PPUSH
34260: LD_VAR 0 8
34264: PPUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: CALL_OW 380
// un := CreateHuman ;
34274: LD_ADDR_VAR 0 14
34278: PUSH
34279: CALL_OW 44
34283: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34284: LD_VAR 0 14
34288: PPUSH
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 250
34298: PPUSH
34299: LD_VAR 0 1
34303: PPUSH
34304: CALL_OW 251
34308: PPUSH
34309: LD_INT 10
34311: PPUSH
34312: LD_INT 0
34314: PPUSH
34315: CALL_OW 50
// result := result ^ un ;
34319: LD_ADDR_VAR 0 7
34323: PUSH
34324: LD_VAR 0 7
34328: PUSH
34329: LD_VAR 0 14
34333: ADD
34334: ST_TO_ADDR
// end ;
34335: GO 34213
34337: POP
34338: POP
// end ; end ;
34339: LD_VAR 0 7
34343: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34344: LD_INT 0
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
// result := false ;
34362: LD_ADDR_VAR 0 3
34366: PUSH
34367: LD_INT 0
34369: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34370: LD_VAR 0 1
34374: NOT
34375: PUSH
34376: LD_VAR 0 1
34380: PPUSH
34381: CALL_OW 266
34385: PUSH
34386: LD_INT 32
34388: PUSH
34389: LD_INT 33
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: IN
34396: NOT
34397: OR
34398: IFFALSE 34402
// exit ;
34400: GO 35511
// nat := GetNation ( tower ) ;
34402: LD_ADDR_VAR 0 12
34406: PUSH
34407: LD_VAR 0 1
34411: PPUSH
34412: CALL_OW 248
34416: ST_TO_ADDR
// side := GetSide ( tower ) ;
34417: LD_ADDR_VAR 0 16
34421: PUSH
34422: LD_VAR 0 1
34426: PPUSH
34427: CALL_OW 255
34431: ST_TO_ADDR
// x := GetX ( tower ) ;
34432: LD_ADDR_VAR 0 10
34436: PUSH
34437: LD_VAR 0 1
34441: PPUSH
34442: CALL_OW 250
34446: ST_TO_ADDR
// y := GetY ( tower ) ;
34447: LD_ADDR_VAR 0 11
34451: PUSH
34452: LD_VAR 0 1
34456: PPUSH
34457: CALL_OW 251
34461: ST_TO_ADDR
// if not x or not y then
34462: LD_VAR 0 10
34466: NOT
34467: PUSH
34468: LD_VAR 0 11
34472: NOT
34473: OR
34474: IFFALSE 34478
// exit ;
34476: GO 35511
// weapon := 0 ;
34478: LD_ADDR_VAR 0 18
34482: PUSH
34483: LD_INT 0
34485: ST_TO_ADDR
// fac_list := [ ] ;
34486: LD_ADDR_VAR 0 17
34490: PUSH
34491: EMPTY
34492: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34493: LD_ADDR_VAR 0 6
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 274
34507: PPUSH
34508: LD_VAR 0 2
34512: PPUSH
34513: LD_INT 0
34515: PPUSH
34516: CALL 32082 0 3
34520: PPUSH
34521: LD_INT 30
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PPUSH
34531: CALL_OW 72
34535: ST_TO_ADDR
// if not factories then
34536: LD_VAR 0 6
34540: NOT
34541: IFFALSE 34545
// exit ;
34543: GO 35511
// for i in factories do
34545: LD_ADDR_VAR 0 8
34549: PUSH
34550: LD_VAR 0 6
34554: PUSH
34555: FOR_IN
34556: IFFALSE 34581
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34558: LD_ADDR_VAR 0 17
34562: PUSH
34563: LD_VAR 0 17
34567: PUSH
34568: LD_VAR 0 8
34572: PPUSH
34573: CALL_OW 478
34577: UNION
34578: ST_TO_ADDR
34579: GO 34555
34581: POP
34582: POP
// if not fac_list then
34583: LD_VAR 0 17
34587: NOT
34588: IFFALSE 34592
// exit ;
34590: GO 35511
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34592: LD_ADDR_VAR 0 5
34596: PUSH
34597: LD_INT 4
34599: PUSH
34600: LD_INT 5
34602: PUSH
34603: LD_INT 9
34605: PUSH
34606: LD_INT 10
34608: PUSH
34609: LD_INT 6
34611: PUSH
34612: LD_INT 7
34614: PUSH
34615: LD_INT 11
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 27
34629: PUSH
34630: LD_INT 28
34632: PUSH
34633: LD_INT 26
34635: PUSH
34636: LD_INT 30
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 43
34647: PUSH
34648: LD_INT 44
34650: PUSH
34651: LD_INT 46
34653: PUSH
34654: LD_INT 45
34656: PUSH
34657: LD_INT 47
34659: PUSH
34660: LD_INT 49
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: PUSH
34676: LD_VAR 0 12
34680: ARRAY
34681: ST_TO_ADDR
// list := list isect fac_list ;
34682: LD_ADDR_VAR 0 5
34686: PUSH
34687: LD_VAR 0 5
34691: PUSH
34692: LD_VAR 0 17
34696: ISECT
34697: ST_TO_ADDR
// if not list then
34698: LD_VAR 0 5
34702: NOT
34703: IFFALSE 34707
// exit ;
34705: GO 35511
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34707: LD_VAR 0 12
34711: PUSH
34712: LD_INT 3
34714: EQUAL
34715: PUSH
34716: LD_INT 49
34718: PUSH
34719: LD_VAR 0 5
34723: IN
34724: AND
34725: PUSH
34726: LD_INT 31
34728: PPUSH
34729: LD_VAR 0 16
34733: PPUSH
34734: CALL_OW 321
34738: PUSH
34739: LD_INT 2
34741: EQUAL
34742: AND
34743: IFFALSE 34803
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34745: LD_INT 22
34747: PUSH
34748: LD_VAR 0 16
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 35
34759: PUSH
34760: LD_INT 49
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 91
34769: PUSH
34770: LD_VAR 0 1
34774: PUSH
34775: LD_INT 10
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: PPUSH
34788: CALL_OW 69
34792: NOT
34793: IFFALSE 34803
// weapon := ru_time_lapser ;
34795: LD_ADDR_VAR 0 18
34799: PUSH
34800: LD_INT 49
34802: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34803: LD_VAR 0 12
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: IN
34818: PUSH
34819: LD_INT 11
34821: PUSH
34822: LD_VAR 0 5
34826: IN
34827: PUSH
34828: LD_INT 30
34830: PUSH
34831: LD_VAR 0 5
34835: IN
34836: OR
34837: AND
34838: PUSH
34839: LD_INT 6
34841: PPUSH
34842: LD_VAR 0 16
34846: PPUSH
34847: CALL_OW 321
34851: PUSH
34852: LD_INT 2
34854: EQUAL
34855: AND
34856: IFFALSE 35021
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34858: LD_INT 22
34860: PUSH
34861: LD_VAR 0 16
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 2
34872: PUSH
34873: LD_INT 35
34875: PUSH
34876: LD_INT 11
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 35
34885: PUSH
34886: LD_INT 30
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 91
34900: PUSH
34901: LD_VAR 0 1
34905: PUSH
34906: LD_INT 18
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: PPUSH
34919: CALL_OW 69
34923: NOT
34924: PUSH
34925: LD_INT 22
34927: PUSH
34928: LD_VAR 0 16
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 30
34942: PUSH
34943: LD_INT 32
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 30
34952: PUSH
34953: LD_INT 33
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 91
34967: PUSH
34968: LD_VAR 0 1
34972: PUSH
34973: LD_INT 12
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: PUSH
34986: EMPTY
34987: LIST
34988: PPUSH
34989: CALL_OW 69
34993: PUSH
34994: LD_INT 2
34996: GREATER
34997: AND
34998: IFFALSE 35021
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35000: LD_ADDR_VAR 0 18
35004: PUSH
35005: LD_INT 11
35007: PUSH
35008: LD_INT 30
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_VAR 0 12
35019: ARRAY
35020: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35021: LD_VAR 0 18
35025: NOT
35026: PUSH
35027: LD_INT 40
35029: PPUSH
35030: LD_VAR 0 16
35034: PPUSH
35035: CALL_OW 321
35039: PUSH
35040: LD_INT 2
35042: EQUAL
35043: AND
35044: PUSH
35045: LD_INT 7
35047: PUSH
35048: LD_VAR 0 5
35052: IN
35053: PUSH
35054: LD_INT 28
35056: PUSH
35057: LD_VAR 0 5
35061: IN
35062: OR
35063: PUSH
35064: LD_INT 45
35066: PUSH
35067: LD_VAR 0 5
35071: IN
35072: OR
35073: AND
35074: IFFALSE 35328
// begin hex := GetHexInfo ( x , y ) ;
35076: LD_ADDR_VAR 0 4
35080: PUSH
35081: LD_VAR 0 10
35085: PPUSH
35086: LD_VAR 0 11
35090: PPUSH
35091: CALL_OW 546
35095: ST_TO_ADDR
// if hex [ 1 ] then
35096: LD_VAR 0 4
35100: PUSH
35101: LD_INT 1
35103: ARRAY
35104: IFFALSE 35108
// exit ;
35106: GO 35511
// height := hex [ 2 ] ;
35108: LD_ADDR_VAR 0 15
35112: PUSH
35113: LD_VAR 0 4
35117: PUSH
35118: LD_INT 2
35120: ARRAY
35121: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35122: LD_ADDR_VAR 0 14
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: LD_INT 3
35135: PUSH
35136: LD_INT 5
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: ST_TO_ADDR
// for i in tmp do
35145: LD_ADDR_VAR 0 8
35149: PUSH
35150: LD_VAR 0 14
35154: PUSH
35155: FOR_IN
35156: IFFALSE 35326
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35158: LD_ADDR_VAR 0 9
35162: PUSH
35163: LD_VAR 0 10
35167: PPUSH
35168: LD_VAR 0 8
35172: PPUSH
35173: LD_INT 5
35175: PPUSH
35176: CALL_OW 272
35180: PUSH
35181: LD_VAR 0 11
35185: PPUSH
35186: LD_VAR 0 8
35190: PPUSH
35191: LD_INT 5
35193: PPUSH
35194: CALL_OW 273
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35203: LD_VAR 0 9
35207: PUSH
35208: LD_INT 1
35210: ARRAY
35211: PPUSH
35212: LD_VAR 0 9
35216: PUSH
35217: LD_INT 2
35219: ARRAY
35220: PPUSH
35221: CALL_OW 488
35225: IFFALSE 35324
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35227: LD_ADDR_VAR 0 4
35231: PUSH
35232: LD_VAR 0 9
35236: PUSH
35237: LD_INT 1
35239: ARRAY
35240: PPUSH
35241: LD_VAR 0 9
35245: PUSH
35246: LD_INT 2
35248: ARRAY
35249: PPUSH
35250: CALL_OW 546
35254: ST_TO_ADDR
// if hex [ 1 ] then
35255: LD_VAR 0 4
35259: PUSH
35260: LD_INT 1
35262: ARRAY
35263: IFFALSE 35267
// continue ;
35265: GO 35155
// h := hex [ 2 ] ;
35267: LD_ADDR_VAR 0 13
35271: PUSH
35272: LD_VAR 0 4
35276: PUSH
35277: LD_INT 2
35279: ARRAY
35280: ST_TO_ADDR
// if h + 7 < height then
35281: LD_VAR 0 13
35285: PUSH
35286: LD_INT 7
35288: PLUS
35289: PUSH
35290: LD_VAR 0 15
35294: LESS
35295: IFFALSE 35324
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35297: LD_ADDR_VAR 0 18
35301: PUSH
35302: LD_INT 7
35304: PUSH
35305: LD_INT 28
35307: PUSH
35308: LD_INT 45
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: PUSH
35316: LD_VAR 0 12
35320: ARRAY
35321: ST_TO_ADDR
// break ;
35322: GO 35326
// end ; end ; end ;
35324: GO 35155
35326: POP
35327: POP
// end ; if not weapon then
35328: LD_VAR 0 18
35332: NOT
35333: IFFALSE 35393
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35335: LD_ADDR_VAR 0 5
35339: PUSH
35340: LD_VAR 0 5
35344: PUSH
35345: LD_INT 11
35347: PUSH
35348: LD_INT 30
35350: PUSH
35351: LD_INT 49
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: DIFF
35359: ST_TO_ADDR
// if not list then
35360: LD_VAR 0 5
35364: NOT
35365: IFFALSE 35369
// exit ;
35367: GO 35511
// weapon := list [ rand ( 1 , list ) ] ;
35369: LD_ADDR_VAR 0 18
35373: PUSH
35374: LD_VAR 0 5
35378: PUSH
35379: LD_INT 1
35381: PPUSH
35382: LD_VAR 0 5
35386: PPUSH
35387: CALL_OW 12
35391: ARRAY
35392: ST_TO_ADDR
// end ; if weapon then
35393: LD_VAR 0 18
35397: IFFALSE 35511
// begin tmp := CostOfWeapon ( weapon ) ;
35399: LD_ADDR_VAR 0 14
35403: PUSH
35404: LD_VAR 0 18
35408: PPUSH
35409: CALL_OW 451
35413: ST_TO_ADDR
// j := GetBase ( tower ) ;
35414: LD_ADDR_VAR 0 9
35418: PUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 274
35428: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35429: LD_VAR 0 9
35433: PPUSH
35434: LD_INT 1
35436: PPUSH
35437: CALL_OW 275
35441: PUSH
35442: LD_VAR 0 14
35446: PUSH
35447: LD_INT 1
35449: ARRAY
35450: GREATEREQUAL
35451: PUSH
35452: LD_VAR 0 9
35456: PPUSH
35457: LD_INT 2
35459: PPUSH
35460: CALL_OW 275
35464: PUSH
35465: LD_VAR 0 14
35469: PUSH
35470: LD_INT 2
35472: ARRAY
35473: GREATEREQUAL
35474: AND
35475: PUSH
35476: LD_VAR 0 9
35480: PPUSH
35481: LD_INT 3
35483: PPUSH
35484: CALL_OW 275
35488: PUSH
35489: LD_VAR 0 14
35493: PUSH
35494: LD_INT 3
35496: ARRAY
35497: GREATEREQUAL
35498: AND
35499: IFFALSE 35511
// result := weapon ;
35501: LD_ADDR_VAR 0 3
35505: PUSH
35506: LD_VAR 0 18
35510: ST_TO_ADDR
// end ; end ;
35511: LD_VAR 0 3
35515: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35516: LD_INT 0
35518: PPUSH
35519: PPUSH
// result := true ;
35520: LD_ADDR_VAR 0 3
35524: PUSH
35525: LD_INT 1
35527: ST_TO_ADDR
// if array1 = array2 then
35528: LD_VAR 0 1
35532: PUSH
35533: LD_VAR 0 2
35537: EQUAL
35538: IFFALSE 35598
// begin for i = 1 to array1 do
35540: LD_ADDR_VAR 0 4
35544: PUSH
35545: DOUBLE
35546: LD_INT 1
35548: DEC
35549: ST_TO_ADDR
35550: LD_VAR 0 1
35554: PUSH
35555: FOR_TO
35556: IFFALSE 35594
// if array1 [ i ] <> array2 [ i ] then
35558: LD_VAR 0 1
35562: PUSH
35563: LD_VAR 0 4
35567: ARRAY
35568: PUSH
35569: LD_VAR 0 2
35573: PUSH
35574: LD_VAR 0 4
35578: ARRAY
35579: NONEQUAL
35580: IFFALSE 35592
// begin result := false ;
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_INT 0
35589: ST_TO_ADDR
// break ;
35590: GO 35594
// end ;
35592: GO 35555
35594: POP
35595: POP
// end else
35596: GO 35606
// result := false ;
35598: LD_ADDR_VAR 0 3
35602: PUSH
35603: LD_INT 0
35605: ST_TO_ADDR
// end ;
35606: LD_VAR 0 3
35610: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35611: LD_INT 0
35613: PPUSH
35614: PPUSH
// if not array1 or not array2 then
35615: LD_VAR 0 1
35619: NOT
35620: PUSH
35621: LD_VAR 0 2
35625: NOT
35626: OR
35627: IFFALSE 35631
// exit ;
35629: GO 35695
// result := true ;
35631: LD_ADDR_VAR 0 3
35635: PUSH
35636: LD_INT 1
35638: ST_TO_ADDR
// for i = 1 to array1 do
35639: LD_ADDR_VAR 0 4
35643: PUSH
35644: DOUBLE
35645: LD_INT 1
35647: DEC
35648: ST_TO_ADDR
35649: LD_VAR 0 1
35653: PUSH
35654: FOR_TO
35655: IFFALSE 35693
// if array1 [ i ] <> array2 [ i ] then
35657: LD_VAR 0 1
35661: PUSH
35662: LD_VAR 0 4
35666: ARRAY
35667: PUSH
35668: LD_VAR 0 2
35672: PUSH
35673: LD_VAR 0 4
35677: ARRAY
35678: NONEQUAL
35679: IFFALSE 35691
// begin result := false ;
35681: LD_ADDR_VAR 0 3
35685: PUSH
35686: LD_INT 0
35688: ST_TO_ADDR
// break ;
35689: GO 35693
// end ;
35691: GO 35654
35693: POP
35694: POP
// end ;
35695: LD_VAR 0 3
35699: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
35704: PPUSH
// pom := GetBase ( fac ) ;
35705: LD_ADDR_VAR 0 5
35709: PUSH
35710: LD_VAR 0 1
35714: PPUSH
35715: CALL_OW 274
35719: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35720: LD_ADDR_VAR 0 4
35724: PUSH
35725: LD_VAR 0 2
35729: PUSH
35730: LD_INT 1
35732: ARRAY
35733: PPUSH
35734: LD_VAR 0 2
35738: PUSH
35739: LD_INT 2
35741: ARRAY
35742: PPUSH
35743: LD_VAR 0 2
35747: PUSH
35748: LD_INT 3
35750: ARRAY
35751: PPUSH
35752: LD_VAR 0 2
35756: PUSH
35757: LD_INT 4
35759: ARRAY
35760: PPUSH
35761: CALL_OW 449
35765: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35766: LD_ADDR_VAR 0 3
35770: PUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: LD_INT 1
35778: PPUSH
35779: CALL_OW 275
35783: PUSH
35784: LD_VAR 0 4
35788: PUSH
35789: LD_INT 1
35791: ARRAY
35792: GREATEREQUAL
35793: PUSH
35794: LD_VAR 0 5
35798: PPUSH
35799: LD_INT 2
35801: PPUSH
35802: CALL_OW 275
35806: PUSH
35807: LD_VAR 0 4
35811: PUSH
35812: LD_INT 2
35814: ARRAY
35815: GREATEREQUAL
35816: AND
35817: PUSH
35818: LD_VAR 0 5
35822: PPUSH
35823: LD_INT 3
35825: PPUSH
35826: CALL_OW 275
35830: PUSH
35831: LD_VAR 0 4
35835: PUSH
35836: LD_INT 3
35838: ARRAY
35839: GREATEREQUAL
35840: AND
35841: ST_TO_ADDR
// end ;
35842: LD_VAR 0 3
35846: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35847: LD_INT 0
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
// pom := GetBase ( building ) ;
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 274
35867: ST_TO_ADDR
// if not pom then
35868: LD_VAR 0 3
35872: NOT
35873: IFFALSE 35877
// exit ;
35875: GO 36047
// btype := GetBType ( building ) ;
35877: LD_ADDR_VAR 0 5
35881: PUSH
35882: LD_VAR 0 1
35886: PPUSH
35887: CALL_OW 266
35891: ST_TO_ADDR
// if btype = b_armoury then
35892: LD_VAR 0 5
35896: PUSH
35897: LD_INT 4
35899: EQUAL
35900: IFFALSE 35910
// btype := b_barracks ;
35902: LD_ADDR_VAR 0 5
35906: PUSH
35907: LD_INT 5
35909: ST_TO_ADDR
// if btype = b_depot then
35910: LD_VAR 0 5
35914: PUSH
35915: LD_INT 0
35917: EQUAL
35918: IFFALSE 35928
// btype := b_warehouse ;
35920: LD_ADDR_VAR 0 5
35924: PUSH
35925: LD_INT 1
35927: ST_TO_ADDR
// if btype = b_workshop then
35928: LD_VAR 0 5
35932: PUSH
35933: LD_INT 2
35935: EQUAL
35936: IFFALSE 35946
// btype := b_factory ;
35938: LD_ADDR_VAR 0 5
35942: PUSH
35943: LD_INT 3
35945: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35946: LD_ADDR_VAR 0 4
35950: PUSH
35951: LD_VAR 0 5
35955: PPUSH
35956: LD_VAR 0 1
35960: PPUSH
35961: CALL_OW 248
35965: PPUSH
35966: CALL_OW 450
35970: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35971: LD_ADDR_VAR 0 2
35975: PUSH
35976: LD_VAR 0 3
35980: PPUSH
35981: LD_INT 1
35983: PPUSH
35984: CALL_OW 275
35988: PUSH
35989: LD_VAR 0 4
35993: PUSH
35994: LD_INT 1
35996: ARRAY
35997: GREATEREQUAL
35998: PUSH
35999: LD_VAR 0 3
36003: PPUSH
36004: LD_INT 2
36006: PPUSH
36007: CALL_OW 275
36011: PUSH
36012: LD_VAR 0 4
36016: PUSH
36017: LD_INT 2
36019: ARRAY
36020: GREATEREQUAL
36021: AND
36022: PUSH
36023: LD_VAR 0 3
36027: PPUSH
36028: LD_INT 3
36030: PPUSH
36031: CALL_OW 275
36035: PUSH
36036: LD_VAR 0 4
36040: PUSH
36041: LD_INT 3
36043: ARRAY
36044: GREATEREQUAL
36045: AND
36046: ST_TO_ADDR
// end ;
36047: LD_VAR 0 2
36051: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36052: LD_INT 0
36054: PPUSH
36055: PPUSH
36056: PPUSH
// pom := GetBase ( building ) ;
36057: LD_ADDR_VAR 0 4
36061: PUSH
36062: LD_VAR 0 1
36066: PPUSH
36067: CALL_OW 274
36071: ST_TO_ADDR
// if not pom then
36072: LD_VAR 0 4
36076: NOT
36077: IFFALSE 36081
// exit ;
36079: GO 36182
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_VAR 0 2
36090: PPUSH
36091: LD_VAR 0 1
36095: PPUSH
36096: CALL_OW 248
36100: PPUSH
36101: CALL_OW 450
36105: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36106: LD_ADDR_VAR 0 3
36110: PUSH
36111: LD_VAR 0 4
36115: PPUSH
36116: LD_INT 1
36118: PPUSH
36119: CALL_OW 275
36123: PUSH
36124: LD_VAR 0 5
36128: PUSH
36129: LD_INT 1
36131: ARRAY
36132: GREATEREQUAL
36133: PUSH
36134: LD_VAR 0 4
36138: PPUSH
36139: LD_INT 2
36141: PPUSH
36142: CALL_OW 275
36146: PUSH
36147: LD_VAR 0 5
36151: PUSH
36152: LD_INT 2
36154: ARRAY
36155: GREATEREQUAL
36156: AND
36157: PUSH
36158: LD_VAR 0 4
36162: PPUSH
36163: LD_INT 3
36165: PPUSH
36166: CALL_OW 275
36170: PUSH
36171: LD_VAR 0 5
36175: PUSH
36176: LD_INT 3
36178: ARRAY
36179: GREATEREQUAL
36180: AND
36181: ST_TO_ADDR
// end ;
36182: LD_VAR 0 3
36186: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36187: LD_INT 0
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
// result := false ;
36200: LD_ADDR_VAR 0 8
36204: PUSH
36205: LD_INT 0
36207: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36208: LD_VAR 0 5
36212: NOT
36213: PUSH
36214: LD_VAR 0 1
36218: NOT
36219: OR
36220: PUSH
36221: LD_VAR 0 2
36225: NOT
36226: OR
36227: PUSH
36228: LD_VAR 0 3
36232: NOT
36233: OR
36234: IFFALSE 36238
// exit ;
36236: GO 37052
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36238: LD_ADDR_VAR 0 14
36242: PUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: LD_VAR 0 2
36252: PPUSH
36253: LD_VAR 0 3
36257: PPUSH
36258: LD_VAR 0 4
36262: PPUSH
36263: LD_VAR 0 5
36267: PUSH
36268: LD_INT 1
36270: ARRAY
36271: PPUSH
36272: CALL_OW 248
36276: PPUSH
36277: LD_INT 0
36279: PPUSH
36280: CALL 38285 0 6
36284: ST_TO_ADDR
// if not hexes then
36285: LD_VAR 0 14
36289: NOT
36290: IFFALSE 36294
// exit ;
36292: GO 37052
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36294: LD_ADDR_VAR 0 17
36298: PUSH
36299: LD_VAR 0 5
36303: PPUSH
36304: LD_INT 22
36306: PUSH
36307: LD_VAR 0 13
36311: PPUSH
36312: CALL_OW 255
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: PUSH
36324: LD_INT 30
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 30
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PPUSH
36353: CALL_OW 72
36357: ST_TO_ADDR
// for i = 1 to hexes do
36358: LD_ADDR_VAR 0 9
36362: PUSH
36363: DOUBLE
36364: LD_INT 1
36366: DEC
36367: ST_TO_ADDR
36368: LD_VAR 0 14
36372: PUSH
36373: FOR_TO
36374: IFFALSE 37050
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36376: LD_ADDR_VAR 0 13
36380: PUSH
36381: LD_VAR 0 14
36385: PUSH
36386: LD_VAR 0 9
36390: ARRAY
36391: PUSH
36392: LD_INT 1
36394: ARRAY
36395: PPUSH
36396: LD_VAR 0 14
36400: PUSH
36401: LD_VAR 0 9
36405: ARRAY
36406: PUSH
36407: LD_INT 2
36409: ARRAY
36410: PPUSH
36411: CALL_OW 428
36415: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36416: LD_VAR 0 14
36420: PUSH
36421: LD_VAR 0 9
36425: ARRAY
36426: PUSH
36427: LD_INT 1
36429: ARRAY
36430: PPUSH
36431: LD_VAR 0 14
36435: PUSH
36436: LD_VAR 0 9
36440: ARRAY
36441: PUSH
36442: LD_INT 2
36444: ARRAY
36445: PPUSH
36446: CALL_OW 351
36450: PUSH
36451: LD_VAR 0 14
36455: PUSH
36456: LD_VAR 0 9
36460: ARRAY
36461: PUSH
36462: LD_INT 1
36464: ARRAY
36465: PPUSH
36466: LD_VAR 0 14
36470: PUSH
36471: LD_VAR 0 9
36475: ARRAY
36476: PUSH
36477: LD_INT 2
36479: ARRAY
36480: PPUSH
36481: CALL_OW 488
36485: NOT
36486: OR
36487: PUSH
36488: LD_VAR 0 13
36492: PPUSH
36493: CALL_OW 247
36497: PUSH
36498: LD_INT 3
36500: EQUAL
36501: OR
36502: IFFALSE 36508
// exit ;
36504: POP
36505: POP
36506: GO 37052
// if not tmp then
36508: LD_VAR 0 13
36512: NOT
36513: IFFALSE 36517
// continue ;
36515: GO 36373
// result := true ;
36517: LD_ADDR_VAR 0 8
36521: PUSH
36522: LD_INT 1
36524: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36525: LD_VAR 0 6
36529: PUSH
36530: LD_VAR 0 13
36534: PPUSH
36535: CALL_OW 247
36539: PUSH
36540: LD_INT 2
36542: EQUAL
36543: AND
36544: PUSH
36545: LD_VAR 0 13
36549: PPUSH
36550: CALL_OW 263
36554: PUSH
36555: LD_INT 1
36557: EQUAL
36558: AND
36559: IFFALSE 36723
// begin if IsDrivenBy ( tmp ) then
36561: LD_VAR 0 13
36565: PPUSH
36566: CALL_OW 311
36570: IFFALSE 36574
// continue ;
36572: GO 36373
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36574: LD_VAR 0 6
36578: PPUSH
36579: LD_INT 3
36581: PUSH
36582: LD_INT 60
36584: PUSH
36585: EMPTY
36586: LIST
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 3
36594: PUSH
36595: LD_INT 55
36597: PUSH
36598: EMPTY
36599: LIST
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PPUSH
36609: CALL_OW 72
36613: IFFALSE 36721
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36615: LD_ADDR_VAR 0 18
36619: PUSH
36620: LD_VAR 0 6
36624: PPUSH
36625: LD_INT 3
36627: PUSH
36628: LD_INT 60
36630: PUSH
36631: EMPTY
36632: LIST
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 3
36640: PUSH
36641: LD_INT 55
36643: PUSH
36644: EMPTY
36645: LIST
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PPUSH
36655: CALL_OW 72
36659: PUSH
36660: LD_INT 1
36662: ARRAY
36663: ST_TO_ADDR
// if IsInUnit ( driver ) then
36664: LD_VAR 0 18
36668: PPUSH
36669: CALL_OW 310
36673: IFFALSE 36684
// ComExit ( driver ) ;
36675: LD_VAR 0 18
36679: PPUSH
36680: CALL 62065 0 1
// AddComEnterUnit ( driver , tmp ) ;
36684: LD_VAR 0 18
36688: PPUSH
36689: LD_VAR 0 13
36693: PPUSH
36694: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36698: LD_VAR 0 18
36702: PPUSH
36703: LD_VAR 0 7
36707: PPUSH
36708: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36712: LD_VAR 0 18
36716: PPUSH
36717: CALL_OW 181
// end ; continue ;
36721: GO 36373
// end ; if not cleaners or not tmp in cleaners then
36723: LD_VAR 0 6
36727: NOT
36728: PUSH
36729: LD_VAR 0 13
36733: PUSH
36734: LD_VAR 0 6
36738: IN
36739: NOT
36740: OR
36741: IFFALSE 37048
// begin if dep then
36743: LD_VAR 0 17
36747: IFFALSE 36883
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36749: LD_ADDR_VAR 0 16
36753: PUSH
36754: LD_VAR 0 17
36758: PUSH
36759: LD_INT 1
36761: ARRAY
36762: PPUSH
36763: CALL_OW 250
36767: PPUSH
36768: LD_VAR 0 17
36772: PUSH
36773: LD_INT 1
36775: ARRAY
36776: PPUSH
36777: CALL_OW 254
36781: PPUSH
36782: LD_INT 5
36784: PPUSH
36785: CALL_OW 272
36789: PUSH
36790: LD_VAR 0 17
36794: PUSH
36795: LD_INT 1
36797: ARRAY
36798: PPUSH
36799: CALL_OW 251
36803: PPUSH
36804: LD_VAR 0 17
36808: PUSH
36809: LD_INT 1
36811: ARRAY
36812: PPUSH
36813: CALL_OW 254
36817: PPUSH
36818: LD_INT 5
36820: PPUSH
36821: CALL_OW 273
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36830: LD_VAR 0 16
36834: PUSH
36835: LD_INT 1
36837: ARRAY
36838: PPUSH
36839: LD_VAR 0 16
36843: PUSH
36844: LD_INT 2
36846: ARRAY
36847: PPUSH
36848: CALL_OW 488
36852: IFFALSE 36883
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36854: LD_VAR 0 13
36858: PPUSH
36859: LD_VAR 0 16
36863: PUSH
36864: LD_INT 1
36866: ARRAY
36867: PPUSH
36868: LD_VAR 0 16
36872: PUSH
36873: LD_INT 2
36875: ARRAY
36876: PPUSH
36877: CALL_OW 111
// continue ;
36881: GO 36373
// end ; end ; r := GetDir ( tmp ) ;
36883: LD_ADDR_VAR 0 15
36887: PUSH
36888: LD_VAR 0 13
36892: PPUSH
36893: CALL_OW 254
36897: ST_TO_ADDR
// if r = 5 then
36898: LD_VAR 0 15
36902: PUSH
36903: LD_INT 5
36905: EQUAL
36906: IFFALSE 36916
// r := 0 ;
36908: LD_ADDR_VAR 0 15
36912: PUSH
36913: LD_INT 0
36915: ST_TO_ADDR
// for j = r to 5 do
36916: LD_ADDR_VAR 0 10
36920: PUSH
36921: DOUBLE
36922: LD_VAR 0 15
36926: DEC
36927: ST_TO_ADDR
36928: LD_INT 5
36930: PUSH
36931: FOR_TO
36932: IFFALSE 37046
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36934: LD_ADDR_VAR 0 11
36938: PUSH
36939: LD_VAR 0 13
36943: PPUSH
36944: CALL_OW 250
36948: PPUSH
36949: LD_VAR 0 10
36953: PPUSH
36954: LD_INT 2
36956: PPUSH
36957: CALL_OW 272
36961: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36962: LD_ADDR_VAR 0 12
36966: PUSH
36967: LD_VAR 0 13
36971: PPUSH
36972: CALL_OW 251
36976: PPUSH
36977: LD_VAR 0 10
36981: PPUSH
36982: LD_INT 2
36984: PPUSH
36985: CALL_OW 273
36989: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36990: LD_VAR 0 11
36994: PPUSH
36995: LD_VAR 0 12
36999: PPUSH
37000: CALL_OW 488
37004: PUSH
37005: LD_VAR 0 11
37009: PPUSH
37010: LD_VAR 0 12
37014: PPUSH
37015: CALL_OW 428
37019: NOT
37020: AND
37021: IFFALSE 37044
// begin ComMoveXY ( tmp , _x , _y ) ;
37023: LD_VAR 0 13
37027: PPUSH
37028: LD_VAR 0 11
37032: PPUSH
37033: LD_VAR 0 12
37037: PPUSH
37038: CALL_OW 111
// break ;
37042: GO 37046
// end ; end ;
37044: GO 36931
37046: POP
37047: POP
// end ; end ;
37048: GO 36373
37050: POP
37051: POP
// end ;
37052: LD_VAR 0 8
37056: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37057: LD_INT 0
37059: PPUSH
// result := true ;
37060: LD_ADDR_VAR 0 3
37064: PUSH
37065: LD_INT 1
37067: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37068: LD_VAR 0 2
37072: PUSH
37073: LD_INT 24
37075: DOUBLE
37076: EQUAL
37077: IFTRUE 37087
37079: LD_INT 33
37081: DOUBLE
37082: EQUAL
37083: IFTRUE 37087
37085: GO 37112
37087: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37088: LD_ADDR_VAR 0 3
37092: PUSH
37093: LD_INT 32
37095: PPUSH
37096: LD_VAR 0 1
37100: PPUSH
37101: CALL_OW 321
37105: PUSH
37106: LD_INT 2
37108: EQUAL
37109: ST_TO_ADDR
37110: GO 37428
37112: LD_INT 20
37114: DOUBLE
37115: EQUAL
37116: IFTRUE 37120
37118: GO 37145
37120: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37121: LD_ADDR_VAR 0 3
37125: PUSH
37126: LD_INT 6
37128: PPUSH
37129: LD_VAR 0 1
37133: PPUSH
37134: CALL_OW 321
37138: PUSH
37139: LD_INT 2
37141: EQUAL
37142: ST_TO_ADDR
37143: GO 37428
37145: LD_INT 22
37147: DOUBLE
37148: EQUAL
37149: IFTRUE 37159
37151: LD_INT 36
37153: DOUBLE
37154: EQUAL
37155: IFTRUE 37159
37157: GO 37184
37159: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37160: LD_ADDR_VAR 0 3
37164: PUSH
37165: LD_INT 15
37167: PPUSH
37168: LD_VAR 0 1
37172: PPUSH
37173: CALL_OW 321
37177: PUSH
37178: LD_INT 2
37180: EQUAL
37181: ST_TO_ADDR
37182: GO 37428
37184: LD_INT 30
37186: DOUBLE
37187: EQUAL
37188: IFTRUE 37192
37190: GO 37217
37192: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37193: LD_ADDR_VAR 0 3
37197: PUSH
37198: LD_INT 20
37200: PPUSH
37201: LD_VAR 0 1
37205: PPUSH
37206: CALL_OW 321
37210: PUSH
37211: LD_INT 2
37213: EQUAL
37214: ST_TO_ADDR
37215: GO 37428
37217: LD_INT 28
37219: DOUBLE
37220: EQUAL
37221: IFTRUE 37231
37223: LD_INT 21
37225: DOUBLE
37226: EQUAL
37227: IFTRUE 37231
37229: GO 37256
37231: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37232: LD_ADDR_VAR 0 3
37236: PUSH
37237: LD_INT 21
37239: PPUSH
37240: LD_VAR 0 1
37244: PPUSH
37245: CALL_OW 321
37249: PUSH
37250: LD_INT 2
37252: EQUAL
37253: ST_TO_ADDR
37254: GO 37428
37256: LD_INT 16
37258: DOUBLE
37259: EQUAL
37260: IFTRUE 37264
37262: GO 37289
37264: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37265: LD_ADDR_VAR 0 3
37269: PUSH
37270: LD_INT 84
37272: PPUSH
37273: LD_VAR 0 1
37277: PPUSH
37278: CALL_OW 321
37282: PUSH
37283: LD_INT 2
37285: EQUAL
37286: ST_TO_ADDR
37287: GO 37428
37289: LD_INT 19
37291: DOUBLE
37292: EQUAL
37293: IFTRUE 37303
37295: LD_INT 23
37297: DOUBLE
37298: EQUAL
37299: IFTRUE 37303
37301: GO 37328
37303: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37304: LD_ADDR_VAR 0 3
37308: PUSH
37309: LD_INT 83
37311: PPUSH
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 321
37321: PUSH
37322: LD_INT 2
37324: EQUAL
37325: ST_TO_ADDR
37326: GO 37428
37328: LD_INT 17
37330: DOUBLE
37331: EQUAL
37332: IFTRUE 37336
37334: GO 37361
37336: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37337: LD_ADDR_VAR 0 3
37341: PUSH
37342: LD_INT 39
37344: PPUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 321
37354: PUSH
37355: LD_INT 2
37357: EQUAL
37358: ST_TO_ADDR
37359: GO 37428
37361: LD_INT 18
37363: DOUBLE
37364: EQUAL
37365: IFTRUE 37369
37367: GO 37394
37369: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37370: LD_ADDR_VAR 0 3
37374: PUSH
37375: LD_INT 40
37377: PPUSH
37378: LD_VAR 0 1
37382: PPUSH
37383: CALL_OW 321
37387: PUSH
37388: LD_INT 2
37390: EQUAL
37391: ST_TO_ADDR
37392: GO 37428
37394: LD_INT 27
37396: DOUBLE
37397: EQUAL
37398: IFTRUE 37402
37400: GO 37427
37402: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37403: LD_ADDR_VAR 0 3
37407: PUSH
37408: LD_INT 35
37410: PPUSH
37411: LD_VAR 0 1
37415: PPUSH
37416: CALL_OW 321
37420: PUSH
37421: LD_INT 2
37423: EQUAL
37424: ST_TO_ADDR
37425: GO 37428
37427: POP
// end ;
37428: LD_VAR 0 3
37432: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37433: LD_INT 0
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
// result := false ;
37446: LD_ADDR_VAR 0 6
37450: PUSH
37451: LD_INT 0
37453: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37454: LD_VAR 0 1
37458: NOT
37459: PUSH
37460: LD_VAR 0 1
37464: PPUSH
37465: CALL_OW 266
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: IN
37480: NOT
37481: OR
37482: PUSH
37483: LD_VAR 0 2
37487: NOT
37488: OR
37489: PUSH
37490: LD_VAR 0 5
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: LD_INT 3
37506: PUSH
37507: LD_INT 4
37509: PUSH
37510: LD_INT 5
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: IN
37521: NOT
37522: OR
37523: PUSH
37524: LD_VAR 0 3
37528: PPUSH
37529: LD_VAR 0 4
37533: PPUSH
37534: CALL_OW 488
37538: NOT
37539: OR
37540: IFFALSE 37544
// exit ;
37542: GO 38280
// side := GetSide ( depot ) ;
37544: LD_ADDR_VAR 0 9
37548: PUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 255
37558: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37559: LD_VAR 0 9
37563: PPUSH
37564: LD_VAR 0 2
37568: PPUSH
37569: CALL 37057 0 2
37573: NOT
37574: IFFALSE 37578
// exit ;
37576: GO 38280
// pom := GetBase ( depot ) ;
37578: LD_ADDR_VAR 0 10
37582: PUSH
37583: LD_VAR 0 1
37587: PPUSH
37588: CALL_OW 274
37592: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37593: LD_ADDR_VAR 0 11
37597: PUSH
37598: LD_VAR 0 2
37602: PPUSH
37603: LD_VAR 0 1
37607: PPUSH
37608: CALL_OW 248
37612: PPUSH
37613: CALL_OW 450
37617: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37618: LD_VAR 0 10
37622: PPUSH
37623: LD_INT 1
37625: PPUSH
37626: CALL_OW 275
37630: PUSH
37631: LD_VAR 0 11
37635: PUSH
37636: LD_INT 1
37638: ARRAY
37639: GREATEREQUAL
37640: PUSH
37641: LD_VAR 0 10
37645: PPUSH
37646: LD_INT 2
37648: PPUSH
37649: CALL_OW 275
37653: PUSH
37654: LD_VAR 0 11
37658: PUSH
37659: LD_INT 2
37661: ARRAY
37662: GREATEREQUAL
37663: AND
37664: PUSH
37665: LD_VAR 0 10
37669: PPUSH
37670: LD_INT 3
37672: PPUSH
37673: CALL_OW 275
37677: PUSH
37678: LD_VAR 0 11
37682: PUSH
37683: LD_INT 3
37685: ARRAY
37686: GREATEREQUAL
37687: AND
37688: NOT
37689: IFFALSE 37693
// exit ;
37691: GO 38280
// if GetBType ( depot ) = b_depot then
37693: LD_VAR 0 1
37697: PPUSH
37698: CALL_OW 266
37702: PUSH
37703: LD_INT 0
37705: EQUAL
37706: IFFALSE 37718
// dist := 28 else
37708: LD_ADDR_VAR 0 14
37712: PUSH
37713: LD_INT 28
37715: ST_TO_ADDR
37716: GO 37726
// dist := 36 ;
37718: LD_ADDR_VAR 0 14
37722: PUSH
37723: LD_INT 36
37725: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37726: LD_VAR 0 1
37730: PPUSH
37731: LD_VAR 0 3
37735: PPUSH
37736: LD_VAR 0 4
37740: PPUSH
37741: CALL_OW 297
37745: PUSH
37746: LD_VAR 0 14
37750: GREATER
37751: IFFALSE 37755
// exit ;
37753: GO 38280
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37755: LD_ADDR_VAR 0 12
37759: PUSH
37760: LD_VAR 0 2
37764: PPUSH
37765: LD_VAR 0 3
37769: PPUSH
37770: LD_VAR 0 4
37774: PPUSH
37775: LD_VAR 0 5
37779: PPUSH
37780: LD_VAR 0 1
37784: PPUSH
37785: CALL_OW 248
37789: PPUSH
37790: LD_INT 0
37792: PPUSH
37793: CALL 38285 0 6
37797: ST_TO_ADDR
// if not hexes then
37798: LD_VAR 0 12
37802: NOT
37803: IFFALSE 37807
// exit ;
37805: GO 38280
// hex := GetHexInfo ( x , y ) ;
37807: LD_ADDR_VAR 0 15
37811: PUSH
37812: LD_VAR 0 3
37816: PPUSH
37817: LD_VAR 0 4
37821: PPUSH
37822: CALL_OW 546
37826: ST_TO_ADDR
// if hex [ 1 ] then
37827: LD_VAR 0 15
37831: PUSH
37832: LD_INT 1
37834: ARRAY
37835: IFFALSE 37839
// exit ;
37837: GO 38280
// height := hex [ 2 ] ;
37839: LD_ADDR_VAR 0 13
37843: PUSH
37844: LD_VAR 0 15
37848: PUSH
37849: LD_INT 2
37851: ARRAY
37852: ST_TO_ADDR
// for i = 1 to hexes do
37853: LD_ADDR_VAR 0 7
37857: PUSH
37858: DOUBLE
37859: LD_INT 1
37861: DEC
37862: ST_TO_ADDR
37863: LD_VAR 0 12
37867: PUSH
37868: FOR_TO
37869: IFFALSE 38199
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37871: LD_VAR 0 12
37875: PUSH
37876: LD_VAR 0 7
37880: ARRAY
37881: PUSH
37882: LD_INT 1
37884: ARRAY
37885: PPUSH
37886: LD_VAR 0 12
37890: PUSH
37891: LD_VAR 0 7
37895: ARRAY
37896: PUSH
37897: LD_INT 2
37899: ARRAY
37900: PPUSH
37901: CALL_OW 488
37905: NOT
37906: PUSH
37907: LD_VAR 0 12
37911: PUSH
37912: LD_VAR 0 7
37916: ARRAY
37917: PUSH
37918: LD_INT 1
37920: ARRAY
37921: PPUSH
37922: LD_VAR 0 12
37926: PUSH
37927: LD_VAR 0 7
37931: ARRAY
37932: PUSH
37933: LD_INT 2
37935: ARRAY
37936: PPUSH
37937: CALL_OW 428
37941: PUSH
37942: LD_INT 0
37944: GREATER
37945: OR
37946: PUSH
37947: LD_VAR 0 12
37951: PUSH
37952: LD_VAR 0 7
37956: ARRAY
37957: PUSH
37958: LD_INT 1
37960: ARRAY
37961: PPUSH
37962: LD_VAR 0 12
37966: PUSH
37967: LD_VAR 0 7
37971: ARRAY
37972: PUSH
37973: LD_INT 2
37975: ARRAY
37976: PPUSH
37977: CALL_OW 351
37981: OR
37982: IFFALSE 37988
// exit ;
37984: POP
37985: POP
37986: GO 38280
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37988: LD_ADDR_VAR 0 8
37992: PUSH
37993: LD_VAR 0 12
37997: PUSH
37998: LD_VAR 0 7
38002: ARRAY
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PPUSH
38008: LD_VAR 0 12
38012: PUSH
38013: LD_VAR 0 7
38017: ARRAY
38018: PUSH
38019: LD_INT 2
38021: ARRAY
38022: PPUSH
38023: CALL_OW 546
38027: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38028: LD_VAR 0 8
38032: PUSH
38033: LD_INT 1
38035: ARRAY
38036: PUSH
38037: LD_VAR 0 8
38041: PUSH
38042: LD_INT 2
38044: ARRAY
38045: PUSH
38046: LD_VAR 0 13
38050: PUSH
38051: LD_INT 2
38053: PLUS
38054: GREATER
38055: OR
38056: PUSH
38057: LD_VAR 0 8
38061: PUSH
38062: LD_INT 2
38064: ARRAY
38065: PUSH
38066: LD_VAR 0 13
38070: PUSH
38071: LD_INT 2
38073: MINUS
38074: LESS
38075: OR
38076: PUSH
38077: LD_VAR 0 8
38081: PUSH
38082: LD_INT 3
38084: ARRAY
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: LD_INT 8
38091: PUSH
38092: LD_INT 9
38094: PUSH
38095: LD_INT 10
38097: PUSH
38098: LD_INT 11
38100: PUSH
38101: LD_INT 12
38103: PUSH
38104: LD_INT 13
38106: PUSH
38107: LD_INT 16
38109: PUSH
38110: LD_INT 17
38112: PUSH
38113: LD_INT 18
38115: PUSH
38116: LD_INT 19
38118: PUSH
38119: LD_INT 20
38121: PUSH
38122: LD_INT 21
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: IN
38140: NOT
38141: OR
38142: PUSH
38143: LD_VAR 0 8
38147: PUSH
38148: LD_INT 5
38150: ARRAY
38151: NOT
38152: OR
38153: PUSH
38154: LD_VAR 0 8
38158: PUSH
38159: LD_INT 6
38161: ARRAY
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: LD_INT 7
38171: PUSH
38172: LD_INT 9
38174: PUSH
38175: LD_INT 10
38177: PUSH
38178: LD_INT 11
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: IN
38189: NOT
38190: OR
38191: IFFALSE 38197
// exit ;
38193: POP
38194: POP
38195: GO 38280
// end ;
38197: GO 37868
38199: POP
38200: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38201: LD_VAR 0 9
38205: PPUSH
38206: LD_VAR 0 3
38210: PPUSH
38211: LD_VAR 0 4
38215: PPUSH
38216: LD_INT 20
38218: PPUSH
38219: CALL 30232 0 4
38223: PUSH
38224: LD_INT 4
38226: ARRAY
38227: IFFALSE 38231
// exit ;
38229: GO 38280
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38231: LD_VAR 0 2
38235: PUSH
38236: LD_INT 29
38238: PUSH
38239: LD_INT 30
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: IN
38246: PUSH
38247: LD_VAR 0 3
38251: PPUSH
38252: LD_VAR 0 4
38256: PPUSH
38257: LD_VAR 0 9
38261: PPUSH
38262: CALL_OW 440
38266: NOT
38267: AND
38268: IFFALSE 38272
// exit ;
38270: GO 38280
// result := true ;
38272: LD_ADDR_VAR 0 6
38276: PUSH
38277: LD_INT 1
38279: ST_TO_ADDR
// end ;
38280: LD_VAR 0 6
38284: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38285: LD_INT 0
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
38294: PPUSH
38295: PPUSH
38296: PPUSH
38297: PPUSH
38298: PPUSH
38299: PPUSH
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
// result = [ ] ;
38345: LD_ADDR_VAR 0 7
38349: PUSH
38350: EMPTY
38351: ST_TO_ADDR
// temp_list = [ ] ;
38352: LD_ADDR_VAR 0 9
38356: PUSH
38357: EMPTY
38358: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38359: LD_VAR 0 4
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: LD_INT 4
38378: PUSH
38379: LD_INT 5
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: IN
38390: NOT
38391: PUSH
38392: LD_VAR 0 1
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: IN
38407: PUSH
38408: LD_VAR 0 5
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: IN
38427: NOT
38428: AND
38429: OR
38430: IFFALSE 38434
// exit ;
38432: GO 56825
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38434: LD_VAR 0 1
38438: PUSH
38439: LD_INT 6
38441: PUSH
38442: LD_INT 7
38444: PUSH
38445: LD_INT 8
38447: PUSH
38448: LD_INT 13
38450: PUSH
38451: LD_INT 12
38453: PUSH
38454: LD_INT 15
38456: PUSH
38457: LD_INT 11
38459: PUSH
38460: LD_INT 14
38462: PUSH
38463: LD_INT 10
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: IN
38477: IFFALSE 38487
// btype = b_lab ;
38479: LD_ADDR_VAR 0 1
38483: PUSH
38484: LD_INT 6
38486: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38487: LD_VAR 0 6
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: IN
38506: NOT
38507: PUSH
38508: LD_VAR 0 1
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: LD_INT 6
38527: PUSH
38528: LD_INT 36
38530: PUSH
38531: LD_INT 4
38533: PUSH
38534: LD_INT 5
38536: PUSH
38537: LD_INT 31
38539: PUSH
38540: LD_INT 32
38542: PUSH
38543: LD_INT 33
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: IN
38559: NOT
38560: PUSH
38561: LD_VAR 0 6
38565: PUSH
38566: LD_INT 1
38568: EQUAL
38569: AND
38570: OR
38571: PUSH
38572: LD_VAR 0 1
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: LD_INT 3
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: IN
38587: NOT
38588: PUSH
38589: LD_VAR 0 6
38593: PUSH
38594: LD_INT 2
38596: EQUAL
38597: AND
38598: OR
38599: IFFALSE 38609
// mode = 0 ;
38601: LD_ADDR_VAR 0 6
38605: PUSH
38606: LD_INT 0
38608: ST_TO_ADDR
// case mode of 0 :
38609: LD_VAR 0 6
38613: PUSH
38614: LD_INT 0
38616: DOUBLE
38617: EQUAL
38618: IFTRUE 38622
38620: GO 50075
38622: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38623: LD_ADDR_VAR 0 11
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 3
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 2
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38816: LD_ADDR_VAR 0 12
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 3
38973: NEG
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 3
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39012: LD_ADDR_VAR 0 13
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: LD_INT 2
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: LD_INT 3
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39211: LD_ADDR_VAR 0 14
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 2
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: LD_INT 3
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 3
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39407: LD_ADDR_VAR 0 15
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 3
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39600: LD_ADDR_VAR 0 16
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 3
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 3
39757: PUSH
39758: LD_INT 3
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39793: LD_ADDR_VAR 0 17
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 2
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 2
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40023: LD_ADDR_VAR 0 18
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40253: LD_ADDR_VAR 0 19
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40483: LD_ADDR_VAR 0 20
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 2
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40713: LD_ADDR_VAR 0 21
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40943: LD_ADDR_VAR 0 22
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41173: LD_ADDR_VAR 0 23
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 2
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: NEG
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41453: LD_ADDR_VAR 0 24
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 3
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41729: LD_ADDR_VAR 0 25
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 3
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 3
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 3
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 3
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42003: LD_ADDR_VAR 0 26
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42279: LD_ADDR_VAR 0 27
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 3
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42559: LD_ADDR_VAR 0 28
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: LD_INT 3
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: LD_INT 3
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 3
42794: NEG
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 3
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42841: LD_ADDR_VAR 0 29
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 3
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 3
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 3
43085: NEG
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43120: LD_ADDR_VAR 0 30
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 3
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 3
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43398: LD_ADDR_VAR 0 31
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: LD_INT 1
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 2
43575: NEG
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 3
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 3
43641: NEG
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43676: LD_ADDR_VAR 0 32
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 3
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43954: LD_ADDR_VAR 0 33
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: LD_INT 3
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 3
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44233: LD_ADDR_VAR 0 34
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 3
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 3
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 3
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 3
44478: NEG
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44513: LD_ADDR_VAR 0 35
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44625: LD_ADDR_VAR 0 36
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44737: LD_ADDR_VAR 0 37
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44849: LD_ADDR_VAR 0 38
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44961: LD_ADDR_VAR 0 39
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45073: LD_ADDR_VAR 0 40
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45185: LD_ADDR_VAR 0 41
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: LD_INT 3
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 3
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 3
45428: PUSH
45429: LD_INT 3
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 3
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: NEG
45495: PUSH
45496: LD_INT 3
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45535: LD_ADDR_VAR 0 42
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 3
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 3
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 3
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 3
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: NEG
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 3
45844: NEG
45845: PUSH
45846: LD_INT 3
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45885: LD_ADDR_VAR 0 43
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 3
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 3
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 3
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46233: LD_ADDR_VAR 0 44
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 3
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 3
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 3
46507: NEG
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 3
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 3
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46583: LD_ADDR_VAR 0 45
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 3
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 3
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 3
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 3
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 3
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 3
46892: NEG
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46933: LD_ADDR_VAR 0 46
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 3
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 3
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 3
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 3
47240: NEG
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47281: LD_ADDR_VAR 0 47
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47432: LD_ADDR_VAR 0 48
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47579: LD_ADDR_VAR 0 49
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47723: LD_ADDR_VAR 0 50
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47867: LD_ADDR_VAR 0 51
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48014: LD_ADDR_VAR 0 52
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48165: LD_ADDR_VAR 0 53
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48395: LD_ADDR_VAR 0 54
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48625: LD_ADDR_VAR 0 55
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48855: LD_ADDR_VAR 0 56
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49085: LD_ADDR_VAR 0 57
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49315: LD_ADDR_VAR 0 58
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49545: LD_ADDR_VAR 0 59
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49633: LD_ADDR_VAR 0 60
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49721: LD_ADDR_VAR 0 61
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49809: LD_ADDR_VAR 0 62
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49897: LD_ADDR_VAR 0 63
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49985: LD_ADDR_VAR 0 64
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: ST_TO_ADDR
// end ; 1 :
50073: GO 55970
50075: LD_INT 1
50077: DOUBLE
50078: EQUAL
50079: IFTRUE 50083
50081: GO 52706
50083: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50084: LD_ADDR_VAR 0 11
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 3
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 3
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50128: LD_ADDR_VAR 0 12
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50169: LD_ADDR_VAR 0 13
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 3
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50209: LD_ADDR_VAR 0 14
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50250: LD_ADDR_VAR 0 15
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: NEG
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 3
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50294: LD_ADDR_VAR 0 16
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: LD_INT 3
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: LD_INT 3
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50340: LD_ADDR_VAR 0 17
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 3
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50384: LD_ADDR_VAR 0 18
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50425: LD_ADDR_VAR 0 19
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50465: LD_ADDR_VAR 0 20
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50506: LD_ADDR_VAR 0 21
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: LIST
50549: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50550: LD_ADDR_VAR 0 22
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 3
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: LIST
50595: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50596: LD_ADDR_VAR 0 23
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 3
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 4
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 3
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50640: LD_ADDR_VAR 0 24
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 4
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50681: LD_ADDR_VAR 0 25
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 4
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: LD_INT 4
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: LIST
50720: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50721: LD_ADDR_VAR 0 26
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 4
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50762: LD_ADDR_VAR 0 27
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 4
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50806: LD_ADDR_VAR 0 28
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: LD_INT 3
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 4
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 4
50837: NEG
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50852: LD_ADDR_VAR 0 29
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 3
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 4
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 4
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 3
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: LD_INT 5
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 5
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 4
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 6
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 6
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 5
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51007: LD_ADDR_VAR 0 30
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 4
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 4
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 4
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 5
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 5
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 5
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 6
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 6
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51150: LD_ADDR_VAR 0 31
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 4
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 4
51197: PUSH
51198: LD_INT 4
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: LD_INT 4
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 5
51217: PUSH
51218: LD_INT 4
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: LD_INT 5
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 4
51237: PUSH
51238: LD_INT 5
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 6
51247: PUSH
51248: LD_INT 5
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 6
51257: PUSH
51258: LD_INT 6
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 5
51267: PUSH
51268: LD_INT 6
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51289: LD_ADDR_VAR 0 32
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 4
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 5
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 5
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 4
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 6
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 6
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 5
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51432: LD_ADDR_VAR 0 33
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 4
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 4
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 4
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 5
51518: NEG
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 5
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 5
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 6
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 6
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51587: LD_ADDR_VAR 0 34
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: LD_INT 3
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: LD_INT 4
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 4
51654: NEG
51655: PUSH
51656: LD_INT 4
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 4
51666: NEG
51667: PUSH
51668: LD_INT 5
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 5
51678: NEG
51679: PUSH
51680: LD_INT 4
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 5
51690: NEG
51691: PUSH
51692: LD_INT 5
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 5
51702: NEG
51703: PUSH
51704: LD_INT 6
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 6
51714: NEG
51715: PUSH
51716: LD_INT 5
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 6
51726: NEG
51727: PUSH
51728: LD_INT 6
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51750: LD_ADDR_VAR 0 41
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 3
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51794: LD_ADDR_VAR 0 42
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51835: LD_ADDR_VAR 0 43
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51875: LD_ADDR_VAR 0 44
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 3
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51916: LD_ADDR_VAR 0 45
51920: PUSH
51921: LD_INT 2
51923: NEG
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51960: LD_ADDR_VAR 0 46
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 3
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52006: LD_ADDR_VAR 0 47
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52039: LD_ADDR_VAR 0 48
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52070: LD_ADDR_VAR 0 49
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52099: LD_ADDR_VAR 0 50
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52128: LD_ADDR_VAR 0 51
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52159: LD_ADDR_VAR 0 52
52163: PUSH
52164: LD_INT 3
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52192: LD_ADDR_VAR 0 53
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 3
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52236: LD_ADDR_VAR 0 54
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52277: LD_ADDR_VAR 0 55
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52317: LD_ADDR_VAR 0 56
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 3
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52358: LD_ADDR_VAR 0 57
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: NEG
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52402: LD_ADDR_VAR 0 58
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52448: LD_ADDR_VAR 0 59
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52492: LD_ADDR_VAR 0 60
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52533: LD_ADDR_VAR 0 61
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52573: LD_ADDR_VAR 0 62
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 2
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52614: LD_ADDR_VAR 0 63
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: LIST
52657: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52658: LD_ADDR_VAR 0 64
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: ST_TO_ADDR
// end ; 2 :
52704: GO 55970
52706: LD_INT 2
52708: DOUBLE
52709: EQUAL
52710: IFTRUE 52714
52712: GO 55969
52714: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52715: LD_ADDR_VAR 0 29
52719: PUSH
52720: LD_INT 4
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 4
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 5
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 5
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 4
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 3
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 5
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 4
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 4
52845: PUSH
52846: LD_INT 4
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: LD_INT 4
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 3
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 4
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 4
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 4
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 4
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 5
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 5
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: LD_INT 4
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 5
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 3
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 4
53054: NEG
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 4
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 4
53077: NEG
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 4
53100: NEG
53101: PUSH
53102: LD_INT 4
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 4
53112: NEG
53113: PUSH
53114: LD_INT 5
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: NEG
53125: PUSH
53126: LD_INT 4
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 4
53148: NEG
53149: PUSH
53150: LD_INT 3
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 5
53160: NEG
53161: PUSH
53162: LD_INT 4
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 5
53172: NEG
53173: PUSH
53174: LD_INT 5
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: LD_INT 5
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 5
53196: NEG
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53253: LD_ADDR_VAR 0 30
53257: PUSH
53258: LD_INT 4
53260: PUSH
53261: LD_INT 4
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 4
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 5
53280: PUSH
53281: LD_INT 4
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 5
53290: PUSH
53291: LD_INT 5
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 4
53300: PUSH
53301: LD_INT 5
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: LD_INT 4
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 5
53330: PUSH
53331: LD_INT 3
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: PUSH
53341: LD_INT 5
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 4
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 4
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 4
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 4
53443: NEG
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 4
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: NEG
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 4
53488: NEG
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 5
53499: NEG
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 5
53510: NEG
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 5
53522: NEG
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: NEG
53546: PUSH
53547: LD_INT 3
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 3
53557: NEG
53558: PUSH
53559: LD_INT 4
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: LD_INT 2
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 4
53605: NEG
53606: PUSH
53607: LD_INT 3
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 4
53617: NEG
53618: PUSH
53619: LD_INT 4
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: LD_INT 4
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 4
53641: NEG
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 5
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: LD_INT 4
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 3
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 3
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 5
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 3
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: LD_INT 5
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53800: LD_ADDR_VAR 0 31
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 4
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 5
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 5
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 4
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 5
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 3
53900: NEG
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 4
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 4
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 4
53979: NEG
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 4
54002: NEG
54003: PUSH
54004: LD_INT 4
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 4
54014: NEG
54015: PUSH
54016: LD_INT 5
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: LD_INT 4
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 4
54050: NEG
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 5
54062: NEG
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 5
54074: NEG
54075: PUSH
54076: LD_INT 5
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: NEG
54087: PUSH
54088: LD_INT 5
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 5
54098: NEG
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 4
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 4
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 4
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 4
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 4
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 5
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 5
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 4
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 3
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 5
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54350: LD_ADDR_VAR 0 32
54354: PUSH
54355: LD_INT 4
54357: NEG
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 4
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 3
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 4
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 5
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 5
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 5
54436: NEG
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: LD_INT 3
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: LD_INT 4
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 4
54519: NEG
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 4
54531: NEG
54532: PUSH
54533: LD_INT 4
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 4
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 4
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 5
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 4
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 5
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 5
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 4
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 4
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 3
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 4
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 4
54762: PUSH
54763: LD_INT 4
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 4
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 5
54782: PUSH
54783: LD_INT 4
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 5
54792: PUSH
54793: LD_INT 5
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 4
54802: PUSH
54803: LD_INT 5
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 3
54812: PUSH
54813: LD_INT 4
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 5
54832: PUSH
54833: LD_INT 3
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: LD_INT 5
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54897: LD_ADDR_VAR 0 33
54901: PUSH
54902: LD_INT 4
54904: NEG
54905: PUSH
54906: LD_INT 4
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 4
54916: NEG
54917: PUSH
54918: LD_INT 5
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: LD_INT 4
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 4
54952: NEG
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 5
54964: NEG
54965: PUSH
54966: LD_INT 4
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 5
54976: NEG
54977: PUSH
54978: LD_INT 5
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 5
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 5
55000: NEG
55001: PUSH
55002: LD_INT 3
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 3
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 4
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 3
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 4
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 4
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 4
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 4
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 5
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 5
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 4
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 3
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 3
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 4
55227: PUSH
55228: LD_INT 3
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 4
55237: PUSH
55238: LD_INT 4
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: LD_INT 4
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 4
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: LD_INT 4
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 5
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 5
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 4
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 5
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55435: LD_ADDR_VAR 0 34
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 4
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 5
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 4
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 4
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 5
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 3
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: LD_INT 5
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 4
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 4
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 4
55637: PUSH
55638: LD_INT 4
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 4
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 5
55657: PUSH
55658: LD_INT 4
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 5
55667: PUSH
55668: LD_INT 5
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 4
55677: PUSH
55678: LD_INT 5
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: LD_INT 4
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 3
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 5
55707: PUSH
55708: LD_INT 3
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: LD_INT 5
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 4
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 4
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 4
55820: NEG
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 4
55831: NEG
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: NEG
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 4
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 5
55876: NEG
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 5
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 5
55899: NEG
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: ST_TO_ADDR
// end ; end ;
55967: GO 55970
55969: POP
// case btype of b_depot , b_warehouse :
55970: LD_VAR 0 1
55974: PUSH
55975: LD_INT 0
55977: DOUBLE
55978: EQUAL
55979: IFTRUE 55989
55981: LD_INT 1
55983: DOUBLE
55984: EQUAL
55985: IFTRUE 55989
55987: GO 56190
55989: POP
// case nation of nation_american :
55990: LD_VAR 0 5
55994: PUSH
55995: LD_INT 1
55997: DOUBLE
55998: EQUAL
55999: IFTRUE 56003
56001: GO 56059
56003: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56004: LD_ADDR_VAR 0 9
56008: PUSH
56009: LD_VAR 0 11
56013: PUSH
56014: LD_VAR 0 12
56018: PUSH
56019: LD_VAR 0 13
56023: PUSH
56024: LD_VAR 0 14
56028: PUSH
56029: LD_VAR 0 15
56033: PUSH
56034: LD_VAR 0 16
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: PUSH
56047: LD_VAR 0 4
56051: PUSH
56052: LD_INT 1
56054: PLUS
56055: ARRAY
56056: ST_TO_ADDR
56057: GO 56188
56059: LD_INT 2
56061: DOUBLE
56062: EQUAL
56063: IFTRUE 56067
56065: GO 56123
56067: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56068: LD_ADDR_VAR 0 9
56072: PUSH
56073: LD_VAR 0 17
56077: PUSH
56078: LD_VAR 0 18
56082: PUSH
56083: LD_VAR 0 19
56087: PUSH
56088: LD_VAR 0 20
56092: PUSH
56093: LD_VAR 0 21
56097: PUSH
56098: LD_VAR 0 22
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: PUSH
56111: LD_VAR 0 4
56115: PUSH
56116: LD_INT 1
56118: PLUS
56119: ARRAY
56120: ST_TO_ADDR
56121: GO 56188
56123: LD_INT 3
56125: DOUBLE
56126: EQUAL
56127: IFTRUE 56131
56129: GO 56187
56131: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56132: LD_ADDR_VAR 0 9
56136: PUSH
56137: LD_VAR 0 23
56141: PUSH
56142: LD_VAR 0 24
56146: PUSH
56147: LD_VAR 0 25
56151: PUSH
56152: LD_VAR 0 26
56156: PUSH
56157: LD_VAR 0 27
56161: PUSH
56162: LD_VAR 0 28
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: PUSH
56175: LD_VAR 0 4
56179: PUSH
56180: LD_INT 1
56182: PLUS
56183: ARRAY
56184: ST_TO_ADDR
56185: GO 56188
56187: POP
56188: GO 56743
56190: LD_INT 2
56192: DOUBLE
56193: EQUAL
56194: IFTRUE 56204
56196: LD_INT 3
56198: DOUBLE
56199: EQUAL
56200: IFTRUE 56204
56202: GO 56260
56204: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56205: LD_ADDR_VAR 0 9
56209: PUSH
56210: LD_VAR 0 29
56214: PUSH
56215: LD_VAR 0 30
56219: PUSH
56220: LD_VAR 0 31
56224: PUSH
56225: LD_VAR 0 32
56229: PUSH
56230: LD_VAR 0 33
56234: PUSH
56235: LD_VAR 0 34
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: PUSH
56248: LD_VAR 0 4
56252: PUSH
56253: LD_INT 1
56255: PLUS
56256: ARRAY
56257: ST_TO_ADDR
56258: GO 56743
56260: LD_INT 16
56262: DOUBLE
56263: EQUAL
56264: IFTRUE 56322
56266: LD_INT 17
56268: DOUBLE
56269: EQUAL
56270: IFTRUE 56322
56272: LD_INT 18
56274: DOUBLE
56275: EQUAL
56276: IFTRUE 56322
56278: LD_INT 19
56280: DOUBLE
56281: EQUAL
56282: IFTRUE 56322
56284: LD_INT 22
56286: DOUBLE
56287: EQUAL
56288: IFTRUE 56322
56290: LD_INT 20
56292: DOUBLE
56293: EQUAL
56294: IFTRUE 56322
56296: LD_INT 21
56298: DOUBLE
56299: EQUAL
56300: IFTRUE 56322
56302: LD_INT 23
56304: DOUBLE
56305: EQUAL
56306: IFTRUE 56322
56308: LD_INT 24
56310: DOUBLE
56311: EQUAL
56312: IFTRUE 56322
56314: LD_INT 25
56316: DOUBLE
56317: EQUAL
56318: IFTRUE 56322
56320: GO 56378
56322: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56323: LD_ADDR_VAR 0 9
56327: PUSH
56328: LD_VAR 0 35
56332: PUSH
56333: LD_VAR 0 36
56337: PUSH
56338: LD_VAR 0 37
56342: PUSH
56343: LD_VAR 0 38
56347: PUSH
56348: LD_VAR 0 39
56352: PUSH
56353: LD_VAR 0 40
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: PUSH
56366: LD_VAR 0 4
56370: PUSH
56371: LD_INT 1
56373: PLUS
56374: ARRAY
56375: ST_TO_ADDR
56376: GO 56743
56378: LD_INT 6
56380: DOUBLE
56381: EQUAL
56382: IFTRUE 56434
56384: LD_INT 7
56386: DOUBLE
56387: EQUAL
56388: IFTRUE 56434
56390: LD_INT 8
56392: DOUBLE
56393: EQUAL
56394: IFTRUE 56434
56396: LD_INT 13
56398: DOUBLE
56399: EQUAL
56400: IFTRUE 56434
56402: LD_INT 12
56404: DOUBLE
56405: EQUAL
56406: IFTRUE 56434
56408: LD_INT 15
56410: DOUBLE
56411: EQUAL
56412: IFTRUE 56434
56414: LD_INT 11
56416: DOUBLE
56417: EQUAL
56418: IFTRUE 56434
56420: LD_INT 14
56422: DOUBLE
56423: EQUAL
56424: IFTRUE 56434
56426: LD_INT 10
56428: DOUBLE
56429: EQUAL
56430: IFTRUE 56434
56432: GO 56490
56434: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56435: LD_ADDR_VAR 0 9
56439: PUSH
56440: LD_VAR 0 41
56444: PUSH
56445: LD_VAR 0 42
56449: PUSH
56450: LD_VAR 0 43
56454: PUSH
56455: LD_VAR 0 44
56459: PUSH
56460: LD_VAR 0 45
56464: PUSH
56465: LD_VAR 0 46
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: PUSH
56478: LD_VAR 0 4
56482: PUSH
56483: LD_INT 1
56485: PLUS
56486: ARRAY
56487: ST_TO_ADDR
56488: GO 56743
56490: LD_INT 36
56492: DOUBLE
56493: EQUAL
56494: IFTRUE 56498
56496: GO 56554
56498: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56499: LD_ADDR_VAR 0 9
56503: PUSH
56504: LD_VAR 0 47
56508: PUSH
56509: LD_VAR 0 48
56513: PUSH
56514: LD_VAR 0 49
56518: PUSH
56519: LD_VAR 0 50
56523: PUSH
56524: LD_VAR 0 51
56528: PUSH
56529: LD_VAR 0 52
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: PUSH
56542: LD_VAR 0 4
56546: PUSH
56547: LD_INT 1
56549: PLUS
56550: ARRAY
56551: ST_TO_ADDR
56552: GO 56743
56554: LD_INT 4
56556: DOUBLE
56557: EQUAL
56558: IFTRUE 56580
56560: LD_INT 5
56562: DOUBLE
56563: EQUAL
56564: IFTRUE 56580
56566: LD_INT 34
56568: DOUBLE
56569: EQUAL
56570: IFTRUE 56580
56572: LD_INT 37
56574: DOUBLE
56575: EQUAL
56576: IFTRUE 56580
56578: GO 56636
56580: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56581: LD_ADDR_VAR 0 9
56585: PUSH
56586: LD_VAR 0 53
56590: PUSH
56591: LD_VAR 0 54
56595: PUSH
56596: LD_VAR 0 55
56600: PUSH
56601: LD_VAR 0 56
56605: PUSH
56606: LD_VAR 0 57
56610: PUSH
56611: LD_VAR 0 58
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: PUSH
56624: LD_VAR 0 4
56628: PUSH
56629: LD_INT 1
56631: PLUS
56632: ARRAY
56633: ST_TO_ADDR
56634: GO 56743
56636: LD_INT 31
56638: DOUBLE
56639: EQUAL
56640: IFTRUE 56686
56642: LD_INT 32
56644: DOUBLE
56645: EQUAL
56646: IFTRUE 56686
56648: LD_INT 33
56650: DOUBLE
56651: EQUAL
56652: IFTRUE 56686
56654: LD_INT 27
56656: DOUBLE
56657: EQUAL
56658: IFTRUE 56686
56660: LD_INT 26
56662: DOUBLE
56663: EQUAL
56664: IFTRUE 56686
56666: LD_INT 28
56668: DOUBLE
56669: EQUAL
56670: IFTRUE 56686
56672: LD_INT 29
56674: DOUBLE
56675: EQUAL
56676: IFTRUE 56686
56678: LD_INT 30
56680: DOUBLE
56681: EQUAL
56682: IFTRUE 56686
56684: GO 56742
56686: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56687: LD_ADDR_VAR 0 9
56691: PUSH
56692: LD_VAR 0 59
56696: PUSH
56697: LD_VAR 0 60
56701: PUSH
56702: LD_VAR 0 61
56706: PUSH
56707: LD_VAR 0 62
56711: PUSH
56712: LD_VAR 0 63
56716: PUSH
56717: LD_VAR 0 64
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: PUSH
56730: LD_VAR 0 4
56734: PUSH
56735: LD_INT 1
56737: PLUS
56738: ARRAY
56739: ST_TO_ADDR
56740: GO 56743
56742: POP
// temp_list2 = [ ] ;
56743: LD_ADDR_VAR 0 10
56747: PUSH
56748: EMPTY
56749: ST_TO_ADDR
// for i in temp_list do
56750: LD_ADDR_VAR 0 8
56754: PUSH
56755: LD_VAR 0 9
56759: PUSH
56760: FOR_IN
56761: IFFALSE 56813
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56763: LD_ADDR_VAR 0 10
56767: PUSH
56768: LD_VAR 0 10
56772: PUSH
56773: LD_VAR 0 8
56777: PUSH
56778: LD_INT 1
56780: ARRAY
56781: PUSH
56782: LD_VAR 0 2
56786: PLUS
56787: PUSH
56788: LD_VAR 0 8
56792: PUSH
56793: LD_INT 2
56795: ARRAY
56796: PUSH
56797: LD_VAR 0 3
56801: PLUS
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: ADD
56810: ST_TO_ADDR
56811: GO 56760
56813: POP
56814: POP
// result = temp_list2 ;
56815: LD_ADDR_VAR 0 7
56819: PUSH
56820: LD_VAR 0 10
56824: ST_TO_ADDR
// end ;
56825: LD_VAR 0 7
56829: RET
// export function EnemyInRange ( unit , dist ) ; begin
56830: LD_INT 0
56832: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56833: LD_ADDR_VAR 0 3
56837: PUSH
56838: LD_VAR 0 1
56842: PPUSH
56843: CALL_OW 255
56847: PPUSH
56848: LD_VAR 0 1
56852: PPUSH
56853: CALL_OW 250
56857: PPUSH
56858: LD_VAR 0 1
56862: PPUSH
56863: CALL_OW 251
56867: PPUSH
56868: LD_VAR 0 2
56872: PPUSH
56873: CALL 30232 0 4
56877: PUSH
56878: LD_INT 4
56880: ARRAY
56881: ST_TO_ADDR
// end ;
56882: LD_VAR 0 3
56886: RET
// export function PlayerSeeMe ( unit ) ; begin
56887: LD_INT 0
56889: PPUSH
// result := See ( your_side , unit ) ;
56890: LD_ADDR_VAR 0 2
56894: PUSH
56895: LD_OWVAR 2
56899: PPUSH
56900: LD_VAR 0 1
56904: PPUSH
56905: CALL_OW 292
56909: ST_TO_ADDR
// end ;
56910: LD_VAR 0 2
56914: RET
// export function ReverseDir ( unit ) ; begin
56915: LD_INT 0
56917: PPUSH
// if not unit then
56918: LD_VAR 0 1
56922: NOT
56923: IFFALSE 56927
// exit ;
56925: GO 56950
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56927: LD_ADDR_VAR 0 2
56931: PUSH
56932: LD_VAR 0 1
56936: PPUSH
56937: CALL_OW 254
56941: PUSH
56942: LD_INT 3
56944: PLUS
56945: PUSH
56946: LD_INT 6
56948: MOD
56949: ST_TO_ADDR
// end ;
56950: LD_VAR 0 2
56954: RET
// export function ReverseArray ( array ) ; var i ; begin
56955: LD_INT 0
56957: PPUSH
56958: PPUSH
// if not array then
56959: LD_VAR 0 1
56963: NOT
56964: IFFALSE 56968
// exit ;
56966: GO 57023
// result := [ ] ;
56968: LD_ADDR_VAR 0 2
56972: PUSH
56973: EMPTY
56974: ST_TO_ADDR
// for i := array downto 1 do
56975: LD_ADDR_VAR 0 3
56979: PUSH
56980: DOUBLE
56981: LD_VAR 0 1
56985: INC
56986: ST_TO_ADDR
56987: LD_INT 1
56989: PUSH
56990: FOR_DOWNTO
56991: IFFALSE 57021
// result := Join ( result , array [ i ] ) ;
56993: LD_ADDR_VAR 0 2
56997: PUSH
56998: LD_VAR 0 2
57002: PPUSH
57003: LD_VAR 0 1
57007: PUSH
57008: LD_VAR 0 3
57012: ARRAY
57013: PPUSH
57014: CALL 61667 0 2
57018: ST_TO_ADDR
57019: GO 56990
57021: POP
57022: POP
// end ;
57023: LD_VAR 0 2
57027: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57028: LD_INT 0
57030: PPUSH
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
57035: PPUSH
// if not unit or not hexes then
57036: LD_VAR 0 1
57040: NOT
57041: PUSH
57042: LD_VAR 0 2
57046: NOT
57047: OR
57048: IFFALSE 57052
// exit ;
57050: GO 57175
// dist := 9999 ;
57052: LD_ADDR_VAR 0 5
57056: PUSH
57057: LD_INT 9999
57059: ST_TO_ADDR
// for i = 1 to hexes do
57060: LD_ADDR_VAR 0 4
57064: PUSH
57065: DOUBLE
57066: LD_INT 1
57068: DEC
57069: ST_TO_ADDR
57070: LD_VAR 0 2
57074: PUSH
57075: FOR_TO
57076: IFFALSE 57163
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57078: LD_ADDR_VAR 0 6
57082: PUSH
57083: LD_VAR 0 1
57087: PPUSH
57088: LD_VAR 0 2
57092: PUSH
57093: LD_VAR 0 4
57097: ARRAY
57098: PUSH
57099: LD_INT 1
57101: ARRAY
57102: PPUSH
57103: LD_VAR 0 2
57107: PUSH
57108: LD_VAR 0 4
57112: ARRAY
57113: PUSH
57114: LD_INT 2
57116: ARRAY
57117: PPUSH
57118: CALL_OW 297
57122: ST_TO_ADDR
// if tdist < dist then
57123: LD_VAR 0 6
57127: PUSH
57128: LD_VAR 0 5
57132: LESS
57133: IFFALSE 57161
// begin hex := hexes [ i ] ;
57135: LD_ADDR_VAR 0 8
57139: PUSH
57140: LD_VAR 0 2
57144: PUSH
57145: LD_VAR 0 4
57149: ARRAY
57150: ST_TO_ADDR
// dist := tdist ;
57151: LD_ADDR_VAR 0 5
57155: PUSH
57156: LD_VAR 0 6
57160: ST_TO_ADDR
// end ; end ;
57161: GO 57075
57163: POP
57164: POP
// result := hex ;
57165: LD_ADDR_VAR 0 3
57169: PUSH
57170: LD_VAR 0 8
57174: ST_TO_ADDR
// end ;
57175: LD_VAR 0 3
57179: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57180: LD_INT 0
57182: PPUSH
57183: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57184: LD_VAR 0 1
57188: NOT
57189: PUSH
57190: LD_VAR 0 1
57194: PUSH
57195: LD_INT 21
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 23
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PPUSH
57219: CALL_OW 69
57223: IN
57224: NOT
57225: OR
57226: IFFALSE 57230
// exit ;
57228: GO 57277
// for i = 1 to 3 do
57230: LD_ADDR_VAR 0 3
57234: PUSH
57235: DOUBLE
57236: LD_INT 1
57238: DEC
57239: ST_TO_ADDR
57240: LD_INT 3
57242: PUSH
57243: FOR_TO
57244: IFFALSE 57275
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL_OW 250
57255: PPUSH
57256: LD_VAR 0 1
57260: PPUSH
57261: CALL_OW 251
57265: PPUSH
57266: LD_INT 1
57268: PPUSH
57269: CALL_OW 453
57273: GO 57243
57275: POP
57276: POP
// end ;
57277: LD_VAR 0 2
57281: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57282: LD_INT 0
57284: PPUSH
57285: PPUSH
57286: PPUSH
57287: PPUSH
57288: PPUSH
57289: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57290: LD_VAR 0 1
57294: NOT
57295: PUSH
57296: LD_VAR 0 2
57300: NOT
57301: OR
57302: PUSH
57303: LD_VAR 0 1
57307: PPUSH
57308: CALL_OW 314
57312: OR
57313: IFFALSE 57317
// exit ;
57315: GO 57784
// if GetLives ( i ) < 250 then
57317: LD_VAR 0 4
57321: PPUSH
57322: CALL_OW 256
57326: PUSH
57327: LD_INT 250
57329: LESS
57330: IFFALSE 57343
// begin ComAutodestruct ( i ) ;
57332: LD_VAR 0 4
57336: PPUSH
57337: CALL 57180 0 1
// exit ;
57341: GO 57784
// end ; x := GetX ( enemy_unit ) ;
57343: LD_ADDR_VAR 0 7
57347: PUSH
57348: LD_VAR 0 2
57352: PPUSH
57353: CALL_OW 250
57357: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57358: LD_ADDR_VAR 0 8
57362: PUSH
57363: LD_VAR 0 2
57367: PPUSH
57368: CALL_OW 251
57372: ST_TO_ADDR
// if not x or not y then
57373: LD_VAR 0 7
57377: NOT
57378: PUSH
57379: LD_VAR 0 8
57383: NOT
57384: OR
57385: IFFALSE 57389
// exit ;
57387: GO 57784
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57389: LD_ADDR_VAR 0 6
57393: PUSH
57394: LD_VAR 0 7
57398: PPUSH
57399: LD_INT 0
57401: PPUSH
57402: LD_INT 4
57404: PPUSH
57405: CALL_OW 272
57409: PUSH
57410: LD_VAR 0 8
57414: PPUSH
57415: LD_INT 0
57417: PPUSH
57418: LD_INT 4
57420: PPUSH
57421: CALL_OW 273
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_VAR 0 7
57434: PPUSH
57435: LD_INT 1
57437: PPUSH
57438: LD_INT 4
57440: PPUSH
57441: CALL_OW 272
57445: PUSH
57446: LD_VAR 0 8
57450: PPUSH
57451: LD_INT 1
57453: PPUSH
57454: LD_INT 4
57456: PPUSH
57457: CALL_OW 273
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_VAR 0 7
57470: PPUSH
57471: LD_INT 2
57473: PPUSH
57474: LD_INT 4
57476: PPUSH
57477: CALL_OW 272
57481: PUSH
57482: LD_VAR 0 8
57486: PPUSH
57487: LD_INT 2
57489: PPUSH
57490: LD_INT 4
57492: PPUSH
57493: CALL_OW 273
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_VAR 0 7
57506: PPUSH
57507: LD_INT 3
57509: PPUSH
57510: LD_INT 4
57512: PPUSH
57513: CALL_OW 272
57517: PUSH
57518: LD_VAR 0 8
57522: PPUSH
57523: LD_INT 3
57525: PPUSH
57526: LD_INT 4
57528: PPUSH
57529: CALL_OW 273
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_VAR 0 7
57542: PPUSH
57543: LD_INT 4
57545: PPUSH
57546: LD_INT 4
57548: PPUSH
57549: CALL_OW 272
57553: PUSH
57554: LD_VAR 0 8
57558: PPUSH
57559: LD_INT 4
57561: PPUSH
57562: LD_INT 4
57564: PPUSH
57565: CALL_OW 273
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_VAR 0 7
57578: PPUSH
57579: LD_INT 5
57581: PPUSH
57582: LD_INT 4
57584: PPUSH
57585: CALL_OW 272
57589: PUSH
57590: LD_VAR 0 8
57594: PPUSH
57595: LD_INT 5
57597: PPUSH
57598: LD_INT 4
57600: PPUSH
57601: CALL_OW 273
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// for i = tmp downto 1 do
57618: LD_ADDR_VAR 0 4
57622: PUSH
57623: DOUBLE
57624: LD_VAR 0 6
57628: INC
57629: ST_TO_ADDR
57630: LD_INT 1
57632: PUSH
57633: FOR_DOWNTO
57634: IFFALSE 57735
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57636: LD_VAR 0 6
57640: PUSH
57641: LD_VAR 0 4
57645: ARRAY
57646: PUSH
57647: LD_INT 1
57649: ARRAY
57650: PPUSH
57651: LD_VAR 0 6
57655: PUSH
57656: LD_VAR 0 4
57660: ARRAY
57661: PUSH
57662: LD_INT 2
57664: ARRAY
57665: PPUSH
57666: CALL_OW 488
57670: NOT
57671: PUSH
57672: LD_VAR 0 6
57676: PUSH
57677: LD_VAR 0 4
57681: ARRAY
57682: PUSH
57683: LD_INT 1
57685: ARRAY
57686: PPUSH
57687: LD_VAR 0 6
57691: PUSH
57692: LD_VAR 0 4
57696: ARRAY
57697: PUSH
57698: LD_INT 2
57700: ARRAY
57701: PPUSH
57702: CALL_OW 428
57706: PUSH
57707: LD_INT 0
57709: NONEQUAL
57710: OR
57711: IFFALSE 57733
// tmp := Delete ( tmp , i ) ;
57713: LD_ADDR_VAR 0 6
57717: PUSH
57718: LD_VAR 0 6
57722: PPUSH
57723: LD_VAR 0 4
57727: PPUSH
57728: CALL_OW 3
57732: ST_TO_ADDR
57733: GO 57633
57735: POP
57736: POP
// j := GetClosestHex ( unit , tmp ) ;
57737: LD_ADDR_VAR 0 5
57741: PUSH
57742: LD_VAR 0 1
57746: PPUSH
57747: LD_VAR 0 6
57751: PPUSH
57752: CALL 57028 0 2
57756: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57757: LD_VAR 0 1
57761: PPUSH
57762: LD_VAR 0 5
57766: PUSH
57767: LD_INT 1
57769: ARRAY
57770: PPUSH
57771: LD_VAR 0 5
57775: PUSH
57776: LD_INT 2
57778: ARRAY
57779: PPUSH
57780: CALL_OW 111
// end ;
57784: LD_VAR 0 3
57788: RET
// export function PrepareApemanSoldier ( ) ; begin
57789: LD_INT 0
57791: PPUSH
// uc_nation := 0 ;
57792: LD_ADDR_OWVAR 21
57796: PUSH
57797: LD_INT 0
57799: ST_TO_ADDR
// hc_sex := sex_male ;
57800: LD_ADDR_OWVAR 27
57804: PUSH
57805: LD_INT 1
57807: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57808: LD_ADDR_OWVAR 28
57812: PUSH
57813: LD_INT 15
57815: ST_TO_ADDR
// hc_gallery :=  ;
57816: LD_ADDR_OWVAR 33
57820: PUSH
57821: LD_STRING 
57823: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57824: LD_ADDR_OWVAR 31
57828: PUSH
57829: LD_INT 0
57831: PPUSH
57832: LD_INT 3
57834: PPUSH
57835: CALL_OW 12
57839: PUSH
57840: LD_INT 0
57842: PPUSH
57843: LD_INT 3
57845: PPUSH
57846: CALL_OW 12
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: ST_TO_ADDR
// end ;
57863: LD_VAR 0 1
57867: RET
// export function PrepareApemanEngineer ( ) ; begin
57868: LD_INT 0
57870: PPUSH
// uc_nation := 0 ;
57871: LD_ADDR_OWVAR 21
57875: PUSH
57876: LD_INT 0
57878: ST_TO_ADDR
// hc_sex := sex_male ;
57879: LD_ADDR_OWVAR 27
57883: PUSH
57884: LD_INT 1
57886: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57887: LD_ADDR_OWVAR 28
57891: PUSH
57892: LD_INT 16
57894: ST_TO_ADDR
// hc_gallery :=  ;
57895: LD_ADDR_OWVAR 33
57899: PUSH
57900: LD_STRING 
57902: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57903: LD_ADDR_OWVAR 31
57907: PUSH
57908: LD_INT 0
57910: PPUSH
57911: LD_INT 3
57913: PPUSH
57914: CALL_OW 12
57918: PUSH
57919: LD_INT 0
57921: PPUSH
57922: LD_INT 3
57924: PPUSH
57925: CALL_OW 12
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// end ;
57942: LD_VAR 0 1
57946: RET
// export function PrepareApeman ( agressivity ) ; begin
57947: LD_INT 0
57949: PPUSH
// uc_side := 0 ;
57950: LD_ADDR_OWVAR 20
57954: PUSH
57955: LD_INT 0
57957: ST_TO_ADDR
// uc_nation := 0 ;
57958: LD_ADDR_OWVAR 21
57962: PUSH
57963: LD_INT 0
57965: ST_TO_ADDR
// hc_sex := sex_male ;
57966: LD_ADDR_OWVAR 27
57970: PUSH
57971: LD_INT 1
57973: ST_TO_ADDR
// hc_class := class_apeman ;
57974: LD_ADDR_OWVAR 28
57978: PUSH
57979: LD_INT 12
57981: ST_TO_ADDR
// hc_gallery :=  ;
57982: LD_ADDR_OWVAR 33
57986: PUSH
57987: LD_STRING 
57989: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57990: LD_ADDR_OWVAR 35
57994: PUSH
57995: LD_VAR 0 1
57999: NEG
58000: PPUSH
58001: LD_VAR 0 1
58005: PPUSH
58006: CALL_OW 12
58010: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58011: LD_ADDR_OWVAR 31
58015: PUSH
58016: LD_INT 0
58018: PPUSH
58019: LD_INT 3
58021: PPUSH
58022: CALL_OW 12
58026: PUSH
58027: LD_INT 0
58029: PPUSH
58030: LD_INT 3
58032: PPUSH
58033: CALL_OW 12
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: ST_TO_ADDR
// end ;
58050: LD_VAR 0 2
58054: RET
// export function PrepareTiger ( agressivity ) ; begin
58055: LD_INT 0
58057: PPUSH
// uc_side := 0 ;
58058: LD_ADDR_OWVAR 20
58062: PUSH
58063: LD_INT 0
58065: ST_TO_ADDR
// uc_nation := 0 ;
58066: LD_ADDR_OWVAR 21
58070: PUSH
58071: LD_INT 0
58073: ST_TO_ADDR
// hc_class := class_tiger ;
58074: LD_ADDR_OWVAR 28
58078: PUSH
58079: LD_INT 14
58081: ST_TO_ADDR
// hc_gallery :=  ;
58082: LD_ADDR_OWVAR 33
58086: PUSH
58087: LD_STRING 
58089: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58090: LD_ADDR_OWVAR 35
58094: PUSH
58095: LD_VAR 0 1
58099: NEG
58100: PPUSH
58101: LD_VAR 0 1
58105: PPUSH
58106: CALL_OW 12
58110: ST_TO_ADDR
// end ;
58111: LD_VAR 0 2
58115: RET
// export function PrepareEnchidna ( ) ; begin
58116: LD_INT 0
58118: PPUSH
// uc_side := 0 ;
58119: LD_ADDR_OWVAR 20
58123: PUSH
58124: LD_INT 0
58126: ST_TO_ADDR
// uc_nation := 0 ;
58127: LD_ADDR_OWVAR 21
58131: PUSH
58132: LD_INT 0
58134: ST_TO_ADDR
// hc_class := class_baggie ;
58135: LD_ADDR_OWVAR 28
58139: PUSH
58140: LD_INT 13
58142: ST_TO_ADDR
// hc_gallery :=  ;
58143: LD_ADDR_OWVAR 33
58147: PUSH
58148: LD_STRING 
58150: ST_TO_ADDR
// end ;
58151: LD_VAR 0 1
58155: RET
// export function PrepareFrog ( ) ; begin
58156: LD_INT 0
58158: PPUSH
// uc_side := 0 ;
58159: LD_ADDR_OWVAR 20
58163: PUSH
58164: LD_INT 0
58166: ST_TO_ADDR
// uc_nation := 0 ;
58167: LD_ADDR_OWVAR 21
58171: PUSH
58172: LD_INT 0
58174: ST_TO_ADDR
// hc_class := class_frog ;
58175: LD_ADDR_OWVAR 28
58179: PUSH
58180: LD_INT 19
58182: ST_TO_ADDR
// hc_gallery :=  ;
58183: LD_ADDR_OWVAR 33
58187: PUSH
58188: LD_STRING 
58190: ST_TO_ADDR
// end ;
58191: LD_VAR 0 1
58195: RET
// export function PrepareFish ( ) ; begin
58196: LD_INT 0
58198: PPUSH
// uc_side := 0 ;
58199: LD_ADDR_OWVAR 20
58203: PUSH
58204: LD_INT 0
58206: ST_TO_ADDR
// uc_nation := 0 ;
58207: LD_ADDR_OWVAR 21
58211: PUSH
58212: LD_INT 0
58214: ST_TO_ADDR
// hc_class := class_fish ;
58215: LD_ADDR_OWVAR 28
58219: PUSH
58220: LD_INT 20
58222: ST_TO_ADDR
// hc_gallery :=  ;
58223: LD_ADDR_OWVAR 33
58227: PUSH
58228: LD_STRING 
58230: ST_TO_ADDR
// end ;
58231: LD_VAR 0 1
58235: RET
// export function PrepareBird ( ) ; begin
58236: LD_INT 0
58238: PPUSH
// uc_side := 0 ;
58239: LD_ADDR_OWVAR 20
58243: PUSH
58244: LD_INT 0
58246: ST_TO_ADDR
// uc_nation := 0 ;
58247: LD_ADDR_OWVAR 21
58251: PUSH
58252: LD_INT 0
58254: ST_TO_ADDR
// hc_class := class_phororhacos ;
58255: LD_ADDR_OWVAR 28
58259: PUSH
58260: LD_INT 18
58262: ST_TO_ADDR
// hc_gallery :=  ;
58263: LD_ADDR_OWVAR 33
58267: PUSH
58268: LD_STRING 
58270: ST_TO_ADDR
// end ;
58271: LD_VAR 0 1
58275: RET
// export function PrepareHorse ( ) ; begin
58276: LD_INT 0
58278: PPUSH
// uc_side := 0 ;
58279: LD_ADDR_OWVAR 20
58283: PUSH
58284: LD_INT 0
58286: ST_TO_ADDR
// uc_nation := 0 ;
58287: LD_ADDR_OWVAR 21
58291: PUSH
58292: LD_INT 0
58294: ST_TO_ADDR
// hc_class := class_horse ;
58295: LD_ADDR_OWVAR 28
58299: PUSH
58300: LD_INT 21
58302: ST_TO_ADDR
// hc_gallery :=  ;
58303: LD_ADDR_OWVAR 33
58307: PUSH
58308: LD_STRING 
58310: ST_TO_ADDR
// end ;
58311: LD_VAR 0 1
58315: RET
// export function PrepareMastodont ( ) ; begin
58316: LD_INT 0
58318: PPUSH
// uc_side := 0 ;
58319: LD_ADDR_OWVAR 20
58323: PUSH
58324: LD_INT 0
58326: ST_TO_ADDR
// uc_nation := 0 ;
58327: LD_ADDR_OWVAR 21
58331: PUSH
58332: LD_INT 0
58334: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58335: LD_ADDR_OWVAR 37
58339: PUSH
58340: LD_INT 31
58342: ST_TO_ADDR
// vc_control := control_rider ;
58343: LD_ADDR_OWVAR 38
58347: PUSH
58348: LD_INT 4
58350: ST_TO_ADDR
// end ;
58351: LD_VAR 0 1
58355: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58356: LD_INT 0
58358: PPUSH
58359: PPUSH
58360: PPUSH
// uc_side = 0 ;
58361: LD_ADDR_OWVAR 20
58365: PUSH
58366: LD_INT 0
58368: ST_TO_ADDR
// uc_nation = 0 ;
58369: LD_ADDR_OWVAR 21
58373: PUSH
58374: LD_INT 0
58376: ST_TO_ADDR
// InitHc_All ( ) ;
58377: CALL_OW 584
// InitVc ;
58381: CALL_OW 20
// if mastodonts then
58385: LD_VAR 0 6
58389: IFFALSE 58456
// for i = 1 to mastodonts do
58391: LD_ADDR_VAR 0 11
58395: PUSH
58396: DOUBLE
58397: LD_INT 1
58399: DEC
58400: ST_TO_ADDR
58401: LD_VAR 0 6
58405: PUSH
58406: FOR_TO
58407: IFFALSE 58454
// begin vc_chassis := 31 ;
58409: LD_ADDR_OWVAR 37
58413: PUSH
58414: LD_INT 31
58416: ST_TO_ADDR
// vc_control := control_rider ;
58417: LD_ADDR_OWVAR 38
58421: PUSH
58422: LD_INT 4
58424: ST_TO_ADDR
// animal := CreateVehicle ;
58425: LD_ADDR_VAR 0 12
58429: PUSH
58430: CALL_OW 45
58434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58435: LD_VAR 0 12
58439: PPUSH
58440: LD_VAR 0 8
58444: PPUSH
58445: LD_INT 0
58447: PPUSH
58448: CALL 60584 0 3
// end ;
58452: GO 58406
58454: POP
58455: POP
// if horses then
58456: LD_VAR 0 5
58460: IFFALSE 58527
// for i = 1 to horses do
58462: LD_ADDR_VAR 0 11
58466: PUSH
58467: DOUBLE
58468: LD_INT 1
58470: DEC
58471: ST_TO_ADDR
58472: LD_VAR 0 5
58476: PUSH
58477: FOR_TO
58478: IFFALSE 58525
// begin hc_class := 21 ;
58480: LD_ADDR_OWVAR 28
58484: PUSH
58485: LD_INT 21
58487: ST_TO_ADDR
// hc_gallery :=  ;
58488: LD_ADDR_OWVAR 33
58492: PUSH
58493: LD_STRING 
58495: ST_TO_ADDR
// animal := CreateHuman ;
58496: LD_ADDR_VAR 0 12
58500: PUSH
58501: CALL_OW 44
58505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58506: LD_VAR 0 12
58510: PPUSH
58511: LD_VAR 0 8
58515: PPUSH
58516: LD_INT 0
58518: PPUSH
58519: CALL 60584 0 3
// end ;
58523: GO 58477
58525: POP
58526: POP
// if birds then
58527: LD_VAR 0 1
58531: IFFALSE 58598
// for i = 1 to birds do
58533: LD_ADDR_VAR 0 11
58537: PUSH
58538: DOUBLE
58539: LD_INT 1
58541: DEC
58542: ST_TO_ADDR
58543: LD_VAR 0 1
58547: PUSH
58548: FOR_TO
58549: IFFALSE 58596
// begin hc_class = 18 ;
58551: LD_ADDR_OWVAR 28
58555: PUSH
58556: LD_INT 18
58558: ST_TO_ADDR
// hc_gallery =  ;
58559: LD_ADDR_OWVAR 33
58563: PUSH
58564: LD_STRING 
58566: ST_TO_ADDR
// animal := CreateHuman ;
58567: LD_ADDR_VAR 0 12
58571: PUSH
58572: CALL_OW 44
58576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58577: LD_VAR 0 12
58581: PPUSH
58582: LD_VAR 0 8
58586: PPUSH
58587: LD_INT 0
58589: PPUSH
58590: CALL 60584 0 3
// end ;
58594: GO 58548
58596: POP
58597: POP
// if tigers then
58598: LD_VAR 0 2
58602: IFFALSE 58686
// for i = 1 to tigers do
58604: LD_ADDR_VAR 0 11
58608: PUSH
58609: DOUBLE
58610: LD_INT 1
58612: DEC
58613: ST_TO_ADDR
58614: LD_VAR 0 2
58618: PUSH
58619: FOR_TO
58620: IFFALSE 58684
// begin hc_class = class_tiger ;
58622: LD_ADDR_OWVAR 28
58626: PUSH
58627: LD_INT 14
58629: ST_TO_ADDR
// hc_gallery =  ;
58630: LD_ADDR_OWVAR 33
58634: PUSH
58635: LD_STRING 
58637: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58638: LD_ADDR_OWVAR 35
58642: PUSH
58643: LD_INT 7
58645: NEG
58646: PPUSH
58647: LD_INT 7
58649: PPUSH
58650: CALL_OW 12
58654: ST_TO_ADDR
// animal := CreateHuman ;
58655: LD_ADDR_VAR 0 12
58659: PUSH
58660: CALL_OW 44
58664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58665: LD_VAR 0 12
58669: PPUSH
58670: LD_VAR 0 8
58674: PPUSH
58675: LD_INT 0
58677: PPUSH
58678: CALL 60584 0 3
// end ;
58682: GO 58619
58684: POP
58685: POP
// if apemans then
58686: LD_VAR 0 3
58690: IFFALSE 58813
// for i = 1 to apemans do
58692: LD_ADDR_VAR 0 11
58696: PUSH
58697: DOUBLE
58698: LD_INT 1
58700: DEC
58701: ST_TO_ADDR
58702: LD_VAR 0 3
58706: PUSH
58707: FOR_TO
58708: IFFALSE 58811
// begin hc_class = class_apeman ;
58710: LD_ADDR_OWVAR 28
58714: PUSH
58715: LD_INT 12
58717: ST_TO_ADDR
// hc_gallery =  ;
58718: LD_ADDR_OWVAR 33
58722: PUSH
58723: LD_STRING 
58725: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58726: LD_ADDR_OWVAR 35
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PPUSH
58735: LD_INT 2
58737: PPUSH
58738: CALL_OW 12
58742: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58743: LD_ADDR_OWVAR 31
58747: PUSH
58748: LD_INT 1
58750: PPUSH
58751: LD_INT 3
58753: PPUSH
58754: CALL_OW 12
58758: PUSH
58759: LD_INT 1
58761: PPUSH
58762: LD_INT 3
58764: PPUSH
58765: CALL_OW 12
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// animal := CreateHuman ;
58782: LD_ADDR_VAR 0 12
58786: PUSH
58787: CALL_OW 44
58791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58792: LD_VAR 0 12
58796: PPUSH
58797: LD_VAR 0 8
58801: PPUSH
58802: LD_INT 0
58804: PPUSH
58805: CALL 60584 0 3
// end ;
58809: GO 58707
58811: POP
58812: POP
// if enchidnas then
58813: LD_VAR 0 4
58817: IFFALSE 58884
// for i = 1 to enchidnas do
58819: LD_ADDR_VAR 0 11
58823: PUSH
58824: DOUBLE
58825: LD_INT 1
58827: DEC
58828: ST_TO_ADDR
58829: LD_VAR 0 4
58833: PUSH
58834: FOR_TO
58835: IFFALSE 58882
// begin hc_class = 13 ;
58837: LD_ADDR_OWVAR 28
58841: PUSH
58842: LD_INT 13
58844: ST_TO_ADDR
// hc_gallery =  ;
58845: LD_ADDR_OWVAR 33
58849: PUSH
58850: LD_STRING 
58852: ST_TO_ADDR
// animal := CreateHuman ;
58853: LD_ADDR_VAR 0 12
58857: PUSH
58858: CALL_OW 44
58862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58863: LD_VAR 0 12
58867: PPUSH
58868: LD_VAR 0 8
58872: PPUSH
58873: LD_INT 0
58875: PPUSH
58876: CALL 60584 0 3
// end ;
58880: GO 58834
58882: POP
58883: POP
// if fishes then
58884: LD_VAR 0 7
58888: IFFALSE 58955
// for i = 1 to fishes do
58890: LD_ADDR_VAR 0 11
58894: PUSH
58895: DOUBLE
58896: LD_INT 1
58898: DEC
58899: ST_TO_ADDR
58900: LD_VAR 0 7
58904: PUSH
58905: FOR_TO
58906: IFFALSE 58953
// begin hc_class = 20 ;
58908: LD_ADDR_OWVAR 28
58912: PUSH
58913: LD_INT 20
58915: ST_TO_ADDR
// hc_gallery =  ;
58916: LD_ADDR_OWVAR 33
58920: PUSH
58921: LD_STRING 
58923: ST_TO_ADDR
// animal := CreateHuman ;
58924: LD_ADDR_VAR 0 12
58928: PUSH
58929: CALL_OW 44
58933: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58934: LD_VAR 0 12
58938: PPUSH
58939: LD_VAR 0 9
58943: PPUSH
58944: LD_INT 0
58946: PPUSH
58947: CALL 60584 0 3
// end ;
58951: GO 58905
58953: POP
58954: POP
// end ;
58955: LD_VAR 0 10
58959: RET
// export function WantHeal ( sci , unit ) ; begin
58960: LD_INT 0
58962: PPUSH
// if GetTaskList ( sci ) > 0 then
58963: LD_VAR 0 1
58967: PPUSH
58968: CALL_OW 437
58972: PUSH
58973: LD_INT 0
58975: GREATER
58976: IFFALSE 59046
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58978: LD_VAR 0 1
58982: PPUSH
58983: CALL_OW 437
58987: PUSH
58988: LD_INT 1
58990: ARRAY
58991: PUSH
58992: LD_INT 1
58994: ARRAY
58995: PUSH
58996: LD_STRING l
58998: EQUAL
58999: PUSH
59000: LD_VAR 0 1
59004: PPUSH
59005: CALL_OW 437
59009: PUSH
59010: LD_INT 1
59012: ARRAY
59013: PUSH
59014: LD_INT 4
59016: ARRAY
59017: PUSH
59018: LD_VAR 0 2
59022: EQUAL
59023: AND
59024: IFFALSE 59036
// result := true else
59026: LD_ADDR_VAR 0 3
59030: PUSH
59031: LD_INT 1
59033: ST_TO_ADDR
59034: GO 59044
// result := false ;
59036: LD_ADDR_VAR 0 3
59040: PUSH
59041: LD_INT 0
59043: ST_TO_ADDR
// end else
59044: GO 59054
// result := false ;
59046: LD_ADDR_VAR 0 3
59050: PUSH
59051: LD_INT 0
59053: ST_TO_ADDR
// end ;
59054: LD_VAR 0 3
59058: RET
// export function HealTarget ( sci ) ; begin
59059: LD_INT 0
59061: PPUSH
// if not sci then
59062: LD_VAR 0 1
59066: NOT
59067: IFFALSE 59071
// exit ;
59069: GO 59136
// result := 0 ;
59071: LD_ADDR_VAR 0 2
59075: PUSH
59076: LD_INT 0
59078: ST_TO_ADDR
// if GetTaskList ( sci ) then
59079: LD_VAR 0 1
59083: PPUSH
59084: CALL_OW 437
59088: IFFALSE 59136
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59090: LD_VAR 0 1
59094: PPUSH
59095: CALL_OW 437
59099: PUSH
59100: LD_INT 1
59102: ARRAY
59103: PUSH
59104: LD_INT 1
59106: ARRAY
59107: PUSH
59108: LD_STRING l
59110: EQUAL
59111: IFFALSE 59136
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59113: LD_ADDR_VAR 0 2
59117: PUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: CALL_OW 437
59127: PUSH
59128: LD_INT 1
59130: ARRAY
59131: PUSH
59132: LD_INT 4
59134: ARRAY
59135: ST_TO_ADDR
// end ;
59136: LD_VAR 0 2
59140: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59141: LD_INT 0
59143: PPUSH
59144: PPUSH
59145: PPUSH
59146: PPUSH
// if not base_units then
59147: LD_VAR 0 1
59151: NOT
59152: IFFALSE 59156
// exit ;
59154: GO 59243
// result := false ;
59156: LD_ADDR_VAR 0 2
59160: PUSH
59161: LD_INT 0
59163: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59164: LD_ADDR_VAR 0 5
59168: PUSH
59169: LD_VAR 0 1
59173: PPUSH
59174: LD_INT 21
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PPUSH
59184: CALL_OW 72
59188: ST_TO_ADDR
// if not tmp then
59189: LD_VAR 0 5
59193: NOT
59194: IFFALSE 59198
// exit ;
59196: GO 59243
// for i in tmp do
59198: LD_ADDR_VAR 0 3
59202: PUSH
59203: LD_VAR 0 5
59207: PUSH
59208: FOR_IN
59209: IFFALSE 59241
// begin result := EnemyInRange ( i , 22 ) ;
59211: LD_ADDR_VAR 0 2
59215: PUSH
59216: LD_VAR 0 3
59220: PPUSH
59221: LD_INT 22
59223: PPUSH
59224: CALL 56830 0 2
59228: ST_TO_ADDR
// if result then
59229: LD_VAR 0 2
59233: IFFALSE 59239
// exit ;
59235: POP
59236: POP
59237: GO 59243
// end ;
59239: GO 59208
59241: POP
59242: POP
// end ;
59243: LD_VAR 0 2
59247: RET
// export function FilterByTag ( units , tag ) ; begin
59248: LD_INT 0
59250: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59251: LD_ADDR_VAR 0 3
59255: PUSH
59256: LD_VAR 0 1
59260: PPUSH
59261: LD_INT 120
59263: PUSH
59264: LD_VAR 0 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PPUSH
59273: CALL_OW 72
59277: ST_TO_ADDR
// end ;
59278: LD_VAR 0 3
59282: RET
// export function IsDriver ( un ) ; begin
59283: LD_INT 0
59285: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59286: LD_ADDR_VAR 0 2
59290: PUSH
59291: LD_VAR 0 1
59295: PUSH
59296: LD_INT 55
59298: PUSH
59299: EMPTY
59300: LIST
59301: PPUSH
59302: CALL_OW 69
59306: IN
59307: ST_TO_ADDR
// end ;
59308: LD_VAR 0 2
59312: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59313: LD_INT 0
59315: PPUSH
59316: PPUSH
// list := [ ] ;
59317: LD_ADDR_VAR 0 5
59321: PUSH
59322: EMPTY
59323: ST_TO_ADDR
// case d of 0 :
59324: LD_VAR 0 3
59328: PUSH
59329: LD_INT 0
59331: DOUBLE
59332: EQUAL
59333: IFTRUE 59337
59335: GO 59470
59337: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59338: LD_ADDR_VAR 0 5
59342: PUSH
59343: LD_VAR 0 1
59347: PUSH
59348: LD_INT 4
59350: MINUS
59351: PUSH
59352: LD_VAR 0 2
59356: PUSH
59357: LD_INT 4
59359: MINUS
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: PUSH
59369: LD_VAR 0 1
59373: PUSH
59374: LD_INT 3
59376: MINUS
59377: PUSH
59378: LD_VAR 0 2
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: LIST
59390: PUSH
59391: LD_VAR 0 1
59395: PUSH
59396: LD_INT 4
59398: PLUS
59399: PUSH
59400: LD_VAR 0 2
59404: PUSH
59405: LD_INT 4
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: PUSH
59413: LD_VAR 0 1
59417: PUSH
59418: LD_INT 3
59420: PLUS
59421: PUSH
59422: LD_VAR 0 2
59426: PUSH
59427: LD_INT 3
59429: PLUS
59430: PUSH
59431: LD_INT 5
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: PUSH
59439: LD_VAR 0 1
59443: PUSH
59444: LD_VAR 0 2
59448: PUSH
59449: LD_INT 4
59451: PLUS
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: ST_TO_ADDR
// end ; 1 :
59468: GO 60168
59470: LD_INT 1
59472: DOUBLE
59473: EQUAL
59474: IFTRUE 59478
59476: GO 59611
59478: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59479: LD_ADDR_VAR 0 5
59483: PUSH
59484: LD_VAR 0 1
59488: PUSH
59489: LD_VAR 0 2
59493: PUSH
59494: LD_INT 4
59496: MINUS
59497: PUSH
59498: LD_INT 3
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: PUSH
59506: LD_VAR 0 1
59510: PUSH
59511: LD_INT 3
59513: MINUS
59514: PUSH
59515: LD_VAR 0 2
59519: PUSH
59520: LD_INT 3
59522: MINUS
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: PUSH
59532: LD_VAR 0 1
59536: PUSH
59537: LD_INT 4
59539: MINUS
59540: PUSH
59541: LD_VAR 0 2
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: LIST
59553: PUSH
59554: LD_VAR 0 1
59558: PUSH
59559: LD_VAR 0 2
59563: PUSH
59564: LD_INT 3
59566: PLUS
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: PUSH
59576: LD_VAR 0 1
59580: PUSH
59581: LD_INT 4
59583: PLUS
59584: PUSH
59585: LD_VAR 0 2
59589: PUSH
59590: LD_INT 4
59592: PLUS
59593: PUSH
59594: LD_INT 5
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: ST_TO_ADDR
// end ; 2 :
59609: GO 60168
59611: LD_INT 2
59613: DOUBLE
59614: EQUAL
59615: IFTRUE 59619
59617: GO 59748
59619: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59620: LD_ADDR_VAR 0 5
59624: PUSH
59625: LD_VAR 0 1
59629: PUSH
59630: LD_VAR 0 2
59634: PUSH
59635: LD_INT 3
59637: MINUS
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: LIST
59646: PUSH
59647: LD_VAR 0 1
59651: PUSH
59652: LD_INT 4
59654: PLUS
59655: PUSH
59656: LD_VAR 0 2
59660: PUSH
59661: LD_INT 4
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: PUSH
59669: LD_VAR 0 1
59673: PUSH
59674: LD_VAR 0 2
59678: PUSH
59679: LD_INT 4
59681: PLUS
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: PUSH
59691: LD_VAR 0 1
59695: PUSH
59696: LD_INT 3
59698: MINUS
59699: PUSH
59700: LD_VAR 0 2
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: PUSH
59713: LD_VAR 0 1
59717: PUSH
59718: LD_INT 4
59720: MINUS
59721: PUSH
59722: LD_VAR 0 2
59726: PUSH
59727: LD_INT 4
59729: MINUS
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// end ; 3 :
59746: GO 60168
59748: LD_INT 3
59750: DOUBLE
59751: EQUAL
59752: IFTRUE 59756
59754: GO 59889
59756: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59757: LD_ADDR_VAR 0 5
59761: PUSH
59762: LD_VAR 0 1
59766: PUSH
59767: LD_INT 3
59769: PLUS
59770: PUSH
59771: LD_VAR 0 2
59775: PUSH
59776: LD_INT 4
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: PUSH
59784: LD_VAR 0 1
59788: PUSH
59789: LD_INT 4
59791: PLUS
59792: PUSH
59793: LD_VAR 0 2
59797: PUSH
59798: LD_INT 4
59800: PLUS
59801: PUSH
59802: LD_INT 5
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: LIST
59809: PUSH
59810: LD_VAR 0 1
59814: PUSH
59815: LD_INT 4
59817: MINUS
59818: PUSH
59819: LD_VAR 0 2
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: PUSH
59832: LD_VAR 0 1
59836: PUSH
59837: LD_VAR 0 2
59841: PUSH
59842: LD_INT 4
59844: MINUS
59845: PUSH
59846: LD_INT 3
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: PUSH
59854: LD_VAR 0 1
59858: PUSH
59859: LD_INT 3
59861: MINUS
59862: PUSH
59863: LD_VAR 0 2
59867: PUSH
59868: LD_INT 3
59870: MINUS
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// end ; 4 :
59887: GO 60168
59889: LD_INT 4
59891: DOUBLE
59892: EQUAL
59893: IFTRUE 59897
59895: GO 60030
59897: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59898: LD_ADDR_VAR 0 5
59902: PUSH
59903: LD_VAR 0 1
59907: PUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_INT 4
59915: PLUS
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: PUSH
59925: LD_VAR 0 1
59929: PUSH
59930: LD_INT 3
59932: PLUS
59933: PUSH
59934: LD_VAR 0 2
59938: PUSH
59939: LD_INT 3
59941: PLUS
59942: PUSH
59943: LD_INT 5
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: LIST
59950: PUSH
59951: LD_VAR 0 1
59955: PUSH
59956: LD_INT 4
59958: PLUS
59959: PUSH
59960: LD_VAR 0 2
59964: PUSH
59965: LD_INT 4
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: PUSH
59973: LD_VAR 0 1
59977: PUSH
59978: LD_VAR 0 2
59982: PUSH
59983: LD_INT 3
59985: MINUS
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: PUSH
59995: LD_VAR 0 1
59999: PUSH
60000: LD_INT 4
60002: MINUS
60003: PUSH
60004: LD_VAR 0 2
60008: PUSH
60009: LD_INT 4
60011: MINUS
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: ST_TO_ADDR
// end ; 5 :
60028: GO 60168
60030: LD_INT 5
60032: DOUBLE
60033: EQUAL
60034: IFTRUE 60038
60036: GO 60167
60038: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60039: LD_ADDR_VAR 0 5
60043: PUSH
60044: LD_VAR 0 1
60048: PUSH
60049: LD_INT 4
60051: MINUS
60052: PUSH
60053: LD_VAR 0 2
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: PUSH
60066: LD_VAR 0 1
60070: PUSH
60071: LD_VAR 0 2
60075: PUSH
60076: LD_INT 4
60078: MINUS
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: PUSH
60088: LD_VAR 0 1
60092: PUSH
60093: LD_INT 4
60095: PLUS
60096: PUSH
60097: LD_VAR 0 2
60101: PUSH
60102: LD_INT 4
60104: PLUS
60105: PUSH
60106: LD_INT 5
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: PUSH
60114: LD_VAR 0 1
60118: PUSH
60119: LD_INT 3
60121: PLUS
60122: PUSH
60123: LD_VAR 0 2
60127: PUSH
60128: LD_INT 4
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: PUSH
60136: LD_VAR 0 1
60140: PUSH
60141: LD_VAR 0 2
60145: PUSH
60146: LD_INT 3
60148: PLUS
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: ST_TO_ADDR
// end ; end ;
60165: GO 60168
60167: POP
// result := list ;
60168: LD_ADDR_VAR 0 4
60172: PUSH
60173: LD_VAR 0 5
60177: ST_TO_ADDR
// end ;
60178: LD_VAR 0 4
60182: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60183: LD_INT 0
60185: PPUSH
60186: PPUSH
60187: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60188: LD_VAR 0 1
60192: NOT
60193: PUSH
60194: LD_VAR 0 2
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: IN
60217: NOT
60218: OR
60219: IFFALSE 60223
// exit ;
60221: GO 60306
// tmp := [ ] ;
60223: LD_ADDR_VAR 0 5
60227: PUSH
60228: EMPTY
60229: ST_TO_ADDR
// for i in units do
60230: LD_ADDR_VAR 0 4
60234: PUSH
60235: LD_VAR 0 1
60239: PUSH
60240: FOR_IN
60241: IFFALSE 60275
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60243: LD_ADDR_VAR 0 5
60247: PUSH
60248: LD_VAR 0 5
60252: PPUSH
60253: LD_VAR 0 4
60257: PPUSH
60258: LD_VAR 0 2
60262: PPUSH
60263: CALL_OW 259
60267: PPUSH
60268: CALL 61667 0 2
60272: ST_TO_ADDR
60273: GO 60240
60275: POP
60276: POP
// if not tmp then
60277: LD_VAR 0 5
60281: NOT
60282: IFFALSE 60286
// exit ;
60284: GO 60306
// result := SortListByListDesc ( units , tmp ) ;
60286: LD_ADDR_VAR 0 3
60290: PUSH
60291: LD_VAR 0 1
60295: PPUSH
60296: LD_VAR 0 5
60300: PPUSH
60301: CALL_OW 77
60305: ST_TO_ADDR
// end ;
60306: LD_VAR 0 3
60310: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60311: LD_INT 0
60313: PPUSH
60314: PPUSH
60315: PPUSH
// result := false ;
60316: LD_ADDR_VAR 0 3
60320: PUSH
60321: LD_INT 0
60323: ST_TO_ADDR
// if not building then
60324: LD_VAR 0 2
60328: NOT
60329: IFFALSE 60333
// exit ;
60331: GO 60471
// x := GetX ( building ) ;
60333: LD_ADDR_VAR 0 4
60337: PUSH
60338: LD_VAR 0 2
60342: PPUSH
60343: CALL_OW 250
60347: ST_TO_ADDR
// y := GetY ( building ) ;
60348: LD_ADDR_VAR 0 5
60352: PUSH
60353: LD_VAR 0 2
60357: PPUSH
60358: CALL_OW 251
60362: ST_TO_ADDR
// if not x or not y then
60363: LD_VAR 0 4
60367: NOT
60368: PUSH
60369: LD_VAR 0 5
60373: NOT
60374: OR
60375: IFFALSE 60379
// exit ;
60377: GO 60471
// if GetTaskList ( unit ) then
60379: LD_VAR 0 1
60383: PPUSH
60384: CALL_OW 437
60388: IFFALSE 60471
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60390: LD_STRING e
60392: PUSH
60393: LD_VAR 0 1
60397: PPUSH
60398: CALL_OW 437
60402: PUSH
60403: LD_INT 1
60405: ARRAY
60406: PUSH
60407: LD_INT 1
60409: ARRAY
60410: EQUAL
60411: PUSH
60412: LD_VAR 0 4
60416: PUSH
60417: LD_VAR 0 1
60421: PPUSH
60422: CALL_OW 437
60426: PUSH
60427: LD_INT 1
60429: ARRAY
60430: PUSH
60431: LD_INT 2
60433: ARRAY
60434: EQUAL
60435: AND
60436: PUSH
60437: LD_VAR 0 5
60441: PUSH
60442: LD_VAR 0 1
60446: PPUSH
60447: CALL_OW 437
60451: PUSH
60452: LD_INT 1
60454: ARRAY
60455: PUSH
60456: LD_INT 3
60458: ARRAY
60459: EQUAL
60460: AND
60461: IFFALSE 60471
// result := true end ;
60463: LD_ADDR_VAR 0 3
60467: PUSH
60468: LD_INT 1
60470: ST_TO_ADDR
// end ;
60471: LD_VAR 0 3
60475: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60476: LD_INT 0
60478: PPUSH
// result := false ;
60479: LD_ADDR_VAR 0 4
60483: PUSH
60484: LD_INT 0
60486: ST_TO_ADDR
// if GetTaskList ( unit ) then
60487: LD_VAR 0 1
60491: PPUSH
60492: CALL_OW 437
60496: IFFALSE 60579
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60498: LD_STRING M
60500: PUSH
60501: LD_VAR 0 1
60505: PPUSH
60506: CALL_OW 437
60510: PUSH
60511: LD_INT 1
60513: ARRAY
60514: PUSH
60515: LD_INT 1
60517: ARRAY
60518: EQUAL
60519: PUSH
60520: LD_VAR 0 2
60524: PUSH
60525: LD_VAR 0 1
60529: PPUSH
60530: CALL_OW 437
60534: PUSH
60535: LD_INT 1
60537: ARRAY
60538: PUSH
60539: LD_INT 2
60541: ARRAY
60542: EQUAL
60543: AND
60544: PUSH
60545: LD_VAR 0 3
60549: PUSH
60550: LD_VAR 0 1
60554: PPUSH
60555: CALL_OW 437
60559: PUSH
60560: LD_INT 1
60562: ARRAY
60563: PUSH
60564: LD_INT 3
60566: ARRAY
60567: EQUAL
60568: AND
60569: IFFALSE 60579
// result := true ;
60571: LD_ADDR_VAR 0 4
60575: PUSH
60576: LD_INT 1
60578: ST_TO_ADDR
// end ; end ;
60579: LD_VAR 0 4
60583: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60584: LD_INT 0
60586: PPUSH
60587: PPUSH
60588: PPUSH
60589: PPUSH
// if not unit or not area then
60590: LD_VAR 0 1
60594: NOT
60595: PUSH
60596: LD_VAR 0 2
60600: NOT
60601: OR
60602: IFFALSE 60606
// exit ;
60604: GO 60770
// tmp := AreaToList ( area , i ) ;
60606: LD_ADDR_VAR 0 6
60610: PUSH
60611: LD_VAR 0 2
60615: PPUSH
60616: LD_VAR 0 5
60620: PPUSH
60621: CALL_OW 517
60625: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60626: LD_ADDR_VAR 0 5
60630: PUSH
60631: DOUBLE
60632: LD_INT 1
60634: DEC
60635: ST_TO_ADDR
60636: LD_VAR 0 6
60640: PUSH
60641: LD_INT 1
60643: ARRAY
60644: PUSH
60645: FOR_TO
60646: IFFALSE 60768
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60648: LD_ADDR_VAR 0 7
60652: PUSH
60653: LD_VAR 0 6
60657: PUSH
60658: LD_INT 1
60660: ARRAY
60661: PUSH
60662: LD_VAR 0 5
60666: ARRAY
60667: PUSH
60668: LD_VAR 0 6
60672: PUSH
60673: LD_INT 2
60675: ARRAY
60676: PUSH
60677: LD_VAR 0 5
60681: ARRAY
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60687: LD_VAR 0 7
60691: PUSH
60692: LD_INT 1
60694: ARRAY
60695: PPUSH
60696: LD_VAR 0 7
60700: PUSH
60701: LD_INT 2
60703: ARRAY
60704: PPUSH
60705: CALL_OW 428
60709: PUSH
60710: LD_INT 0
60712: EQUAL
60713: IFFALSE 60766
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60715: LD_VAR 0 1
60719: PPUSH
60720: LD_VAR 0 7
60724: PUSH
60725: LD_INT 1
60727: ARRAY
60728: PPUSH
60729: LD_VAR 0 7
60733: PUSH
60734: LD_INT 2
60736: ARRAY
60737: PPUSH
60738: LD_VAR 0 3
60742: PPUSH
60743: CALL_OW 48
// result := IsPlaced ( unit ) ;
60747: LD_ADDR_VAR 0 4
60751: PUSH
60752: LD_VAR 0 1
60756: PPUSH
60757: CALL_OW 305
60761: ST_TO_ADDR
// exit ;
60762: POP
60763: POP
60764: GO 60770
// end ; end ;
60766: GO 60645
60768: POP
60769: POP
// end ;
60770: LD_VAR 0 4
60774: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60775: LD_INT 0
60777: PPUSH
60778: PPUSH
60779: PPUSH
// if not side or side > 8 then
60780: LD_VAR 0 1
60784: NOT
60785: PUSH
60786: LD_VAR 0 1
60790: PUSH
60791: LD_INT 8
60793: GREATER
60794: OR
60795: IFFALSE 60799
// exit ;
60797: GO 60986
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60799: LD_ADDR_VAR 0 4
60803: PUSH
60804: LD_INT 22
60806: PUSH
60807: LD_VAR 0 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 21
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PPUSH
60830: CALL_OW 69
60834: ST_TO_ADDR
// if not tmp then
60835: LD_VAR 0 4
60839: NOT
60840: IFFALSE 60844
// exit ;
60842: GO 60986
// enable_addtolog := true ;
60844: LD_ADDR_OWVAR 81
60848: PUSH
60849: LD_INT 1
60851: ST_TO_ADDR
// AddToLog ( [ ) ;
60852: LD_STRING [
60854: PPUSH
60855: CALL_OW 561
// for i in tmp do
60859: LD_ADDR_VAR 0 3
60863: PUSH
60864: LD_VAR 0 4
60868: PUSH
60869: FOR_IN
60870: IFFALSE 60977
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60872: LD_STRING [
60874: PUSH
60875: LD_VAR 0 3
60879: PPUSH
60880: CALL_OW 266
60884: STR
60885: PUSH
60886: LD_STRING , 
60888: STR
60889: PUSH
60890: LD_VAR 0 3
60894: PPUSH
60895: CALL_OW 250
60899: STR
60900: PUSH
60901: LD_STRING , 
60903: STR
60904: PUSH
60905: LD_VAR 0 3
60909: PPUSH
60910: CALL_OW 251
60914: STR
60915: PUSH
60916: LD_STRING , 
60918: STR
60919: PUSH
60920: LD_VAR 0 3
60924: PPUSH
60925: CALL_OW 254
60929: STR
60930: PUSH
60931: LD_STRING , 
60933: STR
60934: PUSH
60935: LD_VAR 0 3
60939: PPUSH
60940: LD_INT 1
60942: PPUSH
60943: CALL_OW 268
60947: STR
60948: PUSH
60949: LD_STRING , 
60951: STR
60952: PUSH
60953: LD_VAR 0 3
60957: PPUSH
60958: LD_INT 2
60960: PPUSH
60961: CALL_OW 268
60965: STR
60966: PUSH
60967: LD_STRING ],
60969: STR
60970: PPUSH
60971: CALL_OW 561
// end ;
60975: GO 60869
60977: POP
60978: POP
// AddToLog ( ]; ) ;
60979: LD_STRING ];
60981: PPUSH
60982: CALL_OW 561
// end ;
60986: LD_VAR 0 2
60990: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60991: LD_INT 0
60993: PPUSH
60994: PPUSH
60995: PPUSH
60996: PPUSH
60997: PPUSH
// if not area or not rate or not max then
60998: LD_VAR 0 1
61002: NOT
61003: PUSH
61004: LD_VAR 0 2
61008: NOT
61009: OR
61010: PUSH
61011: LD_VAR 0 4
61015: NOT
61016: OR
61017: IFFALSE 61021
// exit ;
61019: GO 61210
// while 1 do
61021: LD_INT 1
61023: IFFALSE 61210
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61025: LD_ADDR_VAR 0 9
61029: PUSH
61030: LD_VAR 0 1
61034: PPUSH
61035: LD_INT 1
61037: PPUSH
61038: CALL_OW 287
61042: PUSH
61043: LD_INT 10
61045: MUL
61046: ST_TO_ADDR
// r := rate / 10 ;
61047: LD_ADDR_VAR 0 7
61051: PUSH
61052: LD_VAR 0 2
61056: PUSH
61057: LD_INT 10
61059: DIVREAL
61060: ST_TO_ADDR
// time := 1 1$00 ;
61061: LD_ADDR_VAR 0 8
61065: PUSH
61066: LD_INT 2100
61068: ST_TO_ADDR
// if amount < min then
61069: LD_VAR 0 9
61073: PUSH
61074: LD_VAR 0 3
61078: LESS
61079: IFFALSE 61097
// r := r * 2 else
61081: LD_ADDR_VAR 0 7
61085: PUSH
61086: LD_VAR 0 7
61090: PUSH
61091: LD_INT 2
61093: MUL
61094: ST_TO_ADDR
61095: GO 61123
// if amount > max then
61097: LD_VAR 0 9
61101: PUSH
61102: LD_VAR 0 4
61106: GREATER
61107: IFFALSE 61123
// r := r / 2 ;
61109: LD_ADDR_VAR 0 7
61113: PUSH
61114: LD_VAR 0 7
61118: PUSH
61119: LD_INT 2
61121: DIVREAL
61122: ST_TO_ADDR
// time := time / r ;
61123: LD_ADDR_VAR 0 8
61127: PUSH
61128: LD_VAR 0 8
61132: PUSH
61133: LD_VAR 0 7
61137: DIVREAL
61138: ST_TO_ADDR
// if time < 0 then
61139: LD_VAR 0 8
61143: PUSH
61144: LD_INT 0
61146: LESS
61147: IFFALSE 61164
// time := time * - 1 ;
61149: LD_ADDR_VAR 0 8
61153: PUSH
61154: LD_VAR 0 8
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: MUL
61163: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61164: LD_VAR 0 8
61168: PUSH
61169: LD_INT 35
61171: PPUSH
61172: LD_INT 875
61174: PPUSH
61175: CALL_OW 12
61179: PLUS
61180: PPUSH
61181: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61185: LD_INT 1
61187: PPUSH
61188: LD_INT 5
61190: PPUSH
61191: CALL_OW 12
61195: PPUSH
61196: LD_VAR 0 1
61200: PPUSH
61201: LD_INT 1
61203: PPUSH
61204: CALL_OW 55
// end ;
61208: GO 61021
// end ;
61210: LD_VAR 0 5
61214: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61215: LD_INT 0
61217: PPUSH
61218: PPUSH
61219: PPUSH
61220: PPUSH
61221: PPUSH
61222: PPUSH
61223: PPUSH
61224: PPUSH
// if not turrets or not factories then
61225: LD_VAR 0 1
61229: NOT
61230: PUSH
61231: LD_VAR 0 2
61235: NOT
61236: OR
61237: IFFALSE 61241
// exit ;
61239: GO 61548
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61241: LD_ADDR_VAR 0 10
61245: PUSH
61246: LD_INT 5
61248: PUSH
61249: LD_INT 6
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 4
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: LD_INT 5
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 24
61283: PUSH
61284: LD_INT 25
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 23
61293: PUSH
61294: LD_INT 27
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 42
61307: PUSH
61308: LD_INT 43
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 44
61317: PUSH
61318: LD_INT 46
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 45
61327: PUSH
61328: LD_INT 47
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: ST_TO_ADDR
// result := [ ] ;
61345: LD_ADDR_VAR 0 3
61349: PUSH
61350: EMPTY
61351: ST_TO_ADDR
// for i in turrets do
61352: LD_ADDR_VAR 0 4
61356: PUSH
61357: LD_VAR 0 1
61361: PUSH
61362: FOR_IN
61363: IFFALSE 61546
// begin nat := GetNation ( i ) ;
61365: LD_ADDR_VAR 0 7
61369: PUSH
61370: LD_VAR 0 4
61374: PPUSH
61375: CALL_OW 248
61379: ST_TO_ADDR
// weapon := 0 ;
61380: LD_ADDR_VAR 0 8
61384: PUSH
61385: LD_INT 0
61387: ST_TO_ADDR
// if not nat then
61388: LD_VAR 0 7
61392: NOT
61393: IFFALSE 61397
// continue ;
61395: GO 61362
// for j in list [ nat ] do
61397: LD_ADDR_VAR 0 5
61401: PUSH
61402: LD_VAR 0 10
61406: PUSH
61407: LD_VAR 0 7
61411: ARRAY
61412: PUSH
61413: FOR_IN
61414: IFFALSE 61455
// if GetBWeapon ( i ) = j [ 1 ] then
61416: LD_VAR 0 4
61420: PPUSH
61421: CALL_OW 269
61425: PUSH
61426: LD_VAR 0 5
61430: PUSH
61431: LD_INT 1
61433: ARRAY
61434: EQUAL
61435: IFFALSE 61453
// begin weapon := j [ 2 ] ;
61437: LD_ADDR_VAR 0 8
61441: PUSH
61442: LD_VAR 0 5
61446: PUSH
61447: LD_INT 2
61449: ARRAY
61450: ST_TO_ADDR
// break ;
61451: GO 61455
// end ;
61453: GO 61413
61455: POP
61456: POP
// if not weapon then
61457: LD_VAR 0 8
61461: NOT
61462: IFFALSE 61466
// continue ;
61464: GO 61362
// for k in factories do
61466: LD_ADDR_VAR 0 6
61470: PUSH
61471: LD_VAR 0 2
61475: PUSH
61476: FOR_IN
61477: IFFALSE 61542
// begin weapons := AvailableWeaponList ( k ) ;
61479: LD_ADDR_VAR 0 9
61483: PUSH
61484: LD_VAR 0 6
61488: PPUSH
61489: CALL_OW 478
61493: ST_TO_ADDR
// if not weapons then
61494: LD_VAR 0 9
61498: NOT
61499: IFFALSE 61503
// continue ;
61501: GO 61476
// if weapon in weapons then
61503: LD_VAR 0 8
61507: PUSH
61508: LD_VAR 0 9
61512: IN
61513: IFFALSE 61540
// begin result := [ i , weapon ] ;
61515: LD_ADDR_VAR 0 3
61519: PUSH
61520: LD_VAR 0 4
61524: PUSH
61525: LD_VAR 0 8
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: ST_TO_ADDR
// exit ;
61534: POP
61535: POP
61536: POP
61537: POP
61538: GO 61548
// end ; end ;
61540: GO 61476
61542: POP
61543: POP
// end ;
61544: GO 61362
61546: POP
61547: POP
// end ;
61548: LD_VAR 0 3
61552: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61553: LD_INT 0
61555: PPUSH
// if not side or side > 8 then
61556: LD_VAR 0 3
61560: NOT
61561: PUSH
61562: LD_VAR 0 3
61566: PUSH
61567: LD_INT 8
61569: GREATER
61570: OR
61571: IFFALSE 61575
// exit ;
61573: GO 61634
// if not range then
61575: LD_VAR 0 4
61579: NOT
61580: IFFALSE 61591
// range := - 12 ;
61582: LD_ADDR_VAR 0 4
61586: PUSH
61587: LD_INT 12
61589: NEG
61590: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61591: LD_VAR 0 1
61595: PPUSH
61596: LD_VAR 0 2
61600: PPUSH
61601: LD_VAR 0 3
61605: PPUSH
61606: LD_VAR 0 4
61610: PPUSH
61611: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61615: LD_VAR 0 1
61619: PPUSH
61620: LD_VAR 0 2
61624: PPUSH
61625: LD_VAR 0 3
61629: PPUSH
61630: CALL_OW 331
// end ;
61634: LD_VAR 0 5
61638: RET
// export function Video ( mode ) ; begin
61639: LD_INT 0
61641: PPUSH
// ingame_video = mode ;
61642: LD_ADDR_OWVAR 52
61646: PUSH
61647: LD_VAR 0 1
61651: ST_TO_ADDR
// interface_hidden = mode ;
61652: LD_ADDR_OWVAR 54
61656: PUSH
61657: LD_VAR 0 1
61661: ST_TO_ADDR
// end ;
61662: LD_VAR 0 2
61666: RET
// export function Join ( array , element ) ; begin
61667: LD_INT 0
61669: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61670: LD_ADDR_VAR 0 3
61674: PUSH
61675: LD_VAR 0 1
61679: PPUSH
61680: LD_VAR 0 1
61684: PUSH
61685: LD_INT 1
61687: PLUS
61688: PPUSH
61689: LD_VAR 0 2
61693: PPUSH
61694: CALL_OW 1
61698: ST_TO_ADDR
// end ;
61699: LD_VAR 0 3
61703: RET
// export function JoinUnion ( array , element ) ; begin
61704: LD_INT 0
61706: PPUSH
// result := array union element ;
61707: LD_ADDR_VAR 0 3
61711: PUSH
61712: LD_VAR 0 1
61716: PUSH
61717: LD_VAR 0 2
61721: UNION
61722: ST_TO_ADDR
// end ;
61723: LD_VAR 0 3
61727: RET
// export function GetBehemoths ( side ) ; begin
61728: LD_INT 0
61730: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61731: LD_ADDR_VAR 0 2
61735: PUSH
61736: LD_INT 22
61738: PUSH
61739: LD_VAR 0 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 31
61750: PUSH
61751: LD_INT 25
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PPUSH
61762: CALL_OW 69
61766: ST_TO_ADDR
// end ;
61767: LD_VAR 0 2
61771: RET
// export function Shuffle ( array ) ; var i , index ; begin
61772: LD_INT 0
61774: PPUSH
61775: PPUSH
61776: PPUSH
// result := [ ] ;
61777: LD_ADDR_VAR 0 2
61781: PUSH
61782: EMPTY
61783: ST_TO_ADDR
// if not array then
61784: LD_VAR 0 1
61788: NOT
61789: IFFALSE 61793
// exit ;
61791: GO 61892
// Randomize ;
61793: CALL_OW 10
// for i = array downto 1 do
61797: LD_ADDR_VAR 0 3
61801: PUSH
61802: DOUBLE
61803: LD_VAR 0 1
61807: INC
61808: ST_TO_ADDR
61809: LD_INT 1
61811: PUSH
61812: FOR_DOWNTO
61813: IFFALSE 61890
// begin index := rand ( 1 , array ) ;
61815: LD_ADDR_VAR 0 4
61819: PUSH
61820: LD_INT 1
61822: PPUSH
61823: LD_VAR 0 1
61827: PPUSH
61828: CALL_OW 12
61832: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61833: LD_ADDR_VAR 0 2
61837: PUSH
61838: LD_VAR 0 2
61842: PPUSH
61843: LD_VAR 0 2
61847: PUSH
61848: LD_INT 1
61850: PLUS
61851: PPUSH
61852: LD_VAR 0 1
61856: PUSH
61857: LD_VAR 0 4
61861: ARRAY
61862: PPUSH
61863: CALL_OW 2
61867: ST_TO_ADDR
// array := Delete ( array , index ) ;
61868: LD_ADDR_VAR 0 1
61872: PUSH
61873: LD_VAR 0 1
61877: PPUSH
61878: LD_VAR 0 4
61882: PPUSH
61883: CALL_OW 3
61887: ST_TO_ADDR
// end ;
61888: GO 61812
61890: POP
61891: POP
// end ;
61892: LD_VAR 0 2
61896: RET
// export function GetBaseMaterials ( base ) ; begin
61897: LD_INT 0
61899: PPUSH
// result := [ 0 , 0 , 0 ] ;
61900: LD_ADDR_VAR 0 2
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: LIST
61918: ST_TO_ADDR
// if not base then
61919: LD_VAR 0 1
61923: NOT
61924: IFFALSE 61928
// exit ;
61926: GO 61977
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61928: LD_ADDR_VAR 0 2
61932: PUSH
61933: LD_VAR 0 1
61937: PPUSH
61938: LD_INT 1
61940: PPUSH
61941: CALL_OW 275
61945: PUSH
61946: LD_VAR 0 1
61950: PPUSH
61951: LD_INT 2
61953: PPUSH
61954: CALL_OW 275
61958: PUSH
61959: LD_VAR 0 1
61963: PPUSH
61964: LD_INT 3
61966: PPUSH
61967: CALL_OW 275
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: ST_TO_ADDR
// end ;
61977: LD_VAR 0 2
61981: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61982: LD_INT 0
61984: PPUSH
61985: PPUSH
// result := array ;
61986: LD_ADDR_VAR 0 3
61990: PUSH
61991: LD_VAR 0 1
61995: ST_TO_ADDR
// if size >= result then
61996: LD_VAR 0 2
62000: PUSH
62001: LD_VAR 0 3
62005: GREATEREQUAL
62006: IFFALSE 62010
// exit ;
62008: GO 62060
// if size then
62010: LD_VAR 0 2
62014: IFFALSE 62060
// for i := array downto size do
62016: LD_ADDR_VAR 0 4
62020: PUSH
62021: DOUBLE
62022: LD_VAR 0 1
62026: INC
62027: ST_TO_ADDR
62028: LD_VAR 0 2
62032: PUSH
62033: FOR_DOWNTO
62034: IFFALSE 62058
// result := Delete ( result , result ) ;
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: LD_VAR 0 3
62045: PPUSH
62046: LD_VAR 0 3
62050: PPUSH
62051: CALL_OW 3
62055: ST_TO_ADDR
62056: GO 62033
62058: POP
62059: POP
// end ;
62060: LD_VAR 0 3
62064: RET
// export function ComExit ( unit ) ; var tmp ; begin
62065: LD_INT 0
62067: PPUSH
62068: PPUSH
// if not IsInUnit ( unit ) then
62069: LD_VAR 0 1
62073: PPUSH
62074: CALL_OW 310
62078: NOT
62079: IFFALSE 62083
// exit ;
62081: GO 62143
// tmp := IsInUnit ( unit ) ;
62083: LD_ADDR_VAR 0 3
62087: PUSH
62088: LD_VAR 0 1
62092: PPUSH
62093: CALL_OW 310
62097: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62098: LD_VAR 0 3
62102: PPUSH
62103: CALL_OW 247
62107: PUSH
62108: LD_INT 2
62110: EQUAL
62111: IFFALSE 62124
// ComExitVehicle ( unit ) else
62113: LD_VAR 0 1
62117: PPUSH
62118: CALL_OW 121
62122: GO 62133
// ComExitBuilding ( unit ) ;
62124: LD_VAR 0 1
62128: PPUSH
62129: CALL_OW 122
// result := tmp ;
62133: LD_ADDR_VAR 0 2
62137: PUSH
62138: LD_VAR 0 3
62142: ST_TO_ADDR
// end ;
62143: LD_VAR 0 2
62147: RET
// export function ComExitAll ( units ) ; var i ; begin
62148: LD_INT 0
62150: PPUSH
62151: PPUSH
// if not units then
62152: LD_VAR 0 1
62156: NOT
62157: IFFALSE 62161
// exit ;
62159: GO 62187
// for i in units do
62161: LD_ADDR_VAR 0 3
62165: PUSH
62166: LD_VAR 0 1
62170: PUSH
62171: FOR_IN
62172: IFFALSE 62185
// ComExit ( i ) ;
62174: LD_VAR 0 3
62178: PPUSH
62179: CALL 62065 0 1
62183: GO 62171
62185: POP
62186: POP
// end ;
62187: LD_VAR 0 2
62191: RET
// export function ResetHc ; begin
62192: LD_INT 0
62194: PPUSH
// InitHc ;
62195: CALL_OW 19
// hc_importance := 0 ;
62199: LD_ADDR_OWVAR 32
62203: PUSH
62204: LD_INT 0
62206: ST_TO_ADDR
// end ;
62207: LD_VAR 0 1
62211: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62212: LD_INT 0
62214: PPUSH
62215: PPUSH
62216: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62217: LD_ADDR_VAR 0 6
62221: PUSH
62222: LD_VAR 0 1
62226: PUSH
62227: LD_VAR 0 3
62231: PLUS
62232: PUSH
62233: LD_INT 2
62235: DIV
62236: ST_TO_ADDR
// if _x < 0 then
62237: LD_VAR 0 6
62241: PUSH
62242: LD_INT 0
62244: LESS
62245: IFFALSE 62262
// _x := _x * - 1 ;
62247: LD_ADDR_VAR 0 6
62251: PUSH
62252: LD_VAR 0 6
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: MUL
62261: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62262: LD_ADDR_VAR 0 7
62266: PUSH
62267: LD_VAR 0 2
62271: PUSH
62272: LD_VAR 0 4
62276: PLUS
62277: PUSH
62278: LD_INT 2
62280: DIV
62281: ST_TO_ADDR
// if _y < 0 then
62282: LD_VAR 0 7
62286: PUSH
62287: LD_INT 0
62289: LESS
62290: IFFALSE 62307
// _y := _y * - 1 ;
62292: LD_ADDR_VAR 0 7
62296: PUSH
62297: LD_VAR 0 7
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: MUL
62306: ST_TO_ADDR
// result := [ _x , _y ] ;
62307: LD_ADDR_VAR 0 5
62311: PUSH
62312: LD_VAR 0 6
62316: PUSH
62317: LD_VAR 0 7
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: ST_TO_ADDR
// end ;
62326: LD_VAR 0 5
62330: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62331: LD_INT 0
62333: PPUSH
62334: PPUSH
62335: PPUSH
62336: PPUSH
// task := GetTaskList ( unit ) ;
62337: LD_ADDR_VAR 0 7
62341: PUSH
62342: LD_VAR 0 1
62346: PPUSH
62347: CALL_OW 437
62351: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62352: LD_VAR 0 7
62356: NOT
62357: PUSH
62358: LD_VAR 0 1
62362: PPUSH
62363: LD_VAR 0 2
62367: PPUSH
62368: CALL_OW 308
62372: NOT
62373: AND
62374: IFFALSE 62378
// exit ;
62376: GO 62496
// if IsInArea ( unit , area ) then
62378: LD_VAR 0 1
62382: PPUSH
62383: LD_VAR 0 2
62387: PPUSH
62388: CALL_OW 308
62392: IFFALSE 62410
// begin ComMoveToArea ( unit , goAway ) ;
62394: LD_VAR 0 1
62398: PPUSH
62399: LD_VAR 0 3
62403: PPUSH
62404: CALL_OW 113
// exit ;
62408: GO 62496
// end ; if task [ 1 ] [ 1 ] <> M then
62410: LD_VAR 0 7
62414: PUSH
62415: LD_INT 1
62417: ARRAY
62418: PUSH
62419: LD_INT 1
62421: ARRAY
62422: PUSH
62423: LD_STRING M
62425: NONEQUAL
62426: IFFALSE 62430
// exit ;
62428: GO 62496
// x := task [ 1 ] [ 2 ] ;
62430: LD_ADDR_VAR 0 5
62434: PUSH
62435: LD_VAR 0 7
62439: PUSH
62440: LD_INT 1
62442: ARRAY
62443: PUSH
62444: LD_INT 2
62446: ARRAY
62447: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62448: LD_ADDR_VAR 0 6
62452: PUSH
62453: LD_VAR 0 7
62457: PUSH
62458: LD_INT 1
62460: ARRAY
62461: PUSH
62462: LD_INT 3
62464: ARRAY
62465: ST_TO_ADDR
// if InArea ( x , y , area ) then
62466: LD_VAR 0 5
62470: PPUSH
62471: LD_VAR 0 6
62475: PPUSH
62476: LD_VAR 0 2
62480: PPUSH
62481: CALL_OW 309
62485: IFFALSE 62496
// ComStop ( unit ) ;
62487: LD_VAR 0 1
62491: PPUSH
62492: CALL_OW 141
// end ;
62496: LD_VAR 0 4
62500: RET
// export function Abs ( value ) ; begin
62501: LD_INT 0
62503: PPUSH
// result := value ;
62504: LD_ADDR_VAR 0 2
62508: PUSH
62509: LD_VAR 0 1
62513: ST_TO_ADDR
// if value < 0 then
62514: LD_VAR 0 1
62518: PUSH
62519: LD_INT 0
62521: LESS
62522: IFFALSE 62539
// result := value * - 1 ;
62524: LD_ADDR_VAR 0 2
62528: PUSH
62529: LD_VAR 0 1
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: MUL
62538: ST_TO_ADDR
// end ;
62539: LD_VAR 0 2
62543: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62544: LD_INT 0
62546: PPUSH
62547: PPUSH
62548: PPUSH
62549: PPUSH
62550: PPUSH
62551: PPUSH
62552: PPUSH
62553: PPUSH
// if not unit or not building then
62554: LD_VAR 0 1
62558: NOT
62559: PUSH
62560: LD_VAR 0 2
62564: NOT
62565: OR
62566: IFFALSE 62570
// exit ;
62568: GO 62796
// x := GetX ( building ) ;
62570: LD_ADDR_VAR 0 4
62574: PUSH
62575: LD_VAR 0 2
62579: PPUSH
62580: CALL_OW 250
62584: ST_TO_ADDR
// y := GetY ( building ) ;
62585: LD_ADDR_VAR 0 6
62589: PUSH
62590: LD_VAR 0 2
62594: PPUSH
62595: CALL_OW 251
62599: ST_TO_ADDR
// d := GetDir ( building ) ;
62600: LD_ADDR_VAR 0 8
62604: PUSH
62605: LD_VAR 0 2
62609: PPUSH
62610: CALL_OW 254
62614: ST_TO_ADDR
// r := 4 ;
62615: LD_ADDR_VAR 0 9
62619: PUSH
62620: LD_INT 4
62622: ST_TO_ADDR
// for i := 1 to 5 do
62623: LD_ADDR_VAR 0 10
62627: PUSH
62628: DOUBLE
62629: LD_INT 1
62631: DEC
62632: ST_TO_ADDR
62633: LD_INT 5
62635: PUSH
62636: FOR_TO
62637: IFFALSE 62794
// begin _x := ShiftX ( x , d , r + i ) ;
62639: LD_ADDR_VAR 0 5
62643: PUSH
62644: LD_VAR 0 4
62648: PPUSH
62649: LD_VAR 0 8
62653: PPUSH
62654: LD_VAR 0 9
62658: PUSH
62659: LD_VAR 0 10
62663: PLUS
62664: PPUSH
62665: CALL_OW 272
62669: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62670: LD_ADDR_VAR 0 7
62674: PUSH
62675: LD_VAR 0 6
62679: PPUSH
62680: LD_VAR 0 8
62684: PPUSH
62685: LD_VAR 0 9
62689: PUSH
62690: LD_VAR 0 10
62694: PLUS
62695: PPUSH
62696: CALL_OW 273
62700: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62701: LD_VAR 0 5
62705: PPUSH
62706: LD_VAR 0 7
62710: PPUSH
62711: CALL_OW 488
62715: PUSH
62716: LD_VAR 0 5
62720: PPUSH
62721: LD_VAR 0 7
62725: PPUSH
62726: CALL_OW 428
62730: PPUSH
62731: CALL_OW 247
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: IN
62746: NOT
62747: AND
62748: IFFALSE 62792
// begin ComMoveXY ( unit , _x , _y ) ;
62750: LD_VAR 0 1
62754: PPUSH
62755: LD_VAR 0 5
62759: PPUSH
62760: LD_VAR 0 7
62764: PPUSH
62765: CALL_OW 111
// result := [ _x , _y ] ;
62769: LD_ADDR_VAR 0 3
62773: PUSH
62774: LD_VAR 0 5
62778: PUSH
62779: LD_VAR 0 7
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: ST_TO_ADDR
// exit ;
62788: POP
62789: POP
62790: GO 62796
// end ; end ;
62792: GO 62636
62794: POP
62795: POP
// end ;
62796: LD_VAR 0 3
62800: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62801: LD_INT 0
62803: PPUSH
62804: PPUSH
62805: PPUSH
// result := 0 ;
62806: LD_ADDR_VAR 0 3
62810: PUSH
62811: LD_INT 0
62813: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62814: LD_VAR 0 1
62818: PUSH
62819: LD_INT 0
62821: LESS
62822: PUSH
62823: LD_VAR 0 1
62827: PUSH
62828: LD_INT 8
62830: GREATER
62831: OR
62832: PUSH
62833: LD_VAR 0 2
62837: PUSH
62838: LD_INT 0
62840: LESS
62841: OR
62842: PUSH
62843: LD_VAR 0 2
62847: PUSH
62848: LD_INT 8
62850: GREATER
62851: OR
62852: IFFALSE 62856
// exit ;
62854: GO 62931
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62856: LD_ADDR_VAR 0 4
62860: PUSH
62861: LD_INT 22
62863: PUSH
62864: LD_VAR 0 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PPUSH
62873: CALL_OW 69
62877: PUSH
62878: FOR_IN
62879: IFFALSE 62929
// begin un := UnitShoot ( i ) ;
62881: LD_ADDR_VAR 0 5
62885: PUSH
62886: LD_VAR 0 4
62890: PPUSH
62891: CALL_OW 504
62895: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62896: LD_VAR 0 5
62900: PPUSH
62901: CALL_OW 255
62905: PUSH
62906: LD_VAR 0 1
62910: EQUAL
62911: IFFALSE 62927
// begin result := un ;
62913: LD_ADDR_VAR 0 3
62917: PUSH
62918: LD_VAR 0 5
62922: ST_TO_ADDR
// exit ;
62923: POP
62924: POP
62925: GO 62931
// end ; end ;
62927: GO 62878
62929: POP
62930: POP
// end ;
62931: LD_VAR 0 3
62935: RET
// export function GetCargoBay ( units ) ; begin
62936: LD_INT 0
62938: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62939: LD_ADDR_VAR 0 2
62943: PUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: LD_INT 2
62951: PUSH
62952: LD_INT 34
62954: PUSH
62955: LD_INT 12
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 34
62964: PUSH
62965: LD_INT 51
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 34
62974: PUSH
62975: LD_INT 32
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 34
62984: PUSH
62985: LD_INT 89
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: PPUSH
62999: CALL_OW 72
63003: ST_TO_ADDR
// end ;
63004: LD_VAR 0 2
63008: RET
// export function Negate ( value ) ; begin
63009: LD_INT 0
63011: PPUSH
// result := not value ;
63012: LD_ADDR_VAR 0 2
63016: PUSH
63017: LD_VAR 0 1
63021: NOT
63022: ST_TO_ADDR
// end ;
63023: LD_VAR 0 2
63027: RET
// export function Inc ( value ) ; begin
63028: LD_INT 0
63030: PPUSH
// result := value + 1 ;
63031: LD_ADDR_VAR 0 2
63035: PUSH
63036: LD_VAR 0 1
63040: PUSH
63041: LD_INT 1
63043: PLUS
63044: ST_TO_ADDR
// end ;
63045: LD_VAR 0 2
63049: RET
// export function Dec ( value ) ; begin
63050: LD_INT 0
63052: PPUSH
// result := value - 1 ;
63053: LD_ADDR_VAR 0 2
63057: PUSH
63058: LD_VAR 0 1
63062: PUSH
63063: LD_INT 1
63065: MINUS
63066: ST_TO_ADDR
// end ;
63067: LD_VAR 0 2
63071: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63072: LD_INT 0
63074: PPUSH
63075: PPUSH
63076: PPUSH
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
63081: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63082: LD_VAR 0 1
63086: PPUSH
63087: LD_VAR 0 2
63091: PPUSH
63092: CALL_OW 488
63096: NOT
63097: PUSH
63098: LD_VAR 0 3
63102: PPUSH
63103: LD_VAR 0 4
63107: PPUSH
63108: CALL_OW 488
63112: NOT
63113: OR
63114: IFFALSE 63127
// begin result := - 1 ;
63116: LD_ADDR_VAR 0 5
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: ST_TO_ADDR
// exit ;
63125: GO 63362
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63127: LD_ADDR_VAR 0 12
63131: PUSH
63132: LD_VAR 0 1
63136: PPUSH
63137: LD_VAR 0 2
63141: PPUSH
63142: LD_VAR 0 3
63146: PPUSH
63147: LD_VAR 0 4
63151: PPUSH
63152: CALL 62212 0 4
63156: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63157: LD_ADDR_VAR 0 11
63161: PUSH
63162: LD_VAR 0 1
63166: PPUSH
63167: LD_VAR 0 2
63171: PPUSH
63172: LD_VAR 0 12
63176: PUSH
63177: LD_INT 1
63179: ARRAY
63180: PPUSH
63181: LD_VAR 0 12
63185: PUSH
63186: LD_INT 2
63188: ARRAY
63189: PPUSH
63190: CALL_OW 298
63194: ST_TO_ADDR
// distance := 9999 ;
63195: LD_ADDR_VAR 0 10
63199: PUSH
63200: LD_INT 9999
63202: ST_TO_ADDR
// for i := 0 to 5 do
63203: LD_ADDR_VAR 0 6
63207: PUSH
63208: DOUBLE
63209: LD_INT 0
63211: DEC
63212: ST_TO_ADDR
63213: LD_INT 5
63215: PUSH
63216: FOR_TO
63217: IFFALSE 63360
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63219: LD_ADDR_VAR 0 7
63223: PUSH
63224: LD_VAR 0 1
63228: PPUSH
63229: LD_VAR 0 6
63233: PPUSH
63234: LD_VAR 0 11
63238: PPUSH
63239: CALL_OW 272
63243: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63244: LD_ADDR_VAR 0 8
63248: PUSH
63249: LD_VAR 0 2
63253: PPUSH
63254: LD_VAR 0 6
63258: PPUSH
63259: LD_VAR 0 11
63263: PPUSH
63264: CALL_OW 273
63268: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63269: LD_VAR 0 7
63273: PPUSH
63274: LD_VAR 0 8
63278: PPUSH
63279: CALL_OW 488
63283: NOT
63284: IFFALSE 63288
// continue ;
63286: GO 63216
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63288: LD_ADDR_VAR 0 9
63292: PUSH
63293: LD_VAR 0 12
63297: PUSH
63298: LD_INT 1
63300: ARRAY
63301: PPUSH
63302: LD_VAR 0 12
63306: PUSH
63307: LD_INT 2
63309: ARRAY
63310: PPUSH
63311: LD_VAR 0 7
63315: PPUSH
63316: LD_VAR 0 8
63320: PPUSH
63321: CALL_OW 298
63325: ST_TO_ADDR
// if tmp < distance then
63326: LD_VAR 0 9
63330: PUSH
63331: LD_VAR 0 10
63335: LESS
63336: IFFALSE 63358
// begin result := i ;
63338: LD_ADDR_VAR 0 5
63342: PUSH
63343: LD_VAR 0 6
63347: ST_TO_ADDR
// distance := tmp ;
63348: LD_ADDR_VAR 0 10
63352: PUSH
63353: LD_VAR 0 9
63357: ST_TO_ADDR
// end ; end ;
63358: GO 63216
63360: POP
63361: POP
// end ;
63362: LD_VAR 0 5
63366: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63367: LD_INT 0
63369: PPUSH
63370: PPUSH
// if not driver or not IsInUnit ( driver ) then
63371: LD_VAR 0 1
63375: NOT
63376: PUSH
63377: LD_VAR 0 1
63381: PPUSH
63382: CALL_OW 310
63386: NOT
63387: OR
63388: IFFALSE 63392
// exit ;
63390: GO 63482
// vehicle := IsInUnit ( driver ) ;
63392: LD_ADDR_VAR 0 3
63396: PUSH
63397: LD_VAR 0 1
63401: PPUSH
63402: CALL_OW 310
63406: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63407: LD_VAR 0 1
63411: PPUSH
63412: LD_STRING \
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: PUSH
63442: LD_STRING E
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_VAR 0 3
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PPUSH
63478: CALL_OW 446
// end ;
63482: LD_VAR 0 2
63486: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63487: LD_INT 0
63489: PPUSH
63490: PPUSH
// if not driver or not IsInUnit ( driver ) then
63491: LD_VAR 0 1
63495: NOT
63496: PUSH
63497: LD_VAR 0 1
63501: PPUSH
63502: CALL_OW 310
63506: NOT
63507: OR
63508: IFFALSE 63512
// exit ;
63510: GO 63602
// vehicle := IsInUnit ( driver ) ;
63512: LD_ADDR_VAR 0 3
63516: PUSH
63517: LD_VAR 0 1
63521: PPUSH
63522: CALL_OW 310
63526: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63527: LD_VAR 0 1
63531: PPUSH
63532: LD_STRING \
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: PUSH
63562: LD_STRING E
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_VAR 0 3
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PPUSH
63598: CALL_OW 447
// end ;
63602: LD_VAR 0 2
63606: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63607: LD_INT 0
63609: PPUSH
63610: PPUSH
63611: PPUSH
// tmp := [ ] ;
63612: LD_ADDR_VAR 0 5
63616: PUSH
63617: EMPTY
63618: ST_TO_ADDR
// for i in units do
63619: LD_ADDR_VAR 0 4
63623: PUSH
63624: LD_VAR 0 1
63628: PUSH
63629: FOR_IN
63630: IFFALSE 63668
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63632: LD_ADDR_VAR 0 5
63636: PUSH
63637: LD_VAR 0 5
63641: PPUSH
63642: LD_VAR 0 5
63646: PUSH
63647: LD_INT 1
63649: PLUS
63650: PPUSH
63651: LD_VAR 0 4
63655: PPUSH
63656: CALL_OW 256
63660: PPUSH
63661: CALL_OW 2
63665: ST_TO_ADDR
63666: GO 63629
63668: POP
63669: POP
// if not tmp then
63670: LD_VAR 0 5
63674: NOT
63675: IFFALSE 63679
// exit ;
63677: GO 63727
// if asc then
63679: LD_VAR 0 2
63683: IFFALSE 63707
// result := SortListByListAsc ( units , tmp ) else
63685: LD_ADDR_VAR 0 3
63689: PUSH
63690: LD_VAR 0 1
63694: PPUSH
63695: LD_VAR 0 5
63699: PPUSH
63700: CALL_OW 76
63704: ST_TO_ADDR
63705: GO 63727
// result := SortListByListDesc ( units , tmp ) ;
63707: LD_ADDR_VAR 0 3
63711: PUSH
63712: LD_VAR 0 1
63716: PPUSH
63717: LD_VAR 0 5
63721: PPUSH
63722: CALL_OW 77
63726: ST_TO_ADDR
// end ;
63727: LD_VAR 0 3
63731: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63732: LD_INT 0
63734: PPUSH
63735: PPUSH
// task := GetTaskList ( mech ) ;
63736: LD_ADDR_VAR 0 4
63740: PUSH
63741: LD_VAR 0 1
63745: PPUSH
63746: CALL_OW 437
63750: ST_TO_ADDR
// if not task then
63751: LD_VAR 0 4
63755: NOT
63756: IFFALSE 63760
// exit ;
63758: GO 63802
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63760: LD_ADDR_VAR 0 3
63764: PUSH
63765: LD_VAR 0 4
63769: PUSH
63770: LD_INT 1
63772: ARRAY
63773: PUSH
63774: LD_INT 1
63776: ARRAY
63777: PUSH
63778: LD_STRING r
63780: EQUAL
63781: PUSH
63782: LD_VAR 0 4
63786: PUSH
63787: LD_INT 1
63789: ARRAY
63790: PUSH
63791: LD_INT 4
63793: ARRAY
63794: PUSH
63795: LD_VAR 0 2
63799: EQUAL
63800: AND
63801: ST_TO_ADDR
// end ;
63802: LD_VAR 0 3
63806: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63807: LD_INT 0
63809: PPUSH
// SetDir ( unit , d ) ;
63810: LD_VAR 0 1
63814: PPUSH
63815: LD_VAR 0 4
63819: PPUSH
63820: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63824: LD_VAR 0 1
63828: PPUSH
63829: LD_VAR 0 2
63833: PPUSH
63834: LD_VAR 0 3
63838: PPUSH
63839: LD_VAR 0 5
63843: PPUSH
63844: CALL_OW 48
// end ;
63848: LD_VAR 0 6
63852: RET
// export function ToNaturalNumber ( number ) ; begin
63853: LD_INT 0
63855: PPUSH
// result := number div 1 ;
63856: LD_ADDR_VAR 0 2
63860: PUSH
63861: LD_VAR 0 1
63865: PUSH
63866: LD_INT 1
63868: DIV
63869: ST_TO_ADDR
// if number < 0 then
63870: LD_VAR 0 1
63874: PUSH
63875: LD_INT 0
63877: LESS
63878: IFFALSE 63888
// result := 0 ;
63880: LD_ADDR_VAR 0 2
63884: PUSH
63885: LD_INT 0
63887: ST_TO_ADDR
// end ;
63888: LD_VAR 0 2
63892: RET
// export function SortByClass ( units , class ) ; var un ; begin
63893: LD_INT 0
63895: PPUSH
63896: PPUSH
// if not units or not class then
63897: LD_VAR 0 1
63901: NOT
63902: PUSH
63903: LD_VAR 0 2
63907: NOT
63908: OR
63909: IFFALSE 63913
// exit ;
63911: GO 64008
// result := [ ] ;
63913: LD_ADDR_VAR 0 3
63917: PUSH
63918: EMPTY
63919: ST_TO_ADDR
// for un in units do
63920: LD_ADDR_VAR 0 4
63924: PUSH
63925: LD_VAR 0 1
63929: PUSH
63930: FOR_IN
63931: IFFALSE 64006
// if GetClass ( un ) = class then
63933: LD_VAR 0 4
63937: PPUSH
63938: CALL_OW 257
63942: PUSH
63943: LD_VAR 0 2
63947: EQUAL
63948: IFFALSE 63975
// result := Insert ( result , 1 , un ) else
63950: LD_ADDR_VAR 0 3
63954: PUSH
63955: LD_VAR 0 3
63959: PPUSH
63960: LD_INT 1
63962: PPUSH
63963: LD_VAR 0 4
63967: PPUSH
63968: CALL_OW 2
63972: ST_TO_ADDR
63973: GO 64004
// result := Replace ( result , result + 1 , un ) ;
63975: LD_ADDR_VAR 0 3
63979: PUSH
63980: LD_VAR 0 3
63984: PPUSH
63985: LD_VAR 0 3
63989: PUSH
63990: LD_INT 1
63992: PLUS
63993: PPUSH
63994: LD_VAR 0 4
63998: PPUSH
63999: CALL_OW 1
64003: ST_TO_ADDR
64004: GO 63930
64006: POP
64007: POP
// end ;
64008: LD_VAR 0 3
64012: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64013: LD_INT 0
64015: PPUSH
64016: PPUSH
64017: PPUSH
64018: PPUSH
64019: PPUSH
64020: PPUSH
64021: PPUSH
// result := [ ] ;
64022: LD_ADDR_VAR 0 4
64026: PUSH
64027: EMPTY
64028: ST_TO_ADDR
// if x - r < 0 then
64029: LD_VAR 0 1
64033: PUSH
64034: LD_VAR 0 3
64038: MINUS
64039: PUSH
64040: LD_INT 0
64042: LESS
64043: IFFALSE 64055
// min_x := 0 else
64045: LD_ADDR_VAR 0 8
64049: PUSH
64050: LD_INT 0
64052: ST_TO_ADDR
64053: GO 64071
// min_x := x - r ;
64055: LD_ADDR_VAR 0 8
64059: PUSH
64060: LD_VAR 0 1
64064: PUSH
64065: LD_VAR 0 3
64069: MINUS
64070: ST_TO_ADDR
// if y - r < 0 then
64071: LD_VAR 0 2
64075: PUSH
64076: LD_VAR 0 3
64080: MINUS
64081: PUSH
64082: LD_INT 0
64084: LESS
64085: IFFALSE 64097
// min_y := 0 else
64087: LD_ADDR_VAR 0 7
64091: PUSH
64092: LD_INT 0
64094: ST_TO_ADDR
64095: GO 64113
// min_y := y - r ;
64097: LD_ADDR_VAR 0 7
64101: PUSH
64102: LD_VAR 0 2
64106: PUSH
64107: LD_VAR 0 3
64111: MINUS
64112: ST_TO_ADDR
// max_x := x + r ;
64113: LD_ADDR_VAR 0 9
64117: PUSH
64118: LD_VAR 0 1
64122: PUSH
64123: LD_VAR 0 3
64127: PLUS
64128: ST_TO_ADDR
// max_y := y + r ;
64129: LD_ADDR_VAR 0 10
64133: PUSH
64134: LD_VAR 0 2
64138: PUSH
64139: LD_VAR 0 3
64143: PLUS
64144: ST_TO_ADDR
// for _x = min_x to max_x do
64145: LD_ADDR_VAR 0 5
64149: PUSH
64150: DOUBLE
64151: LD_VAR 0 8
64155: DEC
64156: ST_TO_ADDR
64157: LD_VAR 0 9
64161: PUSH
64162: FOR_TO
64163: IFFALSE 64264
// for _y = min_y to max_y do
64165: LD_ADDR_VAR 0 6
64169: PUSH
64170: DOUBLE
64171: LD_VAR 0 7
64175: DEC
64176: ST_TO_ADDR
64177: LD_VAR 0 10
64181: PUSH
64182: FOR_TO
64183: IFFALSE 64260
// begin if not ValidHex ( _x , _y ) then
64185: LD_VAR 0 5
64189: PPUSH
64190: LD_VAR 0 6
64194: PPUSH
64195: CALL_OW 488
64199: NOT
64200: IFFALSE 64204
// continue ;
64202: GO 64182
// if GetResourceTypeXY ( _x , _y ) then
64204: LD_VAR 0 5
64208: PPUSH
64209: LD_VAR 0 6
64213: PPUSH
64214: CALL_OW 283
64218: IFFALSE 64258
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64220: LD_ADDR_VAR 0 4
64224: PUSH
64225: LD_VAR 0 4
64229: PPUSH
64230: LD_VAR 0 4
64234: PUSH
64235: LD_INT 1
64237: PLUS
64238: PPUSH
64239: LD_VAR 0 5
64243: PUSH
64244: LD_VAR 0 6
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PPUSH
64253: CALL_OW 1
64257: ST_TO_ADDR
// end ;
64258: GO 64182
64260: POP
64261: POP
64262: GO 64162
64264: POP
64265: POP
// end ;
64266: LD_VAR 0 4
64270: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64271: LD_INT 0
64273: PPUSH
64274: PPUSH
64275: PPUSH
64276: PPUSH
64277: PPUSH
64278: PPUSH
64279: PPUSH
64280: PPUSH
// if not units then
64281: LD_VAR 0 1
64285: NOT
64286: IFFALSE 64290
// exit ;
64288: GO 64814
// result := UnitFilter ( units , [ f_ok ] ) ;
64290: LD_ADDR_VAR 0 3
64294: PUSH
64295: LD_VAR 0 1
64299: PPUSH
64300: LD_INT 50
64302: PUSH
64303: EMPTY
64304: LIST
64305: PPUSH
64306: CALL_OW 72
64310: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64311: LD_ADDR_VAR 0 8
64315: PUSH
64316: LD_VAR 0 1
64320: PUSH
64321: LD_INT 1
64323: ARRAY
64324: PPUSH
64325: CALL_OW 255
64329: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64330: LD_ADDR_VAR 0 10
64334: PUSH
64335: LD_INT 29
64337: PUSH
64338: LD_INT 91
64340: PUSH
64341: LD_INT 49
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// if not result then
64349: LD_VAR 0 3
64353: NOT
64354: IFFALSE 64358
// exit ;
64356: GO 64814
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64358: LD_ADDR_VAR 0 5
64362: PUSH
64363: LD_INT 81
64365: PUSH
64366: LD_VAR 0 8
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PPUSH
64375: CALL_OW 69
64379: ST_TO_ADDR
// for i in result do
64380: LD_ADDR_VAR 0 4
64384: PUSH
64385: LD_VAR 0 3
64389: PUSH
64390: FOR_IN
64391: IFFALSE 64812
// begin tag := GetTag ( i ) + 1 ;
64393: LD_ADDR_VAR 0 9
64397: PUSH
64398: LD_VAR 0 4
64402: PPUSH
64403: CALL_OW 110
64407: PUSH
64408: LD_INT 1
64410: PLUS
64411: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64412: LD_ADDR_VAR 0 7
64416: PUSH
64417: LD_VAR 0 4
64421: PPUSH
64422: CALL_OW 250
64426: PPUSH
64427: LD_VAR 0 4
64431: PPUSH
64432: CALL_OW 251
64436: PPUSH
64437: LD_INT 6
64439: PPUSH
64440: CALL 64013 0 3
64444: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64445: LD_VAR 0 4
64449: PPUSH
64450: CALL_OW 247
64454: PUSH
64455: LD_INT 2
64457: EQUAL
64458: PUSH
64459: LD_VAR 0 7
64463: AND
64464: PUSH
64465: LD_VAR 0 4
64469: PPUSH
64470: CALL_OW 264
64474: PUSH
64475: LD_VAR 0 10
64479: IN
64480: NOT
64481: AND
64482: IFFALSE 64521
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64484: LD_VAR 0 4
64488: PPUSH
64489: LD_VAR 0 7
64493: PUSH
64494: LD_INT 1
64496: ARRAY
64497: PUSH
64498: LD_INT 1
64500: ARRAY
64501: PPUSH
64502: LD_VAR 0 7
64506: PUSH
64507: LD_INT 1
64509: ARRAY
64510: PUSH
64511: LD_INT 2
64513: ARRAY
64514: PPUSH
64515: CALL_OW 116
64519: GO 64810
// if path > tag then
64521: LD_VAR 0 2
64525: PUSH
64526: LD_VAR 0 9
64530: GREATER
64531: IFFALSE 64739
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64533: LD_ADDR_VAR 0 6
64537: PUSH
64538: LD_VAR 0 5
64542: PPUSH
64543: LD_INT 91
64545: PUSH
64546: LD_VAR 0 4
64550: PUSH
64551: LD_INT 8
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: PPUSH
64559: CALL_OW 72
64563: ST_TO_ADDR
// if nearEnemy then
64564: LD_VAR 0 6
64568: IFFALSE 64637
// begin if GetWeapon ( i ) = ru_time_lapser then
64570: LD_VAR 0 4
64574: PPUSH
64575: CALL_OW 264
64579: PUSH
64580: LD_INT 49
64582: EQUAL
64583: IFFALSE 64611
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64585: LD_VAR 0 4
64589: PPUSH
64590: LD_VAR 0 6
64594: PPUSH
64595: LD_VAR 0 4
64599: PPUSH
64600: CALL_OW 74
64604: PPUSH
64605: CALL_OW 112
64609: GO 64635
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64611: LD_VAR 0 4
64615: PPUSH
64616: LD_VAR 0 6
64620: PPUSH
64621: LD_VAR 0 4
64625: PPUSH
64626: CALL_OW 74
64630: PPUSH
64631: CALL_OW 115
// end else
64635: GO 64737
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64637: LD_VAR 0 4
64641: PPUSH
64642: LD_VAR 0 2
64646: PUSH
64647: LD_VAR 0 9
64651: ARRAY
64652: PUSH
64653: LD_INT 1
64655: ARRAY
64656: PPUSH
64657: LD_VAR 0 2
64661: PUSH
64662: LD_VAR 0 9
64666: ARRAY
64667: PUSH
64668: LD_INT 2
64670: ARRAY
64671: PPUSH
64672: CALL_OW 297
64676: PUSH
64677: LD_INT 6
64679: GREATER
64680: IFFALSE 64723
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64682: LD_VAR 0 4
64686: PPUSH
64687: LD_VAR 0 2
64691: PUSH
64692: LD_VAR 0 9
64696: ARRAY
64697: PUSH
64698: LD_INT 1
64700: ARRAY
64701: PPUSH
64702: LD_VAR 0 2
64706: PUSH
64707: LD_VAR 0 9
64711: ARRAY
64712: PUSH
64713: LD_INT 2
64715: ARRAY
64716: PPUSH
64717: CALL_OW 114
64721: GO 64737
// SetTag ( i , tag ) ;
64723: LD_VAR 0 4
64727: PPUSH
64728: LD_VAR 0 9
64732: PPUSH
64733: CALL_OW 109
// end else
64737: GO 64810
// if enemy then
64739: LD_VAR 0 5
64743: IFFALSE 64810
// begin if GetWeapon ( i ) = ru_time_lapser then
64745: LD_VAR 0 4
64749: PPUSH
64750: CALL_OW 264
64754: PUSH
64755: LD_INT 49
64757: EQUAL
64758: IFFALSE 64786
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64760: LD_VAR 0 4
64764: PPUSH
64765: LD_VAR 0 5
64769: PPUSH
64770: LD_VAR 0 4
64774: PPUSH
64775: CALL_OW 74
64779: PPUSH
64780: CALL_OW 112
64784: GO 64810
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64786: LD_VAR 0 4
64790: PPUSH
64791: LD_VAR 0 5
64795: PPUSH
64796: LD_VAR 0 4
64800: PPUSH
64801: CALL_OW 74
64805: PPUSH
64806: CALL_OW 115
// end ; end ;
64810: GO 64390
64812: POP
64813: POP
// end ;
64814: LD_VAR 0 3
64818: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64819: LD_INT 0
64821: PPUSH
64822: PPUSH
64823: PPUSH
// if not unit or IsInUnit ( unit ) then
64824: LD_VAR 0 1
64828: NOT
64829: PUSH
64830: LD_VAR 0 1
64834: PPUSH
64835: CALL_OW 310
64839: OR
64840: IFFALSE 64844
// exit ;
64842: GO 64935
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64844: LD_ADDR_VAR 0 4
64848: PUSH
64849: LD_VAR 0 1
64853: PPUSH
64854: CALL_OW 250
64858: PPUSH
64859: LD_VAR 0 2
64863: PPUSH
64864: LD_INT 1
64866: PPUSH
64867: CALL_OW 272
64871: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64872: LD_ADDR_VAR 0 5
64876: PUSH
64877: LD_VAR 0 1
64881: PPUSH
64882: CALL_OW 251
64886: PPUSH
64887: LD_VAR 0 2
64891: PPUSH
64892: LD_INT 1
64894: PPUSH
64895: CALL_OW 273
64899: ST_TO_ADDR
// if ValidHex ( x , y ) then
64900: LD_VAR 0 4
64904: PPUSH
64905: LD_VAR 0 5
64909: PPUSH
64910: CALL_OW 488
64914: IFFALSE 64935
// ComTurnXY ( unit , x , y ) ;
64916: LD_VAR 0 1
64920: PPUSH
64921: LD_VAR 0 4
64925: PPUSH
64926: LD_VAR 0 5
64930: PPUSH
64931: CALL_OW 118
// end ;
64935: LD_VAR 0 3
64939: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64940: LD_INT 0
64942: PPUSH
64943: PPUSH
// result := false ;
64944: LD_ADDR_VAR 0 3
64948: PUSH
64949: LD_INT 0
64951: ST_TO_ADDR
// if not units then
64952: LD_VAR 0 2
64956: NOT
64957: IFFALSE 64961
// exit ;
64959: GO 65006
// for i in units do
64961: LD_ADDR_VAR 0 4
64965: PUSH
64966: LD_VAR 0 2
64970: PUSH
64971: FOR_IN
64972: IFFALSE 65004
// if See ( side , i ) then
64974: LD_VAR 0 1
64978: PPUSH
64979: LD_VAR 0 4
64983: PPUSH
64984: CALL_OW 292
64988: IFFALSE 65002
// begin result := true ;
64990: LD_ADDR_VAR 0 3
64994: PUSH
64995: LD_INT 1
64997: ST_TO_ADDR
// exit ;
64998: POP
64999: POP
65000: GO 65006
// end ;
65002: GO 64971
65004: POP
65005: POP
// end ;
65006: LD_VAR 0 3
65010: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65011: LD_INT 0
65013: PPUSH
65014: PPUSH
65015: PPUSH
65016: PPUSH
// if not unit or not points then
65017: LD_VAR 0 1
65021: NOT
65022: PUSH
65023: LD_VAR 0 2
65027: NOT
65028: OR
65029: IFFALSE 65033
// exit ;
65031: GO 65123
// dist := 99999 ;
65033: LD_ADDR_VAR 0 5
65037: PUSH
65038: LD_INT 99999
65040: ST_TO_ADDR
// for i in points do
65041: LD_ADDR_VAR 0 4
65045: PUSH
65046: LD_VAR 0 2
65050: PUSH
65051: FOR_IN
65052: IFFALSE 65121
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65054: LD_ADDR_VAR 0 6
65058: PUSH
65059: LD_VAR 0 1
65063: PPUSH
65064: LD_VAR 0 4
65068: PUSH
65069: LD_INT 1
65071: ARRAY
65072: PPUSH
65073: LD_VAR 0 4
65077: PUSH
65078: LD_INT 2
65080: ARRAY
65081: PPUSH
65082: CALL_OW 297
65086: ST_TO_ADDR
// if tmpDist < dist then
65087: LD_VAR 0 6
65091: PUSH
65092: LD_VAR 0 5
65096: LESS
65097: IFFALSE 65119
// begin result := i ;
65099: LD_ADDR_VAR 0 3
65103: PUSH
65104: LD_VAR 0 4
65108: ST_TO_ADDR
// dist := tmpDist ;
65109: LD_ADDR_VAR 0 5
65113: PUSH
65114: LD_VAR 0 6
65118: ST_TO_ADDR
// end ; end ;
65119: GO 65051
65121: POP
65122: POP
// end ;
65123: LD_VAR 0 3
65127: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65128: LD_INT 0
65130: PPUSH
// uc_side := side ;
65131: LD_ADDR_OWVAR 20
65135: PUSH
65136: LD_VAR 0 1
65140: ST_TO_ADDR
// uc_nation := 3 ;
65141: LD_ADDR_OWVAR 21
65145: PUSH
65146: LD_INT 3
65148: ST_TO_ADDR
// vc_chassis := 25 ;
65149: LD_ADDR_OWVAR 37
65153: PUSH
65154: LD_INT 25
65156: ST_TO_ADDR
// vc_engine := engine_siberite ;
65157: LD_ADDR_OWVAR 39
65161: PUSH
65162: LD_INT 3
65164: ST_TO_ADDR
// vc_control := control_computer ;
65165: LD_ADDR_OWVAR 38
65169: PUSH
65170: LD_INT 3
65172: ST_TO_ADDR
// vc_weapon := 59 ;
65173: LD_ADDR_OWVAR 40
65177: PUSH
65178: LD_INT 59
65180: ST_TO_ADDR
// result := CreateVehicle ;
65181: LD_ADDR_VAR 0 5
65185: PUSH
65186: CALL_OW 45
65190: ST_TO_ADDR
// SetDir ( result , d ) ;
65191: LD_VAR 0 5
65195: PPUSH
65196: LD_VAR 0 4
65200: PPUSH
65201: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65205: LD_VAR 0 5
65209: PPUSH
65210: LD_VAR 0 2
65214: PPUSH
65215: LD_VAR 0 3
65219: PPUSH
65220: LD_INT 0
65222: PPUSH
65223: CALL_OW 48
// end ;
65227: LD_VAR 0 5
65231: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65232: LD_INT 0
65234: PPUSH
65235: PPUSH
65236: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65237: LD_ADDR_VAR 0 2
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65260: LD_VAR 0 1
65264: NOT
65265: PUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 264
65275: PUSH
65276: LD_INT 12
65278: PUSH
65279: LD_INT 51
65281: PUSH
65282: LD_INT 32
65284: PUSH
65285: LD_INT 89
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: IN
65294: NOT
65295: OR
65296: IFFALSE 65300
// exit ;
65298: GO 65398
// for i := 1 to 3 do
65300: LD_ADDR_VAR 0 3
65304: PUSH
65305: DOUBLE
65306: LD_INT 1
65308: DEC
65309: ST_TO_ADDR
65310: LD_INT 3
65312: PUSH
65313: FOR_TO
65314: IFFALSE 65396
// begin tmp := GetCargo ( cargo , i ) ;
65316: LD_ADDR_VAR 0 4
65320: PUSH
65321: LD_VAR 0 1
65325: PPUSH
65326: LD_VAR 0 3
65330: PPUSH
65331: CALL_OW 289
65335: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65336: LD_ADDR_VAR 0 2
65340: PUSH
65341: LD_VAR 0 2
65345: PPUSH
65346: LD_VAR 0 3
65350: PPUSH
65351: LD_VAR 0 4
65355: PPUSH
65356: CALL_OW 1
65360: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65361: LD_ADDR_VAR 0 2
65365: PUSH
65366: LD_VAR 0 2
65370: PPUSH
65371: LD_INT 4
65373: PPUSH
65374: LD_VAR 0 2
65378: PUSH
65379: LD_INT 4
65381: ARRAY
65382: PUSH
65383: LD_VAR 0 4
65387: PLUS
65388: PPUSH
65389: CALL_OW 1
65393: ST_TO_ADDR
// end ;
65394: GO 65313
65396: POP
65397: POP
// end ;
65398: LD_VAR 0 2
65402: RET
// export function Length ( array ) ; begin
65403: LD_INT 0
65405: PPUSH
// result := array + 0 ;
65406: LD_ADDR_VAR 0 2
65410: PUSH
65411: LD_VAR 0 1
65415: PUSH
65416: LD_INT 0
65418: PLUS
65419: ST_TO_ADDR
// end ;
65420: LD_VAR 0 2
65424: RET
// export function PrepareArray ( array ) ; begin
65425: LD_INT 0
65427: PPUSH
// result := array diff 0 ;
65428: LD_ADDR_VAR 0 2
65432: PUSH
65433: LD_VAR 0 1
65437: PUSH
65438: LD_INT 0
65440: DIFF
65441: ST_TO_ADDR
// if not result [ 1 ] then
65442: LD_VAR 0 2
65446: PUSH
65447: LD_INT 1
65449: ARRAY
65450: NOT
65451: IFFALSE 65471
// result := Delete ( result , 1 ) ;
65453: LD_ADDR_VAR 0 2
65457: PUSH
65458: LD_VAR 0 2
65462: PPUSH
65463: LD_INT 1
65465: PPUSH
65466: CALL_OW 3
65470: ST_TO_ADDR
// end ;
65471: LD_VAR 0 2
65475: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65476: LD_INT 0
65478: PPUSH
65479: PPUSH
65480: PPUSH
65481: PPUSH
// sibRocketRange := 25 ;
65482: LD_ADDR_VAR 0 6
65486: PUSH
65487: LD_INT 25
65489: ST_TO_ADDR
// result := false ;
65490: LD_ADDR_VAR 0 4
65494: PUSH
65495: LD_INT 0
65497: ST_TO_ADDR
// for i := 0 to 5 do
65498: LD_ADDR_VAR 0 5
65502: PUSH
65503: DOUBLE
65504: LD_INT 0
65506: DEC
65507: ST_TO_ADDR
65508: LD_INT 5
65510: PUSH
65511: FOR_TO
65512: IFFALSE 65579
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65514: LD_VAR 0 1
65518: PPUSH
65519: LD_VAR 0 5
65523: PPUSH
65524: LD_VAR 0 6
65528: PPUSH
65529: CALL_OW 272
65533: PPUSH
65534: LD_VAR 0 2
65538: PPUSH
65539: LD_VAR 0 5
65543: PPUSH
65544: LD_VAR 0 6
65548: PPUSH
65549: CALL_OW 273
65553: PPUSH
65554: LD_VAR 0 3
65558: PPUSH
65559: CALL_OW 309
65563: IFFALSE 65577
// begin result := true ;
65565: LD_ADDR_VAR 0 4
65569: PUSH
65570: LD_INT 1
65572: ST_TO_ADDR
// exit ;
65573: POP
65574: POP
65575: GO 65581
// end ;
65577: GO 65511
65579: POP
65580: POP
// end ;
65581: LD_VAR 0 4
65585: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65586: LD_INT 0
65588: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65589: LD_VAR 0 1
65593: PPUSH
65594: LD_VAR 0 2
65598: PPUSH
65599: LD_INT 0
65601: PPUSH
65602: LD_INT 0
65604: PPUSH
65605: LD_INT 1
65607: PPUSH
65608: LD_INT 0
65610: PPUSH
65611: CALL_OW 587
// end ; end_of_file
65615: LD_VAR 0 3
65619: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65620: LD_VAR 0 1
65624: PPUSH
65625: LD_VAR 0 2
65629: PPUSH
65630: LD_VAR 0 3
65634: PPUSH
65635: LD_VAR 0 4
65639: PPUSH
65640: LD_VAR 0 5
65644: PPUSH
65645: LD_VAR 0 6
65649: PPUSH
65650: CALL 4271 0 6
// end ;
65654: PPOPN 6
65656: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65657: LD_INT 0
65659: PPUSH
// begin if not units then
65660: LD_VAR 0 1
65664: NOT
65665: IFFALSE 65669
// exit ;
65667: GO 65669
// end ;
65669: PPOPN 7
65671: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65672: CALL 4175 0 0
// end ;
65676: PPOPN 1
65678: END
