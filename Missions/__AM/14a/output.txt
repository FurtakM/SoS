// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20105 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 20063 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20121 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 25347 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 25347 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 30208 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 30208 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 30208 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 30208 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 25347 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 25347 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 25347 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 25347 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 25347 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 25347 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 25347 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 25347 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 25347 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 25347 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 25347 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 25347 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 25347 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 25347 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 25347 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 30208 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_INT 89
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: IN
3775: PUSH
3776: LD_EXP 3
3780: PPUSH
3781: CALL_OW 310
3785: PPUSH
3786: CALL_OW 264
3790: PUSH
3791: LD_INT 51
3793: PUSH
3794: LD_INT 12
3796: PUSH
3797: LD_INT 89
3799: PUSH
3800: LD_INT 32
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: IN
3809: OR
3810: AND
3811: IFFALSE 4021
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_EXP 2
3830: PPUSH
3831: CALL_OW 310
3835: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 310
3850: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3851: LD_VAR 0 2
3855: PPUSH
3856: CALL_OW 265
3860: PUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: CALL_OW 262
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_VAR 0 2
3878: PPUSH
3879: CALL_OW 264
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 271
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 248
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_STRING 14a_JMMVeh
3914: PPUSH
3915: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: CALL_OW 265
3928: PUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 262
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 264
3951: PUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 271
3961: PUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 248
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_STRING 14a_BurlakVeh
3982: PPUSH
3983: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3987: LD_EXP 2
3991: PPUSH
3992: LD_STRING 14a_JMM
3994: PPUSH
3995: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3999: LD_EXP 3
4003: PPUSH
4004: LD_STRING 14a_Burlak
4006: PPUSH
4007: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING %_cont
4016: PPUSH
4017: CALL_OW 340
// end ;
4021: PPOPN 3
4023: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4024: LD_INT 22
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 24
4039: PUSH
4040: LD_INT 950
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 69
4059: IFFALSE 4071
4061: GO 4063
4063: DISABLE
// YouLost ( FriendlyFire ) ;
4064: LD_STRING FriendlyFire
4066: PPUSH
4067: CALL_OW 104
4071: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4072: LD_EXP 3
4076: PPUSH
4077: CALL_OW 301
4081: IFFALSE 4093
4083: GO 4085
4085: DISABLE
// YouLost ( Burlak ) ;
4086: LD_STRING Burlak
4088: PPUSH
4089: CALL_OW 104
4093: END
// every 0 0$1 trigger IsDead ( JMM ) do
4094: LD_EXP 2
4098: PPUSH
4099: CALL_OW 301
4103: IFFALSE 4115
4105: GO 4107
4107: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4108: LD_STRING JMM
4110: PPUSH
4111: CALL_OW 104
4115: END
// export globalGameSaveCounter ; every 0 0$1 do
4116: GO 4118
4118: DISABLE
// begin enable ;
4119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4120: LD_STRING updateTimer(
4122: PUSH
4123: LD_OWVAR 1
4127: STR
4128: PUSH
4129: LD_STRING );
4131: STR
4132: PPUSH
4133: CALL_OW 559
// end ;
4137: END
// every 0 0$1 do
4138: GO 4140
4140: DISABLE
// begin globalGameSaveCounter := 0 ;
4141: LD_ADDR_EXP 39
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4149: LD_STRING setGameSaveCounter(0)
4151: PPUSH
4152: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4156: LD_STRING initStreamRollete();
4158: PPUSH
4159: CALL_OW 559
// InitStreamMode ;
4163: CALL 5506 0 0
// DefineStreamItems ( false ) ;
4167: LD_INT 0
4169: PPUSH
4170: CALL 5970 0 1
// end ;
4174: END
// export function SOS_MapStart ( ) ; begin
4175: LD_INT 0
4177: PPUSH
// if streamModeActive then
4178: LD_EXP 40
4182: IFFALSE 4191
// DefineStreamItems ( true ) ;
4184: LD_INT 1
4186: PPUSH
4187: CALL 5970 0 1
// UpdateLuaVariables ( ) ;
4191: CALL 4208 0 0
// UpdateFactoryWaypoints ( ) ;
4195: CALL 18972 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4199: CALL 19224 0 0
// end ;
4203: LD_VAR 0 1
4207: RET
// function UpdateLuaVariables ( ) ; begin
4208: LD_INT 0
4210: PPUSH
// if globalGameSaveCounter then
4211: LD_EXP 39
4215: IFFALSE 4249
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4217: LD_ADDR_EXP 39
4221: PUSH
4222: LD_EXP 39
4226: PPUSH
4227: CALL 64440 0 1
4231: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4232: LD_STRING setGameSaveCounter(
4234: PUSH
4235: LD_EXP 39
4239: STR
4240: PUSH
4241: LD_STRING )
4243: STR
4244: PPUSH
4245: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4249: LD_STRING setGameDifficulty(
4251: PUSH
4252: LD_OWVAR 67
4256: STR
4257: PUSH
4258: LD_STRING )
4260: STR
4261: PPUSH
4262: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4266: LD_STRING displayDifficulty(
4268: PUSH
4269: LD_OWVAR 67
4273: STR
4274: PUSH
4275: LD_STRING )
4277: STR
4278: PPUSH
4279: CALL_OW 559
// end ;
4283: LD_VAR 0 1
4287: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4288: LD_INT 0
4290: PPUSH
// if p2 = stream_mode then
4291: LD_VAR 0 2
4295: PUSH
4296: LD_INT 100
4298: EQUAL
4299: IFFALSE 5302
// begin if not StreamModeActive then
4301: LD_EXP 40
4305: NOT
4306: IFFALSE 4316
// StreamModeActive := true ;
4308: LD_ADDR_EXP 40
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// if p3 = 0 then
4316: LD_VAR 0 3
4320: PUSH
4321: LD_INT 0
4323: EQUAL
4324: IFFALSE 4330
// InitStreamMode ;
4326: CALL 5506 0 0
// if p3 = 1 then
4330: LD_VAR 0 3
4334: PUSH
4335: LD_INT 1
4337: EQUAL
4338: IFFALSE 4348
// sRocket := true ;
4340: LD_ADDR_EXP 45
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// if p3 = 2 then
4348: LD_VAR 0 3
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: IFFALSE 4366
// sSpeed := true ;
4358: LD_ADDR_EXP 44
4362: PUSH
4363: LD_INT 1
4365: ST_TO_ADDR
// if p3 = 3 then
4366: LD_VAR 0 3
4370: PUSH
4371: LD_INT 3
4373: EQUAL
4374: IFFALSE 4384
// sEngine := true ;
4376: LD_ADDR_EXP 46
4380: PUSH
4381: LD_INT 1
4383: ST_TO_ADDR
// if p3 = 4 then
4384: LD_VAR 0 3
4388: PUSH
4389: LD_INT 4
4391: EQUAL
4392: IFFALSE 4402
// sSpec := true ;
4394: LD_ADDR_EXP 43
4398: PUSH
4399: LD_INT 1
4401: ST_TO_ADDR
// if p3 = 5 then
4402: LD_VAR 0 3
4406: PUSH
4407: LD_INT 5
4409: EQUAL
4410: IFFALSE 4420
// sLevel := true ;
4412: LD_ADDR_EXP 47
4416: PUSH
4417: LD_INT 1
4419: ST_TO_ADDR
// if p3 = 6 then
4420: LD_VAR 0 3
4424: PUSH
4425: LD_INT 6
4427: EQUAL
4428: IFFALSE 4438
// sArmoury := true ;
4430: LD_ADDR_EXP 48
4434: PUSH
4435: LD_INT 1
4437: ST_TO_ADDR
// if p3 = 7 then
4438: LD_VAR 0 3
4442: PUSH
4443: LD_INT 7
4445: EQUAL
4446: IFFALSE 4456
// sRadar := true ;
4448: LD_ADDR_EXP 49
4452: PUSH
4453: LD_INT 1
4455: ST_TO_ADDR
// if p3 = 8 then
4456: LD_VAR 0 3
4460: PUSH
4461: LD_INT 8
4463: EQUAL
4464: IFFALSE 4474
// sBunker := true ;
4466: LD_ADDR_EXP 50
4470: PUSH
4471: LD_INT 1
4473: ST_TO_ADDR
// if p3 = 9 then
4474: LD_VAR 0 3
4478: PUSH
4479: LD_INT 9
4481: EQUAL
4482: IFFALSE 4492
// sHack := true ;
4484: LD_ADDR_EXP 51
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// if p3 = 10 then
4492: LD_VAR 0 3
4496: PUSH
4497: LD_INT 10
4499: EQUAL
4500: IFFALSE 4510
// sFire := true ;
4502: LD_ADDR_EXP 52
4506: PUSH
4507: LD_INT 1
4509: ST_TO_ADDR
// if p3 = 11 then
4510: LD_VAR 0 3
4514: PUSH
4515: LD_INT 11
4517: EQUAL
4518: IFFALSE 4528
// sRefresh := true ;
4520: LD_ADDR_EXP 53
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// if p3 = 12 then
4528: LD_VAR 0 3
4532: PUSH
4533: LD_INT 12
4535: EQUAL
4536: IFFALSE 4546
// sExp := true ;
4538: LD_ADDR_EXP 54
4542: PUSH
4543: LD_INT 1
4545: ST_TO_ADDR
// if p3 = 13 then
4546: LD_VAR 0 3
4550: PUSH
4551: LD_INT 13
4553: EQUAL
4554: IFFALSE 4564
// sDepot := true ;
4556: LD_ADDR_EXP 55
4560: PUSH
4561: LD_INT 1
4563: ST_TO_ADDR
// if p3 = 14 then
4564: LD_VAR 0 3
4568: PUSH
4569: LD_INT 14
4571: EQUAL
4572: IFFALSE 4582
// sFlag := true ;
4574: LD_ADDR_EXP 56
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
// if p3 = 15 then
4582: LD_VAR 0 3
4586: PUSH
4587: LD_INT 15
4589: EQUAL
4590: IFFALSE 4600
// sKamikadze := true ;
4592: LD_ADDR_EXP 64
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if p3 = 16 then
4600: LD_VAR 0 3
4604: PUSH
4605: LD_INT 16
4607: EQUAL
4608: IFFALSE 4618
// sTroll := true ;
4610: LD_ADDR_EXP 65
4614: PUSH
4615: LD_INT 1
4617: ST_TO_ADDR
// if p3 = 17 then
4618: LD_VAR 0 3
4622: PUSH
4623: LD_INT 17
4625: EQUAL
4626: IFFALSE 4636
// sSlow := true ;
4628: LD_ADDR_EXP 66
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// if p3 = 18 then
4636: LD_VAR 0 3
4640: PUSH
4641: LD_INT 18
4643: EQUAL
4644: IFFALSE 4654
// sLack := true ;
4646: LD_ADDR_EXP 67
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// if p3 = 19 then
4654: LD_VAR 0 3
4658: PUSH
4659: LD_INT 19
4661: EQUAL
4662: IFFALSE 4672
// sTank := true ;
4664: LD_ADDR_EXP 69
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if p3 = 20 then
4672: LD_VAR 0 3
4676: PUSH
4677: LD_INT 20
4679: EQUAL
4680: IFFALSE 4690
// sRemote := true ;
4682: LD_ADDR_EXP 70
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// if p3 = 21 then
4690: LD_VAR 0 3
4694: PUSH
4695: LD_INT 21
4697: EQUAL
4698: IFFALSE 4708
// sPowell := true ;
4700: LD_ADDR_EXP 71
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// if p3 = 22 then
4708: LD_VAR 0 3
4712: PUSH
4713: LD_INT 22
4715: EQUAL
4716: IFFALSE 4726
// sTeleport := true ;
4718: LD_ADDR_EXP 74
4722: PUSH
4723: LD_INT 1
4725: ST_TO_ADDR
// if p3 = 23 then
4726: LD_VAR 0 3
4730: PUSH
4731: LD_INT 23
4733: EQUAL
4734: IFFALSE 4744
// sOilTower := true ;
4736: LD_ADDR_EXP 76
4740: PUSH
4741: LD_INT 1
4743: ST_TO_ADDR
// if p3 = 24 then
4744: LD_VAR 0 3
4748: PUSH
4749: LD_INT 24
4751: EQUAL
4752: IFFALSE 4762
// sShovel := true ;
4754: LD_ADDR_EXP 77
4758: PUSH
4759: LD_INT 1
4761: ST_TO_ADDR
// if p3 = 25 then
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 25
4769: EQUAL
4770: IFFALSE 4780
// sSheik := true ;
4772: LD_ADDR_EXP 78
4776: PUSH
4777: LD_INT 1
4779: ST_TO_ADDR
// if p3 = 26 then
4780: LD_VAR 0 3
4784: PUSH
4785: LD_INT 26
4787: EQUAL
4788: IFFALSE 4798
// sEarthquake := true ;
4790: LD_ADDR_EXP 80
4794: PUSH
4795: LD_INT 1
4797: ST_TO_ADDR
// if p3 = 27 then
4798: LD_VAR 0 3
4802: PUSH
4803: LD_INT 27
4805: EQUAL
4806: IFFALSE 4816
// sAI := true ;
4808: LD_ADDR_EXP 81
4812: PUSH
4813: LD_INT 1
4815: ST_TO_ADDR
// if p3 = 28 then
4816: LD_VAR 0 3
4820: PUSH
4821: LD_INT 28
4823: EQUAL
4824: IFFALSE 4834
// sCargo := true ;
4826: LD_ADDR_EXP 84
4830: PUSH
4831: LD_INT 1
4833: ST_TO_ADDR
// if p3 = 29 then
4834: LD_VAR 0 3
4838: PUSH
4839: LD_INT 29
4841: EQUAL
4842: IFFALSE 4852
// sDLaser := true ;
4844: LD_ADDR_EXP 85
4848: PUSH
4849: LD_INT 1
4851: ST_TO_ADDR
// if p3 = 30 then
4852: LD_VAR 0 3
4856: PUSH
4857: LD_INT 30
4859: EQUAL
4860: IFFALSE 4870
// sExchange := true ;
4862: LD_ADDR_EXP 86
4866: PUSH
4867: LD_INT 1
4869: ST_TO_ADDR
// if p3 = 31 then
4870: LD_VAR 0 3
4874: PUSH
4875: LD_INT 31
4877: EQUAL
4878: IFFALSE 4888
// sFac := true ;
4880: LD_ADDR_EXP 87
4884: PUSH
4885: LD_INT 1
4887: ST_TO_ADDR
// if p3 = 32 then
4888: LD_VAR 0 3
4892: PUSH
4893: LD_INT 32
4895: EQUAL
4896: IFFALSE 4906
// sPower := true ;
4898: LD_ADDR_EXP 88
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// if p3 = 33 then
4906: LD_VAR 0 3
4910: PUSH
4911: LD_INT 33
4913: EQUAL
4914: IFFALSE 4924
// sRandom := true ;
4916: LD_ADDR_EXP 89
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// if p3 = 34 then
4924: LD_VAR 0 3
4928: PUSH
4929: LD_INT 34
4931: EQUAL
4932: IFFALSE 4942
// sShield := true ;
4934: LD_ADDR_EXP 90
4938: PUSH
4939: LD_INT 1
4941: ST_TO_ADDR
// if p3 = 35 then
4942: LD_VAR 0 3
4946: PUSH
4947: LD_INT 35
4949: EQUAL
4950: IFFALSE 4960
// sTime := true ;
4952: LD_ADDR_EXP 91
4956: PUSH
4957: LD_INT 1
4959: ST_TO_ADDR
// if p3 = 36 then
4960: LD_VAR 0 3
4964: PUSH
4965: LD_INT 36
4967: EQUAL
4968: IFFALSE 4978
// sTools := true ;
4970: LD_ADDR_EXP 92
4974: PUSH
4975: LD_INT 1
4977: ST_TO_ADDR
// if p3 = 101 then
4978: LD_VAR 0 3
4982: PUSH
4983: LD_INT 101
4985: EQUAL
4986: IFFALSE 4996
// sSold := true ;
4988: LD_ADDR_EXP 57
4992: PUSH
4993: LD_INT 1
4995: ST_TO_ADDR
// if p3 = 102 then
4996: LD_VAR 0 3
5000: PUSH
5001: LD_INT 102
5003: EQUAL
5004: IFFALSE 5014
// sDiff := true ;
5006: LD_ADDR_EXP 58
5010: PUSH
5011: LD_INT 1
5013: ST_TO_ADDR
// if p3 = 103 then
5014: LD_VAR 0 3
5018: PUSH
5019: LD_INT 103
5021: EQUAL
5022: IFFALSE 5032
// sFog := true ;
5024: LD_ADDR_EXP 61
5028: PUSH
5029: LD_INT 1
5031: ST_TO_ADDR
// if p3 = 104 then
5032: LD_VAR 0 3
5036: PUSH
5037: LD_INT 104
5039: EQUAL
5040: IFFALSE 5050
// sReset := true ;
5042: LD_ADDR_EXP 62
5046: PUSH
5047: LD_INT 1
5049: ST_TO_ADDR
// if p3 = 105 then
5050: LD_VAR 0 3
5054: PUSH
5055: LD_INT 105
5057: EQUAL
5058: IFFALSE 5068
// sSun := true ;
5060: LD_ADDR_EXP 63
5064: PUSH
5065: LD_INT 1
5067: ST_TO_ADDR
// if p3 = 106 then
5068: LD_VAR 0 3
5072: PUSH
5073: LD_INT 106
5075: EQUAL
5076: IFFALSE 5086
// sTiger := true ;
5078: LD_ADDR_EXP 59
5082: PUSH
5083: LD_INT 1
5085: ST_TO_ADDR
// if p3 = 107 then
5086: LD_VAR 0 3
5090: PUSH
5091: LD_INT 107
5093: EQUAL
5094: IFFALSE 5104
// sBomb := true ;
5096: LD_ADDR_EXP 60
5100: PUSH
5101: LD_INT 1
5103: ST_TO_ADDR
// if p3 = 108 then
5104: LD_VAR 0 3
5108: PUSH
5109: LD_INT 108
5111: EQUAL
5112: IFFALSE 5122
// sWound := true ;
5114: LD_ADDR_EXP 68
5118: PUSH
5119: LD_INT 1
5121: ST_TO_ADDR
// if p3 = 109 then
5122: LD_VAR 0 3
5126: PUSH
5127: LD_INT 109
5129: EQUAL
5130: IFFALSE 5140
// sBetray := true ;
5132: LD_ADDR_EXP 72
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// if p3 = 110 then
5140: LD_VAR 0 3
5144: PUSH
5145: LD_INT 110
5147: EQUAL
5148: IFFALSE 5158
// sContamin := true ;
5150: LD_ADDR_EXP 73
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// if p3 = 111 then
5158: LD_VAR 0 3
5162: PUSH
5163: LD_INT 111
5165: EQUAL
5166: IFFALSE 5176
// sOil := true ;
5168: LD_ADDR_EXP 75
5172: PUSH
5173: LD_INT 1
5175: ST_TO_ADDR
// if p3 = 112 then
5176: LD_VAR 0 3
5180: PUSH
5181: LD_INT 112
5183: EQUAL
5184: IFFALSE 5194
// sStu := true ;
5186: LD_ADDR_EXP 79
5190: PUSH
5191: LD_INT 1
5193: ST_TO_ADDR
// if p3 = 113 then
5194: LD_VAR 0 3
5198: PUSH
5199: LD_INT 113
5201: EQUAL
5202: IFFALSE 5212
// sBazooka := true ;
5204: LD_ADDR_EXP 82
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// if p3 = 114 then
5212: LD_VAR 0 3
5216: PUSH
5217: LD_INT 114
5219: EQUAL
5220: IFFALSE 5230
// sMortar := true ;
5222: LD_ADDR_EXP 83
5226: PUSH
5227: LD_INT 1
5229: ST_TO_ADDR
// if p3 = 115 then
5230: LD_VAR 0 3
5234: PUSH
5235: LD_INT 115
5237: EQUAL
5238: IFFALSE 5248
// sRanger := true ;
5240: LD_ADDR_EXP 93
5244: PUSH
5245: LD_INT 1
5247: ST_TO_ADDR
// if p3 = 116 then
5248: LD_VAR 0 3
5252: PUSH
5253: LD_INT 116
5255: EQUAL
5256: IFFALSE 5266
// sComputer := true ;
5258: LD_ADDR_EXP 94
5262: PUSH
5263: LD_INT 1
5265: ST_TO_ADDR
// if p3 = 117 then
5266: LD_VAR 0 3
5270: PUSH
5271: LD_INT 117
5273: EQUAL
5274: IFFALSE 5284
// s30 := true ;
5276: LD_ADDR_EXP 95
5280: PUSH
5281: LD_INT 1
5283: ST_TO_ADDR
// if p3 = 118 then
5284: LD_VAR 0 3
5288: PUSH
5289: LD_INT 118
5291: EQUAL
5292: IFFALSE 5302
// s60 := true ;
5294: LD_ADDR_EXP 96
5298: PUSH
5299: LD_INT 1
5301: ST_TO_ADDR
// end ; if p2 = hack_mode then
5302: LD_VAR 0 2
5306: PUSH
5307: LD_INT 101
5309: EQUAL
5310: IFFALSE 5438
// begin case p3 of 1 :
5312: LD_VAR 0 3
5316: PUSH
5317: LD_INT 1
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5325
5323: GO 5332
5325: POP
// hHackUnlimitedResources ; 2 :
5326: CALL 17585 0 0
5330: GO 5438
5332: LD_INT 2
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5340
5338: GO 5347
5340: POP
// hHackSetLevel10 ; 3 :
5341: CALL 17718 0 0
5345: GO 5438
5347: LD_INT 3
5349: DOUBLE
5350: EQUAL
5351: IFTRUE 5355
5353: GO 5362
5355: POP
// hHackSetLevel10YourUnits ; 4 :
5356: CALL 17803 0 0
5360: GO 5438
5362: LD_INT 4
5364: DOUBLE
5365: EQUAL
5366: IFTRUE 5370
5368: GO 5377
5370: POP
// hHackInvincible ; 5 :
5371: CALL 18251 0 0
5375: GO 5438
5377: LD_INT 5
5379: DOUBLE
5380: EQUAL
5381: IFTRUE 5385
5383: GO 5392
5385: POP
// hHackInvisible ; 6 :
5386: CALL 18362 0 0
5390: GO 5438
5392: LD_INT 6
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5407
5400: POP
// hHackChangeYourSide ; 7 :
5401: CALL 18419 0 0
5405: GO 5438
5407: LD_INT 7
5409: DOUBLE
5410: EQUAL
5411: IFTRUE 5415
5413: GO 5422
5415: POP
// hHackChangeUnitSide ; 8 :
5416: CALL 18461 0 0
5420: GO 5438
5422: LD_INT 8
5424: DOUBLE
5425: EQUAL
5426: IFTRUE 5430
5428: GO 5437
5430: POP
// hHackFog ; end ;
5431: CALL 18562 0 0
5435: GO 5438
5437: POP
// end ; if p2 = game_save_mode then
5438: LD_VAR 0 2
5442: PUSH
5443: LD_INT 102
5445: EQUAL
5446: IFFALSE 5501
// begin if p3 = 1 then
5448: LD_VAR 0 3
5452: PUSH
5453: LD_INT 1
5455: EQUAL
5456: IFFALSE 5468
// globalGameSaveCounter := p4 ;
5458: LD_ADDR_EXP 39
5462: PUSH
5463: LD_VAR 0 4
5467: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5468: LD_VAR 0 3
5472: PUSH
5473: LD_INT 2
5475: EQUAL
5476: PUSH
5477: LD_EXP 39
5481: AND
5482: IFFALSE 5501
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5484: LD_STRING setGameSaveCounter(
5486: PUSH
5487: LD_EXP 39
5491: STR
5492: PUSH
5493: LD_STRING )
5495: STR
5496: PPUSH
5497: CALL_OW 559
// end ; end ;
5501: LD_VAR 0 7
5505: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5506: LD_INT 0
5508: PPUSH
// streamModeActive := false ;
5509: LD_ADDR_EXP 40
5513: PUSH
5514: LD_INT 0
5516: ST_TO_ADDR
// normalCounter := 36 ;
5517: LD_ADDR_EXP 41
5521: PUSH
5522: LD_INT 36
5524: ST_TO_ADDR
// hardcoreCounter := 18 ;
5525: LD_ADDR_EXP 42
5529: PUSH
5530: LD_INT 18
5532: ST_TO_ADDR
// sRocket := false ;
5533: LD_ADDR_EXP 45
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// sSpeed := false ;
5541: LD_ADDR_EXP 44
5545: PUSH
5546: LD_INT 0
5548: ST_TO_ADDR
// sEngine := false ;
5549: LD_ADDR_EXP 46
5553: PUSH
5554: LD_INT 0
5556: ST_TO_ADDR
// sSpec := false ;
5557: LD_ADDR_EXP 43
5561: PUSH
5562: LD_INT 0
5564: ST_TO_ADDR
// sLevel := false ;
5565: LD_ADDR_EXP 47
5569: PUSH
5570: LD_INT 0
5572: ST_TO_ADDR
// sArmoury := false ;
5573: LD_ADDR_EXP 48
5577: PUSH
5578: LD_INT 0
5580: ST_TO_ADDR
// sRadar := false ;
5581: LD_ADDR_EXP 49
5585: PUSH
5586: LD_INT 0
5588: ST_TO_ADDR
// sBunker := false ;
5589: LD_ADDR_EXP 50
5593: PUSH
5594: LD_INT 0
5596: ST_TO_ADDR
// sHack := false ;
5597: LD_ADDR_EXP 51
5601: PUSH
5602: LD_INT 0
5604: ST_TO_ADDR
// sFire := false ;
5605: LD_ADDR_EXP 52
5609: PUSH
5610: LD_INT 0
5612: ST_TO_ADDR
// sRefresh := false ;
5613: LD_ADDR_EXP 53
5617: PUSH
5618: LD_INT 0
5620: ST_TO_ADDR
// sExp := false ;
5621: LD_ADDR_EXP 54
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// sDepot := false ;
5629: LD_ADDR_EXP 55
5633: PUSH
5634: LD_INT 0
5636: ST_TO_ADDR
// sFlag := false ;
5637: LD_ADDR_EXP 56
5641: PUSH
5642: LD_INT 0
5644: ST_TO_ADDR
// sKamikadze := false ;
5645: LD_ADDR_EXP 64
5649: PUSH
5650: LD_INT 0
5652: ST_TO_ADDR
// sTroll := false ;
5653: LD_ADDR_EXP 65
5657: PUSH
5658: LD_INT 0
5660: ST_TO_ADDR
// sSlow := false ;
5661: LD_ADDR_EXP 66
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// sLack := false ;
5669: LD_ADDR_EXP 67
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// sTank := false ;
5677: LD_ADDR_EXP 69
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// sRemote := false ;
5685: LD_ADDR_EXP 70
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// sPowell := false ;
5693: LD_ADDR_EXP 71
5697: PUSH
5698: LD_INT 0
5700: ST_TO_ADDR
// sTeleport := false ;
5701: LD_ADDR_EXP 74
5705: PUSH
5706: LD_INT 0
5708: ST_TO_ADDR
// sOilTower := false ;
5709: LD_ADDR_EXP 76
5713: PUSH
5714: LD_INT 0
5716: ST_TO_ADDR
// sShovel := false ;
5717: LD_ADDR_EXP 77
5721: PUSH
5722: LD_INT 0
5724: ST_TO_ADDR
// sSheik := false ;
5725: LD_ADDR_EXP 78
5729: PUSH
5730: LD_INT 0
5732: ST_TO_ADDR
// sEarthquake := false ;
5733: LD_ADDR_EXP 80
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// sAI := false ;
5741: LD_ADDR_EXP 81
5745: PUSH
5746: LD_INT 0
5748: ST_TO_ADDR
// sCargo := false ;
5749: LD_ADDR_EXP 84
5753: PUSH
5754: LD_INT 0
5756: ST_TO_ADDR
// sDLaser := false ;
5757: LD_ADDR_EXP 85
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// sExchange := false ;
5765: LD_ADDR_EXP 86
5769: PUSH
5770: LD_INT 0
5772: ST_TO_ADDR
// sFac := false ;
5773: LD_ADDR_EXP 87
5777: PUSH
5778: LD_INT 0
5780: ST_TO_ADDR
// sPower := false ;
5781: LD_ADDR_EXP 88
5785: PUSH
5786: LD_INT 0
5788: ST_TO_ADDR
// sRandom := false ;
5789: LD_ADDR_EXP 89
5793: PUSH
5794: LD_INT 0
5796: ST_TO_ADDR
// sShield := false ;
5797: LD_ADDR_EXP 90
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// sTime := false ;
5805: LD_ADDR_EXP 91
5809: PUSH
5810: LD_INT 0
5812: ST_TO_ADDR
// sTools := false ;
5813: LD_ADDR_EXP 92
5817: PUSH
5818: LD_INT 0
5820: ST_TO_ADDR
// sSold := false ;
5821: LD_ADDR_EXP 57
5825: PUSH
5826: LD_INT 0
5828: ST_TO_ADDR
// sDiff := false ;
5829: LD_ADDR_EXP 58
5833: PUSH
5834: LD_INT 0
5836: ST_TO_ADDR
// sFog := false ;
5837: LD_ADDR_EXP 61
5841: PUSH
5842: LD_INT 0
5844: ST_TO_ADDR
// sReset := false ;
5845: LD_ADDR_EXP 62
5849: PUSH
5850: LD_INT 0
5852: ST_TO_ADDR
// sSun := false ;
5853: LD_ADDR_EXP 63
5857: PUSH
5858: LD_INT 0
5860: ST_TO_ADDR
// sTiger := false ;
5861: LD_ADDR_EXP 59
5865: PUSH
5866: LD_INT 0
5868: ST_TO_ADDR
// sBomb := false ;
5869: LD_ADDR_EXP 60
5873: PUSH
5874: LD_INT 0
5876: ST_TO_ADDR
// sWound := false ;
5877: LD_ADDR_EXP 68
5881: PUSH
5882: LD_INT 0
5884: ST_TO_ADDR
// sBetray := false ;
5885: LD_ADDR_EXP 72
5889: PUSH
5890: LD_INT 0
5892: ST_TO_ADDR
// sContamin := false ;
5893: LD_ADDR_EXP 73
5897: PUSH
5898: LD_INT 0
5900: ST_TO_ADDR
// sOil := false ;
5901: LD_ADDR_EXP 75
5905: PUSH
5906: LD_INT 0
5908: ST_TO_ADDR
// sStu := false ;
5909: LD_ADDR_EXP 79
5913: PUSH
5914: LD_INT 0
5916: ST_TO_ADDR
// sBazooka := false ;
5917: LD_ADDR_EXP 82
5921: PUSH
5922: LD_INT 0
5924: ST_TO_ADDR
// sMortar := false ;
5925: LD_ADDR_EXP 83
5929: PUSH
5930: LD_INT 0
5932: ST_TO_ADDR
// sRanger := false ;
5933: LD_ADDR_EXP 93
5937: PUSH
5938: LD_INT 0
5940: ST_TO_ADDR
// sComputer := false ;
5941: LD_ADDR_EXP 94
5945: PUSH
5946: LD_INT 0
5948: ST_TO_ADDR
// s30 := false ;
5949: LD_ADDR_EXP 95
5953: PUSH
5954: LD_INT 0
5956: ST_TO_ADDR
// s60 := false ;
5957: LD_ADDR_EXP 96
5961: PUSH
5962: LD_INT 0
5964: ST_TO_ADDR
// end ;
5965: LD_VAR 0 1
5969: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5970: LD_INT 0
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// result := [ ] ;
5979: LD_ADDR_VAR 0 2
5983: PUSH
5984: EMPTY
5985: ST_TO_ADDR
// if campaign_id = 1 then
5986: LD_OWVAR 69
5990: PUSH
5991: LD_INT 1
5993: EQUAL
5994: IFFALSE 9160
// begin case mission_number of 1 :
5996: LD_OWVAR 70
6000: PUSH
6001: LD_INT 1
6003: DOUBLE
6004: EQUAL
6005: IFTRUE 6009
6007: GO 6085
6009: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6010: LD_ADDR_VAR 0 2
6014: PUSH
6015: LD_INT 2
6017: PUSH
6018: LD_INT 4
6020: PUSH
6021: LD_INT 11
6023: PUSH
6024: LD_INT 12
6026: PUSH
6027: LD_INT 15
6029: PUSH
6030: LD_INT 16
6032: PUSH
6033: LD_INT 22
6035: PUSH
6036: LD_INT 23
6038: PUSH
6039: LD_INT 26
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 101
6055: PUSH
6056: LD_INT 102
6058: PUSH
6059: LD_INT 106
6061: PUSH
6062: LD_INT 116
6064: PUSH
6065: LD_INT 117
6067: PUSH
6068: LD_INT 118
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: ST_TO_ADDR
6083: GO 9158
6085: LD_INT 2
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6177
6093: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 2
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: LD_INT 11
6107: PUSH
6108: LD_INT 12
6110: PUSH
6111: LD_INT 15
6113: PUSH
6114: LD_INT 16
6116: PUSH
6117: LD_INT 22
6119: PUSH
6120: LD_INT 23
6122: PUSH
6123: LD_INT 26
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 101
6139: PUSH
6140: LD_INT 102
6142: PUSH
6143: LD_INT 105
6145: PUSH
6146: LD_INT 106
6148: PUSH
6149: LD_INT 108
6151: PUSH
6152: LD_INT 116
6154: PUSH
6155: LD_INT 117
6157: PUSH
6158: LD_INT 118
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: ST_TO_ADDR
6175: GO 9158
6177: LD_INT 3
6179: DOUBLE
6180: EQUAL
6181: IFTRUE 6185
6183: GO 6273
6185: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6186: LD_ADDR_VAR 0 2
6190: PUSH
6191: LD_INT 2
6193: PUSH
6194: LD_INT 4
6196: PUSH
6197: LD_INT 5
6199: PUSH
6200: LD_INT 11
6202: PUSH
6203: LD_INT 12
6205: PUSH
6206: LD_INT 15
6208: PUSH
6209: LD_INT 16
6211: PUSH
6212: LD_INT 22
6214: PUSH
6215: LD_INT 26
6217: PUSH
6218: LD_INT 36
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 101
6235: PUSH
6236: LD_INT 102
6238: PUSH
6239: LD_INT 105
6241: PUSH
6242: LD_INT 106
6244: PUSH
6245: LD_INT 108
6247: PUSH
6248: LD_INT 116
6250: PUSH
6251: LD_INT 117
6253: PUSH
6254: LD_INT 118
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: ST_TO_ADDR
6271: GO 9158
6273: LD_INT 4
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6377
6281: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6282: LD_ADDR_VAR 0 2
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 5
6295: PUSH
6296: LD_INT 8
6298: PUSH
6299: LD_INT 11
6301: PUSH
6302: LD_INT 12
6304: PUSH
6305: LD_INT 15
6307: PUSH
6308: LD_INT 16
6310: PUSH
6311: LD_INT 22
6313: PUSH
6314: LD_INT 23
6316: PUSH
6317: LD_INT 26
6319: PUSH
6320: LD_INT 36
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 101
6339: PUSH
6340: LD_INT 102
6342: PUSH
6343: LD_INT 105
6345: PUSH
6346: LD_INT 106
6348: PUSH
6349: LD_INT 108
6351: PUSH
6352: LD_INT 116
6354: PUSH
6355: LD_INT 117
6357: PUSH
6358: LD_INT 118
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: ST_TO_ADDR
6375: GO 9158
6377: LD_INT 5
6379: DOUBLE
6380: EQUAL
6381: IFTRUE 6385
6383: GO 6497
6385: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: LD_INT 4
6396: PUSH
6397: LD_INT 5
6399: PUSH
6400: LD_INT 6
6402: PUSH
6403: LD_INT 8
6405: PUSH
6406: LD_INT 11
6408: PUSH
6409: LD_INT 12
6411: PUSH
6412: LD_INT 15
6414: PUSH
6415: LD_INT 16
6417: PUSH
6418: LD_INT 22
6420: PUSH
6421: LD_INT 23
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 26
6429: PUSH
6430: LD_INT 36
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 101
6451: PUSH
6452: LD_INT 102
6454: PUSH
6455: LD_INT 105
6457: PUSH
6458: LD_INT 106
6460: PUSH
6461: LD_INT 108
6463: PUSH
6464: LD_INT 109
6466: PUSH
6467: LD_INT 112
6469: PUSH
6470: LD_INT 116
6472: PUSH
6473: LD_INT 117
6475: PUSH
6476: LD_INT 118
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: ST_TO_ADDR
6495: GO 9158
6497: LD_INT 6
6499: DOUBLE
6500: EQUAL
6501: IFTRUE 6505
6503: GO 6637
6505: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6506: LD_ADDR_VAR 0 2
6510: PUSH
6511: LD_INT 2
6513: PUSH
6514: LD_INT 4
6516: PUSH
6517: LD_INT 5
6519: PUSH
6520: LD_INT 6
6522: PUSH
6523: LD_INT 8
6525: PUSH
6526: LD_INT 11
6528: PUSH
6529: LD_INT 12
6531: PUSH
6532: LD_INT 15
6534: PUSH
6535: LD_INT 16
6537: PUSH
6538: LD_INT 20
6540: PUSH
6541: LD_INT 21
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 23
6549: PUSH
6550: LD_INT 25
6552: PUSH
6553: LD_INT 26
6555: PUSH
6556: LD_INT 30
6558: PUSH
6559: LD_INT 31
6561: PUSH
6562: LD_INT 32
6564: PUSH
6565: LD_INT 36
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 101
6591: PUSH
6592: LD_INT 102
6594: PUSH
6595: LD_INT 105
6597: PUSH
6598: LD_INT 106
6600: PUSH
6601: LD_INT 108
6603: PUSH
6604: LD_INT 109
6606: PUSH
6607: LD_INT 112
6609: PUSH
6610: LD_INT 116
6612: PUSH
6613: LD_INT 117
6615: PUSH
6616: LD_INT 118
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: ST_TO_ADDR
6635: GO 9158
6637: LD_INT 7
6639: DOUBLE
6640: EQUAL
6641: IFTRUE 6645
6643: GO 6757
6645: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6646: LD_ADDR_VAR 0 2
6650: PUSH
6651: LD_INT 2
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: LD_INT 5
6659: PUSH
6660: LD_INT 7
6662: PUSH
6663: LD_INT 11
6665: PUSH
6666: LD_INT 12
6668: PUSH
6669: LD_INT 15
6671: PUSH
6672: LD_INT 16
6674: PUSH
6675: LD_INT 20
6677: PUSH
6678: LD_INT 21
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_INT 23
6686: PUSH
6687: LD_INT 25
6689: PUSH
6690: LD_INT 26
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: PUSH
6709: LD_INT 101
6711: PUSH
6712: LD_INT 102
6714: PUSH
6715: LD_INT 103
6717: PUSH
6718: LD_INT 105
6720: PUSH
6721: LD_INT 106
6723: PUSH
6724: LD_INT 108
6726: PUSH
6727: LD_INT 112
6729: PUSH
6730: LD_INT 116
6732: PUSH
6733: LD_INT 117
6735: PUSH
6736: LD_INT 118
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: ST_TO_ADDR
6755: GO 9158
6757: LD_INT 8
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6905
6765: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 4
6776: PUSH
6777: LD_INT 5
6779: PUSH
6780: LD_INT 6
6782: PUSH
6783: LD_INT 7
6785: PUSH
6786: LD_INT 8
6788: PUSH
6789: LD_INT 11
6791: PUSH
6792: LD_INT 12
6794: PUSH
6795: LD_INT 15
6797: PUSH
6798: LD_INT 16
6800: PUSH
6801: LD_INT 20
6803: PUSH
6804: LD_INT 21
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 23
6812: PUSH
6813: LD_INT 25
6815: PUSH
6816: LD_INT 26
6818: PUSH
6819: LD_INT 30
6821: PUSH
6822: LD_INT 31
6824: PUSH
6825: LD_INT 32
6827: PUSH
6828: LD_INT 36
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 101
6855: PUSH
6856: LD_INT 102
6858: PUSH
6859: LD_INT 103
6861: PUSH
6862: LD_INT 105
6864: PUSH
6865: LD_INT 106
6867: PUSH
6868: LD_INT 108
6870: PUSH
6871: LD_INT 109
6873: PUSH
6874: LD_INT 112
6876: PUSH
6877: LD_INT 116
6879: PUSH
6880: LD_INT 117
6882: PUSH
6883: LD_INT 118
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 9158
6905: LD_INT 9
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7061
6913: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6914: LD_ADDR_VAR 0 2
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 4
6924: PUSH
6925: LD_INT 5
6927: PUSH
6928: LD_INT 6
6930: PUSH
6931: LD_INT 7
6933: PUSH
6934: LD_INT 8
6936: PUSH
6937: LD_INT 11
6939: PUSH
6940: LD_INT 12
6942: PUSH
6943: LD_INT 15
6945: PUSH
6946: LD_INT 16
6948: PUSH
6949: LD_INT 20
6951: PUSH
6952: LD_INT 21
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 23
6960: PUSH
6961: LD_INT 25
6963: PUSH
6964: LD_INT 26
6966: PUSH
6967: LD_INT 28
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 31
6975: PUSH
6976: LD_INT 32
6978: PUSH
6979: LD_INT 36
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 101
7007: PUSH
7008: LD_INT 102
7010: PUSH
7011: LD_INT 103
7013: PUSH
7014: LD_INT 105
7016: PUSH
7017: LD_INT 106
7019: PUSH
7020: LD_INT 108
7022: PUSH
7023: LD_INT 109
7025: PUSH
7026: LD_INT 112
7028: PUSH
7029: LD_INT 114
7031: PUSH
7032: LD_INT 116
7034: PUSH
7035: LD_INT 117
7037: PUSH
7038: LD_INT 118
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: ST_TO_ADDR
7059: GO 9158
7061: LD_INT 10
7063: DOUBLE
7064: EQUAL
7065: IFTRUE 7069
7067: GO 7265
7069: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7070: LD_ADDR_VAR 0 2
7074: PUSH
7075: LD_INT 2
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: LD_INT 7
7089: PUSH
7090: LD_INT 8
7092: PUSH
7093: LD_INT 9
7095: PUSH
7096: LD_INT 10
7098: PUSH
7099: LD_INT 11
7101: PUSH
7102: LD_INT 12
7104: PUSH
7105: LD_INT 13
7107: PUSH
7108: LD_INT 14
7110: PUSH
7111: LD_INT 15
7113: PUSH
7114: LD_INT 16
7116: PUSH
7117: LD_INT 17
7119: PUSH
7120: LD_INT 18
7122: PUSH
7123: LD_INT 19
7125: PUSH
7126: LD_INT 20
7128: PUSH
7129: LD_INT 21
7131: PUSH
7132: LD_INT 22
7134: PUSH
7135: LD_INT 23
7137: PUSH
7138: LD_INT 24
7140: PUSH
7141: LD_INT 25
7143: PUSH
7144: LD_INT 26
7146: PUSH
7147: LD_INT 28
7149: PUSH
7150: LD_INT 30
7152: PUSH
7153: LD_INT 31
7155: PUSH
7156: LD_INT 32
7158: PUSH
7159: LD_INT 36
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 101
7195: PUSH
7196: LD_INT 102
7198: PUSH
7199: LD_INT 103
7201: PUSH
7202: LD_INT 104
7204: PUSH
7205: LD_INT 105
7207: PUSH
7208: LD_INT 106
7210: PUSH
7211: LD_INT 107
7213: PUSH
7214: LD_INT 108
7216: PUSH
7217: LD_INT 109
7219: PUSH
7220: LD_INT 110
7222: PUSH
7223: LD_INT 111
7225: PUSH
7226: LD_INT 112
7228: PUSH
7229: LD_INT 114
7231: PUSH
7232: LD_INT 116
7234: PUSH
7235: LD_INT 117
7237: PUSH
7238: LD_INT 118
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: ST_TO_ADDR
7263: GO 9158
7265: LD_INT 11
7267: DOUBLE
7268: EQUAL
7269: IFTRUE 7273
7271: GO 7477
7273: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7274: LD_ADDR_VAR 0 2
7278: PUSH
7279: LD_INT 2
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 4
7287: PUSH
7288: LD_INT 5
7290: PUSH
7291: LD_INT 6
7293: PUSH
7294: LD_INT 7
7296: PUSH
7297: LD_INT 8
7299: PUSH
7300: LD_INT 9
7302: PUSH
7303: LD_INT 10
7305: PUSH
7306: LD_INT 11
7308: PUSH
7309: LD_INT 12
7311: PUSH
7312: LD_INT 13
7314: PUSH
7315: LD_INT 14
7317: PUSH
7318: LD_INT 15
7320: PUSH
7321: LD_INT 16
7323: PUSH
7324: LD_INT 17
7326: PUSH
7327: LD_INT 18
7329: PUSH
7330: LD_INT 19
7332: PUSH
7333: LD_INT 20
7335: PUSH
7336: LD_INT 21
7338: PUSH
7339: LD_INT 22
7341: PUSH
7342: LD_INT 23
7344: PUSH
7345: LD_INT 24
7347: PUSH
7348: LD_INT 25
7350: PUSH
7351: LD_INT 26
7353: PUSH
7354: LD_INT 28
7356: PUSH
7357: LD_INT 30
7359: PUSH
7360: LD_INT 31
7362: PUSH
7363: LD_INT 32
7365: PUSH
7366: LD_INT 34
7368: PUSH
7369: LD_INT 36
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 101
7407: PUSH
7408: LD_INT 102
7410: PUSH
7411: LD_INT 103
7413: PUSH
7414: LD_INT 104
7416: PUSH
7417: LD_INT 105
7419: PUSH
7420: LD_INT 106
7422: PUSH
7423: LD_INT 107
7425: PUSH
7426: LD_INT 108
7428: PUSH
7429: LD_INT 109
7431: PUSH
7432: LD_INT 110
7434: PUSH
7435: LD_INT 111
7437: PUSH
7438: LD_INT 112
7440: PUSH
7441: LD_INT 114
7443: PUSH
7444: LD_INT 116
7446: PUSH
7447: LD_INT 117
7449: PUSH
7450: LD_INT 118
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: ST_TO_ADDR
7475: GO 9158
7477: LD_INT 12
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7485
7483: GO 7705
7485: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_INT 1
7493: PUSH
7494: LD_INT 2
7496: PUSH
7497: LD_INT 3
7499: PUSH
7500: LD_INT 4
7502: PUSH
7503: LD_INT 5
7505: PUSH
7506: LD_INT 6
7508: PUSH
7509: LD_INT 7
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 9
7517: PUSH
7518: LD_INT 10
7520: PUSH
7521: LD_INT 11
7523: PUSH
7524: LD_INT 12
7526: PUSH
7527: LD_INT 13
7529: PUSH
7530: LD_INT 14
7532: PUSH
7533: LD_INT 15
7535: PUSH
7536: LD_INT 16
7538: PUSH
7539: LD_INT 17
7541: PUSH
7542: LD_INT 18
7544: PUSH
7545: LD_INT 19
7547: PUSH
7548: LD_INT 20
7550: PUSH
7551: LD_INT 21
7553: PUSH
7554: LD_INT 22
7556: PUSH
7557: LD_INT 23
7559: PUSH
7560: LD_INT 24
7562: PUSH
7563: LD_INT 25
7565: PUSH
7566: LD_INT 26
7568: PUSH
7569: LD_INT 27
7571: PUSH
7572: LD_INT 28
7574: PUSH
7575: LD_INT 30
7577: PUSH
7578: LD_INT 31
7580: PUSH
7581: LD_INT 32
7583: PUSH
7584: LD_INT 33
7586: PUSH
7587: LD_INT 34
7589: PUSH
7590: LD_INT 36
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: PUSH
7629: LD_INT 101
7631: PUSH
7632: LD_INT 102
7634: PUSH
7635: LD_INT 103
7637: PUSH
7638: LD_INT 104
7640: PUSH
7641: LD_INT 105
7643: PUSH
7644: LD_INT 106
7646: PUSH
7647: LD_INT 107
7649: PUSH
7650: LD_INT 108
7652: PUSH
7653: LD_INT 109
7655: PUSH
7656: LD_INT 110
7658: PUSH
7659: LD_INT 111
7661: PUSH
7662: LD_INT 112
7664: PUSH
7665: LD_INT 113
7667: PUSH
7668: LD_INT 114
7670: PUSH
7671: LD_INT 116
7673: PUSH
7674: LD_INT 117
7676: PUSH
7677: LD_INT 118
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: ST_TO_ADDR
7703: GO 9158
7705: LD_INT 13
7707: DOUBLE
7708: EQUAL
7709: IFTRUE 7713
7711: GO 7921
7713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7714: LD_ADDR_VAR 0 2
7718: PUSH
7719: LD_INT 1
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: LD_INT 3
7727: PUSH
7728: LD_INT 4
7730: PUSH
7731: LD_INT 5
7733: PUSH
7734: LD_INT 8
7736: PUSH
7737: LD_INT 9
7739: PUSH
7740: LD_INT 10
7742: PUSH
7743: LD_INT 11
7745: PUSH
7746: LD_INT 12
7748: PUSH
7749: LD_INT 14
7751: PUSH
7752: LD_INT 15
7754: PUSH
7755: LD_INT 16
7757: PUSH
7758: LD_INT 17
7760: PUSH
7761: LD_INT 18
7763: PUSH
7764: LD_INT 19
7766: PUSH
7767: LD_INT 20
7769: PUSH
7770: LD_INT 21
7772: PUSH
7773: LD_INT 22
7775: PUSH
7776: LD_INT 23
7778: PUSH
7779: LD_INT 24
7781: PUSH
7782: LD_INT 25
7784: PUSH
7785: LD_INT 26
7787: PUSH
7788: LD_INT 27
7790: PUSH
7791: LD_INT 28
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 31
7799: PUSH
7800: LD_INT 32
7802: PUSH
7803: LD_INT 33
7805: PUSH
7806: LD_INT 34
7808: PUSH
7809: LD_INT 36
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 101
7847: PUSH
7848: LD_INT 102
7850: PUSH
7851: LD_INT 103
7853: PUSH
7854: LD_INT 104
7856: PUSH
7857: LD_INT 105
7859: PUSH
7860: LD_INT 106
7862: PUSH
7863: LD_INT 107
7865: PUSH
7866: LD_INT 108
7868: PUSH
7869: LD_INT 109
7871: PUSH
7872: LD_INT 110
7874: PUSH
7875: LD_INT 111
7877: PUSH
7878: LD_INT 112
7880: PUSH
7881: LD_INT 113
7883: PUSH
7884: LD_INT 114
7886: PUSH
7887: LD_INT 116
7889: PUSH
7890: LD_INT 117
7892: PUSH
7893: LD_INT 118
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: ST_TO_ADDR
7919: GO 9158
7921: LD_INT 14
7923: DOUBLE
7924: EQUAL
7925: IFTRUE 7929
7927: GO 8153
7929: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7930: LD_ADDR_VAR 0 2
7934: PUSH
7935: LD_INT 1
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: LD_INT 3
7943: PUSH
7944: LD_INT 4
7946: PUSH
7947: LD_INT 5
7949: PUSH
7950: LD_INT 6
7952: PUSH
7953: LD_INT 7
7955: PUSH
7956: LD_INT 8
7958: PUSH
7959: LD_INT 9
7961: PUSH
7962: LD_INT 10
7964: PUSH
7965: LD_INT 11
7967: PUSH
7968: LD_INT 12
7970: PUSH
7971: LD_INT 13
7973: PUSH
7974: LD_INT 14
7976: PUSH
7977: LD_INT 15
7979: PUSH
7980: LD_INT 16
7982: PUSH
7983: LD_INT 17
7985: PUSH
7986: LD_INT 18
7988: PUSH
7989: LD_INT 19
7991: PUSH
7992: LD_INT 20
7994: PUSH
7995: LD_INT 21
7997: PUSH
7998: LD_INT 22
8000: PUSH
8001: LD_INT 23
8003: PUSH
8004: LD_INT 24
8006: PUSH
8007: LD_INT 25
8009: PUSH
8010: LD_INT 26
8012: PUSH
8013: LD_INT 27
8015: PUSH
8016: LD_INT 28
8018: PUSH
8019: LD_INT 29
8021: PUSH
8022: LD_INT 30
8024: PUSH
8025: LD_INT 31
8027: PUSH
8028: LD_INT 32
8030: PUSH
8031: LD_INT 33
8033: PUSH
8034: LD_INT 34
8036: PUSH
8037: LD_INT 36
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 101
8079: PUSH
8080: LD_INT 102
8082: PUSH
8083: LD_INT 103
8085: PUSH
8086: LD_INT 104
8088: PUSH
8089: LD_INT 105
8091: PUSH
8092: LD_INT 106
8094: PUSH
8095: LD_INT 107
8097: PUSH
8098: LD_INT 108
8100: PUSH
8101: LD_INT 109
8103: PUSH
8104: LD_INT 110
8106: PUSH
8107: LD_INT 111
8109: PUSH
8110: LD_INT 112
8112: PUSH
8113: LD_INT 113
8115: PUSH
8116: LD_INT 114
8118: PUSH
8119: LD_INT 116
8121: PUSH
8122: LD_INT 117
8124: PUSH
8125: LD_INT 118
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: ST_TO_ADDR
8151: GO 9158
8153: LD_INT 15
8155: DOUBLE
8156: EQUAL
8157: IFTRUE 8161
8159: GO 8385
8161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8162: LD_ADDR_VAR 0 2
8166: PUSH
8167: LD_INT 1
8169: PUSH
8170: LD_INT 2
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: LD_INT 4
8178: PUSH
8179: LD_INT 5
8181: PUSH
8182: LD_INT 6
8184: PUSH
8185: LD_INT 7
8187: PUSH
8188: LD_INT 8
8190: PUSH
8191: LD_INT 9
8193: PUSH
8194: LD_INT 10
8196: PUSH
8197: LD_INT 11
8199: PUSH
8200: LD_INT 12
8202: PUSH
8203: LD_INT 13
8205: PUSH
8206: LD_INT 14
8208: PUSH
8209: LD_INT 15
8211: PUSH
8212: LD_INT 16
8214: PUSH
8215: LD_INT 17
8217: PUSH
8218: LD_INT 18
8220: PUSH
8221: LD_INT 19
8223: PUSH
8224: LD_INT 20
8226: PUSH
8227: LD_INT 21
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 23
8235: PUSH
8236: LD_INT 24
8238: PUSH
8239: LD_INT 25
8241: PUSH
8242: LD_INT 26
8244: PUSH
8245: LD_INT 27
8247: PUSH
8248: LD_INT 28
8250: PUSH
8251: LD_INT 29
8253: PUSH
8254: LD_INT 30
8256: PUSH
8257: LD_INT 31
8259: PUSH
8260: LD_INT 32
8262: PUSH
8263: LD_INT 33
8265: PUSH
8266: LD_INT 34
8268: PUSH
8269: LD_INT 36
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 101
8311: PUSH
8312: LD_INT 102
8314: PUSH
8315: LD_INT 103
8317: PUSH
8318: LD_INT 104
8320: PUSH
8321: LD_INT 105
8323: PUSH
8324: LD_INT 106
8326: PUSH
8327: LD_INT 107
8329: PUSH
8330: LD_INT 108
8332: PUSH
8333: LD_INT 109
8335: PUSH
8336: LD_INT 110
8338: PUSH
8339: LD_INT 111
8341: PUSH
8342: LD_INT 112
8344: PUSH
8345: LD_INT 113
8347: PUSH
8348: LD_INT 114
8350: PUSH
8351: LD_INT 116
8353: PUSH
8354: LD_INT 117
8356: PUSH
8357: LD_INT 118
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: ST_TO_ADDR
8383: GO 9158
8385: LD_INT 16
8387: DOUBLE
8388: EQUAL
8389: IFTRUE 8393
8391: GO 8529
8393: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8394: LD_ADDR_VAR 0 2
8398: PUSH
8399: LD_INT 2
8401: PUSH
8402: LD_INT 4
8404: PUSH
8405: LD_INT 5
8407: PUSH
8408: LD_INT 7
8410: PUSH
8411: LD_INT 11
8413: PUSH
8414: LD_INT 12
8416: PUSH
8417: LD_INT 15
8419: PUSH
8420: LD_INT 16
8422: PUSH
8423: LD_INT 20
8425: PUSH
8426: LD_INT 21
8428: PUSH
8429: LD_INT 22
8431: PUSH
8432: LD_INT 23
8434: PUSH
8435: LD_INT 25
8437: PUSH
8438: LD_INT 26
8440: PUSH
8441: LD_INT 30
8443: PUSH
8444: LD_INT 31
8446: PUSH
8447: LD_INT 32
8449: PUSH
8450: LD_INT 33
8452: PUSH
8453: LD_INT 34
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: LD_INT 101
8479: PUSH
8480: LD_INT 102
8482: PUSH
8483: LD_INT 103
8485: PUSH
8486: LD_INT 106
8488: PUSH
8489: LD_INT 108
8491: PUSH
8492: LD_INT 112
8494: PUSH
8495: LD_INT 113
8497: PUSH
8498: LD_INT 114
8500: PUSH
8501: LD_INT 116
8503: PUSH
8504: LD_INT 117
8506: PUSH
8507: LD_INT 118
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: ST_TO_ADDR
8527: GO 9158
8529: LD_INT 17
8531: DOUBLE
8532: EQUAL
8533: IFTRUE 8537
8535: GO 8761
8537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8538: LD_ADDR_VAR 0 2
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: LD_INT 4
8554: PUSH
8555: LD_INT 5
8557: PUSH
8558: LD_INT 6
8560: PUSH
8561: LD_INT 7
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: LD_INT 9
8569: PUSH
8570: LD_INT 10
8572: PUSH
8573: LD_INT 11
8575: PUSH
8576: LD_INT 12
8578: PUSH
8579: LD_INT 13
8581: PUSH
8582: LD_INT 14
8584: PUSH
8585: LD_INT 15
8587: PUSH
8588: LD_INT 16
8590: PUSH
8591: LD_INT 17
8593: PUSH
8594: LD_INT 18
8596: PUSH
8597: LD_INT 19
8599: PUSH
8600: LD_INT 20
8602: PUSH
8603: LD_INT 21
8605: PUSH
8606: LD_INT 22
8608: PUSH
8609: LD_INT 23
8611: PUSH
8612: LD_INT 24
8614: PUSH
8615: LD_INT 25
8617: PUSH
8618: LD_INT 26
8620: PUSH
8621: LD_INT 27
8623: PUSH
8624: LD_INT 28
8626: PUSH
8627: LD_INT 29
8629: PUSH
8630: LD_INT 30
8632: PUSH
8633: LD_INT 31
8635: PUSH
8636: LD_INT 32
8638: PUSH
8639: LD_INT 33
8641: PUSH
8642: LD_INT 34
8644: PUSH
8645: LD_INT 36
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 101
8687: PUSH
8688: LD_INT 102
8690: PUSH
8691: LD_INT 103
8693: PUSH
8694: LD_INT 104
8696: PUSH
8697: LD_INT 105
8699: PUSH
8700: LD_INT 106
8702: PUSH
8703: LD_INT 107
8705: PUSH
8706: LD_INT 108
8708: PUSH
8709: LD_INT 109
8711: PUSH
8712: LD_INT 110
8714: PUSH
8715: LD_INT 111
8717: PUSH
8718: LD_INT 112
8720: PUSH
8721: LD_INT 113
8723: PUSH
8724: LD_INT 114
8726: PUSH
8727: LD_INT 116
8729: PUSH
8730: LD_INT 117
8732: PUSH
8733: LD_INT 118
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: ST_TO_ADDR
8759: GO 9158
8761: LD_INT 18
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8917
8769: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8770: LD_ADDR_VAR 0 2
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: LD_INT 4
8780: PUSH
8781: LD_INT 5
8783: PUSH
8784: LD_INT 7
8786: PUSH
8787: LD_INT 11
8789: PUSH
8790: LD_INT 12
8792: PUSH
8793: LD_INT 15
8795: PUSH
8796: LD_INT 16
8798: PUSH
8799: LD_INT 20
8801: PUSH
8802: LD_INT 21
8804: PUSH
8805: LD_INT 22
8807: PUSH
8808: LD_INT 23
8810: PUSH
8811: LD_INT 25
8813: PUSH
8814: LD_INT 26
8816: PUSH
8817: LD_INT 30
8819: PUSH
8820: LD_INT 31
8822: PUSH
8823: LD_INT 32
8825: PUSH
8826: LD_INT 33
8828: PUSH
8829: LD_INT 34
8831: PUSH
8832: LD_INT 35
8834: PUSH
8835: LD_INT 36
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 101
8863: PUSH
8864: LD_INT 102
8866: PUSH
8867: LD_INT 103
8869: PUSH
8870: LD_INT 106
8872: PUSH
8873: LD_INT 108
8875: PUSH
8876: LD_INT 112
8878: PUSH
8879: LD_INT 113
8881: PUSH
8882: LD_INT 114
8884: PUSH
8885: LD_INT 115
8887: PUSH
8888: LD_INT 116
8890: PUSH
8891: LD_INT 117
8893: PUSH
8894: LD_INT 118
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: ST_TO_ADDR
8915: GO 9158
8917: LD_INT 19
8919: DOUBLE
8920: EQUAL
8921: IFTRUE 8925
8923: GO 9157
8925: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8926: LD_ADDR_VAR 0 2
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: LD_INT 2
8936: PUSH
8937: LD_INT 3
8939: PUSH
8940: LD_INT 4
8942: PUSH
8943: LD_INT 5
8945: PUSH
8946: LD_INT 6
8948: PUSH
8949: LD_INT 7
8951: PUSH
8952: LD_INT 8
8954: PUSH
8955: LD_INT 9
8957: PUSH
8958: LD_INT 10
8960: PUSH
8961: LD_INT 11
8963: PUSH
8964: LD_INT 12
8966: PUSH
8967: LD_INT 13
8969: PUSH
8970: LD_INT 14
8972: PUSH
8973: LD_INT 15
8975: PUSH
8976: LD_INT 16
8978: PUSH
8979: LD_INT 17
8981: PUSH
8982: LD_INT 18
8984: PUSH
8985: LD_INT 19
8987: PUSH
8988: LD_INT 20
8990: PUSH
8991: LD_INT 21
8993: PUSH
8994: LD_INT 22
8996: PUSH
8997: LD_INT 23
8999: PUSH
9000: LD_INT 24
9002: PUSH
9003: LD_INT 25
9005: PUSH
9006: LD_INT 26
9008: PUSH
9009: LD_INT 27
9011: PUSH
9012: LD_INT 28
9014: PUSH
9015: LD_INT 29
9017: PUSH
9018: LD_INT 30
9020: PUSH
9021: LD_INT 31
9023: PUSH
9024: LD_INT 32
9026: PUSH
9027: LD_INT 33
9029: PUSH
9030: LD_INT 34
9032: PUSH
9033: LD_INT 35
9035: PUSH
9036: LD_INT 36
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 101
9079: PUSH
9080: LD_INT 102
9082: PUSH
9083: LD_INT 103
9085: PUSH
9086: LD_INT 104
9088: PUSH
9089: LD_INT 105
9091: PUSH
9092: LD_INT 106
9094: PUSH
9095: LD_INT 107
9097: PUSH
9098: LD_INT 108
9100: PUSH
9101: LD_INT 109
9103: PUSH
9104: LD_INT 110
9106: PUSH
9107: LD_INT 111
9109: PUSH
9110: LD_INT 112
9112: PUSH
9113: LD_INT 113
9115: PUSH
9116: LD_INT 114
9118: PUSH
9119: LD_INT 115
9121: PUSH
9122: LD_INT 116
9124: PUSH
9125: LD_INT 117
9127: PUSH
9128: LD_INT 118
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: ST_TO_ADDR
9155: GO 9158
9157: POP
// end else
9158: GO 9389
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: LD_INT 1
9167: PUSH
9168: LD_INT 2
9170: PUSH
9171: LD_INT 3
9173: PUSH
9174: LD_INT 4
9176: PUSH
9177: LD_INT 5
9179: PUSH
9180: LD_INT 6
9182: PUSH
9183: LD_INT 7
9185: PUSH
9186: LD_INT 8
9188: PUSH
9189: LD_INT 9
9191: PUSH
9192: LD_INT 10
9194: PUSH
9195: LD_INT 11
9197: PUSH
9198: LD_INT 12
9200: PUSH
9201: LD_INT 13
9203: PUSH
9204: LD_INT 14
9206: PUSH
9207: LD_INT 15
9209: PUSH
9210: LD_INT 16
9212: PUSH
9213: LD_INT 17
9215: PUSH
9216: LD_INT 18
9218: PUSH
9219: LD_INT 19
9221: PUSH
9222: LD_INT 20
9224: PUSH
9225: LD_INT 21
9227: PUSH
9228: LD_INT 22
9230: PUSH
9231: LD_INT 23
9233: PUSH
9234: LD_INT 24
9236: PUSH
9237: LD_INT 25
9239: PUSH
9240: LD_INT 26
9242: PUSH
9243: LD_INT 27
9245: PUSH
9246: LD_INT 28
9248: PUSH
9249: LD_INT 29
9251: PUSH
9252: LD_INT 30
9254: PUSH
9255: LD_INT 31
9257: PUSH
9258: LD_INT 32
9260: PUSH
9261: LD_INT 33
9263: PUSH
9264: LD_INT 34
9266: PUSH
9267: LD_INT 35
9269: PUSH
9270: LD_INT 36
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 101
9313: PUSH
9314: LD_INT 102
9316: PUSH
9317: LD_INT 103
9319: PUSH
9320: LD_INT 104
9322: PUSH
9323: LD_INT 105
9325: PUSH
9326: LD_INT 106
9328: PUSH
9329: LD_INT 107
9331: PUSH
9332: LD_INT 108
9334: PUSH
9335: LD_INT 109
9337: PUSH
9338: LD_INT 110
9340: PUSH
9341: LD_INT 111
9343: PUSH
9344: LD_INT 112
9346: PUSH
9347: LD_INT 113
9349: PUSH
9350: LD_INT 114
9352: PUSH
9353: LD_INT 115
9355: PUSH
9356: LD_INT 116
9358: PUSH
9359: LD_INT 117
9361: PUSH
9362: LD_INT 118
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: ST_TO_ADDR
// if result then
9389: LD_VAR 0 2
9393: IFFALSE 10179
// begin normal :=  ;
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_STRING 
9402: ST_TO_ADDR
// hardcore :=  ;
9403: LD_ADDR_VAR 0 6
9407: PUSH
9408: LD_STRING 
9410: ST_TO_ADDR
// active :=  ;
9411: LD_ADDR_VAR 0 7
9415: PUSH
9416: LD_STRING 
9418: ST_TO_ADDR
// for i = 1 to normalCounter do
9419: LD_ADDR_VAR 0 8
9423: PUSH
9424: DOUBLE
9425: LD_INT 1
9427: DEC
9428: ST_TO_ADDR
9429: LD_EXP 41
9433: PUSH
9434: FOR_TO
9435: IFFALSE 9536
// begin tmp := 0 ;
9437: LD_ADDR_VAR 0 3
9441: PUSH
9442: LD_STRING 0
9444: ST_TO_ADDR
// if result [ 1 ] then
9445: LD_VAR 0 2
9449: PUSH
9450: LD_INT 1
9452: ARRAY
9453: IFFALSE 9518
// if result [ 1 ] [ 1 ] = i then
9455: LD_VAR 0 2
9459: PUSH
9460: LD_INT 1
9462: ARRAY
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PUSH
9468: LD_VAR 0 8
9472: EQUAL
9473: IFFALSE 9518
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9475: LD_ADDR_VAR 0 2
9479: PUSH
9480: LD_VAR 0 2
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: LD_VAR 0 2
9492: PUSH
9493: LD_INT 1
9495: ARRAY
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 3
9504: PPUSH
9505: CALL_OW 1
9509: ST_TO_ADDR
// tmp := 1 ;
9510: LD_ADDR_VAR 0 3
9514: PUSH
9515: LD_STRING 1
9517: ST_TO_ADDR
// end ; normal := normal & tmp ;
9518: LD_ADDR_VAR 0 5
9522: PUSH
9523: LD_VAR 0 5
9527: PUSH
9528: LD_VAR 0 3
9532: STR
9533: ST_TO_ADDR
// end ;
9534: GO 9434
9536: POP
9537: POP
// for i = 1 to hardcoreCounter do
9538: LD_ADDR_VAR 0 8
9542: PUSH
9543: DOUBLE
9544: LD_INT 1
9546: DEC
9547: ST_TO_ADDR
9548: LD_EXP 42
9552: PUSH
9553: FOR_TO
9554: IFFALSE 9659
// begin tmp := 0 ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: LD_STRING 0
9563: ST_TO_ADDR
// if result [ 2 ] then
9564: LD_VAR 0 2
9568: PUSH
9569: LD_INT 2
9571: ARRAY
9572: IFFALSE 9641
// if result [ 2 ] [ 1 ] = 100 + i then
9574: LD_VAR 0 2
9578: PUSH
9579: LD_INT 2
9581: ARRAY
9582: PUSH
9583: LD_INT 1
9585: ARRAY
9586: PUSH
9587: LD_INT 100
9589: PUSH
9590: LD_VAR 0 8
9594: PLUS
9595: EQUAL
9596: IFFALSE 9641
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: LD_VAR 0 2
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: LD_VAR 0 2
9615: PUSH
9616: LD_INT 2
9618: ARRAY
9619: PPUSH
9620: LD_INT 1
9622: PPUSH
9623: CALL_OW 3
9627: PPUSH
9628: CALL_OW 1
9632: ST_TO_ADDR
// tmp := 1 ;
9633: LD_ADDR_VAR 0 3
9637: PUSH
9638: LD_STRING 1
9640: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9641: LD_ADDR_VAR 0 6
9645: PUSH
9646: LD_VAR 0 6
9650: PUSH
9651: LD_VAR 0 3
9655: STR
9656: ST_TO_ADDR
// end ;
9657: GO 9553
9659: POP
9660: POP
// if isGameLoad then
9661: LD_VAR 0 1
9665: IFFALSE 10140
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9667: LD_ADDR_VAR 0 4
9671: PUSH
9672: LD_EXP 45
9676: PUSH
9677: LD_EXP 44
9681: PUSH
9682: LD_EXP 46
9686: PUSH
9687: LD_EXP 43
9691: PUSH
9692: LD_EXP 47
9696: PUSH
9697: LD_EXP 48
9701: PUSH
9702: LD_EXP 49
9706: PUSH
9707: LD_EXP 50
9711: PUSH
9712: LD_EXP 51
9716: PUSH
9717: LD_EXP 52
9721: PUSH
9722: LD_EXP 53
9726: PUSH
9727: LD_EXP 54
9731: PUSH
9732: LD_EXP 55
9736: PUSH
9737: LD_EXP 56
9741: PUSH
9742: LD_EXP 64
9746: PUSH
9747: LD_EXP 65
9751: PUSH
9752: LD_EXP 66
9756: PUSH
9757: LD_EXP 67
9761: PUSH
9762: LD_EXP 69
9766: PUSH
9767: LD_EXP 70
9771: PUSH
9772: LD_EXP 71
9776: PUSH
9777: LD_EXP 74
9781: PUSH
9782: LD_EXP 76
9786: PUSH
9787: LD_EXP 77
9791: PUSH
9792: LD_EXP 78
9796: PUSH
9797: LD_EXP 80
9801: PUSH
9802: LD_EXP 81
9806: PUSH
9807: LD_EXP 84
9811: PUSH
9812: LD_EXP 85
9816: PUSH
9817: LD_EXP 86
9821: PUSH
9822: LD_EXP 87
9826: PUSH
9827: LD_EXP 88
9831: PUSH
9832: LD_EXP 89
9836: PUSH
9837: LD_EXP 90
9841: PUSH
9842: LD_EXP 91
9846: PUSH
9847: LD_EXP 92
9851: PUSH
9852: LD_EXP 57
9856: PUSH
9857: LD_EXP 58
9861: PUSH
9862: LD_EXP 61
9866: PUSH
9867: LD_EXP 62
9871: PUSH
9872: LD_EXP 63
9876: PUSH
9877: LD_EXP 59
9881: PUSH
9882: LD_EXP 60
9886: PUSH
9887: LD_EXP 68
9891: PUSH
9892: LD_EXP 72
9896: PUSH
9897: LD_EXP 73
9901: PUSH
9902: LD_EXP 75
9906: PUSH
9907: LD_EXP 79
9911: PUSH
9912: LD_EXP 82
9916: PUSH
9917: LD_EXP 83
9921: PUSH
9922: LD_EXP 93
9926: PUSH
9927: LD_EXP 94
9931: PUSH
9932: LD_EXP 95
9936: PUSH
9937: LD_EXP 96
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: ST_TO_ADDR
// tmp :=  ;
9998: LD_ADDR_VAR 0 3
10002: PUSH
10003: LD_STRING 
10005: ST_TO_ADDR
// for i = 1 to normalCounter do
10006: LD_ADDR_VAR 0 8
10010: PUSH
10011: DOUBLE
10012: LD_INT 1
10014: DEC
10015: ST_TO_ADDR
10016: LD_EXP 41
10020: PUSH
10021: FOR_TO
10022: IFFALSE 10058
// begin if flags [ i ] then
10024: LD_VAR 0 4
10028: PUSH
10029: LD_VAR 0 8
10033: ARRAY
10034: IFFALSE 10056
// tmp := tmp & i & ; ;
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_VAR 0 3
10045: PUSH
10046: LD_VAR 0 8
10050: STR
10051: PUSH
10052: LD_STRING ;
10054: STR
10055: ST_TO_ADDR
// end ;
10056: GO 10021
10058: POP
10059: POP
// for i = 1 to hardcoreCounter do
10060: LD_ADDR_VAR 0 8
10064: PUSH
10065: DOUBLE
10066: LD_INT 1
10068: DEC
10069: ST_TO_ADDR
10070: LD_EXP 42
10074: PUSH
10075: FOR_TO
10076: IFFALSE 10122
// begin if flags [ normalCounter + i ] then
10078: LD_VAR 0 4
10082: PUSH
10083: LD_EXP 41
10087: PUSH
10088: LD_VAR 0 8
10092: PLUS
10093: ARRAY
10094: IFFALSE 10120
// tmp := tmp & ( 100 + i ) & ; ;
10096: LD_ADDR_VAR 0 3
10100: PUSH
10101: LD_VAR 0 3
10105: PUSH
10106: LD_INT 100
10108: PUSH
10109: LD_VAR 0 8
10113: PLUS
10114: STR
10115: PUSH
10116: LD_STRING ;
10118: STR
10119: ST_TO_ADDR
// end ;
10120: GO 10075
10122: POP
10123: POP
// if tmp then
10124: LD_VAR 0 3
10128: IFFALSE 10140
// active := tmp ;
10130: LD_ADDR_VAR 0 7
10134: PUSH
10135: LD_VAR 0 3
10139: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10140: LD_STRING getStreamItemsFromMission("
10142: PUSH
10143: LD_VAR 0 5
10147: STR
10148: PUSH
10149: LD_STRING ","
10151: STR
10152: PUSH
10153: LD_VAR 0 6
10157: STR
10158: PUSH
10159: LD_STRING ","
10161: STR
10162: PUSH
10163: LD_VAR 0 7
10167: STR
10168: PUSH
10169: LD_STRING ")
10171: STR
10172: PPUSH
10173: CALL_OW 559
// end else
10177: GO 10186
// ToLua ( getStreamItemsFromMission("","","") ) ;
10179: LD_STRING getStreamItemsFromMission("","","")
10181: PPUSH
10182: CALL_OW 559
// end ;
10186: LD_VAR 0 2
10190: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10191: LD_EXP 40
10195: PUSH
10196: LD_EXP 45
10200: AND
10201: IFFALSE 10325
10203: GO 10205
10205: DISABLE
10206: LD_INT 0
10208: PPUSH
10209: PPUSH
// begin enable ;
10210: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10211: LD_ADDR_VAR 0 2
10215: PUSH
10216: LD_INT 22
10218: PUSH
10219: LD_OWVAR 2
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 2
10230: PUSH
10231: LD_INT 34
10233: PUSH
10234: LD_INT 7
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 34
10243: PUSH
10244: LD_INT 45
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 34
10253: PUSH
10254: LD_INT 28
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 34
10263: PUSH
10264: LD_INT 47
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 69
10286: ST_TO_ADDR
// if not tmp then
10287: LD_VAR 0 2
10291: NOT
10292: IFFALSE 10296
// exit ;
10294: GO 10325
// for i in tmp do
10296: LD_ADDR_VAR 0 1
10300: PUSH
10301: LD_VAR 0 2
10305: PUSH
10306: FOR_IN
10307: IFFALSE 10323
// begin SetLives ( i , 0 ) ;
10309: LD_VAR 0 1
10313: PPUSH
10314: LD_INT 0
10316: PPUSH
10317: CALL_OW 234
// end ;
10321: GO 10306
10323: POP
10324: POP
// end ;
10325: PPOPN 2
10327: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10328: LD_EXP 40
10332: PUSH
10333: LD_EXP 46
10337: AND
10338: IFFALSE 10422
10340: GO 10342
10342: DISABLE
10343: LD_INT 0
10345: PPUSH
10346: PPUSH
// begin enable ;
10347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10348: LD_ADDR_VAR 0 2
10352: PUSH
10353: LD_INT 22
10355: PUSH
10356: LD_OWVAR 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 32
10367: PUSH
10368: LD_INT 3
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: ST_TO_ADDR
// if not tmp then
10384: LD_VAR 0 2
10388: NOT
10389: IFFALSE 10393
// exit ;
10391: GO 10422
// for i in tmp do
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 2
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10420
// begin SetLives ( i , 0 ) ;
10406: LD_VAR 0 1
10410: PPUSH
10411: LD_INT 0
10413: PPUSH
10414: CALL_OW 234
// end ;
10418: GO 10403
10420: POP
10421: POP
// end ;
10422: PPOPN 2
10424: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10425: LD_EXP 40
10429: PUSH
10430: LD_EXP 43
10434: AND
10435: IFFALSE 10528
10437: GO 10439
10439: DISABLE
10440: LD_INT 0
10442: PPUSH
// begin enable ;
10443: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10444: LD_ADDR_VAR 0 1
10448: PUSH
10449: LD_INT 22
10451: PUSH
10452: LD_OWVAR 2
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: LD_INT 25
10466: PUSH
10467: LD_INT 5
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 25
10476: PUSH
10477: LD_INT 9
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 25
10486: PUSH
10487: LD_INT 8
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PPUSH
10504: CALL_OW 69
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10526
// begin SetClass ( i , 1 ) ;
10512: LD_VAR 0 1
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 336
// end ;
10524: GO 10509
10526: POP
10527: POP
// end ;
10528: PPOPN 1
10530: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10531: LD_EXP 40
10535: PUSH
10536: LD_EXP 44
10540: AND
10541: PUSH
10542: LD_OWVAR 65
10546: PUSH
10547: LD_INT 7
10549: LESS
10550: AND
10551: IFFALSE 10565
10553: GO 10555
10555: DISABLE
// begin enable ;
10556: ENABLE
// game_speed := 7 ;
10557: LD_ADDR_OWVAR 65
10561: PUSH
10562: LD_INT 7
10564: ST_TO_ADDR
// end ;
10565: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10566: LD_EXP 40
10570: PUSH
10571: LD_EXP 47
10575: AND
10576: IFFALSE 10778
10578: GO 10580
10580: DISABLE
10581: LD_INT 0
10583: PPUSH
10584: PPUSH
10585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: LD_INT 81
10593: PUSH
10594: LD_OWVAR 2
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 1
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 69
10621: ST_TO_ADDR
// if not tmp then
10622: LD_VAR 0 3
10626: NOT
10627: IFFALSE 10631
// exit ;
10629: GO 10778
// if tmp > 5 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 5
10638: GREATER
10639: IFFALSE 10651
// k := 5 else
10641: LD_ADDR_VAR 0 2
10645: PUSH
10646: LD_INT 5
10648: ST_TO_ADDR
10649: GO 10661
// k := tmp ;
10651: LD_ADDR_VAR 0 2
10655: PUSH
10656: LD_VAR 0 3
10660: ST_TO_ADDR
// for i := 1 to k do
10661: LD_ADDR_VAR 0 1
10665: PUSH
10666: DOUBLE
10667: LD_INT 1
10669: DEC
10670: ST_TO_ADDR
10671: LD_VAR 0 2
10675: PUSH
10676: FOR_TO
10677: IFFALSE 10776
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10679: LD_VAR 0 3
10683: PUSH
10684: LD_VAR 0 1
10688: ARRAY
10689: PPUSH
10690: LD_VAR 0 1
10694: PUSH
10695: LD_INT 4
10697: MOD
10698: PUSH
10699: LD_INT 1
10701: PLUS
10702: PPUSH
10703: CALL_OW 259
10707: PUSH
10708: LD_INT 10
10710: LESS
10711: IFFALSE 10774
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10713: LD_VAR 0 3
10717: PUSH
10718: LD_VAR 0 1
10722: ARRAY
10723: PPUSH
10724: LD_VAR 0 1
10728: PUSH
10729: LD_INT 4
10731: MOD
10732: PUSH
10733: LD_INT 1
10735: PLUS
10736: PPUSH
10737: LD_VAR 0 3
10741: PUSH
10742: LD_VAR 0 1
10746: ARRAY
10747: PPUSH
10748: LD_VAR 0 1
10752: PUSH
10753: LD_INT 4
10755: MOD
10756: PUSH
10757: LD_INT 1
10759: PLUS
10760: PPUSH
10761: CALL_OW 259
10765: PUSH
10766: LD_INT 1
10768: PLUS
10769: PPUSH
10770: CALL_OW 237
10774: GO 10676
10776: POP
10777: POP
// end ;
10778: PPOPN 3
10780: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10781: LD_EXP 40
10785: PUSH
10786: LD_EXP 48
10790: AND
10791: IFFALSE 10811
10793: GO 10795
10795: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10796: LD_INT 4
10798: PPUSH
10799: LD_OWVAR 2
10803: PPUSH
10804: LD_INT 0
10806: PPUSH
10807: CALL_OW 324
10811: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10812: LD_EXP 40
10816: PUSH
10817: LD_EXP 77
10821: AND
10822: IFFALSE 10842
10824: GO 10826
10826: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10827: LD_INT 19
10829: PPUSH
10830: LD_OWVAR 2
10834: PPUSH
10835: LD_INT 0
10837: PPUSH
10838: CALL_OW 324
10842: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10843: LD_EXP 40
10847: PUSH
10848: LD_EXP 49
10852: AND
10853: IFFALSE 10955
10855: GO 10857
10857: DISABLE
10858: LD_INT 0
10860: PPUSH
10861: PPUSH
// begin enable ;
10862: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10863: LD_ADDR_VAR 0 2
10867: PUSH
10868: LD_INT 22
10870: PUSH
10871: LD_OWVAR 2
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 2
10882: PUSH
10883: LD_INT 34
10885: PUSH
10886: LD_INT 11
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 34
10895: PUSH
10896: LD_INT 30
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PPUSH
10912: CALL_OW 69
10916: ST_TO_ADDR
// if not tmp then
10917: LD_VAR 0 2
10921: NOT
10922: IFFALSE 10926
// exit ;
10924: GO 10955
// for i in tmp do
10926: LD_ADDR_VAR 0 1
10930: PUSH
10931: LD_VAR 0 2
10935: PUSH
10936: FOR_IN
10937: IFFALSE 10953
// begin SetLives ( i , 0 ) ;
10939: LD_VAR 0 1
10943: PPUSH
10944: LD_INT 0
10946: PPUSH
10947: CALL_OW 234
// end ;
10951: GO 10936
10953: POP
10954: POP
// end ;
10955: PPOPN 2
10957: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10958: LD_EXP 40
10962: PUSH
10963: LD_EXP 50
10967: AND
10968: IFFALSE 10988
10970: GO 10972
10972: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10973: LD_INT 32
10975: PPUSH
10976: LD_OWVAR 2
10980: PPUSH
10981: LD_INT 0
10983: PPUSH
10984: CALL_OW 324
10988: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10989: LD_EXP 40
10993: PUSH
10994: LD_EXP 51
10998: AND
10999: IFFALSE 11180
11001: GO 11003
11003: DISABLE
11004: LD_INT 0
11006: PPUSH
11007: PPUSH
11008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11009: LD_ADDR_VAR 0 2
11013: PUSH
11014: LD_INT 22
11016: PUSH
11017: LD_OWVAR 2
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 33
11028: PUSH
11029: LD_INT 3
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PPUSH
11040: CALL_OW 69
11044: ST_TO_ADDR
// if not tmp then
11045: LD_VAR 0 2
11049: NOT
11050: IFFALSE 11054
// exit ;
11052: GO 11180
// side := 0 ;
11054: LD_ADDR_VAR 0 3
11058: PUSH
11059: LD_INT 0
11061: ST_TO_ADDR
// for i := 1 to 8 do
11062: LD_ADDR_VAR 0 1
11066: PUSH
11067: DOUBLE
11068: LD_INT 1
11070: DEC
11071: ST_TO_ADDR
11072: LD_INT 8
11074: PUSH
11075: FOR_TO
11076: IFFALSE 11124
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11078: LD_OWVAR 2
11082: PUSH
11083: LD_VAR 0 1
11087: NONEQUAL
11088: PUSH
11089: LD_OWVAR 2
11093: PPUSH
11094: LD_VAR 0 1
11098: PPUSH
11099: CALL_OW 81
11103: PUSH
11104: LD_INT 2
11106: EQUAL
11107: AND
11108: IFFALSE 11122
// begin side := i ;
11110: LD_ADDR_VAR 0 3
11114: PUSH
11115: LD_VAR 0 1
11119: ST_TO_ADDR
// break ;
11120: GO 11124
// end ;
11122: GO 11075
11124: POP
11125: POP
// if not side then
11126: LD_VAR 0 3
11130: NOT
11131: IFFALSE 11135
// exit ;
11133: GO 11180
// for i := 1 to tmp do
11135: LD_ADDR_VAR 0 1
11139: PUSH
11140: DOUBLE
11141: LD_INT 1
11143: DEC
11144: ST_TO_ADDR
11145: LD_VAR 0 2
11149: PUSH
11150: FOR_TO
11151: IFFALSE 11178
// if Prob ( 60 ) then
11153: LD_INT 60
11155: PPUSH
11156: CALL_OW 13
11160: IFFALSE 11176
// SetSide ( i , side ) ;
11162: LD_VAR 0 1
11166: PPUSH
11167: LD_VAR 0 3
11171: PPUSH
11172: CALL_OW 235
11176: GO 11150
11178: POP
11179: POP
// end ;
11180: PPOPN 3
11182: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11183: LD_EXP 40
11187: PUSH
11188: LD_EXP 53
11192: AND
11193: IFFALSE 11312
11195: GO 11197
11197: DISABLE
11198: LD_INT 0
11200: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11201: LD_ADDR_VAR 0 1
11205: PUSH
11206: LD_INT 22
11208: PUSH
11209: LD_OWVAR 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 21
11220: PUSH
11221: LD_INT 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 3
11230: PUSH
11231: LD_INT 23
11233: PUSH
11234: LD_INT 0
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: PPUSH
11250: CALL_OW 69
11254: PUSH
11255: FOR_IN
11256: IFFALSE 11310
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11258: LD_VAR 0 1
11262: PPUSH
11263: CALL_OW 257
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: LD_INT 2
11273: PUSH
11274: LD_INT 3
11276: PUSH
11277: LD_INT 4
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: IN
11286: IFFALSE 11308
// SetClass ( un , rand ( 1 , 4 ) ) ;
11288: LD_VAR 0 1
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 4
11298: PPUSH
11299: CALL_OW 12
11303: PPUSH
11304: CALL_OW 336
11308: GO 11255
11310: POP
11311: POP
// end ;
11312: PPOPN 1
11314: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11315: LD_EXP 40
11319: PUSH
11320: LD_EXP 52
11324: AND
11325: IFFALSE 11404
11327: GO 11329
11329: DISABLE
11330: LD_INT 0
11332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_INT 22
11340: PUSH
11341: LD_OWVAR 2
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 3
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: ST_TO_ADDR
// if not tmp then
11369: LD_VAR 0 1
11373: NOT
11374: IFFALSE 11378
// exit ;
11376: GO 11404
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11378: LD_VAR 0 1
11382: PUSH
11383: LD_INT 1
11385: PPUSH
11386: LD_VAR 0 1
11390: PPUSH
11391: CALL_OW 12
11395: ARRAY
11396: PPUSH
11397: LD_INT 100
11399: PPUSH
11400: CALL_OW 234
// end ;
11404: PPOPN 1
11406: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11407: LD_EXP 40
11411: PUSH
11412: LD_EXP 54
11416: AND
11417: IFFALSE 11515
11419: GO 11421
11421: DISABLE
11422: LD_INT 0
11424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11425: LD_ADDR_VAR 0 1
11429: PUSH
11430: LD_INT 22
11432: PUSH
11433: LD_OWVAR 2
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 21
11444: PUSH
11445: LD_INT 1
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PPUSH
11456: CALL_OW 69
11460: ST_TO_ADDR
// if not tmp then
11461: LD_VAR 0 1
11465: NOT
11466: IFFALSE 11470
// exit ;
11468: GO 11515
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11470: LD_VAR 0 1
11474: PUSH
11475: LD_INT 1
11477: PPUSH
11478: LD_VAR 0 1
11482: PPUSH
11483: CALL_OW 12
11487: ARRAY
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: LD_INT 4
11494: PPUSH
11495: CALL_OW 12
11499: PPUSH
11500: LD_INT 3000
11502: PPUSH
11503: LD_INT 9000
11505: PPUSH
11506: CALL_OW 12
11510: PPUSH
11511: CALL_OW 492
// end ;
11515: PPOPN 1
11517: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11518: LD_EXP 40
11522: PUSH
11523: LD_EXP 55
11527: AND
11528: IFFALSE 11548
11530: GO 11532
11532: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11533: LD_INT 1
11535: PPUSH
11536: LD_OWVAR 2
11540: PPUSH
11541: LD_INT 0
11543: PPUSH
11544: CALL_OW 324
11548: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11549: LD_EXP 40
11553: PUSH
11554: LD_EXP 56
11558: AND
11559: IFFALSE 11642
11561: GO 11563
11563: DISABLE
11564: LD_INT 0
11566: PPUSH
11567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11568: LD_ADDR_VAR 0 2
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_OWVAR 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 21
11587: PUSH
11588: LD_INT 3
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: ST_TO_ADDR
// if not tmp then
11604: LD_VAR 0 2
11608: NOT
11609: IFFALSE 11613
// exit ;
11611: GO 11642
// for i in tmp do
11613: LD_ADDR_VAR 0 1
11617: PUSH
11618: LD_VAR 0 2
11622: PUSH
11623: FOR_IN
11624: IFFALSE 11640
// SetBLevel ( i , 10 ) ;
11626: LD_VAR 0 1
11630: PPUSH
11631: LD_INT 10
11633: PPUSH
11634: CALL_OW 241
11638: GO 11623
11640: POP
11641: POP
// end ;
11642: PPOPN 2
11644: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11645: LD_EXP 40
11649: PUSH
11650: LD_EXP 57
11654: AND
11655: IFFALSE 11766
11657: GO 11659
11659: DISABLE
11660: LD_INT 0
11662: PPUSH
11663: PPUSH
11664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11665: LD_ADDR_VAR 0 3
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_OWVAR 2
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 25
11684: PUSH
11685: LD_INT 1
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if not tmp then
11701: LD_VAR 0 3
11705: NOT
11706: IFFALSE 11710
// exit ;
11708: GO 11766
// un := tmp [ rand ( 1 , tmp ) ] ;
11710: LD_ADDR_VAR 0 2
11714: PUSH
11715: LD_VAR 0 3
11719: PUSH
11720: LD_INT 1
11722: PPUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: CALL_OW 12
11732: ARRAY
11733: ST_TO_ADDR
// if Crawls ( un ) then
11734: LD_VAR 0 2
11738: PPUSH
11739: CALL_OW 318
11743: IFFALSE 11754
// ComWalk ( un ) ;
11745: LD_VAR 0 2
11749: PPUSH
11750: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11754: LD_VAR 0 2
11758: PPUSH
11759: LD_INT 5
11761: PPUSH
11762: CALL_OW 336
// end ;
11766: PPOPN 3
11768: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11769: LD_EXP 40
11773: PUSH
11774: LD_EXP 58
11778: AND
11779: PUSH
11780: LD_OWVAR 67
11784: PUSH
11785: LD_INT 4
11787: LESS
11788: AND
11789: IFFALSE 11808
11791: GO 11793
11793: DISABLE
// begin Difficulty := Difficulty + 1 ;
11794: LD_ADDR_OWVAR 67
11798: PUSH
11799: LD_OWVAR 67
11803: PUSH
11804: LD_INT 1
11806: PLUS
11807: ST_TO_ADDR
// end ;
11808: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11809: LD_EXP 40
11813: PUSH
11814: LD_EXP 59
11818: AND
11819: IFFALSE 11922
11821: GO 11823
11823: DISABLE
11824: LD_INT 0
11826: PPUSH
// begin for i := 1 to 5 do
11827: LD_ADDR_VAR 0 1
11831: PUSH
11832: DOUBLE
11833: LD_INT 1
11835: DEC
11836: ST_TO_ADDR
11837: LD_INT 5
11839: PUSH
11840: FOR_TO
11841: IFFALSE 11920
// begin uc_nation := nation_nature ;
11843: LD_ADDR_OWVAR 21
11847: PUSH
11848: LD_INT 0
11850: ST_TO_ADDR
// uc_side := 0 ;
11851: LD_ADDR_OWVAR 20
11855: PUSH
11856: LD_INT 0
11858: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11859: LD_ADDR_OWVAR 29
11863: PUSH
11864: LD_INT 12
11866: PUSH
11867: LD_INT 12
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: ST_TO_ADDR
// hc_agressivity := 20 ;
11874: LD_ADDR_OWVAR 35
11878: PUSH
11879: LD_INT 20
11881: ST_TO_ADDR
// hc_class := class_tiger ;
11882: LD_ADDR_OWVAR 28
11886: PUSH
11887: LD_INT 14
11889: ST_TO_ADDR
// hc_gallery :=  ;
11890: LD_ADDR_OWVAR 33
11894: PUSH
11895: LD_STRING 
11897: ST_TO_ADDR
// hc_name :=  ;
11898: LD_ADDR_OWVAR 26
11902: PUSH
11903: LD_STRING 
11905: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11906: CALL_OW 44
11910: PPUSH
11911: LD_INT 0
11913: PPUSH
11914: CALL_OW 51
// end ;
11918: GO 11840
11920: POP
11921: POP
// end ;
11922: PPOPN 1
11924: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11925: LD_EXP 40
11929: PUSH
11930: LD_EXP 60
11934: AND
11935: IFFALSE 11944
11937: GO 11939
11939: DISABLE
// StreamSibBomb ;
11940: CALL 11945 0 0
11944: END
// export function StreamSibBomb ; var i , x , y ; begin
11945: LD_INT 0
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
// result := false ;
11951: LD_ADDR_VAR 0 1
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
// for i := 1 to 16 do
11959: LD_ADDR_VAR 0 2
11963: PUSH
11964: DOUBLE
11965: LD_INT 1
11967: DEC
11968: ST_TO_ADDR
11969: LD_INT 16
11971: PUSH
11972: FOR_TO
11973: IFFALSE 12172
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11975: LD_ADDR_VAR 0 3
11979: PUSH
11980: LD_INT 10
11982: PUSH
11983: LD_INT 20
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 40
11991: PUSH
11992: LD_INT 50
11994: PUSH
11995: LD_INT 60
11997: PUSH
11998: LD_INT 70
12000: PUSH
12001: LD_INT 80
12003: PUSH
12004: LD_INT 90
12006: PUSH
12007: LD_INT 100
12009: PUSH
12010: LD_INT 110
12012: PUSH
12013: LD_INT 120
12015: PUSH
12016: LD_INT 130
12018: PUSH
12019: LD_INT 140
12021: PUSH
12022: LD_INT 150
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 1
12044: PPUSH
12045: LD_INT 15
12047: PPUSH
12048: CALL_OW 12
12052: ARRAY
12053: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12054: LD_ADDR_VAR 0 4
12058: PUSH
12059: LD_INT 10
12061: PUSH
12062: LD_INT 20
12064: PUSH
12065: LD_INT 30
12067: PUSH
12068: LD_INT 40
12070: PUSH
12071: LD_INT 50
12073: PUSH
12074: LD_INT 60
12076: PUSH
12077: LD_INT 70
12079: PUSH
12080: LD_INT 80
12082: PUSH
12083: LD_INT 90
12085: PUSH
12086: LD_INT 100
12088: PUSH
12089: LD_INT 110
12091: PUSH
12092: LD_INT 120
12094: PUSH
12095: LD_INT 130
12097: PUSH
12098: LD_INT 140
12100: PUSH
12101: LD_INT 150
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 1
12123: PPUSH
12124: LD_INT 15
12126: PPUSH
12127: CALL_OW 12
12131: ARRAY
12132: ST_TO_ADDR
// if ValidHex ( x , y ) then
12133: LD_VAR 0 3
12137: PPUSH
12138: LD_VAR 0 4
12142: PPUSH
12143: CALL_OW 488
12147: IFFALSE 12170
// begin result := [ x , y ] ;
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: LD_VAR 0 3
12158: PUSH
12159: LD_VAR 0 4
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: ST_TO_ADDR
// break ;
12168: GO 12172
// end ; end ;
12170: GO 11972
12172: POP
12173: POP
// if result then
12174: LD_VAR 0 1
12178: IFFALSE 12238
// begin ToLua ( playSibBomb() ) ;
12180: LD_STRING playSibBomb()
12182: PPUSH
12183: CALL_OW 559
// wait ( 0 0$14 ) ;
12187: LD_INT 490
12189: PPUSH
12190: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12194: LD_VAR 0 1
12198: PUSH
12199: LD_INT 1
12201: ARRAY
12202: PPUSH
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 2
12210: ARRAY
12211: PPUSH
12212: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12216: LD_VAR 0 1
12220: PUSH
12221: LD_INT 1
12223: ARRAY
12224: PPUSH
12225: LD_VAR 0 1
12229: PUSH
12230: LD_INT 2
12232: ARRAY
12233: PPUSH
12234: CALL_OW 429
// end ; end ;
12238: LD_VAR 0 1
12242: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12243: LD_EXP 40
12247: PUSH
12248: LD_EXP 62
12252: AND
12253: IFFALSE 12265
12255: GO 12257
12257: DISABLE
// YouLost (  ) ;
12258: LD_STRING 
12260: PPUSH
12261: CALL_OW 104
12265: END
// every 0 0$1 trigger StreamModeActive and sFog do
12266: LD_EXP 40
12270: PUSH
12271: LD_EXP 61
12275: AND
12276: IFFALSE 12290
12278: GO 12280
12280: DISABLE
// FogOff ( your_side ) ;
12281: LD_OWVAR 2
12285: PPUSH
12286: CALL_OW 344
12290: END
// every 0 0$1 trigger StreamModeActive and sSun do
12291: LD_EXP 40
12295: PUSH
12296: LD_EXP 63
12300: AND
12301: IFFALSE 12329
12303: GO 12305
12305: DISABLE
// begin solar_recharge_percent := 0 ;
12306: LD_ADDR_OWVAR 79
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12314: LD_INT 10500
12316: PPUSH
12317: CALL_OW 67
// solar_recharge_percent := 100 ;
12321: LD_ADDR_OWVAR 79
12325: PUSH
12326: LD_INT 100
12328: ST_TO_ADDR
// end ;
12329: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12330: LD_EXP 40
12334: PUSH
12335: LD_EXP 64
12339: AND
12340: IFFALSE 12579
12342: GO 12344
12344: DISABLE
12345: LD_INT 0
12347: PPUSH
12348: PPUSH
12349: PPUSH
// begin tmp := [ ] ;
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: EMPTY
12356: ST_TO_ADDR
// for i := 1 to 6 do
12357: LD_ADDR_VAR 0 1
12361: PUSH
12362: DOUBLE
12363: LD_INT 1
12365: DEC
12366: ST_TO_ADDR
12367: LD_INT 6
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12476
// begin uc_nation := nation_nature ;
12373: LD_ADDR_OWVAR 21
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// uc_side := 0 ;
12381: LD_ADDR_OWVAR 20
12385: PUSH
12386: LD_INT 0
12388: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12389: LD_ADDR_OWVAR 29
12393: PUSH
12394: LD_INT 12
12396: PUSH
12397: LD_INT 12
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: ST_TO_ADDR
// hc_agressivity := 20 ;
12404: LD_ADDR_OWVAR 35
12408: PUSH
12409: LD_INT 20
12411: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12412: LD_ADDR_OWVAR 28
12416: PUSH
12417: LD_INT 17
12419: ST_TO_ADDR
// hc_gallery :=  ;
12420: LD_ADDR_OWVAR 33
12424: PUSH
12425: LD_STRING 
12427: ST_TO_ADDR
// hc_name :=  ;
12428: LD_ADDR_OWVAR 26
12432: PUSH
12433: LD_STRING 
12435: ST_TO_ADDR
// un := CreateHuman ;
12436: LD_ADDR_VAR 0 2
12440: PUSH
12441: CALL_OW 44
12445: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12446: LD_VAR 0 2
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: CALL_OW 51
// tmp := tmp ^ un ;
12458: LD_ADDR_VAR 0 3
12462: PUSH
12463: LD_VAR 0 3
12467: PUSH
12468: LD_VAR 0 2
12472: ADD
12473: ST_TO_ADDR
// end ;
12474: GO 12370
12476: POP
12477: POP
// repeat wait ( 0 0$1 ) ;
12478: LD_INT 35
12480: PPUSH
12481: CALL_OW 67
// for un in tmp do
12485: LD_ADDR_VAR 0 2
12489: PUSH
12490: LD_VAR 0 3
12494: PUSH
12495: FOR_IN
12496: IFFALSE 12570
// begin if IsDead ( un ) then
12498: LD_VAR 0 2
12502: PPUSH
12503: CALL_OW 301
12507: IFFALSE 12527
// begin tmp := tmp diff un ;
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_VAR 0 3
12518: PUSH
12519: LD_VAR 0 2
12523: DIFF
12524: ST_TO_ADDR
// continue ;
12525: GO 12495
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12527: LD_VAR 0 2
12531: PPUSH
12532: LD_INT 3
12534: PUSH
12535: LD_INT 22
12537: PUSH
12538: LD_INT 0
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: PPUSH
12554: LD_VAR 0 2
12558: PPUSH
12559: CALL_OW 74
12563: PPUSH
12564: CALL_OW 115
// end ;
12568: GO 12495
12570: POP
12571: POP
// until not tmp ;
12572: LD_VAR 0 3
12576: NOT
12577: IFFALSE 12478
// end ;
12579: PPOPN 3
12581: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12582: LD_EXP 40
12586: PUSH
12587: LD_EXP 65
12591: AND
12592: IFFALSE 12646
12594: GO 12596
12596: DISABLE
// begin ToLua ( displayTroll(); ) ;
12597: LD_STRING displayTroll();
12599: PPUSH
12600: CALL_OW 559
// wait ( 3 3$00 ) ;
12604: LD_INT 6300
12606: PPUSH
12607: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12611: LD_STRING hideTroll();
12613: PPUSH
12614: CALL_OW 559
// wait ( 1 1$00 ) ;
12618: LD_INT 2100
12620: PPUSH
12621: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12625: LD_STRING displayTroll();
12627: PPUSH
12628: CALL_OW 559
// wait ( 1 1$00 ) ;
12632: LD_INT 2100
12634: PPUSH
12635: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12639: LD_STRING hideTroll();
12641: PPUSH
12642: CALL_OW 559
// end ;
12646: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12647: LD_EXP 40
12651: PUSH
12652: LD_EXP 66
12656: AND
12657: IFFALSE 12720
12659: GO 12661
12661: DISABLE
12662: LD_INT 0
12664: PPUSH
// begin p := 0 ;
12665: LD_ADDR_VAR 0 1
12669: PUSH
12670: LD_INT 0
12672: ST_TO_ADDR
// repeat game_speed := 1 ;
12673: LD_ADDR_OWVAR 65
12677: PUSH
12678: LD_INT 1
12680: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12681: LD_INT 35
12683: PPUSH
12684: CALL_OW 67
// p := p + 1 ;
12688: LD_ADDR_VAR 0 1
12692: PUSH
12693: LD_VAR 0 1
12697: PUSH
12698: LD_INT 1
12700: PLUS
12701: ST_TO_ADDR
// until p >= 60 ;
12702: LD_VAR 0 1
12706: PUSH
12707: LD_INT 60
12709: GREATEREQUAL
12710: IFFALSE 12673
// game_speed := 4 ;
12712: LD_ADDR_OWVAR 65
12716: PUSH
12717: LD_INT 4
12719: ST_TO_ADDR
// end ;
12720: PPOPN 1
12722: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12723: LD_EXP 40
12727: PUSH
12728: LD_EXP 67
12732: AND
12733: IFFALSE 12879
12735: GO 12737
12737: DISABLE
12738: LD_INT 0
12740: PPUSH
12741: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12742: LD_ADDR_VAR 0 1
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_OWVAR 2
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 2
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 0
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 30
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: ST_TO_ADDR
// if not depot then
12796: LD_VAR 0 1
12800: NOT
12801: IFFALSE 12805
// exit ;
12803: GO 12879
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12805: LD_ADDR_VAR 0 2
12809: PUSH
12810: LD_VAR 0 1
12814: PUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 12
12827: ARRAY
12828: PPUSH
12829: CALL_OW 274
12833: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12834: LD_VAR 0 2
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12849: LD_VAR 0 2
12853: PPUSH
12854: LD_INT 2
12856: PPUSH
12857: LD_INT 0
12859: PPUSH
12860: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12864: LD_VAR 0 2
12868: PPUSH
12869: LD_INT 3
12871: PPUSH
12872: LD_INT 0
12874: PPUSH
12875: CALL_OW 277
// end ;
12879: PPOPN 2
12881: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12882: LD_EXP 40
12886: PUSH
12887: LD_EXP 68
12891: AND
12892: IFFALSE 12989
12894: GO 12896
12896: DISABLE
12897: LD_INT 0
12899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: LD_INT 22
12907: PUSH
12908: LD_OWVAR 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 1
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: LD_INT 23
12932: PUSH
12933: LD_INT 0
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: ST_TO_ADDR
// if not tmp then
12954: LD_VAR 0 1
12958: NOT
12959: IFFALSE 12963
// exit ;
12961: GO 12989
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12963: LD_VAR 0 1
12967: PUSH
12968: LD_INT 1
12970: PPUSH
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 12
12980: ARRAY
12981: PPUSH
12982: LD_INT 200
12984: PPUSH
12985: CALL_OW 234
// end ;
12989: PPOPN 1
12991: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12992: LD_EXP 40
12996: PUSH
12997: LD_EXP 69
13001: AND
13002: IFFALSE 13081
13004: GO 13006
13006: DISABLE
13007: LD_INT 0
13009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13010: LD_ADDR_VAR 0 1
13014: PUSH
13015: LD_INT 22
13017: PUSH
13018: LD_OWVAR 2
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 2
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: ST_TO_ADDR
// if not tmp then
13046: LD_VAR 0 1
13050: NOT
13051: IFFALSE 13055
// exit ;
13053: GO 13081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13055: LD_VAR 0 1
13059: PUSH
13060: LD_INT 1
13062: PPUSH
13063: LD_VAR 0 1
13067: PPUSH
13068: CALL_OW 12
13072: ARRAY
13073: PPUSH
13074: LD_INT 60
13076: PPUSH
13077: CALL_OW 234
// end ;
13081: PPOPN 1
13083: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13084: LD_EXP 40
13088: PUSH
13089: LD_EXP 70
13093: AND
13094: IFFALSE 13193
13096: GO 13098
13098: DISABLE
13099: LD_INT 0
13101: PPUSH
13102: PPUSH
// begin enable ;
13103: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13104: LD_ADDR_VAR 0 1
13108: PUSH
13109: LD_INT 22
13111: PUSH
13112: LD_OWVAR 2
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 61
13123: PUSH
13124: EMPTY
13125: LIST
13126: PUSH
13127: LD_INT 33
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 69
13146: ST_TO_ADDR
// if not tmp then
13147: LD_VAR 0 1
13151: NOT
13152: IFFALSE 13156
// exit ;
13154: GO 13193
// for i in tmp do
13156: LD_ADDR_VAR 0 2
13160: PUSH
13161: LD_VAR 0 1
13165: PUSH
13166: FOR_IN
13167: IFFALSE 13191
// if IsControledBy ( i ) then
13169: LD_VAR 0 2
13173: PPUSH
13174: CALL_OW 312
13178: IFFALSE 13189
// ComUnlink ( i ) ;
13180: LD_VAR 0 2
13184: PPUSH
13185: CALL_OW 136
13189: GO 13166
13191: POP
13192: POP
// end ;
13193: PPOPN 2
13195: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13196: LD_EXP 40
13200: PUSH
13201: LD_EXP 71
13205: AND
13206: IFFALSE 13346
13208: GO 13210
13210: DISABLE
13211: LD_INT 0
13213: PPUSH
13214: PPUSH
// begin ToLua ( displayPowell(); ) ;
13215: LD_STRING displayPowell();
13217: PPUSH
13218: CALL_OW 559
// uc_side := 0 ;
13222: LD_ADDR_OWVAR 20
13226: PUSH
13227: LD_INT 0
13229: ST_TO_ADDR
// uc_nation := 2 ;
13230: LD_ADDR_OWVAR 21
13234: PUSH
13235: LD_INT 2
13237: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13238: LD_ADDR_OWVAR 37
13242: PUSH
13243: LD_INT 14
13245: ST_TO_ADDR
// vc_engine := engine_siberite ;
13246: LD_ADDR_OWVAR 39
13250: PUSH
13251: LD_INT 3
13253: ST_TO_ADDR
// vc_control := control_apeman ;
13254: LD_ADDR_OWVAR 38
13258: PUSH
13259: LD_INT 5
13261: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13262: LD_ADDR_OWVAR 40
13266: PUSH
13267: LD_INT 29
13269: ST_TO_ADDR
// un := CreateVehicle ;
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: CALL_OW 45
13279: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13280: LD_VAR 0 2
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13292: LD_INT 35
13294: PPUSH
13295: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13299: LD_VAR 0 2
13303: PPUSH
13304: LD_INT 22
13306: PUSH
13307: LD_OWVAR 2
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: PPUSH
13321: LD_VAR 0 2
13325: PPUSH
13326: CALL_OW 74
13330: PPUSH
13331: CALL_OW 115
// until IsDead ( un ) ;
13335: LD_VAR 0 2
13339: PPUSH
13340: CALL_OW 301
13344: IFFALSE 13292
// end ;
13346: PPOPN 2
13348: END
// every 0 0$1 trigger StreamModeActive and sStu do
13349: LD_EXP 40
13353: PUSH
13354: LD_EXP 79
13358: AND
13359: IFFALSE 13375
13361: GO 13363
13363: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13364: LD_STRING displayStucuk();
13366: PPUSH
13367: CALL_OW 559
// ResetFog ;
13371: CALL_OW 335
// end ;
13375: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13376: LD_EXP 40
13380: PUSH
13381: LD_EXP 72
13385: AND
13386: IFFALSE 13527
13388: GO 13390
13390: DISABLE
13391: LD_INT 0
13393: PPUSH
13394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13395: LD_ADDR_VAR 0 2
13399: PUSH
13400: LD_INT 22
13402: PUSH
13403: LD_OWVAR 2
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 21
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 69
13430: ST_TO_ADDR
// if not tmp then
13431: LD_VAR 0 2
13435: NOT
13436: IFFALSE 13440
// exit ;
13438: GO 13527
// un := tmp [ rand ( 1 , tmp ) ] ;
13440: LD_ADDR_VAR 0 1
13444: PUSH
13445: LD_VAR 0 2
13449: PUSH
13450: LD_INT 1
13452: PPUSH
13453: LD_VAR 0 2
13457: PPUSH
13458: CALL_OW 12
13462: ARRAY
13463: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_INT 0
13471: PPUSH
13472: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13476: LD_VAR 0 1
13480: PPUSH
13481: LD_OWVAR 3
13485: PUSH
13486: LD_VAR 0 1
13490: DIFF
13491: PPUSH
13492: LD_VAR 0 1
13496: PPUSH
13497: CALL_OW 74
13501: PPUSH
13502: CALL_OW 115
// wait ( 0 0$20 ) ;
13506: LD_INT 700
13508: PPUSH
13509: CALL_OW 67
// SetSide ( un , your_side ) ;
13513: LD_VAR 0 1
13517: PPUSH
13518: LD_OWVAR 2
13522: PPUSH
13523: CALL_OW 235
// end ;
13527: PPOPN 2
13529: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13530: LD_EXP 40
13534: PUSH
13535: LD_EXP 73
13539: AND
13540: IFFALSE 13646
13542: GO 13544
13544: DISABLE
13545: LD_INT 0
13547: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13548: LD_ADDR_VAR 0 1
13552: PUSH
13553: LD_INT 22
13555: PUSH
13556: LD_OWVAR 2
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 2
13567: PUSH
13568: LD_INT 30
13570: PUSH
13571: LD_INT 0
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 30
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: ST_TO_ADDR
// if not depot then
13602: LD_VAR 0 1
13606: NOT
13607: IFFALSE 13611
// exit ;
13609: GO 13646
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13611: LD_VAR 0 1
13615: PUSH
13616: LD_INT 1
13618: ARRAY
13619: PPUSH
13620: CALL_OW 250
13624: PPUSH
13625: LD_VAR 0 1
13629: PUSH
13630: LD_INT 1
13632: ARRAY
13633: PPUSH
13634: CALL_OW 251
13638: PPUSH
13639: LD_INT 70
13641: PPUSH
13642: CALL_OW 495
// end ;
13646: PPOPN 1
13648: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13649: LD_EXP 40
13653: PUSH
13654: LD_EXP 74
13658: AND
13659: IFFALSE 13870
13661: GO 13663
13663: DISABLE
13664: LD_INT 0
13666: PPUSH
13667: PPUSH
13668: PPUSH
13669: PPUSH
13670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13671: LD_ADDR_VAR 0 5
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_OWVAR 2
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 21
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: ST_TO_ADDR
// if not tmp then
13707: LD_VAR 0 5
13711: NOT
13712: IFFALSE 13716
// exit ;
13714: GO 13870
// for i in tmp do
13716: LD_ADDR_VAR 0 1
13720: PUSH
13721: LD_VAR 0 5
13725: PUSH
13726: FOR_IN
13727: IFFALSE 13868
// begin d := rand ( 0 , 5 ) ;
13729: LD_ADDR_VAR 0 4
13733: PUSH
13734: LD_INT 0
13736: PPUSH
13737: LD_INT 5
13739: PPUSH
13740: CALL_OW 12
13744: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 250
13759: PPUSH
13760: LD_VAR 0 4
13764: PPUSH
13765: LD_INT 3
13767: PPUSH
13768: LD_INT 12
13770: PPUSH
13771: CALL_OW 12
13775: PPUSH
13776: CALL_OW 272
13780: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13781: LD_ADDR_VAR 0 3
13785: PUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 251
13795: PPUSH
13796: LD_VAR 0 4
13800: PPUSH
13801: LD_INT 3
13803: PPUSH
13804: LD_INT 12
13806: PPUSH
13807: CALL_OW 12
13811: PPUSH
13812: CALL_OW 273
13816: ST_TO_ADDR
// if ValidHex ( x , y ) then
13817: LD_VAR 0 2
13821: PPUSH
13822: LD_VAR 0 3
13826: PPUSH
13827: CALL_OW 488
13831: IFFALSE 13866
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 3
13850: PPUSH
13851: LD_INT 6
13853: PPUSH
13854: CALL_OW 12
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: CALL_OW 483
// end ;
13866: GO 13726
13868: POP
13869: POP
// end ;
13870: PPOPN 5
13872: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13873: LD_EXP 40
13877: PUSH
13878: LD_EXP 75
13882: AND
13883: IFFALSE 13977
13885: GO 13887
13887: DISABLE
13888: LD_INT 0
13890: PPUSH
13891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13892: LD_ADDR_VAR 0 2
13896: PUSH
13897: LD_INT 22
13899: PUSH
13900: LD_OWVAR 2
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 32
13911: PUSH
13912: LD_INT 1
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 21
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: ST_TO_ADDR
// if not tmp then
13939: LD_VAR 0 2
13943: NOT
13944: IFFALSE 13948
// exit ;
13946: GO 13977
// for i in tmp do
13948: LD_ADDR_VAR 0 1
13952: PUSH
13953: LD_VAR 0 2
13957: PUSH
13958: FOR_IN
13959: IFFALSE 13975
// SetFuel ( i , 0 ) ;
13961: LD_VAR 0 1
13965: PPUSH
13966: LD_INT 0
13968: PPUSH
13969: CALL_OW 240
13973: GO 13958
13975: POP
13976: POP
// end ;
13977: PPOPN 2
13979: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13980: LD_EXP 40
13984: PUSH
13985: LD_EXP 76
13989: AND
13990: IFFALSE 14056
13992: GO 13994
13994: DISABLE
13995: LD_INT 0
13997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13998: LD_ADDR_VAR 0 1
14002: PUSH
14003: LD_INT 22
14005: PUSH
14006: LD_OWVAR 2
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 30
14017: PUSH
14018: LD_INT 29
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: ST_TO_ADDR
// if not tmp then
14034: LD_VAR 0 1
14038: NOT
14039: IFFALSE 14043
// exit ;
14041: GO 14056
// DestroyUnit ( tmp [ 1 ] ) ;
14043: LD_VAR 0 1
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: PPUSH
14052: CALL_OW 65
// end ;
14056: PPOPN 1
14058: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14059: LD_EXP 40
14063: PUSH
14064: LD_EXP 78
14068: AND
14069: IFFALSE 14198
14071: GO 14073
14073: DISABLE
14074: LD_INT 0
14076: PPUSH
// begin uc_side := 0 ;
14077: LD_ADDR_OWVAR 20
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// uc_nation := nation_arabian ;
14085: LD_ADDR_OWVAR 21
14089: PUSH
14090: LD_INT 2
14092: ST_TO_ADDR
// hc_gallery :=  ;
14093: LD_ADDR_OWVAR 33
14097: PUSH
14098: LD_STRING 
14100: ST_TO_ADDR
// hc_name :=  ;
14101: LD_ADDR_OWVAR 26
14105: PUSH
14106: LD_STRING 
14108: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14109: LD_INT 1
14111: PPUSH
14112: LD_INT 11
14114: PPUSH
14115: LD_INT 10
14117: PPUSH
14118: CALL_OW 380
// un := CreateHuman ;
14122: LD_ADDR_VAR 0 1
14126: PUSH
14127: CALL_OW 44
14131: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14132: LD_VAR 0 1
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14144: LD_INT 35
14146: PPUSH
14147: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14151: LD_VAR 0 1
14155: PPUSH
14156: LD_INT 22
14158: PUSH
14159: LD_OWVAR 2
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: PPUSH
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 74
14182: PPUSH
14183: CALL_OW 115
// until IsDead ( un ) ;
14187: LD_VAR 0 1
14191: PPUSH
14192: CALL_OW 301
14196: IFFALSE 14144
// end ;
14198: PPOPN 1
14200: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14201: LD_EXP 40
14205: PUSH
14206: LD_EXP 80
14210: AND
14211: IFFALSE 14223
14213: GO 14215
14215: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14216: LD_STRING earthquake(getX(game), 0, 32)
14218: PPUSH
14219: CALL_OW 559
14223: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14224: LD_EXP 40
14228: PUSH
14229: LD_EXP 81
14233: AND
14234: IFFALSE 14325
14236: GO 14238
14238: DISABLE
14239: LD_INT 0
14241: PPUSH
// begin enable ;
14242: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_OWVAR 2
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 21
14262: PUSH
14263: LD_INT 2
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 33
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: ST_TO_ADDR
// if not tmp then
14290: LD_VAR 0 1
14294: NOT
14295: IFFALSE 14299
// exit ;
14297: GO 14325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14299: LD_VAR 0 1
14303: PUSH
14304: LD_INT 1
14306: PPUSH
14307: LD_VAR 0 1
14311: PPUSH
14312: CALL_OW 12
14316: ARRAY
14317: PPUSH
14318: LD_INT 1
14320: PPUSH
14321: CALL_OW 234
// end ;
14325: PPOPN 1
14327: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14328: LD_EXP 40
14332: PUSH
14333: LD_EXP 82
14337: AND
14338: IFFALSE 14479
14340: GO 14342
14342: DISABLE
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
14347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14348: LD_ADDR_VAR 0 3
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_OWVAR 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 25
14367: PUSH
14368: LD_INT 1
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 69
14383: ST_TO_ADDR
// if not tmp then
14384: LD_VAR 0 3
14388: NOT
14389: IFFALSE 14393
// exit ;
14391: GO 14479
// un := tmp [ rand ( 1 , tmp ) ] ;
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: LD_VAR 0 3
14402: PUSH
14403: LD_INT 1
14405: PPUSH
14406: LD_VAR 0 3
14410: PPUSH
14411: CALL_OW 12
14415: ARRAY
14416: ST_TO_ADDR
// if Crawls ( un ) then
14417: LD_VAR 0 2
14421: PPUSH
14422: CALL_OW 318
14426: IFFALSE 14437
// ComWalk ( un ) ;
14428: LD_VAR 0 2
14432: PPUSH
14433: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14437: LD_VAR 0 2
14441: PPUSH
14442: LD_INT 9
14444: PPUSH
14445: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14449: LD_INT 28
14451: PPUSH
14452: LD_OWVAR 2
14456: PPUSH
14457: LD_INT 2
14459: PPUSH
14460: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14464: LD_INT 29
14466: PPUSH
14467: LD_OWVAR 2
14471: PPUSH
14472: LD_INT 2
14474: PPUSH
14475: CALL_OW 322
// end ;
14479: PPOPN 3
14481: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14482: LD_EXP 40
14486: PUSH
14487: LD_EXP 83
14491: AND
14492: IFFALSE 14603
14494: GO 14496
14496: DISABLE
14497: LD_INT 0
14499: PPUSH
14500: PPUSH
14501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14502: LD_ADDR_VAR 0 3
14506: PUSH
14507: LD_INT 22
14509: PUSH
14510: LD_OWVAR 2
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 25
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: ST_TO_ADDR
// if not tmp then
14538: LD_VAR 0 3
14542: NOT
14543: IFFALSE 14547
// exit ;
14545: GO 14603
// un := tmp [ rand ( 1 , tmp ) ] ;
14547: LD_ADDR_VAR 0 2
14551: PUSH
14552: LD_VAR 0 3
14556: PUSH
14557: LD_INT 1
14559: PPUSH
14560: LD_VAR 0 3
14564: PPUSH
14565: CALL_OW 12
14569: ARRAY
14570: ST_TO_ADDR
// if Crawls ( un ) then
14571: LD_VAR 0 2
14575: PPUSH
14576: CALL_OW 318
14580: IFFALSE 14591
// ComWalk ( un ) ;
14582: LD_VAR 0 2
14586: PPUSH
14587: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 8
14598: PPUSH
14599: CALL_OW 336
// end ;
14603: PPOPN 3
14605: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14606: LD_EXP 40
14610: PUSH
14611: LD_EXP 84
14615: AND
14616: IFFALSE 14760
14618: GO 14620
14620: DISABLE
14621: LD_INT 0
14623: PPUSH
14624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14625: LD_ADDR_VAR 0 2
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_OWVAR 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 21
14644: PUSH
14645: LD_INT 2
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 2
14654: PUSH
14655: LD_INT 34
14657: PUSH
14658: LD_INT 12
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 34
14667: PUSH
14668: LD_INT 51
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 34
14677: PUSH
14678: LD_INT 32
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: ST_TO_ADDR
// if not tmp then
14701: LD_VAR 0 2
14705: NOT
14706: IFFALSE 14710
// exit ;
14708: GO 14760
// for i in tmp do
14710: LD_ADDR_VAR 0 1
14714: PUSH
14715: LD_VAR 0 2
14719: PUSH
14720: FOR_IN
14721: IFFALSE 14758
// if GetCargo ( i , mat_artifact ) = 0 then
14723: LD_VAR 0 1
14727: PPUSH
14728: LD_INT 4
14730: PPUSH
14731: CALL_OW 289
14735: PUSH
14736: LD_INT 0
14738: EQUAL
14739: IFFALSE 14756
// SetCargo ( i , mat_siberit , 100 ) ;
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_INT 3
14748: PPUSH
14749: LD_INT 100
14751: PPUSH
14752: CALL_OW 290
14756: GO 14720
14758: POP
14759: POP
// end ;
14760: PPOPN 2
14762: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14763: LD_EXP 40
14767: PUSH
14768: LD_EXP 85
14772: AND
14773: IFFALSE 14956
14775: GO 14777
14777: DISABLE
14778: LD_INT 0
14780: PPUSH
14781: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 22
14789: PUSH
14790: LD_OWVAR 2
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: ST_TO_ADDR
// if not tmp then
14804: LD_VAR 0 2
14808: NOT
14809: IFFALSE 14813
// exit ;
14811: GO 14956
// for i := 1 to 2 do
14813: LD_ADDR_VAR 0 1
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_INT 2
14825: PUSH
14826: FOR_TO
14827: IFFALSE 14954
// begin uc_side := your_side ;
14829: LD_ADDR_OWVAR 20
14833: PUSH
14834: LD_OWVAR 2
14838: ST_TO_ADDR
// uc_nation := nation_american ;
14839: LD_ADDR_OWVAR 21
14843: PUSH
14844: LD_INT 1
14846: ST_TO_ADDR
// vc_chassis := us_morphling ;
14847: LD_ADDR_OWVAR 37
14851: PUSH
14852: LD_INT 5
14854: ST_TO_ADDR
// vc_engine := engine_siberite ;
14855: LD_ADDR_OWVAR 39
14859: PUSH
14860: LD_INT 3
14862: ST_TO_ADDR
// vc_control := control_computer ;
14863: LD_ADDR_OWVAR 38
14867: PUSH
14868: LD_INT 3
14870: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14871: LD_ADDR_OWVAR 40
14875: PUSH
14876: LD_INT 10
14878: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14879: LD_VAR 0 2
14883: PUSH
14884: LD_INT 1
14886: ARRAY
14887: PPUSH
14888: CALL_OW 310
14892: NOT
14893: IFFALSE 14940
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14895: CALL_OW 45
14899: PPUSH
14900: LD_VAR 0 2
14904: PUSH
14905: LD_INT 1
14907: ARRAY
14908: PPUSH
14909: CALL_OW 250
14913: PPUSH
14914: LD_VAR 0 2
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PPUSH
14923: CALL_OW 251
14927: PPUSH
14928: LD_INT 12
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 50
14938: GO 14952
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14940: CALL_OW 45
14944: PPUSH
14945: LD_INT 1
14947: PPUSH
14948: CALL_OW 51
// end ;
14952: GO 14826
14954: POP
14955: POP
// end ;
14956: PPOPN 2
14958: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14959: LD_EXP 40
14963: PUSH
14964: LD_EXP 86
14968: AND
14969: IFFALSE 15191
14971: GO 14973
14973: DISABLE
14974: LD_INT 0
14976: PPUSH
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
14981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14982: LD_ADDR_VAR 0 6
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: LD_INT 23
15014: PUSH
15015: LD_INT 0
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: PPUSH
15031: CALL_OW 69
15035: ST_TO_ADDR
// if not tmp then
15036: LD_VAR 0 6
15040: NOT
15041: IFFALSE 15045
// exit ;
15043: GO 15191
// s1 := rand ( 1 , 4 ) ;
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_INT 1
15052: PPUSH
15053: LD_INT 4
15055: PPUSH
15056: CALL_OW 12
15060: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15061: LD_ADDR_VAR 0 4
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: ARRAY
15074: PPUSH
15075: LD_VAR 0 2
15079: PPUSH
15080: CALL_OW 259
15084: ST_TO_ADDR
// if s1 = 1 then
15085: LD_VAR 0 2
15089: PUSH
15090: LD_INT 1
15092: EQUAL
15093: IFFALSE 15113
// s2 := rand ( 2 , 4 ) else
15095: LD_ADDR_VAR 0 3
15099: PUSH
15100: LD_INT 2
15102: PPUSH
15103: LD_INT 4
15105: PPUSH
15106: CALL_OW 12
15110: ST_TO_ADDR
15111: GO 15121
// s2 := 1 ;
15113: LD_ADDR_VAR 0 3
15117: PUSH
15118: LD_INT 1
15120: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15121: LD_ADDR_VAR 0 5
15125: PUSH
15126: LD_VAR 0 6
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: LD_VAR 0 3
15139: PPUSH
15140: CALL_OW 259
15144: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15145: LD_VAR 0 6
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: PPUSH
15154: LD_VAR 0 2
15158: PPUSH
15159: LD_VAR 0 5
15163: PPUSH
15164: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15168: LD_VAR 0 6
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_VAR 0 4
15186: PPUSH
15187: CALL_OW 237
// end ;
15191: PPOPN 6
15193: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15194: LD_EXP 40
15198: PUSH
15199: LD_EXP 87
15203: AND
15204: IFFALSE 15283
15206: GO 15208
15208: DISABLE
15209: LD_INT 0
15211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15212: LD_ADDR_VAR 0 1
15216: PUSH
15217: LD_INT 22
15219: PUSH
15220: LD_OWVAR 2
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 30
15231: PUSH
15232: LD_INT 3
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PPUSH
15243: CALL_OW 69
15247: ST_TO_ADDR
// if not tmp then
15248: LD_VAR 0 1
15252: NOT
15253: IFFALSE 15257
// exit ;
15255: GO 15283
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15257: LD_VAR 0 1
15261: PUSH
15262: LD_INT 1
15264: PPUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: CALL_OW 12
15274: ARRAY
15275: PPUSH
15276: LD_INT 1
15278: PPUSH
15279: CALL_OW 234
// end ;
15283: PPOPN 1
15285: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15286: LD_EXP 40
15290: PUSH
15291: LD_EXP 88
15295: AND
15296: IFFALSE 15408
15298: GO 15300
15300: DISABLE
15301: LD_INT 0
15303: PPUSH
15304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_OWVAR 2
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 30
15327: PUSH
15328: LD_INT 27
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 30
15337: PUSH
15338: LD_INT 26
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 30
15347: PUSH
15348: LD_INT 28
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PPUSH
15365: CALL_OW 69
15369: ST_TO_ADDR
// if not tmp then
15370: LD_VAR 0 2
15374: NOT
15375: IFFALSE 15379
// exit ;
15377: GO 15408
// for i in tmp do
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_VAR 0 2
15388: PUSH
15389: FOR_IN
15390: IFFALSE 15406
// SetLives ( i , 1 ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: LD_INT 1
15399: PPUSH
15400: CALL_OW 234
15404: GO 15389
15406: POP
15407: POP
// end ;
15408: PPOPN 2
15410: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15411: LD_EXP 40
15415: PUSH
15416: LD_EXP 89
15420: AND
15421: IFFALSE 15708
15423: GO 15425
15425: DISABLE
15426: LD_INT 0
15428: PPUSH
15429: PPUSH
15430: PPUSH
// begin i := rand ( 1 , 7 ) ;
15431: LD_ADDR_VAR 0 1
15435: PUSH
15436: LD_INT 1
15438: PPUSH
15439: LD_INT 7
15441: PPUSH
15442: CALL_OW 12
15446: ST_TO_ADDR
// case i of 1 :
15447: LD_VAR 0 1
15451: PUSH
15452: LD_INT 1
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15460
15458: GO 15470
15460: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15461: LD_STRING earthquake(getX(game), 0, 32)
15463: PPUSH
15464: CALL_OW 559
15468: GO 15708
15470: LD_INT 2
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15492
15478: POP
// begin ToLua ( displayStucuk(); ) ;
15479: LD_STRING displayStucuk();
15481: PPUSH
15482: CALL_OW 559
// ResetFog ;
15486: CALL_OW 335
// end ; 3 :
15490: GO 15708
15492: LD_INT 3
15494: DOUBLE
15495: EQUAL
15496: IFTRUE 15500
15498: GO 15604
15500: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15501: LD_ADDR_VAR 0 2
15505: PUSH
15506: LD_INT 22
15508: PUSH
15509: LD_OWVAR 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: ST_TO_ADDR
// if not tmp then
15537: LD_VAR 0 2
15541: NOT
15542: IFFALSE 15546
// exit ;
15544: GO 15708
// un := tmp [ rand ( 1 , tmp ) ] ;
15546: LD_ADDR_VAR 0 3
15550: PUSH
15551: LD_VAR 0 2
15555: PUSH
15556: LD_INT 1
15558: PPUSH
15559: LD_VAR 0 2
15563: PPUSH
15564: CALL_OW 12
15568: ARRAY
15569: ST_TO_ADDR
// if Crawls ( un ) then
15570: LD_VAR 0 3
15574: PPUSH
15575: CALL_OW 318
15579: IFFALSE 15590
// ComWalk ( un ) ;
15581: LD_VAR 0 3
15585: PPUSH
15586: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_INT 8
15597: PPUSH
15598: CALL_OW 336
// end ; 4 :
15602: GO 15708
15604: LD_INT 4
15606: DOUBLE
15607: EQUAL
15608: IFTRUE 15612
15610: GO 15686
15612: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15613: LD_ADDR_VAR 0 2
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_OWVAR 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 30
15632: PUSH
15633: LD_INT 29
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: ST_TO_ADDR
// if not tmp then
15649: LD_VAR 0 2
15653: NOT
15654: IFFALSE 15658
// exit ;
15656: GO 15708
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15658: LD_VAR 0 2
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PPUSH
15667: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15671: LD_VAR 0 2
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PPUSH
15680: CALL_OW 65
// end ; 5 .. 7 :
15684: GO 15708
15686: LD_INT 5
15688: DOUBLE
15689: GREATEREQUAL
15690: IFFALSE 15698
15692: LD_INT 7
15694: DOUBLE
15695: LESSEQUAL
15696: IFTRUE 15700
15698: GO 15707
15700: POP
// StreamSibBomb ; end ;
15701: CALL 11945 0 0
15705: GO 15708
15707: POP
// end ;
15708: PPOPN 3
15710: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15711: LD_EXP 40
15715: PUSH
15716: LD_EXP 90
15720: AND
15721: IFFALSE 15877
15723: GO 15725
15725: DISABLE
15726: LD_INT 0
15728: PPUSH
15729: PPUSH
15730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15731: LD_ADDR_VAR 0 2
15735: PUSH
15736: LD_INT 81
15738: PUSH
15739: LD_OWVAR 2
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 2
15750: PUSH
15751: LD_INT 21
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 21
15763: PUSH
15764: LD_INT 2
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PPUSH
15780: CALL_OW 69
15784: ST_TO_ADDR
// if not tmp then
15785: LD_VAR 0 2
15789: NOT
15790: IFFALSE 15794
// exit ;
15792: GO 15877
// p := 0 ;
15794: LD_ADDR_VAR 0 3
15798: PUSH
15799: LD_INT 0
15801: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15802: LD_INT 35
15804: PPUSH
15805: CALL_OW 67
// p := p + 1 ;
15809: LD_ADDR_VAR 0 3
15813: PUSH
15814: LD_VAR 0 3
15818: PUSH
15819: LD_INT 1
15821: PLUS
15822: ST_TO_ADDR
// for i in tmp do
15823: LD_ADDR_VAR 0 1
15827: PUSH
15828: LD_VAR 0 2
15832: PUSH
15833: FOR_IN
15834: IFFALSE 15865
// if GetLives ( i ) < 1000 then
15836: LD_VAR 0 1
15840: PPUSH
15841: CALL_OW 256
15845: PUSH
15846: LD_INT 1000
15848: LESS
15849: IFFALSE 15863
// SetLives ( i , 1000 ) ;
15851: LD_VAR 0 1
15855: PPUSH
15856: LD_INT 1000
15858: PPUSH
15859: CALL_OW 234
15863: GO 15833
15865: POP
15866: POP
// until p > 20 ;
15867: LD_VAR 0 3
15871: PUSH
15872: LD_INT 20
15874: GREATER
15875: IFFALSE 15802
// end ;
15877: PPOPN 3
15879: END
// every 0 0$1 trigger StreamModeActive and sTime do
15880: LD_EXP 40
15884: PUSH
15885: LD_EXP 91
15889: AND
15890: IFFALSE 15925
15892: GO 15894
15894: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15895: LD_INT 28
15897: PPUSH
15898: LD_OWVAR 2
15902: PPUSH
15903: LD_INT 2
15905: PPUSH
15906: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15910: LD_INT 30
15912: PPUSH
15913: LD_OWVAR 2
15917: PPUSH
15918: LD_INT 2
15920: PPUSH
15921: CALL_OW 322
// end ;
15925: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15926: LD_EXP 40
15930: PUSH
15931: LD_EXP 92
15935: AND
15936: IFFALSE 16057
15938: GO 15940
15940: DISABLE
15941: LD_INT 0
15943: PPUSH
15944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15945: LD_ADDR_VAR 0 2
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: LD_OWVAR 2
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 21
15964: PUSH
15965: LD_INT 1
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 3
15974: PUSH
15975: LD_INT 23
15977: PUSH
15978: LD_INT 0
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: PPUSH
15994: CALL_OW 69
15998: ST_TO_ADDR
// if not tmp then
15999: LD_VAR 0 2
16003: NOT
16004: IFFALSE 16008
// exit ;
16006: GO 16057
// for i in tmp do
16008: LD_ADDR_VAR 0 1
16012: PUSH
16013: LD_VAR 0 2
16017: PUSH
16018: FOR_IN
16019: IFFALSE 16055
// begin if Crawls ( i ) then
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 318
16030: IFFALSE 16041
// ComWalk ( i ) ;
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 138
// SetClass ( i , 2 ) ;
16041: LD_VAR 0 1
16045: PPUSH
16046: LD_INT 2
16048: PPUSH
16049: CALL_OW 336
// end ;
16053: GO 16018
16055: POP
16056: POP
// end ;
16057: PPOPN 2
16059: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16060: LD_EXP 40
16064: PUSH
16065: LD_EXP 93
16069: AND
16070: IFFALSE 16358
16072: GO 16074
16074: DISABLE
16075: LD_INT 0
16077: PPUSH
16078: PPUSH
16079: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16080: LD_OWVAR 2
16084: PPUSH
16085: LD_INT 9
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16098: LD_INT 9
16100: PPUSH
16101: LD_OWVAR 2
16105: PPUSH
16106: CALL_OW 343
// uc_side := 9 ;
16110: LD_ADDR_OWVAR 20
16114: PUSH
16115: LD_INT 9
16117: ST_TO_ADDR
// uc_nation := 2 ;
16118: LD_ADDR_OWVAR 21
16122: PUSH
16123: LD_INT 2
16125: ST_TO_ADDR
// hc_name := Dark Warrior ;
16126: LD_ADDR_OWVAR 26
16130: PUSH
16131: LD_STRING Dark Warrior
16133: ST_TO_ADDR
// hc_gallery :=  ;
16134: LD_ADDR_OWVAR 33
16138: PUSH
16139: LD_STRING 
16141: ST_TO_ADDR
// hc_noskilllimit := true ;
16142: LD_ADDR_OWVAR 76
16146: PUSH
16147: LD_INT 1
16149: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16150: LD_ADDR_OWVAR 31
16154: PUSH
16155: LD_INT 30
16157: PUSH
16158: LD_INT 30
16160: PUSH
16161: LD_INT 30
16163: PUSH
16164: LD_INT 30
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
// un := CreateHuman ;
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: CALL_OW 44
16182: ST_TO_ADDR
// hc_noskilllimit := false ;
16183: LD_ADDR_OWVAR 76
16187: PUSH
16188: LD_INT 0
16190: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16191: LD_VAR 0 3
16195: PPUSH
16196: LD_INT 1
16198: PPUSH
16199: CALL_OW 51
// ToLua ( playRanger() ) ;
16203: LD_STRING playRanger()
16205: PPUSH
16206: CALL_OW 559
// p := 0 ;
16210: LD_ADDR_VAR 0 2
16214: PUSH
16215: LD_INT 0
16217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16218: LD_INT 35
16220: PPUSH
16221: CALL_OW 67
// p := p + 1 ;
16225: LD_ADDR_VAR 0 2
16229: PUSH
16230: LD_VAR 0 2
16234: PUSH
16235: LD_INT 1
16237: PLUS
16238: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16239: LD_VAR 0 3
16243: PPUSH
16244: CALL_OW 256
16248: PUSH
16249: LD_INT 1000
16251: LESS
16252: IFFALSE 16266
// SetLives ( un , 1000 ) ;
16254: LD_VAR 0 3
16258: PPUSH
16259: LD_INT 1000
16261: PPUSH
16262: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16266: LD_VAR 0 3
16270: PPUSH
16271: LD_INT 81
16273: PUSH
16274: LD_OWVAR 2
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 91
16285: PUSH
16286: LD_VAR 0 3
16290: PUSH
16291: LD_INT 30
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PPUSH
16303: CALL_OW 69
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: CALL_OW 74
16317: PPUSH
16318: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16322: LD_VAR 0 2
16326: PUSH
16327: LD_INT 80
16329: GREATER
16330: PUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: CALL_OW 301
16340: OR
16341: IFFALSE 16218
// if un then
16343: LD_VAR 0 3
16347: IFFALSE 16358
// RemoveUnit ( un ) ;
16349: LD_VAR 0 3
16353: PPUSH
16354: CALL_OW 64
// end ;
16358: PPOPN 3
16360: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16361: LD_EXP 94
16365: IFFALSE 16481
16367: GO 16369
16369: DISABLE
16370: LD_INT 0
16372: PPUSH
16373: PPUSH
16374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16375: LD_ADDR_VAR 0 2
16379: PUSH
16380: LD_INT 81
16382: PUSH
16383: LD_OWVAR 2
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 21
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PPUSH
16406: CALL_OW 69
16410: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16411: LD_STRING playComputer()
16413: PPUSH
16414: CALL_OW 559
// if not tmp then
16418: LD_VAR 0 2
16422: NOT
16423: IFFALSE 16427
// exit ;
16425: GO 16481
// for i in tmp do
16427: LD_ADDR_VAR 0 1
16431: PUSH
16432: LD_VAR 0 2
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16479
// for j := 1 to 4 do
16440: LD_ADDR_VAR 0 3
16444: PUSH
16445: DOUBLE
16446: LD_INT 1
16448: DEC
16449: ST_TO_ADDR
16450: LD_INT 4
16452: PUSH
16453: FOR_TO
16454: IFFALSE 16475
// SetSkill ( i , j , 10 ) ;
16456: LD_VAR 0 1
16460: PPUSH
16461: LD_VAR 0 3
16465: PPUSH
16466: LD_INT 10
16468: PPUSH
16469: CALL_OW 237
16473: GO 16453
16475: POP
16476: POP
16477: GO 16437
16479: POP
16480: POP
// end ;
16481: PPOPN 3
16483: END
// every 0 0$1 trigger s30 do var i , tmp ;
16484: LD_EXP 95
16488: IFFALSE 16557
16490: GO 16492
16492: DISABLE
16493: LD_INT 0
16495: PPUSH
16496: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16497: LD_ADDR_VAR 0 2
16501: PUSH
16502: LD_INT 22
16504: PUSH
16505: LD_OWVAR 2
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: ST_TO_ADDR
// if not tmp then
16519: LD_VAR 0 2
16523: NOT
16524: IFFALSE 16528
// exit ;
16526: GO 16557
// for i in tmp do
16528: LD_ADDR_VAR 0 1
16532: PUSH
16533: LD_VAR 0 2
16537: PUSH
16538: FOR_IN
16539: IFFALSE 16555
// SetLives ( i , 300 ) ;
16541: LD_VAR 0 1
16545: PPUSH
16546: LD_INT 300
16548: PPUSH
16549: CALL_OW 234
16553: GO 16538
16555: POP
16556: POP
// end ;
16557: PPOPN 2
16559: END
// every 0 0$1 trigger s60 do var i , tmp ;
16560: LD_EXP 96
16564: IFFALSE 16633
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16573: LD_ADDR_VAR 0 2
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: ST_TO_ADDR
// if not tmp then
16595: LD_VAR 0 2
16599: NOT
16600: IFFALSE 16604
// exit ;
16602: GO 16633
// for i in tmp do
16604: LD_ADDR_VAR 0 1
16608: PUSH
16609: LD_VAR 0 2
16613: PUSH
16614: FOR_IN
16615: IFFALSE 16631
// SetLives ( i , 600 ) ;
16617: LD_VAR 0 1
16621: PPUSH
16622: LD_INT 600
16624: PPUSH
16625: CALL_OW 234
16629: GO 16614
16631: POP
16632: POP
// end ;
16633: PPOPN 2
16635: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16636: LD_INT 0
16638: PPUSH
// case cmd of 301 :
16639: LD_VAR 0 1
16643: PUSH
16644: LD_INT 301
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16684
16652: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16653: LD_VAR 0 6
16657: PPUSH
16658: LD_VAR 0 7
16662: PPUSH
16663: LD_VAR 0 8
16667: PPUSH
16668: LD_VAR 0 4
16672: PPUSH
16673: LD_VAR 0 5
16677: PPUSH
16678: CALL 17893 0 5
16682: GO 16805
16684: LD_INT 302
16686: DOUBLE
16687: EQUAL
16688: IFTRUE 16692
16690: GO 16729
16692: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16693: LD_VAR 0 6
16697: PPUSH
16698: LD_VAR 0 7
16702: PPUSH
16703: LD_VAR 0 8
16707: PPUSH
16708: LD_VAR 0 9
16712: PPUSH
16713: LD_VAR 0 4
16717: PPUSH
16718: LD_VAR 0 5
16722: PPUSH
16723: CALL 17984 0 6
16727: GO 16805
16729: LD_INT 303
16731: DOUBLE
16732: EQUAL
16733: IFTRUE 16737
16735: GO 16774
16737: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16738: LD_VAR 0 6
16742: PPUSH
16743: LD_VAR 0 7
16747: PPUSH
16748: LD_VAR 0 8
16752: PPUSH
16753: LD_VAR 0 9
16757: PPUSH
16758: LD_VAR 0 4
16762: PPUSH
16763: LD_VAR 0 5
16767: PPUSH
16768: CALL 16810 0 6
16772: GO 16805
16774: LD_INT 304
16776: DOUBLE
16777: EQUAL
16778: IFTRUE 16782
16780: GO 16804
16782: POP
// hHackTeleport ( unit , x , y ) ; end ;
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_VAR 0 4
16792: PPUSH
16793: LD_VAR 0 5
16797: PPUSH
16798: CALL 18577 0 3
16802: GO 16805
16804: POP
// end ;
16805: LD_VAR 0 12
16809: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16810: LD_INT 0
16812: PPUSH
16813: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16814: LD_VAR 0 1
16818: PUSH
16819: LD_INT 1
16821: LESS
16822: PUSH
16823: LD_VAR 0 1
16827: PUSH
16828: LD_INT 3
16830: GREATER
16831: OR
16832: PUSH
16833: LD_VAR 0 5
16837: PPUSH
16838: LD_VAR 0 6
16842: PPUSH
16843: CALL_OW 428
16847: OR
16848: IFFALSE 16852
// exit ;
16850: GO 17580
// uc_side := your_side ;
16852: LD_ADDR_OWVAR 20
16856: PUSH
16857: LD_OWVAR 2
16861: ST_TO_ADDR
// uc_nation := nation ;
16862: LD_ADDR_OWVAR 21
16866: PUSH
16867: LD_VAR 0 1
16871: ST_TO_ADDR
// bc_level = 1 ;
16872: LD_ADDR_OWVAR 43
16876: PUSH
16877: LD_INT 1
16879: ST_TO_ADDR
// case btype of 1 :
16880: LD_VAR 0 2
16884: PUSH
16885: LD_INT 1
16887: DOUBLE
16888: EQUAL
16889: IFTRUE 16893
16891: GO 16904
16893: POP
// bc_type := b_depot ; 2 :
16894: LD_ADDR_OWVAR 42
16898: PUSH
16899: LD_INT 0
16901: ST_TO_ADDR
16902: GO 17524
16904: LD_INT 2
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 16923
16912: POP
// bc_type := b_warehouse ; 3 :
16913: LD_ADDR_OWVAR 42
16917: PUSH
16918: LD_INT 1
16920: ST_TO_ADDR
16921: GO 17524
16923: LD_INT 3
16925: DOUBLE
16926: EQUAL
16927: IFTRUE 16931
16929: GO 16942
16931: POP
// bc_type := b_lab ; 4 .. 9 :
16932: LD_ADDR_OWVAR 42
16936: PUSH
16937: LD_INT 6
16939: ST_TO_ADDR
16940: GO 17524
16942: LD_INT 4
16944: DOUBLE
16945: GREATEREQUAL
16946: IFFALSE 16954
16948: LD_INT 9
16950: DOUBLE
16951: LESSEQUAL
16952: IFTRUE 16956
16954: GO 17016
16956: POP
// begin bc_type := b_lab_half ;
16957: LD_ADDR_OWVAR 42
16961: PUSH
16962: LD_INT 7
16964: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16965: LD_ADDR_OWVAR 44
16969: PUSH
16970: LD_INT 10
16972: PUSH
16973: LD_INT 11
16975: PUSH
16976: LD_INT 12
16978: PUSH
16979: LD_INT 15
16981: PUSH
16982: LD_INT 14
16984: PUSH
16985: LD_INT 13
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: PUSH
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 3
17003: MINUS
17004: ARRAY
17005: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17006: LD_ADDR_OWVAR 45
17010: PUSH
17011: LD_INT 9
17013: ST_TO_ADDR
// end ; 10 .. 13 :
17014: GO 17524
17016: LD_INT 10
17018: DOUBLE
17019: GREATEREQUAL
17020: IFFALSE 17028
17022: LD_INT 13
17024: DOUBLE
17025: LESSEQUAL
17026: IFTRUE 17030
17028: GO 17107
17030: POP
// begin bc_type := b_lab_full ;
17031: LD_ADDR_OWVAR 42
17035: PUSH
17036: LD_INT 8
17038: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17039: LD_ADDR_OWVAR 44
17043: PUSH
17044: LD_INT 10
17046: PUSH
17047: LD_INT 12
17049: PUSH
17050: LD_INT 14
17052: PUSH
17053: LD_INT 13
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: PUSH
17062: LD_VAR 0 2
17066: PUSH
17067: LD_INT 9
17069: MINUS
17070: ARRAY
17071: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17072: LD_ADDR_OWVAR 45
17076: PUSH
17077: LD_INT 11
17079: PUSH
17080: LD_INT 15
17082: PUSH
17083: LD_INT 12
17085: PUSH
17086: LD_INT 15
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: PUSH
17095: LD_VAR 0 2
17099: PUSH
17100: LD_INT 9
17102: MINUS
17103: ARRAY
17104: ST_TO_ADDR
// end ; 14 :
17105: GO 17524
17107: LD_INT 14
17109: DOUBLE
17110: EQUAL
17111: IFTRUE 17115
17113: GO 17126
17115: POP
// bc_type := b_workshop ; 15 :
17116: LD_ADDR_OWVAR 42
17120: PUSH
17121: LD_INT 2
17123: ST_TO_ADDR
17124: GO 17524
17126: LD_INT 15
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17145
17134: POP
// bc_type := b_factory ; 16 :
17135: LD_ADDR_OWVAR 42
17139: PUSH
17140: LD_INT 3
17142: ST_TO_ADDR
17143: GO 17524
17145: LD_INT 16
17147: DOUBLE
17148: EQUAL
17149: IFTRUE 17153
17151: GO 17164
17153: POP
// bc_type := b_ext_gun ; 17 :
17154: LD_ADDR_OWVAR 42
17158: PUSH
17159: LD_INT 17
17161: ST_TO_ADDR
17162: GO 17524
17164: LD_INT 17
17166: DOUBLE
17167: EQUAL
17168: IFTRUE 17172
17170: GO 17200
17172: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17173: LD_ADDR_OWVAR 42
17177: PUSH
17178: LD_INT 19
17180: PUSH
17181: LD_INT 23
17183: PUSH
17184: LD_INT 19
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: PUSH
17192: LD_VAR 0 1
17196: ARRAY
17197: ST_TO_ADDR
17198: GO 17524
17200: LD_INT 18
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17219
17208: POP
// bc_type := b_ext_radar ; 19 :
17209: LD_ADDR_OWVAR 42
17213: PUSH
17214: LD_INT 20
17216: ST_TO_ADDR
17217: GO 17524
17219: LD_INT 19
17221: DOUBLE
17222: EQUAL
17223: IFTRUE 17227
17225: GO 17238
17227: POP
// bc_type := b_ext_radio ; 20 :
17228: LD_ADDR_OWVAR 42
17232: PUSH
17233: LD_INT 22
17235: ST_TO_ADDR
17236: GO 17524
17238: LD_INT 20
17240: DOUBLE
17241: EQUAL
17242: IFTRUE 17246
17244: GO 17257
17246: POP
// bc_type := b_ext_siberium ; 21 :
17247: LD_ADDR_OWVAR 42
17251: PUSH
17252: LD_INT 21
17254: ST_TO_ADDR
17255: GO 17524
17257: LD_INT 21
17259: DOUBLE
17260: EQUAL
17261: IFTRUE 17265
17263: GO 17276
17265: POP
// bc_type := b_ext_computer ; 22 :
17266: LD_ADDR_OWVAR 42
17270: PUSH
17271: LD_INT 24
17273: ST_TO_ADDR
17274: GO 17524
17276: LD_INT 22
17278: DOUBLE
17279: EQUAL
17280: IFTRUE 17284
17282: GO 17295
17284: POP
// bc_type := b_ext_track ; 23 :
17285: LD_ADDR_OWVAR 42
17289: PUSH
17290: LD_INT 16
17292: ST_TO_ADDR
17293: GO 17524
17295: LD_INT 23
17297: DOUBLE
17298: EQUAL
17299: IFTRUE 17303
17301: GO 17314
17303: POP
// bc_type := b_ext_laser ; 24 :
17304: LD_ADDR_OWVAR 42
17308: PUSH
17309: LD_INT 25
17311: ST_TO_ADDR
17312: GO 17524
17314: LD_INT 24
17316: DOUBLE
17317: EQUAL
17318: IFTRUE 17322
17320: GO 17333
17322: POP
// bc_type := b_control_tower ; 25 :
17323: LD_ADDR_OWVAR 42
17327: PUSH
17328: LD_INT 36
17330: ST_TO_ADDR
17331: GO 17524
17333: LD_INT 25
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17352
17341: POP
// bc_type := b_breastwork ; 26 :
17342: LD_ADDR_OWVAR 42
17346: PUSH
17347: LD_INT 31
17349: ST_TO_ADDR
17350: GO 17524
17352: LD_INT 26
17354: DOUBLE
17355: EQUAL
17356: IFTRUE 17360
17358: GO 17371
17360: POP
// bc_type := b_bunker ; 27 :
17361: LD_ADDR_OWVAR 42
17365: PUSH
17366: LD_INT 32
17368: ST_TO_ADDR
17369: GO 17524
17371: LD_INT 27
17373: DOUBLE
17374: EQUAL
17375: IFTRUE 17379
17377: GO 17390
17379: POP
// bc_type := b_turret ; 28 :
17380: LD_ADDR_OWVAR 42
17384: PUSH
17385: LD_INT 33
17387: ST_TO_ADDR
17388: GO 17524
17390: LD_INT 28
17392: DOUBLE
17393: EQUAL
17394: IFTRUE 17398
17396: GO 17409
17398: POP
// bc_type := b_armoury ; 29 :
17399: LD_ADDR_OWVAR 42
17403: PUSH
17404: LD_INT 4
17406: ST_TO_ADDR
17407: GO 17524
17409: LD_INT 29
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17417
17415: GO 17428
17417: POP
// bc_type := b_barracks ; 30 :
17418: LD_ADDR_OWVAR 42
17422: PUSH
17423: LD_INT 5
17425: ST_TO_ADDR
17426: GO 17524
17428: LD_INT 30
17430: DOUBLE
17431: EQUAL
17432: IFTRUE 17436
17434: GO 17447
17436: POP
// bc_type := b_solar_power ; 31 :
17437: LD_ADDR_OWVAR 42
17441: PUSH
17442: LD_INT 27
17444: ST_TO_ADDR
17445: GO 17524
17447: LD_INT 31
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17466
17455: POP
// bc_type := b_oil_power ; 32 :
17456: LD_ADDR_OWVAR 42
17460: PUSH
17461: LD_INT 26
17463: ST_TO_ADDR
17464: GO 17524
17466: LD_INT 32
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 17485
17474: POP
// bc_type := b_siberite_power ; 33 :
17475: LD_ADDR_OWVAR 42
17479: PUSH
17480: LD_INT 28
17482: ST_TO_ADDR
17483: GO 17524
17485: LD_INT 33
17487: DOUBLE
17488: EQUAL
17489: IFTRUE 17493
17491: GO 17504
17493: POP
// bc_type := b_oil_mine ; 34 :
17494: LD_ADDR_OWVAR 42
17498: PUSH
17499: LD_INT 29
17501: ST_TO_ADDR
17502: GO 17524
17504: LD_INT 34
17506: DOUBLE
17507: EQUAL
17508: IFTRUE 17512
17510: GO 17523
17512: POP
// bc_type := b_siberite_mine ; end ;
17513: LD_ADDR_OWVAR 42
17517: PUSH
17518: LD_INT 30
17520: ST_TO_ADDR
17521: GO 17524
17523: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17524: LD_ADDR_VAR 0 8
17528: PUSH
17529: LD_VAR 0 5
17533: PPUSH
17534: LD_VAR 0 6
17538: PPUSH
17539: LD_VAR 0 3
17543: PPUSH
17544: CALL_OW 47
17548: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17549: LD_OWVAR 42
17553: PUSH
17554: LD_INT 32
17556: PUSH
17557: LD_INT 33
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: IN
17564: IFFALSE 17580
// PlaceWeaponTurret ( b , weapon ) ;
17566: LD_VAR 0 8
17570: PPUSH
17571: LD_VAR 0 4
17575: PPUSH
17576: CALL_OW 431
// end ;
17580: LD_VAR 0 7
17584: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17585: LD_INT 0
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17591: LD_ADDR_VAR 0 4
17595: PUSH
17596: LD_INT 22
17598: PUSH
17599: LD_OWVAR 2
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 30
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 30
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: ST_TO_ADDR
// if not tmp then
17645: LD_VAR 0 4
17649: NOT
17650: IFFALSE 17654
// exit ;
17652: GO 17713
// for i in tmp do
17654: LD_ADDR_VAR 0 2
17658: PUSH
17659: LD_VAR 0 4
17663: PUSH
17664: FOR_IN
17665: IFFALSE 17711
// for j = 1 to 3 do
17667: LD_ADDR_VAR 0 3
17671: PUSH
17672: DOUBLE
17673: LD_INT 1
17675: DEC
17676: ST_TO_ADDR
17677: LD_INT 3
17679: PUSH
17680: FOR_TO
17681: IFFALSE 17707
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17683: LD_VAR 0 2
17687: PPUSH
17688: CALL_OW 274
17692: PPUSH
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_INT 99999
17700: PPUSH
17701: CALL_OW 277
17705: GO 17680
17707: POP
17708: POP
17709: GO 17664
17711: POP
17712: POP
// end ;
17713: LD_VAR 0 1
17717: RET
// export function hHackSetLevel10 ; var i , j ; begin
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
17722: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17723: LD_ADDR_VAR 0 2
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL_OW 69
17742: PUSH
17743: FOR_IN
17744: IFFALSE 17796
// if IsSelected ( i ) then
17746: LD_VAR 0 2
17750: PPUSH
17751: CALL_OW 306
17755: IFFALSE 17794
// begin for j := 1 to 4 do
17757: LD_ADDR_VAR 0 3
17761: PUSH
17762: DOUBLE
17763: LD_INT 1
17765: DEC
17766: ST_TO_ADDR
17767: LD_INT 4
17769: PUSH
17770: FOR_TO
17771: IFFALSE 17792
// SetSkill ( i , j , 10 ) ;
17773: LD_VAR 0 2
17777: PPUSH
17778: LD_VAR 0 3
17782: PPUSH
17783: LD_INT 10
17785: PPUSH
17786: CALL_OW 237
17790: GO 17770
17792: POP
17793: POP
// end ;
17794: GO 17743
17796: POP
17797: POP
// end ;
17798: LD_VAR 0 1
17802: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17808: LD_ADDR_VAR 0 2
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 21
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 69
17843: PUSH
17844: FOR_IN
17845: IFFALSE 17886
// begin for j := 1 to 4 do
17847: LD_ADDR_VAR 0 3
17851: PUSH
17852: DOUBLE
17853: LD_INT 1
17855: DEC
17856: ST_TO_ADDR
17857: LD_INT 4
17859: PUSH
17860: FOR_TO
17861: IFFALSE 17882
// SetSkill ( i , j , 10 ) ;
17863: LD_VAR 0 2
17867: PPUSH
17868: LD_VAR 0 3
17872: PPUSH
17873: LD_INT 10
17875: PPUSH
17876: CALL_OW 237
17880: GO 17860
17882: POP
17883: POP
// end ;
17884: GO 17844
17886: POP
17887: POP
// end ;
17888: LD_VAR 0 1
17892: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17893: LD_INT 0
17895: PPUSH
// uc_side := your_side ;
17896: LD_ADDR_OWVAR 20
17900: PUSH
17901: LD_OWVAR 2
17905: ST_TO_ADDR
// uc_nation := nation ;
17906: LD_ADDR_OWVAR 21
17910: PUSH
17911: LD_VAR 0 1
17915: ST_TO_ADDR
// InitHc ;
17916: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_VAR 0 2
17927: PPUSH
17928: LD_VAR 0 3
17932: PPUSH
17933: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17937: LD_VAR 0 4
17941: PPUSH
17942: LD_VAR 0 5
17946: PPUSH
17947: CALL_OW 428
17951: PUSH
17952: LD_INT 0
17954: EQUAL
17955: IFFALSE 17979
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17957: CALL_OW 44
17961: PPUSH
17962: LD_VAR 0 4
17966: PPUSH
17967: LD_VAR 0 5
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 48
// end ;
17979: LD_VAR 0 6
17983: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17984: LD_INT 0
17986: PPUSH
17987: PPUSH
// uc_side := your_side ;
17988: LD_ADDR_OWVAR 20
17992: PUSH
17993: LD_OWVAR 2
17997: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17998: LD_VAR 0 1
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: LD_INT 2
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: LD_INT 4
18014: PUSH
18015: LD_INT 5
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: IN
18025: IFFALSE 18037
// uc_nation := nation_american else
18027: LD_ADDR_OWVAR 21
18031: PUSH
18032: LD_INT 1
18034: ST_TO_ADDR
18035: GO 18080
// if chassis in [ 11 , 12 , 13 , 14 ] then
18037: LD_VAR 0 1
18041: PUSH
18042: LD_INT 11
18044: PUSH
18045: LD_INT 12
18047: PUSH
18048: LD_INT 13
18050: PUSH
18051: LD_INT 14
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: IN
18060: IFFALSE 18072
// uc_nation := nation_arabian else
18062: LD_ADDR_OWVAR 21
18066: PUSH
18067: LD_INT 2
18069: ST_TO_ADDR
18070: GO 18080
// uc_nation := nation_russian ;
18072: LD_ADDR_OWVAR 21
18076: PUSH
18077: LD_INT 3
18079: ST_TO_ADDR
// vc_chassis := chassis ;
18080: LD_ADDR_OWVAR 37
18084: PUSH
18085: LD_VAR 0 1
18089: ST_TO_ADDR
// vc_engine := engine ;
18090: LD_ADDR_OWVAR 39
18094: PUSH
18095: LD_VAR 0 2
18099: ST_TO_ADDR
// vc_control := control ;
18100: LD_ADDR_OWVAR 38
18104: PUSH
18105: LD_VAR 0 3
18109: ST_TO_ADDR
// vc_weapon := weapon ;
18110: LD_ADDR_OWVAR 40
18114: PUSH
18115: LD_VAR 0 4
18119: ST_TO_ADDR
// un := CreateVehicle ;
18120: LD_ADDR_VAR 0 8
18124: PUSH
18125: CALL_OW 45
18129: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18130: LD_VAR 0 8
18134: PPUSH
18135: LD_INT 0
18137: PPUSH
18138: LD_INT 5
18140: PPUSH
18141: CALL_OW 12
18145: PPUSH
18146: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18150: LD_VAR 0 8
18154: PPUSH
18155: LD_VAR 0 5
18159: PPUSH
18160: LD_VAR 0 6
18164: PPUSH
18165: LD_INT 1
18167: PPUSH
18168: CALL_OW 48
// end ;
18172: LD_VAR 0 7
18176: RET
// export hInvincible ; every 1 do
18177: GO 18179
18179: DISABLE
// hInvincible := [ ] ;
18180: LD_ADDR_EXP 97
18184: PUSH
18185: EMPTY
18186: ST_TO_ADDR
18187: END
// every 10 do var i ;
18188: GO 18190
18190: DISABLE
18191: LD_INT 0
18193: PPUSH
// begin enable ;
18194: ENABLE
// if not hInvincible then
18195: LD_EXP 97
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18248
// for i in hInvincible do
18204: LD_ADDR_VAR 0 1
18208: PUSH
18209: LD_EXP 97
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18246
// if GetLives ( i ) < 1000 then
18217: LD_VAR 0 1
18221: PPUSH
18222: CALL_OW 256
18226: PUSH
18227: LD_INT 1000
18229: LESS
18230: IFFALSE 18244
// SetLives ( i , 1000 ) ;
18232: LD_VAR 0 1
18236: PPUSH
18237: LD_INT 1000
18239: PPUSH
18240: CALL_OW 234
18244: GO 18214
18246: POP
18247: POP
// end ;
18248: PPOPN 1
18250: END
// export function hHackInvincible ; var i ; begin
18251: LD_INT 0
18253: PPUSH
18254: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18255: LD_ADDR_VAR 0 2
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 21
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 21
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: PPUSH
18288: CALL_OW 69
18292: PUSH
18293: FOR_IN
18294: IFFALSE 18355
// if IsSelected ( i ) then
18296: LD_VAR 0 2
18300: PPUSH
18301: CALL_OW 306
18305: IFFALSE 18353
// begin if i in hInvincible then
18307: LD_VAR 0 2
18311: PUSH
18312: LD_EXP 97
18316: IN
18317: IFFALSE 18337
// hInvincible := hInvincible diff i else
18319: LD_ADDR_EXP 97
18323: PUSH
18324: LD_EXP 97
18328: PUSH
18329: LD_VAR 0 2
18333: DIFF
18334: ST_TO_ADDR
18335: GO 18353
// hInvincible := hInvincible union i ;
18337: LD_ADDR_EXP 97
18341: PUSH
18342: LD_EXP 97
18346: PUSH
18347: LD_VAR 0 2
18351: UNION
18352: ST_TO_ADDR
// end ;
18353: GO 18293
18355: POP
18356: POP
// end ;
18357: LD_VAR 0 1
18361: RET
// export function hHackInvisible ; var i , j ; begin
18362: LD_INT 0
18364: PPUSH
18365: PPUSH
18366: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18367: LD_ADDR_VAR 0 2
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PPUSH
18382: CALL_OW 69
18386: PUSH
18387: FOR_IN
18388: IFFALSE 18412
// if IsSelected ( i ) then
18390: LD_VAR 0 2
18394: PPUSH
18395: CALL_OW 306
18399: IFFALSE 18410
// ComForceInvisible ( i ) ;
18401: LD_VAR 0 2
18405: PPUSH
18406: CALL_OW 496
18410: GO 18387
18412: POP
18413: POP
// end ;
18414: LD_VAR 0 1
18418: RET
// export function hHackChangeYourSide ; begin
18419: LD_INT 0
18421: PPUSH
// if your_side = 8 then
18422: LD_OWVAR 2
18426: PUSH
18427: LD_INT 8
18429: EQUAL
18430: IFFALSE 18442
// your_side := 0 else
18432: LD_ADDR_OWVAR 2
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
18440: GO 18456
// your_side := your_side + 1 ;
18442: LD_ADDR_OWVAR 2
18446: PUSH
18447: LD_OWVAR 2
18451: PUSH
18452: LD_INT 1
18454: PLUS
18455: ST_TO_ADDR
// end ;
18456: LD_VAR 0 1
18460: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18461: LD_INT 0
18463: PPUSH
18464: PPUSH
18465: PPUSH
// for i in all_units do
18466: LD_ADDR_VAR 0 2
18470: PUSH
18471: LD_OWVAR 3
18475: PUSH
18476: FOR_IN
18477: IFFALSE 18555
// if IsSelected ( i ) then
18479: LD_VAR 0 2
18483: PPUSH
18484: CALL_OW 306
18488: IFFALSE 18553
// begin j := GetSide ( i ) ;
18490: LD_ADDR_VAR 0 3
18494: PUSH
18495: LD_VAR 0 2
18499: PPUSH
18500: CALL_OW 255
18504: ST_TO_ADDR
// if j = 8 then
18505: LD_VAR 0 3
18509: PUSH
18510: LD_INT 8
18512: EQUAL
18513: IFFALSE 18525
// j := 0 else
18515: LD_ADDR_VAR 0 3
18519: PUSH
18520: LD_INT 0
18522: ST_TO_ADDR
18523: GO 18539
// j := j + 1 ;
18525: LD_ADDR_VAR 0 3
18529: PUSH
18530: LD_VAR 0 3
18534: PUSH
18535: LD_INT 1
18537: PLUS
18538: ST_TO_ADDR
// SetSide ( i , j ) ;
18539: LD_VAR 0 2
18543: PPUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: CALL_OW 235
// end ;
18553: GO 18476
18555: POP
18556: POP
// end ;
18557: LD_VAR 0 1
18561: RET
// export function hHackFog ; begin
18562: LD_INT 0
18564: PPUSH
// FogOff ( true ) ;
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 344
// end ;
18572: LD_VAR 0 1
18576: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18577: LD_INT 0
18579: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18580: LD_VAR 0 1
18584: PPUSH
18585: LD_VAR 0 2
18589: PPUSH
18590: LD_VAR 0 3
18594: PPUSH
18595: LD_INT 1
18597: PPUSH
18598: LD_INT 1
18600: PPUSH
18601: CALL_OW 483
// CenterOnXY ( x , y ) ;
18605: LD_VAR 0 2
18609: PPUSH
18610: LD_VAR 0 3
18614: PPUSH
18615: CALL_OW 84
// end ;
18619: LD_VAR 0 4
18623: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18624: LD_INT 0
18626: PPUSH
18627: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18628: LD_VAR 0 1
18632: NOT
18633: PUSH
18634: LD_VAR 0 2
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: CALL_OW 488
18648: NOT
18649: OR
18650: PUSH
18651: LD_VAR 0 1
18655: PPUSH
18656: CALL_OW 266
18660: PUSH
18661: LD_INT 3
18663: NONEQUAL
18664: PUSH
18665: LD_VAR 0 1
18669: PPUSH
18670: CALL_OW 247
18674: PUSH
18675: LD_INT 1
18677: EQUAL
18678: NOT
18679: AND
18680: OR
18681: IFFALSE 18685
// exit ;
18683: GO 18967
// if GetType ( factory ) = unit_human then
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 247
18694: PUSH
18695: LD_INT 1
18697: EQUAL
18698: IFFALSE 18715
// factory := IsInUnit ( factory ) ;
18700: LD_ADDR_VAR 0 1
18704: PUSH
18705: LD_VAR 0 1
18709: PPUSH
18710: CALL_OW 310
18714: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18715: LD_VAR 0 1
18719: PPUSH
18720: CALL_OW 266
18724: PUSH
18725: LD_INT 3
18727: NONEQUAL
18728: IFFALSE 18732
// exit ;
18730: GO 18967
// for i := 1 to Count ( factoryWaypoints ) do
18732: LD_ADDR_VAR 0 5
18736: PUSH
18737: DOUBLE
18738: LD_INT 1
18740: DEC
18741: ST_TO_ADDR
18742: LD_EXP 98
18746: PPUSH
18747: CALL 27470 0 1
18751: PUSH
18752: FOR_TO
18753: IFFALSE 18915
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
18755: LD_VAR 0 2
18759: PPUSH
18760: LD_VAR 0 3
18764: PPUSH
18765: CALL_OW 428
18769: PUSH
18770: LD_EXP 98
18774: PUSH
18775: LD_VAR 0 5
18779: ARRAY
18780: PUSH
18781: LD_INT 2
18783: ARRAY
18784: EQUAL
18785: IFFALSE 18817
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
18787: LD_ADDR_EXP 98
18791: PUSH
18792: LD_EXP 98
18796: PPUSH
18797: LD_VAR 0 5
18801: PPUSH
18802: CALL_OW 3
18806: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18807: CALL 18972 0 0
// exit ;
18811: POP
18812: POP
18813: GO 18967
// end else
18815: GO 18913
// if factory = factoryWaypoints [ i ] [ 2 ] then
18817: LD_VAR 0 1
18821: PUSH
18822: LD_EXP 98
18826: PUSH
18827: LD_VAR 0 5
18831: ARRAY
18832: PUSH
18833: LD_INT 2
18835: ARRAY
18836: EQUAL
18837: IFFALSE 18913
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
18839: LD_ADDR_EXP 98
18843: PUSH
18844: LD_EXP 98
18848: PPUSH
18849: LD_VAR 0 5
18853: PPUSH
18854: CALL_OW 3
18858: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
18859: LD_ADDR_EXP 98
18863: PUSH
18864: LD_EXP 98
18868: PPUSH
18869: LD_VAR 0 1
18873: PPUSH
18874: CALL_OW 255
18878: PUSH
18879: LD_VAR 0 1
18883: PUSH
18884: LD_VAR 0 2
18888: PUSH
18889: LD_VAR 0 3
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: PPUSH
18900: CALL 63079 0 2
18904: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18905: CALL 18972 0 0
// exit ;
18909: POP
18910: POP
18911: GO 18967
// end ; end ;
18913: GO 18752
18915: POP
18916: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
18917: LD_ADDR_EXP 98
18921: PUSH
18922: LD_EXP 98
18926: PPUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 255
18936: PUSH
18937: LD_VAR 0 1
18941: PUSH
18942: LD_VAR 0 2
18946: PUSH
18947: LD_VAR 0 3
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: PPUSH
18958: CALL 63079 0 2
18962: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18963: CALL 18972 0 0
// end ;
18967: LD_VAR 0 4
18971: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18972: LD_INT 0
18974: PPUSH
18975: PPUSH
18976: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18977: LD_STRING resetFactoryWaypoint();
18979: PPUSH
18980: CALL_OW 559
// if factoryWaypoints then
18984: LD_EXP 98
18988: IFFALSE 19109
// begin list := factoryWaypoints ;
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_EXP 98
18999: ST_TO_ADDR
// for i := 1 to list do
19000: LD_ADDR_VAR 0 2
19004: PUSH
19005: DOUBLE
19006: LD_INT 1
19008: DEC
19009: ST_TO_ADDR
19010: LD_VAR 0 3
19014: PUSH
19015: FOR_TO
19016: IFFALSE 19107
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19018: LD_STRING setFactoryWaypointXY(
19020: PUSH
19021: LD_VAR 0 3
19025: PUSH
19026: LD_VAR 0 2
19030: ARRAY
19031: PUSH
19032: LD_INT 1
19034: ARRAY
19035: STR
19036: PUSH
19037: LD_STRING ,
19039: STR
19040: PUSH
19041: LD_VAR 0 3
19045: PUSH
19046: LD_VAR 0 2
19050: ARRAY
19051: PUSH
19052: LD_INT 2
19054: ARRAY
19055: STR
19056: PUSH
19057: LD_STRING ,
19059: STR
19060: PUSH
19061: LD_VAR 0 3
19065: PUSH
19066: LD_VAR 0 2
19070: ARRAY
19071: PUSH
19072: LD_INT 3
19074: ARRAY
19075: STR
19076: PUSH
19077: LD_STRING ,
19079: STR
19080: PUSH
19081: LD_VAR 0 3
19085: PUSH
19086: LD_VAR 0 2
19090: ARRAY
19091: PUSH
19092: LD_INT 4
19094: ARRAY
19095: STR
19096: PUSH
19097: LD_STRING )
19099: STR
19100: PPUSH
19101: CALL_OW 559
19105: GO 19015
19107: POP
19108: POP
// end ; end ;
19109: LD_VAR 0 1
19113: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19114: LD_INT 0
19116: PPUSH
// if HexInfo ( x , y ) = warehouse then
19117: LD_VAR 0 2
19121: PPUSH
19122: LD_VAR 0 3
19126: PPUSH
19127: CALL_OW 428
19131: PUSH
19132: LD_VAR 0 1
19136: EQUAL
19137: IFFALSE 19164
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19139: LD_ADDR_EXP 99
19143: PUSH
19144: LD_EXP 99
19148: PPUSH
19149: LD_VAR 0 1
19153: PPUSH
19154: LD_INT 0
19156: PPUSH
19157: CALL_OW 1
19161: ST_TO_ADDR
19162: GO 19215
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19164: LD_ADDR_EXP 99
19168: PUSH
19169: LD_EXP 99
19173: PPUSH
19174: LD_VAR 0 1
19178: PPUSH
19179: LD_VAR 0 1
19183: PPUSH
19184: CALL_OW 255
19188: PUSH
19189: LD_VAR 0 1
19193: PUSH
19194: LD_VAR 0 2
19198: PUSH
19199: LD_VAR 0 3
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 1
19214: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19215: CALL 19224 0 0
// end ;
19219: LD_VAR 0 4
19223: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19224: LD_INT 0
19226: PPUSH
19227: PPUSH
19228: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19229: LD_STRING resetWarehouseGatheringPoints();
19231: PPUSH
19232: CALL_OW 559
// if warehouseGatheringPoints then
19236: LD_EXP 99
19240: IFFALSE 19366
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19242: LD_ADDR_VAR 0 3
19246: PUSH
19247: LD_EXP 99
19251: PPUSH
19252: CALL 66841 0 1
19256: ST_TO_ADDR
// for i := 1 to list do
19257: LD_ADDR_VAR 0 2
19261: PUSH
19262: DOUBLE
19263: LD_INT 1
19265: DEC
19266: ST_TO_ADDR
19267: LD_VAR 0 3
19271: PUSH
19272: FOR_TO
19273: IFFALSE 19364
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19275: LD_STRING setWarehouseGatheringPointXY(
19277: PUSH
19278: LD_VAR 0 3
19282: PUSH
19283: LD_VAR 0 2
19287: ARRAY
19288: PUSH
19289: LD_INT 1
19291: ARRAY
19292: STR
19293: PUSH
19294: LD_STRING ,
19296: STR
19297: PUSH
19298: LD_VAR 0 3
19302: PUSH
19303: LD_VAR 0 2
19307: ARRAY
19308: PUSH
19309: LD_INT 2
19311: ARRAY
19312: STR
19313: PUSH
19314: LD_STRING ,
19316: STR
19317: PUSH
19318: LD_VAR 0 3
19322: PUSH
19323: LD_VAR 0 2
19327: ARRAY
19328: PUSH
19329: LD_INT 3
19331: ARRAY
19332: STR
19333: PUSH
19334: LD_STRING ,
19336: STR
19337: PUSH
19338: LD_VAR 0 3
19342: PUSH
19343: LD_VAR 0 2
19347: ARRAY
19348: PUSH
19349: LD_INT 4
19351: ARRAY
19352: STR
19353: PUSH
19354: LD_STRING )
19356: STR
19357: PPUSH
19358: CALL_OW 559
19362: GO 19272
19364: POP
19365: POP
// end ; end ;
19366: LD_VAR 0 1
19370: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19371: LD_EXP 99
19375: IFFALSE 20060
19377: GO 19379
19379: DISABLE
19380: LD_INT 0
19382: PPUSH
19383: PPUSH
19384: PPUSH
19385: PPUSH
19386: PPUSH
19387: PPUSH
19388: PPUSH
19389: PPUSH
19390: PPUSH
// begin enable ;
19391: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19392: LD_ADDR_VAR 0 3
19396: PUSH
19397: LD_EXP 99
19401: PPUSH
19402: CALL 66841 0 1
19406: ST_TO_ADDR
// if not list then
19407: LD_VAR 0 3
19411: NOT
19412: IFFALSE 19416
// exit ;
19414: GO 20060
// for i := 1 to list do
19416: LD_ADDR_VAR 0 1
19420: PUSH
19421: DOUBLE
19422: LD_INT 1
19424: DEC
19425: ST_TO_ADDR
19426: LD_VAR 0 3
19430: PUSH
19431: FOR_TO
19432: IFFALSE 20058
// begin depot := list [ i ] [ 2 ] ;
19434: LD_ADDR_VAR 0 8
19438: PUSH
19439: LD_VAR 0 3
19443: PUSH
19444: LD_VAR 0 1
19448: ARRAY
19449: PUSH
19450: LD_INT 2
19452: ARRAY
19453: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19454: LD_ADDR_VAR 0 5
19458: PUSH
19459: LD_VAR 0 3
19463: PUSH
19464: LD_VAR 0 1
19468: ARRAY
19469: PUSH
19470: LD_INT 1
19472: ARRAY
19473: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19474: LD_VAR 0 8
19478: PPUSH
19479: CALL_OW 301
19483: PUSH
19484: LD_VAR 0 5
19488: PUSH
19489: LD_VAR 0 8
19493: PPUSH
19494: CALL_OW 255
19498: NONEQUAL
19499: OR
19500: IFFALSE 19529
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19502: LD_ADDR_EXP 99
19506: PUSH
19507: LD_EXP 99
19511: PPUSH
19512: LD_VAR 0 8
19516: PPUSH
19517: LD_INT 0
19519: PPUSH
19520: CALL_OW 1
19524: ST_TO_ADDR
// exit ;
19525: POP
19526: POP
19527: GO 20060
// end ; x := list [ i ] [ 3 ] ;
19529: LD_ADDR_VAR 0 6
19533: PUSH
19534: LD_VAR 0 3
19538: PUSH
19539: LD_VAR 0 1
19543: ARRAY
19544: PUSH
19545: LD_INT 3
19547: ARRAY
19548: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19549: LD_ADDR_VAR 0 7
19553: PUSH
19554: LD_VAR 0 3
19558: PUSH
19559: LD_VAR 0 1
19563: ARRAY
19564: PUSH
19565: LD_INT 4
19567: ARRAY
19568: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19569: LD_ADDR_VAR 0 9
19573: PUSH
19574: LD_VAR 0 6
19578: PPUSH
19579: LD_VAR 0 7
19583: PPUSH
19584: LD_INT 16
19586: PPUSH
19587: CALL 65425 0 3
19591: ST_TO_ADDR
// if not cratesNearbyPoint then
19592: LD_VAR 0 9
19596: NOT
19597: IFFALSE 19603
// exit ;
19599: POP
19600: POP
19601: GO 20060
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19603: LD_ADDR_VAR 0 4
19607: PUSH
19608: LD_INT 22
19610: PUSH
19611: LD_VAR 0 5
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 3
19622: PUSH
19623: LD_INT 60
19625: PUSH
19626: EMPTY
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 91
19635: PUSH
19636: LD_VAR 0 8
19640: PUSH
19641: LD_INT 6
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 2
19651: PUSH
19652: LD_INT 25
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 25
19664: PUSH
19665: LD_INT 16
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: PPUSH
19683: CALL_OW 69
19687: PUSH
19688: LD_VAR 0 8
19692: PPUSH
19693: CALL_OW 313
19697: PPUSH
19698: LD_INT 3
19700: PUSH
19701: LD_INT 60
19703: PUSH
19704: EMPTY
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: LD_INT 25
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 25
19726: PUSH
19727: LD_INT 16
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PPUSH
19743: CALL_OW 72
19747: UNION
19748: ST_TO_ADDR
// if tmp then
19749: LD_VAR 0 4
19753: IFFALSE 19833
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19755: LD_ADDR_VAR 0 4
19759: PUSH
19760: LD_VAR 0 4
19764: PPUSH
19765: LD_INT 3
19767: PPUSH
19768: CALL 63394 0 2
19772: ST_TO_ADDR
// for j in tmp do
19773: LD_ADDR_VAR 0 2
19777: PUSH
19778: LD_VAR 0 4
19782: PUSH
19783: FOR_IN
19784: IFFALSE 19827
// begin if IsInUnit ( j ) then
19786: LD_VAR 0 2
19790: PPUSH
19791: CALL_OW 310
19795: IFFALSE 19806
// ComExit ( j ) ;
19797: LD_VAR 0 2
19801: PPUSH
19802: CALL 63477 0 1
// AddComCollect ( j , x , y ) ;
19806: LD_VAR 0 2
19810: PPUSH
19811: LD_VAR 0 6
19815: PPUSH
19816: LD_VAR 0 7
19820: PPUSH
19821: CALL_OW 177
// end ;
19825: GO 19783
19827: POP
19828: POP
// exit ;
19829: POP
19830: POP
19831: GO 20060
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19833: LD_ADDR_VAR 0 4
19837: PUSH
19838: LD_INT 22
19840: PUSH
19841: LD_VAR 0 5
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 91
19852: PUSH
19853: LD_VAR 0 8
19857: PUSH
19858: LD_INT 8
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: LD_INT 34
19871: PUSH
19872: LD_INT 12
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 34
19881: PUSH
19882: LD_INT 51
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 34
19891: PUSH
19892: LD_INT 32
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 34
19901: PUSH
19902: LD_INT 89
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: PPUSH
19921: CALL_OW 69
19925: ST_TO_ADDR
// if tmp then
19926: LD_VAR 0 4
19930: IFFALSE 20056
// begin for j in tmp do
19932: LD_ADDR_VAR 0 2
19936: PUSH
19937: LD_VAR 0 4
19941: PUSH
19942: FOR_IN
19943: IFFALSE 20054
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19945: LD_VAR 0 2
19949: PPUSH
19950: CALL_OW 262
19954: PUSH
19955: LD_INT 3
19957: EQUAL
19958: PUSH
19959: LD_VAR 0 2
19963: PPUSH
19964: CALL_OW 261
19968: PUSH
19969: LD_INT 20
19971: GREATER
19972: OR
19973: PUSH
19974: LD_VAR 0 2
19978: PPUSH
19979: CALL_OW 314
19983: NOT
19984: AND
19985: PUSH
19986: LD_VAR 0 2
19990: PPUSH
19991: CALL_OW 263
19995: PUSH
19996: LD_INT 1
19998: NONEQUAL
19999: PUSH
20000: LD_VAR 0 2
20004: PPUSH
20005: CALL_OW 311
20009: OR
20010: AND
20011: IFFALSE 20052
// begin ComCollect ( j , x , y ) ;
20013: LD_VAR 0 2
20017: PPUSH
20018: LD_VAR 0 6
20022: PPUSH
20023: LD_VAR 0 7
20027: PPUSH
20028: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20032: LD_VAR 0 2
20036: PPUSH
20037: LD_VAR 0 8
20041: PPUSH
20042: CALL_OW 172
// exit ;
20046: POP
20047: POP
20048: POP
20049: POP
20050: GO 20060
// end ;
20052: GO 19942
20054: POP
20055: POP
// end ; end ;
20056: GO 19431
20058: POP
20059: POP
// end ; end_of_file
20060: PPOPN 9
20062: END
// export function SOS_UnitDestroyed ( un ) ; begin
20063: LD_INT 0
20065: PPUSH
// ComRadiation ( un ) ;
20066: LD_VAR 0 1
20070: PPUSH
20071: CALL 21052 0 1
// end ;
20075: LD_VAR 0 2
20079: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20080: LD_INT 0
20082: PPUSH
// ComRadiation ( un ) ;
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL 21052 0 1
// end ;
20092: LD_VAR 0 2
20096: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20097: LD_INT 0
20099: PPUSH
// end ;
20100: LD_VAR 0 4
20104: RET
// export function SOS_Command ( cmd ) ; begin
20105: LD_INT 0
20107: PPUSH
// end ;
20108: LD_VAR 0 2
20112: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20113: LD_INT 0
20115: PPUSH
// end ;
20116: LD_VAR 0 6
20120: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
20121: LD_INT 0
20123: PPUSH
20124: PPUSH
20125: PPUSH
20126: PPUSH
20127: PPUSH
// if not vehicle or not factory then
20128: LD_VAR 0 1
20132: NOT
20133: PUSH
20134: LD_VAR 0 2
20138: NOT
20139: OR
20140: IFFALSE 20144
// exit ;
20142: GO 20643
// if not factoryWaypoints then
20144: LD_EXP 98
20148: NOT
20149: IFFALSE 20153
// exit ;
20151: GO 20643
// for i := 1 to Count ( factoryWaypoints ) do
20153: LD_ADDR_VAR 0 4
20157: PUSH
20158: DOUBLE
20159: LD_INT 1
20161: DEC
20162: ST_TO_ADDR
20163: LD_EXP 98
20167: PPUSH
20168: CALL 27470 0 1
20172: PUSH
20173: FOR_TO
20174: IFFALSE 20641
// if factoryWaypoints [ i ] [ 2 ] = factory then
20176: LD_EXP 98
20180: PUSH
20181: LD_VAR 0 4
20185: ARRAY
20186: PUSH
20187: LD_INT 2
20189: ARRAY
20190: PUSH
20191: LD_VAR 0 2
20195: EQUAL
20196: IFFALSE 20639
// begin if GetControl ( vehicle ) = control_manual then
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 263
20207: PUSH
20208: LD_INT 1
20210: EQUAL
20211: IFFALSE 20522
// begin driver := IsDrivenBy ( vehicle ) ;
20213: LD_ADDR_VAR 0 6
20217: PUSH
20218: LD_VAR 0 1
20222: PPUSH
20223: CALL_OW 311
20227: ST_TO_ADDR
// tag := GetTag ( driver ) ;
20228: LD_ADDR_VAR 0 5
20232: PUSH
20233: LD_VAR 0 6
20237: PPUSH
20238: CALL_OW 110
20242: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
20243: LD_VAR 0 5
20247: PUSH
20248: LD_INT 501
20250: EQUAL
20251: PUSH
20252: LD_VAR 0 1
20256: PPUSH
20257: CALL_OW 110
20261: PUSH
20262: LD_INT 501
20264: EQUAL
20265: OR
20266: IFFALSE 20272
// exit ;
20268: POP
20269: POP
20270: GO 20643
// if not HasTask ( driver ) then
20272: LD_VAR 0 6
20276: PPUSH
20277: CALL_OW 314
20281: NOT
20282: IFFALSE 20520
// begin SetTag ( driver , tDriver ) ;
20284: LD_VAR 0 6
20288: PPUSH
20289: LD_INT 501
20291: PPUSH
20292: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
20296: LD_VAR 0 1
20300: PPUSH
20301: LD_INT 501
20303: PPUSH
20304: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20308: LD_ADDR_VAR 0 7
20312: PUSH
20313: LD_EXP 98
20317: PUSH
20318: LD_VAR 0 4
20322: ARRAY
20323: PUSH
20324: LD_INT 3
20326: ARRAY
20327: PPUSH
20328: LD_EXP 98
20332: PUSH
20333: LD_VAR 0 4
20337: ARRAY
20338: PUSH
20339: LD_INT 4
20341: ARRAY
20342: PPUSH
20343: CALL_OW 428
20347: ST_TO_ADDR
// if hex then
20348: LD_VAR 0 7
20352: IFFALSE 20370
// ComMoveUnit ( driver , hex ) else
20354: LD_VAR 0 6
20358: PPUSH
20359: LD_VAR 0 7
20363: PPUSH
20364: CALL_OW 112
20368: GO 20409
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20370: LD_VAR 0 6
20374: PPUSH
20375: LD_EXP 98
20379: PUSH
20380: LD_VAR 0 4
20384: ARRAY
20385: PUSH
20386: LD_INT 3
20388: ARRAY
20389: PPUSH
20390: LD_EXP 98
20394: PUSH
20395: LD_VAR 0 4
20399: ARRAY
20400: PUSH
20401: LD_INT 4
20403: ARRAY
20404: PPUSH
20405: CALL_OW 111
// AddComExitVehicle ( driver ) ;
20409: LD_VAR 0 6
20413: PPUSH
20414: CALL_OW 181
// if Multiplayer then
20418: LD_OWVAR 4
20422: IFFALSE 20471
// begin repeat wait ( 10 ) ;
20424: LD_INT 10
20426: PPUSH
20427: CALL_OW 67
// until not IsInUnit ( driver ) ;
20431: LD_VAR 0 6
20435: PPUSH
20436: CALL_OW 310
20440: NOT
20441: IFFALSE 20424
// if not HasTask ( driver ) then
20443: LD_VAR 0 6
20447: PPUSH
20448: CALL_OW 314
20452: NOT
20453: IFFALSE 20469
// ComEnterUnit ( driver , factory ) ;
20455: LD_VAR 0 6
20459: PPUSH
20460: LD_VAR 0 2
20464: PPUSH
20465: CALL_OW 120
// end else
20469: GO 20485
// AddComEnterUnit ( driver , factory ) ;
20471: LD_VAR 0 6
20475: PPUSH
20476: LD_VAR 0 2
20480: PPUSH
20481: CALL_OW 180
// wait ( 0 0$1 ) ;
20485: LD_INT 35
20487: PPUSH
20488: CALL_OW 67
// SetTag ( driver , tag ) ;
20492: LD_VAR 0 6
20496: PPUSH
20497: LD_VAR 0 5
20501: PPUSH
20502: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
20506: LD_VAR 0 1
20510: PPUSH
20511: LD_INT 0
20513: PPUSH
20514: CALL_OW 109
// break ;
20518: GO 20641
// end ; end else
20520: GO 20639
// if GetControl ( vehicle ) = control_remote then
20522: LD_VAR 0 1
20526: PPUSH
20527: CALL_OW 263
20531: PUSH
20532: LD_INT 2
20534: EQUAL
20535: IFFALSE 20598
// begin wait ( 0 0$2 ) ;
20537: LD_INT 70
20539: PPUSH
20540: CALL_OW 67
// if Connect ( vehicle ) then
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL 33676 0 1
20553: IFFALSE 20594
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20555: LD_VAR 0 1
20559: PPUSH
20560: LD_EXP 98
20564: PUSH
20565: LD_VAR 0 4
20569: ARRAY
20570: PUSH
20571: LD_INT 3
20573: ARRAY
20574: PPUSH
20575: LD_EXP 98
20579: PUSH
20580: LD_VAR 0 4
20584: ARRAY
20585: PUSH
20586: LD_INT 4
20588: ARRAY
20589: PPUSH
20590: CALL_OW 171
// break ;
20594: GO 20641
// end else
20596: GO 20639
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20598: LD_VAR 0 1
20602: PPUSH
20603: LD_EXP 98
20607: PUSH
20608: LD_VAR 0 4
20612: ARRAY
20613: PUSH
20614: LD_INT 3
20616: ARRAY
20617: PPUSH
20618: LD_EXP 98
20622: PUSH
20623: LD_VAR 0 4
20627: ARRAY
20628: PUSH
20629: LD_INT 4
20631: ARRAY
20632: PPUSH
20633: CALL_OW 171
// break ;
20637: GO 20641
// end ; end ;
20639: GO 20173
20641: POP
20642: POP
// end ;
20643: LD_VAR 0 3
20647: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20648: LD_INT 0
20650: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20651: LD_VAR 0 1
20655: PUSH
20656: LD_INT 250
20658: EQUAL
20659: PUSH
20660: LD_VAR 0 2
20664: PPUSH
20665: CALL_OW 264
20669: PUSH
20670: LD_INT 81
20672: EQUAL
20673: AND
20674: IFFALSE 20695
// MinerPlaceMine ( unit , x , y ) ;
20676: LD_VAR 0 2
20680: PPUSH
20681: LD_VAR 0 4
20685: PPUSH
20686: LD_VAR 0 5
20690: PPUSH
20691: CALL 23787 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20695: LD_VAR 0 1
20699: PUSH
20700: LD_INT 251
20702: EQUAL
20703: PUSH
20704: LD_VAR 0 2
20708: PPUSH
20709: CALL_OW 264
20713: PUSH
20714: LD_INT 81
20716: EQUAL
20717: AND
20718: IFFALSE 20739
// MinerDetonateMine ( unit , x , y ) ;
20720: LD_VAR 0 2
20724: PPUSH
20725: LD_VAR 0 4
20729: PPUSH
20730: LD_VAR 0 5
20734: PPUSH
20735: CALL 24062 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20739: LD_VAR 0 1
20743: PUSH
20744: LD_INT 252
20746: EQUAL
20747: PUSH
20748: LD_VAR 0 2
20752: PPUSH
20753: CALL_OW 264
20757: PUSH
20758: LD_INT 81
20760: EQUAL
20761: AND
20762: IFFALSE 20783
// MinerCreateMinefield ( unit , x , y ) ;
20764: LD_VAR 0 2
20768: PPUSH
20769: LD_VAR 0 4
20773: PPUSH
20774: LD_VAR 0 5
20778: PPUSH
20779: CALL 24479 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20783: LD_VAR 0 1
20787: PUSH
20788: LD_INT 253
20790: EQUAL
20791: PUSH
20792: LD_VAR 0 2
20796: PPUSH
20797: CALL_OW 257
20801: PUSH
20802: LD_INT 5
20804: EQUAL
20805: AND
20806: IFFALSE 20827
// ComBinocular ( unit , x , y ) ;
20808: LD_VAR 0 2
20812: PPUSH
20813: LD_VAR 0 4
20817: PPUSH
20818: LD_VAR 0 5
20822: PPUSH
20823: CALL 24848 0 3
// if selectedUnit then
20827: LD_VAR 0 3
20831: IFFALSE 20887
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20833: LD_VAR 0 1
20837: PUSH
20838: LD_INT 254
20840: EQUAL
20841: PUSH
20842: LD_VAR 0 2
20846: PPUSH
20847: CALL_OW 264
20851: PUSH
20852: LD_INT 99
20854: EQUAL
20855: AND
20856: PUSH
20857: LD_VAR 0 3
20861: PPUSH
20862: CALL_OW 263
20866: PUSH
20867: LD_INT 3
20869: EQUAL
20870: AND
20871: IFFALSE 20887
// HackDestroyVehicle ( unit , selectedUnit ) ;
20873: LD_VAR 0 2
20877: PPUSH
20878: LD_VAR 0 3
20882: PPUSH
20883: CALL 23151 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20887: LD_VAR 0 1
20891: PUSH
20892: LD_INT 255
20894: EQUAL
20895: PUSH
20896: LD_VAR 0 2
20900: PPUSH
20901: CALL_OW 264
20905: PUSH
20906: LD_INT 14
20908: PUSH
20909: LD_INT 53
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: IN
20916: AND
20917: PUSH
20918: LD_VAR 0 4
20922: PPUSH
20923: LD_VAR 0 5
20927: PPUSH
20928: CALL_OW 488
20932: AND
20933: IFFALSE 20957
// CutTreeXYR ( unit , x , y , 12 ) ;
20935: LD_VAR 0 2
20939: PPUSH
20940: LD_VAR 0 4
20944: PPUSH
20945: LD_VAR 0 5
20949: PPUSH
20950: LD_INT 12
20952: PPUSH
20953: CALL 21148 0 4
// if cmd = 256 then
20957: LD_VAR 0 1
20961: PUSH
20962: LD_INT 256
20964: EQUAL
20965: IFFALSE 20986
// SetFactoryWaypoint ( unit , x , y ) ;
20967: LD_VAR 0 2
20971: PPUSH
20972: LD_VAR 0 4
20976: PPUSH
20977: LD_VAR 0 5
20981: PPUSH
20982: CALL 18624 0 3
// if cmd = 257 then
20986: LD_VAR 0 1
20990: PUSH
20991: LD_INT 257
20993: EQUAL
20994: IFFALSE 21015
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20996: LD_VAR 0 2
21000: PPUSH
21001: LD_VAR 0 4
21005: PPUSH
21006: LD_VAR 0 5
21010: PPUSH
21011: CALL 19114 0 3
// if cmd = 258 then
21015: LD_VAR 0 1
21019: PUSH
21020: LD_INT 258
21022: EQUAL
21023: IFFALSE 21047
// BurnTreeXYR ( unit , x , y , 8 ) ;
21025: LD_VAR 0 2
21029: PPUSH
21030: LD_VAR 0 4
21034: PPUSH
21035: LD_VAR 0 5
21039: PPUSH
21040: LD_INT 8
21042: PPUSH
21043: CALL 21542 0 4
// end ;
21047: LD_VAR 0 6
21051: RET
// export function ComRadiation ( un ) ; var eff ; begin
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
21056: LD_VAR 0 1
21060: PPUSH
21061: CALL_OW 264
21065: PUSH
21066: LD_INT 91
21068: NONEQUAL
21069: IFFALSE 21073
// exit ;
21071: GO 21143
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21073: LD_INT 68
21075: PPUSH
21076: LD_VAR 0 1
21080: PPUSH
21081: CALL_OW 255
21085: PPUSH
21086: CALL_OW 321
21090: PUSH
21091: LD_INT 2
21093: EQUAL
21094: IFFALSE 21106
// eff := 70 else
21096: LD_ADDR_VAR 0 3
21100: PUSH
21101: LD_INT 70
21103: ST_TO_ADDR
21104: GO 21114
// eff := 30 ;
21106: LD_ADDR_VAR 0 3
21110: PUSH
21111: LD_INT 30
21113: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21114: LD_VAR 0 1
21118: PPUSH
21119: CALL_OW 250
21123: PPUSH
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 251
21133: PPUSH
21134: LD_VAR 0 3
21138: PPUSH
21139: CALL_OW 495
// end ;
21143: LD_VAR 0 2
21147: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
21152: PPUSH
21153: PPUSH
21154: PPUSH
21155: PPUSH
21156: PPUSH
21157: PPUSH
21158: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21159: LD_VAR 0 1
21163: PPUSH
21164: CALL_OW 302
21168: NOT
21169: PUSH
21170: LD_VAR 0 2
21174: PPUSH
21175: LD_VAR 0 3
21179: PPUSH
21180: CALL_OW 488
21184: NOT
21185: OR
21186: PUSH
21187: LD_VAR 0 4
21191: NOT
21192: OR
21193: IFFALSE 21197
// exit ;
21195: GO 21537
// list := [ ] ;
21197: LD_ADDR_VAR 0 13
21201: PUSH
21202: EMPTY
21203: ST_TO_ADDR
// if x - r < 0 then
21204: LD_VAR 0 2
21208: PUSH
21209: LD_VAR 0 4
21213: MINUS
21214: PUSH
21215: LD_INT 0
21217: LESS
21218: IFFALSE 21230
// min_x := 0 else
21220: LD_ADDR_VAR 0 7
21224: PUSH
21225: LD_INT 0
21227: ST_TO_ADDR
21228: GO 21246
// min_x := x - r ;
21230: LD_ADDR_VAR 0 7
21234: PUSH
21235: LD_VAR 0 2
21239: PUSH
21240: LD_VAR 0 4
21244: MINUS
21245: ST_TO_ADDR
// if y - r < 0 then
21246: LD_VAR 0 3
21250: PUSH
21251: LD_VAR 0 4
21255: MINUS
21256: PUSH
21257: LD_INT 0
21259: LESS
21260: IFFALSE 21272
// min_y := 0 else
21262: LD_ADDR_VAR 0 8
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
21270: GO 21288
// min_y := y - r ;
21272: LD_ADDR_VAR 0 8
21276: PUSH
21277: LD_VAR 0 3
21281: PUSH
21282: LD_VAR 0 4
21286: MINUS
21287: ST_TO_ADDR
// max_x := x + r ;
21288: LD_ADDR_VAR 0 9
21292: PUSH
21293: LD_VAR 0 2
21297: PUSH
21298: LD_VAR 0 4
21302: PLUS
21303: ST_TO_ADDR
// max_y := y + r ;
21304: LD_ADDR_VAR 0 10
21308: PUSH
21309: LD_VAR 0 3
21313: PUSH
21314: LD_VAR 0 4
21318: PLUS
21319: ST_TO_ADDR
// for _x = min_x to max_x do
21320: LD_ADDR_VAR 0 11
21324: PUSH
21325: DOUBLE
21326: LD_VAR 0 7
21330: DEC
21331: ST_TO_ADDR
21332: LD_VAR 0 9
21336: PUSH
21337: FOR_TO
21338: IFFALSE 21455
// for _y = min_y to max_y do
21340: LD_ADDR_VAR 0 12
21344: PUSH
21345: DOUBLE
21346: LD_VAR 0 8
21350: DEC
21351: ST_TO_ADDR
21352: LD_VAR 0 10
21356: PUSH
21357: FOR_TO
21358: IFFALSE 21451
// begin if not ValidHex ( _x , _y ) then
21360: LD_VAR 0 11
21364: PPUSH
21365: LD_VAR 0 12
21369: PPUSH
21370: CALL_OW 488
21374: NOT
21375: IFFALSE 21379
// continue ;
21377: GO 21357
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21379: LD_VAR 0 11
21383: PPUSH
21384: LD_VAR 0 12
21388: PPUSH
21389: CALL_OW 351
21393: PUSH
21394: LD_VAR 0 11
21398: PPUSH
21399: LD_VAR 0 12
21403: PPUSH
21404: CALL_OW 554
21408: AND
21409: IFFALSE 21449
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21411: LD_ADDR_VAR 0 13
21415: PUSH
21416: LD_VAR 0 13
21420: PPUSH
21421: LD_VAR 0 13
21425: PUSH
21426: LD_INT 1
21428: PLUS
21429: PPUSH
21430: LD_VAR 0 11
21434: PUSH
21435: LD_VAR 0 12
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PPUSH
21444: CALL_OW 2
21448: ST_TO_ADDR
// end ;
21449: GO 21357
21451: POP
21452: POP
21453: GO 21337
21455: POP
21456: POP
// if not list then
21457: LD_VAR 0 13
21461: NOT
21462: IFFALSE 21466
// exit ;
21464: GO 21537
// for i in list do
21466: LD_ADDR_VAR 0 6
21470: PUSH
21471: LD_VAR 0 13
21475: PUSH
21476: FOR_IN
21477: IFFALSE 21535
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21479: LD_VAR 0 1
21483: PPUSH
21484: LD_STRING M
21486: PUSH
21487: LD_VAR 0 6
21491: PUSH
21492: LD_INT 1
21494: ARRAY
21495: PUSH
21496: LD_VAR 0 6
21500: PUSH
21501: LD_INT 2
21503: ARRAY
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: PPUSH
21529: CALL_OW 447
21533: GO 21476
21535: POP
21536: POP
// end ;
21537: LD_VAR 0 5
21541: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
21542: LD_INT 0
21544: PPUSH
21545: PPUSH
21546: PPUSH
21547: PPUSH
21548: PPUSH
21549: PPUSH
21550: PPUSH
21551: PPUSH
21552: PPUSH
21553: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21554: LD_VAR 0 1
21558: PPUSH
21559: CALL_OW 302
21563: NOT
21564: PUSH
21565: LD_VAR 0 2
21569: PPUSH
21570: LD_VAR 0 3
21574: PPUSH
21575: CALL_OW 488
21579: NOT
21580: OR
21581: PUSH
21582: LD_VAR 0 4
21586: NOT
21587: OR
21588: IFFALSE 21592
// exit ;
21590: GO 22105
// list := [ ] ;
21592: LD_ADDR_VAR 0 13
21596: PUSH
21597: EMPTY
21598: ST_TO_ADDR
// if x - r < 0 then
21599: LD_VAR 0 2
21603: PUSH
21604: LD_VAR 0 4
21608: MINUS
21609: PUSH
21610: LD_INT 0
21612: LESS
21613: IFFALSE 21625
// min_x := 0 else
21615: LD_ADDR_VAR 0 7
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
21623: GO 21641
// min_x := x - r ;
21625: LD_ADDR_VAR 0 7
21629: PUSH
21630: LD_VAR 0 2
21634: PUSH
21635: LD_VAR 0 4
21639: MINUS
21640: ST_TO_ADDR
// if y - r < 0 then
21641: LD_VAR 0 3
21645: PUSH
21646: LD_VAR 0 4
21650: MINUS
21651: PUSH
21652: LD_INT 0
21654: LESS
21655: IFFALSE 21667
// min_y := 0 else
21657: LD_ADDR_VAR 0 8
21661: PUSH
21662: LD_INT 0
21664: ST_TO_ADDR
21665: GO 21683
// min_y := y - r ;
21667: LD_ADDR_VAR 0 8
21671: PUSH
21672: LD_VAR 0 3
21676: PUSH
21677: LD_VAR 0 4
21681: MINUS
21682: ST_TO_ADDR
// max_x := x + r ;
21683: LD_ADDR_VAR 0 9
21687: PUSH
21688: LD_VAR 0 2
21692: PUSH
21693: LD_VAR 0 4
21697: PLUS
21698: ST_TO_ADDR
// max_y := y + r ;
21699: LD_ADDR_VAR 0 10
21703: PUSH
21704: LD_VAR 0 3
21708: PUSH
21709: LD_VAR 0 4
21713: PLUS
21714: ST_TO_ADDR
// for _x = min_x to max_x do
21715: LD_ADDR_VAR 0 11
21719: PUSH
21720: DOUBLE
21721: LD_VAR 0 7
21725: DEC
21726: ST_TO_ADDR
21727: LD_VAR 0 9
21731: PUSH
21732: FOR_TO
21733: IFFALSE 21850
// for _y = min_y to max_y do
21735: LD_ADDR_VAR 0 12
21739: PUSH
21740: DOUBLE
21741: LD_VAR 0 8
21745: DEC
21746: ST_TO_ADDR
21747: LD_VAR 0 10
21751: PUSH
21752: FOR_TO
21753: IFFALSE 21846
// begin if not ValidHex ( _x , _y ) then
21755: LD_VAR 0 11
21759: PPUSH
21760: LD_VAR 0 12
21764: PPUSH
21765: CALL_OW 488
21769: NOT
21770: IFFALSE 21774
// continue ;
21772: GO 21752
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21774: LD_VAR 0 11
21778: PPUSH
21779: LD_VAR 0 12
21783: PPUSH
21784: CALL_OW 351
21788: PUSH
21789: LD_VAR 0 11
21793: PPUSH
21794: LD_VAR 0 12
21798: PPUSH
21799: CALL_OW 554
21803: AND
21804: IFFALSE 21844
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21806: LD_ADDR_VAR 0 13
21810: PUSH
21811: LD_VAR 0 13
21815: PPUSH
21816: LD_VAR 0 13
21820: PUSH
21821: LD_INT 1
21823: PLUS
21824: PPUSH
21825: LD_VAR 0 11
21829: PUSH
21830: LD_VAR 0 12
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PPUSH
21839: CALL_OW 2
21843: ST_TO_ADDR
// end ;
21844: GO 21752
21846: POP
21847: POP
21848: GO 21732
21850: POP
21851: POP
// if not list then
21852: LD_VAR 0 13
21856: NOT
21857: IFFALSE 21861
// exit ;
21859: GO 22105
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
21861: LD_ADDR_VAR 0 13
21865: PUSH
21866: LD_VAR 0 1
21870: PPUSH
21871: LD_VAR 0 13
21875: PPUSH
21876: LD_INT 1
21878: PPUSH
21879: LD_INT 1
21881: PPUSH
21882: CALL 30818 0 4
21886: ST_TO_ADDR
// ComStop ( flame ) ;
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL_OW 141
// for i in list do
21896: LD_ADDR_VAR 0 6
21900: PUSH
21901: LD_VAR 0 13
21905: PUSH
21906: FOR_IN
21907: IFFALSE 21938
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
21909: LD_VAR 0 1
21913: PPUSH
21914: LD_VAR 0 6
21918: PUSH
21919: LD_INT 1
21921: ARRAY
21922: PPUSH
21923: LD_VAR 0 6
21927: PUSH
21928: LD_INT 2
21930: ARRAY
21931: PPUSH
21932: CALL_OW 176
21936: GO 21906
21938: POP
21939: POP
// repeat wait ( 0 0$1 ) ;
21940: LD_INT 35
21942: PPUSH
21943: CALL_OW 67
// task := GetTaskList ( flame ) ;
21947: LD_ADDR_VAR 0 14
21951: PUSH
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL_OW 437
21961: ST_TO_ADDR
// if not task then
21962: LD_VAR 0 14
21966: NOT
21967: IFFALSE 21971
// exit ;
21969: GO 22105
// if task [ 1 ] [ 1 ] <> | then
21971: LD_VAR 0 14
21975: PUSH
21976: LD_INT 1
21978: ARRAY
21979: PUSH
21980: LD_INT 1
21982: ARRAY
21983: PUSH
21984: LD_STRING |
21986: NONEQUAL
21987: IFFALSE 21991
// exit ;
21989: GO 22105
// _x := task [ 1 ] [ 2 ] ;
21991: LD_ADDR_VAR 0 11
21995: PUSH
21996: LD_VAR 0 14
22000: PUSH
22001: LD_INT 1
22003: ARRAY
22004: PUSH
22005: LD_INT 2
22007: ARRAY
22008: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22009: LD_ADDR_VAR 0 12
22013: PUSH
22014: LD_VAR 0 14
22018: PUSH
22019: LD_INT 1
22021: ARRAY
22022: PUSH
22023: LD_INT 3
22025: ARRAY
22026: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22027: LD_VAR 0 11
22031: PPUSH
22032: LD_VAR 0 12
22036: PPUSH
22037: CALL_OW 351
22041: NOT
22042: PUSH
22043: LD_VAR 0 11
22047: PPUSH
22048: LD_VAR 0 12
22052: PPUSH
22053: CALL_OW 554
22057: NOT
22058: OR
22059: IFFALSE 22093
// begin task := Delete ( task , 1 ) ;
22061: LD_ADDR_VAR 0 14
22065: PUSH
22066: LD_VAR 0 14
22070: PPUSH
22071: LD_INT 1
22073: PPUSH
22074: CALL_OW 3
22078: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22079: LD_VAR 0 1
22083: PPUSH
22084: LD_VAR 0 14
22088: PPUSH
22089: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22093: LD_VAR 0 1
22097: PPUSH
22098: CALL_OW 314
22102: NOT
22103: IFFALSE 21940
// end ;
22105: LD_VAR 0 5
22109: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22110: LD_EXP 101
22114: NOT
22115: IFFALSE 22165
22117: GO 22119
22119: DISABLE
// begin initHack := true ;
22120: LD_ADDR_EXP 101
22124: PUSH
22125: LD_INT 1
22127: ST_TO_ADDR
// hackTanks := [ ] ;
22128: LD_ADDR_EXP 102
22132: PUSH
22133: EMPTY
22134: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22135: LD_ADDR_EXP 103
22139: PUSH
22140: EMPTY
22141: ST_TO_ADDR
// hackLimit := 3 ;
22142: LD_ADDR_EXP 104
22146: PUSH
22147: LD_INT 3
22149: ST_TO_ADDR
// hackDist := 12 ;
22150: LD_ADDR_EXP 105
22154: PUSH
22155: LD_INT 12
22157: ST_TO_ADDR
// hackCounter := [ ] ;
22158: LD_ADDR_EXP 106
22162: PUSH
22163: EMPTY
22164: ST_TO_ADDR
// end ;
22165: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22166: LD_EXP 101
22170: PUSH
22171: LD_INT 34
22173: PUSH
22174: LD_INT 99
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PPUSH
22181: CALL_OW 69
22185: AND
22186: IFFALSE 22439
22188: GO 22190
22190: DISABLE
22191: LD_INT 0
22193: PPUSH
22194: PPUSH
// begin enable ;
22195: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22196: LD_ADDR_VAR 0 1
22200: PUSH
22201: LD_INT 34
22203: PUSH
22204: LD_INT 99
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PPUSH
22211: CALL_OW 69
22215: PUSH
22216: FOR_IN
22217: IFFALSE 22437
// begin if not i in hackTanks then
22219: LD_VAR 0 1
22223: PUSH
22224: LD_EXP 102
22228: IN
22229: NOT
22230: IFFALSE 22313
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22232: LD_ADDR_EXP 102
22236: PUSH
22237: LD_EXP 102
22241: PPUSH
22242: LD_EXP 102
22246: PUSH
22247: LD_INT 1
22249: PLUS
22250: PPUSH
22251: LD_VAR 0 1
22255: PPUSH
22256: CALL_OW 1
22260: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22261: LD_ADDR_EXP 103
22265: PUSH
22266: LD_EXP 103
22270: PPUSH
22271: LD_EXP 103
22275: PUSH
22276: LD_INT 1
22278: PLUS
22279: PPUSH
22280: EMPTY
22281: PPUSH
22282: CALL_OW 1
22286: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22287: LD_ADDR_EXP 106
22291: PUSH
22292: LD_EXP 106
22296: PPUSH
22297: LD_EXP 106
22301: PUSH
22302: LD_INT 1
22304: PLUS
22305: PPUSH
22306: EMPTY
22307: PPUSH
22308: CALL_OW 1
22312: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 302
22322: NOT
22323: IFFALSE 22336
// begin HackUnlinkAll ( i ) ;
22325: LD_VAR 0 1
22329: PPUSH
22330: CALL 22442 0 1
// continue ;
22334: GO 22216
// end ; HackCheckCapturedStatus ( i ) ;
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL 22885 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22345: LD_ADDR_VAR 0 2
22349: PUSH
22350: LD_INT 81
22352: PUSH
22353: LD_VAR 0 1
22357: PPUSH
22358: CALL_OW 255
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 33
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 91
22379: PUSH
22380: LD_VAR 0 1
22384: PUSH
22385: LD_EXP 105
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 50
22397: PUSH
22398: EMPTY
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: PPUSH
22407: CALL_OW 69
22411: ST_TO_ADDR
// if not tmp then
22412: LD_VAR 0 2
22416: NOT
22417: IFFALSE 22421
// continue ;
22419: GO 22216
// HackLink ( i , tmp ) ;
22421: LD_VAR 0 1
22425: PPUSH
22426: LD_VAR 0 2
22430: PPUSH
22431: CALL 22578 0 2
// end ;
22435: GO 22216
22437: POP
22438: POP
// end ;
22439: PPOPN 2
22441: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22442: LD_INT 0
22444: PPUSH
22445: PPUSH
22446: PPUSH
// if not hack in hackTanks then
22447: LD_VAR 0 1
22451: PUSH
22452: LD_EXP 102
22456: IN
22457: NOT
22458: IFFALSE 22462
// exit ;
22460: GO 22573
// index := GetElementIndex ( hackTanks , hack ) ;
22462: LD_ADDR_VAR 0 4
22466: PUSH
22467: LD_EXP 102
22471: PPUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL 30115 0 2
22481: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22482: LD_EXP 103
22486: PUSH
22487: LD_VAR 0 4
22491: ARRAY
22492: IFFALSE 22573
// begin for i in hackTanksCaptured [ index ] do
22494: LD_ADDR_VAR 0 3
22498: PUSH
22499: LD_EXP 103
22503: PUSH
22504: LD_VAR 0 4
22508: ARRAY
22509: PUSH
22510: FOR_IN
22511: IFFALSE 22537
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22513: LD_VAR 0 3
22517: PUSH
22518: LD_INT 1
22520: ARRAY
22521: PPUSH
22522: LD_VAR 0 3
22526: PUSH
22527: LD_INT 2
22529: ARRAY
22530: PPUSH
22531: CALL_OW 235
22535: GO 22510
22537: POP
22538: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22539: LD_ADDR_EXP 103
22543: PUSH
22544: LD_EXP 103
22548: PPUSH
22549: LD_VAR 0 4
22553: PPUSH
22554: EMPTY
22555: PPUSH
22556: CALL_OW 1
22560: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22561: LD_VAR 0 1
22565: PPUSH
22566: LD_INT 0
22568: PPUSH
22569: CALL_OW 505
// end ; end ;
22573: LD_VAR 0 2
22577: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22578: LD_INT 0
22580: PPUSH
22581: PPUSH
22582: PPUSH
// if not hack in hackTanks or not vehicles then
22583: LD_VAR 0 1
22587: PUSH
22588: LD_EXP 102
22592: IN
22593: NOT
22594: PUSH
22595: LD_VAR 0 2
22599: NOT
22600: OR
22601: IFFALSE 22605
// exit ;
22603: GO 22880
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22605: LD_ADDR_VAR 0 2
22609: PUSH
22610: LD_VAR 0 1
22614: PPUSH
22615: LD_VAR 0 2
22619: PPUSH
22620: LD_INT 1
22622: PPUSH
22623: LD_INT 1
22625: PPUSH
22626: CALL 30765 0 4
22630: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22631: LD_ADDR_VAR 0 5
22635: PUSH
22636: LD_EXP 102
22640: PPUSH
22641: LD_VAR 0 1
22645: PPUSH
22646: CALL 30115 0 2
22650: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22651: LD_EXP 103
22655: PUSH
22656: LD_VAR 0 5
22660: ARRAY
22661: PUSH
22662: LD_EXP 104
22666: LESS
22667: IFFALSE 22856
// begin for i := 1 to vehicles do
22669: LD_ADDR_VAR 0 4
22673: PUSH
22674: DOUBLE
22675: LD_INT 1
22677: DEC
22678: ST_TO_ADDR
22679: LD_VAR 0 2
22683: PUSH
22684: FOR_TO
22685: IFFALSE 22854
// begin if hackTanksCaptured [ index ] = hackLimit then
22687: LD_EXP 103
22691: PUSH
22692: LD_VAR 0 5
22696: ARRAY
22697: PUSH
22698: LD_EXP 104
22702: EQUAL
22703: IFFALSE 22707
// break ;
22705: GO 22854
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22707: LD_ADDR_EXP 106
22711: PUSH
22712: LD_EXP 106
22716: PPUSH
22717: LD_VAR 0 5
22721: PPUSH
22722: LD_EXP 106
22726: PUSH
22727: LD_VAR 0 5
22731: ARRAY
22732: PUSH
22733: LD_INT 1
22735: PLUS
22736: PPUSH
22737: CALL_OW 1
22741: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22742: LD_ADDR_EXP 103
22746: PUSH
22747: LD_EXP 103
22751: PPUSH
22752: LD_VAR 0 5
22756: PUSH
22757: LD_EXP 103
22761: PUSH
22762: LD_VAR 0 5
22766: ARRAY
22767: PUSH
22768: LD_INT 1
22770: PLUS
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PPUSH
22776: LD_VAR 0 2
22780: PUSH
22781: LD_VAR 0 4
22785: ARRAY
22786: PUSH
22787: LD_VAR 0 2
22791: PUSH
22792: LD_VAR 0 4
22796: ARRAY
22797: PPUSH
22798: CALL_OW 255
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PPUSH
22807: CALL 30330 0 3
22811: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22812: LD_VAR 0 2
22816: PUSH
22817: LD_VAR 0 4
22821: ARRAY
22822: PPUSH
22823: LD_VAR 0 1
22827: PPUSH
22828: CALL_OW 255
22832: PPUSH
22833: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22837: LD_VAR 0 2
22841: PUSH
22842: LD_VAR 0 4
22846: ARRAY
22847: PPUSH
22848: CALL_OW 141
// end ;
22852: GO 22684
22854: POP
22855: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22856: LD_VAR 0 1
22860: PPUSH
22861: LD_EXP 103
22865: PUSH
22866: LD_VAR 0 5
22870: ARRAY
22871: PUSH
22872: LD_INT 0
22874: PLUS
22875: PPUSH
22876: CALL_OW 505
// end ;
22880: LD_VAR 0 3
22884: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22885: LD_INT 0
22887: PPUSH
22888: PPUSH
22889: PPUSH
22890: PPUSH
// if not hack in hackTanks then
22891: LD_VAR 0 1
22895: PUSH
22896: LD_EXP 102
22900: IN
22901: NOT
22902: IFFALSE 22906
// exit ;
22904: GO 23146
// index := GetElementIndex ( hackTanks , hack ) ;
22906: LD_ADDR_VAR 0 4
22910: PUSH
22911: LD_EXP 102
22915: PPUSH
22916: LD_VAR 0 1
22920: PPUSH
22921: CALL 30115 0 2
22925: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22926: LD_ADDR_VAR 0 3
22930: PUSH
22931: DOUBLE
22932: LD_EXP 103
22936: PUSH
22937: LD_VAR 0 4
22941: ARRAY
22942: INC
22943: ST_TO_ADDR
22944: LD_INT 1
22946: PUSH
22947: FOR_DOWNTO
22948: IFFALSE 23120
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22950: LD_ADDR_VAR 0 5
22954: PUSH
22955: LD_EXP 103
22959: PUSH
22960: LD_VAR 0 4
22964: ARRAY
22965: PUSH
22966: LD_VAR 0 3
22970: ARRAY
22971: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22972: LD_VAR 0 5
22976: PUSH
22977: LD_INT 1
22979: ARRAY
22980: PPUSH
22981: CALL_OW 302
22985: NOT
22986: PUSH
22987: LD_VAR 0 5
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: PPUSH
22996: CALL_OW 255
23000: PUSH
23001: LD_VAR 0 1
23005: PPUSH
23006: CALL_OW 255
23010: NONEQUAL
23011: OR
23012: IFFALSE 23118
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23014: LD_VAR 0 5
23018: PUSH
23019: LD_INT 1
23021: ARRAY
23022: PPUSH
23023: CALL_OW 305
23027: PUSH
23028: LD_VAR 0 5
23032: PUSH
23033: LD_INT 1
23035: ARRAY
23036: PPUSH
23037: CALL_OW 255
23041: PUSH
23042: LD_VAR 0 1
23046: PPUSH
23047: CALL_OW 255
23051: EQUAL
23052: AND
23053: IFFALSE 23077
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23055: LD_VAR 0 5
23059: PUSH
23060: LD_INT 1
23062: ARRAY
23063: PPUSH
23064: LD_VAR 0 5
23068: PUSH
23069: LD_INT 2
23071: ARRAY
23072: PPUSH
23073: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23077: LD_ADDR_EXP 103
23081: PUSH
23082: LD_EXP 103
23086: PPUSH
23087: LD_VAR 0 4
23091: PPUSH
23092: LD_EXP 103
23096: PUSH
23097: LD_VAR 0 4
23101: ARRAY
23102: PPUSH
23103: LD_VAR 0 3
23107: PPUSH
23108: CALL_OW 3
23112: PPUSH
23113: CALL_OW 1
23117: ST_TO_ADDR
// end ; end ;
23118: GO 22947
23120: POP
23121: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23122: LD_VAR 0 1
23126: PPUSH
23127: LD_EXP 103
23131: PUSH
23132: LD_VAR 0 4
23136: ARRAY
23137: PUSH
23138: LD_INT 0
23140: PLUS
23141: PPUSH
23142: CALL_OW 505
// end ;
23146: LD_VAR 0 2
23150: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23151: LD_INT 0
23153: PPUSH
23154: PPUSH
23155: PPUSH
23156: PPUSH
// if not hack in hackTanks then
23157: LD_VAR 0 1
23161: PUSH
23162: LD_EXP 102
23166: IN
23167: NOT
23168: IFFALSE 23172
// exit ;
23170: GO 23257
// index := GetElementIndex ( hackTanks , hack ) ;
23172: LD_ADDR_VAR 0 5
23176: PUSH
23177: LD_EXP 102
23181: PPUSH
23182: LD_VAR 0 1
23186: PPUSH
23187: CALL 30115 0 2
23191: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23192: LD_ADDR_VAR 0 4
23196: PUSH
23197: DOUBLE
23198: LD_INT 1
23200: DEC
23201: ST_TO_ADDR
23202: LD_EXP 103
23206: PUSH
23207: LD_VAR 0 5
23211: ARRAY
23212: PUSH
23213: FOR_TO
23214: IFFALSE 23255
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23216: LD_EXP 103
23220: PUSH
23221: LD_VAR 0 5
23225: ARRAY
23226: PUSH
23227: LD_VAR 0 4
23231: ARRAY
23232: PUSH
23233: LD_INT 1
23235: ARRAY
23236: PUSH
23237: LD_VAR 0 2
23241: EQUAL
23242: IFFALSE 23253
// KillUnit ( vehicle ) ;
23244: LD_VAR 0 2
23248: PPUSH
23249: CALL_OW 66
23253: GO 23213
23255: POP
23256: POP
// end ;
23257: LD_VAR 0 3
23261: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23262: LD_EXP 107
23266: NOT
23267: IFFALSE 23302
23269: GO 23271
23271: DISABLE
// begin initMiner := true ;
23272: LD_ADDR_EXP 107
23276: PUSH
23277: LD_INT 1
23279: ST_TO_ADDR
// minersList := [ ] ;
23280: LD_ADDR_EXP 108
23284: PUSH
23285: EMPTY
23286: ST_TO_ADDR
// minerMinesList := [ ] ;
23287: LD_ADDR_EXP 109
23291: PUSH
23292: EMPTY
23293: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23294: LD_ADDR_EXP 110
23298: PUSH
23299: LD_INT 5
23301: ST_TO_ADDR
// end ;
23302: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23303: LD_EXP 107
23307: PUSH
23308: LD_INT 34
23310: PUSH
23311: LD_INT 81
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PPUSH
23318: CALL_OW 69
23322: AND
23323: IFFALSE 23784
23325: GO 23327
23327: DISABLE
23328: LD_INT 0
23330: PPUSH
23331: PPUSH
23332: PPUSH
23333: PPUSH
// begin enable ;
23334: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23335: LD_ADDR_VAR 0 1
23339: PUSH
23340: LD_INT 34
23342: PUSH
23343: LD_INT 81
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PPUSH
23350: CALL_OW 69
23354: PUSH
23355: FOR_IN
23356: IFFALSE 23428
// begin if not i in minersList then
23358: LD_VAR 0 1
23362: PUSH
23363: LD_EXP 108
23367: IN
23368: NOT
23369: IFFALSE 23426
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23371: LD_ADDR_EXP 108
23375: PUSH
23376: LD_EXP 108
23380: PPUSH
23381: LD_EXP 108
23385: PUSH
23386: LD_INT 1
23388: PLUS
23389: PPUSH
23390: LD_VAR 0 1
23394: PPUSH
23395: CALL_OW 1
23399: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23400: LD_ADDR_EXP 109
23404: PUSH
23405: LD_EXP 109
23409: PPUSH
23410: LD_EXP 109
23414: PUSH
23415: LD_INT 1
23417: PLUS
23418: PPUSH
23419: EMPTY
23420: PPUSH
23421: CALL_OW 1
23425: ST_TO_ADDR
// end end ;
23426: GO 23355
23428: POP
23429: POP
// for i := minerMinesList downto 1 do
23430: LD_ADDR_VAR 0 1
23434: PUSH
23435: DOUBLE
23436: LD_EXP 109
23440: INC
23441: ST_TO_ADDR
23442: LD_INT 1
23444: PUSH
23445: FOR_DOWNTO
23446: IFFALSE 23782
// begin if IsLive ( minersList [ i ] ) then
23448: LD_EXP 108
23452: PUSH
23453: LD_VAR 0 1
23457: ARRAY
23458: PPUSH
23459: CALL_OW 300
23463: IFFALSE 23491
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23465: LD_EXP 108
23469: PUSH
23470: LD_VAR 0 1
23474: ARRAY
23475: PPUSH
23476: LD_EXP 109
23480: PUSH
23481: LD_VAR 0 1
23485: ARRAY
23486: PPUSH
23487: CALL_OW 505
// if not minerMinesList [ i ] then
23491: LD_EXP 109
23495: PUSH
23496: LD_VAR 0 1
23500: ARRAY
23501: NOT
23502: IFFALSE 23506
// continue ;
23504: GO 23445
// for j := minerMinesList [ i ] downto 1 do
23506: LD_ADDR_VAR 0 2
23510: PUSH
23511: DOUBLE
23512: LD_EXP 109
23516: PUSH
23517: LD_VAR 0 1
23521: ARRAY
23522: INC
23523: ST_TO_ADDR
23524: LD_INT 1
23526: PUSH
23527: FOR_DOWNTO
23528: IFFALSE 23778
// begin side := GetSide ( minersList [ i ] ) ;
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: LD_EXP 108
23539: PUSH
23540: LD_VAR 0 1
23544: ARRAY
23545: PPUSH
23546: CALL_OW 255
23550: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23551: LD_ADDR_VAR 0 4
23555: PUSH
23556: LD_EXP 109
23560: PUSH
23561: LD_VAR 0 1
23565: ARRAY
23566: PUSH
23567: LD_VAR 0 2
23571: ARRAY
23572: PUSH
23573: LD_INT 1
23575: ARRAY
23576: PPUSH
23577: LD_EXP 109
23581: PUSH
23582: LD_VAR 0 1
23586: ARRAY
23587: PUSH
23588: LD_VAR 0 2
23592: ARRAY
23593: PUSH
23594: LD_INT 2
23596: ARRAY
23597: PPUSH
23598: CALL_OW 428
23602: ST_TO_ADDR
// if not tmp then
23603: LD_VAR 0 4
23607: NOT
23608: IFFALSE 23612
// continue ;
23610: GO 23527
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23612: LD_VAR 0 4
23616: PUSH
23617: LD_INT 81
23619: PUSH
23620: LD_VAR 0 3
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PPUSH
23629: CALL_OW 69
23633: IN
23634: PUSH
23635: LD_EXP 109
23639: PUSH
23640: LD_VAR 0 1
23644: ARRAY
23645: PUSH
23646: LD_VAR 0 2
23650: ARRAY
23651: PUSH
23652: LD_INT 1
23654: ARRAY
23655: PPUSH
23656: LD_EXP 109
23660: PUSH
23661: LD_VAR 0 1
23665: ARRAY
23666: PUSH
23667: LD_VAR 0 2
23671: ARRAY
23672: PUSH
23673: LD_INT 2
23675: ARRAY
23676: PPUSH
23677: CALL_OW 458
23681: AND
23682: IFFALSE 23776
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23684: LD_EXP 109
23688: PUSH
23689: LD_VAR 0 1
23693: ARRAY
23694: PUSH
23695: LD_VAR 0 2
23699: ARRAY
23700: PUSH
23701: LD_INT 1
23703: ARRAY
23704: PPUSH
23705: LD_EXP 109
23709: PUSH
23710: LD_VAR 0 1
23714: ARRAY
23715: PUSH
23716: LD_VAR 0 2
23720: ARRAY
23721: PUSH
23722: LD_INT 2
23724: ARRAY
23725: PPUSH
23726: LD_VAR 0 3
23730: PPUSH
23731: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23735: LD_ADDR_EXP 109
23739: PUSH
23740: LD_EXP 109
23744: PPUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: LD_EXP 109
23754: PUSH
23755: LD_VAR 0 1
23759: ARRAY
23760: PPUSH
23761: LD_VAR 0 2
23765: PPUSH
23766: CALL_OW 3
23770: PPUSH
23771: CALL_OW 1
23775: ST_TO_ADDR
// end ; end ;
23776: GO 23527
23778: POP
23779: POP
// end ;
23780: GO 23445
23782: POP
23783: POP
// end ;
23784: PPOPN 4
23786: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23787: LD_INT 0
23789: PPUSH
23790: PPUSH
// result := false ;
23791: LD_ADDR_VAR 0 4
23795: PUSH
23796: LD_INT 0
23798: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23799: LD_VAR 0 1
23803: PPUSH
23804: CALL_OW 264
23808: PUSH
23809: LD_INT 81
23811: EQUAL
23812: NOT
23813: IFFALSE 23817
// exit ;
23815: GO 24057
// index := GetElementIndex ( minersList , unit ) ;
23817: LD_ADDR_VAR 0 5
23821: PUSH
23822: LD_EXP 108
23826: PPUSH
23827: LD_VAR 0 1
23831: PPUSH
23832: CALL 30115 0 2
23836: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23837: LD_EXP 109
23841: PUSH
23842: LD_VAR 0 5
23846: ARRAY
23847: PUSH
23848: LD_EXP 110
23852: GREATEREQUAL
23853: IFFALSE 23857
// exit ;
23855: GO 24057
// ComMoveXY ( unit , x , y ) ;
23857: LD_VAR 0 1
23861: PPUSH
23862: LD_VAR 0 2
23866: PPUSH
23867: LD_VAR 0 3
23871: PPUSH
23872: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23876: LD_INT 35
23878: PPUSH
23879: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23883: LD_VAR 0 1
23887: PPUSH
23888: LD_VAR 0 2
23892: PPUSH
23893: LD_VAR 0 3
23897: PPUSH
23898: CALL 61876 0 3
23902: NOT
23903: PUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 314
23913: AND
23914: IFFALSE 23918
// exit ;
23916: GO 24057
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23918: LD_VAR 0 2
23922: PPUSH
23923: LD_VAR 0 3
23927: PPUSH
23928: CALL_OW 428
23932: PUSH
23933: LD_VAR 0 1
23937: EQUAL
23938: PUSH
23939: LD_VAR 0 1
23943: PPUSH
23944: CALL_OW 314
23948: NOT
23949: AND
23950: IFFALSE 23876
// PlaySoundXY ( x , y , PlantMine ) ;
23952: LD_VAR 0 2
23956: PPUSH
23957: LD_VAR 0 3
23961: PPUSH
23962: LD_STRING PlantMine
23964: PPUSH
23965: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23969: LD_VAR 0 2
23973: PPUSH
23974: LD_VAR 0 3
23978: PPUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL_OW 255
23988: PPUSH
23989: LD_INT 0
23991: PPUSH
23992: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23996: LD_ADDR_EXP 109
24000: PUSH
24001: LD_EXP 109
24005: PPUSH
24006: LD_VAR 0 5
24010: PUSH
24011: LD_EXP 109
24015: PUSH
24016: LD_VAR 0 5
24020: ARRAY
24021: PUSH
24022: LD_INT 1
24024: PLUS
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PPUSH
24030: LD_VAR 0 2
24034: PUSH
24035: LD_VAR 0 3
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PPUSH
24044: CALL 30330 0 3
24048: ST_TO_ADDR
// result := true ;
24049: LD_ADDR_VAR 0 4
24053: PUSH
24054: LD_INT 1
24056: ST_TO_ADDR
// end ;
24057: LD_VAR 0 4
24061: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24062: LD_INT 0
24064: PPUSH
24065: PPUSH
24066: PPUSH
// if not unit in minersList then
24067: LD_VAR 0 1
24071: PUSH
24072: LD_EXP 108
24076: IN
24077: NOT
24078: IFFALSE 24082
// exit ;
24080: GO 24474
// index := GetElementIndex ( minersList , unit ) ;
24082: LD_ADDR_VAR 0 6
24086: PUSH
24087: LD_EXP 108
24091: PPUSH
24092: LD_VAR 0 1
24096: PPUSH
24097: CALL 30115 0 2
24101: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24102: LD_ADDR_VAR 0 5
24106: PUSH
24107: DOUBLE
24108: LD_EXP 109
24112: PUSH
24113: LD_VAR 0 6
24117: ARRAY
24118: INC
24119: ST_TO_ADDR
24120: LD_INT 1
24122: PUSH
24123: FOR_DOWNTO
24124: IFFALSE 24285
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24126: LD_EXP 109
24130: PUSH
24131: LD_VAR 0 6
24135: ARRAY
24136: PUSH
24137: LD_VAR 0 5
24141: ARRAY
24142: PUSH
24143: LD_INT 1
24145: ARRAY
24146: PUSH
24147: LD_VAR 0 2
24151: EQUAL
24152: PUSH
24153: LD_EXP 109
24157: PUSH
24158: LD_VAR 0 6
24162: ARRAY
24163: PUSH
24164: LD_VAR 0 5
24168: ARRAY
24169: PUSH
24170: LD_INT 2
24172: ARRAY
24173: PUSH
24174: LD_VAR 0 3
24178: EQUAL
24179: AND
24180: IFFALSE 24283
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24182: LD_EXP 109
24186: PUSH
24187: LD_VAR 0 6
24191: ARRAY
24192: PUSH
24193: LD_VAR 0 5
24197: ARRAY
24198: PUSH
24199: LD_INT 1
24201: ARRAY
24202: PPUSH
24203: LD_EXP 109
24207: PUSH
24208: LD_VAR 0 6
24212: ARRAY
24213: PUSH
24214: LD_VAR 0 5
24218: ARRAY
24219: PUSH
24220: LD_INT 2
24222: ARRAY
24223: PPUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 255
24233: PPUSH
24234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24238: LD_ADDR_EXP 109
24242: PUSH
24243: LD_EXP 109
24247: PPUSH
24248: LD_VAR 0 6
24252: PPUSH
24253: LD_EXP 109
24257: PUSH
24258: LD_VAR 0 6
24262: ARRAY
24263: PPUSH
24264: LD_VAR 0 5
24268: PPUSH
24269: CALL_OW 3
24273: PPUSH
24274: CALL_OW 1
24278: ST_TO_ADDR
// exit ;
24279: POP
24280: POP
24281: GO 24474
// end ; end ;
24283: GO 24123
24285: POP
24286: POP
// for i := minerMinesList [ index ] downto 1 do
24287: LD_ADDR_VAR 0 5
24291: PUSH
24292: DOUBLE
24293: LD_EXP 109
24297: PUSH
24298: LD_VAR 0 6
24302: ARRAY
24303: INC
24304: ST_TO_ADDR
24305: LD_INT 1
24307: PUSH
24308: FOR_DOWNTO
24309: IFFALSE 24472
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24311: LD_EXP 109
24315: PUSH
24316: LD_VAR 0 6
24320: ARRAY
24321: PUSH
24322: LD_VAR 0 5
24326: ARRAY
24327: PUSH
24328: LD_INT 1
24330: ARRAY
24331: PPUSH
24332: LD_EXP 109
24336: PUSH
24337: LD_VAR 0 6
24341: ARRAY
24342: PUSH
24343: LD_VAR 0 5
24347: ARRAY
24348: PUSH
24349: LD_INT 2
24351: ARRAY
24352: PPUSH
24353: LD_VAR 0 2
24357: PPUSH
24358: LD_VAR 0 3
24362: PPUSH
24363: CALL_OW 298
24367: PUSH
24368: LD_INT 6
24370: LESS
24371: IFFALSE 24470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24373: LD_EXP 109
24377: PUSH
24378: LD_VAR 0 6
24382: ARRAY
24383: PUSH
24384: LD_VAR 0 5
24388: ARRAY
24389: PUSH
24390: LD_INT 1
24392: ARRAY
24393: PPUSH
24394: LD_EXP 109
24398: PUSH
24399: LD_VAR 0 6
24403: ARRAY
24404: PUSH
24405: LD_VAR 0 5
24409: ARRAY
24410: PUSH
24411: LD_INT 2
24413: ARRAY
24414: PPUSH
24415: LD_VAR 0 1
24419: PPUSH
24420: CALL_OW 255
24424: PPUSH
24425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24429: LD_ADDR_EXP 109
24433: PUSH
24434: LD_EXP 109
24438: PPUSH
24439: LD_VAR 0 6
24443: PPUSH
24444: LD_EXP 109
24448: PUSH
24449: LD_VAR 0 6
24453: ARRAY
24454: PPUSH
24455: LD_VAR 0 5
24459: PPUSH
24460: CALL_OW 3
24464: PPUSH
24465: CALL_OW 1
24469: ST_TO_ADDR
// end ; end ;
24470: GO 24308
24472: POP
24473: POP
// end ;
24474: LD_VAR 0 4
24478: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24479: LD_INT 0
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
24487: PPUSH
24488: PPUSH
24489: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 264
24499: PUSH
24500: LD_INT 81
24502: EQUAL
24503: NOT
24504: PUSH
24505: LD_VAR 0 1
24509: PUSH
24510: LD_EXP 108
24514: IN
24515: NOT
24516: OR
24517: IFFALSE 24521
// exit ;
24519: GO 24843
// index := GetElementIndex ( minersList , unit ) ;
24521: LD_ADDR_VAR 0 6
24525: PUSH
24526: LD_EXP 108
24530: PPUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL 30115 0 2
24540: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24541: LD_ADDR_VAR 0 8
24545: PUSH
24546: LD_EXP 110
24550: PUSH
24551: LD_EXP 109
24555: PUSH
24556: LD_VAR 0 6
24560: ARRAY
24561: MINUS
24562: ST_TO_ADDR
// if not minesFreeAmount then
24563: LD_VAR 0 8
24567: NOT
24568: IFFALSE 24572
// exit ;
24570: GO 24843
// tmp := [ ] ;
24572: LD_ADDR_VAR 0 7
24576: PUSH
24577: EMPTY
24578: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24579: LD_ADDR_VAR 0 5
24583: PUSH
24584: DOUBLE
24585: LD_INT 1
24587: DEC
24588: ST_TO_ADDR
24589: LD_VAR 0 8
24593: PUSH
24594: FOR_TO
24595: IFFALSE 24790
// begin _d := rand ( 0 , 5 ) ;
24597: LD_ADDR_VAR 0 11
24601: PUSH
24602: LD_INT 0
24604: PPUSH
24605: LD_INT 5
24607: PPUSH
24608: CALL_OW 12
24612: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24613: LD_ADDR_VAR 0 12
24617: PUSH
24618: LD_INT 2
24620: PPUSH
24621: LD_INT 6
24623: PPUSH
24624: CALL_OW 12
24628: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24629: LD_ADDR_VAR 0 9
24633: PUSH
24634: LD_VAR 0 2
24638: PPUSH
24639: LD_VAR 0 11
24643: PPUSH
24644: LD_VAR 0 12
24648: PPUSH
24649: CALL_OW 272
24653: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24654: LD_ADDR_VAR 0 10
24658: PUSH
24659: LD_VAR 0 3
24663: PPUSH
24664: LD_VAR 0 11
24668: PPUSH
24669: LD_VAR 0 12
24673: PPUSH
24674: CALL_OW 273
24678: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24679: LD_VAR 0 9
24683: PPUSH
24684: LD_VAR 0 10
24688: PPUSH
24689: CALL_OW 488
24693: PUSH
24694: LD_VAR 0 9
24698: PUSH
24699: LD_VAR 0 10
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_VAR 0 7
24712: IN
24713: NOT
24714: AND
24715: PUSH
24716: LD_VAR 0 9
24720: PPUSH
24721: LD_VAR 0 10
24725: PPUSH
24726: CALL_OW 458
24730: NOT
24731: AND
24732: IFFALSE 24774
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24734: LD_ADDR_VAR 0 7
24738: PUSH
24739: LD_VAR 0 7
24743: PPUSH
24744: LD_VAR 0 7
24748: PUSH
24749: LD_INT 1
24751: PLUS
24752: PPUSH
24753: LD_VAR 0 9
24757: PUSH
24758: LD_VAR 0 10
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PPUSH
24767: CALL_OW 1
24771: ST_TO_ADDR
24772: GO 24788
// i := i - 1 ;
24774: LD_ADDR_VAR 0 5
24778: PUSH
24779: LD_VAR 0 5
24783: PUSH
24784: LD_INT 1
24786: MINUS
24787: ST_TO_ADDR
// end ;
24788: GO 24594
24790: POP
24791: POP
// for i in tmp do
24792: LD_ADDR_VAR 0 5
24796: PUSH
24797: LD_VAR 0 7
24801: PUSH
24802: FOR_IN
24803: IFFALSE 24841
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24805: LD_VAR 0 1
24809: PPUSH
24810: LD_VAR 0 5
24814: PUSH
24815: LD_INT 1
24817: ARRAY
24818: PPUSH
24819: LD_VAR 0 5
24823: PUSH
24824: LD_INT 2
24826: ARRAY
24827: PPUSH
24828: CALL 23787 0 3
24832: NOT
24833: IFFALSE 24839
// exit ;
24835: POP
24836: POP
24837: GO 24843
24839: GO 24802
24841: POP
24842: POP
// end ;
24843: LD_VAR 0 4
24847: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
24852: PPUSH
24853: PPUSH
24854: PPUSH
24855: PPUSH
24856: PPUSH
24857: PPUSH
24858: PPUSH
// if GetClass ( unit ) <> class_sniper then
24859: LD_VAR 0 1
24863: PPUSH
24864: CALL_OW 257
24868: PUSH
24869: LD_INT 5
24871: NONEQUAL
24872: IFFALSE 24876
// exit ;
24874: GO 25342
// dist := 8 ;
24876: LD_ADDR_VAR 0 5
24880: PUSH
24881: LD_INT 8
24883: ST_TO_ADDR
// viewRange := 12 ;
24884: LD_ADDR_VAR 0 8
24888: PUSH
24889: LD_INT 12
24891: ST_TO_ADDR
// side := GetSide ( unit ) ;
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: LD_VAR 0 1
24901: PPUSH
24902: CALL_OW 255
24906: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24907: LD_INT 61
24909: PPUSH
24910: LD_VAR 0 6
24914: PPUSH
24915: CALL_OW 321
24919: PUSH
24920: LD_INT 2
24922: EQUAL
24923: IFFALSE 24933
// viewRange := 16 ;
24925: LD_ADDR_VAR 0 8
24929: PUSH
24930: LD_INT 16
24932: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24933: LD_VAR 0 1
24937: PPUSH
24938: LD_VAR 0 2
24942: PPUSH
24943: LD_VAR 0 3
24947: PPUSH
24948: CALL_OW 297
24952: PUSH
24953: LD_VAR 0 5
24957: GREATER
24958: IFFALSE 25037
// begin ComMoveXY ( unit , x , y ) ;
24960: LD_VAR 0 1
24964: PPUSH
24965: LD_VAR 0 2
24969: PPUSH
24970: LD_VAR 0 3
24974: PPUSH
24975: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24979: LD_INT 35
24981: PPUSH
24982: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24986: LD_VAR 0 1
24990: PPUSH
24991: LD_VAR 0 2
24995: PPUSH
24996: LD_VAR 0 3
25000: PPUSH
25001: CALL 61876 0 3
25005: NOT
25006: IFFALSE 25010
// exit ;
25008: GO 25342
// until GetDistUnitXY ( unit , x , y ) < dist ;
25010: LD_VAR 0 1
25014: PPUSH
25015: LD_VAR 0 2
25019: PPUSH
25020: LD_VAR 0 3
25024: PPUSH
25025: CALL_OW 297
25029: PUSH
25030: LD_VAR 0 5
25034: LESS
25035: IFFALSE 24979
// end ; ComTurnXY ( unit , x , y ) ;
25037: LD_VAR 0 1
25041: PPUSH
25042: LD_VAR 0 2
25046: PPUSH
25047: LD_VAR 0 3
25051: PPUSH
25052: CALL_OW 118
// repeat if Multiplayer then
25056: LD_OWVAR 4
25060: IFFALSE 25071
// wait ( 35 ) else
25062: LD_INT 35
25064: PPUSH
25065: CALL_OW 67
25069: GO 25078
// wait ( 5 ) ;
25071: LD_INT 5
25073: PPUSH
25074: CALL_OW 67
// _d := GetDir ( unit ) ;
25078: LD_ADDR_VAR 0 11
25082: PUSH
25083: LD_VAR 0 1
25087: PPUSH
25088: CALL_OW 254
25092: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
25093: LD_ADDR_VAR 0 7
25097: PUSH
25098: LD_VAR 0 1
25102: PPUSH
25103: CALL_OW 250
25107: PPUSH
25108: LD_VAR 0 1
25112: PPUSH
25113: CALL_OW 251
25117: PPUSH
25118: LD_VAR 0 2
25122: PPUSH
25123: LD_VAR 0 3
25127: PPUSH
25128: CALL 64484 0 4
25132: ST_TO_ADDR
// until dir = _d ;
25133: LD_VAR 0 7
25137: PUSH
25138: LD_VAR 0 11
25142: EQUAL
25143: IFFALSE 25056
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
25145: LD_ADDR_VAR 0 9
25149: PUSH
25150: LD_VAR 0 1
25154: PPUSH
25155: CALL_OW 250
25159: PPUSH
25160: LD_VAR 0 7
25164: PPUSH
25165: LD_VAR 0 5
25169: PPUSH
25170: CALL_OW 272
25174: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
25175: LD_ADDR_VAR 0 10
25179: PUSH
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL_OW 251
25189: PPUSH
25190: LD_VAR 0 7
25194: PPUSH
25195: LD_VAR 0 5
25199: PPUSH
25200: CALL_OW 273
25204: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25205: LD_VAR 0 9
25209: PPUSH
25210: LD_VAR 0 10
25214: PPUSH
25215: CALL_OW 488
25219: NOT
25220: IFFALSE 25224
// exit ;
25222: GO 25342
// ComAnimCustom ( unit , 1 ) ;
25224: LD_VAR 0 1
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL_OW 592
// p := 0 ;
25236: LD_ADDR_VAR 0 12
25240: PUSH
25241: LD_INT 0
25243: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25244: LD_VAR 0 9
25248: PPUSH
25249: LD_VAR 0 10
25253: PPUSH
25254: LD_VAR 0 6
25258: PPUSH
25259: LD_VAR 0 8
25263: PPUSH
25264: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
25268: LD_INT 35
25270: PPUSH
25271: CALL_OW 67
// p := Inc ( p ) ;
25275: LD_ADDR_VAR 0 12
25279: PUSH
25280: LD_VAR 0 12
25284: PPUSH
25285: CALL 64440 0 1
25289: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
25290: LD_VAR 0 12
25294: PUSH
25295: LD_INT 3
25297: EQUAL
25298: PUSH
25299: LD_VAR 0 1
25303: PPUSH
25304: CALL_OW 302
25308: NOT
25309: OR
25310: PUSH
25311: LD_VAR 0 1
25315: PPUSH
25316: CALL_OW 301
25320: OR
25321: IFFALSE 25268
// RemoveSeeing ( _x , _y , side ) ;
25323: LD_VAR 0 9
25327: PPUSH
25328: LD_VAR 0 10
25332: PPUSH
25333: LD_VAR 0 6
25337: PPUSH
25338: CALL_OW 331
// end ; end_of_file
25342: LD_VAR 0 4
25346: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25347: LD_INT 0
25349: PPUSH
25350: PPUSH
// if exist_mode then
25351: LD_VAR 0 2
25355: IFFALSE 25401
// begin unit := CreateCharacter ( prefix & ident ) ;
25357: LD_ADDR_VAR 0 5
25361: PUSH
25362: LD_VAR 0 3
25366: PUSH
25367: LD_VAR 0 1
25371: STR
25372: PPUSH
25373: CALL_OW 34
25377: ST_TO_ADDR
// if unit then
25378: LD_VAR 0 5
25382: IFFALSE 25399
// DeleteCharacters ( prefix & ident ) ;
25384: LD_VAR 0 3
25388: PUSH
25389: LD_VAR 0 1
25393: STR
25394: PPUSH
25395: CALL_OW 40
// end else
25399: GO 25416
// unit := NewCharacter ( ident ) ;
25401: LD_ADDR_VAR 0 5
25405: PUSH
25406: LD_VAR 0 1
25410: PPUSH
25411: CALL_OW 25
25415: ST_TO_ADDR
// result := unit ;
25416: LD_ADDR_VAR 0 4
25420: PUSH
25421: LD_VAR 0 5
25425: ST_TO_ADDR
// end ;
25426: LD_VAR 0 4
25430: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25431: LD_INT 0
25433: PPUSH
25434: PPUSH
// if not side or not nation then
25435: LD_VAR 0 1
25439: NOT
25440: PUSH
25441: LD_VAR 0 2
25445: NOT
25446: OR
25447: IFFALSE 25451
// exit ;
25449: GO 26219
// case nation of nation_american :
25451: LD_VAR 0 2
25455: PUSH
25456: LD_INT 1
25458: DOUBLE
25459: EQUAL
25460: IFTRUE 25464
25462: GO 25678
25464: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25465: LD_ADDR_VAR 0 4
25469: PUSH
25470: LD_INT 35
25472: PUSH
25473: LD_INT 45
25475: PUSH
25476: LD_INT 46
25478: PUSH
25479: LD_INT 47
25481: PUSH
25482: LD_INT 82
25484: PUSH
25485: LD_INT 83
25487: PUSH
25488: LD_INT 84
25490: PUSH
25491: LD_INT 85
25493: PUSH
25494: LD_INT 86
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 6
25505: PUSH
25506: LD_INT 15
25508: PUSH
25509: LD_INT 16
25511: PUSH
25512: LD_INT 7
25514: PUSH
25515: LD_INT 12
25517: PUSH
25518: LD_INT 13
25520: PUSH
25521: LD_INT 10
25523: PUSH
25524: LD_INT 14
25526: PUSH
25527: LD_INT 20
25529: PUSH
25530: LD_INT 21
25532: PUSH
25533: LD_INT 22
25535: PUSH
25536: LD_INT 25
25538: PUSH
25539: LD_INT 32
25541: PUSH
25542: LD_INT 27
25544: PUSH
25545: LD_INT 36
25547: PUSH
25548: LD_INT 69
25550: PUSH
25551: LD_INT 39
25553: PUSH
25554: LD_INT 34
25556: PUSH
25557: LD_INT 40
25559: PUSH
25560: LD_INT 48
25562: PUSH
25563: LD_INT 49
25565: PUSH
25566: LD_INT 50
25568: PUSH
25569: LD_INT 51
25571: PUSH
25572: LD_INT 52
25574: PUSH
25575: LD_INT 53
25577: PUSH
25578: LD_INT 54
25580: PUSH
25581: LD_INT 55
25583: PUSH
25584: LD_INT 56
25586: PUSH
25587: LD_INT 57
25589: PUSH
25590: LD_INT 58
25592: PUSH
25593: LD_INT 59
25595: PUSH
25596: LD_INT 60
25598: PUSH
25599: LD_INT 61
25601: PUSH
25602: LD_INT 62
25604: PUSH
25605: LD_INT 80
25607: PUSH
25608: LD_INT 82
25610: PUSH
25611: LD_INT 83
25613: PUSH
25614: LD_INT 84
25616: PUSH
25617: LD_INT 85
25619: PUSH
25620: LD_INT 86
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: ST_TO_ADDR
25676: GO 26143
25678: LD_INT 2
25680: DOUBLE
25681: EQUAL
25682: IFTRUE 25686
25684: GO 25912
25686: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25687: LD_ADDR_VAR 0 4
25691: PUSH
25692: LD_INT 35
25694: PUSH
25695: LD_INT 45
25697: PUSH
25698: LD_INT 46
25700: PUSH
25701: LD_INT 47
25703: PUSH
25704: LD_INT 82
25706: PUSH
25707: LD_INT 83
25709: PUSH
25710: LD_INT 84
25712: PUSH
25713: LD_INT 85
25715: PUSH
25716: LD_INT 87
25718: PUSH
25719: LD_INT 70
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: LD_INT 11
25727: PUSH
25728: LD_INT 3
25730: PUSH
25731: LD_INT 4
25733: PUSH
25734: LD_INT 5
25736: PUSH
25737: LD_INT 6
25739: PUSH
25740: LD_INT 15
25742: PUSH
25743: LD_INT 18
25745: PUSH
25746: LD_INT 7
25748: PUSH
25749: LD_INT 17
25751: PUSH
25752: LD_INT 8
25754: PUSH
25755: LD_INT 20
25757: PUSH
25758: LD_INT 21
25760: PUSH
25761: LD_INT 22
25763: PUSH
25764: LD_INT 72
25766: PUSH
25767: LD_INT 26
25769: PUSH
25770: LD_INT 69
25772: PUSH
25773: LD_INT 39
25775: PUSH
25776: LD_INT 40
25778: PUSH
25779: LD_INT 41
25781: PUSH
25782: LD_INT 42
25784: PUSH
25785: LD_INT 43
25787: PUSH
25788: LD_INT 48
25790: PUSH
25791: LD_INT 49
25793: PUSH
25794: LD_INT 50
25796: PUSH
25797: LD_INT 51
25799: PUSH
25800: LD_INT 52
25802: PUSH
25803: LD_INT 53
25805: PUSH
25806: LD_INT 54
25808: PUSH
25809: LD_INT 55
25811: PUSH
25812: LD_INT 56
25814: PUSH
25815: LD_INT 60
25817: PUSH
25818: LD_INT 61
25820: PUSH
25821: LD_INT 62
25823: PUSH
25824: LD_INT 66
25826: PUSH
25827: LD_INT 67
25829: PUSH
25830: LD_INT 68
25832: PUSH
25833: LD_INT 81
25835: PUSH
25836: LD_INT 82
25838: PUSH
25839: LD_INT 83
25841: PUSH
25842: LD_INT 84
25844: PUSH
25845: LD_INT 85
25847: PUSH
25848: LD_INT 87
25850: PUSH
25851: LD_INT 88
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: ST_TO_ADDR
25910: GO 26143
25912: LD_INT 3
25914: DOUBLE
25915: EQUAL
25916: IFTRUE 25920
25918: GO 26142
25920: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25921: LD_ADDR_VAR 0 4
25925: PUSH
25926: LD_INT 46
25928: PUSH
25929: LD_INT 47
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 2
25937: PUSH
25938: LD_INT 82
25940: PUSH
25941: LD_INT 83
25943: PUSH
25944: LD_INT 84
25946: PUSH
25947: LD_INT 85
25949: PUSH
25950: LD_INT 86
25952: PUSH
25953: LD_INT 11
25955: PUSH
25956: LD_INT 9
25958: PUSH
25959: LD_INT 20
25961: PUSH
25962: LD_INT 19
25964: PUSH
25965: LD_INT 21
25967: PUSH
25968: LD_INT 24
25970: PUSH
25971: LD_INT 22
25973: PUSH
25974: LD_INT 25
25976: PUSH
25977: LD_INT 28
25979: PUSH
25980: LD_INT 29
25982: PUSH
25983: LD_INT 30
25985: PUSH
25986: LD_INT 31
25988: PUSH
25989: LD_INT 37
25991: PUSH
25992: LD_INT 38
25994: PUSH
25995: LD_INT 32
25997: PUSH
25998: LD_INT 27
26000: PUSH
26001: LD_INT 33
26003: PUSH
26004: LD_INT 69
26006: PUSH
26007: LD_INT 39
26009: PUSH
26010: LD_INT 34
26012: PUSH
26013: LD_INT 40
26015: PUSH
26016: LD_INT 71
26018: PUSH
26019: LD_INT 23
26021: PUSH
26022: LD_INT 44
26024: PUSH
26025: LD_INT 48
26027: PUSH
26028: LD_INT 49
26030: PUSH
26031: LD_INT 50
26033: PUSH
26034: LD_INT 51
26036: PUSH
26037: LD_INT 52
26039: PUSH
26040: LD_INT 53
26042: PUSH
26043: LD_INT 54
26045: PUSH
26046: LD_INT 55
26048: PUSH
26049: LD_INT 56
26051: PUSH
26052: LD_INT 57
26054: PUSH
26055: LD_INT 58
26057: PUSH
26058: LD_INT 59
26060: PUSH
26061: LD_INT 63
26063: PUSH
26064: LD_INT 64
26066: PUSH
26067: LD_INT 65
26069: PUSH
26070: LD_INT 82
26072: PUSH
26073: LD_INT 83
26075: PUSH
26076: LD_INT 84
26078: PUSH
26079: LD_INT 85
26081: PUSH
26082: LD_INT 86
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: ST_TO_ADDR
26140: GO 26143
26142: POP
// if state > - 1 and state < 3 then
26143: LD_VAR 0 3
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: GREATER
26152: PUSH
26153: LD_VAR 0 3
26157: PUSH
26158: LD_INT 3
26160: LESS
26161: AND
26162: IFFALSE 26219
// for i in result do
26164: LD_ADDR_VAR 0 5
26168: PUSH
26169: LD_VAR 0 4
26173: PUSH
26174: FOR_IN
26175: IFFALSE 26217
// if GetTech ( i , side ) <> state then
26177: LD_VAR 0 5
26181: PPUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: CALL_OW 321
26191: PUSH
26192: LD_VAR 0 3
26196: NONEQUAL
26197: IFFALSE 26215
// result := result diff i ;
26199: LD_ADDR_VAR 0 4
26203: PUSH
26204: LD_VAR 0 4
26208: PUSH
26209: LD_VAR 0 5
26213: DIFF
26214: ST_TO_ADDR
26215: GO 26174
26217: POP
26218: POP
// end ;
26219: LD_VAR 0 4
26223: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26224: LD_INT 0
26226: PPUSH
26227: PPUSH
26228: PPUSH
// result := true ;
26229: LD_ADDR_VAR 0 3
26233: PUSH
26234: LD_INT 1
26236: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26237: LD_ADDR_VAR 0 5
26241: PUSH
26242: LD_VAR 0 2
26246: PPUSH
26247: CALL_OW 480
26251: ST_TO_ADDR
// if not tmp then
26252: LD_VAR 0 5
26256: NOT
26257: IFFALSE 26261
// exit ;
26259: GO 26310
// for i in tmp do
26261: LD_ADDR_VAR 0 4
26265: PUSH
26266: LD_VAR 0 5
26270: PUSH
26271: FOR_IN
26272: IFFALSE 26308
// if GetTech ( i , side ) <> state_researched then
26274: LD_VAR 0 4
26278: PPUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 321
26288: PUSH
26289: LD_INT 2
26291: NONEQUAL
26292: IFFALSE 26306
// begin result := false ;
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_INT 0
26301: ST_TO_ADDR
// exit ;
26302: POP
26303: POP
26304: GO 26310
// end ;
26306: GO 26271
26308: POP
26309: POP
// end ;
26310: LD_VAR 0 3
26314: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26315: LD_INT 0
26317: PPUSH
26318: PPUSH
26319: PPUSH
26320: PPUSH
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26330: LD_VAR 0 1
26334: NOT
26335: PUSH
26336: LD_VAR 0 1
26340: PPUSH
26341: CALL_OW 257
26345: PUSH
26346: LD_INT 9
26348: NONEQUAL
26349: OR
26350: IFFALSE 26354
// exit ;
26352: GO 26927
// side := GetSide ( unit ) ;
26354: LD_ADDR_VAR 0 9
26358: PUSH
26359: LD_VAR 0 1
26363: PPUSH
26364: CALL_OW 255
26368: ST_TO_ADDR
// tech_space := tech_spacanom ;
26369: LD_ADDR_VAR 0 12
26373: PUSH
26374: LD_INT 29
26376: ST_TO_ADDR
// tech_time := tech_taurad ;
26377: LD_ADDR_VAR 0 13
26381: PUSH
26382: LD_INT 28
26384: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26385: LD_ADDR_VAR 0 11
26389: PUSH
26390: LD_VAR 0 1
26394: PPUSH
26395: CALL_OW 310
26399: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26400: LD_VAR 0 11
26404: PPUSH
26405: CALL_OW 247
26409: PUSH
26410: LD_INT 2
26412: EQUAL
26413: IFFALSE 26417
// exit ;
26415: GO 26927
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26417: LD_ADDR_VAR 0 8
26421: PUSH
26422: LD_INT 81
26424: PUSH
26425: LD_VAR 0 9
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 3
26436: PUSH
26437: LD_INT 21
26439: PUSH
26440: LD_INT 3
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PPUSH
26455: CALL_OW 69
26459: ST_TO_ADDR
// if not tmp then
26460: LD_VAR 0 8
26464: NOT
26465: IFFALSE 26469
// exit ;
26467: GO 26927
// if in_unit then
26469: LD_VAR 0 11
26473: IFFALSE 26497
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26475: LD_ADDR_VAR 0 10
26479: PUSH
26480: LD_VAR 0 8
26484: PPUSH
26485: LD_VAR 0 11
26489: PPUSH
26490: CALL_OW 74
26494: ST_TO_ADDR
26495: GO 26517
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26497: LD_ADDR_VAR 0 10
26501: PUSH
26502: LD_VAR 0 8
26506: PPUSH
26507: LD_VAR 0 1
26511: PPUSH
26512: CALL_OW 74
26516: ST_TO_ADDR
// if not enemy then
26517: LD_VAR 0 10
26521: NOT
26522: IFFALSE 26526
// exit ;
26524: GO 26927
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26526: LD_VAR 0 11
26530: PUSH
26531: LD_VAR 0 11
26535: PPUSH
26536: LD_VAR 0 10
26540: PPUSH
26541: CALL_OW 296
26545: PUSH
26546: LD_INT 13
26548: GREATER
26549: AND
26550: PUSH
26551: LD_VAR 0 1
26555: PPUSH
26556: LD_VAR 0 10
26560: PPUSH
26561: CALL_OW 296
26565: PUSH
26566: LD_INT 12
26568: GREATER
26569: OR
26570: IFFALSE 26574
// exit ;
26572: GO 26927
// missile := [ 1 ] ;
26574: LD_ADDR_VAR 0 14
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: EMPTY
26583: LIST
26584: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26585: LD_VAR 0 9
26589: PPUSH
26590: LD_VAR 0 12
26594: PPUSH
26595: CALL_OW 325
26599: IFFALSE 26628
// missile := Replace ( missile , missile + 1 , 2 ) ;
26601: LD_ADDR_VAR 0 14
26605: PUSH
26606: LD_VAR 0 14
26610: PPUSH
26611: LD_VAR 0 14
26615: PUSH
26616: LD_INT 1
26618: PLUS
26619: PPUSH
26620: LD_INT 2
26622: PPUSH
26623: CALL_OW 1
26627: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26628: LD_VAR 0 9
26632: PPUSH
26633: LD_VAR 0 13
26637: PPUSH
26638: CALL_OW 325
26642: PUSH
26643: LD_VAR 0 10
26647: PPUSH
26648: CALL_OW 255
26652: PPUSH
26653: LD_VAR 0 13
26657: PPUSH
26658: CALL_OW 325
26662: NOT
26663: AND
26664: IFFALSE 26693
// missile := Replace ( missile , missile + 1 , 3 ) ;
26666: LD_ADDR_VAR 0 14
26670: PUSH
26671: LD_VAR 0 14
26675: PPUSH
26676: LD_VAR 0 14
26680: PUSH
26681: LD_INT 1
26683: PLUS
26684: PPUSH
26685: LD_INT 3
26687: PPUSH
26688: CALL_OW 1
26692: ST_TO_ADDR
// if missile < 2 then
26693: LD_VAR 0 14
26697: PUSH
26698: LD_INT 2
26700: LESS
26701: IFFALSE 26705
// exit ;
26703: GO 26927
// x := GetX ( enemy ) ;
26705: LD_ADDR_VAR 0 4
26709: PUSH
26710: LD_VAR 0 10
26714: PPUSH
26715: CALL_OW 250
26719: ST_TO_ADDR
// y := GetY ( enemy ) ;
26720: LD_ADDR_VAR 0 5
26724: PUSH
26725: LD_VAR 0 10
26729: PPUSH
26730: CALL_OW 251
26734: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26735: LD_ADDR_VAR 0 6
26739: PUSH
26740: LD_VAR 0 4
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PPUSH
26749: LD_INT 1
26751: PPUSH
26752: CALL_OW 12
26756: PLUS
26757: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26758: LD_ADDR_VAR 0 7
26762: PUSH
26763: LD_VAR 0 5
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PPUSH
26772: LD_INT 1
26774: PPUSH
26775: CALL_OW 12
26779: PLUS
26780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26781: LD_VAR 0 6
26785: PPUSH
26786: LD_VAR 0 7
26790: PPUSH
26791: CALL_OW 488
26795: NOT
26796: IFFALSE 26818
// begin _x := x ;
26798: LD_ADDR_VAR 0 6
26802: PUSH
26803: LD_VAR 0 4
26807: ST_TO_ADDR
// _y := y ;
26808: LD_ADDR_VAR 0 7
26812: PUSH
26813: LD_VAR 0 5
26817: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26818: LD_ADDR_VAR 0 3
26822: PUSH
26823: LD_INT 1
26825: PPUSH
26826: LD_VAR 0 14
26830: PPUSH
26831: CALL_OW 12
26835: ST_TO_ADDR
// case i of 1 :
26836: LD_VAR 0 3
26840: PUSH
26841: LD_INT 1
26843: DOUBLE
26844: EQUAL
26845: IFTRUE 26849
26847: GO 26866
26849: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26850: LD_VAR 0 1
26854: PPUSH
26855: LD_VAR 0 10
26859: PPUSH
26860: CALL_OW 115
26864: GO 26927
26866: LD_INT 2
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26874
26872: GO 26896
26874: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26875: LD_VAR 0 1
26879: PPUSH
26880: LD_VAR 0 6
26884: PPUSH
26885: LD_VAR 0 7
26889: PPUSH
26890: CALL_OW 153
26894: GO 26927
26896: LD_INT 3
26898: DOUBLE
26899: EQUAL
26900: IFTRUE 26904
26902: GO 26926
26904: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26905: LD_VAR 0 1
26909: PPUSH
26910: LD_VAR 0 6
26914: PPUSH
26915: LD_VAR 0 7
26919: PPUSH
26920: CALL_OW 154
26924: GO 26927
26926: POP
// end ;
26927: LD_VAR 0 2
26931: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26932: LD_INT 0
26934: PPUSH
26935: PPUSH
26936: PPUSH
26937: PPUSH
26938: PPUSH
26939: PPUSH
// if not unit or not building then
26940: LD_VAR 0 1
26944: NOT
26945: PUSH
26946: LD_VAR 0 2
26950: NOT
26951: OR
26952: IFFALSE 26956
// exit ;
26954: GO 27114
// x := GetX ( building ) ;
26956: LD_ADDR_VAR 0 5
26960: PUSH
26961: LD_VAR 0 2
26965: PPUSH
26966: CALL_OW 250
26970: ST_TO_ADDR
// y := GetY ( building ) ;
26971: LD_ADDR_VAR 0 6
26975: PUSH
26976: LD_VAR 0 2
26980: PPUSH
26981: CALL_OW 251
26985: ST_TO_ADDR
// for i = 0 to 5 do
26986: LD_ADDR_VAR 0 4
26990: PUSH
26991: DOUBLE
26992: LD_INT 0
26994: DEC
26995: ST_TO_ADDR
26996: LD_INT 5
26998: PUSH
26999: FOR_TO
27000: IFFALSE 27112
// begin _x := ShiftX ( x , i , 3 ) ;
27002: LD_ADDR_VAR 0 7
27006: PUSH
27007: LD_VAR 0 5
27011: PPUSH
27012: LD_VAR 0 4
27016: PPUSH
27017: LD_INT 3
27019: PPUSH
27020: CALL_OW 272
27024: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27025: LD_ADDR_VAR 0 8
27029: PUSH
27030: LD_VAR 0 6
27034: PPUSH
27035: LD_VAR 0 4
27039: PPUSH
27040: LD_INT 3
27042: PPUSH
27043: CALL_OW 273
27047: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27048: LD_VAR 0 7
27052: PPUSH
27053: LD_VAR 0 8
27057: PPUSH
27058: CALL_OW 488
27062: NOT
27063: IFFALSE 27067
// continue ;
27065: GO 26999
// if HexInfo ( _x , _y ) = 0 then
27067: LD_VAR 0 7
27071: PPUSH
27072: LD_VAR 0 8
27076: PPUSH
27077: CALL_OW 428
27081: PUSH
27082: LD_INT 0
27084: EQUAL
27085: IFFALSE 27110
// begin ComMoveXY ( unit , _x , _y ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: LD_VAR 0 7
27096: PPUSH
27097: LD_VAR 0 8
27101: PPUSH
27102: CALL_OW 111
// exit ;
27106: POP
27107: POP
27108: GO 27114
// end ; end ;
27110: GO 26999
27112: POP
27113: POP
// end ;
27114: LD_VAR 0 3
27118: RET
// export function ScanBase ( side , base_area ) ; begin
27119: LD_INT 0
27121: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27122: LD_ADDR_VAR 0 3
27126: PUSH
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_INT 81
27134: PUSH
27135: LD_VAR 0 1
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PPUSH
27144: CALL_OW 70
27148: ST_TO_ADDR
// end ;
27149: LD_VAR 0 3
27153: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27154: LD_INT 0
27156: PPUSH
27157: PPUSH
27158: PPUSH
27159: PPUSH
// result := false ;
27160: LD_ADDR_VAR 0 2
27164: PUSH
27165: LD_INT 0
27167: ST_TO_ADDR
// side := GetSide ( unit ) ;
27168: LD_ADDR_VAR 0 3
27172: PUSH
27173: LD_VAR 0 1
27177: PPUSH
27178: CALL_OW 255
27182: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27183: LD_ADDR_VAR 0 4
27187: PUSH
27188: LD_VAR 0 1
27192: PPUSH
27193: CALL_OW 248
27197: ST_TO_ADDR
// case nat of 1 :
27198: LD_VAR 0 4
27202: PUSH
27203: LD_INT 1
27205: DOUBLE
27206: EQUAL
27207: IFTRUE 27211
27209: GO 27222
27211: POP
// tech := tech_lassight ; 2 :
27212: LD_ADDR_VAR 0 5
27216: PUSH
27217: LD_INT 12
27219: ST_TO_ADDR
27220: GO 27261
27222: LD_INT 2
27224: DOUBLE
27225: EQUAL
27226: IFTRUE 27230
27228: GO 27241
27230: POP
// tech := tech_mortar ; 3 :
27231: LD_ADDR_VAR 0 5
27235: PUSH
27236: LD_INT 41
27238: ST_TO_ADDR
27239: GO 27261
27241: LD_INT 3
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27260
27249: POP
// tech := tech_bazooka ; end ;
27250: LD_ADDR_VAR 0 5
27254: PUSH
27255: LD_INT 44
27257: ST_TO_ADDR
27258: GO 27261
27260: POP
// if Researched ( side , tech ) then
27261: LD_VAR 0 3
27265: PPUSH
27266: LD_VAR 0 5
27270: PPUSH
27271: CALL_OW 325
27275: IFFALSE 27302
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27277: LD_ADDR_VAR 0 2
27281: PUSH
27282: LD_INT 5
27284: PUSH
27285: LD_INT 8
27287: PUSH
27288: LD_INT 9
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: LIST
27295: PUSH
27296: LD_VAR 0 4
27300: ARRAY
27301: ST_TO_ADDR
// end ;
27302: LD_VAR 0 2
27306: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27307: LD_INT 0
27309: PPUSH
27310: PPUSH
27311: PPUSH
// if not mines then
27312: LD_VAR 0 2
27316: NOT
27317: IFFALSE 27321
// exit ;
27319: GO 27465
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27321: LD_ADDR_VAR 0 5
27325: PUSH
27326: LD_INT 81
27328: PUSH
27329: LD_VAR 0 1
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 3
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PPUSH
27359: CALL_OW 69
27363: ST_TO_ADDR
// for i in mines do
27364: LD_ADDR_VAR 0 4
27368: PUSH
27369: LD_VAR 0 2
27373: PUSH
27374: FOR_IN
27375: IFFALSE 27463
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27377: LD_VAR 0 4
27381: PUSH
27382: LD_INT 1
27384: ARRAY
27385: PPUSH
27386: LD_VAR 0 4
27390: PUSH
27391: LD_INT 2
27393: ARRAY
27394: PPUSH
27395: CALL_OW 458
27399: NOT
27400: IFFALSE 27404
// continue ;
27402: GO 27374
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27404: LD_VAR 0 4
27408: PUSH
27409: LD_INT 1
27411: ARRAY
27412: PPUSH
27413: LD_VAR 0 4
27417: PUSH
27418: LD_INT 2
27420: ARRAY
27421: PPUSH
27422: CALL_OW 428
27426: PUSH
27427: LD_VAR 0 5
27431: IN
27432: IFFALSE 27461
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27434: LD_VAR 0 4
27438: PUSH
27439: LD_INT 1
27441: ARRAY
27442: PPUSH
27443: LD_VAR 0 4
27447: PUSH
27448: LD_INT 2
27450: ARRAY
27451: PPUSH
27452: LD_VAR 0 1
27456: PPUSH
27457: CALL_OW 456
// end ;
27461: GO 27374
27463: POP
27464: POP
// end ;
27465: LD_VAR 0 3
27469: RET
// export function Count ( array ) ; begin
27470: LD_INT 0
27472: PPUSH
// result := array + 0 ;
27473: LD_ADDR_VAR 0 2
27477: PUSH
27478: LD_VAR 0 1
27482: PUSH
27483: LD_INT 0
27485: PLUS
27486: ST_TO_ADDR
// end ;
27487: LD_VAR 0 2
27491: RET
// export function IsEmpty ( building ) ; begin
27492: LD_INT 0
27494: PPUSH
// if not building then
27495: LD_VAR 0 1
27499: NOT
27500: IFFALSE 27504
// exit ;
27502: GO 27547
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27504: LD_ADDR_VAR 0 2
27508: PUSH
27509: LD_VAR 0 1
27513: PUSH
27514: LD_INT 22
27516: PUSH
27517: LD_VAR 0 1
27521: PPUSH
27522: CALL_OW 255
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 58
27533: PUSH
27534: EMPTY
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PPUSH
27541: CALL_OW 69
27545: IN
27546: ST_TO_ADDR
// end ;
27547: LD_VAR 0 2
27551: RET
// export function IsNotFull ( building ) ; var places ; begin
27552: LD_INT 0
27554: PPUSH
27555: PPUSH
// if not building then
27556: LD_VAR 0 1
27560: NOT
27561: IFFALSE 27565
// exit ;
27563: GO 27593
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27565: LD_ADDR_VAR 0 2
27569: PUSH
27570: LD_VAR 0 1
27574: PPUSH
27575: LD_INT 3
27577: PUSH
27578: LD_INT 62
27580: PUSH
27581: EMPTY
27582: LIST
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PPUSH
27588: CALL_OW 72
27592: ST_TO_ADDR
// end ;
27593: LD_VAR 0 2
27597: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27598: LD_INT 0
27600: PPUSH
27601: PPUSH
27602: PPUSH
27603: PPUSH
// tmp := [ ] ;
27604: LD_ADDR_VAR 0 3
27608: PUSH
27609: EMPTY
27610: ST_TO_ADDR
// list := [ ] ;
27611: LD_ADDR_VAR 0 5
27615: PUSH
27616: EMPTY
27617: ST_TO_ADDR
// for i = 16 to 25 do
27618: LD_ADDR_VAR 0 4
27622: PUSH
27623: DOUBLE
27624: LD_INT 16
27626: DEC
27627: ST_TO_ADDR
27628: LD_INT 25
27630: PUSH
27631: FOR_TO
27632: IFFALSE 27705
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27634: LD_ADDR_VAR 0 3
27638: PUSH
27639: LD_VAR 0 3
27643: PUSH
27644: LD_INT 22
27646: PUSH
27647: LD_VAR 0 1
27651: PPUSH
27652: CALL_OW 255
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 91
27663: PUSH
27664: LD_VAR 0 1
27668: PUSH
27669: LD_INT 6
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 30
27679: PUSH
27680: LD_VAR 0 4
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: PPUSH
27697: CALL_OW 69
27701: ADD
27702: ST_TO_ADDR
27703: GO 27631
27705: POP
27706: POP
// for i = 1 to tmp do
27707: LD_ADDR_VAR 0 4
27711: PUSH
27712: DOUBLE
27713: LD_INT 1
27715: DEC
27716: ST_TO_ADDR
27717: LD_VAR 0 3
27721: PUSH
27722: FOR_TO
27723: IFFALSE 27811
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27725: LD_ADDR_VAR 0 5
27729: PUSH
27730: LD_VAR 0 5
27734: PUSH
27735: LD_VAR 0 3
27739: PUSH
27740: LD_VAR 0 4
27744: ARRAY
27745: PPUSH
27746: CALL_OW 266
27750: PUSH
27751: LD_VAR 0 3
27755: PUSH
27756: LD_VAR 0 4
27760: ARRAY
27761: PPUSH
27762: CALL_OW 250
27766: PUSH
27767: LD_VAR 0 3
27771: PUSH
27772: LD_VAR 0 4
27776: ARRAY
27777: PPUSH
27778: CALL_OW 251
27782: PUSH
27783: LD_VAR 0 3
27787: PUSH
27788: LD_VAR 0 4
27792: ARRAY
27793: PPUSH
27794: CALL_OW 254
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: PUSH
27805: EMPTY
27806: LIST
27807: ADD
27808: ST_TO_ADDR
27809: GO 27722
27811: POP
27812: POP
// result := list ;
27813: LD_ADDR_VAR 0 2
27817: PUSH
27818: LD_VAR 0 5
27822: ST_TO_ADDR
// end ;
27823: LD_VAR 0 2
27827: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27828: LD_INT 0
27830: PPUSH
27831: PPUSH
27832: PPUSH
27833: PPUSH
27834: PPUSH
27835: PPUSH
27836: PPUSH
// if not factory then
27837: LD_VAR 0 1
27841: NOT
27842: IFFALSE 27846
// exit ;
27844: GO 28439
// if control = control_apeman then
27846: LD_VAR 0 4
27850: PUSH
27851: LD_INT 5
27853: EQUAL
27854: IFFALSE 27963
// begin tmp := UnitsInside ( factory ) ;
27856: LD_ADDR_VAR 0 8
27860: PUSH
27861: LD_VAR 0 1
27865: PPUSH
27866: CALL_OW 313
27870: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27871: LD_VAR 0 8
27875: PPUSH
27876: LD_INT 25
27878: PUSH
27879: LD_INT 12
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PPUSH
27886: CALL_OW 72
27890: NOT
27891: IFFALSE 27901
// control := control_manual ;
27893: LD_ADDR_VAR 0 4
27897: PUSH
27898: LD_INT 1
27900: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27901: LD_ADDR_VAR 0 8
27905: PUSH
27906: LD_VAR 0 1
27910: PPUSH
27911: CALL 27598 0 1
27915: ST_TO_ADDR
// if tmp then
27916: LD_VAR 0 8
27920: IFFALSE 27963
// begin for i in tmp do
27922: LD_ADDR_VAR 0 7
27926: PUSH
27927: LD_VAR 0 8
27931: PUSH
27932: FOR_IN
27933: IFFALSE 27961
// if i [ 1 ] = b_ext_radio then
27935: LD_VAR 0 7
27939: PUSH
27940: LD_INT 1
27942: ARRAY
27943: PUSH
27944: LD_INT 22
27946: EQUAL
27947: IFFALSE 27959
// begin control := control_remote ;
27949: LD_ADDR_VAR 0 4
27953: PUSH
27954: LD_INT 2
27956: ST_TO_ADDR
// break ;
27957: GO 27961
// end ;
27959: GO 27932
27961: POP
27962: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27963: LD_VAR 0 1
27967: PPUSH
27968: LD_VAR 0 2
27972: PPUSH
27973: LD_VAR 0 3
27977: PPUSH
27978: LD_VAR 0 4
27982: PPUSH
27983: LD_VAR 0 5
27987: PPUSH
27988: CALL_OW 448
27992: IFFALSE 28027
// begin result := [ chassis , engine , control , weapon ] ;
27994: LD_ADDR_VAR 0 6
27998: PUSH
27999: LD_VAR 0 2
28003: PUSH
28004: LD_VAR 0 3
28008: PUSH
28009: LD_VAR 0 4
28013: PUSH
28014: LD_VAR 0 5
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: ST_TO_ADDR
// exit ;
28025: GO 28439
// end ; _chassis := AvailableChassisList ( factory ) ;
28027: LD_ADDR_VAR 0 9
28031: PUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 475
28041: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28042: LD_ADDR_VAR 0 11
28046: PUSH
28047: LD_VAR 0 1
28051: PPUSH
28052: CALL_OW 476
28056: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28057: LD_ADDR_VAR 0 12
28061: PUSH
28062: LD_VAR 0 1
28066: PPUSH
28067: CALL_OW 477
28071: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28072: LD_ADDR_VAR 0 10
28076: PUSH
28077: LD_VAR 0 1
28081: PPUSH
28082: CALL_OW 478
28086: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28087: LD_VAR 0 9
28091: NOT
28092: PUSH
28093: LD_VAR 0 11
28097: NOT
28098: OR
28099: PUSH
28100: LD_VAR 0 12
28104: NOT
28105: OR
28106: PUSH
28107: LD_VAR 0 10
28111: NOT
28112: OR
28113: IFFALSE 28148
// begin result := [ chassis , engine , control , weapon ] ;
28115: LD_ADDR_VAR 0 6
28119: PUSH
28120: LD_VAR 0 2
28124: PUSH
28125: LD_VAR 0 3
28129: PUSH
28130: LD_VAR 0 4
28134: PUSH
28135: LD_VAR 0 5
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// exit ;
28146: GO 28439
// end ; if not chassis in _chassis then
28148: LD_VAR 0 2
28152: PUSH
28153: LD_VAR 0 9
28157: IN
28158: NOT
28159: IFFALSE 28185
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28161: LD_ADDR_VAR 0 2
28165: PUSH
28166: LD_VAR 0 9
28170: PUSH
28171: LD_INT 1
28173: PPUSH
28174: LD_VAR 0 9
28178: PPUSH
28179: CALL_OW 12
28183: ARRAY
28184: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28185: LD_VAR 0 2
28189: PPUSH
28190: LD_VAR 0 3
28194: PPUSH
28195: CALL 28444 0 2
28199: NOT
28200: IFFALSE 28259
// repeat engine := _engine [ 1 ] ;
28202: LD_ADDR_VAR 0 3
28206: PUSH
28207: LD_VAR 0 11
28211: PUSH
28212: LD_INT 1
28214: ARRAY
28215: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28216: LD_ADDR_VAR 0 11
28220: PUSH
28221: LD_VAR 0 11
28225: PPUSH
28226: LD_INT 1
28228: PPUSH
28229: CALL_OW 3
28233: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28234: LD_VAR 0 2
28238: PPUSH
28239: LD_VAR 0 3
28243: PPUSH
28244: CALL 28444 0 2
28248: PUSH
28249: LD_VAR 0 11
28253: PUSH
28254: EMPTY
28255: EQUAL
28256: OR
28257: IFFALSE 28202
// if not control in _control then
28259: LD_VAR 0 4
28263: PUSH
28264: LD_VAR 0 12
28268: IN
28269: NOT
28270: IFFALSE 28296
// control := _control [ rand ( 1 , _control ) ] ;
28272: LD_ADDR_VAR 0 4
28276: PUSH
28277: LD_VAR 0 12
28281: PUSH
28282: LD_INT 1
28284: PPUSH
28285: LD_VAR 0 12
28289: PPUSH
28290: CALL_OW 12
28294: ARRAY
28295: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28296: LD_VAR 0 2
28300: PPUSH
28301: LD_VAR 0 5
28305: PPUSH
28306: CALL 28664 0 2
28310: NOT
28311: IFFALSE 28370
// repeat weapon := _weapon [ 1 ] ;
28313: LD_ADDR_VAR 0 5
28317: PUSH
28318: LD_VAR 0 10
28322: PUSH
28323: LD_INT 1
28325: ARRAY
28326: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28327: LD_ADDR_VAR 0 10
28331: PUSH
28332: LD_VAR 0 10
28336: PPUSH
28337: LD_INT 1
28339: PPUSH
28340: CALL_OW 3
28344: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28345: LD_VAR 0 2
28349: PPUSH
28350: LD_VAR 0 5
28354: PPUSH
28355: CALL 28664 0 2
28359: PUSH
28360: LD_VAR 0 10
28364: PUSH
28365: EMPTY
28366: EQUAL
28367: OR
28368: IFFALSE 28313
// result := [ ] ;
28370: LD_ADDR_VAR 0 6
28374: PUSH
28375: EMPTY
28376: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28377: LD_VAR 0 1
28381: PPUSH
28382: LD_VAR 0 2
28386: PPUSH
28387: LD_VAR 0 3
28391: PPUSH
28392: LD_VAR 0 4
28396: PPUSH
28397: LD_VAR 0 5
28401: PPUSH
28402: CALL_OW 448
28406: IFFALSE 28439
// result := [ chassis , engine , control , weapon ] ;
28408: LD_ADDR_VAR 0 6
28412: PUSH
28413: LD_VAR 0 2
28417: PUSH
28418: LD_VAR 0 3
28422: PUSH
28423: LD_VAR 0 4
28427: PUSH
28428: LD_VAR 0 5
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: ST_TO_ADDR
// end ;
28439: LD_VAR 0 6
28443: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28444: LD_INT 0
28446: PPUSH
// if not chassis or not engine then
28447: LD_VAR 0 1
28451: NOT
28452: PUSH
28453: LD_VAR 0 2
28457: NOT
28458: OR
28459: IFFALSE 28463
// exit ;
28461: GO 28659
// case engine of engine_solar :
28463: LD_VAR 0 2
28467: PUSH
28468: LD_INT 2
28470: DOUBLE
28471: EQUAL
28472: IFTRUE 28476
28474: GO 28514
28476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28477: LD_ADDR_VAR 0 3
28481: PUSH
28482: LD_INT 11
28484: PUSH
28485: LD_INT 12
28487: PUSH
28488: LD_INT 13
28490: PUSH
28491: LD_INT 14
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: LD_INT 3
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: ST_TO_ADDR
28512: GO 28643
28514: LD_INT 1
28516: DOUBLE
28517: EQUAL
28518: IFTRUE 28522
28520: GO 28584
28522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 11
28530: PUSH
28531: LD_INT 12
28533: PUSH
28534: LD_INT 13
28536: PUSH
28537: LD_INT 14
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 3
28548: PUSH
28549: LD_INT 4
28551: PUSH
28552: LD_INT 5
28554: PUSH
28555: LD_INT 21
28557: PUSH
28558: LD_INT 23
28560: PUSH
28561: LD_INT 22
28563: PUSH
28564: LD_INT 24
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: ST_TO_ADDR
28582: GO 28643
28584: LD_INT 3
28586: DOUBLE
28587: EQUAL
28588: IFTRUE 28592
28590: GO 28642
28592: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28593: LD_ADDR_VAR 0 3
28597: PUSH
28598: LD_INT 13
28600: PUSH
28601: LD_INT 14
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 3
28609: PUSH
28610: LD_INT 4
28612: PUSH
28613: LD_INT 5
28615: PUSH
28616: LD_INT 21
28618: PUSH
28619: LD_INT 22
28621: PUSH
28622: LD_INT 23
28624: PUSH
28625: LD_INT 24
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
28640: GO 28643
28642: POP
// result := ( chassis in result ) ;
28643: LD_ADDR_VAR 0 3
28647: PUSH
28648: LD_VAR 0 1
28652: PUSH
28653: LD_VAR 0 3
28657: IN
28658: ST_TO_ADDR
// end ;
28659: LD_VAR 0 3
28663: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28664: LD_INT 0
28666: PPUSH
// if not chassis or not weapon then
28667: LD_VAR 0 1
28671: NOT
28672: PUSH
28673: LD_VAR 0 2
28677: NOT
28678: OR
28679: IFFALSE 28683
// exit ;
28681: GO 29743
// case weapon of us_machine_gun :
28683: LD_VAR 0 2
28687: PUSH
28688: LD_INT 2
28690: DOUBLE
28691: EQUAL
28692: IFTRUE 28696
28694: GO 28726
28696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28697: LD_ADDR_VAR 0 3
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: LD_INT 3
28710: PUSH
28711: LD_INT 4
28713: PUSH
28714: LD_INT 5
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
28724: GO 29727
28726: LD_INT 3
28728: DOUBLE
28729: EQUAL
28730: IFTRUE 28734
28732: GO 28764
28734: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28735: LD_ADDR_VAR 0 3
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: LD_INT 3
28748: PUSH
28749: LD_INT 4
28751: PUSH
28752: LD_INT 5
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: ST_TO_ADDR
28762: GO 29727
28764: LD_INT 11
28766: DOUBLE
28767: EQUAL
28768: IFTRUE 28772
28770: GO 28802
28772: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28773: LD_ADDR_VAR 0 3
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 3
28786: PUSH
28787: LD_INT 4
28789: PUSH
28790: LD_INT 5
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: ST_TO_ADDR
28800: GO 29727
28802: LD_INT 4
28804: DOUBLE
28805: EQUAL
28806: IFTRUE 28810
28808: GO 28836
28810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: LD_INT 3
28821: PUSH
28822: LD_INT 4
28824: PUSH
28825: LD_INT 5
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: ST_TO_ADDR
28834: GO 29727
28836: LD_INT 5
28838: DOUBLE
28839: EQUAL
28840: IFTRUE 28844
28842: GO 28870
28844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28845: LD_ADDR_VAR 0 3
28849: PUSH
28850: LD_INT 2
28852: PUSH
28853: LD_INT 3
28855: PUSH
28856: LD_INT 4
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: ST_TO_ADDR
28868: GO 29727
28870: LD_INT 9
28872: DOUBLE
28873: EQUAL
28874: IFTRUE 28878
28876: GO 28904
28878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28879: LD_ADDR_VAR 0 3
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: LD_INT 3
28889: PUSH
28890: LD_INT 4
28892: PUSH
28893: LD_INT 5
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: ST_TO_ADDR
28902: GO 29727
28904: LD_INT 7
28906: DOUBLE
28907: EQUAL
28908: IFTRUE 28912
28910: GO 28938
28912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28913: LD_ADDR_VAR 0 3
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: LD_INT 3
28923: PUSH
28924: LD_INT 4
28926: PUSH
28927: LD_INT 5
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: ST_TO_ADDR
28936: GO 29727
28938: LD_INT 12
28940: DOUBLE
28941: EQUAL
28942: IFTRUE 28946
28944: GO 28972
28946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28947: LD_ADDR_VAR 0 3
28951: PUSH
28952: LD_INT 2
28954: PUSH
28955: LD_INT 3
28957: PUSH
28958: LD_INT 4
28960: PUSH
28961: LD_INT 5
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: ST_TO_ADDR
28970: GO 29727
28972: LD_INT 13
28974: DOUBLE
28975: EQUAL
28976: IFTRUE 28980
28978: GO 29006
28980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28981: LD_ADDR_VAR 0 3
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: LD_INT 3
28991: PUSH
28992: LD_INT 4
28994: PUSH
28995: LD_INT 5
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: ST_TO_ADDR
29004: GO 29727
29006: LD_INT 14
29008: DOUBLE
29009: EQUAL
29010: IFTRUE 29014
29012: GO 29032
29014: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29015: LD_ADDR_VAR 0 3
29019: PUSH
29020: LD_INT 4
29022: PUSH
29023: LD_INT 5
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: ST_TO_ADDR
29030: GO 29727
29032: LD_INT 6
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29058
29040: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 4
29048: PUSH
29049: LD_INT 5
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: ST_TO_ADDR
29056: GO 29727
29058: LD_INT 10
29060: DOUBLE
29061: EQUAL
29062: IFTRUE 29066
29064: GO 29084
29066: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29067: LD_ADDR_VAR 0 3
29071: PUSH
29072: LD_INT 4
29074: PUSH
29075: LD_INT 5
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: ST_TO_ADDR
29082: GO 29727
29084: LD_INT 22
29086: DOUBLE
29087: EQUAL
29088: IFTRUE 29092
29090: GO 29118
29092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29093: LD_ADDR_VAR 0 3
29097: PUSH
29098: LD_INT 11
29100: PUSH
29101: LD_INT 12
29103: PUSH
29104: LD_INT 13
29106: PUSH
29107: LD_INT 14
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: ST_TO_ADDR
29116: GO 29727
29118: LD_INT 23
29120: DOUBLE
29121: EQUAL
29122: IFTRUE 29126
29124: GO 29152
29126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29127: LD_ADDR_VAR 0 3
29131: PUSH
29132: LD_INT 11
29134: PUSH
29135: LD_INT 12
29137: PUSH
29138: LD_INT 13
29140: PUSH
29141: LD_INT 14
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
29150: GO 29727
29152: LD_INT 24
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29186
29160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 11
29168: PUSH
29169: LD_INT 12
29171: PUSH
29172: LD_INT 13
29174: PUSH
29175: LD_INT 14
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
29184: GO 29727
29186: LD_INT 30
29188: DOUBLE
29189: EQUAL
29190: IFTRUE 29194
29192: GO 29220
29194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: LD_INT 11
29202: PUSH
29203: LD_INT 12
29205: PUSH
29206: LD_INT 13
29208: PUSH
29209: LD_INT 14
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
29218: GO 29727
29220: LD_INT 25
29222: DOUBLE
29223: EQUAL
29224: IFTRUE 29228
29226: GO 29246
29228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29229: LD_ADDR_VAR 0 3
29233: PUSH
29234: LD_INT 13
29236: PUSH
29237: LD_INT 14
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: ST_TO_ADDR
29244: GO 29727
29246: LD_INT 27
29248: DOUBLE
29249: EQUAL
29250: IFTRUE 29254
29252: GO 29272
29254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29255: LD_ADDR_VAR 0 3
29259: PUSH
29260: LD_INT 13
29262: PUSH
29263: LD_INT 14
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: ST_TO_ADDR
29270: GO 29727
29272: LD_INT 92
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29280
29278: GO 29306
29280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29281: LD_ADDR_VAR 0 3
29285: PUSH
29286: LD_INT 11
29288: PUSH
29289: LD_INT 12
29291: PUSH
29292: LD_INT 13
29294: PUSH
29295: LD_INT 14
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
29304: GO 29727
29306: LD_INT 28
29308: DOUBLE
29309: EQUAL
29310: IFTRUE 29314
29312: GO 29332
29314: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29315: LD_ADDR_VAR 0 3
29319: PUSH
29320: LD_INT 13
29322: PUSH
29323: LD_INT 14
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: ST_TO_ADDR
29330: GO 29727
29332: LD_INT 29
29334: DOUBLE
29335: EQUAL
29336: IFTRUE 29340
29338: GO 29358
29340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29341: LD_ADDR_VAR 0 3
29345: PUSH
29346: LD_INT 13
29348: PUSH
29349: LD_INT 14
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: ST_TO_ADDR
29356: GO 29727
29358: LD_INT 31
29360: DOUBLE
29361: EQUAL
29362: IFTRUE 29366
29364: GO 29384
29366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_INT 13
29374: PUSH
29375: LD_INT 14
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: ST_TO_ADDR
29382: GO 29727
29384: LD_INT 26
29386: DOUBLE
29387: EQUAL
29388: IFTRUE 29392
29390: GO 29410
29392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29393: LD_ADDR_VAR 0 3
29397: PUSH
29398: LD_INT 13
29400: PUSH
29401: LD_INT 14
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: ST_TO_ADDR
29408: GO 29727
29410: LD_INT 42
29412: DOUBLE
29413: EQUAL
29414: IFTRUE 29418
29416: GO 29444
29418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: LD_INT 21
29426: PUSH
29427: LD_INT 22
29429: PUSH
29430: LD_INT 23
29432: PUSH
29433: LD_INT 24
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
29442: GO 29727
29444: LD_INT 43
29446: DOUBLE
29447: EQUAL
29448: IFTRUE 29452
29450: GO 29478
29452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29453: LD_ADDR_VAR 0 3
29457: PUSH
29458: LD_INT 21
29460: PUSH
29461: LD_INT 22
29463: PUSH
29464: LD_INT 23
29466: PUSH
29467: LD_INT 24
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
29476: GO 29727
29478: LD_INT 44
29480: DOUBLE
29481: EQUAL
29482: IFTRUE 29486
29484: GO 29512
29486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29487: LD_ADDR_VAR 0 3
29491: PUSH
29492: LD_INT 21
29494: PUSH
29495: LD_INT 22
29497: PUSH
29498: LD_INT 23
29500: PUSH
29501: LD_INT 24
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: ST_TO_ADDR
29510: GO 29727
29512: LD_INT 45
29514: DOUBLE
29515: EQUAL
29516: IFTRUE 29520
29518: GO 29546
29520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29521: LD_ADDR_VAR 0 3
29525: PUSH
29526: LD_INT 21
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 23
29534: PUSH
29535: LD_INT 24
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: ST_TO_ADDR
29544: GO 29727
29546: LD_INT 49
29548: DOUBLE
29549: EQUAL
29550: IFTRUE 29554
29552: GO 29580
29554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29555: LD_ADDR_VAR 0 3
29559: PUSH
29560: LD_INT 21
29562: PUSH
29563: LD_INT 22
29565: PUSH
29566: LD_INT 23
29568: PUSH
29569: LD_INT 24
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
29578: GO 29727
29580: LD_INT 51
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 29614
29588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29589: LD_ADDR_VAR 0 3
29593: PUSH
29594: LD_INT 21
29596: PUSH
29597: LD_INT 22
29599: PUSH
29600: LD_INT 23
29602: PUSH
29603: LD_INT 24
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: ST_TO_ADDR
29612: GO 29727
29614: LD_INT 52
29616: DOUBLE
29617: EQUAL
29618: IFTRUE 29622
29620: GO 29648
29622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29623: LD_ADDR_VAR 0 3
29627: PUSH
29628: LD_INT 21
29630: PUSH
29631: LD_INT 22
29633: PUSH
29634: LD_INT 23
29636: PUSH
29637: LD_INT 24
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: ST_TO_ADDR
29646: GO 29727
29648: LD_INT 53
29650: DOUBLE
29651: EQUAL
29652: IFTRUE 29656
29654: GO 29674
29656: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29657: LD_ADDR_VAR 0 3
29661: PUSH
29662: LD_INT 23
29664: PUSH
29665: LD_INT 24
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: ST_TO_ADDR
29672: GO 29727
29674: LD_INT 46
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 29700
29682: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29683: LD_ADDR_VAR 0 3
29687: PUSH
29688: LD_INT 23
29690: PUSH
29691: LD_INT 24
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: ST_TO_ADDR
29698: GO 29727
29700: LD_INT 47
29702: DOUBLE
29703: EQUAL
29704: IFTRUE 29708
29706: GO 29726
29708: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29709: LD_ADDR_VAR 0 3
29713: PUSH
29714: LD_INT 23
29716: PUSH
29717: LD_INT 24
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: ST_TO_ADDR
29724: GO 29727
29726: POP
// result := ( chassis in result ) ;
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_VAR 0 1
29736: PUSH
29737: LD_VAR 0 3
29741: IN
29742: ST_TO_ADDR
// end ;
29743: LD_VAR 0 3
29747: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29748: LD_INT 0
29750: PPUSH
29751: PPUSH
29752: PPUSH
29753: PPUSH
29754: PPUSH
29755: PPUSH
29756: PPUSH
// result := array ;
29757: LD_ADDR_VAR 0 5
29761: PUSH
29762: LD_VAR 0 1
29766: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29767: LD_VAR 0 1
29771: NOT
29772: PUSH
29773: LD_VAR 0 2
29777: NOT
29778: OR
29779: PUSH
29780: LD_VAR 0 3
29784: NOT
29785: OR
29786: PUSH
29787: LD_VAR 0 2
29791: PUSH
29792: LD_VAR 0 1
29796: GREATER
29797: OR
29798: PUSH
29799: LD_VAR 0 3
29803: PUSH
29804: LD_VAR 0 1
29808: GREATER
29809: OR
29810: IFFALSE 29814
// exit ;
29812: GO 30110
// if direction then
29814: LD_VAR 0 4
29818: IFFALSE 29882
// begin d := 1 ;
29820: LD_ADDR_VAR 0 9
29824: PUSH
29825: LD_INT 1
29827: ST_TO_ADDR
// if i_from > i_to then
29828: LD_VAR 0 2
29832: PUSH
29833: LD_VAR 0 3
29837: GREATER
29838: IFFALSE 29864
// length := ( array - i_from ) + i_to else
29840: LD_ADDR_VAR 0 11
29844: PUSH
29845: LD_VAR 0 1
29849: PUSH
29850: LD_VAR 0 2
29854: MINUS
29855: PUSH
29856: LD_VAR 0 3
29860: PLUS
29861: ST_TO_ADDR
29862: GO 29880
// length := i_to - i_from ;
29864: LD_ADDR_VAR 0 11
29868: PUSH
29869: LD_VAR 0 3
29873: PUSH
29874: LD_VAR 0 2
29878: MINUS
29879: ST_TO_ADDR
// end else
29880: GO 29943
// begin d := - 1 ;
29882: LD_ADDR_VAR 0 9
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: ST_TO_ADDR
// if i_from > i_to then
29891: LD_VAR 0 2
29895: PUSH
29896: LD_VAR 0 3
29900: GREATER
29901: IFFALSE 29921
// length := i_from - i_to else
29903: LD_ADDR_VAR 0 11
29907: PUSH
29908: LD_VAR 0 2
29912: PUSH
29913: LD_VAR 0 3
29917: MINUS
29918: ST_TO_ADDR
29919: GO 29943
// length := ( array - i_to ) + i_from ;
29921: LD_ADDR_VAR 0 11
29925: PUSH
29926: LD_VAR 0 1
29930: PUSH
29931: LD_VAR 0 3
29935: MINUS
29936: PUSH
29937: LD_VAR 0 2
29941: PLUS
29942: ST_TO_ADDR
// end ; if not length then
29943: LD_VAR 0 11
29947: NOT
29948: IFFALSE 29952
// exit ;
29950: GO 30110
// tmp := array ;
29952: LD_ADDR_VAR 0 10
29956: PUSH
29957: LD_VAR 0 1
29961: ST_TO_ADDR
// for i = 1 to length do
29962: LD_ADDR_VAR 0 6
29966: PUSH
29967: DOUBLE
29968: LD_INT 1
29970: DEC
29971: ST_TO_ADDR
29972: LD_VAR 0 11
29976: PUSH
29977: FOR_TO
29978: IFFALSE 30098
// begin for j = 1 to array do
29980: LD_ADDR_VAR 0 7
29984: PUSH
29985: DOUBLE
29986: LD_INT 1
29988: DEC
29989: ST_TO_ADDR
29990: LD_VAR 0 1
29994: PUSH
29995: FOR_TO
29996: IFFALSE 30084
// begin k := j + d ;
29998: LD_ADDR_VAR 0 8
30002: PUSH
30003: LD_VAR 0 7
30007: PUSH
30008: LD_VAR 0 9
30012: PLUS
30013: ST_TO_ADDR
// if k > array then
30014: LD_VAR 0 8
30018: PUSH
30019: LD_VAR 0 1
30023: GREATER
30024: IFFALSE 30034
// k := 1 ;
30026: LD_ADDR_VAR 0 8
30030: PUSH
30031: LD_INT 1
30033: ST_TO_ADDR
// if not k then
30034: LD_VAR 0 8
30038: NOT
30039: IFFALSE 30051
// k := array ;
30041: LD_ADDR_VAR 0 8
30045: PUSH
30046: LD_VAR 0 1
30050: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30051: LD_ADDR_VAR 0 10
30055: PUSH
30056: LD_VAR 0 10
30060: PPUSH
30061: LD_VAR 0 8
30065: PPUSH
30066: LD_VAR 0 1
30070: PUSH
30071: LD_VAR 0 7
30075: ARRAY
30076: PPUSH
30077: CALL_OW 1
30081: ST_TO_ADDR
// end ;
30082: GO 29995
30084: POP
30085: POP
// array := tmp ;
30086: LD_ADDR_VAR 0 1
30090: PUSH
30091: LD_VAR 0 10
30095: ST_TO_ADDR
// end ;
30096: GO 29977
30098: POP
30099: POP
// result := array ;
30100: LD_ADDR_VAR 0 5
30104: PUSH
30105: LD_VAR 0 1
30109: ST_TO_ADDR
// end ;
30110: LD_VAR 0 5
30114: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30115: LD_INT 0
30117: PPUSH
30118: PPUSH
// result := 0 ;
30119: LD_ADDR_VAR 0 3
30123: PUSH
30124: LD_INT 0
30126: ST_TO_ADDR
// if not array or not value in array then
30127: LD_VAR 0 1
30131: NOT
30132: PUSH
30133: LD_VAR 0 2
30137: PUSH
30138: LD_VAR 0 1
30142: IN
30143: NOT
30144: OR
30145: IFFALSE 30149
// exit ;
30147: GO 30203
// for i = 1 to array do
30149: LD_ADDR_VAR 0 4
30153: PUSH
30154: DOUBLE
30155: LD_INT 1
30157: DEC
30158: ST_TO_ADDR
30159: LD_VAR 0 1
30163: PUSH
30164: FOR_TO
30165: IFFALSE 30201
// if value = array [ i ] then
30167: LD_VAR 0 2
30171: PUSH
30172: LD_VAR 0 1
30176: PUSH
30177: LD_VAR 0 4
30181: ARRAY
30182: EQUAL
30183: IFFALSE 30199
// begin result := i ;
30185: LD_ADDR_VAR 0 3
30189: PUSH
30190: LD_VAR 0 4
30194: ST_TO_ADDR
// exit ;
30195: POP
30196: POP
30197: GO 30203
// end ;
30199: GO 30164
30201: POP
30202: POP
// end ;
30203: LD_VAR 0 3
30207: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30208: LD_INT 0
30210: PPUSH
// vc_chassis := chassis ;
30211: LD_ADDR_OWVAR 37
30215: PUSH
30216: LD_VAR 0 1
30220: ST_TO_ADDR
// vc_engine := engine ;
30221: LD_ADDR_OWVAR 39
30225: PUSH
30226: LD_VAR 0 2
30230: ST_TO_ADDR
// vc_control := control ;
30231: LD_ADDR_OWVAR 38
30235: PUSH
30236: LD_VAR 0 3
30240: ST_TO_ADDR
// vc_weapon := weapon ;
30241: LD_ADDR_OWVAR 40
30245: PUSH
30246: LD_VAR 0 4
30250: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30251: LD_ADDR_OWVAR 41
30255: PUSH
30256: LD_VAR 0 5
30260: ST_TO_ADDR
// end ;
30261: LD_VAR 0 6
30265: RET
// export function WantPlant ( unit ) ; var task ; begin
30266: LD_INT 0
30268: PPUSH
30269: PPUSH
// result := false ;
30270: LD_ADDR_VAR 0 2
30274: PUSH
30275: LD_INT 0
30277: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30278: LD_ADDR_VAR 0 3
30282: PUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 437
30292: ST_TO_ADDR
// if task then
30293: LD_VAR 0 3
30297: IFFALSE 30325
// if task [ 1 ] [ 1 ] = p then
30299: LD_VAR 0 3
30303: PUSH
30304: LD_INT 1
30306: ARRAY
30307: PUSH
30308: LD_INT 1
30310: ARRAY
30311: PUSH
30312: LD_STRING p
30314: EQUAL
30315: IFFALSE 30325
// result := true ;
30317: LD_ADDR_VAR 0 2
30321: PUSH
30322: LD_INT 1
30324: ST_TO_ADDR
// end ;
30325: LD_VAR 0 2
30329: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30330: LD_INT 0
30332: PPUSH
30333: PPUSH
30334: PPUSH
30335: PPUSH
// if pos < 1 then
30336: LD_VAR 0 2
30340: PUSH
30341: LD_INT 1
30343: LESS
30344: IFFALSE 30348
// exit ;
30346: GO 30651
// if pos = 1 then
30348: LD_VAR 0 2
30352: PUSH
30353: LD_INT 1
30355: EQUAL
30356: IFFALSE 30389
// result := Replace ( arr , pos [ 1 ] , value ) else
30358: LD_ADDR_VAR 0 4
30362: PUSH
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_VAR 0 2
30372: PUSH
30373: LD_INT 1
30375: ARRAY
30376: PPUSH
30377: LD_VAR 0 3
30381: PPUSH
30382: CALL_OW 1
30386: ST_TO_ADDR
30387: GO 30651
// begin tmp := arr ;
30389: LD_ADDR_VAR 0 6
30393: PUSH
30394: LD_VAR 0 1
30398: ST_TO_ADDR
// s_arr := [ tmp ] ;
30399: LD_ADDR_VAR 0 7
30403: PUSH
30404: LD_VAR 0 6
30408: PUSH
30409: EMPTY
30410: LIST
30411: ST_TO_ADDR
// for i = 1 to pos - 1 do
30412: LD_ADDR_VAR 0 5
30416: PUSH
30417: DOUBLE
30418: LD_INT 1
30420: DEC
30421: ST_TO_ADDR
30422: LD_VAR 0 2
30426: PUSH
30427: LD_INT 1
30429: MINUS
30430: PUSH
30431: FOR_TO
30432: IFFALSE 30477
// begin tmp := tmp [ pos [ i ] ] ;
30434: LD_ADDR_VAR 0 6
30438: PUSH
30439: LD_VAR 0 6
30443: PUSH
30444: LD_VAR 0 2
30448: PUSH
30449: LD_VAR 0 5
30453: ARRAY
30454: ARRAY
30455: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30456: LD_ADDR_VAR 0 7
30460: PUSH
30461: LD_VAR 0 7
30465: PUSH
30466: LD_VAR 0 6
30470: PUSH
30471: EMPTY
30472: LIST
30473: ADD
30474: ST_TO_ADDR
// end ;
30475: GO 30431
30477: POP
30478: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30479: LD_ADDR_VAR 0 6
30483: PUSH
30484: LD_VAR 0 6
30488: PPUSH
30489: LD_VAR 0 2
30493: PUSH
30494: LD_VAR 0 2
30498: ARRAY
30499: PPUSH
30500: LD_VAR 0 3
30504: PPUSH
30505: CALL_OW 1
30509: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30510: LD_ADDR_VAR 0 7
30514: PUSH
30515: LD_VAR 0 7
30519: PPUSH
30520: LD_VAR 0 7
30524: PPUSH
30525: LD_VAR 0 6
30529: PPUSH
30530: CALL_OW 1
30534: ST_TO_ADDR
// for i = s_arr downto 2 do
30535: LD_ADDR_VAR 0 5
30539: PUSH
30540: DOUBLE
30541: LD_VAR 0 7
30545: INC
30546: ST_TO_ADDR
30547: LD_INT 2
30549: PUSH
30550: FOR_DOWNTO
30551: IFFALSE 30635
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30553: LD_ADDR_VAR 0 6
30557: PUSH
30558: LD_VAR 0 7
30562: PUSH
30563: LD_VAR 0 5
30567: PUSH
30568: LD_INT 1
30570: MINUS
30571: ARRAY
30572: PPUSH
30573: LD_VAR 0 2
30577: PUSH
30578: LD_VAR 0 5
30582: PUSH
30583: LD_INT 1
30585: MINUS
30586: ARRAY
30587: PPUSH
30588: LD_VAR 0 7
30592: PUSH
30593: LD_VAR 0 5
30597: ARRAY
30598: PPUSH
30599: CALL_OW 1
30603: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30604: LD_ADDR_VAR 0 7
30608: PUSH
30609: LD_VAR 0 7
30613: PPUSH
30614: LD_VAR 0 5
30618: PUSH
30619: LD_INT 1
30621: MINUS
30622: PPUSH
30623: LD_VAR 0 6
30627: PPUSH
30628: CALL_OW 1
30632: ST_TO_ADDR
// end ;
30633: GO 30550
30635: POP
30636: POP
// result := s_arr [ 1 ] ;
30637: LD_ADDR_VAR 0 4
30641: PUSH
30642: LD_VAR 0 7
30646: PUSH
30647: LD_INT 1
30649: ARRAY
30650: ST_TO_ADDR
// end ; end ;
30651: LD_VAR 0 4
30655: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30656: LD_INT 0
30658: PPUSH
30659: PPUSH
// if not list then
30660: LD_VAR 0 1
30664: NOT
30665: IFFALSE 30669
// exit ;
30667: GO 30760
// i := list [ pos1 ] ;
30669: LD_ADDR_VAR 0 5
30673: PUSH
30674: LD_VAR 0 1
30678: PUSH
30679: LD_VAR 0 2
30683: ARRAY
30684: ST_TO_ADDR
// if not i then
30685: LD_VAR 0 5
30689: NOT
30690: IFFALSE 30694
// exit ;
30692: GO 30760
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30694: LD_ADDR_VAR 0 1
30698: PUSH
30699: LD_VAR 0 1
30703: PPUSH
30704: LD_VAR 0 2
30708: PPUSH
30709: LD_VAR 0 1
30713: PUSH
30714: LD_VAR 0 3
30718: ARRAY
30719: PPUSH
30720: CALL_OW 1
30724: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30725: LD_ADDR_VAR 0 1
30729: PUSH
30730: LD_VAR 0 1
30734: PPUSH
30735: LD_VAR 0 3
30739: PPUSH
30740: LD_VAR 0 5
30744: PPUSH
30745: CALL_OW 1
30749: ST_TO_ADDR
// result := list ;
30750: LD_ADDR_VAR 0 4
30754: PUSH
30755: LD_VAR 0 1
30759: ST_TO_ADDR
// end ;
30760: LD_VAR 0 4
30764: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30765: LD_INT 0
30767: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30768: LD_ADDR_VAR 0 5
30772: PUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL_OW 250
30782: PPUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 251
30792: PPUSH
30793: LD_VAR 0 2
30797: PPUSH
30798: LD_VAR 0 3
30802: PPUSH
30803: LD_VAR 0 4
30807: PPUSH
30808: CALL 31186 0 5
30812: ST_TO_ADDR
// end ;
30813: LD_VAR 0 5
30817: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30818: LD_INT 0
30820: PPUSH
30821: PPUSH
30822: PPUSH
30823: PPUSH
// if not list or not unit then
30824: LD_VAR 0 2
30828: NOT
30829: PUSH
30830: LD_VAR 0 1
30834: NOT
30835: OR
30836: IFFALSE 30840
// exit ;
30838: GO 31181
// result := [ ] ;
30840: LD_ADDR_VAR 0 5
30844: PUSH
30845: EMPTY
30846: ST_TO_ADDR
// for i in list do
30847: LD_ADDR_VAR 0 6
30851: PUSH
30852: LD_VAR 0 2
30856: PUSH
30857: FOR_IN
30858: IFFALSE 31076
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30860: LD_ADDR_VAR 0 8
30864: PUSH
30865: LD_VAR 0 1
30869: PPUSH
30870: LD_VAR 0 6
30874: PUSH
30875: LD_INT 1
30877: ARRAY
30878: PPUSH
30879: LD_VAR 0 6
30883: PUSH
30884: LD_INT 2
30886: ARRAY
30887: PPUSH
30888: CALL_OW 297
30892: ST_TO_ADDR
// if not Count ( result ) then
30893: LD_VAR 0 5
30897: PPUSH
30898: CALL 27470 0 1
30902: NOT
30903: IFFALSE 30936
// begin result := Join ( result , [ i , tmp ] ) ;
30905: LD_ADDR_VAR 0 5
30909: PUSH
30910: LD_VAR 0 5
30914: PPUSH
30915: LD_VAR 0 6
30919: PUSH
30920: LD_VAR 0 8
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PPUSH
30929: CALL 63079 0 2
30933: ST_TO_ADDR
// continue ;
30934: GO 30857
// end ; if result [ result ] [ 2 ] <= tmp then
30936: LD_VAR 0 5
30940: PUSH
30941: LD_VAR 0 5
30945: ARRAY
30946: PUSH
30947: LD_INT 2
30949: ARRAY
30950: PUSH
30951: LD_VAR 0 8
30955: LESSEQUAL
30956: IFFALSE 30989
// result := Join ( result , [ i , tmp ] ) else
30958: LD_ADDR_VAR 0 5
30962: PUSH
30963: LD_VAR 0 5
30967: PPUSH
30968: LD_VAR 0 6
30972: PUSH
30973: LD_VAR 0 8
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PPUSH
30982: CALL 63079 0 2
30986: ST_TO_ADDR
30987: GO 31074
// begin for j := 1 to Count ( result ) do
30989: LD_ADDR_VAR 0 7
30993: PUSH
30994: DOUBLE
30995: LD_INT 1
30997: DEC
30998: ST_TO_ADDR
30999: LD_VAR 0 5
31003: PPUSH
31004: CALL 27470 0 1
31008: PUSH
31009: FOR_TO
31010: IFFALSE 31072
// begin if tmp < result [ j ] [ 2 ] then
31012: LD_VAR 0 8
31016: PUSH
31017: LD_VAR 0 5
31021: PUSH
31022: LD_VAR 0 7
31026: ARRAY
31027: PUSH
31028: LD_INT 2
31030: ARRAY
31031: LESS
31032: IFFALSE 31070
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31034: LD_ADDR_VAR 0 5
31038: PUSH
31039: LD_VAR 0 5
31043: PPUSH
31044: LD_VAR 0 7
31048: PPUSH
31049: LD_VAR 0 6
31053: PUSH
31054: LD_VAR 0 8
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PPUSH
31063: CALL_OW 2
31067: ST_TO_ADDR
// break ;
31068: GO 31072
// end ; end ;
31070: GO 31009
31072: POP
31073: POP
// end ; end ;
31074: GO 30857
31076: POP
31077: POP
// if result and not asc then
31078: LD_VAR 0 5
31082: PUSH
31083: LD_VAR 0 3
31087: NOT
31088: AND
31089: IFFALSE 31106
// result := ReverseArray ( result ) ;
31091: LD_ADDR_VAR 0 5
31095: PUSH
31096: LD_VAR 0 5
31100: PPUSH
31101: CALL 58346 0 1
31105: ST_TO_ADDR
// tmp := [ ] ;
31106: LD_ADDR_VAR 0 8
31110: PUSH
31111: EMPTY
31112: ST_TO_ADDR
// if mode then
31113: LD_VAR 0 4
31117: IFFALSE 31181
// begin for i := 1 to result do
31119: LD_ADDR_VAR 0 6
31123: PUSH
31124: DOUBLE
31125: LD_INT 1
31127: DEC
31128: ST_TO_ADDR
31129: LD_VAR 0 5
31133: PUSH
31134: FOR_TO
31135: IFFALSE 31169
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31137: LD_ADDR_VAR 0 8
31141: PUSH
31142: LD_VAR 0 8
31146: PPUSH
31147: LD_VAR 0 5
31151: PUSH
31152: LD_VAR 0 6
31156: ARRAY
31157: PUSH
31158: LD_INT 1
31160: ARRAY
31161: PPUSH
31162: CALL 63079 0 2
31166: ST_TO_ADDR
31167: GO 31134
31169: POP
31170: POP
// result := tmp ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 8
31180: ST_TO_ADDR
// end ; end ;
31181: LD_VAR 0 5
31185: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31186: LD_INT 0
31188: PPUSH
31189: PPUSH
31190: PPUSH
31191: PPUSH
// if not list then
31192: LD_VAR 0 3
31196: NOT
31197: IFFALSE 31201
// exit ;
31199: GO 31589
// result := [ ] ;
31201: LD_ADDR_VAR 0 6
31205: PUSH
31206: EMPTY
31207: ST_TO_ADDR
// for i in list do
31208: LD_ADDR_VAR 0 7
31212: PUSH
31213: LD_VAR 0 3
31217: PUSH
31218: FOR_IN
31219: IFFALSE 31421
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31221: LD_ADDR_VAR 0 9
31225: PUSH
31226: LD_VAR 0 7
31230: PPUSH
31231: LD_VAR 0 1
31235: PPUSH
31236: LD_VAR 0 2
31240: PPUSH
31241: CALL_OW 297
31245: ST_TO_ADDR
// if not result then
31246: LD_VAR 0 6
31250: NOT
31251: IFFALSE 31277
// result := [ [ i , tmp ] ] else
31253: LD_ADDR_VAR 0 6
31257: PUSH
31258: LD_VAR 0 7
31262: PUSH
31263: LD_VAR 0 9
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: EMPTY
31273: LIST
31274: ST_TO_ADDR
31275: GO 31419
// begin if result [ result ] [ 2 ] <= tmp then
31277: LD_VAR 0 6
31281: PUSH
31282: LD_VAR 0 6
31286: ARRAY
31287: PUSH
31288: LD_INT 2
31290: ARRAY
31291: PUSH
31292: LD_VAR 0 9
31296: LESSEQUAL
31297: IFFALSE 31339
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31299: LD_ADDR_VAR 0 6
31303: PUSH
31304: LD_VAR 0 6
31308: PPUSH
31309: LD_VAR 0 6
31313: PUSH
31314: LD_INT 1
31316: PLUS
31317: PPUSH
31318: LD_VAR 0 7
31322: PUSH
31323: LD_VAR 0 9
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PPUSH
31332: CALL_OW 2
31336: ST_TO_ADDR
31337: GO 31419
// for j := 1 to result do
31339: LD_ADDR_VAR 0 8
31343: PUSH
31344: DOUBLE
31345: LD_INT 1
31347: DEC
31348: ST_TO_ADDR
31349: LD_VAR 0 6
31353: PUSH
31354: FOR_TO
31355: IFFALSE 31417
// begin if tmp < result [ j ] [ 2 ] then
31357: LD_VAR 0 9
31361: PUSH
31362: LD_VAR 0 6
31366: PUSH
31367: LD_VAR 0 8
31371: ARRAY
31372: PUSH
31373: LD_INT 2
31375: ARRAY
31376: LESS
31377: IFFALSE 31415
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31379: LD_ADDR_VAR 0 6
31383: PUSH
31384: LD_VAR 0 6
31388: PPUSH
31389: LD_VAR 0 8
31393: PPUSH
31394: LD_VAR 0 7
31398: PUSH
31399: LD_VAR 0 9
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PPUSH
31408: CALL_OW 2
31412: ST_TO_ADDR
// break ;
31413: GO 31417
// end ; end ;
31415: GO 31354
31417: POP
31418: POP
// end ; end ;
31419: GO 31218
31421: POP
31422: POP
// if result and not asc then
31423: LD_VAR 0 6
31427: PUSH
31428: LD_VAR 0 4
31432: NOT
31433: AND
31434: IFFALSE 31509
// begin tmp := result ;
31436: LD_ADDR_VAR 0 9
31440: PUSH
31441: LD_VAR 0 6
31445: ST_TO_ADDR
// for i = tmp downto 1 do
31446: LD_ADDR_VAR 0 7
31450: PUSH
31451: DOUBLE
31452: LD_VAR 0 9
31456: INC
31457: ST_TO_ADDR
31458: LD_INT 1
31460: PUSH
31461: FOR_DOWNTO
31462: IFFALSE 31507
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31464: LD_ADDR_VAR 0 6
31468: PUSH
31469: LD_VAR 0 6
31473: PPUSH
31474: LD_VAR 0 9
31478: PUSH
31479: LD_VAR 0 7
31483: MINUS
31484: PUSH
31485: LD_INT 1
31487: PLUS
31488: PPUSH
31489: LD_VAR 0 9
31493: PUSH
31494: LD_VAR 0 7
31498: ARRAY
31499: PPUSH
31500: CALL_OW 1
31504: ST_TO_ADDR
31505: GO 31461
31507: POP
31508: POP
// end ; tmp := [ ] ;
31509: LD_ADDR_VAR 0 9
31513: PUSH
31514: EMPTY
31515: ST_TO_ADDR
// if mode then
31516: LD_VAR 0 5
31520: IFFALSE 31589
// begin for i = 1 to result do
31522: LD_ADDR_VAR 0 7
31526: PUSH
31527: DOUBLE
31528: LD_INT 1
31530: DEC
31531: ST_TO_ADDR
31532: LD_VAR 0 6
31536: PUSH
31537: FOR_TO
31538: IFFALSE 31577
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31540: LD_ADDR_VAR 0 9
31544: PUSH
31545: LD_VAR 0 9
31549: PPUSH
31550: LD_VAR 0 7
31554: PPUSH
31555: LD_VAR 0 6
31559: PUSH
31560: LD_VAR 0 7
31564: ARRAY
31565: PUSH
31566: LD_INT 1
31568: ARRAY
31569: PPUSH
31570: CALL_OW 1
31574: ST_TO_ADDR
31575: GO 31537
31577: POP
31578: POP
// result := tmp ;
31579: LD_ADDR_VAR 0 6
31583: PUSH
31584: LD_VAR 0 9
31588: ST_TO_ADDR
// end ; end ;
31589: LD_VAR 0 6
31593: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31594: LD_INT 0
31596: PPUSH
31597: PPUSH
31598: PPUSH
31599: PPUSH
31600: PPUSH
31601: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31602: LD_ADDR_VAR 0 5
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: ST_TO_ADDR
// if not x or not y then
31624: LD_VAR 0 2
31628: NOT
31629: PUSH
31630: LD_VAR 0 3
31634: NOT
31635: OR
31636: IFFALSE 31640
// exit ;
31638: GO 33290
// if not range then
31640: LD_VAR 0 4
31644: NOT
31645: IFFALSE 31655
// range := 10 ;
31647: LD_ADDR_VAR 0 4
31651: PUSH
31652: LD_INT 10
31654: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31655: LD_ADDR_VAR 0 8
31659: PUSH
31660: LD_INT 81
31662: PUSH
31663: LD_VAR 0 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 92
31674: PUSH
31675: LD_VAR 0 2
31679: PUSH
31680: LD_VAR 0 3
31684: PUSH
31685: LD_VAR 0 4
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: LD_INT 21
31701: PUSH
31702: LD_INT 3
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: PPUSH
31718: CALL_OW 69
31722: ST_TO_ADDR
// if not tmp then
31723: LD_VAR 0 8
31727: NOT
31728: IFFALSE 31732
// exit ;
31730: GO 33290
// for i in tmp do
31732: LD_ADDR_VAR 0 6
31736: PUSH
31737: LD_VAR 0 8
31741: PUSH
31742: FOR_IN
31743: IFFALSE 33265
// begin points := [ 0 , 0 , 0 ] ;
31745: LD_ADDR_VAR 0 9
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: ST_TO_ADDR
// bpoints := 1 ;
31764: LD_ADDR_VAR 0 10
31768: PUSH
31769: LD_INT 1
31771: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31772: LD_VAR 0 6
31776: PPUSH
31777: CALL_OW 247
31781: PUSH
31782: LD_INT 1
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 32368
31790: POP
// begin if GetClass ( i ) = 1 then
31791: LD_VAR 0 6
31795: PPUSH
31796: CALL_OW 257
31800: PUSH
31801: LD_INT 1
31803: EQUAL
31804: IFFALSE 31825
// points := [ 10 , 5 , 3 ] ;
31806: LD_ADDR_VAR 0 9
31810: PUSH
31811: LD_INT 10
31813: PUSH
31814: LD_INT 5
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31825: LD_VAR 0 6
31829: PPUSH
31830: CALL_OW 257
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: LD_INT 4
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: IN
31849: IFFALSE 31870
// points := [ 3 , 2 , 1 ] ;
31851: LD_ADDR_VAR 0 9
31855: PUSH
31856: LD_INT 3
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31870: LD_VAR 0 6
31874: PPUSH
31875: CALL_OW 257
31879: PUSH
31880: LD_INT 5
31882: EQUAL
31883: IFFALSE 31904
// points := [ 130 , 5 , 2 ] ;
31885: LD_ADDR_VAR 0 9
31889: PUSH
31890: LD_INT 130
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31904: LD_VAR 0 6
31908: PPUSH
31909: CALL_OW 257
31913: PUSH
31914: LD_INT 8
31916: EQUAL
31917: IFFALSE 31938
// points := [ 35 , 35 , 30 ] ;
31919: LD_ADDR_VAR 0 9
31923: PUSH
31924: LD_INT 35
31926: PUSH
31927: LD_INT 35
31929: PUSH
31930: LD_INT 30
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31938: LD_VAR 0 6
31942: PPUSH
31943: CALL_OW 257
31947: PUSH
31948: LD_INT 9
31950: EQUAL
31951: IFFALSE 31972
// points := [ 20 , 55 , 40 ] ;
31953: LD_ADDR_VAR 0 9
31957: PUSH
31958: LD_INT 20
31960: PUSH
31961: LD_INT 55
31963: PUSH
31964: LD_INT 40
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 257
31981: PUSH
31982: LD_INT 12
31984: PUSH
31985: LD_INT 16
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: IN
31992: IFFALSE 32013
// points := [ 5 , 3 , 2 ] ;
31994: LD_ADDR_VAR 0 9
31998: PUSH
31999: LD_INT 5
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32013: LD_VAR 0 6
32017: PPUSH
32018: CALL_OW 257
32022: PUSH
32023: LD_INT 17
32025: EQUAL
32026: IFFALSE 32047
// points := [ 100 , 50 , 75 ] ;
32028: LD_ADDR_VAR 0 9
32032: PUSH
32033: LD_INT 100
32035: PUSH
32036: LD_INT 50
32038: PUSH
32039: LD_INT 75
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32047: LD_VAR 0 6
32051: PPUSH
32052: CALL_OW 257
32056: PUSH
32057: LD_INT 15
32059: EQUAL
32060: IFFALSE 32081
// points := [ 10 , 5 , 3 ] ;
32062: LD_ADDR_VAR 0 9
32066: PUSH
32067: LD_INT 10
32069: PUSH
32070: LD_INT 5
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32081: LD_VAR 0 6
32085: PPUSH
32086: CALL_OW 257
32090: PUSH
32091: LD_INT 14
32093: EQUAL
32094: IFFALSE 32115
// points := [ 10 , 0 , 0 ] ;
32096: LD_ADDR_VAR 0 9
32100: PUSH
32101: LD_INT 10
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32115: LD_VAR 0 6
32119: PPUSH
32120: CALL_OW 257
32124: PUSH
32125: LD_INT 11
32127: EQUAL
32128: IFFALSE 32149
// points := [ 30 , 10 , 5 ] ;
32130: LD_ADDR_VAR 0 9
32134: PUSH
32135: LD_INT 30
32137: PUSH
32138: LD_INT 10
32140: PUSH
32141: LD_INT 5
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32149: LD_VAR 0 1
32153: PPUSH
32154: LD_INT 5
32156: PPUSH
32157: CALL_OW 321
32161: PUSH
32162: LD_INT 2
32164: EQUAL
32165: IFFALSE 32182
// bpoints := bpoints * 1.8 ;
32167: LD_ADDR_VAR 0 10
32171: PUSH
32172: LD_VAR 0 10
32176: PUSH
32177: LD_REAL  1.80000000000000E+0000
32180: MUL
32181: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32182: LD_VAR 0 6
32186: PPUSH
32187: CALL_OW 257
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: IN
32210: PUSH
32211: LD_VAR 0 1
32215: PPUSH
32216: LD_INT 51
32218: PPUSH
32219: CALL_OW 321
32223: PUSH
32224: LD_INT 2
32226: EQUAL
32227: AND
32228: IFFALSE 32245
// bpoints := bpoints * 1.2 ;
32230: LD_ADDR_VAR 0 10
32234: PUSH
32235: LD_VAR 0 10
32239: PUSH
32240: LD_REAL  1.20000000000000E+0000
32243: MUL
32244: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32245: LD_VAR 0 6
32249: PPUSH
32250: CALL_OW 257
32254: PUSH
32255: LD_INT 5
32257: PUSH
32258: LD_INT 7
32260: PUSH
32261: LD_INT 9
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: LIST
32268: IN
32269: PUSH
32270: LD_VAR 0 1
32274: PPUSH
32275: LD_INT 52
32277: PPUSH
32278: CALL_OW 321
32282: PUSH
32283: LD_INT 2
32285: EQUAL
32286: AND
32287: IFFALSE 32304
// bpoints := bpoints * 1.5 ;
32289: LD_ADDR_VAR 0 10
32293: PUSH
32294: LD_VAR 0 10
32298: PUSH
32299: LD_REAL  1.50000000000000E+0000
32302: MUL
32303: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32304: LD_VAR 0 1
32308: PPUSH
32309: LD_INT 66
32311: PPUSH
32312: CALL_OW 321
32316: PUSH
32317: LD_INT 2
32319: EQUAL
32320: IFFALSE 32337
// bpoints := bpoints * 1.1 ;
32322: LD_ADDR_VAR 0 10
32326: PUSH
32327: LD_VAR 0 10
32331: PUSH
32332: LD_REAL  1.10000000000000E+0000
32335: MUL
32336: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32337: LD_ADDR_VAR 0 10
32341: PUSH
32342: LD_VAR 0 10
32346: PUSH
32347: LD_VAR 0 6
32351: PPUSH
32352: LD_INT 1
32354: PPUSH
32355: CALL_OW 259
32359: PUSH
32360: LD_REAL  1.15000000000000E+0000
32363: MUL
32364: MUL
32365: ST_TO_ADDR
// end ; unit_vehicle :
32366: GO 33194
32368: LD_INT 2
32370: DOUBLE
32371: EQUAL
32372: IFTRUE 32376
32374: GO 33182
32376: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32377: LD_VAR 0 6
32381: PPUSH
32382: CALL_OW 264
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: LD_INT 42
32392: PUSH
32393: LD_INT 24
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: IN
32401: IFFALSE 32422
// points := [ 25 , 5 , 3 ] ;
32403: LD_ADDR_VAR 0 9
32407: PUSH
32408: LD_INT 25
32410: PUSH
32411: LD_INT 5
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32422: LD_VAR 0 6
32426: PPUSH
32427: CALL_OW 264
32431: PUSH
32432: LD_INT 4
32434: PUSH
32435: LD_INT 43
32437: PUSH
32438: LD_INT 25
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: IN
32446: IFFALSE 32467
// points := [ 40 , 15 , 5 ] ;
32448: LD_ADDR_VAR 0 9
32452: PUSH
32453: LD_INT 40
32455: PUSH
32456: LD_INT 15
32458: PUSH
32459: LD_INT 5
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32467: LD_VAR 0 6
32471: PPUSH
32472: CALL_OW 264
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: LD_INT 23
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: IN
32487: IFFALSE 32508
// points := [ 7 , 25 , 8 ] ;
32489: LD_ADDR_VAR 0 9
32493: PUSH
32494: LD_INT 7
32496: PUSH
32497: LD_INT 25
32499: PUSH
32500: LD_INT 8
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32508: LD_VAR 0 6
32512: PPUSH
32513: CALL_OW 264
32517: PUSH
32518: LD_INT 5
32520: PUSH
32521: LD_INT 27
32523: PUSH
32524: LD_INT 44
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: IN
32532: IFFALSE 32553
// points := [ 14 , 50 , 16 ] ;
32534: LD_ADDR_VAR 0 9
32538: PUSH
32539: LD_INT 14
32541: PUSH
32542: LD_INT 50
32544: PUSH
32545: LD_INT 16
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32553: LD_VAR 0 6
32557: PPUSH
32558: CALL_OW 264
32562: PUSH
32563: LD_INT 6
32565: PUSH
32566: LD_INT 46
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: IN
32573: IFFALSE 32594
// points := [ 32 , 120 , 70 ] ;
32575: LD_ADDR_VAR 0 9
32579: PUSH
32580: LD_INT 32
32582: PUSH
32583: LD_INT 120
32585: PUSH
32586: LD_INT 70
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32594: LD_VAR 0 6
32598: PPUSH
32599: CALL_OW 264
32603: PUSH
32604: LD_INT 7
32606: PUSH
32607: LD_INT 28
32609: PUSH
32610: LD_INT 45
32612: PUSH
32613: LD_INT 92
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: IN
32622: IFFALSE 32643
// points := [ 35 , 20 , 45 ] ;
32624: LD_ADDR_VAR 0 9
32628: PUSH
32629: LD_INT 35
32631: PUSH
32632: LD_INT 20
32634: PUSH
32635: LD_INT 45
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32643: LD_VAR 0 6
32647: PPUSH
32648: CALL_OW 264
32652: PUSH
32653: LD_INT 47
32655: PUSH
32656: EMPTY
32657: LIST
32658: IN
32659: IFFALSE 32680
// points := [ 67 , 45 , 75 ] ;
32661: LD_ADDR_VAR 0 9
32665: PUSH
32666: LD_INT 67
32668: PUSH
32669: LD_INT 45
32671: PUSH
32672: LD_INT 75
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32680: LD_VAR 0 6
32684: PPUSH
32685: CALL_OW 264
32689: PUSH
32690: LD_INT 26
32692: PUSH
32693: EMPTY
32694: LIST
32695: IN
32696: IFFALSE 32717
// points := [ 120 , 30 , 80 ] ;
32698: LD_ADDR_VAR 0 9
32702: PUSH
32703: LD_INT 120
32705: PUSH
32706: LD_INT 30
32708: PUSH
32709: LD_INT 80
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32717: LD_VAR 0 6
32721: PPUSH
32722: CALL_OW 264
32726: PUSH
32727: LD_INT 22
32729: PUSH
32730: EMPTY
32731: LIST
32732: IN
32733: IFFALSE 32754
// points := [ 40 , 1 , 1 ] ;
32735: LD_ADDR_VAR 0 9
32739: PUSH
32740: LD_INT 40
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32754: LD_VAR 0 6
32758: PPUSH
32759: CALL_OW 264
32763: PUSH
32764: LD_INT 29
32766: PUSH
32767: EMPTY
32768: LIST
32769: IN
32770: IFFALSE 32791
// points := [ 70 , 200 , 400 ] ;
32772: LD_ADDR_VAR 0 9
32776: PUSH
32777: LD_INT 70
32779: PUSH
32780: LD_INT 200
32782: PUSH
32783: LD_INT 400
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32791: LD_VAR 0 6
32795: PPUSH
32796: CALL_OW 264
32800: PUSH
32801: LD_INT 14
32803: PUSH
32804: LD_INT 53
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: IN
32811: IFFALSE 32832
// points := [ 40 , 10 , 20 ] ;
32813: LD_ADDR_VAR 0 9
32817: PUSH
32818: LD_INT 40
32820: PUSH
32821: LD_INT 10
32823: PUSH
32824: LD_INT 20
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32832: LD_VAR 0 6
32836: PPUSH
32837: CALL_OW 264
32841: PUSH
32842: LD_INT 9
32844: PUSH
32845: EMPTY
32846: LIST
32847: IN
32848: IFFALSE 32869
// points := [ 5 , 70 , 20 ] ;
32850: LD_ADDR_VAR 0 9
32854: PUSH
32855: LD_INT 5
32857: PUSH
32858: LD_INT 70
32860: PUSH
32861: LD_INT 20
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: LIST
32868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32869: LD_VAR 0 6
32873: PPUSH
32874: CALL_OW 264
32878: PUSH
32879: LD_INT 10
32881: PUSH
32882: EMPTY
32883: LIST
32884: IN
32885: IFFALSE 32906
// points := [ 35 , 110 , 70 ] ;
32887: LD_ADDR_VAR 0 9
32891: PUSH
32892: LD_INT 35
32894: PUSH
32895: LD_INT 110
32897: PUSH
32898: LD_INT 70
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32906: LD_VAR 0 6
32910: PPUSH
32911: CALL_OW 265
32915: PUSH
32916: LD_INT 25
32918: EQUAL
32919: IFFALSE 32940
// points := [ 80 , 65 , 100 ] ;
32921: LD_ADDR_VAR 0 9
32925: PUSH
32926: LD_INT 80
32928: PUSH
32929: LD_INT 65
32931: PUSH
32932: LD_INT 100
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: LIST
32939: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32940: LD_VAR 0 6
32944: PPUSH
32945: CALL_OW 263
32949: PUSH
32950: LD_INT 1
32952: EQUAL
32953: IFFALSE 32988
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32955: LD_ADDR_VAR 0 10
32959: PUSH
32960: LD_VAR 0 10
32964: PUSH
32965: LD_VAR 0 6
32969: PPUSH
32970: CALL_OW 311
32974: PPUSH
32975: LD_INT 3
32977: PPUSH
32978: CALL_OW 259
32982: PUSH
32983: LD_INT 4
32985: MUL
32986: MUL
32987: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32988: LD_VAR 0 6
32992: PPUSH
32993: CALL_OW 263
32997: PUSH
32998: LD_INT 2
33000: EQUAL
33001: IFFALSE 33052
// begin j := IsControledBy ( i ) ;
33003: LD_ADDR_VAR 0 7
33007: PUSH
33008: LD_VAR 0 6
33012: PPUSH
33013: CALL_OW 312
33017: ST_TO_ADDR
// if j then
33018: LD_VAR 0 7
33022: IFFALSE 33052
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33024: LD_ADDR_VAR 0 10
33028: PUSH
33029: LD_VAR 0 10
33033: PUSH
33034: LD_VAR 0 7
33038: PPUSH
33039: LD_INT 3
33041: PPUSH
33042: CALL_OW 259
33046: PUSH
33047: LD_INT 3
33049: MUL
33050: MUL
33051: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33052: LD_VAR 0 6
33056: PPUSH
33057: CALL_OW 264
33061: PUSH
33062: LD_INT 5
33064: PUSH
33065: LD_INT 6
33067: PUSH
33068: LD_INT 46
33070: PUSH
33071: LD_INT 44
33073: PUSH
33074: LD_INT 47
33076: PUSH
33077: LD_INT 45
33079: PUSH
33080: LD_INT 28
33082: PUSH
33083: LD_INT 7
33085: PUSH
33086: LD_INT 27
33088: PUSH
33089: LD_INT 29
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: IN
33104: PUSH
33105: LD_VAR 0 1
33109: PPUSH
33110: LD_INT 52
33112: PPUSH
33113: CALL_OW 321
33117: PUSH
33118: LD_INT 2
33120: EQUAL
33121: AND
33122: IFFALSE 33139
// bpoints := bpoints * 1.2 ;
33124: LD_ADDR_VAR 0 10
33128: PUSH
33129: LD_VAR 0 10
33133: PUSH
33134: LD_REAL  1.20000000000000E+0000
33137: MUL
33138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33139: LD_VAR 0 6
33143: PPUSH
33144: CALL_OW 264
33148: PUSH
33149: LD_INT 6
33151: PUSH
33152: LD_INT 46
33154: PUSH
33155: LD_INT 47
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: IN
33163: IFFALSE 33180
// bpoints := bpoints * 1.2 ;
33165: LD_ADDR_VAR 0 10
33169: PUSH
33170: LD_VAR 0 10
33174: PUSH
33175: LD_REAL  1.20000000000000E+0000
33178: MUL
33179: ST_TO_ADDR
// end ; unit_building :
33180: GO 33194
33182: LD_INT 3
33184: DOUBLE
33185: EQUAL
33186: IFTRUE 33190
33188: GO 33193
33190: POP
// ; end ;
33191: GO 33194
33193: POP
// for j = 1 to 3 do
33194: LD_ADDR_VAR 0 7
33198: PUSH
33199: DOUBLE
33200: LD_INT 1
33202: DEC
33203: ST_TO_ADDR
33204: LD_INT 3
33206: PUSH
33207: FOR_TO
33208: IFFALSE 33261
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33210: LD_ADDR_VAR 0 5
33214: PUSH
33215: LD_VAR 0 5
33219: PPUSH
33220: LD_VAR 0 7
33224: PPUSH
33225: LD_VAR 0 5
33229: PUSH
33230: LD_VAR 0 7
33234: ARRAY
33235: PUSH
33236: LD_VAR 0 9
33240: PUSH
33241: LD_VAR 0 7
33245: ARRAY
33246: PUSH
33247: LD_VAR 0 10
33251: MUL
33252: PLUS
33253: PPUSH
33254: CALL_OW 1
33258: ST_TO_ADDR
33259: GO 33207
33261: POP
33262: POP
// end ;
33263: GO 31742
33265: POP
33266: POP
// result := Replace ( result , 4 , tmp ) ;
33267: LD_ADDR_VAR 0 5
33271: PUSH
33272: LD_VAR 0 5
33276: PPUSH
33277: LD_INT 4
33279: PPUSH
33280: LD_VAR 0 8
33284: PPUSH
33285: CALL_OW 1
33289: ST_TO_ADDR
// end ;
33290: LD_VAR 0 5
33294: RET
// export function DangerAtRange ( unit , range ) ; begin
33295: LD_INT 0
33297: PPUSH
// if not unit then
33298: LD_VAR 0 1
33302: NOT
33303: IFFALSE 33307
// exit ;
33305: GO 33352
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33307: LD_ADDR_VAR 0 3
33311: PUSH
33312: LD_VAR 0 1
33316: PPUSH
33317: CALL_OW 255
33321: PPUSH
33322: LD_VAR 0 1
33326: PPUSH
33327: CALL_OW 250
33331: PPUSH
33332: LD_VAR 0 1
33336: PPUSH
33337: CALL_OW 251
33341: PPUSH
33342: LD_VAR 0 2
33346: PPUSH
33347: CALL 31594 0 4
33351: ST_TO_ADDR
// end ;
33352: LD_VAR 0 3
33356: RET
// export function DangerInArea ( side , area ) ; begin
33357: LD_INT 0
33359: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33360: LD_ADDR_VAR 0 3
33364: PUSH
33365: LD_VAR 0 2
33369: PPUSH
33370: LD_INT 81
33372: PUSH
33373: LD_VAR 0 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PPUSH
33382: CALL_OW 70
33386: ST_TO_ADDR
// end ;
33387: LD_VAR 0 3
33391: RET
// export function IsExtension ( b ) ; begin
33392: LD_INT 0
33394: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33395: LD_ADDR_VAR 0 2
33399: PUSH
33400: LD_VAR 0 1
33404: PUSH
33405: LD_INT 23
33407: PUSH
33408: LD_INT 20
33410: PUSH
33411: LD_INT 22
33413: PUSH
33414: LD_INT 17
33416: PUSH
33417: LD_INT 24
33419: PUSH
33420: LD_INT 21
33422: PUSH
33423: LD_INT 19
33425: PUSH
33426: LD_INT 16
33428: PUSH
33429: LD_INT 25
33431: PUSH
33432: LD_INT 18
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: IN
33447: ST_TO_ADDR
// end ;
33448: LD_VAR 0 2
33452: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33453: LD_INT 0
33455: PPUSH
33456: PPUSH
33457: PPUSH
// result := [ ] ;
33458: LD_ADDR_VAR 0 4
33462: PUSH
33463: EMPTY
33464: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33465: LD_ADDR_VAR 0 5
33469: PUSH
33470: LD_VAR 0 2
33474: PPUSH
33475: LD_INT 21
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PPUSH
33485: CALL_OW 70
33489: ST_TO_ADDR
// if not tmp then
33490: LD_VAR 0 5
33494: NOT
33495: IFFALSE 33499
// exit ;
33497: GO 33563
// if checkLink then
33499: LD_VAR 0 3
33503: IFFALSE 33553
// begin for i in tmp do
33505: LD_ADDR_VAR 0 6
33509: PUSH
33510: LD_VAR 0 5
33514: PUSH
33515: FOR_IN
33516: IFFALSE 33551
// if GetBase ( i ) <> base then
33518: LD_VAR 0 6
33522: PPUSH
33523: CALL_OW 274
33527: PUSH
33528: LD_VAR 0 1
33532: NONEQUAL
33533: IFFALSE 33549
// ComLinkToBase ( base , i ) ;
33535: LD_VAR 0 1
33539: PPUSH
33540: LD_VAR 0 6
33544: PPUSH
33545: CALL_OW 169
33549: GO 33515
33551: POP
33552: POP
// end ; result := tmp ;
33553: LD_ADDR_VAR 0 4
33557: PUSH
33558: LD_VAR 0 5
33562: ST_TO_ADDR
// end ;
33563: LD_VAR 0 4
33567: RET
// export function ComComplete ( units , b ) ; var i ; begin
33568: LD_INT 0
33570: PPUSH
33571: PPUSH
// if not units then
33572: LD_VAR 0 1
33576: NOT
33577: IFFALSE 33581
// exit ;
33579: GO 33671
// for i in units do
33581: LD_ADDR_VAR 0 4
33585: PUSH
33586: LD_VAR 0 1
33590: PUSH
33591: FOR_IN
33592: IFFALSE 33669
// if BuildingStatus ( b ) = bs_build then
33594: LD_VAR 0 2
33598: PPUSH
33599: CALL_OW 461
33603: PUSH
33604: LD_INT 1
33606: EQUAL
33607: IFFALSE 33667
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33609: LD_VAR 0 4
33613: PPUSH
33614: LD_STRING h
33616: PUSH
33617: LD_VAR 0 2
33621: PPUSH
33622: CALL_OW 250
33626: PUSH
33627: LD_VAR 0 2
33631: PPUSH
33632: CALL_OW 251
33636: PUSH
33637: LD_VAR 0 2
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: PPUSH
33663: CALL_OW 446
33667: GO 33591
33669: POP
33670: POP
// end ;
33671: LD_VAR 0 3
33675: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33676: LD_INT 0
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33684: LD_VAR 0 1
33688: NOT
33689: PUSH
33690: LD_VAR 0 1
33694: PPUSH
33695: CALL_OW 263
33699: PUSH
33700: LD_INT 2
33702: NONEQUAL
33703: OR
33704: IFFALSE 33708
// exit ;
33706: GO 34024
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33708: LD_ADDR_VAR 0 6
33712: PUSH
33713: LD_INT 22
33715: PUSH
33716: LD_VAR 0 1
33720: PPUSH
33721: CALL_OW 255
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: LD_INT 30
33735: PUSH
33736: LD_INT 36
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 34
33745: PUSH
33746: LD_INT 31
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PPUSH
33762: CALL_OW 69
33766: ST_TO_ADDR
// if not tmp then
33767: LD_VAR 0 6
33771: NOT
33772: IFFALSE 33776
// exit ;
33774: GO 34024
// result := [ ] ;
33776: LD_ADDR_VAR 0 2
33780: PUSH
33781: EMPTY
33782: ST_TO_ADDR
// for i in tmp do
33783: LD_ADDR_VAR 0 3
33787: PUSH
33788: LD_VAR 0 6
33792: PUSH
33793: FOR_IN
33794: IFFALSE 33865
// begin t := UnitsInside ( i ) ;
33796: LD_ADDR_VAR 0 4
33800: PUSH
33801: LD_VAR 0 3
33805: PPUSH
33806: CALL_OW 313
33810: ST_TO_ADDR
// if t then
33811: LD_VAR 0 4
33815: IFFALSE 33863
// for j in t do
33817: LD_ADDR_VAR 0 7
33821: PUSH
33822: LD_VAR 0 4
33826: PUSH
33827: FOR_IN
33828: IFFALSE 33861
// result := Replace ( result , result + 1 , j ) ;
33830: LD_ADDR_VAR 0 2
33834: PUSH
33835: LD_VAR 0 2
33839: PPUSH
33840: LD_VAR 0 2
33844: PUSH
33845: LD_INT 1
33847: PLUS
33848: PPUSH
33849: LD_VAR 0 7
33853: PPUSH
33854: CALL_OW 1
33858: ST_TO_ADDR
33859: GO 33827
33861: POP
33862: POP
// end ;
33863: GO 33793
33865: POP
33866: POP
// if not result then
33867: LD_VAR 0 2
33871: NOT
33872: IFFALSE 33876
// exit ;
33874: GO 34024
// mech := result [ 1 ] ;
33876: LD_ADDR_VAR 0 5
33880: PUSH
33881: LD_VAR 0 2
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: ST_TO_ADDR
// if result > 1 then
33890: LD_VAR 0 2
33894: PUSH
33895: LD_INT 1
33897: GREATER
33898: IFFALSE 34010
// begin for i = 2 to result do
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: DOUBLE
33906: LD_INT 2
33908: DEC
33909: ST_TO_ADDR
33910: LD_VAR 0 2
33914: PUSH
33915: FOR_TO
33916: IFFALSE 34008
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33918: LD_ADDR_VAR 0 4
33922: PUSH
33923: LD_VAR 0 2
33927: PUSH
33928: LD_VAR 0 3
33932: ARRAY
33933: PPUSH
33934: LD_INT 3
33936: PPUSH
33937: CALL_OW 259
33941: PUSH
33942: LD_VAR 0 2
33946: PUSH
33947: LD_VAR 0 3
33951: ARRAY
33952: PPUSH
33953: CALL_OW 432
33957: MINUS
33958: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33959: LD_VAR 0 4
33963: PUSH
33964: LD_VAR 0 5
33968: PPUSH
33969: LD_INT 3
33971: PPUSH
33972: CALL_OW 259
33976: PUSH
33977: LD_VAR 0 5
33981: PPUSH
33982: CALL_OW 432
33986: MINUS
33987: GREATEREQUAL
33988: IFFALSE 34006
// mech := result [ i ] ;
33990: LD_ADDR_VAR 0 5
33994: PUSH
33995: LD_VAR 0 2
33999: PUSH
34000: LD_VAR 0 3
34004: ARRAY
34005: ST_TO_ADDR
// end ;
34006: GO 33915
34008: POP
34009: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34010: LD_VAR 0 1
34014: PPUSH
34015: LD_VAR 0 5
34019: PPUSH
34020: CALL_OW 135
// end ;
34024: LD_VAR 0 2
34028: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34029: LD_INT 0
34031: PPUSH
34032: PPUSH
34033: PPUSH
34034: PPUSH
34035: PPUSH
34036: PPUSH
34037: PPUSH
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
34042: PPUSH
34043: PPUSH
// result := [ ] ;
34044: LD_ADDR_VAR 0 7
34048: PUSH
34049: EMPTY
34050: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 266
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: IN
34071: NOT
34072: IFFALSE 34076
// exit ;
34074: GO 35710
// if name then
34076: LD_VAR 0 3
34080: IFFALSE 34096
// SetBName ( base_dep , name ) ;
34082: LD_VAR 0 1
34086: PPUSH
34087: LD_VAR 0 3
34091: PPUSH
34092: CALL_OW 500
// base := GetBase ( base_dep ) ;
34096: LD_ADDR_VAR 0 15
34100: PUSH
34101: LD_VAR 0 1
34105: PPUSH
34106: CALL_OW 274
34110: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34111: LD_ADDR_VAR 0 16
34115: PUSH
34116: LD_VAR 0 1
34120: PPUSH
34121: CALL_OW 255
34125: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34126: LD_ADDR_VAR 0 17
34130: PUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: CALL_OW 248
34140: ST_TO_ADDR
// if sources then
34141: LD_VAR 0 5
34145: IFFALSE 34192
// for i = 1 to 3 do
34147: LD_ADDR_VAR 0 8
34151: PUSH
34152: DOUBLE
34153: LD_INT 1
34155: DEC
34156: ST_TO_ADDR
34157: LD_INT 3
34159: PUSH
34160: FOR_TO
34161: IFFALSE 34190
// AddResourceType ( base , i , sources [ i ] ) ;
34163: LD_VAR 0 15
34167: PPUSH
34168: LD_VAR 0 8
34172: PPUSH
34173: LD_VAR 0 5
34177: PUSH
34178: LD_VAR 0 8
34182: ARRAY
34183: PPUSH
34184: CALL_OW 276
34188: GO 34160
34190: POP
34191: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34192: LD_ADDR_VAR 0 18
34196: PUSH
34197: LD_VAR 0 15
34201: PPUSH
34202: LD_VAR 0 2
34206: PPUSH
34207: LD_INT 1
34209: PPUSH
34210: CALL 33453 0 3
34214: ST_TO_ADDR
// InitHc ;
34215: CALL_OW 19
// InitUc ;
34219: CALL_OW 18
// uc_side := side ;
34223: LD_ADDR_OWVAR 20
34227: PUSH
34228: LD_VAR 0 16
34232: ST_TO_ADDR
// uc_nation := nation ;
34233: LD_ADDR_OWVAR 21
34237: PUSH
34238: LD_VAR 0 17
34242: ST_TO_ADDR
// if buildings then
34243: LD_VAR 0 18
34247: IFFALSE 35569
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34249: LD_ADDR_VAR 0 19
34253: PUSH
34254: LD_VAR 0 18
34258: PPUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 30
34264: PUSH
34265: LD_INT 29
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 30
34274: PUSH
34275: LD_INT 30
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: PPUSH
34287: CALL_OW 72
34291: ST_TO_ADDR
// if tmp then
34292: LD_VAR 0 19
34296: IFFALSE 34344
// for i in tmp do
34298: LD_ADDR_VAR 0 8
34302: PUSH
34303: LD_VAR 0 19
34307: PUSH
34308: FOR_IN
34309: IFFALSE 34342
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34311: LD_VAR 0 8
34315: PPUSH
34316: CALL_OW 250
34320: PPUSH
34321: LD_VAR 0 8
34325: PPUSH
34326: CALL_OW 251
34330: PPUSH
34331: LD_VAR 0 16
34335: PPUSH
34336: CALL_OW 441
34340: GO 34308
34342: POP
34343: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34344: LD_VAR 0 18
34348: PPUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 30
34354: PUSH
34355: LD_INT 32
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 30
34364: PUSH
34365: LD_INT 33
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: PPUSH
34377: CALL_OW 72
34381: IFFALSE 34469
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34383: LD_ADDR_VAR 0 8
34387: PUSH
34388: LD_VAR 0 18
34392: PPUSH
34393: LD_INT 2
34395: PUSH
34396: LD_INT 30
34398: PUSH
34399: LD_INT 32
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 30
34408: PUSH
34409: LD_INT 33
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: PPUSH
34421: CALL_OW 72
34425: PUSH
34426: FOR_IN
34427: IFFALSE 34467
// begin if not GetBWeapon ( i ) then
34429: LD_VAR 0 8
34433: PPUSH
34434: CALL_OW 269
34438: NOT
34439: IFFALSE 34465
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34441: LD_VAR 0 8
34445: PPUSH
34446: LD_VAR 0 8
34450: PPUSH
34451: LD_VAR 0 2
34455: PPUSH
34456: CALL 35715 0 2
34460: PPUSH
34461: CALL_OW 431
// end ;
34465: GO 34426
34467: POP
34468: POP
// end ; for i = 1 to personel do
34469: LD_ADDR_VAR 0 8
34473: PUSH
34474: DOUBLE
34475: LD_INT 1
34477: DEC
34478: ST_TO_ADDR
34479: LD_VAR 0 6
34483: PUSH
34484: FOR_TO
34485: IFFALSE 35549
// begin if i > 4 then
34487: LD_VAR 0 8
34491: PUSH
34492: LD_INT 4
34494: GREATER
34495: IFFALSE 34499
// break ;
34497: GO 35549
// case i of 1 :
34499: LD_VAR 0 8
34503: PUSH
34504: LD_INT 1
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34512
34510: GO 34592
34512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34513: LD_ADDR_VAR 0 12
34517: PUSH
34518: LD_VAR 0 18
34522: PPUSH
34523: LD_INT 22
34525: PUSH
34526: LD_VAR 0 16
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 58
34537: PUSH
34538: EMPTY
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 30
34546: PUSH
34547: LD_INT 32
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 30
34556: PUSH
34557: LD_INT 4
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 30
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: PPUSH
34585: CALL_OW 72
34589: ST_TO_ADDR
34590: GO 34814
34592: LD_INT 2
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34600
34598: GO 34662
34600: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34601: LD_ADDR_VAR 0 12
34605: PUSH
34606: LD_VAR 0 18
34610: PPUSH
34611: LD_INT 22
34613: PUSH
34614: LD_VAR 0 16
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 30
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 30
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: LIST
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PPUSH
34655: CALL_OW 72
34659: ST_TO_ADDR
34660: GO 34814
34662: LD_INT 3
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34670
34668: GO 34732
34670: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34671: LD_ADDR_VAR 0 12
34675: PUSH
34676: LD_VAR 0 18
34680: PPUSH
34681: LD_INT 22
34683: PUSH
34684: LD_VAR 0 16
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 30
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 30
34708: PUSH
34709: LD_INT 3
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PPUSH
34725: CALL_OW 72
34729: ST_TO_ADDR
34730: GO 34814
34732: LD_INT 4
34734: DOUBLE
34735: EQUAL
34736: IFTRUE 34740
34738: GO 34813
34740: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34741: LD_ADDR_VAR 0 12
34745: PUSH
34746: LD_VAR 0 18
34750: PPUSH
34751: LD_INT 22
34753: PUSH
34754: LD_VAR 0 16
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: LD_INT 30
34768: PUSH
34769: LD_INT 6
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 30
34778: PUSH
34779: LD_INT 7
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 30
34788: PUSH
34789: LD_INT 8
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PPUSH
34806: CALL_OW 72
34810: ST_TO_ADDR
34811: GO 34814
34813: POP
// if i = 1 then
34814: LD_VAR 0 8
34818: PUSH
34819: LD_INT 1
34821: EQUAL
34822: IFFALSE 34933
// begin tmp := [ ] ;
34824: LD_ADDR_VAR 0 19
34828: PUSH
34829: EMPTY
34830: ST_TO_ADDR
// for j in f do
34831: LD_ADDR_VAR 0 9
34835: PUSH
34836: LD_VAR 0 12
34840: PUSH
34841: FOR_IN
34842: IFFALSE 34915
// if GetBType ( j ) = b_bunker then
34844: LD_VAR 0 9
34848: PPUSH
34849: CALL_OW 266
34853: PUSH
34854: LD_INT 32
34856: EQUAL
34857: IFFALSE 34884
// tmp := Insert ( tmp , 1 , j ) else
34859: LD_ADDR_VAR 0 19
34863: PUSH
34864: LD_VAR 0 19
34868: PPUSH
34869: LD_INT 1
34871: PPUSH
34872: LD_VAR 0 9
34876: PPUSH
34877: CALL_OW 2
34881: ST_TO_ADDR
34882: GO 34913
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34884: LD_ADDR_VAR 0 19
34888: PUSH
34889: LD_VAR 0 19
34893: PPUSH
34894: LD_VAR 0 19
34898: PUSH
34899: LD_INT 1
34901: PLUS
34902: PPUSH
34903: LD_VAR 0 9
34907: PPUSH
34908: CALL_OW 2
34912: ST_TO_ADDR
34913: GO 34841
34915: POP
34916: POP
// if tmp then
34917: LD_VAR 0 19
34921: IFFALSE 34933
// f := tmp ;
34923: LD_ADDR_VAR 0 12
34927: PUSH
34928: LD_VAR 0 19
34932: ST_TO_ADDR
// end ; x := personel [ i ] ;
34933: LD_ADDR_VAR 0 13
34937: PUSH
34938: LD_VAR 0 6
34942: PUSH
34943: LD_VAR 0 8
34947: ARRAY
34948: ST_TO_ADDR
// if x = - 1 then
34949: LD_VAR 0 13
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: EQUAL
34958: IFFALSE 35167
// begin for j in f do
34960: LD_ADDR_VAR 0 9
34964: PUSH
34965: LD_VAR 0 12
34969: PUSH
34970: FOR_IN
34971: IFFALSE 35163
// repeat InitHc ;
34973: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34977: LD_VAR 0 9
34981: PPUSH
34982: CALL_OW 266
34986: PUSH
34987: LD_INT 5
34989: EQUAL
34990: IFFALSE 35060
// begin if UnitsInside ( j ) < 3 then
34992: LD_VAR 0 9
34996: PPUSH
34997: CALL_OW 313
35001: PUSH
35002: LD_INT 3
35004: LESS
35005: IFFALSE 35041
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35007: LD_INT 0
35009: PPUSH
35010: LD_INT 5
35012: PUSH
35013: LD_INT 8
35015: PUSH
35016: LD_INT 9
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: PUSH
35024: LD_VAR 0 17
35028: ARRAY
35029: PPUSH
35030: LD_VAR 0 4
35034: PPUSH
35035: CALL_OW 380
35039: GO 35058
// PrepareHuman ( false , i , skill ) ;
35041: LD_INT 0
35043: PPUSH
35044: LD_VAR 0 8
35048: PPUSH
35049: LD_VAR 0 4
35053: PPUSH
35054: CALL_OW 380
// end else
35058: GO 35077
// PrepareHuman ( false , i , skill ) ;
35060: LD_INT 0
35062: PPUSH
35063: LD_VAR 0 8
35067: PPUSH
35068: LD_VAR 0 4
35072: PPUSH
35073: CALL_OW 380
// un := CreateHuman ;
35077: LD_ADDR_VAR 0 14
35081: PUSH
35082: CALL_OW 44
35086: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35087: LD_ADDR_VAR 0 7
35091: PUSH
35092: LD_VAR 0 7
35096: PPUSH
35097: LD_INT 1
35099: PPUSH
35100: LD_VAR 0 14
35104: PPUSH
35105: CALL_OW 2
35109: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35110: LD_VAR 0 14
35114: PPUSH
35115: LD_VAR 0 9
35119: PPUSH
35120: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35124: LD_VAR 0 9
35128: PPUSH
35129: CALL_OW 313
35133: PUSH
35134: LD_INT 6
35136: EQUAL
35137: PUSH
35138: LD_VAR 0 9
35142: PPUSH
35143: CALL_OW 266
35147: PUSH
35148: LD_INT 32
35150: PUSH
35151: LD_INT 31
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: IN
35158: OR
35159: IFFALSE 34973
35161: GO 34970
35163: POP
35164: POP
// end else
35165: GO 35547
// for j = 1 to x do
35167: LD_ADDR_VAR 0 9
35171: PUSH
35172: DOUBLE
35173: LD_INT 1
35175: DEC
35176: ST_TO_ADDR
35177: LD_VAR 0 13
35181: PUSH
35182: FOR_TO
35183: IFFALSE 35545
// begin InitHc ;
35185: CALL_OW 19
// if not f then
35189: LD_VAR 0 12
35193: NOT
35194: IFFALSE 35283
// begin PrepareHuman ( false , i , skill ) ;
35196: LD_INT 0
35198: PPUSH
35199: LD_VAR 0 8
35203: PPUSH
35204: LD_VAR 0 4
35208: PPUSH
35209: CALL_OW 380
// un := CreateHuman ;
35213: LD_ADDR_VAR 0 14
35217: PUSH
35218: CALL_OW 44
35222: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35223: LD_ADDR_VAR 0 7
35227: PUSH
35228: LD_VAR 0 7
35232: PPUSH
35233: LD_INT 1
35235: PPUSH
35236: LD_VAR 0 14
35240: PPUSH
35241: CALL_OW 2
35245: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35246: LD_VAR 0 14
35250: PPUSH
35251: LD_VAR 0 1
35255: PPUSH
35256: CALL_OW 250
35260: PPUSH
35261: LD_VAR 0 1
35265: PPUSH
35266: CALL_OW 251
35270: PPUSH
35271: LD_INT 10
35273: PPUSH
35274: LD_INT 0
35276: PPUSH
35277: CALL_OW 50
// continue ;
35281: GO 35182
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35283: LD_VAR 0 12
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PPUSH
35292: CALL_OW 313
35296: PUSH
35297: LD_VAR 0 12
35301: PUSH
35302: LD_INT 1
35304: ARRAY
35305: PPUSH
35306: CALL_OW 266
35310: PUSH
35311: LD_INT 32
35313: PUSH
35314: LD_INT 31
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: IN
35321: AND
35322: PUSH
35323: LD_VAR 0 12
35327: PUSH
35328: LD_INT 1
35330: ARRAY
35331: PPUSH
35332: CALL_OW 313
35336: PUSH
35337: LD_INT 6
35339: EQUAL
35340: OR
35341: IFFALSE 35361
// f := Delete ( f , 1 ) ;
35343: LD_ADDR_VAR 0 12
35347: PUSH
35348: LD_VAR 0 12
35352: PPUSH
35353: LD_INT 1
35355: PPUSH
35356: CALL_OW 3
35360: ST_TO_ADDR
// if not f then
35361: LD_VAR 0 12
35365: NOT
35366: IFFALSE 35384
// begin x := x + 2 ;
35368: LD_ADDR_VAR 0 13
35372: PUSH
35373: LD_VAR 0 13
35377: PUSH
35378: LD_INT 2
35380: PLUS
35381: ST_TO_ADDR
// continue ;
35382: GO 35182
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35384: LD_VAR 0 12
35388: PUSH
35389: LD_INT 1
35391: ARRAY
35392: PPUSH
35393: CALL_OW 266
35397: PUSH
35398: LD_INT 5
35400: EQUAL
35401: IFFALSE 35475
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35403: LD_VAR 0 12
35407: PUSH
35408: LD_INT 1
35410: ARRAY
35411: PPUSH
35412: CALL_OW 313
35416: PUSH
35417: LD_INT 3
35419: LESS
35420: IFFALSE 35456
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35422: LD_INT 0
35424: PPUSH
35425: LD_INT 5
35427: PUSH
35428: LD_INT 8
35430: PUSH
35431: LD_INT 9
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: PUSH
35439: LD_VAR 0 17
35443: ARRAY
35444: PPUSH
35445: LD_VAR 0 4
35449: PPUSH
35450: CALL_OW 380
35454: GO 35473
// PrepareHuman ( false , i , skill ) ;
35456: LD_INT 0
35458: PPUSH
35459: LD_VAR 0 8
35463: PPUSH
35464: LD_VAR 0 4
35468: PPUSH
35469: CALL_OW 380
// end else
35473: GO 35492
// PrepareHuman ( false , i , skill ) ;
35475: LD_INT 0
35477: PPUSH
35478: LD_VAR 0 8
35482: PPUSH
35483: LD_VAR 0 4
35487: PPUSH
35488: CALL_OW 380
// un := CreateHuman ;
35492: LD_ADDR_VAR 0 14
35496: PUSH
35497: CALL_OW 44
35501: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35502: LD_ADDR_VAR 0 7
35506: PUSH
35507: LD_VAR 0 7
35511: PPUSH
35512: LD_INT 1
35514: PPUSH
35515: LD_VAR 0 14
35519: PPUSH
35520: CALL_OW 2
35524: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35525: LD_VAR 0 14
35529: PPUSH
35530: LD_VAR 0 12
35534: PUSH
35535: LD_INT 1
35537: ARRAY
35538: PPUSH
35539: CALL_OW 52
// end ;
35543: GO 35182
35545: POP
35546: POP
// end ;
35547: GO 34484
35549: POP
35550: POP
// result := result ^ buildings ;
35551: LD_ADDR_VAR 0 7
35555: PUSH
35556: LD_VAR 0 7
35560: PUSH
35561: LD_VAR 0 18
35565: ADD
35566: ST_TO_ADDR
// end else
35567: GO 35710
// begin for i = 1 to personel do
35569: LD_ADDR_VAR 0 8
35573: PUSH
35574: DOUBLE
35575: LD_INT 1
35577: DEC
35578: ST_TO_ADDR
35579: LD_VAR 0 6
35583: PUSH
35584: FOR_TO
35585: IFFALSE 35708
// begin if i > 4 then
35587: LD_VAR 0 8
35591: PUSH
35592: LD_INT 4
35594: GREATER
35595: IFFALSE 35599
// break ;
35597: GO 35708
// x := personel [ i ] ;
35599: LD_ADDR_VAR 0 13
35603: PUSH
35604: LD_VAR 0 6
35608: PUSH
35609: LD_VAR 0 8
35613: ARRAY
35614: ST_TO_ADDR
// if x = - 1 then
35615: LD_VAR 0 13
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: EQUAL
35624: IFFALSE 35628
// continue ;
35626: GO 35584
// PrepareHuman ( false , i , skill ) ;
35628: LD_INT 0
35630: PPUSH
35631: LD_VAR 0 8
35635: PPUSH
35636: LD_VAR 0 4
35640: PPUSH
35641: CALL_OW 380
// un := CreateHuman ;
35645: LD_ADDR_VAR 0 14
35649: PUSH
35650: CALL_OW 44
35654: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35655: LD_VAR 0 14
35659: PPUSH
35660: LD_VAR 0 1
35664: PPUSH
35665: CALL_OW 250
35669: PPUSH
35670: LD_VAR 0 1
35674: PPUSH
35675: CALL_OW 251
35679: PPUSH
35680: LD_INT 10
35682: PPUSH
35683: LD_INT 0
35685: PPUSH
35686: CALL_OW 50
// result := result ^ un ;
35690: LD_ADDR_VAR 0 7
35694: PUSH
35695: LD_VAR 0 7
35699: PUSH
35700: LD_VAR 0 14
35704: ADD
35705: ST_TO_ADDR
// end ;
35706: GO 35584
35708: POP
35709: POP
// end ; end ;
35710: LD_VAR 0 7
35714: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35715: LD_INT 0
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
35729: PPUSH
35730: PPUSH
35731: PPUSH
35732: PPUSH
// result := false ;
35733: LD_ADDR_VAR 0 3
35737: PUSH
35738: LD_INT 0
35740: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35741: LD_VAR 0 1
35745: NOT
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 266
35756: PUSH
35757: LD_INT 32
35759: PUSH
35760: LD_INT 33
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: IN
35767: NOT
35768: OR
35769: IFFALSE 35773
// exit ;
35771: GO 36882
// nat := GetNation ( tower ) ;
35773: LD_ADDR_VAR 0 12
35777: PUSH
35778: LD_VAR 0 1
35782: PPUSH
35783: CALL_OW 248
35787: ST_TO_ADDR
// side := GetSide ( tower ) ;
35788: LD_ADDR_VAR 0 16
35792: PUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL_OW 255
35802: ST_TO_ADDR
// x := GetX ( tower ) ;
35803: LD_ADDR_VAR 0 10
35807: PUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: CALL_OW 250
35817: ST_TO_ADDR
// y := GetY ( tower ) ;
35818: LD_ADDR_VAR 0 11
35822: PUSH
35823: LD_VAR 0 1
35827: PPUSH
35828: CALL_OW 251
35832: ST_TO_ADDR
// if not x or not y then
35833: LD_VAR 0 10
35837: NOT
35838: PUSH
35839: LD_VAR 0 11
35843: NOT
35844: OR
35845: IFFALSE 35849
// exit ;
35847: GO 36882
// weapon := 0 ;
35849: LD_ADDR_VAR 0 18
35853: PUSH
35854: LD_INT 0
35856: ST_TO_ADDR
// fac_list := [ ] ;
35857: LD_ADDR_VAR 0 17
35861: PUSH
35862: EMPTY
35863: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35864: LD_ADDR_VAR 0 6
35868: PUSH
35869: LD_VAR 0 1
35873: PPUSH
35874: CALL_OW 274
35878: PPUSH
35879: LD_VAR 0 2
35883: PPUSH
35884: LD_INT 0
35886: PPUSH
35887: CALL 33453 0 3
35891: PPUSH
35892: LD_INT 30
35894: PUSH
35895: LD_INT 3
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PPUSH
35902: CALL_OW 72
35906: ST_TO_ADDR
// if not factories then
35907: LD_VAR 0 6
35911: NOT
35912: IFFALSE 35916
// exit ;
35914: GO 36882
// for i in factories do
35916: LD_ADDR_VAR 0 8
35920: PUSH
35921: LD_VAR 0 6
35925: PUSH
35926: FOR_IN
35927: IFFALSE 35952
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35929: LD_ADDR_VAR 0 17
35933: PUSH
35934: LD_VAR 0 17
35938: PUSH
35939: LD_VAR 0 8
35943: PPUSH
35944: CALL_OW 478
35948: UNION
35949: ST_TO_ADDR
35950: GO 35926
35952: POP
35953: POP
// if not fac_list then
35954: LD_VAR 0 17
35958: NOT
35959: IFFALSE 35963
// exit ;
35961: GO 36882
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35963: LD_ADDR_VAR 0 5
35967: PUSH
35968: LD_INT 4
35970: PUSH
35971: LD_INT 5
35973: PUSH
35974: LD_INT 9
35976: PUSH
35977: LD_INT 10
35979: PUSH
35980: LD_INT 6
35982: PUSH
35983: LD_INT 7
35985: PUSH
35986: LD_INT 11
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 27
36000: PUSH
36001: LD_INT 28
36003: PUSH
36004: LD_INT 26
36006: PUSH
36007: LD_INT 30
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 43
36018: PUSH
36019: LD_INT 44
36021: PUSH
36022: LD_INT 46
36024: PUSH
36025: LD_INT 45
36027: PUSH
36028: LD_INT 47
36030: PUSH
36031: LD_INT 49
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: PUSH
36047: LD_VAR 0 12
36051: ARRAY
36052: ST_TO_ADDR
// list := list isect fac_list ;
36053: LD_ADDR_VAR 0 5
36057: PUSH
36058: LD_VAR 0 5
36062: PUSH
36063: LD_VAR 0 17
36067: ISECT
36068: ST_TO_ADDR
// if not list then
36069: LD_VAR 0 5
36073: NOT
36074: IFFALSE 36078
// exit ;
36076: GO 36882
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36078: LD_VAR 0 12
36082: PUSH
36083: LD_INT 3
36085: EQUAL
36086: PUSH
36087: LD_INT 49
36089: PUSH
36090: LD_VAR 0 5
36094: IN
36095: AND
36096: PUSH
36097: LD_INT 31
36099: PPUSH
36100: LD_VAR 0 16
36104: PPUSH
36105: CALL_OW 321
36109: PUSH
36110: LD_INT 2
36112: EQUAL
36113: AND
36114: IFFALSE 36174
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36116: LD_INT 22
36118: PUSH
36119: LD_VAR 0 16
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 35
36130: PUSH
36131: LD_INT 49
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 91
36140: PUSH
36141: LD_VAR 0 1
36145: PUSH
36146: LD_INT 10
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: PPUSH
36159: CALL_OW 69
36163: NOT
36164: IFFALSE 36174
// weapon := ru_time_lapser ;
36166: LD_ADDR_VAR 0 18
36170: PUSH
36171: LD_INT 49
36173: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36174: LD_VAR 0 12
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: IN
36189: PUSH
36190: LD_INT 11
36192: PUSH
36193: LD_VAR 0 5
36197: IN
36198: PUSH
36199: LD_INT 30
36201: PUSH
36202: LD_VAR 0 5
36206: IN
36207: OR
36208: AND
36209: PUSH
36210: LD_INT 6
36212: PPUSH
36213: LD_VAR 0 16
36217: PPUSH
36218: CALL_OW 321
36222: PUSH
36223: LD_INT 2
36225: EQUAL
36226: AND
36227: IFFALSE 36392
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36229: LD_INT 22
36231: PUSH
36232: LD_VAR 0 16
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 35
36246: PUSH
36247: LD_INT 11
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 35
36256: PUSH
36257: LD_INT 30
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 91
36271: PUSH
36272: LD_VAR 0 1
36276: PUSH
36277: LD_INT 18
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: PPUSH
36290: CALL_OW 69
36294: NOT
36295: PUSH
36296: LD_INT 22
36298: PUSH
36299: LD_VAR 0 16
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: LD_INT 30
36313: PUSH
36314: LD_INT 32
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 30
36323: PUSH
36324: LD_INT 33
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 91
36338: PUSH
36339: LD_VAR 0 1
36343: PUSH
36344: LD_INT 12
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: PUSH
36357: EMPTY
36358: LIST
36359: PPUSH
36360: CALL_OW 69
36364: PUSH
36365: LD_INT 2
36367: GREATER
36368: AND
36369: IFFALSE 36392
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36371: LD_ADDR_VAR 0 18
36375: PUSH
36376: LD_INT 11
36378: PUSH
36379: LD_INT 30
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_VAR 0 12
36390: ARRAY
36391: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36392: LD_VAR 0 18
36396: NOT
36397: PUSH
36398: LD_INT 40
36400: PPUSH
36401: LD_VAR 0 16
36405: PPUSH
36406: CALL_OW 321
36410: PUSH
36411: LD_INT 2
36413: EQUAL
36414: AND
36415: PUSH
36416: LD_INT 7
36418: PUSH
36419: LD_VAR 0 5
36423: IN
36424: PUSH
36425: LD_INT 28
36427: PUSH
36428: LD_VAR 0 5
36432: IN
36433: OR
36434: PUSH
36435: LD_INT 45
36437: PUSH
36438: LD_VAR 0 5
36442: IN
36443: OR
36444: AND
36445: IFFALSE 36699
// begin hex := GetHexInfo ( x , y ) ;
36447: LD_ADDR_VAR 0 4
36451: PUSH
36452: LD_VAR 0 10
36456: PPUSH
36457: LD_VAR 0 11
36461: PPUSH
36462: CALL_OW 546
36466: ST_TO_ADDR
// if hex [ 1 ] then
36467: LD_VAR 0 4
36471: PUSH
36472: LD_INT 1
36474: ARRAY
36475: IFFALSE 36479
// exit ;
36477: GO 36882
// height := hex [ 2 ] ;
36479: LD_ADDR_VAR 0 15
36483: PUSH
36484: LD_VAR 0 4
36488: PUSH
36489: LD_INT 2
36491: ARRAY
36492: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36493: LD_ADDR_VAR 0 14
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 2
36503: PUSH
36504: LD_INT 3
36506: PUSH
36507: LD_INT 5
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: ST_TO_ADDR
// for i in tmp do
36516: LD_ADDR_VAR 0 8
36520: PUSH
36521: LD_VAR 0 14
36525: PUSH
36526: FOR_IN
36527: IFFALSE 36697
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36529: LD_ADDR_VAR 0 9
36533: PUSH
36534: LD_VAR 0 10
36538: PPUSH
36539: LD_VAR 0 8
36543: PPUSH
36544: LD_INT 5
36546: PPUSH
36547: CALL_OW 272
36551: PUSH
36552: LD_VAR 0 11
36556: PPUSH
36557: LD_VAR 0 8
36561: PPUSH
36562: LD_INT 5
36564: PPUSH
36565: CALL_OW 273
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36574: LD_VAR 0 9
36578: PUSH
36579: LD_INT 1
36581: ARRAY
36582: PPUSH
36583: LD_VAR 0 9
36587: PUSH
36588: LD_INT 2
36590: ARRAY
36591: PPUSH
36592: CALL_OW 488
36596: IFFALSE 36695
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36598: LD_ADDR_VAR 0 4
36602: PUSH
36603: LD_VAR 0 9
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PPUSH
36612: LD_VAR 0 9
36616: PUSH
36617: LD_INT 2
36619: ARRAY
36620: PPUSH
36621: CALL_OW 546
36625: ST_TO_ADDR
// if hex [ 1 ] then
36626: LD_VAR 0 4
36630: PUSH
36631: LD_INT 1
36633: ARRAY
36634: IFFALSE 36638
// continue ;
36636: GO 36526
// h := hex [ 2 ] ;
36638: LD_ADDR_VAR 0 13
36642: PUSH
36643: LD_VAR 0 4
36647: PUSH
36648: LD_INT 2
36650: ARRAY
36651: ST_TO_ADDR
// if h + 7 < height then
36652: LD_VAR 0 13
36656: PUSH
36657: LD_INT 7
36659: PLUS
36660: PUSH
36661: LD_VAR 0 15
36665: LESS
36666: IFFALSE 36695
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36668: LD_ADDR_VAR 0 18
36672: PUSH
36673: LD_INT 7
36675: PUSH
36676: LD_INT 28
36678: PUSH
36679: LD_INT 45
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: PUSH
36687: LD_VAR 0 12
36691: ARRAY
36692: ST_TO_ADDR
// break ;
36693: GO 36697
// end ; end ; end ;
36695: GO 36526
36697: POP
36698: POP
// end ; if not weapon then
36699: LD_VAR 0 18
36703: NOT
36704: IFFALSE 36764
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36706: LD_ADDR_VAR 0 5
36710: PUSH
36711: LD_VAR 0 5
36715: PUSH
36716: LD_INT 11
36718: PUSH
36719: LD_INT 30
36721: PUSH
36722: LD_INT 49
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: DIFF
36730: ST_TO_ADDR
// if not list then
36731: LD_VAR 0 5
36735: NOT
36736: IFFALSE 36740
// exit ;
36738: GO 36882
// weapon := list [ rand ( 1 , list ) ] ;
36740: LD_ADDR_VAR 0 18
36744: PUSH
36745: LD_VAR 0 5
36749: PUSH
36750: LD_INT 1
36752: PPUSH
36753: LD_VAR 0 5
36757: PPUSH
36758: CALL_OW 12
36762: ARRAY
36763: ST_TO_ADDR
// end ; if weapon then
36764: LD_VAR 0 18
36768: IFFALSE 36882
// begin tmp := CostOfWeapon ( weapon ) ;
36770: LD_ADDR_VAR 0 14
36774: PUSH
36775: LD_VAR 0 18
36779: PPUSH
36780: CALL_OW 451
36784: ST_TO_ADDR
// j := GetBase ( tower ) ;
36785: LD_ADDR_VAR 0 9
36789: PUSH
36790: LD_VAR 0 1
36794: PPUSH
36795: CALL_OW 274
36799: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36800: LD_VAR 0 9
36804: PPUSH
36805: LD_INT 1
36807: PPUSH
36808: CALL_OW 275
36812: PUSH
36813: LD_VAR 0 14
36817: PUSH
36818: LD_INT 1
36820: ARRAY
36821: GREATEREQUAL
36822: PUSH
36823: LD_VAR 0 9
36827: PPUSH
36828: LD_INT 2
36830: PPUSH
36831: CALL_OW 275
36835: PUSH
36836: LD_VAR 0 14
36840: PUSH
36841: LD_INT 2
36843: ARRAY
36844: GREATEREQUAL
36845: AND
36846: PUSH
36847: LD_VAR 0 9
36851: PPUSH
36852: LD_INT 3
36854: PPUSH
36855: CALL_OW 275
36859: PUSH
36860: LD_VAR 0 14
36864: PUSH
36865: LD_INT 3
36867: ARRAY
36868: GREATEREQUAL
36869: AND
36870: IFFALSE 36882
// result := weapon ;
36872: LD_ADDR_VAR 0 3
36876: PUSH
36877: LD_VAR 0 18
36881: ST_TO_ADDR
// end ; end ;
36882: LD_VAR 0 3
36886: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36887: LD_INT 0
36889: PPUSH
36890: PPUSH
// result := true ;
36891: LD_ADDR_VAR 0 3
36895: PUSH
36896: LD_INT 1
36898: ST_TO_ADDR
// if array1 = array2 then
36899: LD_VAR 0 1
36903: PUSH
36904: LD_VAR 0 2
36908: EQUAL
36909: IFFALSE 36969
// begin for i = 1 to array1 do
36911: LD_ADDR_VAR 0 4
36915: PUSH
36916: DOUBLE
36917: LD_INT 1
36919: DEC
36920: ST_TO_ADDR
36921: LD_VAR 0 1
36925: PUSH
36926: FOR_TO
36927: IFFALSE 36965
// if array1 [ i ] <> array2 [ i ] then
36929: LD_VAR 0 1
36933: PUSH
36934: LD_VAR 0 4
36938: ARRAY
36939: PUSH
36940: LD_VAR 0 2
36944: PUSH
36945: LD_VAR 0 4
36949: ARRAY
36950: NONEQUAL
36951: IFFALSE 36963
// begin result := false ;
36953: LD_ADDR_VAR 0 3
36957: PUSH
36958: LD_INT 0
36960: ST_TO_ADDR
// break ;
36961: GO 36965
// end ;
36963: GO 36926
36965: POP
36966: POP
// end else
36967: GO 36977
// result := false ;
36969: LD_ADDR_VAR 0 3
36973: PUSH
36974: LD_INT 0
36976: ST_TO_ADDR
// end ;
36977: LD_VAR 0 3
36981: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36982: LD_INT 0
36984: PPUSH
36985: PPUSH
// if not array1 or not array2 then
36986: LD_VAR 0 1
36990: NOT
36991: PUSH
36992: LD_VAR 0 2
36996: NOT
36997: OR
36998: IFFALSE 37002
// exit ;
37000: GO 37066
// result := true ;
37002: LD_ADDR_VAR 0 3
37006: PUSH
37007: LD_INT 1
37009: ST_TO_ADDR
// for i = 1 to array1 do
37010: LD_ADDR_VAR 0 4
37014: PUSH
37015: DOUBLE
37016: LD_INT 1
37018: DEC
37019: ST_TO_ADDR
37020: LD_VAR 0 1
37024: PUSH
37025: FOR_TO
37026: IFFALSE 37064
// if array1 [ i ] <> array2 [ i ] then
37028: LD_VAR 0 1
37032: PUSH
37033: LD_VAR 0 4
37037: ARRAY
37038: PUSH
37039: LD_VAR 0 2
37043: PUSH
37044: LD_VAR 0 4
37048: ARRAY
37049: NONEQUAL
37050: IFFALSE 37062
// begin result := false ;
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: LD_INT 0
37059: ST_TO_ADDR
// break ;
37060: GO 37064
// end ;
37062: GO 37025
37064: POP
37065: POP
// end ;
37066: LD_VAR 0 3
37070: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37071: LD_INT 0
37073: PPUSH
37074: PPUSH
37075: PPUSH
// pom := GetBase ( fac ) ;
37076: LD_ADDR_VAR 0 5
37080: PUSH
37081: LD_VAR 0 1
37085: PPUSH
37086: CALL_OW 274
37090: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37091: LD_ADDR_VAR 0 4
37095: PUSH
37096: LD_VAR 0 2
37100: PUSH
37101: LD_INT 1
37103: ARRAY
37104: PPUSH
37105: LD_VAR 0 2
37109: PUSH
37110: LD_INT 2
37112: ARRAY
37113: PPUSH
37114: LD_VAR 0 2
37118: PUSH
37119: LD_INT 3
37121: ARRAY
37122: PPUSH
37123: LD_VAR 0 2
37127: PUSH
37128: LD_INT 4
37130: ARRAY
37131: PPUSH
37132: CALL_OW 449
37136: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37137: LD_ADDR_VAR 0 3
37141: PUSH
37142: LD_VAR 0 5
37146: PPUSH
37147: LD_INT 1
37149: PPUSH
37150: CALL_OW 275
37154: PUSH
37155: LD_VAR 0 4
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: GREATEREQUAL
37164: PUSH
37165: LD_VAR 0 5
37169: PPUSH
37170: LD_INT 2
37172: PPUSH
37173: CALL_OW 275
37177: PUSH
37178: LD_VAR 0 4
37182: PUSH
37183: LD_INT 2
37185: ARRAY
37186: GREATEREQUAL
37187: AND
37188: PUSH
37189: LD_VAR 0 5
37193: PPUSH
37194: LD_INT 3
37196: PPUSH
37197: CALL_OW 275
37201: PUSH
37202: LD_VAR 0 4
37206: PUSH
37207: LD_INT 3
37209: ARRAY
37210: GREATEREQUAL
37211: AND
37212: ST_TO_ADDR
// end ;
37213: LD_VAR 0 3
37217: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37218: LD_INT 0
37220: PPUSH
37221: PPUSH
37222: PPUSH
37223: PPUSH
// pom := GetBase ( building ) ;
37224: LD_ADDR_VAR 0 3
37228: PUSH
37229: LD_VAR 0 1
37233: PPUSH
37234: CALL_OW 274
37238: ST_TO_ADDR
// if not pom then
37239: LD_VAR 0 3
37243: NOT
37244: IFFALSE 37248
// exit ;
37246: GO 37418
// btype := GetBType ( building ) ;
37248: LD_ADDR_VAR 0 5
37252: PUSH
37253: LD_VAR 0 1
37257: PPUSH
37258: CALL_OW 266
37262: ST_TO_ADDR
// if btype = b_armoury then
37263: LD_VAR 0 5
37267: PUSH
37268: LD_INT 4
37270: EQUAL
37271: IFFALSE 37281
// btype := b_barracks ;
37273: LD_ADDR_VAR 0 5
37277: PUSH
37278: LD_INT 5
37280: ST_TO_ADDR
// if btype = b_depot then
37281: LD_VAR 0 5
37285: PUSH
37286: LD_INT 0
37288: EQUAL
37289: IFFALSE 37299
// btype := b_warehouse ;
37291: LD_ADDR_VAR 0 5
37295: PUSH
37296: LD_INT 1
37298: ST_TO_ADDR
// if btype = b_workshop then
37299: LD_VAR 0 5
37303: PUSH
37304: LD_INT 2
37306: EQUAL
37307: IFFALSE 37317
// btype := b_factory ;
37309: LD_ADDR_VAR 0 5
37313: PUSH
37314: LD_INT 3
37316: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37317: LD_ADDR_VAR 0 4
37321: PUSH
37322: LD_VAR 0 5
37326: PPUSH
37327: LD_VAR 0 1
37331: PPUSH
37332: CALL_OW 248
37336: PPUSH
37337: CALL_OW 450
37341: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37342: LD_ADDR_VAR 0 2
37346: PUSH
37347: LD_VAR 0 3
37351: PPUSH
37352: LD_INT 1
37354: PPUSH
37355: CALL_OW 275
37359: PUSH
37360: LD_VAR 0 4
37364: PUSH
37365: LD_INT 1
37367: ARRAY
37368: GREATEREQUAL
37369: PUSH
37370: LD_VAR 0 3
37374: PPUSH
37375: LD_INT 2
37377: PPUSH
37378: CALL_OW 275
37382: PUSH
37383: LD_VAR 0 4
37387: PUSH
37388: LD_INT 2
37390: ARRAY
37391: GREATEREQUAL
37392: AND
37393: PUSH
37394: LD_VAR 0 3
37398: PPUSH
37399: LD_INT 3
37401: PPUSH
37402: CALL_OW 275
37406: PUSH
37407: LD_VAR 0 4
37411: PUSH
37412: LD_INT 3
37414: ARRAY
37415: GREATEREQUAL
37416: AND
37417: ST_TO_ADDR
// end ;
37418: LD_VAR 0 2
37422: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37423: LD_INT 0
37425: PPUSH
37426: PPUSH
37427: PPUSH
// pom := GetBase ( building ) ;
37428: LD_ADDR_VAR 0 4
37432: PUSH
37433: LD_VAR 0 1
37437: PPUSH
37438: CALL_OW 274
37442: ST_TO_ADDR
// if not pom then
37443: LD_VAR 0 4
37447: NOT
37448: IFFALSE 37452
// exit ;
37450: GO 37553
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37452: LD_ADDR_VAR 0 5
37456: PUSH
37457: LD_VAR 0 2
37461: PPUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 248
37471: PPUSH
37472: CALL_OW 450
37476: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37477: LD_ADDR_VAR 0 3
37481: PUSH
37482: LD_VAR 0 4
37486: PPUSH
37487: LD_INT 1
37489: PPUSH
37490: CALL_OW 275
37494: PUSH
37495: LD_VAR 0 5
37499: PUSH
37500: LD_INT 1
37502: ARRAY
37503: GREATEREQUAL
37504: PUSH
37505: LD_VAR 0 4
37509: PPUSH
37510: LD_INT 2
37512: PPUSH
37513: CALL_OW 275
37517: PUSH
37518: LD_VAR 0 5
37522: PUSH
37523: LD_INT 2
37525: ARRAY
37526: GREATEREQUAL
37527: AND
37528: PUSH
37529: LD_VAR 0 4
37533: PPUSH
37534: LD_INT 3
37536: PPUSH
37537: CALL_OW 275
37541: PUSH
37542: LD_VAR 0 5
37546: PUSH
37547: LD_INT 3
37549: ARRAY
37550: GREATEREQUAL
37551: AND
37552: ST_TO_ADDR
// end ;
37553: LD_VAR 0 3
37557: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37558: LD_INT 0
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
// result := false ;
37571: LD_ADDR_VAR 0 8
37575: PUSH
37576: LD_INT 0
37578: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37579: LD_VAR 0 5
37583: NOT
37584: PUSH
37585: LD_VAR 0 1
37589: NOT
37590: OR
37591: PUSH
37592: LD_VAR 0 2
37596: NOT
37597: OR
37598: PUSH
37599: LD_VAR 0 3
37603: NOT
37604: OR
37605: IFFALSE 37609
// exit ;
37607: GO 38423
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37609: LD_ADDR_VAR 0 14
37613: PUSH
37614: LD_VAR 0 1
37618: PPUSH
37619: LD_VAR 0 2
37623: PPUSH
37624: LD_VAR 0 3
37628: PPUSH
37629: LD_VAR 0 4
37633: PPUSH
37634: LD_VAR 0 5
37638: PUSH
37639: LD_INT 1
37641: ARRAY
37642: PPUSH
37643: CALL_OW 248
37647: PPUSH
37648: LD_INT 0
37650: PPUSH
37651: CALL 39676 0 6
37655: ST_TO_ADDR
// if not hexes then
37656: LD_VAR 0 14
37660: NOT
37661: IFFALSE 37665
// exit ;
37663: GO 38423
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37665: LD_ADDR_VAR 0 17
37669: PUSH
37670: LD_VAR 0 5
37674: PPUSH
37675: LD_INT 22
37677: PUSH
37678: LD_VAR 0 13
37682: PPUSH
37683: CALL_OW 255
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 30
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 30
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PPUSH
37724: CALL_OW 72
37728: ST_TO_ADDR
// for i = 1 to hexes do
37729: LD_ADDR_VAR 0 9
37733: PUSH
37734: DOUBLE
37735: LD_INT 1
37737: DEC
37738: ST_TO_ADDR
37739: LD_VAR 0 14
37743: PUSH
37744: FOR_TO
37745: IFFALSE 38421
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37747: LD_ADDR_VAR 0 13
37751: PUSH
37752: LD_VAR 0 14
37756: PUSH
37757: LD_VAR 0 9
37761: ARRAY
37762: PUSH
37763: LD_INT 1
37765: ARRAY
37766: PPUSH
37767: LD_VAR 0 14
37771: PUSH
37772: LD_VAR 0 9
37776: ARRAY
37777: PUSH
37778: LD_INT 2
37780: ARRAY
37781: PPUSH
37782: CALL_OW 428
37786: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37787: LD_VAR 0 14
37791: PUSH
37792: LD_VAR 0 9
37796: ARRAY
37797: PUSH
37798: LD_INT 1
37800: ARRAY
37801: PPUSH
37802: LD_VAR 0 14
37806: PUSH
37807: LD_VAR 0 9
37811: ARRAY
37812: PUSH
37813: LD_INT 2
37815: ARRAY
37816: PPUSH
37817: CALL_OW 351
37821: PUSH
37822: LD_VAR 0 14
37826: PUSH
37827: LD_VAR 0 9
37831: ARRAY
37832: PUSH
37833: LD_INT 1
37835: ARRAY
37836: PPUSH
37837: LD_VAR 0 14
37841: PUSH
37842: LD_VAR 0 9
37846: ARRAY
37847: PUSH
37848: LD_INT 2
37850: ARRAY
37851: PPUSH
37852: CALL_OW 488
37856: NOT
37857: OR
37858: PUSH
37859: LD_VAR 0 13
37863: PPUSH
37864: CALL_OW 247
37868: PUSH
37869: LD_INT 3
37871: EQUAL
37872: OR
37873: IFFALSE 37879
// exit ;
37875: POP
37876: POP
37877: GO 38423
// if not tmp then
37879: LD_VAR 0 13
37883: NOT
37884: IFFALSE 37888
// continue ;
37886: GO 37744
// result := true ;
37888: LD_ADDR_VAR 0 8
37892: PUSH
37893: LD_INT 1
37895: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37896: LD_VAR 0 6
37900: PUSH
37901: LD_VAR 0 13
37905: PPUSH
37906: CALL_OW 247
37910: PUSH
37911: LD_INT 2
37913: EQUAL
37914: AND
37915: PUSH
37916: LD_VAR 0 13
37920: PPUSH
37921: CALL_OW 263
37925: PUSH
37926: LD_INT 1
37928: EQUAL
37929: AND
37930: IFFALSE 38094
// begin if IsDrivenBy ( tmp ) then
37932: LD_VAR 0 13
37936: PPUSH
37937: CALL_OW 311
37941: IFFALSE 37945
// continue ;
37943: GO 37744
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37945: LD_VAR 0 6
37949: PPUSH
37950: LD_INT 3
37952: PUSH
37953: LD_INT 60
37955: PUSH
37956: EMPTY
37957: LIST
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 3
37965: PUSH
37966: LD_INT 55
37968: PUSH
37969: EMPTY
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PPUSH
37980: CALL_OW 72
37984: IFFALSE 38092
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37986: LD_ADDR_VAR 0 18
37990: PUSH
37991: LD_VAR 0 6
37995: PPUSH
37996: LD_INT 3
37998: PUSH
37999: LD_INT 60
38001: PUSH
38002: EMPTY
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: LD_INT 55
38014: PUSH
38015: EMPTY
38016: LIST
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PPUSH
38026: CALL_OW 72
38030: PUSH
38031: LD_INT 1
38033: ARRAY
38034: ST_TO_ADDR
// if IsInUnit ( driver ) then
38035: LD_VAR 0 18
38039: PPUSH
38040: CALL_OW 310
38044: IFFALSE 38055
// ComExit ( driver ) ;
38046: LD_VAR 0 18
38050: PPUSH
38051: CALL 63477 0 1
// AddComEnterUnit ( driver , tmp ) ;
38055: LD_VAR 0 18
38059: PPUSH
38060: LD_VAR 0 13
38064: PPUSH
38065: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38069: LD_VAR 0 18
38073: PPUSH
38074: LD_VAR 0 7
38078: PPUSH
38079: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38083: LD_VAR 0 18
38087: PPUSH
38088: CALL_OW 181
// end ; continue ;
38092: GO 37744
// end ; if not cleaners or not tmp in cleaners then
38094: LD_VAR 0 6
38098: NOT
38099: PUSH
38100: LD_VAR 0 13
38104: PUSH
38105: LD_VAR 0 6
38109: IN
38110: NOT
38111: OR
38112: IFFALSE 38419
// begin if dep then
38114: LD_VAR 0 17
38118: IFFALSE 38254
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38120: LD_ADDR_VAR 0 16
38124: PUSH
38125: LD_VAR 0 17
38129: PUSH
38130: LD_INT 1
38132: ARRAY
38133: PPUSH
38134: CALL_OW 250
38138: PPUSH
38139: LD_VAR 0 17
38143: PUSH
38144: LD_INT 1
38146: ARRAY
38147: PPUSH
38148: CALL_OW 254
38152: PPUSH
38153: LD_INT 5
38155: PPUSH
38156: CALL_OW 272
38160: PUSH
38161: LD_VAR 0 17
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PPUSH
38170: CALL_OW 251
38174: PPUSH
38175: LD_VAR 0 17
38179: PUSH
38180: LD_INT 1
38182: ARRAY
38183: PPUSH
38184: CALL_OW 254
38188: PPUSH
38189: LD_INT 5
38191: PPUSH
38192: CALL_OW 273
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38201: LD_VAR 0 16
38205: PUSH
38206: LD_INT 1
38208: ARRAY
38209: PPUSH
38210: LD_VAR 0 16
38214: PUSH
38215: LD_INT 2
38217: ARRAY
38218: PPUSH
38219: CALL_OW 488
38223: IFFALSE 38254
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38225: LD_VAR 0 13
38229: PPUSH
38230: LD_VAR 0 16
38234: PUSH
38235: LD_INT 1
38237: ARRAY
38238: PPUSH
38239: LD_VAR 0 16
38243: PUSH
38244: LD_INT 2
38246: ARRAY
38247: PPUSH
38248: CALL_OW 111
// continue ;
38252: GO 37744
// end ; end ; r := GetDir ( tmp ) ;
38254: LD_ADDR_VAR 0 15
38258: PUSH
38259: LD_VAR 0 13
38263: PPUSH
38264: CALL_OW 254
38268: ST_TO_ADDR
// if r = 5 then
38269: LD_VAR 0 15
38273: PUSH
38274: LD_INT 5
38276: EQUAL
38277: IFFALSE 38287
// r := 0 ;
38279: LD_ADDR_VAR 0 15
38283: PUSH
38284: LD_INT 0
38286: ST_TO_ADDR
// for j = r to 5 do
38287: LD_ADDR_VAR 0 10
38291: PUSH
38292: DOUBLE
38293: LD_VAR 0 15
38297: DEC
38298: ST_TO_ADDR
38299: LD_INT 5
38301: PUSH
38302: FOR_TO
38303: IFFALSE 38417
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38305: LD_ADDR_VAR 0 11
38309: PUSH
38310: LD_VAR 0 13
38314: PPUSH
38315: CALL_OW 250
38319: PPUSH
38320: LD_VAR 0 10
38324: PPUSH
38325: LD_INT 2
38327: PPUSH
38328: CALL_OW 272
38332: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38333: LD_ADDR_VAR 0 12
38337: PUSH
38338: LD_VAR 0 13
38342: PPUSH
38343: CALL_OW 251
38347: PPUSH
38348: LD_VAR 0 10
38352: PPUSH
38353: LD_INT 2
38355: PPUSH
38356: CALL_OW 273
38360: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38361: LD_VAR 0 11
38365: PPUSH
38366: LD_VAR 0 12
38370: PPUSH
38371: CALL_OW 488
38375: PUSH
38376: LD_VAR 0 11
38380: PPUSH
38381: LD_VAR 0 12
38385: PPUSH
38386: CALL_OW 428
38390: NOT
38391: AND
38392: IFFALSE 38415
// begin ComMoveXY ( tmp , _x , _y ) ;
38394: LD_VAR 0 13
38398: PPUSH
38399: LD_VAR 0 11
38403: PPUSH
38404: LD_VAR 0 12
38408: PPUSH
38409: CALL_OW 111
// break ;
38413: GO 38417
// end ; end ;
38415: GO 38302
38417: POP
38418: POP
// end ; end ;
38419: GO 37744
38421: POP
38422: POP
// end ;
38423: LD_VAR 0 8
38427: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38428: LD_INT 0
38430: PPUSH
// result := true ;
38431: LD_ADDR_VAR 0 3
38435: PUSH
38436: LD_INT 1
38438: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38439: LD_VAR 0 2
38443: PUSH
38444: LD_INT 24
38446: DOUBLE
38447: EQUAL
38448: IFTRUE 38458
38450: LD_INT 33
38452: DOUBLE
38453: EQUAL
38454: IFTRUE 38458
38456: GO 38483
38458: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38459: LD_ADDR_VAR 0 3
38463: PUSH
38464: LD_INT 32
38466: PPUSH
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 321
38476: PUSH
38477: LD_INT 2
38479: EQUAL
38480: ST_TO_ADDR
38481: GO 38799
38483: LD_INT 20
38485: DOUBLE
38486: EQUAL
38487: IFTRUE 38491
38489: GO 38516
38491: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38492: LD_ADDR_VAR 0 3
38496: PUSH
38497: LD_INT 6
38499: PPUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL_OW 321
38509: PUSH
38510: LD_INT 2
38512: EQUAL
38513: ST_TO_ADDR
38514: GO 38799
38516: LD_INT 22
38518: DOUBLE
38519: EQUAL
38520: IFTRUE 38530
38522: LD_INT 36
38524: DOUBLE
38525: EQUAL
38526: IFTRUE 38530
38528: GO 38555
38530: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38531: LD_ADDR_VAR 0 3
38535: PUSH
38536: LD_INT 15
38538: PPUSH
38539: LD_VAR 0 1
38543: PPUSH
38544: CALL_OW 321
38548: PUSH
38549: LD_INT 2
38551: EQUAL
38552: ST_TO_ADDR
38553: GO 38799
38555: LD_INT 30
38557: DOUBLE
38558: EQUAL
38559: IFTRUE 38563
38561: GO 38588
38563: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38564: LD_ADDR_VAR 0 3
38568: PUSH
38569: LD_INT 20
38571: PPUSH
38572: LD_VAR 0 1
38576: PPUSH
38577: CALL_OW 321
38581: PUSH
38582: LD_INT 2
38584: EQUAL
38585: ST_TO_ADDR
38586: GO 38799
38588: LD_INT 28
38590: DOUBLE
38591: EQUAL
38592: IFTRUE 38602
38594: LD_INT 21
38596: DOUBLE
38597: EQUAL
38598: IFTRUE 38602
38600: GO 38627
38602: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38603: LD_ADDR_VAR 0 3
38607: PUSH
38608: LD_INT 21
38610: PPUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL_OW 321
38620: PUSH
38621: LD_INT 2
38623: EQUAL
38624: ST_TO_ADDR
38625: GO 38799
38627: LD_INT 16
38629: DOUBLE
38630: EQUAL
38631: IFTRUE 38635
38633: GO 38660
38635: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38636: LD_ADDR_VAR 0 3
38640: PUSH
38641: LD_INT 84
38643: PPUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: CALL_OW 321
38653: PUSH
38654: LD_INT 2
38656: EQUAL
38657: ST_TO_ADDR
38658: GO 38799
38660: LD_INT 19
38662: DOUBLE
38663: EQUAL
38664: IFTRUE 38674
38666: LD_INT 23
38668: DOUBLE
38669: EQUAL
38670: IFTRUE 38674
38672: GO 38699
38674: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38675: LD_ADDR_VAR 0 3
38679: PUSH
38680: LD_INT 83
38682: PPUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 321
38692: PUSH
38693: LD_INT 2
38695: EQUAL
38696: ST_TO_ADDR
38697: GO 38799
38699: LD_INT 17
38701: DOUBLE
38702: EQUAL
38703: IFTRUE 38707
38705: GO 38732
38707: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38708: LD_ADDR_VAR 0 3
38712: PUSH
38713: LD_INT 39
38715: PPUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: CALL_OW 321
38725: PUSH
38726: LD_INT 2
38728: EQUAL
38729: ST_TO_ADDR
38730: GO 38799
38732: LD_INT 18
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38740
38738: GO 38765
38740: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38741: LD_ADDR_VAR 0 3
38745: PUSH
38746: LD_INT 40
38748: PPUSH
38749: LD_VAR 0 1
38753: PPUSH
38754: CALL_OW 321
38758: PUSH
38759: LD_INT 2
38761: EQUAL
38762: ST_TO_ADDR
38763: GO 38799
38765: LD_INT 27
38767: DOUBLE
38768: EQUAL
38769: IFTRUE 38773
38771: GO 38798
38773: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38774: LD_ADDR_VAR 0 3
38778: PUSH
38779: LD_INT 35
38781: PPUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: CALL_OW 321
38791: PUSH
38792: LD_INT 2
38794: EQUAL
38795: ST_TO_ADDR
38796: GO 38799
38798: POP
// end ;
38799: LD_VAR 0 3
38803: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38804: LD_INT 0
38806: PPUSH
38807: PPUSH
38808: PPUSH
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
// result := false ;
38817: LD_ADDR_VAR 0 6
38821: PUSH
38822: LD_INT 0
38824: ST_TO_ADDR
// if btype = b_depot then
38825: LD_VAR 0 2
38829: PUSH
38830: LD_INT 0
38832: EQUAL
38833: IFFALSE 38845
// begin result := true ;
38835: LD_ADDR_VAR 0 6
38839: PUSH
38840: LD_INT 1
38842: ST_TO_ADDR
// exit ;
38843: GO 39671
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38845: LD_VAR 0 1
38849: NOT
38850: PUSH
38851: LD_VAR 0 1
38855: PPUSH
38856: CALL_OW 266
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: IN
38871: NOT
38872: OR
38873: PUSH
38874: LD_VAR 0 2
38878: NOT
38879: OR
38880: PUSH
38881: LD_VAR 0 5
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: LD_INT 4
38900: PUSH
38901: LD_INT 5
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: IN
38912: NOT
38913: OR
38914: PUSH
38915: LD_VAR 0 3
38919: PPUSH
38920: LD_VAR 0 4
38924: PPUSH
38925: CALL_OW 488
38929: NOT
38930: OR
38931: IFFALSE 38935
// exit ;
38933: GO 39671
// side := GetSide ( depot ) ;
38935: LD_ADDR_VAR 0 9
38939: PUSH
38940: LD_VAR 0 1
38944: PPUSH
38945: CALL_OW 255
38949: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38950: LD_VAR 0 9
38954: PPUSH
38955: LD_VAR 0 2
38959: PPUSH
38960: CALL 38428 0 2
38964: NOT
38965: IFFALSE 38969
// exit ;
38967: GO 39671
// pom := GetBase ( depot ) ;
38969: LD_ADDR_VAR 0 10
38973: PUSH
38974: LD_VAR 0 1
38978: PPUSH
38979: CALL_OW 274
38983: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38984: LD_ADDR_VAR 0 11
38988: PUSH
38989: LD_VAR 0 2
38993: PPUSH
38994: LD_VAR 0 1
38998: PPUSH
38999: CALL_OW 248
39003: PPUSH
39004: CALL_OW 450
39008: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39009: LD_VAR 0 10
39013: PPUSH
39014: LD_INT 1
39016: PPUSH
39017: CALL_OW 275
39021: PUSH
39022: LD_VAR 0 11
39026: PUSH
39027: LD_INT 1
39029: ARRAY
39030: GREATEREQUAL
39031: PUSH
39032: LD_VAR 0 10
39036: PPUSH
39037: LD_INT 2
39039: PPUSH
39040: CALL_OW 275
39044: PUSH
39045: LD_VAR 0 11
39049: PUSH
39050: LD_INT 2
39052: ARRAY
39053: GREATEREQUAL
39054: AND
39055: PUSH
39056: LD_VAR 0 10
39060: PPUSH
39061: LD_INT 3
39063: PPUSH
39064: CALL_OW 275
39068: PUSH
39069: LD_VAR 0 11
39073: PUSH
39074: LD_INT 3
39076: ARRAY
39077: GREATEREQUAL
39078: AND
39079: NOT
39080: IFFALSE 39084
// exit ;
39082: GO 39671
// if GetBType ( depot ) = b_depot then
39084: LD_VAR 0 1
39088: PPUSH
39089: CALL_OW 266
39093: PUSH
39094: LD_INT 0
39096: EQUAL
39097: IFFALSE 39109
// dist := 28 else
39099: LD_ADDR_VAR 0 14
39103: PUSH
39104: LD_INT 28
39106: ST_TO_ADDR
39107: GO 39117
// dist := 36 ;
39109: LD_ADDR_VAR 0 14
39113: PUSH
39114: LD_INT 36
39116: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39117: LD_VAR 0 1
39121: PPUSH
39122: LD_VAR 0 3
39126: PPUSH
39127: LD_VAR 0 4
39131: PPUSH
39132: CALL_OW 297
39136: PUSH
39137: LD_VAR 0 14
39141: GREATER
39142: IFFALSE 39146
// exit ;
39144: GO 39671
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39146: LD_ADDR_VAR 0 12
39150: PUSH
39151: LD_VAR 0 2
39155: PPUSH
39156: LD_VAR 0 3
39160: PPUSH
39161: LD_VAR 0 4
39165: PPUSH
39166: LD_VAR 0 5
39170: PPUSH
39171: LD_VAR 0 1
39175: PPUSH
39176: CALL_OW 248
39180: PPUSH
39181: LD_INT 0
39183: PPUSH
39184: CALL 39676 0 6
39188: ST_TO_ADDR
// if not hexes then
39189: LD_VAR 0 12
39193: NOT
39194: IFFALSE 39198
// exit ;
39196: GO 39671
// hex := GetHexInfo ( x , y ) ;
39198: LD_ADDR_VAR 0 15
39202: PUSH
39203: LD_VAR 0 3
39207: PPUSH
39208: LD_VAR 0 4
39212: PPUSH
39213: CALL_OW 546
39217: ST_TO_ADDR
// if hex [ 1 ] then
39218: LD_VAR 0 15
39222: PUSH
39223: LD_INT 1
39225: ARRAY
39226: IFFALSE 39230
// exit ;
39228: GO 39671
// height := hex [ 2 ] ;
39230: LD_ADDR_VAR 0 13
39234: PUSH
39235: LD_VAR 0 15
39239: PUSH
39240: LD_INT 2
39242: ARRAY
39243: ST_TO_ADDR
// for i = 1 to hexes do
39244: LD_ADDR_VAR 0 7
39248: PUSH
39249: DOUBLE
39250: LD_INT 1
39252: DEC
39253: ST_TO_ADDR
39254: LD_VAR 0 12
39258: PUSH
39259: FOR_TO
39260: IFFALSE 39590
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39262: LD_VAR 0 12
39266: PUSH
39267: LD_VAR 0 7
39271: ARRAY
39272: PUSH
39273: LD_INT 1
39275: ARRAY
39276: PPUSH
39277: LD_VAR 0 12
39281: PUSH
39282: LD_VAR 0 7
39286: ARRAY
39287: PUSH
39288: LD_INT 2
39290: ARRAY
39291: PPUSH
39292: CALL_OW 488
39296: NOT
39297: PUSH
39298: LD_VAR 0 12
39302: PUSH
39303: LD_VAR 0 7
39307: ARRAY
39308: PUSH
39309: LD_INT 1
39311: ARRAY
39312: PPUSH
39313: LD_VAR 0 12
39317: PUSH
39318: LD_VAR 0 7
39322: ARRAY
39323: PUSH
39324: LD_INT 2
39326: ARRAY
39327: PPUSH
39328: CALL_OW 428
39332: PUSH
39333: LD_INT 0
39335: GREATER
39336: OR
39337: PUSH
39338: LD_VAR 0 12
39342: PUSH
39343: LD_VAR 0 7
39347: ARRAY
39348: PUSH
39349: LD_INT 1
39351: ARRAY
39352: PPUSH
39353: LD_VAR 0 12
39357: PUSH
39358: LD_VAR 0 7
39362: ARRAY
39363: PUSH
39364: LD_INT 2
39366: ARRAY
39367: PPUSH
39368: CALL_OW 351
39372: OR
39373: IFFALSE 39379
// exit ;
39375: POP
39376: POP
39377: GO 39671
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39379: LD_ADDR_VAR 0 8
39383: PUSH
39384: LD_VAR 0 12
39388: PUSH
39389: LD_VAR 0 7
39393: ARRAY
39394: PUSH
39395: LD_INT 1
39397: ARRAY
39398: PPUSH
39399: LD_VAR 0 12
39403: PUSH
39404: LD_VAR 0 7
39408: ARRAY
39409: PUSH
39410: LD_INT 2
39412: ARRAY
39413: PPUSH
39414: CALL_OW 546
39418: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39419: LD_VAR 0 8
39423: PUSH
39424: LD_INT 1
39426: ARRAY
39427: PUSH
39428: LD_VAR 0 8
39432: PUSH
39433: LD_INT 2
39435: ARRAY
39436: PUSH
39437: LD_VAR 0 13
39441: PUSH
39442: LD_INT 2
39444: PLUS
39445: GREATER
39446: OR
39447: PUSH
39448: LD_VAR 0 8
39452: PUSH
39453: LD_INT 2
39455: ARRAY
39456: PUSH
39457: LD_VAR 0 13
39461: PUSH
39462: LD_INT 2
39464: MINUS
39465: LESS
39466: OR
39467: PUSH
39468: LD_VAR 0 8
39472: PUSH
39473: LD_INT 3
39475: ARRAY
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 8
39482: PUSH
39483: LD_INT 9
39485: PUSH
39486: LD_INT 10
39488: PUSH
39489: LD_INT 11
39491: PUSH
39492: LD_INT 12
39494: PUSH
39495: LD_INT 13
39497: PUSH
39498: LD_INT 16
39500: PUSH
39501: LD_INT 17
39503: PUSH
39504: LD_INT 18
39506: PUSH
39507: LD_INT 19
39509: PUSH
39510: LD_INT 20
39512: PUSH
39513: LD_INT 21
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: IN
39531: NOT
39532: OR
39533: PUSH
39534: LD_VAR 0 8
39538: PUSH
39539: LD_INT 5
39541: ARRAY
39542: NOT
39543: OR
39544: PUSH
39545: LD_VAR 0 8
39549: PUSH
39550: LD_INT 6
39552: ARRAY
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: LD_INT 7
39562: PUSH
39563: LD_INT 9
39565: PUSH
39566: LD_INT 10
39568: PUSH
39569: LD_INT 11
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: IN
39580: NOT
39581: OR
39582: IFFALSE 39588
// exit ;
39584: POP
39585: POP
39586: GO 39671
// end ;
39588: GO 39259
39590: POP
39591: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39592: LD_VAR 0 9
39596: PPUSH
39597: LD_VAR 0 3
39601: PPUSH
39602: LD_VAR 0 4
39606: PPUSH
39607: LD_INT 20
39609: PPUSH
39610: CALL 31594 0 4
39614: PUSH
39615: LD_INT 4
39617: ARRAY
39618: IFFALSE 39622
// exit ;
39620: GO 39671
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39622: LD_VAR 0 2
39626: PUSH
39627: LD_INT 29
39629: PUSH
39630: LD_INT 30
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: IN
39637: PUSH
39638: LD_VAR 0 3
39642: PPUSH
39643: LD_VAR 0 4
39647: PPUSH
39648: LD_VAR 0 9
39652: PPUSH
39653: CALL_OW 440
39657: NOT
39658: AND
39659: IFFALSE 39663
// exit ;
39661: GO 39671
// result := true ;
39663: LD_ADDR_VAR 0 6
39667: PUSH
39668: LD_INT 1
39670: ST_TO_ADDR
// end ;
39671: LD_VAR 0 6
39675: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39676: LD_INT 0
39678: PPUSH
39679: PPUSH
39680: PPUSH
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
39720: PPUSH
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
39728: PPUSH
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
// result = [ ] ;
39736: LD_ADDR_VAR 0 7
39740: PUSH
39741: EMPTY
39742: ST_TO_ADDR
// temp_list = [ ] ;
39743: LD_ADDR_VAR 0 9
39747: PUSH
39748: EMPTY
39749: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39750: LD_VAR 0 4
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: LD_INT 3
39766: PUSH
39767: LD_INT 4
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: IN
39781: NOT
39782: PUSH
39783: LD_VAR 0 1
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: IN
39798: PUSH
39799: LD_VAR 0 5
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: LD_INT 3
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: IN
39818: NOT
39819: AND
39820: OR
39821: IFFALSE 39825
// exit ;
39823: GO 58216
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39825: LD_VAR 0 1
39829: PUSH
39830: LD_INT 6
39832: PUSH
39833: LD_INT 7
39835: PUSH
39836: LD_INT 8
39838: PUSH
39839: LD_INT 13
39841: PUSH
39842: LD_INT 12
39844: PUSH
39845: LD_INT 15
39847: PUSH
39848: LD_INT 11
39850: PUSH
39851: LD_INT 14
39853: PUSH
39854: LD_INT 10
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: IN
39868: IFFALSE 39878
// btype = b_lab ;
39870: LD_ADDR_VAR 0 1
39874: PUSH
39875: LD_INT 6
39877: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39878: LD_VAR 0 6
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: IN
39897: NOT
39898: PUSH
39899: LD_VAR 0 1
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 6
39918: PUSH
39919: LD_INT 36
39921: PUSH
39922: LD_INT 4
39924: PUSH
39925: LD_INT 5
39927: PUSH
39928: LD_INT 31
39930: PUSH
39931: LD_INT 32
39933: PUSH
39934: LD_INT 33
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: IN
39950: NOT
39951: PUSH
39952: LD_VAR 0 6
39956: PUSH
39957: LD_INT 1
39959: EQUAL
39960: AND
39961: OR
39962: PUSH
39963: LD_VAR 0 1
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: IN
39978: NOT
39979: PUSH
39980: LD_VAR 0 6
39984: PUSH
39985: LD_INT 2
39987: EQUAL
39988: AND
39989: OR
39990: IFFALSE 40000
// mode = 0 ;
39992: LD_ADDR_VAR 0 6
39996: PUSH
39997: LD_INT 0
39999: ST_TO_ADDR
// case mode of 0 :
40000: LD_VAR 0 6
40004: PUSH
40005: LD_INT 0
40007: DOUBLE
40008: EQUAL
40009: IFTRUE 40013
40011: GO 51466
40013: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40014: LD_ADDR_VAR 0 11
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 2
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 3
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40207: LD_ADDR_VAR 0 12
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 3
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40403: LD_ADDR_VAR 0 13
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: LD_INT 3
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 3
40562: NEG
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: LD_INT 3
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40602: LD_ADDR_VAR 0 14
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 3
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40798: LD_ADDR_VAR 0 15
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 3
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 3
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40991: LD_ADDR_VAR 0 16
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 2
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 2
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 3
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 3
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41184: LD_ADDR_VAR 0 17
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41414: LD_ADDR_VAR 0 18
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41644: LD_ADDR_VAR 0 19
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41874: LD_ADDR_VAR 0 20
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42104: LD_ADDR_VAR 0 21
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42334: LD_ADDR_VAR 0 22
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42564: LD_ADDR_VAR 0 23
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: LD_INT 3
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42844: LD_ADDR_VAR 0 24
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: NEG
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43120: LD_ADDR_VAR 0 25
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43394: LD_ADDR_VAR 0 26
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 3
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43670: LD_ADDR_VAR 0 27
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: NEG
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: NEG
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43950: LD_ADDR_VAR 0 28
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 3
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 3
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44232: LD_ADDR_VAR 0 29
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: LD_INT 3
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 3
44476: NEG
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44511: LD_ADDR_VAR 0 30
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 3
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 3
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44789: LD_ADDR_VAR 0 31
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: LD_INT 3
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45067: LD_ADDR_VAR 0 32
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 3
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 3
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45345: LD_ADDR_VAR 0 33
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 3
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 3
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 3
45589: NEG
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45624: LD_ADDR_VAR 0 34
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 3
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 3
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45904: LD_ADDR_VAR 0 35
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46016: LD_ADDR_VAR 0 36
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46128: LD_ADDR_VAR 0 37
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46240: LD_ADDR_VAR 0 38
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46352: LD_ADDR_VAR 0 39
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46464: LD_ADDR_VAR 0 40
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46576: LD_ADDR_VAR 0 41
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 3
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 3
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 3
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 3
46819: PUSH
46820: LD_INT 3
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 3
46873: NEG
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: NEG
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46926: LD_ADDR_VAR 0 42
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 3
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 3
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 3
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 3
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: LD_INT 3
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47276: LD_ADDR_VAR 0 43
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 3
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47624: LD_ADDR_VAR 0 44
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 3
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: NEG
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 3
47933: NEG
47934: PUSH
47935: LD_INT 3
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47974: LD_ADDR_VAR 0 45
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 3
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 3
48271: NEG
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: NEG
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48324: LD_ADDR_VAR 0 46
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 3
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 3
48620: NEG
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48672: LD_ADDR_VAR 0 47
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48823: LD_ADDR_VAR 0 48
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48970: LD_ADDR_VAR 0 49
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49114: LD_ADDR_VAR 0 50
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49258: LD_ADDR_VAR 0 51
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49405: LD_ADDR_VAR 0 52
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49556: LD_ADDR_VAR 0 53
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49786: LD_ADDR_VAR 0 54
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50016: LD_ADDR_VAR 0 55
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50246: LD_ADDR_VAR 0 56
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 2
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50476: LD_ADDR_VAR 0 57
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50706: LD_ADDR_VAR 0 58
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50936: LD_ADDR_VAR 0 59
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51024: LD_ADDR_VAR 0 60
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51112: LD_ADDR_VAR 0 61
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51200: LD_ADDR_VAR 0 62
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51288: LD_ADDR_VAR 0 63
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51376: LD_ADDR_VAR 0 64
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// end ; 1 :
51464: GO 57361
51466: LD_INT 1
51468: DOUBLE
51469: EQUAL
51470: IFTRUE 51474
51472: GO 54097
51474: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51475: LD_ADDR_VAR 0 11
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51519: LD_ADDR_VAR 0 12
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51560: LD_ADDR_VAR 0 13
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 3
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51600: LD_ADDR_VAR 0 14
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 3
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 3
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51641: LD_ADDR_VAR 0 15
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51685: LD_ADDR_VAR 0 16
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 3
51704: NEG
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: NEG
51717: PUSH
51718: LD_INT 3
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51731: LD_ADDR_VAR 0 17
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 3
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: LIST
51774: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51775: LD_ADDR_VAR 0 18
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 3
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51816: LD_ADDR_VAR 0 19
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51856: LD_ADDR_VAR 0 20
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51897: LD_ADDR_VAR 0 21
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 3
51915: NEG
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51941: LD_ADDR_VAR 0 22
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 3
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 3
51972: NEG
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51987: LD_ADDR_VAR 0 23
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52031: LD_ADDR_VAR 0 24
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 4
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: LIST
52071: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52072: LD_ADDR_VAR 0 25
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 4
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 3
52099: PUSH
52100: LD_INT 4
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52112: LD_ADDR_VAR 0 26
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 3
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 4
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: LIST
52152: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52153: LD_ADDR_VAR 0 27
52157: PUSH
52158: LD_INT 3
52160: NEG
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 4
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: LIST
52196: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52197: LD_ADDR_VAR 0 28
52201: PUSH
52202: LD_INT 3
52204: NEG
52205: PUSH
52206: LD_INT 3
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: LD_INT 4
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 4
52228: NEG
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52243: LD_ADDR_VAR 0 29
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 3
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 3
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 4
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 4
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: LD_INT 5
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 5
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 4
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 6
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 6
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 5
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52398: LD_ADDR_VAR 0 30
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 3
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 4
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 4
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 4
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 5
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 5
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 5
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 6
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 6
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52541: LD_ADDR_VAR 0 31
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 4
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 4
52588: PUSH
52589: LD_INT 4
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: LD_INT 4
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: LD_INT 4
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 5
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 4
52628: PUSH
52629: LD_INT 5
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 6
52638: PUSH
52639: LD_INT 5
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 6
52648: PUSH
52649: LD_INT 6
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 5
52658: PUSH
52659: LD_INT 6
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52680: LD_ADDR_VAR 0 32
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 4
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 5
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 5
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 4
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 6
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 6
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 5
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52823: LD_ADDR_VAR 0 33
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 4
52875: NEG
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 4
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 4
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 5
52909: NEG
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 5
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 5
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 6
52943: NEG
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 6
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52978: LD_ADDR_VAR 0 34
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 3
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: LD_INT 4
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 4
53033: NEG
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 4
53045: NEG
53046: PUSH
53047: LD_INT 4
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 4
53057: NEG
53058: PUSH
53059: LD_INT 5
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 5
53069: NEG
53070: PUSH
53071: LD_INT 4
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 5
53081: NEG
53082: PUSH
53083: LD_INT 5
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 5
53093: NEG
53094: PUSH
53095: LD_INT 6
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 6
53105: NEG
53106: PUSH
53107: LD_INT 5
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 6
53117: NEG
53118: PUSH
53119: LD_INT 6
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53141: LD_ADDR_VAR 0 41
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53185: LD_ADDR_VAR 0 42
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53226: LD_ADDR_VAR 0 43
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 3
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53266: LD_ADDR_VAR 0 44
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53307: LD_ADDR_VAR 0 45
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53351: LD_ADDR_VAR 0 46
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 3
53382: NEG
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53397: LD_ADDR_VAR 0 47
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 3
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 3
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53430: LD_ADDR_VAR 0 48
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53461: LD_ADDR_VAR 0 49
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53490: LD_ADDR_VAR 0 50
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53519: LD_ADDR_VAR 0 51
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53550: LD_ADDR_VAR 0 52
53554: PUSH
53555: LD_INT 3
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53583: LD_ADDR_VAR 0 53
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 3
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 3
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53627: LD_ADDR_VAR 0 54
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53668: LD_ADDR_VAR 0 55
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 3
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 3
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53708: LD_ADDR_VAR 0 56
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 3
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53749: LD_ADDR_VAR 0 57
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 3
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53793: LD_ADDR_VAR 0 58
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53839: LD_ADDR_VAR 0 59
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53883: LD_ADDR_VAR 0 60
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53924: LD_ADDR_VAR 0 61
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53964: LD_ADDR_VAR 0 62
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54005: LD_ADDR_VAR 0 63
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54049: LD_ADDR_VAR 0 64
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: ST_TO_ADDR
// end ; 2 :
54095: GO 57361
54097: LD_INT 2
54099: DOUBLE
54100: EQUAL
54101: IFTRUE 54105
54103: GO 57360
54105: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54106: LD_ADDR_VAR 0 29
54110: PUSH
54111: LD_INT 4
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 4
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 5
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 5
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 4
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 3
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 5
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 3
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 4
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 4
54236: PUSH
54237: LD_INT 4
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: LD_INT 4
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 4
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 4
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 4
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 4
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 5
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 5
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 4
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: LD_INT 5
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 4
54445: NEG
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 4
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 4
54468: NEG
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 4
54491: NEG
54492: PUSH
54493: LD_INT 4
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 4
54503: NEG
54504: PUSH
54505: LD_INT 5
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: LD_INT 4
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 4
54539: NEG
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 5
54551: NEG
54552: PUSH
54553: LD_INT 4
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 5
54563: NEG
54564: PUSH
54565: LD_INT 5
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: LD_INT 5
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 5
54587: NEG
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54644: LD_ADDR_VAR 0 30
54648: PUSH
54649: LD_INT 4
54651: PUSH
54652: LD_INT 4
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 4
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 5
54671: PUSH
54672: LD_INT 4
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 5
54681: PUSH
54682: LD_INT 5
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 4
54691: PUSH
54692: LD_INT 5
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: LD_INT 4
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 5
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: LD_INT 5
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 3
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 4
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 4
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: PUSH
54814: LD_INT 4
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 4
54834: NEG
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 4
54845: NEG
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 3
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 5
54890: NEG
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 5
54901: NEG
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 5
54913: NEG
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 3
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: LD_INT 4
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 4
54996: NEG
54997: PUSH
54998: LD_INT 3
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 4
55008: NEG
55009: PUSH
55010: LD_INT 4
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 4
55032: NEG
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 4
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 5
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 4
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 3
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 3
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 4
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 5
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: LD_INT 5
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55191: LD_ADDR_VAR 0 31
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 4
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 3
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 4
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 5
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 5
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 4
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: LD_INT 5
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 3
55302: NEG
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 4
55347: NEG
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 4
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 4
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 4
55393: NEG
55394: PUSH
55395: LD_INT 4
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: LD_INT 5
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: LD_INT 4
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 4
55441: NEG
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 5
55453: NEG
55454: PUSH
55455: LD_INT 4
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 5
55465: NEG
55466: PUSH
55467: LD_INT 5
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: NEG
55478: PUSH
55479: LD_INT 5
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 5
55489: NEG
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 3
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 4
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 3
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 4
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 4
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 4
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 4
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 5
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 5
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 4
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 5
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55741: LD_ADDR_VAR 0 32
55745: PUSH
55746: LD_INT 4
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 4
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 3
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 4
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 5
55804: NEG
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 5
55815: NEG
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 5
55827: NEG
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 3
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: LD_INT 3
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 3
55862: NEG
55863: PUSH
55864: LD_INT 4
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: NEG
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 4
55910: NEG
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 4
55922: NEG
55923: PUSH
55924: LD_INT 4
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: LD_INT 4
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 4
55946: NEG
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 4
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 5
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 4
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 3
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 4
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 5
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 5
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 4
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 4
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 3
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 4
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 4
56153: PUSH
56154: LD_INT 4
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 4
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 5
56173: PUSH
56174: LD_INT 4
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 5
56183: PUSH
56184: LD_INT 5
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 4
56193: PUSH
56194: LD_INT 5
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: LD_INT 4
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 5
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: LD_INT 5
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56288: LD_ADDR_VAR 0 33
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: LD_INT 4
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 4
56307: NEG
56308: PUSH
56309: LD_INT 5
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: LD_INT 4
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 4
56343: NEG
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 5
56355: NEG
56356: PUSH
56357: LD_INT 4
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 5
56367: NEG
56368: PUSH
56369: LD_INT 5
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: LD_INT 5
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 5
56391: NEG
56392: PUSH
56393: LD_INT 3
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 4
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 3
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: LD_INT 4
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 4
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 4
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 5
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 5
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 5
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 3
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 4
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 4
56628: PUSH
56629: LD_INT 4
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 4
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 4
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 4
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 4
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 5
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 5
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 4
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 5
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56826: LD_ADDR_VAR 0 34
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 4
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 5
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 4
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 3
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 4
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 5
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 5
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 4
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 4
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 4
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 4
57028: PUSH
57029: LD_INT 4
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 4
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 5
57048: PUSH
57049: LD_INT 4
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 5
57058: PUSH
57059: LD_INT 5
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 4
57068: PUSH
57069: LD_INT 5
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: LD_INT 4
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 5
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: LD_INT 5
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 3
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 4
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 4
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 4
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 4
57211: NEG
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 4
57222: NEG
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 4
57256: NEG
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 5
57267: NEG
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 5
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 5
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: ST_TO_ADDR
// end ; end ;
57358: GO 57361
57360: POP
// case btype of b_depot , b_warehouse :
57361: LD_VAR 0 1
57365: PUSH
57366: LD_INT 0
57368: DOUBLE
57369: EQUAL
57370: IFTRUE 57380
57372: LD_INT 1
57374: DOUBLE
57375: EQUAL
57376: IFTRUE 57380
57378: GO 57581
57380: POP
// case nation of nation_american :
57381: LD_VAR 0 5
57385: PUSH
57386: LD_INT 1
57388: DOUBLE
57389: EQUAL
57390: IFTRUE 57394
57392: GO 57450
57394: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57395: LD_ADDR_VAR 0 9
57399: PUSH
57400: LD_VAR 0 11
57404: PUSH
57405: LD_VAR 0 12
57409: PUSH
57410: LD_VAR 0 13
57414: PUSH
57415: LD_VAR 0 14
57419: PUSH
57420: LD_VAR 0 15
57424: PUSH
57425: LD_VAR 0 16
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: PUSH
57438: LD_VAR 0 4
57442: PUSH
57443: LD_INT 1
57445: PLUS
57446: ARRAY
57447: ST_TO_ADDR
57448: GO 57579
57450: LD_INT 2
57452: DOUBLE
57453: EQUAL
57454: IFTRUE 57458
57456: GO 57514
57458: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57459: LD_ADDR_VAR 0 9
57463: PUSH
57464: LD_VAR 0 17
57468: PUSH
57469: LD_VAR 0 18
57473: PUSH
57474: LD_VAR 0 19
57478: PUSH
57479: LD_VAR 0 20
57483: PUSH
57484: LD_VAR 0 21
57488: PUSH
57489: LD_VAR 0 22
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: PUSH
57502: LD_VAR 0 4
57506: PUSH
57507: LD_INT 1
57509: PLUS
57510: ARRAY
57511: ST_TO_ADDR
57512: GO 57579
57514: LD_INT 3
57516: DOUBLE
57517: EQUAL
57518: IFTRUE 57522
57520: GO 57578
57522: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57523: LD_ADDR_VAR 0 9
57527: PUSH
57528: LD_VAR 0 23
57532: PUSH
57533: LD_VAR 0 24
57537: PUSH
57538: LD_VAR 0 25
57542: PUSH
57543: LD_VAR 0 26
57547: PUSH
57548: LD_VAR 0 27
57552: PUSH
57553: LD_VAR 0 28
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: PUSH
57566: LD_VAR 0 4
57570: PUSH
57571: LD_INT 1
57573: PLUS
57574: ARRAY
57575: ST_TO_ADDR
57576: GO 57579
57578: POP
57579: GO 58134
57581: LD_INT 2
57583: DOUBLE
57584: EQUAL
57585: IFTRUE 57595
57587: LD_INT 3
57589: DOUBLE
57590: EQUAL
57591: IFTRUE 57595
57593: GO 57651
57595: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57596: LD_ADDR_VAR 0 9
57600: PUSH
57601: LD_VAR 0 29
57605: PUSH
57606: LD_VAR 0 30
57610: PUSH
57611: LD_VAR 0 31
57615: PUSH
57616: LD_VAR 0 32
57620: PUSH
57621: LD_VAR 0 33
57625: PUSH
57626: LD_VAR 0 34
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: PUSH
57639: LD_VAR 0 4
57643: PUSH
57644: LD_INT 1
57646: PLUS
57647: ARRAY
57648: ST_TO_ADDR
57649: GO 58134
57651: LD_INT 16
57653: DOUBLE
57654: EQUAL
57655: IFTRUE 57713
57657: LD_INT 17
57659: DOUBLE
57660: EQUAL
57661: IFTRUE 57713
57663: LD_INT 18
57665: DOUBLE
57666: EQUAL
57667: IFTRUE 57713
57669: LD_INT 19
57671: DOUBLE
57672: EQUAL
57673: IFTRUE 57713
57675: LD_INT 22
57677: DOUBLE
57678: EQUAL
57679: IFTRUE 57713
57681: LD_INT 20
57683: DOUBLE
57684: EQUAL
57685: IFTRUE 57713
57687: LD_INT 21
57689: DOUBLE
57690: EQUAL
57691: IFTRUE 57713
57693: LD_INT 23
57695: DOUBLE
57696: EQUAL
57697: IFTRUE 57713
57699: LD_INT 24
57701: DOUBLE
57702: EQUAL
57703: IFTRUE 57713
57705: LD_INT 25
57707: DOUBLE
57708: EQUAL
57709: IFTRUE 57713
57711: GO 57769
57713: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57714: LD_ADDR_VAR 0 9
57718: PUSH
57719: LD_VAR 0 35
57723: PUSH
57724: LD_VAR 0 36
57728: PUSH
57729: LD_VAR 0 37
57733: PUSH
57734: LD_VAR 0 38
57738: PUSH
57739: LD_VAR 0 39
57743: PUSH
57744: LD_VAR 0 40
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: PUSH
57757: LD_VAR 0 4
57761: PUSH
57762: LD_INT 1
57764: PLUS
57765: ARRAY
57766: ST_TO_ADDR
57767: GO 58134
57769: LD_INT 6
57771: DOUBLE
57772: EQUAL
57773: IFTRUE 57825
57775: LD_INT 7
57777: DOUBLE
57778: EQUAL
57779: IFTRUE 57825
57781: LD_INT 8
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57825
57787: LD_INT 13
57789: DOUBLE
57790: EQUAL
57791: IFTRUE 57825
57793: LD_INT 12
57795: DOUBLE
57796: EQUAL
57797: IFTRUE 57825
57799: LD_INT 15
57801: DOUBLE
57802: EQUAL
57803: IFTRUE 57825
57805: LD_INT 11
57807: DOUBLE
57808: EQUAL
57809: IFTRUE 57825
57811: LD_INT 14
57813: DOUBLE
57814: EQUAL
57815: IFTRUE 57825
57817: LD_INT 10
57819: DOUBLE
57820: EQUAL
57821: IFTRUE 57825
57823: GO 57881
57825: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57826: LD_ADDR_VAR 0 9
57830: PUSH
57831: LD_VAR 0 41
57835: PUSH
57836: LD_VAR 0 42
57840: PUSH
57841: LD_VAR 0 43
57845: PUSH
57846: LD_VAR 0 44
57850: PUSH
57851: LD_VAR 0 45
57855: PUSH
57856: LD_VAR 0 46
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: PUSH
57869: LD_VAR 0 4
57873: PUSH
57874: LD_INT 1
57876: PLUS
57877: ARRAY
57878: ST_TO_ADDR
57879: GO 58134
57881: LD_INT 36
57883: DOUBLE
57884: EQUAL
57885: IFTRUE 57889
57887: GO 57945
57889: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57890: LD_ADDR_VAR 0 9
57894: PUSH
57895: LD_VAR 0 47
57899: PUSH
57900: LD_VAR 0 48
57904: PUSH
57905: LD_VAR 0 49
57909: PUSH
57910: LD_VAR 0 50
57914: PUSH
57915: LD_VAR 0 51
57919: PUSH
57920: LD_VAR 0 52
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: PUSH
57933: LD_VAR 0 4
57937: PUSH
57938: LD_INT 1
57940: PLUS
57941: ARRAY
57942: ST_TO_ADDR
57943: GO 58134
57945: LD_INT 4
57947: DOUBLE
57948: EQUAL
57949: IFTRUE 57971
57951: LD_INT 5
57953: DOUBLE
57954: EQUAL
57955: IFTRUE 57971
57957: LD_INT 34
57959: DOUBLE
57960: EQUAL
57961: IFTRUE 57971
57963: LD_INT 37
57965: DOUBLE
57966: EQUAL
57967: IFTRUE 57971
57969: GO 58027
57971: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57972: LD_ADDR_VAR 0 9
57976: PUSH
57977: LD_VAR 0 53
57981: PUSH
57982: LD_VAR 0 54
57986: PUSH
57987: LD_VAR 0 55
57991: PUSH
57992: LD_VAR 0 56
57996: PUSH
57997: LD_VAR 0 57
58001: PUSH
58002: LD_VAR 0 58
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: PUSH
58015: LD_VAR 0 4
58019: PUSH
58020: LD_INT 1
58022: PLUS
58023: ARRAY
58024: ST_TO_ADDR
58025: GO 58134
58027: LD_INT 31
58029: DOUBLE
58030: EQUAL
58031: IFTRUE 58077
58033: LD_INT 32
58035: DOUBLE
58036: EQUAL
58037: IFTRUE 58077
58039: LD_INT 33
58041: DOUBLE
58042: EQUAL
58043: IFTRUE 58077
58045: LD_INT 27
58047: DOUBLE
58048: EQUAL
58049: IFTRUE 58077
58051: LD_INT 26
58053: DOUBLE
58054: EQUAL
58055: IFTRUE 58077
58057: LD_INT 28
58059: DOUBLE
58060: EQUAL
58061: IFTRUE 58077
58063: LD_INT 29
58065: DOUBLE
58066: EQUAL
58067: IFTRUE 58077
58069: LD_INT 30
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58077
58075: GO 58133
58077: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58078: LD_ADDR_VAR 0 9
58082: PUSH
58083: LD_VAR 0 59
58087: PUSH
58088: LD_VAR 0 60
58092: PUSH
58093: LD_VAR 0 61
58097: PUSH
58098: LD_VAR 0 62
58102: PUSH
58103: LD_VAR 0 63
58107: PUSH
58108: LD_VAR 0 64
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: PUSH
58121: LD_VAR 0 4
58125: PUSH
58126: LD_INT 1
58128: PLUS
58129: ARRAY
58130: ST_TO_ADDR
58131: GO 58134
58133: POP
// temp_list2 = [ ] ;
58134: LD_ADDR_VAR 0 10
58138: PUSH
58139: EMPTY
58140: ST_TO_ADDR
// for i in temp_list do
58141: LD_ADDR_VAR 0 8
58145: PUSH
58146: LD_VAR 0 9
58150: PUSH
58151: FOR_IN
58152: IFFALSE 58204
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58154: LD_ADDR_VAR 0 10
58158: PUSH
58159: LD_VAR 0 10
58163: PUSH
58164: LD_VAR 0 8
58168: PUSH
58169: LD_INT 1
58171: ARRAY
58172: PUSH
58173: LD_VAR 0 2
58177: PLUS
58178: PUSH
58179: LD_VAR 0 8
58183: PUSH
58184: LD_INT 2
58186: ARRAY
58187: PUSH
58188: LD_VAR 0 3
58192: PLUS
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: EMPTY
58199: LIST
58200: ADD
58201: ST_TO_ADDR
58202: GO 58151
58204: POP
58205: POP
// result = temp_list2 ;
58206: LD_ADDR_VAR 0 7
58210: PUSH
58211: LD_VAR 0 10
58215: ST_TO_ADDR
// end ;
58216: LD_VAR 0 7
58220: RET
// export function EnemyInRange ( unit , dist ) ; begin
58221: LD_INT 0
58223: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58224: LD_ADDR_VAR 0 3
58228: PUSH
58229: LD_VAR 0 1
58233: PPUSH
58234: CALL_OW 255
58238: PPUSH
58239: LD_VAR 0 1
58243: PPUSH
58244: CALL_OW 250
58248: PPUSH
58249: LD_VAR 0 1
58253: PPUSH
58254: CALL_OW 251
58258: PPUSH
58259: LD_VAR 0 2
58263: PPUSH
58264: CALL 31594 0 4
58268: PUSH
58269: LD_INT 4
58271: ARRAY
58272: ST_TO_ADDR
// end ;
58273: LD_VAR 0 3
58277: RET
// export function PlayerSeeMe ( unit ) ; begin
58278: LD_INT 0
58280: PPUSH
// result := See ( your_side , unit ) ;
58281: LD_ADDR_VAR 0 2
58285: PUSH
58286: LD_OWVAR 2
58290: PPUSH
58291: LD_VAR 0 1
58295: PPUSH
58296: CALL_OW 292
58300: ST_TO_ADDR
// end ;
58301: LD_VAR 0 2
58305: RET
// export function ReverseDir ( unit ) ; begin
58306: LD_INT 0
58308: PPUSH
// if not unit then
58309: LD_VAR 0 1
58313: NOT
58314: IFFALSE 58318
// exit ;
58316: GO 58341
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58318: LD_ADDR_VAR 0 2
58322: PUSH
58323: LD_VAR 0 1
58327: PPUSH
58328: CALL_OW 254
58332: PUSH
58333: LD_INT 3
58335: PLUS
58336: PUSH
58337: LD_INT 6
58339: MOD
58340: ST_TO_ADDR
// end ;
58341: LD_VAR 0 2
58345: RET
// export function ReverseArray ( array ) ; var i ; begin
58346: LD_INT 0
58348: PPUSH
58349: PPUSH
// if not array then
58350: LD_VAR 0 1
58354: NOT
58355: IFFALSE 58359
// exit ;
58357: GO 58414
// result := [ ] ;
58359: LD_ADDR_VAR 0 2
58363: PUSH
58364: EMPTY
58365: ST_TO_ADDR
// for i := array downto 1 do
58366: LD_ADDR_VAR 0 3
58370: PUSH
58371: DOUBLE
58372: LD_VAR 0 1
58376: INC
58377: ST_TO_ADDR
58378: LD_INT 1
58380: PUSH
58381: FOR_DOWNTO
58382: IFFALSE 58412
// result := Join ( result , array [ i ] ) ;
58384: LD_ADDR_VAR 0 2
58388: PUSH
58389: LD_VAR 0 2
58393: PPUSH
58394: LD_VAR 0 1
58398: PUSH
58399: LD_VAR 0 3
58403: ARRAY
58404: PPUSH
58405: CALL 63079 0 2
58409: ST_TO_ADDR
58410: GO 58381
58412: POP
58413: POP
// end ;
58414: LD_VAR 0 2
58418: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58419: LD_INT 0
58421: PPUSH
58422: PPUSH
58423: PPUSH
58424: PPUSH
58425: PPUSH
58426: PPUSH
// if not unit or not hexes then
58427: LD_VAR 0 1
58431: NOT
58432: PUSH
58433: LD_VAR 0 2
58437: NOT
58438: OR
58439: IFFALSE 58443
// exit ;
58441: GO 58566
// dist := 9999 ;
58443: LD_ADDR_VAR 0 5
58447: PUSH
58448: LD_INT 9999
58450: ST_TO_ADDR
// for i = 1 to hexes do
58451: LD_ADDR_VAR 0 4
58455: PUSH
58456: DOUBLE
58457: LD_INT 1
58459: DEC
58460: ST_TO_ADDR
58461: LD_VAR 0 2
58465: PUSH
58466: FOR_TO
58467: IFFALSE 58554
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58469: LD_ADDR_VAR 0 6
58473: PUSH
58474: LD_VAR 0 1
58478: PPUSH
58479: LD_VAR 0 2
58483: PUSH
58484: LD_VAR 0 4
58488: ARRAY
58489: PUSH
58490: LD_INT 1
58492: ARRAY
58493: PPUSH
58494: LD_VAR 0 2
58498: PUSH
58499: LD_VAR 0 4
58503: ARRAY
58504: PUSH
58505: LD_INT 2
58507: ARRAY
58508: PPUSH
58509: CALL_OW 297
58513: ST_TO_ADDR
// if tdist < dist then
58514: LD_VAR 0 6
58518: PUSH
58519: LD_VAR 0 5
58523: LESS
58524: IFFALSE 58552
// begin hex := hexes [ i ] ;
58526: LD_ADDR_VAR 0 8
58530: PUSH
58531: LD_VAR 0 2
58535: PUSH
58536: LD_VAR 0 4
58540: ARRAY
58541: ST_TO_ADDR
// dist := tdist ;
58542: LD_ADDR_VAR 0 5
58546: PUSH
58547: LD_VAR 0 6
58551: ST_TO_ADDR
// end ; end ;
58552: GO 58466
58554: POP
58555: POP
// result := hex ;
58556: LD_ADDR_VAR 0 3
58560: PUSH
58561: LD_VAR 0 8
58565: ST_TO_ADDR
// end ;
58566: LD_VAR 0 3
58570: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58571: LD_INT 0
58573: PPUSH
58574: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58575: LD_VAR 0 1
58579: NOT
58580: PUSH
58581: LD_VAR 0 1
58585: PUSH
58586: LD_INT 21
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 23
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PPUSH
58610: CALL_OW 69
58614: IN
58615: NOT
58616: OR
58617: IFFALSE 58621
// exit ;
58619: GO 58668
// for i = 1 to 3 do
58621: LD_ADDR_VAR 0 3
58625: PUSH
58626: DOUBLE
58627: LD_INT 1
58629: DEC
58630: ST_TO_ADDR
58631: LD_INT 3
58633: PUSH
58634: FOR_TO
58635: IFFALSE 58666
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58637: LD_VAR 0 1
58641: PPUSH
58642: CALL_OW 250
58646: PPUSH
58647: LD_VAR 0 1
58651: PPUSH
58652: CALL_OW 251
58656: PPUSH
58657: LD_INT 1
58659: PPUSH
58660: CALL_OW 453
58664: GO 58634
58666: POP
58667: POP
// end ;
58668: LD_VAR 0 2
58672: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58673: LD_INT 0
58675: PPUSH
58676: PPUSH
58677: PPUSH
58678: PPUSH
58679: PPUSH
58680: PPUSH
// if not unit or not enemy_unit then
58681: LD_VAR 0 1
58685: NOT
58686: PUSH
58687: LD_VAR 0 2
58691: NOT
58692: OR
58693: IFFALSE 58697
// exit ;
58695: GO 59164
// if GetLives ( i ) < 250 then
58697: LD_VAR 0 4
58701: PPUSH
58702: CALL_OW 256
58706: PUSH
58707: LD_INT 250
58709: LESS
58710: IFFALSE 58723
// begin ComAutodestruct ( i ) ;
58712: LD_VAR 0 4
58716: PPUSH
58717: CALL 58571 0 1
// exit ;
58721: GO 59164
// end ; x := GetX ( enemy_unit ) ;
58723: LD_ADDR_VAR 0 7
58727: PUSH
58728: LD_VAR 0 2
58732: PPUSH
58733: CALL_OW 250
58737: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58738: LD_ADDR_VAR 0 8
58742: PUSH
58743: LD_VAR 0 2
58747: PPUSH
58748: CALL_OW 251
58752: ST_TO_ADDR
// if not x or not y then
58753: LD_VAR 0 7
58757: NOT
58758: PUSH
58759: LD_VAR 0 8
58763: NOT
58764: OR
58765: IFFALSE 58769
// exit ;
58767: GO 59164
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58769: LD_ADDR_VAR 0 6
58773: PUSH
58774: LD_VAR 0 7
58778: PPUSH
58779: LD_INT 0
58781: PPUSH
58782: LD_INT 4
58784: PPUSH
58785: CALL_OW 272
58789: PUSH
58790: LD_VAR 0 8
58794: PPUSH
58795: LD_INT 0
58797: PPUSH
58798: LD_INT 4
58800: PPUSH
58801: CALL_OW 273
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_VAR 0 7
58814: PPUSH
58815: LD_INT 1
58817: PPUSH
58818: LD_INT 4
58820: PPUSH
58821: CALL_OW 272
58825: PUSH
58826: LD_VAR 0 8
58830: PPUSH
58831: LD_INT 1
58833: PPUSH
58834: LD_INT 4
58836: PPUSH
58837: CALL_OW 273
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_VAR 0 7
58850: PPUSH
58851: LD_INT 2
58853: PPUSH
58854: LD_INT 4
58856: PPUSH
58857: CALL_OW 272
58861: PUSH
58862: LD_VAR 0 8
58866: PPUSH
58867: LD_INT 2
58869: PPUSH
58870: LD_INT 4
58872: PPUSH
58873: CALL_OW 273
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_VAR 0 7
58886: PPUSH
58887: LD_INT 3
58889: PPUSH
58890: LD_INT 4
58892: PPUSH
58893: CALL_OW 272
58897: PUSH
58898: LD_VAR 0 8
58902: PPUSH
58903: LD_INT 3
58905: PPUSH
58906: LD_INT 4
58908: PPUSH
58909: CALL_OW 273
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_VAR 0 7
58922: PPUSH
58923: LD_INT 4
58925: PPUSH
58926: LD_INT 4
58928: PPUSH
58929: CALL_OW 272
58933: PUSH
58934: LD_VAR 0 8
58938: PPUSH
58939: LD_INT 4
58941: PPUSH
58942: LD_INT 4
58944: PPUSH
58945: CALL_OW 273
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_VAR 0 7
58958: PPUSH
58959: LD_INT 5
58961: PPUSH
58962: LD_INT 4
58964: PPUSH
58965: CALL_OW 272
58969: PUSH
58970: LD_VAR 0 8
58974: PPUSH
58975: LD_INT 5
58977: PPUSH
58978: LD_INT 4
58980: PPUSH
58981: CALL_OW 273
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: ST_TO_ADDR
// for i = tmp downto 1 do
58998: LD_ADDR_VAR 0 4
59002: PUSH
59003: DOUBLE
59004: LD_VAR 0 6
59008: INC
59009: ST_TO_ADDR
59010: LD_INT 1
59012: PUSH
59013: FOR_DOWNTO
59014: IFFALSE 59115
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59016: LD_VAR 0 6
59020: PUSH
59021: LD_VAR 0 4
59025: ARRAY
59026: PUSH
59027: LD_INT 1
59029: ARRAY
59030: PPUSH
59031: LD_VAR 0 6
59035: PUSH
59036: LD_VAR 0 4
59040: ARRAY
59041: PUSH
59042: LD_INT 2
59044: ARRAY
59045: PPUSH
59046: CALL_OW 488
59050: NOT
59051: PUSH
59052: LD_VAR 0 6
59056: PUSH
59057: LD_VAR 0 4
59061: ARRAY
59062: PUSH
59063: LD_INT 1
59065: ARRAY
59066: PPUSH
59067: LD_VAR 0 6
59071: PUSH
59072: LD_VAR 0 4
59076: ARRAY
59077: PUSH
59078: LD_INT 2
59080: ARRAY
59081: PPUSH
59082: CALL_OW 428
59086: PUSH
59087: LD_INT 0
59089: NONEQUAL
59090: OR
59091: IFFALSE 59113
// tmp := Delete ( tmp , i ) ;
59093: LD_ADDR_VAR 0 6
59097: PUSH
59098: LD_VAR 0 6
59102: PPUSH
59103: LD_VAR 0 4
59107: PPUSH
59108: CALL_OW 3
59112: ST_TO_ADDR
59113: GO 59013
59115: POP
59116: POP
// j := GetClosestHex ( unit , tmp ) ;
59117: LD_ADDR_VAR 0 5
59121: PUSH
59122: LD_VAR 0 1
59126: PPUSH
59127: LD_VAR 0 6
59131: PPUSH
59132: CALL 58419 0 2
59136: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59137: LD_VAR 0 1
59141: PPUSH
59142: LD_VAR 0 5
59146: PUSH
59147: LD_INT 1
59149: ARRAY
59150: PPUSH
59151: LD_VAR 0 5
59155: PUSH
59156: LD_INT 2
59158: ARRAY
59159: PPUSH
59160: CALL_OW 111
// end ;
59164: LD_VAR 0 3
59168: RET
// export function PrepareApemanSoldier ( ) ; begin
59169: LD_INT 0
59171: PPUSH
// uc_nation := 0 ;
59172: LD_ADDR_OWVAR 21
59176: PUSH
59177: LD_INT 0
59179: ST_TO_ADDR
// hc_sex := sex_male ;
59180: LD_ADDR_OWVAR 27
59184: PUSH
59185: LD_INT 1
59187: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59188: LD_ADDR_OWVAR 28
59192: PUSH
59193: LD_INT 15
59195: ST_TO_ADDR
// hc_gallery :=  ;
59196: LD_ADDR_OWVAR 33
59200: PUSH
59201: LD_STRING 
59203: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59204: LD_ADDR_OWVAR 31
59208: PUSH
59209: LD_INT 0
59211: PPUSH
59212: LD_INT 3
59214: PPUSH
59215: CALL_OW 12
59219: PUSH
59220: LD_INT 0
59222: PPUSH
59223: LD_INT 3
59225: PPUSH
59226: CALL_OW 12
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// end ;
59243: LD_VAR 0 1
59247: RET
// export function PrepareApemanEngineer ( ) ; begin
59248: LD_INT 0
59250: PPUSH
// uc_nation := 0 ;
59251: LD_ADDR_OWVAR 21
59255: PUSH
59256: LD_INT 0
59258: ST_TO_ADDR
// hc_sex := sex_male ;
59259: LD_ADDR_OWVAR 27
59263: PUSH
59264: LD_INT 1
59266: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59267: LD_ADDR_OWVAR 28
59271: PUSH
59272: LD_INT 16
59274: ST_TO_ADDR
// hc_gallery :=  ;
59275: LD_ADDR_OWVAR 33
59279: PUSH
59280: LD_STRING 
59282: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59283: LD_ADDR_OWVAR 31
59287: PUSH
59288: LD_INT 0
59290: PPUSH
59291: LD_INT 3
59293: PPUSH
59294: CALL_OW 12
59298: PUSH
59299: LD_INT 0
59301: PPUSH
59302: LD_INT 3
59304: PPUSH
59305: CALL_OW 12
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// end ;
59322: LD_VAR 0 1
59326: RET
// export function PrepareApeman ( agressivity ) ; begin
59327: LD_INT 0
59329: PPUSH
// uc_side := 0 ;
59330: LD_ADDR_OWVAR 20
59334: PUSH
59335: LD_INT 0
59337: ST_TO_ADDR
// uc_nation := 0 ;
59338: LD_ADDR_OWVAR 21
59342: PUSH
59343: LD_INT 0
59345: ST_TO_ADDR
// hc_sex := sex_male ;
59346: LD_ADDR_OWVAR 27
59350: PUSH
59351: LD_INT 1
59353: ST_TO_ADDR
// hc_class := class_apeman ;
59354: LD_ADDR_OWVAR 28
59358: PUSH
59359: LD_INT 12
59361: ST_TO_ADDR
// hc_gallery :=  ;
59362: LD_ADDR_OWVAR 33
59366: PUSH
59367: LD_STRING 
59369: ST_TO_ADDR
// if agressivity = 0 then
59370: LD_VAR 0 1
59374: PUSH
59375: LD_INT 0
59377: EQUAL
59378: IFFALSE 59390
// hc_agressivity := 0 else
59380: LD_ADDR_OWVAR 35
59384: PUSH
59385: LD_INT 0
59387: ST_TO_ADDR
59388: GO 59411
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59390: LD_ADDR_OWVAR 35
59394: PUSH
59395: LD_VAR 0 1
59399: NEG
59400: PPUSH
59401: LD_VAR 0 1
59405: PPUSH
59406: CALL_OW 12
59410: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59411: LD_ADDR_OWVAR 31
59415: PUSH
59416: LD_INT 0
59418: PPUSH
59419: LD_INT 3
59421: PPUSH
59422: CALL_OW 12
59426: PUSH
59427: LD_INT 0
59429: PPUSH
59430: LD_INT 3
59432: PPUSH
59433: CALL_OW 12
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// end ;
59450: LD_VAR 0 2
59454: RET
// export function PrepareTiger ( agressivity ) ; begin
59455: LD_INT 0
59457: PPUSH
// uc_side := 0 ;
59458: LD_ADDR_OWVAR 20
59462: PUSH
59463: LD_INT 0
59465: ST_TO_ADDR
// uc_nation := 0 ;
59466: LD_ADDR_OWVAR 21
59470: PUSH
59471: LD_INT 0
59473: ST_TO_ADDR
// hc_class := class_tiger ;
59474: LD_ADDR_OWVAR 28
59478: PUSH
59479: LD_INT 14
59481: ST_TO_ADDR
// hc_gallery :=  ;
59482: LD_ADDR_OWVAR 33
59486: PUSH
59487: LD_STRING 
59489: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59490: LD_ADDR_OWVAR 35
59494: PUSH
59495: LD_VAR 0 1
59499: NEG
59500: PPUSH
59501: LD_VAR 0 1
59505: PPUSH
59506: CALL_OW 12
59510: ST_TO_ADDR
// end ;
59511: LD_VAR 0 2
59515: RET
// export function PrepareEnchidna ( ) ; begin
59516: LD_INT 0
59518: PPUSH
// uc_side := 0 ;
59519: LD_ADDR_OWVAR 20
59523: PUSH
59524: LD_INT 0
59526: ST_TO_ADDR
// uc_nation := 0 ;
59527: LD_ADDR_OWVAR 21
59531: PUSH
59532: LD_INT 0
59534: ST_TO_ADDR
// hc_class := class_baggie ;
59535: LD_ADDR_OWVAR 28
59539: PUSH
59540: LD_INT 13
59542: ST_TO_ADDR
// hc_gallery :=  ;
59543: LD_ADDR_OWVAR 33
59547: PUSH
59548: LD_STRING 
59550: ST_TO_ADDR
// end ;
59551: LD_VAR 0 1
59555: RET
// export function PrepareFrog ( ) ; begin
59556: LD_INT 0
59558: PPUSH
// uc_side := 0 ;
59559: LD_ADDR_OWVAR 20
59563: PUSH
59564: LD_INT 0
59566: ST_TO_ADDR
// uc_nation := 0 ;
59567: LD_ADDR_OWVAR 21
59571: PUSH
59572: LD_INT 0
59574: ST_TO_ADDR
// hc_class := class_frog ;
59575: LD_ADDR_OWVAR 28
59579: PUSH
59580: LD_INT 19
59582: ST_TO_ADDR
// hc_gallery :=  ;
59583: LD_ADDR_OWVAR 33
59587: PUSH
59588: LD_STRING 
59590: ST_TO_ADDR
// end ;
59591: LD_VAR 0 1
59595: RET
// export function PrepareFish ( ) ; begin
59596: LD_INT 0
59598: PPUSH
// uc_side := 0 ;
59599: LD_ADDR_OWVAR 20
59603: PUSH
59604: LD_INT 0
59606: ST_TO_ADDR
// uc_nation := 0 ;
59607: LD_ADDR_OWVAR 21
59611: PUSH
59612: LD_INT 0
59614: ST_TO_ADDR
// hc_class := class_fish ;
59615: LD_ADDR_OWVAR 28
59619: PUSH
59620: LD_INT 20
59622: ST_TO_ADDR
// hc_gallery :=  ;
59623: LD_ADDR_OWVAR 33
59627: PUSH
59628: LD_STRING 
59630: ST_TO_ADDR
// end ;
59631: LD_VAR 0 1
59635: RET
// export function PrepareBird ( ) ; begin
59636: LD_INT 0
59638: PPUSH
// uc_side := 0 ;
59639: LD_ADDR_OWVAR 20
59643: PUSH
59644: LD_INT 0
59646: ST_TO_ADDR
// uc_nation := 0 ;
59647: LD_ADDR_OWVAR 21
59651: PUSH
59652: LD_INT 0
59654: ST_TO_ADDR
// hc_class := class_phororhacos ;
59655: LD_ADDR_OWVAR 28
59659: PUSH
59660: LD_INT 18
59662: ST_TO_ADDR
// hc_gallery :=  ;
59663: LD_ADDR_OWVAR 33
59667: PUSH
59668: LD_STRING 
59670: ST_TO_ADDR
// end ;
59671: LD_VAR 0 1
59675: RET
// export function PrepareHorse ( ) ; begin
59676: LD_INT 0
59678: PPUSH
// uc_side := 0 ;
59679: LD_ADDR_OWVAR 20
59683: PUSH
59684: LD_INT 0
59686: ST_TO_ADDR
// uc_nation := 0 ;
59687: LD_ADDR_OWVAR 21
59691: PUSH
59692: LD_INT 0
59694: ST_TO_ADDR
// hc_class := class_horse ;
59695: LD_ADDR_OWVAR 28
59699: PUSH
59700: LD_INT 21
59702: ST_TO_ADDR
// hc_gallery :=  ;
59703: LD_ADDR_OWVAR 33
59707: PUSH
59708: LD_STRING 
59710: ST_TO_ADDR
// end ;
59711: LD_VAR 0 1
59715: RET
// export function PrepareMastodont ( ) ; begin
59716: LD_INT 0
59718: PPUSH
// uc_side := 0 ;
59719: LD_ADDR_OWVAR 20
59723: PUSH
59724: LD_INT 0
59726: ST_TO_ADDR
// uc_nation := 0 ;
59727: LD_ADDR_OWVAR 21
59731: PUSH
59732: LD_INT 0
59734: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59735: LD_ADDR_OWVAR 37
59739: PUSH
59740: LD_INT 31
59742: ST_TO_ADDR
// vc_control := control_rider ;
59743: LD_ADDR_OWVAR 38
59747: PUSH
59748: LD_INT 4
59750: ST_TO_ADDR
// end ;
59751: LD_VAR 0 1
59755: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59756: LD_INT 0
59758: PPUSH
59759: PPUSH
59760: PPUSH
// uc_side = 0 ;
59761: LD_ADDR_OWVAR 20
59765: PUSH
59766: LD_INT 0
59768: ST_TO_ADDR
// uc_nation = 0 ;
59769: LD_ADDR_OWVAR 21
59773: PUSH
59774: LD_INT 0
59776: ST_TO_ADDR
// InitHc_All ( ) ;
59777: CALL_OW 584
// InitVc ;
59781: CALL_OW 20
// if mastodonts then
59785: LD_VAR 0 6
59789: IFFALSE 59856
// for i = 1 to mastodonts do
59791: LD_ADDR_VAR 0 11
59795: PUSH
59796: DOUBLE
59797: LD_INT 1
59799: DEC
59800: ST_TO_ADDR
59801: LD_VAR 0 6
59805: PUSH
59806: FOR_TO
59807: IFFALSE 59854
// begin vc_chassis := 31 ;
59809: LD_ADDR_OWVAR 37
59813: PUSH
59814: LD_INT 31
59816: ST_TO_ADDR
// vc_control := control_rider ;
59817: LD_ADDR_OWVAR 38
59821: PUSH
59822: LD_INT 4
59824: ST_TO_ADDR
// animal := CreateVehicle ;
59825: LD_ADDR_VAR 0 12
59829: PUSH
59830: CALL_OW 45
59834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59835: LD_VAR 0 12
59839: PPUSH
59840: LD_VAR 0 8
59844: PPUSH
59845: LD_INT 0
59847: PPUSH
59848: CALL 61984 0 3
// end ;
59852: GO 59806
59854: POP
59855: POP
// if horses then
59856: LD_VAR 0 5
59860: IFFALSE 59927
// for i = 1 to horses do
59862: LD_ADDR_VAR 0 11
59866: PUSH
59867: DOUBLE
59868: LD_INT 1
59870: DEC
59871: ST_TO_ADDR
59872: LD_VAR 0 5
59876: PUSH
59877: FOR_TO
59878: IFFALSE 59925
// begin hc_class := 21 ;
59880: LD_ADDR_OWVAR 28
59884: PUSH
59885: LD_INT 21
59887: ST_TO_ADDR
// hc_gallery :=  ;
59888: LD_ADDR_OWVAR 33
59892: PUSH
59893: LD_STRING 
59895: ST_TO_ADDR
// animal := CreateHuman ;
59896: LD_ADDR_VAR 0 12
59900: PUSH
59901: CALL_OW 44
59905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59906: LD_VAR 0 12
59910: PPUSH
59911: LD_VAR 0 8
59915: PPUSH
59916: LD_INT 0
59918: PPUSH
59919: CALL 61984 0 3
// end ;
59923: GO 59877
59925: POP
59926: POP
// if birds then
59927: LD_VAR 0 1
59931: IFFALSE 59998
// for i = 1 to birds do
59933: LD_ADDR_VAR 0 11
59937: PUSH
59938: DOUBLE
59939: LD_INT 1
59941: DEC
59942: ST_TO_ADDR
59943: LD_VAR 0 1
59947: PUSH
59948: FOR_TO
59949: IFFALSE 59996
// begin hc_class := 18 ;
59951: LD_ADDR_OWVAR 28
59955: PUSH
59956: LD_INT 18
59958: ST_TO_ADDR
// hc_gallery =  ;
59959: LD_ADDR_OWVAR 33
59963: PUSH
59964: LD_STRING 
59966: ST_TO_ADDR
// animal := CreateHuman ;
59967: LD_ADDR_VAR 0 12
59971: PUSH
59972: CALL_OW 44
59976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59977: LD_VAR 0 12
59981: PPUSH
59982: LD_VAR 0 8
59986: PPUSH
59987: LD_INT 0
59989: PPUSH
59990: CALL 61984 0 3
// end ;
59994: GO 59948
59996: POP
59997: POP
// if tigers then
59998: LD_VAR 0 2
60002: IFFALSE 60086
// for i = 1 to tigers do
60004: LD_ADDR_VAR 0 11
60008: PUSH
60009: DOUBLE
60010: LD_INT 1
60012: DEC
60013: ST_TO_ADDR
60014: LD_VAR 0 2
60018: PUSH
60019: FOR_TO
60020: IFFALSE 60084
// begin hc_class = class_tiger ;
60022: LD_ADDR_OWVAR 28
60026: PUSH
60027: LD_INT 14
60029: ST_TO_ADDR
// hc_gallery =  ;
60030: LD_ADDR_OWVAR 33
60034: PUSH
60035: LD_STRING 
60037: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60038: LD_ADDR_OWVAR 35
60042: PUSH
60043: LD_INT 7
60045: NEG
60046: PPUSH
60047: LD_INT 7
60049: PPUSH
60050: CALL_OW 12
60054: ST_TO_ADDR
// animal := CreateHuman ;
60055: LD_ADDR_VAR 0 12
60059: PUSH
60060: CALL_OW 44
60064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60065: LD_VAR 0 12
60069: PPUSH
60070: LD_VAR 0 8
60074: PPUSH
60075: LD_INT 0
60077: PPUSH
60078: CALL 61984 0 3
// end ;
60082: GO 60019
60084: POP
60085: POP
// if apemans then
60086: LD_VAR 0 3
60090: IFFALSE 60213
// for i = 1 to apemans do
60092: LD_ADDR_VAR 0 11
60096: PUSH
60097: DOUBLE
60098: LD_INT 1
60100: DEC
60101: ST_TO_ADDR
60102: LD_VAR 0 3
60106: PUSH
60107: FOR_TO
60108: IFFALSE 60211
// begin hc_class = class_apeman ;
60110: LD_ADDR_OWVAR 28
60114: PUSH
60115: LD_INT 12
60117: ST_TO_ADDR
// hc_gallery =  ;
60118: LD_ADDR_OWVAR 33
60122: PUSH
60123: LD_STRING 
60125: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60126: LD_ADDR_OWVAR 35
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PPUSH
60135: LD_INT 2
60137: PPUSH
60138: CALL_OW 12
60142: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60143: LD_ADDR_OWVAR 31
60147: PUSH
60148: LD_INT 1
60150: PPUSH
60151: LD_INT 3
60153: PPUSH
60154: CALL_OW 12
60158: PUSH
60159: LD_INT 1
60161: PPUSH
60162: LD_INT 3
60164: PPUSH
60165: CALL_OW 12
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: ST_TO_ADDR
// animal := CreateHuman ;
60182: LD_ADDR_VAR 0 12
60186: PUSH
60187: CALL_OW 44
60191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60192: LD_VAR 0 12
60196: PPUSH
60197: LD_VAR 0 8
60201: PPUSH
60202: LD_INT 0
60204: PPUSH
60205: CALL 61984 0 3
// end ;
60209: GO 60107
60211: POP
60212: POP
// if enchidnas then
60213: LD_VAR 0 4
60217: IFFALSE 60284
// for i = 1 to enchidnas do
60219: LD_ADDR_VAR 0 11
60223: PUSH
60224: DOUBLE
60225: LD_INT 1
60227: DEC
60228: ST_TO_ADDR
60229: LD_VAR 0 4
60233: PUSH
60234: FOR_TO
60235: IFFALSE 60282
// begin hc_class = 13 ;
60237: LD_ADDR_OWVAR 28
60241: PUSH
60242: LD_INT 13
60244: ST_TO_ADDR
// hc_gallery =  ;
60245: LD_ADDR_OWVAR 33
60249: PUSH
60250: LD_STRING 
60252: ST_TO_ADDR
// animal := CreateHuman ;
60253: LD_ADDR_VAR 0 12
60257: PUSH
60258: CALL_OW 44
60262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60263: LD_VAR 0 12
60267: PPUSH
60268: LD_VAR 0 8
60272: PPUSH
60273: LD_INT 0
60275: PPUSH
60276: CALL 61984 0 3
// end ;
60280: GO 60234
60282: POP
60283: POP
// if fishes then
60284: LD_VAR 0 7
60288: IFFALSE 60355
// for i = 1 to fishes do
60290: LD_ADDR_VAR 0 11
60294: PUSH
60295: DOUBLE
60296: LD_INT 1
60298: DEC
60299: ST_TO_ADDR
60300: LD_VAR 0 7
60304: PUSH
60305: FOR_TO
60306: IFFALSE 60353
// begin hc_class = 20 ;
60308: LD_ADDR_OWVAR 28
60312: PUSH
60313: LD_INT 20
60315: ST_TO_ADDR
// hc_gallery =  ;
60316: LD_ADDR_OWVAR 33
60320: PUSH
60321: LD_STRING 
60323: ST_TO_ADDR
// animal := CreateHuman ;
60324: LD_ADDR_VAR 0 12
60328: PUSH
60329: CALL_OW 44
60333: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60334: LD_VAR 0 12
60338: PPUSH
60339: LD_VAR 0 9
60343: PPUSH
60344: LD_INT 0
60346: PPUSH
60347: CALL 61984 0 3
// end ;
60351: GO 60305
60353: POP
60354: POP
// end ;
60355: LD_VAR 0 10
60359: RET
// export function WantHeal ( sci , unit ) ; begin
60360: LD_INT 0
60362: PPUSH
// if GetTaskList ( sci ) > 0 then
60363: LD_VAR 0 1
60367: PPUSH
60368: CALL_OW 437
60372: PUSH
60373: LD_INT 0
60375: GREATER
60376: IFFALSE 60446
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60378: LD_VAR 0 1
60382: PPUSH
60383: CALL_OW 437
60387: PUSH
60388: LD_INT 1
60390: ARRAY
60391: PUSH
60392: LD_INT 1
60394: ARRAY
60395: PUSH
60396: LD_STRING l
60398: EQUAL
60399: PUSH
60400: LD_VAR 0 1
60404: PPUSH
60405: CALL_OW 437
60409: PUSH
60410: LD_INT 1
60412: ARRAY
60413: PUSH
60414: LD_INT 4
60416: ARRAY
60417: PUSH
60418: LD_VAR 0 2
60422: EQUAL
60423: AND
60424: IFFALSE 60436
// result := true else
60426: LD_ADDR_VAR 0 3
60430: PUSH
60431: LD_INT 1
60433: ST_TO_ADDR
60434: GO 60444
// result := false ;
60436: LD_ADDR_VAR 0 3
60440: PUSH
60441: LD_INT 0
60443: ST_TO_ADDR
// end else
60444: GO 60454
// result := false ;
60446: LD_ADDR_VAR 0 3
60450: PUSH
60451: LD_INT 0
60453: ST_TO_ADDR
// end ;
60454: LD_VAR 0 3
60458: RET
// export function HealTarget ( sci ) ; begin
60459: LD_INT 0
60461: PPUSH
// if not sci then
60462: LD_VAR 0 1
60466: NOT
60467: IFFALSE 60471
// exit ;
60469: GO 60536
// result := 0 ;
60471: LD_ADDR_VAR 0 2
60475: PUSH
60476: LD_INT 0
60478: ST_TO_ADDR
// if GetTaskList ( sci ) then
60479: LD_VAR 0 1
60483: PPUSH
60484: CALL_OW 437
60488: IFFALSE 60536
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60490: LD_VAR 0 1
60494: PPUSH
60495: CALL_OW 437
60499: PUSH
60500: LD_INT 1
60502: ARRAY
60503: PUSH
60504: LD_INT 1
60506: ARRAY
60507: PUSH
60508: LD_STRING l
60510: EQUAL
60511: IFFALSE 60536
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60513: LD_ADDR_VAR 0 2
60517: PUSH
60518: LD_VAR 0 1
60522: PPUSH
60523: CALL_OW 437
60527: PUSH
60528: LD_INT 1
60530: ARRAY
60531: PUSH
60532: LD_INT 4
60534: ARRAY
60535: ST_TO_ADDR
// end ;
60536: LD_VAR 0 2
60540: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60541: LD_INT 0
60543: PPUSH
60544: PPUSH
60545: PPUSH
60546: PPUSH
// if not base_units then
60547: LD_VAR 0 1
60551: NOT
60552: IFFALSE 60556
// exit ;
60554: GO 60643
// result := false ;
60556: LD_ADDR_VAR 0 2
60560: PUSH
60561: LD_INT 0
60563: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60564: LD_ADDR_VAR 0 5
60568: PUSH
60569: LD_VAR 0 1
60573: PPUSH
60574: LD_INT 21
60576: PUSH
60577: LD_INT 3
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PPUSH
60584: CALL_OW 72
60588: ST_TO_ADDR
// if not tmp then
60589: LD_VAR 0 5
60593: NOT
60594: IFFALSE 60598
// exit ;
60596: GO 60643
// for i in tmp do
60598: LD_ADDR_VAR 0 3
60602: PUSH
60603: LD_VAR 0 5
60607: PUSH
60608: FOR_IN
60609: IFFALSE 60641
// begin result := EnemyInRange ( i , 22 ) ;
60611: LD_ADDR_VAR 0 2
60615: PUSH
60616: LD_VAR 0 3
60620: PPUSH
60621: LD_INT 22
60623: PPUSH
60624: CALL 58221 0 2
60628: ST_TO_ADDR
// if result then
60629: LD_VAR 0 2
60633: IFFALSE 60639
// exit ;
60635: POP
60636: POP
60637: GO 60643
// end ;
60639: GO 60608
60641: POP
60642: POP
// end ;
60643: LD_VAR 0 2
60647: RET
// export function FilterByTag ( units , tag ) ; begin
60648: LD_INT 0
60650: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60651: LD_ADDR_VAR 0 3
60655: PUSH
60656: LD_VAR 0 1
60660: PPUSH
60661: LD_INT 120
60663: PUSH
60664: LD_VAR 0 2
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PPUSH
60673: CALL_OW 72
60677: ST_TO_ADDR
// end ;
60678: LD_VAR 0 3
60682: RET
// export function IsDriver ( un ) ; begin
60683: LD_INT 0
60685: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60686: LD_ADDR_VAR 0 2
60690: PUSH
60691: LD_VAR 0 1
60695: PUSH
60696: LD_INT 55
60698: PUSH
60699: EMPTY
60700: LIST
60701: PPUSH
60702: CALL_OW 69
60706: IN
60707: ST_TO_ADDR
// end ;
60708: LD_VAR 0 2
60712: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60713: LD_INT 0
60715: PPUSH
60716: PPUSH
// list := [ ] ;
60717: LD_ADDR_VAR 0 5
60721: PUSH
60722: EMPTY
60723: ST_TO_ADDR
// case d of 0 :
60724: LD_VAR 0 3
60728: PUSH
60729: LD_INT 0
60731: DOUBLE
60732: EQUAL
60733: IFTRUE 60737
60735: GO 60870
60737: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60738: LD_ADDR_VAR 0 5
60742: PUSH
60743: LD_VAR 0 1
60747: PUSH
60748: LD_INT 4
60750: MINUS
60751: PUSH
60752: LD_VAR 0 2
60756: PUSH
60757: LD_INT 4
60759: MINUS
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: LIST
60768: PUSH
60769: LD_VAR 0 1
60773: PUSH
60774: LD_INT 3
60776: MINUS
60777: PUSH
60778: LD_VAR 0 2
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: LIST
60790: PUSH
60791: LD_VAR 0 1
60795: PUSH
60796: LD_INT 4
60798: PLUS
60799: PUSH
60800: LD_VAR 0 2
60804: PUSH
60805: LD_INT 4
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: PUSH
60813: LD_VAR 0 1
60817: PUSH
60818: LD_INT 3
60820: PLUS
60821: PUSH
60822: LD_VAR 0 2
60826: PUSH
60827: LD_INT 3
60829: PLUS
60830: PUSH
60831: LD_INT 5
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: LIST
60838: PUSH
60839: LD_VAR 0 1
60843: PUSH
60844: LD_VAR 0 2
60848: PUSH
60849: LD_INT 4
60851: PLUS
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: ST_TO_ADDR
// end ; 1 :
60868: GO 61568
60870: LD_INT 1
60872: DOUBLE
60873: EQUAL
60874: IFTRUE 60878
60876: GO 61011
60878: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60879: LD_ADDR_VAR 0 5
60883: PUSH
60884: LD_VAR 0 1
60888: PUSH
60889: LD_VAR 0 2
60893: PUSH
60894: LD_INT 4
60896: MINUS
60897: PUSH
60898: LD_INT 3
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: LIST
60905: PUSH
60906: LD_VAR 0 1
60910: PUSH
60911: LD_INT 3
60913: MINUS
60914: PUSH
60915: LD_VAR 0 2
60919: PUSH
60920: LD_INT 3
60922: MINUS
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: PUSH
60932: LD_VAR 0 1
60936: PUSH
60937: LD_INT 4
60939: MINUS
60940: PUSH
60941: LD_VAR 0 2
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: LIST
60953: PUSH
60954: LD_VAR 0 1
60958: PUSH
60959: LD_VAR 0 2
60963: PUSH
60964: LD_INT 3
60966: PLUS
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: LIST
60975: PUSH
60976: LD_VAR 0 1
60980: PUSH
60981: LD_INT 4
60983: PLUS
60984: PUSH
60985: LD_VAR 0 2
60989: PUSH
60990: LD_INT 4
60992: PLUS
60993: PUSH
60994: LD_INT 5
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// end ; 2 :
61009: GO 61568
61011: LD_INT 2
61013: DOUBLE
61014: EQUAL
61015: IFTRUE 61019
61017: GO 61148
61019: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61020: LD_ADDR_VAR 0 5
61024: PUSH
61025: LD_VAR 0 1
61029: PUSH
61030: LD_VAR 0 2
61034: PUSH
61035: LD_INT 3
61037: MINUS
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: LIST
61046: PUSH
61047: LD_VAR 0 1
61051: PUSH
61052: LD_INT 4
61054: PLUS
61055: PUSH
61056: LD_VAR 0 2
61060: PUSH
61061: LD_INT 4
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: LIST
61068: PUSH
61069: LD_VAR 0 1
61073: PUSH
61074: LD_VAR 0 2
61078: PUSH
61079: LD_INT 4
61081: PLUS
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: PUSH
61091: LD_VAR 0 1
61095: PUSH
61096: LD_INT 3
61098: MINUS
61099: PUSH
61100: LD_VAR 0 2
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: PUSH
61113: LD_VAR 0 1
61117: PUSH
61118: LD_INT 4
61120: MINUS
61121: PUSH
61122: LD_VAR 0 2
61126: PUSH
61127: LD_INT 4
61129: MINUS
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: ST_TO_ADDR
// end ; 3 :
61146: GO 61568
61148: LD_INT 3
61150: DOUBLE
61151: EQUAL
61152: IFTRUE 61156
61154: GO 61289
61156: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61157: LD_ADDR_VAR 0 5
61161: PUSH
61162: LD_VAR 0 1
61166: PUSH
61167: LD_INT 3
61169: PLUS
61170: PUSH
61171: LD_VAR 0 2
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: PUSH
61184: LD_VAR 0 1
61188: PUSH
61189: LD_INT 4
61191: PLUS
61192: PUSH
61193: LD_VAR 0 2
61197: PUSH
61198: LD_INT 4
61200: PLUS
61201: PUSH
61202: LD_INT 5
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: PUSH
61210: LD_VAR 0 1
61214: PUSH
61215: LD_INT 4
61217: MINUS
61218: PUSH
61219: LD_VAR 0 2
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: PUSH
61232: LD_VAR 0 1
61236: PUSH
61237: LD_VAR 0 2
61241: PUSH
61242: LD_INT 4
61244: MINUS
61245: PUSH
61246: LD_INT 3
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: PUSH
61254: LD_VAR 0 1
61258: PUSH
61259: LD_INT 3
61261: MINUS
61262: PUSH
61263: LD_VAR 0 2
61267: PUSH
61268: LD_INT 3
61270: MINUS
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: ST_TO_ADDR
// end ; 4 :
61287: GO 61568
61289: LD_INT 4
61291: DOUBLE
61292: EQUAL
61293: IFTRUE 61297
61295: GO 61430
61297: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61298: LD_ADDR_VAR 0 5
61302: PUSH
61303: LD_VAR 0 1
61307: PUSH
61308: LD_VAR 0 2
61312: PUSH
61313: LD_INT 4
61315: PLUS
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: LIST
61324: PUSH
61325: LD_VAR 0 1
61329: PUSH
61330: LD_INT 3
61332: PLUS
61333: PUSH
61334: LD_VAR 0 2
61338: PUSH
61339: LD_INT 3
61341: PLUS
61342: PUSH
61343: LD_INT 5
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: LIST
61350: PUSH
61351: LD_VAR 0 1
61355: PUSH
61356: LD_INT 4
61358: PLUS
61359: PUSH
61360: LD_VAR 0 2
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: PUSH
61373: LD_VAR 0 1
61377: PUSH
61378: LD_VAR 0 2
61382: PUSH
61383: LD_INT 3
61385: MINUS
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: PUSH
61395: LD_VAR 0 1
61399: PUSH
61400: LD_INT 4
61402: MINUS
61403: PUSH
61404: LD_VAR 0 2
61408: PUSH
61409: LD_INT 4
61411: MINUS
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: ST_TO_ADDR
// end ; 5 :
61428: GO 61568
61430: LD_INT 5
61432: DOUBLE
61433: EQUAL
61434: IFTRUE 61438
61436: GO 61567
61438: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61439: LD_ADDR_VAR 0 5
61443: PUSH
61444: LD_VAR 0 1
61448: PUSH
61449: LD_INT 4
61451: MINUS
61452: PUSH
61453: LD_VAR 0 2
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: PUSH
61466: LD_VAR 0 1
61470: PUSH
61471: LD_VAR 0 2
61475: PUSH
61476: LD_INT 4
61478: MINUS
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: LIST
61487: PUSH
61488: LD_VAR 0 1
61492: PUSH
61493: LD_INT 4
61495: PLUS
61496: PUSH
61497: LD_VAR 0 2
61501: PUSH
61502: LD_INT 4
61504: PLUS
61505: PUSH
61506: LD_INT 5
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: PUSH
61514: LD_VAR 0 1
61518: PUSH
61519: LD_INT 3
61521: PLUS
61522: PUSH
61523: LD_VAR 0 2
61527: PUSH
61528: LD_INT 4
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: PUSH
61536: LD_VAR 0 1
61540: PUSH
61541: LD_VAR 0 2
61545: PUSH
61546: LD_INT 3
61548: PLUS
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: ST_TO_ADDR
// end ; end ;
61565: GO 61568
61567: POP
// result := list ;
61568: LD_ADDR_VAR 0 4
61572: PUSH
61573: LD_VAR 0 5
61577: ST_TO_ADDR
// end ;
61578: LD_VAR 0 4
61582: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61583: LD_INT 0
61585: PPUSH
61586: PPUSH
61587: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61588: LD_VAR 0 1
61592: NOT
61593: PUSH
61594: LD_VAR 0 2
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 3
61607: PUSH
61608: LD_INT 4
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: IN
61617: NOT
61618: OR
61619: IFFALSE 61623
// exit ;
61621: GO 61706
// tmp := [ ] ;
61623: LD_ADDR_VAR 0 5
61627: PUSH
61628: EMPTY
61629: ST_TO_ADDR
// for i in units do
61630: LD_ADDR_VAR 0 4
61634: PUSH
61635: LD_VAR 0 1
61639: PUSH
61640: FOR_IN
61641: IFFALSE 61675
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61643: LD_ADDR_VAR 0 5
61647: PUSH
61648: LD_VAR 0 5
61652: PPUSH
61653: LD_VAR 0 4
61657: PPUSH
61658: LD_VAR 0 2
61662: PPUSH
61663: CALL_OW 259
61667: PPUSH
61668: CALL 63079 0 2
61672: ST_TO_ADDR
61673: GO 61640
61675: POP
61676: POP
// if not tmp then
61677: LD_VAR 0 5
61681: NOT
61682: IFFALSE 61686
// exit ;
61684: GO 61706
// result := SortListByListDesc ( units , tmp ) ;
61686: LD_ADDR_VAR 0 3
61690: PUSH
61691: LD_VAR 0 1
61695: PPUSH
61696: LD_VAR 0 5
61700: PPUSH
61701: CALL_OW 77
61705: ST_TO_ADDR
// end ;
61706: LD_VAR 0 3
61710: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61711: LD_INT 0
61713: PPUSH
61714: PPUSH
61715: PPUSH
// result := false ;
61716: LD_ADDR_VAR 0 3
61720: PUSH
61721: LD_INT 0
61723: ST_TO_ADDR
// if not building then
61724: LD_VAR 0 2
61728: NOT
61729: IFFALSE 61733
// exit ;
61731: GO 61871
// x := GetX ( building ) ;
61733: LD_ADDR_VAR 0 4
61737: PUSH
61738: LD_VAR 0 2
61742: PPUSH
61743: CALL_OW 250
61747: ST_TO_ADDR
// y := GetY ( building ) ;
61748: LD_ADDR_VAR 0 5
61752: PUSH
61753: LD_VAR 0 2
61757: PPUSH
61758: CALL_OW 251
61762: ST_TO_ADDR
// if not x or not y then
61763: LD_VAR 0 4
61767: NOT
61768: PUSH
61769: LD_VAR 0 5
61773: NOT
61774: OR
61775: IFFALSE 61779
// exit ;
61777: GO 61871
// if GetTaskList ( unit ) then
61779: LD_VAR 0 1
61783: PPUSH
61784: CALL_OW 437
61788: IFFALSE 61871
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61790: LD_STRING e
61792: PUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: CALL_OW 437
61802: PUSH
61803: LD_INT 1
61805: ARRAY
61806: PUSH
61807: LD_INT 1
61809: ARRAY
61810: EQUAL
61811: PUSH
61812: LD_VAR 0 4
61816: PUSH
61817: LD_VAR 0 1
61821: PPUSH
61822: CALL_OW 437
61826: PUSH
61827: LD_INT 1
61829: ARRAY
61830: PUSH
61831: LD_INT 2
61833: ARRAY
61834: EQUAL
61835: AND
61836: PUSH
61837: LD_VAR 0 5
61841: PUSH
61842: LD_VAR 0 1
61846: PPUSH
61847: CALL_OW 437
61851: PUSH
61852: LD_INT 1
61854: ARRAY
61855: PUSH
61856: LD_INT 3
61858: ARRAY
61859: EQUAL
61860: AND
61861: IFFALSE 61871
// result := true end ;
61863: LD_ADDR_VAR 0 3
61867: PUSH
61868: LD_INT 1
61870: ST_TO_ADDR
// end ;
61871: LD_VAR 0 3
61875: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61876: LD_INT 0
61878: PPUSH
// result := false ;
61879: LD_ADDR_VAR 0 4
61883: PUSH
61884: LD_INT 0
61886: ST_TO_ADDR
// if GetTaskList ( unit ) then
61887: LD_VAR 0 1
61891: PPUSH
61892: CALL_OW 437
61896: IFFALSE 61979
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61898: LD_STRING M
61900: PUSH
61901: LD_VAR 0 1
61905: PPUSH
61906: CALL_OW 437
61910: PUSH
61911: LD_INT 1
61913: ARRAY
61914: PUSH
61915: LD_INT 1
61917: ARRAY
61918: EQUAL
61919: PUSH
61920: LD_VAR 0 2
61924: PUSH
61925: LD_VAR 0 1
61929: PPUSH
61930: CALL_OW 437
61934: PUSH
61935: LD_INT 1
61937: ARRAY
61938: PUSH
61939: LD_INT 2
61941: ARRAY
61942: EQUAL
61943: AND
61944: PUSH
61945: LD_VAR 0 3
61949: PUSH
61950: LD_VAR 0 1
61954: PPUSH
61955: CALL_OW 437
61959: PUSH
61960: LD_INT 1
61962: ARRAY
61963: PUSH
61964: LD_INT 3
61966: ARRAY
61967: EQUAL
61968: AND
61969: IFFALSE 61979
// result := true ;
61971: LD_ADDR_VAR 0 4
61975: PUSH
61976: LD_INT 1
61978: ST_TO_ADDR
// end ; end ;
61979: LD_VAR 0 4
61983: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61984: LD_INT 0
61986: PPUSH
61987: PPUSH
61988: PPUSH
61989: PPUSH
// if not unit or not area then
61990: LD_VAR 0 1
61994: NOT
61995: PUSH
61996: LD_VAR 0 2
62000: NOT
62001: OR
62002: IFFALSE 62006
// exit ;
62004: GO 62182
// tmp := AreaToList ( area , i ) ;
62006: LD_ADDR_VAR 0 6
62010: PUSH
62011: LD_VAR 0 2
62015: PPUSH
62016: LD_VAR 0 5
62020: PPUSH
62021: CALL_OW 517
62025: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62026: LD_ADDR_VAR 0 5
62030: PUSH
62031: DOUBLE
62032: LD_INT 1
62034: DEC
62035: ST_TO_ADDR
62036: LD_VAR 0 6
62040: PUSH
62041: LD_INT 1
62043: ARRAY
62044: PUSH
62045: FOR_TO
62046: IFFALSE 62180
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62048: LD_ADDR_VAR 0 7
62052: PUSH
62053: LD_VAR 0 6
62057: PUSH
62058: LD_INT 1
62060: ARRAY
62061: PUSH
62062: LD_VAR 0 5
62066: ARRAY
62067: PUSH
62068: LD_VAR 0 6
62072: PUSH
62073: LD_INT 2
62075: ARRAY
62076: PUSH
62077: LD_VAR 0 5
62081: ARRAY
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
62087: LD_INT 92
62089: PUSH
62090: LD_VAR 0 7
62094: PUSH
62095: LD_INT 1
62097: ARRAY
62098: PUSH
62099: LD_VAR 0 7
62103: PUSH
62104: LD_INT 2
62106: ARRAY
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: PPUSH
62117: CALL_OW 69
62121: PUSH
62122: LD_INT 0
62124: EQUAL
62125: IFFALSE 62178
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62127: LD_VAR 0 1
62131: PPUSH
62132: LD_VAR 0 7
62136: PUSH
62137: LD_INT 1
62139: ARRAY
62140: PPUSH
62141: LD_VAR 0 7
62145: PUSH
62146: LD_INT 2
62148: ARRAY
62149: PPUSH
62150: LD_VAR 0 3
62154: PPUSH
62155: CALL_OW 48
// result := IsPlaced ( unit ) ;
62159: LD_ADDR_VAR 0 4
62163: PUSH
62164: LD_VAR 0 1
62168: PPUSH
62169: CALL_OW 305
62173: ST_TO_ADDR
// exit ;
62174: POP
62175: POP
62176: GO 62182
// end ; end ;
62178: GO 62045
62180: POP
62181: POP
// end ;
62182: LD_VAR 0 4
62186: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62187: LD_INT 0
62189: PPUSH
62190: PPUSH
62191: PPUSH
// if not side or side > 8 then
62192: LD_VAR 0 1
62196: NOT
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: LD_INT 8
62205: GREATER
62206: OR
62207: IFFALSE 62211
// exit ;
62209: GO 62398
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62211: LD_ADDR_VAR 0 4
62215: PUSH
62216: LD_INT 22
62218: PUSH
62219: LD_VAR 0 1
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 21
62230: PUSH
62231: LD_INT 3
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PPUSH
62242: CALL_OW 69
62246: ST_TO_ADDR
// if not tmp then
62247: LD_VAR 0 4
62251: NOT
62252: IFFALSE 62256
// exit ;
62254: GO 62398
// enable_addtolog := true ;
62256: LD_ADDR_OWVAR 81
62260: PUSH
62261: LD_INT 1
62263: ST_TO_ADDR
// AddToLog ( [ ) ;
62264: LD_STRING [
62266: PPUSH
62267: CALL_OW 561
// for i in tmp do
62271: LD_ADDR_VAR 0 3
62275: PUSH
62276: LD_VAR 0 4
62280: PUSH
62281: FOR_IN
62282: IFFALSE 62389
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62284: LD_STRING [
62286: PUSH
62287: LD_VAR 0 3
62291: PPUSH
62292: CALL_OW 266
62296: STR
62297: PUSH
62298: LD_STRING , 
62300: STR
62301: PUSH
62302: LD_VAR 0 3
62306: PPUSH
62307: CALL_OW 250
62311: STR
62312: PUSH
62313: LD_STRING , 
62315: STR
62316: PUSH
62317: LD_VAR 0 3
62321: PPUSH
62322: CALL_OW 251
62326: STR
62327: PUSH
62328: LD_STRING , 
62330: STR
62331: PUSH
62332: LD_VAR 0 3
62336: PPUSH
62337: CALL_OW 254
62341: STR
62342: PUSH
62343: LD_STRING , 
62345: STR
62346: PUSH
62347: LD_VAR 0 3
62351: PPUSH
62352: LD_INT 1
62354: PPUSH
62355: CALL_OW 268
62359: STR
62360: PUSH
62361: LD_STRING , 
62363: STR
62364: PUSH
62365: LD_VAR 0 3
62369: PPUSH
62370: LD_INT 2
62372: PPUSH
62373: CALL_OW 268
62377: STR
62378: PUSH
62379: LD_STRING ],
62381: STR
62382: PPUSH
62383: CALL_OW 561
// end ;
62387: GO 62281
62389: POP
62390: POP
// AddToLog ( ]; ) ;
62391: LD_STRING ];
62393: PPUSH
62394: CALL_OW 561
// end ;
62398: LD_VAR 0 2
62402: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62403: LD_INT 0
62405: PPUSH
62406: PPUSH
62407: PPUSH
62408: PPUSH
62409: PPUSH
// if not area or not rate or not max then
62410: LD_VAR 0 1
62414: NOT
62415: PUSH
62416: LD_VAR 0 2
62420: NOT
62421: OR
62422: PUSH
62423: LD_VAR 0 4
62427: NOT
62428: OR
62429: IFFALSE 62433
// exit ;
62431: GO 62622
// while 1 do
62433: LD_INT 1
62435: IFFALSE 62622
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62437: LD_ADDR_VAR 0 9
62441: PUSH
62442: LD_VAR 0 1
62446: PPUSH
62447: LD_INT 1
62449: PPUSH
62450: CALL_OW 287
62454: PUSH
62455: LD_INT 10
62457: MUL
62458: ST_TO_ADDR
// r := rate / 10 ;
62459: LD_ADDR_VAR 0 7
62463: PUSH
62464: LD_VAR 0 2
62468: PUSH
62469: LD_INT 10
62471: DIVREAL
62472: ST_TO_ADDR
// time := 1 1$00 ;
62473: LD_ADDR_VAR 0 8
62477: PUSH
62478: LD_INT 2100
62480: ST_TO_ADDR
// if amount < min then
62481: LD_VAR 0 9
62485: PUSH
62486: LD_VAR 0 3
62490: LESS
62491: IFFALSE 62509
// r := r * 2 else
62493: LD_ADDR_VAR 0 7
62497: PUSH
62498: LD_VAR 0 7
62502: PUSH
62503: LD_INT 2
62505: MUL
62506: ST_TO_ADDR
62507: GO 62535
// if amount > max then
62509: LD_VAR 0 9
62513: PUSH
62514: LD_VAR 0 4
62518: GREATER
62519: IFFALSE 62535
// r := r / 2 ;
62521: LD_ADDR_VAR 0 7
62525: PUSH
62526: LD_VAR 0 7
62530: PUSH
62531: LD_INT 2
62533: DIVREAL
62534: ST_TO_ADDR
// time := time / r ;
62535: LD_ADDR_VAR 0 8
62539: PUSH
62540: LD_VAR 0 8
62544: PUSH
62545: LD_VAR 0 7
62549: DIVREAL
62550: ST_TO_ADDR
// if time < 0 then
62551: LD_VAR 0 8
62555: PUSH
62556: LD_INT 0
62558: LESS
62559: IFFALSE 62576
// time := time * - 1 ;
62561: LD_ADDR_VAR 0 8
62565: PUSH
62566: LD_VAR 0 8
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: MUL
62575: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62576: LD_VAR 0 8
62580: PUSH
62581: LD_INT 35
62583: PPUSH
62584: LD_INT 875
62586: PPUSH
62587: CALL_OW 12
62591: PLUS
62592: PPUSH
62593: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62597: LD_INT 1
62599: PPUSH
62600: LD_INT 5
62602: PPUSH
62603: CALL_OW 12
62607: PPUSH
62608: LD_VAR 0 1
62612: PPUSH
62613: LD_INT 1
62615: PPUSH
62616: CALL_OW 55
// end ;
62620: GO 62433
// end ;
62622: LD_VAR 0 5
62626: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62627: LD_INT 0
62629: PPUSH
62630: PPUSH
62631: PPUSH
62632: PPUSH
62633: PPUSH
62634: PPUSH
62635: PPUSH
62636: PPUSH
// if not turrets or not factories then
62637: LD_VAR 0 1
62641: NOT
62642: PUSH
62643: LD_VAR 0 2
62647: NOT
62648: OR
62649: IFFALSE 62653
// exit ;
62651: GO 62960
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62653: LD_ADDR_VAR 0 10
62657: PUSH
62658: LD_INT 5
62660: PUSH
62661: LD_INT 6
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 4
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: PUSH
62681: LD_INT 5
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 24
62695: PUSH
62696: LD_INT 25
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 23
62705: PUSH
62706: LD_INT 27
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 42
62719: PUSH
62720: LD_INT 43
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 44
62729: PUSH
62730: LD_INT 46
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 45
62739: PUSH
62740: LD_INT 47
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: LIST
62756: ST_TO_ADDR
// result := [ ] ;
62757: LD_ADDR_VAR 0 3
62761: PUSH
62762: EMPTY
62763: ST_TO_ADDR
// for i in turrets do
62764: LD_ADDR_VAR 0 4
62768: PUSH
62769: LD_VAR 0 1
62773: PUSH
62774: FOR_IN
62775: IFFALSE 62958
// begin nat := GetNation ( i ) ;
62777: LD_ADDR_VAR 0 7
62781: PUSH
62782: LD_VAR 0 4
62786: PPUSH
62787: CALL_OW 248
62791: ST_TO_ADDR
// weapon := 0 ;
62792: LD_ADDR_VAR 0 8
62796: PUSH
62797: LD_INT 0
62799: ST_TO_ADDR
// if not nat then
62800: LD_VAR 0 7
62804: NOT
62805: IFFALSE 62809
// continue ;
62807: GO 62774
// for j in list [ nat ] do
62809: LD_ADDR_VAR 0 5
62813: PUSH
62814: LD_VAR 0 10
62818: PUSH
62819: LD_VAR 0 7
62823: ARRAY
62824: PUSH
62825: FOR_IN
62826: IFFALSE 62867
// if GetBWeapon ( i ) = j [ 1 ] then
62828: LD_VAR 0 4
62832: PPUSH
62833: CALL_OW 269
62837: PUSH
62838: LD_VAR 0 5
62842: PUSH
62843: LD_INT 1
62845: ARRAY
62846: EQUAL
62847: IFFALSE 62865
// begin weapon := j [ 2 ] ;
62849: LD_ADDR_VAR 0 8
62853: PUSH
62854: LD_VAR 0 5
62858: PUSH
62859: LD_INT 2
62861: ARRAY
62862: ST_TO_ADDR
// break ;
62863: GO 62867
// end ;
62865: GO 62825
62867: POP
62868: POP
// if not weapon then
62869: LD_VAR 0 8
62873: NOT
62874: IFFALSE 62878
// continue ;
62876: GO 62774
// for k in factories do
62878: LD_ADDR_VAR 0 6
62882: PUSH
62883: LD_VAR 0 2
62887: PUSH
62888: FOR_IN
62889: IFFALSE 62954
// begin weapons := AvailableWeaponList ( k ) ;
62891: LD_ADDR_VAR 0 9
62895: PUSH
62896: LD_VAR 0 6
62900: PPUSH
62901: CALL_OW 478
62905: ST_TO_ADDR
// if not weapons then
62906: LD_VAR 0 9
62910: NOT
62911: IFFALSE 62915
// continue ;
62913: GO 62888
// if weapon in weapons then
62915: LD_VAR 0 8
62919: PUSH
62920: LD_VAR 0 9
62924: IN
62925: IFFALSE 62952
// begin result := [ i , weapon ] ;
62927: LD_ADDR_VAR 0 3
62931: PUSH
62932: LD_VAR 0 4
62936: PUSH
62937: LD_VAR 0 8
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: ST_TO_ADDR
// exit ;
62946: POP
62947: POP
62948: POP
62949: POP
62950: GO 62960
// end ; end ;
62952: GO 62888
62954: POP
62955: POP
// end ;
62956: GO 62774
62958: POP
62959: POP
// end ;
62960: LD_VAR 0 3
62964: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62965: LD_INT 0
62967: PPUSH
// if not side or side > 8 then
62968: LD_VAR 0 3
62972: NOT
62973: PUSH
62974: LD_VAR 0 3
62978: PUSH
62979: LD_INT 8
62981: GREATER
62982: OR
62983: IFFALSE 62987
// exit ;
62985: GO 63046
// if not range then
62987: LD_VAR 0 4
62991: NOT
62992: IFFALSE 63003
// range := - 12 ;
62994: LD_ADDR_VAR 0 4
62998: PUSH
62999: LD_INT 12
63001: NEG
63002: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63003: LD_VAR 0 1
63007: PPUSH
63008: LD_VAR 0 2
63012: PPUSH
63013: LD_VAR 0 3
63017: PPUSH
63018: LD_VAR 0 4
63022: PPUSH
63023: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63027: LD_VAR 0 1
63031: PPUSH
63032: LD_VAR 0 2
63036: PPUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: CALL_OW 331
// end ;
63046: LD_VAR 0 5
63050: RET
// export function Video ( mode ) ; begin
63051: LD_INT 0
63053: PPUSH
// ingame_video = mode ;
63054: LD_ADDR_OWVAR 52
63058: PUSH
63059: LD_VAR 0 1
63063: ST_TO_ADDR
// interface_hidden = mode ;
63064: LD_ADDR_OWVAR 54
63068: PUSH
63069: LD_VAR 0 1
63073: ST_TO_ADDR
// end ;
63074: LD_VAR 0 2
63078: RET
// export function Join ( array , element ) ; begin
63079: LD_INT 0
63081: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63082: LD_ADDR_VAR 0 3
63086: PUSH
63087: LD_VAR 0 1
63091: PPUSH
63092: LD_VAR 0 1
63096: PUSH
63097: LD_INT 1
63099: PLUS
63100: PPUSH
63101: LD_VAR 0 2
63105: PPUSH
63106: CALL_OW 1
63110: ST_TO_ADDR
// end ;
63111: LD_VAR 0 3
63115: RET
// export function JoinUnion ( array , element ) ; begin
63116: LD_INT 0
63118: PPUSH
// result := array union element ;
63119: LD_ADDR_VAR 0 3
63123: PUSH
63124: LD_VAR 0 1
63128: PUSH
63129: LD_VAR 0 2
63133: UNION
63134: ST_TO_ADDR
// end ;
63135: LD_VAR 0 3
63139: RET
// export function GetBehemoths ( side ) ; begin
63140: LD_INT 0
63142: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63143: LD_ADDR_VAR 0 2
63147: PUSH
63148: LD_INT 22
63150: PUSH
63151: LD_VAR 0 1
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 31
63162: PUSH
63163: LD_INT 25
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PPUSH
63174: CALL_OW 69
63178: ST_TO_ADDR
// end ;
63179: LD_VAR 0 2
63183: RET
// export function Shuffle ( array ) ; var i , index ; begin
63184: LD_INT 0
63186: PPUSH
63187: PPUSH
63188: PPUSH
// result := [ ] ;
63189: LD_ADDR_VAR 0 2
63193: PUSH
63194: EMPTY
63195: ST_TO_ADDR
// if not array then
63196: LD_VAR 0 1
63200: NOT
63201: IFFALSE 63205
// exit ;
63203: GO 63304
// Randomize ;
63205: CALL_OW 10
// for i = array downto 1 do
63209: LD_ADDR_VAR 0 3
63213: PUSH
63214: DOUBLE
63215: LD_VAR 0 1
63219: INC
63220: ST_TO_ADDR
63221: LD_INT 1
63223: PUSH
63224: FOR_DOWNTO
63225: IFFALSE 63302
// begin index := rand ( 1 , array ) ;
63227: LD_ADDR_VAR 0 4
63231: PUSH
63232: LD_INT 1
63234: PPUSH
63235: LD_VAR 0 1
63239: PPUSH
63240: CALL_OW 12
63244: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63245: LD_ADDR_VAR 0 2
63249: PUSH
63250: LD_VAR 0 2
63254: PPUSH
63255: LD_VAR 0 2
63259: PUSH
63260: LD_INT 1
63262: PLUS
63263: PPUSH
63264: LD_VAR 0 1
63268: PUSH
63269: LD_VAR 0 4
63273: ARRAY
63274: PPUSH
63275: CALL_OW 2
63279: ST_TO_ADDR
// array := Delete ( array , index ) ;
63280: LD_ADDR_VAR 0 1
63284: PUSH
63285: LD_VAR 0 1
63289: PPUSH
63290: LD_VAR 0 4
63294: PPUSH
63295: CALL_OW 3
63299: ST_TO_ADDR
// end ;
63300: GO 63224
63302: POP
63303: POP
// end ;
63304: LD_VAR 0 2
63308: RET
// export function GetBaseMaterials ( base ) ; begin
63309: LD_INT 0
63311: PPUSH
// result := [ 0 , 0 , 0 ] ;
63312: LD_ADDR_VAR 0 2
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: ST_TO_ADDR
// if not base then
63331: LD_VAR 0 1
63335: NOT
63336: IFFALSE 63340
// exit ;
63338: GO 63389
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63340: LD_ADDR_VAR 0 2
63344: PUSH
63345: LD_VAR 0 1
63349: PPUSH
63350: LD_INT 1
63352: PPUSH
63353: CALL_OW 275
63357: PUSH
63358: LD_VAR 0 1
63362: PPUSH
63363: LD_INT 2
63365: PPUSH
63366: CALL_OW 275
63370: PUSH
63371: LD_VAR 0 1
63375: PPUSH
63376: LD_INT 3
63378: PPUSH
63379: CALL_OW 275
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: LIST
63388: ST_TO_ADDR
// end ;
63389: LD_VAR 0 2
63393: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63394: LD_INT 0
63396: PPUSH
63397: PPUSH
// result := array ;
63398: LD_ADDR_VAR 0 3
63402: PUSH
63403: LD_VAR 0 1
63407: ST_TO_ADDR
// if size >= result then
63408: LD_VAR 0 2
63412: PUSH
63413: LD_VAR 0 3
63417: GREATEREQUAL
63418: IFFALSE 63422
// exit ;
63420: GO 63472
// if size then
63422: LD_VAR 0 2
63426: IFFALSE 63472
// for i := array downto size do
63428: LD_ADDR_VAR 0 4
63432: PUSH
63433: DOUBLE
63434: LD_VAR 0 1
63438: INC
63439: ST_TO_ADDR
63440: LD_VAR 0 2
63444: PUSH
63445: FOR_DOWNTO
63446: IFFALSE 63470
// result := Delete ( result , result ) ;
63448: LD_ADDR_VAR 0 3
63452: PUSH
63453: LD_VAR 0 3
63457: PPUSH
63458: LD_VAR 0 3
63462: PPUSH
63463: CALL_OW 3
63467: ST_TO_ADDR
63468: GO 63445
63470: POP
63471: POP
// end ;
63472: LD_VAR 0 3
63476: RET
// export function ComExit ( unit ) ; var tmp ; begin
63477: LD_INT 0
63479: PPUSH
63480: PPUSH
// if not IsInUnit ( unit ) then
63481: LD_VAR 0 1
63485: PPUSH
63486: CALL_OW 310
63490: NOT
63491: IFFALSE 63495
// exit ;
63493: GO 63555
// tmp := IsInUnit ( unit ) ;
63495: LD_ADDR_VAR 0 3
63499: PUSH
63500: LD_VAR 0 1
63504: PPUSH
63505: CALL_OW 310
63509: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63510: LD_VAR 0 3
63514: PPUSH
63515: CALL_OW 247
63519: PUSH
63520: LD_INT 2
63522: EQUAL
63523: IFFALSE 63536
// ComExitVehicle ( unit ) else
63525: LD_VAR 0 1
63529: PPUSH
63530: CALL_OW 121
63534: GO 63545
// ComExitBuilding ( unit ) ;
63536: LD_VAR 0 1
63540: PPUSH
63541: CALL_OW 122
// result := tmp ;
63545: LD_ADDR_VAR 0 2
63549: PUSH
63550: LD_VAR 0 3
63554: ST_TO_ADDR
// end ;
63555: LD_VAR 0 2
63559: RET
// export function ComExitAll ( units ) ; var i ; begin
63560: LD_INT 0
63562: PPUSH
63563: PPUSH
// if not units then
63564: LD_VAR 0 1
63568: NOT
63569: IFFALSE 63573
// exit ;
63571: GO 63599
// for i in units do
63573: LD_ADDR_VAR 0 3
63577: PUSH
63578: LD_VAR 0 1
63582: PUSH
63583: FOR_IN
63584: IFFALSE 63597
// ComExit ( i ) ;
63586: LD_VAR 0 3
63590: PPUSH
63591: CALL 63477 0 1
63595: GO 63583
63597: POP
63598: POP
// end ;
63599: LD_VAR 0 2
63603: RET
// export function ResetHc ; begin
63604: LD_INT 0
63606: PPUSH
// InitHc ;
63607: CALL_OW 19
// hc_importance := 0 ;
63611: LD_ADDR_OWVAR 32
63615: PUSH
63616: LD_INT 0
63618: ST_TO_ADDR
// end ;
63619: LD_VAR 0 1
63623: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63624: LD_INT 0
63626: PPUSH
63627: PPUSH
63628: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63629: LD_ADDR_VAR 0 6
63633: PUSH
63634: LD_VAR 0 1
63638: PUSH
63639: LD_VAR 0 3
63643: PLUS
63644: PUSH
63645: LD_INT 2
63647: DIV
63648: ST_TO_ADDR
// if _x < 0 then
63649: LD_VAR 0 6
63653: PUSH
63654: LD_INT 0
63656: LESS
63657: IFFALSE 63674
// _x := _x * - 1 ;
63659: LD_ADDR_VAR 0 6
63663: PUSH
63664: LD_VAR 0 6
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: MUL
63673: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63674: LD_ADDR_VAR 0 7
63678: PUSH
63679: LD_VAR 0 2
63683: PUSH
63684: LD_VAR 0 4
63688: PLUS
63689: PUSH
63690: LD_INT 2
63692: DIV
63693: ST_TO_ADDR
// if _y < 0 then
63694: LD_VAR 0 7
63698: PUSH
63699: LD_INT 0
63701: LESS
63702: IFFALSE 63719
// _y := _y * - 1 ;
63704: LD_ADDR_VAR 0 7
63708: PUSH
63709: LD_VAR 0 7
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: MUL
63718: ST_TO_ADDR
// result := [ _x , _y ] ;
63719: LD_ADDR_VAR 0 5
63723: PUSH
63724: LD_VAR 0 6
63728: PUSH
63729: LD_VAR 0 7
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: ST_TO_ADDR
// end ;
63738: LD_VAR 0 5
63742: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63743: LD_INT 0
63745: PPUSH
63746: PPUSH
63747: PPUSH
63748: PPUSH
// task := GetTaskList ( unit ) ;
63749: LD_ADDR_VAR 0 7
63753: PUSH
63754: LD_VAR 0 1
63758: PPUSH
63759: CALL_OW 437
63763: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63764: LD_VAR 0 7
63768: NOT
63769: PUSH
63770: LD_VAR 0 1
63774: PPUSH
63775: LD_VAR 0 2
63779: PPUSH
63780: CALL_OW 308
63784: NOT
63785: AND
63786: IFFALSE 63790
// exit ;
63788: GO 63908
// if IsInArea ( unit , area ) then
63790: LD_VAR 0 1
63794: PPUSH
63795: LD_VAR 0 2
63799: PPUSH
63800: CALL_OW 308
63804: IFFALSE 63822
// begin ComMoveToArea ( unit , goAway ) ;
63806: LD_VAR 0 1
63810: PPUSH
63811: LD_VAR 0 3
63815: PPUSH
63816: CALL_OW 113
// exit ;
63820: GO 63908
// end ; if task [ 1 ] [ 1 ] <> M then
63822: LD_VAR 0 7
63826: PUSH
63827: LD_INT 1
63829: ARRAY
63830: PUSH
63831: LD_INT 1
63833: ARRAY
63834: PUSH
63835: LD_STRING M
63837: NONEQUAL
63838: IFFALSE 63842
// exit ;
63840: GO 63908
// x := task [ 1 ] [ 2 ] ;
63842: LD_ADDR_VAR 0 5
63846: PUSH
63847: LD_VAR 0 7
63851: PUSH
63852: LD_INT 1
63854: ARRAY
63855: PUSH
63856: LD_INT 2
63858: ARRAY
63859: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63860: LD_ADDR_VAR 0 6
63864: PUSH
63865: LD_VAR 0 7
63869: PUSH
63870: LD_INT 1
63872: ARRAY
63873: PUSH
63874: LD_INT 3
63876: ARRAY
63877: ST_TO_ADDR
// if InArea ( x , y , area ) then
63878: LD_VAR 0 5
63882: PPUSH
63883: LD_VAR 0 6
63887: PPUSH
63888: LD_VAR 0 2
63892: PPUSH
63893: CALL_OW 309
63897: IFFALSE 63908
// ComStop ( unit ) ;
63899: LD_VAR 0 1
63903: PPUSH
63904: CALL_OW 141
// end ;
63908: LD_VAR 0 4
63912: RET
// export function Abs ( value ) ; begin
63913: LD_INT 0
63915: PPUSH
// result := value ;
63916: LD_ADDR_VAR 0 2
63920: PUSH
63921: LD_VAR 0 1
63925: ST_TO_ADDR
// if value < 0 then
63926: LD_VAR 0 1
63930: PUSH
63931: LD_INT 0
63933: LESS
63934: IFFALSE 63951
// result := value * - 1 ;
63936: LD_ADDR_VAR 0 2
63940: PUSH
63941: LD_VAR 0 1
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: MUL
63950: ST_TO_ADDR
// end ;
63951: LD_VAR 0 2
63955: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63956: LD_INT 0
63958: PPUSH
63959: PPUSH
63960: PPUSH
63961: PPUSH
63962: PPUSH
63963: PPUSH
63964: PPUSH
63965: PPUSH
// if not unit or not building then
63966: LD_VAR 0 1
63970: NOT
63971: PUSH
63972: LD_VAR 0 2
63976: NOT
63977: OR
63978: IFFALSE 63982
// exit ;
63980: GO 64208
// x := GetX ( building ) ;
63982: LD_ADDR_VAR 0 4
63986: PUSH
63987: LD_VAR 0 2
63991: PPUSH
63992: CALL_OW 250
63996: ST_TO_ADDR
// y := GetY ( building ) ;
63997: LD_ADDR_VAR 0 6
64001: PUSH
64002: LD_VAR 0 2
64006: PPUSH
64007: CALL_OW 251
64011: ST_TO_ADDR
// d := GetDir ( building ) ;
64012: LD_ADDR_VAR 0 8
64016: PUSH
64017: LD_VAR 0 2
64021: PPUSH
64022: CALL_OW 254
64026: ST_TO_ADDR
// r := 4 ;
64027: LD_ADDR_VAR 0 9
64031: PUSH
64032: LD_INT 4
64034: ST_TO_ADDR
// for i := 1 to 5 do
64035: LD_ADDR_VAR 0 10
64039: PUSH
64040: DOUBLE
64041: LD_INT 1
64043: DEC
64044: ST_TO_ADDR
64045: LD_INT 5
64047: PUSH
64048: FOR_TO
64049: IFFALSE 64206
// begin _x := ShiftX ( x , d , r + i ) ;
64051: LD_ADDR_VAR 0 5
64055: PUSH
64056: LD_VAR 0 4
64060: PPUSH
64061: LD_VAR 0 8
64065: PPUSH
64066: LD_VAR 0 9
64070: PUSH
64071: LD_VAR 0 10
64075: PLUS
64076: PPUSH
64077: CALL_OW 272
64081: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64082: LD_ADDR_VAR 0 7
64086: PUSH
64087: LD_VAR 0 6
64091: PPUSH
64092: LD_VAR 0 8
64096: PPUSH
64097: LD_VAR 0 9
64101: PUSH
64102: LD_VAR 0 10
64106: PLUS
64107: PPUSH
64108: CALL_OW 273
64112: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64113: LD_VAR 0 5
64117: PPUSH
64118: LD_VAR 0 7
64122: PPUSH
64123: CALL_OW 488
64127: PUSH
64128: LD_VAR 0 5
64132: PPUSH
64133: LD_VAR 0 7
64137: PPUSH
64138: CALL_OW 428
64142: PPUSH
64143: CALL_OW 247
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: IN
64158: NOT
64159: AND
64160: IFFALSE 64204
// begin ComMoveXY ( unit , _x , _y ) ;
64162: LD_VAR 0 1
64166: PPUSH
64167: LD_VAR 0 5
64171: PPUSH
64172: LD_VAR 0 7
64176: PPUSH
64177: CALL_OW 111
// result := [ _x , _y ] ;
64181: LD_ADDR_VAR 0 3
64185: PUSH
64186: LD_VAR 0 5
64190: PUSH
64191: LD_VAR 0 7
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// exit ;
64200: POP
64201: POP
64202: GO 64208
// end ; end ;
64204: GO 64048
64206: POP
64207: POP
// end ;
64208: LD_VAR 0 3
64212: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64213: LD_INT 0
64215: PPUSH
64216: PPUSH
64217: PPUSH
// result := 0 ;
64218: LD_ADDR_VAR 0 3
64222: PUSH
64223: LD_INT 0
64225: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64226: LD_VAR 0 1
64230: PUSH
64231: LD_INT 0
64233: LESS
64234: PUSH
64235: LD_VAR 0 1
64239: PUSH
64240: LD_INT 8
64242: GREATER
64243: OR
64244: PUSH
64245: LD_VAR 0 2
64249: PUSH
64250: LD_INT 0
64252: LESS
64253: OR
64254: PUSH
64255: LD_VAR 0 2
64259: PUSH
64260: LD_INT 8
64262: GREATER
64263: OR
64264: IFFALSE 64268
// exit ;
64266: GO 64343
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64268: LD_ADDR_VAR 0 4
64272: PUSH
64273: LD_INT 22
64275: PUSH
64276: LD_VAR 0 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PPUSH
64285: CALL_OW 69
64289: PUSH
64290: FOR_IN
64291: IFFALSE 64341
// begin un := UnitShoot ( i ) ;
64293: LD_ADDR_VAR 0 5
64297: PUSH
64298: LD_VAR 0 4
64302: PPUSH
64303: CALL_OW 504
64307: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64308: LD_VAR 0 5
64312: PPUSH
64313: CALL_OW 255
64317: PUSH
64318: LD_VAR 0 1
64322: EQUAL
64323: IFFALSE 64339
// begin result := un ;
64325: LD_ADDR_VAR 0 3
64329: PUSH
64330: LD_VAR 0 5
64334: ST_TO_ADDR
// exit ;
64335: POP
64336: POP
64337: GO 64343
// end ; end ;
64339: GO 64290
64341: POP
64342: POP
// end ;
64343: LD_VAR 0 3
64347: RET
// export function GetCargoBay ( units ) ; begin
64348: LD_INT 0
64350: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64351: LD_ADDR_VAR 0 2
64355: PUSH
64356: LD_VAR 0 1
64360: PPUSH
64361: LD_INT 2
64363: PUSH
64364: LD_INT 34
64366: PUSH
64367: LD_INT 12
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 34
64376: PUSH
64377: LD_INT 51
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 34
64386: PUSH
64387: LD_INT 32
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 34
64396: PUSH
64397: LD_INT 89
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: PPUSH
64411: CALL_OW 72
64415: ST_TO_ADDR
// end ;
64416: LD_VAR 0 2
64420: RET
// export function Negate ( value ) ; begin
64421: LD_INT 0
64423: PPUSH
// result := not value ;
64424: LD_ADDR_VAR 0 2
64428: PUSH
64429: LD_VAR 0 1
64433: NOT
64434: ST_TO_ADDR
// end ;
64435: LD_VAR 0 2
64439: RET
// export function Inc ( value ) ; begin
64440: LD_INT 0
64442: PPUSH
// result := value + 1 ;
64443: LD_ADDR_VAR 0 2
64447: PUSH
64448: LD_VAR 0 1
64452: PUSH
64453: LD_INT 1
64455: PLUS
64456: ST_TO_ADDR
// end ;
64457: LD_VAR 0 2
64461: RET
// export function Dec ( value ) ; begin
64462: LD_INT 0
64464: PPUSH
// result := value - 1 ;
64465: LD_ADDR_VAR 0 2
64469: PUSH
64470: LD_VAR 0 1
64474: PUSH
64475: LD_INT 1
64477: MINUS
64478: ST_TO_ADDR
// end ;
64479: LD_VAR 0 2
64483: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64484: LD_INT 0
64486: PPUSH
64487: PPUSH
64488: PPUSH
64489: PPUSH
64490: PPUSH
64491: PPUSH
64492: PPUSH
64493: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64494: LD_VAR 0 1
64498: PPUSH
64499: LD_VAR 0 2
64503: PPUSH
64504: CALL_OW 488
64508: NOT
64509: PUSH
64510: LD_VAR 0 3
64514: PPUSH
64515: LD_VAR 0 4
64519: PPUSH
64520: CALL_OW 488
64524: NOT
64525: OR
64526: IFFALSE 64539
// begin result := - 1 ;
64528: LD_ADDR_VAR 0 5
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: ST_TO_ADDR
// exit ;
64537: GO 64774
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64539: LD_ADDR_VAR 0 12
64543: PUSH
64544: LD_VAR 0 1
64548: PPUSH
64549: LD_VAR 0 2
64553: PPUSH
64554: LD_VAR 0 3
64558: PPUSH
64559: LD_VAR 0 4
64563: PPUSH
64564: CALL 63624 0 4
64568: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64569: LD_ADDR_VAR 0 11
64573: PUSH
64574: LD_VAR 0 1
64578: PPUSH
64579: LD_VAR 0 2
64583: PPUSH
64584: LD_VAR 0 12
64588: PUSH
64589: LD_INT 1
64591: ARRAY
64592: PPUSH
64593: LD_VAR 0 12
64597: PUSH
64598: LD_INT 2
64600: ARRAY
64601: PPUSH
64602: CALL_OW 298
64606: ST_TO_ADDR
// distance := 9999 ;
64607: LD_ADDR_VAR 0 10
64611: PUSH
64612: LD_INT 9999
64614: ST_TO_ADDR
// for i := 0 to 5 do
64615: LD_ADDR_VAR 0 6
64619: PUSH
64620: DOUBLE
64621: LD_INT 0
64623: DEC
64624: ST_TO_ADDR
64625: LD_INT 5
64627: PUSH
64628: FOR_TO
64629: IFFALSE 64772
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64631: LD_ADDR_VAR 0 7
64635: PUSH
64636: LD_VAR 0 1
64640: PPUSH
64641: LD_VAR 0 6
64645: PPUSH
64646: LD_VAR 0 11
64650: PPUSH
64651: CALL_OW 272
64655: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64656: LD_ADDR_VAR 0 8
64660: PUSH
64661: LD_VAR 0 2
64665: PPUSH
64666: LD_VAR 0 6
64670: PPUSH
64671: LD_VAR 0 11
64675: PPUSH
64676: CALL_OW 273
64680: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64681: LD_VAR 0 7
64685: PPUSH
64686: LD_VAR 0 8
64690: PPUSH
64691: CALL_OW 488
64695: NOT
64696: IFFALSE 64700
// continue ;
64698: GO 64628
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64700: LD_ADDR_VAR 0 9
64704: PUSH
64705: LD_VAR 0 12
64709: PUSH
64710: LD_INT 1
64712: ARRAY
64713: PPUSH
64714: LD_VAR 0 12
64718: PUSH
64719: LD_INT 2
64721: ARRAY
64722: PPUSH
64723: LD_VAR 0 7
64727: PPUSH
64728: LD_VAR 0 8
64732: PPUSH
64733: CALL_OW 298
64737: ST_TO_ADDR
// if tmp < distance then
64738: LD_VAR 0 9
64742: PUSH
64743: LD_VAR 0 10
64747: LESS
64748: IFFALSE 64770
// begin result := i ;
64750: LD_ADDR_VAR 0 5
64754: PUSH
64755: LD_VAR 0 6
64759: ST_TO_ADDR
// distance := tmp ;
64760: LD_ADDR_VAR 0 10
64764: PUSH
64765: LD_VAR 0 9
64769: ST_TO_ADDR
// end ; end ;
64770: GO 64628
64772: POP
64773: POP
// end ;
64774: LD_VAR 0 5
64778: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64779: LD_INT 0
64781: PPUSH
64782: PPUSH
// if not driver or not IsInUnit ( driver ) then
64783: LD_VAR 0 1
64787: NOT
64788: PUSH
64789: LD_VAR 0 1
64793: PPUSH
64794: CALL_OW 310
64798: NOT
64799: OR
64800: IFFALSE 64804
// exit ;
64802: GO 64894
// vehicle := IsInUnit ( driver ) ;
64804: LD_ADDR_VAR 0 3
64808: PUSH
64809: LD_VAR 0 1
64813: PPUSH
64814: CALL_OW 310
64818: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64819: LD_VAR 0 1
64823: PPUSH
64824: LD_STRING \
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: PUSH
64854: LD_STRING E
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_VAR 0 3
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PPUSH
64890: CALL_OW 446
// end ;
64894: LD_VAR 0 2
64898: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64899: LD_INT 0
64901: PPUSH
64902: PPUSH
// if not driver or not IsInUnit ( driver ) then
64903: LD_VAR 0 1
64907: NOT
64908: PUSH
64909: LD_VAR 0 1
64913: PPUSH
64914: CALL_OW 310
64918: NOT
64919: OR
64920: IFFALSE 64924
// exit ;
64922: GO 65014
// vehicle := IsInUnit ( driver ) ;
64924: LD_ADDR_VAR 0 3
64928: PUSH
64929: LD_VAR 0 1
64933: PPUSH
64934: CALL_OW 310
64938: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64939: LD_VAR 0 1
64943: PPUSH
64944: LD_STRING \
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: PUSH
64974: LD_STRING E
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: LD_VAR 0 3
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PPUSH
65010: CALL_OW 447
// end ;
65014: LD_VAR 0 2
65018: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65019: LD_INT 0
65021: PPUSH
65022: PPUSH
65023: PPUSH
// tmp := [ ] ;
65024: LD_ADDR_VAR 0 5
65028: PUSH
65029: EMPTY
65030: ST_TO_ADDR
// for i in units do
65031: LD_ADDR_VAR 0 4
65035: PUSH
65036: LD_VAR 0 1
65040: PUSH
65041: FOR_IN
65042: IFFALSE 65080
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65044: LD_ADDR_VAR 0 5
65048: PUSH
65049: LD_VAR 0 5
65053: PPUSH
65054: LD_VAR 0 5
65058: PUSH
65059: LD_INT 1
65061: PLUS
65062: PPUSH
65063: LD_VAR 0 4
65067: PPUSH
65068: CALL_OW 256
65072: PPUSH
65073: CALL_OW 2
65077: ST_TO_ADDR
65078: GO 65041
65080: POP
65081: POP
// if not tmp then
65082: LD_VAR 0 5
65086: NOT
65087: IFFALSE 65091
// exit ;
65089: GO 65139
// if asc then
65091: LD_VAR 0 2
65095: IFFALSE 65119
// result := SortListByListAsc ( units , tmp ) else
65097: LD_ADDR_VAR 0 3
65101: PUSH
65102: LD_VAR 0 1
65106: PPUSH
65107: LD_VAR 0 5
65111: PPUSH
65112: CALL_OW 76
65116: ST_TO_ADDR
65117: GO 65139
// result := SortListByListDesc ( units , tmp ) ;
65119: LD_ADDR_VAR 0 3
65123: PUSH
65124: LD_VAR 0 1
65128: PPUSH
65129: LD_VAR 0 5
65133: PPUSH
65134: CALL_OW 77
65138: ST_TO_ADDR
// end ;
65139: LD_VAR 0 3
65143: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65144: LD_INT 0
65146: PPUSH
65147: PPUSH
// task := GetTaskList ( mech ) ;
65148: LD_ADDR_VAR 0 4
65152: PUSH
65153: LD_VAR 0 1
65157: PPUSH
65158: CALL_OW 437
65162: ST_TO_ADDR
// if not task then
65163: LD_VAR 0 4
65167: NOT
65168: IFFALSE 65172
// exit ;
65170: GO 65214
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65172: LD_ADDR_VAR 0 3
65176: PUSH
65177: LD_VAR 0 4
65181: PUSH
65182: LD_INT 1
65184: ARRAY
65185: PUSH
65186: LD_INT 1
65188: ARRAY
65189: PUSH
65190: LD_STRING r
65192: EQUAL
65193: PUSH
65194: LD_VAR 0 4
65198: PUSH
65199: LD_INT 1
65201: ARRAY
65202: PUSH
65203: LD_INT 4
65205: ARRAY
65206: PUSH
65207: LD_VAR 0 2
65211: EQUAL
65212: AND
65213: ST_TO_ADDR
// end ;
65214: LD_VAR 0 3
65218: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65219: LD_INT 0
65221: PPUSH
// SetDir ( unit , d ) ;
65222: LD_VAR 0 1
65226: PPUSH
65227: LD_VAR 0 4
65231: PPUSH
65232: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65236: LD_VAR 0 1
65240: PPUSH
65241: LD_VAR 0 2
65245: PPUSH
65246: LD_VAR 0 3
65250: PPUSH
65251: LD_VAR 0 5
65255: PPUSH
65256: CALL_OW 48
// end ;
65260: LD_VAR 0 6
65264: RET
// export function ToNaturalNumber ( number ) ; begin
65265: LD_INT 0
65267: PPUSH
// result := number div 1 ;
65268: LD_ADDR_VAR 0 2
65272: PUSH
65273: LD_VAR 0 1
65277: PUSH
65278: LD_INT 1
65280: DIV
65281: ST_TO_ADDR
// if number < 0 then
65282: LD_VAR 0 1
65286: PUSH
65287: LD_INT 0
65289: LESS
65290: IFFALSE 65300
// result := 0 ;
65292: LD_ADDR_VAR 0 2
65296: PUSH
65297: LD_INT 0
65299: ST_TO_ADDR
// end ;
65300: LD_VAR 0 2
65304: RET
// export function SortByClass ( units , class ) ; var un ; begin
65305: LD_INT 0
65307: PPUSH
65308: PPUSH
// if not units or not class then
65309: LD_VAR 0 1
65313: NOT
65314: PUSH
65315: LD_VAR 0 2
65319: NOT
65320: OR
65321: IFFALSE 65325
// exit ;
65323: GO 65420
// result := [ ] ;
65325: LD_ADDR_VAR 0 3
65329: PUSH
65330: EMPTY
65331: ST_TO_ADDR
// for un in units do
65332: LD_ADDR_VAR 0 4
65336: PUSH
65337: LD_VAR 0 1
65341: PUSH
65342: FOR_IN
65343: IFFALSE 65418
// if GetClass ( un ) = class then
65345: LD_VAR 0 4
65349: PPUSH
65350: CALL_OW 257
65354: PUSH
65355: LD_VAR 0 2
65359: EQUAL
65360: IFFALSE 65387
// result := Insert ( result , 1 , un ) else
65362: LD_ADDR_VAR 0 3
65366: PUSH
65367: LD_VAR 0 3
65371: PPUSH
65372: LD_INT 1
65374: PPUSH
65375: LD_VAR 0 4
65379: PPUSH
65380: CALL_OW 2
65384: ST_TO_ADDR
65385: GO 65416
// result := Replace ( result , result + 1 , un ) ;
65387: LD_ADDR_VAR 0 3
65391: PUSH
65392: LD_VAR 0 3
65396: PPUSH
65397: LD_VAR 0 3
65401: PUSH
65402: LD_INT 1
65404: PLUS
65405: PPUSH
65406: LD_VAR 0 4
65410: PPUSH
65411: CALL_OW 1
65415: ST_TO_ADDR
65416: GO 65342
65418: POP
65419: POP
// end ;
65420: LD_VAR 0 3
65424: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65425: LD_INT 0
65427: PPUSH
65428: PPUSH
65429: PPUSH
65430: PPUSH
65431: PPUSH
65432: PPUSH
65433: PPUSH
// result := [ ] ;
65434: LD_ADDR_VAR 0 4
65438: PUSH
65439: EMPTY
65440: ST_TO_ADDR
// if x - r < 0 then
65441: LD_VAR 0 1
65445: PUSH
65446: LD_VAR 0 3
65450: MINUS
65451: PUSH
65452: LD_INT 0
65454: LESS
65455: IFFALSE 65467
// min_x := 0 else
65457: LD_ADDR_VAR 0 8
65461: PUSH
65462: LD_INT 0
65464: ST_TO_ADDR
65465: GO 65483
// min_x := x - r ;
65467: LD_ADDR_VAR 0 8
65471: PUSH
65472: LD_VAR 0 1
65476: PUSH
65477: LD_VAR 0 3
65481: MINUS
65482: ST_TO_ADDR
// if y - r < 0 then
65483: LD_VAR 0 2
65487: PUSH
65488: LD_VAR 0 3
65492: MINUS
65493: PUSH
65494: LD_INT 0
65496: LESS
65497: IFFALSE 65509
// min_y := 0 else
65499: LD_ADDR_VAR 0 7
65503: PUSH
65504: LD_INT 0
65506: ST_TO_ADDR
65507: GO 65525
// min_y := y - r ;
65509: LD_ADDR_VAR 0 7
65513: PUSH
65514: LD_VAR 0 2
65518: PUSH
65519: LD_VAR 0 3
65523: MINUS
65524: ST_TO_ADDR
// max_x := x + r ;
65525: LD_ADDR_VAR 0 9
65529: PUSH
65530: LD_VAR 0 1
65534: PUSH
65535: LD_VAR 0 3
65539: PLUS
65540: ST_TO_ADDR
// max_y := y + r ;
65541: LD_ADDR_VAR 0 10
65545: PUSH
65546: LD_VAR 0 2
65550: PUSH
65551: LD_VAR 0 3
65555: PLUS
65556: ST_TO_ADDR
// for _x = min_x to max_x do
65557: LD_ADDR_VAR 0 5
65561: PUSH
65562: DOUBLE
65563: LD_VAR 0 8
65567: DEC
65568: ST_TO_ADDR
65569: LD_VAR 0 9
65573: PUSH
65574: FOR_TO
65575: IFFALSE 65676
// for _y = min_y to max_y do
65577: LD_ADDR_VAR 0 6
65581: PUSH
65582: DOUBLE
65583: LD_VAR 0 7
65587: DEC
65588: ST_TO_ADDR
65589: LD_VAR 0 10
65593: PUSH
65594: FOR_TO
65595: IFFALSE 65672
// begin if not ValidHex ( _x , _y ) then
65597: LD_VAR 0 5
65601: PPUSH
65602: LD_VAR 0 6
65606: PPUSH
65607: CALL_OW 488
65611: NOT
65612: IFFALSE 65616
// continue ;
65614: GO 65594
// if GetResourceTypeXY ( _x , _y ) then
65616: LD_VAR 0 5
65620: PPUSH
65621: LD_VAR 0 6
65625: PPUSH
65626: CALL_OW 283
65630: IFFALSE 65670
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65632: LD_ADDR_VAR 0 4
65636: PUSH
65637: LD_VAR 0 4
65641: PPUSH
65642: LD_VAR 0 4
65646: PUSH
65647: LD_INT 1
65649: PLUS
65650: PPUSH
65651: LD_VAR 0 5
65655: PUSH
65656: LD_VAR 0 6
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PPUSH
65665: CALL_OW 1
65669: ST_TO_ADDR
// end ;
65670: GO 65594
65672: POP
65673: POP
65674: GO 65574
65676: POP
65677: POP
// end ;
65678: LD_VAR 0 4
65682: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65683: LD_INT 0
65685: PPUSH
65686: PPUSH
65687: PPUSH
65688: PPUSH
65689: PPUSH
65690: PPUSH
65691: PPUSH
65692: PPUSH
// if not units then
65693: LD_VAR 0 1
65697: NOT
65698: IFFALSE 65702
// exit ;
65700: GO 66230
// result := UnitFilter ( units , [ f_ok ] ) ;
65702: LD_ADDR_VAR 0 3
65706: PUSH
65707: LD_VAR 0 1
65711: PPUSH
65712: LD_INT 50
65714: PUSH
65715: EMPTY
65716: LIST
65717: PPUSH
65718: CALL_OW 72
65722: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65723: LD_ADDR_VAR 0 8
65727: PUSH
65728: LD_VAR 0 1
65732: PUSH
65733: LD_INT 1
65735: ARRAY
65736: PPUSH
65737: CALL_OW 255
65741: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65742: LD_ADDR_VAR 0 10
65746: PUSH
65747: LD_INT 29
65749: PUSH
65750: LD_INT 91
65752: PUSH
65753: LD_INT 49
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: ST_TO_ADDR
// if not result then
65761: LD_VAR 0 3
65765: NOT
65766: IFFALSE 65770
// exit ;
65768: GO 66230
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65770: LD_ADDR_VAR 0 5
65774: PUSH
65775: LD_INT 81
65777: PUSH
65778: LD_VAR 0 8
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PPUSH
65787: CALL_OW 69
65791: ST_TO_ADDR
// for i in result do
65792: LD_ADDR_VAR 0 4
65796: PUSH
65797: LD_VAR 0 3
65801: PUSH
65802: FOR_IN
65803: IFFALSE 66228
// begin tag := GetTag ( i ) + 1 ;
65805: LD_ADDR_VAR 0 9
65809: PUSH
65810: LD_VAR 0 4
65814: PPUSH
65815: CALL_OW 110
65819: PUSH
65820: LD_INT 1
65822: PLUS
65823: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
65824: LD_ADDR_VAR 0 7
65828: PUSH
65829: LD_VAR 0 4
65833: PPUSH
65834: CALL_OW 250
65838: PPUSH
65839: LD_VAR 0 4
65843: PPUSH
65844: CALL_OW 251
65848: PPUSH
65849: LD_INT 4
65851: PPUSH
65852: CALL 65425 0 3
65856: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65857: LD_VAR 0 4
65861: PPUSH
65862: CALL_OW 247
65866: PUSH
65867: LD_INT 2
65869: EQUAL
65870: PUSH
65871: LD_VAR 0 7
65875: PUSH
65876: LD_INT 2
65878: GREATER
65879: AND
65880: PUSH
65881: LD_VAR 0 4
65885: PPUSH
65886: CALL_OW 264
65890: PUSH
65891: LD_VAR 0 10
65895: IN
65896: NOT
65897: AND
65898: IFFALSE 65937
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65900: LD_VAR 0 4
65904: PPUSH
65905: LD_VAR 0 7
65909: PUSH
65910: LD_INT 1
65912: ARRAY
65913: PUSH
65914: LD_INT 1
65916: ARRAY
65917: PPUSH
65918: LD_VAR 0 7
65922: PUSH
65923: LD_INT 1
65925: ARRAY
65926: PUSH
65927: LD_INT 2
65929: ARRAY
65930: PPUSH
65931: CALL_OW 116
65935: GO 66226
// if path > tag then
65937: LD_VAR 0 2
65941: PUSH
65942: LD_VAR 0 9
65946: GREATER
65947: IFFALSE 66155
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65949: LD_ADDR_VAR 0 6
65953: PUSH
65954: LD_VAR 0 5
65958: PPUSH
65959: LD_INT 91
65961: PUSH
65962: LD_VAR 0 4
65966: PUSH
65967: LD_INT 8
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: PPUSH
65975: CALL_OW 72
65979: ST_TO_ADDR
// if nearEnemy then
65980: LD_VAR 0 6
65984: IFFALSE 66053
// begin if GetWeapon ( i ) = ru_time_lapser then
65986: LD_VAR 0 4
65990: PPUSH
65991: CALL_OW 264
65995: PUSH
65996: LD_INT 49
65998: EQUAL
65999: IFFALSE 66027
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66001: LD_VAR 0 4
66005: PPUSH
66006: LD_VAR 0 6
66010: PPUSH
66011: LD_VAR 0 4
66015: PPUSH
66016: CALL_OW 74
66020: PPUSH
66021: CALL_OW 112
66025: GO 66051
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66027: LD_VAR 0 4
66031: PPUSH
66032: LD_VAR 0 6
66036: PPUSH
66037: LD_VAR 0 4
66041: PPUSH
66042: CALL_OW 74
66046: PPUSH
66047: CALL 67301 0 2
// end else
66051: GO 66153
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66053: LD_VAR 0 4
66057: PPUSH
66058: LD_VAR 0 2
66062: PUSH
66063: LD_VAR 0 9
66067: ARRAY
66068: PUSH
66069: LD_INT 1
66071: ARRAY
66072: PPUSH
66073: LD_VAR 0 2
66077: PUSH
66078: LD_VAR 0 9
66082: ARRAY
66083: PUSH
66084: LD_INT 2
66086: ARRAY
66087: PPUSH
66088: CALL_OW 297
66092: PUSH
66093: LD_INT 6
66095: GREATER
66096: IFFALSE 66139
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66098: LD_VAR 0 4
66102: PPUSH
66103: LD_VAR 0 2
66107: PUSH
66108: LD_VAR 0 9
66112: ARRAY
66113: PUSH
66114: LD_INT 1
66116: ARRAY
66117: PPUSH
66118: LD_VAR 0 2
66122: PUSH
66123: LD_VAR 0 9
66127: ARRAY
66128: PUSH
66129: LD_INT 2
66131: ARRAY
66132: PPUSH
66133: CALL_OW 114
66137: GO 66153
// SetTag ( i , tag ) ;
66139: LD_VAR 0 4
66143: PPUSH
66144: LD_VAR 0 9
66148: PPUSH
66149: CALL_OW 109
// end else
66153: GO 66226
// if enemy then
66155: LD_VAR 0 5
66159: IFFALSE 66226
// begin if GetWeapon ( i ) = ru_time_lapser then
66161: LD_VAR 0 4
66165: PPUSH
66166: CALL_OW 264
66170: PUSH
66171: LD_INT 49
66173: EQUAL
66174: IFFALSE 66202
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66176: LD_VAR 0 4
66180: PPUSH
66181: LD_VAR 0 5
66185: PPUSH
66186: LD_VAR 0 4
66190: PPUSH
66191: CALL_OW 74
66195: PPUSH
66196: CALL_OW 112
66200: GO 66226
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66202: LD_VAR 0 4
66206: PPUSH
66207: LD_VAR 0 5
66211: PPUSH
66212: LD_VAR 0 4
66216: PPUSH
66217: CALL_OW 74
66221: PPUSH
66222: CALL 67301 0 2
// end ; end ;
66226: GO 65802
66228: POP
66229: POP
// end ;
66230: LD_VAR 0 3
66234: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66235: LD_INT 0
66237: PPUSH
66238: PPUSH
66239: PPUSH
// if not unit or IsInUnit ( unit ) then
66240: LD_VAR 0 1
66244: NOT
66245: PUSH
66246: LD_VAR 0 1
66250: PPUSH
66251: CALL_OW 310
66255: OR
66256: IFFALSE 66260
// exit ;
66258: GO 66351
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66260: LD_ADDR_VAR 0 4
66264: PUSH
66265: LD_VAR 0 1
66269: PPUSH
66270: CALL_OW 250
66274: PPUSH
66275: LD_VAR 0 2
66279: PPUSH
66280: LD_INT 1
66282: PPUSH
66283: CALL_OW 272
66287: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66288: LD_ADDR_VAR 0 5
66292: PUSH
66293: LD_VAR 0 1
66297: PPUSH
66298: CALL_OW 251
66302: PPUSH
66303: LD_VAR 0 2
66307: PPUSH
66308: LD_INT 1
66310: PPUSH
66311: CALL_OW 273
66315: ST_TO_ADDR
// if ValidHex ( x , y ) then
66316: LD_VAR 0 4
66320: PPUSH
66321: LD_VAR 0 5
66325: PPUSH
66326: CALL_OW 488
66330: IFFALSE 66351
// ComTurnXY ( unit , x , y ) ;
66332: LD_VAR 0 1
66336: PPUSH
66337: LD_VAR 0 4
66341: PPUSH
66342: LD_VAR 0 5
66346: PPUSH
66347: CALL_OW 118
// end ;
66351: LD_VAR 0 3
66355: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66356: LD_INT 0
66358: PPUSH
66359: PPUSH
// result := false ;
66360: LD_ADDR_VAR 0 3
66364: PUSH
66365: LD_INT 0
66367: ST_TO_ADDR
// if not units then
66368: LD_VAR 0 2
66372: NOT
66373: IFFALSE 66377
// exit ;
66375: GO 66422
// for i in units do
66377: LD_ADDR_VAR 0 4
66381: PUSH
66382: LD_VAR 0 2
66386: PUSH
66387: FOR_IN
66388: IFFALSE 66420
// if See ( side , i ) then
66390: LD_VAR 0 1
66394: PPUSH
66395: LD_VAR 0 4
66399: PPUSH
66400: CALL_OW 292
66404: IFFALSE 66418
// begin result := true ;
66406: LD_ADDR_VAR 0 3
66410: PUSH
66411: LD_INT 1
66413: ST_TO_ADDR
// exit ;
66414: POP
66415: POP
66416: GO 66422
// end ;
66418: GO 66387
66420: POP
66421: POP
// end ;
66422: LD_VAR 0 3
66426: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66427: LD_INT 0
66429: PPUSH
66430: PPUSH
66431: PPUSH
66432: PPUSH
// if not unit or not points then
66433: LD_VAR 0 1
66437: NOT
66438: PUSH
66439: LD_VAR 0 2
66443: NOT
66444: OR
66445: IFFALSE 66449
// exit ;
66447: GO 66539
// dist := 99999 ;
66449: LD_ADDR_VAR 0 5
66453: PUSH
66454: LD_INT 99999
66456: ST_TO_ADDR
// for i in points do
66457: LD_ADDR_VAR 0 4
66461: PUSH
66462: LD_VAR 0 2
66466: PUSH
66467: FOR_IN
66468: IFFALSE 66537
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66470: LD_ADDR_VAR 0 6
66474: PUSH
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 4
66484: PUSH
66485: LD_INT 1
66487: ARRAY
66488: PPUSH
66489: LD_VAR 0 4
66493: PUSH
66494: LD_INT 2
66496: ARRAY
66497: PPUSH
66498: CALL_OW 297
66502: ST_TO_ADDR
// if tmpDist < dist then
66503: LD_VAR 0 6
66507: PUSH
66508: LD_VAR 0 5
66512: LESS
66513: IFFALSE 66535
// begin result := i ;
66515: LD_ADDR_VAR 0 3
66519: PUSH
66520: LD_VAR 0 4
66524: ST_TO_ADDR
// dist := tmpDist ;
66525: LD_ADDR_VAR 0 5
66529: PUSH
66530: LD_VAR 0 6
66534: ST_TO_ADDR
// end ; end ;
66535: GO 66467
66537: POP
66538: POP
// end ;
66539: LD_VAR 0 3
66543: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66544: LD_INT 0
66546: PPUSH
// uc_side := side ;
66547: LD_ADDR_OWVAR 20
66551: PUSH
66552: LD_VAR 0 1
66556: ST_TO_ADDR
// uc_nation := 3 ;
66557: LD_ADDR_OWVAR 21
66561: PUSH
66562: LD_INT 3
66564: ST_TO_ADDR
// vc_chassis := 25 ;
66565: LD_ADDR_OWVAR 37
66569: PUSH
66570: LD_INT 25
66572: ST_TO_ADDR
// vc_engine := engine_siberite ;
66573: LD_ADDR_OWVAR 39
66577: PUSH
66578: LD_INT 3
66580: ST_TO_ADDR
// vc_control := control_computer ;
66581: LD_ADDR_OWVAR 38
66585: PUSH
66586: LD_INT 3
66588: ST_TO_ADDR
// vc_weapon := 59 ;
66589: LD_ADDR_OWVAR 40
66593: PUSH
66594: LD_INT 59
66596: ST_TO_ADDR
// result := CreateVehicle ;
66597: LD_ADDR_VAR 0 5
66601: PUSH
66602: CALL_OW 45
66606: ST_TO_ADDR
// SetDir ( result , d ) ;
66607: LD_VAR 0 5
66611: PPUSH
66612: LD_VAR 0 4
66616: PPUSH
66617: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66621: LD_VAR 0 5
66625: PPUSH
66626: LD_VAR 0 2
66630: PPUSH
66631: LD_VAR 0 3
66635: PPUSH
66636: LD_INT 0
66638: PPUSH
66639: CALL_OW 48
// end ;
66643: LD_VAR 0 5
66647: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66648: LD_INT 0
66650: PPUSH
66651: PPUSH
66652: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66653: LD_ADDR_VAR 0 2
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66676: LD_VAR 0 1
66680: NOT
66681: PUSH
66682: LD_VAR 0 1
66686: PPUSH
66687: CALL_OW 264
66691: PUSH
66692: LD_INT 12
66694: PUSH
66695: LD_INT 51
66697: PUSH
66698: LD_INT 32
66700: PUSH
66701: LD_INT 89
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: IN
66710: NOT
66711: OR
66712: IFFALSE 66716
// exit ;
66714: GO 66814
// for i := 1 to 3 do
66716: LD_ADDR_VAR 0 3
66720: PUSH
66721: DOUBLE
66722: LD_INT 1
66724: DEC
66725: ST_TO_ADDR
66726: LD_INT 3
66728: PUSH
66729: FOR_TO
66730: IFFALSE 66812
// begin tmp := GetCargo ( cargo , i ) ;
66732: LD_ADDR_VAR 0 4
66736: PUSH
66737: LD_VAR 0 1
66741: PPUSH
66742: LD_VAR 0 3
66746: PPUSH
66747: CALL_OW 289
66751: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66752: LD_ADDR_VAR 0 2
66756: PUSH
66757: LD_VAR 0 2
66761: PPUSH
66762: LD_VAR 0 3
66766: PPUSH
66767: LD_VAR 0 4
66771: PPUSH
66772: CALL_OW 1
66776: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66777: LD_ADDR_VAR 0 2
66781: PUSH
66782: LD_VAR 0 2
66786: PPUSH
66787: LD_INT 4
66789: PPUSH
66790: LD_VAR 0 2
66794: PUSH
66795: LD_INT 4
66797: ARRAY
66798: PUSH
66799: LD_VAR 0 4
66803: PLUS
66804: PPUSH
66805: CALL_OW 1
66809: ST_TO_ADDR
// end ;
66810: GO 66729
66812: POP
66813: POP
// end ;
66814: LD_VAR 0 2
66818: RET
// export function Length ( array ) ; begin
66819: LD_INT 0
66821: PPUSH
// result := array + 0 ;
66822: LD_ADDR_VAR 0 2
66826: PUSH
66827: LD_VAR 0 1
66831: PUSH
66832: LD_INT 0
66834: PLUS
66835: ST_TO_ADDR
// end ;
66836: LD_VAR 0 2
66840: RET
// export function PrepareArray ( array ) ; begin
66841: LD_INT 0
66843: PPUSH
// result := array diff 0 ;
66844: LD_ADDR_VAR 0 2
66848: PUSH
66849: LD_VAR 0 1
66853: PUSH
66854: LD_INT 0
66856: DIFF
66857: ST_TO_ADDR
// if not result [ 1 ] then
66858: LD_VAR 0 2
66862: PUSH
66863: LD_INT 1
66865: ARRAY
66866: NOT
66867: IFFALSE 66887
// result := Delete ( result , 1 ) ;
66869: LD_ADDR_VAR 0 2
66873: PUSH
66874: LD_VAR 0 2
66878: PPUSH
66879: LD_INT 1
66881: PPUSH
66882: CALL_OW 3
66886: ST_TO_ADDR
// end ;
66887: LD_VAR 0 2
66891: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66892: LD_INT 0
66894: PPUSH
66895: PPUSH
66896: PPUSH
66897: PPUSH
// sibRocketRange := 25 ;
66898: LD_ADDR_VAR 0 6
66902: PUSH
66903: LD_INT 25
66905: ST_TO_ADDR
// result := false ;
66906: LD_ADDR_VAR 0 4
66910: PUSH
66911: LD_INT 0
66913: ST_TO_ADDR
// for i := 0 to 5 do
66914: LD_ADDR_VAR 0 5
66918: PUSH
66919: DOUBLE
66920: LD_INT 0
66922: DEC
66923: ST_TO_ADDR
66924: LD_INT 5
66926: PUSH
66927: FOR_TO
66928: IFFALSE 66995
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66930: LD_VAR 0 1
66934: PPUSH
66935: LD_VAR 0 5
66939: PPUSH
66940: LD_VAR 0 6
66944: PPUSH
66945: CALL_OW 272
66949: PPUSH
66950: LD_VAR 0 2
66954: PPUSH
66955: LD_VAR 0 5
66959: PPUSH
66960: LD_VAR 0 6
66964: PPUSH
66965: CALL_OW 273
66969: PPUSH
66970: LD_VAR 0 3
66974: PPUSH
66975: CALL_OW 309
66979: IFFALSE 66993
// begin result := true ;
66981: LD_ADDR_VAR 0 4
66985: PUSH
66986: LD_INT 1
66988: ST_TO_ADDR
// exit ;
66989: POP
66990: POP
66991: GO 66997
// end ;
66993: GO 66927
66995: POP
66996: POP
// end ;
66997: LD_VAR 0 4
67001: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
67002: LD_INT 0
67004: PPUSH
67005: PPUSH
67006: PPUSH
// if btype = b_depot then
67007: LD_VAR 0 2
67011: PUSH
67012: LD_INT 0
67014: EQUAL
67015: IFFALSE 67027
// begin result := true ;
67017: LD_ADDR_VAR 0 3
67021: PUSH
67022: LD_INT 1
67024: ST_TO_ADDR
// exit ;
67025: GO 67143
// end ; pom := GetBase ( depot ) ;
67027: LD_ADDR_VAR 0 4
67031: PUSH
67032: LD_VAR 0 1
67036: PPUSH
67037: CALL_OW 274
67041: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
67042: LD_ADDR_VAR 0 5
67046: PUSH
67047: LD_VAR 0 2
67051: PPUSH
67052: LD_VAR 0 1
67056: PPUSH
67057: CALL_OW 248
67061: PPUSH
67062: CALL_OW 450
67066: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
67067: LD_ADDR_VAR 0 3
67071: PUSH
67072: LD_VAR 0 4
67076: PPUSH
67077: LD_INT 1
67079: PPUSH
67080: CALL_OW 275
67084: PUSH
67085: LD_VAR 0 5
67089: PUSH
67090: LD_INT 1
67092: ARRAY
67093: GREATEREQUAL
67094: PUSH
67095: LD_VAR 0 4
67099: PPUSH
67100: LD_INT 2
67102: PPUSH
67103: CALL_OW 275
67107: PUSH
67108: LD_VAR 0 5
67112: PUSH
67113: LD_INT 2
67115: ARRAY
67116: GREATEREQUAL
67117: AND
67118: PUSH
67119: LD_VAR 0 4
67123: PPUSH
67124: LD_INT 3
67126: PPUSH
67127: CALL_OW 275
67131: PUSH
67132: LD_VAR 0 5
67136: PUSH
67137: LD_INT 3
67139: ARRAY
67140: GREATEREQUAL
67141: AND
67142: ST_TO_ADDR
// end ;
67143: LD_VAR 0 3
67147: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67148: LD_INT 0
67150: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67151: LD_VAR 0 1
67155: PPUSH
67156: LD_VAR 0 2
67160: PPUSH
67161: LD_INT 0
67163: PPUSH
67164: LD_INT 0
67166: PPUSH
67167: LD_INT 1
67169: PPUSH
67170: LD_INT 0
67172: PPUSH
67173: CALL_OW 587
// end ;
67177: LD_VAR 0 3
67181: RET
// export function CenterOnNow ( unit ) ; begin
67182: LD_INT 0
67184: PPUSH
// result := IsInUnit ( unit ) ;
67185: LD_ADDR_VAR 0 2
67189: PUSH
67190: LD_VAR 0 1
67194: PPUSH
67195: CALL_OW 310
67199: ST_TO_ADDR
// if not result then
67200: LD_VAR 0 2
67204: NOT
67205: IFFALSE 67217
// result := unit ;
67207: LD_ADDR_VAR 0 2
67211: PUSH
67212: LD_VAR 0 1
67216: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67217: LD_VAR 0 1
67221: PPUSH
67222: CALL_OW 87
// end ;
67226: LD_VAR 0 2
67230: RET
// export function ComMoveHex ( unit , hex ) ; begin
67231: LD_INT 0
67233: PPUSH
// if not hex then
67234: LD_VAR 0 2
67238: NOT
67239: IFFALSE 67243
// exit ;
67241: GO 67296
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67243: LD_VAR 0 2
67247: PUSH
67248: LD_INT 1
67250: ARRAY
67251: PPUSH
67252: LD_VAR 0 2
67256: PUSH
67257: LD_INT 2
67259: ARRAY
67260: PPUSH
67261: CALL_OW 428
67265: IFFALSE 67269
// exit ;
67267: GO 67296
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67269: LD_VAR 0 1
67273: PPUSH
67274: LD_VAR 0 2
67278: PUSH
67279: LD_INT 1
67281: ARRAY
67282: PPUSH
67283: LD_VAR 0 2
67287: PUSH
67288: LD_INT 2
67290: ARRAY
67291: PPUSH
67292: CALL_OW 111
// end ;
67296: LD_VAR 0 3
67300: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67301: LD_INT 0
67303: PPUSH
67304: PPUSH
67305: PPUSH
// if not unit or not enemy then
67306: LD_VAR 0 1
67310: NOT
67311: PUSH
67312: LD_VAR 0 2
67316: NOT
67317: OR
67318: IFFALSE 67322
// exit ;
67320: GO 67446
// x := GetX ( enemy ) ;
67322: LD_ADDR_VAR 0 4
67326: PUSH
67327: LD_VAR 0 2
67331: PPUSH
67332: CALL_OW 250
67336: ST_TO_ADDR
// y := GetY ( enemy ) ;
67337: LD_ADDR_VAR 0 5
67341: PUSH
67342: LD_VAR 0 2
67346: PPUSH
67347: CALL_OW 251
67351: ST_TO_ADDR
// if ValidHex ( x , y ) then
67352: LD_VAR 0 4
67356: PPUSH
67357: LD_VAR 0 5
67361: PPUSH
67362: CALL_OW 488
67366: IFFALSE 67446
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
67368: LD_VAR 0 2
67372: PPUSH
67373: CALL_OW 247
67377: PUSH
67378: LD_INT 3
67380: PUSH
67381: LD_INT 2
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: IN
67388: PUSH
67389: LD_VAR 0 1
67393: PPUSH
67394: CALL_OW 255
67398: PPUSH
67399: LD_VAR 0 2
67403: PPUSH
67404: CALL_OW 292
67408: OR
67409: IFFALSE 67427
// ComAttackUnit ( unit , enemy ) else
67411: LD_VAR 0 1
67415: PPUSH
67416: LD_VAR 0 2
67420: PPUSH
67421: CALL_OW 115
67425: GO 67446
// ComAgressiveMove ( unit , x , y ) ;
67427: LD_VAR 0 1
67431: PPUSH
67432: LD_VAR 0 4
67436: PPUSH
67437: LD_VAR 0 5
67441: PPUSH
67442: CALL_OW 114
// end ;
67446: LD_VAR 0 3
67450: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67451: LD_INT 0
67453: PPUSH
67454: PPUSH
67455: PPUSH
// list := AreaToList ( area , 0 ) ;
67456: LD_ADDR_VAR 0 5
67460: PUSH
67461: LD_VAR 0 1
67465: PPUSH
67466: LD_INT 0
67468: PPUSH
67469: CALL_OW 517
67473: ST_TO_ADDR
// if not list then
67474: LD_VAR 0 5
67478: NOT
67479: IFFALSE 67483
// exit ;
67481: GO 67613
// if all then
67483: LD_VAR 0 2
67487: IFFALSE 67575
// begin for i := 1 to list [ 1 ] do
67489: LD_ADDR_VAR 0 4
67493: PUSH
67494: DOUBLE
67495: LD_INT 1
67497: DEC
67498: ST_TO_ADDR
67499: LD_VAR 0 5
67503: PUSH
67504: LD_INT 1
67506: ARRAY
67507: PUSH
67508: FOR_TO
67509: IFFALSE 67571
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67511: LD_ADDR_VAR 0 3
67515: PUSH
67516: LD_VAR 0 3
67520: PPUSH
67521: LD_VAR 0 3
67525: PUSH
67526: LD_INT 1
67528: PLUS
67529: PPUSH
67530: LD_VAR 0 5
67534: PUSH
67535: LD_INT 1
67537: ARRAY
67538: PUSH
67539: LD_VAR 0 4
67543: ARRAY
67544: PUSH
67545: LD_VAR 0 5
67549: PUSH
67550: LD_INT 2
67552: ARRAY
67553: PUSH
67554: LD_VAR 0 4
67558: ARRAY
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PPUSH
67564: CALL_OW 1
67568: ST_TO_ADDR
67569: GO 67508
67571: POP
67572: POP
// exit ;
67573: GO 67613
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67575: LD_ADDR_VAR 0 3
67579: PUSH
67580: LD_VAR 0 5
67584: PUSH
67585: LD_INT 1
67587: ARRAY
67588: PUSH
67589: LD_INT 1
67591: ARRAY
67592: PUSH
67593: LD_VAR 0 5
67597: PUSH
67598: LD_INT 2
67600: ARRAY
67601: PUSH
67602: LD_INT 1
67604: ARRAY
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: ST_TO_ADDR
// end ;
67613: LD_VAR 0 3
67617: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67618: LD_INT 0
67620: PPUSH
67621: PPUSH
// list := AreaToList ( area , 0 ) ;
67622: LD_ADDR_VAR 0 4
67626: PUSH
67627: LD_VAR 0 1
67631: PPUSH
67632: LD_INT 0
67634: PPUSH
67635: CALL_OW 517
67639: ST_TO_ADDR
// if not list then
67640: LD_VAR 0 4
67644: NOT
67645: IFFALSE 67649
// exit ;
67647: GO 67690
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67649: LD_ADDR_VAR 0 3
67653: PUSH
67654: LD_VAR 0 4
67658: PUSH
67659: LD_INT 1
67661: ARRAY
67662: PUSH
67663: LD_INT 1
67665: ARRAY
67666: PUSH
67667: LD_VAR 0 4
67671: PUSH
67672: LD_INT 2
67674: ARRAY
67675: PUSH
67676: LD_INT 1
67678: ARRAY
67679: PUSH
67680: LD_VAR 0 2
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: ST_TO_ADDR
// end ;
67690: LD_VAR 0 3
67694: RET
// export function First ( array ) ; begin
67695: LD_INT 0
67697: PPUSH
// if not array then
67698: LD_VAR 0 1
67702: NOT
67703: IFFALSE 67707
// exit ;
67705: GO 67721
// result := array [ 1 ] ;
67707: LD_ADDR_VAR 0 2
67711: PUSH
67712: LD_VAR 0 1
67716: PUSH
67717: LD_INT 1
67719: ARRAY
67720: ST_TO_ADDR
// end ;
67721: LD_VAR 0 2
67725: RET
// export function Last ( array ) ; begin
67726: LD_INT 0
67728: PPUSH
// if not array then
67729: LD_VAR 0 1
67733: NOT
67734: IFFALSE 67738
// exit ;
67736: GO 67754
// result := array [ array ] ;
67738: LD_ADDR_VAR 0 2
67742: PUSH
67743: LD_VAR 0 1
67747: PUSH
67748: LD_VAR 0 1
67752: ARRAY
67753: ST_TO_ADDR
// end ;
67754: LD_VAR 0 2
67758: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67759: LD_INT 0
67761: PPUSH
67762: PPUSH
// result := [ ] ;
67763: LD_ADDR_VAR 0 5
67767: PUSH
67768: EMPTY
67769: ST_TO_ADDR
// if not array then
67770: LD_VAR 0 1
67774: NOT
67775: IFFALSE 67779
// exit ;
67777: GO 67891
// for i := 1 to array do
67779: LD_ADDR_VAR 0 6
67783: PUSH
67784: DOUBLE
67785: LD_INT 1
67787: DEC
67788: ST_TO_ADDR
67789: LD_VAR 0 1
67793: PUSH
67794: FOR_TO
67795: IFFALSE 67889
// if array [ i ] [ index ] = value then
67797: LD_VAR 0 1
67801: PUSH
67802: LD_VAR 0 6
67806: ARRAY
67807: PUSH
67808: LD_VAR 0 2
67812: ARRAY
67813: PUSH
67814: LD_VAR 0 3
67818: EQUAL
67819: IFFALSE 67887
// begin if indexColumn then
67821: LD_VAR 0 4
67825: IFFALSE 67861
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67827: LD_ADDR_VAR 0 5
67831: PUSH
67832: LD_VAR 0 5
67836: PPUSH
67837: LD_VAR 0 1
67841: PUSH
67842: LD_VAR 0 6
67846: ARRAY
67847: PUSH
67848: LD_VAR 0 4
67852: ARRAY
67853: PPUSH
67854: CALL 63079 0 2
67858: ST_TO_ADDR
67859: GO 67887
// result := Join ( result , array [ i ] ) ;
67861: LD_ADDR_VAR 0 5
67865: PUSH
67866: LD_VAR 0 5
67870: PPUSH
67871: LD_VAR 0 1
67875: PUSH
67876: LD_VAR 0 6
67880: ARRAY
67881: PPUSH
67882: CALL 63079 0 2
67886: ST_TO_ADDR
// end ;
67887: GO 67794
67889: POP
67890: POP
// end ;
67891: LD_VAR 0 5
67895: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67896: LD_INT 0
67898: PPUSH
// if not vehicles or not parkingPoint then
67899: LD_VAR 0 1
67903: NOT
67904: PUSH
67905: LD_VAR 0 2
67909: NOT
67910: OR
67911: IFFALSE 67915
// exit ;
67913: GO 68013
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67915: LD_ADDR_VAR 0 1
67919: PUSH
67920: LD_VAR 0 1
67924: PPUSH
67925: LD_INT 50
67927: PUSH
67928: EMPTY
67929: LIST
67930: PUSH
67931: LD_INT 3
67933: PUSH
67934: LD_INT 92
67936: PUSH
67937: LD_VAR 0 2
67941: PUSH
67942: LD_INT 1
67944: ARRAY
67945: PUSH
67946: LD_VAR 0 2
67950: PUSH
67951: LD_INT 2
67953: ARRAY
67954: PUSH
67955: LD_INT 8
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PPUSH
67972: CALL_OW 72
67976: ST_TO_ADDR
// if not vehicles then
67977: LD_VAR 0 1
67981: NOT
67982: IFFALSE 67986
// exit ;
67984: GO 68013
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67986: LD_VAR 0 1
67990: PPUSH
67991: LD_VAR 0 2
67995: PUSH
67996: LD_INT 1
67998: ARRAY
67999: PPUSH
68000: LD_VAR 0 2
68004: PUSH
68005: LD_INT 2
68007: ARRAY
68008: PPUSH
68009: CALL_OW 111
// end ;
68013: LD_VAR 0 3
68017: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
68018: LD_INT 0
68020: PPUSH
68021: PPUSH
68022: PPUSH
// if not side or not area then
68023: LD_VAR 0 1
68027: NOT
68028: PUSH
68029: LD_VAR 0 2
68033: NOT
68034: OR
68035: IFFALSE 68039
// exit ;
68037: GO 68158
// tmp := AreaToList ( area , 0 ) ;
68039: LD_ADDR_VAR 0 5
68043: PUSH
68044: LD_VAR 0 2
68048: PPUSH
68049: LD_INT 0
68051: PPUSH
68052: CALL_OW 517
68056: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
68057: LD_ADDR_VAR 0 4
68061: PUSH
68062: DOUBLE
68063: LD_INT 1
68065: DEC
68066: ST_TO_ADDR
68067: LD_VAR 0 5
68071: PUSH
68072: LD_INT 1
68074: ARRAY
68075: PUSH
68076: FOR_TO
68077: IFFALSE 68156
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
68079: LD_VAR 0 5
68083: PUSH
68084: LD_INT 1
68086: ARRAY
68087: PUSH
68088: LD_VAR 0 4
68092: ARRAY
68093: PPUSH
68094: LD_VAR 0 5
68098: PUSH
68099: LD_INT 2
68101: ARRAY
68102: PUSH
68103: LD_VAR 0 4
68107: ARRAY
68108: PPUSH
68109: CALL_OW 351
68113: IFFALSE 68154
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
68115: LD_VAR 0 5
68119: PUSH
68120: LD_INT 1
68122: ARRAY
68123: PUSH
68124: LD_VAR 0 4
68128: ARRAY
68129: PPUSH
68130: LD_VAR 0 5
68134: PUSH
68135: LD_INT 2
68137: ARRAY
68138: PUSH
68139: LD_VAR 0 4
68143: ARRAY
68144: PPUSH
68145: LD_VAR 0 1
68149: PPUSH
68150: CALL_OW 244
// end ;
68154: GO 68076
68156: POP
68157: POP
// end ; end_of_file
68158: LD_VAR 0 3
68162: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68163: LD_VAR 0 1
68167: PPUSH
68168: LD_VAR 0 2
68172: PPUSH
68173: LD_VAR 0 3
68177: PPUSH
68178: LD_VAR 0 4
68182: PPUSH
68183: LD_VAR 0 5
68187: PPUSH
68188: LD_VAR 0 6
68192: PPUSH
68193: CALL 4288 0 6
// end ;
68197: PPOPN 6
68199: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68200: LD_INT 0
68202: PPUSH
// begin if not units then
68203: LD_VAR 0 1
68207: NOT
68208: IFFALSE 68212
// exit ;
68210: GO 68212
// end ;
68212: PPOPN 7
68214: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68215: CALL 4175 0 0
// end ;
68219: PPOPN 1
68221: END
