// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 94 0 0
// PrepareAlliance ;
  30: CALL 637 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3429 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 17508 0 1
// end ; end_of_file
  91: PPOPN 1
  93: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 101: LD_ADDR_VAR 0 3
 105: PUSH
 106: LD_STRING 13a_buildings
 108: PPUSH
 109: LD_INT 7
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: LD_INT 1
 117: PUSH
 118: LD_INT 70
 120: PUSH
 121: LD_INT 46
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 10
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: PPUSH
 154: CALL_OW 30
 158: ST_TO_ADDR
// bc_kind1 := - 1 ;
 159: LD_ADDR_OWVAR 44
 163: PUSH
 164: LD_INT 1
 166: NEG
 167: ST_TO_ADDR
// bc_kind2 := - 1 ;
 168: LD_ADDR_OWVAR 45
 172: PUSH
 173: LD_INT 1
 175: NEG
 176: ST_TO_ADDR
// for i in tmp do
 177: LD_ADDR_VAR 0 2
 181: PUSH
 182: LD_VAR 0 3
 186: PUSH
 187: FOR_IN
 188: IFFALSE 433
// begin uc_side := 7 ;
 190: LD_ADDR_OWVAR 20
 194: PUSH
 195: LD_INT 7
 197: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 198: LD_ADDR_OWVAR 21
 202: PUSH
 203: LD_VAR 0 2
 207: PUSH
 208: LD_INT 2
 210: ARRAY
 211: ST_TO_ADDR
// if i [ 2 ] = 2 then
 212: LD_VAR 0 2
 216: PUSH
 217: LD_INT 2
 219: ARRAY
 220: PUSH
 221: LD_INT 2
 223: EQUAL
 224: IFFALSE 234
// uc_side := 4 ;
 226: LD_ADDR_OWVAR 20
 230: PUSH
 231: LD_INT 4
 233: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 234: LD_ADDR_OWVAR 42
 238: PUSH
 239: LD_VAR 0 2
 243: PUSH
 244: LD_INT 3
 246: ARRAY
 247: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 248: LD_VAR 0 2
 252: PUSH
 253: LD_INT 3
 255: ARRAY
 256: PUSH
 257: LD_INT 29
 259: PUSH
 260: LD_INT 30
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: IN
 267: IFFALSE 300
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 269: LD_VAR 0 2
 273: PUSH
 274: LD_INT 4
 276: ARRAY
 277: PPUSH
 278: LD_VAR 0 2
 282: PUSH
 283: LD_INT 5
 285: ARRAY
 286: PPUSH
 287: LD_VAR 0 2
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PPUSH
 296: CALL_OW 441
// if i [ 8 ] then
 300: LD_VAR 0 2
 304: PUSH
 305: LD_INT 8
 307: ARRAY
 308: IFFALSE 324
// bc_kind1 := i [ 8 ] ;
 310: LD_ADDR_OWVAR 44
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_INT 8
 322: ARRAY
 323: ST_TO_ADDR
// if i [ 9 ] then
 324: LD_VAR 0 2
 328: PUSH
 329: LD_INT 9
 331: ARRAY
 332: IFFALSE 348
// bc_kind2 := i [ 9 ] ;
 334: LD_ADDR_OWVAR 45
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 9
 346: ARRAY
 347: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 348: LD_ADDR_VAR 0 4
 352: PUSH
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 4
 360: ARRAY
 361: PPUSH
 362: LD_VAR 0 2
 366: PUSH
 367: LD_INT 5
 369: ARRAY
 370: PPUSH
 371: LD_VAR 0 2
 375: PUSH
 376: LD_INT 6
 378: ARRAY
 379: PPUSH
 380: CALL_OW 47
 384: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_VAR 0 2
 394: PUSH
 395: LD_INT 7
 397: ARRAY
 398: PPUSH
 399: CALL_OW 241
// if i [ 10 ] then
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 10
 410: ARRAY
 411: IFFALSE 431
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 413: LD_VAR 0 4
 417: PPUSH
 418: LD_VAR 0 2
 422: PUSH
 423: LD_INT 10
 425: ARRAY
 426: PPUSH
 427: CALL_OW 431
// end ;
 431: GO 187
 433: POP
 434: POP
// if HexInfo ( 144 , 65 ) = 0 then
 435: LD_INT 144
 437: PPUSH
 438: LD_INT 65
 440: PPUSH
 441: CALL_OW 428
 445: PUSH
 446: LD_INT 0
 448: EQUAL
 449: IFFALSE 486
// begin uc_side := 4 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 4
 458: ST_TO_ADDR
// bc_type := b_warehouse ;
 459: LD_ADDR_OWVAR 42
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: LD_INT 144
 474: PPUSH
 475: LD_INT 65
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 47
 485: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 486: LD_ADDR_VAR 0 2
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 2
 503: PUSH
 504: LD_INT 30
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 30
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PPUSH
 533: CALL_OW 69
 537: PUSH
 538: FOR_IN
 539: IFFALSE 591
// for j = 1 to 3 do
 541: LD_ADDR_VAR 0 5
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 587
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 557: LD_VAR 0 2
 561: PPUSH
 562: CALL_OW 274
 566: PPUSH
 567: LD_VAR 0 5
 571: PPUSH
 572: LD_INT 3000
 574: PUSH
 575: LD_VAR 0 5
 579: DIVREAL
 580: PPUSH
 581: CALL_OW 277
 585: GO 554
 587: POP
 588: POP
 589: GO 538
 591: POP
 592: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_INT 3
 600: PPUSH
 601: LD_INT 22
 603: PUSH
 604: LD_INT 7
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PPUSH
 611: CALL_OW 70
 615: PUSH
 616: FOR_IN
 617: IFFALSE 630
// RemoveUnit ( i ) ;
 619: LD_VAR 0 2
 623: PPUSH
 624: CALL_OW 64
 628: GO 616
 630: POP
 631: POP
// end ; end_of_file
 632: LD_VAR 0 1
 636: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
 641: PPUSH
 642: PPUSH
// uc_side := 7 ;
 643: LD_ADDR_OWVAR 20
 647: PUSH
 648: LD_INT 7
 650: ST_TO_ADDR
// uc_nation := 1 ;
 651: LD_ADDR_OWVAR 21
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 659: LD_ADDR_EXP 2
 663: PUSH
 664: LD_STRING JMM
 666: PPUSH
 667: LD_EXP 1
 671: NOT
 672: PPUSH
 673: LD_STRING 13a_
 675: PPUSH
 676: CALL 21391 0 3
 680: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 681: LD_ADDR_EXP 3
 685: PUSH
 686: LD_STRING Burlak
 688: PPUSH
 689: LD_EXP 1
 693: NOT
 694: PPUSH
 695: LD_STRING 13a_
 697: PPUSH
 698: CALL 21391 0 3
 702: ST_TO_ADDR
// if debug then
 703: LD_EXP 1
 707: IFFALSE 742
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 709: LD_INT 1
 711: PPUSH
 712: LD_INT 4
 714: PPUSH
 715: LD_INT 10
 717: PPUSH
 718: CALL_OW 380
// JMM := CreateHuman ;
 722: LD_ADDR_EXP 2
 726: PUSH
 727: CALL_OW 44
 731: ST_TO_ADDR
// Burlak := CreateHuman ;
 732: LD_ADDR_EXP 3
 736: PUSH
 737: CALL_OW 44
 741: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 742: LD_ADDR_EXP 4
 746: PUSH
 747: LD_INT 1
 749: PPUSH
 750: LD_INT 22
 752: PUSH
 753: LD_INT 7
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 23
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 30
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 70
 807: ST_TO_ADDR
// if freedom then
 808: LD_EXP 4
 812: IFFALSE 939
// begin freedom := freedom [ 1 ] ;
 814: LD_ADDR_EXP 4
 818: PUSH
 819: LD_EXP 4
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 828: LD_EXP 4
 832: PPUSH
 833: LD_STRING freedom
 835: PPUSH
 836: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 840: LD_EXP 4
 844: PPUSH
 845: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 849: LD_EXP 2
 853: PPUSH
 854: LD_EXP 4
 858: PPUSH
 859: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 863: LD_EXP 3
 867: PPUSH
 868: LD_EXP 4
 872: PPUSH
 873: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 877: LD_EXP 4
 881: PPUSH
 882: CALL_OW 274
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_INT 1000
 892: PPUSH
 893: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 274
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 400
 912: PPUSH
 913: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 917: LD_EXP 4
 921: PPUSH
 922: CALL_OW 274
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_INT 30
 932: PPUSH
 933: CALL_OW 277
// end else
 937: GO 1026
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 954: LD_EXP 3
 958: PPUSH
 959: LD_EXP 2
 963: PPUSH
 964: CALL_OW 250
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL_OW 251
 978: PPUSH
 979: LD_INT 8
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
 989: LD_EXP 2
 993: PPUSH
 994: LD_EXP 3
 998: PPUSH
 999: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1003: LD_EXP 3
1007: PPUSH
1008: LD_EXP 2
1012: PPUSH
1013: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1017: LD_EXP 2
1021: PPUSH
1022: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1038: LD_ADDR_VAR 0 2
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: LD_INT 4
1051: PUSH
1052: LD_INT 5
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 9
1066: PUSH
1067: LD_INT 7
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: LD_INT 12
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// for i = 1 to 5 do
1087: LD_ADDR_VAR 0 3
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_INT 5
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1285
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 4
1119: MOD
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: ARRAY
1125: PPUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_VAR 0 3
1164: PUSH
1165: LD_INT 5
1167: MOD
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: PPUSH
1174: LD_INT 100
1176: PPUSH
1177: CALL 26215 0 5
// veh := CreateVehicle ;
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: CALL_OW 45
1190: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 12
1206: PPUSH
1207: CALL_OW 233
// if freedom then
1211: LD_EXP 4
1215: IFFALSE 1248
// begin if IsInArea ( freedom , freedom_base ) then
1217: LD_EXP 4
1221: PPUSH
1222: LD_INT 1
1224: PPUSH
1225: CALL_OW 308
1229: IFFALSE 1246
// PlaceUnitArea ( veh , freedom_base , false ) end else
1231: LD_VAR 0 4
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
1246: GO 1283
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1248: LD_VAR 0 4
1252: PPUSH
1253: LD_EXP 2
1257: PPUSH
1258: CALL_OW 250
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL_OW 251
1272: PPUSH
1273: LD_INT 14
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ;
1283: GO 1100
1285: POP
1286: POP
// uc_nation := 3 ;
1287: LD_ADDR_OWVAR 21
1291: PUSH
1292: LD_INT 3
1294: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1295: LD_ADDR_VAR 0 2
1299: PUSH
1300: LD_INT 21
1302: PUSH
1303: LD_INT 22
1305: PUSH
1306: LD_INT 23
1308: PUSH
1309: LD_INT 24
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 43
1320: PUSH
1321: LD_INT 44
1323: PUSH
1324: LD_INT 45
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: ST_TO_ADDR
// for i = 1 to 5 do
1336: LD_ADDR_VAR 0 3
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_INT 5
1348: PUSH
1349: FOR_TO
1350: IFFALSE 1477
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 1
1359: ARRAY
1360: PUSH
1361: LD_VAR 0 3
1365: PUSH
1366: LD_INT 4
1368: MOD
1369: PUSH
1370: LD_INT 1
1372: PLUS
1373: ARRAY
1374: PPUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 3
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PUSH
1385: LD_INT 1
1387: PPUSH
1388: LD_INT 2
1390: PPUSH
1391: CALL_OW 12
1395: ARRAY
1396: PPUSH
1397: LD_INT 1
1399: PPUSH
1400: LD_VAR 0 2
1404: PUSH
1405: LD_INT 2
1407: ARRAY
1408: PUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 3
1416: MOD
1417: PUSH
1418: LD_INT 1
1420: PLUS
1421: ARRAY
1422: PPUSH
1423: LD_INT 100
1425: PPUSH
1426: CALL 26215 0 5
// veh := CreateVehicle ;
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: CALL_OW 45
1439: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1440: LD_VAR 0 4
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL_OW 12
1455: PPUSH
1456: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1460: LD_VAR 0 4
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL_OW 49
// end ;
1475: GO 1349
1477: POP
1478: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1479: LD_INT 2
1481: PUSH
1482: LD_INT 34
1484: PUSH
1485: LD_INT 12
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 34
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 69
1511: NOT
1512: IFFALSE 1578
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1514: LD_INT 22
1516: PPUSH
1517: LD_INT 3
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 51
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL 26215 0 5
// veh := CreateVehicle ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: CALL_OW 45
1542: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1543: LD_VAR 0 4
1547: PPUSH
1548: LD_INT 0
1550: PPUSH
1551: LD_INT 5
1553: PPUSH
1554: CALL_OW 12
1558: PPUSH
1559: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1578: LD_ADDR_VAR 0 2
1582: PUSH
1583: LD_STRING 13a_Masha
1585: PPUSH
1586: EMPTY
1587: PPUSH
1588: CALL_OW 30
1592: ST_TO_ADDR
// if tmp then
1593: LD_VAR 0 2
1597: IFFALSE 1680
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1599: LD_VAR 0 2
1603: PUSH
1604: LD_INT 1
1606: ARRAY
1607: PPUSH
1608: LD_VAR 0 2
1612: PUSH
1613: LD_INT 2
1615: ARRAY
1616: PPUSH
1617: LD_VAR 0 2
1621: PUSH
1622: LD_INT 3
1624: ARRAY
1625: PPUSH
1626: LD_VAR 0 2
1630: PUSH
1631: LD_INT 4
1633: ARRAY
1634: PPUSH
1635: LD_INT 100
1637: PPUSH
1638: CALL 26215 0 5
// Masha := CreateVehicle ;
1642: LD_ADDR_EXP 36
1646: PUSH
1647: CALL_OW 45
1651: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1652: LD_EXP 36
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1667: LD_EXP 36
1671: PPUSH
1672: LD_INT 7
1674: NEG
1675: PPUSH
1676: CALL_OW 242
// end ; uc_side := 4 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 4
1687: ST_TO_ADDR
// tmp := [ ] ;
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: EMPTY
1694: ST_TO_ADDR
// squad1 := [ ] ;
1695: LD_ADDR_EXP 37
1699: PUSH
1700: EMPTY
1701: ST_TO_ADDR
// squad2 := [ ] ;
1702: LD_ADDR_EXP 38
1706: PUSH
1707: EMPTY
1708: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1709: LD_ADDR_EXP 19
1713: PUSH
1714: LD_STRING Joan
1716: PPUSH
1717: LD_EXP 1
1721: NOT
1722: PPUSH
1723: LD_STRING 13a_
1725: PPUSH
1726: CALL 21391 0 3
1730: ST_TO_ADDR
// if Joan then
1731: LD_EXP 19
1735: IFFALSE 1753
// tmp := tmp ^ Joan ;
1737: LD_ADDR_VAR 0 2
1741: PUSH
1742: LD_VAR 0 2
1746: PUSH
1747: LD_EXP 19
1751: ADD
1752: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1753: LD_ADDR_EXP 5
1757: PUSH
1758: LD_STRING Roth
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_STRING 13a_
1769: PPUSH
1770: CALL 21391 0 3
1774: ST_TO_ADDR
// if Roth then
1775: LD_EXP 5
1779: IFFALSE 1797
// tmp := tmp ^ Roth ;
1781: LD_ADDR_VAR 0 2
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_EXP 5
1795: ADD
1796: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1797: LD_ADDR_EXP 10
1801: PUSH
1802: LD_STRING Denis
1804: PPUSH
1805: LD_EXP 1
1809: NOT
1810: PPUSH
1811: LD_STRING 13a_
1813: PPUSH
1814: CALL 21391 0 3
1818: ST_TO_ADDR
// if Denis then
1819: LD_EXP 10
1823: IFFALSE 1841
// tmp := tmp ^ Denis ;
1825: LD_ADDR_VAR 0 2
1829: PUSH
1830: LD_VAR 0 2
1834: PUSH
1835: LD_EXP 10
1839: ADD
1840: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1841: LD_ADDR_EXP 20
1845: PUSH
1846: LD_STRING DeltaDoctor
1848: PPUSH
1849: LD_EXP 1
1853: NOT
1854: PPUSH
1855: LD_STRING 13a_
1857: PPUSH
1858: CALL 21391 0 3
1862: ST_TO_ADDR
// if DeltaDoctor then
1863: LD_EXP 20
1867: IFFALSE 1885
// tmp := tmp ^ DeltaDoctor ;
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 20
1883: ADD
1884: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1885: LD_ADDR_EXP 18
1889: PUSH
1890: LD_STRING Simms
1892: PPUSH
1893: LD_EXP 1
1897: NOT
1898: PPUSH
1899: LD_STRING 13a_
1901: PPUSH
1902: CALL 21391 0 3
1906: ST_TO_ADDR
// if Simms then
1907: LD_EXP 18
1911: IFFALSE 1929
// tmp := tmp ^ Simms ;
1913: LD_ADDR_VAR 0 2
1917: PUSH
1918: LD_VAR 0 2
1922: PUSH
1923: LD_EXP 18
1927: ADD
1928: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1929: LD_ADDR_EXP 21
1933: PUSH
1934: LD_STRING Gossudarov
1936: PPUSH
1937: LD_EXP 1
1941: NOT
1942: PPUSH
1943: LD_STRING 13a_
1945: PPUSH
1946: CALL 21391 0 3
1950: ST_TO_ADDR
// if Gossudarov then
1951: LD_EXP 21
1955: IFFALSE 1973
// tmp := tmp ^ Gossudarov ;
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_EXP 21
1971: ADD
1972: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1973: LD_ADDR_EXP 22
1977: PUSH
1978: LD_STRING Kirilenkova
1980: PPUSH
1981: LD_EXP 1
1985: NOT
1986: PPUSH
1987: LD_STRING 13a_
1989: PPUSH
1990: CALL 21391 0 3
1994: ST_TO_ADDR
// if Kirilenkova then
1995: LD_EXP 22
1999: IFFALSE 2017
// tmp := tmp ^ Kirilenkova ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: LD_VAR 0 2
2010: PUSH
2011: LD_EXP 22
2015: ADD
2016: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2017: LD_ADDR_EXP 25
2021: PUSH
2022: LD_STRING Petrosyan
2024: PPUSH
2025: LD_EXP 1
2029: NOT
2030: PPUSH
2031: LD_STRING 13a_
2033: PPUSH
2034: CALL 21391 0 3
2038: ST_TO_ADDR
// if Petrosyan then
2039: LD_EXP 25
2043: IFFALSE 2061
// tmp := tmp ^ Petrosyan ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_EXP 25
2059: ADD
2060: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2061: LD_ADDR_EXP 26
2065: PUSH
2066: LD_STRING Petrosyan
2068: PPUSH
2069: LD_EXP 1
2073: NOT
2074: PPUSH
2075: LD_STRING 13a_
2077: PPUSH
2078: CALL 21391 0 3
2082: ST_TO_ADDR
// if Scholtze then
2083: LD_EXP 26
2087: IFFALSE 2105
// tmp := tmp ^ Scholtze ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_EXP 26
2103: ADD
2104: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2105: LD_ADDR_EXP 24
2109: PUSH
2110: LD_STRING Dolgov
2112: PPUSH
2113: LD_EXP 1
2117: NOT
2118: PPUSH
2119: LD_STRING 13a_
2121: PPUSH
2122: CALL 21391 0 3
2126: ST_TO_ADDR
// if Dolgov then
2127: LD_EXP 24
2131: IFFALSE 2149
// tmp := tmp ^ Dolgov ;
2133: LD_ADDR_VAR 0 2
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_EXP 24
2147: ADD
2148: ST_TO_ADDR
// for i in tmp do
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_VAR 0 2
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2185
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_INT 160
2169: PPUSH
2170: LD_INT 78
2172: PPUSH
2173: LD_INT 22
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
2183: GO 2159
2185: POP
2186: POP
// squad1 := tmp ;
2187: LD_ADDR_EXP 37
2191: PUSH
2192: LD_VAR 0 2
2196: ST_TO_ADDR
// tmp := [ ] ;
2197: LD_ADDR_VAR 0 2
2201: PUSH
2202: EMPTY
2203: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2204: LD_ADDR_EXP 30
2208: PUSH
2209: LD_STRING Petrova
2211: PPUSH
2212: LD_EXP 1
2216: NOT
2217: PPUSH
2218: LD_STRING 13a_
2220: PPUSH
2221: CALL 21391 0 3
2225: ST_TO_ADDR
// if Petrovova then
2226: LD_EXP 30
2230: IFFALSE 2248
// tmp := tmp ^ Petrovova ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_VAR 0 2
2241: PUSH
2242: LD_EXP 30
2246: ADD
2247: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2248: LD_ADDR_EXP 23
2252: PUSH
2253: LD_STRING Titov
2255: PPUSH
2256: LD_EXP 1
2260: NOT
2261: PPUSH
2262: LD_STRING 13a_
2264: PPUSH
2265: CALL 21391 0 3
2269: ST_TO_ADDR
// if Titov then
2270: LD_EXP 23
2274: IFFALSE 2292
// tmp := tmp ^ Titov ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_VAR 0 2
2285: PUSH
2286: LD_EXP 23
2290: ADD
2291: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2292: LD_ADDR_EXP 33
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_STRING 13a_
2308: PPUSH
2309: CALL 21391 0 3
2313: ST_TO_ADDR
// if Karamazov then
2314: LD_EXP 33
2318: IFFALSE 2336
// tmp := tmp ^ Karamazov ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_EXP 33
2334: ADD
2335: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2336: LD_ADDR_EXP 16
2340: PUSH
2341: LD_STRING Frank
2343: PPUSH
2344: LD_EXP 1
2348: NOT
2349: PPUSH
2350: LD_STRING 13a_
2352: PPUSH
2353: CALL 21391 0 3
2357: ST_TO_ADDR
// if Frank then
2358: LD_EXP 16
2362: IFFALSE 2380
// tmp := tmp ^ Frank ;
2364: LD_ADDR_VAR 0 2
2368: PUSH
2369: LD_VAR 0 2
2373: PUSH
2374: LD_EXP 16
2378: ADD
2379: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2380: LD_ADDR_EXP 7
2384: PUSH
2385: LD_STRING Donaldson
2387: PPUSH
2388: LD_EXP 1
2392: NOT
2393: PPUSH
2394: LD_STRING 13a_
2396: PPUSH
2397: CALL 21391 0 3
2401: ST_TO_ADDR
// if Donaldson then
2402: LD_EXP 7
2406: IFFALSE 2424
// tmp := tmp ^ Donaldson ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_EXP 7
2422: ADD
2423: ST_TO_ADDR
// for i in tmp do
2424: LD_ADDR_VAR 0 3
2428: PUSH
2429: LD_VAR 0 2
2433: PUSH
2434: FOR_IN
2435: IFFALSE 2475
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2437: LD_VAR 0 3
2441: PPUSH
2442: LD_INT 117
2444: PPUSH
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: LD_INT 0
2453: PPUSH
2454: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2458: LD_VAR 0 3
2462: PPUSH
2463: LD_INT 117
2465: PPUSH
2466: LD_INT 8
2468: PPUSH
2469: CALL_OW 118
// end ;
2473: GO 2434
2475: POP
2476: POP
// squad2 := tmp ;
2477: LD_ADDR_EXP 38
2481: PUSH
2482: LD_VAR 0 2
2486: ST_TO_ADDR
// uc_side := 0 ;
2487: LD_ADDR_OWVAR 20
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// uc_nation := 0 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// InitHc ;
2503: CALL_OW 19
// hc_importance := 0 ;
2507: LD_ADDR_OWVAR 32
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// hc_name := Find some goods! ;
2515: LD_ADDR_OWVAR 26
2519: PUSH
2520: LD_STRING Find some goods!
2522: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2523: LD_INT 0
2525: PPUSH
2526: LD_INT 12
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2536: CALL_OW 44
2540: PPUSH
2541: LD_INT 96
2543: PPUSH
2544: LD_INT 108
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 48
// InitHc ;
2554: CALL_OW 19
// end ;
2558: LD_VAR 0 1
2562: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2563: LD_INT 22
2565: PUSH
2566: LD_INT 7
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 23
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PPUSH
2587: CALL_OW 69
2591: IFFALSE 3056
2593: GO 2595
2595: DISABLE
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
// begin InGameOn ;
2600: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2604: LD_INT 22
2606: PUSH
2607: LD_INT 7
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 23
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: CALL_OW 64
// game_speed := 4 ;
2641: LD_ADDR_OWVAR 65
2645: PUSH
2646: LD_INT 4
2648: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_INT 93
2656: PPUSH
2657: LD_INT 100
2659: PPUSH
2660: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2664: LD_EXP 3
2668: PPUSH
2669: LD_INT 93
2671: PPUSH
2672: LD_INT 99
2674: PPUSH
2675: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2679: LD_EXP 2
2683: PUSH
2684: LD_EXP 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PPUSH
2693: LD_INT 81
2695: PPUSH
2696: LD_INT 112
2698: PPUSH
2699: CALL_OW 178
// wait ( 0 0$5 ) ;
2703: LD_INT 175
2705: PPUSH
2706: CALL_OW 67
// music_nat := 2 ;
2710: LD_ADDR_OWVAR 71
2714: PUSH
2715: LD_INT 2
2717: ST_TO_ADDR
// music_class := 4 ;
2718: LD_ADDR_OWVAR 72
2722: PUSH
2723: LD_INT 4
2725: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2726: LD_INT 80
2728: PPUSH
2729: LD_INT 130
2731: PPUSH
2732: CALL_OW 86
// uc_nation := 2 ;
2736: LD_ADDR_OWVAR 21
2740: PUSH
2741: LD_INT 2
2743: ST_TO_ADDR
// uc_side := 2 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// hc_gallery = sandar ;
2752: LD_ADDR_OWVAR 33
2756: PUSH
2757: LD_STRING sandar
2759: ST_TO_ADDR
// hc_face_number = 1 ;
2760: LD_ADDR_OWVAR 34
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// hc_name = Louis Schulz ;
2768: LD_ADDR_OWVAR 26
2772: PUSH
2773: LD_STRING Louis Schulz
2775: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2776: LD_ADDR_OWVAR 29
2780: PUSH
2781: LD_INT 13
2783: PUSH
2784: LD_INT 11
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2791: LD_ADDR_OWVAR 30
2795: PUSH
2796: LD_INT 0
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2814: LD_ADDR_OWVAR 31
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: LD_INT 7
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// hc_sex = sex_male ;
2837: LD_ADDR_OWVAR 27
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// hc_class = 1 ;
2845: LD_ADDR_OWVAR 28
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// hc_importance = 100 ;
2853: LD_ADDR_OWVAR 32
2857: PUSH
2858: LD_INT 100
2860: ST_TO_ADDR
// Louis = CreateHuman ;
2861: LD_ADDR_VAR 0 1
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2871: LD_INT 14
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 26
2882: PPUSH
2883: LD_INT 100
2885: PPUSH
2886: CALL 26215 0 5
// veh := CreateVehicle ;
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: CALL_OW 45
2899: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2900: LD_VAR 0 2
2904: PPUSH
2905: LD_INT 2
2907: NEG
2908: PPUSH
2909: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2913: LD_VAR 0 2
2917: PPUSH
2918: LD_INT 80
2920: PPUSH
2921: LD_INT 130
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2931: LD_VAR 0 1
2935: PPUSH
2936: LD_VAR 0 2
2940: PPUSH
2941: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2945: LD_VAR 0 1
2949: PPUSH
2950: LD_INT 80
2952: PPUSH
2953: LD_INT 109
2955: PPUSH
2956: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2969: LD_VAR 0 1
2973: PPUSH
2974: LD_INT 80
2976: PPUSH
2977: LD_INT 131
2979: PPUSH
2980: CALL_OW 171
// wait ( 0 0$06 ) ;
2984: LD_INT 210
2986: PPUSH
2987: CALL_OW 67
// InGameOff ;
2991: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
2995: LD_INT 35
2997: PPUSH
2998: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3002: LD_VAR 0 1
3006: PPUSH
3007: LD_INT 80
3009: PPUSH
3010: LD_INT 131
3012: PPUSH
3013: CALL_OW 307
3017: IFFALSE 2995
// SetSide ( veh , 7 ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 7
3026: PPUSH
3027: CALL_OW 235
// RemoveUnit ( Louis ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 64
// music_nat := 3 ;
3040: LD_ADDR_OWVAR 71
3044: PUSH
3045: LD_INT 3
3047: ST_TO_ADDR
// music_class := 0 ;
3048: LD_ADDR_OWVAR 72
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// end ;
3056: PPOPN 2
3058: END
// every 0 0$10 trigger squad1 do var i , xy ;
3059: LD_EXP 37
3063: IFFALSE 3426
3065: GO 3067
3067: DISABLE
3068: LD_INT 0
3070: PPUSH
3071: PPUSH
// begin enable ;
3072: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3073: LD_ADDR_VAR 0 1
3077: PUSH
3078: LD_EXP 37
3082: PUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_EXP 37
3090: PPUSH
3091: CALL_OW 12
3095: ARRAY
3096: ST_TO_ADDR
// if IsInUnit ( i ) then
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 310
3106: IFFALSE 3110
// exit ;
3108: GO 3426
// ComRemember ( i ) ;
3110: LD_VAR 0 1
3114: PPUSH
3115: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3119: LD_ADDR_VAR 0 2
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 250
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: LD_INT 5
3139: PPUSH
3140: CALL_OW 12
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 7
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: CALL_OW 272
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 251
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: LD_INT 5
3176: PPUSH
3177: CALL_OW 12
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: LD_INT 7
3187: PPUSH
3188: CALL_OW 12
3192: PPUSH
3193: CALL_OW 273
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3202: LD_VAR 0 2
3206: PUSH
3207: LD_INT 1
3209: ARRAY
3210: PPUSH
3211: LD_VAR 0 2
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PPUSH
3220: CALL_OW 428
3224: PUSH
3225: LD_INT 0
3227: NONEQUAL
3228: PUSH
3229: LD_VAR 0 2
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: LD_VAR 0 2
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 488
3251: NOT
3252: OR
3253: IFFALSE 3257
// exit ;
3255: GO 3426
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3257: LD_VAR 0 1
3261: PPUSH
3262: LD_VAR 0 2
3266: PUSH
3267: LD_INT 1
3269: ARRAY
3270: PPUSH
3271: LD_VAR 0 2
3275: PUSH
3276: LD_INT 2
3278: ARRAY
3279: PPUSH
3280: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_INT 350
3291: PPUSH
3292: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3296: LD_INT 60
3298: PPUSH
3299: CALL_OW 13
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: AND
3333: IFFALSE 3417
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3335: LD_VAR 0 1
3339: PPUSH
3340: LD_INT 22
3342: PUSH
3343: LD_INT 4
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: LD_INT 21
3352: PUSH
3353: LD_INT 3
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PPUSH
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 74
3378: PPUSH
3379: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3383: LD_INT 1050
3385: PPUSH
3386: CALL_OW 67
// until IsInUnit ( i ) ;
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 310
3399: IFFALSE 3383
// wait ( 0 0$30 ) ;
3401: LD_INT 1050
3403: PPUSH
3404: CALL_OW 67
// AddComExitBuilding ( i ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: CALL_OW 182
// end ; AddComReturn ( i ) ;
3417: LD_VAR 0 1
3421: PPUSH
3422: CALL_OW 204
// end ; end_of_file
3426: PPOPN 2
3428: END
// export function Action ; begin
3429: LD_INT 0
3431: PPUSH
// InGameOn ;
3432: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3436: LD_EXP 2
3440: PPUSH
3441: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3445: LD_EXP 2
3449: PPUSH
3450: LD_STRING D1-JMM-1
3452: PPUSH
3453: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3457: LD_EXP 3
3461: PPUSH
3462: LD_STRING D1-Bur-1
3464: PPUSH
3465: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3469: LD_EXP 2
3473: PPUSH
3474: LD_STRING D1-JMM-2
3476: PPUSH
3477: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3481: LD_EXP 3
3485: PPUSH
3486: LD_STRING D1-Bur-2
3488: PPUSH
3489: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3493: LD_EXP 2
3497: PPUSH
3498: LD_STRING D1-JMM-3
3500: PPUSH
3501: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3505: LD_EXP 3
3509: PPUSH
3510: LD_STRING D1-Bur-3
3512: PPUSH
3513: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3517: LD_EXP 2
3521: PPUSH
3522: LD_STRING D1-JMM-4
3524: PPUSH
3525: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3529: LD_EXP 3
3533: PPUSH
3534: LD_STRING D1-Bur-4
3536: PPUSH
3537: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3541: LD_EXP 2
3545: PPUSH
3546: LD_STRING D1-JMM-5
3548: PPUSH
3549: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3553: LD_EXP 3
3557: PPUSH
3558: LD_STRING D1-Bur-5
3560: PPUSH
3561: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3565: LD_EXP 2
3569: PPUSH
3570: LD_STRING D1-JMM-6
3572: PPUSH
3573: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3577: LD_EXP 3
3581: PPUSH
3582: LD_STRING D1-Bur-6
3584: PPUSH
3585: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3589: LD_EXP 2
3593: PPUSH
3594: LD_STRING D1-JMM-7
3596: PPUSH
3597: CALL_OW 88
// wait ( 20 ) ;
3601: LD_INT 20
3603: PPUSH
3604: CALL_OW 67
// Query ( QTruck ) ;
3608: LD_STRING QTruck
3610: PPUSH
3611: CALL_OW 97
// InGameOff ;
3615: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3619: LD_STRING MArtPickup
3621: PPUSH
3622: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: CALL_OW 424
// end ;
3636: LD_VAR 0 1
3640: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3641: LD_INT 2
3643: PPUSH
3644: LD_INT 21
3646: PUSH
3647: LD_INT 2
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 33
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: LD_INT 58
3669: PUSH
3670: EMPTY
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PPUSH
3682: CALL_OW 70
3686: PUSH
3687: LD_INT 2
3689: EQUAL
3690: PUSH
3691: LD_EXP 2
3695: PPUSH
3696: CALL_OW 310
3700: AND
3701: PUSH
3702: LD_EXP 3
3706: PPUSH
3707: CALL_OW 310
3711: AND
3712: PUSH
3713: LD_EXP 2
3717: PPUSH
3718: CALL_OW 310
3722: PPUSH
3723: CALL_OW 264
3727: PUSH
3728: LD_INT 51
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: LD_EXP 40
3738: PUSH
3739: LD_INT 32
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: IN
3748: PUSH
3749: LD_EXP 3
3753: PPUSH
3754: CALL_OW 310
3758: PPUSH
3759: CALL_OW 264
3763: PUSH
3764: LD_INT 51
3766: PUSH
3767: LD_INT 12
3769: PUSH
3770: LD_EXP 40
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: IN
3784: OR
3785: AND
3786: IFFALSE 3996
3788: GO 3790
3790: DISABLE
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: LD_EXP 2
3805: PPUSH
3806: CALL_OW 310
3810: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_EXP 3
3820: PPUSH
3821: CALL_OW 310
3825: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3826: LD_VAR 0 2
3830: PPUSH
3831: CALL_OW 265
3835: PUSH
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 262
3845: PUSH
3846: LD_INT 1
3848: PUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: CALL_OW 264
3858: PUSH
3859: LD_VAR 0 2
3863: PPUSH
3864: CALL_OW 271
3868: PUSH
3869: LD_VAR 0 2
3873: PPUSH
3874: CALL_OW 248
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: PPUSH
3887: LD_STRING 14a_JMMVeh
3889: PPUSH
3890: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: CALL_OW 265
3903: PUSH
3904: LD_VAR 0 3
3908: PPUSH
3909: CALL_OW 262
3913: PUSH
3914: LD_INT 1
3916: PUSH
3917: LD_VAR 0 3
3921: PPUSH
3922: CALL_OW 264
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: CALL_OW 271
3936: PUSH
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 248
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PPUSH
3955: LD_STRING 14a_BurlakVeh
3957: PPUSH
3958: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3962: LD_EXP 2
3966: PPUSH
3967: LD_STRING 14a_JMM
3969: PPUSH
3970: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3974: LD_EXP 3
3978: PPUSH
3979: LD_STRING 14a_Burlak
3981: PPUSH
3982: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
3986: LD_INT 1
3988: PPUSH
3989: LD_STRING %_cont
3991: PPUSH
3992: CALL_OW 340
// end ;
3996: PPOPN 3
3998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
3999: LD_INT 22
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 24
4014: PUSH
4015: LD_INT 950
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: IFFALSE 4046
4036: GO 4038
4038: DISABLE
// YouLost ( FriendlyFire ) ;
4039: LD_STRING FriendlyFire
4041: PPUSH
4042: CALL_OW 104
4046: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4047: LD_EXP 3
4051: PPUSH
4052: CALL_OW 301
4056: IFFALSE 4068
4058: GO 4060
4060: DISABLE
// YouLost ( Burlak ) ;
4061: LD_STRING Burlak
4063: PPUSH
4064: CALL_OW 104
4068: END
// every 0 0$1 trigger IsDead ( JMM ) do
4069: LD_EXP 2
4073: PPUSH
4074: CALL_OW 301
4078: IFFALSE 4090
4080: GO 4082
4082: DISABLE
// YouLost ( JMM ) ; end_of_file
4083: LD_STRING JMM
4085: PPUSH
4086: CALL_OW 104
4090: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
4091: LD_INT 0
4093: PPUSH
// ar_miner := 81 ;
4094: LD_ADDR_EXP 46
4098: PUSH
4099: LD_INT 81
4101: ST_TO_ADDR
// ar_crane := 88 ;
4102: LD_ADDR_EXP 45
4106: PUSH
4107: LD_INT 88
4109: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4110: LD_ADDR_EXP 40
4114: PUSH
4115: LD_INT 89
4117: ST_TO_ADDR
// us_hack := 99 ;
4118: LD_ADDR_EXP 41
4122: PUSH
4123: LD_INT 99
4125: ST_TO_ADDR
// us_artillery := 97 ;
4126: LD_ADDR_EXP 42
4130: PUSH
4131: LD_INT 97
4133: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4134: LD_ADDR_EXP 43
4138: PUSH
4139: LD_INT 91
4141: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4142: LD_ADDR_EXP 44
4146: PUSH
4147: LD_INT 92
4149: ST_TO_ADDR
// ru_radar := 98 ;
4150: LD_ADDR_EXP 39
4154: PUSH
4155: LD_INT 98
4157: ST_TO_ADDR
// tech_Artillery := 80 ;
4158: LD_ADDR_EXP 47
4162: PUSH
4163: LD_INT 80
4165: ST_TO_ADDR
// tech_RadMat := 81 ;
4166: LD_ADDR_EXP 48
4170: PUSH
4171: LD_INT 81
4173: ST_TO_ADDR
// tech_BasicTools := 82 ;
4174: LD_ADDR_EXP 49
4178: PUSH
4179: LD_INT 82
4181: ST_TO_ADDR
// tech_Cargo := 83 ;
4182: LD_ADDR_EXP 50
4186: PUSH
4187: LD_INT 83
4189: ST_TO_ADDR
// tech_Track := 84 ;
4190: LD_ADDR_EXP 51
4194: PUSH
4195: LD_INT 84
4197: ST_TO_ADDR
// tech_Crane := 85 ;
4198: LD_ADDR_EXP 52
4202: PUSH
4203: LD_INT 85
4205: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4206: LD_ADDR_EXP 53
4210: PUSH
4211: LD_INT 86
4213: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4214: LD_ADDR_EXP 54
4218: PUSH
4219: LD_INT 87
4221: ST_TO_ADDR
// end ;
4222: LD_VAR 0 1
4226: RET
// every 1 do
4227: GO 4229
4229: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4230: CALL 4091 0 0
4234: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 100
4242: EQUAL
4243: IFFALSE 5192
// begin if not StreamModeActive then
4245: LD_EXP 55
4249: NOT
4250: IFFALSE 4260
// StreamModeActive := true ;
4252: LD_ADDR_EXP 55
4256: PUSH
4257: LD_INT 1
4259: ST_TO_ADDR
// if p3 = 0 then
4260: LD_VAR 0 3
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: IFFALSE 4274
// InitStreamMode ;
4270: CALL 5350 0 0
// if p3 = 1 then
4274: LD_VAR 0 3
4278: PUSH
4279: LD_INT 1
4281: EQUAL
4282: IFFALSE 4292
// sRocket := true ;
4284: LD_ADDR_EXP 60
4288: PUSH
4289: LD_INT 1
4291: ST_TO_ADDR
// if p3 = 2 then
4292: LD_VAR 0 3
4296: PUSH
4297: LD_INT 2
4299: EQUAL
4300: IFFALSE 4310
// sSpeed := true ;
4302: LD_ADDR_EXP 59
4306: PUSH
4307: LD_INT 1
4309: ST_TO_ADDR
// if p3 = 3 then
4310: LD_VAR 0 3
4314: PUSH
4315: LD_INT 3
4317: EQUAL
4318: IFFALSE 4328
// sEngine := true ;
4320: LD_ADDR_EXP 61
4324: PUSH
4325: LD_INT 1
4327: ST_TO_ADDR
// if p3 = 4 then
4328: LD_VAR 0 3
4332: PUSH
4333: LD_INT 4
4335: EQUAL
4336: IFFALSE 4346
// sSpec := true ;
4338: LD_ADDR_EXP 58
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// if p3 = 5 then
4346: LD_VAR 0 3
4350: PUSH
4351: LD_INT 5
4353: EQUAL
4354: IFFALSE 4364
// sLevel := true ;
4356: LD_ADDR_EXP 62
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// if p3 = 6 then
4364: LD_VAR 0 3
4368: PUSH
4369: LD_INT 6
4371: EQUAL
4372: IFFALSE 4382
// sArmoury := true ;
4374: LD_ADDR_EXP 63
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// if p3 = 7 then
4382: LD_VAR 0 3
4386: PUSH
4387: LD_INT 7
4389: EQUAL
4390: IFFALSE 4400
// sRadar := true ;
4392: LD_ADDR_EXP 64
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// if p3 = 8 then
4400: LD_VAR 0 3
4404: PUSH
4405: LD_INT 8
4407: EQUAL
4408: IFFALSE 4418
// sBunker := true ;
4410: LD_ADDR_EXP 65
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// if p3 = 9 then
4418: LD_VAR 0 3
4422: PUSH
4423: LD_INT 9
4425: EQUAL
4426: IFFALSE 4436
// sHack := true ;
4428: LD_ADDR_EXP 66
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// if p3 = 10 then
4436: LD_VAR 0 3
4440: PUSH
4441: LD_INT 10
4443: EQUAL
4444: IFFALSE 4454
// sFire := true ;
4446: LD_ADDR_EXP 67
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// if p3 = 11 then
4454: LD_VAR 0 3
4458: PUSH
4459: LD_INT 11
4461: EQUAL
4462: IFFALSE 4472
// sRefresh := true ;
4464: LD_ADDR_EXP 68
4468: PUSH
4469: LD_INT 1
4471: ST_TO_ADDR
// if p3 = 12 then
4472: LD_VAR 0 3
4476: PUSH
4477: LD_INT 12
4479: EQUAL
4480: IFFALSE 4490
// sExp := true ;
4482: LD_ADDR_EXP 69
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// if p3 = 13 then
4490: LD_VAR 0 3
4494: PUSH
4495: LD_INT 13
4497: EQUAL
4498: IFFALSE 4508
// sDepot := true ;
4500: LD_ADDR_EXP 70
4504: PUSH
4505: LD_INT 1
4507: ST_TO_ADDR
// if p3 = 14 then
4508: LD_VAR 0 3
4512: PUSH
4513: LD_INT 14
4515: EQUAL
4516: IFFALSE 4526
// sFlag := true ;
4518: LD_ADDR_EXP 71
4522: PUSH
4523: LD_INT 1
4525: ST_TO_ADDR
// if p3 = 15 then
4526: LD_VAR 0 3
4530: PUSH
4531: LD_INT 15
4533: EQUAL
4534: IFFALSE 4544
// sKamikadze := true ;
4536: LD_ADDR_EXP 79
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// if p3 = 16 then
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 16
4551: EQUAL
4552: IFFALSE 4562
// sTroll := true ;
4554: LD_ADDR_EXP 80
4558: PUSH
4559: LD_INT 1
4561: ST_TO_ADDR
// if p3 = 17 then
4562: LD_VAR 0 3
4566: PUSH
4567: LD_INT 17
4569: EQUAL
4570: IFFALSE 4580
// sSlow := true ;
4572: LD_ADDR_EXP 81
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// if p3 = 18 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 18
4587: EQUAL
4588: IFFALSE 4598
// sLack := true ;
4590: LD_ADDR_EXP 82
4594: PUSH
4595: LD_INT 1
4597: ST_TO_ADDR
// if p3 = 19 then
4598: LD_VAR 0 3
4602: PUSH
4603: LD_INT 19
4605: EQUAL
4606: IFFALSE 4616
// sTank := true ;
4608: LD_ADDR_EXP 84
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// if p3 = 20 then
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 20
4623: EQUAL
4624: IFFALSE 4634
// sRemote := true ;
4626: LD_ADDR_EXP 85
4630: PUSH
4631: LD_INT 1
4633: ST_TO_ADDR
// if p3 = 21 then
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 21
4641: EQUAL
4642: IFFALSE 4652
// sPowell := true ;
4644: LD_ADDR_EXP 86
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// if p3 = 22 then
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 22
4659: EQUAL
4660: IFFALSE 4670
// sTeleport := true ;
4662: LD_ADDR_EXP 89
4666: PUSH
4667: LD_INT 1
4669: ST_TO_ADDR
// if p3 = 23 then
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 23
4677: EQUAL
4678: IFFALSE 4688
// sOilTower := true ;
4680: LD_ADDR_EXP 91
4684: PUSH
4685: LD_INT 1
4687: ST_TO_ADDR
// if p3 = 24 then
4688: LD_VAR 0 3
4692: PUSH
4693: LD_INT 24
4695: EQUAL
4696: IFFALSE 4706
// sShovel := true ;
4698: LD_ADDR_EXP 92
4702: PUSH
4703: LD_INT 1
4705: ST_TO_ADDR
// if p3 = 25 then
4706: LD_VAR 0 3
4710: PUSH
4711: LD_INT 25
4713: EQUAL
4714: IFFALSE 4724
// sSheik := true ;
4716: LD_ADDR_EXP 93
4720: PUSH
4721: LD_INT 1
4723: ST_TO_ADDR
// if p3 = 26 then
4724: LD_VAR 0 3
4728: PUSH
4729: LD_INT 26
4731: EQUAL
4732: IFFALSE 4742
// sEarthquake := true ;
4734: LD_ADDR_EXP 95
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// if p3 = 27 then
4742: LD_VAR 0 3
4746: PUSH
4747: LD_INT 27
4749: EQUAL
4750: IFFALSE 4760
// sAI := true ;
4752: LD_ADDR_EXP 96
4756: PUSH
4757: LD_INT 1
4759: ST_TO_ADDR
// if p3 = 28 then
4760: LD_VAR 0 3
4764: PUSH
4765: LD_INT 28
4767: EQUAL
4768: IFFALSE 4778
// sCargo := true ;
4770: LD_ADDR_EXP 99
4774: PUSH
4775: LD_INT 1
4777: ST_TO_ADDR
// if p3 = 29 then
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 29
4785: EQUAL
4786: IFFALSE 4796
// sDLaser := true ;
4788: LD_ADDR_EXP 100
4792: PUSH
4793: LD_INT 1
4795: ST_TO_ADDR
// if p3 = 30 then
4796: LD_VAR 0 3
4800: PUSH
4801: LD_INT 30
4803: EQUAL
4804: IFFALSE 4814
// sExchange := true ;
4806: LD_ADDR_EXP 101
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// if p3 = 31 then
4814: LD_VAR 0 3
4818: PUSH
4819: LD_INT 31
4821: EQUAL
4822: IFFALSE 4832
// sFac := true ;
4824: LD_ADDR_EXP 102
4828: PUSH
4829: LD_INT 1
4831: ST_TO_ADDR
// if p3 = 32 then
4832: LD_VAR 0 3
4836: PUSH
4837: LD_INT 32
4839: EQUAL
4840: IFFALSE 4850
// sPower := true ;
4842: LD_ADDR_EXP 103
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// if p3 = 33 then
4850: LD_VAR 0 3
4854: PUSH
4855: LD_INT 33
4857: EQUAL
4858: IFFALSE 4868
// sRandom := true ;
4860: LD_ADDR_EXP 104
4864: PUSH
4865: LD_INT 1
4867: ST_TO_ADDR
// if p3 = 34 then
4868: LD_VAR 0 3
4872: PUSH
4873: LD_INT 34
4875: EQUAL
4876: IFFALSE 4886
// sShield := true ;
4878: LD_ADDR_EXP 105
4882: PUSH
4883: LD_INT 1
4885: ST_TO_ADDR
// if p3 = 35 then
4886: LD_VAR 0 3
4890: PUSH
4891: LD_INT 35
4893: EQUAL
4894: IFFALSE 4904
// sTime := true ;
4896: LD_ADDR_EXP 106
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// if p3 = 36 then
4904: LD_VAR 0 3
4908: PUSH
4909: LD_INT 36
4911: EQUAL
4912: IFFALSE 4922
// sTools := true ;
4914: LD_ADDR_EXP 107
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// if p3 = 101 then
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 101
4929: EQUAL
4930: IFFALSE 4940
// sSold := true ;
4932: LD_ADDR_EXP 72
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// if p3 = 102 then
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 102
4947: EQUAL
4948: IFFALSE 4958
// sDiff := true ;
4950: LD_ADDR_EXP 73
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// if p3 = 103 then
4958: LD_VAR 0 3
4962: PUSH
4963: LD_INT 103
4965: EQUAL
4966: IFFALSE 4976
// sFog := true ;
4968: LD_ADDR_EXP 76
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if p3 = 104 then
4976: LD_VAR 0 3
4980: PUSH
4981: LD_INT 104
4983: EQUAL
4984: IFFALSE 4994
// sReset := true ;
4986: LD_ADDR_EXP 77
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// if p3 = 105 then
4994: LD_VAR 0 3
4998: PUSH
4999: LD_INT 105
5001: EQUAL
5002: IFFALSE 5012
// sSun := true ;
5004: LD_ADDR_EXP 78
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
// if p3 = 106 then
5012: LD_VAR 0 3
5016: PUSH
5017: LD_INT 106
5019: EQUAL
5020: IFFALSE 5030
// sTiger := true ;
5022: LD_ADDR_EXP 74
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// if p3 = 107 then
5030: LD_VAR 0 3
5034: PUSH
5035: LD_INT 107
5037: EQUAL
5038: IFFALSE 5048
// sBomb := true ;
5040: LD_ADDR_EXP 75
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// if p3 = 108 then
5048: LD_VAR 0 3
5052: PUSH
5053: LD_INT 108
5055: EQUAL
5056: IFFALSE 5066
// sWound := true ;
5058: LD_ADDR_EXP 83
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// if p3 = 109 then
5066: LD_VAR 0 3
5070: PUSH
5071: LD_INT 109
5073: EQUAL
5074: IFFALSE 5084
// sBetray := true ;
5076: LD_ADDR_EXP 87
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// if p3 = 110 then
5084: LD_VAR 0 3
5088: PUSH
5089: LD_INT 110
5091: EQUAL
5092: IFFALSE 5102
// sContamin := true ;
5094: LD_ADDR_EXP 88
5098: PUSH
5099: LD_INT 1
5101: ST_TO_ADDR
// if p3 = 111 then
5102: LD_VAR 0 3
5106: PUSH
5107: LD_INT 111
5109: EQUAL
5110: IFFALSE 5120
// sOil := true ;
5112: LD_ADDR_EXP 90
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// if p3 = 112 then
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 112
5127: EQUAL
5128: IFFALSE 5138
// sStu := true ;
5130: LD_ADDR_EXP 94
5134: PUSH
5135: LD_INT 1
5137: ST_TO_ADDR
// if p3 = 113 then
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 113
5145: EQUAL
5146: IFFALSE 5156
// sBazooka := true ;
5148: LD_ADDR_EXP 97
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// if p3 = 114 then
5156: LD_VAR 0 3
5160: PUSH
5161: LD_INT 114
5163: EQUAL
5164: IFFALSE 5174
// sMortar := true ;
5166: LD_ADDR_EXP 98
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// if p3 = 115 then
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 115
5181: EQUAL
5182: IFFALSE 5192
// sRanger := true ;
5184: LD_ADDR_EXP 108
5188: PUSH
5189: LD_INT 1
5191: ST_TO_ADDR
// end ; if p2 = 101 then
5192: LD_VAR 0 2
5196: PUSH
5197: LD_INT 101
5199: EQUAL
5200: IFFALSE 5328
// begin case p3 of 1 :
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 1
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5222
5215: POP
// hHackUnlimitedResources ; 2 :
5216: CALL 16363 0 0
5220: GO 5328
5222: LD_INT 2
5224: DOUBLE
5225: EQUAL
5226: IFTRUE 5230
5228: GO 5237
5230: POP
// hHackSetLevel10 ; 3 :
5231: CALL 16496 0 0
5235: GO 5328
5237: LD_INT 3
5239: DOUBLE
5240: EQUAL
5241: IFTRUE 5245
5243: GO 5252
5245: POP
// hHackSetLevel10YourUnits ; 4 :
5246: CALL 16581 0 0
5250: GO 5328
5252: LD_INT 4
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5260
5258: GO 5267
5260: POP
// hHackInvincible ; 5 :
5261: CALL 17029 0 0
5265: GO 5328
5267: LD_INT 5
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5282
5275: POP
// hHackInvisible ; 6 :
5276: CALL 17140 0 0
5280: GO 5328
5282: LD_INT 6
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5297
5290: POP
// hHackChangeYourSide ; 7 :
5291: CALL 17197 0 0
5295: GO 5328
5297: LD_INT 7
5299: DOUBLE
5300: EQUAL
5301: IFTRUE 5305
5303: GO 5312
5305: POP
// hHackChangeUnitSide ; 8 :
5306: CALL 17239 0 0
5310: GO 5328
5312: LD_INT 8
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5327
5320: POP
// hHackFog ; end ;
5321: CALL 17340 0 0
5325: GO 5328
5327: POP
// end ; end ;
5328: PPOPN 6
5330: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5331: GO 5333
5333: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5334: LD_STRING initStreamRollete();
5336: PPUSH
5337: CALL_OW 559
// InitStreamMode ;
5341: CALL 5350 0 0
// DefineStreamItems ( ) ;
5345: CALL 5790 0 0
// end ;
5349: END
// function InitStreamMode ; begin
5350: LD_INT 0
5352: PPUSH
// streamModeActive := false ;
5353: LD_ADDR_EXP 55
5357: PUSH
5358: LD_INT 0
5360: ST_TO_ADDR
// normalCounter := 36 ;
5361: LD_ADDR_EXP 56
5365: PUSH
5366: LD_INT 36
5368: ST_TO_ADDR
// hardcoreCounter := 16 ;
5369: LD_ADDR_EXP 57
5373: PUSH
5374: LD_INT 16
5376: ST_TO_ADDR
// sRocket := false ;
5377: LD_ADDR_EXP 60
5381: PUSH
5382: LD_INT 0
5384: ST_TO_ADDR
// sSpeed := false ;
5385: LD_ADDR_EXP 59
5389: PUSH
5390: LD_INT 0
5392: ST_TO_ADDR
// sEngine := false ;
5393: LD_ADDR_EXP 61
5397: PUSH
5398: LD_INT 0
5400: ST_TO_ADDR
// sSpec := false ;
5401: LD_ADDR_EXP 58
5405: PUSH
5406: LD_INT 0
5408: ST_TO_ADDR
// sLevel := false ;
5409: LD_ADDR_EXP 62
5413: PUSH
5414: LD_INT 0
5416: ST_TO_ADDR
// sArmoury := false ;
5417: LD_ADDR_EXP 63
5421: PUSH
5422: LD_INT 0
5424: ST_TO_ADDR
// sRadar := false ;
5425: LD_ADDR_EXP 64
5429: PUSH
5430: LD_INT 0
5432: ST_TO_ADDR
// sBunker := false ;
5433: LD_ADDR_EXP 65
5437: PUSH
5438: LD_INT 0
5440: ST_TO_ADDR
// sHack := false ;
5441: LD_ADDR_EXP 66
5445: PUSH
5446: LD_INT 0
5448: ST_TO_ADDR
// sFire := false ;
5449: LD_ADDR_EXP 67
5453: PUSH
5454: LD_INT 0
5456: ST_TO_ADDR
// sRefresh := false ;
5457: LD_ADDR_EXP 68
5461: PUSH
5462: LD_INT 0
5464: ST_TO_ADDR
// sExp := false ;
5465: LD_ADDR_EXP 69
5469: PUSH
5470: LD_INT 0
5472: ST_TO_ADDR
// sDepot := false ;
5473: LD_ADDR_EXP 70
5477: PUSH
5478: LD_INT 0
5480: ST_TO_ADDR
// sFlag := false ;
5481: LD_ADDR_EXP 71
5485: PUSH
5486: LD_INT 0
5488: ST_TO_ADDR
// sKamikadze := false ;
5489: LD_ADDR_EXP 79
5493: PUSH
5494: LD_INT 0
5496: ST_TO_ADDR
// sTroll := false ;
5497: LD_ADDR_EXP 80
5501: PUSH
5502: LD_INT 0
5504: ST_TO_ADDR
// sSlow := false ;
5505: LD_ADDR_EXP 81
5509: PUSH
5510: LD_INT 0
5512: ST_TO_ADDR
// sLack := false ;
5513: LD_ADDR_EXP 82
5517: PUSH
5518: LD_INT 0
5520: ST_TO_ADDR
// sTank := false ;
5521: LD_ADDR_EXP 84
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// sRemote := false ;
5529: LD_ADDR_EXP 85
5533: PUSH
5534: LD_INT 0
5536: ST_TO_ADDR
// sPowell := false ;
5537: LD_ADDR_EXP 86
5541: PUSH
5542: LD_INT 0
5544: ST_TO_ADDR
// sTeleport := false ;
5545: LD_ADDR_EXP 89
5549: PUSH
5550: LD_INT 0
5552: ST_TO_ADDR
// sOilTower := false ;
5553: LD_ADDR_EXP 91
5557: PUSH
5558: LD_INT 0
5560: ST_TO_ADDR
// sShovel := false ;
5561: LD_ADDR_EXP 92
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
// sSheik := false ;
5569: LD_ADDR_EXP 93
5573: PUSH
5574: LD_INT 0
5576: ST_TO_ADDR
// sEarthquake := false ;
5577: LD_ADDR_EXP 95
5581: PUSH
5582: LD_INT 0
5584: ST_TO_ADDR
// sAI := false ;
5585: LD_ADDR_EXP 96
5589: PUSH
5590: LD_INT 0
5592: ST_TO_ADDR
// sCargo := false ;
5593: LD_ADDR_EXP 99
5597: PUSH
5598: LD_INT 0
5600: ST_TO_ADDR
// sDLaser := false ;
5601: LD_ADDR_EXP 100
5605: PUSH
5606: LD_INT 0
5608: ST_TO_ADDR
// sExchange := false ;
5609: LD_ADDR_EXP 101
5613: PUSH
5614: LD_INT 0
5616: ST_TO_ADDR
// sFac := false ;
5617: LD_ADDR_EXP 102
5621: PUSH
5622: LD_INT 0
5624: ST_TO_ADDR
// sPower := false ;
5625: LD_ADDR_EXP 103
5629: PUSH
5630: LD_INT 0
5632: ST_TO_ADDR
// sRandom := false ;
5633: LD_ADDR_EXP 104
5637: PUSH
5638: LD_INT 0
5640: ST_TO_ADDR
// sShield := false ;
5641: LD_ADDR_EXP 105
5645: PUSH
5646: LD_INT 0
5648: ST_TO_ADDR
// sTime := false ;
5649: LD_ADDR_EXP 106
5653: PUSH
5654: LD_INT 0
5656: ST_TO_ADDR
// sTools := false ;
5657: LD_ADDR_EXP 107
5661: PUSH
5662: LD_INT 0
5664: ST_TO_ADDR
// sSold := false ;
5665: LD_ADDR_EXP 72
5669: PUSH
5670: LD_INT 0
5672: ST_TO_ADDR
// sDiff := false ;
5673: LD_ADDR_EXP 73
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// sFog := false ;
5681: LD_ADDR_EXP 76
5685: PUSH
5686: LD_INT 0
5688: ST_TO_ADDR
// sReset := false ;
5689: LD_ADDR_EXP 77
5693: PUSH
5694: LD_INT 0
5696: ST_TO_ADDR
// sSun := false ;
5697: LD_ADDR_EXP 78
5701: PUSH
5702: LD_INT 0
5704: ST_TO_ADDR
// sTiger := false ;
5705: LD_ADDR_EXP 74
5709: PUSH
5710: LD_INT 0
5712: ST_TO_ADDR
// sBomb := false ;
5713: LD_ADDR_EXP 75
5717: PUSH
5718: LD_INT 0
5720: ST_TO_ADDR
// sWound := false ;
5721: LD_ADDR_EXP 83
5725: PUSH
5726: LD_INT 0
5728: ST_TO_ADDR
// sBetray := false ;
5729: LD_ADDR_EXP 87
5733: PUSH
5734: LD_INT 0
5736: ST_TO_ADDR
// sContamin := false ;
5737: LD_ADDR_EXP 88
5741: PUSH
5742: LD_INT 0
5744: ST_TO_ADDR
// sOil := false ;
5745: LD_ADDR_EXP 90
5749: PUSH
5750: LD_INT 0
5752: ST_TO_ADDR
// sStu := false ;
5753: LD_ADDR_EXP 94
5757: PUSH
5758: LD_INT 0
5760: ST_TO_ADDR
// sBazooka := false ;
5761: LD_ADDR_EXP 97
5765: PUSH
5766: LD_INT 0
5768: ST_TO_ADDR
// sMortar := false ;
5769: LD_ADDR_EXP 98
5773: PUSH
5774: LD_INT 0
5776: ST_TO_ADDR
// sRanger := false ;
5777: LD_ADDR_EXP 108
5781: PUSH
5782: LD_INT 0
5784: ST_TO_ADDR
// end ;
5785: LD_VAR 0 1
5789: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5790: LD_INT 0
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
// result := [ ] ;
5797: LD_ADDR_VAR 0 1
5801: PUSH
5802: EMPTY
5803: ST_TO_ADDR
// if campaign_id = 1 then
5804: LD_OWVAR 69
5808: PUSH
5809: LD_INT 1
5811: EQUAL
5812: IFFALSE 8750
// begin case mission_number of 1 :
5814: LD_OWVAR 70
5818: PUSH
5819: LD_INT 1
5821: DOUBLE
5822: EQUAL
5823: IFTRUE 5827
5825: GO 5891
5827: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5828: LD_ADDR_VAR 0 1
5832: PUSH
5833: LD_INT 2
5835: PUSH
5836: LD_INT 4
5838: PUSH
5839: LD_INT 11
5841: PUSH
5842: LD_INT 12
5844: PUSH
5845: LD_INT 15
5847: PUSH
5848: LD_INT 16
5850: PUSH
5851: LD_INT 22
5853: PUSH
5854: LD_INT 23
5856: PUSH
5857: LD_INT 26
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 101
5873: PUSH
5874: LD_INT 102
5876: PUSH
5877: LD_INT 106
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: ST_TO_ADDR
5889: GO 8748
5891: LD_INT 2
5893: DOUBLE
5894: EQUAL
5895: IFTRUE 5899
5897: GO 5971
5899: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5900: LD_ADDR_VAR 0 1
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: LD_INT 4
5910: PUSH
5911: LD_INT 11
5913: PUSH
5914: LD_INT 12
5916: PUSH
5917: LD_INT 15
5919: PUSH
5920: LD_INT 16
5922: PUSH
5923: LD_INT 22
5925: PUSH
5926: LD_INT 23
5928: PUSH
5929: LD_INT 26
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 101
5945: PUSH
5946: LD_INT 102
5948: PUSH
5949: LD_INT 105
5951: PUSH
5952: LD_INT 106
5954: PUSH
5955: LD_INT 108
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: ST_TO_ADDR
5969: GO 8748
5971: LD_INT 3
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5979
5977: GO 6055
5979: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5980: LD_ADDR_VAR 0 1
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 4
5990: PUSH
5991: LD_INT 5
5993: PUSH
5994: LD_INT 11
5996: PUSH
5997: LD_INT 12
5999: PUSH
6000: LD_INT 15
6002: PUSH
6003: LD_INT 16
6005: PUSH
6006: LD_INT 22
6008: PUSH
6009: LD_INT 26
6011: PUSH
6012: LD_INT 36
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 101
6029: PUSH
6030: LD_INT 102
6032: PUSH
6033: LD_INT 105
6035: PUSH
6036: LD_INT 106
6038: PUSH
6039: LD_INT 108
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: ST_TO_ADDR
6053: GO 8748
6055: LD_INT 4
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6147
6063: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6064: LD_ADDR_VAR 0 1
6068: PUSH
6069: LD_INT 2
6071: PUSH
6072: LD_INT 4
6074: PUSH
6075: LD_INT 5
6077: PUSH
6078: LD_INT 8
6080: PUSH
6081: LD_INT 11
6083: PUSH
6084: LD_INT 12
6086: PUSH
6087: LD_INT 15
6089: PUSH
6090: LD_INT 16
6092: PUSH
6093: LD_INT 22
6095: PUSH
6096: LD_INT 23
6098: PUSH
6099: LD_INT 26
6101: PUSH
6102: LD_INT 36
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 101
6121: PUSH
6122: LD_INT 102
6124: PUSH
6125: LD_INT 105
6127: PUSH
6128: LD_INT 106
6130: PUSH
6131: LD_INT 108
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: ST_TO_ADDR
6145: GO 8748
6147: LD_INT 5
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6255
6155: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6156: LD_ADDR_VAR 0 1
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 4
6166: PUSH
6167: LD_INT 5
6169: PUSH
6170: LD_INT 6
6172: PUSH
6173: LD_INT 8
6175: PUSH
6176: LD_INT 11
6178: PUSH
6179: LD_INT 12
6181: PUSH
6182: LD_INT 15
6184: PUSH
6185: LD_INT 16
6187: PUSH
6188: LD_INT 22
6190: PUSH
6191: LD_INT 23
6193: PUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 26
6199: PUSH
6200: LD_INT 36
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 101
6221: PUSH
6222: LD_INT 102
6224: PUSH
6225: LD_INT 105
6227: PUSH
6228: LD_INT 106
6230: PUSH
6231: LD_INT 108
6233: PUSH
6234: LD_INT 109
6236: PUSH
6237: LD_INT 112
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: ST_TO_ADDR
6253: GO 8748
6255: LD_INT 6
6257: DOUBLE
6258: EQUAL
6259: IFTRUE 6263
6261: GO 6383
6263: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6264: LD_ADDR_VAR 0 1
6268: PUSH
6269: LD_INT 2
6271: PUSH
6272: LD_INT 4
6274: PUSH
6275: LD_INT 5
6277: PUSH
6278: LD_INT 6
6280: PUSH
6281: LD_INT 8
6283: PUSH
6284: LD_INT 11
6286: PUSH
6287: LD_INT 12
6289: PUSH
6290: LD_INT 15
6292: PUSH
6293: LD_INT 16
6295: PUSH
6296: LD_INT 20
6298: PUSH
6299: LD_INT 21
6301: PUSH
6302: LD_INT 22
6304: PUSH
6305: LD_INT 23
6307: PUSH
6308: LD_INT 25
6310: PUSH
6311: LD_INT 26
6313: PUSH
6314: LD_INT 30
6316: PUSH
6317: LD_INT 31
6319: PUSH
6320: LD_INT 32
6322: PUSH
6323: LD_INT 36
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: PUSH
6347: LD_INT 101
6349: PUSH
6350: LD_INT 102
6352: PUSH
6353: LD_INT 105
6355: PUSH
6356: LD_INT 106
6358: PUSH
6359: LD_INT 108
6361: PUSH
6362: LD_INT 109
6364: PUSH
6365: LD_INT 112
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: ST_TO_ADDR
6381: GO 8748
6383: LD_INT 7
6385: DOUBLE
6386: EQUAL
6387: IFTRUE 6391
6389: GO 6491
6391: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6392: LD_ADDR_VAR 0 1
6396: PUSH
6397: LD_INT 2
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: LD_INT 5
6405: PUSH
6406: LD_INT 7
6408: PUSH
6409: LD_INT 11
6411: PUSH
6412: LD_INT 12
6414: PUSH
6415: LD_INT 15
6417: PUSH
6418: LD_INT 16
6420: PUSH
6421: LD_INT 20
6423: PUSH
6424: LD_INT 21
6426: PUSH
6427: LD_INT 22
6429: PUSH
6430: LD_INT 23
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 26
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 101
6457: PUSH
6458: LD_INT 102
6460: PUSH
6461: LD_INT 103
6463: PUSH
6464: LD_INT 105
6466: PUSH
6467: LD_INT 106
6469: PUSH
6470: LD_INT 108
6472: PUSH
6473: LD_INT 112
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: ST_TO_ADDR
6489: GO 8748
6491: LD_INT 8
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6499
6497: GO 6627
6499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6500: LD_ADDR_VAR 0 1
6504: PUSH
6505: LD_INT 2
6507: PUSH
6508: LD_INT 4
6510: PUSH
6511: LD_INT 5
6513: PUSH
6514: LD_INT 6
6516: PUSH
6517: LD_INT 7
6519: PUSH
6520: LD_INT 8
6522: PUSH
6523: LD_INT 11
6525: PUSH
6526: LD_INT 12
6528: PUSH
6529: LD_INT 15
6531: PUSH
6532: LD_INT 16
6534: PUSH
6535: LD_INT 20
6537: PUSH
6538: LD_INT 21
6540: PUSH
6541: LD_INT 22
6543: PUSH
6544: LD_INT 23
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 26
6552: PUSH
6553: LD_INT 30
6555: PUSH
6556: LD_INT 31
6558: PUSH
6559: LD_INT 32
6561: PUSH
6562: LD_INT 36
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 101
6589: PUSH
6590: LD_INT 102
6592: PUSH
6593: LD_INT 103
6595: PUSH
6596: LD_INT 105
6598: PUSH
6599: LD_INT 106
6601: PUSH
6602: LD_INT 108
6604: PUSH
6605: LD_INT 109
6607: PUSH
6608: LD_INT 112
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: ST_TO_ADDR
6625: GO 8748
6627: LD_INT 9
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6771
6635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6636: LD_ADDR_VAR 0 1
6640: PUSH
6641: LD_INT 2
6643: PUSH
6644: LD_INT 4
6646: PUSH
6647: LD_INT 5
6649: PUSH
6650: LD_INT 6
6652: PUSH
6653: LD_INT 7
6655: PUSH
6656: LD_INT 8
6658: PUSH
6659: LD_INT 11
6661: PUSH
6662: LD_INT 12
6664: PUSH
6665: LD_INT 15
6667: PUSH
6668: LD_INT 16
6670: PUSH
6671: LD_INT 20
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_INT 23
6682: PUSH
6683: LD_INT 25
6685: PUSH
6686: LD_INT 26
6688: PUSH
6689: LD_INT 28
6691: PUSH
6692: LD_INT 30
6694: PUSH
6695: LD_INT 31
6697: PUSH
6698: LD_INT 32
6700: PUSH
6701: LD_INT 36
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 101
6729: PUSH
6730: LD_INT 102
6732: PUSH
6733: LD_INT 103
6735: PUSH
6736: LD_INT 105
6738: PUSH
6739: LD_INT 106
6741: PUSH
6742: LD_INT 108
6744: PUSH
6745: LD_INT 109
6747: PUSH
6748: LD_INT 112
6750: PUSH
6751: LD_INT 114
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: ST_TO_ADDR
6769: GO 8748
6771: LD_INT 10
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6963
6779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6780: LD_ADDR_VAR 0 1
6784: PUSH
6785: LD_INT 2
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 6
6796: PUSH
6797: LD_INT 7
6799: PUSH
6800: LD_INT 8
6802: PUSH
6803: LD_INT 9
6805: PUSH
6806: LD_INT 10
6808: PUSH
6809: LD_INT 11
6811: PUSH
6812: LD_INT 12
6814: PUSH
6815: LD_INT 13
6817: PUSH
6818: LD_INT 14
6820: PUSH
6821: LD_INT 15
6823: PUSH
6824: LD_INT 16
6826: PUSH
6827: LD_INT 17
6829: PUSH
6830: LD_INT 18
6832: PUSH
6833: LD_INT 19
6835: PUSH
6836: LD_INT 20
6838: PUSH
6839: LD_INT 21
6841: PUSH
6842: LD_INT 22
6844: PUSH
6845: LD_INT 23
6847: PUSH
6848: LD_INT 24
6850: PUSH
6851: LD_INT 25
6853: PUSH
6854: LD_INT 26
6856: PUSH
6857: LD_INT 28
6859: PUSH
6860: LD_INT 30
6862: PUSH
6863: LD_INT 31
6865: PUSH
6866: LD_INT 32
6868: PUSH
6869: LD_INT 36
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 101
6905: PUSH
6906: LD_INT 102
6908: PUSH
6909: LD_INT 103
6911: PUSH
6912: LD_INT 104
6914: PUSH
6915: LD_INT 105
6917: PUSH
6918: LD_INT 106
6920: PUSH
6921: LD_INT 107
6923: PUSH
6924: LD_INT 108
6926: PUSH
6927: LD_INT 109
6929: PUSH
6930: LD_INT 110
6932: PUSH
6933: LD_INT 111
6935: PUSH
6936: LD_INT 112
6938: PUSH
6939: LD_INT 114
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: ST_TO_ADDR
6961: GO 8748
6963: LD_INT 11
6965: DOUBLE
6966: EQUAL
6967: IFTRUE 6971
6969: GO 7163
6971: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6972: LD_ADDR_VAR 0 1
6976: PUSH
6977: LD_INT 2
6979: PUSH
6980: LD_INT 3
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: LD_INT 5
6988: PUSH
6989: LD_INT 6
6991: PUSH
6992: LD_INT 7
6994: PUSH
6995: LD_INT 8
6997: PUSH
6998: LD_INT 9
7000: PUSH
7001: LD_INT 10
7003: PUSH
7004: LD_INT 11
7006: PUSH
7007: LD_INT 12
7009: PUSH
7010: LD_INT 13
7012: PUSH
7013: LD_INT 14
7015: PUSH
7016: LD_INT 15
7018: PUSH
7019: LD_INT 16
7021: PUSH
7022: LD_INT 17
7024: PUSH
7025: LD_INT 18
7027: PUSH
7028: LD_INT 19
7030: PUSH
7031: LD_INT 20
7033: PUSH
7034: LD_INT 21
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 23
7042: PUSH
7043: LD_INT 24
7045: PUSH
7046: LD_INT 25
7048: PUSH
7049: LD_INT 26
7051: PUSH
7052: LD_INT 28
7054: PUSH
7055: LD_INT 30
7057: PUSH
7058: LD_INT 31
7060: PUSH
7061: LD_INT 32
7063: PUSH
7064: LD_INT 34
7066: PUSH
7067: LD_INT 36
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 101
7105: PUSH
7106: LD_INT 102
7108: PUSH
7109: LD_INT 103
7111: PUSH
7112: LD_INT 104
7114: PUSH
7115: LD_INT 105
7117: PUSH
7118: LD_INT 106
7120: PUSH
7121: LD_INT 107
7123: PUSH
7124: LD_INT 108
7126: PUSH
7127: LD_INT 109
7129: PUSH
7130: LD_INT 110
7132: PUSH
7133: LD_INT 111
7135: PUSH
7136: LD_INT 112
7138: PUSH
7139: LD_INT 114
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: ST_TO_ADDR
7161: GO 8748
7163: LD_INT 12
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7379
7171: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7172: LD_ADDR_VAR 0 1
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: LD_INT 4
7188: PUSH
7189: LD_INT 5
7191: PUSH
7192: LD_INT 6
7194: PUSH
7195: LD_INT 7
7197: PUSH
7198: LD_INT 8
7200: PUSH
7201: LD_INT 9
7203: PUSH
7204: LD_INT 10
7206: PUSH
7207: LD_INT 11
7209: PUSH
7210: LD_INT 12
7212: PUSH
7213: LD_INT 13
7215: PUSH
7216: LD_INT 14
7218: PUSH
7219: LD_INT 15
7221: PUSH
7222: LD_INT 16
7224: PUSH
7225: LD_INT 17
7227: PUSH
7228: LD_INT 18
7230: PUSH
7231: LD_INT 19
7233: PUSH
7234: LD_INT 20
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 24
7248: PUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 26
7254: PUSH
7255: LD_INT 27
7257: PUSH
7258: LD_INT 28
7260: PUSH
7261: LD_INT 30
7263: PUSH
7264: LD_INT 31
7266: PUSH
7267: LD_INT 32
7269: PUSH
7270: LD_INT 33
7272: PUSH
7273: LD_INT 34
7275: PUSH
7276: LD_INT 36
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 101
7317: PUSH
7318: LD_INT 102
7320: PUSH
7321: LD_INT 103
7323: PUSH
7324: LD_INT 104
7326: PUSH
7327: LD_INT 105
7329: PUSH
7330: LD_INT 106
7332: PUSH
7333: LD_INT 107
7335: PUSH
7336: LD_INT 108
7338: PUSH
7339: LD_INT 109
7341: PUSH
7342: LD_INT 110
7344: PUSH
7345: LD_INT 111
7347: PUSH
7348: LD_INT 112
7350: PUSH
7351: LD_INT 113
7353: PUSH
7354: LD_INT 114
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: ST_TO_ADDR
7377: GO 8748
7379: LD_INT 13
7381: DOUBLE
7382: EQUAL
7383: IFTRUE 7387
7385: GO 7583
7387: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7388: LD_ADDR_VAR 0 1
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 4
7404: PUSH
7405: LD_INT 5
7407: PUSH
7408: LD_INT 8
7410: PUSH
7411: LD_INT 9
7413: PUSH
7414: LD_INT 10
7416: PUSH
7417: LD_INT 11
7419: PUSH
7420: LD_INT 12
7422: PUSH
7423: LD_INT 14
7425: PUSH
7426: LD_INT 15
7428: PUSH
7429: LD_INT 16
7431: PUSH
7432: LD_INT 17
7434: PUSH
7435: LD_INT 18
7437: PUSH
7438: LD_INT 19
7440: PUSH
7441: LD_INT 20
7443: PUSH
7444: LD_INT 21
7446: PUSH
7447: LD_INT 22
7449: PUSH
7450: LD_INT 23
7452: PUSH
7453: LD_INT 24
7455: PUSH
7456: LD_INT 25
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 27
7464: PUSH
7465: LD_INT 28
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 31
7473: PUSH
7474: LD_INT 32
7476: PUSH
7477: LD_INT 33
7479: PUSH
7480: LD_INT 34
7482: PUSH
7483: LD_INT 36
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 101
7521: PUSH
7522: LD_INT 102
7524: PUSH
7525: LD_INT 103
7527: PUSH
7528: LD_INT 104
7530: PUSH
7531: LD_INT 105
7533: PUSH
7534: LD_INT 106
7536: PUSH
7537: LD_INT 107
7539: PUSH
7540: LD_INT 108
7542: PUSH
7543: LD_INT 109
7545: PUSH
7546: LD_INT 110
7548: PUSH
7549: LD_INT 111
7551: PUSH
7552: LD_INT 112
7554: PUSH
7555: LD_INT 113
7557: PUSH
7558: LD_INT 114
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: ST_TO_ADDR
7581: GO 8748
7583: LD_INT 14
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7803
7591: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7592: LD_ADDR_VAR 0 1
7596: PUSH
7597: LD_INT 1
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 5
7611: PUSH
7612: LD_INT 6
7614: PUSH
7615: LD_INT 7
7617: PUSH
7618: LD_INT 8
7620: PUSH
7621: LD_INT 9
7623: PUSH
7624: LD_INT 10
7626: PUSH
7627: LD_INT 11
7629: PUSH
7630: LD_INT 12
7632: PUSH
7633: LD_INT 13
7635: PUSH
7636: LD_INT 14
7638: PUSH
7639: LD_INT 15
7641: PUSH
7642: LD_INT 16
7644: PUSH
7645: LD_INT 17
7647: PUSH
7648: LD_INT 18
7650: PUSH
7651: LD_INT 19
7653: PUSH
7654: LD_INT 20
7656: PUSH
7657: LD_INT 21
7659: PUSH
7660: LD_INT 22
7662: PUSH
7663: LD_INT 23
7665: PUSH
7666: LD_INT 24
7668: PUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 26
7674: PUSH
7675: LD_INT 27
7677: PUSH
7678: LD_INT 28
7680: PUSH
7681: LD_INT 29
7683: PUSH
7684: LD_INT 30
7686: PUSH
7687: LD_INT 31
7689: PUSH
7690: LD_INT 32
7692: PUSH
7693: LD_INT 33
7695: PUSH
7696: LD_INT 34
7698: PUSH
7699: LD_INT 36
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 101
7741: PUSH
7742: LD_INT 102
7744: PUSH
7745: LD_INT 103
7747: PUSH
7748: LD_INT 104
7750: PUSH
7751: LD_INT 105
7753: PUSH
7754: LD_INT 106
7756: PUSH
7757: LD_INT 107
7759: PUSH
7760: LD_INT 108
7762: PUSH
7763: LD_INT 109
7765: PUSH
7766: LD_INT 110
7768: PUSH
7769: LD_INT 111
7771: PUSH
7772: LD_INT 112
7774: PUSH
7775: LD_INT 113
7777: PUSH
7778: LD_INT 114
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: ST_TO_ADDR
7801: GO 8748
7803: LD_INT 15
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7811
7809: GO 8023
7811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7812: LD_ADDR_VAR 0 1
7816: PUSH
7817: LD_INT 1
7819: PUSH
7820: LD_INT 2
7822: PUSH
7823: LD_INT 3
7825: PUSH
7826: LD_INT 4
7828: PUSH
7829: LD_INT 5
7831: PUSH
7832: LD_INT 6
7834: PUSH
7835: LD_INT 7
7837: PUSH
7838: LD_INT 8
7840: PUSH
7841: LD_INT 9
7843: PUSH
7844: LD_INT 10
7846: PUSH
7847: LD_INT 11
7849: PUSH
7850: LD_INT 12
7852: PUSH
7853: LD_INT 13
7855: PUSH
7856: LD_INT 14
7858: PUSH
7859: LD_INT 15
7861: PUSH
7862: LD_INT 16
7864: PUSH
7865: LD_INT 17
7867: PUSH
7868: LD_INT 18
7870: PUSH
7871: LD_INT 19
7873: PUSH
7874: LD_INT 20
7876: PUSH
7877: LD_INT 21
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 23
7885: PUSH
7886: LD_INT 24
7888: PUSH
7889: LD_INT 25
7891: PUSH
7892: LD_INT 26
7894: PUSH
7895: LD_INT 27
7897: PUSH
7898: LD_INT 28
7900: PUSH
7901: LD_INT 29
7903: PUSH
7904: LD_INT 30
7906: PUSH
7907: LD_INT 31
7909: PUSH
7910: LD_INT 32
7912: PUSH
7913: LD_INT 33
7915: PUSH
7916: LD_INT 34
7918: PUSH
7919: LD_INT 36
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 101
7961: PUSH
7962: LD_INT 102
7964: PUSH
7965: LD_INT 103
7967: PUSH
7968: LD_INT 104
7970: PUSH
7971: LD_INT 105
7973: PUSH
7974: LD_INT 106
7976: PUSH
7977: LD_INT 107
7979: PUSH
7980: LD_INT 108
7982: PUSH
7983: LD_INT 109
7985: PUSH
7986: LD_INT 110
7988: PUSH
7989: LD_INT 111
7991: PUSH
7992: LD_INT 112
7994: PUSH
7995: LD_INT 113
7997: PUSH
7998: LD_INT 114
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: ST_TO_ADDR
8021: GO 8748
8023: LD_INT 16
8025: DOUBLE
8026: EQUAL
8027: IFTRUE 8031
8029: GO 8155
8031: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8032: LD_ADDR_VAR 0 1
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 4
8042: PUSH
8043: LD_INT 5
8045: PUSH
8046: LD_INT 7
8048: PUSH
8049: LD_INT 11
8051: PUSH
8052: LD_INT 12
8054: PUSH
8055: LD_INT 15
8057: PUSH
8058: LD_INT 16
8060: PUSH
8061: LD_INT 20
8063: PUSH
8064: LD_INT 21
8066: PUSH
8067: LD_INT 22
8069: PUSH
8070: LD_INT 23
8072: PUSH
8073: LD_INT 25
8075: PUSH
8076: LD_INT 26
8078: PUSH
8079: LD_INT 30
8081: PUSH
8082: LD_INT 31
8084: PUSH
8085: LD_INT 32
8087: PUSH
8088: LD_INT 33
8090: PUSH
8091: LD_INT 34
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 101
8117: PUSH
8118: LD_INT 102
8120: PUSH
8121: LD_INT 103
8123: PUSH
8124: LD_INT 106
8126: PUSH
8127: LD_INT 108
8129: PUSH
8130: LD_INT 112
8132: PUSH
8133: LD_INT 113
8135: PUSH
8136: LD_INT 114
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: ST_TO_ADDR
8153: GO 8748
8155: LD_INT 17
8157: DOUBLE
8158: EQUAL
8159: IFTRUE 8163
8161: GO 8375
8163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8164: LD_ADDR_VAR 0 1
8168: PUSH
8169: LD_INT 1
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 3
8177: PUSH
8178: LD_INT 4
8180: PUSH
8181: LD_INT 5
8183: PUSH
8184: LD_INT 6
8186: PUSH
8187: LD_INT 7
8189: PUSH
8190: LD_INT 8
8192: PUSH
8193: LD_INT 9
8195: PUSH
8196: LD_INT 10
8198: PUSH
8199: LD_INT 11
8201: PUSH
8202: LD_INT 12
8204: PUSH
8205: LD_INT 13
8207: PUSH
8208: LD_INT 14
8210: PUSH
8211: LD_INT 15
8213: PUSH
8214: LD_INT 16
8216: PUSH
8217: LD_INT 17
8219: PUSH
8220: LD_INT 18
8222: PUSH
8223: LD_INT 19
8225: PUSH
8226: LD_INT 20
8228: PUSH
8229: LD_INT 21
8231: PUSH
8232: LD_INT 22
8234: PUSH
8235: LD_INT 23
8237: PUSH
8238: LD_INT 24
8240: PUSH
8241: LD_INT 25
8243: PUSH
8244: LD_INT 26
8246: PUSH
8247: LD_INT 27
8249: PUSH
8250: LD_INT 28
8252: PUSH
8253: LD_INT 29
8255: PUSH
8256: LD_INT 30
8258: PUSH
8259: LD_INT 31
8261: PUSH
8262: LD_INT 32
8264: PUSH
8265: LD_INT 33
8267: PUSH
8268: LD_INT 34
8270: PUSH
8271: LD_INT 36
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 101
8313: PUSH
8314: LD_INT 102
8316: PUSH
8317: LD_INT 103
8319: PUSH
8320: LD_INT 104
8322: PUSH
8323: LD_INT 105
8325: PUSH
8326: LD_INT 106
8328: PUSH
8329: LD_INT 107
8331: PUSH
8332: LD_INT 108
8334: PUSH
8335: LD_INT 109
8337: PUSH
8338: LD_INT 110
8340: PUSH
8341: LD_INT 111
8343: PUSH
8344: LD_INT 112
8346: PUSH
8347: LD_INT 113
8349: PUSH
8350: LD_INT 114
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: ST_TO_ADDR
8373: GO 8748
8375: LD_INT 18
8377: DOUBLE
8378: EQUAL
8379: IFTRUE 8383
8381: GO 8519
8383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8384: LD_ADDR_VAR 0 1
8388: PUSH
8389: LD_INT 2
8391: PUSH
8392: LD_INT 4
8394: PUSH
8395: LD_INT 5
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 11
8403: PUSH
8404: LD_INT 12
8406: PUSH
8407: LD_INT 15
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: LD_INT 20
8415: PUSH
8416: LD_INT 21
8418: PUSH
8419: LD_INT 22
8421: PUSH
8422: LD_INT 23
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 26
8430: PUSH
8431: LD_INT 30
8433: PUSH
8434: LD_INT 31
8436: PUSH
8437: LD_INT 32
8439: PUSH
8440: LD_INT 33
8442: PUSH
8443: LD_INT 34
8445: PUSH
8446: LD_INT 35
8448: PUSH
8449: LD_INT 36
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 101
8477: PUSH
8478: LD_INT 102
8480: PUSH
8481: LD_INT 103
8483: PUSH
8484: LD_INT 106
8486: PUSH
8487: LD_INT 108
8489: PUSH
8490: LD_INT 112
8492: PUSH
8493: LD_INT 113
8495: PUSH
8496: LD_INT 114
8498: PUSH
8499: LD_INT 115
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: ST_TO_ADDR
8517: GO 8748
8519: LD_INT 19
8521: DOUBLE
8522: EQUAL
8523: IFTRUE 8527
8525: GO 8747
8527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8528: LD_ADDR_VAR 0 1
8532: PUSH
8533: LD_INT 1
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: LD_INT 3
8541: PUSH
8542: LD_INT 4
8544: PUSH
8545: LD_INT 5
8547: PUSH
8548: LD_INT 6
8550: PUSH
8551: LD_INT 7
8553: PUSH
8554: LD_INT 8
8556: PUSH
8557: LD_INT 9
8559: PUSH
8560: LD_INT 10
8562: PUSH
8563: LD_INT 11
8565: PUSH
8566: LD_INT 12
8568: PUSH
8569: LD_INT 13
8571: PUSH
8572: LD_INT 14
8574: PUSH
8575: LD_INT 15
8577: PUSH
8578: LD_INT 16
8580: PUSH
8581: LD_INT 17
8583: PUSH
8584: LD_INT 18
8586: PUSH
8587: LD_INT 19
8589: PUSH
8590: LD_INT 20
8592: PUSH
8593: LD_INT 21
8595: PUSH
8596: LD_INT 22
8598: PUSH
8599: LD_INT 23
8601: PUSH
8602: LD_INT 24
8604: PUSH
8605: LD_INT 25
8607: PUSH
8608: LD_INT 26
8610: PUSH
8611: LD_INT 27
8613: PUSH
8614: LD_INT 28
8616: PUSH
8617: LD_INT 29
8619: PUSH
8620: LD_INT 30
8622: PUSH
8623: LD_INT 31
8625: PUSH
8626: LD_INT 32
8628: PUSH
8629: LD_INT 33
8631: PUSH
8632: LD_INT 34
8634: PUSH
8635: LD_INT 35
8637: PUSH
8638: LD_INT 36
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: PUSH
8679: LD_INT 101
8681: PUSH
8682: LD_INT 102
8684: PUSH
8685: LD_INT 103
8687: PUSH
8688: LD_INT 104
8690: PUSH
8691: LD_INT 105
8693: PUSH
8694: LD_INT 106
8696: PUSH
8697: LD_INT 107
8699: PUSH
8700: LD_INT 108
8702: PUSH
8703: LD_INT 109
8705: PUSH
8706: LD_INT 110
8708: PUSH
8709: LD_INT 111
8711: PUSH
8712: LD_INT 112
8714: PUSH
8715: LD_INT 113
8717: PUSH
8718: LD_INT 114
8720: PUSH
8721: LD_INT 115
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: ST_TO_ADDR
8745: GO 8748
8747: POP
// end else
8748: GO 8967
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8750: LD_ADDR_VAR 0 1
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: LD_INT 3
8763: PUSH
8764: LD_INT 4
8766: PUSH
8767: LD_INT 5
8769: PUSH
8770: LD_INT 6
8772: PUSH
8773: LD_INT 7
8775: PUSH
8776: LD_INT 8
8778: PUSH
8779: LD_INT 9
8781: PUSH
8782: LD_INT 10
8784: PUSH
8785: LD_INT 11
8787: PUSH
8788: LD_INT 12
8790: PUSH
8791: LD_INT 13
8793: PUSH
8794: LD_INT 14
8796: PUSH
8797: LD_INT 15
8799: PUSH
8800: LD_INT 16
8802: PUSH
8803: LD_INT 17
8805: PUSH
8806: LD_INT 18
8808: PUSH
8809: LD_INT 19
8811: PUSH
8812: LD_INT 20
8814: PUSH
8815: LD_INT 21
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_INT 23
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: LD_INT 25
8829: PUSH
8830: LD_INT 26
8832: PUSH
8833: LD_INT 27
8835: PUSH
8836: LD_INT 28
8838: PUSH
8839: LD_INT 29
8841: PUSH
8842: LD_INT 30
8844: PUSH
8845: LD_INT 31
8847: PUSH
8848: LD_INT 32
8850: PUSH
8851: LD_INT 33
8853: PUSH
8854: LD_INT 34
8856: PUSH
8857: LD_INT 35
8859: PUSH
8860: LD_INT 36
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: PUSH
8901: LD_INT 101
8903: PUSH
8904: LD_INT 102
8906: PUSH
8907: LD_INT 103
8909: PUSH
8910: LD_INT 104
8912: PUSH
8913: LD_INT 105
8915: PUSH
8916: LD_INT 106
8918: PUSH
8919: LD_INT 107
8921: PUSH
8922: LD_INT 108
8924: PUSH
8925: LD_INT 109
8927: PUSH
8928: LD_INT 110
8930: PUSH
8931: LD_INT 111
8933: PUSH
8934: LD_INT 112
8936: PUSH
8937: LD_INT 113
8939: PUSH
8940: LD_INT 114
8942: PUSH
8943: LD_INT 115
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: ST_TO_ADDR
// if result then
8967: LD_VAR 0 1
8971: IFFALSE 9260
// begin normal :=  ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_STRING 
8980: ST_TO_ADDR
// hardcore :=  ;
8981: LD_ADDR_VAR 0 4
8985: PUSH
8986: LD_STRING 
8988: ST_TO_ADDR
// for i = 1 to normalCounter do
8989: LD_ADDR_VAR 0 5
8993: PUSH
8994: DOUBLE
8995: LD_INT 1
8997: DEC
8998: ST_TO_ADDR
8999: LD_EXP 56
9003: PUSH
9004: FOR_TO
9005: IFFALSE 9106
// begin tmp := 0 ;
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_STRING 0
9014: ST_TO_ADDR
// if result [ 1 ] then
9015: LD_VAR 0 1
9019: PUSH
9020: LD_INT 1
9022: ARRAY
9023: IFFALSE 9088
// if result [ 1 ] [ 1 ] = i then
9025: LD_VAR 0 1
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PUSH
9038: LD_VAR 0 5
9042: EQUAL
9043: IFFALSE 9088
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9045: LD_ADDR_VAR 0 1
9049: PUSH
9050: LD_VAR 0 1
9054: PPUSH
9055: LD_INT 1
9057: PPUSH
9058: LD_VAR 0 1
9062: PUSH
9063: LD_INT 1
9065: ARRAY
9066: PPUSH
9067: LD_INT 1
9069: PPUSH
9070: CALL_OW 3
9074: PPUSH
9075: CALL_OW 1
9079: ST_TO_ADDR
// tmp := 1 ;
9080: LD_ADDR_VAR 0 2
9084: PUSH
9085: LD_STRING 1
9087: ST_TO_ADDR
// end ; normal := normal & tmp ;
9088: LD_ADDR_VAR 0 3
9092: PUSH
9093: LD_VAR 0 3
9097: PUSH
9098: LD_VAR 0 2
9102: STR
9103: ST_TO_ADDR
// end ;
9104: GO 9004
9106: POP
9107: POP
// for i = 1 to hardcoreCounter do
9108: LD_ADDR_VAR 0 5
9112: PUSH
9113: DOUBLE
9114: LD_INT 1
9116: DEC
9117: ST_TO_ADDR
9118: LD_EXP 57
9122: PUSH
9123: FOR_TO
9124: IFFALSE 9229
// begin tmp := 0 ;
9126: LD_ADDR_VAR 0 2
9130: PUSH
9131: LD_STRING 0
9133: ST_TO_ADDR
// if result [ 2 ] then
9134: LD_VAR 0 1
9138: PUSH
9139: LD_INT 2
9141: ARRAY
9142: IFFALSE 9211
// if result [ 2 ] [ 1 ] = 100 + i then
9144: LD_VAR 0 1
9148: PUSH
9149: LD_INT 2
9151: ARRAY
9152: PUSH
9153: LD_INT 1
9155: ARRAY
9156: PUSH
9157: LD_INT 100
9159: PUSH
9160: LD_VAR 0 5
9164: PLUS
9165: EQUAL
9166: IFFALSE 9211
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9168: LD_ADDR_VAR 0 1
9172: PUSH
9173: LD_VAR 0 1
9177: PPUSH
9178: LD_INT 2
9180: PPUSH
9181: LD_VAR 0 1
9185: PUSH
9186: LD_INT 2
9188: ARRAY
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL_OW 3
9197: PPUSH
9198: CALL_OW 1
9202: ST_TO_ADDR
// tmp := 1 ;
9203: LD_ADDR_VAR 0 2
9207: PUSH
9208: LD_STRING 1
9210: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9211: LD_ADDR_VAR 0 4
9215: PUSH
9216: LD_VAR 0 4
9220: PUSH
9221: LD_VAR 0 2
9225: STR
9226: ST_TO_ADDR
// end ;
9227: GO 9123
9229: POP
9230: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9231: LD_STRING getStreamItemsFromMission("
9233: PUSH
9234: LD_VAR 0 3
9238: STR
9239: PUSH
9240: LD_STRING ","
9242: STR
9243: PUSH
9244: LD_VAR 0 4
9248: STR
9249: PUSH
9250: LD_STRING ")
9252: STR
9253: PPUSH
9254: CALL_OW 559
// end else
9258: GO 9267
// ToLua ( getStreamItemsFromMission("","") ) ;
9260: LD_STRING getStreamItemsFromMission("","")
9262: PPUSH
9263: CALL_OW 559
// end ;
9267: LD_VAR 0 1
9271: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9272: LD_EXP 55
9276: PUSH
9277: LD_EXP 60
9281: AND
9282: IFFALSE 9406
9284: GO 9286
9286: DISABLE
9287: LD_INT 0
9289: PPUSH
9290: PPUSH
// begin enable ;
9291: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_INT 22
9299: PUSH
9300: LD_OWVAR 2
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 2
9311: PUSH
9312: LD_INT 34
9314: PUSH
9315: LD_INT 7
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: LD_INT 34
9324: PUSH
9325: LD_INT 45
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 34
9334: PUSH
9335: LD_INT 28
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 34
9344: PUSH
9345: LD_INT 47
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: ST_TO_ADDR
// if not tmp then
9368: LD_VAR 0 2
9372: NOT
9373: IFFALSE 9377
// exit ;
9375: GO 9406
// for i in tmp do
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: LD_VAR 0 2
9386: PUSH
9387: FOR_IN
9388: IFFALSE 9404
// begin SetLives ( i , 0 ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: LD_INT 0
9397: PPUSH
9398: CALL_OW 234
// end ;
9402: GO 9387
9404: POP
9405: POP
// end ;
9406: PPOPN 2
9408: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9409: LD_EXP 55
9413: PUSH
9414: LD_EXP 61
9418: AND
9419: IFFALSE 9503
9421: GO 9423
9423: DISABLE
9424: LD_INT 0
9426: PPUSH
9427: PPUSH
// begin enable ;
9428: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9429: LD_ADDR_VAR 0 2
9433: PUSH
9434: LD_INT 22
9436: PUSH
9437: LD_OWVAR 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 32
9448: PUSH
9449: LD_INT 3
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 69
9464: ST_TO_ADDR
// if not tmp then
9465: LD_VAR 0 2
9469: NOT
9470: IFFALSE 9474
// exit ;
9472: GO 9503
// for i in tmp do
9474: LD_ADDR_VAR 0 1
9478: PUSH
9479: LD_VAR 0 2
9483: PUSH
9484: FOR_IN
9485: IFFALSE 9501
// begin SetLives ( i , 0 ) ;
9487: LD_VAR 0 1
9491: PPUSH
9492: LD_INT 0
9494: PPUSH
9495: CALL_OW 234
// end ;
9499: GO 9484
9501: POP
9502: POP
// end ;
9503: PPOPN 2
9505: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9506: LD_EXP 55
9510: PUSH
9511: LD_EXP 58
9515: AND
9516: IFFALSE 9609
9518: GO 9520
9520: DISABLE
9521: LD_INT 0
9523: PPUSH
// begin enable ;
9524: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9525: LD_ADDR_VAR 0 1
9529: PUSH
9530: LD_INT 22
9532: PUSH
9533: LD_OWVAR 2
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 2
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 9
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 25
9567: PUSH
9568: LD_INT 8
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 69
9589: PUSH
9590: FOR_IN
9591: IFFALSE 9607
// begin SetClass ( i , 1 ) ;
9593: LD_VAR 0 1
9597: PPUSH
9598: LD_INT 1
9600: PPUSH
9601: CALL_OW 336
// end ;
9605: GO 9590
9607: POP
9608: POP
// end ;
9609: PPOPN 1
9611: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9612: LD_EXP 55
9616: PUSH
9617: LD_EXP 59
9621: AND
9622: PUSH
9623: LD_OWVAR 65
9627: PUSH
9628: LD_INT 7
9630: LESS
9631: AND
9632: IFFALSE 9646
9634: GO 9636
9636: DISABLE
// begin enable ;
9637: ENABLE
// game_speed := 7 ;
9638: LD_ADDR_OWVAR 65
9642: PUSH
9643: LD_INT 7
9645: ST_TO_ADDR
// end ;
9646: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9647: LD_EXP 55
9651: PUSH
9652: LD_EXP 62
9656: AND
9657: IFFALSE 9859
9659: GO 9661
9661: DISABLE
9662: LD_INT 0
9664: PPUSH
9665: PPUSH
9666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9667: LD_ADDR_VAR 0 3
9671: PUSH
9672: LD_INT 81
9674: PUSH
9675: LD_OWVAR 2
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 1
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PPUSH
9698: CALL_OW 69
9702: ST_TO_ADDR
// if not tmp then
9703: LD_VAR 0 3
9707: NOT
9708: IFFALSE 9712
// exit ;
9710: GO 9859
// if tmp > 5 then
9712: LD_VAR 0 3
9716: PUSH
9717: LD_INT 5
9719: GREATER
9720: IFFALSE 9732
// k := 5 else
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: LD_INT 5
9729: ST_TO_ADDR
9730: GO 9742
// k := tmp ;
9732: LD_ADDR_VAR 0 2
9736: PUSH
9737: LD_VAR 0 3
9741: ST_TO_ADDR
// for i := 1 to k do
9742: LD_ADDR_VAR 0 1
9746: PUSH
9747: DOUBLE
9748: LD_INT 1
9750: DEC
9751: ST_TO_ADDR
9752: LD_VAR 0 2
9756: PUSH
9757: FOR_TO
9758: IFFALSE 9857
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9760: LD_VAR 0 3
9764: PUSH
9765: LD_VAR 0 1
9769: ARRAY
9770: PPUSH
9771: LD_VAR 0 1
9775: PUSH
9776: LD_INT 4
9778: MOD
9779: PUSH
9780: LD_INT 1
9782: PLUS
9783: PPUSH
9784: CALL_OW 259
9788: PUSH
9789: LD_INT 10
9791: LESS
9792: IFFALSE 9855
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9794: LD_VAR 0 3
9798: PUSH
9799: LD_VAR 0 1
9803: ARRAY
9804: PPUSH
9805: LD_VAR 0 1
9809: PUSH
9810: LD_INT 4
9812: MOD
9813: PUSH
9814: LD_INT 1
9816: PLUS
9817: PPUSH
9818: LD_VAR 0 3
9822: PUSH
9823: LD_VAR 0 1
9827: ARRAY
9828: PPUSH
9829: LD_VAR 0 1
9833: PUSH
9834: LD_INT 4
9836: MOD
9837: PUSH
9838: LD_INT 1
9840: PLUS
9841: PPUSH
9842: CALL_OW 259
9846: PUSH
9847: LD_INT 1
9849: PLUS
9850: PPUSH
9851: CALL_OW 237
9855: GO 9757
9857: POP
9858: POP
// end ;
9859: PPOPN 3
9861: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9862: LD_EXP 55
9866: PUSH
9867: LD_EXP 63
9871: AND
9872: IFFALSE 9892
9874: GO 9876
9876: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9877: LD_INT 4
9879: PPUSH
9880: LD_OWVAR 2
9884: PPUSH
9885: LD_INT 0
9887: PPUSH
9888: CALL_OW 324
9892: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9893: LD_EXP 55
9897: PUSH
9898: LD_EXP 92
9902: AND
9903: IFFALSE 9923
9905: GO 9907
9907: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9908: LD_INT 19
9910: PPUSH
9911: LD_OWVAR 2
9915: PPUSH
9916: LD_INT 0
9918: PPUSH
9919: CALL_OW 324
9923: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9924: LD_EXP 55
9928: PUSH
9929: LD_EXP 64
9933: AND
9934: IFFALSE 10036
9936: GO 9938
9938: DISABLE
9939: LD_INT 0
9941: PPUSH
9942: PPUSH
// begin enable ;
9943: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9944: LD_ADDR_VAR 0 2
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_OWVAR 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: LD_INT 34
9966: PUSH
9967: LD_INT 11
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 34
9976: PUSH
9977: LD_INT 30
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PPUSH
9993: CALL_OW 69
9997: ST_TO_ADDR
// if not tmp then
9998: LD_VAR 0 2
10002: NOT
10003: IFFALSE 10007
// exit ;
10005: GO 10036
// for i in tmp do
10007: LD_ADDR_VAR 0 1
10011: PUSH
10012: LD_VAR 0 2
10016: PUSH
10017: FOR_IN
10018: IFFALSE 10034
// begin SetLives ( i , 0 ) ;
10020: LD_VAR 0 1
10024: PPUSH
10025: LD_INT 0
10027: PPUSH
10028: CALL_OW 234
// end ;
10032: GO 10017
10034: POP
10035: POP
// end ;
10036: PPOPN 2
10038: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10039: LD_EXP 55
10043: PUSH
10044: LD_EXP 65
10048: AND
10049: IFFALSE 10069
10051: GO 10053
10053: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10054: LD_INT 32
10056: PPUSH
10057: LD_OWVAR 2
10061: PPUSH
10062: LD_INT 0
10064: PPUSH
10065: CALL_OW 324
10069: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10070: LD_EXP 55
10074: PUSH
10075: LD_EXP 66
10079: AND
10080: IFFALSE 10261
10082: GO 10084
10084: DISABLE
10085: LD_INT 0
10087: PPUSH
10088: PPUSH
10089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10090: LD_ADDR_VAR 0 2
10094: PUSH
10095: LD_INT 22
10097: PUSH
10098: LD_OWVAR 2
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 33
10109: PUSH
10110: LD_INT 3
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: ST_TO_ADDR
// if not tmp then
10126: LD_VAR 0 2
10130: NOT
10131: IFFALSE 10135
// exit ;
10133: GO 10261
// side := 0 ;
10135: LD_ADDR_VAR 0 3
10139: PUSH
10140: LD_INT 0
10142: ST_TO_ADDR
// for i := 1 to 8 do
10143: LD_ADDR_VAR 0 1
10147: PUSH
10148: DOUBLE
10149: LD_INT 1
10151: DEC
10152: ST_TO_ADDR
10153: LD_INT 8
10155: PUSH
10156: FOR_TO
10157: IFFALSE 10205
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10159: LD_OWVAR 2
10163: PUSH
10164: LD_VAR 0 1
10168: NONEQUAL
10169: PUSH
10170: LD_OWVAR 2
10174: PPUSH
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 81
10184: PUSH
10185: LD_INT 2
10187: EQUAL
10188: AND
10189: IFFALSE 10203
// begin side := i ;
10191: LD_ADDR_VAR 0 3
10195: PUSH
10196: LD_VAR 0 1
10200: ST_TO_ADDR
// break ;
10201: GO 10205
// end ;
10203: GO 10156
10205: POP
10206: POP
// if not side then
10207: LD_VAR 0 3
10211: NOT
10212: IFFALSE 10216
// exit ;
10214: GO 10261
// for i := 1 to tmp do
10216: LD_ADDR_VAR 0 1
10220: PUSH
10221: DOUBLE
10222: LD_INT 1
10224: DEC
10225: ST_TO_ADDR
10226: LD_VAR 0 2
10230: PUSH
10231: FOR_TO
10232: IFFALSE 10259
// if Prob ( 60 ) then
10234: LD_INT 60
10236: PPUSH
10237: CALL_OW 13
10241: IFFALSE 10257
// SetSide ( i , side ) ;
10243: LD_VAR 0 1
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: CALL_OW 235
10257: GO 10231
10259: POP
10260: POP
// end ;
10261: PPOPN 3
10263: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10264: LD_EXP 55
10268: PUSH
10269: LD_EXP 68
10273: AND
10274: IFFALSE 10393
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10282: LD_ADDR_VAR 0 1
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_OWVAR 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 21
10301: PUSH
10302: LD_INT 1
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 3
10311: PUSH
10312: LD_INT 23
10314: PUSH
10315: LD_INT 0
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: PPUSH
10331: CALL_OW 69
10335: PUSH
10336: FOR_IN
10337: IFFALSE 10391
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 257
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: LD_INT 2
10354: PUSH
10355: LD_INT 3
10357: PUSH
10358: LD_INT 4
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: IN
10367: IFFALSE 10389
// SetClass ( un , rand ( 1 , 4 ) ) ;
10369: LD_VAR 0 1
10373: PPUSH
10374: LD_INT 1
10376: PPUSH
10377: LD_INT 4
10379: PPUSH
10380: CALL_OW 12
10384: PPUSH
10385: CALL_OW 336
10389: GO 10336
10391: POP
10392: POP
// end ;
10393: PPOPN 1
10395: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10396: LD_EXP 55
10400: PUSH
10401: LD_EXP 67
10405: AND
10406: IFFALSE 10485
10408: GO 10410
10410: DISABLE
10411: LD_INT 0
10413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_OWVAR 2
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 21
10433: PUSH
10434: LD_INT 3
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: ST_TO_ADDR
// if not tmp then
10450: LD_VAR 0 1
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 10485
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10459: LD_VAR 0 1
10463: PUSH
10464: LD_INT 1
10466: PPUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: CALL_OW 12
10476: ARRAY
10477: PPUSH
10478: LD_INT 100
10480: PPUSH
10481: CALL_OW 234
// end ;
10485: PPOPN 1
10487: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10488: LD_EXP 55
10492: PUSH
10493: LD_EXP 69
10497: AND
10498: IFFALSE 10596
10500: GO 10502
10502: DISABLE
10503: LD_INT 0
10505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10506: LD_ADDR_VAR 0 1
10510: PUSH
10511: LD_INT 22
10513: PUSH
10514: LD_OWVAR 2
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 21
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PPUSH
10537: CALL_OW 69
10541: ST_TO_ADDR
// if not tmp then
10542: LD_VAR 0 1
10546: NOT
10547: IFFALSE 10551
// exit ;
10549: GO 10596
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10551: LD_VAR 0 1
10555: PUSH
10556: LD_INT 1
10558: PPUSH
10559: LD_VAR 0 1
10563: PPUSH
10564: CALL_OW 12
10568: ARRAY
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: LD_INT 4
10575: PPUSH
10576: CALL_OW 12
10580: PPUSH
10581: LD_INT 3000
10583: PPUSH
10584: LD_INT 9000
10586: PPUSH
10587: CALL_OW 12
10591: PPUSH
10592: CALL_OW 492
// end ;
10596: PPOPN 1
10598: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10599: LD_EXP 55
10603: PUSH
10604: LD_EXP 70
10608: AND
10609: IFFALSE 10629
10611: GO 10613
10613: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10614: LD_INT 1
10616: PPUSH
10617: LD_OWVAR 2
10621: PPUSH
10622: LD_INT 0
10624: PPUSH
10625: CALL_OW 324
10629: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10630: LD_EXP 55
10634: PUSH
10635: LD_EXP 71
10639: AND
10640: IFFALSE 10723
10642: GO 10644
10644: DISABLE
10645: LD_INT 0
10647: PPUSH
10648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10649: LD_ADDR_VAR 0 2
10653: PUSH
10654: LD_INT 22
10656: PUSH
10657: LD_OWVAR 2
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 3
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: ST_TO_ADDR
// if not tmp then
10685: LD_VAR 0 2
10689: NOT
10690: IFFALSE 10694
// exit ;
10692: GO 10723
// for i in tmp do
10694: LD_ADDR_VAR 0 1
10698: PUSH
10699: LD_VAR 0 2
10703: PUSH
10704: FOR_IN
10705: IFFALSE 10721
// SetBLevel ( i , 10 ) ;
10707: LD_VAR 0 1
10711: PPUSH
10712: LD_INT 10
10714: PPUSH
10715: CALL_OW 241
10719: GO 10704
10721: POP
10722: POP
// end ;
10723: PPOPN 2
10725: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10726: LD_EXP 55
10730: PUSH
10731: LD_EXP 72
10735: AND
10736: IFFALSE 10847
10738: GO 10740
10740: DISABLE
10741: LD_INT 0
10743: PPUSH
10744: PPUSH
10745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10746: LD_ADDR_VAR 0 3
10750: PUSH
10751: LD_INT 22
10753: PUSH
10754: LD_OWVAR 2
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 69
10781: ST_TO_ADDR
// if not tmp then
10782: LD_VAR 0 3
10786: NOT
10787: IFFALSE 10791
// exit ;
10789: GO 10847
// un := tmp [ rand ( 1 , tmp ) ] ;
10791: LD_ADDR_VAR 0 2
10795: PUSH
10796: LD_VAR 0 3
10800: PUSH
10801: LD_INT 1
10803: PPUSH
10804: LD_VAR 0 3
10808: PPUSH
10809: CALL_OW 12
10813: ARRAY
10814: ST_TO_ADDR
// if Crawls ( un ) then
10815: LD_VAR 0 2
10819: PPUSH
10820: CALL_OW 318
10824: IFFALSE 10835
// ComWalk ( un ) ;
10826: LD_VAR 0 2
10830: PPUSH
10831: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10835: LD_VAR 0 2
10839: PPUSH
10840: LD_INT 5
10842: PPUSH
10843: CALL_OW 336
// end ;
10847: PPOPN 3
10849: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10850: LD_EXP 55
10854: PUSH
10855: LD_EXP 73
10859: AND
10860: PUSH
10861: LD_OWVAR 67
10865: PUSH
10866: LD_INT 3
10868: LESS
10869: AND
10870: IFFALSE 10889
10872: GO 10874
10874: DISABLE
// Difficulty := Difficulty + 1 ;
10875: LD_ADDR_OWVAR 67
10879: PUSH
10880: LD_OWVAR 67
10884: PUSH
10885: LD_INT 1
10887: PLUS
10888: ST_TO_ADDR
10889: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10890: LD_EXP 55
10894: PUSH
10895: LD_EXP 74
10899: AND
10900: IFFALSE 11003
10902: GO 10904
10904: DISABLE
10905: LD_INT 0
10907: PPUSH
// begin for i := 1 to 5 do
10908: LD_ADDR_VAR 0 1
10912: PUSH
10913: DOUBLE
10914: LD_INT 1
10916: DEC
10917: ST_TO_ADDR
10918: LD_INT 5
10920: PUSH
10921: FOR_TO
10922: IFFALSE 11001
// begin uc_nation := nation_nature ;
10924: LD_ADDR_OWVAR 21
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// uc_side := 0 ;
10932: LD_ADDR_OWVAR 20
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10940: LD_ADDR_OWVAR 29
10944: PUSH
10945: LD_INT 12
10947: PUSH
10948: LD_INT 12
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: ST_TO_ADDR
// hc_agressivity := 20 ;
10955: LD_ADDR_OWVAR 35
10959: PUSH
10960: LD_INT 20
10962: ST_TO_ADDR
// hc_class := class_tiger ;
10963: LD_ADDR_OWVAR 28
10967: PUSH
10968: LD_INT 14
10970: ST_TO_ADDR
// hc_gallery :=  ;
10971: LD_ADDR_OWVAR 33
10975: PUSH
10976: LD_STRING 
10978: ST_TO_ADDR
// hc_name :=  ;
10979: LD_ADDR_OWVAR 26
10983: PUSH
10984: LD_STRING 
10986: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10987: CALL_OW 44
10991: PPUSH
10992: LD_INT 0
10994: PPUSH
10995: CALL_OW 51
// end ;
10999: GO 10921
11001: POP
11002: POP
// end ;
11003: PPOPN 1
11005: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11006: LD_EXP 55
11010: PUSH
11011: LD_EXP 75
11015: AND
11016: IFFALSE 11025
11018: GO 11020
11020: DISABLE
// StreamSibBomb ;
11021: CALL 11026 0 0
11025: END
// export function StreamSibBomb ; var i , x , y ; begin
11026: LD_INT 0
11028: PPUSH
11029: PPUSH
11030: PPUSH
11031: PPUSH
// result := false ;
11032: LD_ADDR_VAR 0 1
11036: PUSH
11037: LD_INT 0
11039: ST_TO_ADDR
// for i := 1 to 16 do
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: DOUBLE
11046: LD_INT 1
11048: DEC
11049: ST_TO_ADDR
11050: LD_INT 16
11052: PUSH
11053: FOR_TO
11054: IFFALSE 11253
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11056: LD_ADDR_VAR 0 3
11060: PUSH
11061: LD_INT 10
11063: PUSH
11064: LD_INT 20
11066: PUSH
11067: LD_INT 30
11069: PUSH
11070: LD_INT 40
11072: PUSH
11073: LD_INT 50
11075: PUSH
11076: LD_INT 60
11078: PUSH
11079: LD_INT 70
11081: PUSH
11082: LD_INT 80
11084: PUSH
11085: LD_INT 90
11087: PUSH
11088: LD_INT 100
11090: PUSH
11091: LD_INT 110
11093: PUSH
11094: LD_INT 120
11096: PUSH
11097: LD_INT 130
11099: PUSH
11100: LD_INT 140
11102: PUSH
11103: LD_INT 150
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 1
11125: PPUSH
11126: LD_INT 15
11128: PPUSH
11129: CALL_OW 12
11133: ARRAY
11134: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11135: LD_ADDR_VAR 0 4
11139: PUSH
11140: LD_INT 10
11142: PUSH
11143: LD_INT 20
11145: PUSH
11146: LD_INT 30
11148: PUSH
11149: LD_INT 40
11151: PUSH
11152: LD_INT 50
11154: PUSH
11155: LD_INT 60
11157: PUSH
11158: LD_INT 70
11160: PUSH
11161: LD_INT 80
11163: PUSH
11164: LD_INT 90
11166: PUSH
11167: LD_INT 100
11169: PUSH
11170: LD_INT 110
11172: PUSH
11173: LD_INT 120
11175: PUSH
11176: LD_INT 130
11178: PUSH
11179: LD_INT 140
11181: PUSH
11182: LD_INT 150
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 1
11204: PPUSH
11205: LD_INT 15
11207: PPUSH
11208: CALL_OW 12
11212: ARRAY
11213: ST_TO_ADDR
// if ValidHex ( x , y ) then
11214: LD_VAR 0 3
11218: PPUSH
11219: LD_VAR 0 4
11223: PPUSH
11224: CALL_OW 488
11228: IFFALSE 11251
// begin result := [ x , y ] ;
11230: LD_ADDR_VAR 0 1
11234: PUSH
11235: LD_VAR 0 3
11239: PUSH
11240: LD_VAR 0 4
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: ST_TO_ADDR
// break ;
11249: GO 11253
// end ; end ;
11251: GO 11053
11253: POP
11254: POP
// if result then
11255: LD_VAR 0 1
11259: IFFALSE 11319
// begin ToLua ( playSibBomb() ) ;
11261: LD_STRING playSibBomb()
11263: PPUSH
11264: CALL_OW 559
// wait ( 0 0$14 ) ;
11268: LD_INT 490
11270: PPUSH
11271: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11275: LD_VAR 0 1
11279: PUSH
11280: LD_INT 1
11282: ARRAY
11283: PPUSH
11284: LD_VAR 0 1
11288: PUSH
11289: LD_INT 2
11291: ARRAY
11292: PPUSH
11293: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11297: LD_VAR 0 1
11301: PUSH
11302: LD_INT 1
11304: ARRAY
11305: PPUSH
11306: LD_VAR 0 1
11310: PUSH
11311: LD_INT 2
11313: ARRAY
11314: PPUSH
11315: CALL_OW 429
// end ; end ;
11319: LD_VAR 0 1
11323: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11324: LD_EXP 55
11328: PUSH
11329: LD_EXP 77
11333: AND
11334: IFFALSE 11346
11336: GO 11338
11338: DISABLE
// YouLost (  ) ;
11339: LD_STRING 
11341: PPUSH
11342: CALL_OW 104
11346: END
// every 0 0$1 trigger StreamModeActive and sFog do
11347: LD_EXP 55
11351: PUSH
11352: LD_EXP 76
11356: AND
11357: IFFALSE 11371
11359: GO 11361
11361: DISABLE
// FogOff ( your_side ) ;
11362: LD_OWVAR 2
11366: PPUSH
11367: CALL_OW 344
11371: END
// every 0 0$1 trigger StreamModeActive and sSun do
11372: LD_EXP 55
11376: PUSH
11377: LD_EXP 78
11381: AND
11382: IFFALSE 11410
11384: GO 11386
11386: DISABLE
// begin solar_recharge_percent := 0 ;
11387: LD_ADDR_OWVAR 79
11391: PUSH
11392: LD_INT 0
11394: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11395: LD_INT 10500
11397: PPUSH
11398: CALL_OW 67
// solar_recharge_percent := 100 ;
11402: LD_ADDR_OWVAR 79
11406: PUSH
11407: LD_INT 100
11409: ST_TO_ADDR
// end ;
11410: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11411: LD_EXP 55
11415: PUSH
11416: LD_EXP 79
11420: AND
11421: IFFALSE 11660
11423: GO 11425
11425: DISABLE
11426: LD_INT 0
11428: PPUSH
11429: PPUSH
11430: PPUSH
// begin tmp := [ ] ;
11431: LD_ADDR_VAR 0 3
11435: PUSH
11436: EMPTY
11437: ST_TO_ADDR
// for i := 1 to 6 do
11438: LD_ADDR_VAR 0 1
11442: PUSH
11443: DOUBLE
11444: LD_INT 1
11446: DEC
11447: ST_TO_ADDR
11448: LD_INT 6
11450: PUSH
11451: FOR_TO
11452: IFFALSE 11557
// begin uc_nation := nation_nature ;
11454: LD_ADDR_OWVAR 21
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// uc_side := 0 ;
11462: LD_ADDR_OWVAR 20
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11470: LD_ADDR_OWVAR 29
11474: PUSH
11475: LD_INT 12
11477: PUSH
11478: LD_INT 12
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: ST_TO_ADDR
// hc_agressivity := 20 ;
11485: LD_ADDR_OWVAR 35
11489: PUSH
11490: LD_INT 20
11492: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11493: LD_ADDR_OWVAR 28
11497: PUSH
11498: LD_INT 17
11500: ST_TO_ADDR
// hc_gallery :=  ;
11501: LD_ADDR_OWVAR 33
11505: PUSH
11506: LD_STRING 
11508: ST_TO_ADDR
// hc_name :=  ;
11509: LD_ADDR_OWVAR 26
11513: PUSH
11514: LD_STRING 
11516: ST_TO_ADDR
// un := CreateHuman ;
11517: LD_ADDR_VAR 0 2
11521: PUSH
11522: CALL_OW 44
11526: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11527: LD_VAR 0 2
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 51
// tmp := tmp ^ un ;
11539: LD_ADDR_VAR 0 3
11543: PUSH
11544: LD_VAR 0 3
11548: PUSH
11549: LD_VAR 0 2
11553: ADD
11554: ST_TO_ADDR
// end ;
11555: GO 11451
11557: POP
11558: POP
// repeat wait ( 0 0$1 ) ;
11559: LD_INT 35
11561: PPUSH
11562: CALL_OW 67
// for un in tmp do
11566: LD_ADDR_VAR 0 2
11570: PUSH
11571: LD_VAR 0 3
11575: PUSH
11576: FOR_IN
11577: IFFALSE 11651
// begin if IsDead ( un ) then
11579: LD_VAR 0 2
11583: PPUSH
11584: CALL_OW 301
11588: IFFALSE 11608
// begin tmp := tmp diff un ;
11590: LD_ADDR_VAR 0 3
11594: PUSH
11595: LD_VAR 0 3
11599: PUSH
11600: LD_VAR 0 2
11604: DIFF
11605: ST_TO_ADDR
// continue ;
11606: GO 11576
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11608: LD_VAR 0 2
11612: PPUSH
11613: LD_INT 3
11615: PUSH
11616: LD_INT 22
11618: PUSH
11619: LD_INT 0
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: PPUSH
11635: LD_VAR 0 2
11639: PPUSH
11640: CALL_OW 74
11644: PPUSH
11645: CALL_OW 115
// end ;
11649: GO 11576
11651: POP
11652: POP
// until not tmp ;
11653: LD_VAR 0 3
11657: NOT
11658: IFFALSE 11559
// end ;
11660: PPOPN 3
11662: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11663: LD_EXP 55
11667: PUSH
11668: LD_EXP 80
11672: AND
11673: IFFALSE 11727
11675: GO 11677
11677: DISABLE
// begin ToLua ( displayTroll(); ) ;
11678: LD_STRING displayTroll();
11680: PPUSH
11681: CALL_OW 559
// wait ( 3 3$00 ) ;
11685: LD_INT 6300
11687: PPUSH
11688: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11692: LD_STRING hideTroll();
11694: PPUSH
11695: CALL_OW 559
// wait ( 1 1$00 ) ;
11699: LD_INT 2100
11701: PPUSH
11702: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11706: LD_STRING displayTroll();
11708: PPUSH
11709: CALL_OW 559
// wait ( 1 1$00 ) ;
11713: LD_INT 2100
11715: PPUSH
11716: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11720: LD_STRING hideTroll();
11722: PPUSH
11723: CALL_OW 559
// end ;
11727: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11728: LD_EXP 55
11732: PUSH
11733: LD_EXP 81
11737: AND
11738: IFFALSE 11801
11740: GO 11742
11742: DISABLE
11743: LD_INT 0
11745: PPUSH
// begin p := 0 ;
11746: LD_ADDR_VAR 0 1
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// repeat game_speed := 1 ;
11754: LD_ADDR_OWVAR 65
11758: PUSH
11759: LD_INT 1
11761: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11762: LD_INT 35
11764: PPUSH
11765: CALL_OW 67
// p := p + 1 ;
11769: LD_ADDR_VAR 0 1
11773: PUSH
11774: LD_VAR 0 1
11778: PUSH
11779: LD_INT 1
11781: PLUS
11782: ST_TO_ADDR
// until p >= 60 ;
11783: LD_VAR 0 1
11787: PUSH
11788: LD_INT 60
11790: GREATEREQUAL
11791: IFFALSE 11754
// game_speed := 4 ;
11793: LD_ADDR_OWVAR 65
11797: PUSH
11798: LD_INT 4
11800: ST_TO_ADDR
// end ;
11801: PPOPN 1
11803: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11804: LD_EXP 55
11808: PUSH
11809: LD_EXP 82
11813: AND
11814: IFFALSE 11960
11816: GO 11818
11818: DISABLE
11819: LD_INT 0
11821: PPUSH
11822: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11823: LD_ADDR_VAR 0 1
11827: PUSH
11828: LD_INT 22
11830: PUSH
11831: LD_OWVAR 2
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 2
11842: PUSH
11843: LD_INT 30
11845: PUSH
11846: LD_INT 0
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 30
11855: PUSH
11856: LD_INT 1
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 69
11876: ST_TO_ADDR
// if not depot then
11877: LD_VAR 0 1
11881: NOT
11882: IFFALSE 11886
// exit ;
11884: GO 11960
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11886: LD_ADDR_VAR 0 2
11890: PUSH
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 1
11898: PPUSH
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 12
11908: ARRAY
11909: PPUSH
11910: CALL_OW 274
11914: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11915: LD_VAR 0 2
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: LD_INT 0
11925: PPUSH
11926: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11930: LD_VAR 0 2
11934: PPUSH
11935: LD_INT 2
11937: PPUSH
11938: LD_INT 0
11940: PPUSH
11941: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11945: LD_VAR 0 2
11949: PPUSH
11950: LD_INT 3
11952: PPUSH
11953: LD_INT 0
11955: PPUSH
11956: CALL_OW 277
// end ;
11960: PPOPN 2
11962: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11963: LD_EXP 55
11967: PUSH
11968: LD_EXP 83
11972: AND
11973: IFFALSE 12070
11975: GO 11977
11977: DISABLE
11978: LD_INT 0
11980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11981: LD_ADDR_VAR 0 1
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_OWVAR 2
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 21
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 3
12010: PUSH
12011: LD_INT 23
12013: PUSH
12014: LD_INT 0
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 69
12034: ST_TO_ADDR
// if not tmp then
12035: LD_VAR 0 1
12039: NOT
12040: IFFALSE 12044
// exit ;
12042: GO 12070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12044: LD_VAR 0 1
12048: PUSH
12049: LD_INT 1
12051: PPUSH
12052: LD_VAR 0 1
12056: PPUSH
12057: CALL_OW 12
12061: ARRAY
12062: PPUSH
12063: LD_INT 200
12065: PPUSH
12066: CALL_OW 234
// end ;
12070: PPOPN 1
12072: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12073: LD_EXP 55
12077: PUSH
12078: LD_EXP 84
12082: AND
12083: IFFALSE 12162
12085: GO 12087
12087: DISABLE
12088: LD_INT 0
12090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12091: LD_ADDR_VAR 0 1
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_OWVAR 2
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PPUSH
12122: CALL_OW 69
12126: ST_TO_ADDR
// if not tmp then
12127: LD_VAR 0 1
12131: NOT
12132: IFFALSE 12136
// exit ;
12134: GO 12162
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12136: LD_VAR 0 1
12140: PUSH
12141: LD_INT 1
12143: PPUSH
12144: LD_VAR 0 1
12148: PPUSH
12149: CALL_OW 12
12153: ARRAY
12154: PPUSH
12155: LD_INT 60
12157: PPUSH
12158: CALL_OW 234
// end ;
12162: PPOPN 1
12164: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12165: LD_EXP 55
12169: PUSH
12170: LD_EXP 85
12174: AND
12175: IFFALSE 12274
12177: GO 12179
12179: DISABLE
12180: LD_INT 0
12182: PPUSH
12183: PPUSH
// begin enable ;
12184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_OWVAR 2
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 61
12204: PUSH
12205: EMPTY
12206: LIST
12207: PUSH
12208: LD_INT 33
12210: PUSH
12211: LD_INT 2
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 69
12227: ST_TO_ADDR
// if not tmp then
12228: LD_VAR 0 1
12232: NOT
12233: IFFALSE 12237
// exit ;
12235: GO 12274
// for i in tmp do
12237: LD_ADDR_VAR 0 2
12241: PUSH
12242: LD_VAR 0 1
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12272
// if IsControledBy ( i ) then
12250: LD_VAR 0 2
12254: PPUSH
12255: CALL_OW 312
12259: IFFALSE 12270
// ComUnlink ( i ) ;
12261: LD_VAR 0 2
12265: PPUSH
12266: CALL_OW 136
12270: GO 12247
12272: POP
12273: POP
// end ;
12274: PPOPN 2
12276: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12277: LD_EXP 55
12281: PUSH
12282: LD_EXP 86
12286: AND
12287: IFFALSE 12427
12289: GO 12291
12291: DISABLE
12292: LD_INT 0
12294: PPUSH
12295: PPUSH
// begin ToLua ( displayPowell(); ) ;
12296: LD_STRING displayPowell();
12298: PPUSH
12299: CALL_OW 559
// uc_side := 0 ;
12303: LD_ADDR_OWVAR 20
12307: PUSH
12308: LD_INT 0
12310: ST_TO_ADDR
// uc_nation := 2 ;
12311: LD_ADDR_OWVAR 21
12315: PUSH
12316: LD_INT 2
12318: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12319: LD_ADDR_OWVAR 37
12323: PUSH
12324: LD_INT 14
12326: ST_TO_ADDR
// vc_engine := engine_siberite ;
12327: LD_ADDR_OWVAR 39
12331: PUSH
12332: LD_INT 3
12334: ST_TO_ADDR
// vc_control := control_apeman ;
12335: LD_ADDR_OWVAR 38
12339: PUSH
12340: LD_INT 5
12342: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12343: LD_ADDR_OWVAR 40
12347: PUSH
12348: LD_INT 29
12350: ST_TO_ADDR
// un := CreateVehicle ;
12351: LD_ADDR_VAR 0 2
12355: PUSH
12356: CALL_OW 45
12360: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12361: LD_VAR 0 2
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12373: LD_INT 35
12375: PPUSH
12376: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12380: LD_VAR 0 2
12384: PPUSH
12385: LD_INT 22
12387: PUSH
12388: LD_OWVAR 2
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PPUSH
12397: CALL_OW 69
12401: PPUSH
12402: LD_VAR 0 2
12406: PPUSH
12407: CALL_OW 74
12411: PPUSH
12412: CALL_OW 115
// until IsDead ( un ) ;
12416: LD_VAR 0 2
12420: PPUSH
12421: CALL_OW 301
12425: IFFALSE 12373
// end ;
12427: PPOPN 2
12429: END
// every 0 0$1 trigger StreamModeActive and sStu do
12430: LD_EXP 55
12434: PUSH
12435: LD_EXP 94
12439: AND
12440: IFFALSE 12456
12442: GO 12444
12444: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12445: LD_STRING displayStucuk();
12447: PPUSH
12448: CALL_OW 559
// ResetFog ;
12452: CALL_OW 335
// end ;
12456: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12457: LD_EXP 55
12461: PUSH
12462: LD_EXP 87
12466: AND
12467: IFFALSE 12608
12469: GO 12471
12471: DISABLE
12472: LD_INT 0
12474: PPUSH
12475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12476: LD_ADDR_VAR 0 2
12480: PUSH
12481: LD_INT 22
12483: PUSH
12484: LD_OWVAR 2
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 21
12495: PUSH
12496: LD_INT 1
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: ST_TO_ADDR
// if not tmp then
12512: LD_VAR 0 2
12516: NOT
12517: IFFALSE 12521
// exit ;
12519: GO 12608
// un := tmp [ rand ( 1 , tmp ) ] ;
12521: LD_ADDR_VAR 0 1
12525: PUSH
12526: LD_VAR 0 2
12530: PUSH
12531: LD_INT 1
12533: PPUSH
12534: LD_VAR 0 2
12538: PPUSH
12539: CALL_OW 12
12543: ARRAY
12544: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12545: LD_VAR 0 1
12549: PPUSH
12550: LD_INT 0
12552: PPUSH
12553: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12557: LD_VAR 0 1
12561: PPUSH
12562: LD_OWVAR 3
12566: PUSH
12567: LD_VAR 0 1
12571: DIFF
12572: PPUSH
12573: LD_VAR 0 1
12577: PPUSH
12578: CALL_OW 74
12582: PPUSH
12583: CALL_OW 115
// wait ( 0 0$20 ) ;
12587: LD_INT 700
12589: PPUSH
12590: CALL_OW 67
// SetSide ( un , your_side ) ;
12594: LD_VAR 0 1
12598: PPUSH
12599: LD_OWVAR 2
12603: PPUSH
12604: CALL_OW 235
// end ;
12608: PPOPN 2
12610: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12611: LD_EXP 55
12615: PUSH
12616: LD_EXP 88
12620: AND
12621: IFFALSE 12727
12623: GO 12625
12625: DISABLE
12626: LD_INT 0
12628: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12629: LD_ADDR_VAR 0 1
12633: PUSH
12634: LD_INT 22
12636: PUSH
12637: LD_OWVAR 2
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: LD_INT 2
12648: PUSH
12649: LD_INT 30
12651: PUSH
12652: LD_INT 0
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 30
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PPUSH
12678: CALL_OW 69
12682: ST_TO_ADDR
// if not depot then
12683: LD_VAR 0 1
12687: NOT
12688: IFFALSE 12692
// exit ;
12690: GO 12727
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12692: LD_VAR 0 1
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PPUSH
12701: CALL_OW 250
12705: PPUSH
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PPUSH
12715: CALL_OW 251
12719: PPUSH
12720: LD_INT 70
12722: PPUSH
12723: CALL_OW 495
// end ;
12727: PPOPN 1
12729: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12730: LD_EXP 55
12734: PUSH
12735: LD_EXP 89
12739: AND
12740: IFFALSE 12951
12742: GO 12744
12744: DISABLE
12745: LD_INT 0
12747: PPUSH
12748: PPUSH
12749: PPUSH
12750: PPUSH
12751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12752: LD_ADDR_VAR 0 5
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_OWVAR 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 21
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: ST_TO_ADDR
// if not tmp then
12788: LD_VAR 0 5
12792: NOT
12793: IFFALSE 12797
// exit ;
12795: GO 12951
// for i in tmp do
12797: LD_ADDR_VAR 0 1
12801: PUSH
12802: LD_VAR 0 5
12806: PUSH
12807: FOR_IN
12808: IFFALSE 12949
// begin d := rand ( 0 , 5 ) ;
12810: LD_ADDR_VAR 0 4
12814: PUSH
12815: LD_INT 0
12817: PPUSH
12818: LD_INT 5
12820: PPUSH
12821: CALL_OW 12
12825: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12826: LD_ADDR_VAR 0 2
12830: PUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 250
12840: PPUSH
12841: LD_VAR 0 4
12845: PPUSH
12846: LD_INT 3
12848: PPUSH
12849: LD_INT 12
12851: PPUSH
12852: CALL_OW 12
12856: PPUSH
12857: CALL_OW 272
12861: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12862: LD_ADDR_VAR 0 3
12866: PUSH
12867: LD_VAR 0 1
12871: PPUSH
12872: CALL_OW 251
12876: PPUSH
12877: LD_VAR 0 4
12881: PPUSH
12882: LD_INT 3
12884: PPUSH
12885: LD_INT 12
12887: PPUSH
12888: CALL_OW 12
12892: PPUSH
12893: CALL_OW 273
12897: ST_TO_ADDR
// if ValidHex ( x , y ) then
12898: LD_VAR 0 2
12902: PPUSH
12903: LD_VAR 0 3
12907: PPUSH
12908: CALL_OW 488
12912: IFFALSE 12947
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12914: LD_VAR 0 1
12918: PPUSH
12919: LD_VAR 0 2
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 3
12931: PPUSH
12932: LD_INT 6
12934: PPUSH
12935: CALL_OW 12
12939: PPUSH
12940: LD_INT 1
12942: PPUSH
12943: CALL_OW 483
// end ;
12947: GO 12807
12949: POP
12950: POP
// end ;
12951: PPOPN 5
12953: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12954: LD_EXP 55
12958: PUSH
12959: LD_EXP 90
12963: AND
12964: IFFALSE 13058
12966: GO 12968
12968: DISABLE
12969: LD_INT 0
12971: PPUSH
12972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12973: LD_ADDR_VAR 0 2
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_OWVAR 2
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 32
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 21
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 69
13019: ST_TO_ADDR
// if not tmp then
13020: LD_VAR 0 2
13024: NOT
13025: IFFALSE 13029
// exit ;
13027: GO 13058
// for i in tmp do
13029: LD_ADDR_VAR 0 1
13033: PUSH
13034: LD_VAR 0 2
13038: PUSH
13039: FOR_IN
13040: IFFALSE 13056
// SetFuel ( i , 0 ) ;
13042: LD_VAR 0 1
13046: PPUSH
13047: LD_INT 0
13049: PPUSH
13050: CALL_OW 240
13054: GO 13039
13056: POP
13057: POP
// end ;
13058: PPOPN 2
13060: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13061: LD_EXP 55
13065: PUSH
13066: LD_EXP 91
13070: AND
13071: IFFALSE 13137
13073: GO 13075
13075: DISABLE
13076: LD_INT 0
13078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13079: LD_ADDR_VAR 0 1
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_OWVAR 2
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 30
13098: PUSH
13099: LD_INT 29
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PPUSH
13110: CALL_OW 69
13114: ST_TO_ADDR
// if not tmp then
13115: LD_VAR 0 1
13119: NOT
13120: IFFALSE 13124
// exit ;
13122: GO 13137
// DestroyUnit ( tmp [ 1 ] ) ;
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 1
13131: ARRAY
13132: PPUSH
13133: CALL_OW 65
// end ;
13137: PPOPN 1
13139: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13140: LD_EXP 55
13144: PUSH
13145: LD_EXP 93
13149: AND
13150: IFFALSE 13279
13152: GO 13154
13154: DISABLE
13155: LD_INT 0
13157: PPUSH
// begin uc_side := 0 ;
13158: LD_ADDR_OWVAR 20
13162: PUSH
13163: LD_INT 0
13165: ST_TO_ADDR
// uc_nation := nation_arabian ;
13166: LD_ADDR_OWVAR 21
13170: PUSH
13171: LD_INT 2
13173: ST_TO_ADDR
// hc_gallery :=  ;
13174: LD_ADDR_OWVAR 33
13178: PUSH
13179: LD_STRING 
13181: ST_TO_ADDR
// hc_name :=  ;
13182: LD_ADDR_OWVAR 26
13186: PUSH
13187: LD_STRING 
13189: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13190: LD_INT 1
13192: PPUSH
13193: LD_INT 11
13195: PPUSH
13196: LD_INT 10
13198: PPUSH
13199: CALL_OW 380
// un := CreateHuman ;
13203: LD_ADDR_VAR 0 1
13207: PUSH
13208: CALL_OW 44
13212: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13213: LD_VAR 0 1
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13225: LD_INT 35
13227: PPUSH
13228: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13232: LD_VAR 0 1
13236: PPUSH
13237: LD_INT 22
13239: PUSH
13240: LD_OWVAR 2
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 69
13253: PPUSH
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 74
13263: PPUSH
13264: CALL_OW 115
// until IsDead ( un ) ;
13268: LD_VAR 0 1
13272: PPUSH
13273: CALL_OW 301
13277: IFFALSE 13225
// end ;
13279: PPOPN 1
13281: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13282: LD_EXP 55
13286: PUSH
13287: LD_EXP 95
13291: AND
13292: IFFALSE 13304
13294: GO 13296
13296: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13297: LD_STRING earthquake(getX(game), 0, 32)
13299: PPUSH
13300: CALL_OW 559
13304: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13305: LD_EXP 55
13309: PUSH
13310: LD_EXP 96
13314: AND
13315: IFFALSE 13406
13317: GO 13319
13319: DISABLE
13320: LD_INT 0
13322: PPUSH
// begin enable ;
13323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13324: LD_ADDR_VAR 0 1
13328: PUSH
13329: LD_INT 22
13331: PUSH
13332: LD_OWVAR 2
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 21
13343: PUSH
13344: LD_INT 2
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 33
13353: PUSH
13354: LD_INT 3
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 69
13370: ST_TO_ADDR
// if not tmp then
13371: LD_VAR 0 1
13375: NOT
13376: IFFALSE 13380
// exit ;
13378: GO 13406
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13380: LD_VAR 0 1
13384: PUSH
13385: LD_INT 1
13387: PPUSH
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 12
13397: ARRAY
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: CALL_OW 234
// end ;
13406: PPOPN 1
13408: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13409: LD_EXP 55
13413: PUSH
13414: LD_EXP 97
13418: AND
13419: IFFALSE 13560
13421: GO 13423
13423: DISABLE
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
13428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13429: LD_ADDR_VAR 0 3
13433: PUSH
13434: LD_INT 22
13436: PUSH
13437: LD_OWVAR 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 25
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: ST_TO_ADDR
// if not tmp then
13465: LD_VAR 0 3
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 13560
// un := tmp [ rand ( 1 , tmp ) ] ;
13474: LD_ADDR_VAR 0 2
13478: PUSH
13479: LD_VAR 0 3
13483: PUSH
13484: LD_INT 1
13486: PPUSH
13487: LD_VAR 0 3
13491: PPUSH
13492: CALL_OW 12
13496: ARRAY
13497: ST_TO_ADDR
// if Crawls ( un ) then
13498: LD_VAR 0 2
13502: PPUSH
13503: CALL_OW 318
13507: IFFALSE 13518
// ComWalk ( un ) ;
13509: LD_VAR 0 2
13513: PPUSH
13514: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13518: LD_VAR 0 2
13522: PPUSH
13523: LD_INT 9
13525: PPUSH
13526: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13530: LD_INT 28
13532: PPUSH
13533: LD_OWVAR 2
13537: PPUSH
13538: LD_INT 2
13540: PPUSH
13541: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13545: LD_INT 29
13547: PPUSH
13548: LD_OWVAR 2
13552: PPUSH
13553: LD_INT 2
13555: PPUSH
13556: CALL_OW 322
// end ;
13560: PPOPN 3
13562: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13563: LD_EXP 55
13567: PUSH
13568: LD_EXP 98
13572: AND
13573: IFFALSE 13684
13575: GO 13577
13577: DISABLE
13578: LD_INT 0
13580: PPUSH
13581: PPUSH
13582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13583: LD_ADDR_VAR 0 3
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_OWVAR 2
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 25
13602: PUSH
13603: LD_INT 1
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: ST_TO_ADDR
// if not tmp then
13619: LD_VAR 0 3
13623: NOT
13624: IFFALSE 13628
// exit ;
13626: GO 13684
// un := tmp [ rand ( 1 , tmp ) ] ;
13628: LD_ADDR_VAR 0 2
13632: PUSH
13633: LD_VAR 0 3
13637: PUSH
13638: LD_INT 1
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: CALL_OW 12
13650: ARRAY
13651: ST_TO_ADDR
// if Crawls ( un ) then
13652: LD_VAR 0 2
13656: PPUSH
13657: CALL_OW 318
13661: IFFALSE 13672
// ComWalk ( un ) ;
13663: LD_VAR 0 2
13667: PPUSH
13668: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_INT 8
13679: PPUSH
13680: CALL_OW 336
// end ;
13684: PPOPN 3
13686: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13687: LD_EXP 55
13691: PUSH
13692: LD_EXP 99
13696: AND
13697: IFFALSE 13841
13699: GO 13701
13701: DISABLE
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13706: LD_ADDR_VAR 0 2
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_OWVAR 2
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 21
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 2
13735: PUSH
13736: LD_INT 34
13738: PUSH
13739: LD_INT 12
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 34
13748: PUSH
13749: LD_INT 51
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 34
13758: PUSH
13759: LD_INT 32
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: ST_TO_ADDR
// if not tmp then
13782: LD_VAR 0 2
13786: NOT
13787: IFFALSE 13791
// exit ;
13789: GO 13841
// for i in tmp do
13791: LD_ADDR_VAR 0 1
13795: PUSH
13796: LD_VAR 0 2
13800: PUSH
13801: FOR_IN
13802: IFFALSE 13839
// if GetCargo ( i , mat_artifact ) = 0 then
13804: LD_VAR 0 1
13808: PPUSH
13809: LD_INT 4
13811: PPUSH
13812: CALL_OW 289
13816: PUSH
13817: LD_INT 0
13819: EQUAL
13820: IFFALSE 13837
// SetCargo ( i , mat_siberit , 100 ) ;
13822: LD_VAR 0 1
13826: PPUSH
13827: LD_INT 3
13829: PPUSH
13830: LD_INT 100
13832: PPUSH
13833: CALL_OW 290
13837: GO 13801
13839: POP
13840: POP
// end ;
13841: PPOPN 2
13843: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13844: LD_EXP 55
13848: PUSH
13849: LD_EXP 100
13853: AND
13854: IFFALSE 14037
13856: GO 13858
13858: DISABLE
13859: LD_INT 0
13861: PPUSH
13862: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13863: LD_ADDR_VAR 0 2
13867: PUSH
13868: LD_INT 22
13870: PUSH
13871: LD_OWVAR 2
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: ST_TO_ADDR
// if not tmp then
13885: LD_VAR 0 2
13889: NOT
13890: IFFALSE 13894
// exit ;
13892: GO 14037
// for i := 1 to 2 do
13894: LD_ADDR_VAR 0 1
13898: PUSH
13899: DOUBLE
13900: LD_INT 1
13902: DEC
13903: ST_TO_ADDR
13904: LD_INT 2
13906: PUSH
13907: FOR_TO
13908: IFFALSE 14035
// begin uc_side := your_side ;
13910: LD_ADDR_OWVAR 20
13914: PUSH
13915: LD_OWVAR 2
13919: ST_TO_ADDR
// uc_nation := nation_american ;
13920: LD_ADDR_OWVAR 21
13924: PUSH
13925: LD_INT 1
13927: ST_TO_ADDR
// vc_chassis := us_morphling ;
13928: LD_ADDR_OWVAR 37
13932: PUSH
13933: LD_INT 5
13935: ST_TO_ADDR
// vc_engine := engine_siberite ;
13936: LD_ADDR_OWVAR 39
13940: PUSH
13941: LD_INT 3
13943: ST_TO_ADDR
// vc_control := control_computer ;
13944: LD_ADDR_OWVAR 38
13948: PUSH
13949: LD_INT 3
13951: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13952: LD_ADDR_OWVAR 40
13956: PUSH
13957: LD_INT 10
13959: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13960: LD_VAR 0 2
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 310
13973: NOT
13974: IFFALSE 14021
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13976: CALL_OW 45
13980: PPUSH
13981: LD_VAR 0 2
13985: PUSH
13986: LD_INT 1
13988: ARRAY
13989: PPUSH
13990: CALL_OW 250
13994: PPUSH
13995: LD_VAR 0 2
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: CALL_OW 251
14008: PPUSH
14009: LD_INT 12
14011: PPUSH
14012: LD_INT 1
14014: PPUSH
14015: CALL_OW 50
14019: GO 14033
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14021: CALL_OW 45
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL_OW 51
// end ;
14033: GO 13907
14035: POP
14036: POP
// end ;
14037: PPOPN 2
14039: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14040: LD_EXP 55
14044: PUSH
14045: LD_EXP 101
14049: AND
14050: IFFALSE 14272
14052: GO 14054
14054: DISABLE
14055: LD_INT 0
14057: PPUSH
14058: PPUSH
14059: PPUSH
14060: PPUSH
14061: PPUSH
14062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14063: LD_ADDR_VAR 0 6
14067: PUSH
14068: LD_INT 22
14070: PUSH
14071: LD_OWVAR 2
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 21
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: LD_INT 23
14095: PUSH
14096: LD_INT 0
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PPUSH
14112: CALL_OW 69
14116: ST_TO_ADDR
// if not tmp then
14117: LD_VAR 0 6
14121: NOT
14122: IFFALSE 14126
// exit ;
14124: GO 14272
// s1 := rand ( 1 , 4 ) ;
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: LD_INT 1
14133: PPUSH
14134: LD_INT 4
14136: PPUSH
14137: CALL_OW 12
14141: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14142: LD_ADDR_VAR 0 4
14146: PUSH
14147: LD_VAR 0 6
14151: PUSH
14152: LD_INT 1
14154: ARRAY
14155: PPUSH
14156: LD_VAR 0 2
14160: PPUSH
14161: CALL_OW 259
14165: ST_TO_ADDR
// if s1 = 1 then
14166: LD_VAR 0 2
14170: PUSH
14171: LD_INT 1
14173: EQUAL
14174: IFFALSE 14194
// s2 := rand ( 2 , 4 ) else
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_INT 2
14183: PPUSH
14184: LD_INT 4
14186: PPUSH
14187: CALL_OW 12
14191: ST_TO_ADDR
14192: GO 14202
// s2 := 1 ;
14194: LD_ADDR_VAR 0 3
14198: PUSH
14199: LD_INT 1
14201: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14202: LD_ADDR_VAR 0 5
14206: PUSH
14207: LD_VAR 0 6
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: CALL_OW 259
14225: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14226: LD_VAR 0 6
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 2
14239: PPUSH
14240: LD_VAR 0 5
14244: PPUSH
14245: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14249: LD_VAR 0 6
14253: PUSH
14254: LD_INT 1
14256: ARRAY
14257: PPUSH
14258: LD_VAR 0 3
14262: PPUSH
14263: LD_VAR 0 4
14267: PPUSH
14268: CALL_OW 237
// end ;
14272: PPOPN 6
14274: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14275: LD_EXP 55
14279: PUSH
14280: LD_EXP 102
14284: AND
14285: IFFALSE 14364
14287: GO 14289
14289: DISABLE
14290: LD_INT 0
14292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14293: LD_ADDR_VAR 0 1
14297: PUSH
14298: LD_INT 22
14300: PUSH
14301: LD_OWVAR 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: ST_TO_ADDR
// if not tmp then
14329: LD_VAR 0 1
14333: NOT
14334: IFFALSE 14338
// exit ;
14336: GO 14364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14338: LD_VAR 0 1
14342: PUSH
14343: LD_INT 1
14345: PPUSH
14346: LD_VAR 0 1
14350: PPUSH
14351: CALL_OW 12
14355: ARRAY
14356: PPUSH
14357: LD_INT 1
14359: PPUSH
14360: CALL_OW 234
// end ;
14364: PPOPN 1
14366: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14367: LD_EXP 55
14371: PUSH
14372: LD_EXP 103
14376: AND
14377: IFFALSE 14489
14379: GO 14381
14381: DISABLE
14382: LD_INT 0
14384: PPUSH
14385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14386: LD_ADDR_VAR 0 2
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_OWVAR 2
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: LD_INT 30
14408: PUSH
14409: LD_INT 27
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 30
14418: PUSH
14419: LD_INT 26
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 30
14428: PUSH
14429: LD_INT 28
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 69
14450: ST_TO_ADDR
// if not tmp then
14451: LD_VAR 0 2
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14489
// for i in tmp do
14460: LD_ADDR_VAR 0 1
14464: PUSH
14465: LD_VAR 0 2
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14487
// SetLives ( i , 1 ) ;
14473: LD_VAR 0 1
14477: PPUSH
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 234
14485: GO 14470
14487: POP
14488: POP
// end ;
14489: PPOPN 2
14491: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14492: LD_EXP 55
14496: PUSH
14497: LD_EXP 104
14501: AND
14502: IFFALSE 14776
14504: GO 14506
14506: DISABLE
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
14511: PPUSH
// begin i := rand ( 1 , 7 ) ;
14512: LD_ADDR_VAR 0 1
14516: PUSH
14517: LD_INT 1
14519: PPUSH
14520: LD_INT 7
14522: PPUSH
14523: CALL_OW 12
14527: ST_TO_ADDR
// case i of 1 :
14528: LD_VAR 0 1
14532: PUSH
14533: LD_INT 1
14535: DOUBLE
14536: EQUAL
14537: IFTRUE 14541
14539: GO 14551
14541: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14542: LD_STRING earthquake(getX(game), 0, 32)
14544: PPUSH
14545: CALL_OW 559
14549: GO 14776
14551: LD_INT 2
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14573
14559: POP
// begin ToLua ( displayStucuk(); ) ;
14560: LD_STRING displayStucuk();
14562: PPUSH
14563: CALL_OW 559
// ResetFog ;
14567: CALL_OW 335
// end ; 3 :
14571: GO 14776
14573: LD_INT 3
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14685
14581: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_INT 22
14589: PUSH
14590: LD_OWVAR 2
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 25
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 69
14617: ST_TO_ADDR
// if not tmp then
14618: LD_VAR 0 2
14622: NOT
14623: IFFALSE 14627
// exit ;
14625: GO 14776
// un := tmp [ rand ( 1 , tmp ) ] ;
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_VAR 0 2
14636: PUSH
14637: LD_INT 1
14639: PPUSH
14640: LD_VAR 0 2
14644: PPUSH
14645: CALL_OW 12
14649: ARRAY
14650: ST_TO_ADDR
// if Crawls ( un ) then
14651: LD_VAR 0 3
14655: PPUSH
14656: CALL_OW 318
14660: IFFALSE 14671
// ComWalk ( un ) ;
14662: LD_VAR 0 3
14666: PPUSH
14667: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 8
14678: PPUSH
14679: CALL_OW 336
// end ; 4 :
14683: GO 14776
14685: LD_INT 4
14687: DOUBLE
14688: EQUAL
14689: IFTRUE 14693
14691: GO 14754
14693: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_INT 22
14701: PUSH
14702: LD_OWVAR 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 30
14713: PUSH
14714: LD_INT 29
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 69
14729: ST_TO_ADDR
// if not tmp then
14730: LD_VAR 0 2
14734: NOT
14735: IFFALSE 14739
// exit ;
14737: GO 14776
// DestroyUnit ( tmp [ 1 ] ) ;
14739: LD_VAR 0 2
14743: PUSH
14744: LD_INT 1
14746: ARRAY
14747: PPUSH
14748: CALL_OW 65
// end ; 5 .. 7 :
14752: GO 14776
14754: LD_INT 5
14756: DOUBLE
14757: GREATEREQUAL
14758: IFFALSE 14766
14760: LD_INT 7
14762: DOUBLE
14763: LESSEQUAL
14764: IFTRUE 14768
14766: GO 14775
14768: POP
// StreamSibBomb ; end ;
14769: CALL 11026 0 0
14773: GO 14776
14775: POP
// end ;
14776: PPOPN 3
14778: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14779: LD_EXP 55
14783: PUSH
14784: LD_EXP 105
14788: AND
14789: IFFALSE 14945
14791: GO 14793
14793: DISABLE
14794: LD_INT 0
14796: PPUSH
14797: PPUSH
14798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14799: LD_ADDR_VAR 0 2
14803: PUSH
14804: LD_INT 81
14806: PUSH
14807: LD_OWVAR 2
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: LD_INT 21
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 21
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 69
14852: ST_TO_ADDR
// if not tmp then
14853: LD_VAR 0 2
14857: NOT
14858: IFFALSE 14862
// exit ;
14860: GO 14945
// p := 0 ;
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_INT 0
14869: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14870: LD_INT 35
14872: PPUSH
14873: CALL_OW 67
// p := p + 1 ;
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: LD_VAR 0 3
14886: PUSH
14887: LD_INT 1
14889: PLUS
14890: ST_TO_ADDR
// for i in tmp do
14891: LD_ADDR_VAR 0 1
14895: PUSH
14896: LD_VAR 0 2
14900: PUSH
14901: FOR_IN
14902: IFFALSE 14933
// if GetLives ( i ) < 1000 then
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 256
14913: PUSH
14914: LD_INT 1000
14916: LESS
14917: IFFALSE 14931
// SetLives ( i , 1000 ) ;
14919: LD_VAR 0 1
14923: PPUSH
14924: LD_INT 1000
14926: PPUSH
14927: CALL_OW 234
14931: GO 14901
14933: POP
14934: POP
// until p > 20 ;
14935: LD_VAR 0 3
14939: PUSH
14940: LD_INT 20
14942: GREATER
14943: IFFALSE 14870
// end ;
14945: PPOPN 3
14947: END
// every 0 0$1 trigger StreamModeActive and sTime do
14948: LD_EXP 55
14952: PUSH
14953: LD_EXP 106
14957: AND
14958: IFFALSE 14993
14960: GO 14962
14962: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14963: LD_INT 28
14965: PPUSH
14966: LD_OWVAR 2
14970: PPUSH
14971: LD_INT 2
14973: PPUSH
14974: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14978: LD_INT 30
14980: PPUSH
14981: LD_OWVAR 2
14985: PPUSH
14986: LD_INT 2
14988: PPUSH
14989: CALL_OW 322
// end ;
14993: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14994: LD_EXP 55
14998: PUSH
14999: LD_EXP 107
15003: AND
15004: IFFALSE 15125
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 22
15020: PUSH
15021: LD_OWVAR 2
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 21
15032: PUSH
15033: LD_INT 1
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 3
15042: PUSH
15043: LD_INT 23
15045: PUSH
15046: LD_INT 0
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: PPUSH
15062: CALL_OW 69
15066: ST_TO_ADDR
// if not tmp then
15067: LD_VAR 0 2
15071: NOT
15072: IFFALSE 15076
// exit ;
15074: GO 15125
// for i in tmp do
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_VAR 0 2
15085: PUSH
15086: FOR_IN
15087: IFFALSE 15123
// begin if Crawls ( i ) then
15089: LD_VAR 0 1
15093: PPUSH
15094: CALL_OW 318
15098: IFFALSE 15109
// ComWalk ( i ) ;
15100: LD_VAR 0 1
15104: PPUSH
15105: CALL_OW 138
// SetClass ( i , 2 ) ;
15109: LD_VAR 0 1
15113: PPUSH
15114: LD_INT 2
15116: PPUSH
15117: CALL_OW 336
// end ;
15121: GO 15086
15123: POP
15124: POP
// end ;
15125: PPOPN 2
15127: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15128: LD_EXP 55
15132: PUSH
15133: LD_EXP 108
15137: AND
15138: IFFALSE 15419
15140: GO 15142
15142: DISABLE
15143: LD_INT 0
15145: PPUSH
15146: PPUSH
15147: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15148: LD_OWVAR 2
15152: PPUSH
15153: LD_INT 9
15155: PPUSH
15156: LD_INT 1
15158: PPUSH
15159: LD_INT 1
15161: PPUSH
15162: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15166: LD_INT 9
15168: PPUSH
15169: LD_OWVAR 2
15173: PPUSH
15174: CALL_OW 343
// uc_side := 9 ;
15178: LD_ADDR_OWVAR 20
15182: PUSH
15183: LD_INT 9
15185: ST_TO_ADDR
// uc_nation := 2 ;
15186: LD_ADDR_OWVAR 21
15190: PUSH
15191: LD_INT 2
15193: ST_TO_ADDR
// hc_name := Dark Warrior ;
15194: LD_ADDR_OWVAR 26
15198: PUSH
15199: LD_STRING Dark Warrior
15201: ST_TO_ADDR
// hc_gallery :=  ;
15202: LD_ADDR_OWVAR 33
15206: PUSH
15207: LD_STRING 
15209: ST_TO_ADDR
// hc_noskilllimit := true ;
15210: LD_ADDR_OWVAR 76
15214: PUSH
15215: LD_INT 1
15217: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15218: LD_ADDR_OWVAR 31
15222: PUSH
15223: LD_INT 30
15225: PUSH
15226: LD_INT 30
15228: PUSH
15229: LD_INT 30
15231: PUSH
15232: LD_INT 30
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: ST_TO_ADDR
// un := CreateHuman ;
15241: LD_ADDR_VAR 0 3
15245: PUSH
15246: CALL_OW 44
15250: ST_TO_ADDR
// hc_noskilllimit := false ;
15251: LD_ADDR_OWVAR 76
15255: PUSH
15256: LD_INT 0
15258: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15259: LD_VAR 0 3
15263: PPUSH
15264: LD_INT 1
15266: PPUSH
15267: CALL_OW 51
// p := 0 ;
15271: LD_ADDR_VAR 0 2
15275: PUSH
15276: LD_INT 0
15278: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15279: LD_INT 35
15281: PPUSH
15282: CALL_OW 67
// p := p + 1 ;
15286: LD_ADDR_VAR 0 2
15290: PUSH
15291: LD_VAR 0 2
15295: PUSH
15296: LD_INT 1
15298: PLUS
15299: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15300: LD_VAR 0 3
15304: PPUSH
15305: CALL_OW 256
15309: PUSH
15310: LD_INT 1000
15312: LESS
15313: IFFALSE 15327
// SetLives ( un , 1000 ) ;
15315: LD_VAR 0 3
15319: PPUSH
15320: LD_INT 1000
15322: PPUSH
15323: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15327: LD_VAR 0 3
15331: PPUSH
15332: LD_INT 81
15334: PUSH
15335: LD_OWVAR 2
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 91
15346: PUSH
15347: LD_VAR 0 3
15351: PUSH
15352: LD_INT 30
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PPUSH
15364: CALL_OW 69
15368: PPUSH
15369: LD_VAR 0 3
15373: PPUSH
15374: CALL_OW 74
15378: PPUSH
15379: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15383: LD_VAR 0 2
15387: PUSH
15388: LD_INT 60
15390: GREATER
15391: PUSH
15392: LD_VAR 0 3
15396: PPUSH
15397: CALL_OW 301
15401: OR
15402: IFFALSE 15279
// if un then
15404: LD_VAR 0 3
15408: IFFALSE 15419
// RemoveUnit ( un ) ;
15410: LD_VAR 0 3
15414: PPUSH
15415: CALL_OW 64
// end ;
15419: PPOPN 3
15421: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15422: LD_INT 0
15424: PPUSH
// case cmd of 301 :
15425: LD_VAR 0 1
15429: PUSH
15430: LD_INT 301
15432: DOUBLE
15433: EQUAL
15434: IFTRUE 15438
15436: GO 15470
15438: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15439: LD_VAR 0 6
15443: PPUSH
15444: LD_VAR 0 7
15448: PPUSH
15449: LD_VAR 0 8
15453: PPUSH
15454: LD_VAR 0 4
15458: PPUSH
15459: LD_VAR 0 5
15463: PPUSH
15464: CALL 16671 0 5
15468: GO 15591
15470: LD_INT 302
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15515
15478: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15479: LD_VAR 0 6
15483: PPUSH
15484: LD_VAR 0 7
15488: PPUSH
15489: LD_VAR 0 8
15493: PPUSH
15494: LD_VAR 0 9
15498: PPUSH
15499: LD_VAR 0 4
15503: PPUSH
15504: LD_VAR 0 5
15508: PPUSH
15509: CALL 16762 0 6
15513: GO 15591
15515: LD_INT 303
15517: DOUBLE
15518: EQUAL
15519: IFTRUE 15523
15521: GO 15560
15523: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15524: LD_VAR 0 6
15528: PPUSH
15529: LD_VAR 0 7
15533: PPUSH
15534: LD_VAR 0 8
15538: PPUSH
15539: LD_VAR 0 9
15543: PPUSH
15544: LD_VAR 0 4
15548: PPUSH
15549: LD_VAR 0 5
15553: PPUSH
15554: CALL 15596 0 6
15558: GO 15591
15560: LD_INT 304
15562: DOUBLE
15563: EQUAL
15564: IFTRUE 15568
15566: GO 15590
15568: POP
// hHackTeleport ( unit , x , y ) ; end ;
15569: LD_VAR 0 2
15573: PPUSH
15574: LD_VAR 0 4
15578: PPUSH
15579: LD_VAR 0 5
15583: PPUSH
15584: CALL 17355 0 3
15588: GO 15591
15590: POP
// end ;
15591: LD_VAR 0 12
15595: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15600: LD_VAR 0 1
15604: PUSH
15605: LD_INT 1
15607: LESS
15608: PUSH
15609: LD_VAR 0 1
15613: PUSH
15614: LD_INT 3
15616: GREATER
15617: OR
15618: PUSH
15619: LD_VAR 0 5
15623: PPUSH
15624: LD_VAR 0 6
15628: PPUSH
15629: CALL_OW 428
15633: OR
15634: IFFALSE 15638
// exit ;
15636: GO 16358
// uc_side := your_side ;
15638: LD_ADDR_OWVAR 20
15642: PUSH
15643: LD_OWVAR 2
15647: ST_TO_ADDR
// uc_nation := nation ;
15648: LD_ADDR_OWVAR 21
15652: PUSH
15653: LD_VAR 0 1
15657: ST_TO_ADDR
// bc_level = 1 ;
15658: LD_ADDR_OWVAR 43
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// case btype of 1 :
15666: LD_VAR 0 2
15670: PUSH
15671: LD_INT 1
15673: DOUBLE
15674: EQUAL
15675: IFTRUE 15679
15677: GO 15690
15679: POP
// bc_type := b_depot ; 2 :
15680: LD_ADDR_OWVAR 42
15684: PUSH
15685: LD_INT 0
15687: ST_TO_ADDR
15688: GO 16302
15690: LD_INT 2
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15709
15698: POP
// bc_type := b_warehouse ; 3 :
15699: LD_ADDR_OWVAR 42
15703: PUSH
15704: LD_INT 1
15706: ST_TO_ADDR
15707: GO 16302
15709: LD_INT 3
15711: DOUBLE
15712: EQUAL
15713: IFTRUE 15717
15715: GO 15728
15717: POP
// bc_type := b_lab ; 4 .. 9 :
15718: LD_ADDR_OWVAR 42
15722: PUSH
15723: LD_INT 6
15725: ST_TO_ADDR
15726: GO 16302
15728: LD_INT 4
15730: DOUBLE
15731: GREATEREQUAL
15732: IFFALSE 15740
15734: LD_INT 9
15736: DOUBLE
15737: LESSEQUAL
15738: IFTRUE 15742
15740: GO 15794
15742: POP
// begin bc_type := b_lab_half ;
15743: LD_ADDR_OWVAR 42
15747: PUSH
15748: LD_INT 7
15750: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15751: LD_ADDR_OWVAR 44
15755: PUSH
15756: LD_INT 10
15758: PUSH
15759: LD_INT 11
15761: PUSH
15762: LD_INT 12
15764: PUSH
15765: LD_INT 15
15767: PUSH
15768: LD_INT 14
15770: PUSH
15771: LD_INT 13
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: PUSH
15782: LD_VAR 0 2
15786: PUSH
15787: LD_INT 3
15789: MINUS
15790: ARRAY
15791: ST_TO_ADDR
// end ; 10 .. 13 :
15792: GO 16302
15794: LD_INT 10
15796: DOUBLE
15797: GREATEREQUAL
15798: IFFALSE 15806
15800: LD_INT 13
15802: DOUBLE
15803: LESSEQUAL
15804: IFTRUE 15808
15806: GO 15885
15808: POP
// begin bc_type := b_lab_full ;
15809: LD_ADDR_OWVAR 42
15813: PUSH
15814: LD_INT 8
15816: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15817: LD_ADDR_OWVAR 44
15821: PUSH
15822: LD_INT 10
15824: PUSH
15825: LD_INT 12
15827: PUSH
15828: LD_INT 14
15830: PUSH
15831: LD_INT 13
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PUSH
15840: LD_VAR 0 2
15844: PUSH
15845: LD_INT 9
15847: MINUS
15848: ARRAY
15849: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15850: LD_ADDR_OWVAR 45
15854: PUSH
15855: LD_INT 11
15857: PUSH
15858: LD_INT 15
15860: PUSH
15861: LD_INT 12
15863: PUSH
15864: LD_INT 15
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: PUSH
15873: LD_VAR 0 2
15877: PUSH
15878: LD_INT 9
15880: MINUS
15881: ARRAY
15882: ST_TO_ADDR
// end ; 14 :
15883: GO 16302
15885: LD_INT 14
15887: DOUBLE
15888: EQUAL
15889: IFTRUE 15893
15891: GO 15904
15893: POP
// bc_type := b_workshop ; 15 :
15894: LD_ADDR_OWVAR 42
15898: PUSH
15899: LD_INT 2
15901: ST_TO_ADDR
15902: GO 16302
15904: LD_INT 15
15906: DOUBLE
15907: EQUAL
15908: IFTRUE 15912
15910: GO 15923
15912: POP
// bc_type := b_factory ; 16 :
15913: LD_ADDR_OWVAR 42
15917: PUSH
15918: LD_INT 3
15920: ST_TO_ADDR
15921: GO 16302
15923: LD_INT 16
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 15942
15931: POP
// bc_type := b_ext_gun ; 17 :
15932: LD_ADDR_OWVAR 42
15936: PUSH
15937: LD_INT 17
15939: ST_TO_ADDR
15940: GO 16302
15942: LD_INT 17
15944: DOUBLE
15945: EQUAL
15946: IFTRUE 15950
15948: GO 15978
15950: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15951: LD_ADDR_OWVAR 42
15955: PUSH
15956: LD_INT 19
15958: PUSH
15959: LD_INT 23
15961: PUSH
15962: LD_INT 19
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: LIST
15969: PUSH
15970: LD_VAR 0 1
15974: ARRAY
15975: ST_TO_ADDR
15976: GO 16302
15978: LD_INT 18
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 15997
15986: POP
// bc_type := b_ext_radar ; 19 :
15987: LD_ADDR_OWVAR 42
15991: PUSH
15992: LD_INT 20
15994: ST_TO_ADDR
15995: GO 16302
15997: LD_INT 19
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16016
16005: POP
// bc_type := b_ext_radio ; 20 :
16006: LD_ADDR_OWVAR 42
16010: PUSH
16011: LD_INT 22
16013: ST_TO_ADDR
16014: GO 16302
16016: LD_INT 20
16018: DOUBLE
16019: EQUAL
16020: IFTRUE 16024
16022: GO 16035
16024: POP
// bc_type := b_ext_siberium ; 21 :
16025: LD_ADDR_OWVAR 42
16029: PUSH
16030: LD_INT 21
16032: ST_TO_ADDR
16033: GO 16302
16035: LD_INT 21
16037: DOUBLE
16038: EQUAL
16039: IFTRUE 16043
16041: GO 16054
16043: POP
// bc_type := b_ext_computer ; 22 :
16044: LD_ADDR_OWVAR 42
16048: PUSH
16049: LD_INT 24
16051: ST_TO_ADDR
16052: GO 16302
16054: LD_INT 22
16056: DOUBLE
16057: EQUAL
16058: IFTRUE 16062
16060: GO 16073
16062: POP
// bc_type := b_ext_track ; 23 :
16063: LD_ADDR_OWVAR 42
16067: PUSH
16068: LD_INT 16
16070: ST_TO_ADDR
16071: GO 16302
16073: LD_INT 23
16075: DOUBLE
16076: EQUAL
16077: IFTRUE 16081
16079: GO 16092
16081: POP
// bc_type := b_ext_laser ; 24 :
16082: LD_ADDR_OWVAR 42
16086: PUSH
16087: LD_INT 25
16089: ST_TO_ADDR
16090: GO 16302
16092: LD_INT 24
16094: DOUBLE
16095: EQUAL
16096: IFTRUE 16100
16098: GO 16111
16100: POP
// bc_type := b_control_tower ; 25 :
16101: LD_ADDR_OWVAR 42
16105: PUSH
16106: LD_INT 36
16108: ST_TO_ADDR
16109: GO 16302
16111: LD_INT 25
16113: DOUBLE
16114: EQUAL
16115: IFTRUE 16119
16117: GO 16130
16119: POP
// bc_type := b_breastwork ; 26 :
16120: LD_ADDR_OWVAR 42
16124: PUSH
16125: LD_INT 31
16127: ST_TO_ADDR
16128: GO 16302
16130: LD_INT 26
16132: DOUBLE
16133: EQUAL
16134: IFTRUE 16138
16136: GO 16149
16138: POP
// bc_type := b_bunker ; 27 :
16139: LD_ADDR_OWVAR 42
16143: PUSH
16144: LD_INT 32
16146: ST_TO_ADDR
16147: GO 16302
16149: LD_INT 27
16151: DOUBLE
16152: EQUAL
16153: IFTRUE 16157
16155: GO 16168
16157: POP
// bc_type := b_turret ; 28 :
16158: LD_ADDR_OWVAR 42
16162: PUSH
16163: LD_INT 33
16165: ST_TO_ADDR
16166: GO 16302
16168: LD_INT 28
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16187
16176: POP
// bc_type := b_armoury ; 29 :
16177: LD_ADDR_OWVAR 42
16181: PUSH
16182: LD_INT 4
16184: ST_TO_ADDR
16185: GO 16302
16187: LD_INT 29
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16206
16195: POP
// bc_type := b_barracks ; 30 :
16196: LD_ADDR_OWVAR 42
16200: PUSH
16201: LD_INT 5
16203: ST_TO_ADDR
16204: GO 16302
16206: LD_INT 30
16208: DOUBLE
16209: EQUAL
16210: IFTRUE 16214
16212: GO 16225
16214: POP
// bc_type := b_solar_power ; 31 :
16215: LD_ADDR_OWVAR 42
16219: PUSH
16220: LD_INT 27
16222: ST_TO_ADDR
16223: GO 16302
16225: LD_INT 31
16227: DOUBLE
16228: EQUAL
16229: IFTRUE 16233
16231: GO 16244
16233: POP
// bc_type := b_oil_power ; 32 :
16234: LD_ADDR_OWVAR 42
16238: PUSH
16239: LD_INT 26
16241: ST_TO_ADDR
16242: GO 16302
16244: LD_INT 32
16246: DOUBLE
16247: EQUAL
16248: IFTRUE 16252
16250: GO 16263
16252: POP
// bc_type := b_siberite_power ; 33 :
16253: LD_ADDR_OWVAR 42
16257: PUSH
16258: LD_INT 28
16260: ST_TO_ADDR
16261: GO 16302
16263: LD_INT 33
16265: DOUBLE
16266: EQUAL
16267: IFTRUE 16271
16269: GO 16282
16271: POP
// bc_type := b_oil_mine ; 34 :
16272: LD_ADDR_OWVAR 42
16276: PUSH
16277: LD_INT 29
16279: ST_TO_ADDR
16280: GO 16302
16282: LD_INT 34
16284: DOUBLE
16285: EQUAL
16286: IFTRUE 16290
16288: GO 16301
16290: POP
// bc_type := b_siberite_mine ; end ;
16291: LD_ADDR_OWVAR 42
16295: PUSH
16296: LD_INT 30
16298: ST_TO_ADDR
16299: GO 16302
16301: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16302: LD_ADDR_VAR 0 8
16306: PUSH
16307: LD_VAR 0 5
16311: PPUSH
16312: LD_VAR 0 6
16316: PPUSH
16317: LD_VAR 0 3
16321: PPUSH
16322: CALL_OW 47
16326: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16327: LD_OWVAR 42
16331: PUSH
16332: LD_INT 32
16334: PUSH
16335: LD_INT 33
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: IN
16342: IFFALSE 16358
// PlaceWeaponTurret ( b , weapon ) ;
16344: LD_VAR 0 8
16348: PPUSH
16349: LD_VAR 0 4
16353: PPUSH
16354: CALL_OW 431
// end ;
16358: LD_VAR 0 7
16362: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16363: LD_INT 0
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16369: LD_ADDR_VAR 0 4
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_OWVAR 2
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 30
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 30
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PPUSH
16418: CALL_OW 69
16422: ST_TO_ADDR
// if not tmp then
16423: LD_VAR 0 4
16427: NOT
16428: IFFALSE 16432
// exit ;
16430: GO 16491
// for i in tmp do
16432: LD_ADDR_VAR 0 2
16436: PUSH
16437: LD_VAR 0 4
16441: PUSH
16442: FOR_IN
16443: IFFALSE 16489
// for j = 1 to 3 do
16445: LD_ADDR_VAR 0 3
16449: PUSH
16450: DOUBLE
16451: LD_INT 1
16453: DEC
16454: ST_TO_ADDR
16455: LD_INT 3
16457: PUSH
16458: FOR_TO
16459: IFFALSE 16485
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16461: LD_VAR 0 2
16465: PPUSH
16466: CALL_OW 274
16470: PPUSH
16471: LD_VAR 0 3
16475: PPUSH
16476: LD_INT 99999
16478: PPUSH
16479: CALL_OW 277
16483: GO 16458
16485: POP
16486: POP
16487: GO 16442
16489: POP
16490: POP
// end ;
16491: LD_VAR 0 1
16495: RET
// export function hHackSetLevel10 ; var i , j ; begin
16496: LD_INT 0
16498: PPUSH
16499: PPUSH
16500: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 21
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PPUSH
16516: CALL_OW 69
16520: PUSH
16521: FOR_IN
16522: IFFALSE 16574
// if IsSelected ( i ) then
16524: LD_VAR 0 2
16528: PPUSH
16529: CALL_OW 306
16533: IFFALSE 16572
// begin for j := 1 to 4 do
16535: LD_ADDR_VAR 0 3
16539: PUSH
16540: DOUBLE
16541: LD_INT 1
16543: DEC
16544: ST_TO_ADDR
16545: LD_INT 4
16547: PUSH
16548: FOR_TO
16549: IFFALSE 16570
// SetSkill ( i , j , 10 ) ;
16551: LD_VAR 0 2
16555: PPUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: LD_INT 10
16563: PPUSH
16564: CALL_OW 237
16568: GO 16548
16570: POP
16571: POP
// end ;
16572: GO 16521
16574: POP
16575: POP
// end ;
16576: LD_VAR 0 1
16580: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16581: LD_INT 0
16583: PPUSH
16584: PPUSH
16585: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16586: LD_ADDR_VAR 0 2
16590: PUSH
16591: LD_INT 22
16593: PUSH
16594: LD_OWVAR 2
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 21
16605: PUSH
16606: LD_INT 1
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PPUSH
16617: CALL_OW 69
16621: PUSH
16622: FOR_IN
16623: IFFALSE 16664
// begin for j := 1 to 4 do
16625: LD_ADDR_VAR 0 3
16629: PUSH
16630: DOUBLE
16631: LD_INT 1
16633: DEC
16634: ST_TO_ADDR
16635: LD_INT 4
16637: PUSH
16638: FOR_TO
16639: IFFALSE 16660
// SetSkill ( i , j , 10 ) ;
16641: LD_VAR 0 2
16645: PPUSH
16646: LD_VAR 0 3
16650: PPUSH
16651: LD_INT 10
16653: PPUSH
16654: CALL_OW 237
16658: GO 16638
16660: POP
16661: POP
// end ;
16662: GO 16622
16664: POP
16665: POP
// end ;
16666: LD_VAR 0 1
16670: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16671: LD_INT 0
16673: PPUSH
// uc_side := your_side ;
16674: LD_ADDR_OWVAR 20
16678: PUSH
16679: LD_OWVAR 2
16683: ST_TO_ADDR
// uc_nation := nation ;
16684: LD_ADDR_OWVAR 21
16688: PUSH
16689: LD_VAR 0 1
16693: ST_TO_ADDR
// InitHc ;
16694: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16698: LD_INT 0
16700: PPUSH
16701: LD_VAR 0 2
16705: PPUSH
16706: LD_VAR 0 3
16710: PPUSH
16711: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16715: LD_VAR 0 4
16719: PPUSH
16720: LD_VAR 0 5
16724: PPUSH
16725: CALL_OW 428
16729: PUSH
16730: LD_INT 0
16732: EQUAL
16733: IFFALSE 16757
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16735: CALL_OW 44
16739: PPUSH
16740: LD_VAR 0 4
16744: PPUSH
16745: LD_VAR 0 5
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 48
// end ;
16757: LD_VAR 0 6
16761: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16762: LD_INT 0
16764: PPUSH
16765: PPUSH
// uc_side := your_side ;
16766: LD_ADDR_OWVAR 20
16770: PUSH
16771: LD_OWVAR 2
16775: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16776: LD_VAR 0 1
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: LD_INT 2
16786: PUSH
16787: LD_INT 3
16789: PUSH
16790: LD_INT 4
16792: PUSH
16793: LD_INT 5
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: IN
16803: IFFALSE 16815
// uc_nation := nation_american else
16805: LD_ADDR_OWVAR 21
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
16813: GO 16858
// if chassis in [ 11 , 12 , 13 , 14 ] then
16815: LD_VAR 0 1
16819: PUSH
16820: LD_INT 11
16822: PUSH
16823: LD_INT 12
16825: PUSH
16826: LD_INT 13
16828: PUSH
16829: LD_INT 14
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: IN
16838: IFFALSE 16850
// uc_nation := nation_arabian else
16840: LD_ADDR_OWVAR 21
16844: PUSH
16845: LD_INT 2
16847: ST_TO_ADDR
16848: GO 16858
// uc_nation := nation_russian ;
16850: LD_ADDR_OWVAR 21
16854: PUSH
16855: LD_INT 3
16857: ST_TO_ADDR
// vc_chassis := chassis ;
16858: LD_ADDR_OWVAR 37
16862: PUSH
16863: LD_VAR 0 1
16867: ST_TO_ADDR
// vc_engine := engine ;
16868: LD_ADDR_OWVAR 39
16872: PUSH
16873: LD_VAR 0 2
16877: ST_TO_ADDR
// vc_control := control ;
16878: LD_ADDR_OWVAR 38
16882: PUSH
16883: LD_VAR 0 3
16887: ST_TO_ADDR
// vc_weapon := weapon ;
16888: LD_ADDR_OWVAR 40
16892: PUSH
16893: LD_VAR 0 4
16897: ST_TO_ADDR
// un := CreateVehicle ;
16898: LD_ADDR_VAR 0 8
16902: PUSH
16903: CALL_OW 45
16907: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16908: LD_VAR 0 8
16912: PPUSH
16913: LD_INT 0
16915: PPUSH
16916: LD_INT 5
16918: PPUSH
16919: CALL_OW 12
16923: PPUSH
16924: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16928: LD_VAR 0 8
16932: PPUSH
16933: LD_VAR 0 5
16937: PPUSH
16938: LD_VAR 0 6
16942: PPUSH
16943: LD_INT 1
16945: PPUSH
16946: CALL_OW 48
// end ;
16950: LD_VAR 0 7
16954: RET
// export hInvincible ; every 1 do
16955: GO 16957
16957: DISABLE
// hInvincible := [ ] ;
16958: LD_ADDR_EXP 109
16962: PUSH
16963: EMPTY
16964: ST_TO_ADDR
16965: END
// every 10 do var i ;
16966: GO 16968
16968: DISABLE
16969: LD_INT 0
16971: PPUSH
// begin enable ;
16972: ENABLE
// if not hInvincible then
16973: LD_EXP 109
16977: NOT
16978: IFFALSE 16982
// exit ;
16980: GO 17026
// for i in hInvincible do
16982: LD_ADDR_VAR 0 1
16986: PUSH
16987: LD_EXP 109
16991: PUSH
16992: FOR_IN
16993: IFFALSE 17024
// if GetLives ( i ) < 1000 then
16995: LD_VAR 0 1
16999: PPUSH
17000: CALL_OW 256
17004: PUSH
17005: LD_INT 1000
17007: LESS
17008: IFFALSE 17022
// SetLives ( i , 1000 ) ;
17010: LD_VAR 0 1
17014: PPUSH
17015: LD_INT 1000
17017: PPUSH
17018: CALL_OW 234
17022: GO 16992
17024: POP
17025: POP
// end ;
17026: PPOPN 1
17028: END
// export function hHackInvincible ; var i ; begin
17029: LD_INT 0
17031: PPUSH
17032: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17033: LD_ADDR_VAR 0 2
17037: PUSH
17038: LD_INT 2
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 21
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: PUSH
17071: FOR_IN
17072: IFFALSE 17133
// if IsSelected ( i ) then
17074: LD_VAR 0 2
17078: PPUSH
17079: CALL_OW 306
17083: IFFALSE 17131
// begin if i in hInvincible then
17085: LD_VAR 0 2
17089: PUSH
17090: LD_EXP 109
17094: IN
17095: IFFALSE 17115
// hInvincible := hInvincible diff i else
17097: LD_ADDR_EXP 109
17101: PUSH
17102: LD_EXP 109
17106: PUSH
17107: LD_VAR 0 2
17111: DIFF
17112: ST_TO_ADDR
17113: GO 17131
// hInvincible := hInvincible union i ;
17115: LD_ADDR_EXP 109
17119: PUSH
17120: LD_EXP 109
17124: PUSH
17125: LD_VAR 0 2
17129: UNION
17130: ST_TO_ADDR
// end ;
17131: GO 17071
17133: POP
17134: POP
// end ;
17135: LD_VAR 0 1
17139: RET
// export function hHackInvisible ; var i , j ; begin
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
17144: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17145: LD_ADDR_VAR 0 2
17149: PUSH
17150: LD_INT 21
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PPUSH
17160: CALL_OW 69
17164: PUSH
17165: FOR_IN
17166: IFFALSE 17190
// if IsSelected ( i ) then
17168: LD_VAR 0 2
17172: PPUSH
17173: CALL_OW 306
17177: IFFALSE 17188
// ComForceInvisible ( i ) ;
17179: LD_VAR 0 2
17183: PPUSH
17184: CALL_OW 496
17188: GO 17165
17190: POP
17191: POP
// end ;
17192: LD_VAR 0 1
17196: RET
// export function hHackChangeYourSide ; begin
17197: LD_INT 0
17199: PPUSH
// if your_side = 8 then
17200: LD_OWVAR 2
17204: PUSH
17205: LD_INT 8
17207: EQUAL
17208: IFFALSE 17220
// your_side := 0 else
17210: LD_ADDR_OWVAR 2
17214: PUSH
17215: LD_INT 0
17217: ST_TO_ADDR
17218: GO 17234
// your_side := your_side + 1 ;
17220: LD_ADDR_OWVAR 2
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: LD_INT 1
17232: PLUS
17233: ST_TO_ADDR
// end ;
17234: LD_VAR 0 1
17238: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17239: LD_INT 0
17241: PPUSH
17242: PPUSH
17243: PPUSH
// for i in all_units do
17244: LD_ADDR_VAR 0 2
17248: PUSH
17249: LD_OWVAR 3
17253: PUSH
17254: FOR_IN
17255: IFFALSE 17333
// if IsSelected ( i ) then
17257: LD_VAR 0 2
17261: PPUSH
17262: CALL_OW 306
17266: IFFALSE 17331
// begin j := GetSide ( i ) ;
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: LD_VAR 0 2
17277: PPUSH
17278: CALL_OW 255
17282: ST_TO_ADDR
// if j = 8 then
17283: LD_VAR 0 3
17287: PUSH
17288: LD_INT 8
17290: EQUAL
17291: IFFALSE 17303
// j := 0 else
17293: LD_ADDR_VAR 0 3
17297: PUSH
17298: LD_INT 0
17300: ST_TO_ADDR
17301: GO 17317
// j := j + 1 ;
17303: LD_ADDR_VAR 0 3
17307: PUSH
17308: LD_VAR 0 3
17312: PUSH
17313: LD_INT 1
17315: PLUS
17316: ST_TO_ADDR
// SetSide ( i , j ) ;
17317: LD_VAR 0 2
17321: PPUSH
17322: LD_VAR 0 3
17326: PPUSH
17327: CALL_OW 235
// end ;
17331: GO 17254
17333: POP
17334: POP
// end ;
17335: LD_VAR 0 1
17339: RET
// export function hHackFog ; begin
17340: LD_INT 0
17342: PPUSH
// FogOff ( true ) ;
17343: LD_INT 1
17345: PPUSH
17346: CALL_OW 344
// end ;
17350: LD_VAR 0 1
17354: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17355: LD_INT 0
17357: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17358: LD_VAR 0 1
17362: PPUSH
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_VAR 0 3
17372: PPUSH
17373: LD_INT 1
17375: PPUSH
17376: LD_INT 1
17378: PPUSH
17379: CALL_OW 483
// CenterOnXY ( x , y ) ;
17383: LD_VAR 0 2
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: CALL_OW 84
// end ; end_of_file
17397: LD_VAR 0 4
17401: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17402: LD_INT 0
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 264
17417: PUSH
17418: LD_EXP 43
17422: EQUAL
17423: IFFALSE 17495
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17425: LD_INT 68
17427: PPUSH
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 255
17437: PPUSH
17438: CALL_OW 321
17442: PUSH
17443: LD_INT 2
17445: EQUAL
17446: IFFALSE 17458
// eff := 70 else
17448: LD_ADDR_VAR 0 4
17452: PUSH
17453: LD_INT 70
17455: ST_TO_ADDR
17456: GO 17466
// eff := 30 ;
17458: LD_ADDR_VAR 0 4
17462: PUSH
17463: LD_INT 30
17465: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 250
17475: PPUSH
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 251
17485: PPUSH
17486: LD_VAR 0 4
17490: PPUSH
17491: CALL_OW 495
// end ; end ;
17495: LD_VAR 0 2
17499: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17500: LD_INT 0
17502: PPUSH
// end ;
17503: LD_VAR 0 4
17507: RET
// export function SOS_Command ( cmd ) ; begin
17508: LD_INT 0
17510: PPUSH
// end ;
17511: LD_VAR 0 2
17515: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17516: LD_INT 0
17518: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17519: LD_VAR 0 1
17523: PUSH
17524: LD_INT 250
17526: EQUAL
17527: PUSH
17528: LD_VAR 0 2
17532: PPUSH
17533: CALL_OW 264
17537: PUSH
17538: LD_EXP 46
17542: EQUAL
17543: AND
17544: IFFALSE 17565
// MinerPlaceMine ( unit , x , y ) ;
17546: LD_VAR 0 2
17550: PPUSH
17551: LD_VAR 0 4
17555: PPUSH
17556: LD_VAR 0 5
17560: PPUSH
17561: CALL 19906 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17565: LD_VAR 0 1
17569: PUSH
17570: LD_INT 251
17572: EQUAL
17573: PUSH
17574: LD_VAR 0 2
17578: PPUSH
17579: CALL_OW 264
17583: PUSH
17584: LD_EXP 46
17588: EQUAL
17589: AND
17590: IFFALSE 17611
// MinerDetonateMine ( unit , x , y ) ;
17592: LD_VAR 0 2
17596: PPUSH
17597: LD_VAR 0 4
17601: PPUSH
17602: LD_VAR 0 5
17606: PPUSH
17607: CALL 20183 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17611: LD_VAR 0 1
17615: PUSH
17616: LD_INT 252
17618: EQUAL
17619: PUSH
17620: LD_VAR 0 2
17624: PPUSH
17625: CALL_OW 264
17629: PUSH
17630: LD_EXP 46
17634: EQUAL
17635: AND
17636: IFFALSE 17657
// MinerCreateMinefield ( unit , x , y ) ;
17638: LD_VAR 0 2
17642: PPUSH
17643: LD_VAR 0 4
17647: PPUSH
17648: LD_VAR 0 5
17652: PPUSH
17653: CALL 20600 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 253
17664: EQUAL
17665: PUSH
17666: LD_VAR 0 2
17670: PPUSH
17671: CALL_OW 257
17675: PUSH
17676: LD_INT 5
17678: EQUAL
17679: AND
17680: IFFALSE 17701
// ComBinocular ( unit , x , y ) ;
17682: LD_VAR 0 2
17686: PPUSH
17687: LD_VAR 0 4
17691: PPUSH
17692: LD_VAR 0 5
17696: PPUSH
17697: CALL 20971 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17701: LD_VAR 0 1
17705: PUSH
17706: LD_INT 254
17708: EQUAL
17709: PUSH
17710: LD_VAR 0 2
17714: PPUSH
17715: CALL_OW 264
17719: PUSH
17720: LD_EXP 41
17724: EQUAL
17725: AND
17726: PUSH
17727: LD_VAR 0 3
17731: PPUSH
17732: CALL_OW 263
17736: PUSH
17737: LD_INT 3
17739: EQUAL
17740: AND
17741: IFFALSE 17757
// HackDestroyVehicle ( unit , selectedUnit ) ;
17743: LD_VAR 0 2
17747: PPUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: CALL 19266 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17757: LD_VAR 0 1
17761: PUSH
17762: LD_INT 255
17764: EQUAL
17765: PUSH
17766: LD_VAR 0 2
17770: PPUSH
17771: CALL_OW 264
17775: PUSH
17776: LD_INT 14
17778: PUSH
17779: LD_INT 53
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: IN
17786: AND
17787: PUSH
17788: LD_VAR 0 4
17792: PPUSH
17793: LD_VAR 0 5
17797: PPUSH
17798: CALL_OW 488
17802: AND
17803: IFFALSE 17827
// CutTreeXYR ( unit , x , y , 12 ) ;
17805: LD_VAR 0 2
17809: PPUSH
17810: LD_VAR 0 4
17814: PPUSH
17815: LD_VAR 0 5
17819: PPUSH
17820: LD_INT 12
17822: PPUSH
17823: CALL 17832 0 4
// end ;
17827: LD_VAR 0 6
17831: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17832: LD_INT 0
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17843: LD_VAR 0 1
17847: NOT
17848: PUSH
17849: LD_VAR 0 2
17853: PPUSH
17854: LD_VAR 0 3
17858: PPUSH
17859: CALL_OW 488
17863: NOT
17864: OR
17865: PUSH
17866: LD_VAR 0 4
17870: NOT
17871: OR
17872: IFFALSE 17876
// exit ;
17874: GO 18216
// list := [ ] ;
17876: LD_ADDR_VAR 0 13
17880: PUSH
17881: EMPTY
17882: ST_TO_ADDR
// if x - r < 0 then
17883: LD_VAR 0 2
17887: PUSH
17888: LD_VAR 0 4
17892: MINUS
17893: PUSH
17894: LD_INT 0
17896: LESS
17897: IFFALSE 17909
// min_x := 0 else
17899: LD_ADDR_VAR 0 7
17903: PUSH
17904: LD_INT 0
17906: ST_TO_ADDR
17907: GO 17925
// min_x := x - r ;
17909: LD_ADDR_VAR 0 7
17913: PUSH
17914: LD_VAR 0 2
17918: PUSH
17919: LD_VAR 0 4
17923: MINUS
17924: ST_TO_ADDR
// if y - r < 0 then
17925: LD_VAR 0 3
17929: PUSH
17930: LD_VAR 0 4
17934: MINUS
17935: PUSH
17936: LD_INT 0
17938: LESS
17939: IFFALSE 17951
// min_y := 0 else
17941: LD_ADDR_VAR 0 8
17945: PUSH
17946: LD_INT 0
17948: ST_TO_ADDR
17949: GO 17967
// min_y := y - r ;
17951: LD_ADDR_VAR 0 8
17955: PUSH
17956: LD_VAR 0 3
17960: PUSH
17961: LD_VAR 0 4
17965: MINUS
17966: ST_TO_ADDR
// max_x := x + r ;
17967: LD_ADDR_VAR 0 9
17971: PUSH
17972: LD_VAR 0 2
17976: PUSH
17977: LD_VAR 0 4
17981: PLUS
17982: ST_TO_ADDR
// max_y := y + r ;
17983: LD_ADDR_VAR 0 10
17987: PUSH
17988: LD_VAR 0 3
17992: PUSH
17993: LD_VAR 0 4
17997: PLUS
17998: ST_TO_ADDR
// for _x = min_x to max_x do
17999: LD_ADDR_VAR 0 11
18003: PUSH
18004: DOUBLE
18005: LD_VAR 0 7
18009: DEC
18010: ST_TO_ADDR
18011: LD_VAR 0 9
18015: PUSH
18016: FOR_TO
18017: IFFALSE 18134
// for _y = min_y to max_y do
18019: LD_ADDR_VAR 0 12
18023: PUSH
18024: DOUBLE
18025: LD_VAR 0 8
18029: DEC
18030: ST_TO_ADDR
18031: LD_VAR 0 10
18035: PUSH
18036: FOR_TO
18037: IFFALSE 18130
// begin if not ValidHex ( _x , _y ) then
18039: LD_VAR 0 11
18043: PPUSH
18044: LD_VAR 0 12
18048: PPUSH
18049: CALL_OW 488
18053: NOT
18054: IFFALSE 18058
// continue ;
18056: GO 18036
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18058: LD_VAR 0 11
18062: PPUSH
18063: LD_VAR 0 12
18067: PPUSH
18068: CALL_OW 351
18072: PUSH
18073: LD_VAR 0 11
18077: PPUSH
18078: LD_VAR 0 12
18082: PPUSH
18083: CALL_OW 554
18087: AND
18088: IFFALSE 18128
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18090: LD_ADDR_VAR 0 13
18094: PUSH
18095: LD_VAR 0 13
18099: PPUSH
18100: LD_VAR 0 13
18104: PUSH
18105: LD_INT 1
18107: PLUS
18108: PPUSH
18109: LD_VAR 0 11
18113: PUSH
18114: LD_VAR 0 12
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 2
18127: ST_TO_ADDR
// end ;
18128: GO 18036
18130: POP
18131: POP
18132: GO 18016
18134: POP
18135: POP
// if not list then
18136: LD_VAR 0 13
18140: NOT
18141: IFFALSE 18145
// exit ;
18143: GO 18216
// for i in list do
18145: LD_ADDR_VAR 0 6
18149: PUSH
18150: LD_VAR 0 13
18154: PUSH
18155: FOR_IN
18156: IFFALSE 18214
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18158: LD_VAR 0 1
18162: PPUSH
18163: LD_STRING M
18165: PUSH
18166: LD_VAR 0 6
18170: PUSH
18171: LD_INT 1
18173: ARRAY
18174: PUSH
18175: LD_VAR 0 6
18179: PUSH
18180: LD_INT 2
18182: ARRAY
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: PPUSH
18208: CALL_OW 447
18212: GO 18155
18214: POP
18215: POP
// end ;
18216: LD_VAR 0 5
18220: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18221: LD_EXP 110
18225: NOT
18226: IFFALSE 18276
18228: GO 18230
18230: DISABLE
// begin initHack := true ;
18231: LD_ADDR_EXP 110
18235: PUSH
18236: LD_INT 1
18238: ST_TO_ADDR
// hackTanks := [ ] ;
18239: LD_ADDR_EXP 111
18243: PUSH
18244: EMPTY
18245: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18246: LD_ADDR_EXP 112
18250: PUSH
18251: EMPTY
18252: ST_TO_ADDR
// hackLimit := 3 ;
18253: LD_ADDR_EXP 113
18257: PUSH
18258: LD_INT 3
18260: ST_TO_ADDR
// hackDist := 12 ;
18261: LD_ADDR_EXP 114
18265: PUSH
18266: LD_INT 12
18268: ST_TO_ADDR
// hackCounter := [ ] ;
18269: LD_ADDR_EXP 115
18273: PUSH
18274: EMPTY
18275: ST_TO_ADDR
// end ;
18276: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18277: LD_EXP 110
18281: PUSH
18282: LD_INT 34
18284: PUSH
18285: LD_EXP 41
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PPUSH
18294: CALL_OW 69
18298: AND
18299: IFFALSE 18554
18301: GO 18303
18303: DISABLE
18304: LD_INT 0
18306: PPUSH
18307: PPUSH
// begin enable ;
18308: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18309: LD_ADDR_VAR 0 1
18313: PUSH
18314: LD_INT 34
18316: PUSH
18317: LD_EXP 41
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PPUSH
18326: CALL_OW 69
18330: PUSH
18331: FOR_IN
18332: IFFALSE 18552
// begin if not i in hackTanks then
18334: LD_VAR 0 1
18338: PUSH
18339: LD_EXP 111
18343: IN
18344: NOT
18345: IFFALSE 18428
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18347: LD_ADDR_EXP 111
18351: PUSH
18352: LD_EXP 111
18356: PPUSH
18357: LD_EXP 111
18361: PUSH
18362: LD_INT 1
18364: PLUS
18365: PPUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 1
18375: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18376: LD_ADDR_EXP 112
18380: PUSH
18381: LD_EXP 112
18385: PPUSH
18386: LD_EXP 112
18390: PUSH
18391: LD_INT 1
18393: PLUS
18394: PPUSH
18395: EMPTY
18396: PPUSH
18397: CALL_OW 1
18401: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18402: LD_ADDR_EXP 115
18406: PUSH
18407: LD_EXP 115
18411: PPUSH
18412: LD_EXP 115
18416: PUSH
18417: LD_INT 1
18419: PLUS
18420: PPUSH
18421: EMPTY
18422: PPUSH
18423: CALL_OW 1
18427: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 302
18437: NOT
18438: IFFALSE 18451
// begin HackUnlinkAll ( i ) ;
18440: LD_VAR 0 1
18444: PPUSH
18445: CALL 18557 0 1
// continue ;
18449: GO 18331
// end ; HackCheckCapturedStatus ( i ) ;
18451: LD_VAR 0 1
18455: PPUSH
18456: CALL 19000 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18460: LD_ADDR_VAR 0 2
18464: PUSH
18465: LD_INT 81
18467: PUSH
18468: LD_VAR 0 1
18472: PPUSH
18473: CALL_OW 255
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 33
18484: PUSH
18485: LD_INT 3
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 91
18494: PUSH
18495: LD_VAR 0 1
18499: PUSH
18500: LD_EXP 114
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 50
18512: PUSH
18513: EMPTY
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: PPUSH
18522: CALL_OW 69
18526: ST_TO_ADDR
// if not tmp then
18527: LD_VAR 0 2
18531: NOT
18532: IFFALSE 18536
// continue ;
18534: GO 18331
// HackLink ( i , tmp ) ;
18536: LD_VAR 0 1
18540: PPUSH
18541: LD_VAR 0 2
18545: PPUSH
18546: CALL 18693 0 2
// end ;
18550: GO 18331
18552: POP
18553: POP
// end ;
18554: PPOPN 2
18556: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18557: LD_INT 0
18559: PPUSH
18560: PPUSH
18561: PPUSH
// if not hack in hackTanks then
18562: LD_VAR 0 1
18566: PUSH
18567: LD_EXP 111
18571: IN
18572: NOT
18573: IFFALSE 18577
// exit ;
18575: GO 18688
// index := GetElementIndex ( hackTanks , hack ) ;
18577: LD_ADDR_VAR 0 4
18581: PUSH
18582: LD_EXP 111
18586: PPUSH
18587: LD_VAR 0 1
18591: PPUSH
18592: CALL 26122 0 2
18596: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18597: LD_EXP 112
18601: PUSH
18602: LD_VAR 0 4
18606: ARRAY
18607: IFFALSE 18688
// begin for i in hackTanksCaptured [ index ] do
18609: LD_ADDR_VAR 0 3
18613: PUSH
18614: LD_EXP 112
18618: PUSH
18619: LD_VAR 0 4
18623: ARRAY
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18652
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18628: LD_VAR 0 3
18632: PUSH
18633: LD_INT 1
18635: ARRAY
18636: PPUSH
18637: LD_VAR 0 3
18641: PUSH
18642: LD_INT 2
18644: ARRAY
18645: PPUSH
18646: CALL_OW 235
18650: GO 18625
18652: POP
18653: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18654: LD_ADDR_EXP 112
18658: PUSH
18659: LD_EXP 112
18663: PPUSH
18664: LD_VAR 0 4
18668: PPUSH
18669: EMPTY
18670: PPUSH
18671: CALL_OW 1
18675: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18676: LD_VAR 0 1
18680: PPUSH
18681: LD_INT 0
18683: PPUSH
18684: CALL_OW 505
// end ; end ;
18688: LD_VAR 0 2
18692: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18693: LD_INT 0
18695: PPUSH
18696: PPUSH
18697: PPUSH
// if not hack in hackTanks or not vehicles then
18698: LD_VAR 0 1
18702: PUSH
18703: LD_EXP 111
18707: IN
18708: NOT
18709: PUSH
18710: LD_VAR 0 2
18714: NOT
18715: OR
18716: IFFALSE 18720
// exit ;
18718: GO 18995
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18720: LD_ADDR_VAR 0 2
18724: PUSH
18725: LD_VAR 0 1
18729: PPUSH
18730: LD_VAR 0 2
18734: PPUSH
18735: LD_INT 1
18737: PPUSH
18738: LD_INT 1
18740: PPUSH
18741: CALL 26772 0 4
18745: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18746: LD_ADDR_VAR 0 5
18750: PUSH
18751: LD_EXP 111
18755: PPUSH
18756: LD_VAR 0 1
18760: PPUSH
18761: CALL 26122 0 2
18765: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18766: LD_EXP 112
18770: PUSH
18771: LD_VAR 0 5
18775: ARRAY
18776: PUSH
18777: LD_EXP 113
18781: LESS
18782: IFFALSE 18971
// begin for i := 1 to vehicles do
18784: LD_ADDR_VAR 0 4
18788: PUSH
18789: DOUBLE
18790: LD_INT 1
18792: DEC
18793: ST_TO_ADDR
18794: LD_VAR 0 2
18798: PUSH
18799: FOR_TO
18800: IFFALSE 18969
// begin if hackTanksCaptured [ index ] = hackLimit then
18802: LD_EXP 112
18806: PUSH
18807: LD_VAR 0 5
18811: ARRAY
18812: PUSH
18813: LD_EXP 113
18817: EQUAL
18818: IFFALSE 18822
// break ;
18820: GO 18969
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18822: LD_ADDR_EXP 115
18826: PUSH
18827: LD_EXP 115
18831: PPUSH
18832: LD_VAR 0 5
18836: PPUSH
18837: LD_EXP 115
18841: PUSH
18842: LD_VAR 0 5
18846: ARRAY
18847: PUSH
18848: LD_INT 1
18850: PLUS
18851: PPUSH
18852: CALL_OW 1
18856: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18857: LD_ADDR_EXP 112
18861: PUSH
18862: LD_EXP 112
18866: PPUSH
18867: LD_VAR 0 5
18871: PUSH
18872: LD_EXP 112
18876: PUSH
18877: LD_VAR 0 5
18881: ARRAY
18882: PUSH
18883: LD_INT 1
18885: PLUS
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PPUSH
18891: LD_VAR 0 2
18895: PUSH
18896: LD_VAR 0 4
18900: ARRAY
18901: PUSH
18902: LD_VAR 0 2
18906: PUSH
18907: LD_VAR 0 4
18911: ARRAY
18912: PPUSH
18913: CALL_OW 255
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PPUSH
18922: CALL 26337 0 3
18926: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18927: LD_VAR 0 2
18931: PUSH
18932: LD_VAR 0 4
18936: ARRAY
18937: PPUSH
18938: LD_VAR 0 1
18942: PPUSH
18943: CALL_OW 255
18947: PPUSH
18948: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18952: LD_VAR 0 2
18956: PUSH
18957: LD_VAR 0 4
18961: ARRAY
18962: PPUSH
18963: CALL_OW 141
// end ;
18967: GO 18799
18969: POP
18970: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18971: LD_VAR 0 1
18975: PPUSH
18976: LD_EXP 112
18980: PUSH
18981: LD_VAR 0 5
18985: ARRAY
18986: PUSH
18987: LD_INT 0
18989: PLUS
18990: PPUSH
18991: CALL_OW 505
// end ;
18995: LD_VAR 0 3
18999: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
// if not hack in hackTanks then
19006: LD_VAR 0 1
19010: PUSH
19011: LD_EXP 111
19015: IN
19016: NOT
19017: IFFALSE 19021
// exit ;
19019: GO 19261
// index := GetElementIndex ( hackTanks , hack ) ;
19021: LD_ADDR_VAR 0 4
19025: PUSH
19026: LD_EXP 111
19030: PPUSH
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL 26122 0 2
19040: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19041: LD_ADDR_VAR 0 3
19045: PUSH
19046: DOUBLE
19047: LD_EXP 112
19051: PUSH
19052: LD_VAR 0 4
19056: ARRAY
19057: INC
19058: ST_TO_ADDR
19059: LD_INT 1
19061: PUSH
19062: FOR_DOWNTO
19063: IFFALSE 19235
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19065: LD_ADDR_VAR 0 5
19069: PUSH
19070: LD_EXP 112
19074: PUSH
19075: LD_VAR 0 4
19079: ARRAY
19080: PUSH
19081: LD_VAR 0 3
19085: ARRAY
19086: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19087: LD_VAR 0 5
19091: PUSH
19092: LD_INT 1
19094: ARRAY
19095: PPUSH
19096: CALL_OW 302
19100: NOT
19101: PUSH
19102: LD_VAR 0 5
19106: PUSH
19107: LD_INT 1
19109: ARRAY
19110: PPUSH
19111: CALL_OW 255
19115: PUSH
19116: LD_VAR 0 1
19120: PPUSH
19121: CALL_OW 255
19125: NONEQUAL
19126: OR
19127: IFFALSE 19233
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19129: LD_VAR 0 5
19133: PUSH
19134: LD_INT 1
19136: ARRAY
19137: PPUSH
19138: CALL_OW 305
19142: PUSH
19143: LD_VAR 0 5
19147: PUSH
19148: LD_INT 1
19150: ARRAY
19151: PPUSH
19152: CALL_OW 255
19156: PUSH
19157: LD_VAR 0 1
19161: PPUSH
19162: CALL_OW 255
19166: EQUAL
19167: AND
19168: IFFALSE 19192
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19170: LD_VAR 0 5
19174: PUSH
19175: LD_INT 1
19177: ARRAY
19178: PPUSH
19179: LD_VAR 0 5
19183: PUSH
19184: LD_INT 2
19186: ARRAY
19187: PPUSH
19188: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19192: LD_ADDR_EXP 112
19196: PUSH
19197: LD_EXP 112
19201: PPUSH
19202: LD_VAR 0 4
19206: PPUSH
19207: LD_EXP 112
19211: PUSH
19212: LD_VAR 0 4
19216: ARRAY
19217: PPUSH
19218: LD_VAR 0 3
19222: PPUSH
19223: CALL_OW 3
19227: PPUSH
19228: CALL_OW 1
19232: ST_TO_ADDR
// end ; end ;
19233: GO 19062
19235: POP
19236: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19237: LD_VAR 0 1
19241: PPUSH
19242: LD_EXP 112
19246: PUSH
19247: LD_VAR 0 4
19251: ARRAY
19252: PUSH
19253: LD_INT 0
19255: PLUS
19256: PPUSH
19257: CALL_OW 505
// end ;
19261: LD_VAR 0 2
19265: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
19270: PPUSH
19271: PPUSH
// if not hack in hackTanks then
19272: LD_VAR 0 1
19276: PUSH
19277: LD_EXP 111
19281: IN
19282: NOT
19283: IFFALSE 19287
// exit ;
19285: GO 19372
// index := GetElementIndex ( hackTanks , hack ) ;
19287: LD_ADDR_VAR 0 5
19291: PUSH
19292: LD_EXP 111
19296: PPUSH
19297: LD_VAR 0 1
19301: PPUSH
19302: CALL 26122 0 2
19306: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19307: LD_ADDR_VAR 0 4
19311: PUSH
19312: DOUBLE
19313: LD_INT 1
19315: DEC
19316: ST_TO_ADDR
19317: LD_EXP 112
19321: PUSH
19322: LD_VAR 0 5
19326: ARRAY
19327: PUSH
19328: FOR_TO
19329: IFFALSE 19370
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19331: LD_EXP 112
19335: PUSH
19336: LD_VAR 0 5
19340: ARRAY
19341: PUSH
19342: LD_VAR 0 4
19346: ARRAY
19347: PUSH
19348: LD_INT 1
19350: ARRAY
19351: PUSH
19352: LD_VAR 0 2
19356: EQUAL
19357: IFFALSE 19368
// KillUnit ( vehicle ) ;
19359: LD_VAR 0 2
19363: PPUSH
19364: CALL_OW 66
19368: GO 19328
19370: POP
19371: POP
// end ;
19372: LD_VAR 0 3
19376: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19377: LD_EXP 116
19381: NOT
19382: IFFALSE 19417
19384: GO 19386
19386: DISABLE
// begin initMiner := true ;
19387: LD_ADDR_EXP 116
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// minersList := [ ] ;
19395: LD_ADDR_EXP 117
19399: PUSH
19400: EMPTY
19401: ST_TO_ADDR
// minerMinesList := [ ] ;
19402: LD_ADDR_EXP 118
19406: PUSH
19407: EMPTY
19408: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19409: LD_ADDR_EXP 119
19413: PUSH
19414: LD_INT 5
19416: ST_TO_ADDR
// end ;
19417: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19418: LD_EXP 116
19422: PUSH
19423: LD_INT 34
19425: PUSH
19426: LD_EXP 46
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PPUSH
19435: CALL_OW 69
19439: AND
19440: IFFALSE 19903
19442: GO 19444
19444: DISABLE
19445: LD_INT 0
19447: PPUSH
19448: PPUSH
19449: PPUSH
19450: PPUSH
// begin enable ;
19451: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19452: LD_ADDR_VAR 0 1
19456: PUSH
19457: LD_INT 34
19459: PUSH
19460: LD_EXP 46
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PPUSH
19469: CALL_OW 69
19473: PUSH
19474: FOR_IN
19475: IFFALSE 19547
// begin if not i in minersList then
19477: LD_VAR 0 1
19481: PUSH
19482: LD_EXP 117
19486: IN
19487: NOT
19488: IFFALSE 19545
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19490: LD_ADDR_EXP 117
19494: PUSH
19495: LD_EXP 117
19499: PPUSH
19500: LD_EXP 117
19504: PUSH
19505: LD_INT 1
19507: PLUS
19508: PPUSH
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL_OW 1
19518: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19519: LD_ADDR_EXP 118
19523: PUSH
19524: LD_EXP 118
19528: PPUSH
19529: LD_EXP 118
19533: PUSH
19534: LD_INT 1
19536: PLUS
19537: PPUSH
19538: EMPTY
19539: PPUSH
19540: CALL_OW 1
19544: ST_TO_ADDR
// end end ;
19545: GO 19474
19547: POP
19548: POP
// for i := minerMinesList downto 1 do
19549: LD_ADDR_VAR 0 1
19553: PUSH
19554: DOUBLE
19555: LD_EXP 118
19559: INC
19560: ST_TO_ADDR
19561: LD_INT 1
19563: PUSH
19564: FOR_DOWNTO
19565: IFFALSE 19901
// begin if IsLive ( minersList [ i ] ) then
19567: LD_EXP 117
19571: PUSH
19572: LD_VAR 0 1
19576: ARRAY
19577: PPUSH
19578: CALL_OW 300
19582: IFFALSE 19610
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19584: LD_EXP 117
19588: PUSH
19589: LD_VAR 0 1
19593: ARRAY
19594: PPUSH
19595: LD_EXP 118
19599: PUSH
19600: LD_VAR 0 1
19604: ARRAY
19605: PPUSH
19606: CALL_OW 505
// if not minerMinesList [ i ] then
19610: LD_EXP 118
19614: PUSH
19615: LD_VAR 0 1
19619: ARRAY
19620: NOT
19621: IFFALSE 19625
// continue ;
19623: GO 19564
// for j := minerMinesList [ i ] downto 1 do
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: DOUBLE
19631: LD_EXP 118
19635: PUSH
19636: LD_VAR 0 1
19640: ARRAY
19641: INC
19642: ST_TO_ADDR
19643: LD_INT 1
19645: PUSH
19646: FOR_DOWNTO
19647: IFFALSE 19897
// begin side := GetSide ( minersList [ i ] ) ;
19649: LD_ADDR_VAR 0 3
19653: PUSH
19654: LD_EXP 117
19658: PUSH
19659: LD_VAR 0 1
19663: ARRAY
19664: PPUSH
19665: CALL_OW 255
19669: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19670: LD_ADDR_VAR 0 4
19674: PUSH
19675: LD_EXP 118
19679: PUSH
19680: LD_VAR 0 1
19684: ARRAY
19685: PUSH
19686: LD_VAR 0 2
19690: ARRAY
19691: PUSH
19692: LD_INT 1
19694: ARRAY
19695: PPUSH
19696: LD_EXP 118
19700: PUSH
19701: LD_VAR 0 1
19705: ARRAY
19706: PUSH
19707: LD_VAR 0 2
19711: ARRAY
19712: PUSH
19713: LD_INT 2
19715: ARRAY
19716: PPUSH
19717: CALL_OW 428
19721: ST_TO_ADDR
// if not tmp then
19722: LD_VAR 0 4
19726: NOT
19727: IFFALSE 19731
// continue ;
19729: GO 19646
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19731: LD_VAR 0 4
19735: PUSH
19736: LD_INT 81
19738: PUSH
19739: LD_VAR 0 3
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PPUSH
19748: CALL_OW 69
19752: IN
19753: PUSH
19754: LD_EXP 118
19758: PUSH
19759: LD_VAR 0 1
19763: ARRAY
19764: PUSH
19765: LD_VAR 0 2
19769: ARRAY
19770: PUSH
19771: LD_INT 1
19773: ARRAY
19774: PPUSH
19775: LD_EXP 118
19779: PUSH
19780: LD_VAR 0 1
19784: ARRAY
19785: PUSH
19786: LD_VAR 0 2
19790: ARRAY
19791: PUSH
19792: LD_INT 2
19794: ARRAY
19795: PPUSH
19796: CALL_OW 458
19800: AND
19801: IFFALSE 19895
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19803: LD_EXP 118
19807: PUSH
19808: LD_VAR 0 1
19812: ARRAY
19813: PUSH
19814: LD_VAR 0 2
19818: ARRAY
19819: PUSH
19820: LD_INT 1
19822: ARRAY
19823: PPUSH
19824: LD_EXP 118
19828: PUSH
19829: LD_VAR 0 1
19833: ARRAY
19834: PUSH
19835: LD_VAR 0 2
19839: ARRAY
19840: PUSH
19841: LD_INT 2
19843: ARRAY
19844: PPUSH
19845: LD_VAR 0 3
19849: PPUSH
19850: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19854: LD_ADDR_EXP 118
19858: PUSH
19859: LD_EXP 118
19863: PPUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: LD_EXP 118
19873: PUSH
19874: LD_VAR 0 1
19878: ARRAY
19879: PPUSH
19880: LD_VAR 0 2
19884: PPUSH
19885: CALL_OW 3
19889: PPUSH
19890: CALL_OW 1
19894: ST_TO_ADDR
// end ; end ;
19895: GO 19646
19897: POP
19898: POP
// end ;
19899: GO 19564
19901: POP
19902: POP
// end ;
19903: PPOPN 4
19905: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19906: LD_INT 0
19908: PPUSH
19909: PPUSH
// result := false ;
19910: LD_ADDR_VAR 0 4
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 264
19927: PUSH
19928: LD_EXP 46
19932: EQUAL
19933: NOT
19934: IFFALSE 19938
// exit ;
19936: GO 20178
// index := GetElementIndex ( minersList , unit ) ;
19938: LD_ADDR_VAR 0 5
19942: PUSH
19943: LD_EXP 117
19947: PPUSH
19948: LD_VAR 0 1
19952: PPUSH
19953: CALL 26122 0 2
19957: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19958: LD_EXP 118
19962: PUSH
19963: LD_VAR 0 5
19967: ARRAY
19968: PUSH
19969: LD_EXP 119
19973: GREATEREQUAL
19974: IFFALSE 19978
// exit ;
19976: GO 20178
// ComMoveXY ( unit , x , y ) ;
19978: LD_VAR 0 1
19982: PPUSH
19983: LD_VAR 0 2
19987: PPUSH
19988: LD_VAR 0 3
19992: PPUSH
19993: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19997: LD_INT 35
19999: PPUSH
20000: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20004: LD_VAR 0 1
20008: PPUSH
20009: LD_VAR 0 2
20013: PPUSH
20014: LD_VAR 0 3
20018: PPUSH
20019: CALL 56186 0 3
20023: NOT
20024: PUSH
20025: LD_VAR 0 1
20029: PPUSH
20030: CALL_OW 314
20034: AND
20035: IFFALSE 20039
// exit ;
20037: GO 20178
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20039: LD_VAR 0 2
20043: PPUSH
20044: LD_VAR 0 3
20048: PPUSH
20049: CALL_OW 428
20053: PUSH
20054: LD_VAR 0 1
20058: EQUAL
20059: PUSH
20060: LD_VAR 0 1
20064: PPUSH
20065: CALL_OW 314
20069: NOT
20070: AND
20071: IFFALSE 19997
// PlaySoundXY ( x , y , PlantMine ) ;
20073: LD_VAR 0 2
20077: PPUSH
20078: LD_VAR 0 3
20082: PPUSH
20083: LD_STRING PlantMine
20085: PPUSH
20086: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20090: LD_VAR 0 2
20094: PPUSH
20095: LD_VAR 0 3
20099: PPUSH
20100: LD_VAR 0 1
20104: PPUSH
20105: CALL_OW 255
20109: PPUSH
20110: LD_INT 0
20112: PPUSH
20113: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20117: LD_ADDR_EXP 118
20121: PUSH
20122: LD_EXP 118
20126: PPUSH
20127: LD_VAR 0 5
20131: PUSH
20132: LD_EXP 118
20136: PUSH
20137: LD_VAR 0 5
20141: ARRAY
20142: PUSH
20143: LD_INT 1
20145: PLUS
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PPUSH
20151: LD_VAR 0 2
20155: PUSH
20156: LD_VAR 0 3
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PPUSH
20165: CALL 26337 0 3
20169: ST_TO_ADDR
// result := true ;
20170: LD_ADDR_VAR 0 4
20174: PUSH
20175: LD_INT 1
20177: ST_TO_ADDR
// end ;
20178: LD_VAR 0 4
20182: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20183: LD_INT 0
20185: PPUSH
20186: PPUSH
20187: PPUSH
// if not unit in minersList then
20188: LD_VAR 0 1
20192: PUSH
20193: LD_EXP 117
20197: IN
20198: NOT
20199: IFFALSE 20203
// exit ;
20201: GO 20595
// index := GetElementIndex ( minersList , unit ) ;
20203: LD_ADDR_VAR 0 6
20207: PUSH
20208: LD_EXP 117
20212: PPUSH
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL 26122 0 2
20222: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20223: LD_ADDR_VAR 0 5
20227: PUSH
20228: DOUBLE
20229: LD_EXP 118
20233: PUSH
20234: LD_VAR 0 6
20238: ARRAY
20239: INC
20240: ST_TO_ADDR
20241: LD_INT 1
20243: PUSH
20244: FOR_DOWNTO
20245: IFFALSE 20406
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20247: LD_EXP 118
20251: PUSH
20252: LD_VAR 0 6
20256: ARRAY
20257: PUSH
20258: LD_VAR 0 5
20262: ARRAY
20263: PUSH
20264: LD_INT 1
20266: ARRAY
20267: PUSH
20268: LD_VAR 0 2
20272: EQUAL
20273: PUSH
20274: LD_EXP 118
20278: PUSH
20279: LD_VAR 0 6
20283: ARRAY
20284: PUSH
20285: LD_VAR 0 5
20289: ARRAY
20290: PUSH
20291: LD_INT 2
20293: ARRAY
20294: PUSH
20295: LD_VAR 0 3
20299: EQUAL
20300: AND
20301: IFFALSE 20404
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20303: LD_EXP 118
20307: PUSH
20308: LD_VAR 0 6
20312: ARRAY
20313: PUSH
20314: LD_VAR 0 5
20318: ARRAY
20319: PUSH
20320: LD_INT 1
20322: ARRAY
20323: PPUSH
20324: LD_EXP 118
20328: PUSH
20329: LD_VAR 0 6
20333: ARRAY
20334: PUSH
20335: LD_VAR 0 5
20339: ARRAY
20340: PUSH
20341: LD_INT 2
20343: ARRAY
20344: PPUSH
20345: LD_VAR 0 1
20349: PPUSH
20350: CALL_OW 255
20354: PPUSH
20355: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20359: LD_ADDR_EXP 118
20363: PUSH
20364: LD_EXP 118
20368: PPUSH
20369: LD_VAR 0 6
20373: PPUSH
20374: LD_EXP 118
20378: PUSH
20379: LD_VAR 0 6
20383: ARRAY
20384: PPUSH
20385: LD_VAR 0 5
20389: PPUSH
20390: CALL_OW 3
20394: PPUSH
20395: CALL_OW 1
20399: ST_TO_ADDR
// exit ;
20400: POP
20401: POP
20402: GO 20595
// end ; end ;
20404: GO 20244
20406: POP
20407: POP
// for i := minerMinesList [ index ] downto 1 do
20408: LD_ADDR_VAR 0 5
20412: PUSH
20413: DOUBLE
20414: LD_EXP 118
20418: PUSH
20419: LD_VAR 0 6
20423: ARRAY
20424: INC
20425: ST_TO_ADDR
20426: LD_INT 1
20428: PUSH
20429: FOR_DOWNTO
20430: IFFALSE 20593
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20432: LD_EXP 118
20436: PUSH
20437: LD_VAR 0 6
20441: ARRAY
20442: PUSH
20443: LD_VAR 0 5
20447: ARRAY
20448: PUSH
20449: LD_INT 1
20451: ARRAY
20452: PPUSH
20453: LD_EXP 118
20457: PUSH
20458: LD_VAR 0 6
20462: ARRAY
20463: PUSH
20464: LD_VAR 0 5
20468: ARRAY
20469: PUSH
20470: LD_INT 2
20472: ARRAY
20473: PPUSH
20474: LD_VAR 0 2
20478: PPUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: CALL_OW 298
20488: PUSH
20489: LD_INT 6
20491: LESS
20492: IFFALSE 20591
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20494: LD_EXP 118
20498: PUSH
20499: LD_VAR 0 6
20503: ARRAY
20504: PUSH
20505: LD_VAR 0 5
20509: ARRAY
20510: PUSH
20511: LD_INT 1
20513: ARRAY
20514: PPUSH
20515: LD_EXP 118
20519: PUSH
20520: LD_VAR 0 6
20524: ARRAY
20525: PUSH
20526: LD_VAR 0 5
20530: ARRAY
20531: PUSH
20532: LD_INT 2
20534: ARRAY
20535: PPUSH
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 255
20545: PPUSH
20546: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20550: LD_ADDR_EXP 118
20554: PUSH
20555: LD_EXP 118
20559: PPUSH
20560: LD_VAR 0 6
20564: PPUSH
20565: LD_EXP 118
20569: PUSH
20570: LD_VAR 0 6
20574: ARRAY
20575: PPUSH
20576: LD_VAR 0 5
20580: PPUSH
20581: CALL_OW 3
20585: PPUSH
20586: CALL_OW 1
20590: ST_TO_ADDR
// end ; end ;
20591: GO 20429
20593: POP
20594: POP
// end ;
20595: LD_VAR 0 4
20599: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20600: LD_INT 0
20602: PPUSH
20603: PPUSH
20604: PPUSH
20605: PPUSH
20606: PPUSH
20607: PPUSH
20608: PPUSH
20609: PPUSH
20610: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL_OW 264
20620: PUSH
20621: LD_EXP 46
20625: EQUAL
20626: NOT
20627: PUSH
20628: LD_VAR 0 1
20632: PUSH
20633: LD_EXP 117
20637: IN
20638: NOT
20639: OR
20640: IFFALSE 20644
// exit ;
20642: GO 20966
// index := GetElementIndex ( minersList , unit ) ;
20644: LD_ADDR_VAR 0 6
20648: PUSH
20649: LD_EXP 117
20653: PPUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL 26122 0 2
20663: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20664: LD_ADDR_VAR 0 8
20668: PUSH
20669: LD_EXP 119
20673: PUSH
20674: LD_EXP 118
20678: PUSH
20679: LD_VAR 0 6
20683: ARRAY
20684: MINUS
20685: ST_TO_ADDR
// if not minesFreeAmount then
20686: LD_VAR 0 8
20690: NOT
20691: IFFALSE 20695
// exit ;
20693: GO 20966
// tmp := [ ] ;
20695: LD_ADDR_VAR 0 7
20699: PUSH
20700: EMPTY
20701: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20702: LD_ADDR_VAR 0 5
20706: PUSH
20707: DOUBLE
20708: LD_INT 1
20710: DEC
20711: ST_TO_ADDR
20712: LD_VAR 0 8
20716: PUSH
20717: FOR_TO
20718: IFFALSE 20913
// begin _d := rand ( 0 , 5 ) ;
20720: LD_ADDR_VAR 0 11
20724: PUSH
20725: LD_INT 0
20727: PPUSH
20728: LD_INT 5
20730: PPUSH
20731: CALL_OW 12
20735: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20736: LD_ADDR_VAR 0 12
20740: PUSH
20741: LD_INT 2
20743: PPUSH
20744: LD_INT 6
20746: PPUSH
20747: CALL_OW 12
20751: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20752: LD_ADDR_VAR 0 9
20756: PUSH
20757: LD_VAR 0 2
20761: PPUSH
20762: LD_VAR 0 11
20766: PPUSH
20767: LD_VAR 0 12
20771: PPUSH
20772: CALL_OW 272
20776: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20777: LD_ADDR_VAR 0 10
20781: PUSH
20782: LD_VAR 0 3
20786: PPUSH
20787: LD_VAR 0 11
20791: PPUSH
20792: LD_VAR 0 12
20796: PPUSH
20797: CALL_OW 273
20801: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20802: LD_VAR 0 9
20806: PPUSH
20807: LD_VAR 0 10
20811: PPUSH
20812: CALL_OW 488
20816: PUSH
20817: LD_VAR 0 9
20821: PUSH
20822: LD_VAR 0 10
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_VAR 0 7
20835: IN
20836: NOT
20837: AND
20838: PUSH
20839: LD_VAR 0 9
20843: PPUSH
20844: LD_VAR 0 10
20848: PPUSH
20849: CALL_OW 458
20853: NOT
20854: AND
20855: IFFALSE 20897
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20857: LD_ADDR_VAR 0 7
20861: PUSH
20862: LD_VAR 0 7
20866: PPUSH
20867: LD_VAR 0 7
20871: PUSH
20872: LD_INT 1
20874: PLUS
20875: PPUSH
20876: LD_VAR 0 9
20880: PUSH
20881: LD_VAR 0 10
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PPUSH
20890: CALL_OW 1
20894: ST_TO_ADDR
20895: GO 20911
// i := i - 1 ;
20897: LD_ADDR_VAR 0 5
20901: PUSH
20902: LD_VAR 0 5
20906: PUSH
20907: LD_INT 1
20909: MINUS
20910: ST_TO_ADDR
// end ;
20911: GO 20717
20913: POP
20914: POP
// for i in tmp do
20915: LD_ADDR_VAR 0 5
20919: PUSH
20920: LD_VAR 0 7
20924: PUSH
20925: FOR_IN
20926: IFFALSE 20964
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20928: LD_VAR 0 1
20932: PPUSH
20933: LD_VAR 0 5
20937: PUSH
20938: LD_INT 1
20940: ARRAY
20941: PPUSH
20942: LD_VAR 0 5
20946: PUSH
20947: LD_INT 2
20949: ARRAY
20950: PPUSH
20951: CALL 19906 0 3
20955: NOT
20956: IFFALSE 20962
// exit ;
20958: POP
20959: POP
20960: GO 20966
20962: GO 20925
20964: POP
20965: POP
// end ;
20966: LD_VAR 0 4
20970: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20971: LD_INT 0
20973: PPUSH
20974: PPUSH
20975: PPUSH
20976: PPUSH
20977: PPUSH
20978: PPUSH
20979: PPUSH
// if not GetClass ( unit ) = class_sniper then
20980: LD_VAR 0 1
20984: PPUSH
20985: CALL_OW 257
20989: PUSH
20990: LD_INT 5
20992: EQUAL
20993: NOT
20994: IFFALSE 20998
// exit ;
20996: GO 21386
// dist := 8 ;
20998: LD_ADDR_VAR 0 5
21002: PUSH
21003: LD_INT 8
21005: ST_TO_ADDR
// viewRange := 12 ;
21006: LD_ADDR_VAR 0 7
21010: PUSH
21011: LD_INT 12
21013: ST_TO_ADDR
// side := GetSide ( unit ) ;
21014: LD_ADDR_VAR 0 6
21018: PUSH
21019: LD_VAR 0 1
21023: PPUSH
21024: CALL_OW 255
21028: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21029: LD_INT 61
21031: PPUSH
21032: LD_VAR 0 6
21036: PPUSH
21037: CALL_OW 321
21041: PUSH
21042: LD_INT 2
21044: EQUAL
21045: IFFALSE 21055
// viewRange := 16 ;
21047: LD_ADDR_VAR 0 7
21051: PUSH
21052: LD_INT 16
21054: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21055: LD_VAR 0 1
21059: PPUSH
21060: LD_VAR 0 2
21064: PPUSH
21065: LD_VAR 0 3
21069: PPUSH
21070: CALL_OW 297
21074: PUSH
21075: LD_VAR 0 5
21079: GREATER
21080: IFFALSE 21159
// begin ComMoveXY ( unit , x , y ) ;
21082: LD_VAR 0 1
21086: PPUSH
21087: LD_VAR 0 2
21091: PPUSH
21092: LD_VAR 0 3
21096: PPUSH
21097: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21101: LD_INT 35
21103: PPUSH
21104: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21108: LD_VAR 0 1
21112: PPUSH
21113: LD_VAR 0 2
21117: PPUSH
21118: LD_VAR 0 3
21122: PPUSH
21123: CALL 56186 0 3
21127: NOT
21128: IFFALSE 21132
// exit ;
21130: GO 21386
// until GetDistUnitXY ( unit , x , y ) < dist ;
21132: LD_VAR 0 1
21136: PPUSH
21137: LD_VAR 0 2
21141: PPUSH
21142: LD_VAR 0 3
21146: PPUSH
21147: CALL_OW 297
21151: PUSH
21152: LD_VAR 0 5
21156: LESS
21157: IFFALSE 21101
// end ; ComTurnXY ( unit , x , y ) ;
21159: LD_VAR 0 1
21163: PPUSH
21164: LD_VAR 0 2
21168: PPUSH
21169: LD_VAR 0 3
21173: PPUSH
21174: CALL_OW 118
// wait ( 5 ) ;
21178: LD_INT 5
21180: PPUSH
21181: CALL_OW 67
// _d := GetDir ( unit ) ;
21185: LD_ADDR_VAR 0 10
21189: PUSH
21190: LD_VAR 0 1
21194: PPUSH
21195: CALL_OW 254
21199: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21200: LD_ADDR_VAR 0 8
21204: PUSH
21205: LD_VAR 0 1
21209: PPUSH
21210: CALL_OW 250
21214: PPUSH
21215: LD_VAR 0 10
21219: PPUSH
21220: LD_VAR 0 5
21224: PPUSH
21225: CALL_OW 272
21229: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21230: LD_ADDR_VAR 0 9
21234: PUSH
21235: LD_VAR 0 1
21239: PPUSH
21240: CALL_OW 251
21244: PPUSH
21245: LD_VAR 0 10
21249: PPUSH
21250: LD_VAR 0 5
21254: PPUSH
21255: CALL_OW 273
21259: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21260: LD_VAR 0 8
21264: PPUSH
21265: LD_VAR 0 9
21269: PPUSH
21270: CALL_OW 488
21274: NOT
21275: IFFALSE 21279
// exit ;
21277: GO 21386
// ComAnimCustom ( unit , 1 ) ;
21279: LD_VAR 0 1
21283: PPUSH
21284: LD_INT 1
21286: PPUSH
21287: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21291: LD_VAR 0 8
21295: PPUSH
21296: LD_VAR 0 9
21300: PPUSH
21301: LD_VAR 0 6
21305: PPUSH
21306: LD_VAR 0 7
21310: PPUSH
21311: CALL_OW 330
// repeat wait ( 1 ) ;
21315: LD_INT 1
21317: PPUSH
21318: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 316
21331: PUSH
21332: LD_VAR 0 1
21336: PPUSH
21337: CALL_OW 314
21341: OR
21342: PUSH
21343: LD_VAR 0 1
21347: PPUSH
21348: CALL_OW 302
21352: NOT
21353: OR
21354: PUSH
21355: LD_VAR 0 1
21359: PPUSH
21360: CALL_OW 301
21364: OR
21365: IFFALSE 21315
// RemoveSeeing ( _x , _y , side ) ;
21367: LD_VAR 0 8
21371: PPUSH
21372: LD_VAR 0 9
21376: PPUSH
21377: LD_VAR 0 6
21381: PPUSH
21382: CALL_OW 331
// end ; end_of_file
21386: LD_VAR 0 4
21390: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21391: LD_INT 0
21393: PPUSH
21394: PPUSH
// if exist_mode then
21395: LD_VAR 0 2
21399: IFFALSE 21424
// unit := CreateCharacter ( prefix & ident ) else
21401: LD_ADDR_VAR 0 5
21405: PUSH
21406: LD_VAR 0 3
21410: PUSH
21411: LD_VAR 0 1
21415: STR
21416: PPUSH
21417: CALL_OW 34
21421: ST_TO_ADDR
21422: GO 21439
// unit := NewCharacter ( ident ) ;
21424: LD_ADDR_VAR 0 5
21428: PUSH
21429: LD_VAR 0 1
21433: PPUSH
21434: CALL_OW 25
21438: ST_TO_ADDR
// result := unit ;
21439: LD_ADDR_VAR 0 4
21443: PUSH
21444: LD_VAR 0 5
21448: ST_TO_ADDR
// end ;
21449: LD_VAR 0 4
21453: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21454: LD_INT 0
21456: PPUSH
21457: PPUSH
// if not side or not nation then
21458: LD_VAR 0 1
21462: NOT
21463: PUSH
21464: LD_VAR 0 2
21468: NOT
21469: OR
21470: IFFALSE 21474
// exit ;
21472: GO 22238
// case nation of nation_american :
21474: LD_VAR 0 2
21478: PUSH
21479: LD_INT 1
21481: DOUBLE
21482: EQUAL
21483: IFTRUE 21487
21485: GO 21701
21487: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21488: LD_ADDR_VAR 0 4
21492: PUSH
21493: LD_INT 35
21495: PUSH
21496: LD_INT 45
21498: PUSH
21499: LD_INT 46
21501: PUSH
21502: LD_INT 47
21504: PUSH
21505: LD_INT 82
21507: PUSH
21508: LD_INT 83
21510: PUSH
21511: LD_INT 84
21513: PUSH
21514: LD_INT 85
21516: PUSH
21517: LD_INT 86
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: LD_INT 6
21528: PUSH
21529: LD_INT 15
21531: PUSH
21532: LD_INT 16
21534: PUSH
21535: LD_INT 7
21537: PUSH
21538: LD_INT 12
21540: PUSH
21541: LD_INT 13
21543: PUSH
21544: LD_INT 10
21546: PUSH
21547: LD_INT 14
21549: PUSH
21550: LD_INT 20
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 22
21558: PUSH
21559: LD_INT 25
21561: PUSH
21562: LD_INT 32
21564: PUSH
21565: LD_INT 27
21567: PUSH
21568: LD_INT 36
21570: PUSH
21571: LD_INT 69
21573: PUSH
21574: LD_INT 39
21576: PUSH
21577: LD_INT 34
21579: PUSH
21580: LD_INT 40
21582: PUSH
21583: LD_INT 48
21585: PUSH
21586: LD_INT 49
21588: PUSH
21589: LD_INT 50
21591: PUSH
21592: LD_INT 51
21594: PUSH
21595: LD_INT 52
21597: PUSH
21598: LD_INT 53
21600: PUSH
21601: LD_INT 54
21603: PUSH
21604: LD_INT 55
21606: PUSH
21607: LD_INT 56
21609: PUSH
21610: LD_INT 57
21612: PUSH
21613: LD_INT 58
21615: PUSH
21616: LD_INT 59
21618: PUSH
21619: LD_INT 60
21621: PUSH
21622: LD_INT 61
21624: PUSH
21625: LD_INT 62
21627: PUSH
21628: LD_INT 80
21630: PUSH
21631: LD_INT 82
21633: PUSH
21634: LD_INT 83
21636: PUSH
21637: LD_INT 84
21639: PUSH
21640: LD_INT 85
21642: PUSH
21643: LD_INT 86
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: ST_TO_ADDR
21699: GO 22162
21701: LD_INT 2
21703: DOUBLE
21704: EQUAL
21705: IFTRUE 21709
21707: GO 21931
21709: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21710: LD_ADDR_VAR 0 4
21714: PUSH
21715: LD_INT 35
21717: PUSH
21718: LD_INT 45
21720: PUSH
21721: LD_INT 46
21723: PUSH
21724: LD_INT 47
21726: PUSH
21727: LD_INT 82
21729: PUSH
21730: LD_INT 83
21732: PUSH
21733: LD_INT 84
21735: PUSH
21736: LD_INT 85
21738: PUSH
21739: LD_INT 87
21741: PUSH
21742: LD_INT 70
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: LD_INT 11
21750: PUSH
21751: LD_INT 3
21753: PUSH
21754: LD_INT 4
21756: PUSH
21757: LD_INT 5
21759: PUSH
21760: LD_INT 6
21762: PUSH
21763: LD_INT 15
21765: PUSH
21766: LD_INT 18
21768: PUSH
21769: LD_INT 7
21771: PUSH
21772: LD_INT 17
21774: PUSH
21775: LD_INT 8
21777: PUSH
21778: LD_INT 20
21780: PUSH
21781: LD_INT 21
21783: PUSH
21784: LD_INT 22
21786: PUSH
21787: LD_INT 72
21789: PUSH
21790: LD_INT 26
21792: PUSH
21793: LD_INT 69
21795: PUSH
21796: LD_INT 39
21798: PUSH
21799: LD_INT 40
21801: PUSH
21802: LD_INT 41
21804: PUSH
21805: LD_INT 42
21807: PUSH
21808: LD_INT 43
21810: PUSH
21811: LD_INT 48
21813: PUSH
21814: LD_INT 49
21816: PUSH
21817: LD_INT 50
21819: PUSH
21820: LD_INT 51
21822: PUSH
21823: LD_INT 52
21825: PUSH
21826: LD_INT 53
21828: PUSH
21829: LD_INT 54
21831: PUSH
21832: LD_INT 55
21834: PUSH
21835: LD_INT 56
21837: PUSH
21838: LD_INT 60
21840: PUSH
21841: LD_INT 61
21843: PUSH
21844: LD_INT 62
21846: PUSH
21847: LD_INT 66
21849: PUSH
21850: LD_INT 67
21852: PUSH
21853: LD_INT 68
21855: PUSH
21856: LD_INT 81
21858: PUSH
21859: LD_INT 82
21861: PUSH
21862: LD_INT 83
21864: PUSH
21865: LD_INT 84
21867: PUSH
21868: LD_INT 85
21870: PUSH
21871: LD_INT 87
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: ST_TO_ADDR
21929: GO 22162
21931: LD_INT 3
21933: DOUBLE
21934: EQUAL
21935: IFTRUE 21939
21937: GO 22161
21939: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21940: LD_ADDR_VAR 0 4
21944: PUSH
21945: LD_INT 46
21947: PUSH
21948: LD_INT 47
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 82
21959: PUSH
21960: LD_INT 83
21962: PUSH
21963: LD_INT 84
21965: PUSH
21966: LD_INT 85
21968: PUSH
21969: LD_INT 86
21971: PUSH
21972: LD_INT 11
21974: PUSH
21975: LD_INT 9
21977: PUSH
21978: LD_INT 20
21980: PUSH
21981: LD_INT 19
21983: PUSH
21984: LD_INT 21
21986: PUSH
21987: LD_INT 24
21989: PUSH
21990: LD_INT 22
21992: PUSH
21993: LD_INT 25
21995: PUSH
21996: LD_INT 28
21998: PUSH
21999: LD_INT 29
22001: PUSH
22002: LD_INT 30
22004: PUSH
22005: LD_INT 31
22007: PUSH
22008: LD_INT 37
22010: PUSH
22011: LD_INT 38
22013: PUSH
22014: LD_INT 32
22016: PUSH
22017: LD_INT 27
22019: PUSH
22020: LD_INT 33
22022: PUSH
22023: LD_INT 69
22025: PUSH
22026: LD_INT 39
22028: PUSH
22029: LD_INT 34
22031: PUSH
22032: LD_INT 40
22034: PUSH
22035: LD_INT 71
22037: PUSH
22038: LD_INT 23
22040: PUSH
22041: LD_INT 44
22043: PUSH
22044: LD_INT 48
22046: PUSH
22047: LD_INT 49
22049: PUSH
22050: LD_INT 50
22052: PUSH
22053: LD_INT 51
22055: PUSH
22056: LD_INT 52
22058: PUSH
22059: LD_INT 53
22061: PUSH
22062: LD_INT 54
22064: PUSH
22065: LD_INT 55
22067: PUSH
22068: LD_INT 56
22070: PUSH
22071: LD_INT 57
22073: PUSH
22074: LD_INT 58
22076: PUSH
22077: LD_INT 59
22079: PUSH
22080: LD_INT 63
22082: PUSH
22083: LD_INT 64
22085: PUSH
22086: LD_INT 65
22088: PUSH
22089: LD_INT 82
22091: PUSH
22092: LD_INT 83
22094: PUSH
22095: LD_INT 84
22097: PUSH
22098: LD_INT 85
22100: PUSH
22101: LD_INT 86
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: ST_TO_ADDR
22159: GO 22162
22161: POP
// if state > - 1 and state < 3 then
22162: LD_VAR 0 3
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: GREATER
22171: PUSH
22172: LD_VAR 0 3
22176: PUSH
22177: LD_INT 3
22179: LESS
22180: AND
22181: IFFALSE 22238
// for i in result do
22183: LD_ADDR_VAR 0 5
22187: PUSH
22188: LD_VAR 0 4
22192: PUSH
22193: FOR_IN
22194: IFFALSE 22236
// if GetTech ( i , side ) <> state then
22196: LD_VAR 0 5
22200: PPUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 321
22210: PUSH
22211: LD_VAR 0 3
22215: NONEQUAL
22216: IFFALSE 22234
// result := result diff i ;
22218: LD_ADDR_VAR 0 4
22222: PUSH
22223: LD_VAR 0 4
22227: PUSH
22228: LD_VAR 0 5
22232: DIFF
22233: ST_TO_ADDR
22234: GO 22193
22236: POP
22237: POP
// end ;
22238: LD_VAR 0 4
22242: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22243: LD_INT 0
22245: PPUSH
22246: PPUSH
22247: PPUSH
// result := true ;
22248: LD_ADDR_VAR 0 3
22252: PUSH
22253: LD_INT 1
22255: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22256: LD_ADDR_VAR 0 5
22260: PUSH
22261: LD_VAR 0 2
22265: PPUSH
22266: CALL_OW 480
22270: ST_TO_ADDR
// if not tmp then
22271: LD_VAR 0 5
22275: NOT
22276: IFFALSE 22280
// exit ;
22278: GO 22329
// for i in tmp do
22280: LD_ADDR_VAR 0 4
22284: PUSH
22285: LD_VAR 0 5
22289: PUSH
22290: FOR_IN
22291: IFFALSE 22327
// if GetTech ( i , side ) <> state_researched then
22293: LD_VAR 0 4
22297: PPUSH
22298: LD_VAR 0 1
22302: PPUSH
22303: CALL_OW 321
22307: PUSH
22308: LD_INT 2
22310: NONEQUAL
22311: IFFALSE 22325
// begin result := false ;
22313: LD_ADDR_VAR 0 3
22317: PUSH
22318: LD_INT 0
22320: ST_TO_ADDR
// exit ;
22321: POP
22322: POP
22323: GO 22329
// end ;
22325: GO 22290
22327: POP
22328: POP
// end ;
22329: LD_VAR 0 3
22333: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22334: LD_INT 0
22336: PPUSH
22337: PPUSH
22338: PPUSH
22339: PPUSH
22340: PPUSH
22341: PPUSH
22342: PPUSH
22343: PPUSH
22344: PPUSH
22345: PPUSH
22346: PPUSH
22347: PPUSH
22348: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22349: LD_VAR 0 1
22353: NOT
22354: PUSH
22355: LD_VAR 0 1
22359: PPUSH
22360: CALL_OW 257
22364: PUSH
22365: LD_INT 9
22367: NONEQUAL
22368: OR
22369: IFFALSE 22373
// exit ;
22371: GO 22946
// side := GetSide ( unit ) ;
22373: LD_ADDR_VAR 0 9
22377: PUSH
22378: LD_VAR 0 1
22382: PPUSH
22383: CALL_OW 255
22387: ST_TO_ADDR
// tech_space := tech_spacanom ;
22388: LD_ADDR_VAR 0 12
22392: PUSH
22393: LD_INT 29
22395: ST_TO_ADDR
// tech_time := tech_taurad ;
22396: LD_ADDR_VAR 0 13
22400: PUSH
22401: LD_INT 28
22403: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22404: LD_ADDR_VAR 0 11
22408: PUSH
22409: LD_VAR 0 1
22413: PPUSH
22414: CALL_OW 310
22418: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22419: LD_VAR 0 11
22423: PPUSH
22424: CALL_OW 247
22428: PUSH
22429: LD_INT 2
22431: EQUAL
22432: IFFALSE 22436
// exit ;
22434: GO 22946
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22436: LD_ADDR_VAR 0 8
22440: PUSH
22441: LD_INT 81
22443: PUSH
22444: LD_VAR 0 9
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 3
22455: PUSH
22456: LD_INT 21
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 69
22478: ST_TO_ADDR
// if not tmp then
22479: LD_VAR 0 8
22483: NOT
22484: IFFALSE 22488
// exit ;
22486: GO 22946
// if in_unit then
22488: LD_VAR 0 11
22492: IFFALSE 22516
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22494: LD_ADDR_VAR 0 10
22498: PUSH
22499: LD_VAR 0 8
22503: PPUSH
22504: LD_VAR 0 11
22508: PPUSH
22509: CALL_OW 74
22513: ST_TO_ADDR
22514: GO 22536
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22516: LD_ADDR_VAR 0 10
22520: PUSH
22521: LD_VAR 0 8
22525: PPUSH
22526: LD_VAR 0 1
22530: PPUSH
22531: CALL_OW 74
22535: ST_TO_ADDR
// if not enemy then
22536: LD_VAR 0 10
22540: NOT
22541: IFFALSE 22545
// exit ;
22543: GO 22946
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22545: LD_VAR 0 11
22549: PUSH
22550: LD_VAR 0 11
22554: PPUSH
22555: LD_VAR 0 10
22559: PPUSH
22560: CALL_OW 296
22564: PUSH
22565: LD_INT 13
22567: GREATER
22568: AND
22569: PUSH
22570: LD_VAR 0 1
22574: PPUSH
22575: LD_VAR 0 10
22579: PPUSH
22580: CALL_OW 296
22584: PUSH
22585: LD_INT 12
22587: GREATER
22588: OR
22589: IFFALSE 22593
// exit ;
22591: GO 22946
// missile := [ 1 ] ;
22593: LD_ADDR_VAR 0 14
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: EMPTY
22602: LIST
22603: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22604: LD_VAR 0 9
22608: PPUSH
22609: LD_VAR 0 12
22613: PPUSH
22614: CALL_OW 325
22618: IFFALSE 22647
// missile := Insert ( missile , missile + 1 , 2 ) ;
22620: LD_ADDR_VAR 0 14
22624: PUSH
22625: LD_VAR 0 14
22629: PPUSH
22630: LD_VAR 0 14
22634: PUSH
22635: LD_INT 1
22637: PLUS
22638: PPUSH
22639: LD_INT 2
22641: PPUSH
22642: CALL_OW 2
22646: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22647: LD_VAR 0 9
22651: PPUSH
22652: LD_VAR 0 13
22656: PPUSH
22657: CALL_OW 325
22661: PUSH
22662: LD_VAR 0 10
22666: PPUSH
22667: CALL_OW 255
22671: PPUSH
22672: LD_VAR 0 13
22676: PPUSH
22677: CALL_OW 325
22681: NOT
22682: AND
22683: IFFALSE 22712
// missile := Insert ( missile , missile + 1 , 3 ) ;
22685: LD_ADDR_VAR 0 14
22689: PUSH
22690: LD_VAR 0 14
22694: PPUSH
22695: LD_VAR 0 14
22699: PUSH
22700: LD_INT 1
22702: PLUS
22703: PPUSH
22704: LD_INT 3
22706: PPUSH
22707: CALL_OW 2
22711: ST_TO_ADDR
// if missile < 2 then
22712: LD_VAR 0 14
22716: PUSH
22717: LD_INT 2
22719: LESS
22720: IFFALSE 22724
// exit ;
22722: GO 22946
// x := GetX ( enemy ) ;
22724: LD_ADDR_VAR 0 4
22728: PUSH
22729: LD_VAR 0 10
22733: PPUSH
22734: CALL_OW 250
22738: ST_TO_ADDR
// y := GetY ( enemy ) ;
22739: LD_ADDR_VAR 0 5
22743: PUSH
22744: LD_VAR 0 10
22748: PPUSH
22749: CALL_OW 251
22753: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22754: LD_ADDR_VAR 0 6
22758: PUSH
22759: LD_VAR 0 4
22763: PUSH
22764: LD_INT 1
22766: NEG
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL_OW 12
22775: PLUS
22776: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22777: LD_ADDR_VAR 0 7
22781: PUSH
22782: LD_VAR 0 5
22786: PUSH
22787: LD_INT 1
22789: NEG
22790: PPUSH
22791: LD_INT 1
22793: PPUSH
22794: CALL_OW 12
22798: PLUS
22799: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22800: LD_VAR 0 6
22804: PPUSH
22805: LD_VAR 0 7
22809: PPUSH
22810: CALL_OW 488
22814: NOT
22815: IFFALSE 22837
// begin _x := x ;
22817: LD_ADDR_VAR 0 6
22821: PUSH
22822: LD_VAR 0 4
22826: ST_TO_ADDR
// _y := y ;
22827: LD_ADDR_VAR 0 7
22831: PUSH
22832: LD_VAR 0 5
22836: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22837: LD_ADDR_VAR 0 3
22841: PUSH
22842: LD_INT 1
22844: PPUSH
22845: LD_VAR 0 14
22849: PPUSH
22850: CALL_OW 12
22854: ST_TO_ADDR
// case i of 1 :
22855: LD_VAR 0 3
22859: PUSH
22860: LD_INT 1
22862: DOUBLE
22863: EQUAL
22864: IFTRUE 22868
22866: GO 22885
22868: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_VAR 0 10
22878: PPUSH
22879: CALL_OW 115
22883: GO 22946
22885: LD_INT 2
22887: DOUBLE
22888: EQUAL
22889: IFTRUE 22893
22891: GO 22915
22893: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22894: LD_VAR 0 1
22898: PPUSH
22899: LD_VAR 0 6
22903: PPUSH
22904: LD_VAR 0 7
22908: PPUSH
22909: CALL_OW 153
22913: GO 22946
22915: LD_INT 3
22917: DOUBLE
22918: EQUAL
22919: IFTRUE 22923
22921: GO 22945
22923: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22924: LD_VAR 0 1
22928: PPUSH
22929: LD_VAR 0 6
22933: PPUSH
22934: LD_VAR 0 7
22938: PPUSH
22939: CALL_OW 154
22943: GO 22946
22945: POP
// end ;
22946: LD_VAR 0 2
22950: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22951: LD_INT 0
22953: PPUSH
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
// if not unit or not building then
22959: LD_VAR 0 1
22963: NOT
22964: PUSH
22965: LD_VAR 0 2
22969: NOT
22970: OR
22971: IFFALSE 22975
// exit ;
22973: GO 23133
// x := GetX ( building ) ;
22975: LD_ADDR_VAR 0 5
22979: PUSH
22980: LD_VAR 0 2
22984: PPUSH
22985: CALL_OW 250
22989: ST_TO_ADDR
// y := GetY ( building ) ;
22990: LD_ADDR_VAR 0 6
22994: PUSH
22995: LD_VAR 0 2
22999: PPUSH
23000: CALL_OW 251
23004: ST_TO_ADDR
// for i = 0 to 5 do
23005: LD_ADDR_VAR 0 4
23009: PUSH
23010: DOUBLE
23011: LD_INT 0
23013: DEC
23014: ST_TO_ADDR
23015: LD_INT 5
23017: PUSH
23018: FOR_TO
23019: IFFALSE 23131
// begin _x := ShiftX ( x , i , 3 ) ;
23021: LD_ADDR_VAR 0 7
23025: PUSH
23026: LD_VAR 0 5
23030: PPUSH
23031: LD_VAR 0 4
23035: PPUSH
23036: LD_INT 3
23038: PPUSH
23039: CALL_OW 272
23043: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23044: LD_ADDR_VAR 0 8
23048: PUSH
23049: LD_VAR 0 6
23053: PPUSH
23054: LD_VAR 0 4
23058: PPUSH
23059: LD_INT 3
23061: PPUSH
23062: CALL_OW 273
23066: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23067: LD_VAR 0 7
23071: PPUSH
23072: LD_VAR 0 8
23076: PPUSH
23077: CALL_OW 488
23081: NOT
23082: IFFALSE 23086
// continue ;
23084: GO 23018
// if HexInfo ( _x , _y ) = 0 then
23086: LD_VAR 0 7
23090: PPUSH
23091: LD_VAR 0 8
23095: PPUSH
23096: CALL_OW 428
23100: PUSH
23101: LD_INT 0
23103: EQUAL
23104: IFFALSE 23129
// begin ComMoveXY ( unit , _x , _y ) ;
23106: LD_VAR 0 1
23110: PPUSH
23111: LD_VAR 0 7
23115: PPUSH
23116: LD_VAR 0 8
23120: PPUSH
23121: CALL_OW 111
// exit ;
23125: POP
23126: POP
23127: GO 23133
// end ; end ;
23129: GO 23018
23131: POP
23132: POP
// end ;
23133: LD_VAR 0 3
23137: RET
// export function ScanBase ( side , base_area ) ; begin
23138: LD_INT 0
23140: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23141: LD_ADDR_VAR 0 3
23145: PUSH
23146: LD_VAR 0 2
23150: PPUSH
23151: LD_INT 81
23153: PUSH
23154: LD_VAR 0 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PPUSH
23163: CALL_OW 70
23167: ST_TO_ADDR
// end ;
23168: LD_VAR 0 3
23172: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23173: LD_INT 0
23175: PPUSH
23176: PPUSH
23177: PPUSH
23178: PPUSH
// result := false ;
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_INT 0
23186: ST_TO_ADDR
// side := GetSide ( unit ) ;
23187: LD_ADDR_VAR 0 3
23191: PUSH
23192: LD_VAR 0 1
23196: PPUSH
23197: CALL_OW 255
23201: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23202: LD_ADDR_VAR 0 4
23206: PUSH
23207: LD_VAR 0 1
23211: PPUSH
23212: CALL_OW 248
23216: ST_TO_ADDR
// case nat of 1 :
23217: LD_VAR 0 4
23221: PUSH
23222: LD_INT 1
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23241
23230: POP
// tech := tech_lassight ; 2 :
23231: LD_ADDR_VAR 0 5
23235: PUSH
23236: LD_INT 12
23238: ST_TO_ADDR
23239: GO 23280
23241: LD_INT 2
23243: DOUBLE
23244: EQUAL
23245: IFTRUE 23249
23247: GO 23260
23249: POP
// tech := tech_mortar ; 3 :
23250: LD_ADDR_VAR 0 5
23254: PUSH
23255: LD_INT 41
23257: ST_TO_ADDR
23258: GO 23280
23260: LD_INT 3
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23279
23268: POP
// tech := tech_bazooka ; end ;
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: LD_INT 44
23276: ST_TO_ADDR
23277: GO 23280
23279: POP
// if Researched ( side , tech ) then
23280: LD_VAR 0 3
23284: PPUSH
23285: LD_VAR 0 5
23289: PPUSH
23290: CALL_OW 325
23294: IFFALSE 23321
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23296: LD_ADDR_VAR 0 2
23300: PUSH
23301: LD_INT 5
23303: PUSH
23304: LD_INT 8
23306: PUSH
23307: LD_INT 9
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: LIST
23314: PUSH
23315: LD_VAR 0 4
23319: ARRAY
23320: ST_TO_ADDR
// end ;
23321: LD_VAR 0 2
23325: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23326: LD_INT 0
23328: PPUSH
23329: PPUSH
23330: PPUSH
// if not mines then
23331: LD_VAR 0 2
23335: NOT
23336: IFFALSE 23340
// exit ;
23338: GO 23484
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23340: LD_ADDR_VAR 0 5
23344: PUSH
23345: LD_INT 81
23347: PUSH
23348: LD_VAR 0 1
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 3
23359: PUSH
23360: LD_INT 21
23362: PUSH
23363: LD_INT 3
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PPUSH
23378: CALL_OW 69
23382: ST_TO_ADDR
// for i in mines do
23383: LD_ADDR_VAR 0 4
23387: PUSH
23388: LD_VAR 0 2
23392: PUSH
23393: FOR_IN
23394: IFFALSE 23482
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23396: LD_VAR 0 4
23400: PUSH
23401: LD_INT 1
23403: ARRAY
23404: PPUSH
23405: LD_VAR 0 4
23409: PUSH
23410: LD_INT 2
23412: ARRAY
23413: PPUSH
23414: CALL_OW 458
23418: NOT
23419: IFFALSE 23423
// continue ;
23421: GO 23393
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23423: LD_VAR 0 4
23427: PUSH
23428: LD_INT 1
23430: ARRAY
23431: PPUSH
23432: LD_VAR 0 4
23436: PUSH
23437: LD_INT 2
23439: ARRAY
23440: PPUSH
23441: CALL_OW 428
23445: PUSH
23446: LD_VAR 0 5
23450: IN
23451: IFFALSE 23480
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23453: LD_VAR 0 4
23457: PUSH
23458: LD_INT 1
23460: ARRAY
23461: PPUSH
23462: LD_VAR 0 4
23466: PUSH
23467: LD_INT 2
23469: ARRAY
23470: PPUSH
23471: LD_VAR 0 1
23475: PPUSH
23476: CALL_OW 456
// end ;
23480: GO 23393
23482: POP
23483: POP
// end ;
23484: LD_VAR 0 3
23488: RET
// export function Count ( array ) ; var i ; begin
23489: LD_INT 0
23491: PPUSH
23492: PPUSH
// result := 0 ;
23493: LD_ADDR_VAR 0 2
23497: PUSH
23498: LD_INT 0
23500: ST_TO_ADDR
// for i in array do
23501: LD_ADDR_VAR 0 3
23505: PUSH
23506: LD_VAR 0 1
23510: PUSH
23511: FOR_IN
23512: IFFALSE 23536
// if i then
23514: LD_VAR 0 3
23518: IFFALSE 23534
// result := result + 1 ;
23520: LD_ADDR_VAR 0 2
23524: PUSH
23525: LD_VAR 0 2
23529: PUSH
23530: LD_INT 1
23532: PLUS
23533: ST_TO_ADDR
23534: GO 23511
23536: POP
23537: POP
// end ;
23538: LD_VAR 0 2
23542: RET
// export function IsEmpty ( building ) ; begin
23543: LD_INT 0
23545: PPUSH
// if not building then
23546: LD_VAR 0 1
23550: NOT
23551: IFFALSE 23555
// exit ;
23553: GO 23598
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23555: LD_ADDR_VAR 0 2
23559: PUSH
23560: LD_VAR 0 1
23564: PUSH
23565: LD_INT 22
23567: PUSH
23568: LD_VAR 0 1
23572: PPUSH
23573: CALL_OW 255
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 58
23584: PUSH
23585: EMPTY
23586: LIST
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PPUSH
23592: CALL_OW 69
23596: IN
23597: ST_TO_ADDR
// end ;
23598: LD_VAR 0 2
23602: RET
// export function IsNotFull ( building ) ; begin
23603: LD_INT 0
23605: PPUSH
// if not building then
23606: LD_VAR 0 1
23610: NOT
23611: IFFALSE 23615
// exit ;
23613: GO 23634
// result := UnitsInside ( building ) < 6 ;
23615: LD_ADDR_VAR 0 2
23619: PUSH
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 313
23629: PUSH
23630: LD_INT 6
23632: LESS
23633: ST_TO_ADDR
// end ;
23634: LD_VAR 0 2
23638: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23639: LD_INT 0
23641: PPUSH
23642: PPUSH
23643: PPUSH
23644: PPUSH
// tmp := [ ] ;
23645: LD_ADDR_VAR 0 3
23649: PUSH
23650: EMPTY
23651: ST_TO_ADDR
// list := [ ] ;
23652: LD_ADDR_VAR 0 5
23656: PUSH
23657: EMPTY
23658: ST_TO_ADDR
// for i = 16 to 25 do
23659: LD_ADDR_VAR 0 4
23663: PUSH
23664: DOUBLE
23665: LD_INT 16
23667: DEC
23668: ST_TO_ADDR
23669: LD_INT 25
23671: PUSH
23672: FOR_TO
23673: IFFALSE 23746
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23675: LD_ADDR_VAR 0 3
23679: PUSH
23680: LD_VAR 0 3
23684: PUSH
23685: LD_INT 22
23687: PUSH
23688: LD_VAR 0 1
23692: PPUSH
23693: CALL_OW 255
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 91
23704: PUSH
23705: LD_VAR 0 1
23709: PUSH
23710: LD_INT 6
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 30
23720: PUSH
23721: LD_VAR 0 4
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: PPUSH
23738: CALL_OW 69
23742: ADD
23743: ST_TO_ADDR
23744: GO 23672
23746: POP
23747: POP
// for i = 1 to tmp do
23748: LD_ADDR_VAR 0 4
23752: PUSH
23753: DOUBLE
23754: LD_INT 1
23756: DEC
23757: ST_TO_ADDR
23758: LD_VAR 0 3
23762: PUSH
23763: FOR_TO
23764: IFFALSE 23852
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23766: LD_ADDR_VAR 0 5
23770: PUSH
23771: LD_VAR 0 5
23775: PUSH
23776: LD_VAR 0 3
23780: PUSH
23781: LD_VAR 0 4
23785: ARRAY
23786: PPUSH
23787: CALL_OW 266
23791: PUSH
23792: LD_VAR 0 3
23796: PUSH
23797: LD_VAR 0 4
23801: ARRAY
23802: PPUSH
23803: CALL_OW 250
23807: PUSH
23808: LD_VAR 0 3
23812: PUSH
23813: LD_VAR 0 4
23817: ARRAY
23818: PPUSH
23819: CALL_OW 251
23823: PUSH
23824: LD_VAR 0 3
23828: PUSH
23829: LD_VAR 0 4
23833: ARRAY
23834: PPUSH
23835: CALL_OW 254
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: ADD
23849: ST_TO_ADDR
23850: GO 23763
23852: POP
23853: POP
// result := list ;
23854: LD_ADDR_VAR 0 2
23858: PUSH
23859: LD_VAR 0 5
23863: ST_TO_ADDR
// end ;
23864: LD_VAR 0 2
23868: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23869: LD_INT 0
23871: PPUSH
23872: PPUSH
23873: PPUSH
23874: PPUSH
23875: PPUSH
23876: PPUSH
23877: PPUSH
// if not factory then
23878: LD_VAR 0 1
23882: NOT
23883: IFFALSE 23887
// exit ;
23885: GO 24480
// if control = control_apeman then
23887: LD_VAR 0 4
23891: PUSH
23892: LD_INT 5
23894: EQUAL
23895: IFFALSE 24004
// begin tmp := UnitsInside ( factory ) ;
23897: LD_ADDR_VAR 0 8
23901: PUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 313
23911: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23912: LD_VAR 0 8
23916: PPUSH
23917: LD_INT 25
23919: PUSH
23920: LD_INT 12
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PPUSH
23927: CALL_OW 72
23931: NOT
23932: IFFALSE 23942
// control := control_manual ;
23934: LD_ADDR_VAR 0 4
23938: PUSH
23939: LD_INT 1
23941: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23942: LD_ADDR_VAR 0 8
23946: PUSH
23947: LD_VAR 0 1
23951: PPUSH
23952: CALL 23639 0 1
23956: ST_TO_ADDR
// if tmp then
23957: LD_VAR 0 8
23961: IFFALSE 24004
// begin for i in tmp do
23963: LD_ADDR_VAR 0 7
23967: PUSH
23968: LD_VAR 0 8
23972: PUSH
23973: FOR_IN
23974: IFFALSE 24002
// if i [ 1 ] = b_ext_radio then
23976: LD_VAR 0 7
23980: PUSH
23981: LD_INT 1
23983: ARRAY
23984: PUSH
23985: LD_INT 22
23987: EQUAL
23988: IFFALSE 24000
// begin control := control_remote ;
23990: LD_ADDR_VAR 0 4
23994: PUSH
23995: LD_INT 2
23997: ST_TO_ADDR
// break ;
23998: GO 24002
// end ;
24000: GO 23973
24002: POP
24003: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24004: LD_VAR 0 1
24008: PPUSH
24009: LD_VAR 0 2
24013: PPUSH
24014: LD_VAR 0 3
24018: PPUSH
24019: LD_VAR 0 4
24023: PPUSH
24024: LD_VAR 0 5
24028: PPUSH
24029: CALL_OW 448
24033: IFFALSE 24068
// begin result := [ chassis , engine , control , weapon ] ;
24035: LD_ADDR_VAR 0 6
24039: PUSH
24040: LD_VAR 0 2
24044: PUSH
24045: LD_VAR 0 3
24049: PUSH
24050: LD_VAR 0 4
24054: PUSH
24055: LD_VAR 0 5
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: ST_TO_ADDR
// exit ;
24066: GO 24480
// end ; _chassis := AvailableChassisList ( factory ) ;
24068: LD_ADDR_VAR 0 9
24072: PUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL_OW 475
24082: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24083: LD_ADDR_VAR 0 11
24087: PUSH
24088: LD_VAR 0 1
24092: PPUSH
24093: CALL_OW 476
24097: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24098: LD_ADDR_VAR 0 12
24102: PUSH
24103: LD_VAR 0 1
24107: PPUSH
24108: CALL_OW 477
24112: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24113: LD_ADDR_VAR 0 10
24117: PUSH
24118: LD_VAR 0 1
24122: PPUSH
24123: CALL_OW 478
24127: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24128: LD_VAR 0 9
24132: NOT
24133: PUSH
24134: LD_VAR 0 11
24138: NOT
24139: OR
24140: PUSH
24141: LD_VAR 0 12
24145: NOT
24146: OR
24147: PUSH
24148: LD_VAR 0 10
24152: NOT
24153: OR
24154: IFFALSE 24189
// begin result := [ chassis , engine , control , weapon ] ;
24156: LD_ADDR_VAR 0 6
24160: PUSH
24161: LD_VAR 0 2
24165: PUSH
24166: LD_VAR 0 3
24170: PUSH
24171: LD_VAR 0 4
24175: PUSH
24176: LD_VAR 0 5
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: ST_TO_ADDR
// exit ;
24187: GO 24480
// end ; if not chassis in _chassis then
24189: LD_VAR 0 2
24193: PUSH
24194: LD_VAR 0 9
24198: IN
24199: NOT
24200: IFFALSE 24226
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24202: LD_ADDR_VAR 0 2
24206: PUSH
24207: LD_VAR 0 9
24211: PUSH
24212: LD_INT 1
24214: PPUSH
24215: LD_VAR 0 9
24219: PPUSH
24220: CALL_OW 12
24224: ARRAY
24225: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24226: LD_VAR 0 2
24230: PPUSH
24231: LD_VAR 0 3
24235: PPUSH
24236: CALL 24485 0 2
24240: NOT
24241: IFFALSE 24300
// repeat engine := _engine [ 1 ] ;
24243: LD_ADDR_VAR 0 3
24247: PUSH
24248: LD_VAR 0 11
24252: PUSH
24253: LD_INT 1
24255: ARRAY
24256: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24257: LD_ADDR_VAR 0 11
24261: PUSH
24262: LD_VAR 0 11
24266: PPUSH
24267: LD_INT 1
24269: PPUSH
24270: CALL_OW 3
24274: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24275: LD_VAR 0 2
24279: PPUSH
24280: LD_VAR 0 3
24284: PPUSH
24285: CALL 24485 0 2
24289: PUSH
24290: LD_VAR 0 11
24294: PUSH
24295: EMPTY
24296: EQUAL
24297: OR
24298: IFFALSE 24243
// if not control in _control then
24300: LD_VAR 0 4
24304: PUSH
24305: LD_VAR 0 12
24309: IN
24310: NOT
24311: IFFALSE 24337
// control := _control [ rand ( 1 , _control ) ] ;
24313: LD_ADDR_VAR 0 4
24317: PUSH
24318: LD_VAR 0 12
24322: PUSH
24323: LD_INT 1
24325: PPUSH
24326: LD_VAR 0 12
24330: PPUSH
24331: CALL_OW 12
24335: ARRAY
24336: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24337: LD_VAR 0 2
24341: PPUSH
24342: LD_VAR 0 5
24346: PPUSH
24347: CALL 24705 0 2
24351: NOT
24352: IFFALSE 24411
// repeat weapon := _weapon [ 1 ] ;
24354: LD_ADDR_VAR 0 5
24358: PUSH
24359: LD_VAR 0 10
24363: PUSH
24364: LD_INT 1
24366: ARRAY
24367: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24368: LD_ADDR_VAR 0 10
24372: PUSH
24373: LD_VAR 0 10
24377: PPUSH
24378: LD_INT 1
24380: PPUSH
24381: CALL_OW 3
24385: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24386: LD_VAR 0 2
24390: PPUSH
24391: LD_VAR 0 5
24395: PPUSH
24396: CALL 24705 0 2
24400: PUSH
24401: LD_VAR 0 10
24405: PUSH
24406: EMPTY
24407: EQUAL
24408: OR
24409: IFFALSE 24354
// result := [ ] ;
24411: LD_ADDR_VAR 0 6
24415: PUSH
24416: EMPTY
24417: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24418: LD_VAR 0 1
24422: PPUSH
24423: LD_VAR 0 2
24427: PPUSH
24428: LD_VAR 0 3
24432: PPUSH
24433: LD_VAR 0 4
24437: PPUSH
24438: LD_VAR 0 5
24442: PPUSH
24443: CALL_OW 448
24447: IFFALSE 24480
// result := [ chassis , engine , control , weapon ] ;
24449: LD_ADDR_VAR 0 6
24453: PUSH
24454: LD_VAR 0 2
24458: PUSH
24459: LD_VAR 0 3
24463: PUSH
24464: LD_VAR 0 4
24468: PUSH
24469: LD_VAR 0 5
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: ST_TO_ADDR
// end ;
24480: LD_VAR 0 6
24484: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24485: LD_INT 0
24487: PPUSH
// if not chassis or not engine then
24488: LD_VAR 0 1
24492: NOT
24493: PUSH
24494: LD_VAR 0 2
24498: NOT
24499: OR
24500: IFFALSE 24504
// exit ;
24502: GO 24700
// case engine of engine_solar :
24504: LD_VAR 0 2
24508: PUSH
24509: LD_INT 2
24511: DOUBLE
24512: EQUAL
24513: IFTRUE 24517
24515: GO 24555
24517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24518: LD_ADDR_VAR 0 3
24522: PUSH
24523: LD_INT 11
24525: PUSH
24526: LD_INT 12
24528: PUSH
24529: LD_INT 13
24531: PUSH
24532: LD_INT 14
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: LD_INT 2
24540: PUSH
24541: LD_INT 3
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: ST_TO_ADDR
24553: GO 24684
24555: LD_INT 1
24557: DOUBLE
24558: EQUAL
24559: IFTRUE 24563
24561: GO 24625
24563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24564: LD_ADDR_VAR 0 3
24568: PUSH
24569: LD_INT 11
24571: PUSH
24572: LD_INT 12
24574: PUSH
24575: LD_INT 13
24577: PUSH
24578: LD_INT 14
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 3
24589: PUSH
24590: LD_INT 4
24592: PUSH
24593: LD_INT 5
24595: PUSH
24596: LD_INT 21
24598: PUSH
24599: LD_INT 23
24601: PUSH
24602: LD_INT 22
24604: PUSH
24605: LD_INT 24
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: ST_TO_ADDR
24623: GO 24684
24625: LD_INT 3
24627: DOUBLE
24628: EQUAL
24629: IFTRUE 24633
24631: GO 24683
24633: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24634: LD_ADDR_VAR 0 3
24638: PUSH
24639: LD_INT 13
24641: PUSH
24642: LD_INT 14
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: LD_INT 4
24653: PUSH
24654: LD_INT 5
24656: PUSH
24657: LD_INT 21
24659: PUSH
24660: LD_INT 22
24662: PUSH
24663: LD_INT 23
24665: PUSH
24666: LD_INT 24
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: ST_TO_ADDR
24681: GO 24684
24683: POP
// result := ( chassis in result ) ;
24684: LD_ADDR_VAR 0 3
24688: PUSH
24689: LD_VAR 0 1
24693: PUSH
24694: LD_VAR 0 3
24698: IN
24699: ST_TO_ADDR
// end ;
24700: LD_VAR 0 3
24704: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24705: LD_INT 0
24707: PPUSH
// if not chassis or not weapon then
24708: LD_VAR 0 1
24712: NOT
24713: PUSH
24714: LD_VAR 0 2
24718: NOT
24719: OR
24720: IFFALSE 24724
// exit ;
24722: GO 25750
// case weapon of us_machine_gun :
24724: LD_VAR 0 2
24728: PUSH
24729: LD_INT 2
24731: DOUBLE
24732: EQUAL
24733: IFTRUE 24737
24735: GO 24767
24737: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24738: LD_ADDR_VAR 0 3
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 3
24751: PUSH
24752: LD_INT 4
24754: PUSH
24755: LD_INT 5
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: ST_TO_ADDR
24765: GO 25734
24767: LD_INT 3
24769: DOUBLE
24770: EQUAL
24771: IFTRUE 24775
24773: GO 24805
24775: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24776: LD_ADDR_VAR 0 3
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: LD_INT 3
24789: PUSH
24790: LD_INT 4
24792: PUSH
24793: LD_INT 5
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: ST_TO_ADDR
24803: GO 25734
24805: LD_INT 11
24807: DOUBLE
24808: EQUAL
24809: IFTRUE 24813
24811: GO 24843
24813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24814: LD_ADDR_VAR 0 3
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: LD_INT 4
24830: PUSH
24831: LD_INT 5
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: ST_TO_ADDR
24841: GO 25734
24843: LD_INT 4
24845: DOUBLE
24846: EQUAL
24847: IFTRUE 24851
24849: GO 24877
24851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24852: LD_ADDR_VAR 0 3
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 3
24862: PUSH
24863: LD_INT 4
24865: PUSH
24866: LD_INT 5
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: ST_TO_ADDR
24875: GO 25734
24877: LD_INT 5
24879: DOUBLE
24880: EQUAL
24881: IFTRUE 24885
24883: GO 24911
24885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24886: LD_ADDR_VAR 0 3
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: LD_INT 3
24896: PUSH
24897: LD_INT 4
24899: PUSH
24900: LD_INT 5
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: ST_TO_ADDR
24909: GO 25734
24911: LD_INT 9
24913: DOUBLE
24914: EQUAL
24915: IFTRUE 24919
24917: GO 24945
24919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24920: LD_ADDR_VAR 0 3
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 3
24930: PUSH
24931: LD_INT 4
24933: PUSH
24934: LD_INT 5
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: ST_TO_ADDR
24943: GO 25734
24945: LD_INT 7
24947: DOUBLE
24948: EQUAL
24949: IFTRUE 24953
24951: GO 24979
24953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24954: LD_ADDR_VAR 0 3
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: LD_INT 3
24964: PUSH
24965: LD_INT 4
24967: PUSH
24968: LD_INT 5
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: ST_TO_ADDR
24977: GO 25734
24979: LD_INT 12
24981: DOUBLE
24982: EQUAL
24983: IFTRUE 24987
24985: GO 25013
24987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24988: LD_ADDR_VAR 0 3
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: LD_INT 3
24998: PUSH
24999: LD_INT 4
25001: PUSH
25002: LD_INT 5
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: ST_TO_ADDR
25011: GO 25734
25013: LD_INT 13
25015: DOUBLE
25016: EQUAL
25017: IFTRUE 25021
25019: GO 25047
25021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25022: LD_ADDR_VAR 0 3
25026: PUSH
25027: LD_INT 2
25029: PUSH
25030: LD_INT 3
25032: PUSH
25033: LD_INT 4
25035: PUSH
25036: LD_INT 5
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: ST_TO_ADDR
25045: GO 25734
25047: LD_INT 14
25049: DOUBLE
25050: EQUAL
25051: IFTRUE 25055
25053: GO 25073
25055: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25056: LD_ADDR_VAR 0 3
25060: PUSH
25061: LD_INT 4
25063: PUSH
25064: LD_INT 5
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: ST_TO_ADDR
25071: GO 25734
25073: LD_INT 6
25075: DOUBLE
25076: EQUAL
25077: IFTRUE 25081
25079: GO 25099
25081: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: LD_INT 4
25089: PUSH
25090: LD_INT 5
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: ST_TO_ADDR
25097: GO 25734
25099: LD_INT 10
25101: DOUBLE
25102: EQUAL
25103: IFTRUE 25107
25105: GO 25125
25107: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25108: LD_ADDR_VAR 0 3
25112: PUSH
25113: LD_INT 4
25115: PUSH
25116: LD_INT 5
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: ST_TO_ADDR
25123: GO 25734
25125: LD_INT 22
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25159
25133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_INT 11
25141: PUSH
25142: LD_INT 12
25144: PUSH
25145: LD_INT 13
25147: PUSH
25148: LD_INT 14
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: ST_TO_ADDR
25157: GO 25734
25159: LD_INT 23
25161: DOUBLE
25162: EQUAL
25163: IFTRUE 25167
25165: GO 25193
25167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_INT 11
25175: PUSH
25176: LD_INT 12
25178: PUSH
25179: LD_INT 13
25181: PUSH
25182: LD_INT 14
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: ST_TO_ADDR
25191: GO 25734
25193: LD_INT 24
25195: DOUBLE
25196: EQUAL
25197: IFTRUE 25201
25199: GO 25227
25201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25202: LD_ADDR_VAR 0 3
25206: PUSH
25207: LD_INT 11
25209: PUSH
25210: LD_INT 12
25212: PUSH
25213: LD_INT 13
25215: PUSH
25216: LD_INT 14
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: ST_TO_ADDR
25225: GO 25734
25227: LD_INT 30
25229: DOUBLE
25230: EQUAL
25231: IFTRUE 25235
25233: GO 25261
25235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25236: LD_ADDR_VAR 0 3
25240: PUSH
25241: LD_INT 11
25243: PUSH
25244: LD_INT 12
25246: PUSH
25247: LD_INT 13
25249: PUSH
25250: LD_INT 14
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: ST_TO_ADDR
25259: GO 25734
25261: LD_INT 25
25263: DOUBLE
25264: EQUAL
25265: IFTRUE 25269
25267: GO 25287
25269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25270: LD_ADDR_VAR 0 3
25274: PUSH
25275: LD_INT 13
25277: PUSH
25278: LD_INT 14
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: ST_TO_ADDR
25285: GO 25734
25287: LD_INT 27
25289: DOUBLE
25290: EQUAL
25291: IFTRUE 25295
25293: GO 25313
25295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_INT 13
25303: PUSH
25304: LD_INT 14
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: ST_TO_ADDR
25311: GO 25734
25313: LD_INT 28
25315: DOUBLE
25316: EQUAL
25317: IFTRUE 25321
25319: GO 25339
25321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25322: LD_ADDR_VAR 0 3
25326: PUSH
25327: LD_INT 13
25329: PUSH
25330: LD_INT 14
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: ST_TO_ADDR
25337: GO 25734
25339: LD_INT 29
25341: DOUBLE
25342: EQUAL
25343: IFTRUE 25347
25345: GO 25365
25347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_INT 13
25355: PUSH
25356: LD_INT 14
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: ST_TO_ADDR
25363: GO 25734
25365: LD_INT 31
25367: DOUBLE
25368: EQUAL
25369: IFTRUE 25373
25371: GO 25391
25373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25374: LD_ADDR_VAR 0 3
25378: PUSH
25379: LD_INT 13
25381: PUSH
25382: LD_INT 14
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: ST_TO_ADDR
25389: GO 25734
25391: LD_INT 26
25393: DOUBLE
25394: EQUAL
25395: IFTRUE 25399
25397: GO 25417
25399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_INT 13
25407: PUSH
25408: LD_INT 14
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: ST_TO_ADDR
25415: GO 25734
25417: LD_INT 42
25419: DOUBLE
25420: EQUAL
25421: IFTRUE 25425
25423: GO 25451
25425: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: LD_INT 21
25433: PUSH
25434: LD_INT 22
25436: PUSH
25437: LD_INT 23
25439: PUSH
25440: LD_INT 24
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: ST_TO_ADDR
25449: GO 25734
25451: LD_INT 43
25453: DOUBLE
25454: EQUAL
25455: IFTRUE 25459
25457: GO 25485
25459: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_INT 21
25467: PUSH
25468: LD_INT 22
25470: PUSH
25471: LD_INT 23
25473: PUSH
25474: LD_INT 24
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: ST_TO_ADDR
25483: GO 25734
25485: LD_INT 44
25487: DOUBLE
25488: EQUAL
25489: IFTRUE 25493
25491: GO 25519
25493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25494: LD_ADDR_VAR 0 3
25498: PUSH
25499: LD_INT 21
25501: PUSH
25502: LD_INT 22
25504: PUSH
25505: LD_INT 23
25507: PUSH
25508: LD_INT 24
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: ST_TO_ADDR
25517: GO 25734
25519: LD_INT 45
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25553
25527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_INT 21
25535: PUSH
25536: LD_INT 22
25538: PUSH
25539: LD_INT 23
25541: PUSH
25542: LD_INT 24
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: ST_TO_ADDR
25551: GO 25734
25553: LD_INT 49
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25587
25561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25562: LD_ADDR_VAR 0 3
25566: PUSH
25567: LD_INT 21
25569: PUSH
25570: LD_INT 22
25572: PUSH
25573: LD_INT 23
25575: PUSH
25576: LD_INT 24
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: ST_TO_ADDR
25585: GO 25734
25587: LD_INT 51
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25621
25595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25596: LD_ADDR_VAR 0 3
25600: PUSH
25601: LD_INT 21
25603: PUSH
25604: LD_INT 22
25606: PUSH
25607: LD_INT 23
25609: PUSH
25610: LD_INT 24
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: ST_TO_ADDR
25619: GO 25734
25621: LD_INT 52
25623: DOUBLE
25624: EQUAL
25625: IFTRUE 25629
25627: GO 25655
25629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25630: LD_ADDR_VAR 0 3
25634: PUSH
25635: LD_INT 21
25637: PUSH
25638: LD_INT 22
25640: PUSH
25641: LD_INT 23
25643: PUSH
25644: LD_INT 24
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: ST_TO_ADDR
25653: GO 25734
25655: LD_INT 53
25657: DOUBLE
25658: EQUAL
25659: IFTRUE 25663
25661: GO 25681
25663: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_INT 23
25671: PUSH
25672: LD_INT 24
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: ST_TO_ADDR
25679: GO 25734
25681: LD_INT 46
25683: DOUBLE
25684: EQUAL
25685: IFTRUE 25689
25687: GO 25707
25689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25690: LD_ADDR_VAR 0 3
25694: PUSH
25695: LD_INT 23
25697: PUSH
25698: LD_INT 24
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: ST_TO_ADDR
25705: GO 25734
25707: LD_INT 47
25709: DOUBLE
25710: EQUAL
25711: IFTRUE 25715
25713: GO 25733
25715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25716: LD_ADDR_VAR 0 3
25720: PUSH
25721: LD_INT 23
25723: PUSH
25724: LD_INT 24
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: ST_TO_ADDR
25731: GO 25734
25733: POP
// result := ( chassis in result ) ;
25734: LD_ADDR_VAR 0 3
25738: PUSH
25739: LD_VAR 0 1
25743: PUSH
25744: LD_VAR 0 3
25748: IN
25749: ST_TO_ADDR
// end ;
25750: LD_VAR 0 3
25754: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
25763: PPUSH
// result := array ;
25764: LD_ADDR_VAR 0 5
25768: PUSH
25769: LD_VAR 0 1
25773: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25774: LD_VAR 0 1
25778: NOT
25779: PUSH
25780: LD_VAR 0 2
25784: NOT
25785: OR
25786: PUSH
25787: LD_VAR 0 3
25791: NOT
25792: OR
25793: PUSH
25794: LD_VAR 0 2
25798: PUSH
25799: LD_VAR 0 1
25803: GREATER
25804: OR
25805: PUSH
25806: LD_VAR 0 3
25810: PUSH
25811: LD_VAR 0 1
25815: GREATER
25816: OR
25817: IFFALSE 25821
// exit ;
25819: GO 26117
// if direction then
25821: LD_VAR 0 4
25825: IFFALSE 25889
// begin d := 1 ;
25827: LD_ADDR_VAR 0 9
25831: PUSH
25832: LD_INT 1
25834: ST_TO_ADDR
// if i_from > i_to then
25835: LD_VAR 0 2
25839: PUSH
25840: LD_VAR 0 3
25844: GREATER
25845: IFFALSE 25871
// length := ( array - i_from ) + i_to else
25847: LD_ADDR_VAR 0 11
25851: PUSH
25852: LD_VAR 0 1
25856: PUSH
25857: LD_VAR 0 2
25861: MINUS
25862: PUSH
25863: LD_VAR 0 3
25867: PLUS
25868: ST_TO_ADDR
25869: GO 25887
// length := i_to - i_from ;
25871: LD_ADDR_VAR 0 11
25875: PUSH
25876: LD_VAR 0 3
25880: PUSH
25881: LD_VAR 0 2
25885: MINUS
25886: ST_TO_ADDR
// end else
25887: GO 25950
// begin d := - 1 ;
25889: LD_ADDR_VAR 0 9
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: ST_TO_ADDR
// if i_from > i_to then
25898: LD_VAR 0 2
25902: PUSH
25903: LD_VAR 0 3
25907: GREATER
25908: IFFALSE 25928
// length := i_from - i_to else
25910: LD_ADDR_VAR 0 11
25914: PUSH
25915: LD_VAR 0 2
25919: PUSH
25920: LD_VAR 0 3
25924: MINUS
25925: ST_TO_ADDR
25926: GO 25950
// length := ( array - i_to ) + i_from ;
25928: LD_ADDR_VAR 0 11
25932: PUSH
25933: LD_VAR 0 1
25937: PUSH
25938: LD_VAR 0 3
25942: MINUS
25943: PUSH
25944: LD_VAR 0 2
25948: PLUS
25949: ST_TO_ADDR
// end ; if not length then
25950: LD_VAR 0 11
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26117
// tmp := array ;
25959: LD_ADDR_VAR 0 10
25963: PUSH
25964: LD_VAR 0 1
25968: ST_TO_ADDR
// for i = 1 to length do
25969: LD_ADDR_VAR 0 6
25973: PUSH
25974: DOUBLE
25975: LD_INT 1
25977: DEC
25978: ST_TO_ADDR
25979: LD_VAR 0 11
25983: PUSH
25984: FOR_TO
25985: IFFALSE 26105
// begin for j = 1 to array do
25987: LD_ADDR_VAR 0 7
25991: PUSH
25992: DOUBLE
25993: LD_INT 1
25995: DEC
25996: ST_TO_ADDR
25997: LD_VAR 0 1
26001: PUSH
26002: FOR_TO
26003: IFFALSE 26091
// begin k := j + d ;
26005: LD_ADDR_VAR 0 8
26009: PUSH
26010: LD_VAR 0 7
26014: PUSH
26015: LD_VAR 0 9
26019: PLUS
26020: ST_TO_ADDR
// if k > array then
26021: LD_VAR 0 8
26025: PUSH
26026: LD_VAR 0 1
26030: GREATER
26031: IFFALSE 26041
// k := 1 ;
26033: LD_ADDR_VAR 0 8
26037: PUSH
26038: LD_INT 1
26040: ST_TO_ADDR
// if not k then
26041: LD_VAR 0 8
26045: NOT
26046: IFFALSE 26058
// k := array ;
26048: LD_ADDR_VAR 0 8
26052: PUSH
26053: LD_VAR 0 1
26057: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26058: LD_ADDR_VAR 0 10
26062: PUSH
26063: LD_VAR 0 10
26067: PPUSH
26068: LD_VAR 0 8
26072: PPUSH
26073: LD_VAR 0 1
26077: PUSH
26078: LD_VAR 0 7
26082: ARRAY
26083: PPUSH
26084: CALL_OW 1
26088: ST_TO_ADDR
// end ;
26089: GO 26002
26091: POP
26092: POP
// array := tmp ;
26093: LD_ADDR_VAR 0 1
26097: PUSH
26098: LD_VAR 0 10
26102: ST_TO_ADDR
// end ;
26103: GO 25984
26105: POP
26106: POP
// result := array ;
26107: LD_ADDR_VAR 0 5
26111: PUSH
26112: LD_VAR 0 1
26116: ST_TO_ADDR
// end ;
26117: LD_VAR 0 5
26121: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26122: LD_INT 0
26124: PPUSH
26125: PPUSH
// result := 0 ;
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_INT 0
26133: ST_TO_ADDR
// if not array or not value in array then
26134: LD_VAR 0 1
26138: NOT
26139: PUSH
26140: LD_VAR 0 2
26144: PUSH
26145: LD_VAR 0 1
26149: IN
26150: NOT
26151: OR
26152: IFFALSE 26156
// exit ;
26154: GO 26210
// for i = 1 to array do
26156: LD_ADDR_VAR 0 4
26160: PUSH
26161: DOUBLE
26162: LD_INT 1
26164: DEC
26165: ST_TO_ADDR
26166: LD_VAR 0 1
26170: PUSH
26171: FOR_TO
26172: IFFALSE 26208
// if value = array [ i ] then
26174: LD_VAR 0 2
26178: PUSH
26179: LD_VAR 0 1
26183: PUSH
26184: LD_VAR 0 4
26188: ARRAY
26189: EQUAL
26190: IFFALSE 26206
// begin result := i ;
26192: LD_ADDR_VAR 0 3
26196: PUSH
26197: LD_VAR 0 4
26201: ST_TO_ADDR
// exit ;
26202: POP
26203: POP
26204: GO 26210
// end ;
26206: GO 26171
26208: POP
26209: POP
// end ;
26210: LD_VAR 0 3
26214: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26215: LD_INT 0
26217: PPUSH
// vc_chassis := chassis ;
26218: LD_ADDR_OWVAR 37
26222: PUSH
26223: LD_VAR 0 1
26227: ST_TO_ADDR
// vc_engine := engine ;
26228: LD_ADDR_OWVAR 39
26232: PUSH
26233: LD_VAR 0 2
26237: ST_TO_ADDR
// vc_control := control ;
26238: LD_ADDR_OWVAR 38
26242: PUSH
26243: LD_VAR 0 3
26247: ST_TO_ADDR
// vc_weapon := weapon ;
26248: LD_ADDR_OWVAR 40
26252: PUSH
26253: LD_VAR 0 4
26257: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26258: LD_ADDR_OWVAR 41
26262: PUSH
26263: LD_VAR 0 5
26267: ST_TO_ADDR
// end ;
26268: LD_VAR 0 6
26272: RET
// export function WantPlant ( unit ) ; var task ; begin
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
// result := false ;
26277: LD_ADDR_VAR 0 2
26281: PUSH
26282: LD_INT 0
26284: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26285: LD_ADDR_VAR 0 3
26289: PUSH
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL_OW 437
26299: ST_TO_ADDR
// if task then
26300: LD_VAR 0 3
26304: IFFALSE 26332
// if task [ 1 ] [ 1 ] = p then
26306: LD_VAR 0 3
26310: PUSH
26311: LD_INT 1
26313: ARRAY
26314: PUSH
26315: LD_INT 1
26317: ARRAY
26318: PUSH
26319: LD_STRING p
26321: EQUAL
26322: IFFALSE 26332
// result := true ;
26324: LD_ADDR_VAR 0 2
26328: PUSH
26329: LD_INT 1
26331: ST_TO_ADDR
// end ;
26332: LD_VAR 0 2
26336: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26337: LD_INT 0
26339: PPUSH
26340: PPUSH
26341: PPUSH
26342: PPUSH
// if pos < 1 then
26343: LD_VAR 0 2
26347: PUSH
26348: LD_INT 1
26350: LESS
26351: IFFALSE 26355
// exit ;
26353: GO 26658
// if pos = 1 then
26355: LD_VAR 0 2
26359: PUSH
26360: LD_INT 1
26362: EQUAL
26363: IFFALSE 26396
// result := Replace ( arr , pos [ 1 ] , value ) else
26365: LD_ADDR_VAR 0 4
26369: PUSH
26370: LD_VAR 0 1
26374: PPUSH
26375: LD_VAR 0 2
26379: PUSH
26380: LD_INT 1
26382: ARRAY
26383: PPUSH
26384: LD_VAR 0 3
26388: PPUSH
26389: CALL_OW 1
26393: ST_TO_ADDR
26394: GO 26658
// begin tmp := arr ;
26396: LD_ADDR_VAR 0 6
26400: PUSH
26401: LD_VAR 0 1
26405: ST_TO_ADDR
// s_arr := [ tmp ] ;
26406: LD_ADDR_VAR 0 7
26410: PUSH
26411: LD_VAR 0 6
26415: PUSH
26416: EMPTY
26417: LIST
26418: ST_TO_ADDR
// for i = 1 to pos - 1 do
26419: LD_ADDR_VAR 0 5
26423: PUSH
26424: DOUBLE
26425: LD_INT 1
26427: DEC
26428: ST_TO_ADDR
26429: LD_VAR 0 2
26433: PUSH
26434: LD_INT 1
26436: MINUS
26437: PUSH
26438: FOR_TO
26439: IFFALSE 26484
// begin tmp := tmp [ pos [ i ] ] ;
26441: LD_ADDR_VAR 0 6
26445: PUSH
26446: LD_VAR 0 6
26450: PUSH
26451: LD_VAR 0 2
26455: PUSH
26456: LD_VAR 0 5
26460: ARRAY
26461: ARRAY
26462: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26463: LD_ADDR_VAR 0 7
26467: PUSH
26468: LD_VAR 0 7
26472: PUSH
26473: LD_VAR 0 6
26477: PUSH
26478: EMPTY
26479: LIST
26480: ADD
26481: ST_TO_ADDR
// end ;
26482: GO 26438
26484: POP
26485: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26486: LD_ADDR_VAR 0 6
26490: PUSH
26491: LD_VAR 0 6
26495: PPUSH
26496: LD_VAR 0 2
26500: PUSH
26501: LD_VAR 0 2
26505: ARRAY
26506: PPUSH
26507: LD_VAR 0 3
26511: PPUSH
26512: CALL_OW 1
26516: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26517: LD_ADDR_VAR 0 7
26521: PUSH
26522: LD_VAR 0 7
26526: PPUSH
26527: LD_VAR 0 7
26531: PPUSH
26532: LD_VAR 0 6
26536: PPUSH
26537: CALL_OW 1
26541: ST_TO_ADDR
// for i = s_arr downto 2 do
26542: LD_ADDR_VAR 0 5
26546: PUSH
26547: DOUBLE
26548: LD_VAR 0 7
26552: INC
26553: ST_TO_ADDR
26554: LD_INT 2
26556: PUSH
26557: FOR_DOWNTO
26558: IFFALSE 26642
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26560: LD_ADDR_VAR 0 6
26564: PUSH
26565: LD_VAR 0 7
26569: PUSH
26570: LD_VAR 0 5
26574: PUSH
26575: LD_INT 1
26577: MINUS
26578: ARRAY
26579: PPUSH
26580: LD_VAR 0 2
26584: PUSH
26585: LD_VAR 0 5
26589: PUSH
26590: LD_INT 1
26592: MINUS
26593: ARRAY
26594: PPUSH
26595: LD_VAR 0 7
26599: PUSH
26600: LD_VAR 0 5
26604: ARRAY
26605: PPUSH
26606: CALL_OW 1
26610: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26611: LD_ADDR_VAR 0 7
26615: PUSH
26616: LD_VAR 0 7
26620: PPUSH
26621: LD_VAR 0 5
26625: PUSH
26626: LD_INT 1
26628: MINUS
26629: PPUSH
26630: LD_VAR 0 6
26634: PPUSH
26635: CALL_OW 1
26639: ST_TO_ADDR
// end ;
26640: GO 26557
26642: POP
26643: POP
// result := s_arr [ 1 ] ;
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: LD_VAR 0 7
26653: PUSH
26654: LD_INT 1
26656: ARRAY
26657: ST_TO_ADDR
// end ; end ;
26658: LD_VAR 0 4
26662: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
// if not list then
26667: LD_VAR 0 1
26671: NOT
26672: IFFALSE 26676
// exit ;
26674: GO 26767
// i := list [ pos1 ] ;
26676: LD_ADDR_VAR 0 5
26680: PUSH
26681: LD_VAR 0 1
26685: PUSH
26686: LD_VAR 0 2
26690: ARRAY
26691: ST_TO_ADDR
// if not i then
26692: LD_VAR 0 5
26696: NOT
26697: IFFALSE 26701
// exit ;
26699: GO 26767
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26701: LD_ADDR_VAR 0 1
26705: PUSH
26706: LD_VAR 0 1
26710: PPUSH
26711: LD_VAR 0 2
26715: PPUSH
26716: LD_VAR 0 1
26720: PUSH
26721: LD_VAR 0 3
26725: ARRAY
26726: PPUSH
26727: CALL_OW 1
26731: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26732: LD_ADDR_VAR 0 1
26736: PUSH
26737: LD_VAR 0 1
26741: PPUSH
26742: LD_VAR 0 3
26746: PPUSH
26747: LD_VAR 0 5
26751: PPUSH
26752: CALL_OW 1
26756: ST_TO_ADDR
// result := list ;
26757: LD_ADDR_VAR 0 4
26761: PUSH
26762: LD_VAR 0 1
26766: ST_TO_ADDR
// end ;
26767: LD_VAR 0 4
26771: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26772: LD_INT 0
26774: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26775: LD_ADDR_VAR 0 5
26779: PUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL_OW 250
26789: PPUSH
26790: LD_VAR 0 1
26794: PPUSH
26795: CALL_OW 251
26799: PPUSH
26800: LD_VAR 0 2
26804: PPUSH
26805: LD_VAR 0 3
26809: PPUSH
26810: LD_VAR 0 4
26814: PPUSH
26815: CALL 26825 0 5
26819: ST_TO_ADDR
// end ;
26820: LD_VAR 0 5
26824: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26825: LD_INT 0
26827: PPUSH
26828: PPUSH
26829: PPUSH
26830: PPUSH
// if not list then
26831: LD_VAR 0 3
26835: NOT
26836: IFFALSE 26840
// exit ;
26838: GO 27228
// result := [ ] ;
26840: LD_ADDR_VAR 0 6
26844: PUSH
26845: EMPTY
26846: ST_TO_ADDR
// for i in list do
26847: LD_ADDR_VAR 0 7
26851: PUSH
26852: LD_VAR 0 3
26856: PUSH
26857: FOR_IN
26858: IFFALSE 27060
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26860: LD_ADDR_VAR 0 9
26864: PUSH
26865: LD_VAR 0 7
26869: PPUSH
26870: LD_VAR 0 1
26874: PPUSH
26875: LD_VAR 0 2
26879: PPUSH
26880: CALL_OW 297
26884: ST_TO_ADDR
// if not result then
26885: LD_VAR 0 6
26889: NOT
26890: IFFALSE 26916
// result := [ [ i , tmp ] ] else
26892: LD_ADDR_VAR 0 6
26896: PUSH
26897: LD_VAR 0 7
26901: PUSH
26902: LD_VAR 0 9
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: EMPTY
26912: LIST
26913: ST_TO_ADDR
26914: GO 27058
// begin if result [ result ] [ 2 ] < tmp then
26916: LD_VAR 0 6
26920: PUSH
26921: LD_VAR 0 6
26925: ARRAY
26926: PUSH
26927: LD_INT 2
26929: ARRAY
26930: PUSH
26931: LD_VAR 0 9
26935: LESS
26936: IFFALSE 26978
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26938: LD_ADDR_VAR 0 6
26942: PUSH
26943: LD_VAR 0 6
26947: PPUSH
26948: LD_VAR 0 6
26952: PUSH
26953: LD_INT 1
26955: PLUS
26956: PPUSH
26957: LD_VAR 0 7
26961: PUSH
26962: LD_VAR 0 9
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PPUSH
26971: CALL_OW 2
26975: ST_TO_ADDR
26976: GO 27058
// for j = 1 to result do
26978: LD_ADDR_VAR 0 8
26982: PUSH
26983: DOUBLE
26984: LD_INT 1
26986: DEC
26987: ST_TO_ADDR
26988: LD_VAR 0 6
26992: PUSH
26993: FOR_TO
26994: IFFALSE 27056
// begin if tmp < result [ j ] [ 2 ] then
26996: LD_VAR 0 9
27000: PUSH
27001: LD_VAR 0 6
27005: PUSH
27006: LD_VAR 0 8
27010: ARRAY
27011: PUSH
27012: LD_INT 2
27014: ARRAY
27015: LESS
27016: IFFALSE 27054
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27018: LD_ADDR_VAR 0 6
27022: PUSH
27023: LD_VAR 0 6
27027: PPUSH
27028: LD_VAR 0 8
27032: PPUSH
27033: LD_VAR 0 7
27037: PUSH
27038: LD_VAR 0 9
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PPUSH
27047: CALL_OW 2
27051: ST_TO_ADDR
// break ;
27052: GO 27056
// end ; end ;
27054: GO 26993
27056: POP
27057: POP
// end ; end ;
27058: GO 26857
27060: POP
27061: POP
// if result and not asc then
27062: LD_VAR 0 6
27066: PUSH
27067: LD_VAR 0 4
27071: NOT
27072: AND
27073: IFFALSE 27148
// begin tmp := result ;
27075: LD_ADDR_VAR 0 9
27079: PUSH
27080: LD_VAR 0 6
27084: ST_TO_ADDR
// for i = tmp downto 1 do
27085: LD_ADDR_VAR 0 7
27089: PUSH
27090: DOUBLE
27091: LD_VAR 0 9
27095: INC
27096: ST_TO_ADDR
27097: LD_INT 1
27099: PUSH
27100: FOR_DOWNTO
27101: IFFALSE 27146
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27103: LD_ADDR_VAR 0 6
27107: PUSH
27108: LD_VAR 0 6
27112: PPUSH
27113: LD_VAR 0 9
27117: PUSH
27118: LD_VAR 0 7
27122: MINUS
27123: PUSH
27124: LD_INT 1
27126: PLUS
27127: PPUSH
27128: LD_VAR 0 9
27132: PUSH
27133: LD_VAR 0 7
27137: ARRAY
27138: PPUSH
27139: CALL_OW 1
27143: ST_TO_ADDR
27144: GO 27100
27146: POP
27147: POP
// end ; tmp := [ ] ;
27148: LD_ADDR_VAR 0 9
27152: PUSH
27153: EMPTY
27154: ST_TO_ADDR
// if mode then
27155: LD_VAR 0 5
27159: IFFALSE 27228
// begin for i = 1 to result do
27161: LD_ADDR_VAR 0 7
27165: PUSH
27166: DOUBLE
27167: LD_INT 1
27169: DEC
27170: ST_TO_ADDR
27171: LD_VAR 0 6
27175: PUSH
27176: FOR_TO
27177: IFFALSE 27216
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27179: LD_ADDR_VAR 0 9
27183: PUSH
27184: LD_VAR 0 9
27188: PPUSH
27189: LD_VAR 0 7
27193: PPUSH
27194: LD_VAR 0 6
27198: PUSH
27199: LD_VAR 0 7
27203: ARRAY
27204: PUSH
27205: LD_INT 1
27207: ARRAY
27208: PPUSH
27209: CALL_OW 1
27213: ST_TO_ADDR
27214: GO 27176
27216: POP
27217: POP
// result := tmp ;
27218: LD_ADDR_VAR 0 6
27222: PUSH
27223: LD_VAR 0 9
27227: ST_TO_ADDR
// end ; end ;
27228: LD_VAR 0 6
27232: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27233: LD_INT 0
27235: PPUSH
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
27240: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27241: LD_ADDR_VAR 0 5
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: ST_TO_ADDR
// if not x or not y then
27263: LD_VAR 0 2
27267: NOT
27268: PUSH
27269: LD_VAR 0 3
27273: NOT
27274: OR
27275: IFFALSE 27279
// exit ;
27277: GO 28925
// if not range then
27279: LD_VAR 0 4
27283: NOT
27284: IFFALSE 27294
// range := 10 ;
27286: LD_ADDR_VAR 0 4
27290: PUSH
27291: LD_INT 10
27293: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27294: LD_ADDR_VAR 0 8
27298: PUSH
27299: LD_INT 81
27301: PUSH
27302: LD_VAR 0 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 92
27313: PUSH
27314: LD_VAR 0 2
27318: PUSH
27319: LD_VAR 0 3
27323: PUSH
27324: LD_VAR 0 4
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: LD_INT 21
27340: PUSH
27341: LD_INT 3
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: PPUSH
27357: CALL_OW 69
27361: ST_TO_ADDR
// if not tmp then
27362: LD_VAR 0 8
27366: NOT
27367: IFFALSE 27371
// exit ;
27369: GO 28925
// for i in tmp do
27371: LD_ADDR_VAR 0 6
27375: PUSH
27376: LD_VAR 0 8
27380: PUSH
27381: FOR_IN
27382: IFFALSE 28900
// begin points := [ 0 , 0 , 0 ] ;
27384: LD_ADDR_VAR 0 9
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: ST_TO_ADDR
// bpoints := 1 ;
27403: LD_ADDR_VAR 0 10
27407: PUSH
27408: LD_INT 1
27410: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27411: LD_VAR 0 6
27415: PPUSH
27416: CALL_OW 247
27420: PUSH
27421: LD_INT 1
27423: DOUBLE
27424: EQUAL
27425: IFTRUE 27429
27427: GO 28007
27429: POP
// begin if GetClass ( i ) = 1 then
27430: LD_VAR 0 6
27434: PPUSH
27435: CALL_OW 257
27439: PUSH
27440: LD_INT 1
27442: EQUAL
27443: IFFALSE 27464
// points := [ 10 , 5 , 3 ] ;
27445: LD_ADDR_VAR 0 9
27449: PUSH
27450: LD_INT 10
27452: PUSH
27453: LD_INT 5
27455: PUSH
27456: LD_INT 3
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27464: LD_VAR 0 6
27468: PPUSH
27469: CALL_OW 257
27473: PUSH
27474: LD_INT 2
27476: PUSH
27477: LD_INT 3
27479: PUSH
27480: LD_INT 4
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: IN
27488: IFFALSE 27509
// points := [ 3 , 2 , 1 ] ;
27490: LD_ADDR_VAR 0 9
27494: PUSH
27495: LD_INT 3
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27509: LD_VAR 0 6
27513: PPUSH
27514: CALL_OW 257
27518: PUSH
27519: LD_INT 5
27521: EQUAL
27522: IFFALSE 27543
// points := [ 130 , 5 , 2 ] ;
27524: LD_ADDR_VAR 0 9
27528: PUSH
27529: LD_INT 130
27531: PUSH
27532: LD_INT 5
27534: PUSH
27535: LD_INT 2
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27543: LD_VAR 0 6
27547: PPUSH
27548: CALL_OW 257
27552: PUSH
27553: LD_INT 8
27555: EQUAL
27556: IFFALSE 27577
// points := [ 35 , 35 , 30 ] ;
27558: LD_ADDR_VAR 0 9
27562: PUSH
27563: LD_INT 35
27565: PUSH
27566: LD_INT 35
27568: PUSH
27569: LD_INT 30
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27577: LD_VAR 0 6
27581: PPUSH
27582: CALL_OW 257
27586: PUSH
27587: LD_INT 9
27589: EQUAL
27590: IFFALSE 27611
// points := [ 20 , 55 , 40 ] ;
27592: LD_ADDR_VAR 0 9
27596: PUSH
27597: LD_INT 20
27599: PUSH
27600: LD_INT 55
27602: PUSH
27603: LD_INT 40
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27611: LD_VAR 0 6
27615: PPUSH
27616: CALL_OW 257
27620: PUSH
27621: LD_INT 12
27623: PUSH
27624: LD_INT 16
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: IN
27631: IFFALSE 27652
// points := [ 5 , 3 , 2 ] ;
27633: LD_ADDR_VAR 0 9
27637: PUSH
27638: LD_INT 5
27640: PUSH
27641: LD_INT 3
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27652: LD_VAR 0 6
27656: PPUSH
27657: CALL_OW 257
27661: PUSH
27662: LD_INT 17
27664: EQUAL
27665: IFFALSE 27686
// points := [ 100 , 50 , 75 ] ;
27667: LD_ADDR_VAR 0 9
27671: PUSH
27672: LD_INT 100
27674: PUSH
27675: LD_INT 50
27677: PUSH
27678: LD_INT 75
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27686: LD_VAR 0 6
27690: PPUSH
27691: CALL_OW 257
27695: PUSH
27696: LD_INT 15
27698: EQUAL
27699: IFFALSE 27720
// points := [ 10 , 5 , 3 ] ;
27701: LD_ADDR_VAR 0 9
27705: PUSH
27706: LD_INT 10
27708: PUSH
27709: LD_INT 5
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27720: LD_VAR 0 6
27724: PPUSH
27725: CALL_OW 257
27729: PUSH
27730: LD_INT 14
27732: EQUAL
27733: IFFALSE 27754
// points := [ 10 , 0 , 0 ] ;
27735: LD_ADDR_VAR 0 9
27739: PUSH
27740: LD_INT 10
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27754: LD_VAR 0 6
27758: PPUSH
27759: CALL_OW 257
27763: PUSH
27764: LD_INT 11
27766: EQUAL
27767: IFFALSE 27788
// points := [ 30 , 10 , 5 ] ;
27769: LD_ADDR_VAR 0 9
27773: PUSH
27774: LD_INT 30
27776: PUSH
27777: LD_INT 10
27779: PUSH
27780: LD_INT 5
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27788: LD_VAR 0 1
27792: PPUSH
27793: LD_INT 5
27795: PPUSH
27796: CALL_OW 321
27800: PUSH
27801: LD_INT 2
27803: EQUAL
27804: IFFALSE 27821
// bpoints := bpoints * 1.8 ;
27806: LD_ADDR_VAR 0 10
27810: PUSH
27811: LD_VAR 0 10
27815: PUSH
27816: LD_REAL  1.80000000000000E+0000
27819: MUL
27820: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27821: LD_VAR 0 6
27825: PPUSH
27826: CALL_OW 257
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 3
27839: PUSH
27840: LD_INT 4
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: IN
27849: PUSH
27850: LD_VAR 0 1
27854: PPUSH
27855: LD_INT 51
27857: PPUSH
27858: CALL_OW 321
27862: PUSH
27863: LD_INT 2
27865: EQUAL
27866: AND
27867: IFFALSE 27884
// bpoints := bpoints * 1.2 ;
27869: LD_ADDR_VAR 0 10
27873: PUSH
27874: LD_VAR 0 10
27878: PUSH
27879: LD_REAL  1.20000000000000E+0000
27882: MUL
27883: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27884: LD_VAR 0 6
27888: PPUSH
27889: CALL_OW 257
27893: PUSH
27894: LD_INT 5
27896: PUSH
27897: LD_INT 7
27899: PUSH
27900: LD_INT 9
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: IN
27908: PUSH
27909: LD_VAR 0 1
27913: PPUSH
27914: LD_INT 52
27916: PPUSH
27917: CALL_OW 321
27921: PUSH
27922: LD_INT 2
27924: EQUAL
27925: AND
27926: IFFALSE 27943
// bpoints := bpoints * 1.5 ;
27928: LD_ADDR_VAR 0 10
27932: PUSH
27933: LD_VAR 0 10
27937: PUSH
27938: LD_REAL  1.50000000000000E+0000
27941: MUL
27942: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_INT 66
27950: PPUSH
27951: CALL_OW 321
27955: PUSH
27956: LD_INT 2
27958: EQUAL
27959: IFFALSE 27976
// bpoints := bpoints * 1.1 ;
27961: LD_ADDR_VAR 0 10
27965: PUSH
27966: LD_VAR 0 10
27970: PUSH
27971: LD_REAL  1.10000000000000E+0000
27974: MUL
27975: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27976: LD_ADDR_VAR 0 10
27980: PUSH
27981: LD_VAR 0 10
27985: PUSH
27986: LD_VAR 0 6
27990: PPUSH
27991: LD_INT 1
27993: PPUSH
27994: CALL_OW 259
27998: PUSH
27999: LD_REAL  1.15000000000000E+0000
28002: MUL
28003: MUL
28004: ST_TO_ADDR
// end ; unit_vehicle :
28005: GO 28829
28007: LD_INT 2
28009: DOUBLE
28010: EQUAL
28011: IFTRUE 28015
28013: GO 28817
28015: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28016: LD_VAR 0 6
28020: PPUSH
28021: CALL_OW 264
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 42
28031: PUSH
28032: LD_INT 24
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: IN
28040: IFFALSE 28061
// points := [ 25 , 5 , 3 ] ;
28042: LD_ADDR_VAR 0 9
28046: PUSH
28047: LD_INT 25
28049: PUSH
28050: LD_INT 5
28052: PUSH
28053: LD_INT 3
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: LIST
28060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28061: LD_VAR 0 6
28065: PPUSH
28066: CALL_OW 264
28070: PUSH
28071: LD_INT 4
28073: PUSH
28074: LD_INT 43
28076: PUSH
28077: LD_INT 25
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: LIST
28084: IN
28085: IFFALSE 28106
// points := [ 40 , 15 , 5 ] ;
28087: LD_ADDR_VAR 0 9
28091: PUSH
28092: LD_INT 40
28094: PUSH
28095: LD_INT 15
28097: PUSH
28098: LD_INT 5
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28106: LD_VAR 0 6
28110: PPUSH
28111: CALL_OW 264
28115: PUSH
28116: LD_INT 3
28118: PUSH
28119: LD_INT 23
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: IN
28126: IFFALSE 28147
// points := [ 7 , 25 , 8 ] ;
28128: LD_ADDR_VAR 0 9
28132: PUSH
28133: LD_INT 7
28135: PUSH
28136: LD_INT 25
28138: PUSH
28139: LD_INT 8
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28147: LD_VAR 0 6
28151: PPUSH
28152: CALL_OW 264
28156: PUSH
28157: LD_INT 5
28159: PUSH
28160: LD_INT 27
28162: PUSH
28163: LD_INT 44
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: IN
28171: IFFALSE 28192
// points := [ 14 , 50 , 16 ] ;
28173: LD_ADDR_VAR 0 9
28177: PUSH
28178: LD_INT 14
28180: PUSH
28181: LD_INT 50
28183: PUSH
28184: LD_INT 16
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28192: LD_VAR 0 6
28196: PPUSH
28197: CALL_OW 264
28201: PUSH
28202: LD_INT 6
28204: PUSH
28205: LD_INT 46
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: IN
28212: IFFALSE 28233
// points := [ 32 , 120 , 70 ] ;
28214: LD_ADDR_VAR 0 9
28218: PUSH
28219: LD_INT 32
28221: PUSH
28222: LD_INT 120
28224: PUSH
28225: LD_INT 70
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28233: LD_VAR 0 6
28237: PPUSH
28238: CALL_OW 264
28242: PUSH
28243: LD_INT 7
28245: PUSH
28246: LD_INT 28
28248: PUSH
28249: LD_INT 45
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: LIST
28256: IN
28257: IFFALSE 28278
// points := [ 35 , 20 , 45 ] ;
28259: LD_ADDR_VAR 0 9
28263: PUSH
28264: LD_INT 35
28266: PUSH
28267: LD_INT 20
28269: PUSH
28270: LD_INT 45
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28278: LD_VAR 0 6
28282: PPUSH
28283: CALL_OW 264
28287: PUSH
28288: LD_INT 47
28290: PUSH
28291: EMPTY
28292: LIST
28293: IN
28294: IFFALSE 28315
// points := [ 67 , 45 , 75 ] ;
28296: LD_ADDR_VAR 0 9
28300: PUSH
28301: LD_INT 67
28303: PUSH
28304: LD_INT 45
28306: PUSH
28307: LD_INT 75
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: LIST
28314: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28315: LD_VAR 0 6
28319: PPUSH
28320: CALL_OW 264
28324: PUSH
28325: LD_INT 26
28327: PUSH
28328: EMPTY
28329: LIST
28330: IN
28331: IFFALSE 28352
// points := [ 120 , 30 , 80 ] ;
28333: LD_ADDR_VAR 0 9
28337: PUSH
28338: LD_INT 120
28340: PUSH
28341: LD_INT 30
28343: PUSH
28344: LD_INT 80
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28352: LD_VAR 0 6
28356: PPUSH
28357: CALL_OW 264
28361: PUSH
28362: LD_INT 22
28364: PUSH
28365: EMPTY
28366: LIST
28367: IN
28368: IFFALSE 28389
// points := [ 40 , 1 , 1 ] ;
28370: LD_ADDR_VAR 0 9
28374: PUSH
28375: LD_INT 40
28377: PUSH
28378: LD_INT 1
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28389: LD_VAR 0 6
28393: PPUSH
28394: CALL_OW 264
28398: PUSH
28399: LD_INT 29
28401: PUSH
28402: EMPTY
28403: LIST
28404: IN
28405: IFFALSE 28426
// points := [ 70 , 200 , 400 ] ;
28407: LD_ADDR_VAR 0 9
28411: PUSH
28412: LD_INT 70
28414: PUSH
28415: LD_INT 200
28417: PUSH
28418: LD_INT 400
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: LIST
28425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28426: LD_VAR 0 6
28430: PPUSH
28431: CALL_OW 264
28435: PUSH
28436: LD_INT 14
28438: PUSH
28439: LD_INT 53
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: IN
28446: IFFALSE 28467
// points := [ 40 , 10 , 20 ] ;
28448: LD_ADDR_VAR 0 9
28452: PUSH
28453: LD_INT 40
28455: PUSH
28456: LD_INT 10
28458: PUSH
28459: LD_INT 20
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: LIST
28466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28467: LD_VAR 0 6
28471: PPUSH
28472: CALL_OW 264
28476: PUSH
28477: LD_INT 9
28479: PUSH
28480: EMPTY
28481: LIST
28482: IN
28483: IFFALSE 28504
// points := [ 5 , 70 , 20 ] ;
28485: LD_ADDR_VAR 0 9
28489: PUSH
28490: LD_INT 5
28492: PUSH
28493: LD_INT 70
28495: PUSH
28496: LD_INT 20
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28504: LD_VAR 0 6
28508: PPUSH
28509: CALL_OW 264
28513: PUSH
28514: LD_INT 10
28516: PUSH
28517: EMPTY
28518: LIST
28519: IN
28520: IFFALSE 28541
// points := [ 35 , 110 , 70 ] ;
28522: LD_ADDR_VAR 0 9
28526: PUSH
28527: LD_INT 35
28529: PUSH
28530: LD_INT 110
28532: PUSH
28533: LD_INT 70
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28541: LD_VAR 0 6
28545: PPUSH
28546: CALL_OW 265
28550: PUSH
28551: LD_INT 25
28553: EQUAL
28554: IFFALSE 28575
// points := [ 80 , 65 , 100 ] ;
28556: LD_ADDR_VAR 0 9
28560: PUSH
28561: LD_INT 80
28563: PUSH
28564: LD_INT 65
28566: PUSH
28567: LD_INT 100
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28575: LD_VAR 0 6
28579: PPUSH
28580: CALL_OW 263
28584: PUSH
28585: LD_INT 1
28587: EQUAL
28588: IFFALSE 28623
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28590: LD_ADDR_VAR 0 10
28594: PUSH
28595: LD_VAR 0 10
28599: PUSH
28600: LD_VAR 0 6
28604: PPUSH
28605: CALL_OW 311
28609: PPUSH
28610: LD_INT 3
28612: PPUSH
28613: CALL_OW 259
28617: PUSH
28618: LD_INT 4
28620: MUL
28621: MUL
28622: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28623: LD_VAR 0 6
28627: PPUSH
28628: CALL_OW 263
28632: PUSH
28633: LD_INT 2
28635: EQUAL
28636: IFFALSE 28687
// begin j := IsControledBy ( i ) ;
28638: LD_ADDR_VAR 0 7
28642: PUSH
28643: LD_VAR 0 6
28647: PPUSH
28648: CALL_OW 312
28652: ST_TO_ADDR
// if j then
28653: LD_VAR 0 7
28657: IFFALSE 28687
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28659: LD_ADDR_VAR 0 10
28663: PUSH
28664: LD_VAR 0 10
28668: PUSH
28669: LD_VAR 0 7
28673: PPUSH
28674: LD_INT 3
28676: PPUSH
28677: CALL_OW 259
28681: PUSH
28682: LD_INT 3
28684: MUL
28685: MUL
28686: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28687: LD_VAR 0 6
28691: PPUSH
28692: CALL_OW 264
28696: PUSH
28697: LD_INT 5
28699: PUSH
28700: LD_INT 6
28702: PUSH
28703: LD_INT 46
28705: PUSH
28706: LD_INT 44
28708: PUSH
28709: LD_INT 47
28711: PUSH
28712: LD_INT 45
28714: PUSH
28715: LD_INT 28
28717: PUSH
28718: LD_INT 7
28720: PUSH
28721: LD_INT 27
28723: PUSH
28724: LD_INT 29
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: IN
28739: PUSH
28740: LD_VAR 0 1
28744: PPUSH
28745: LD_INT 52
28747: PPUSH
28748: CALL_OW 321
28752: PUSH
28753: LD_INT 2
28755: EQUAL
28756: AND
28757: IFFALSE 28774
// bpoints := bpoints * 1.2 ;
28759: LD_ADDR_VAR 0 10
28763: PUSH
28764: LD_VAR 0 10
28768: PUSH
28769: LD_REAL  1.20000000000000E+0000
28772: MUL
28773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28774: LD_VAR 0 6
28778: PPUSH
28779: CALL_OW 264
28783: PUSH
28784: LD_INT 6
28786: PUSH
28787: LD_INT 46
28789: PUSH
28790: LD_INT 47
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: IN
28798: IFFALSE 28815
// bpoints := bpoints * 1.2 ;
28800: LD_ADDR_VAR 0 10
28804: PUSH
28805: LD_VAR 0 10
28809: PUSH
28810: LD_REAL  1.20000000000000E+0000
28813: MUL
28814: ST_TO_ADDR
// end ; unit_building :
28815: GO 28829
28817: LD_INT 3
28819: DOUBLE
28820: EQUAL
28821: IFTRUE 28825
28823: GO 28828
28825: POP
// ; end ;
28826: GO 28829
28828: POP
// for j = 1 to 3 do
28829: LD_ADDR_VAR 0 7
28833: PUSH
28834: DOUBLE
28835: LD_INT 1
28837: DEC
28838: ST_TO_ADDR
28839: LD_INT 3
28841: PUSH
28842: FOR_TO
28843: IFFALSE 28896
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28845: LD_ADDR_VAR 0 5
28849: PUSH
28850: LD_VAR 0 5
28854: PPUSH
28855: LD_VAR 0 7
28859: PPUSH
28860: LD_VAR 0 5
28864: PUSH
28865: LD_VAR 0 7
28869: ARRAY
28870: PUSH
28871: LD_VAR 0 9
28875: PUSH
28876: LD_VAR 0 7
28880: ARRAY
28881: PUSH
28882: LD_VAR 0 10
28886: MUL
28887: PLUS
28888: PPUSH
28889: CALL_OW 1
28893: ST_TO_ADDR
28894: GO 28842
28896: POP
28897: POP
// end ;
28898: GO 27381
28900: POP
28901: POP
// result := Replace ( result , 4 , tmp ) ;
28902: LD_ADDR_VAR 0 5
28906: PUSH
28907: LD_VAR 0 5
28911: PPUSH
28912: LD_INT 4
28914: PPUSH
28915: LD_VAR 0 8
28919: PPUSH
28920: CALL_OW 1
28924: ST_TO_ADDR
// end ;
28925: LD_VAR 0 5
28929: RET
// export function DangerAtRange ( unit , range ) ; begin
28930: LD_INT 0
28932: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28933: LD_ADDR_VAR 0 3
28937: PUSH
28938: LD_VAR 0 1
28942: PPUSH
28943: CALL_OW 255
28947: PPUSH
28948: LD_VAR 0 1
28952: PPUSH
28953: CALL_OW 250
28957: PPUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 251
28967: PPUSH
28968: LD_VAR 0 2
28972: PPUSH
28973: CALL 27233 0 4
28977: ST_TO_ADDR
// end ;
28978: LD_VAR 0 3
28982: RET
// export function DangerInArea ( side , area ) ; begin
28983: LD_INT 0
28985: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28986: LD_ADDR_VAR 0 3
28990: PUSH
28991: LD_VAR 0 2
28995: PPUSH
28996: LD_INT 81
28998: PUSH
28999: LD_VAR 0 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PPUSH
29008: CALL_OW 70
29012: ST_TO_ADDR
// end ;
29013: LD_VAR 0 3
29017: RET
// export function IsExtension ( b ) ; begin
29018: LD_INT 0
29020: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29021: LD_ADDR_VAR 0 2
29025: PUSH
29026: LD_VAR 0 1
29030: PUSH
29031: LD_INT 23
29033: PUSH
29034: LD_INT 20
29036: PUSH
29037: LD_INT 22
29039: PUSH
29040: LD_INT 17
29042: PUSH
29043: LD_INT 24
29045: PUSH
29046: LD_INT 21
29048: PUSH
29049: LD_INT 19
29051: PUSH
29052: LD_INT 16
29054: PUSH
29055: LD_INT 25
29057: PUSH
29058: LD_INT 18
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: IN
29073: ST_TO_ADDR
// end ;
29074: LD_VAR 0 2
29078: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29079: LD_INT 0
29081: PPUSH
29082: PPUSH
29083: PPUSH
// result := [ ] ;
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: EMPTY
29090: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29091: LD_ADDR_VAR 0 4
29095: PUSH
29096: LD_VAR 0 2
29100: PPUSH
29101: LD_INT 21
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PPUSH
29111: CALL_OW 70
29115: ST_TO_ADDR
// if not tmp then
29116: LD_VAR 0 4
29120: NOT
29121: IFFALSE 29125
// exit ;
29123: GO 29183
// for i in tmp do
29125: LD_ADDR_VAR 0 5
29129: PUSH
29130: LD_VAR 0 4
29134: PUSH
29135: FOR_IN
29136: IFFALSE 29171
// if GetBase ( i ) <> base then
29138: LD_VAR 0 5
29142: PPUSH
29143: CALL_OW 274
29147: PUSH
29148: LD_VAR 0 1
29152: NONEQUAL
29153: IFFALSE 29169
// ComLinkToBase ( base , i ) ;
29155: LD_VAR 0 1
29159: PPUSH
29160: LD_VAR 0 5
29164: PPUSH
29165: CALL_OW 169
29169: GO 29135
29171: POP
29172: POP
// result := tmp ;
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_VAR 0 4
29182: ST_TO_ADDR
// end ;
29183: LD_VAR 0 3
29187: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29188: LD_INT 0
29190: PPUSH
29191: PPUSH
// if BuildingStatus ( b ) = bs_build then
29192: LD_VAR 0 2
29196: PPUSH
29197: CALL_OW 461
29201: PUSH
29202: LD_INT 1
29204: EQUAL
29205: IFFALSE 29265
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29207: LD_VAR 0 1
29211: PPUSH
29212: LD_STRING h
29214: PUSH
29215: LD_VAR 0 2
29219: PPUSH
29220: CALL_OW 250
29224: PUSH
29225: LD_VAR 0 2
29229: PPUSH
29230: CALL_OW 251
29234: PUSH
29235: LD_VAR 0 2
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: PPUSH
29261: CALL_OW 446
// end ;
29265: LD_VAR 0 3
29269: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29270: LD_INT 0
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29278: LD_VAR 0 1
29282: NOT
29283: PUSH
29284: LD_VAR 0 1
29288: PPUSH
29289: CALL_OW 263
29293: PUSH
29294: LD_INT 2
29296: EQUAL
29297: NOT
29298: OR
29299: IFFALSE 29303
// exit ;
29301: GO 29619
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29303: LD_ADDR_VAR 0 6
29307: PUSH
29308: LD_INT 22
29310: PUSH
29311: LD_VAR 0 1
29315: PPUSH
29316: CALL_OW 255
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: LD_INT 30
29330: PUSH
29331: LD_INT 36
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 34
29340: PUSH
29341: LD_INT 31
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PPUSH
29357: CALL_OW 69
29361: ST_TO_ADDR
// if not tmp then
29362: LD_VAR 0 6
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29619
// result := [ ] ;
29371: LD_ADDR_VAR 0 2
29375: PUSH
29376: EMPTY
29377: ST_TO_ADDR
// for i in tmp do
29378: LD_ADDR_VAR 0 3
29382: PUSH
29383: LD_VAR 0 6
29387: PUSH
29388: FOR_IN
29389: IFFALSE 29460
// begin t := UnitsInside ( i ) ;
29391: LD_ADDR_VAR 0 4
29395: PUSH
29396: LD_VAR 0 3
29400: PPUSH
29401: CALL_OW 313
29405: ST_TO_ADDR
// if t then
29406: LD_VAR 0 4
29410: IFFALSE 29458
// for j in t do
29412: LD_ADDR_VAR 0 7
29416: PUSH
29417: LD_VAR 0 4
29421: PUSH
29422: FOR_IN
29423: IFFALSE 29456
// result := Insert ( result , result + 1 , j ) ;
29425: LD_ADDR_VAR 0 2
29429: PUSH
29430: LD_VAR 0 2
29434: PPUSH
29435: LD_VAR 0 2
29439: PUSH
29440: LD_INT 1
29442: PLUS
29443: PPUSH
29444: LD_VAR 0 7
29448: PPUSH
29449: CALL_OW 2
29453: ST_TO_ADDR
29454: GO 29422
29456: POP
29457: POP
// end ;
29458: GO 29388
29460: POP
29461: POP
// if not result then
29462: LD_VAR 0 2
29466: NOT
29467: IFFALSE 29471
// exit ;
29469: GO 29619
// mech := result [ 1 ] ;
29471: LD_ADDR_VAR 0 5
29475: PUSH
29476: LD_VAR 0 2
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: ST_TO_ADDR
// if result > 1 then
29485: LD_VAR 0 2
29489: PUSH
29490: LD_INT 1
29492: GREATER
29493: IFFALSE 29605
// for i = 2 to result do
29495: LD_ADDR_VAR 0 3
29499: PUSH
29500: DOUBLE
29501: LD_INT 2
29503: DEC
29504: ST_TO_ADDR
29505: LD_VAR 0 2
29509: PUSH
29510: FOR_TO
29511: IFFALSE 29603
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29513: LD_ADDR_VAR 0 4
29517: PUSH
29518: LD_VAR 0 2
29522: PUSH
29523: LD_VAR 0 3
29527: ARRAY
29528: PPUSH
29529: LD_INT 3
29531: PPUSH
29532: CALL_OW 259
29536: PUSH
29537: LD_VAR 0 2
29541: PUSH
29542: LD_VAR 0 3
29546: ARRAY
29547: PPUSH
29548: CALL_OW 432
29552: MINUS
29553: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29554: LD_VAR 0 4
29558: PUSH
29559: LD_VAR 0 5
29563: PPUSH
29564: LD_INT 3
29566: PPUSH
29567: CALL_OW 259
29571: PUSH
29572: LD_VAR 0 5
29576: PPUSH
29577: CALL_OW 432
29581: MINUS
29582: GREATEREQUAL
29583: IFFALSE 29601
// mech := result [ i ] ;
29585: LD_ADDR_VAR 0 5
29589: PUSH
29590: LD_VAR 0 2
29594: PUSH
29595: LD_VAR 0 3
29599: ARRAY
29600: ST_TO_ADDR
// end ;
29601: GO 29510
29603: POP
29604: POP
// ComLinkTo ( vehicle , mech ) ;
29605: LD_VAR 0 1
29609: PPUSH
29610: LD_VAR 0 5
29614: PPUSH
29615: CALL_OW 135
// end ;
29619: LD_VAR 0 2
29623: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29624: LD_INT 0
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
// result := [ ] ;
29639: LD_ADDR_VAR 0 7
29643: PUSH
29644: EMPTY
29645: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29646: LD_VAR 0 1
29650: PPUSH
29651: CALL_OW 266
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: IN
29666: NOT
29667: IFFALSE 29671
// exit ;
29669: GO 31302
// if name then
29671: LD_VAR 0 3
29675: IFFALSE 29691
// SetBName ( base_dep , name ) ;
29677: LD_VAR 0 1
29681: PPUSH
29682: LD_VAR 0 3
29686: PPUSH
29687: CALL_OW 500
// base := GetBase ( base_dep ) ;
29691: LD_ADDR_VAR 0 15
29695: PUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 274
29705: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29706: LD_ADDR_VAR 0 16
29710: PUSH
29711: LD_VAR 0 1
29715: PPUSH
29716: CALL_OW 255
29720: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29721: LD_ADDR_VAR 0 17
29725: PUSH
29726: LD_VAR 0 1
29730: PPUSH
29731: CALL_OW 248
29735: ST_TO_ADDR
// if sources then
29736: LD_VAR 0 5
29740: IFFALSE 29787
// for i = 1 to 3 do
29742: LD_ADDR_VAR 0 8
29746: PUSH
29747: DOUBLE
29748: LD_INT 1
29750: DEC
29751: ST_TO_ADDR
29752: LD_INT 3
29754: PUSH
29755: FOR_TO
29756: IFFALSE 29785
// AddResourceType ( base , i , sources [ i ] ) ;
29758: LD_VAR 0 15
29762: PPUSH
29763: LD_VAR 0 8
29767: PPUSH
29768: LD_VAR 0 5
29772: PUSH
29773: LD_VAR 0 8
29777: ARRAY
29778: PPUSH
29779: CALL_OW 276
29783: GO 29755
29785: POP
29786: POP
// buildings := GetBaseBuildings ( base , area ) ;
29787: LD_ADDR_VAR 0 18
29791: PUSH
29792: LD_VAR 0 15
29796: PPUSH
29797: LD_VAR 0 2
29801: PPUSH
29802: CALL 29079 0 2
29806: ST_TO_ADDR
// InitHc ;
29807: CALL_OW 19
// InitUc ;
29811: CALL_OW 18
// uc_side := side ;
29815: LD_ADDR_OWVAR 20
29819: PUSH
29820: LD_VAR 0 16
29824: ST_TO_ADDR
// uc_nation := nation ;
29825: LD_ADDR_OWVAR 21
29829: PUSH
29830: LD_VAR 0 17
29834: ST_TO_ADDR
// if buildings then
29835: LD_VAR 0 18
29839: IFFALSE 31161
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29841: LD_ADDR_VAR 0 19
29845: PUSH
29846: LD_VAR 0 18
29850: PPUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 30
29856: PUSH
29857: LD_INT 29
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 30
29866: PUSH
29867: LD_INT 30
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: PPUSH
29879: CALL_OW 72
29883: ST_TO_ADDR
// if tmp then
29884: LD_VAR 0 19
29888: IFFALSE 29936
// for i in tmp do
29890: LD_ADDR_VAR 0 8
29894: PUSH
29895: LD_VAR 0 19
29899: PUSH
29900: FOR_IN
29901: IFFALSE 29934
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29903: LD_VAR 0 8
29907: PPUSH
29908: CALL_OW 250
29912: PPUSH
29913: LD_VAR 0 8
29917: PPUSH
29918: CALL_OW 251
29922: PPUSH
29923: LD_VAR 0 16
29927: PPUSH
29928: CALL_OW 441
29932: GO 29900
29934: POP
29935: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29936: LD_VAR 0 18
29940: PPUSH
29941: LD_INT 2
29943: PUSH
29944: LD_INT 30
29946: PUSH
29947: LD_INT 32
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 30
29956: PUSH
29957: LD_INT 33
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 72
29973: IFFALSE 30061
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29975: LD_ADDR_VAR 0 8
29979: PUSH
29980: LD_VAR 0 18
29984: PPUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 30
29990: PUSH
29991: LD_INT 32
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 30
30000: PUSH
30001: LD_INT 33
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 72
30017: PUSH
30018: FOR_IN
30019: IFFALSE 30059
// begin if not GetBWeapon ( i ) then
30021: LD_VAR 0 8
30025: PPUSH
30026: CALL_OW 269
30030: NOT
30031: IFFALSE 30057
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30033: LD_VAR 0 8
30037: PPUSH
30038: LD_VAR 0 8
30042: PPUSH
30043: LD_VAR 0 2
30047: PPUSH
30048: CALL 31307 0 2
30052: PPUSH
30053: CALL_OW 431
// end ;
30057: GO 30018
30059: POP
30060: POP
// end ; for i = 1 to personel do
30061: LD_ADDR_VAR 0 8
30065: PUSH
30066: DOUBLE
30067: LD_INT 1
30069: DEC
30070: ST_TO_ADDR
30071: LD_VAR 0 6
30075: PUSH
30076: FOR_TO
30077: IFFALSE 31141
// begin if i > 4 then
30079: LD_VAR 0 8
30083: PUSH
30084: LD_INT 4
30086: GREATER
30087: IFFALSE 30091
// break ;
30089: GO 31141
// case i of 1 :
30091: LD_VAR 0 8
30095: PUSH
30096: LD_INT 1
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30184
30104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30105: LD_ADDR_VAR 0 12
30109: PUSH
30110: LD_VAR 0 18
30114: PPUSH
30115: LD_INT 22
30117: PUSH
30118: LD_VAR 0 16
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 58
30129: PUSH
30130: EMPTY
30131: LIST
30132: PUSH
30133: LD_INT 2
30135: PUSH
30136: LD_INT 30
30138: PUSH
30139: LD_INT 32
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 30
30148: PUSH
30149: LD_INT 4
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 30
30158: PUSH
30159: LD_INT 5
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: PPUSH
30177: CALL_OW 72
30181: ST_TO_ADDR
30182: GO 30406
30184: LD_INT 2
30186: DOUBLE
30187: EQUAL
30188: IFTRUE 30192
30190: GO 30254
30192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30193: LD_ADDR_VAR 0 12
30197: PUSH
30198: LD_VAR 0 18
30202: PPUSH
30203: LD_INT 22
30205: PUSH
30206: LD_VAR 0 16
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: LD_INT 30
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 30
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 72
30251: ST_TO_ADDR
30252: GO 30406
30254: LD_INT 3
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30324
30262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30263: LD_ADDR_VAR 0 12
30267: PUSH
30268: LD_VAR 0 18
30272: PPUSH
30273: LD_INT 22
30275: PUSH
30276: LD_VAR 0 16
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 3
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PPUSH
30317: CALL_OW 72
30321: ST_TO_ADDR
30322: GO 30406
30324: LD_INT 4
30326: DOUBLE
30327: EQUAL
30328: IFTRUE 30332
30330: GO 30405
30332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30333: LD_ADDR_VAR 0 12
30337: PUSH
30338: LD_VAR 0 18
30342: PPUSH
30343: LD_INT 22
30345: PUSH
30346: LD_VAR 0 16
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: LD_INT 6
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 30
30370: PUSH
30371: LD_INT 7
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 30
30380: PUSH
30381: LD_INT 8
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PPUSH
30398: CALL_OW 72
30402: ST_TO_ADDR
30403: GO 30406
30405: POP
// if i = 1 then
30406: LD_VAR 0 8
30410: PUSH
30411: LD_INT 1
30413: EQUAL
30414: IFFALSE 30525
// begin tmp := [ ] ;
30416: LD_ADDR_VAR 0 19
30420: PUSH
30421: EMPTY
30422: ST_TO_ADDR
// for j in f do
30423: LD_ADDR_VAR 0 9
30427: PUSH
30428: LD_VAR 0 12
30432: PUSH
30433: FOR_IN
30434: IFFALSE 30507
// if GetBType ( j ) = b_bunker then
30436: LD_VAR 0 9
30440: PPUSH
30441: CALL_OW 266
30445: PUSH
30446: LD_INT 32
30448: EQUAL
30449: IFFALSE 30476
// tmp := Insert ( tmp , 1 , j ) else
30451: LD_ADDR_VAR 0 19
30455: PUSH
30456: LD_VAR 0 19
30460: PPUSH
30461: LD_INT 1
30463: PPUSH
30464: LD_VAR 0 9
30468: PPUSH
30469: CALL_OW 2
30473: ST_TO_ADDR
30474: GO 30505
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30476: LD_ADDR_VAR 0 19
30480: PUSH
30481: LD_VAR 0 19
30485: PPUSH
30486: LD_VAR 0 19
30490: PUSH
30491: LD_INT 1
30493: PLUS
30494: PPUSH
30495: LD_VAR 0 9
30499: PPUSH
30500: CALL_OW 2
30504: ST_TO_ADDR
30505: GO 30433
30507: POP
30508: POP
// if tmp then
30509: LD_VAR 0 19
30513: IFFALSE 30525
// f := tmp ;
30515: LD_ADDR_VAR 0 12
30519: PUSH
30520: LD_VAR 0 19
30524: ST_TO_ADDR
// end ; x := personel [ i ] ;
30525: LD_ADDR_VAR 0 13
30529: PUSH
30530: LD_VAR 0 6
30534: PUSH
30535: LD_VAR 0 8
30539: ARRAY
30540: ST_TO_ADDR
// if x = - 1 then
30541: LD_VAR 0 13
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: EQUAL
30550: IFFALSE 30759
// begin for j in f do
30552: LD_ADDR_VAR 0 9
30556: PUSH
30557: LD_VAR 0 12
30561: PUSH
30562: FOR_IN
30563: IFFALSE 30755
// repeat InitHc ;
30565: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30569: LD_VAR 0 9
30573: PPUSH
30574: CALL_OW 266
30578: PUSH
30579: LD_INT 5
30581: EQUAL
30582: IFFALSE 30652
// begin if UnitsInside ( j ) < 3 then
30584: LD_VAR 0 9
30588: PPUSH
30589: CALL_OW 313
30593: PUSH
30594: LD_INT 3
30596: LESS
30597: IFFALSE 30633
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30599: LD_INT 0
30601: PPUSH
30602: LD_INT 5
30604: PUSH
30605: LD_INT 8
30607: PUSH
30608: LD_INT 9
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: LIST
30615: PUSH
30616: LD_VAR 0 17
30620: ARRAY
30621: PPUSH
30622: LD_VAR 0 4
30626: PPUSH
30627: CALL_OW 380
30631: GO 30650
// PrepareHuman ( false , i , skill ) ;
30633: LD_INT 0
30635: PPUSH
30636: LD_VAR 0 8
30640: PPUSH
30641: LD_VAR 0 4
30645: PPUSH
30646: CALL_OW 380
// end else
30650: GO 30669
// PrepareHuman ( false , i , skill ) ;
30652: LD_INT 0
30654: PPUSH
30655: LD_VAR 0 8
30659: PPUSH
30660: LD_VAR 0 4
30664: PPUSH
30665: CALL_OW 380
// un := CreateHuman ;
30669: LD_ADDR_VAR 0 14
30673: PUSH
30674: CALL_OW 44
30678: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30679: LD_ADDR_VAR 0 7
30683: PUSH
30684: LD_VAR 0 7
30688: PPUSH
30689: LD_INT 1
30691: PPUSH
30692: LD_VAR 0 14
30696: PPUSH
30697: CALL_OW 2
30701: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30702: LD_VAR 0 14
30706: PPUSH
30707: LD_VAR 0 9
30711: PPUSH
30712: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30716: LD_VAR 0 9
30720: PPUSH
30721: CALL_OW 313
30725: PUSH
30726: LD_INT 6
30728: EQUAL
30729: PUSH
30730: LD_VAR 0 9
30734: PPUSH
30735: CALL_OW 266
30739: PUSH
30740: LD_INT 32
30742: PUSH
30743: LD_INT 31
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: IN
30750: OR
30751: IFFALSE 30565
30753: GO 30562
30755: POP
30756: POP
// end else
30757: GO 31139
// for j = 1 to x do
30759: LD_ADDR_VAR 0 9
30763: PUSH
30764: DOUBLE
30765: LD_INT 1
30767: DEC
30768: ST_TO_ADDR
30769: LD_VAR 0 13
30773: PUSH
30774: FOR_TO
30775: IFFALSE 31137
// begin InitHc ;
30777: CALL_OW 19
// if not f then
30781: LD_VAR 0 12
30785: NOT
30786: IFFALSE 30875
// begin PrepareHuman ( false , i , skill ) ;
30788: LD_INT 0
30790: PPUSH
30791: LD_VAR 0 8
30795: PPUSH
30796: LD_VAR 0 4
30800: PPUSH
30801: CALL_OW 380
// un := CreateHuman ;
30805: LD_ADDR_VAR 0 14
30809: PUSH
30810: CALL_OW 44
30814: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30815: LD_ADDR_VAR 0 7
30819: PUSH
30820: LD_VAR 0 7
30824: PPUSH
30825: LD_INT 1
30827: PPUSH
30828: LD_VAR 0 14
30832: PPUSH
30833: CALL_OW 2
30837: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30838: LD_VAR 0 14
30842: PPUSH
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 250
30852: PPUSH
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 251
30862: PPUSH
30863: LD_INT 10
30865: PPUSH
30866: LD_INT 0
30868: PPUSH
30869: CALL_OW 50
// continue ;
30873: GO 30774
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30875: LD_VAR 0 12
30879: PUSH
30880: LD_INT 1
30882: ARRAY
30883: PPUSH
30884: CALL_OW 313
30888: PUSH
30889: LD_VAR 0 12
30893: PUSH
30894: LD_INT 1
30896: ARRAY
30897: PPUSH
30898: CALL_OW 266
30902: PUSH
30903: LD_INT 32
30905: PUSH
30906: LD_INT 31
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: IN
30913: AND
30914: PUSH
30915: LD_VAR 0 12
30919: PUSH
30920: LD_INT 1
30922: ARRAY
30923: PPUSH
30924: CALL_OW 313
30928: PUSH
30929: LD_INT 6
30931: EQUAL
30932: OR
30933: IFFALSE 30953
// f := Delete ( f , 1 ) ;
30935: LD_ADDR_VAR 0 12
30939: PUSH
30940: LD_VAR 0 12
30944: PPUSH
30945: LD_INT 1
30947: PPUSH
30948: CALL_OW 3
30952: ST_TO_ADDR
// if not f then
30953: LD_VAR 0 12
30957: NOT
30958: IFFALSE 30976
// begin x := x + 2 ;
30960: LD_ADDR_VAR 0 13
30964: PUSH
30965: LD_VAR 0 13
30969: PUSH
30970: LD_INT 2
30972: PLUS
30973: ST_TO_ADDR
// continue ;
30974: GO 30774
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30976: LD_VAR 0 12
30980: PUSH
30981: LD_INT 1
30983: ARRAY
30984: PPUSH
30985: CALL_OW 266
30989: PUSH
30990: LD_INT 5
30992: EQUAL
30993: IFFALSE 31067
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30995: LD_VAR 0 12
30999: PUSH
31000: LD_INT 1
31002: ARRAY
31003: PPUSH
31004: CALL_OW 313
31008: PUSH
31009: LD_INT 3
31011: LESS
31012: IFFALSE 31048
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31014: LD_INT 0
31016: PPUSH
31017: LD_INT 5
31019: PUSH
31020: LD_INT 8
31022: PUSH
31023: LD_INT 9
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: PUSH
31031: LD_VAR 0 17
31035: ARRAY
31036: PPUSH
31037: LD_VAR 0 4
31041: PPUSH
31042: CALL_OW 380
31046: GO 31065
// PrepareHuman ( false , i , skill ) ;
31048: LD_INT 0
31050: PPUSH
31051: LD_VAR 0 8
31055: PPUSH
31056: LD_VAR 0 4
31060: PPUSH
31061: CALL_OW 380
// end else
31065: GO 31084
// PrepareHuman ( false , i , skill ) ;
31067: LD_INT 0
31069: PPUSH
31070: LD_VAR 0 8
31074: PPUSH
31075: LD_VAR 0 4
31079: PPUSH
31080: CALL_OW 380
// un := CreateHuman ;
31084: LD_ADDR_VAR 0 14
31088: PUSH
31089: CALL_OW 44
31093: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31094: LD_ADDR_VAR 0 7
31098: PUSH
31099: LD_VAR 0 7
31103: PPUSH
31104: LD_INT 1
31106: PPUSH
31107: LD_VAR 0 14
31111: PPUSH
31112: CALL_OW 2
31116: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31117: LD_VAR 0 14
31121: PPUSH
31122: LD_VAR 0 12
31126: PUSH
31127: LD_INT 1
31129: ARRAY
31130: PPUSH
31131: CALL_OW 52
// end ;
31135: GO 30774
31137: POP
31138: POP
// end ;
31139: GO 30076
31141: POP
31142: POP
// result := result ^ buildings ;
31143: LD_ADDR_VAR 0 7
31147: PUSH
31148: LD_VAR 0 7
31152: PUSH
31153: LD_VAR 0 18
31157: ADD
31158: ST_TO_ADDR
// end else
31159: GO 31302
// begin for i = 1 to personel do
31161: LD_ADDR_VAR 0 8
31165: PUSH
31166: DOUBLE
31167: LD_INT 1
31169: DEC
31170: ST_TO_ADDR
31171: LD_VAR 0 6
31175: PUSH
31176: FOR_TO
31177: IFFALSE 31300
// begin if i > 4 then
31179: LD_VAR 0 8
31183: PUSH
31184: LD_INT 4
31186: GREATER
31187: IFFALSE 31191
// break ;
31189: GO 31300
// x := personel [ i ] ;
31191: LD_ADDR_VAR 0 13
31195: PUSH
31196: LD_VAR 0 6
31200: PUSH
31201: LD_VAR 0 8
31205: ARRAY
31206: ST_TO_ADDR
// if x = - 1 then
31207: LD_VAR 0 13
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: EQUAL
31216: IFFALSE 31220
// continue ;
31218: GO 31176
// PrepareHuman ( false , i , skill ) ;
31220: LD_INT 0
31222: PPUSH
31223: LD_VAR 0 8
31227: PPUSH
31228: LD_VAR 0 4
31232: PPUSH
31233: CALL_OW 380
// un := CreateHuman ;
31237: LD_ADDR_VAR 0 14
31241: PUSH
31242: CALL_OW 44
31246: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31247: LD_VAR 0 14
31251: PPUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: CALL_OW 250
31261: PPUSH
31262: LD_VAR 0 1
31266: PPUSH
31267: CALL_OW 251
31271: PPUSH
31272: LD_INT 10
31274: PPUSH
31275: LD_INT 0
31277: PPUSH
31278: CALL_OW 50
// result := result ^ un ;
31282: LD_ADDR_VAR 0 7
31286: PUSH
31287: LD_VAR 0 7
31291: PUSH
31292: LD_VAR 0 14
31296: ADD
31297: ST_TO_ADDR
// end ;
31298: GO 31176
31300: POP
31301: POP
// end ; end ;
31302: LD_VAR 0 7
31306: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31307: LD_INT 0
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
// result := false ;
31325: LD_ADDR_VAR 0 3
31329: PUSH
31330: LD_INT 0
31332: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31333: LD_VAR 0 1
31337: NOT
31338: PUSH
31339: LD_VAR 0 1
31343: PPUSH
31344: CALL_OW 266
31348: PUSH
31349: LD_INT 32
31351: PUSH
31352: LD_INT 33
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: IN
31359: NOT
31360: OR
31361: IFFALSE 31365
// exit ;
31363: GO 32501
// nat := GetNation ( tower ) ;
31365: LD_ADDR_VAR 0 12
31369: PUSH
31370: LD_VAR 0 1
31374: PPUSH
31375: CALL_OW 248
31379: ST_TO_ADDR
// side := GetSide ( tower ) ;
31380: LD_ADDR_VAR 0 16
31384: PUSH
31385: LD_VAR 0 1
31389: PPUSH
31390: CALL_OW 255
31394: ST_TO_ADDR
// x := GetX ( tower ) ;
31395: LD_ADDR_VAR 0 10
31399: PUSH
31400: LD_VAR 0 1
31404: PPUSH
31405: CALL_OW 250
31409: ST_TO_ADDR
// y := GetY ( tower ) ;
31410: LD_ADDR_VAR 0 11
31414: PUSH
31415: LD_VAR 0 1
31419: PPUSH
31420: CALL_OW 251
31424: ST_TO_ADDR
// if not x or not y then
31425: LD_VAR 0 10
31429: NOT
31430: PUSH
31431: LD_VAR 0 11
31435: NOT
31436: OR
31437: IFFALSE 31441
// exit ;
31439: GO 32501
// weapon := 0 ;
31441: LD_ADDR_VAR 0 18
31445: PUSH
31446: LD_INT 0
31448: ST_TO_ADDR
// fac_list := [ ] ;
31449: LD_ADDR_VAR 0 17
31453: PUSH
31454: EMPTY
31455: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31456: LD_ADDR_VAR 0 6
31460: PUSH
31461: LD_VAR 0 1
31465: PPUSH
31466: CALL_OW 274
31470: PPUSH
31471: LD_VAR 0 2
31475: PPUSH
31476: CALL 29079 0 2
31480: PPUSH
31481: LD_INT 30
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PPUSH
31491: CALL_OW 72
31495: ST_TO_ADDR
// if not factories then
31496: LD_VAR 0 6
31500: NOT
31501: IFFALSE 31505
// exit ;
31503: GO 32501
// for i in factories do
31505: LD_ADDR_VAR 0 8
31509: PUSH
31510: LD_VAR 0 6
31514: PUSH
31515: FOR_IN
31516: IFFALSE 31541
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31518: LD_ADDR_VAR 0 17
31522: PUSH
31523: LD_VAR 0 17
31527: PUSH
31528: LD_VAR 0 8
31532: PPUSH
31533: CALL_OW 478
31537: UNION
31538: ST_TO_ADDR
31539: GO 31515
31541: POP
31542: POP
// if not fac_list then
31543: LD_VAR 0 17
31547: NOT
31548: IFFALSE 31552
// exit ;
31550: GO 32501
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31552: LD_ADDR_VAR 0 5
31556: PUSH
31557: LD_INT 4
31559: PUSH
31560: LD_INT 5
31562: PUSH
31563: LD_INT 9
31565: PUSH
31566: LD_INT 10
31568: PUSH
31569: LD_INT 6
31571: PUSH
31572: LD_INT 7
31574: PUSH
31575: LD_INT 11
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 27
31589: PUSH
31590: LD_INT 28
31592: PUSH
31593: LD_INT 26
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 43
31607: PUSH
31608: LD_INT 44
31610: PUSH
31611: LD_INT 46
31613: PUSH
31614: LD_INT 45
31616: PUSH
31617: LD_INT 47
31619: PUSH
31620: LD_INT 49
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: PUSH
31636: LD_VAR 0 12
31640: ARRAY
31641: ST_TO_ADDR
// for i in list do
31642: LD_ADDR_VAR 0 8
31646: PUSH
31647: LD_VAR 0 5
31651: PUSH
31652: FOR_IN
31653: IFFALSE 31686
// if not i in fac_list then
31655: LD_VAR 0 8
31659: PUSH
31660: LD_VAR 0 17
31664: IN
31665: NOT
31666: IFFALSE 31684
// list := list diff i ;
31668: LD_ADDR_VAR 0 5
31672: PUSH
31673: LD_VAR 0 5
31677: PUSH
31678: LD_VAR 0 8
31682: DIFF
31683: ST_TO_ADDR
31684: GO 31652
31686: POP
31687: POP
// if not list then
31688: LD_VAR 0 5
31692: NOT
31693: IFFALSE 31697
// exit ;
31695: GO 32501
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31697: LD_VAR 0 12
31701: PUSH
31702: LD_INT 3
31704: EQUAL
31705: PUSH
31706: LD_INT 49
31708: PUSH
31709: LD_VAR 0 5
31713: IN
31714: AND
31715: PUSH
31716: LD_INT 31
31718: PPUSH
31719: LD_VAR 0 16
31723: PPUSH
31724: CALL_OW 321
31728: PUSH
31729: LD_INT 2
31731: EQUAL
31732: AND
31733: IFFALSE 31793
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31735: LD_INT 22
31737: PUSH
31738: LD_VAR 0 16
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 35
31749: PUSH
31750: LD_INT 49
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 91
31759: PUSH
31760: LD_VAR 0 1
31764: PUSH
31765: LD_INT 10
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: PPUSH
31778: CALL_OW 69
31782: NOT
31783: IFFALSE 31793
// weapon := ru_time_lapser ;
31785: LD_ADDR_VAR 0 18
31789: PUSH
31790: LD_INT 49
31792: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31793: LD_VAR 0 12
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: IN
31808: PUSH
31809: LD_INT 11
31811: PUSH
31812: LD_VAR 0 5
31816: IN
31817: PUSH
31818: LD_INT 30
31820: PUSH
31821: LD_VAR 0 5
31825: IN
31826: OR
31827: AND
31828: PUSH
31829: LD_INT 6
31831: PPUSH
31832: LD_VAR 0 16
31836: PPUSH
31837: CALL_OW 321
31841: PUSH
31842: LD_INT 2
31844: EQUAL
31845: AND
31846: IFFALSE 32011
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31848: LD_INT 22
31850: PUSH
31851: LD_VAR 0 16
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: LD_INT 35
31865: PUSH
31866: LD_INT 11
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 35
31875: PUSH
31876: LD_INT 30
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 91
31890: PUSH
31891: LD_VAR 0 1
31895: PUSH
31896: LD_INT 18
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: PPUSH
31909: CALL_OW 69
31913: NOT
31914: PUSH
31915: LD_INT 22
31917: PUSH
31918: LD_VAR 0 16
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 30
31932: PUSH
31933: LD_INT 32
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 30
31942: PUSH
31943: LD_INT 33
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 91
31957: PUSH
31958: LD_VAR 0 1
31962: PUSH
31963: LD_INT 12
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: PPUSH
31979: CALL_OW 69
31983: PUSH
31984: LD_INT 2
31986: GREATER
31987: AND
31988: IFFALSE 32011
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31990: LD_ADDR_VAR 0 18
31994: PUSH
31995: LD_INT 11
31997: PUSH
31998: LD_INT 30
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_VAR 0 12
32009: ARRAY
32010: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32011: LD_VAR 0 18
32015: NOT
32016: PUSH
32017: LD_INT 40
32019: PPUSH
32020: LD_VAR 0 16
32024: PPUSH
32025: CALL_OW 321
32029: PUSH
32030: LD_INT 2
32032: EQUAL
32033: AND
32034: PUSH
32035: LD_INT 7
32037: PUSH
32038: LD_VAR 0 5
32042: IN
32043: PUSH
32044: LD_INT 28
32046: PUSH
32047: LD_VAR 0 5
32051: IN
32052: OR
32053: PUSH
32054: LD_INT 45
32056: PUSH
32057: LD_VAR 0 5
32061: IN
32062: OR
32063: AND
32064: IFFALSE 32318
// begin hex := GetHexInfo ( x , y ) ;
32066: LD_ADDR_VAR 0 4
32070: PUSH
32071: LD_VAR 0 10
32075: PPUSH
32076: LD_VAR 0 11
32080: PPUSH
32081: CALL_OW 546
32085: ST_TO_ADDR
// if hex [ 1 ] then
32086: LD_VAR 0 4
32090: PUSH
32091: LD_INT 1
32093: ARRAY
32094: IFFALSE 32098
// exit ;
32096: GO 32501
// height := hex [ 2 ] ;
32098: LD_ADDR_VAR 0 15
32102: PUSH
32103: LD_VAR 0 4
32107: PUSH
32108: LD_INT 2
32110: ARRAY
32111: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32112: LD_ADDR_VAR 0 14
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: LD_INT 5
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: ST_TO_ADDR
// for i in tmp do
32135: LD_ADDR_VAR 0 8
32139: PUSH
32140: LD_VAR 0 14
32144: PUSH
32145: FOR_IN
32146: IFFALSE 32316
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32148: LD_ADDR_VAR 0 9
32152: PUSH
32153: LD_VAR 0 10
32157: PPUSH
32158: LD_VAR 0 8
32162: PPUSH
32163: LD_INT 5
32165: PPUSH
32166: CALL_OW 272
32170: PUSH
32171: LD_VAR 0 11
32175: PPUSH
32176: LD_VAR 0 8
32180: PPUSH
32181: LD_INT 5
32183: PPUSH
32184: CALL_OW 273
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32193: LD_VAR 0 9
32197: PUSH
32198: LD_INT 1
32200: ARRAY
32201: PPUSH
32202: LD_VAR 0 9
32206: PUSH
32207: LD_INT 2
32209: ARRAY
32210: PPUSH
32211: CALL_OW 488
32215: IFFALSE 32314
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32217: LD_ADDR_VAR 0 4
32221: PUSH
32222: LD_VAR 0 9
32226: PUSH
32227: LD_INT 1
32229: ARRAY
32230: PPUSH
32231: LD_VAR 0 9
32235: PUSH
32236: LD_INT 2
32238: ARRAY
32239: PPUSH
32240: CALL_OW 546
32244: ST_TO_ADDR
// if hex [ 1 ] then
32245: LD_VAR 0 4
32249: PUSH
32250: LD_INT 1
32252: ARRAY
32253: IFFALSE 32257
// continue ;
32255: GO 32145
// h := hex [ 2 ] ;
32257: LD_ADDR_VAR 0 13
32261: PUSH
32262: LD_VAR 0 4
32266: PUSH
32267: LD_INT 2
32269: ARRAY
32270: ST_TO_ADDR
// if h + 7 < height then
32271: LD_VAR 0 13
32275: PUSH
32276: LD_INT 7
32278: PLUS
32279: PUSH
32280: LD_VAR 0 15
32284: LESS
32285: IFFALSE 32314
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32287: LD_ADDR_VAR 0 18
32291: PUSH
32292: LD_INT 7
32294: PUSH
32295: LD_INT 28
32297: PUSH
32298: LD_INT 45
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: LIST
32305: PUSH
32306: LD_VAR 0 12
32310: ARRAY
32311: ST_TO_ADDR
// break ;
32312: GO 32316
// end ; end ; end ;
32314: GO 32145
32316: POP
32317: POP
// end ; if not weapon then
32318: LD_VAR 0 18
32322: NOT
32323: IFFALSE 32383
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32325: LD_ADDR_VAR 0 5
32329: PUSH
32330: LD_VAR 0 5
32334: PUSH
32335: LD_INT 11
32337: PUSH
32338: LD_INT 30
32340: PUSH
32341: LD_INT 49
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: DIFF
32349: ST_TO_ADDR
// if not list then
32350: LD_VAR 0 5
32354: NOT
32355: IFFALSE 32359
// exit ;
32357: GO 32501
// weapon := list [ rand ( 1 , list ) ] ;
32359: LD_ADDR_VAR 0 18
32363: PUSH
32364: LD_VAR 0 5
32368: PUSH
32369: LD_INT 1
32371: PPUSH
32372: LD_VAR 0 5
32376: PPUSH
32377: CALL_OW 12
32381: ARRAY
32382: ST_TO_ADDR
// end ; if weapon then
32383: LD_VAR 0 18
32387: IFFALSE 32501
// begin tmp := CostOfWeapon ( weapon ) ;
32389: LD_ADDR_VAR 0 14
32393: PUSH
32394: LD_VAR 0 18
32398: PPUSH
32399: CALL_OW 451
32403: ST_TO_ADDR
// j := GetBase ( tower ) ;
32404: LD_ADDR_VAR 0 9
32408: PUSH
32409: LD_VAR 0 1
32413: PPUSH
32414: CALL_OW 274
32418: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32419: LD_VAR 0 9
32423: PPUSH
32424: LD_INT 1
32426: PPUSH
32427: CALL_OW 275
32431: PUSH
32432: LD_VAR 0 14
32436: PUSH
32437: LD_INT 1
32439: ARRAY
32440: GREATEREQUAL
32441: PUSH
32442: LD_VAR 0 9
32446: PPUSH
32447: LD_INT 2
32449: PPUSH
32450: CALL_OW 275
32454: PUSH
32455: LD_VAR 0 14
32459: PUSH
32460: LD_INT 2
32462: ARRAY
32463: GREATEREQUAL
32464: AND
32465: PUSH
32466: LD_VAR 0 9
32470: PPUSH
32471: LD_INT 3
32473: PPUSH
32474: CALL_OW 275
32478: PUSH
32479: LD_VAR 0 14
32483: PUSH
32484: LD_INT 3
32486: ARRAY
32487: GREATEREQUAL
32488: AND
32489: IFFALSE 32501
// result := weapon ;
32491: LD_ADDR_VAR 0 3
32495: PUSH
32496: LD_VAR 0 18
32500: ST_TO_ADDR
// end ; end ;
32501: LD_VAR 0 3
32505: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32506: LD_INT 0
32508: PPUSH
32509: PPUSH
// result := true ;
32510: LD_ADDR_VAR 0 3
32514: PUSH
32515: LD_INT 1
32517: ST_TO_ADDR
// if array1 = array2 then
32518: LD_VAR 0 1
32522: PUSH
32523: LD_VAR 0 2
32527: EQUAL
32528: IFFALSE 32588
// begin for i = 1 to array1 do
32530: LD_ADDR_VAR 0 4
32534: PUSH
32535: DOUBLE
32536: LD_INT 1
32538: DEC
32539: ST_TO_ADDR
32540: LD_VAR 0 1
32544: PUSH
32545: FOR_TO
32546: IFFALSE 32584
// if array1 [ i ] <> array2 [ i ] then
32548: LD_VAR 0 1
32552: PUSH
32553: LD_VAR 0 4
32557: ARRAY
32558: PUSH
32559: LD_VAR 0 2
32563: PUSH
32564: LD_VAR 0 4
32568: ARRAY
32569: NONEQUAL
32570: IFFALSE 32582
// begin result := false ;
32572: LD_ADDR_VAR 0 3
32576: PUSH
32577: LD_INT 0
32579: ST_TO_ADDR
// break ;
32580: GO 32584
// end ;
32582: GO 32545
32584: POP
32585: POP
// end else
32586: GO 32596
// result := false ;
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: LD_INT 0
32595: ST_TO_ADDR
// end ;
32596: LD_VAR 0 3
32600: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32601: LD_INT 0
32603: PPUSH
32604: PPUSH
32605: PPUSH
// pom := GetBase ( fac ) ;
32606: LD_ADDR_VAR 0 5
32610: PUSH
32611: LD_VAR 0 1
32615: PPUSH
32616: CALL_OW 274
32620: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32621: LD_ADDR_VAR 0 4
32625: PUSH
32626: LD_VAR 0 2
32630: PUSH
32631: LD_INT 1
32633: ARRAY
32634: PPUSH
32635: LD_VAR 0 2
32639: PUSH
32640: LD_INT 2
32642: ARRAY
32643: PPUSH
32644: LD_VAR 0 2
32648: PUSH
32649: LD_INT 3
32651: ARRAY
32652: PPUSH
32653: LD_VAR 0 2
32657: PUSH
32658: LD_INT 4
32660: ARRAY
32661: PPUSH
32662: CALL_OW 449
32666: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32667: LD_ADDR_VAR 0 3
32671: PUSH
32672: LD_VAR 0 5
32676: PPUSH
32677: LD_INT 1
32679: PPUSH
32680: CALL_OW 275
32684: PUSH
32685: LD_VAR 0 4
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: GREATEREQUAL
32694: PUSH
32695: LD_VAR 0 5
32699: PPUSH
32700: LD_INT 2
32702: PPUSH
32703: CALL_OW 275
32707: PUSH
32708: LD_VAR 0 4
32712: PUSH
32713: LD_INT 2
32715: ARRAY
32716: GREATEREQUAL
32717: AND
32718: PUSH
32719: LD_VAR 0 5
32723: PPUSH
32724: LD_INT 3
32726: PPUSH
32727: CALL_OW 275
32731: PUSH
32732: LD_VAR 0 4
32736: PUSH
32737: LD_INT 3
32739: ARRAY
32740: GREATEREQUAL
32741: AND
32742: ST_TO_ADDR
// end ;
32743: LD_VAR 0 3
32747: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32748: LD_INT 0
32750: PPUSH
32751: PPUSH
32752: PPUSH
32753: PPUSH
// pom := GetBase ( building ) ;
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_VAR 0 1
32763: PPUSH
32764: CALL_OW 274
32768: ST_TO_ADDR
// if not pom then
32769: LD_VAR 0 3
32773: NOT
32774: IFFALSE 32778
// exit ;
32776: GO 32948
// btype := GetBType ( building ) ;
32778: LD_ADDR_VAR 0 5
32782: PUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 266
32792: ST_TO_ADDR
// if btype = b_armoury then
32793: LD_VAR 0 5
32797: PUSH
32798: LD_INT 4
32800: EQUAL
32801: IFFALSE 32811
// btype := b_barracks ;
32803: LD_ADDR_VAR 0 5
32807: PUSH
32808: LD_INT 5
32810: ST_TO_ADDR
// if btype = b_depot then
32811: LD_VAR 0 5
32815: PUSH
32816: LD_INT 0
32818: EQUAL
32819: IFFALSE 32829
// btype := b_warehouse ;
32821: LD_ADDR_VAR 0 5
32825: PUSH
32826: LD_INT 1
32828: ST_TO_ADDR
// if btype = b_workshop then
32829: LD_VAR 0 5
32833: PUSH
32834: LD_INT 2
32836: EQUAL
32837: IFFALSE 32847
// btype := b_factory ;
32839: LD_ADDR_VAR 0 5
32843: PUSH
32844: LD_INT 3
32846: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32847: LD_ADDR_VAR 0 4
32851: PUSH
32852: LD_VAR 0 5
32856: PPUSH
32857: LD_VAR 0 1
32861: PPUSH
32862: CALL_OW 248
32866: PPUSH
32867: CALL_OW 450
32871: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32872: LD_ADDR_VAR 0 2
32876: PUSH
32877: LD_VAR 0 3
32881: PPUSH
32882: LD_INT 1
32884: PPUSH
32885: CALL_OW 275
32889: PUSH
32890: LD_VAR 0 4
32894: PUSH
32895: LD_INT 1
32897: ARRAY
32898: GREATEREQUAL
32899: PUSH
32900: LD_VAR 0 3
32904: PPUSH
32905: LD_INT 2
32907: PPUSH
32908: CALL_OW 275
32912: PUSH
32913: LD_VAR 0 4
32917: PUSH
32918: LD_INT 2
32920: ARRAY
32921: GREATEREQUAL
32922: AND
32923: PUSH
32924: LD_VAR 0 3
32928: PPUSH
32929: LD_INT 3
32931: PPUSH
32932: CALL_OW 275
32936: PUSH
32937: LD_VAR 0 4
32941: PUSH
32942: LD_INT 3
32944: ARRAY
32945: GREATEREQUAL
32946: AND
32947: ST_TO_ADDR
// end ;
32948: LD_VAR 0 2
32952: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32953: LD_INT 0
32955: PPUSH
32956: PPUSH
32957: PPUSH
// pom := GetBase ( building ) ;
32958: LD_ADDR_VAR 0 4
32962: PUSH
32963: LD_VAR 0 1
32967: PPUSH
32968: CALL_OW 274
32972: ST_TO_ADDR
// if not pom then
32973: LD_VAR 0 4
32977: NOT
32978: IFFALSE 32982
// exit ;
32980: GO 33083
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32982: LD_ADDR_VAR 0 5
32986: PUSH
32987: LD_VAR 0 2
32991: PPUSH
32992: LD_VAR 0 1
32996: PPUSH
32997: CALL_OW 248
33001: PPUSH
33002: CALL_OW 450
33006: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33007: LD_ADDR_VAR 0 3
33011: PUSH
33012: LD_VAR 0 4
33016: PPUSH
33017: LD_INT 1
33019: PPUSH
33020: CALL_OW 275
33024: PUSH
33025: LD_VAR 0 5
33029: PUSH
33030: LD_INT 1
33032: ARRAY
33033: GREATEREQUAL
33034: PUSH
33035: LD_VAR 0 4
33039: PPUSH
33040: LD_INT 2
33042: PPUSH
33043: CALL_OW 275
33047: PUSH
33048: LD_VAR 0 5
33052: PUSH
33053: LD_INT 2
33055: ARRAY
33056: GREATEREQUAL
33057: AND
33058: PUSH
33059: LD_VAR 0 4
33063: PPUSH
33064: LD_INT 3
33066: PPUSH
33067: CALL_OW 275
33071: PUSH
33072: LD_VAR 0 5
33076: PUSH
33077: LD_INT 3
33079: ARRAY
33080: GREATEREQUAL
33081: AND
33082: ST_TO_ADDR
// end ;
33083: LD_VAR 0 3
33087: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33088: LD_INT 0
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
33094: PPUSH
33095: PPUSH
33096: PPUSH
33097: PPUSH
33098: PPUSH
33099: PPUSH
// result := false ;
33100: LD_ADDR_VAR 0 6
33104: PUSH
33105: LD_INT 0
33107: ST_TO_ADDR
// if not base or not btype or not x or not y then
33108: LD_VAR 0 1
33112: NOT
33113: PUSH
33114: LD_VAR 0 2
33118: NOT
33119: OR
33120: PUSH
33121: LD_VAR 0 3
33125: NOT
33126: OR
33127: PUSH
33128: LD_VAR 0 4
33132: NOT
33133: OR
33134: IFFALSE 33138
// exit ;
33136: GO 33747
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33138: LD_ADDR_VAR 0 12
33142: PUSH
33143: LD_VAR 0 2
33147: PPUSH
33148: LD_VAR 0 3
33152: PPUSH
33153: LD_VAR 0 4
33157: PPUSH
33158: LD_VAR 0 5
33162: PPUSH
33163: LD_VAR 0 1
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: PPUSH
33172: CALL_OW 248
33176: PPUSH
33177: LD_INT 0
33179: PPUSH
33180: CALL 34584 0 6
33184: ST_TO_ADDR
// if not hexes then
33185: LD_VAR 0 12
33189: NOT
33190: IFFALSE 33194
// exit ;
33192: GO 33747
// for i = 1 to hexes do
33194: LD_ADDR_VAR 0 7
33198: PUSH
33199: DOUBLE
33200: LD_INT 1
33202: DEC
33203: ST_TO_ADDR
33204: LD_VAR 0 12
33208: PUSH
33209: FOR_TO
33210: IFFALSE 33745
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33212: LD_ADDR_VAR 0 11
33216: PUSH
33217: LD_VAR 0 12
33221: PUSH
33222: LD_VAR 0 7
33226: ARRAY
33227: PUSH
33228: LD_INT 1
33230: ARRAY
33231: PPUSH
33232: LD_VAR 0 12
33236: PUSH
33237: LD_VAR 0 7
33241: ARRAY
33242: PUSH
33243: LD_INT 2
33245: ARRAY
33246: PPUSH
33247: CALL_OW 428
33251: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33252: LD_VAR 0 12
33256: PUSH
33257: LD_VAR 0 7
33261: ARRAY
33262: PUSH
33263: LD_INT 1
33265: ARRAY
33266: PPUSH
33267: LD_VAR 0 12
33271: PUSH
33272: LD_VAR 0 7
33276: ARRAY
33277: PUSH
33278: LD_INT 2
33280: ARRAY
33281: PPUSH
33282: CALL_OW 351
33286: PUSH
33287: LD_VAR 0 12
33291: PUSH
33292: LD_VAR 0 7
33296: ARRAY
33297: PUSH
33298: LD_INT 1
33300: ARRAY
33301: PPUSH
33302: LD_VAR 0 12
33306: PUSH
33307: LD_VAR 0 7
33311: ARRAY
33312: PUSH
33313: LD_INT 2
33315: ARRAY
33316: PPUSH
33317: CALL_OW 488
33321: NOT
33322: OR
33323: PUSH
33324: LD_VAR 0 11
33328: PPUSH
33329: CALL_OW 247
33333: PUSH
33334: LD_INT 3
33336: EQUAL
33337: OR
33338: IFFALSE 33344
// exit ;
33340: POP
33341: POP
33342: GO 33747
// if not tmp or not tmp in base then
33344: LD_VAR 0 11
33348: NOT
33349: PUSH
33350: LD_VAR 0 11
33354: PUSH
33355: LD_VAR 0 1
33359: IN
33360: NOT
33361: OR
33362: IFFALSE 33366
// continue ;
33364: GO 33209
// result := true ;
33366: LD_ADDR_VAR 0 6
33370: PUSH
33371: LD_INT 1
33373: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33374: LD_ADDR_VAR 0 15
33378: PUSH
33379: LD_VAR 0 1
33383: PPUSH
33384: LD_INT 22
33386: PUSH
33387: LD_VAR 0 11
33391: PPUSH
33392: CALL_OW 255
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: PUSH
33404: LD_INT 30
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 30
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PPUSH
33433: CALL_OW 72
33437: ST_TO_ADDR
// if dep then
33438: LD_VAR 0 15
33442: IFFALSE 33578
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33444: LD_ADDR_VAR 0 14
33448: PUSH
33449: LD_VAR 0 15
33453: PUSH
33454: LD_INT 1
33456: ARRAY
33457: PPUSH
33458: CALL_OW 250
33462: PPUSH
33463: LD_VAR 0 15
33467: PUSH
33468: LD_INT 1
33470: ARRAY
33471: PPUSH
33472: CALL_OW 254
33476: PPUSH
33477: LD_INT 5
33479: PPUSH
33480: CALL_OW 272
33484: PUSH
33485: LD_VAR 0 15
33489: PUSH
33490: LD_INT 1
33492: ARRAY
33493: PPUSH
33494: CALL_OW 251
33498: PPUSH
33499: LD_VAR 0 15
33503: PUSH
33504: LD_INT 1
33506: ARRAY
33507: PPUSH
33508: CALL_OW 254
33512: PPUSH
33513: LD_INT 5
33515: PPUSH
33516: CALL_OW 273
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33525: LD_VAR 0 14
33529: PUSH
33530: LD_INT 1
33532: ARRAY
33533: PPUSH
33534: LD_VAR 0 14
33538: PUSH
33539: LD_INT 2
33541: ARRAY
33542: PPUSH
33543: CALL_OW 488
33547: IFFALSE 33578
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33549: LD_VAR 0 11
33553: PPUSH
33554: LD_VAR 0 14
33558: PUSH
33559: LD_INT 1
33561: ARRAY
33562: PPUSH
33563: LD_VAR 0 14
33567: PUSH
33568: LD_INT 2
33570: ARRAY
33571: PPUSH
33572: CALL_OW 111
// continue ;
33576: GO 33209
// end ; end ; r := GetDir ( tmp ) ;
33578: LD_ADDR_VAR 0 13
33582: PUSH
33583: LD_VAR 0 11
33587: PPUSH
33588: CALL_OW 254
33592: ST_TO_ADDR
// if r = 5 then
33593: LD_VAR 0 13
33597: PUSH
33598: LD_INT 5
33600: EQUAL
33601: IFFALSE 33611
// r := 0 ;
33603: LD_ADDR_VAR 0 13
33607: PUSH
33608: LD_INT 0
33610: ST_TO_ADDR
// for j = r to 5 do
33611: LD_ADDR_VAR 0 8
33615: PUSH
33616: DOUBLE
33617: LD_VAR 0 13
33621: DEC
33622: ST_TO_ADDR
33623: LD_INT 5
33625: PUSH
33626: FOR_TO
33627: IFFALSE 33741
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33629: LD_ADDR_VAR 0 9
33633: PUSH
33634: LD_VAR 0 11
33638: PPUSH
33639: CALL_OW 250
33643: PPUSH
33644: LD_VAR 0 8
33648: PPUSH
33649: LD_INT 2
33651: PPUSH
33652: CALL_OW 272
33656: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33657: LD_ADDR_VAR 0 10
33661: PUSH
33662: LD_VAR 0 11
33666: PPUSH
33667: CALL_OW 251
33671: PPUSH
33672: LD_VAR 0 8
33676: PPUSH
33677: LD_INT 2
33679: PPUSH
33680: CALL_OW 273
33684: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33685: LD_VAR 0 9
33689: PPUSH
33690: LD_VAR 0 10
33694: PPUSH
33695: CALL_OW 488
33699: PUSH
33700: LD_VAR 0 9
33704: PPUSH
33705: LD_VAR 0 10
33709: PPUSH
33710: CALL_OW 428
33714: NOT
33715: AND
33716: IFFALSE 33739
// begin ComMoveXY ( tmp , _x , _y ) ;
33718: LD_VAR 0 11
33722: PPUSH
33723: LD_VAR 0 9
33727: PPUSH
33728: LD_VAR 0 10
33732: PPUSH
33733: CALL_OW 111
// break ;
33737: GO 33741
// end ; end ;
33739: GO 33626
33741: POP
33742: POP
// end ;
33743: GO 33209
33745: POP
33746: POP
// end ;
33747: LD_VAR 0 6
33751: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33752: LD_INT 0
33754: PPUSH
33755: PPUSH
33756: PPUSH
33757: PPUSH
33758: PPUSH
33759: PPUSH
33760: PPUSH
33761: PPUSH
33762: PPUSH
33763: PPUSH
// result := false ;
33764: LD_ADDR_VAR 0 6
33768: PUSH
33769: LD_INT 0
33771: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33772: LD_VAR 0 1
33776: NOT
33777: PUSH
33778: LD_VAR 0 1
33782: PPUSH
33783: CALL_OW 266
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: IN
33798: NOT
33799: OR
33800: PUSH
33801: LD_VAR 0 2
33805: NOT
33806: OR
33807: PUSH
33808: LD_VAR 0 5
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: LD_INT 4
33827: PUSH
33828: LD_INT 5
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: IN
33839: NOT
33840: OR
33841: PUSH
33842: LD_VAR 0 3
33846: PPUSH
33847: LD_VAR 0 4
33851: PPUSH
33852: CALL_OW 488
33856: NOT
33857: OR
33858: IFFALSE 33862
// exit ;
33860: GO 34579
// pom := GetBase ( depot ) ;
33862: LD_ADDR_VAR 0 10
33866: PUSH
33867: LD_VAR 0 1
33871: PPUSH
33872: CALL_OW 274
33876: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33877: LD_ADDR_VAR 0 11
33881: PUSH
33882: LD_VAR 0 2
33886: PPUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 248
33896: PPUSH
33897: CALL_OW 450
33901: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33902: LD_VAR 0 10
33906: PPUSH
33907: LD_INT 1
33909: PPUSH
33910: CALL_OW 275
33914: PUSH
33915: LD_VAR 0 11
33919: PUSH
33920: LD_INT 1
33922: ARRAY
33923: GREATEREQUAL
33924: PUSH
33925: LD_VAR 0 10
33929: PPUSH
33930: LD_INT 2
33932: PPUSH
33933: CALL_OW 275
33937: PUSH
33938: LD_VAR 0 11
33942: PUSH
33943: LD_INT 2
33945: ARRAY
33946: GREATEREQUAL
33947: AND
33948: PUSH
33949: LD_VAR 0 10
33953: PPUSH
33954: LD_INT 3
33956: PPUSH
33957: CALL_OW 275
33961: PUSH
33962: LD_VAR 0 11
33966: PUSH
33967: LD_INT 3
33969: ARRAY
33970: GREATEREQUAL
33971: AND
33972: NOT
33973: IFFALSE 33977
// exit ;
33975: GO 34579
// if GetBType ( depot ) = b_depot then
33977: LD_VAR 0 1
33981: PPUSH
33982: CALL_OW 266
33986: PUSH
33987: LD_INT 0
33989: EQUAL
33990: IFFALSE 34002
// dist := 28 else
33992: LD_ADDR_VAR 0 14
33996: PUSH
33997: LD_INT 28
33999: ST_TO_ADDR
34000: GO 34010
// dist := 36 ;
34002: LD_ADDR_VAR 0 14
34006: PUSH
34007: LD_INT 36
34009: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34010: LD_VAR 0 1
34014: PPUSH
34015: LD_VAR 0 3
34019: PPUSH
34020: LD_VAR 0 4
34024: PPUSH
34025: CALL_OW 297
34029: PUSH
34030: LD_VAR 0 14
34034: GREATER
34035: IFFALSE 34039
// exit ;
34037: GO 34579
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34039: LD_ADDR_VAR 0 12
34043: PUSH
34044: LD_VAR 0 2
34048: PPUSH
34049: LD_VAR 0 3
34053: PPUSH
34054: LD_VAR 0 4
34058: PPUSH
34059: LD_VAR 0 5
34063: PPUSH
34064: LD_VAR 0 1
34068: PPUSH
34069: CALL_OW 248
34073: PPUSH
34074: LD_INT 0
34076: PPUSH
34077: CALL 34584 0 6
34081: ST_TO_ADDR
// if not hexes then
34082: LD_VAR 0 12
34086: NOT
34087: IFFALSE 34091
// exit ;
34089: GO 34579
// hex := GetHexInfo ( x , y ) ;
34091: LD_ADDR_VAR 0 15
34095: PUSH
34096: LD_VAR 0 3
34100: PPUSH
34101: LD_VAR 0 4
34105: PPUSH
34106: CALL_OW 546
34110: ST_TO_ADDR
// if hex [ 1 ] then
34111: LD_VAR 0 15
34115: PUSH
34116: LD_INT 1
34118: ARRAY
34119: IFFALSE 34123
// exit ;
34121: GO 34579
// height := hex [ 2 ] ;
34123: LD_ADDR_VAR 0 13
34127: PUSH
34128: LD_VAR 0 15
34132: PUSH
34133: LD_INT 2
34135: ARRAY
34136: ST_TO_ADDR
// for i = 1 to hexes do
34137: LD_ADDR_VAR 0 7
34141: PUSH
34142: DOUBLE
34143: LD_INT 1
34145: DEC
34146: ST_TO_ADDR
34147: LD_VAR 0 12
34151: PUSH
34152: FOR_TO
34153: IFFALSE 34483
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34155: LD_VAR 0 12
34159: PUSH
34160: LD_VAR 0 7
34164: ARRAY
34165: PUSH
34166: LD_INT 1
34168: ARRAY
34169: PPUSH
34170: LD_VAR 0 12
34174: PUSH
34175: LD_VAR 0 7
34179: ARRAY
34180: PUSH
34181: LD_INT 2
34183: ARRAY
34184: PPUSH
34185: CALL_OW 488
34189: NOT
34190: PUSH
34191: LD_VAR 0 12
34195: PUSH
34196: LD_VAR 0 7
34200: ARRAY
34201: PUSH
34202: LD_INT 1
34204: ARRAY
34205: PPUSH
34206: LD_VAR 0 12
34210: PUSH
34211: LD_VAR 0 7
34215: ARRAY
34216: PUSH
34217: LD_INT 2
34219: ARRAY
34220: PPUSH
34221: CALL_OW 428
34225: PUSH
34226: LD_INT 0
34228: GREATER
34229: OR
34230: PUSH
34231: LD_VAR 0 12
34235: PUSH
34236: LD_VAR 0 7
34240: ARRAY
34241: PUSH
34242: LD_INT 1
34244: ARRAY
34245: PPUSH
34246: LD_VAR 0 12
34250: PUSH
34251: LD_VAR 0 7
34255: ARRAY
34256: PUSH
34257: LD_INT 2
34259: ARRAY
34260: PPUSH
34261: CALL_OW 351
34265: OR
34266: IFFALSE 34272
// exit ;
34268: POP
34269: POP
34270: GO 34579
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34272: LD_ADDR_VAR 0 8
34276: PUSH
34277: LD_VAR 0 12
34281: PUSH
34282: LD_VAR 0 7
34286: ARRAY
34287: PUSH
34288: LD_INT 1
34290: ARRAY
34291: PPUSH
34292: LD_VAR 0 12
34296: PUSH
34297: LD_VAR 0 7
34301: ARRAY
34302: PUSH
34303: LD_INT 2
34305: ARRAY
34306: PPUSH
34307: CALL_OW 546
34311: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34312: LD_VAR 0 8
34316: PUSH
34317: LD_INT 1
34319: ARRAY
34320: PUSH
34321: LD_VAR 0 8
34325: PUSH
34326: LD_INT 2
34328: ARRAY
34329: PUSH
34330: LD_VAR 0 13
34334: PUSH
34335: LD_INT 2
34337: PLUS
34338: GREATER
34339: OR
34340: PUSH
34341: LD_VAR 0 8
34345: PUSH
34346: LD_INT 2
34348: ARRAY
34349: PUSH
34350: LD_VAR 0 13
34354: PUSH
34355: LD_INT 2
34357: MINUS
34358: LESS
34359: OR
34360: PUSH
34361: LD_VAR 0 8
34365: PUSH
34366: LD_INT 3
34368: ARRAY
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 8
34375: PUSH
34376: LD_INT 9
34378: PUSH
34379: LD_INT 10
34381: PUSH
34382: LD_INT 11
34384: PUSH
34385: LD_INT 12
34387: PUSH
34388: LD_INT 13
34390: PUSH
34391: LD_INT 16
34393: PUSH
34394: LD_INT 17
34396: PUSH
34397: LD_INT 18
34399: PUSH
34400: LD_INT 19
34402: PUSH
34403: LD_INT 20
34405: PUSH
34406: LD_INT 21
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: IN
34424: NOT
34425: OR
34426: PUSH
34427: LD_VAR 0 8
34431: PUSH
34432: LD_INT 5
34434: ARRAY
34435: NOT
34436: OR
34437: PUSH
34438: LD_VAR 0 8
34442: PUSH
34443: LD_INT 6
34445: ARRAY
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: LD_INT 2
34452: PUSH
34453: LD_INT 7
34455: PUSH
34456: LD_INT 9
34458: PUSH
34459: LD_INT 10
34461: PUSH
34462: LD_INT 11
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: IN
34473: NOT
34474: OR
34475: IFFALSE 34481
// exit ;
34477: POP
34478: POP
34479: GO 34579
// end ;
34481: GO 34152
34483: POP
34484: POP
// side := GetSide ( depot ) ;
34485: LD_ADDR_VAR 0 9
34489: PUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 255
34499: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34500: LD_VAR 0 9
34504: PPUSH
34505: LD_VAR 0 3
34509: PPUSH
34510: LD_VAR 0 4
34514: PPUSH
34515: LD_INT 20
34517: PPUSH
34518: CALL 27233 0 4
34522: PUSH
34523: LD_INT 4
34525: ARRAY
34526: IFFALSE 34530
// exit ;
34528: GO 34579
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34530: LD_VAR 0 2
34534: PUSH
34535: LD_INT 29
34537: PUSH
34538: LD_INT 30
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: IN
34545: PUSH
34546: LD_VAR 0 3
34550: PPUSH
34551: LD_VAR 0 4
34555: PPUSH
34556: LD_VAR 0 9
34560: PPUSH
34561: CALL_OW 440
34565: NOT
34566: AND
34567: IFFALSE 34571
// exit ;
34569: GO 34579
// result := true ;
34571: LD_ADDR_VAR 0 6
34575: PUSH
34576: LD_INT 1
34578: ST_TO_ADDR
// end ;
34579: LD_VAR 0 6
34583: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34584: LD_INT 0
34586: PPUSH
34587: PPUSH
34588: PPUSH
34589: PPUSH
34590: PPUSH
34591: PPUSH
34592: PPUSH
34593: PPUSH
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
34603: PPUSH
34604: PPUSH
34605: PPUSH
34606: PPUSH
34607: PPUSH
34608: PPUSH
34609: PPUSH
34610: PPUSH
34611: PPUSH
34612: PPUSH
34613: PPUSH
34614: PPUSH
34615: PPUSH
34616: PPUSH
34617: PPUSH
34618: PPUSH
34619: PPUSH
34620: PPUSH
34621: PPUSH
34622: PPUSH
34623: PPUSH
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
34631: PPUSH
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
// result = [ ] ;
34644: LD_ADDR_VAR 0 7
34648: PUSH
34649: EMPTY
34650: ST_TO_ADDR
// temp_list = [ ] ;
34651: LD_ADDR_VAR 0 9
34655: PUSH
34656: EMPTY
34657: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34658: LD_VAR 0 4
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 3
34674: PUSH
34675: LD_INT 4
34677: PUSH
34678: LD_INT 5
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: IN
34689: NOT
34690: PUSH
34691: LD_VAR 0 1
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: IN
34706: PUSH
34707: LD_VAR 0 5
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: IN
34726: NOT
34727: AND
34728: OR
34729: IFFALSE 34733
// exit ;
34731: GO 53124
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34733: LD_VAR 0 1
34737: PUSH
34738: LD_INT 6
34740: PUSH
34741: LD_INT 7
34743: PUSH
34744: LD_INT 8
34746: PUSH
34747: LD_INT 13
34749: PUSH
34750: LD_INT 12
34752: PUSH
34753: LD_INT 15
34755: PUSH
34756: LD_INT 11
34758: PUSH
34759: LD_INT 14
34761: PUSH
34762: LD_INT 10
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: IN
34776: IFFALSE 34786
// btype = b_lab ;
34778: LD_ADDR_VAR 0 1
34782: PUSH
34783: LD_INT 6
34785: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34786: LD_VAR 0 6
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: IN
34805: NOT
34806: PUSH
34807: LD_VAR 0 1
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 1
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 3
34823: PUSH
34824: LD_INT 6
34826: PUSH
34827: LD_INT 36
34829: PUSH
34830: LD_INT 4
34832: PUSH
34833: LD_INT 5
34835: PUSH
34836: LD_INT 31
34838: PUSH
34839: LD_INT 32
34841: PUSH
34842: LD_INT 33
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: IN
34858: NOT
34859: PUSH
34860: LD_VAR 0 6
34864: PUSH
34865: LD_INT 1
34867: EQUAL
34868: AND
34869: OR
34870: PUSH
34871: LD_VAR 0 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: IN
34886: NOT
34887: PUSH
34888: LD_VAR 0 6
34892: PUSH
34893: LD_INT 2
34895: EQUAL
34896: AND
34897: OR
34898: IFFALSE 34908
// mode = 0 ;
34900: LD_ADDR_VAR 0 6
34904: PUSH
34905: LD_INT 0
34907: ST_TO_ADDR
// case mode of 0 :
34908: LD_VAR 0 6
34912: PUSH
34913: LD_INT 0
34915: DOUBLE
34916: EQUAL
34917: IFTRUE 34921
34919: GO 46374
34921: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34922: LD_ADDR_VAR 0 11
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 2
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: LD_INT 3
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: LD_INT 3
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35115: LD_ADDR_VAR 0 12
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 2
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 2
35238: NEG
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 2
35249: NEG
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 3
35272: NEG
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 3
35283: NEG
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35311: LD_ADDR_VAR 0 13
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 2
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: LD_INT 2
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 2
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 2
35434: NEG
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: NEG
35447: PUSH
35448: LD_INT 2
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 3
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 3
35470: NEG
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 3
35482: NEG
35483: PUSH
35484: LD_INT 3
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35510: LD_ADDR_VAR 0 14
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: LD_INT 3
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 3
35671: NEG
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 2
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35706: LD_ADDR_VAR 0 15
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: NEG
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 2
35840: NEG
35841: PUSH
35842: LD_INT 1
35844: NEG
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 3
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35899: LD_ADDR_VAR 0 16
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: LD_INT 2
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: LD_INT 2
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 3
36056: PUSH
36057: LD_INT 3
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 2
36066: PUSH
36067: LD_INT 3
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36092: LD_ADDR_VAR 0 17
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: LD_INT 2
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 1
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: LD_INT 2
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36322: LD_ADDR_VAR 0 18
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 2
36498: NEG
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: NEG
36522: PUSH
36523: LD_INT 2
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36552: LD_ADDR_VAR 0 19
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 2
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 2
36728: NEG
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 2
36751: NEG
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36782: LD_ADDR_VAR 0 20
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: LD_INT 2
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: NEG
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37012: LD_ADDR_VAR 0 21
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 2
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 2
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: LD_INT 2
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: NEG
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 2
37211: NEG
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37242: LD_ADDR_VAR 0 22
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 2
37441: NEG
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37472: LD_ADDR_VAR 0 23
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 2
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 2
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: LD_INT 2
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: LD_INT 3
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 3
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: LD_INT 2
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37752: LD_ADDR_VAR 0 24
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 2
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 2
37928: NEG
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 2
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: LD_INT 2
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38028: LD_ADDR_VAR 0 25
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 2
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 2
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38302: LD_ADDR_VAR 0 26
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: LD_INT 2
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 2
38478: NEG
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 2
38489: NEG
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: NEG
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38578: LD_ADDR_VAR 0 27
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 2
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: NEG
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 3
38811: NEG
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 3
38823: NEG
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38858: LD_ADDR_VAR 0 28
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 2
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 2
39057: NEG
39058: PUSH
39059: LD_INT 2
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 2
39069: NEG
39070: PUSH
39071: LD_INT 3
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: LD_INT 3
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39140: LD_ADDR_VAR 0 29
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: LD_INT 3
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 3
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 3
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 3
39384: NEG
39385: PUSH
39386: LD_INT 2
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39419: LD_ADDR_VAR 0 30
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 2
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: LD_INT 3
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 3
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 3
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 3
39662: NEG
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39697: LD_ADDR_VAR 0 31
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: LD_INT 3
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 3
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: LD_INT 3
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 3
39940: NEG
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39975: LD_ADDR_VAR 0 32
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 3
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: LD_INT 3
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 3
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40253: LD_ADDR_VAR 0 33
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: LD_INT 3
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 3
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: LD_INT 3
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 3
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40532: LD_ADDR_VAR 0 34
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 1
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 2
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 3
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 3
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 3
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: NEG
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 3
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40812: LD_ADDR_VAR 0 35
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40924: LD_ADDR_VAR 0 36
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41036: LD_ADDR_VAR 0 37
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41148: LD_ADDR_VAR 0 38
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41260: LD_ADDR_VAR 0 39
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41372: LD_ADDR_VAR 0 40
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41484: LD_ADDR_VAR 0 41
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 2
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 3
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 3
41727: PUSH
41728: LD_INT 3
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 3
41758: NEG
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 3
41769: NEG
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: NEG
41782: PUSH
41783: LD_INT 2
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: NEG
41794: PUSH
41795: LD_INT 3
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41834: LD_ADDR_VAR 0 42
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: LD_INT 2
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 2
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 2
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 3
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 3
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: LD_INT 3
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 3
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 3
42131: NEG
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 3
42143: NEG
42144: PUSH
42145: LD_INT 3
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42184: LD_ADDR_VAR 0 43
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: NEG
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 3
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 3
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 3
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 3
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42532: LD_ADDR_VAR 0 44
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: LD_INT 2
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: NEG
42723: PUSH
42724: LD_INT 3
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 3
42806: NEG
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: NEG
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 3
42829: NEG
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 3
42841: NEG
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42882: LD_ADDR_VAR 0 45
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: LD_INT 3
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 3
43179: NEG
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 3
43191: NEG
43192: PUSH
43193: LD_INT 3
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43232: LD_ADDR_VAR 0 46
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 3
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 3
43528: NEG
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: NEG
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43580: LD_ADDR_VAR 0 47
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43731: LD_ADDR_VAR 0 48
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43878: LD_ADDR_VAR 0 49
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44022: LD_ADDR_VAR 0 50
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44166: LD_ADDR_VAR 0 51
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44313: LD_ADDR_VAR 0 52
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44464: LD_ADDR_VAR 0 53
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44694: LD_ADDR_VAR 0 54
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44924: LD_ADDR_VAR 0 55
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45154: LD_ADDR_VAR 0 56
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45384: LD_ADDR_VAR 0 57
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45614: LD_ADDR_VAR 0 58
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45844: LD_ADDR_VAR 0 59
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45932: LD_ADDR_VAR 0 60
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46020: LD_ADDR_VAR 0 61
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46108: LD_ADDR_VAR 0 62
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46196: LD_ADDR_VAR 0 63
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46284: LD_ADDR_VAR 0 64
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// end ; 1 :
46372: GO 52269
46374: LD_INT 1
46376: DOUBLE
46377: EQUAL
46378: IFTRUE 46382
46380: GO 49005
46382: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46383: LD_ADDR_VAR 0 11
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 3
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46427: LD_ADDR_VAR 0 12
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46468: LD_ADDR_VAR 0 13
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: LD_INT 3
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 3
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46508: LD_ADDR_VAR 0 14
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 3
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46549: LD_ADDR_VAR 0 15
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: NEG
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 3
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46593: LD_ADDR_VAR 0 16
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 3
46624: NEG
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46639: LD_ADDR_VAR 0 17
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46683: LD_ADDR_VAR 0 18
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46724: LD_ADDR_VAR 0 19
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: LD_INT 3
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46764: LD_ADDR_VAR 0 20
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 3
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 3
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: LIST
46804: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46805: LD_ADDR_VAR 0 21
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 3
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 3
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46849: LD_ADDR_VAR 0 22
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: LD_INT 3
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46895: LD_ADDR_VAR 0 23
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 4
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 3
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: LIST
46938: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46939: LD_ADDR_VAR 0 24
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 4
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46980: LD_ADDR_VAR 0 25
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 4
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: LD_INT 4
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47020: LD_ADDR_VAR 0 26
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 4
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 3
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47061: LD_ADDR_VAR 0 27
47065: PUSH
47066: LD_INT 3
47068: NEG
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 4
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47105: LD_ADDR_VAR 0 28
47109: PUSH
47110: LD_INT 3
47112: NEG
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: LD_INT 4
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 4
47136: NEG
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47151: LD_ADDR_VAR 0 29
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 4
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 4
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 5
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 5
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 4
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 6
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 6
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 5
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47306: LD_ADDR_VAR 0 30
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 3
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 4
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 4
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 4
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 5
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 5
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 5
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 6
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 6
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47449: LD_ADDR_VAR 0 31
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 3
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 4
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 4
47496: PUSH
47497: LD_INT 4
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: LD_INT 4
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 5
47516: PUSH
47517: LD_INT 4
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 5
47526: PUSH
47527: LD_INT 5
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 4
47536: PUSH
47537: LD_INT 5
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 6
47546: PUSH
47547: LD_INT 5
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 6
47556: PUSH
47557: LD_INT 6
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: LD_INT 6
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47588: LD_ADDR_VAR 0 32
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 3
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 3
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 4
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 4
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 5
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 5
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 4
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 6
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 6
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 5
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47731: LD_ADDR_VAR 0 33
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 4
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 4
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 4
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 5
47817: NEG
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 5
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 5
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 6
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 6
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47886: LD_ADDR_VAR 0 34
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 3
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 3
47905: NEG
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: NEG
47918: PUSH
47919: LD_INT 3
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: LD_INT 4
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 4
47941: NEG
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 4
47953: NEG
47954: PUSH
47955: LD_INT 4
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 4
47965: NEG
47966: PUSH
47967: LD_INT 5
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 5
47977: NEG
47978: PUSH
47979: LD_INT 4
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 5
47989: NEG
47990: PUSH
47991: LD_INT 5
47993: NEG
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 5
48001: NEG
48002: PUSH
48003: LD_INT 6
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 6
48013: NEG
48014: PUSH
48015: LD_INT 5
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 6
48025: NEG
48026: PUSH
48027: LD_INT 6
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48049: LD_ADDR_VAR 0 41
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48093: LD_ADDR_VAR 0 42
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48134: LD_ADDR_VAR 0 43
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48174: LD_ADDR_VAR 0 44
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48215: LD_ADDR_VAR 0 45
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48259: LD_ADDR_VAR 0 46
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48305: LD_ADDR_VAR 0 47
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 3
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48338: LD_ADDR_VAR 0 48
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48369: LD_ADDR_VAR 0 49
48373: PUSH
48374: LD_INT 3
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48398: LD_ADDR_VAR 0 50
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48427: LD_ADDR_VAR 0 51
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48458: LD_ADDR_VAR 0 52
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: LD_INT 2
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48491: LD_ADDR_VAR 0 53
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 3
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: LIST
48534: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48535: LD_ADDR_VAR 0 54
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48576: LD_ADDR_VAR 0 55
48580: PUSH
48581: LD_INT 3
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 3
48593: PUSH
48594: LD_INT 3
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 3
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48616: LD_ADDR_VAR 0 56
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 3
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48657: LD_ADDR_VAR 0 57
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: NEG
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 3
48686: NEG
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48701: LD_ADDR_VAR 0 58
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 3
48732: NEG
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48747: LD_ADDR_VAR 0 59
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: LIST
48790: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48791: LD_ADDR_VAR 0 60
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48832: LD_ADDR_VAR 0 61
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48872: LD_ADDR_VAR 0 62
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48913: LD_ADDR_VAR 0 63
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48957: LD_ADDR_VAR 0 64
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: ST_TO_ADDR
// end ; 2 :
49003: GO 52269
49005: LD_INT 2
49007: DOUBLE
49008: EQUAL
49009: IFTRUE 49013
49011: GO 52268
49013: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49014: LD_ADDR_VAR 0 29
49018: PUSH
49019: LD_INT 4
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 4
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 5
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 5
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 4
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 3
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 5
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 4
49134: PUSH
49135: LD_INT 3
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 4
49144: PUSH
49145: LD_INT 4
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 3
49154: PUSH
49155: LD_INT 4
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 3
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 4
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 4
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 4
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 3
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 4
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 5
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 5
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 4
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 5
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: NEG
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 3
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 4
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 4
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 4
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 4
49399: NEG
49400: PUSH
49401: LD_INT 4
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 4
49411: NEG
49412: PUSH
49413: LD_INT 5
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: LD_INT 4
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 3
49435: NEG
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 4
49447: NEG
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 5
49459: NEG
49460: PUSH
49461: LD_INT 4
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 5
49471: NEG
49472: PUSH
49473: LD_INT 5
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: NEG
49484: PUSH
49485: LD_INT 5
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 5
49495: NEG
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49552: LD_ADDR_VAR 0 30
49556: PUSH
49557: LD_INT 4
49559: PUSH
49560: LD_INT 4
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 4
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 5
49579: PUSH
49580: LD_INT 4
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 5
49589: PUSH
49590: LD_INT 5
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 4
49599: PUSH
49600: LD_INT 5
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: LD_INT 4
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 5
49629: PUSH
49630: LD_INT 3
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: LD_INT 5
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 3
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 3
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 4
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 4
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 4
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 4
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 4
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 3
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 4
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 5
49798: NEG
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 5
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 5
49821: NEG
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: NEG
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 3
49844: NEG
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: NEG
49857: PUSH
49858: LD_INT 4
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 3
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 4
49904: NEG
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 4
49916: NEG
49917: PUSH
49918: LD_INT 4
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 4
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: NEG
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 4
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 5
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 4
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 3
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 4
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 5
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 3
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: LD_INT 5
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50099: LD_ADDR_VAR 0 31
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 4
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 3
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 4
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 5
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 5
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 4
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 3
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 5
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 3
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 4
50255: NEG
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 4
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 4
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 4
50301: NEG
50302: PUSH
50303: LD_INT 4
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 4
50313: NEG
50314: PUSH
50315: LD_INT 5
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: LD_INT 4
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 3
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 4
50349: NEG
50350: PUSH
50351: LD_INT 3
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 5
50361: NEG
50362: PUSH
50363: LD_INT 4
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 5
50373: NEG
50374: PUSH
50375: LD_INT 5
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: LD_INT 5
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 5
50397: NEG
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 4
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 3
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 4
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 4
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 4
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 4
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 5
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 5
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 4
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 5
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50649: LD_ADDR_VAR 0 32
50653: PUSH
50654: LD_INT 4
50656: NEG
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 4
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 3
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 4
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 5
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 5
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 5
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: NEG
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: LD_INT 4
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: NEG
50831: PUSH
50832: LD_INT 4
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 4
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 4
50854: NEG
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 4
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 5
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 4
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 3
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 3
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 4
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 5
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 5
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 4
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 4
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 4
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 4
51061: PUSH
51062: LD_INT 4
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 4
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 5
51081: PUSH
51082: LD_INT 4
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 5
51091: PUSH
51092: LD_INT 5
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 4
51101: PUSH
51102: LD_INT 5
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: LD_INT 4
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 5
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: LD_INT 5
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51196: LD_ADDR_VAR 0 33
51200: PUSH
51201: LD_INT 4
51203: NEG
51204: PUSH
51205: LD_INT 4
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 4
51215: NEG
51216: PUSH
51217: LD_INT 5
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: NEG
51228: PUSH
51229: LD_INT 4
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 4
51251: NEG
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 5
51263: NEG
51264: PUSH
51265: LD_INT 4
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 5
51275: NEG
51276: PUSH
51277: LD_INT 5
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: LD_INT 5
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 5
51299: NEG
51300: PUSH
51301: LD_INT 3
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 4
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 4
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 4
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 4
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 4
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 5
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 5
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 4
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 3
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 5
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 4
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: LD_INT 4
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 4
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 4
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 4
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 4
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 5
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 5
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 4
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 5
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51734: LD_ADDR_VAR 0 34
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 4
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 5
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 4
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 4
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 5
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: LD_INT 5
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 3
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 4
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 4
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 4
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 4
51936: PUSH
51937: LD_INT 4
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 4
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 5
51956: PUSH
51957: LD_INT 4
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 5
51966: PUSH
51967: LD_INT 5
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 4
51976: PUSH
51977: LD_INT 5
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: LD_INT 4
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 5
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: PUSH
52017: LD_INT 5
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 3
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 4
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 4
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 4
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 4
52119: NEG
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 4
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 3
52142: NEG
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 4
52164: NEG
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 5
52175: NEG
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 5
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 5
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: ST_TO_ADDR
// end ; end ;
52266: GO 52269
52268: POP
// case btype of b_depot , b_warehouse :
52269: LD_VAR 0 1
52273: PUSH
52274: LD_INT 0
52276: DOUBLE
52277: EQUAL
52278: IFTRUE 52288
52280: LD_INT 1
52282: DOUBLE
52283: EQUAL
52284: IFTRUE 52288
52286: GO 52489
52288: POP
// case nation of nation_american :
52289: LD_VAR 0 5
52293: PUSH
52294: LD_INT 1
52296: DOUBLE
52297: EQUAL
52298: IFTRUE 52302
52300: GO 52358
52302: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52303: LD_ADDR_VAR 0 9
52307: PUSH
52308: LD_VAR 0 11
52312: PUSH
52313: LD_VAR 0 12
52317: PUSH
52318: LD_VAR 0 13
52322: PUSH
52323: LD_VAR 0 14
52327: PUSH
52328: LD_VAR 0 15
52332: PUSH
52333: LD_VAR 0 16
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: PUSH
52346: LD_VAR 0 4
52350: PUSH
52351: LD_INT 1
52353: PLUS
52354: ARRAY
52355: ST_TO_ADDR
52356: GO 52487
52358: LD_INT 2
52360: DOUBLE
52361: EQUAL
52362: IFTRUE 52366
52364: GO 52422
52366: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52367: LD_ADDR_VAR 0 9
52371: PUSH
52372: LD_VAR 0 17
52376: PUSH
52377: LD_VAR 0 18
52381: PUSH
52382: LD_VAR 0 19
52386: PUSH
52387: LD_VAR 0 20
52391: PUSH
52392: LD_VAR 0 21
52396: PUSH
52397: LD_VAR 0 22
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: PUSH
52410: LD_VAR 0 4
52414: PUSH
52415: LD_INT 1
52417: PLUS
52418: ARRAY
52419: ST_TO_ADDR
52420: GO 52487
52422: LD_INT 3
52424: DOUBLE
52425: EQUAL
52426: IFTRUE 52430
52428: GO 52486
52430: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52431: LD_ADDR_VAR 0 9
52435: PUSH
52436: LD_VAR 0 23
52440: PUSH
52441: LD_VAR 0 24
52445: PUSH
52446: LD_VAR 0 25
52450: PUSH
52451: LD_VAR 0 26
52455: PUSH
52456: LD_VAR 0 27
52460: PUSH
52461: LD_VAR 0 28
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: PUSH
52474: LD_VAR 0 4
52478: PUSH
52479: LD_INT 1
52481: PLUS
52482: ARRAY
52483: ST_TO_ADDR
52484: GO 52487
52486: POP
52487: GO 53042
52489: LD_INT 2
52491: DOUBLE
52492: EQUAL
52493: IFTRUE 52503
52495: LD_INT 3
52497: DOUBLE
52498: EQUAL
52499: IFTRUE 52503
52501: GO 52559
52503: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52504: LD_ADDR_VAR 0 9
52508: PUSH
52509: LD_VAR 0 29
52513: PUSH
52514: LD_VAR 0 30
52518: PUSH
52519: LD_VAR 0 31
52523: PUSH
52524: LD_VAR 0 32
52528: PUSH
52529: LD_VAR 0 33
52533: PUSH
52534: LD_VAR 0 34
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: PUSH
52547: LD_VAR 0 4
52551: PUSH
52552: LD_INT 1
52554: PLUS
52555: ARRAY
52556: ST_TO_ADDR
52557: GO 53042
52559: LD_INT 16
52561: DOUBLE
52562: EQUAL
52563: IFTRUE 52621
52565: LD_INT 17
52567: DOUBLE
52568: EQUAL
52569: IFTRUE 52621
52571: LD_INT 18
52573: DOUBLE
52574: EQUAL
52575: IFTRUE 52621
52577: LD_INT 19
52579: DOUBLE
52580: EQUAL
52581: IFTRUE 52621
52583: LD_INT 22
52585: DOUBLE
52586: EQUAL
52587: IFTRUE 52621
52589: LD_INT 20
52591: DOUBLE
52592: EQUAL
52593: IFTRUE 52621
52595: LD_INT 21
52597: DOUBLE
52598: EQUAL
52599: IFTRUE 52621
52601: LD_INT 23
52603: DOUBLE
52604: EQUAL
52605: IFTRUE 52621
52607: LD_INT 24
52609: DOUBLE
52610: EQUAL
52611: IFTRUE 52621
52613: LD_INT 25
52615: DOUBLE
52616: EQUAL
52617: IFTRUE 52621
52619: GO 52677
52621: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52622: LD_ADDR_VAR 0 9
52626: PUSH
52627: LD_VAR 0 35
52631: PUSH
52632: LD_VAR 0 36
52636: PUSH
52637: LD_VAR 0 37
52641: PUSH
52642: LD_VAR 0 38
52646: PUSH
52647: LD_VAR 0 39
52651: PUSH
52652: LD_VAR 0 40
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: PUSH
52665: LD_VAR 0 4
52669: PUSH
52670: LD_INT 1
52672: PLUS
52673: ARRAY
52674: ST_TO_ADDR
52675: GO 53042
52677: LD_INT 6
52679: DOUBLE
52680: EQUAL
52681: IFTRUE 52733
52683: LD_INT 7
52685: DOUBLE
52686: EQUAL
52687: IFTRUE 52733
52689: LD_INT 8
52691: DOUBLE
52692: EQUAL
52693: IFTRUE 52733
52695: LD_INT 13
52697: DOUBLE
52698: EQUAL
52699: IFTRUE 52733
52701: LD_INT 12
52703: DOUBLE
52704: EQUAL
52705: IFTRUE 52733
52707: LD_INT 15
52709: DOUBLE
52710: EQUAL
52711: IFTRUE 52733
52713: LD_INT 11
52715: DOUBLE
52716: EQUAL
52717: IFTRUE 52733
52719: LD_INT 14
52721: DOUBLE
52722: EQUAL
52723: IFTRUE 52733
52725: LD_INT 10
52727: DOUBLE
52728: EQUAL
52729: IFTRUE 52733
52731: GO 52789
52733: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52734: LD_ADDR_VAR 0 9
52738: PUSH
52739: LD_VAR 0 41
52743: PUSH
52744: LD_VAR 0 42
52748: PUSH
52749: LD_VAR 0 43
52753: PUSH
52754: LD_VAR 0 44
52758: PUSH
52759: LD_VAR 0 45
52763: PUSH
52764: LD_VAR 0 46
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: PUSH
52777: LD_VAR 0 4
52781: PUSH
52782: LD_INT 1
52784: PLUS
52785: ARRAY
52786: ST_TO_ADDR
52787: GO 53042
52789: LD_INT 36
52791: DOUBLE
52792: EQUAL
52793: IFTRUE 52797
52795: GO 52853
52797: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52798: LD_ADDR_VAR 0 9
52802: PUSH
52803: LD_VAR 0 47
52807: PUSH
52808: LD_VAR 0 48
52812: PUSH
52813: LD_VAR 0 49
52817: PUSH
52818: LD_VAR 0 50
52822: PUSH
52823: LD_VAR 0 51
52827: PUSH
52828: LD_VAR 0 52
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: PUSH
52841: LD_VAR 0 4
52845: PUSH
52846: LD_INT 1
52848: PLUS
52849: ARRAY
52850: ST_TO_ADDR
52851: GO 53042
52853: LD_INT 4
52855: DOUBLE
52856: EQUAL
52857: IFTRUE 52879
52859: LD_INT 5
52861: DOUBLE
52862: EQUAL
52863: IFTRUE 52879
52865: LD_INT 34
52867: DOUBLE
52868: EQUAL
52869: IFTRUE 52879
52871: LD_INT 37
52873: DOUBLE
52874: EQUAL
52875: IFTRUE 52879
52877: GO 52935
52879: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52880: LD_ADDR_VAR 0 9
52884: PUSH
52885: LD_VAR 0 53
52889: PUSH
52890: LD_VAR 0 54
52894: PUSH
52895: LD_VAR 0 55
52899: PUSH
52900: LD_VAR 0 56
52904: PUSH
52905: LD_VAR 0 57
52909: PUSH
52910: LD_VAR 0 58
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: PUSH
52923: LD_VAR 0 4
52927: PUSH
52928: LD_INT 1
52930: PLUS
52931: ARRAY
52932: ST_TO_ADDR
52933: GO 53042
52935: LD_INT 31
52937: DOUBLE
52938: EQUAL
52939: IFTRUE 52985
52941: LD_INT 32
52943: DOUBLE
52944: EQUAL
52945: IFTRUE 52985
52947: LD_INT 33
52949: DOUBLE
52950: EQUAL
52951: IFTRUE 52985
52953: LD_INT 27
52955: DOUBLE
52956: EQUAL
52957: IFTRUE 52985
52959: LD_INT 26
52961: DOUBLE
52962: EQUAL
52963: IFTRUE 52985
52965: LD_INT 28
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 52985
52971: LD_INT 29
52973: DOUBLE
52974: EQUAL
52975: IFTRUE 52985
52977: LD_INT 30
52979: DOUBLE
52980: EQUAL
52981: IFTRUE 52985
52983: GO 53041
52985: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52986: LD_ADDR_VAR 0 9
52990: PUSH
52991: LD_VAR 0 59
52995: PUSH
52996: LD_VAR 0 60
53000: PUSH
53001: LD_VAR 0 61
53005: PUSH
53006: LD_VAR 0 62
53010: PUSH
53011: LD_VAR 0 63
53015: PUSH
53016: LD_VAR 0 64
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: PUSH
53029: LD_VAR 0 4
53033: PUSH
53034: LD_INT 1
53036: PLUS
53037: ARRAY
53038: ST_TO_ADDR
53039: GO 53042
53041: POP
// temp_list2 = [ ] ;
53042: LD_ADDR_VAR 0 10
53046: PUSH
53047: EMPTY
53048: ST_TO_ADDR
// for i in temp_list do
53049: LD_ADDR_VAR 0 8
53053: PUSH
53054: LD_VAR 0 9
53058: PUSH
53059: FOR_IN
53060: IFFALSE 53112
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53062: LD_ADDR_VAR 0 10
53066: PUSH
53067: LD_VAR 0 10
53071: PUSH
53072: LD_VAR 0 8
53076: PUSH
53077: LD_INT 1
53079: ARRAY
53080: PUSH
53081: LD_VAR 0 2
53085: PLUS
53086: PUSH
53087: LD_VAR 0 8
53091: PUSH
53092: LD_INT 2
53094: ARRAY
53095: PUSH
53096: LD_VAR 0 3
53100: PLUS
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: EMPTY
53107: LIST
53108: ADD
53109: ST_TO_ADDR
53110: GO 53059
53112: POP
53113: POP
// result = temp_list2 ;
53114: LD_ADDR_VAR 0 7
53118: PUSH
53119: LD_VAR 0 10
53123: ST_TO_ADDR
// end ;
53124: LD_VAR 0 7
53128: RET
// export function EnemyInRange ( unit , dist ) ; begin
53129: LD_INT 0
53131: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53132: LD_ADDR_VAR 0 3
53136: PUSH
53137: LD_VAR 0 1
53141: PPUSH
53142: CALL_OW 255
53146: PPUSH
53147: LD_VAR 0 1
53151: PPUSH
53152: CALL_OW 250
53156: PPUSH
53157: LD_VAR 0 1
53161: PPUSH
53162: CALL_OW 251
53166: PPUSH
53167: LD_VAR 0 2
53171: PPUSH
53172: CALL 27233 0 4
53176: PUSH
53177: LD_INT 4
53179: ARRAY
53180: ST_TO_ADDR
// end ;
53181: LD_VAR 0 3
53185: RET
// export function PlayerSeeMe ( unit ) ; begin
53186: LD_INT 0
53188: PPUSH
// result := See ( your_side , unit ) ;
53189: LD_ADDR_VAR 0 2
53193: PUSH
53194: LD_OWVAR 2
53198: PPUSH
53199: LD_VAR 0 1
53203: PPUSH
53204: CALL_OW 292
53208: ST_TO_ADDR
// end ;
53209: LD_VAR 0 2
53213: RET
// export function ReverseDir ( unit ) ; begin
53214: LD_INT 0
53216: PPUSH
// if not unit then
53217: LD_VAR 0 1
53221: NOT
53222: IFFALSE 53226
// exit ;
53224: GO 53249
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53226: LD_ADDR_VAR 0 2
53230: PUSH
53231: LD_VAR 0 1
53235: PPUSH
53236: CALL_OW 254
53240: PUSH
53241: LD_INT 3
53243: PLUS
53244: PUSH
53245: LD_INT 6
53247: MOD
53248: ST_TO_ADDR
// end ;
53249: LD_VAR 0 2
53253: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53254: LD_INT 0
53256: PPUSH
53257: PPUSH
53258: PPUSH
53259: PPUSH
53260: PPUSH
// if not hexes then
53261: LD_VAR 0 2
53265: NOT
53266: IFFALSE 53270
// exit ;
53268: GO 53418
// dist := 9999 ;
53270: LD_ADDR_VAR 0 5
53274: PUSH
53275: LD_INT 9999
53277: ST_TO_ADDR
// for i = 1 to hexes do
53278: LD_ADDR_VAR 0 4
53282: PUSH
53283: DOUBLE
53284: LD_INT 1
53286: DEC
53287: ST_TO_ADDR
53288: LD_VAR 0 2
53292: PUSH
53293: FOR_TO
53294: IFFALSE 53406
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53296: LD_VAR 0 1
53300: PPUSH
53301: LD_VAR 0 2
53305: PUSH
53306: LD_VAR 0 4
53310: ARRAY
53311: PUSH
53312: LD_INT 1
53314: ARRAY
53315: PPUSH
53316: LD_VAR 0 2
53320: PUSH
53321: LD_VAR 0 4
53325: ARRAY
53326: PUSH
53327: LD_INT 2
53329: ARRAY
53330: PPUSH
53331: CALL_OW 297
53335: PUSH
53336: LD_VAR 0 5
53340: LESS
53341: IFFALSE 53404
// begin hex := hexes [ i ] ;
53343: LD_ADDR_VAR 0 7
53347: PUSH
53348: LD_VAR 0 2
53352: PUSH
53353: LD_VAR 0 4
53357: ARRAY
53358: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53359: LD_ADDR_VAR 0 5
53363: PUSH
53364: LD_VAR 0 1
53368: PPUSH
53369: LD_VAR 0 2
53373: PUSH
53374: LD_VAR 0 4
53378: ARRAY
53379: PUSH
53380: LD_INT 1
53382: ARRAY
53383: PPUSH
53384: LD_VAR 0 2
53388: PUSH
53389: LD_VAR 0 4
53393: ARRAY
53394: PUSH
53395: LD_INT 2
53397: ARRAY
53398: PPUSH
53399: CALL_OW 297
53403: ST_TO_ADDR
// end ; end ;
53404: GO 53293
53406: POP
53407: POP
// result := hex ;
53408: LD_ADDR_VAR 0 3
53412: PUSH
53413: LD_VAR 0 7
53417: ST_TO_ADDR
// end ;
53418: LD_VAR 0 3
53422: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53423: LD_INT 0
53425: PPUSH
53426: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53427: LD_VAR 0 1
53431: NOT
53432: PUSH
53433: LD_VAR 0 1
53437: PUSH
53438: LD_INT 21
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 23
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PPUSH
53462: CALL_OW 69
53466: IN
53467: NOT
53468: OR
53469: IFFALSE 53473
// exit ;
53471: GO 53520
// for i = 1 to 3 do
53473: LD_ADDR_VAR 0 3
53477: PUSH
53478: DOUBLE
53479: LD_INT 1
53481: DEC
53482: ST_TO_ADDR
53483: LD_INT 3
53485: PUSH
53486: FOR_TO
53487: IFFALSE 53518
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53489: LD_VAR 0 1
53493: PPUSH
53494: CALL_OW 250
53498: PPUSH
53499: LD_VAR 0 1
53503: PPUSH
53504: CALL_OW 251
53508: PPUSH
53509: LD_INT 1
53511: PPUSH
53512: CALL_OW 453
53516: GO 53486
53518: POP
53519: POP
// end ;
53520: LD_VAR 0 2
53524: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53525: LD_INT 0
53527: PPUSH
53528: PPUSH
53529: PPUSH
53530: PPUSH
53531: PPUSH
53532: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53533: LD_VAR 0 1
53537: NOT
53538: PUSH
53539: LD_VAR 0 2
53543: NOT
53544: OR
53545: PUSH
53546: LD_VAR 0 1
53550: PPUSH
53551: CALL_OW 314
53555: OR
53556: IFFALSE 53560
// exit ;
53558: GO 54001
// x := GetX ( enemy_unit ) ;
53560: LD_ADDR_VAR 0 7
53564: PUSH
53565: LD_VAR 0 2
53569: PPUSH
53570: CALL_OW 250
53574: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53575: LD_ADDR_VAR 0 8
53579: PUSH
53580: LD_VAR 0 2
53584: PPUSH
53585: CALL_OW 251
53589: ST_TO_ADDR
// if not x or not y then
53590: LD_VAR 0 7
53594: NOT
53595: PUSH
53596: LD_VAR 0 8
53600: NOT
53601: OR
53602: IFFALSE 53606
// exit ;
53604: GO 54001
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53606: LD_ADDR_VAR 0 6
53610: PUSH
53611: LD_VAR 0 7
53615: PPUSH
53616: LD_INT 0
53618: PPUSH
53619: LD_INT 4
53621: PPUSH
53622: CALL_OW 272
53626: PUSH
53627: LD_VAR 0 8
53631: PPUSH
53632: LD_INT 0
53634: PPUSH
53635: LD_INT 4
53637: PPUSH
53638: CALL_OW 273
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_VAR 0 7
53651: PPUSH
53652: LD_INT 1
53654: PPUSH
53655: LD_INT 4
53657: PPUSH
53658: CALL_OW 272
53662: PUSH
53663: LD_VAR 0 8
53667: PPUSH
53668: LD_INT 1
53670: PPUSH
53671: LD_INT 4
53673: PPUSH
53674: CALL_OW 273
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_VAR 0 7
53687: PPUSH
53688: LD_INT 2
53690: PPUSH
53691: LD_INT 4
53693: PPUSH
53694: CALL_OW 272
53698: PUSH
53699: LD_VAR 0 8
53703: PPUSH
53704: LD_INT 2
53706: PPUSH
53707: LD_INT 4
53709: PPUSH
53710: CALL_OW 273
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_VAR 0 7
53723: PPUSH
53724: LD_INT 3
53726: PPUSH
53727: LD_INT 4
53729: PPUSH
53730: CALL_OW 272
53734: PUSH
53735: LD_VAR 0 8
53739: PPUSH
53740: LD_INT 3
53742: PPUSH
53743: LD_INT 4
53745: PPUSH
53746: CALL_OW 273
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_VAR 0 7
53759: PPUSH
53760: LD_INT 4
53762: PPUSH
53763: LD_INT 4
53765: PPUSH
53766: CALL_OW 272
53770: PUSH
53771: LD_VAR 0 8
53775: PPUSH
53776: LD_INT 4
53778: PPUSH
53779: LD_INT 4
53781: PPUSH
53782: CALL_OW 273
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_VAR 0 7
53795: PPUSH
53796: LD_INT 5
53798: PPUSH
53799: LD_INT 4
53801: PPUSH
53802: CALL_OW 272
53806: PUSH
53807: LD_VAR 0 8
53811: PPUSH
53812: LD_INT 5
53814: PPUSH
53815: LD_INT 4
53817: PPUSH
53818: CALL_OW 273
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: ST_TO_ADDR
// for i = tmp downto 1 do
53835: LD_ADDR_VAR 0 4
53839: PUSH
53840: DOUBLE
53841: LD_VAR 0 6
53845: INC
53846: ST_TO_ADDR
53847: LD_INT 1
53849: PUSH
53850: FOR_DOWNTO
53851: IFFALSE 53952
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53853: LD_VAR 0 6
53857: PUSH
53858: LD_VAR 0 4
53862: ARRAY
53863: PUSH
53864: LD_INT 1
53866: ARRAY
53867: PPUSH
53868: LD_VAR 0 6
53872: PUSH
53873: LD_VAR 0 4
53877: ARRAY
53878: PUSH
53879: LD_INT 2
53881: ARRAY
53882: PPUSH
53883: CALL_OW 488
53887: NOT
53888: PUSH
53889: LD_VAR 0 6
53893: PUSH
53894: LD_VAR 0 4
53898: ARRAY
53899: PUSH
53900: LD_INT 1
53902: ARRAY
53903: PPUSH
53904: LD_VAR 0 6
53908: PUSH
53909: LD_VAR 0 4
53913: ARRAY
53914: PUSH
53915: LD_INT 2
53917: ARRAY
53918: PPUSH
53919: CALL_OW 428
53923: PUSH
53924: LD_INT 0
53926: NONEQUAL
53927: OR
53928: IFFALSE 53950
// tmp := Delete ( tmp , i ) ;
53930: LD_ADDR_VAR 0 6
53934: PUSH
53935: LD_VAR 0 6
53939: PPUSH
53940: LD_VAR 0 4
53944: PPUSH
53945: CALL_OW 3
53949: ST_TO_ADDR
53950: GO 53850
53952: POP
53953: POP
// j := GetClosestHex ( unit , tmp ) ;
53954: LD_ADDR_VAR 0 5
53958: PUSH
53959: LD_VAR 0 1
53963: PPUSH
53964: LD_VAR 0 6
53968: PPUSH
53969: CALL 53254 0 2
53973: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53974: LD_VAR 0 1
53978: PPUSH
53979: LD_VAR 0 5
53983: PUSH
53984: LD_INT 1
53986: ARRAY
53987: PPUSH
53988: LD_VAR 0 5
53992: PUSH
53993: LD_INT 2
53995: ARRAY
53996: PPUSH
53997: CALL_OW 111
// end ;
54001: LD_VAR 0 3
54005: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54006: LD_INT 0
54008: PPUSH
54009: PPUSH
54010: PPUSH
// uc_side = 0 ;
54011: LD_ADDR_OWVAR 20
54015: PUSH
54016: LD_INT 0
54018: ST_TO_ADDR
// uc_nation = 0 ;
54019: LD_ADDR_OWVAR 21
54023: PUSH
54024: LD_INT 0
54026: ST_TO_ADDR
// InitHc_All ( ) ;
54027: CALL_OW 584
// InitVc ;
54031: CALL_OW 20
// if mastodonts then
54035: LD_VAR 0 6
54039: IFFALSE 54106
// for i = 1 to mastodonts do
54041: LD_ADDR_VAR 0 11
54045: PUSH
54046: DOUBLE
54047: LD_INT 1
54049: DEC
54050: ST_TO_ADDR
54051: LD_VAR 0 6
54055: PUSH
54056: FOR_TO
54057: IFFALSE 54104
// begin vc_chassis := 31 ;
54059: LD_ADDR_OWVAR 37
54063: PUSH
54064: LD_INT 31
54066: ST_TO_ADDR
// vc_control := control_rider ;
54067: LD_ADDR_OWVAR 38
54071: PUSH
54072: LD_INT 4
54074: ST_TO_ADDR
// animal := CreateVehicle ;
54075: LD_ADDR_VAR 0 12
54079: PUSH
54080: CALL_OW 45
54084: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54085: LD_VAR 0 12
54089: PPUSH
54090: LD_VAR 0 8
54094: PPUSH
54095: LD_INT 0
54097: PPUSH
54098: CALL 56294 0 3
// end ;
54102: GO 54056
54104: POP
54105: POP
// if horses then
54106: LD_VAR 0 5
54110: IFFALSE 54177
// for i = 1 to horses do
54112: LD_ADDR_VAR 0 11
54116: PUSH
54117: DOUBLE
54118: LD_INT 1
54120: DEC
54121: ST_TO_ADDR
54122: LD_VAR 0 5
54126: PUSH
54127: FOR_TO
54128: IFFALSE 54175
// begin hc_class := 21 ;
54130: LD_ADDR_OWVAR 28
54134: PUSH
54135: LD_INT 21
54137: ST_TO_ADDR
// hc_gallery :=  ;
54138: LD_ADDR_OWVAR 33
54142: PUSH
54143: LD_STRING 
54145: ST_TO_ADDR
// animal := CreateHuman ;
54146: LD_ADDR_VAR 0 12
54150: PUSH
54151: CALL_OW 44
54155: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54156: LD_VAR 0 12
54160: PPUSH
54161: LD_VAR 0 8
54165: PPUSH
54166: LD_INT 0
54168: PPUSH
54169: CALL 56294 0 3
// end ;
54173: GO 54127
54175: POP
54176: POP
// if birds then
54177: LD_VAR 0 1
54181: IFFALSE 54248
// for i = 1 to birds do
54183: LD_ADDR_VAR 0 11
54187: PUSH
54188: DOUBLE
54189: LD_INT 1
54191: DEC
54192: ST_TO_ADDR
54193: LD_VAR 0 1
54197: PUSH
54198: FOR_TO
54199: IFFALSE 54246
// begin hc_class = 18 ;
54201: LD_ADDR_OWVAR 28
54205: PUSH
54206: LD_INT 18
54208: ST_TO_ADDR
// hc_gallery =  ;
54209: LD_ADDR_OWVAR 33
54213: PUSH
54214: LD_STRING 
54216: ST_TO_ADDR
// animal := CreateHuman ;
54217: LD_ADDR_VAR 0 12
54221: PUSH
54222: CALL_OW 44
54226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54227: LD_VAR 0 12
54231: PPUSH
54232: LD_VAR 0 8
54236: PPUSH
54237: LD_INT 0
54239: PPUSH
54240: CALL 56294 0 3
// end ;
54244: GO 54198
54246: POP
54247: POP
// if tigers then
54248: LD_VAR 0 2
54252: IFFALSE 54336
// for i = 1 to tigers do
54254: LD_ADDR_VAR 0 11
54258: PUSH
54259: DOUBLE
54260: LD_INT 1
54262: DEC
54263: ST_TO_ADDR
54264: LD_VAR 0 2
54268: PUSH
54269: FOR_TO
54270: IFFALSE 54334
// begin hc_class = class_tiger ;
54272: LD_ADDR_OWVAR 28
54276: PUSH
54277: LD_INT 14
54279: ST_TO_ADDR
// hc_gallery =  ;
54280: LD_ADDR_OWVAR 33
54284: PUSH
54285: LD_STRING 
54287: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54288: LD_ADDR_OWVAR 35
54292: PUSH
54293: LD_INT 7
54295: NEG
54296: PPUSH
54297: LD_INT 7
54299: PPUSH
54300: CALL_OW 12
54304: ST_TO_ADDR
// animal := CreateHuman ;
54305: LD_ADDR_VAR 0 12
54309: PUSH
54310: CALL_OW 44
54314: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54315: LD_VAR 0 12
54319: PPUSH
54320: LD_VAR 0 8
54324: PPUSH
54325: LD_INT 0
54327: PPUSH
54328: CALL 56294 0 3
// end ;
54332: GO 54269
54334: POP
54335: POP
// if apemans then
54336: LD_VAR 0 3
54340: IFFALSE 54463
// for i = 1 to apemans do
54342: LD_ADDR_VAR 0 11
54346: PUSH
54347: DOUBLE
54348: LD_INT 1
54350: DEC
54351: ST_TO_ADDR
54352: LD_VAR 0 3
54356: PUSH
54357: FOR_TO
54358: IFFALSE 54461
// begin hc_class = class_apeman ;
54360: LD_ADDR_OWVAR 28
54364: PUSH
54365: LD_INT 12
54367: ST_TO_ADDR
// hc_gallery =  ;
54368: LD_ADDR_OWVAR 33
54372: PUSH
54373: LD_STRING 
54375: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54376: LD_ADDR_OWVAR 35
54380: PUSH
54381: LD_INT 5
54383: NEG
54384: PPUSH
54385: LD_INT 5
54387: PPUSH
54388: CALL_OW 12
54392: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54393: LD_ADDR_OWVAR 31
54397: PUSH
54398: LD_INT 1
54400: PPUSH
54401: LD_INT 3
54403: PPUSH
54404: CALL_OW 12
54408: PUSH
54409: LD_INT 1
54411: PPUSH
54412: LD_INT 3
54414: PPUSH
54415: CALL_OW 12
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// animal := CreateHuman ;
54432: LD_ADDR_VAR 0 12
54436: PUSH
54437: CALL_OW 44
54441: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54442: LD_VAR 0 12
54446: PPUSH
54447: LD_VAR 0 8
54451: PPUSH
54452: LD_INT 0
54454: PPUSH
54455: CALL 56294 0 3
// end ;
54459: GO 54357
54461: POP
54462: POP
// if enchidnas then
54463: LD_VAR 0 4
54467: IFFALSE 54534
// for i = 1 to enchidnas do
54469: LD_ADDR_VAR 0 11
54473: PUSH
54474: DOUBLE
54475: LD_INT 1
54477: DEC
54478: ST_TO_ADDR
54479: LD_VAR 0 4
54483: PUSH
54484: FOR_TO
54485: IFFALSE 54532
// begin hc_class = 13 ;
54487: LD_ADDR_OWVAR 28
54491: PUSH
54492: LD_INT 13
54494: ST_TO_ADDR
// hc_gallery =  ;
54495: LD_ADDR_OWVAR 33
54499: PUSH
54500: LD_STRING 
54502: ST_TO_ADDR
// animal := CreateHuman ;
54503: LD_ADDR_VAR 0 12
54507: PUSH
54508: CALL_OW 44
54512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54513: LD_VAR 0 12
54517: PPUSH
54518: LD_VAR 0 8
54522: PPUSH
54523: LD_INT 0
54525: PPUSH
54526: CALL 56294 0 3
// end ;
54530: GO 54484
54532: POP
54533: POP
// if fishes then
54534: LD_VAR 0 7
54538: IFFALSE 54605
// for i = 1 to fishes do
54540: LD_ADDR_VAR 0 11
54544: PUSH
54545: DOUBLE
54546: LD_INT 1
54548: DEC
54549: ST_TO_ADDR
54550: LD_VAR 0 7
54554: PUSH
54555: FOR_TO
54556: IFFALSE 54603
// begin hc_class = 20 ;
54558: LD_ADDR_OWVAR 28
54562: PUSH
54563: LD_INT 20
54565: ST_TO_ADDR
// hc_gallery =  ;
54566: LD_ADDR_OWVAR 33
54570: PUSH
54571: LD_STRING 
54573: ST_TO_ADDR
// animal := CreateHuman ;
54574: LD_ADDR_VAR 0 12
54578: PUSH
54579: CALL_OW 44
54583: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54584: LD_VAR 0 12
54588: PPUSH
54589: LD_VAR 0 9
54593: PPUSH
54594: LD_INT 0
54596: PPUSH
54597: CALL 56294 0 3
// end ;
54601: GO 54555
54603: POP
54604: POP
// end ;
54605: LD_VAR 0 10
54609: RET
// export function WantHeal ( sci , unit ) ; begin
54610: LD_INT 0
54612: PPUSH
// if GetTaskList ( sci ) > 0 then
54613: LD_VAR 0 1
54617: PPUSH
54618: CALL_OW 437
54622: PUSH
54623: LD_INT 0
54625: GREATER
54626: IFFALSE 54696
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54628: LD_VAR 0 1
54632: PPUSH
54633: CALL_OW 437
54637: PUSH
54638: LD_INT 1
54640: ARRAY
54641: PUSH
54642: LD_INT 1
54644: ARRAY
54645: PUSH
54646: LD_STRING l
54648: EQUAL
54649: PUSH
54650: LD_VAR 0 1
54654: PPUSH
54655: CALL_OW 437
54659: PUSH
54660: LD_INT 1
54662: ARRAY
54663: PUSH
54664: LD_INT 4
54666: ARRAY
54667: PUSH
54668: LD_VAR 0 2
54672: EQUAL
54673: AND
54674: IFFALSE 54686
// result := true else
54676: LD_ADDR_VAR 0 3
54680: PUSH
54681: LD_INT 1
54683: ST_TO_ADDR
54684: GO 54694
// result := false ;
54686: LD_ADDR_VAR 0 3
54690: PUSH
54691: LD_INT 0
54693: ST_TO_ADDR
// end else
54694: GO 54704
// result := false ;
54696: LD_ADDR_VAR 0 3
54700: PUSH
54701: LD_INT 0
54703: ST_TO_ADDR
// end ;
54704: LD_VAR 0 3
54708: RET
// export function HealTarget ( sci ) ; begin
54709: LD_INT 0
54711: PPUSH
// if not sci then
54712: LD_VAR 0 1
54716: NOT
54717: IFFALSE 54721
// exit ;
54719: GO 54786
// result := 0 ;
54721: LD_ADDR_VAR 0 2
54725: PUSH
54726: LD_INT 0
54728: ST_TO_ADDR
// if GetTaskList ( sci ) then
54729: LD_VAR 0 1
54733: PPUSH
54734: CALL_OW 437
54738: IFFALSE 54786
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54740: LD_VAR 0 1
54744: PPUSH
54745: CALL_OW 437
54749: PUSH
54750: LD_INT 1
54752: ARRAY
54753: PUSH
54754: LD_INT 1
54756: ARRAY
54757: PUSH
54758: LD_STRING l
54760: EQUAL
54761: IFFALSE 54786
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54763: LD_ADDR_VAR 0 2
54767: PUSH
54768: LD_VAR 0 1
54772: PPUSH
54773: CALL_OW 437
54777: PUSH
54778: LD_INT 1
54780: ARRAY
54781: PUSH
54782: LD_INT 4
54784: ARRAY
54785: ST_TO_ADDR
// end ;
54786: LD_VAR 0 2
54790: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54791: LD_INT 0
54793: PPUSH
54794: PPUSH
54795: PPUSH
54796: PPUSH
// if not base_units then
54797: LD_VAR 0 1
54801: NOT
54802: IFFALSE 54806
// exit ;
54804: GO 54893
// result := false ;
54806: LD_ADDR_VAR 0 2
54810: PUSH
54811: LD_INT 0
54813: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54814: LD_ADDR_VAR 0 5
54818: PUSH
54819: LD_VAR 0 1
54823: PPUSH
54824: LD_INT 21
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PPUSH
54834: CALL_OW 72
54838: ST_TO_ADDR
// if not tmp then
54839: LD_VAR 0 5
54843: NOT
54844: IFFALSE 54848
// exit ;
54846: GO 54893
// for i in tmp do
54848: LD_ADDR_VAR 0 3
54852: PUSH
54853: LD_VAR 0 5
54857: PUSH
54858: FOR_IN
54859: IFFALSE 54891
// begin result := EnemyInRange ( i , 22 ) ;
54861: LD_ADDR_VAR 0 2
54865: PUSH
54866: LD_VAR 0 3
54870: PPUSH
54871: LD_INT 22
54873: PPUSH
54874: CALL 53129 0 2
54878: ST_TO_ADDR
// if result then
54879: LD_VAR 0 2
54883: IFFALSE 54889
// exit ;
54885: POP
54886: POP
54887: GO 54893
// end ;
54889: GO 54858
54891: POP
54892: POP
// end ;
54893: LD_VAR 0 2
54897: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54898: LD_INT 0
54900: PPUSH
54901: PPUSH
// if not units then
54902: LD_VAR 0 1
54906: NOT
54907: IFFALSE 54911
// exit ;
54909: GO 54981
// result := [ ] ;
54911: LD_ADDR_VAR 0 3
54915: PUSH
54916: EMPTY
54917: ST_TO_ADDR
// for i in units do
54918: LD_ADDR_VAR 0 4
54922: PUSH
54923: LD_VAR 0 1
54927: PUSH
54928: FOR_IN
54929: IFFALSE 54979
// if GetTag ( i ) = tag then
54931: LD_VAR 0 4
54935: PPUSH
54936: CALL_OW 110
54940: PUSH
54941: LD_VAR 0 2
54945: EQUAL
54946: IFFALSE 54977
// result := Insert ( result , result + 1 , i ) ;
54948: LD_ADDR_VAR 0 3
54952: PUSH
54953: LD_VAR 0 3
54957: PPUSH
54958: LD_VAR 0 3
54962: PUSH
54963: LD_INT 1
54965: PLUS
54966: PPUSH
54967: LD_VAR 0 4
54971: PPUSH
54972: CALL_OW 2
54976: ST_TO_ADDR
54977: GO 54928
54979: POP
54980: POP
// end ;
54981: LD_VAR 0 3
54985: RET
// export function IsDriver ( un ) ; begin
54986: LD_INT 0
54988: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54989: LD_ADDR_VAR 0 2
54993: PUSH
54994: LD_VAR 0 1
54998: PUSH
54999: LD_INT 55
55001: PUSH
55002: EMPTY
55003: LIST
55004: PPUSH
55005: CALL_OW 69
55009: IN
55010: ST_TO_ADDR
// end ;
55011: LD_VAR 0 2
55015: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55016: LD_INT 0
55018: PPUSH
55019: PPUSH
// list := [ ] ;
55020: LD_ADDR_VAR 0 5
55024: PUSH
55025: EMPTY
55026: ST_TO_ADDR
// case d of 0 :
55027: LD_VAR 0 3
55031: PUSH
55032: LD_INT 0
55034: DOUBLE
55035: EQUAL
55036: IFTRUE 55040
55038: GO 55173
55040: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55041: LD_ADDR_VAR 0 5
55045: PUSH
55046: LD_VAR 0 1
55050: PUSH
55051: LD_INT 4
55053: MINUS
55054: PUSH
55055: LD_VAR 0 2
55059: PUSH
55060: LD_INT 4
55062: MINUS
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: PUSH
55072: LD_VAR 0 1
55076: PUSH
55077: LD_INT 3
55079: MINUS
55080: PUSH
55081: LD_VAR 0 2
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: LIST
55093: PUSH
55094: LD_VAR 0 1
55098: PUSH
55099: LD_INT 4
55101: PLUS
55102: PUSH
55103: LD_VAR 0 2
55107: PUSH
55108: LD_INT 4
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: PUSH
55116: LD_VAR 0 1
55120: PUSH
55121: LD_INT 3
55123: PLUS
55124: PUSH
55125: LD_VAR 0 2
55129: PUSH
55130: LD_INT 3
55132: PLUS
55133: PUSH
55134: LD_INT 5
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: PUSH
55142: LD_VAR 0 1
55146: PUSH
55147: LD_VAR 0 2
55151: PUSH
55152: LD_INT 4
55154: PLUS
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: ST_TO_ADDR
// end ; 1 :
55171: GO 55871
55173: LD_INT 1
55175: DOUBLE
55176: EQUAL
55177: IFTRUE 55181
55179: GO 55314
55181: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55182: LD_ADDR_VAR 0 5
55186: PUSH
55187: LD_VAR 0 1
55191: PUSH
55192: LD_VAR 0 2
55196: PUSH
55197: LD_INT 4
55199: MINUS
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: PUSH
55209: LD_VAR 0 1
55213: PUSH
55214: LD_INT 3
55216: MINUS
55217: PUSH
55218: LD_VAR 0 2
55222: PUSH
55223: LD_INT 3
55225: MINUS
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: PUSH
55235: LD_VAR 0 1
55239: PUSH
55240: LD_INT 4
55242: MINUS
55243: PUSH
55244: LD_VAR 0 2
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_VAR 0 2
55266: PUSH
55267: LD_INT 3
55269: PLUS
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: PUSH
55279: LD_VAR 0 1
55283: PUSH
55284: LD_INT 4
55286: PLUS
55287: PUSH
55288: LD_VAR 0 2
55292: PUSH
55293: LD_INT 4
55295: PLUS
55296: PUSH
55297: LD_INT 5
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// end ; 2 :
55312: GO 55871
55314: LD_INT 2
55316: DOUBLE
55317: EQUAL
55318: IFTRUE 55322
55320: GO 55451
55322: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55323: LD_ADDR_VAR 0 5
55327: PUSH
55328: LD_VAR 0 1
55332: PUSH
55333: LD_VAR 0 2
55337: PUSH
55338: LD_INT 3
55340: MINUS
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: PUSH
55350: LD_VAR 0 1
55354: PUSH
55355: LD_INT 4
55357: PLUS
55358: PUSH
55359: LD_VAR 0 2
55363: PUSH
55364: LD_INT 4
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: PUSH
55372: LD_VAR 0 1
55376: PUSH
55377: LD_VAR 0 2
55381: PUSH
55382: LD_INT 4
55384: PLUS
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: PUSH
55394: LD_VAR 0 1
55398: PUSH
55399: LD_INT 3
55401: MINUS
55402: PUSH
55403: LD_VAR 0 2
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: LIST
55415: PUSH
55416: LD_VAR 0 1
55420: PUSH
55421: LD_INT 4
55423: MINUS
55424: PUSH
55425: LD_VAR 0 2
55429: PUSH
55430: LD_INT 4
55432: MINUS
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: ST_TO_ADDR
// end ; 3 :
55449: GO 55871
55451: LD_INT 3
55453: DOUBLE
55454: EQUAL
55455: IFTRUE 55459
55457: GO 55592
55459: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55460: LD_ADDR_VAR 0 5
55464: PUSH
55465: LD_VAR 0 1
55469: PUSH
55470: LD_INT 3
55472: PLUS
55473: PUSH
55474: LD_VAR 0 2
55478: PUSH
55479: LD_INT 4
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: PUSH
55487: LD_VAR 0 1
55491: PUSH
55492: LD_INT 4
55494: PLUS
55495: PUSH
55496: LD_VAR 0 2
55500: PUSH
55501: LD_INT 4
55503: PLUS
55504: PUSH
55505: LD_INT 5
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: LIST
55512: PUSH
55513: LD_VAR 0 1
55517: PUSH
55518: LD_INT 4
55520: MINUS
55521: PUSH
55522: LD_VAR 0 2
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: LIST
55534: PUSH
55535: LD_VAR 0 1
55539: PUSH
55540: LD_VAR 0 2
55544: PUSH
55545: LD_INT 4
55547: MINUS
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: PUSH
55557: LD_VAR 0 1
55561: PUSH
55562: LD_INT 3
55564: MINUS
55565: PUSH
55566: LD_VAR 0 2
55570: PUSH
55571: LD_INT 3
55573: MINUS
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: ST_TO_ADDR
// end ; 4 :
55590: GO 55871
55592: LD_INT 4
55594: DOUBLE
55595: EQUAL
55596: IFTRUE 55600
55598: GO 55733
55600: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55601: LD_ADDR_VAR 0 5
55605: PUSH
55606: LD_VAR 0 1
55610: PUSH
55611: LD_VAR 0 2
55615: PUSH
55616: LD_INT 4
55618: PLUS
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: LIST
55627: PUSH
55628: LD_VAR 0 1
55632: PUSH
55633: LD_INT 3
55635: PLUS
55636: PUSH
55637: LD_VAR 0 2
55641: PUSH
55642: LD_INT 3
55644: PLUS
55645: PUSH
55646: LD_INT 5
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: PUSH
55654: LD_VAR 0 1
55658: PUSH
55659: LD_INT 4
55661: PLUS
55662: PUSH
55663: LD_VAR 0 2
55667: PUSH
55668: LD_INT 4
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: LIST
55675: PUSH
55676: LD_VAR 0 1
55680: PUSH
55681: LD_VAR 0 2
55685: PUSH
55686: LD_INT 3
55688: MINUS
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: PUSH
55698: LD_VAR 0 1
55702: PUSH
55703: LD_INT 4
55705: MINUS
55706: PUSH
55707: LD_VAR 0 2
55711: PUSH
55712: LD_INT 4
55714: MINUS
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: ST_TO_ADDR
// end ; 5 :
55731: GO 55871
55733: LD_INT 5
55735: DOUBLE
55736: EQUAL
55737: IFTRUE 55741
55739: GO 55870
55741: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55742: LD_ADDR_VAR 0 5
55746: PUSH
55747: LD_VAR 0 1
55751: PUSH
55752: LD_INT 4
55754: MINUS
55755: PUSH
55756: LD_VAR 0 2
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: PUSH
55769: LD_VAR 0 1
55773: PUSH
55774: LD_VAR 0 2
55778: PUSH
55779: LD_INT 4
55781: MINUS
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: LIST
55790: PUSH
55791: LD_VAR 0 1
55795: PUSH
55796: LD_INT 4
55798: PLUS
55799: PUSH
55800: LD_VAR 0 2
55804: PUSH
55805: LD_INT 4
55807: PLUS
55808: PUSH
55809: LD_INT 5
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: PUSH
55817: LD_VAR 0 1
55821: PUSH
55822: LD_INT 3
55824: PLUS
55825: PUSH
55826: LD_VAR 0 2
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: PUSH
55839: LD_VAR 0 1
55843: PUSH
55844: LD_VAR 0 2
55848: PUSH
55849: LD_INT 3
55851: PLUS
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: LIST
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: ST_TO_ADDR
// end ; end ;
55868: GO 55871
55870: POP
// result := list ;
55871: LD_ADDR_VAR 0 4
55875: PUSH
55876: LD_VAR 0 5
55880: ST_TO_ADDR
// end ;
55881: LD_VAR 0 4
55885: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55886: LD_INT 0
55888: PPUSH
55889: PPUSH
55890: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55891: LD_VAR 0 1
55895: NOT
55896: PUSH
55897: LD_VAR 0 2
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: LD_INT 4
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: IN
55920: NOT
55921: OR
55922: IFFALSE 55926
// exit ;
55924: GO 56018
// tmp := [ ] ;
55926: LD_ADDR_VAR 0 5
55930: PUSH
55931: EMPTY
55932: ST_TO_ADDR
// for i in units do
55933: LD_ADDR_VAR 0 4
55937: PUSH
55938: LD_VAR 0 1
55942: PUSH
55943: FOR_IN
55944: IFFALSE 55987
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55946: LD_ADDR_VAR 0 5
55950: PUSH
55951: LD_VAR 0 5
55955: PPUSH
55956: LD_VAR 0 5
55960: PUSH
55961: LD_INT 1
55963: PLUS
55964: PPUSH
55965: LD_VAR 0 4
55969: PPUSH
55970: LD_VAR 0 2
55974: PPUSH
55975: CALL_OW 259
55979: PPUSH
55980: CALL_OW 2
55984: ST_TO_ADDR
55985: GO 55943
55987: POP
55988: POP
// if not tmp then
55989: LD_VAR 0 5
55993: NOT
55994: IFFALSE 55998
// exit ;
55996: GO 56018
// result := SortListByListDesc ( units , tmp ) ;
55998: LD_ADDR_VAR 0 3
56002: PUSH
56003: LD_VAR 0 1
56007: PPUSH
56008: LD_VAR 0 5
56012: PPUSH
56013: CALL_OW 77
56017: ST_TO_ADDR
// end ;
56018: LD_VAR 0 3
56022: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56023: LD_INT 0
56025: PPUSH
56026: PPUSH
56027: PPUSH
// result := false ;
56028: LD_ADDR_VAR 0 3
56032: PUSH
56033: LD_INT 0
56035: ST_TO_ADDR
// x := GetX ( building ) ;
56036: LD_ADDR_VAR 0 4
56040: PUSH
56041: LD_VAR 0 2
56045: PPUSH
56046: CALL_OW 250
56050: ST_TO_ADDR
// y := GetY ( building ) ;
56051: LD_ADDR_VAR 0 5
56055: PUSH
56056: LD_VAR 0 2
56060: PPUSH
56061: CALL_OW 251
56065: ST_TO_ADDR
// if not building or not x or not y then
56066: LD_VAR 0 2
56070: NOT
56071: PUSH
56072: LD_VAR 0 4
56076: NOT
56077: OR
56078: PUSH
56079: LD_VAR 0 5
56083: NOT
56084: OR
56085: IFFALSE 56089
// exit ;
56087: GO 56181
// if GetTaskList ( unit ) then
56089: LD_VAR 0 1
56093: PPUSH
56094: CALL_OW 437
56098: IFFALSE 56181
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56100: LD_STRING e
56102: PUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: CALL_OW 437
56112: PUSH
56113: LD_INT 1
56115: ARRAY
56116: PUSH
56117: LD_INT 1
56119: ARRAY
56120: EQUAL
56121: PUSH
56122: LD_VAR 0 4
56126: PUSH
56127: LD_VAR 0 1
56131: PPUSH
56132: CALL_OW 437
56136: PUSH
56137: LD_INT 1
56139: ARRAY
56140: PUSH
56141: LD_INT 2
56143: ARRAY
56144: EQUAL
56145: AND
56146: PUSH
56147: LD_VAR 0 5
56151: PUSH
56152: LD_VAR 0 1
56156: PPUSH
56157: CALL_OW 437
56161: PUSH
56162: LD_INT 1
56164: ARRAY
56165: PUSH
56166: LD_INT 3
56168: ARRAY
56169: EQUAL
56170: AND
56171: IFFALSE 56181
// result := true end ;
56173: LD_ADDR_VAR 0 3
56177: PUSH
56178: LD_INT 1
56180: ST_TO_ADDR
// end ;
56181: LD_VAR 0 3
56185: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56186: LD_INT 0
56188: PPUSH
// result := false ;
56189: LD_ADDR_VAR 0 4
56193: PUSH
56194: LD_INT 0
56196: ST_TO_ADDR
// if GetTaskList ( unit ) then
56197: LD_VAR 0 1
56201: PPUSH
56202: CALL_OW 437
56206: IFFALSE 56289
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56208: LD_STRING M
56210: PUSH
56211: LD_VAR 0 1
56215: PPUSH
56216: CALL_OW 437
56220: PUSH
56221: LD_INT 1
56223: ARRAY
56224: PUSH
56225: LD_INT 1
56227: ARRAY
56228: EQUAL
56229: PUSH
56230: LD_VAR 0 2
56234: PUSH
56235: LD_VAR 0 1
56239: PPUSH
56240: CALL_OW 437
56244: PUSH
56245: LD_INT 1
56247: ARRAY
56248: PUSH
56249: LD_INT 2
56251: ARRAY
56252: EQUAL
56253: AND
56254: PUSH
56255: LD_VAR 0 3
56259: PUSH
56260: LD_VAR 0 1
56264: PPUSH
56265: CALL_OW 437
56269: PUSH
56270: LD_INT 1
56272: ARRAY
56273: PUSH
56274: LD_INT 3
56276: ARRAY
56277: EQUAL
56278: AND
56279: IFFALSE 56289
// result := true ;
56281: LD_ADDR_VAR 0 4
56285: PUSH
56286: LD_INT 1
56288: ST_TO_ADDR
// end ; end ;
56289: LD_VAR 0 4
56293: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56294: LD_INT 0
56296: PPUSH
56297: PPUSH
56298: PPUSH
56299: PPUSH
// if not unit or not area then
56300: LD_VAR 0 1
56304: NOT
56305: PUSH
56306: LD_VAR 0 2
56310: NOT
56311: OR
56312: IFFALSE 56316
// exit ;
56314: GO 56480
// tmp := AreaToList ( area , i ) ;
56316: LD_ADDR_VAR 0 6
56320: PUSH
56321: LD_VAR 0 2
56325: PPUSH
56326: LD_VAR 0 5
56330: PPUSH
56331: CALL_OW 517
56335: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56336: LD_ADDR_VAR 0 5
56340: PUSH
56341: DOUBLE
56342: LD_INT 1
56344: DEC
56345: ST_TO_ADDR
56346: LD_VAR 0 6
56350: PUSH
56351: LD_INT 1
56353: ARRAY
56354: PUSH
56355: FOR_TO
56356: IFFALSE 56478
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56358: LD_ADDR_VAR 0 7
56362: PUSH
56363: LD_VAR 0 6
56367: PUSH
56368: LD_INT 1
56370: ARRAY
56371: PUSH
56372: LD_VAR 0 5
56376: ARRAY
56377: PUSH
56378: LD_VAR 0 6
56382: PUSH
56383: LD_INT 2
56385: ARRAY
56386: PUSH
56387: LD_VAR 0 5
56391: ARRAY
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56397: LD_VAR 0 7
56401: PUSH
56402: LD_INT 1
56404: ARRAY
56405: PPUSH
56406: LD_VAR 0 7
56410: PUSH
56411: LD_INT 2
56413: ARRAY
56414: PPUSH
56415: CALL_OW 428
56419: PUSH
56420: LD_INT 0
56422: EQUAL
56423: IFFALSE 56476
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56425: LD_VAR 0 1
56429: PPUSH
56430: LD_VAR 0 7
56434: PUSH
56435: LD_INT 1
56437: ARRAY
56438: PPUSH
56439: LD_VAR 0 7
56443: PUSH
56444: LD_INT 2
56446: ARRAY
56447: PPUSH
56448: LD_VAR 0 3
56452: PPUSH
56453: CALL_OW 48
// result := IsPlaced ( unit ) ;
56457: LD_ADDR_VAR 0 4
56461: PUSH
56462: LD_VAR 0 1
56466: PPUSH
56467: CALL_OW 305
56471: ST_TO_ADDR
// exit ;
56472: POP
56473: POP
56474: GO 56480
// end ; end ;
56476: GO 56355
56478: POP
56479: POP
// end ;
56480: LD_VAR 0 4
56484: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56485: LD_INT 0
56487: PPUSH
56488: PPUSH
56489: PPUSH
// if not side or side > 8 then
56490: LD_VAR 0 1
56494: NOT
56495: PUSH
56496: LD_VAR 0 1
56500: PUSH
56501: LD_INT 8
56503: GREATER
56504: OR
56505: IFFALSE 56509
// exit ;
56507: GO 56696
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56509: LD_ADDR_VAR 0 4
56513: PUSH
56514: LD_INT 22
56516: PUSH
56517: LD_VAR 0 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 21
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PPUSH
56540: CALL_OW 69
56544: ST_TO_ADDR
// if not tmp then
56545: LD_VAR 0 4
56549: NOT
56550: IFFALSE 56554
// exit ;
56552: GO 56696
// enable_addtolog := true ;
56554: LD_ADDR_OWVAR 81
56558: PUSH
56559: LD_INT 1
56561: ST_TO_ADDR
// AddToLog ( [ ) ;
56562: LD_STRING [
56564: PPUSH
56565: CALL_OW 561
// for i in tmp do
56569: LD_ADDR_VAR 0 3
56573: PUSH
56574: LD_VAR 0 4
56578: PUSH
56579: FOR_IN
56580: IFFALSE 56687
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56582: LD_STRING [
56584: PUSH
56585: LD_VAR 0 3
56589: PPUSH
56590: CALL_OW 266
56594: STR
56595: PUSH
56596: LD_STRING , 
56598: STR
56599: PUSH
56600: LD_VAR 0 3
56604: PPUSH
56605: CALL_OW 250
56609: STR
56610: PUSH
56611: LD_STRING , 
56613: STR
56614: PUSH
56615: LD_VAR 0 3
56619: PPUSH
56620: CALL_OW 251
56624: STR
56625: PUSH
56626: LD_STRING , 
56628: STR
56629: PUSH
56630: LD_VAR 0 3
56634: PPUSH
56635: CALL_OW 254
56639: STR
56640: PUSH
56641: LD_STRING , 
56643: STR
56644: PUSH
56645: LD_VAR 0 3
56649: PPUSH
56650: LD_INT 1
56652: PPUSH
56653: CALL_OW 268
56657: STR
56658: PUSH
56659: LD_STRING , 
56661: STR
56662: PUSH
56663: LD_VAR 0 3
56667: PPUSH
56668: LD_INT 2
56670: PPUSH
56671: CALL_OW 268
56675: STR
56676: PUSH
56677: LD_STRING ],
56679: STR
56680: PPUSH
56681: CALL_OW 561
// end ;
56685: GO 56579
56687: POP
56688: POP
// AddToLog ( ]; ) ;
56689: LD_STRING ];
56691: PPUSH
56692: CALL_OW 561
// end ;
56696: LD_VAR 0 2
56700: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56701: LD_INT 0
56703: PPUSH
56704: PPUSH
56705: PPUSH
56706: PPUSH
56707: PPUSH
// if not area or not rate or not max then
56708: LD_VAR 0 1
56712: NOT
56713: PUSH
56714: LD_VAR 0 2
56718: NOT
56719: OR
56720: PUSH
56721: LD_VAR 0 4
56725: NOT
56726: OR
56727: IFFALSE 56731
// exit ;
56729: GO 56923
// while 1 do
56731: LD_INT 1
56733: IFFALSE 56923
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56735: LD_ADDR_VAR 0 9
56739: PUSH
56740: LD_VAR 0 1
56744: PPUSH
56745: LD_INT 1
56747: PPUSH
56748: CALL_OW 287
56752: PUSH
56753: LD_INT 10
56755: MUL
56756: ST_TO_ADDR
// r := rate / 10 ;
56757: LD_ADDR_VAR 0 7
56761: PUSH
56762: LD_VAR 0 2
56766: PUSH
56767: LD_INT 10
56769: DIVREAL
56770: ST_TO_ADDR
// time := 1 1$00 ;
56771: LD_ADDR_VAR 0 8
56775: PUSH
56776: LD_INT 2100
56778: ST_TO_ADDR
// if amount < min then
56779: LD_VAR 0 9
56783: PUSH
56784: LD_VAR 0 3
56788: LESS
56789: IFFALSE 56807
// r := r * 2 else
56791: LD_ADDR_VAR 0 7
56795: PUSH
56796: LD_VAR 0 7
56800: PUSH
56801: LD_INT 2
56803: MUL
56804: ST_TO_ADDR
56805: GO 56833
// if amount > max then
56807: LD_VAR 0 9
56811: PUSH
56812: LD_VAR 0 4
56816: GREATER
56817: IFFALSE 56833
// r := r / 2 ;
56819: LD_ADDR_VAR 0 7
56823: PUSH
56824: LD_VAR 0 7
56828: PUSH
56829: LD_INT 2
56831: DIVREAL
56832: ST_TO_ADDR
// time := time / r ;
56833: LD_ADDR_VAR 0 8
56837: PUSH
56838: LD_VAR 0 8
56842: PUSH
56843: LD_VAR 0 7
56847: DIVREAL
56848: ST_TO_ADDR
// if time < 0 then
56849: LD_VAR 0 8
56853: PUSH
56854: LD_INT 0
56856: LESS
56857: IFFALSE 56874
// time := time * - 1 ;
56859: LD_ADDR_VAR 0 8
56863: PUSH
56864: LD_VAR 0 8
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: MUL
56873: ST_TO_ADDR
// wait ( time ) ;
56874: LD_VAR 0 8
56878: PPUSH
56879: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56883: LD_INT 35
56885: PPUSH
56886: LD_INT 875
56888: PPUSH
56889: CALL_OW 12
56893: PPUSH
56894: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56898: LD_INT 1
56900: PPUSH
56901: LD_INT 5
56903: PPUSH
56904: CALL_OW 12
56908: PPUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: LD_INT 1
56916: PPUSH
56917: CALL_OW 55
// end ;
56921: GO 56731
// end ;
56923: LD_VAR 0 5
56927: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56928: LD_INT 0
56930: PPUSH
56931: PPUSH
56932: PPUSH
56933: PPUSH
56934: PPUSH
56935: PPUSH
56936: PPUSH
56937: PPUSH
// if not turrets or not factories then
56938: LD_VAR 0 1
56942: NOT
56943: PUSH
56944: LD_VAR 0 2
56948: NOT
56949: OR
56950: IFFALSE 56954
// exit ;
56952: GO 57261
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56954: LD_ADDR_VAR 0 10
56958: PUSH
56959: LD_INT 5
56961: PUSH
56962: LD_INT 6
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 4
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: LD_INT 5
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 24
56996: PUSH
56997: LD_INT 25
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 23
57006: PUSH
57007: LD_INT 27
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 42
57020: PUSH
57021: LD_INT 43
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 44
57030: PUSH
57031: LD_INT 46
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 45
57040: PUSH
57041: LD_INT 47
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// result := [ ] ;
57058: LD_ADDR_VAR 0 3
57062: PUSH
57063: EMPTY
57064: ST_TO_ADDR
// for i in turrets do
57065: LD_ADDR_VAR 0 4
57069: PUSH
57070: LD_VAR 0 1
57074: PUSH
57075: FOR_IN
57076: IFFALSE 57259
// begin nat := GetNation ( i ) ;
57078: LD_ADDR_VAR 0 7
57082: PUSH
57083: LD_VAR 0 4
57087: PPUSH
57088: CALL_OW 248
57092: ST_TO_ADDR
// weapon := 0 ;
57093: LD_ADDR_VAR 0 8
57097: PUSH
57098: LD_INT 0
57100: ST_TO_ADDR
// if not nat then
57101: LD_VAR 0 7
57105: NOT
57106: IFFALSE 57110
// continue ;
57108: GO 57075
// for j in list [ nat ] do
57110: LD_ADDR_VAR 0 5
57114: PUSH
57115: LD_VAR 0 10
57119: PUSH
57120: LD_VAR 0 7
57124: ARRAY
57125: PUSH
57126: FOR_IN
57127: IFFALSE 57168
// if GetBWeapon ( i ) = j [ 1 ] then
57129: LD_VAR 0 4
57133: PPUSH
57134: CALL_OW 269
57138: PUSH
57139: LD_VAR 0 5
57143: PUSH
57144: LD_INT 1
57146: ARRAY
57147: EQUAL
57148: IFFALSE 57166
// begin weapon := j [ 2 ] ;
57150: LD_ADDR_VAR 0 8
57154: PUSH
57155: LD_VAR 0 5
57159: PUSH
57160: LD_INT 2
57162: ARRAY
57163: ST_TO_ADDR
// break ;
57164: GO 57168
// end ;
57166: GO 57126
57168: POP
57169: POP
// if not weapon then
57170: LD_VAR 0 8
57174: NOT
57175: IFFALSE 57179
// continue ;
57177: GO 57075
// for k in factories do
57179: LD_ADDR_VAR 0 6
57183: PUSH
57184: LD_VAR 0 2
57188: PUSH
57189: FOR_IN
57190: IFFALSE 57255
// begin weapons := AvailableWeaponList ( k ) ;
57192: LD_ADDR_VAR 0 9
57196: PUSH
57197: LD_VAR 0 6
57201: PPUSH
57202: CALL_OW 478
57206: ST_TO_ADDR
// if not weapons then
57207: LD_VAR 0 9
57211: NOT
57212: IFFALSE 57216
// continue ;
57214: GO 57189
// if weapon in weapons then
57216: LD_VAR 0 8
57220: PUSH
57221: LD_VAR 0 9
57225: IN
57226: IFFALSE 57253
// begin result := [ i , weapon ] ;
57228: LD_ADDR_VAR 0 3
57232: PUSH
57233: LD_VAR 0 4
57237: PUSH
57238: LD_VAR 0 8
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: ST_TO_ADDR
// exit ;
57247: POP
57248: POP
57249: POP
57250: POP
57251: GO 57261
// end ; end ;
57253: GO 57189
57255: POP
57256: POP
// end ;
57257: GO 57075
57259: POP
57260: POP
// end ;
57261: LD_VAR 0 3
57265: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57266: LD_INT 0
57268: PPUSH
// if not side or side > 8 then
57269: LD_VAR 0 3
57273: NOT
57274: PUSH
57275: LD_VAR 0 3
57279: PUSH
57280: LD_INT 8
57282: GREATER
57283: OR
57284: IFFALSE 57288
// exit ;
57286: GO 57347
// if not range then
57288: LD_VAR 0 4
57292: NOT
57293: IFFALSE 57304
// range := - 12 ;
57295: LD_ADDR_VAR 0 4
57299: PUSH
57300: LD_INT 12
57302: NEG
57303: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57304: LD_VAR 0 1
57308: PPUSH
57309: LD_VAR 0 2
57313: PPUSH
57314: LD_VAR 0 3
57318: PPUSH
57319: LD_VAR 0 4
57323: PPUSH
57324: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57328: LD_VAR 0 1
57332: PPUSH
57333: LD_VAR 0 2
57337: PPUSH
57338: LD_VAR 0 3
57342: PPUSH
57343: CALL_OW 331
// end ;
57347: LD_VAR 0 5
57351: RET
// export function Video ( mode ) ; begin
57352: LD_INT 0
57354: PPUSH
// ingame_video = mode ;
57355: LD_ADDR_OWVAR 52
57359: PUSH
57360: LD_VAR 0 1
57364: ST_TO_ADDR
// interface_hidden = mode ;
57365: LD_ADDR_OWVAR 54
57369: PUSH
57370: LD_VAR 0 1
57374: ST_TO_ADDR
// end ;
57375: LD_VAR 0 2
57379: RET
// export function Join ( array , element ) ; begin
57380: LD_INT 0
57382: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57383: LD_ADDR_VAR 0 3
57387: PUSH
57388: LD_VAR 0 1
57392: PPUSH
57393: LD_VAR 0 1
57397: PUSH
57398: LD_INT 1
57400: PLUS
57401: PPUSH
57402: LD_VAR 0 2
57406: PPUSH
57407: CALL_OW 1
57411: ST_TO_ADDR
// end ;
57412: LD_VAR 0 3
57416: RET
// export function JoinUnion ( array , element ) ; begin
57417: LD_INT 0
57419: PPUSH
// result := array union element ;
57420: LD_ADDR_VAR 0 3
57424: PUSH
57425: LD_VAR 0 1
57429: PUSH
57430: LD_VAR 0 2
57434: UNION
57435: ST_TO_ADDR
// end ;
57436: LD_VAR 0 3
57440: RET
// export function GetBehemoths ( side ) ; begin
57441: LD_INT 0
57443: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57444: LD_ADDR_VAR 0 2
57448: PUSH
57449: LD_INT 22
57451: PUSH
57452: LD_VAR 0 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 31
57463: PUSH
57464: LD_INT 25
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PPUSH
57475: CALL_OW 69
57479: ST_TO_ADDR
// end ;
57480: LD_VAR 0 2
57484: RET
// export function Shuffle ( array ) ; var i , index ; begin
57485: LD_INT 0
57487: PPUSH
57488: PPUSH
57489: PPUSH
// result := [ ] ;
57490: LD_ADDR_VAR 0 2
57494: PUSH
57495: EMPTY
57496: ST_TO_ADDR
// if not array then
57497: LD_VAR 0 1
57501: NOT
57502: IFFALSE 57506
// exit ;
57504: GO 57605
// Randomize ;
57506: CALL_OW 10
// for i = array downto 1 do
57510: LD_ADDR_VAR 0 3
57514: PUSH
57515: DOUBLE
57516: LD_VAR 0 1
57520: INC
57521: ST_TO_ADDR
57522: LD_INT 1
57524: PUSH
57525: FOR_DOWNTO
57526: IFFALSE 57603
// begin index := rand ( 1 , array ) ;
57528: LD_ADDR_VAR 0 4
57532: PUSH
57533: LD_INT 1
57535: PPUSH
57536: LD_VAR 0 1
57540: PPUSH
57541: CALL_OW 12
57545: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57546: LD_ADDR_VAR 0 2
57550: PUSH
57551: LD_VAR 0 2
57555: PPUSH
57556: LD_VAR 0 2
57560: PUSH
57561: LD_INT 1
57563: PLUS
57564: PPUSH
57565: LD_VAR 0 1
57569: PUSH
57570: LD_VAR 0 4
57574: ARRAY
57575: PPUSH
57576: CALL_OW 2
57580: ST_TO_ADDR
// array := Delete ( array , index ) ;
57581: LD_ADDR_VAR 0 1
57585: PUSH
57586: LD_VAR 0 1
57590: PPUSH
57591: LD_VAR 0 4
57595: PPUSH
57596: CALL_OW 3
57600: ST_TO_ADDR
// end ;
57601: GO 57525
57603: POP
57604: POP
// end ;
57605: LD_VAR 0 2
57609: RET
// export function GetBaseMaterials ( base ) ; begin
57610: LD_INT 0
57612: PPUSH
// result := [ 0 , 0 , 0 ] ;
57613: LD_ADDR_VAR 0 2
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// if not base then
57632: LD_VAR 0 1
57636: NOT
57637: IFFALSE 57641
// exit ;
57639: GO 57690
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57641: LD_ADDR_VAR 0 2
57645: PUSH
57646: LD_VAR 0 1
57650: PPUSH
57651: LD_INT 1
57653: PPUSH
57654: CALL_OW 275
57658: PUSH
57659: LD_VAR 0 1
57663: PPUSH
57664: LD_INT 2
57666: PPUSH
57667: CALL_OW 275
57671: PUSH
57672: LD_VAR 0 1
57676: PPUSH
57677: LD_INT 3
57679: PPUSH
57680: CALL_OW 275
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: LIST
57689: ST_TO_ADDR
// end ;
57690: LD_VAR 0 2
57694: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57695: LD_INT 0
57697: PPUSH
57698: PPUSH
// result := array ;
57699: LD_ADDR_VAR 0 3
57703: PUSH
57704: LD_VAR 0 1
57708: ST_TO_ADDR
// if size > 0 then
57709: LD_VAR 0 2
57713: PUSH
57714: LD_INT 0
57716: GREATER
57717: IFFALSE 57763
// for i := array downto size do
57719: LD_ADDR_VAR 0 4
57723: PUSH
57724: DOUBLE
57725: LD_VAR 0 1
57729: INC
57730: ST_TO_ADDR
57731: LD_VAR 0 2
57735: PUSH
57736: FOR_DOWNTO
57737: IFFALSE 57761
// result := Delete ( result , result ) ;
57739: LD_ADDR_VAR 0 3
57743: PUSH
57744: LD_VAR 0 3
57748: PPUSH
57749: LD_VAR 0 3
57753: PPUSH
57754: CALL_OW 3
57758: ST_TO_ADDR
57759: GO 57736
57761: POP
57762: POP
// end ;
57763: LD_VAR 0 3
57767: RET
// export function ComExit ( unit ) ; var tmp ; begin
57768: LD_INT 0
57770: PPUSH
57771: PPUSH
// if not IsInUnit ( unit ) then
57772: LD_VAR 0 1
57776: PPUSH
57777: CALL_OW 310
57781: NOT
57782: IFFALSE 57786
// exit ;
57784: GO 57846
// tmp := IsInUnit ( unit ) ;
57786: LD_ADDR_VAR 0 3
57790: PUSH
57791: LD_VAR 0 1
57795: PPUSH
57796: CALL_OW 310
57800: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57801: LD_VAR 0 3
57805: PPUSH
57806: CALL_OW 247
57810: PUSH
57811: LD_INT 2
57813: EQUAL
57814: IFFALSE 57827
// ComExitVehicle ( unit ) else
57816: LD_VAR 0 1
57820: PPUSH
57821: CALL_OW 121
57825: GO 57836
// ComExitBuilding ( unit ) ;
57827: LD_VAR 0 1
57831: PPUSH
57832: CALL_OW 122
// result := tmp ;
57836: LD_ADDR_VAR 0 2
57840: PUSH
57841: LD_VAR 0 3
57845: ST_TO_ADDR
// end ;
57846: LD_VAR 0 2
57850: RET
// export function ResetHc ; begin
57851: LD_INT 0
57853: PPUSH
// InitHc ;
57854: CALL_OW 19
// hc_importance := 0 ;
57858: LD_ADDR_OWVAR 32
57862: PUSH
57863: LD_INT 0
57865: ST_TO_ADDR
// end ;
57866: LD_VAR 0 1
57870: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57871: LD_INT 0
57873: PPUSH
57874: PPUSH
57875: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57876: LD_ADDR_VAR 0 6
57880: PUSH
57881: LD_VAR 0 1
57885: PUSH
57886: LD_VAR 0 3
57890: PLUS
57891: PUSH
57892: LD_INT 2
57894: DIV
57895: ST_TO_ADDR
// if _x < 0 then
57896: LD_VAR 0 6
57900: PUSH
57901: LD_INT 0
57903: LESS
57904: IFFALSE 57921
// _x := _x * - 1 ;
57906: LD_ADDR_VAR 0 6
57910: PUSH
57911: LD_VAR 0 6
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: MUL
57920: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57921: LD_ADDR_VAR 0 7
57925: PUSH
57926: LD_VAR 0 2
57930: PUSH
57931: LD_VAR 0 4
57935: PLUS
57936: PUSH
57937: LD_INT 2
57939: DIV
57940: ST_TO_ADDR
// if _y < 0 then
57941: LD_VAR 0 7
57945: PUSH
57946: LD_INT 0
57948: LESS
57949: IFFALSE 57966
// _y := _y * - 1 ;
57951: LD_ADDR_VAR 0 7
57955: PUSH
57956: LD_VAR 0 7
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: MUL
57965: ST_TO_ADDR
// result := [ _x , _y ] ;
57966: LD_ADDR_VAR 0 5
57970: PUSH
57971: LD_VAR 0 6
57975: PUSH
57976: LD_VAR 0 7
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// end ;
57985: LD_VAR 0 5
57989: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57990: LD_INT 0
57992: PPUSH
57993: PPUSH
57994: PPUSH
57995: PPUSH
// task := GetTaskList ( unit ) ;
57996: LD_ADDR_VAR 0 7
58000: PUSH
58001: LD_VAR 0 1
58005: PPUSH
58006: CALL_OW 437
58010: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58011: LD_VAR 0 7
58015: NOT
58016: PUSH
58017: LD_VAR 0 1
58021: PPUSH
58022: LD_VAR 0 2
58026: PPUSH
58027: CALL_OW 308
58031: NOT
58032: AND
58033: IFFALSE 58037
// exit ;
58035: GO 58155
// if IsInArea ( unit , area ) then
58037: LD_VAR 0 1
58041: PPUSH
58042: LD_VAR 0 2
58046: PPUSH
58047: CALL_OW 308
58051: IFFALSE 58069
// begin ComMoveToArea ( unit , goAway ) ;
58053: LD_VAR 0 1
58057: PPUSH
58058: LD_VAR 0 3
58062: PPUSH
58063: CALL_OW 113
// exit ;
58067: GO 58155
// end ; if task [ 1 ] [ 1 ] <> M then
58069: LD_VAR 0 7
58073: PUSH
58074: LD_INT 1
58076: ARRAY
58077: PUSH
58078: LD_INT 1
58080: ARRAY
58081: PUSH
58082: LD_STRING M
58084: NONEQUAL
58085: IFFALSE 58089
// exit ;
58087: GO 58155
// x := task [ 1 ] [ 2 ] ;
58089: LD_ADDR_VAR 0 5
58093: PUSH
58094: LD_VAR 0 7
58098: PUSH
58099: LD_INT 1
58101: ARRAY
58102: PUSH
58103: LD_INT 2
58105: ARRAY
58106: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58107: LD_ADDR_VAR 0 6
58111: PUSH
58112: LD_VAR 0 7
58116: PUSH
58117: LD_INT 1
58119: ARRAY
58120: PUSH
58121: LD_INT 3
58123: ARRAY
58124: ST_TO_ADDR
// if InArea ( x , y , area ) then
58125: LD_VAR 0 5
58129: PPUSH
58130: LD_VAR 0 6
58134: PPUSH
58135: LD_VAR 0 2
58139: PPUSH
58140: CALL_OW 309
58144: IFFALSE 58155
// ComStop ( unit ) ;
58146: LD_VAR 0 1
58150: PPUSH
58151: CALL_OW 141
// end ;
58155: LD_VAR 0 4
58159: RET
// export function Abs ( value ) ; begin
58160: LD_INT 0
58162: PPUSH
// result := value ;
58163: LD_ADDR_VAR 0 2
58167: PUSH
58168: LD_VAR 0 1
58172: ST_TO_ADDR
// if value < 0 then
58173: LD_VAR 0 1
58177: PUSH
58178: LD_INT 0
58180: LESS
58181: IFFALSE 58198
// result := value * - 1 ;
58183: LD_ADDR_VAR 0 2
58187: PUSH
58188: LD_VAR 0 1
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: MUL
58197: ST_TO_ADDR
// end ;
58198: LD_VAR 0 2
58202: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58203: LD_INT 0
58205: PPUSH
58206: PPUSH
58207: PPUSH
58208: PPUSH
58209: PPUSH
58210: PPUSH
58211: PPUSH
58212: PPUSH
// if not unit or not building then
58213: LD_VAR 0 1
58217: NOT
58218: PUSH
58219: LD_VAR 0 2
58223: NOT
58224: OR
58225: IFFALSE 58229
// exit ;
58227: GO 58455
// x := GetX ( building ) ;
58229: LD_ADDR_VAR 0 4
58233: PUSH
58234: LD_VAR 0 2
58238: PPUSH
58239: CALL_OW 250
58243: ST_TO_ADDR
// y := GetY ( building ) ;
58244: LD_ADDR_VAR 0 6
58248: PUSH
58249: LD_VAR 0 2
58253: PPUSH
58254: CALL_OW 251
58258: ST_TO_ADDR
// d := GetDir ( building ) ;
58259: LD_ADDR_VAR 0 8
58263: PUSH
58264: LD_VAR 0 2
58268: PPUSH
58269: CALL_OW 254
58273: ST_TO_ADDR
// r := 4 ;
58274: LD_ADDR_VAR 0 9
58278: PUSH
58279: LD_INT 4
58281: ST_TO_ADDR
// for i := 1 to 5 do
58282: LD_ADDR_VAR 0 10
58286: PUSH
58287: DOUBLE
58288: LD_INT 1
58290: DEC
58291: ST_TO_ADDR
58292: LD_INT 5
58294: PUSH
58295: FOR_TO
58296: IFFALSE 58453
// begin _x := ShiftX ( x , d , r + i ) ;
58298: LD_ADDR_VAR 0 5
58302: PUSH
58303: LD_VAR 0 4
58307: PPUSH
58308: LD_VAR 0 8
58312: PPUSH
58313: LD_VAR 0 9
58317: PUSH
58318: LD_VAR 0 10
58322: PLUS
58323: PPUSH
58324: CALL_OW 272
58328: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58329: LD_ADDR_VAR 0 7
58333: PUSH
58334: LD_VAR 0 6
58338: PPUSH
58339: LD_VAR 0 8
58343: PPUSH
58344: LD_VAR 0 9
58348: PUSH
58349: LD_VAR 0 10
58353: PLUS
58354: PPUSH
58355: CALL_OW 273
58359: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58360: LD_VAR 0 5
58364: PPUSH
58365: LD_VAR 0 7
58369: PPUSH
58370: CALL_OW 488
58374: PUSH
58375: LD_VAR 0 5
58379: PPUSH
58380: LD_VAR 0 7
58384: PPUSH
58385: CALL_OW 428
58389: PPUSH
58390: CALL_OW 247
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: IN
58405: NOT
58406: AND
58407: IFFALSE 58451
// begin ComMoveXY ( unit , _x , _y ) ;
58409: LD_VAR 0 1
58413: PPUSH
58414: LD_VAR 0 5
58418: PPUSH
58419: LD_VAR 0 7
58423: PPUSH
58424: CALL_OW 111
// result := [ _x , _y ] ;
58428: LD_ADDR_VAR 0 3
58432: PUSH
58433: LD_VAR 0 5
58437: PUSH
58438: LD_VAR 0 7
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// exit ;
58447: POP
58448: POP
58449: GO 58455
// end ; end ;
58451: GO 58295
58453: POP
58454: POP
// end ;
58455: LD_VAR 0 3
58459: RET
