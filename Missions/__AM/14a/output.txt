// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 94 0 0
// PrepareAlliance ;
  30: CALL 637 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3429 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 18694 0 1
// end ; end_of_file
  91: PPOPN 1
  93: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 101: LD_ADDR_VAR 0 3
 105: PUSH
 106: LD_STRING 13a_buildings
 108: PPUSH
 109: LD_INT 7
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: LD_INT 1
 117: PUSH
 118: LD_INT 70
 120: PUSH
 121: LD_INT 46
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 10
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: PPUSH
 154: CALL_OW 30
 158: ST_TO_ADDR
// bc_kind1 := - 1 ;
 159: LD_ADDR_OWVAR 44
 163: PUSH
 164: LD_INT 1
 166: NEG
 167: ST_TO_ADDR
// bc_kind2 := - 1 ;
 168: LD_ADDR_OWVAR 45
 172: PUSH
 173: LD_INT 1
 175: NEG
 176: ST_TO_ADDR
// for i in tmp do
 177: LD_ADDR_VAR 0 2
 181: PUSH
 182: LD_VAR 0 3
 186: PUSH
 187: FOR_IN
 188: IFFALSE 433
// begin uc_side := 7 ;
 190: LD_ADDR_OWVAR 20
 194: PUSH
 195: LD_INT 7
 197: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 198: LD_ADDR_OWVAR 21
 202: PUSH
 203: LD_VAR 0 2
 207: PUSH
 208: LD_INT 2
 210: ARRAY
 211: ST_TO_ADDR
// if i [ 2 ] = 2 then
 212: LD_VAR 0 2
 216: PUSH
 217: LD_INT 2
 219: ARRAY
 220: PUSH
 221: LD_INT 2
 223: EQUAL
 224: IFFALSE 234
// uc_side := 4 ;
 226: LD_ADDR_OWVAR 20
 230: PUSH
 231: LD_INT 4
 233: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 234: LD_ADDR_OWVAR 42
 238: PUSH
 239: LD_VAR 0 2
 243: PUSH
 244: LD_INT 3
 246: ARRAY
 247: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 248: LD_VAR 0 2
 252: PUSH
 253: LD_INT 3
 255: ARRAY
 256: PUSH
 257: LD_INT 29
 259: PUSH
 260: LD_INT 30
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: IN
 267: IFFALSE 300
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 269: LD_VAR 0 2
 273: PUSH
 274: LD_INT 4
 276: ARRAY
 277: PPUSH
 278: LD_VAR 0 2
 282: PUSH
 283: LD_INT 5
 285: ARRAY
 286: PPUSH
 287: LD_VAR 0 2
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PPUSH
 296: CALL_OW 441
// if i [ 8 ] then
 300: LD_VAR 0 2
 304: PUSH
 305: LD_INT 8
 307: ARRAY
 308: IFFALSE 324
// bc_kind1 := i [ 8 ] ;
 310: LD_ADDR_OWVAR 44
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_INT 8
 322: ARRAY
 323: ST_TO_ADDR
// if i [ 9 ] then
 324: LD_VAR 0 2
 328: PUSH
 329: LD_INT 9
 331: ARRAY
 332: IFFALSE 348
// bc_kind2 := i [ 9 ] ;
 334: LD_ADDR_OWVAR 45
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 9
 346: ARRAY
 347: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 348: LD_ADDR_VAR 0 4
 352: PUSH
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 4
 360: ARRAY
 361: PPUSH
 362: LD_VAR 0 2
 366: PUSH
 367: LD_INT 5
 369: ARRAY
 370: PPUSH
 371: LD_VAR 0 2
 375: PUSH
 376: LD_INT 6
 378: ARRAY
 379: PPUSH
 380: CALL_OW 47
 384: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_VAR 0 2
 394: PUSH
 395: LD_INT 7
 397: ARRAY
 398: PPUSH
 399: CALL_OW 241
// if i [ 10 ] then
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 10
 410: ARRAY
 411: IFFALSE 431
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 413: LD_VAR 0 4
 417: PPUSH
 418: LD_VAR 0 2
 422: PUSH
 423: LD_INT 10
 425: ARRAY
 426: PPUSH
 427: CALL_OW 431
// end ;
 431: GO 187
 433: POP
 434: POP
// if HexInfo ( 144 , 65 ) = 0 then
 435: LD_INT 144
 437: PPUSH
 438: LD_INT 65
 440: PPUSH
 441: CALL_OW 428
 445: PUSH
 446: LD_INT 0
 448: EQUAL
 449: IFFALSE 486
// begin uc_side := 4 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 4
 458: ST_TO_ADDR
// bc_type := b_warehouse ;
 459: LD_ADDR_OWVAR 42
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: LD_INT 144
 474: PPUSH
 475: LD_INT 65
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 47
 485: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 486: LD_ADDR_VAR 0 2
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 2
 503: PUSH
 504: LD_INT 30
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 30
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PPUSH
 533: CALL_OW 69
 537: PUSH
 538: FOR_IN
 539: IFFALSE 591
// for j = 1 to 3 do
 541: LD_ADDR_VAR 0 5
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 587
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 557: LD_VAR 0 2
 561: PPUSH
 562: CALL_OW 274
 566: PPUSH
 567: LD_VAR 0 5
 571: PPUSH
 572: LD_INT 3000
 574: PUSH
 575: LD_VAR 0 5
 579: DIVREAL
 580: PPUSH
 581: CALL_OW 277
 585: GO 554
 587: POP
 588: POP
 589: GO 538
 591: POP
 592: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_INT 3
 600: PPUSH
 601: LD_INT 22
 603: PUSH
 604: LD_INT 7
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PPUSH
 611: CALL_OW 70
 615: PUSH
 616: FOR_IN
 617: IFFALSE 630
// RemoveUnit ( i ) ;
 619: LD_VAR 0 2
 623: PPUSH
 624: CALL_OW 64
 628: GO 616
 630: POP
 631: POP
// end ; end_of_file
 632: LD_VAR 0 1
 636: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
 641: PPUSH
 642: PPUSH
// uc_side := 7 ;
 643: LD_ADDR_OWVAR 20
 647: PUSH
 648: LD_INT 7
 650: ST_TO_ADDR
// uc_nation := 1 ;
 651: LD_ADDR_OWVAR 21
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 659: LD_ADDR_EXP 2
 663: PUSH
 664: LD_STRING JMM
 666: PPUSH
 667: LD_EXP 1
 671: NOT
 672: PPUSH
 673: LD_STRING 13a_
 675: PPUSH
 676: CALL 23228 0 3
 680: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 681: LD_ADDR_EXP 3
 685: PUSH
 686: LD_STRING Burlak
 688: PPUSH
 689: LD_EXP 1
 693: NOT
 694: PPUSH
 695: LD_STRING 13a_
 697: PPUSH
 698: CALL 23228 0 3
 702: ST_TO_ADDR
// if debug then
 703: LD_EXP 1
 707: IFFALSE 742
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 709: LD_INT 1
 711: PPUSH
 712: LD_INT 4
 714: PPUSH
 715: LD_INT 10
 717: PPUSH
 718: CALL_OW 380
// JMM := CreateHuman ;
 722: LD_ADDR_EXP 2
 726: PUSH
 727: CALL_OW 44
 731: ST_TO_ADDR
// Burlak := CreateHuman ;
 732: LD_ADDR_EXP 3
 736: PUSH
 737: CALL_OW 44
 741: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 742: LD_ADDR_EXP 4
 746: PUSH
 747: LD_INT 1
 749: PPUSH
 750: LD_INT 22
 752: PUSH
 753: LD_INT 7
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 23
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 30
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 70
 807: ST_TO_ADDR
// if freedom then
 808: LD_EXP 4
 812: IFFALSE 939
// begin freedom := freedom [ 1 ] ;
 814: LD_ADDR_EXP 4
 818: PUSH
 819: LD_EXP 4
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 828: LD_EXP 4
 832: PPUSH
 833: LD_STRING freedom
 835: PPUSH
 836: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 840: LD_EXP 4
 844: PPUSH
 845: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 849: LD_EXP 2
 853: PPUSH
 854: LD_EXP 4
 858: PPUSH
 859: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 863: LD_EXP 3
 867: PPUSH
 868: LD_EXP 4
 872: PPUSH
 873: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 877: LD_EXP 4
 881: PPUSH
 882: CALL_OW 274
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_INT 1000
 892: PPUSH
 893: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 274
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 400
 912: PPUSH
 913: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 917: LD_EXP 4
 921: PPUSH
 922: CALL_OW 274
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_INT 30
 932: PPUSH
 933: CALL_OW 277
// end else
 937: GO 1026
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 954: LD_EXP 3
 958: PPUSH
 959: LD_EXP 2
 963: PPUSH
 964: CALL_OW 250
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL_OW 251
 978: PPUSH
 979: LD_INT 8
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
 989: LD_EXP 2
 993: PPUSH
 994: LD_EXP 3
 998: PPUSH
 999: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1003: LD_EXP 3
1007: PPUSH
1008: LD_EXP 2
1012: PPUSH
1013: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1017: LD_EXP 2
1021: PPUSH
1022: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1038: LD_ADDR_VAR 0 2
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: LD_INT 4
1051: PUSH
1052: LD_INT 5
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 9
1066: PUSH
1067: LD_INT 7
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: LD_INT 12
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// for i = 1 to 5 do
1087: LD_ADDR_VAR 0 3
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_INT 5
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1285
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 4
1119: MOD
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: ARRAY
1125: PPUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_VAR 0 3
1164: PUSH
1165: LD_INT 5
1167: MOD
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: PPUSH
1174: LD_INT 100
1176: PPUSH
1177: CALL 28092 0 5
// veh := CreateVehicle ;
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: CALL_OW 45
1190: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 12
1206: PPUSH
1207: CALL_OW 233
// if freedom then
1211: LD_EXP 4
1215: IFFALSE 1248
// begin if IsInArea ( freedom , freedom_base ) then
1217: LD_EXP 4
1221: PPUSH
1222: LD_INT 1
1224: PPUSH
1225: CALL_OW 308
1229: IFFALSE 1246
// PlaceUnitArea ( veh , freedom_base , false ) end else
1231: LD_VAR 0 4
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
1246: GO 1283
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1248: LD_VAR 0 4
1252: PPUSH
1253: LD_EXP 2
1257: PPUSH
1258: CALL_OW 250
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL_OW 251
1272: PPUSH
1273: LD_INT 14
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ;
1283: GO 1100
1285: POP
1286: POP
// uc_nation := 3 ;
1287: LD_ADDR_OWVAR 21
1291: PUSH
1292: LD_INT 3
1294: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1295: LD_ADDR_VAR 0 2
1299: PUSH
1300: LD_INT 21
1302: PUSH
1303: LD_INT 22
1305: PUSH
1306: LD_INT 23
1308: PUSH
1309: LD_INT 24
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 43
1320: PUSH
1321: LD_INT 44
1323: PUSH
1324: LD_INT 45
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: ST_TO_ADDR
// for i = 1 to 5 do
1336: LD_ADDR_VAR 0 3
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_INT 5
1348: PUSH
1349: FOR_TO
1350: IFFALSE 1477
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 1
1359: ARRAY
1360: PUSH
1361: LD_VAR 0 3
1365: PUSH
1366: LD_INT 4
1368: MOD
1369: PUSH
1370: LD_INT 1
1372: PLUS
1373: ARRAY
1374: PPUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 3
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PUSH
1385: LD_INT 1
1387: PPUSH
1388: LD_INT 2
1390: PPUSH
1391: CALL_OW 12
1395: ARRAY
1396: PPUSH
1397: LD_INT 1
1399: PPUSH
1400: LD_VAR 0 2
1404: PUSH
1405: LD_INT 2
1407: ARRAY
1408: PUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 3
1416: MOD
1417: PUSH
1418: LD_INT 1
1420: PLUS
1421: ARRAY
1422: PPUSH
1423: LD_INT 100
1425: PPUSH
1426: CALL 28092 0 5
// veh := CreateVehicle ;
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: CALL_OW 45
1439: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1440: LD_VAR 0 4
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL_OW 12
1455: PPUSH
1456: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1460: LD_VAR 0 4
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL_OW 49
// end ;
1475: GO 1349
1477: POP
1478: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1479: LD_INT 2
1481: PUSH
1482: LD_INT 34
1484: PUSH
1485: LD_INT 12
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 34
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 69
1511: NOT
1512: IFFALSE 1578
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1514: LD_INT 22
1516: PPUSH
1517: LD_INT 3
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 51
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL 28092 0 5
// veh := CreateVehicle ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: CALL_OW 45
1542: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1543: LD_VAR 0 4
1547: PPUSH
1548: LD_INT 0
1550: PPUSH
1551: LD_INT 5
1553: PPUSH
1554: CALL_OW 12
1558: PPUSH
1559: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1578: LD_ADDR_VAR 0 2
1582: PUSH
1583: LD_STRING 13a_Masha
1585: PPUSH
1586: EMPTY
1587: PPUSH
1588: CALL_OW 30
1592: ST_TO_ADDR
// if tmp then
1593: LD_VAR 0 2
1597: IFFALSE 1680
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1599: LD_VAR 0 2
1603: PUSH
1604: LD_INT 1
1606: ARRAY
1607: PPUSH
1608: LD_VAR 0 2
1612: PUSH
1613: LD_INT 2
1615: ARRAY
1616: PPUSH
1617: LD_VAR 0 2
1621: PUSH
1622: LD_INT 3
1624: ARRAY
1625: PPUSH
1626: LD_VAR 0 2
1630: PUSH
1631: LD_INT 4
1633: ARRAY
1634: PPUSH
1635: LD_INT 100
1637: PPUSH
1638: CALL 28092 0 5
// Masha := CreateVehicle ;
1642: LD_ADDR_EXP 36
1646: PUSH
1647: CALL_OW 45
1651: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1652: LD_EXP 36
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1667: LD_EXP 36
1671: PPUSH
1672: LD_INT 7
1674: NEG
1675: PPUSH
1676: CALL_OW 242
// end ; uc_side := 4 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 4
1687: ST_TO_ADDR
// tmp := [ ] ;
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: EMPTY
1694: ST_TO_ADDR
// squad1 := [ ] ;
1695: LD_ADDR_EXP 37
1699: PUSH
1700: EMPTY
1701: ST_TO_ADDR
// squad2 := [ ] ;
1702: LD_ADDR_EXP 38
1706: PUSH
1707: EMPTY
1708: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1709: LD_ADDR_EXP 19
1713: PUSH
1714: LD_STRING Joan
1716: PPUSH
1717: LD_EXP 1
1721: NOT
1722: PPUSH
1723: LD_STRING 13a_
1725: PPUSH
1726: CALL 23228 0 3
1730: ST_TO_ADDR
// if Joan then
1731: LD_EXP 19
1735: IFFALSE 1753
// tmp := tmp ^ Joan ;
1737: LD_ADDR_VAR 0 2
1741: PUSH
1742: LD_VAR 0 2
1746: PUSH
1747: LD_EXP 19
1751: ADD
1752: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1753: LD_ADDR_EXP 5
1757: PUSH
1758: LD_STRING Roth
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_STRING 13a_
1769: PPUSH
1770: CALL 23228 0 3
1774: ST_TO_ADDR
// if Roth then
1775: LD_EXP 5
1779: IFFALSE 1797
// tmp := tmp ^ Roth ;
1781: LD_ADDR_VAR 0 2
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_EXP 5
1795: ADD
1796: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1797: LD_ADDR_EXP 10
1801: PUSH
1802: LD_STRING Denis
1804: PPUSH
1805: LD_EXP 1
1809: NOT
1810: PPUSH
1811: LD_STRING 13a_
1813: PPUSH
1814: CALL 23228 0 3
1818: ST_TO_ADDR
// if Denis then
1819: LD_EXP 10
1823: IFFALSE 1841
// tmp := tmp ^ Denis ;
1825: LD_ADDR_VAR 0 2
1829: PUSH
1830: LD_VAR 0 2
1834: PUSH
1835: LD_EXP 10
1839: ADD
1840: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1841: LD_ADDR_EXP 20
1845: PUSH
1846: LD_STRING DeltaDoctor
1848: PPUSH
1849: LD_EXP 1
1853: NOT
1854: PPUSH
1855: LD_STRING 13a_
1857: PPUSH
1858: CALL 23228 0 3
1862: ST_TO_ADDR
// if DeltaDoctor then
1863: LD_EXP 20
1867: IFFALSE 1885
// tmp := tmp ^ DeltaDoctor ;
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 20
1883: ADD
1884: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1885: LD_ADDR_EXP 18
1889: PUSH
1890: LD_STRING Simms
1892: PPUSH
1893: LD_EXP 1
1897: NOT
1898: PPUSH
1899: LD_STRING 13a_
1901: PPUSH
1902: CALL 23228 0 3
1906: ST_TO_ADDR
// if Simms then
1907: LD_EXP 18
1911: IFFALSE 1929
// tmp := tmp ^ Simms ;
1913: LD_ADDR_VAR 0 2
1917: PUSH
1918: LD_VAR 0 2
1922: PUSH
1923: LD_EXP 18
1927: ADD
1928: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1929: LD_ADDR_EXP 21
1933: PUSH
1934: LD_STRING Gossudarov
1936: PPUSH
1937: LD_EXP 1
1941: NOT
1942: PPUSH
1943: LD_STRING 13a_
1945: PPUSH
1946: CALL 23228 0 3
1950: ST_TO_ADDR
// if Gossudarov then
1951: LD_EXP 21
1955: IFFALSE 1973
// tmp := tmp ^ Gossudarov ;
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_EXP 21
1971: ADD
1972: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1973: LD_ADDR_EXP 22
1977: PUSH
1978: LD_STRING Kirilenkova
1980: PPUSH
1981: LD_EXP 1
1985: NOT
1986: PPUSH
1987: LD_STRING 13a_
1989: PPUSH
1990: CALL 23228 0 3
1994: ST_TO_ADDR
// if Kirilenkova then
1995: LD_EXP 22
1999: IFFALSE 2017
// tmp := tmp ^ Kirilenkova ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: LD_VAR 0 2
2010: PUSH
2011: LD_EXP 22
2015: ADD
2016: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2017: LD_ADDR_EXP 25
2021: PUSH
2022: LD_STRING Petrosyan
2024: PPUSH
2025: LD_EXP 1
2029: NOT
2030: PPUSH
2031: LD_STRING 13a_
2033: PPUSH
2034: CALL 23228 0 3
2038: ST_TO_ADDR
// if Petrosyan then
2039: LD_EXP 25
2043: IFFALSE 2061
// tmp := tmp ^ Petrosyan ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_EXP 25
2059: ADD
2060: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2061: LD_ADDR_EXP 26
2065: PUSH
2066: LD_STRING Petrosyan
2068: PPUSH
2069: LD_EXP 1
2073: NOT
2074: PPUSH
2075: LD_STRING 13a_
2077: PPUSH
2078: CALL 23228 0 3
2082: ST_TO_ADDR
// if Scholtze then
2083: LD_EXP 26
2087: IFFALSE 2105
// tmp := tmp ^ Scholtze ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_EXP 26
2103: ADD
2104: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2105: LD_ADDR_EXP 24
2109: PUSH
2110: LD_STRING Dolgov
2112: PPUSH
2113: LD_EXP 1
2117: NOT
2118: PPUSH
2119: LD_STRING 13a_
2121: PPUSH
2122: CALL 23228 0 3
2126: ST_TO_ADDR
// if Dolgov then
2127: LD_EXP 24
2131: IFFALSE 2149
// tmp := tmp ^ Dolgov ;
2133: LD_ADDR_VAR 0 2
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_EXP 24
2147: ADD
2148: ST_TO_ADDR
// for i in tmp do
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_VAR 0 2
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2185
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_INT 160
2169: PPUSH
2170: LD_INT 78
2172: PPUSH
2173: LD_INT 22
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
2183: GO 2159
2185: POP
2186: POP
// squad1 := tmp ;
2187: LD_ADDR_EXP 37
2191: PUSH
2192: LD_VAR 0 2
2196: ST_TO_ADDR
// tmp := [ ] ;
2197: LD_ADDR_VAR 0 2
2201: PUSH
2202: EMPTY
2203: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2204: LD_ADDR_EXP 30
2208: PUSH
2209: LD_STRING Petrova
2211: PPUSH
2212: LD_EXP 1
2216: NOT
2217: PPUSH
2218: LD_STRING 13a_
2220: PPUSH
2221: CALL 23228 0 3
2225: ST_TO_ADDR
// if Petrovova then
2226: LD_EXP 30
2230: IFFALSE 2248
// tmp := tmp ^ Petrovova ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_VAR 0 2
2241: PUSH
2242: LD_EXP 30
2246: ADD
2247: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2248: LD_ADDR_EXP 23
2252: PUSH
2253: LD_STRING Titov
2255: PPUSH
2256: LD_EXP 1
2260: NOT
2261: PPUSH
2262: LD_STRING 13a_
2264: PPUSH
2265: CALL 23228 0 3
2269: ST_TO_ADDR
// if Titov then
2270: LD_EXP 23
2274: IFFALSE 2292
// tmp := tmp ^ Titov ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_VAR 0 2
2285: PUSH
2286: LD_EXP 23
2290: ADD
2291: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2292: LD_ADDR_EXP 33
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_STRING 13a_
2308: PPUSH
2309: CALL 23228 0 3
2313: ST_TO_ADDR
// if Karamazov then
2314: LD_EXP 33
2318: IFFALSE 2336
// tmp := tmp ^ Karamazov ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_EXP 33
2334: ADD
2335: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2336: LD_ADDR_EXP 16
2340: PUSH
2341: LD_STRING Frank
2343: PPUSH
2344: LD_EXP 1
2348: NOT
2349: PPUSH
2350: LD_STRING 13a_
2352: PPUSH
2353: CALL 23228 0 3
2357: ST_TO_ADDR
// if Frank then
2358: LD_EXP 16
2362: IFFALSE 2380
// tmp := tmp ^ Frank ;
2364: LD_ADDR_VAR 0 2
2368: PUSH
2369: LD_VAR 0 2
2373: PUSH
2374: LD_EXP 16
2378: ADD
2379: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2380: LD_ADDR_EXP 7
2384: PUSH
2385: LD_STRING Donaldson
2387: PPUSH
2388: LD_EXP 1
2392: NOT
2393: PPUSH
2394: LD_STRING 13a_
2396: PPUSH
2397: CALL 23228 0 3
2401: ST_TO_ADDR
// if Donaldson then
2402: LD_EXP 7
2406: IFFALSE 2424
// tmp := tmp ^ Donaldson ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_EXP 7
2422: ADD
2423: ST_TO_ADDR
// for i in tmp do
2424: LD_ADDR_VAR 0 3
2428: PUSH
2429: LD_VAR 0 2
2433: PUSH
2434: FOR_IN
2435: IFFALSE 2475
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2437: LD_VAR 0 3
2441: PPUSH
2442: LD_INT 117
2444: PPUSH
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: LD_INT 0
2453: PPUSH
2454: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2458: LD_VAR 0 3
2462: PPUSH
2463: LD_INT 117
2465: PPUSH
2466: LD_INT 8
2468: PPUSH
2469: CALL_OW 118
// end ;
2473: GO 2434
2475: POP
2476: POP
// squad2 := tmp ;
2477: LD_ADDR_EXP 38
2481: PUSH
2482: LD_VAR 0 2
2486: ST_TO_ADDR
// uc_side := 0 ;
2487: LD_ADDR_OWVAR 20
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// uc_nation := 0 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// InitHc ;
2503: CALL_OW 19
// hc_importance := 0 ;
2507: LD_ADDR_OWVAR 32
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// hc_name := Find some goods! ;
2515: LD_ADDR_OWVAR 26
2519: PUSH
2520: LD_STRING Find some goods!
2522: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2523: LD_INT 0
2525: PPUSH
2526: LD_INT 12
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2536: CALL_OW 44
2540: PPUSH
2541: LD_INT 96
2543: PPUSH
2544: LD_INT 108
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 48
// InitHc ;
2554: CALL_OW 19
// end ;
2558: LD_VAR 0 1
2562: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2563: LD_INT 22
2565: PUSH
2566: LD_INT 7
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 23
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PPUSH
2587: CALL_OW 69
2591: IFFALSE 3056
2593: GO 2595
2595: DISABLE
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
// begin InGameOn ;
2600: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2604: LD_INT 22
2606: PUSH
2607: LD_INT 7
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 23
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: CALL_OW 64
// game_speed := 4 ;
2641: LD_ADDR_OWVAR 65
2645: PUSH
2646: LD_INT 4
2648: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_INT 93
2656: PPUSH
2657: LD_INT 100
2659: PPUSH
2660: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2664: LD_EXP 3
2668: PPUSH
2669: LD_INT 93
2671: PPUSH
2672: LD_INT 99
2674: PPUSH
2675: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2679: LD_EXP 2
2683: PUSH
2684: LD_EXP 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PPUSH
2693: LD_INT 81
2695: PPUSH
2696: LD_INT 112
2698: PPUSH
2699: CALL_OW 178
// wait ( 0 0$5 ) ;
2703: LD_INT 175
2705: PPUSH
2706: CALL_OW 67
// music_nat := 2 ;
2710: LD_ADDR_OWVAR 71
2714: PUSH
2715: LD_INT 2
2717: ST_TO_ADDR
// music_class := 4 ;
2718: LD_ADDR_OWVAR 72
2722: PUSH
2723: LD_INT 4
2725: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2726: LD_INT 80
2728: PPUSH
2729: LD_INT 130
2731: PPUSH
2732: CALL_OW 86
// uc_nation := 2 ;
2736: LD_ADDR_OWVAR 21
2740: PUSH
2741: LD_INT 2
2743: ST_TO_ADDR
// uc_side := 2 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// hc_gallery = sandar ;
2752: LD_ADDR_OWVAR 33
2756: PUSH
2757: LD_STRING sandar
2759: ST_TO_ADDR
// hc_face_number = 1 ;
2760: LD_ADDR_OWVAR 34
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// hc_name = Louis Schulz ;
2768: LD_ADDR_OWVAR 26
2772: PUSH
2773: LD_STRING Louis Schulz
2775: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2776: LD_ADDR_OWVAR 29
2780: PUSH
2781: LD_INT 13
2783: PUSH
2784: LD_INT 11
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2791: LD_ADDR_OWVAR 30
2795: PUSH
2796: LD_INT 0
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2814: LD_ADDR_OWVAR 31
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: LD_INT 7
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// hc_sex = sex_male ;
2837: LD_ADDR_OWVAR 27
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// hc_class = 1 ;
2845: LD_ADDR_OWVAR 28
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// hc_importance = 100 ;
2853: LD_ADDR_OWVAR 32
2857: PUSH
2858: LD_INT 100
2860: ST_TO_ADDR
// Louis = CreateHuman ;
2861: LD_ADDR_VAR 0 1
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2871: LD_INT 14
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 26
2882: PPUSH
2883: LD_INT 100
2885: PPUSH
2886: CALL 28092 0 5
// veh := CreateVehicle ;
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: CALL_OW 45
2899: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2900: LD_VAR 0 2
2904: PPUSH
2905: LD_INT 2
2907: NEG
2908: PPUSH
2909: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2913: LD_VAR 0 2
2917: PPUSH
2918: LD_INT 80
2920: PPUSH
2921: LD_INT 130
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2931: LD_VAR 0 1
2935: PPUSH
2936: LD_VAR 0 2
2940: PPUSH
2941: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2945: LD_VAR 0 1
2949: PPUSH
2950: LD_INT 80
2952: PPUSH
2953: LD_INT 109
2955: PPUSH
2956: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2969: LD_VAR 0 1
2973: PPUSH
2974: LD_INT 80
2976: PPUSH
2977: LD_INT 131
2979: PPUSH
2980: CALL_OW 171
// wait ( 0 0$06 ) ;
2984: LD_INT 210
2986: PPUSH
2987: CALL_OW 67
// InGameOff ;
2991: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
2995: LD_INT 35
2997: PPUSH
2998: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3002: LD_VAR 0 1
3006: PPUSH
3007: LD_INT 80
3009: PPUSH
3010: LD_INT 131
3012: PPUSH
3013: CALL_OW 307
3017: IFFALSE 2995
// SetSide ( veh , 7 ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 7
3026: PPUSH
3027: CALL_OW 235
// RemoveUnit ( Louis ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 64
// music_nat := 3 ;
3040: LD_ADDR_OWVAR 71
3044: PUSH
3045: LD_INT 3
3047: ST_TO_ADDR
// music_class := 0 ;
3048: LD_ADDR_OWVAR 72
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// end ;
3056: PPOPN 2
3058: END
// every 0 0$10 trigger squad1 do var i , xy ;
3059: LD_EXP 37
3063: IFFALSE 3426
3065: GO 3067
3067: DISABLE
3068: LD_INT 0
3070: PPUSH
3071: PPUSH
// begin enable ;
3072: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3073: LD_ADDR_VAR 0 1
3077: PUSH
3078: LD_EXP 37
3082: PUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_EXP 37
3090: PPUSH
3091: CALL_OW 12
3095: ARRAY
3096: ST_TO_ADDR
// if IsInUnit ( i ) then
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 310
3106: IFFALSE 3110
// exit ;
3108: GO 3426
// ComRemember ( i ) ;
3110: LD_VAR 0 1
3114: PPUSH
3115: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3119: LD_ADDR_VAR 0 2
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 250
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: LD_INT 5
3139: PPUSH
3140: CALL_OW 12
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 7
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: CALL_OW 272
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 251
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: LD_INT 5
3176: PPUSH
3177: CALL_OW 12
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: LD_INT 7
3187: PPUSH
3188: CALL_OW 12
3192: PPUSH
3193: CALL_OW 273
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3202: LD_VAR 0 2
3206: PUSH
3207: LD_INT 1
3209: ARRAY
3210: PPUSH
3211: LD_VAR 0 2
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PPUSH
3220: CALL_OW 428
3224: PUSH
3225: LD_INT 0
3227: NONEQUAL
3228: PUSH
3229: LD_VAR 0 2
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: LD_VAR 0 2
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 488
3251: NOT
3252: OR
3253: IFFALSE 3257
// exit ;
3255: GO 3426
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3257: LD_VAR 0 1
3261: PPUSH
3262: LD_VAR 0 2
3266: PUSH
3267: LD_INT 1
3269: ARRAY
3270: PPUSH
3271: LD_VAR 0 2
3275: PUSH
3276: LD_INT 2
3278: ARRAY
3279: PPUSH
3280: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_INT 350
3291: PPUSH
3292: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3296: LD_INT 60
3298: PPUSH
3299: CALL_OW 13
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: AND
3333: IFFALSE 3417
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3335: LD_VAR 0 1
3339: PPUSH
3340: LD_INT 22
3342: PUSH
3343: LD_INT 4
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: LD_INT 21
3352: PUSH
3353: LD_INT 3
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PPUSH
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 74
3378: PPUSH
3379: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3383: LD_INT 1050
3385: PPUSH
3386: CALL_OW 67
// until IsInUnit ( i ) ;
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 310
3399: IFFALSE 3383
// wait ( 0 0$30 ) ;
3401: LD_INT 1050
3403: PPUSH
3404: CALL_OW 67
// AddComExitBuilding ( i ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: CALL_OW 182
// end ; AddComReturn ( i ) ;
3417: LD_VAR 0 1
3421: PPUSH
3422: CALL_OW 204
// end ; end_of_file
3426: PPOPN 2
3428: END
// export function Action ; begin
3429: LD_INT 0
3431: PPUSH
// InGameOn ;
3432: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3436: LD_EXP 2
3440: PPUSH
3441: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3445: LD_EXP 2
3449: PPUSH
3450: LD_STRING D1-JMM-1
3452: PPUSH
3453: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3457: LD_EXP 3
3461: PPUSH
3462: LD_STRING D1-Bur-1
3464: PPUSH
3465: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3469: LD_EXP 2
3473: PPUSH
3474: LD_STRING D1-JMM-2
3476: PPUSH
3477: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3481: LD_EXP 3
3485: PPUSH
3486: LD_STRING D1-Bur-2
3488: PPUSH
3489: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3493: LD_EXP 2
3497: PPUSH
3498: LD_STRING D1-JMM-3
3500: PPUSH
3501: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3505: LD_EXP 3
3509: PPUSH
3510: LD_STRING D1-Bur-3
3512: PPUSH
3513: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3517: LD_EXP 2
3521: PPUSH
3522: LD_STRING D1-JMM-4
3524: PPUSH
3525: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3529: LD_EXP 3
3533: PPUSH
3534: LD_STRING D1-Bur-4
3536: PPUSH
3537: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3541: LD_EXP 2
3545: PPUSH
3546: LD_STRING D1-JMM-5
3548: PPUSH
3549: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3553: LD_EXP 3
3557: PPUSH
3558: LD_STRING D1-Bur-5
3560: PPUSH
3561: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3565: LD_EXP 2
3569: PPUSH
3570: LD_STRING D1-JMM-6
3572: PPUSH
3573: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3577: LD_EXP 3
3581: PPUSH
3582: LD_STRING D1-Bur-6
3584: PPUSH
3585: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3589: LD_EXP 2
3593: PPUSH
3594: LD_STRING D1-JMM-7
3596: PPUSH
3597: CALL_OW 88
// wait ( 20 ) ;
3601: LD_INT 20
3603: PPUSH
3604: CALL_OW 67
// Query ( QTruck ) ;
3608: LD_STRING QTruck
3610: PPUSH
3611: CALL_OW 97
// InGameOff ;
3615: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3619: LD_STRING MArtPickup
3621: PPUSH
3622: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: CALL_OW 424
// end ;
3636: LD_VAR 0 1
3640: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3641: LD_INT 2
3643: PPUSH
3644: LD_INT 21
3646: PUSH
3647: LD_INT 2
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 33
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: LD_INT 58
3669: PUSH
3670: EMPTY
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PPUSH
3682: CALL_OW 70
3686: PUSH
3687: LD_INT 2
3689: EQUAL
3690: PUSH
3691: LD_EXP 2
3695: PPUSH
3696: CALL_OW 310
3700: AND
3701: PUSH
3702: LD_EXP 3
3706: PPUSH
3707: CALL_OW 310
3711: AND
3712: PUSH
3713: LD_EXP 2
3717: PPUSH
3718: CALL_OW 310
3722: PPUSH
3723: CALL_OW 264
3727: PUSH
3728: LD_INT 51
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: LD_EXP 40
3738: PUSH
3739: LD_INT 32
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: IN
3748: PUSH
3749: LD_EXP 3
3753: PPUSH
3754: CALL_OW 310
3758: PPUSH
3759: CALL_OW 264
3763: PUSH
3764: LD_INT 51
3766: PUSH
3767: LD_INT 12
3769: PUSH
3770: LD_EXP 40
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: IN
3784: OR
3785: AND
3786: IFFALSE 3996
3788: GO 3790
3790: DISABLE
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: LD_EXP 2
3805: PPUSH
3806: CALL_OW 310
3810: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_EXP 3
3820: PPUSH
3821: CALL_OW 310
3825: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3826: LD_VAR 0 2
3830: PPUSH
3831: CALL_OW 265
3835: PUSH
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 262
3845: PUSH
3846: LD_INT 1
3848: PUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: CALL_OW 264
3858: PUSH
3859: LD_VAR 0 2
3863: PPUSH
3864: CALL_OW 271
3868: PUSH
3869: LD_VAR 0 2
3873: PPUSH
3874: CALL_OW 248
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: PPUSH
3887: LD_STRING 14a_JMMVeh
3889: PPUSH
3890: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: CALL_OW 265
3903: PUSH
3904: LD_VAR 0 3
3908: PPUSH
3909: CALL_OW 262
3913: PUSH
3914: LD_INT 1
3916: PUSH
3917: LD_VAR 0 3
3921: PPUSH
3922: CALL_OW 264
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: CALL_OW 271
3936: PUSH
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 248
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PPUSH
3955: LD_STRING 14a_BurlakVeh
3957: PPUSH
3958: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3962: LD_EXP 2
3966: PPUSH
3967: LD_STRING 14a_JMM
3969: PPUSH
3970: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3974: LD_EXP 3
3978: PPUSH
3979: LD_STRING 14a_Burlak
3981: PPUSH
3982: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
3986: LD_INT 1
3988: PPUSH
3989: LD_STRING %_cont
3991: PPUSH
3992: CALL_OW 340
// end ;
3996: PPOPN 3
3998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
3999: LD_INT 22
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 24
4014: PUSH
4015: LD_INT 950
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: IFFALSE 4046
4036: GO 4038
4038: DISABLE
// YouLost ( FriendlyFire ) ;
4039: LD_STRING FriendlyFire
4041: PPUSH
4042: CALL_OW 104
4046: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4047: LD_EXP 3
4051: PPUSH
4052: CALL_OW 301
4056: IFFALSE 4068
4058: GO 4060
4060: DISABLE
// YouLost ( Burlak ) ;
4061: LD_STRING Burlak
4063: PPUSH
4064: CALL_OW 104
4068: END
// every 0 0$1 trigger IsDead ( JMM ) do
4069: LD_EXP 2
4073: PPUSH
4074: CALL_OW 301
4078: IFFALSE 4090
4080: GO 4082
4082: DISABLE
// YouLost ( JMM ) ; end_of_file
4083: LD_STRING JMM
4085: PPUSH
4086: CALL_OW 104
4090: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4091: LD_INT 0
4093: PPUSH
// ar_miner := 81 ;
4094: LD_ADDR_EXP 46
4098: PUSH
4099: LD_INT 81
4101: ST_TO_ADDR
// ar_crane := 88 ;
4102: LD_ADDR_EXP 45
4106: PUSH
4107: LD_INT 88
4109: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4110: LD_ADDR_EXP 40
4114: PUSH
4115: LD_INT 89
4117: ST_TO_ADDR
// us_hack := 99 ;
4118: LD_ADDR_EXP 41
4122: PUSH
4123: LD_INT 99
4125: ST_TO_ADDR
// us_artillery := 97 ;
4126: LD_ADDR_EXP 42
4130: PUSH
4131: LD_INT 97
4133: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4134: LD_ADDR_EXP 43
4138: PUSH
4139: LD_INT 91
4141: ST_TO_ADDR
// ar_mortar := 92 ;
4142: LD_ADDR_EXP 44
4146: PUSH
4147: LD_INT 92
4149: ST_TO_ADDR
// ru_radar := 98 ;
4150: LD_ADDR_EXP 39
4154: PUSH
4155: LD_INT 98
4157: ST_TO_ADDR
// tech_Artillery := 80 ;
4158: LD_ADDR_EXP 47
4162: PUSH
4163: LD_INT 80
4165: ST_TO_ADDR
// tech_RadMat := 81 ;
4166: LD_ADDR_EXP 48
4170: PUSH
4171: LD_INT 81
4173: ST_TO_ADDR
// tech_BasicTools := 82 ;
4174: LD_ADDR_EXP 49
4178: PUSH
4179: LD_INT 82
4181: ST_TO_ADDR
// tech_Cargo := 83 ;
4182: LD_ADDR_EXP 50
4186: PUSH
4187: LD_INT 83
4189: ST_TO_ADDR
// tech_Track := 84 ;
4190: LD_ADDR_EXP 51
4194: PUSH
4195: LD_INT 84
4197: ST_TO_ADDR
// tech_Crane := 85 ;
4198: LD_ADDR_EXP 52
4202: PUSH
4203: LD_INT 85
4205: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4206: LD_ADDR_EXP 53
4210: PUSH
4211: LD_INT 86
4213: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4214: LD_ADDR_EXP 54
4218: PUSH
4219: LD_INT 87
4221: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4222: LD_ADDR_EXP 55
4226: PUSH
4227: LD_INT 88
4229: ST_TO_ADDR
// class_mastodont := 31 ;
4230: LD_ADDR_EXP 56
4234: PUSH
4235: LD_INT 31
4237: ST_TO_ADDR
// class_horse := 21 ;
4238: LD_ADDR_EXP 57
4242: PUSH
4243: LD_INT 21
4245: ST_TO_ADDR
// end ;
4246: LD_VAR 0 1
4250: RET
// every 1 do
4251: GO 4253
4253: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4254: CALL 4091 0 0
4258: END
// every 0 0$1 do
4259: GO 4261
4261: DISABLE
// begin enable ;
4262: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4263: LD_STRING updateTimer(
4265: PUSH
4266: LD_OWVAR 1
4270: STR
4271: PUSH
4272: LD_STRING );
4274: STR
4275: PPUSH
4276: CALL_OW 559
// end ;
4280: END
// on MapStart ( p ) do begin if streamModeActive then
4281: LD_EXP 58
4285: IFFALSE 4294
// DefineStreamItems ( true ) ;
4287: LD_INT 1
4289: PPUSH
4290: CALL 5942 0 1
// UpdateFactoryWaypoints ( ) ;
4294: CALL 19526 0 0
// end ;
4298: PPOPN 1
4300: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4301: LD_INT 0
4303: PPUSH
// if p2 = 100 then
4304: LD_VAR 0 2
4308: PUSH
4309: LD_INT 100
4311: EQUAL
4312: IFFALSE 5315
// begin if not StreamModeActive then
4314: LD_EXP 58
4318: NOT
4319: IFFALSE 4329
// StreamModeActive := true ;
4321: LD_ADDR_EXP 58
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// if p3 = 0 then
4329: LD_VAR 0 3
4333: PUSH
4334: LD_INT 0
4336: EQUAL
4337: IFFALSE 4343
// InitStreamMode ;
4339: CALL 5478 0 0
// if p3 = 1 then
4343: LD_VAR 0 3
4347: PUSH
4348: LD_INT 1
4350: EQUAL
4351: IFFALSE 4361
// sRocket := true ;
4353: LD_ADDR_EXP 63
4357: PUSH
4358: LD_INT 1
4360: ST_TO_ADDR
// if p3 = 2 then
4361: LD_VAR 0 3
4365: PUSH
4366: LD_INT 2
4368: EQUAL
4369: IFFALSE 4379
// sSpeed := true ;
4371: LD_ADDR_EXP 62
4375: PUSH
4376: LD_INT 1
4378: ST_TO_ADDR
// if p3 = 3 then
4379: LD_VAR 0 3
4383: PUSH
4384: LD_INT 3
4386: EQUAL
4387: IFFALSE 4397
// sEngine := true ;
4389: LD_ADDR_EXP 64
4393: PUSH
4394: LD_INT 1
4396: ST_TO_ADDR
// if p3 = 4 then
4397: LD_VAR 0 3
4401: PUSH
4402: LD_INT 4
4404: EQUAL
4405: IFFALSE 4415
// sSpec := true ;
4407: LD_ADDR_EXP 61
4411: PUSH
4412: LD_INT 1
4414: ST_TO_ADDR
// if p3 = 5 then
4415: LD_VAR 0 3
4419: PUSH
4420: LD_INT 5
4422: EQUAL
4423: IFFALSE 4433
// sLevel := true ;
4425: LD_ADDR_EXP 65
4429: PUSH
4430: LD_INT 1
4432: ST_TO_ADDR
// if p3 = 6 then
4433: LD_VAR 0 3
4437: PUSH
4438: LD_INT 6
4440: EQUAL
4441: IFFALSE 4451
// sArmoury := true ;
4443: LD_ADDR_EXP 66
4447: PUSH
4448: LD_INT 1
4450: ST_TO_ADDR
// if p3 = 7 then
4451: LD_VAR 0 3
4455: PUSH
4456: LD_INT 7
4458: EQUAL
4459: IFFALSE 4469
// sRadar := true ;
4461: LD_ADDR_EXP 67
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// if p3 = 8 then
4469: LD_VAR 0 3
4473: PUSH
4474: LD_INT 8
4476: EQUAL
4477: IFFALSE 4487
// sBunker := true ;
4479: LD_ADDR_EXP 68
4483: PUSH
4484: LD_INT 1
4486: ST_TO_ADDR
// if p3 = 9 then
4487: LD_VAR 0 3
4491: PUSH
4492: LD_INT 9
4494: EQUAL
4495: IFFALSE 4505
// sHack := true ;
4497: LD_ADDR_EXP 69
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// if p3 = 10 then
4505: LD_VAR 0 3
4509: PUSH
4510: LD_INT 10
4512: EQUAL
4513: IFFALSE 4523
// sFire := true ;
4515: LD_ADDR_EXP 70
4519: PUSH
4520: LD_INT 1
4522: ST_TO_ADDR
// if p3 = 11 then
4523: LD_VAR 0 3
4527: PUSH
4528: LD_INT 11
4530: EQUAL
4531: IFFALSE 4541
// sRefresh := true ;
4533: LD_ADDR_EXP 71
4537: PUSH
4538: LD_INT 1
4540: ST_TO_ADDR
// if p3 = 12 then
4541: LD_VAR 0 3
4545: PUSH
4546: LD_INT 12
4548: EQUAL
4549: IFFALSE 4559
// sExp := true ;
4551: LD_ADDR_EXP 72
4555: PUSH
4556: LD_INT 1
4558: ST_TO_ADDR
// if p3 = 13 then
4559: LD_VAR 0 3
4563: PUSH
4564: LD_INT 13
4566: EQUAL
4567: IFFALSE 4577
// sDepot := true ;
4569: LD_ADDR_EXP 73
4573: PUSH
4574: LD_INT 1
4576: ST_TO_ADDR
// if p3 = 14 then
4577: LD_VAR 0 3
4581: PUSH
4582: LD_INT 14
4584: EQUAL
4585: IFFALSE 4595
// sFlag := true ;
4587: LD_ADDR_EXP 74
4591: PUSH
4592: LD_INT 1
4594: ST_TO_ADDR
// if p3 = 15 then
4595: LD_VAR 0 3
4599: PUSH
4600: LD_INT 15
4602: EQUAL
4603: IFFALSE 4613
// sKamikadze := true ;
4605: LD_ADDR_EXP 82
4609: PUSH
4610: LD_INT 1
4612: ST_TO_ADDR
// if p3 = 16 then
4613: LD_VAR 0 3
4617: PUSH
4618: LD_INT 16
4620: EQUAL
4621: IFFALSE 4631
// sTroll := true ;
4623: LD_ADDR_EXP 83
4627: PUSH
4628: LD_INT 1
4630: ST_TO_ADDR
// if p3 = 17 then
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 17
4638: EQUAL
4639: IFFALSE 4649
// sSlow := true ;
4641: LD_ADDR_EXP 84
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// if p3 = 18 then
4649: LD_VAR 0 3
4653: PUSH
4654: LD_INT 18
4656: EQUAL
4657: IFFALSE 4667
// sLack := true ;
4659: LD_ADDR_EXP 85
4663: PUSH
4664: LD_INT 1
4666: ST_TO_ADDR
// if p3 = 19 then
4667: LD_VAR 0 3
4671: PUSH
4672: LD_INT 19
4674: EQUAL
4675: IFFALSE 4685
// sTank := true ;
4677: LD_ADDR_EXP 87
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// if p3 = 20 then
4685: LD_VAR 0 3
4689: PUSH
4690: LD_INT 20
4692: EQUAL
4693: IFFALSE 4703
// sRemote := true ;
4695: LD_ADDR_EXP 88
4699: PUSH
4700: LD_INT 1
4702: ST_TO_ADDR
// if p3 = 21 then
4703: LD_VAR 0 3
4707: PUSH
4708: LD_INT 21
4710: EQUAL
4711: IFFALSE 4721
// sPowell := true ;
4713: LD_ADDR_EXP 89
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// if p3 = 22 then
4721: LD_VAR 0 3
4725: PUSH
4726: LD_INT 22
4728: EQUAL
4729: IFFALSE 4739
// sTeleport := true ;
4731: LD_ADDR_EXP 92
4735: PUSH
4736: LD_INT 1
4738: ST_TO_ADDR
// if p3 = 23 then
4739: LD_VAR 0 3
4743: PUSH
4744: LD_INT 23
4746: EQUAL
4747: IFFALSE 4757
// sOilTower := true ;
4749: LD_ADDR_EXP 94
4753: PUSH
4754: LD_INT 1
4756: ST_TO_ADDR
// if p3 = 24 then
4757: LD_VAR 0 3
4761: PUSH
4762: LD_INT 24
4764: EQUAL
4765: IFFALSE 4775
// sShovel := true ;
4767: LD_ADDR_EXP 95
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// if p3 = 25 then
4775: LD_VAR 0 3
4779: PUSH
4780: LD_INT 25
4782: EQUAL
4783: IFFALSE 4793
// sSheik := true ;
4785: LD_ADDR_EXP 96
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// if p3 = 26 then
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 26
4800: EQUAL
4801: IFFALSE 4811
// sEarthquake := true ;
4803: LD_ADDR_EXP 98
4807: PUSH
4808: LD_INT 1
4810: ST_TO_ADDR
// if p3 = 27 then
4811: LD_VAR 0 3
4815: PUSH
4816: LD_INT 27
4818: EQUAL
4819: IFFALSE 4829
// sAI := true ;
4821: LD_ADDR_EXP 99
4825: PUSH
4826: LD_INT 1
4828: ST_TO_ADDR
// if p3 = 28 then
4829: LD_VAR 0 3
4833: PUSH
4834: LD_INT 28
4836: EQUAL
4837: IFFALSE 4847
// sCargo := true ;
4839: LD_ADDR_EXP 102
4843: PUSH
4844: LD_INT 1
4846: ST_TO_ADDR
// if p3 = 29 then
4847: LD_VAR 0 3
4851: PUSH
4852: LD_INT 29
4854: EQUAL
4855: IFFALSE 4865
// sDLaser := true ;
4857: LD_ADDR_EXP 103
4861: PUSH
4862: LD_INT 1
4864: ST_TO_ADDR
// if p3 = 30 then
4865: LD_VAR 0 3
4869: PUSH
4870: LD_INT 30
4872: EQUAL
4873: IFFALSE 4883
// sExchange := true ;
4875: LD_ADDR_EXP 104
4879: PUSH
4880: LD_INT 1
4882: ST_TO_ADDR
// if p3 = 31 then
4883: LD_VAR 0 3
4887: PUSH
4888: LD_INT 31
4890: EQUAL
4891: IFFALSE 4901
// sFac := true ;
4893: LD_ADDR_EXP 105
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// if p3 = 32 then
4901: LD_VAR 0 3
4905: PUSH
4906: LD_INT 32
4908: EQUAL
4909: IFFALSE 4919
// sPower := true ;
4911: LD_ADDR_EXP 106
4915: PUSH
4916: LD_INT 1
4918: ST_TO_ADDR
// if p3 = 33 then
4919: LD_VAR 0 3
4923: PUSH
4924: LD_INT 33
4926: EQUAL
4927: IFFALSE 4937
// sRandom := true ;
4929: LD_ADDR_EXP 107
4933: PUSH
4934: LD_INT 1
4936: ST_TO_ADDR
// if p3 = 34 then
4937: LD_VAR 0 3
4941: PUSH
4942: LD_INT 34
4944: EQUAL
4945: IFFALSE 4955
// sShield := true ;
4947: LD_ADDR_EXP 108
4951: PUSH
4952: LD_INT 1
4954: ST_TO_ADDR
// if p3 = 35 then
4955: LD_VAR 0 3
4959: PUSH
4960: LD_INT 35
4962: EQUAL
4963: IFFALSE 4973
// sTime := true ;
4965: LD_ADDR_EXP 109
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// if p3 = 36 then
4973: LD_VAR 0 3
4977: PUSH
4978: LD_INT 36
4980: EQUAL
4981: IFFALSE 4991
// sTools := true ;
4983: LD_ADDR_EXP 110
4987: PUSH
4988: LD_INT 1
4990: ST_TO_ADDR
// if p3 = 101 then
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 101
4998: EQUAL
4999: IFFALSE 5009
// sSold := true ;
5001: LD_ADDR_EXP 75
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if p3 = 102 then
5009: LD_VAR 0 3
5013: PUSH
5014: LD_INT 102
5016: EQUAL
5017: IFFALSE 5027
// sDiff := true ;
5019: LD_ADDR_EXP 76
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// if p3 = 103 then
5027: LD_VAR 0 3
5031: PUSH
5032: LD_INT 103
5034: EQUAL
5035: IFFALSE 5045
// sFog := true ;
5037: LD_ADDR_EXP 79
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// if p3 = 104 then
5045: LD_VAR 0 3
5049: PUSH
5050: LD_INT 104
5052: EQUAL
5053: IFFALSE 5063
// sReset := true ;
5055: LD_ADDR_EXP 80
5059: PUSH
5060: LD_INT 1
5062: ST_TO_ADDR
// if p3 = 105 then
5063: LD_VAR 0 3
5067: PUSH
5068: LD_INT 105
5070: EQUAL
5071: IFFALSE 5081
// sSun := true ;
5073: LD_ADDR_EXP 81
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// if p3 = 106 then
5081: LD_VAR 0 3
5085: PUSH
5086: LD_INT 106
5088: EQUAL
5089: IFFALSE 5099
// sTiger := true ;
5091: LD_ADDR_EXP 77
5095: PUSH
5096: LD_INT 1
5098: ST_TO_ADDR
// if p3 = 107 then
5099: LD_VAR 0 3
5103: PUSH
5104: LD_INT 107
5106: EQUAL
5107: IFFALSE 5117
// sBomb := true ;
5109: LD_ADDR_EXP 78
5113: PUSH
5114: LD_INT 1
5116: ST_TO_ADDR
// if p3 = 108 then
5117: LD_VAR 0 3
5121: PUSH
5122: LD_INT 108
5124: EQUAL
5125: IFFALSE 5135
// sWound := true ;
5127: LD_ADDR_EXP 86
5131: PUSH
5132: LD_INT 1
5134: ST_TO_ADDR
// if p3 = 109 then
5135: LD_VAR 0 3
5139: PUSH
5140: LD_INT 109
5142: EQUAL
5143: IFFALSE 5153
// sBetray := true ;
5145: LD_ADDR_EXP 90
5149: PUSH
5150: LD_INT 1
5152: ST_TO_ADDR
// if p3 = 110 then
5153: LD_VAR 0 3
5157: PUSH
5158: LD_INT 110
5160: EQUAL
5161: IFFALSE 5171
// sContamin := true ;
5163: LD_ADDR_EXP 91
5167: PUSH
5168: LD_INT 1
5170: ST_TO_ADDR
// if p3 = 111 then
5171: LD_VAR 0 3
5175: PUSH
5176: LD_INT 111
5178: EQUAL
5179: IFFALSE 5189
// sOil := true ;
5181: LD_ADDR_EXP 93
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// if p3 = 112 then
5189: LD_VAR 0 3
5193: PUSH
5194: LD_INT 112
5196: EQUAL
5197: IFFALSE 5207
// sStu := true ;
5199: LD_ADDR_EXP 97
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// if p3 = 113 then
5207: LD_VAR 0 3
5211: PUSH
5212: LD_INT 113
5214: EQUAL
5215: IFFALSE 5225
// sBazooka := true ;
5217: LD_ADDR_EXP 100
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if p3 = 114 then
5225: LD_VAR 0 3
5229: PUSH
5230: LD_INT 114
5232: EQUAL
5233: IFFALSE 5243
// sMortar := true ;
5235: LD_ADDR_EXP 101
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// if p3 = 115 then
5243: LD_VAR 0 3
5247: PUSH
5248: LD_INT 115
5250: EQUAL
5251: IFFALSE 5261
// sRanger := true ;
5253: LD_ADDR_EXP 111
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// if p3 = 116 then
5261: LD_VAR 0 3
5265: PUSH
5266: LD_INT 116
5268: EQUAL
5269: IFFALSE 5279
// sComputer := true ;
5271: LD_ADDR_EXP 112
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// if p3 = 117 then
5279: LD_VAR 0 3
5283: PUSH
5284: LD_INT 117
5286: EQUAL
5287: IFFALSE 5297
// s30 := true ;
5289: LD_ADDR_EXP 113
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// if p3 = 118 then
5297: LD_VAR 0 3
5301: PUSH
5302: LD_INT 118
5304: EQUAL
5305: IFFALSE 5315
// s60 := true ;
5307: LD_ADDR_EXP 114
5311: PUSH
5312: LD_INT 1
5314: ST_TO_ADDR
// end ; if p2 = 101 then
5315: LD_VAR 0 2
5319: PUSH
5320: LD_INT 101
5322: EQUAL
5323: IFFALSE 5451
// begin case p3 of 1 :
5325: LD_VAR 0 3
5329: PUSH
5330: LD_INT 1
5332: DOUBLE
5333: EQUAL
5334: IFTRUE 5338
5336: GO 5345
5338: POP
// hHackUnlimitedResources ; 2 :
5339: CALL 17549 0 0
5343: GO 5451
5345: LD_INT 2
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5360
5353: POP
// hHackSetLevel10 ; 3 :
5354: CALL 17682 0 0
5358: GO 5451
5360: LD_INT 3
5362: DOUBLE
5363: EQUAL
5364: IFTRUE 5368
5366: GO 5375
5368: POP
// hHackSetLevel10YourUnits ; 4 :
5369: CALL 17767 0 0
5373: GO 5451
5375: LD_INT 4
5377: DOUBLE
5378: EQUAL
5379: IFTRUE 5383
5381: GO 5390
5383: POP
// hHackInvincible ; 5 :
5384: CALL 18215 0 0
5388: GO 5451
5390: LD_INT 5
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5405
5398: POP
// hHackInvisible ; 6 :
5399: CALL 18326 0 0
5403: GO 5451
5405: LD_INT 6
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5420
5413: POP
// hHackChangeYourSide ; 7 :
5414: CALL 18383 0 0
5418: GO 5451
5420: LD_INT 7
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5435
5428: POP
// hHackChangeUnitSide ; 8 :
5429: CALL 18425 0 0
5433: GO 5451
5435: LD_INT 8
5437: DOUBLE
5438: EQUAL
5439: IFTRUE 5443
5441: GO 5450
5443: POP
// hHackFog ; end ;
5444: CALL 18526 0 0
5448: GO 5451
5450: POP
// end ; end ;
5451: LD_VAR 0 7
5455: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5456: GO 5458
5458: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5459: LD_STRING initStreamRollete();
5461: PPUSH
5462: CALL_OW 559
// InitStreamMode ;
5466: CALL 5478 0 0
// DefineStreamItems ( false ) ;
5470: LD_INT 0
5472: PPUSH
5473: CALL 5942 0 1
// end ;
5477: END
// function InitStreamMode ; begin
5478: LD_INT 0
5480: PPUSH
// streamModeActive := false ;
5481: LD_ADDR_EXP 58
5485: PUSH
5486: LD_INT 0
5488: ST_TO_ADDR
// normalCounter := 36 ;
5489: LD_ADDR_EXP 59
5493: PUSH
5494: LD_INT 36
5496: ST_TO_ADDR
// hardcoreCounter := 18 ;
5497: LD_ADDR_EXP 60
5501: PUSH
5502: LD_INT 18
5504: ST_TO_ADDR
// sRocket := false ;
5505: LD_ADDR_EXP 63
5509: PUSH
5510: LD_INT 0
5512: ST_TO_ADDR
// sSpeed := false ;
5513: LD_ADDR_EXP 62
5517: PUSH
5518: LD_INT 0
5520: ST_TO_ADDR
// sEngine := false ;
5521: LD_ADDR_EXP 64
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// sSpec := false ;
5529: LD_ADDR_EXP 61
5533: PUSH
5534: LD_INT 0
5536: ST_TO_ADDR
// sLevel := false ;
5537: LD_ADDR_EXP 65
5541: PUSH
5542: LD_INT 0
5544: ST_TO_ADDR
// sArmoury := false ;
5545: LD_ADDR_EXP 66
5549: PUSH
5550: LD_INT 0
5552: ST_TO_ADDR
// sRadar := false ;
5553: LD_ADDR_EXP 67
5557: PUSH
5558: LD_INT 0
5560: ST_TO_ADDR
// sBunker := false ;
5561: LD_ADDR_EXP 68
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
// sHack := false ;
5569: LD_ADDR_EXP 69
5573: PUSH
5574: LD_INT 0
5576: ST_TO_ADDR
// sFire := false ;
5577: LD_ADDR_EXP 70
5581: PUSH
5582: LD_INT 0
5584: ST_TO_ADDR
// sRefresh := false ;
5585: LD_ADDR_EXP 71
5589: PUSH
5590: LD_INT 0
5592: ST_TO_ADDR
// sExp := false ;
5593: LD_ADDR_EXP 72
5597: PUSH
5598: LD_INT 0
5600: ST_TO_ADDR
// sDepot := false ;
5601: LD_ADDR_EXP 73
5605: PUSH
5606: LD_INT 0
5608: ST_TO_ADDR
// sFlag := false ;
5609: LD_ADDR_EXP 74
5613: PUSH
5614: LD_INT 0
5616: ST_TO_ADDR
// sKamikadze := false ;
5617: LD_ADDR_EXP 82
5621: PUSH
5622: LD_INT 0
5624: ST_TO_ADDR
// sTroll := false ;
5625: LD_ADDR_EXP 83
5629: PUSH
5630: LD_INT 0
5632: ST_TO_ADDR
// sSlow := false ;
5633: LD_ADDR_EXP 84
5637: PUSH
5638: LD_INT 0
5640: ST_TO_ADDR
// sLack := false ;
5641: LD_ADDR_EXP 85
5645: PUSH
5646: LD_INT 0
5648: ST_TO_ADDR
// sTank := false ;
5649: LD_ADDR_EXP 87
5653: PUSH
5654: LD_INT 0
5656: ST_TO_ADDR
// sRemote := false ;
5657: LD_ADDR_EXP 88
5661: PUSH
5662: LD_INT 0
5664: ST_TO_ADDR
// sPowell := false ;
5665: LD_ADDR_EXP 89
5669: PUSH
5670: LD_INT 0
5672: ST_TO_ADDR
// sTeleport := false ;
5673: LD_ADDR_EXP 92
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// sOilTower := false ;
5681: LD_ADDR_EXP 94
5685: PUSH
5686: LD_INT 0
5688: ST_TO_ADDR
// sShovel := false ;
5689: LD_ADDR_EXP 95
5693: PUSH
5694: LD_INT 0
5696: ST_TO_ADDR
// sSheik := false ;
5697: LD_ADDR_EXP 96
5701: PUSH
5702: LD_INT 0
5704: ST_TO_ADDR
// sEarthquake := false ;
5705: LD_ADDR_EXP 98
5709: PUSH
5710: LD_INT 0
5712: ST_TO_ADDR
// sAI := false ;
5713: LD_ADDR_EXP 99
5717: PUSH
5718: LD_INT 0
5720: ST_TO_ADDR
// sCargo := false ;
5721: LD_ADDR_EXP 102
5725: PUSH
5726: LD_INT 0
5728: ST_TO_ADDR
// sDLaser := false ;
5729: LD_ADDR_EXP 103
5733: PUSH
5734: LD_INT 0
5736: ST_TO_ADDR
// sExchange := false ;
5737: LD_ADDR_EXP 104
5741: PUSH
5742: LD_INT 0
5744: ST_TO_ADDR
// sFac := false ;
5745: LD_ADDR_EXP 105
5749: PUSH
5750: LD_INT 0
5752: ST_TO_ADDR
// sPower := false ;
5753: LD_ADDR_EXP 106
5757: PUSH
5758: LD_INT 0
5760: ST_TO_ADDR
// sRandom := false ;
5761: LD_ADDR_EXP 107
5765: PUSH
5766: LD_INT 0
5768: ST_TO_ADDR
// sShield := false ;
5769: LD_ADDR_EXP 108
5773: PUSH
5774: LD_INT 0
5776: ST_TO_ADDR
// sTime := false ;
5777: LD_ADDR_EXP 109
5781: PUSH
5782: LD_INT 0
5784: ST_TO_ADDR
// sTools := false ;
5785: LD_ADDR_EXP 110
5789: PUSH
5790: LD_INT 0
5792: ST_TO_ADDR
// sSold := false ;
5793: LD_ADDR_EXP 75
5797: PUSH
5798: LD_INT 0
5800: ST_TO_ADDR
// sDiff := false ;
5801: LD_ADDR_EXP 76
5805: PUSH
5806: LD_INT 0
5808: ST_TO_ADDR
// sFog := false ;
5809: LD_ADDR_EXP 79
5813: PUSH
5814: LD_INT 0
5816: ST_TO_ADDR
// sReset := false ;
5817: LD_ADDR_EXP 80
5821: PUSH
5822: LD_INT 0
5824: ST_TO_ADDR
// sSun := false ;
5825: LD_ADDR_EXP 81
5829: PUSH
5830: LD_INT 0
5832: ST_TO_ADDR
// sTiger := false ;
5833: LD_ADDR_EXP 77
5837: PUSH
5838: LD_INT 0
5840: ST_TO_ADDR
// sBomb := false ;
5841: LD_ADDR_EXP 78
5845: PUSH
5846: LD_INT 0
5848: ST_TO_ADDR
// sWound := false ;
5849: LD_ADDR_EXP 86
5853: PUSH
5854: LD_INT 0
5856: ST_TO_ADDR
// sBetray := false ;
5857: LD_ADDR_EXP 90
5861: PUSH
5862: LD_INT 0
5864: ST_TO_ADDR
// sContamin := false ;
5865: LD_ADDR_EXP 91
5869: PUSH
5870: LD_INT 0
5872: ST_TO_ADDR
// sOil := false ;
5873: LD_ADDR_EXP 93
5877: PUSH
5878: LD_INT 0
5880: ST_TO_ADDR
// sStu := false ;
5881: LD_ADDR_EXP 97
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// sBazooka := false ;
5889: LD_ADDR_EXP 100
5893: PUSH
5894: LD_INT 0
5896: ST_TO_ADDR
// sMortar := false ;
5897: LD_ADDR_EXP 101
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
// sRanger := false ;
5905: LD_ADDR_EXP 111
5909: PUSH
5910: LD_INT 0
5912: ST_TO_ADDR
// sComputer := false ;
5913: LD_ADDR_EXP 112
5917: PUSH
5918: LD_INT 0
5920: ST_TO_ADDR
// s30 := false ;
5921: LD_ADDR_EXP 113
5925: PUSH
5926: LD_INT 0
5928: ST_TO_ADDR
// s60 := false ;
5929: LD_ADDR_EXP 114
5933: PUSH
5934: LD_INT 0
5936: ST_TO_ADDR
// end ;
5937: LD_VAR 0 1
5941: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5942: LD_INT 0
5944: PPUSH
5945: PPUSH
5946: PPUSH
5947: PPUSH
5948: PPUSH
5949: PPUSH
5950: PPUSH
// result := [ ] ;
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: EMPTY
5957: ST_TO_ADDR
// if campaign_id = 1 then
5958: LD_OWVAR 69
5962: PUSH
5963: LD_INT 1
5965: EQUAL
5966: IFFALSE 9132
// begin case mission_number of 1 :
5968: LD_OWVAR 70
5972: PUSH
5973: LD_INT 1
5975: DOUBLE
5976: EQUAL
5977: IFTRUE 5981
5979: GO 6057
5981: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_INT 2
5989: PUSH
5990: LD_INT 4
5992: PUSH
5993: LD_INT 11
5995: PUSH
5996: LD_INT 12
5998: PUSH
5999: LD_INT 15
6001: PUSH
6002: LD_INT 16
6004: PUSH
6005: LD_INT 22
6007: PUSH
6008: LD_INT 23
6010: PUSH
6011: LD_INT 26
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: PUSH
6025: LD_INT 101
6027: PUSH
6028: LD_INT 102
6030: PUSH
6031: LD_INT 106
6033: PUSH
6034: LD_INT 116
6036: PUSH
6037: LD_INT 117
6039: PUSH
6040: LD_INT 118
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: ST_TO_ADDR
6055: GO 9130
6057: LD_INT 2
6059: DOUBLE
6060: EQUAL
6061: IFTRUE 6065
6063: GO 6149
6065: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6066: LD_ADDR_VAR 0 2
6070: PUSH
6071: LD_INT 2
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 11
6079: PUSH
6080: LD_INT 12
6082: PUSH
6083: LD_INT 15
6085: PUSH
6086: LD_INT 16
6088: PUSH
6089: LD_INT 22
6091: PUSH
6092: LD_INT 23
6094: PUSH
6095: LD_INT 26
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 101
6111: PUSH
6112: LD_INT 102
6114: PUSH
6115: LD_INT 105
6117: PUSH
6118: LD_INT 106
6120: PUSH
6121: LD_INT 108
6123: PUSH
6124: LD_INT 116
6126: PUSH
6127: LD_INT 117
6129: PUSH
6130: LD_INT 118
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: ST_TO_ADDR
6147: GO 9130
6149: LD_INT 3
6151: DOUBLE
6152: EQUAL
6153: IFTRUE 6157
6155: GO 6245
6157: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6158: LD_ADDR_VAR 0 2
6162: PUSH
6163: LD_INT 2
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 5
6171: PUSH
6172: LD_INT 11
6174: PUSH
6175: LD_INT 12
6177: PUSH
6178: LD_INT 15
6180: PUSH
6181: LD_INT 16
6183: PUSH
6184: LD_INT 22
6186: PUSH
6187: LD_INT 26
6189: PUSH
6190: LD_INT 36
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: PUSH
6205: LD_INT 101
6207: PUSH
6208: LD_INT 102
6210: PUSH
6211: LD_INT 105
6213: PUSH
6214: LD_INT 106
6216: PUSH
6217: LD_INT 108
6219: PUSH
6220: LD_INT 116
6222: PUSH
6223: LD_INT 117
6225: PUSH
6226: LD_INT 118
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: ST_TO_ADDR
6243: GO 9130
6245: LD_INT 4
6247: DOUBLE
6248: EQUAL
6249: IFTRUE 6253
6251: GO 6349
6253: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6254: LD_ADDR_VAR 0 2
6258: PUSH
6259: LD_INT 2
6261: PUSH
6262: LD_INT 4
6264: PUSH
6265: LD_INT 5
6267: PUSH
6268: LD_INT 8
6270: PUSH
6271: LD_INT 11
6273: PUSH
6274: LD_INT 12
6276: PUSH
6277: LD_INT 15
6279: PUSH
6280: LD_INT 16
6282: PUSH
6283: LD_INT 22
6285: PUSH
6286: LD_INT 23
6288: PUSH
6289: LD_INT 26
6291: PUSH
6292: LD_INT 36
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 101
6311: PUSH
6312: LD_INT 102
6314: PUSH
6315: LD_INT 105
6317: PUSH
6318: LD_INT 106
6320: PUSH
6321: LD_INT 108
6323: PUSH
6324: LD_INT 116
6326: PUSH
6327: LD_INT 117
6329: PUSH
6330: LD_INT 118
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: ST_TO_ADDR
6347: GO 9130
6349: LD_INT 5
6351: DOUBLE
6352: EQUAL
6353: IFTRUE 6357
6355: GO 6469
6357: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6358: LD_ADDR_VAR 0 2
6362: PUSH
6363: LD_INT 2
6365: PUSH
6366: LD_INT 4
6368: PUSH
6369: LD_INT 5
6371: PUSH
6372: LD_INT 6
6374: PUSH
6375: LD_INT 8
6377: PUSH
6378: LD_INT 11
6380: PUSH
6381: LD_INT 12
6383: PUSH
6384: LD_INT 15
6386: PUSH
6387: LD_INT 16
6389: PUSH
6390: LD_INT 22
6392: PUSH
6393: LD_INT 23
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: LD_INT 26
6401: PUSH
6402: LD_INT 36
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 101
6423: PUSH
6424: LD_INT 102
6426: PUSH
6427: LD_INT 105
6429: PUSH
6430: LD_INT 106
6432: PUSH
6433: LD_INT 108
6435: PUSH
6436: LD_INT 109
6438: PUSH
6439: LD_INT 112
6441: PUSH
6442: LD_INT 116
6444: PUSH
6445: LD_INT 117
6447: PUSH
6448: LD_INT 118
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: ST_TO_ADDR
6467: GO 9130
6469: LD_INT 6
6471: DOUBLE
6472: EQUAL
6473: IFTRUE 6477
6475: GO 6609
6477: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6478: LD_ADDR_VAR 0 2
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 4
6488: PUSH
6489: LD_INT 5
6491: PUSH
6492: LD_INT 6
6494: PUSH
6495: LD_INT 8
6497: PUSH
6498: LD_INT 11
6500: PUSH
6501: LD_INT 12
6503: PUSH
6504: LD_INT 15
6506: PUSH
6507: LD_INT 16
6509: PUSH
6510: LD_INT 20
6512: PUSH
6513: LD_INT 21
6515: PUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 23
6521: PUSH
6522: LD_INT 25
6524: PUSH
6525: LD_INT 26
6527: PUSH
6528: LD_INT 30
6530: PUSH
6531: LD_INT 31
6533: PUSH
6534: LD_INT 32
6536: PUSH
6537: LD_INT 36
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 101
6563: PUSH
6564: LD_INT 102
6566: PUSH
6567: LD_INT 105
6569: PUSH
6570: LD_INT 106
6572: PUSH
6573: LD_INT 108
6575: PUSH
6576: LD_INT 109
6578: PUSH
6579: LD_INT 112
6581: PUSH
6582: LD_INT 116
6584: PUSH
6585: LD_INT 117
6587: PUSH
6588: LD_INT 118
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: ST_TO_ADDR
6607: GO 9130
6609: LD_INT 7
6611: DOUBLE
6612: EQUAL
6613: IFTRUE 6617
6615: GO 6729
6617: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6618: LD_ADDR_VAR 0 2
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 4
6628: PUSH
6629: LD_INT 5
6631: PUSH
6632: LD_INT 7
6634: PUSH
6635: LD_INT 11
6637: PUSH
6638: LD_INT 12
6640: PUSH
6641: LD_INT 15
6643: PUSH
6644: LD_INT 16
6646: PUSH
6647: LD_INT 20
6649: PUSH
6650: LD_INT 21
6652: PUSH
6653: LD_INT 22
6655: PUSH
6656: LD_INT 23
6658: PUSH
6659: LD_INT 25
6661: PUSH
6662: LD_INT 26
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 101
6683: PUSH
6684: LD_INT 102
6686: PUSH
6687: LD_INT 103
6689: PUSH
6690: LD_INT 105
6692: PUSH
6693: LD_INT 106
6695: PUSH
6696: LD_INT 108
6698: PUSH
6699: LD_INT 112
6701: PUSH
6702: LD_INT 116
6704: PUSH
6705: LD_INT 117
6707: PUSH
6708: LD_INT 118
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: ST_TO_ADDR
6727: GO 9130
6729: LD_INT 8
6731: DOUBLE
6732: EQUAL
6733: IFTRUE 6737
6735: GO 6877
6737: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6738: LD_ADDR_VAR 0 2
6742: PUSH
6743: LD_INT 2
6745: PUSH
6746: LD_INT 4
6748: PUSH
6749: LD_INT 5
6751: PUSH
6752: LD_INT 6
6754: PUSH
6755: LD_INT 7
6757: PUSH
6758: LD_INT 8
6760: PUSH
6761: LD_INT 11
6763: PUSH
6764: LD_INT 12
6766: PUSH
6767: LD_INT 15
6769: PUSH
6770: LD_INT 16
6772: PUSH
6773: LD_INT 20
6775: PUSH
6776: LD_INT 21
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 23
6784: PUSH
6785: LD_INT 25
6787: PUSH
6788: LD_INT 26
6790: PUSH
6791: LD_INT 30
6793: PUSH
6794: LD_INT 31
6796: PUSH
6797: LD_INT 32
6799: PUSH
6800: LD_INT 36
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PUSH
6825: LD_INT 101
6827: PUSH
6828: LD_INT 102
6830: PUSH
6831: LD_INT 103
6833: PUSH
6834: LD_INT 105
6836: PUSH
6837: LD_INT 106
6839: PUSH
6840: LD_INT 108
6842: PUSH
6843: LD_INT 109
6845: PUSH
6846: LD_INT 112
6848: PUSH
6849: LD_INT 116
6851: PUSH
6852: LD_INT 117
6854: PUSH
6855: LD_INT 118
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: ST_TO_ADDR
6875: GO 9130
6877: LD_INT 9
6879: DOUBLE
6880: EQUAL
6881: IFTRUE 6885
6883: GO 7033
6885: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6886: LD_ADDR_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: PUSH
6894: LD_INT 4
6896: PUSH
6897: LD_INT 5
6899: PUSH
6900: LD_INT 6
6902: PUSH
6903: LD_INT 7
6905: PUSH
6906: LD_INT 8
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 15
6917: PUSH
6918: LD_INT 16
6920: PUSH
6921: LD_INT 20
6923: PUSH
6924: LD_INT 21
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_INT 23
6932: PUSH
6933: LD_INT 25
6935: PUSH
6936: LD_INT 26
6938: PUSH
6939: LD_INT 28
6941: PUSH
6942: LD_INT 30
6944: PUSH
6945: LD_INT 31
6947: PUSH
6948: LD_INT 32
6950: PUSH
6951: LD_INT 36
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 101
6979: PUSH
6980: LD_INT 102
6982: PUSH
6983: LD_INT 103
6985: PUSH
6986: LD_INT 105
6988: PUSH
6989: LD_INT 106
6991: PUSH
6992: LD_INT 108
6994: PUSH
6995: LD_INT 109
6997: PUSH
6998: LD_INT 112
7000: PUSH
7001: LD_INT 114
7003: PUSH
7004: LD_INT 116
7006: PUSH
7007: LD_INT 117
7009: PUSH
7010: LD_INT 118
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: ST_TO_ADDR
7031: GO 9130
7033: LD_INT 10
7035: DOUBLE
7036: EQUAL
7037: IFTRUE 7041
7039: GO 7237
7041: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7042: LD_ADDR_VAR 0 2
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 4
7052: PUSH
7053: LD_INT 5
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: LD_INT 7
7061: PUSH
7062: LD_INT 8
7064: PUSH
7065: LD_INT 9
7067: PUSH
7068: LD_INT 10
7070: PUSH
7071: LD_INT 11
7073: PUSH
7074: LD_INT 12
7076: PUSH
7077: LD_INT 13
7079: PUSH
7080: LD_INT 14
7082: PUSH
7083: LD_INT 15
7085: PUSH
7086: LD_INT 16
7088: PUSH
7089: LD_INT 17
7091: PUSH
7092: LD_INT 18
7094: PUSH
7095: LD_INT 19
7097: PUSH
7098: LD_INT 20
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 23
7109: PUSH
7110: LD_INT 24
7112: PUSH
7113: LD_INT 25
7115: PUSH
7116: LD_INT 26
7118: PUSH
7119: LD_INT 28
7121: PUSH
7122: LD_INT 30
7124: PUSH
7125: LD_INT 31
7127: PUSH
7128: LD_INT 32
7130: PUSH
7131: LD_INT 36
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: PUSH
7165: LD_INT 101
7167: PUSH
7168: LD_INT 102
7170: PUSH
7171: LD_INT 103
7173: PUSH
7174: LD_INT 104
7176: PUSH
7177: LD_INT 105
7179: PUSH
7180: LD_INT 106
7182: PUSH
7183: LD_INT 107
7185: PUSH
7186: LD_INT 108
7188: PUSH
7189: LD_INT 109
7191: PUSH
7192: LD_INT 110
7194: PUSH
7195: LD_INT 111
7197: PUSH
7198: LD_INT 112
7200: PUSH
7201: LD_INT 114
7203: PUSH
7204: LD_INT 116
7206: PUSH
7207: LD_INT 117
7209: PUSH
7210: LD_INT 118
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 9130
7237: LD_INT 11
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7449
7245: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7246: LD_ADDR_VAR 0 2
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 3
7256: PUSH
7257: LD_INT 4
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: LD_INT 6
7265: PUSH
7266: LD_INT 7
7268: PUSH
7269: LD_INT 8
7271: PUSH
7272: LD_INT 9
7274: PUSH
7275: LD_INT 10
7277: PUSH
7278: LD_INT 11
7280: PUSH
7281: LD_INT 12
7283: PUSH
7284: LD_INT 13
7286: PUSH
7287: LD_INT 14
7289: PUSH
7290: LD_INT 15
7292: PUSH
7293: LD_INT 16
7295: PUSH
7296: LD_INT 17
7298: PUSH
7299: LD_INT 18
7301: PUSH
7302: LD_INT 19
7304: PUSH
7305: LD_INT 20
7307: PUSH
7308: LD_INT 21
7310: PUSH
7311: LD_INT 22
7313: PUSH
7314: LD_INT 23
7316: PUSH
7317: LD_INT 24
7319: PUSH
7320: LD_INT 25
7322: PUSH
7323: LD_INT 26
7325: PUSH
7326: LD_INT 28
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 31
7334: PUSH
7335: LD_INT 32
7337: PUSH
7338: LD_INT 34
7340: PUSH
7341: LD_INT 36
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 101
7379: PUSH
7380: LD_INT 102
7382: PUSH
7383: LD_INT 103
7385: PUSH
7386: LD_INT 104
7388: PUSH
7389: LD_INT 105
7391: PUSH
7392: LD_INT 106
7394: PUSH
7395: LD_INT 107
7397: PUSH
7398: LD_INT 108
7400: PUSH
7401: LD_INT 109
7403: PUSH
7404: LD_INT 110
7406: PUSH
7407: LD_INT 111
7409: PUSH
7410: LD_INT 112
7412: PUSH
7413: LD_INT 114
7415: PUSH
7416: LD_INT 116
7418: PUSH
7419: LD_INT 117
7421: PUSH
7422: LD_INT 118
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: ST_TO_ADDR
7447: GO 9130
7449: LD_INT 12
7451: DOUBLE
7452: EQUAL
7453: IFTRUE 7457
7455: GO 7677
7457: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7458: LD_ADDR_VAR 0 2
7462: PUSH
7463: LD_INT 1
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 3
7471: PUSH
7472: LD_INT 4
7474: PUSH
7475: LD_INT 5
7477: PUSH
7478: LD_INT 6
7480: PUSH
7481: LD_INT 7
7483: PUSH
7484: LD_INT 8
7486: PUSH
7487: LD_INT 9
7489: PUSH
7490: LD_INT 10
7492: PUSH
7493: LD_INT 11
7495: PUSH
7496: LD_INT 12
7498: PUSH
7499: LD_INT 13
7501: PUSH
7502: LD_INT 14
7504: PUSH
7505: LD_INT 15
7507: PUSH
7508: LD_INT 16
7510: PUSH
7511: LD_INT 17
7513: PUSH
7514: LD_INT 18
7516: PUSH
7517: LD_INT 19
7519: PUSH
7520: LD_INT 20
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: LD_INT 22
7528: PUSH
7529: LD_INT 23
7531: PUSH
7532: LD_INT 24
7534: PUSH
7535: LD_INT 25
7537: PUSH
7538: LD_INT 26
7540: PUSH
7541: LD_INT 27
7543: PUSH
7544: LD_INT 28
7546: PUSH
7547: LD_INT 30
7549: PUSH
7550: LD_INT 31
7552: PUSH
7553: LD_INT 32
7555: PUSH
7556: LD_INT 33
7558: PUSH
7559: LD_INT 34
7561: PUSH
7562: LD_INT 36
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 101
7603: PUSH
7604: LD_INT 102
7606: PUSH
7607: LD_INT 103
7609: PUSH
7610: LD_INT 104
7612: PUSH
7613: LD_INT 105
7615: PUSH
7616: LD_INT 106
7618: PUSH
7619: LD_INT 107
7621: PUSH
7622: LD_INT 108
7624: PUSH
7625: LD_INT 109
7627: PUSH
7628: LD_INT 110
7630: PUSH
7631: LD_INT 111
7633: PUSH
7634: LD_INT 112
7636: PUSH
7637: LD_INT 113
7639: PUSH
7640: LD_INT 114
7642: PUSH
7643: LD_INT 116
7645: PUSH
7646: LD_INT 117
7648: PUSH
7649: LD_INT 118
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: ST_TO_ADDR
7675: GO 9130
7677: LD_INT 13
7679: DOUBLE
7680: EQUAL
7681: IFTRUE 7685
7683: GO 7893
7685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7686: LD_ADDR_VAR 0 2
7690: PUSH
7691: LD_INT 1
7693: PUSH
7694: LD_INT 2
7696: PUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 4
7702: PUSH
7703: LD_INT 5
7705: PUSH
7706: LD_INT 8
7708: PUSH
7709: LD_INT 9
7711: PUSH
7712: LD_INT 10
7714: PUSH
7715: LD_INT 11
7717: PUSH
7718: LD_INT 12
7720: PUSH
7721: LD_INT 14
7723: PUSH
7724: LD_INT 15
7726: PUSH
7727: LD_INT 16
7729: PUSH
7730: LD_INT 17
7732: PUSH
7733: LD_INT 18
7735: PUSH
7736: LD_INT 19
7738: PUSH
7739: LD_INT 20
7741: PUSH
7742: LD_INT 21
7744: PUSH
7745: LD_INT 22
7747: PUSH
7748: LD_INT 23
7750: PUSH
7751: LD_INT 24
7753: PUSH
7754: LD_INT 25
7756: PUSH
7757: LD_INT 26
7759: PUSH
7760: LD_INT 27
7762: PUSH
7763: LD_INT 28
7765: PUSH
7766: LD_INT 30
7768: PUSH
7769: LD_INT 31
7771: PUSH
7772: LD_INT 32
7774: PUSH
7775: LD_INT 33
7777: PUSH
7778: LD_INT 34
7780: PUSH
7781: LD_INT 36
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 101
7819: PUSH
7820: LD_INT 102
7822: PUSH
7823: LD_INT 103
7825: PUSH
7826: LD_INT 104
7828: PUSH
7829: LD_INT 105
7831: PUSH
7832: LD_INT 106
7834: PUSH
7835: LD_INT 107
7837: PUSH
7838: LD_INT 108
7840: PUSH
7841: LD_INT 109
7843: PUSH
7844: LD_INT 110
7846: PUSH
7847: LD_INT 111
7849: PUSH
7850: LD_INT 112
7852: PUSH
7853: LD_INT 113
7855: PUSH
7856: LD_INT 114
7858: PUSH
7859: LD_INT 116
7861: PUSH
7862: LD_INT 117
7864: PUSH
7865: LD_INT 118
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: ST_TO_ADDR
7891: GO 9130
7893: LD_INT 14
7895: DOUBLE
7896: EQUAL
7897: IFTRUE 7901
7899: GO 8125
7901: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_INT 1
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 3
7915: PUSH
7916: LD_INT 4
7918: PUSH
7919: LD_INT 5
7921: PUSH
7922: LD_INT 6
7924: PUSH
7925: LD_INT 7
7927: PUSH
7928: LD_INT 8
7930: PUSH
7931: LD_INT 9
7933: PUSH
7934: LD_INT 10
7936: PUSH
7937: LD_INT 11
7939: PUSH
7940: LD_INT 12
7942: PUSH
7943: LD_INT 13
7945: PUSH
7946: LD_INT 14
7948: PUSH
7949: LD_INT 15
7951: PUSH
7952: LD_INT 16
7954: PUSH
7955: LD_INT 17
7957: PUSH
7958: LD_INT 18
7960: PUSH
7961: LD_INT 19
7963: PUSH
7964: LD_INT 20
7966: PUSH
7967: LD_INT 21
7969: PUSH
7970: LD_INT 22
7972: PUSH
7973: LD_INT 23
7975: PUSH
7976: LD_INT 24
7978: PUSH
7979: LD_INT 25
7981: PUSH
7982: LD_INT 26
7984: PUSH
7985: LD_INT 27
7987: PUSH
7988: LD_INT 28
7990: PUSH
7991: LD_INT 29
7993: PUSH
7994: LD_INT 30
7996: PUSH
7997: LD_INT 31
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: LD_INT 33
8005: PUSH
8006: LD_INT 34
8008: PUSH
8009: LD_INT 36
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 101
8051: PUSH
8052: LD_INT 102
8054: PUSH
8055: LD_INT 103
8057: PUSH
8058: LD_INT 104
8060: PUSH
8061: LD_INT 105
8063: PUSH
8064: LD_INT 106
8066: PUSH
8067: LD_INT 107
8069: PUSH
8070: LD_INT 108
8072: PUSH
8073: LD_INT 109
8075: PUSH
8076: LD_INT 110
8078: PUSH
8079: LD_INT 111
8081: PUSH
8082: LD_INT 112
8084: PUSH
8085: LD_INT 113
8087: PUSH
8088: LD_INT 114
8090: PUSH
8091: LD_INT 116
8093: PUSH
8094: LD_INT 117
8096: PUSH
8097: LD_INT 118
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
8123: GO 9130
8125: LD_INT 15
8127: DOUBLE
8128: EQUAL
8129: IFTRUE 8133
8131: GO 8357
8133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_INT 1
8141: PUSH
8142: LD_INT 2
8144: PUSH
8145: LD_INT 3
8147: PUSH
8148: LD_INT 4
8150: PUSH
8151: LD_INT 5
8153: PUSH
8154: LD_INT 6
8156: PUSH
8157: LD_INT 7
8159: PUSH
8160: LD_INT 8
8162: PUSH
8163: LD_INT 9
8165: PUSH
8166: LD_INT 10
8168: PUSH
8169: LD_INT 11
8171: PUSH
8172: LD_INT 12
8174: PUSH
8175: LD_INT 13
8177: PUSH
8178: LD_INT 14
8180: PUSH
8181: LD_INT 15
8183: PUSH
8184: LD_INT 16
8186: PUSH
8187: LD_INT 17
8189: PUSH
8190: LD_INT 18
8192: PUSH
8193: LD_INT 19
8195: PUSH
8196: LD_INT 20
8198: PUSH
8199: LD_INT 21
8201: PUSH
8202: LD_INT 22
8204: PUSH
8205: LD_INT 23
8207: PUSH
8208: LD_INT 24
8210: PUSH
8211: LD_INT 25
8213: PUSH
8214: LD_INT 26
8216: PUSH
8217: LD_INT 27
8219: PUSH
8220: LD_INT 28
8222: PUSH
8223: LD_INT 29
8225: PUSH
8226: LD_INT 30
8228: PUSH
8229: LD_INT 31
8231: PUSH
8232: LD_INT 32
8234: PUSH
8235: LD_INT 33
8237: PUSH
8238: LD_INT 34
8240: PUSH
8241: LD_INT 36
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 101
8283: PUSH
8284: LD_INT 102
8286: PUSH
8287: LD_INT 103
8289: PUSH
8290: LD_INT 104
8292: PUSH
8293: LD_INT 105
8295: PUSH
8296: LD_INT 106
8298: PUSH
8299: LD_INT 107
8301: PUSH
8302: LD_INT 108
8304: PUSH
8305: LD_INT 109
8307: PUSH
8308: LD_INT 110
8310: PUSH
8311: LD_INT 111
8313: PUSH
8314: LD_INT 112
8316: PUSH
8317: LD_INT 113
8319: PUSH
8320: LD_INT 114
8322: PUSH
8323: LD_INT 116
8325: PUSH
8326: LD_INT 117
8328: PUSH
8329: LD_INT 118
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: ST_TO_ADDR
8355: GO 9130
8357: LD_INT 16
8359: DOUBLE
8360: EQUAL
8361: IFTRUE 8365
8363: GO 8501
8365: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8366: LD_ADDR_VAR 0 2
8370: PUSH
8371: LD_INT 2
8373: PUSH
8374: LD_INT 4
8376: PUSH
8377: LD_INT 5
8379: PUSH
8380: LD_INT 7
8382: PUSH
8383: LD_INT 11
8385: PUSH
8386: LD_INT 12
8388: PUSH
8389: LD_INT 15
8391: PUSH
8392: LD_INT 16
8394: PUSH
8395: LD_INT 20
8397: PUSH
8398: LD_INT 21
8400: PUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 23
8406: PUSH
8407: LD_INT 25
8409: PUSH
8410: LD_INT 26
8412: PUSH
8413: LD_INT 30
8415: PUSH
8416: LD_INT 31
8418: PUSH
8419: LD_INT 32
8421: PUSH
8422: LD_INT 33
8424: PUSH
8425: LD_INT 34
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 101
8451: PUSH
8452: LD_INT 102
8454: PUSH
8455: LD_INT 103
8457: PUSH
8458: LD_INT 106
8460: PUSH
8461: LD_INT 108
8463: PUSH
8464: LD_INT 112
8466: PUSH
8467: LD_INT 113
8469: PUSH
8470: LD_INT 114
8472: PUSH
8473: LD_INT 116
8475: PUSH
8476: LD_INT 117
8478: PUSH
8479: LD_INT 118
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: ST_TO_ADDR
8499: GO 9130
8501: LD_INT 17
8503: DOUBLE
8504: EQUAL
8505: IFTRUE 8509
8507: GO 8733
8509: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_INT 1
8517: PUSH
8518: LD_INT 2
8520: PUSH
8521: LD_INT 3
8523: PUSH
8524: LD_INT 4
8526: PUSH
8527: LD_INT 5
8529: PUSH
8530: LD_INT 6
8532: PUSH
8533: LD_INT 7
8535: PUSH
8536: LD_INT 8
8538: PUSH
8539: LD_INT 9
8541: PUSH
8542: LD_INT 10
8544: PUSH
8545: LD_INT 11
8547: PUSH
8548: LD_INT 12
8550: PUSH
8551: LD_INT 13
8553: PUSH
8554: LD_INT 14
8556: PUSH
8557: LD_INT 15
8559: PUSH
8560: LD_INT 16
8562: PUSH
8563: LD_INT 17
8565: PUSH
8566: LD_INT 18
8568: PUSH
8569: LD_INT 19
8571: PUSH
8572: LD_INT 20
8574: PUSH
8575: LD_INT 21
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: LD_INT 23
8583: PUSH
8584: LD_INT 24
8586: PUSH
8587: LD_INT 25
8589: PUSH
8590: LD_INT 26
8592: PUSH
8593: LD_INT 27
8595: PUSH
8596: LD_INT 28
8598: PUSH
8599: LD_INT 29
8601: PUSH
8602: LD_INT 30
8604: PUSH
8605: LD_INT 31
8607: PUSH
8608: LD_INT 32
8610: PUSH
8611: LD_INT 33
8613: PUSH
8614: LD_INT 34
8616: PUSH
8617: LD_INT 36
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 101
8659: PUSH
8660: LD_INT 102
8662: PUSH
8663: LD_INT 103
8665: PUSH
8666: LD_INT 104
8668: PUSH
8669: LD_INT 105
8671: PUSH
8672: LD_INT 106
8674: PUSH
8675: LD_INT 107
8677: PUSH
8678: LD_INT 108
8680: PUSH
8681: LD_INT 109
8683: PUSH
8684: LD_INT 110
8686: PUSH
8687: LD_INT 111
8689: PUSH
8690: LD_INT 112
8692: PUSH
8693: LD_INT 113
8695: PUSH
8696: LD_INT 114
8698: PUSH
8699: LD_INT 116
8701: PUSH
8702: LD_INT 117
8704: PUSH
8705: LD_INT 118
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: ST_TO_ADDR
8731: GO 9130
8733: LD_INT 18
8735: DOUBLE
8736: EQUAL
8737: IFTRUE 8741
8739: GO 8889
8741: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8742: LD_ADDR_VAR 0 2
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: LD_INT 4
8752: PUSH
8753: LD_INT 5
8755: PUSH
8756: LD_INT 7
8758: PUSH
8759: LD_INT 11
8761: PUSH
8762: LD_INT 12
8764: PUSH
8765: LD_INT 15
8767: PUSH
8768: LD_INT 16
8770: PUSH
8771: LD_INT 20
8773: PUSH
8774: LD_INT 21
8776: PUSH
8777: LD_INT 22
8779: PUSH
8780: LD_INT 23
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 26
8788: PUSH
8789: LD_INT 30
8791: PUSH
8792: LD_INT 31
8794: PUSH
8795: LD_INT 32
8797: PUSH
8798: LD_INT 33
8800: PUSH
8801: LD_INT 34
8803: PUSH
8804: LD_INT 35
8806: PUSH
8807: LD_INT 36
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 101
8835: PUSH
8836: LD_INT 102
8838: PUSH
8839: LD_INT 103
8841: PUSH
8842: LD_INT 106
8844: PUSH
8845: LD_INT 108
8847: PUSH
8848: LD_INT 112
8850: PUSH
8851: LD_INT 113
8853: PUSH
8854: LD_INT 114
8856: PUSH
8857: LD_INT 115
8859: PUSH
8860: LD_INT 116
8862: PUSH
8863: LD_INT 117
8865: PUSH
8866: LD_INT 118
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: ST_TO_ADDR
8887: GO 9130
8889: LD_INT 19
8891: DOUBLE
8892: EQUAL
8893: IFTRUE 8897
8895: GO 9129
8897: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8898: LD_ADDR_VAR 0 2
8902: PUSH
8903: LD_INT 1
8905: PUSH
8906: LD_INT 2
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: LD_INT 4
8914: PUSH
8915: LD_INT 5
8917: PUSH
8918: LD_INT 6
8920: PUSH
8921: LD_INT 7
8923: PUSH
8924: LD_INT 8
8926: PUSH
8927: LD_INT 9
8929: PUSH
8930: LD_INT 10
8932: PUSH
8933: LD_INT 11
8935: PUSH
8936: LD_INT 12
8938: PUSH
8939: LD_INT 13
8941: PUSH
8942: LD_INT 14
8944: PUSH
8945: LD_INT 15
8947: PUSH
8948: LD_INT 16
8950: PUSH
8951: LD_INT 17
8953: PUSH
8954: LD_INT 18
8956: PUSH
8957: LD_INT 19
8959: PUSH
8960: LD_INT 20
8962: PUSH
8963: LD_INT 21
8965: PUSH
8966: LD_INT 22
8968: PUSH
8969: LD_INT 23
8971: PUSH
8972: LD_INT 24
8974: PUSH
8975: LD_INT 25
8977: PUSH
8978: LD_INT 26
8980: PUSH
8981: LD_INT 27
8983: PUSH
8984: LD_INT 28
8986: PUSH
8987: LD_INT 29
8989: PUSH
8990: LD_INT 30
8992: PUSH
8993: LD_INT 31
8995: PUSH
8996: LD_INT 32
8998: PUSH
8999: LD_INT 33
9001: PUSH
9002: LD_INT 34
9004: PUSH
9005: LD_INT 35
9007: PUSH
9008: LD_INT 36
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 101
9051: PUSH
9052: LD_INT 102
9054: PUSH
9055: LD_INT 103
9057: PUSH
9058: LD_INT 104
9060: PUSH
9061: LD_INT 105
9063: PUSH
9064: LD_INT 106
9066: PUSH
9067: LD_INT 107
9069: PUSH
9070: LD_INT 108
9072: PUSH
9073: LD_INT 109
9075: PUSH
9076: LD_INT 110
9078: PUSH
9079: LD_INT 111
9081: PUSH
9082: LD_INT 112
9084: PUSH
9085: LD_INT 113
9087: PUSH
9088: LD_INT 114
9090: PUSH
9091: LD_INT 115
9093: PUSH
9094: LD_INT 116
9096: PUSH
9097: LD_INT 117
9099: PUSH
9100: LD_INT 118
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: ST_TO_ADDR
9127: GO 9130
9129: POP
// end else
9130: GO 9361
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9132: LD_ADDR_VAR 0 2
9136: PUSH
9137: LD_INT 1
9139: PUSH
9140: LD_INT 2
9142: PUSH
9143: LD_INT 3
9145: PUSH
9146: LD_INT 4
9148: PUSH
9149: LD_INT 5
9151: PUSH
9152: LD_INT 6
9154: PUSH
9155: LD_INT 7
9157: PUSH
9158: LD_INT 8
9160: PUSH
9161: LD_INT 9
9163: PUSH
9164: LD_INT 10
9166: PUSH
9167: LD_INT 11
9169: PUSH
9170: LD_INT 12
9172: PUSH
9173: LD_INT 13
9175: PUSH
9176: LD_INT 14
9178: PUSH
9179: LD_INT 15
9181: PUSH
9182: LD_INT 16
9184: PUSH
9185: LD_INT 17
9187: PUSH
9188: LD_INT 18
9190: PUSH
9191: LD_INT 19
9193: PUSH
9194: LD_INT 20
9196: PUSH
9197: LD_INT 21
9199: PUSH
9200: LD_INT 22
9202: PUSH
9203: LD_INT 23
9205: PUSH
9206: LD_INT 24
9208: PUSH
9209: LD_INT 25
9211: PUSH
9212: LD_INT 26
9214: PUSH
9215: LD_INT 27
9217: PUSH
9218: LD_INT 28
9220: PUSH
9221: LD_INT 29
9223: PUSH
9224: LD_INT 30
9226: PUSH
9227: LD_INT 31
9229: PUSH
9230: LD_INT 32
9232: PUSH
9233: LD_INT 33
9235: PUSH
9236: LD_INT 34
9238: PUSH
9239: LD_INT 35
9241: PUSH
9242: LD_INT 36
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 101
9285: PUSH
9286: LD_INT 102
9288: PUSH
9289: LD_INT 103
9291: PUSH
9292: LD_INT 104
9294: PUSH
9295: LD_INT 105
9297: PUSH
9298: LD_INT 106
9300: PUSH
9301: LD_INT 107
9303: PUSH
9304: LD_INT 108
9306: PUSH
9307: LD_INT 109
9309: PUSH
9310: LD_INT 110
9312: PUSH
9313: LD_INT 111
9315: PUSH
9316: LD_INT 112
9318: PUSH
9319: LD_INT 113
9321: PUSH
9322: LD_INT 114
9324: PUSH
9325: LD_INT 115
9327: PUSH
9328: LD_INT 116
9330: PUSH
9331: LD_INT 117
9333: PUSH
9334: LD_INT 118
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: ST_TO_ADDR
// if result then
9361: LD_VAR 0 2
9365: IFFALSE 10151
// begin normal :=  ;
9367: LD_ADDR_VAR 0 5
9371: PUSH
9372: LD_STRING 
9374: ST_TO_ADDR
// hardcore :=  ;
9375: LD_ADDR_VAR 0 6
9379: PUSH
9380: LD_STRING 
9382: ST_TO_ADDR
// active :=  ;
9383: LD_ADDR_VAR 0 7
9387: PUSH
9388: LD_STRING 
9390: ST_TO_ADDR
// for i = 1 to normalCounter do
9391: LD_ADDR_VAR 0 8
9395: PUSH
9396: DOUBLE
9397: LD_INT 1
9399: DEC
9400: ST_TO_ADDR
9401: LD_EXP 59
9405: PUSH
9406: FOR_TO
9407: IFFALSE 9508
// begin tmp := 0 ;
9409: LD_ADDR_VAR 0 3
9413: PUSH
9414: LD_STRING 0
9416: ST_TO_ADDR
// if result [ 1 ] then
9417: LD_VAR 0 2
9421: PUSH
9422: LD_INT 1
9424: ARRAY
9425: IFFALSE 9490
// if result [ 1 ] [ 1 ] = i then
9427: LD_VAR 0 2
9431: PUSH
9432: LD_INT 1
9434: ARRAY
9435: PUSH
9436: LD_INT 1
9438: ARRAY
9439: PUSH
9440: LD_VAR 0 8
9444: EQUAL
9445: IFFALSE 9490
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9447: LD_ADDR_VAR 0 2
9451: PUSH
9452: LD_VAR 0 2
9456: PPUSH
9457: LD_INT 1
9459: PPUSH
9460: LD_VAR 0 2
9464: PUSH
9465: LD_INT 1
9467: ARRAY
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 3
9476: PPUSH
9477: CALL_OW 1
9481: ST_TO_ADDR
// tmp := 1 ;
9482: LD_ADDR_VAR 0 3
9486: PUSH
9487: LD_STRING 1
9489: ST_TO_ADDR
// end ; normal := normal & tmp ;
9490: LD_ADDR_VAR 0 5
9494: PUSH
9495: LD_VAR 0 5
9499: PUSH
9500: LD_VAR 0 3
9504: STR
9505: ST_TO_ADDR
// end ;
9506: GO 9406
9508: POP
9509: POP
// for i = 1 to hardcoreCounter do
9510: LD_ADDR_VAR 0 8
9514: PUSH
9515: DOUBLE
9516: LD_INT 1
9518: DEC
9519: ST_TO_ADDR
9520: LD_EXP 60
9524: PUSH
9525: FOR_TO
9526: IFFALSE 9631
// begin tmp := 0 ;
9528: LD_ADDR_VAR 0 3
9532: PUSH
9533: LD_STRING 0
9535: ST_TO_ADDR
// if result [ 2 ] then
9536: LD_VAR 0 2
9540: PUSH
9541: LD_INT 2
9543: ARRAY
9544: IFFALSE 9613
// if result [ 2 ] [ 1 ] = 100 + i then
9546: LD_VAR 0 2
9550: PUSH
9551: LD_INT 2
9553: ARRAY
9554: PUSH
9555: LD_INT 1
9557: ARRAY
9558: PUSH
9559: LD_INT 100
9561: PUSH
9562: LD_VAR 0 8
9566: PLUS
9567: EQUAL
9568: IFFALSE 9613
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9570: LD_ADDR_VAR 0 2
9574: PUSH
9575: LD_VAR 0 2
9579: PPUSH
9580: LD_INT 2
9582: PPUSH
9583: LD_VAR 0 2
9587: PUSH
9588: LD_INT 2
9590: ARRAY
9591: PPUSH
9592: LD_INT 1
9594: PPUSH
9595: CALL_OW 3
9599: PPUSH
9600: CALL_OW 1
9604: ST_TO_ADDR
// tmp := 1 ;
9605: LD_ADDR_VAR 0 3
9609: PUSH
9610: LD_STRING 1
9612: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9613: LD_ADDR_VAR 0 6
9617: PUSH
9618: LD_VAR 0 6
9622: PUSH
9623: LD_VAR 0 3
9627: STR
9628: ST_TO_ADDR
// end ;
9629: GO 9525
9631: POP
9632: POP
// if isGameLoad then
9633: LD_VAR 0 1
9637: IFFALSE 10112
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9639: LD_ADDR_VAR 0 4
9643: PUSH
9644: LD_EXP 63
9648: PUSH
9649: LD_EXP 62
9653: PUSH
9654: LD_EXP 64
9658: PUSH
9659: LD_EXP 61
9663: PUSH
9664: LD_EXP 65
9668: PUSH
9669: LD_EXP 66
9673: PUSH
9674: LD_EXP 67
9678: PUSH
9679: LD_EXP 68
9683: PUSH
9684: LD_EXP 69
9688: PUSH
9689: LD_EXP 70
9693: PUSH
9694: LD_EXP 71
9698: PUSH
9699: LD_EXP 72
9703: PUSH
9704: LD_EXP 73
9708: PUSH
9709: LD_EXP 74
9713: PUSH
9714: LD_EXP 82
9718: PUSH
9719: LD_EXP 83
9723: PUSH
9724: LD_EXP 84
9728: PUSH
9729: LD_EXP 85
9733: PUSH
9734: LD_EXP 87
9738: PUSH
9739: LD_EXP 88
9743: PUSH
9744: LD_EXP 89
9748: PUSH
9749: LD_EXP 92
9753: PUSH
9754: LD_EXP 94
9758: PUSH
9759: LD_EXP 95
9763: PUSH
9764: LD_EXP 96
9768: PUSH
9769: LD_EXP 98
9773: PUSH
9774: LD_EXP 99
9778: PUSH
9779: LD_EXP 102
9783: PUSH
9784: LD_EXP 103
9788: PUSH
9789: LD_EXP 104
9793: PUSH
9794: LD_EXP 105
9798: PUSH
9799: LD_EXP 106
9803: PUSH
9804: LD_EXP 107
9808: PUSH
9809: LD_EXP 108
9813: PUSH
9814: LD_EXP 109
9818: PUSH
9819: LD_EXP 110
9823: PUSH
9824: LD_EXP 75
9828: PUSH
9829: LD_EXP 76
9833: PUSH
9834: LD_EXP 79
9838: PUSH
9839: LD_EXP 80
9843: PUSH
9844: LD_EXP 81
9848: PUSH
9849: LD_EXP 77
9853: PUSH
9854: LD_EXP 78
9858: PUSH
9859: LD_EXP 86
9863: PUSH
9864: LD_EXP 90
9868: PUSH
9869: LD_EXP 91
9873: PUSH
9874: LD_EXP 93
9878: PUSH
9879: LD_EXP 97
9883: PUSH
9884: LD_EXP 100
9888: PUSH
9889: LD_EXP 101
9893: PUSH
9894: LD_EXP 111
9898: PUSH
9899: LD_EXP 112
9903: PUSH
9904: LD_EXP 113
9908: PUSH
9909: LD_EXP 114
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: ST_TO_ADDR
// tmp :=  ;
9970: LD_ADDR_VAR 0 3
9974: PUSH
9975: LD_STRING 
9977: ST_TO_ADDR
// for i = 1 to normalCounter do
9978: LD_ADDR_VAR 0 8
9982: PUSH
9983: DOUBLE
9984: LD_INT 1
9986: DEC
9987: ST_TO_ADDR
9988: LD_EXP 59
9992: PUSH
9993: FOR_TO
9994: IFFALSE 10030
// begin if flags [ i ] then
9996: LD_VAR 0 4
10000: PUSH
10001: LD_VAR 0 8
10005: ARRAY
10006: IFFALSE 10028
// tmp := tmp & i & ; ;
10008: LD_ADDR_VAR 0 3
10012: PUSH
10013: LD_VAR 0 3
10017: PUSH
10018: LD_VAR 0 8
10022: STR
10023: PUSH
10024: LD_STRING ;
10026: STR
10027: ST_TO_ADDR
// end ;
10028: GO 9993
10030: POP
10031: POP
// for i = 1 to hardcoreCounter do
10032: LD_ADDR_VAR 0 8
10036: PUSH
10037: DOUBLE
10038: LD_INT 1
10040: DEC
10041: ST_TO_ADDR
10042: LD_EXP 60
10046: PUSH
10047: FOR_TO
10048: IFFALSE 10094
// begin if flags [ normalCounter + i ] then
10050: LD_VAR 0 4
10054: PUSH
10055: LD_EXP 59
10059: PUSH
10060: LD_VAR 0 8
10064: PLUS
10065: ARRAY
10066: IFFALSE 10092
// tmp := tmp & ( 100 + i ) & ; ;
10068: LD_ADDR_VAR 0 3
10072: PUSH
10073: LD_VAR 0 3
10077: PUSH
10078: LD_INT 100
10080: PUSH
10081: LD_VAR 0 8
10085: PLUS
10086: STR
10087: PUSH
10088: LD_STRING ;
10090: STR
10091: ST_TO_ADDR
// end ;
10092: GO 10047
10094: POP
10095: POP
// if tmp then
10096: LD_VAR 0 3
10100: IFFALSE 10112
// active := tmp ;
10102: LD_ADDR_VAR 0 7
10106: PUSH
10107: LD_VAR 0 3
10111: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10112: LD_STRING getStreamItemsFromMission("
10114: PUSH
10115: LD_VAR 0 5
10119: STR
10120: PUSH
10121: LD_STRING ","
10123: STR
10124: PUSH
10125: LD_VAR 0 6
10129: STR
10130: PUSH
10131: LD_STRING ","
10133: STR
10134: PUSH
10135: LD_VAR 0 7
10139: STR
10140: PUSH
10141: LD_STRING ")
10143: STR
10144: PPUSH
10145: CALL_OW 559
// end else
10149: GO 10158
// ToLua ( getStreamItemsFromMission("","","") ) ;
10151: LD_STRING getStreamItemsFromMission("","","")
10153: PPUSH
10154: CALL_OW 559
// end ;
10158: LD_VAR 0 2
10162: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10163: LD_EXP 58
10167: PUSH
10168: LD_EXP 63
10172: AND
10173: IFFALSE 10297
10175: GO 10177
10177: DISABLE
10178: LD_INT 0
10180: PPUSH
10181: PPUSH
// begin enable ;
10182: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10183: LD_ADDR_VAR 0 2
10187: PUSH
10188: LD_INT 22
10190: PUSH
10191: LD_OWVAR 2
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 2
10202: PUSH
10203: LD_INT 34
10205: PUSH
10206: LD_INT 7
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 34
10215: PUSH
10216: LD_INT 45
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 34
10225: PUSH
10226: LD_INT 28
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 34
10235: PUSH
10236: LD_INT 47
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PPUSH
10254: CALL_OW 69
10258: ST_TO_ADDR
// if not tmp then
10259: LD_VAR 0 2
10263: NOT
10264: IFFALSE 10268
// exit ;
10266: GO 10297
// for i in tmp do
10268: LD_ADDR_VAR 0 1
10272: PUSH
10273: LD_VAR 0 2
10277: PUSH
10278: FOR_IN
10279: IFFALSE 10295
// begin SetLives ( i , 0 ) ;
10281: LD_VAR 0 1
10285: PPUSH
10286: LD_INT 0
10288: PPUSH
10289: CALL_OW 234
// end ;
10293: GO 10278
10295: POP
10296: POP
// end ;
10297: PPOPN 2
10299: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10300: LD_EXP 58
10304: PUSH
10305: LD_EXP 64
10309: AND
10310: IFFALSE 10394
10312: GO 10314
10314: DISABLE
10315: LD_INT 0
10317: PPUSH
10318: PPUSH
// begin enable ;
10319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10320: LD_ADDR_VAR 0 2
10324: PUSH
10325: LD_INT 22
10327: PUSH
10328: LD_OWVAR 2
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 3
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ST_TO_ADDR
// if not tmp then
10356: LD_VAR 0 2
10360: NOT
10361: IFFALSE 10365
// exit ;
10363: GO 10394
// for i in tmp do
10365: LD_ADDR_VAR 0 1
10369: PUSH
10370: LD_VAR 0 2
10374: PUSH
10375: FOR_IN
10376: IFFALSE 10392
// begin SetLives ( i , 0 ) ;
10378: LD_VAR 0 1
10382: PPUSH
10383: LD_INT 0
10385: PPUSH
10386: CALL_OW 234
// end ;
10390: GO 10375
10392: POP
10393: POP
// end ;
10394: PPOPN 2
10396: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10397: LD_EXP 58
10401: PUSH
10402: LD_EXP 61
10406: AND
10407: IFFALSE 10500
10409: GO 10411
10411: DISABLE
10412: LD_INT 0
10414: PPUSH
// begin enable ;
10415: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10416: LD_ADDR_VAR 0 1
10420: PUSH
10421: LD_INT 22
10423: PUSH
10424: LD_OWVAR 2
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 2
10435: PUSH
10436: LD_INT 25
10438: PUSH
10439: LD_INT 5
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 25
10448: PUSH
10449: LD_INT 9
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 25
10458: PUSH
10459: LD_INT 8
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: PUSH
10481: FOR_IN
10482: IFFALSE 10498
// begin SetClass ( i , 1 ) ;
10484: LD_VAR 0 1
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: CALL_OW 336
// end ;
10496: GO 10481
10498: POP
10499: POP
// end ;
10500: PPOPN 1
10502: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10503: LD_EXP 58
10507: PUSH
10508: LD_EXP 62
10512: AND
10513: PUSH
10514: LD_OWVAR 65
10518: PUSH
10519: LD_INT 7
10521: LESS
10522: AND
10523: IFFALSE 10537
10525: GO 10527
10527: DISABLE
// begin enable ;
10528: ENABLE
// game_speed := 7 ;
10529: LD_ADDR_OWVAR 65
10533: PUSH
10534: LD_INT 7
10536: ST_TO_ADDR
// end ;
10537: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10538: LD_EXP 58
10542: PUSH
10543: LD_EXP 65
10547: AND
10548: IFFALSE 10750
10550: GO 10552
10552: DISABLE
10553: LD_INT 0
10555: PPUSH
10556: PPUSH
10557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_INT 81
10565: PUSH
10566: LD_OWVAR 2
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 21
10577: PUSH
10578: LD_INT 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// if not tmp then
10594: LD_VAR 0 3
10598: NOT
10599: IFFALSE 10603
// exit ;
10601: GO 10750
// if tmp > 5 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 5
10610: GREATER
10611: IFFALSE 10623
// k := 5 else
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_INT 5
10620: ST_TO_ADDR
10621: GO 10633
// k := tmp ;
10623: LD_ADDR_VAR 0 2
10627: PUSH
10628: LD_VAR 0 3
10632: ST_TO_ADDR
// for i := 1 to k do
10633: LD_ADDR_VAR 0 1
10637: PUSH
10638: DOUBLE
10639: LD_INT 1
10641: DEC
10642: ST_TO_ADDR
10643: LD_VAR 0 2
10647: PUSH
10648: FOR_TO
10649: IFFALSE 10748
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10651: LD_VAR 0 3
10655: PUSH
10656: LD_VAR 0 1
10660: ARRAY
10661: PPUSH
10662: LD_VAR 0 1
10666: PUSH
10667: LD_INT 4
10669: MOD
10670: PUSH
10671: LD_INT 1
10673: PLUS
10674: PPUSH
10675: CALL_OW 259
10679: PUSH
10680: LD_INT 10
10682: LESS
10683: IFFALSE 10746
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10685: LD_VAR 0 3
10689: PUSH
10690: LD_VAR 0 1
10694: ARRAY
10695: PPUSH
10696: LD_VAR 0 1
10700: PUSH
10701: LD_INT 4
10703: MOD
10704: PUSH
10705: LD_INT 1
10707: PLUS
10708: PPUSH
10709: LD_VAR 0 3
10713: PUSH
10714: LD_VAR 0 1
10718: ARRAY
10719: PPUSH
10720: LD_VAR 0 1
10724: PUSH
10725: LD_INT 4
10727: MOD
10728: PUSH
10729: LD_INT 1
10731: PLUS
10732: PPUSH
10733: CALL_OW 259
10737: PUSH
10738: LD_INT 1
10740: PLUS
10741: PPUSH
10742: CALL_OW 237
10746: GO 10648
10748: POP
10749: POP
// end ;
10750: PPOPN 3
10752: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10753: LD_EXP 58
10757: PUSH
10758: LD_EXP 66
10762: AND
10763: IFFALSE 10783
10765: GO 10767
10767: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10768: LD_INT 4
10770: PPUSH
10771: LD_OWVAR 2
10775: PPUSH
10776: LD_INT 0
10778: PPUSH
10779: CALL_OW 324
10783: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10784: LD_EXP 58
10788: PUSH
10789: LD_EXP 95
10793: AND
10794: IFFALSE 10814
10796: GO 10798
10798: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10799: LD_INT 19
10801: PPUSH
10802: LD_OWVAR 2
10806: PPUSH
10807: LD_INT 0
10809: PPUSH
10810: CALL_OW 324
10814: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10815: LD_EXP 58
10819: PUSH
10820: LD_EXP 67
10824: AND
10825: IFFALSE 10927
10827: GO 10829
10829: DISABLE
10830: LD_INT 0
10832: PPUSH
10833: PPUSH
// begin enable ;
10834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_INT 22
10842: PUSH
10843: LD_OWVAR 2
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: LD_INT 34
10857: PUSH
10858: LD_INT 11
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 34
10867: PUSH
10868: LD_INT 30
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PPUSH
10884: CALL_OW 69
10888: ST_TO_ADDR
// if not tmp then
10889: LD_VAR 0 2
10893: NOT
10894: IFFALSE 10898
// exit ;
10896: GO 10927
// for i in tmp do
10898: LD_ADDR_VAR 0 1
10902: PUSH
10903: LD_VAR 0 2
10907: PUSH
10908: FOR_IN
10909: IFFALSE 10925
// begin SetLives ( i , 0 ) ;
10911: LD_VAR 0 1
10915: PPUSH
10916: LD_INT 0
10918: PPUSH
10919: CALL_OW 234
// end ;
10923: GO 10908
10925: POP
10926: POP
// end ;
10927: PPOPN 2
10929: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10930: LD_EXP 58
10934: PUSH
10935: LD_EXP 68
10939: AND
10940: IFFALSE 10960
10942: GO 10944
10944: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10945: LD_INT 32
10947: PPUSH
10948: LD_OWVAR 2
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: CALL_OW 324
10960: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10961: LD_EXP 58
10965: PUSH
10966: LD_EXP 69
10970: AND
10971: IFFALSE 11152
10973: GO 10975
10975: DISABLE
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
10980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10981: LD_ADDR_VAR 0 2
10985: PUSH
10986: LD_INT 22
10988: PUSH
10989: LD_OWVAR 2
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 33
11000: PUSH
11001: LD_INT 3
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PPUSH
11012: CALL_OW 69
11016: ST_TO_ADDR
// if not tmp then
11017: LD_VAR 0 2
11021: NOT
11022: IFFALSE 11026
// exit ;
11024: GO 11152
// side := 0 ;
11026: LD_ADDR_VAR 0 3
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// for i := 1 to 8 do
11034: LD_ADDR_VAR 0 1
11038: PUSH
11039: DOUBLE
11040: LD_INT 1
11042: DEC
11043: ST_TO_ADDR
11044: LD_INT 8
11046: PUSH
11047: FOR_TO
11048: IFFALSE 11096
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11050: LD_OWVAR 2
11054: PUSH
11055: LD_VAR 0 1
11059: NONEQUAL
11060: PUSH
11061: LD_OWVAR 2
11065: PPUSH
11066: LD_VAR 0 1
11070: PPUSH
11071: CALL_OW 81
11075: PUSH
11076: LD_INT 2
11078: EQUAL
11079: AND
11080: IFFALSE 11094
// begin side := i ;
11082: LD_ADDR_VAR 0 3
11086: PUSH
11087: LD_VAR 0 1
11091: ST_TO_ADDR
// break ;
11092: GO 11096
// end ;
11094: GO 11047
11096: POP
11097: POP
// if not side then
11098: LD_VAR 0 3
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11152
// for i := 1 to tmp do
11107: LD_ADDR_VAR 0 1
11111: PUSH
11112: DOUBLE
11113: LD_INT 1
11115: DEC
11116: ST_TO_ADDR
11117: LD_VAR 0 2
11121: PUSH
11122: FOR_TO
11123: IFFALSE 11150
// if Prob ( 60 ) then
11125: LD_INT 60
11127: PPUSH
11128: CALL_OW 13
11132: IFFALSE 11148
// SetSide ( i , side ) ;
11134: LD_VAR 0 1
11138: PPUSH
11139: LD_VAR 0 3
11143: PPUSH
11144: CALL_OW 235
11148: GO 11122
11150: POP
11151: POP
// end ;
11152: PPOPN 3
11154: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11155: LD_EXP 58
11159: PUSH
11160: LD_EXP 71
11164: AND
11165: IFFALSE 11284
11167: GO 11169
11169: DISABLE
11170: LD_INT 0
11172: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11173: LD_ADDR_VAR 0 1
11177: PUSH
11178: LD_INT 22
11180: PUSH
11181: LD_OWVAR 2
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 21
11192: PUSH
11193: LD_INT 1
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 3
11202: PUSH
11203: LD_INT 23
11205: PUSH
11206: LD_INT 0
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: PPUSH
11222: CALL_OW 69
11226: PUSH
11227: FOR_IN
11228: IFFALSE 11282
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 257
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: LD_INT 2
11245: PUSH
11246: LD_INT 3
11248: PUSH
11249: LD_INT 4
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: IN
11258: IFFALSE 11280
// SetClass ( un , rand ( 1 , 4 ) ) ;
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: LD_INT 4
11270: PPUSH
11271: CALL_OW 12
11275: PPUSH
11276: CALL_OW 336
11280: GO 11227
11282: POP
11283: POP
// end ;
11284: PPOPN 1
11286: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11287: LD_EXP 58
11291: PUSH
11292: LD_EXP 70
11296: AND
11297: IFFALSE 11376
11299: GO 11301
11301: DISABLE
11302: LD_INT 0
11304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11305: LD_ADDR_VAR 0 1
11309: PUSH
11310: LD_INT 22
11312: PUSH
11313: LD_OWVAR 2
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 21
11324: PUSH
11325: LD_INT 3
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PPUSH
11336: CALL_OW 69
11340: ST_TO_ADDR
// if not tmp then
11341: LD_VAR 0 1
11345: NOT
11346: IFFALSE 11350
// exit ;
11348: GO 11376
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11350: LD_VAR 0 1
11354: PUSH
11355: LD_INT 1
11357: PPUSH
11358: LD_VAR 0 1
11362: PPUSH
11363: CALL_OW 12
11367: ARRAY
11368: PPUSH
11369: LD_INT 100
11371: PPUSH
11372: CALL_OW 234
// end ;
11376: PPOPN 1
11378: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11379: LD_EXP 58
11383: PUSH
11384: LD_EXP 72
11388: AND
11389: IFFALSE 11487
11391: GO 11393
11393: DISABLE
11394: LD_INT 0
11396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11397: LD_ADDR_VAR 0 1
11401: PUSH
11402: LD_INT 22
11404: PUSH
11405: LD_OWVAR 2
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 21
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: ST_TO_ADDR
// if not tmp then
11433: LD_VAR 0 1
11437: NOT
11438: IFFALSE 11442
// exit ;
11440: GO 11487
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11442: LD_VAR 0 1
11446: PUSH
11447: LD_INT 1
11449: PPUSH
11450: LD_VAR 0 1
11454: PPUSH
11455: CALL_OW 12
11459: ARRAY
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: LD_INT 4
11466: PPUSH
11467: CALL_OW 12
11471: PPUSH
11472: LD_INT 3000
11474: PPUSH
11475: LD_INT 9000
11477: PPUSH
11478: CALL_OW 12
11482: PPUSH
11483: CALL_OW 492
// end ;
11487: PPOPN 1
11489: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11490: LD_EXP 58
11494: PUSH
11495: LD_EXP 73
11499: AND
11500: IFFALSE 11520
11502: GO 11504
11504: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11505: LD_INT 1
11507: PPUSH
11508: LD_OWVAR 2
11512: PPUSH
11513: LD_INT 0
11515: PPUSH
11516: CALL_OW 324
11520: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11521: LD_EXP 58
11525: PUSH
11526: LD_EXP 74
11530: AND
11531: IFFALSE 11614
11533: GO 11535
11535: DISABLE
11536: LD_INT 0
11538: PPUSH
11539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11540: LD_ADDR_VAR 0 2
11544: PUSH
11545: LD_INT 22
11547: PUSH
11548: LD_OWVAR 2
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 21
11559: PUSH
11560: LD_INT 3
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PPUSH
11571: CALL_OW 69
11575: ST_TO_ADDR
// if not tmp then
11576: LD_VAR 0 2
11580: NOT
11581: IFFALSE 11585
// exit ;
11583: GO 11614
// for i in tmp do
11585: LD_ADDR_VAR 0 1
11589: PUSH
11590: LD_VAR 0 2
11594: PUSH
11595: FOR_IN
11596: IFFALSE 11612
// SetBLevel ( i , 10 ) ;
11598: LD_VAR 0 1
11602: PPUSH
11603: LD_INT 10
11605: PPUSH
11606: CALL_OW 241
11610: GO 11595
11612: POP
11613: POP
// end ;
11614: PPOPN 2
11616: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11617: LD_EXP 58
11621: PUSH
11622: LD_EXP 75
11626: AND
11627: IFFALSE 11738
11629: GO 11631
11631: DISABLE
11632: LD_INT 0
11634: PPUSH
11635: PPUSH
11636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11637: LD_ADDR_VAR 0 3
11641: PUSH
11642: LD_INT 22
11644: PUSH
11645: LD_OWVAR 2
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 69
11672: ST_TO_ADDR
// if not tmp then
11673: LD_VAR 0 3
11677: NOT
11678: IFFALSE 11682
// exit ;
11680: GO 11738
// un := tmp [ rand ( 1 , tmp ) ] ;
11682: LD_ADDR_VAR 0 2
11686: PUSH
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 1
11694: PPUSH
11695: LD_VAR 0 3
11699: PPUSH
11700: CALL_OW 12
11704: ARRAY
11705: ST_TO_ADDR
// if Crawls ( un ) then
11706: LD_VAR 0 2
11710: PPUSH
11711: CALL_OW 318
11715: IFFALSE 11726
// ComWalk ( un ) ;
11717: LD_VAR 0 2
11721: PPUSH
11722: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_INT 5
11733: PPUSH
11734: CALL_OW 336
// end ;
11738: PPOPN 3
11740: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11741: LD_EXP 58
11745: PUSH
11746: LD_EXP 76
11750: AND
11751: PUSH
11752: LD_OWVAR 67
11756: PUSH
11757: LD_INT 4
11759: LESS
11760: AND
11761: IFFALSE 11780
11763: GO 11765
11765: DISABLE
// begin Difficulty := Difficulty + 1 ;
11766: LD_ADDR_OWVAR 67
11770: PUSH
11771: LD_OWVAR 67
11775: PUSH
11776: LD_INT 1
11778: PLUS
11779: ST_TO_ADDR
// end ;
11780: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11781: LD_EXP 58
11785: PUSH
11786: LD_EXP 77
11790: AND
11791: IFFALSE 11894
11793: GO 11795
11795: DISABLE
11796: LD_INT 0
11798: PPUSH
// begin for i := 1 to 5 do
11799: LD_ADDR_VAR 0 1
11803: PUSH
11804: DOUBLE
11805: LD_INT 1
11807: DEC
11808: ST_TO_ADDR
11809: LD_INT 5
11811: PUSH
11812: FOR_TO
11813: IFFALSE 11892
// begin uc_nation := nation_nature ;
11815: LD_ADDR_OWVAR 21
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// uc_side := 0 ;
11823: LD_ADDR_OWVAR 20
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11831: LD_ADDR_OWVAR 29
11835: PUSH
11836: LD_INT 12
11838: PUSH
11839: LD_INT 12
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: ST_TO_ADDR
// hc_agressivity := 20 ;
11846: LD_ADDR_OWVAR 35
11850: PUSH
11851: LD_INT 20
11853: ST_TO_ADDR
// hc_class := class_tiger ;
11854: LD_ADDR_OWVAR 28
11858: PUSH
11859: LD_INT 14
11861: ST_TO_ADDR
// hc_gallery :=  ;
11862: LD_ADDR_OWVAR 33
11866: PUSH
11867: LD_STRING 
11869: ST_TO_ADDR
// hc_name :=  ;
11870: LD_ADDR_OWVAR 26
11874: PUSH
11875: LD_STRING 
11877: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11878: CALL_OW 44
11882: PPUSH
11883: LD_INT 0
11885: PPUSH
11886: CALL_OW 51
// end ;
11890: GO 11812
11892: POP
11893: POP
// end ;
11894: PPOPN 1
11896: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11897: LD_EXP 58
11901: PUSH
11902: LD_EXP 78
11906: AND
11907: IFFALSE 11916
11909: GO 11911
11911: DISABLE
// StreamSibBomb ;
11912: CALL 11917 0 0
11916: END
// export function StreamSibBomb ; var i , x , y ; begin
11917: LD_INT 0
11919: PPUSH
11920: PPUSH
11921: PPUSH
11922: PPUSH
// result := false ;
11923: LD_ADDR_VAR 0 1
11927: PUSH
11928: LD_INT 0
11930: ST_TO_ADDR
// for i := 1 to 16 do
11931: LD_ADDR_VAR 0 2
11935: PUSH
11936: DOUBLE
11937: LD_INT 1
11939: DEC
11940: ST_TO_ADDR
11941: LD_INT 16
11943: PUSH
11944: FOR_TO
11945: IFFALSE 12144
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11947: LD_ADDR_VAR 0 3
11951: PUSH
11952: LD_INT 10
11954: PUSH
11955: LD_INT 20
11957: PUSH
11958: LD_INT 30
11960: PUSH
11961: LD_INT 40
11963: PUSH
11964: LD_INT 50
11966: PUSH
11967: LD_INT 60
11969: PUSH
11970: LD_INT 70
11972: PUSH
11973: LD_INT 80
11975: PUSH
11976: LD_INT 90
11978: PUSH
11979: LD_INT 100
11981: PUSH
11982: LD_INT 110
11984: PUSH
11985: LD_INT 120
11987: PUSH
11988: LD_INT 130
11990: PUSH
11991: LD_INT 140
11993: PUSH
11994: LD_INT 150
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 1
12016: PPUSH
12017: LD_INT 15
12019: PPUSH
12020: CALL_OW 12
12024: ARRAY
12025: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: LD_INT 10
12033: PUSH
12034: LD_INT 20
12036: PUSH
12037: LD_INT 30
12039: PUSH
12040: LD_INT 40
12042: PUSH
12043: LD_INT 50
12045: PUSH
12046: LD_INT 60
12048: PUSH
12049: LD_INT 70
12051: PUSH
12052: LD_INT 80
12054: PUSH
12055: LD_INT 90
12057: PUSH
12058: LD_INT 100
12060: PUSH
12061: LD_INT 110
12063: PUSH
12064: LD_INT 120
12066: PUSH
12067: LD_INT 130
12069: PUSH
12070: LD_INT 140
12072: PUSH
12073: LD_INT 150
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 1
12095: PPUSH
12096: LD_INT 15
12098: PPUSH
12099: CALL_OW 12
12103: ARRAY
12104: ST_TO_ADDR
// if ValidHex ( x , y ) then
12105: LD_VAR 0 3
12109: PPUSH
12110: LD_VAR 0 4
12114: PPUSH
12115: CALL_OW 488
12119: IFFALSE 12142
// begin result := [ x , y ] ;
12121: LD_ADDR_VAR 0 1
12125: PUSH
12126: LD_VAR 0 3
12130: PUSH
12131: LD_VAR 0 4
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: ST_TO_ADDR
// break ;
12140: GO 12144
// end ; end ;
12142: GO 11944
12144: POP
12145: POP
// if result then
12146: LD_VAR 0 1
12150: IFFALSE 12210
// begin ToLua ( playSibBomb() ) ;
12152: LD_STRING playSibBomb()
12154: PPUSH
12155: CALL_OW 559
// wait ( 0 0$14 ) ;
12159: LD_INT 490
12161: PPUSH
12162: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12166: LD_VAR 0 1
12170: PUSH
12171: LD_INT 1
12173: ARRAY
12174: PPUSH
12175: LD_VAR 0 1
12179: PUSH
12180: LD_INT 2
12182: ARRAY
12183: PPUSH
12184: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12188: LD_VAR 0 1
12192: PUSH
12193: LD_INT 1
12195: ARRAY
12196: PPUSH
12197: LD_VAR 0 1
12201: PUSH
12202: LD_INT 2
12204: ARRAY
12205: PPUSH
12206: CALL_OW 429
// end ; end ;
12210: LD_VAR 0 1
12214: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12215: LD_EXP 58
12219: PUSH
12220: LD_EXP 80
12224: AND
12225: IFFALSE 12237
12227: GO 12229
12229: DISABLE
// YouLost (  ) ;
12230: LD_STRING 
12232: PPUSH
12233: CALL_OW 104
12237: END
// every 0 0$1 trigger StreamModeActive and sFog do
12238: LD_EXP 58
12242: PUSH
12243: LD_EXP 79
12247: AND
12248: IFFALSE 12262
12250: GO 12252
12252: DISABLE
// FogOff ( your_side ) ;
12253: LD_OWVAR 2
12257: PPUSH
12258: CALL_OW 344
12262: END
// every 0 0$1 trigger StreamModeActive and sSun do
12263: LD_EXP 58
12267: PUSH
12268: LD_EXP 81
12272: AND
12273: IFFALSE 12301
12275: GO 12277
12277: DISABLE
// begin solar_recharge_percent := 0 ;
12278: LD_ADDR_OWVAR 79
12282: PUSH
12283: LD_INT 0
12285: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12286: LD_INT 10500
12288: PPUSH
12289: CALL_OW 67
// solar_recharge_percent := 100 ;
12293: LD_ADDR_OWVAR 79
12297: PUSH
12298: LD_INT 100
12300: ST_TO_ADDR
// end ;
12301: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12302: LD_EXP 58
12306: PUSH
12307: LD_EXP 82
12311: AND
12312: IFFALSE 12551
12314: GO 12316
12316: DISABLE
12317: LD_INT 0
12319: PPUSH
12320: PPUSH
12321: PPUSH
// begin tmp := [ ] ;
12322: LD_ADDR_VAR 0 3
12326: PUSH
12327: EMPTY
12328: ST_TO_ADDR
// for i := 1 to 6 do
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: DOUBLE
12335: LD_INT 1
12337: DEC
12338: ST_TO_ADDR
12339: LD_INT 6
12341: PUSH
12342: FOR_TO
12343: IFFALSE 12448
// begin uc_nation := nation_nature ;
12345: LD_ADDR_OWVAR 21
12349: PUSH
12350: LD_INT 0
12352: ST_TO_ADDR
// uc_side := 0 ;
12353: LD_ADDR_OWVAR 20
12357: PUSH
12358: LD_INT 0
12360: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12361: LD_ADDR_OWVAR 29
12365: PUSH
12366: LD_INT 12
12368: PUSH
12369: LD_INT 12
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: ST_TO_ADDR
// hc_agressivity := 20 ;
12376: LD_ADDR_OWVAR 35
12380: PUSH
12381: LD_INT 20
12383: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12384: LD_ADDR_OWVAR 28
12388: PUSH
12389: LD_INT 17
12391: ST_TO_ADDR
// hc_gallery :=  ;
12392: LD_ADDR_OWVAR 33
12396: PUSH
12397: LD_STRING 
12399: ST_TO_ADDR
// hc_name :=  ;
12400: LD_ADDR_OWVAR 26
12404: PUSH
12405: LD_STRING 
12407: ST_TO_ADDR
// un := CreateHuman ;
12408: LD_ADDR_VAR 0 2
12412: PUSH
12413: CALL_OW 44
12417: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12418: LD_VAR 0 2
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 51
// tmp := tmp ^ un ;
12430: LD_ADDR_VAR 0 3
12434: PUSH
12435: LD_VAR 0 3
12439: PUSH
12440: LD_VAR 0 2
12444: ADD
12445: ST_TO_ADDR
// end ;
12446: GO 12342
12448: POP
12449: POP
// repeat wait ( 0 0$1 ) ;
12450: LD_INT 35
12452: PPUSH
12453: CALL_OW 67
// for un in tmp do
12457: LD_ADDR_VAR 0 2
12461: PUSH
12462: LD_VAR 0 3
12466: PUSH
12467: FOR_IN
12468: IFFALSE 12542
// begin if IsDead ( un ) then
12470: LD_VAR 0 2
12474: PPUSH
12475: CALL_OW 301
12479: IFFALSE 12499
// begin tmp := tmp diff un ;
12481: LD_ADDR_VAR 0 3
12485: PUSH
12486: LD_VAR 0 3
12490: PUSH
12491: LD_VAR 0 2
12495: DIFF
12496: ST_TO_ADDR
// continue ;
12497: GO 12467
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12499: LD_VAR 0 2
12503: PPUSH
12504: LD_INT 3
12506: PUSH
12507: LD_INT 22
12509: PUSH
12510: LD_INT 0
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PPUSH
12521: CALL_OW 69
12525: PPUSH
12526: LD_VAR 0 2
12530: PPUSH
12531: CALL_OW 74
12535: PPUSH
12536: CALL_OW 115
// end ;
12540: GO 12467
12542: POP
12543: POP
// until not tmp ;
12544: LD_VAR 0 3
12548: NOT
12549: IFFALSE 12450
// end ;
12551: PPOPN 3
12553: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12554: LD_EXP 58
12558: PUSH
12559: LD_EXP 83
12563: AND
12564: IFFALSE 12618
12566: GO 12568
12568: DISABLE
// begin ToLua ( displayTroll(); ) ;
12569: LD_STRING displayTroll();
12571: PPUSH
12572: CALL_OW 559
// wait ( 3 3$00 ) ;
12576: LD_INT 6300
12578: PPUSH
12579: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12583: LD_STRING hideTroll();
12585: PPUSH
12586: CALL_OW 559
// wait ( 1 1$00 ) ;
12590: LD_INT 2100
12592: PPUSH
12593: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12597: LD_STRING displayTroll();
12599: PPUSH
12600: CALL_OW 559
// wait ( 1 1$00 ) ;
12604: LD_INT 2100
12606: PPUSH
12607: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12611: LD_STRING hideTroll();
12613: PPUSH
12614: CALL_OW 559
// end ;
12618: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12619: LD_EXP 58
12623: PUSH
12624: LD_EXP 84
12628: AND
12629: IFFALSE 12692
12631: GO 12633
12633: DISABLE
12634: LD_INT 0
12636: PPUSH
// begin p := 0 ;
12637: LD_ADDR_VAR 0 1
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// repeat game_speed := 1 ;
12645: LD_ADDR_OWVAR 65
12649: PUSH
12650: LD_INT 1
12652: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12653: LD_INT 35
12655: PPUSH
12656: CALL_OW 67
// p := p + 1 ;
12660: LD_ADDR_VAR 0 1
12664: PUSH
12665: LD_VAR 0 1
12669: PUSH
12670: LD_INT 1
12672: PLUS
12673: ST_TO_ADDR
// until p >= 60 ;
12674: LD_VAR 0 1
12678: PUSH
12679: LD_INT 60
12681: GREATEREQUAL
12682: IFFALSE 12645
// game_speed := 4 ;
12684: LD_ADDR_OWVAR 65
12688: PUSH
12689: LD_INT 4
12691: ST_TO_ADDR
// end ;
12692: PPOPN 1
12694: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12695: LD_EXP 58
12699: PUSH
12700: LD_EXP 85
12704: AND
12705: IFFALSE 12851
12707: GO 12709
12709: DISABLE
12710: LD_INT 0
12712: PPUSH
12713: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12714: LD_ADDR_VAR 0 1
12718: PUSH
12719: LD_INT 22
12721: PUSH
12722: LD_OWVAR 2
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 2
12733: PUSH
12734: LD_INT 30
12736: PUSH
12737: LD_INT 0
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 30
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PPUSH
12763: CALL_OW 69
12767: ST_TO_ADDR
// if not depot then
12768: LD_VAR 0 1
12772: NOT
12773: IFFALSE 12777
// exit ;
12775: GO 12851
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12777: LD_ADDR_VAR 0 2
12781: PUSH
12782: LD_VAR 0 1
12786: PUSH
12787: LD_INT 1
12789: PPUSH
12790: LD_VAR 0 1
12794: PPUSH
12795: CALL_OW 12
12799: ARRAY
12800: PPUSH
12801: CALL_OW 274
12805: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12806: LD_VAR 0 2
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: LD_INT 0
12816: PPUSH
12817: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12821: LD_VAR 0 2
12825: PPUSH
12826: LD_INT 2
12828: PPUSH
12829: LD_INT 0
12831: PPUSH
12832: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12836: LD_VAR 0 2
12840: PPUSH
12841: LD_INT 3
12843: PPUSH
12844: LD_INT 0
12846: PPUSH
12847: CALL_OW 277
// end ;
12851: PPOPN 2
12853: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12854: LD_EXP 58
12858: PUSH
12859: LD_EXP 86
12863: AND
12864: IFFALSE 12961
12866: GO 12868
12868: DISABLE
12869: LD_INT 0
12871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: LD_INT 22
12879: PUSH
12880: LD_OWVAR 2
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 1
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: LD_INT 23
12904: PUSH
12905: LD_INT 0
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: LIST
12920: PPUSH
12921: CALL_OW 69
12925: ST_TO_ADDR
// if not tmp then
12926: LD_VAR 0 1
12930: NOT
12931: IFFALSE 12935
// exit ;
12933: GO 12961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12935: LD_VAR 0 1
12939: PUSH
12940: LD_INT 1
12942: PPUSH
12943: LD_VAR 0 1
12947: PPUSH
12948: CALL_OW 12
12952: ARRAY
12953: PPUSH
12954: LD_INT 200
12956: PPUSH
12957: CALL_OW 234
// end ;
12961: PPOPN 1
12963: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12964: LD_EXP 58
12968: PUSH
12969: LD_EXP 87
12973: AND
12974: IFFALSE 13053
12976: GO 12978
12978: DISABLE
12979: LD_INT 0
12981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_OWVAR 2
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 21
13001: PUSH
13002: LD_INT 2
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PPUSH
13013: CALL_OW 69
13017: ST_TO_ADDR
// if not tmp then
13018: LD_VAR 0 1
13022: NOT
13023: IFFALSE 13027
// exit ;
13025: GO 13053
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13027: LD_VAR 0 1
13031: PUSH
13032: LD_INT 1
13034: PPUSH
13035: LD_VAR 0 1
13039: PPUSH
13040: CALL_OW 12
13044: ARRAY
13045: PPUSH
13046: LD_INT 60
13048: PPUSH
13049: CALL_OW 234
// end ;
13053: PPOPN 1
13055: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13056: LD_EXP 58
13060: PUSH
13061: LD_EXP 88
13065: AND
13066: IFFALSE 13165
13068: GO 13070
13070: DISABLE
13071: LD_INT 0
13073: PPUSH
13074: PPUSH
// begin enable ;
13075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13076: LD_ADDR_VAR 0 1
13080: PUSH
13081: LD_INT 22
13083: PUSH
13084: LD_OWVAR 2
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: LD_INT 61
13095: PUSH
13096: EMPTY
13097: LIST
13098: PUSH
13099: LD_INT 33
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: PPUSH
13114: CALL_OW 69
13118: ST_TO_ADDR
// if not tmp then
13119: LD_VAR 0 1
13123: NOT
13124: IFFALSE 13128
// exit ;
13126: GO 13165
// for i in tmp do
13128: LD_ADDR_VAR 0 2
13132: PUSH
13133: LD_VAR 0 1
13137: PUSH
13138: FOR_IN
13139: IFFALSE 13163
// if IsControledBy ( i ) then
13141: LD_VAR 0 2
13145: PPUSH
13146: CALL_OW 312
13150: IFFALSE 13161
// ComUnlink ( i ) ;
13152: LD_VAR 0 2
13156: PPUSH
13157: CALL_OW 136
13161: GO 13138
13163: POP
13164: POP
// end ;
13165: PPOPN 2
13167: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13168: LD_EXP 58
13172: PUSH
13173: LD_EXP 89
13177: AND
13178: IFFALSE 13318
13180: GO 13182
13182: DISABLE
13183: LD_INT 0
13185: PPUSH
13186: PPUSH
// begin ToLua ( displayPowell(); ) ;
13187: LD_STRING displayPowell();
13189: PPUSH
13190: CALL_OW 559
// uc_side := 0 ;
13194: LD_ADDR_OWVAR 20
13198: PUSH
13199: LD_INT 0
13201: ST_TO_ADDR
// uc_nation := 2 ;
13202: LD_ADDR_OWVAR 21
13206: PUSH
13207: LD_INT 2
13209: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13210: LD_ADDR_OWVAR 37
13214: PUSH
13215: LD_INT 14
13217: ST_TO_ADDR
// vc_engine := engine_siberite ;
13218: LD_ADDR_OWVAR 39
13222: PUSH
13223: LD_INT 3
13225: ST_TO_ADDR
// vc_control := control_apeman ;
13226: LD_ADDR_OWVAR 38
13230: PUSH
13231: LD_INT 5
13233: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13234: LD_ADDR_OWVAR 40
13238: PUSH
13239: LD_INT 29
13241: ST_TO_ADDR
// un := CreateVehicle ;
13242: LD_ADDR_VAR 0 2
13246: PUSH
13247: CALL_OW 45
13251: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13252: LD_VAR 0 2
13256: PPUSH
13257: LD_INT 1
13259: PPUSH
13260: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13264: LD_INT 35
13266: PPUSH
13267: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13271: LD_VAR 0 2
13275: PPUSH
13276: LD_INT 22
13278: PUSH
13279: LD_OWVAR 2
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PPUSH
13288: CALL_OW 69
13292: PPUSH
13293: LD_VAR 0 2
13297: PPUSH
13298: CALL_OW 74
13302: PPUSH
13303: CALL_OW 115
// until IsDead ( un ) ;
13307: LD_VAR 0 2
13311: PPUSH
13312: CALL_OW 301
13316: IFFALSE 13264
// end ;
13318: PPOPN 2
13320: END
// every 0 0$1 trigger StreamModeActive and sStu do
13321: LD_EXP 58
13325: PUSH
13326: LD_EXP 97
13330: AND
13331: IFFALSE 13347
13333: GO 13335
13335: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13336: LD_STRING displayStucuk();
13338: PPUSH
13339: CALL_OW 559
// ResetFog ;
13343: CALL_OW 335
// end ;
13347: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13348: LD_EXP 58
13352: PUSH
13353: LD_EXP 90
13357: AND
13358: IFFALSE 13499
13360: GO 13362
13362: DISABLE
13363: LD_INT 0
13365: PPUSH
13366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13367: LD_ADDR_VAR 0 2
13371: PUSH
13372: LD_INT 22
13374: PUSH
13375: LD_OWVAR 2
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 21
13386: PUSH
13387: LD_INT 1
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PPUSH
13398: CALL_OW 69
13402: ST_TO_ADDR
// if not tmp then
13403: LD_VAR 0 2
13407: NOT
13408: IFFALSE 13412
// exit ;
13410: GO 13499
// un := tmp [ rand ( 1 , tmp ) ] ;
13412: LD_ADDR_VAR 0 1
13416: PUSH
13417: LD_VAR 0 2
13421: PUSH
13422: LD_INT 1
13424: PPUSH
13425: LD_VAR 0 2
13429: PPUSH
13430: CALL_OW 12
13434: ARRAY
13435: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13436: LD_VAR 0 1
13440: PPUSH
13441: LD_INT 0
13443: PPUSH
13444: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13448: LD_VAR 0 1
13452: PPUSH
13453: LD_OWVAR 3
13457: PUSH
13458: LD_VAR 0 1
13462: DIFF
13463: PPUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: CALL_OW 74
13473: PPUSH
13474: CALL_OW 115
// wait ( 0 0$20 ) ;
13478: LD_INT 700
13480: PPUSH
13481: CALL_OW 67
// SetSide ( un , your_side ) ;
13485: LD_VAR 0 1
13489: PPUSH
13490: LD_OWVAR 2
13494: PPUSH
13495: CALL_OW 235
// end ;
13499: PPOPN 2
13501: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13502: LD_EXP 58
13506: PUSH
13507: LD_EXP 91
13511: AND
13512: IFFALSE 13618
13514: GO 13516
13516: DISABLE
13517: LD_INT 0
13519: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13520: LD_ADDR_VAR 0 1
13524: PUSH
13525: LD_INT 22
13527: PUSH
13528: LD_OWVAR 2
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 30
13542: PUSH
13543: LD_INT 0
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 30
13552: PUSH
13553: LD_INT 1
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PPUSH
13569: CALL_OW 69
13573: ST_TO_ADDR
// if not depot then
13574: LD_VAR 0 1
13578: NOT
13579: IFFALSE 13583
// exit ;
13581: GO 13618
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: CALL_OW 250
13596: PPUSH
13597: LD_VAR 0 1
13601: PUSH
13602: LD_INT 1
13604: ARRAY
13605: PPUSH
13606: CALL_OW 251
13610: PPUSH
13611: LD_INT 70
13613: PPUSH
13614: CALL_OW 495
// end ;
13618: PPOPN 1
13620: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13621: LD_EXP 58
13625: PUSH
13626: LD_EXP 92
13630: AND
13631: IFFALSE 13842
13633: GO 13635
13635: DISABLE
13636: LD_INT 0
13638: PPUSH
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13643: LD_ADDR_VAR 0 5
13647: PUSH
13648: LD_INT 22
13650: PUSH
13651: LD_OWVAR 2
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 21
13662: PUSH
13663: LD_INT 1
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: ST_TO_ADDR
// if not tmp then
13679: LD_VAR 0 5
13683: NOT
13684: IFFALSE 13688
// exit ;
13686: GO 13842
// for i in tmp do
13688: LD_ADDR_VAR 0 1
13692: PUSH
13693: LD_VAR 0 5
13697: PUSH
13698: FOR_IN
13699: IFFALSE 13840
// begin d := rand ( 0 , 5 ) ;
13701: LD_ADDR_VAR 0 4
13705: PUSH
13706: LD_INT 0
13708: PPUSH
13709: LD_INT 5
13711: PPUSH
13712: CALL_OW 12
13716: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13717: LD_ADDR_VAR 0 2
13721: PUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 250
13731: PPUSH
13732: LD_VAR 0 4
13736: PPUSH
13737: LD_INT 3
13739: PPUSH
13740: LD_INT 12
13742: PPUSH
13743: CALL_OW 12
13747: PPUSH
13748: CALL_OW 272
13752: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13753: LD_ADDR_VAR 0 3
13757: PUSH
13758: LD_VAR 0 1
13762: PPUSH
13763: CALL_OW 251
13767: PPUSH
13768: LD_VAR 0 4
13772: PPUSH
13773: LD_INT 3
13775: PPUSH
13776: LD_INT 12
13778: PPUSH
13779: CALL_OW 12
13783: PPUSH
13784: CALL_OW 273
13788: ST_TO_ADDR
// if ValidHex ( x , y ) then
13789: LD_VAR 0 2
13793: PPUSH
13794: LD_VAR 0 3
13798: PPUSH
13799: CALL_OW 488
13803: IFFALSE 13838
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13805: LD_VAR 0 1
13809: PPUSH
13810: LD_VAR 0 2
13814: PPUSH
13815: LD_VAR 0 3
13819: PPUSH
13820: LD_INT 3
13822: PPUSH
13823: LD_INT 6
13825: PPUSH
13826: CALL_OW 12
13830: PPUSH
13831: LD_INT 1
13833: PPUSH
13834: CALL_OW 483
// end ;
13838: GO 13698
13840: POP
13841: POP
// end ;
13842: PPOPN 5
13844: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13845: LD_EXP 58
13849: PUSH
13850: LD_EXP 93
13854: AND
13855: IFFALSE 13949
13857: GO 13859
13859: DISABLE
13860: LD_INT 0
13862: PPUSH
13863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13864: LD_ADDR_VAR 0 2
13868: PUSH
13869: LD_INT 22
13871: PUSH
13872: LD_OWVAR 2
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 32
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 21
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 69
13910: ST_TO_ADDR
// if not tmp then
13911: LD_VAR 0 2
13915: NOT
13916: IFFALSE 13920
// exit ;
13918: GO 13949
// for i in tmp do
13920: LD_ADDR_VAR 0 1
13924: PUSH
13925: LD_VAR 0 2
13929: PUSH
13930: FOR_IN
13931: IFFALSE 13947
// SetFuel ( i , 0 ) ;
13933: LD_VAR 0 1
13937: PPUSH
13938: LD_INT 0
13940: PPUSH
13941: CALL_OW 240
13945: GO 13930
13947: POP
13948: POP
// end ;
13949: PPOPN 2
13951: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13952: LD_EXP 58
13956: PUSH
13957: LD_EXP 94
13961: AND
13962: IFFALSE 14028
13964: GO 13966
13966: DISABLE
13967: LD_INT 0
13969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13970: LD_ADDR_VAR 0 1
13974: PUSH
13975: LD_INT 22
13977: PUSH
13978: LD_OWVAR 2
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 30
13989: PUSH
13990: LD_INT 29
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: ST_TO_ADDR
// if not tmp then
14006: LD_VAR 0 1
14010: NOT
14011: IFFALSE 14015
// exit ;
14013: GO 14028
// DestroyUnit ( tmp [ 1 ] ) ;
14015: LD_VAR 0 1
14019: PUSH
14020: LD_INT 1
14022: ARRAY
14023: PPUSH
14024: CALL_OW 65
// end ;
14028: PPOPN 1
14030: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14031: LD_EXP 58
14035: PUSH
14036: LD_EXP 96
14040: AND
14041: IFFALSE 14170
14043: GO 14045
14045: DISABLE
14046: LD_INT 0
14048: PPUSH
// begin uc_side := 0 ;
14049: LD_ADDR_OWVAR 20
14053: PUSH
14054: LD_INT 0
14056: ST_TO_ADDR
// uc_nation := nation_arabian ;
14057: LD_ADDR_OWVAR 21
14061: PUSH
14062: LD_INT 2
14064: ST_TO_ADDR
// hc_gallery :=  ;
14065: LD_ADDR_OWVAR 33
14069: PUSH
14070: LD_STRING 
14072: ST_TO_ADDR
// hc_name :=  ;
14073: LD_ADDR_OWVAR 26
14077: PUSH
14078: LD_STRING 
14080: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14081: LD_INT 1
14083: PPUSH
14084: LD_INT 11
14086: PPUSH
14087: LD_INT 10
14089: PPUSH
14090: CALL_OW 380
// un := CreateHuman ;
14094: LD_ADDR_VAR 0 1
14098: PUSH
14099: CALL_OW 44
14103: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14104: LD_VAR 0 1
14108: PPUSH
14109: LD_INT 1
14111: PPUSH
14112: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14116: LD_INT 35
14118: PPUSH
14119: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14123: LD_VAR 0 1
14127: PPUSH
14128: LD_INT 22
14130: PUSH
14131: LD_OWVAR 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: PPUSH
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 74
14154: PPUSH
14155: CALL_OW 115
// until IsDead ( un ) ;
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 301
14168: IFFALSE 14116
// end ;
14170: PPOPN 1
14172: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14173: LD_EXP 58
14177: PUSH
14178: LD_EXP 98
14182: AND
14183: IFFALSE 14195
14185: GO 14187
14187: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14188: LD_STRING earthquake(getX(game), 0, 32)
14190: PPUSH
14191: CALL_OW 559
14195: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14196: LD_EXP 58
14200: PUSH
14201: LD_EXP 99
14205: AND
14206: IFFALSE 14297
14208: GO 14210
14210: DISABLE
14211: LD_INT 0
14213: PPUSH
// begin enable ;
14214: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14215: LD_ADDR_VAR 0 1
14219: PUSH
14220: LD_INT 22
14222: PUSH
14223: LD_OWVAR 2
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: LD_INT 21
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 33
14244: PUSH
14245: LD_INT 3
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: PPUSH
14257: CALL_OW 69
14261: ST_TO_ADDR
// if not tmp then
14262: LD_VAR 0 1
14266: NOT
14267: IFFALSE 14271
// exit ;
14269: GO 14297
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14271: LD_VAR 0 1
14275: PUSH
14276: LD_INT 1
14278: PPUSH
14279: LD_VAR 0 1
14283: PPUSH
14284: CALL_OW 12
14288: ARRAY
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 234
// end ;
14297: PPOPN 1
14299: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14300: LD_EXP 58
14304: PUSH
14305: LD_EXP 100
14309: AND
14310: IFFALSE 14451
14312: GO 14314
14314: DISABLE
14315: LD_INT 0
14317: PPUSH
14318: PPUSH
14319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14320: LD_ADDR_VAR 0 3
14324: PUSH
14325: LD_INT 22
14327: PUSH
14328: LD_OWVAR 2
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 25
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PPUSH
14351: CALL_OW 69
14355: ST_TO_ADDR
// if not tmp then
14356: LD_VAR 0 3
14360: NOT
14361: IFFALSE 14365
// exit ;
14363: GO 14451
// un := tmp [ rand ( 1 , tmp ) ] ;
14365: LD_ADDR_VAR 0 2
14369: PUSH
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 1
14377: PPUSH
14378: LD_VAR 0 3
14382: PPUSH
14383: CALL_OW 12
14387: ARRAY
14388: ST_TO_ADDR
// if Crawls ( un ) then
14389: LD_VAR 0 2
14393: PPUSH
14394: CALL_OW 318
14398: IFFALSE 14409
// ComWalk ( un ) ;
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14409: LD_VAR 0 2
14413: PPUSH
14414: LD_INT 9
14416: PPUSH
14417: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14421: LD_INT 28
14423: PPUSH
14424: LD_OWVAR 2
14428: PPUSH
14429: LD_INT 2
14431: PPUSH
14432: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14436: LD_INT 29
14438: PPUSH
14439: LD_OWVAR 2
14443: PPUSH
14444: LD_INT 2
14446: PPUSH
14447: CALL_OW 322
// end ;
14451: PPOPN 3
14453: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14454: LD_EXP 58
14458: PUSH
14459: LD_EXP 101
14463: AND
14464: IFFALSE 14575
14466: GO 14468
14468: DISABLE
14469: LD_INT 0
14471: PPUSH
14472: PPUSH
14473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14474: LD_ADDR_VAR 0 3
14478: PUSH
14479: LD_INT 22
14481: PUSH
14482: LD_OWVAR 2
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 1
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 69
14509: ST_TO_ADDR
// if not tmp then
14510: LD_VAR 0 3
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 14575
// un := tmp [ rand ( 1 , tmp ) ] ;
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: LD_VAR 0 3
14528: PUSH
14529: LD_INT 1
14531: PPUSH
14532: LD_VAR 0 3
14536: PPUSH
14537: CALL_OW 12
14541: ARRAY
14542: ST_TO_ADDR
// if Crawls ( un ) then
14543: LD_VAR 0 2
14547: PPUSH
14548: CALL_OW 318
14552: IFFALSE 14563
// ComWalk ( un ) ;
14554: LD_VAR 0 2
14558: PPUSH
14559: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14563: LD_VAR 0 2
14567: PPUSH
14568: LD_INT 8
14570: PPUSH
14571: CALL_OW 336
// end ;
14575: PPOPN 3
14577: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14578: LD_EXP 58
14582: PUSH
14583: LD_EXP 102
14587: AND
14588: IFFALSE 14732
14590: GO 14592
14592: DISABLE
14593: LD_INT 0
14595: PPUSH
14596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14597: LD_ADDR_VAR 0 2
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_OWVAR 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 21
14616: PUSH
14617: LD_INT 2
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: LD_INT 34
14629: PUSH
14630: LD_INT 12
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 34
14639: PUSH
14640: LD_INT 51
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 34
14649: PUSH
14650: LD_INT 32
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: PPUSH
14668: CALL_OW 69
14672: ST_TO_ADDR
// if not tmp then
14673: LD_VAR 0 2
14677: NOT
14678: IFFALSE 14682
// exit ;
14680: GO 14732
// for i in tmp do
14682: LD_ADDR_VAR 0 1
14686: PUSH
14687: LD_VAR 0 2
14691: PUSH
14692: FOR_IN
14693: IFFALSE 14730
// if GetCargo ( i , mat_artifact ) = 0 then
14695: LD_VAR 0 1
14699: PPUSH
14700: LD_INT 4
14702: PPUSH
14703: CALL_OW 289
14707: PUSH
14708: LD_INT 0
14710: EQUAL
14711: IFFALSE 14728
// SetCargo ( i , mat_siberit , 100 ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: LD_INT 3
14720: PPUSH
14721: LD_INT 100
14723: PPUSH
14724: CALL_OW 290
14728: GO 14692
14730: POP
14731: POP
// end ;
14732: PPOPN 2
14734: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14735: LD_EXP 58
14739: PUSH
14740: LD_EXP 103
14744: AND
14745: IFFALSE 14928
14747: GO 14749
14749: DISABLE
14750: LD_INT 0
14752: PPUSH
14753: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14754: LD_ADDR_VAR 0 2
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_OWVAR 2
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 69
14775: ST_TO_ADDR
// if not tmp then
14776: LD_VAR 0 2
14780: NOT
14781: IFFALSE 14785
// exit ;
14783: GO 14928
// for i := 1 to 2 do
14785: LD_ADDR_VAR 0 1
14789: PUSH
14790: DOUBLE
14791: LD_INT 1
14793: DEC
14794: ST_TO_ADDR
14795: LD_INT 2
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14926
// begin uc_side := your_side ;
14801: LD_ADDR_OWVAR 20
14805: PUSH
14806: LD_OWVAR 2
14810: ST_TO_ADDR
// uc_nation := nation_american ;
14811: LD_ADDR_OWVAR 21
14815: PUSH
14816: LD_INT 1
14818: ST_TO_ADDR
// vc_chassis := us_morphling ;
14819: LD_ADDR_OWVAR 37
14823: PUSH
14824: LD_INT 5
14826: ST_TO_ADDR
// vc_engine := engine_siberite ;
14827: LD_ADDR_OWVAR 39
14831: PUSH
14832: LD_INT 3
14834: ST_TO_ADDR
// vc_control := control_computer ;
14835: LD_ADDR_OWVAR 38
14839: PUSH
14840: LD_INT 3
14842: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14843: LD_ADDR_OWVAR 40
14847: PUSH
14848: LD_INT 10
14850: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14851: LD_VAR 0 2
14855: PUSH
14856: LD_INT 1
14858: ARRAY
14859: PPUSH
14860: CALL_OW 310
14864: NOT
14865: IFFALSE 14912
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14867: CALL_OW 45
14871: PPUSH
14872: LD_VAR 0 2
14876: PUSH
14877: LD_INT 1
14879: ARRAY
14880: PPUSH
14881: CALL_OW 250
14885: PPUSH
14886: LD_VAR 0 2
14890: PUSH
14891: LD_INT 1
14893: ARRAY
14894: PPUSH
14895: CALL_OW 251
14899: PPUSH
14900: LD_INT 12
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: CALL_OW 50
14910: GO 14924
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14912: CALL_OW 45
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 51
// end ;
14924: GO 14798
14926: POP
14927: POP
// end ;
14928: PPOPN 2
14930: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14931: LD_EXP 58
14935: PUSH
14936: LD_EXP 104
14940: AND
14941: IFFALSE 15163
14943: GO 14945
14945: DISABLE
14946: LD_INT 0
14948: PPUSH
14949: PPUSH
14950: PPUSH
14951: PPUSH
14952: PPUSH
14953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14954: LD_ADDR_VAR 0 6
14958: PUSH
14959: LD_INT 22
14961: PUSH
14962: LD_OWVAR 2
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 21
14973: PUSH
14974: LD_INT 1
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 3
14983: PUSH
14984: LD_INT 23
14986: PUSH
14987: LD_INT 0
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: PPUSH
15003: CALL_OW 69
15007: ST_TO_ADDR
// if not tmp then
15008: LD_VAR 0 6
15012: NOT
15013: IFFALSE 15017
// exit ;
15015: GO 15163
// s1 := rand ( 1 , 4 ) ;
15017: LD_ADDR_VAR 0 2
15021: PUSH
15022: LD_INT 1
15024: PPUSH
15025: LD_INT 4
15027: PPUSH
15028: CALL_OW 12
15032: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15033: LD_ADDR_VAR 0 4
15037: PUSH
15038: LD_VAR 0 6
15042: PUSH
15043: LD_INT 1
15045: ARRAY
15046: PPUSH
15047: LD_VAR 0 2
15051: PPUSH
15052: CALL_OW 259
15056: ST_TO_ADDR
// if s1 = 1 then
15057: LD_VAR 0 2
15061: PUSH
15062: LD_INT 1
15064: EQUAL
15065: IFFALSE 15085
// s2 := rand ( 2 , 4 ) else
15067: LD_ADDR_VAR 0 3
15071: PUSH
15072: LD_INT 2
15074: PPUSH
15075: LD_INT 4
15077: PPUSH
15078: CALL_OW 12
15082: ST_TO_ADDR
15083: GO 15093
// s2 := 1 ;
15085: LD_ADDR_VAR 0 3
15089: PUSH
15090: LD_INT 1
15092: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15093: LD_ADDR_VAR 0 5
15097: PUSH
15098: LD_VAR 0 6
15102: PUSH
15103: LD_INT 1
15105: ARRAY
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: CALL_OW 259
15116: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15117: LD_VAR 0 6
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PPUSH
15126: LD_VAR 0 2
15130: PPUSH
15131: LD_VAR 0 5
15135: PPUSH
15136: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15140: LD_VAR 0 6
15144: PUSH
15145: LD_INT 1
15147: ARRAY
15148: PPUSH
15149: LD_VAR 0 3
15153: PPUSH
15154: LD_VAR 0 4
15158: PPUSH
15159: CALL_OW 237
// end ;
15163: PPOPN 6
15165: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15166: LD_EXP 58
15170: PUSH
15171: LD_EXP 105
15175: AND
15176: IFFALSE 15255
15178: GO 15180
15180: DISABLE
15181: LD_INT 0
15183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15184: LD_ADDR_VAR 0 1
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_OWVAR 2
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 30
15203: PUSH
15204: LD_INT 3
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PPUSH
15215: CALL_OW 69
15219: ST_TO_ADDR
// if not tmp then
15220: LD_VAR 0 1
15224: NOT
15225: IFFALSE 15229
// exit ;
15227: GO 15255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15229: LD_VAR 0 1
15233: PUSH
15234: LD_INT 1
15236: PPUSH
15237: LD_VAR 0 1
15241: PPUSH
15242: CALL_OW 12
15246: ARRAY
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 234
// end ;
15255: PPOPN 1
15257: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15258: LD_EXP 58
15262: PUSH
15263: LD_EXP 106
15267: AND
15268: IFFALSE 15380
15270: GO 15272
15272: DISABLE
15273: LD_INT 0
15275: PPUSH
15276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15277: LD_ADDR_VAR 0 2
15281: PUSH
15282: LD_INT 22
15284: PUSH
15285: LD_OWVAR 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 2
15296: PUSH
15297: LD_INT 30
15299: PUSH
15300: LD_INT 27
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 30
15309: PUSH
15310: LD_INT 26
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 30
15319: PUSH
15320: LD_INT 28
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PPUSH
15337: CALL_OW 69
15341: ST_TO_ADDR
// if not tmp then
15342: LD_VAR 0 2
15346: NOT
15347: IFFALSE 15351
// exit ;
15349: GO 15380
// for i in tmp do
15351: LD_ADDR_VAR 0 1
15355: PUSH
15356: LD_VAR 0 2
15360: PUSH
15361: FOR_IN
15362: IFFALSE 15378
// SetLives ( i , 1 ) ;
15364: LD_VAR 0 1
15368: PPUSH
15369: LD_INT 1
15371: PPUSH
15372: CALL_OW 234
15376: GO 15361
15378: POP
15379: POP
// end ;
15380: PPOPN 2
15382: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15383: LD_EXP 58
15387: PUSH
15388: LD_EXP 107
15392: AND
15393: IFFALSE 15680
15395: GO 15397
15397: DISABLE
15398: LD_INT 0
15400: PPUSH
15401: PPUSH
15402: PPUSH
// begin i := rand ( 1 , 7 ) ;
15403: LD_ADDR_VAR 0 1
15407: PUSH
15408: LD_INT 1
15410: PPUSH
15411: LD_INT 7
15413: PPUSH
15414: CALL_OW 12
15418: ST_TO_ADDR
// case i of 1 :
15419: LD_VAR 0 1
15423: PUSH
15424: LD_INT 1
15426: DOUBLE
15427: EQUAL
15428: IFTRUE 15432
15430: GO 15442
15432: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15433: LD_STRING earthquake(getX(game), 0, 32)
15435: PPUSH
15436: CALL_OW 559
15440: GO 15680
15442: LD_INT 2
15444: DOUBLE
15445: EQUAL
15446: IFTRUE 15450
15448: GO 15464
15450: POP
// begin ToLua ( displayStucuk(); ) ;
15451: LD_STRING displayStucuk();
15453: PPUSH
15454: CALL_OW 559
// ResetFog ;
15458: CALL_OW 335
// end ; 3 :
15462: GO 15680
15464: LD_INT 3
15466: DOUBLE
15467: EQUAL
15468: IFTRUE 15472
15470: GO 15576
15472: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15473: LD_ADDR_VAR 0 2
15477: PUSH
15478: LD_INT 22
15480: PUSH
15481: LD_OWVAR 2
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 25
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: ST_TO_ADDR
// if not tmp then
15509: LD_VAR 0 2
15513: NOT
15514: IFFALSE 15518
// exit ;
15516: GO 15680
// un := tmp [ rand ( 1 , tmp ) ] ;
15518: LD_ADDR_VAR 0 3
15522: PUSH
15523: LD_VAR 0 2
15527: PUSH
15528: LD_INT 1
15530: PPUSH
15531: LD_VAR 0 2
15535: PPUSH
15536: CALL_OW 12
15540: ARRAY
15541: ST_TO_ADDR
// if Crawls ( un ) then
15542: LD_VAR 0 3
15546: PPUSH
15547: CALL_OW 318
15551: IFFALSE 15562
// ComWalk ( un ) ;
15553: LD_VAR 0 3
15557: PPUSH
15558: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15562: LD_VAR 0 3
15566: PPUSH
15567: LD_INT 8
15569: PPUSH
15570: CALL_OW 336
// end ; 4 :
15574: GO 15680
15576: LD_INT 4
15578: DOUBLE
15579: EQUAL
15580: IFTRUE 15584
15582: GO 15658
15584: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15585: LD_ADDR_VAR 0 2
15589: PUSH
15590: LD_INT 22
15592: PUSH
15593: LD_OWVAR 2
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 30
15604: PUSH
15605: LD_INT 29
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PPUSH
15616: CALL_OW 69
15620: ST_TO_ADDR
// if not tmp then
15621: LD_VAR 0 2
15625: NOT
15626: IFFALSE 15630
// exit ;
15628: GO 15680
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15630: LD_VAR 0 2
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PPUSH
15639: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15643: LD_VAR 0 2
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PPUSH
15652: CALL_OW 65
// end ; 5 .. 7 :
15656: GO 15680
15658: LD_INT 5
15660: DOUBLE
15661: GREATEREQUAL
15662: IFFALSE 15670
15664: LD_INT 7
15666: DOUBLE
15667: LESSEQUAL
15668: IFTRUE 15672
15670: GO 15679
15672: POP
// StreamSibBomb ; end ;
15673: CALL 11917 0 0
15677: GO 15680
15679: POP
// end ;
15680: PPOPN 3
15682: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15683: LD_EXP 58
15687: PUSH
15688: LD_EXP 108
15692: AND
15693: IFFALSE 15849
15695: GO 15697
15697: DISABLE
15698: LD_INT 0
15700: PPUSH
15701: PPUSH
15702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15703: LD_ADDR_VAR 0 2
15707: PUSH
15708: LD_INT 81
15710: PUSH
15711: LD_OWVAR 2
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: LD_INT 21
15725: PUSH
15726: LD_INT 1
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 21
15735: PUSH
15736: LD_INT 2
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PPUSH
15752: CALL_OW 69
15756: ST_TO_ADDR
// if not tmp then
15757: LD_VAR 0 2
15761: NOT
15762: IFFALSE 15766
// exit ;
15764: GO 15849
// p := 0 ;
15766: LD_ADDR_VAR 0 3
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15774: LD_INT 35
15776: PPUSH
15777: CALL_OW 67
// p := p + 1 ;
15781: LD_ADDR_VAR 0 3
15785: PUSH
15786: LD_VAR 0 3
15790: PUSH
15791: LD_INT 1
15793: PLUS
15794: ST_TO_ADDR
// for i in tmp do
15795: LD_ADDR_VAR 0 1
15799: PUSH
15800: LD_VAR 0 2
15804: PUSH
15805: FOR_IN
15806: IFFALSE 15837
// if GetLives ( i ) < 1000 then
15808: LD_VAR 0 1
15812: PPUSH
15813: CALL_OW 256
15817: PUSH
15818: LD_INT 1000
15820: LESS
15821: IFFALSE 15835
// SetLives ( i , 1000 ) ;
15823: LD_VAR 0 1
15827: PPUSH
15828: LD_INT 1000
15830: PPUSH
15831: CALL_OW 234
15835: GO 15805
15837: POP
15838: POP
// until p > 20 ;
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 20
15846: GREATER
15847: IFFALSE 15774
// end ;
15849: PPOPN 3
15851: END
// every 0 0$1 trigger StreamModeActive and sTime do
15852: LD_EXP 58
15856: PUSH
15857: LD_EXP 109
15861: AND
15862: IFFALSE 15897
15864: GO 15866
15866: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15867: LD_INT 28
15869: PPUSH
15870: LD_OWVAR 2
15874: PPUSH
15875: LD_INT 2
15877: PPUSH
15878: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15882: LD_INT 30
15884: PPUSH
15885: LD_OWVAR 2
15889: PPUSH
15890: LD_INT 2
15892: PPUSH
15893: CALL_OW 322
// end ;
15897: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15898: LD_EXP 58
15902: PUSH
15903: LD_EXP 110
15907: AND
15908: IFFALSE 16029
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
15916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15917: LD_ADDR_VAR 0 2
15921: PUSH
15922: LD_INT 22
15924: PUSH
15925: LD_OWVAR 2
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 21
15936: PUSH
15937: LD_INT 1
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 3
15946: PUSH
15947: LD_INT 23
15949: PUSH
15950: LD_INT 0
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: PPUSH
15966: CALL_OW 69
15970: ST_TO_ADDR
// if not tmp then
15971: LD_VAR 0 2
15975: NOT
15976: IFFALSE 15980
// exit ;
15978: GO 16029
// for i in tmp do
15980: LD_ADDR_VAR 0 1
15984: PUSH
15985: LD_VAR 0 2
15989: PUSH
15990: FOR_IN
15991: IFFALSE 16027
// begin if Crawls ( i ) then
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 318
16002: IFFALSE 16013
// ComWalk ( i ) ;
16004: LD_VAR 0 1
16008: PPUSH
16009: CALL_OW 138
// SetClass ( i , 2 ) ;
16013: LD_VAR 0 1
16017: PPUSH
16018: LD_INT 2
16020: PPUSH
16021: CALL_OW 336
// end ;
16025: GO 15990
16027: POP
16028: POP
// end ;
16029: PPOPN 2
16031: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16032: LD_EXP 58
16036: PUSH
16037: LD_EXP 111
16041: AND
16042: IFFALSE 16330
16044: GO 16046
16046: DISABLE
16047: LD_INT 0
16049: PPUSH
16050: PPUSH
16051: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16052: LD_OWVAR 2
16056: PPUSH
16057: LD_INT 9
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: LD_INT 1
16065: PPUSH
16066: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16070: LD_INT 9
16072: PPUSH
16073: LD_OWVAR 2
16077: PPUSH
16078: CALL_OW 343
// uc_side := 9 ;
16082: LD_ADDR_OWVAR 20
16086: PUSH
16087: LD_INT 9
16089: ST_TO_ADDR
// uc_nation := 2 ;
16090: LD_ADDR_OWVAR 21
16094: PUSH
16095: LD_INT 2
16097: ST_TO_ADDR
// hc_name := Dark Warrior ;
16098: LD_ADDR_OWVAR 26
16102: PUSH
16103: LD_STRING Dark Warrior
16105: ST_TO_ADDR
// hc_gallery :=  ;
16106: LD_ADDR_OWVAR 33
16110: PUSH
16111: LD_STRING 
16113: ST_TO_ADDR
// hc_noskilllimit := true ;
16114: LD_ADDR_OWVAR 76
16118: PUSH
16119: LD_INT 1
16121: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16122: LD_ADDR_OWVAR 31
16126: PUSH
16127: LD_INT 30
16129: PUSH
16130: LD_INT 30
16132: PUSH
16133: LD_INT 30
16135: PUSH
16136: LD_INT 30
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: ST_TO_ADDR
// un := CreateHuman ;
16145: LD_ADDR_VAR 0 3
16149: PUSH
16150: CALL_OW 44
16154: ST_TO_ADDR
// hc_noskilllimit := false ;
16155: LD_ADDR_OWVAR 76
16159: PUSH
16160: LD_INT 0
16162: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16163: LD_VAR 0 3
16167: PPUSH
16168: LD_INT 1
16170: PPUSH
16171: CALL_OW 51
// ToLua ( playRanger() ) ;
16175: LD_STRING playRanger()
16177: PPUSH
16178: CALL_OW 559
// p := 0 ;
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: LD_INT 0
16189: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16190: LD_INT 35
16192: PPUSH
16193: CALL_OW 67
// p := p + 1 ;
16197: LD_ADDR_VAR 0 2
16201: PUSH
16202: LD_VAR 0 2
16206: PUSH
16207: LD_INT 1
16209: PLUS
16210: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16211: LD_VAR 0 3
16215: PPUSH
16216: CALL_OW 256
16220: PUSH
16221: LD_INT 1000
16223: LESS
16224: IFFALSE 16238
// SetLives ( un , 1000 ) ;
16226: LD_VAR 0 3
16230: PPUSH
16231: LD_INT 1000
16233: PPUSH
16234: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16238: LD_VAR 0 3
16242: PPUSH
16243: LD_INT 81
16245: PUSH
16246: LD_OWVAR 2
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 91
16257: PUSH
16258: LD_VAR 0 3
16262: PUSH
16263: LD_INT 30
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PPUSH
16275: CALL_OW 69
16279: PPUSH
16280: LD_VAR 0 3
16284: PPUSH
16285: CALL_OW 74
16289: PPUSH
16290: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16294: LD_VAR 0 2
16298: PUSH
16299: LD_INT 80
16301: GREATER
16302: PUSH
16303: LD_VAR 0 3
16307: PPUSH
16308: CALL_OW 301
16312: OR
16313: IFFALSE 16190
// if un then
16315: LD_VAR 0 3
16319: IFFALSE 16330
// RemoveUnit ( un ) ;
16321: LD_VAR 0 3
16325: PPUSH
16326: CALL_OW 64
// end ;
16330: PPOPN 3
16332: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16333: LD_EXP 112
16337: IFFALSE 16453
16339: GO 16341
16341: DISABLE
16342: LD_INT 0
16344: PPUSH
16345: PPUSH
16346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16347: LD_ADDR_VAR 0 2
16351: PUSH
16352: LD_INT 81
16354: PUSH
16355: LD_OWVAR 2
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 21
16366: PUSH
16367: LD_INT 1
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PPUSH
16378: CALL_OW 69
16382: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16383: LD_STRING playComputer()
16385: PPUSH
16386: CALL_OW 559
// if not tmp then
16390: LD_VAR 0 2
16394: NOT
16395: IFFALSE 16399
// exit ;
16397: GO 16453
// for i in tmp do
16399: LD_ADDR_VAR 0 1
16403: PUSH
16404: LD_VAR 0 2
16408: PUSH
16409: FOR_IN
16410: IFFALSE 16451
// for j := 1 to 4 do
16412: LD_ADDR_VAR 0 3
16416: PUSH
16417: DOUBLE
16418: LD_INT 1
16420: DEC
16421: ST_TO_ADDR
16422: LD_INT 4
16424: PUSH
16425: FOR_TO
16426: IFFALSE 16447
// SetSkill ( i , j , 10 ) ;
16428: LD_VAR 0 1
16432: PPUSH
16433: LD_VAR 0 3
16437: PPUSH
16438: LD_INT 10
16440: PPUSH
16441: CALL_OW 237
16445: GO 16425
16447: POP
16448: POP
16449: GO 16409
16451: POP
16452: POP
// end ;
16453: PPOPN 3
16455: END
// every 0 0$1 trigger s30 do var i , tmp ;
16456: LD_EXP 113
16460: IFFALSE 16529
16462: GO 16464
16464: DISABLE
16465: LD_INT 0
16467: PPUSH
16468: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16469: LD_ADDR_VAR 0 2
16473: PUSH
16474: LD_INT 22
16476: PUSH
16477: LD_OWVAR 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 69
16490: ST_TO_ADDR
// if not tmp then
16491: LD_VAR 0 2
16495: NOT
16496: IFFALSE 16500
// exit ;
16498: GO 16529
// for i in tmp do
16500: LD_ADDR_VAR 0 1
16504: PUSH
16505: LD_VAR 0 2
16509: PUSH
16510: FOR_IN
16511: IFFALSE 16527
// SetLives ( i , 300 ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_INT 300
16520: PPUSH
16521: CALL_OW 234
16525: GO 16510
16527: POP
16528: POP
// end ;
16529: PPOPN 2
16531: END
// every 0 0$1 trigger s60 do var i , tmp ;
16532: LD_EXP 114
16536: IFFALSE 16605
16538: GO 16540
16540: DISABLE
16541: LD_INT 0
16543: PPUSH
16544: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16545: LD_ADDR_VAR 0 2
16549: PUSH
16550: LD_INT 22
16552: PUSH
16553: LD_OWVAR 2
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PPUSH
16562: CALL_OW 69
16566: ST_TO_ADDR
// if not tmp then
16567: LD_VAR 0 2
16571: NOT
16572: IFFALSE 16576
// exit ;
16574: GO 16605
// for i in tmp do
16576: LD_ADDR_VAR 0 1
16580: PUSH
16581: LD_VAR 0 2
16585: PUSH
16586: FOR_IN
16587: IFFALSE 16603
// SetLives ( i , 600 ) ;
16589: LD_VAR 0 1
16593: PPUSH
16594: LD_INT 600
16596: PPUSH
16597: CALL_OW 234
16601: GO 16586
16603: POP
16604: POP
// end ;
16605: PPOPN 2
16607: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16608: LD_INT 0
16610: PPUSH
// case cmd of 301 :
16611: LD_VAR 0 1
16615: PUSH
16616: LD_INT 301
16618: DOUBLE
16619: EQUAL
16620: IFTRUE 16624
16622: GO 16656
16624: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16625: LD_VAR 0 6
16629: PPUSH
16630: LD_VAR 0 7
16634: PPUSH
16635: LD_VAR 0 8
16639: PPUSH
16640: LD_VAR 0 4
16644: PPUSH
16645: LD_VAR 0 5
16649: PPUSH
16650: CALL 17857 0 5
16654: GO 16777
16656: LD_INT 302
16658: DOUBLE
16659: EQUAL
16660: IFTRUE 16664
16662: GO 16701
16664: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16665: LD_VAR 0 6
16669: PPUSH
16670: LD_VAR 0 7
16674: PPUSH
16675: LD_VAR 0 8
16679: PPUSH
16680: LD_VAR 0 9
16684: PPUSH
16685: LD_VAR 0 4
16689: PPUSH
16690: LD_VAR 0 5
16694: PPUSH
16695: CALL 17948 0 6
16699: GO 16777
16701: LD_INT 303
16703: DOUBLE
16704: EQUAL
16705: IFTRUE 16709
16707: GO 16746
16709: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16710: LD_VAR 0 6
16714: PPUSH
16715: LD_VAR 0 7
16719: PPUSH
16720: LD_VAR 0 8
16724: PPUSH
16725: LD_VAR 0 9
16729: PPUSH
16730: LD_VAR 0 4
16734: PPUSH
16735: LD_VAR 0 5
16739: PPUSH
16740: CALL 16782 0 6
16744: GO 16777
16746: LD_INT 304
16748: DOUBLE
16749: EQUAL
16750: IFTRUE 16754
16752: GO 16776
16754: POP
// hHackTeleport ( unit , x , y ) ; end ;
16755: LD_VAR 0 2
16759: PPUSH
16760: LD_VAR 0 4
16764: PPUSH
16765: LD_VAR 0 5
16769: PPUSH
16770: CALL 18541 0 3
16774: GO 16777
16776: POP
// end ;
16777: LD_VAR 0 12
16781: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16786: LD_VAR 0 1
16790: PUSH
16791: LD_INT 1
16793: LESS
16794: PUSH
16795: LD_VAR 0 1
16799: PUSH
16800: LD_INT 3
16802: GREATER
16803: OR
16804: PUSH
16805: LD_VAR 0 5
16809: PPUSH
16810: LD_VAR 0 6
16814: PPUSH
16815: CALL_OW 428
16819: OR
16820: IFFALSE 16824
// exit ;
16822: GO 17544
// uc_side := your_side ;
16824: LD_ADDR_OWVAR 20
16828: PUSH
16829: LD_OWVAR 2
16833: ST_TO_ADDR
// uc_nation := nation ;
16834: LD_ADDR_OWVAR 21
16838: PUSH
16839: LD_VAR 0 1
16843: ST_TO_ADDR
// bc_level = 1 ;
16844: LD_ADDR_OWVAR 43
16848: PUSH
16849: LD_INT 1
16851: ST_TO_ADDR
// case btype of 1 :
16852: LD_VAR 0 2
16856: PUSH
16857: LD_INT 1
16859: DOUBLE
16860: EQUAL
16861: IFTRUE 16865
16863: GO 16876
16865: POP
// bc_type := b_depot ; 2 :
16866: LD_ADDR_OWVAR 42
16870: PUSH
16871: LD_INT 0
16873: ST_TO_ADDR
16874: GO 17488
16876: LD_INT 2
16878: DOUBLE
16879: EQUAL
16880: IFTRUE 16884
16882: GO 16895
16884: POP
// bc_type := b_warehouse ; 3 :
16885: LD_ADDR_OWVAR 42
16889: PUSH
16890: LD_INT 1
16892: ST_TO_ADDR
16893: GO 17488
16895: LD_INT 3
16897: DOUBLE
16898: EQUAL
16899: IFTRUE 16903
16901: GO 16914
16903: POP
// bc_type := b_lab ; 4 .. 9 :
16904: LD_ADDR_OWVAR 42
16908: PUSH
16909: LD_INT 6
16911: ST_TO_ADDR
16912: GO 17488
16914: LD_INT 4
16916: DOUBLE
16917: GREATEREQUAL
16918: IFFALSE 16926
16920: LD_INT 9
16922: DOUBLE
16923: LESSEQUAL
16924: IFTRUE 16928
16926: GO 16980
16928: POP
// begin bc_type := b_lab_half ;
16929: LD_ADDR_OWVAR 42
16933: PUSH
16934: LD_INT 7
16936: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16937: LD_ADDR_OWVAR 44
16941: PUSH
16942: LD_INT 10
16944: PUSH
16945: LD_INT 11
16947: PUSH
16948: LD_INT 12
16950: PUSH
16951: LD_INT 15
16953: PUSH
16954: LD_INT 14
16956: PUSH
16957: LD_INT 13
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: PUSH
16968: LD_VAR 0 2
16972: PUSH
16973: LD_INT 3
16975: MINUS
16976: ARRAY
16977: ST_TO_ADDR
// end ; 10 .. 13 :
16978: GO 17488
16980: LD_INT 10
16982: DOUBLE
16983: GREATEREQUAL
16984: IFFALSE 16992
16986: LD_INT 13
16988: DOUBLE
16989: LESSEQUAL
16990: IFTRUE 16994
16992: GO 17071
16994: POP
// begin bc_type := b_lab_full ;
16995: LD_ADDR_OWVAR 42
16999: PUSH
17000: LD_INT 8
17002: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17003: LD_ADDR_OWVAR 44
17007: PUSH
17008: LD_INT 10
17010: PUSH
17011: LD_INT 12
17013: PUSH
17014: LD_INT 14
17016: PUSH
17017: LD_INT 13
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: PUSH
17026: LD_VAR 0 2
17030: PUSH
17031: LD_INT 9
17033: MINUS
17034: ARRAY
17035: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17036: LD_ADDR_OWVAR 45
17040: PUSH
17041: LD_INT 11
17043: PUSH
17044: LD_INT 15
17046: PUSH
17047: LD_INT 12
17049: PUSH
17050: LD_INT 15
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: PUSH
17059: LD_VAR 0 2
17063: PUSH
17064: LD_INT 9
17066: MINUS
17067: ARRAY
17068: ST_TO_ADDR
// end ; 14 :
17069: GO 17488
17071: LD_INT 14
17073: DOUBLE
17074: EQUAL
17075: IFTRUE 17079
17077: GO 17090
17079: POP
// bc_type := b_workshop ; 15 :
17080: LD_ADDR_OWVAR 42
17084: PUSH
17085: LD_INT 2
17087: ST_TO_ADDR
17088: GO 17488
17090: LD_INT 15
17092: DOUBLE
17093: EQUAL
17094: IFTRUE 17098
17096: GO 17109
17098: POP
// bc_type := b_factory ; 16 :
17099: LD_ADDR_OWVAR 42
17103: PUSH
17104: LD_INT 3
17106: ST_TO_ADDR
17107: GO 17488
17109: LD_INT 16
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17128
17117: POP
// bc_type := b_ext_gun ; 17 :
17118: LD_ADDR_OWVAR 42
17122: PUSH
17123: LD_INT 17
17125: ST_TO_ADDR
17126: GO 17488
17128: LD_INT 17
17130: DOUBLE
17131: EQUAL
17132: IFTRUE 17136
17134: GO 17164
17136: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17137: LD_ADDR_OWVAR 42
17141: PUSH
17142: LD_INT 19
17144: PUSH
17145: LD_INT 23
17147: PUSH
17148: LD_INT 19
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: PUSH
17156: LD_VAR 0 1
17160: ARRAY
17161: ST_TO_ADDR
17162: GO 17488
17164: LD_INT 18
17166: DOUBLE
17167: EQUAL
17168: IFTRUE 17172
17170: GO 17183
17172: POP
// bc_type := b_ext_radar ; 19 :
17173: LD_ADDR_OWVAR 42
17177: PUSH
17178: LD_INT 20
17180: ST_TO_ADDR
17181: GO 17488
17183: LD_INT 19
17185: DOUBLE
17186: EQUAL
17187: IFTRUE 17191
17189: GO 17202
17191: POP
// bc_type := b_ext_radio ; 20 :
17192: LD_ADDR_OWVAR 42
17196: PUSH
17197: LD_INT 22
17199: ST_TO_ADDR
17200: GO 17488
17202: LD_INT 20
17204: DOUBLE
17205: EQUAL
17206: IFTRUE 17210
17208: GO 17221
17210: POP
// bc_type := b_ext_siberium ; 21 :
17211: LD_ADDR_OWVAR 42
17215: PUSH
17216: LD_INT 21
17218: ST_TO_ADDR
17219: GO 17488
17221: LD_INT 21
17223: DOUBLE
17224: EQUAL
17225: IFTRUE 17229
17227: GO 17240
17229: POP
// bc_type := b_ext_computer ; 22 :
17230: LD_ADDR_OWVAR 42
17234: PUSH
17235: LD_INT 24
17237: ST_TO_ADDR
17238: GO 17488
17240: LD_INT 22
17242: DOUBLE
17243: EQUAL
17244: IFTRUE 17248
17246: GO 17259
17248: POP
// bc_type := b_ext_track ; 23 :
17249: LD_ADDR_OWVAR 42
17253: PUSH
17254: LD_INT 16
17256: ST_TO_ADDR
17257: GO 17488
17259: LD_INT 23
17261: DOUBLE
17262: EQUAL
17263: IFTRUE 17267
17265: GO 17278
17267: POP
// bc_type := b_ext_laser ; 24 :
17268: LD_ADDR_OWVAR 42
17272: PUSH
17273: LD_INT 25
17275: ST_TO_ADDR
17276: GO 17488
17278: LD_INT 24
17280: DOUBLE
17281: EQUAL
17282: IFTRUE 17286
17284: GO 17297
17286: POP
// bc_type := b_control_tower ; 25 :
17287: LD_ADDR_OWVAR 42
17291: PUSH
17292: LD_INT 36
17294: ST_TO_ADDR
17295: GO 17488
17297: LD_INT 25
17299: DOUBLE
17300: EQUAL
17301: IFTRUE 17305
17303: GO 17316
17305: POP
// bc_type := b_breastwork ; 26 :
17306: LD_ADDR_OWVAR 42
17310: PUSH
17311: LD_INT 31
17313: ST_TO_ADDR
17314: GO 17488
17316: LD_INT 26
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17335
17324: POP
// bc_type := b_bunker ; 27 :
17325: LD_ADDR_OWVAR 42
17329: PUSH
17330: LD_INT 32
17332: ST_TO_ADDR
17333: GO 17488
17335: LD_INT 27
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17354
17343: POP
// bc_type := b_turret ; 28 :
17344: LD_ADDR_OWVAR 42
17348: PUSH
17349: LD_INT 33
17351: ST_TO_ADDR
17352: GO 17488
17354: LD_INT 28
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17373
17362: POP
// bc_type := b_armoury ; 29 :
17363: LD_ADDR_OWVAR 42
17367: PUSH
17368: LD_INT 4
17370: ST_TO_ADDR
17371: GO 17488
17373: LD_INT 29
17375: DOUBLE
17376: EQUAL
17377: IFTRUE 17381
17379: GO 17392
17381: POP
// bc_type := b_barracks ; 30 :
17382: LD_ADDR_OWVAR 42
17386: PUSH
17387: LD_INT 5
17389: ST_TO_ADDR
17390: GO 17488
17392: LD_INT 30
17394: DOUBLE
17395: EQUAL
17396: IFTRUE 17400
17398: GO 17411
17400: POP
// bc_type := b_solar_power ; 31 :
17401: LD_ADDR_OWVAR 42
17405: PUSH
17406: LD_INT 27
17408: ST_TO_ADDR
17409: GO 17488
17411: LD_INT 31
17413: DOUBLE
17414: EQUAL
17415: IFTRUE 17419
17417: GO 17430
17419: POP
// bc_type := b_oil_power ; 32 :
17420: LD_ADDR_OWVAR 42
17424: PUSH
17425: LD_INT 26
17427: ST_TO_ADDR
17428: GO 17488
17430: LD_INT 32
17432: DOUBLE
17433: EQUAL
17434: IFTRUE 17438
17436: GO 17449
17438: POP
// bc_type := b_siberite_power ; 33 :
17439: LD_ADDR_OWVAR 42
17443: PUSH
17444: LD_INT 28
17446: ST_TO_ADDR
17447: GO 17488
17449: LD_INT 33
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17468
17457: POP
// bc_type := b_oil_mine ; 34 :
17458: LD_ADDR_OWVAR 42
17462: PUSH
17463: LD_INT 29
17465: ST_TO_ADDR
17466: GO 17488
17468: LD_INT 34
17470: DOUBLE
17471: EQUAL
17472: IFTRUE 17476
17474: GO 17487
17476: POP
// bc_type := b_siberite_mine ; end ;
17477: LD_ADDR_OWVAR 42
17481: PUSH
17482: LD_INT 30
17484: ST_TO_ADDR
17485: GO 17488
17487: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17488: LD_ADDR_VAR 0 8
17492: PUSH
17493: LD_VAR 0 5
17497: PPUSH
17498: LD_VAR 0 6
17502: PPUSH
17503: LD_VAR 0 3
17507: PPUSH
17508: CALL_OW 47
17512: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17513: LD_OWVAR 42
17517: PUSH
17518: LD_INT 32
17520: PUSH
17521: LD_INT 33
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: IN
17528: IFFALSE 17544
// PlaceWeaponTurret ( b , weapon ) ;
17530: LD_VAR 0 8
17534: PPUSH
17535: LD_VAR 0 4
17539: PPUSH
17540: CALL_OW 431
// end ;
17544: LD_VAR 0 7
17548: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17549: LD_INT 0
17551: PPUSH
17552: PPUSH
17553: PPUSH
17554: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17555: LD_ADDR_VAR 0 4
17559: PUSH
17560: LD_INT 22
17562: PUSH
17563: LD_OWVAR 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 2
17574: PUSH
17575: LD_INT 30
17577: PUSH
17578: LD_INT 0
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 30
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PPUSH
17604: CALL_OW 69
17608: ST_TO_ADDR
// if not tmp then
17609: LD_VAR 0 4
17613: NOT
17614: IFFALSE 17618
// exit ;
17616: GO 17677
// for i in tmp do
17618: LD_ADDR_VAR 0 2
17622: PUSH
17623: LD_VAR 0 4
17627: PUSH
17628: FOR_IN
17629: IFFALSE 17675
// for j = 1 to 3 do
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: DOUBLE
17637: LD_INT 1
17639: DEC
17640: ST_TO_ADDR
17641: LD_INT 3
17643: PUSH
17644: FOR_TO
17645: IFFALSE 17671
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17647: LD_VAR 0 2
17651: PPUSH
17652: CALL_OW 274
17656: PPUSH
17657: LD_VAR 0 3
17661: PPUSH
17662: LD_INT 99999
17664: PPUSH
17665: CALL_OW 277
17669: GO 17644
17671: POP
17672: POP
17673: GO 17628
17675: POP
17676: POP
// end ;
17677: LD_VAR 0 1
17681: RET
// export function hHackSetLevel10 ; var i , j ; begin
17682: LD_INT 0
17684: PPUSH
17685: PPUSH
17686: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17687: LD_ADDR_VAR 0 2
17691: PUSH
17692: LD_INT 21
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 69
17706: PUSH
17707: FOR_IN
17708: IFFALSE 17760
// if IsSelected ( i ) then
17710: LD_VAR 0 2
17714: PPUSH
17715: CALL_OW 306
17719: IFFALSE 17758
// begin for j := 1 to 4 do
17721: LD_ADDR_VAR 0 3
17725: PUSH
17726: DOUBLE
17727: LD_INT 1
17729: DEC
17730: ST_TO_ADDR
17731: LD_INT 4
17733: PUSH
17734: FOR_TO
17735: IFFALSE 17756
// SetSkill ( i , j , 10 ) ;
17737: LD_VAR 0 2
17741: PPUSH
17742: LD_VAR 0 3
17746: PPUSH
17747: LD_INT 10
17749: PPUSH
17750: CALL_OW 237
17754: GO 17734
17756: POP
17757: POP
// end ;
17758: GO 17707
17760: POP
17761: POP
// end ;
17762: LD_VAR 0 1
17766: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17767: LD_INT 0
17769: PPUSH
17770: PPUSH
17771: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: LD_INT 22
17779: PUSH
17780: LD_OWVAR 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 21
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL_OW 69
17807: PUSH
17808: FOR_IN
17809: IFFALSE 17850
// begin for j := 1 to 4 do
17811: LD_ADDR_VAR 0 3
17815: PUSH
17816: DOUBLE
17817: LD_INT 1
17819: DEC
17820: ST_TO_ADDR
17821: LD_INT 4
17823: PUSH
17824: FOR_TO
17825: IFFALSE 17846
// SetSkill ( i , j , 10 ) ;
17827: LD_VAR 0 2
17831: PPUSH
17832: LD_VAR 0 3
17836: PPUSH
17837: LD_INT 10
17839: PPUSH
17840: CALL_OW 237
17844: GO 17824
17846: POP
17847: POP
// end ;
17848: GO 17808
17850: POP
17851: POP
// end ;
17852: LD_VAR 0 1
17856: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17857: LD_INT 0
17859: PPUSH
// uc_side := your_side ;
17860: LD_ADDR_OWVAR 20
17864: PUSH
17865: LD_OWVAR 2
17869: ST_TO_ADDR
// uc_nation := nation ;
17870: LD_ADDR_OWVAR 21
17874: PUSH
17875: LD_VAR 0 1
17879: ST_TO_ADDR
// InitHc ;
17880: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17884: LD_INT 0
17886: PPUSH
17887: LD_VAR 0 2
17891: PPUSH
17892: LD_VAR 0 3
17896: PPUSH
17897: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17901: LD_VAR 0 4
17905: PPUSH
17906: LD_VAR 0 5
17910: PPUSH
17911: CALL_OW 428
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17943
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17921: CALL_OW 44
17925: PPUSH
17926: LD_VAR 0 4
17930: PPUSH
17931: LD_VAR 0 5
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: CALL_OW 48
// end ;
17943: LD_VAR 0 6
17947: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17948: LD_INT 0
17950: PPUSH
17951: PPUSH
// uc_side := your_side ;
17952: LD_ADDR_OWVAR 20
17956: PUSH
17957: LD_OWVAR 2
17961: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17962: LD_VAR 0 1
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 3
17975: PUSH
17976: LD_INT 4
17978: PUSH
17979: LD_INT 5
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: IN
17989: IFFALSE 18001
// uc_nation := nation_american else
17991: LD_ADDR_OWVAR 21
17995: PUSH
17996: LD_INT 1
17998: ST_TO_ADDR
17999: GO 18044
// if chassis in [ 11 , 12 , 13 , 14 ] then
18001: LD_VAR 0 1
18005: PUSH
18006: LD_INT 11
18008: PUSH
18009: LD_INT 12
18011: PUSH
18012: LD_INT 13
18014: PUSH
18015: LD_INT 14
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: IN
18024: IFFALSE 18036
// uc_nation := nation_arabian else
18026: LD_ADDR_OWVAR 21
18030: PUSH
18031: LD_INT 2
18033: ST_TO_ADDR
18034: GO 18044
// uc_nation := nation_russian ;
18036: LD_ADDR_OWVAR 21
18040: PUSH
18041: LD_INT 3
18043: ST_TO_ADDR
// vc_chassis := chassis ;
18044: LD_ADDR_OWVAR 37
18048: PUSH
18049: LD_VAR 0 1
18053: ST_TO_ADDR
// vc_engine := engine ;
18054: LD_ADDR_OWVAR 39
18058: PUSH
18059: LD_VAR 0 2
18063: ST_TO_ADDR
// vc_control := control ;
18064: LD_ADDR_OWVAR 38
18068: PUSH
18069: LD_VAR 0 3
18073: ST_TO_ADDR
// vc_weapon := weapon ;
18074: LD_ADDR_OWVAR 40
18078: PUSH
18079: LD_VAR 0 4
18083: ST_TO_ADDR
// un := CreateVehicle ;
18084: LD_ADDR_VAR 0 8
18088: PUSH
18089: CALL_OW 45
18093: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18094: LD_VAR 0 8
18098: PPUSH
18099: LD_INT 0
18101: PPUSH
18102: LD_INT 5
18104: PPUSH
18105: CALL_OW 12
18109: PPUSH
18110: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18114: LD_VAR 0 8
18118: PPUSH
18119: LD_VAR 0 5
18123: PPUSH
18124: LD_VAR 0 6
18128: PPUSH
18129: LD_INT 1
18131: PPUSH
18132: CALL_OW 48
// end ;
18136: LD_VAR 0 7
18140: RET
// export hInvincible ; every 1 do
18141: GO 18143
18143: DISABLE
// hInvincible := [ ] ;
18144: LD_ADDR_EXP 115
18148: PUSH
18149: EMPTY
18150: ST_TO_ADDR
18151: END
// every 10 do var i ;
18152: GO 18154
18154: DISABLE
18155: LD_INT 0
18157: PPUSH
// begin enable ;
18158: ENABLE
// if not hInvincible then
18159: LD_EXP 115
18163: NOT
18164: IFFALSE 18168
// exit ;
18166: GO 18212
// for i in hInvincible do
18168: LD_ADDR_VAR 0 1
18172: PUSH
18173: LD_EXP 115
18177: PUSH
18178: FOR_IN
18179: IFFALSE 18210
// if GetLives ( i ) < 1000 then
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 256
18190: PUSH
18191: LD_INT 1000
18193: LESS
18194: IFFALSE 18208
// SetLives ( i , 1000 ) ;
18196: LD_VAR 0 1
18200: PPUSH
18201: LD_INT 1000
18203: PPUSH
18204: CALL_OW 234
18208: GO 18178
18210: POP
18211: POP
// end ;
18212: PPOPN 1
18214: END
// export function hHackInvincible ; var i ; begin
18215: LD_INT 0
18217: PPUSH
18218: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18219: LD_ADDR_VAR 0 2
18223: PUSH
18224: LD_INT 2
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 21
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: PPUSH
18252: CALL_OW 69
18256: PUSH
18257: FOR_IN
18258: IFFALSE 18319
// if IsSelected ( i ) then
18260: LD_VAR 0 2
18264: PPUSH
18265: CALL_OW 306
18269: IFFALSE 18317
// begin if i in hInvincible then
18271: LD_VAR 0 2
18275: PUSH
18276: LD_EXP 115
18280: IN
18281: IFFALSE 18301
// hInvincible := hInvincible diff i else
18283: LD_ADDR_EXP 115
18287: PUSH
18288: LD_EXP 115
18292: PUSH
18293: LD_VAR 0 2
18297: DIFF
18298: ST_TO_ADDR
18299: GO 18317
// hInvincible := hInvincible union i ;
18301: LD_ADDR_EXP 115
18305: PUSH
18306: LD_EXP 115
18310: PUSH
18311: LD_VAR 0 2
18315: UNION
18316: ST_TO_ADDR
// end ;
18317: GO 18257
18319: POP
18320: POP
// end ;
18321: LD_VAR 0 1
18325: RET
// export function hHackInvisible ; var i , j ; begin
18326: LD_INT 0
18328: PPUSH
18329: PPUSH
18330: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18331: LD_ADDR_VAR 0 2
18335: PUSH
18336: LD_INT 21
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 69
18350: PUSH
18351: FOR_IN
18352: IFFALSE 18376
// if IsSelected ( i ) then
18354: LD_VAR 0 2
18358: PPUSH
18359: CALL_OW 306
18363: IFFALSE 18374
// ComForceInvisible ( i ) ;
18365: LD_VAR 0 2
18369: PPUSH
18370: CALL_OW 496
18374: GO 18351
18376: POP
18377: POP
// end ;
18378: LD_VAR 0 1
18382: RET
// export function hHackChangeYourSide ; begin
18383: LD_INT 0
18385: PPUSH
// if your_side = 8 then
18386: LD_OWVAR 2
18390: PUSH
18391: LD_INT 8
18393: EQUAL
18394: IFFALSE 18406
// your_side := 0 else
18396: LD_ADDR_OWVAR 2
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
18404: GO 18420
// your_side := your_side + 1 ;
18406: LD_ADDR_OWVAR 2
18410: PUSH
18411: LD_OWVAR 2
18415: PUSH
18416: LD_INT 1
18418: PLUS
18419: ST_TO_ADDR
// end ;
18420: LD_VAR 0 1
18424: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18425: LD_INT 0
18427: PPUSH
18428: PPUSH
18429: PPUSH
// for i in all_units do
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_OWVAR 3
18439: PUSH
18440: FOR_IN
18441: IFFALSE 18519
// if IsSelected ( i ) then
18443: LD_VAR 0 2
18447: PPUSH
18448: CALL_OW 306
18452: IFFALSE 18517
// begin j := GetSide ( i ) ;
18454: LD_ADDR_VAR 0 3
18458: PUSH
18459: LD_VAR 0 2
18463: PPUSH
18464: CALL_OW 255
18468: ST_TO_ADDR
// if j = 8 then
18469: LD_VAR 0 3
18473: PUSH
18474: LD_INT 8
18476: EQUAL
18477: IFFALSE 18489
// j := 0 else
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: LD_INT 0
18486: ST_TO_ADDR
18487: GO 18503
// j := j + 1 ;
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: LD_VAR 0 3
18498: PUSH
18499: LD_INT 1
18501: PLUS
18502: ST_TO_ADDR
// SetSide ( i , j ) ;
18503: LD_VAR 0 2
18507: PPUSH
18508: LD_VAR 0 3
18512: PPUSH
18513: CALL_OW 235
// end ;
18517: GO 18440
18519: POP
18520: POP
// end ;
18521: LD_VAR 0 1
18525: RET
// export function hHackFog ; begin
18526: LD_INT 0
18528: PPUSH
// FogOff ( true ) ;
18529: LD_INT 1
18531: PPUSH
18532: CALL_OW 344
// end ;
18536: LD_VAR 0 1
18540: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18541: LD_INT 0
18543: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18544: LD_VAR 0 1
18548: PPUSH
18549: LD_VAR 0 2
18553: PPUSH
18554: LD_VAR 0 3
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: LD_INT 1
18564: PPUSH
18565: CALL_OW 483
// CenterOnXY ( x , y ) ;
18569: LD_VAR 0 2
18573: PPUSH
18574: LD_VAR 0 3
18578: PPUSH
18579: CALL_OW 84
// end ; end_of_file
18583: LD_VAR 0 4
18587: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18588: LD_INT 0
18590: PPUSH
18591: PPUSH
18592: PPUSH
18593: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18594: LD_VAR 0 1
18598: PPUSH
18599: CALL_OW 264
18603: PUSH
18604: LD_EXP 43
18608: EQUAL
18609: IFFALSE 18681
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18611: LD_INT 68
18613: PPUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 255
18623: PPUSH
18624: CALL_OW 321
18628: PUSH
18629: LD_INT 2
18631: EQUAL
18632: IFFALSE 18644
// eff := 70 else
18634: LD_ADDR_VAR 0 4
18638: PUSH
18639: LD_INT 70
18641: ST_TO_ADDR
18642: GO 18652
// eff := 30 ;
18644: LD_ADDR_VAR 0 4
18648: PUSH
18649: LD_INT 30
18651: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 250
18661: PPUSH
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 251
18671: PPUSH
18672: LD_VAR 0 4
18676: PPUSH
18677: CALL_OW 495
// end ; end ;
18681: LD_VAR 0 2
18685: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18686: LD_INT 0
18688: PPUSH
// end ;
18689: LD_VAR 0 4
18693: RET
// export function SOS_Command ( cmd ) ; begin
18694: LD_INT 0
18696: PPUSH
// end ;
18697: LD_VAR 0 2
18701: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18702: LD_INT 0
18704: PPUSH
// end ;
18705: LD_VAR 0 6
18709: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
18710: LD_INT 0
18712: PPUSH
18713: PPUSH
// if not vehicle or not factory then
18714: LD_VAR 0 1
18718: NOT
18719: PUSH
18720: LD_VAR 0 2
18724: NOT
18725: OR
18726: IFFALSE 18730
// exit ;
18728: GO 18961
// if factoryWaypoints >= factory then
18730: LD_EXP 116
18734: PUSH
18735: LD_VAR 0 2
18739: GREATEREQUAL
18740: IFFALSE 18961
// if factoryWaypoints [ factory ] then
18742: LD_EXP 116
18746: PUSH
18747: LD_VAR 0 2
18751: ARRAY
18752: IFFALSE 18961
// begin if GetControl ( vehicle ) = control_manual then
18754: LD_VAR 0 1
18758: PPUSH
18759: CALL_OW 263
18763: PUSH
18764: LD_INT 1
18766: EQUAL
18767: IFFALSE 18848
// begin driver := IsDrivenBy ( vehicle ) ;
18769: LD_ADDR_VAR 0 4
18773: PUSH
18774: LD_VAR 0 1
18778: PPUSH
18779: CALL_OW 311
18783: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
18784: LD_VAR 0 4
18788: PPUSH
18789: LD_EXP 116
18793: PUSH
18794: LD_VAR 0 2
18798: ARRAY
18799: PUSH
18800: LD_INT 1
18802: ARRAY
18803: PPUSH
18804: LD_EXP 116
18808: PUSH
18809: LD_VAR 0 2
18813: ARRAY
18814: PUSH
18815: LD_INT 2
18817: ARRAY
18818: PPUSH
18819: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18823: LD_VAR 0 4
18827: PPUSH
18828: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
18832: LD_VAR 0 4
18836: PPUSH
18837: LD_VAR 0 2
18841: PPUSH
18842: CALL_OW 180
// end else
18846: GO 18961
// if GetControl ( vehicle ) = control_remote then
18848: LD_VAR 0 1
18852: PPUSH
18853: CALL_OW 263
18857: PUSH
18858: LD_INT 2
18860: EQUAL
18861: IFFALSE 18922
// begin wait ( 0 0$2 ) ;
18863: LD_INT 70
18865: PPUSH
18866: CALL_OW 67
// if Connect ( vehicle ) then
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL 31185 0 1
18879: IFFALSE 18920
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
18881: LD_VAR 0 1
18885: PPUSH
18886: LD_EXP 116
18890: PUSH
18891: LD_VAR 0 2
18895: ARRAY
18896: PUSH
18897: LD_INT 1
18899: ARRAY
18900: PPUSH
18901: LD_EXP 116
18905: PUSH
18906: LD_VAR 0 2
18910: ARRAY
18911: PUSH
18912: LD_INT 2
18914: ARRAY
18915: PPUSH
18916: CALL_OW 171
// end else
18920: GO 18961
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_EXP 116
18931: PUSH
18932: LD_VAR 0 2
18936: ARRAY
18937: PUSH
18938: LD_INT 1
18940: ARRAY
18941: PPUSH
18942: LD_EXP 116
18946: PUSH
18947: LD_VAR 0 2
18951: ARRAY
18952: PUSH
18953: LD_INT 2
18955: ARRAY
18956: PPUSH
18957: CALL_OW 171
// end ; end ;
18961: LD_VAR 0 3
18965: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18966: LD_INT 0
18968: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18969: LD_VAR 0 1
18973: PUSH
18974: LD_INT 250
18976: EQUAL
18977: PUSH
18978: LD_VAR 0 2
18982: PPUSH
18983: CALL_OW 264
18987: PUSH
18988: LD_EXP 46
18992: EQUAL
18993: AND
18994: IFFALSE 19015
// MinerPlaceMine ( unit , x , y ) ;
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_VAR 0 4
19005: PPUSH
19006: LD_VAR 0 5
19010: PPUSH
19011: CALL 21743 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 251
19022: EQUAL
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: CALL_OW 264
19033: PUSH
19034: LD_EXP 46
19038: EQUAL
19039: AND
19040: IFFALSE 19061
// MinerDetonateMine ( unit , x , y ) ;
19042: LD_VAR 0 2
19046: PPUSH
19047: LD_VAR 0 4
19051: PPUSH
19052: LD_VAR 0 5
19056: PPUSH
19057: CALL 22020 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19061: LD_VAR 0 1
19065: PUSH
19066: LD_INT 252
19068: EQUAL
19069: PUSH
19070: LD_VAR 0 2
19074: PPUSH
19075: CALL_OW 264
19079: PUSH
19080: LD_EXP 46
19084: EQUAL
19085: AND
19086: IFFALSE 19107
// MinerCreateMinefield ( unit , x , y ) ;
19088: LD_VAR 0 2
19092: PPUSH
19093: LD_VAR 0 4
19097: PPUSH
19098: LD_VAR 0 5
19102: PPUSH
19103: CALL 22437 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19107: LD_VAR 0 1
19111: PUSH
19112: LD_INT 253
19114: EQUAL
19115: PUSH
19116: LD_VAR 0 2
19120: PPUSH
19121: CALL_OW 257
19125: PUSH
19126: LD_INT 5
19128: EQUAL
19129: AND
19130: IFFALSE 19151
// ComBinocular ( unit , x , y ) ;
19132: LD_VAR 0 2
19136: PPUSH
19137: LD_VAR 0 4
19141: PPUSH
19142: LD_VAR 0 5
19146: PPUSH
19147: CALL 22808 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19151: LD_VAR 0 1
19155: PUSH
19156: LD_INT 254
19158: EQUAL
19159: PUSH
19160: LD_VAR 0 2
19164: PPUSH
19165: CALL_OW 264
19169: PUSH
19170: LD_EXP 41
19174: EQUAL
19175: AND
19176: PUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: CALL_OW 263
19186: PUSH
19187: LD_INT 3
19189: EQUAL
19190: AND
19191: IFFALSE 19207
// HackDestroyVehicle ( unit , selectedUnit ) ;
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: CALL 21103 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19207: LD_VAR 0 1
19211: PUSH
19212: LD_INT 255
19214: EQUAL
19215: PUSH
19216: LD_VAR 0 2
19220: PPUSH
19221: CALL_OW 264
19225: PUSH
19226: LD_INT 14
19228: PUSH
19229: LD_INT 53
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: IN
19236: AND
19237: PUSH
19238: LD_VAR 0 4
19242: PPUSH
19243: LD_VAR 0 5
19247: PPUSH
19248: CALL_OW 488
19252: AND
19253: IFFALSE 19277
// CutTreeXYR ( unit , x , y , 12 ) ;
19255: LD_VAR 0 2
19259: PPUSH
19260: LD_VAR 0 4
19264: PPUSH
19265: LD_VAR 0 5
19269: PPUSH
19270: LD_INT 12
19272: PPUSH
19273: CALL 19669 0 4
// if cmd = 256 then
19277: LD_VAR 0 1
19281: PUSH
19282: LD_INT 256
19284: EQUAL
19285: IFFALSE 19306
// SetFactoryWaypoint ( unit , x , y ) ;
19287: LD_VAR 0 2
19291: PPUSH
19292: LD_VAR 0 4
19296: PPUSH
19297: LD_VAR 0 5
19301: PPUSH
19302: CALL 19311 0 3
// end ;
19306: LD_VAR 0 6
19310: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19311: LD_INT 0
19313: PPUSH
19314: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19315: LD_VAR 0 1
19319: NOT
19320: PUSH
19321: LD_VAR 0 2
19325: PPUSH
19326: LD_VAR 0 3
19330: PPUSH
19331: CALL_OW 488
19335: NOT
19336: OR
19337: PUSH
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 266
19347: PUSH
19348: LD_INT 3
19350: NONEQUAL
19351: PUSH
19352: LD_VAR 0 1
19356: PPUSH
19357: CALL_OW 247
19361: PUSH
19362: LD_INT 1
19364: EQUAL
19365: NOT
19366: AND
19367: OR
19368: IFFALSE 19372
// exit ;
19370: GO 19521
// if GetType ( factory ) = unit_human then
19372: LD_VAR 0 1
19376: PPUSH
19377: CALL_OW 247
19381: PUSH
19382: LD_INT 1
19384: EQUAL
19385: IFFALSE 19402
// factory := IsInUnit ( factory ) ;
19387: LD_ADDR_VAR 0 1
19391: PUSH
19392: LD_VAR 0 1
19396: PPUSH
19397: CALL_OW 310
19401: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19402: LD_VAR 0 1
19406: PPUSH
19407: CALL_OW 266
19411: PUSH
19412: LD_INT 3
19414: NONEQUAL
19415: IFFALSE 19419
// exit ;
19417: GO 19521
// if HexInfo ( x , y ) = factory then
19419: LD_VAR 0 2
19423: PPUSH
19424: LD_VAR 0 3
19428: PPUSH
19429: CALL_OW 428
19433: PUSH
19434: LD_VAR 0 1
19438: EQUAL
19439: IFFALSE 19466
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19441: LD_ADDR_EXP 116
19445: PUSH
19446: LD_EXP 116
19450: PPUSH
19451: LD_VAR 0 1
19455: PPUSH
19456: LD_INT 0
19458: PPUSH
19459: CALL_OW 1
19463: ST_TO_ADDR
19464: GO 19517
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19466: LD_ADDR_EXP 116
19470: PUSH
19471: LD_EXP 116
19475: PPUSH
19476: LD_VAR 0 1
19480: PPUSH
19481: LD_VAR 0 1
19485: PPUSH
19486: CALL_OW 255
19490: PUSH
19491: LD_VAR 0 1
19495: PUSH
19496: LD_VAR 0 2
19500: PUSH
19501: LD_VAR 0 3
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 1
19516: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19517: CALL 19526 0 0
// end ;
19521: LD_VAR 0 4
19525: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
19526: LD_INT 0
19528: PPUSH
19529: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19530: LD_STRING resetFactoryWaypoint();
19532: PPUSH
19533: CALL_OW 559
// if factoryWaypoints then
19537: LD_EXP 116
19541: IFFALSE 19664
// begin for i := 1 to factoryWaypoints do
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_EXP 116
19557: PUSH
19558: FOR_TO
19559: IFFALSE 19662
// if factoryWaypoints [ i ] then
19561: LD_EXP 116
19565: PUSH
19566: LD_VAR 0 2
19570: ARRAY
19571: IFFALSE 19660
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
19573: LD_STRING setFactoryWaypointXY(
19575: PUSH
19576: LD_EXP 116
19580: PUSH
19581: LD_VAR 0 2
19585: ARRAY
19586: PUSH
19587: LD_INT 1
19589: ARRAY
19590: STR
19591: PUSH
19592: LD_STRING ,
19594: STR
19595: PUSH
19596: LD_EXP 116
19600: PUSH
19601: LD_VAR 0 2
19605: ARRAY
19606: PUSH
19607: LD_INT 2
19609: ARRAY
19610: STR
19611: PUSH
19612: LD_STRING ,
19614: STR
19615: PUSH
19616: LD_EXP 116
19620: PUSH
19621: LD_VAR 0 2
19625: ARRAY
19626: PUSH
19627: LD_INT 3
19629: ARRAY
19630: STR
19631: PUSH
19632: LD_STRING ,
19634: STR
19635: PUSH
19636: LD_EXP 116
19640: PUSH
19641: LD_VAR 0 2
19645: ARRAY
19646: PUSH
19647: LD_INT 4
19649: ARRAY
19650: STR
19651: PUSH
19652: LD_STRING )
19654: STR
19655: PPUSH
19656: CALL_OW 559
19660: GO 19558
19662: POP
19663: POP
// end ; end ;
19664: LD_VAR 0 1
19668: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19669: LD_INT 0
19671: PPUSH
19672: PPUSH
19673: PPUSH
19674: PPUSH
19675: PPUSH
19676: PPUSH
19677: PPUSH
19678: PPUSH
19679: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19680: LD_VAR 0 1
19684: NOT
19685: PUSH
19686: LD_VAR 0 2
19690: PPUSH
19691: LD_VAR 0 3
19695: PPUSH
19696: CALL_OW 488
19700: NOT
19701: OR
19702: PUSH
19703: LD_VAR 0 4
19707: NOT
19708: OR
19709: IFFALSE 19713
// exit ;
19711: GO 20053
// list := [ ] ;
19713: LD_ADDR_VAR 0 13
19717: PUSH
19718: EMPTY
19719: ST_TO_ADDR
// if x - r < 0 then
19720: LD_VAR 0 2
19724: PUSH
19725: LD_VAR 0 4
19729: MINUS
19730: PUSH
19731: LD_INT 0
19733: LESS
19734: IFFALSE 19746
// min_x := 0 else
19736: LD_ADDR_VAR 0 7
19740: PUSH
19741: LD_INT 0
19743: ST_TO_ADDR
19744: GO 19762
// min_x := x - r ;
19746: LD_ADDR_VAR 0 7
19750: PUSH
19751: LD_VAR 0 2
19755: PUSH
19756: LD_VAR 0 4
19760: MINUS
19761: ST_TO_ADDR
// if y - r < 0 then
19762: LD_VAR 0 3
19766: PUSH
19767: LD_VAR 0 4
19771: MINUS
19772: PUSH
19773: LD_INT 0
19775: LESS
19776: IFFALSE 19788
// min_y := 0 else
19778: LD_ADDR_VAR 0 8
19782: PUSH
19783: LD_INT 0
19785: ST_TO_ADDR
19786: GO 19804
// min_y := y - r ;
19788: LD_ADDR_VAR 0 8
19792: PUSH
19793: LD_VAR 0 3
19797: PUSH
19798: LD_VAR 0 4
19802: MINUS
19803: ST_TO_ADDR
// max_x := x + r ;
19804: LD_ADDR_VAR 0 9
19808: PUSH
19809: LD_VAR 0 2
19813: PUSH
19814: LD_VAR 0 4
19818: PLUS
19819: ST_TO_ADDR
// max_y := y + r ;
19820: LD_ADDR_VAR 0 10
19824: PUSH
19825: LD_VAR 0 3
19829: PUSH
19830: LD_VAR 0 4
19834: PLUS
19835: ST_TO_ADDR
// for _x = min_x to max_x do
19836: LD_ADDR_VAR 0 11
19840: PUSH
19841: DOUBLE
19842: LD_VAR 0 7
19846: DEC
19847: ST_TO_ADDR
19848: LD_VAR 0 9
19852: PUSH
19853: FOR_TO
19854: IFFALSE 19971
// for _y = min_y to max_y do
19856: LD_ADDR_VAR 0 12
19860: PUSH
19861: DOUBLE
19862: LD_VAR 0 8
19866: DEC
19867: ST_TO_ADDR
19868: LD_VAR 0 10
19872: PUSH
19873: FOR_TO
19874: IFFALSE 19967
// begin if not ValidHex ( _x , _y ) then
19876: LD_VAR 0 11
19880: PPUSH
19881: LD_VAR 0 12
19885: PPUSH
19886: CALL_OW 488
19890: NOT
19891: IFFALSE 19895
// continue ;
19893: GO 19873
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19895: LD_VAR 0 11
19899: PPUSH
19900: LD_VAR 0 12
19904: PPUSH
19905: CALL_OW 351
19909: PUSH
19910: LD_VAR 0 11
19914: PPUSH
19915: LD_VAR 0 12
19919: PPUSH
19920: CALL_OW 554
19924: AND
19925: IFFALSE 19965
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19927: LD_ADDR_VAR 0 13
19931: PUSH
19932: LD_VAR 0 13
19936: PPUSH
19937: LD_VAR 0 13
19941: PUSH
19942: LD_INT 1
19944: PLUS
19945: PPUSH
19946: LD_VAR 0 11
19950: PUSH
19951: LD_VAR 0 12
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PPUSH
19960: CALL_OW 2
19964: ST_TO_ADDR
// end ;
19965: GO 19873
19967: POP
19968: POP
19969: GO 19853
19971: POP
19972: POP
// if not list then
19973: LD_VAR 0 13
19977: NOT
19978: IFFALSE 19982
// exit ;
19980: GO 20053
// for i in list do
19982: LD_ADDR_VAR 0 6
19986: PUSH
19987: LD_VAR 0 13
19991: PUSH
19992: FOR_IN
19993: IFFALSE 20051
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19995: LD_VAR 0 1
19999: PPUSH
20000: LD_STRING M
20002: PUSH
20003: LD_VAR 0 6
20007: PUSH
20008: LD_INT 1
20010: ARRAY
20011: PUSH
20012: LD_VAR 0 6
20016: PUSH
20017: LD_INT 2
20019: ARRAY
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: EMPTY
20043: LIST
20044: PPUSH
20045: CALL_OW 447
20049: GO 19992
20051: POP
20052: POP
// end ;
20053: LD_VAR 0 5
20057: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20058: LD_EXP 117
20062: NOT
20063: IFFALSE 20113
20065: GO 20067
20067: DISABLE
// begin initHack := true ;
20068: LD_ADDR_EXP 117
20072: PUSH
20073: LD_INT 1
20075: ST_TO_ADDR
// hackTanks := [ ] ;
20076: LD_ADDR_EXP 118
20080: PUSH
20081: EMPTY
20082: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20083: LD_ADDR_EXP 119
20087: PUSH
20088: EMPTY
20089: ST_TO_ADDR
// hackLimit := 3 ;
20090: LD_ADDR_EXP 120
20094: PUSH
20095: LD_INT 3
20097: ST_TO_ADDR
// hackDist := 12 ;
20098: LD_ADDR_EXP 121
20102: PUSH
20103: LD_INT 12
20105: ST_TO_ADDR
// hackCounter := [ ] ;
20106: LD_ADDR_EXP 122
20110: PUSH
20111: EMPTY
20112: ST_TO_ADDR
// end ;
20113: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20114: LD_EXP 117
20118: PUSH
20119: LD_INT 34
20121: PUSH
20122: LD_EXP 41
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PPUSH
20131: CALL_OW 69
20135: AND
20136: IFFALSE 20391
20138: GO 20140
20140: DISABLE
20141: LD_INT 0
20143: PPUSH
20144: PPUSH
// begin enable ;
20145: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20146: LD_ADDR_VAR 0 1
20150: PUSH
20151: LD_INT 34
20153: PUSH
20154: LD_EXP 41
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PPUSH
20163: CALL_OW 69
20167: PUSH
20168: FOR_IN
20169: IFFALSE 20389
// begin if not i in hackTanks then
20171: LD_VAR 0 1
20175: PUSH
20176: LD_EXP 118
20180: IN
20181: NOT
20182: IFFALSE 20265
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20184: LD_ADDR_EXP 118
20188: PUSH
20189: LD_EXP 118
20193: PPUSH
20194: LD_EXP 118
20198: PUSH
20199: LD_INT 1
20201: PLUS
20202: PPUSH
20203: LD_VAR 0 1
20207: PPUSH
20208: CALL_OW 1
20212: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20213: LD_ADDR_EXP 119
20217: PUSH
20218: LD_EXP 119
20222: PPUSH
20223: LD_EXP 119
20227: PUSH
20228: LD_INT 1
20230: PLUS
20231: PPUSH
20232: EMPTY
20233: PPUSH
20234: CALL_OW 1
20238: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20239: LD_ADDR_EXP 122
20243: PUSH
20244: LD_EXP 122
20248: PPUSH
20249: LD_EXP 122
20253: PUSH
20254: LD_INT 1
20256: PLUS
20257: PPUSH
20258: EMPTY
20259: PPUSH
20260: CALL_OW 1
20264: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 302
20274: NOT
20275: IFFALSE 20288
// begin HackUnlinkAll ( i ) ;
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL 20394 0 1
// continue ;
20286: GO 20168
// end ; HackCheckCapturedStatus ( i ) ;
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL 20837 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_INT 81
20304: PUSH
20305: LD_VAR 0 1
20309: PPUSH
20310: CALL_OW 255
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 33
20321: PUSH
20322: LD_INT 3
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 91
20331: PUSH
20332: LD_VAR 0 1
20336: PUSH
20337: LD_EXP 121
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 50
20349: PUSH
20350: EMPTY
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: PPUSH
20359: CALL_OW 69
20363: ST_TO_ADDR
// if not tmp then
20364: LD_VAR 0 2
20368: NOT
20369: IFFALSE 20373
// continue ;
20371: GO 20168
// HackLink ( i , tmp ) ;
20373: LD_VAR 0 1
20377: PPUSH
20378: LD_VAR 0 2
20382: PPUSH
20383: CALL 20530 0 2
// end ;
20387: GO 20168
20389: POP
20390: POP
// end ;
20391: PPOPN 2
20393: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20394: LD_INT 0
20396: PPUSH
20397: PPUSH
20398: PPUSH
// if not hack in hackTanks then
20399: LD_VAR 0 1
20403: PUSH
20404: LD_EXP 118
20408: IN
20409: NOT
20410: IFFALSE 20414
// exit ;
20412: GO 20525
// index := GetElementIndex ( hackTanks , hack ) ;
20414: LD_ADDR_VAR 0 4
20418: PUSH
20419: LD_EXP 118
20423: PPUSH
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL 27999 0 2
20433: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20434: LD_EXP 119
20438: PUSH
20439: LD_VAR 0 4
20443: ARRAY
20444: IFFALSE 20525
// begin for i in hackTanksCaptured [ index ] do
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_EXP 119
20455: PUSH
20456: LD_VAR 0 4
20460: ARRAY
20461: PUSH
20462: FOR_IN
20463: IFFALSE 20489
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20465: LD_VAR 0 3
20469: PUSH
20470: LD_INT 1
20472: ARRAY
20473: PPUSH
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 2
20481: ARRAY
20482: PPUSH
20483: CALL_OW 235
20487: GO 20462
20489: POP
20490: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20491: LD_ADDR_EXP 119
20495: PUSH
20496: LD_EXP 119
20500: PPUSH
20501: LD_VAR 0 4
20505: PPUSH
20506: EMPTY
20507: PPUSH
20508: CALL_OW 1
20512: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20513: LD_VAR 0 1
20517: PPUSH
20518: LD_INT 0
20520: PPUSH
20521: CALL_OW 505
// end ; end ;
20525: LD_VAR 0 2
20529: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20530: LD_INT 0
20532: PPUSH
20533: PPUSH
20534: PPUSH
// if not hack in hackTanks or not vehicles then
20535: LD_VAR 0 1
20539: PUSH
20540: LD_EXP 118
20544: IN
20545: NOT
20546: PUSH
20547: LD_VAR 0 2
20551: NOT
20552: OR
20553: IFFALSE 20557
// exit ;
20555: GO 20832
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: LD_VAR 0 1
20566: PPUSH
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: CALL 28649 0 4
20582: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20583: LD_ADDR_VAR 0 5
20587: PUSH
20588: LD_EXP 118
20592: PPUSH
20593: LD_VAR 0 1
20597: PPUSH
20598: CALL 27999 0 2
20602: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20603: LD_EXP 119
20607: PUSH
20608: LD_VAR 0 5
20612: ARRAY
20613: PUSH
20614: LD_EXP 120
20618: LESS
20619: IFFALSE 20808
// begin for i := 1 to vehicles do
20621: LD_ADDR_VAR 0 4
20625: PUSH
20626: DOUBLE
20627: LD_INT 1
20629: DEC
20630: ST_TO_ADDR
20631: LD_VAR 0 2
20635: PUSH
20636: FOR_TO
20637: IFFALSE 20806
// begin if hackTanksCaptured [ index ] = hackLimit then
20639: LD_EXP 119
20643: PUSH
20644: LD_VAR 0 5
20648: ARRAY
20649: PUSH
20650: LD_EXP 120
20654: EQUAL
20655: IFFALSE 20659
// break ;
20657: GO 20806
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20659: LD_ADDR_EXP 122
20663: PUSH
20664: LD_EXP 122
20668: PPUSH
20669: LD_VAR 0 5
20673: PPUSH
20674: LD_EXP 122
20678: PUSH
20679: LD_VAR 0 5
20683: ARRAY
20684: PUSH
20685: LD_INT 1
20687: PLUS
20688: PPUSH
20689: CALL_OW 1
20693: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20694: LD_ADDR_EXP 119
20698: PUSH
20699: LD_EXP 119
20703: PPUSH
20704: LD_VAR 0 5
20708: PUSH
20709: LD_EXP 119
20713: PUSH
20714: LD_VAR 0 5
20718: ARRAY
20719: PUSH
20720: LD_INT 1
20722: PLUS
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PPUSH
20728: LD_VAR 0 2
20732: PUSH
20733: LD_VAR 0 4
20737: ARRAY
20738: PUSH
20739: LD_VAR 0 2
20743: PUSH
20744: LD_VAR 0 4
20748: ARRAY
20749: PPUSH
20750: CALL_OW 255
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL 28214 0 3
20763: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20764: LD_VAR 0 2
20768: PUSH
20769: LD_VAR 0 4
20773: ARRAY
20774: PPUSH
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 255
20784: PPUSH
20785: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20789: LD_VAR 0 2
20793: PUSH
20794: LD_VAR 0 4
20798: ARRAY
20799: PPUSH
20800: CALL_OW 141
// end ;
20804: GO 20636
20806: POP
20807: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20808: LD_VAR 0 1
20812: PPUSH
20813: LD_EXP 119
20817: PUSH
20818: LD_VAR 0 5
20822: ARRAY
20823: PUSH
20824: LD_INT 0
20826: PLUS
20827: PPUSH
20828: CALL_OW 505
// end ;
20832: LD_VAR 0 3
20836: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20837: LD_INT 0
20839: PPUSH
20840: PPUSH
20841: PPUSH
20842: PPUSH
// if not hack in hackTanks then
20843: LD_VAR 0 1
20847: PUSH
20848: LD_EXP 118
20852: IN
20853: NOT
20854: IFFALSE 20858
// exit ;
20856: GO 21098
// index := GetElementIndex ( hackTanks , hack ) ;
20858: LD_ADDR_VAR 0 4
20862: PUSH
20863: LD_EXP 118
20867: PPUSH
20868: LD_VAR 0 1
20872: PPUSH
20873: CALL 27999 0 2
20877: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20878: LD_ADDR_VAR 0 3
20882: PUSH
20883: DOUBLE
20884: LD_EXP 119
20888: PUSH
20889: LD_VAR 0 4
20893: ARRAY
20894: INC
20895: ST_TO_ADDR
20896: LD_INT 1
20898: PUSH
20899: FOR_DOWNTO
20900: IFFALSE 21072
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20902: LD_ADDR_VAR 0 5
20906: PUSH
20907: LD_EXP 119
20911: PUSH
20912: LD_VAR 0 4
20916: ARRAY
20917: PUSH
20918: LD_VAR 0 3
20922: ARRAY
20923: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20924: LD_VAR 0 5
20928: PUSH
20929: LD_INT 1
20931: ARRAY
20932: PPUSH
20933: CALL_OW 302
20937: NOT
20938: PUSH
20939: LD_VAR 0 5
20943: PUSH
20944: LD_INT 1
20946: ARRAY
20947: PPUSH
20948: CALL_OW 255
20952: PUSH
20953: LD_VAR 0 1
20957: PPUSH
20958: CALL_OW 255
20962: NONEQUAL
20963: OR
20964: IFFALSE 21070
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20966: LD_VAR 0 5
20970: PUSH
20971: LD_INT 1
20973: ARRAY
20974: PPUSH
20975: CALL_OW 305
20979: PUSH
20980: LD_VAR 0 5
20984: PUSH
20985: LD_INT 1
20987: ARRAY
20988: PPUSH
20989: CALL_OW 255
20993: PUSH
20994: LD_VAR 0 1
20998: PPUSH
20999: CALL_OW 255
21003: EQUAL
21004: AND
21005: IFFALSE 21029
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21007: LD_VAR 0 5
21011: PUSH
21012: LD_INT 1
21014: ARRAY
21015: PPUSH
21016: LD_VAR 0 5
21020: PUSH
21021: LD_INT 2
21023: ARRAY
21024: PPUSH
21025: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21029: LD_ADDR_EXP 119
21033: PUSH
21034: LD_EXP 119
21038: PPUSH
21039: LD_VAR 0 4
21043: PPUSH
21044: LD_EXP 119
21048: PUSH
21049: LD_VAR 0 4
21053: ARRAY
21054: PPUSH
21055: LD_VAR 0 3
21059: PPUSH
21060: CALL_OW 3
21064: PPUSH
21065: CALL_OW 1
21069: ST_TO_ADDR
// end ; end ;
21070: GO 20899
21072: POP
21073: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21074: LD_VAR 0 1
21078: PPUSH
21079: LD_EXP 119
21083: PUSH
21084: LD_VAR 0 4
21088: ARRAY
21089: PUSH
21090: LD_INT 0
21092: PLUS
21093: PPUSH
21094: CALL_OW 505
// end ;
21098: LD_VAR 0 2
21102: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21103: LD_INT 0
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
// if not hack in hackTanks then
21109: LD_VAR 0 1
21113: PUSH
21114: LD_EXP 118
21118: IN
21119: NOT
21120: IFFALSE 21124
// exit ;
21122: GO 21209
// index := GetElementIndex ( hackTanks , hack ) ;
21124: LD_ADDR_VAR 0 5
21128: PUSH
21129: LD_EXP 118
21133: PPUSH
21134: LD_VAR 0 1
21138: PPUSH
21139: CALL 27999 0 2
21143: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21144: LD_ADDR_VAR 0 4
21148: PUSH
21149: DOUBLE
21150: LD_INT 1
21152: DEC
21153: ST_TO_ADDR
21154: LD_EXP 119
21158: PUSH
21159: LD_VAR 0 5
21163: ARRAY
21164: PUSH
21165: FOR_TO
21166: IFFALSE 21207
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21168: LD_EXP 119
21172: PUSH
21173: LD_VAR 0 5
21177: ARRAY
21178: PUSH
21179: LD_VAR 0 4
21183: ARRAY
21184: PUSH
21185: LD_INT 1
21187: ARRAY
21188: PUSH
21189: LD_VAR 0 2
21193: EQUAL
21194: IFFALSE 21205
// KillUnit ( vehicle ) ;
21196: LD_VAR 0 2
21200: PPUSH
21201: CALL_OW 66
21205: GO 21165
21207: POP
21208: POP
// end ;
21209: LD_VAR 0 3
21213: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21214: LD_EXP 123
21218: NOT
21219: IFFALSE 21254
21221: GO 21223
21223: DISABLE
// begin initMiner := true ;
21224: LD_ADDR_EXP 123
21228: PUSH
21229: LD_INT 1
21231: ST_TO_ADDR
// minersList := [ ] ;
21232: LD_ADDR_EXP 124
21236: PUSH
21237: EMPTY
21238: ST_TO_ADDR
// minerMinesList := [ ] ;
21239: LD_ADDR_EXP 125
21243: PUSH
21244: EMPTY
21245: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21246: LD_ADDR_EXP 126
21250: PUSH
21251: LD_INT 5
21253: ST_TO_ADDR
// end ;
21254: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21255: LD_EXP 123
21259: PUSH
21260: LD_INT 34
21262: PUSH
21263: LD_EXP 46
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PPUSH
21272: CALL_OW 69
21276: AND
21277: IFFALSE 21740
21279: GO 21281
21281: DISABLE
21282: LD_INT 0
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
// begin enable ;
21288: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21289: LD_ADDR_VAR 0 1
21293: PUSH
21294: LD_INT 34
21296: PUSH
21297: LD_EXP 46
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PPUSH
21306: CALL_OW 69
21310: PUSH
21311: FOR_IN
21312: IFFALSE 21384
// begin if not i in minersList then
21314: LD_VAR 0 1
21318: PUSH
21319: LD_EXP 124
21323: IN
21324: NOT
21325: IFFALSE 21382
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21327: LD_ADDR_EXP 124
21331: PUSH
21332: LD_EXP 124
21336: PPUSH
21337: LD_EXP 124
21341: PUSH
21342: LD_INT 1
21344: PLUS
21345: PPUSH
21346: LD_VAR 0 1
21350: PPUSH
21351: CALL_OW 1
21355: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21356: LD_ADDR_EXP 125
21360: PUSH
21361: LD_EXP 125
21365: PPUSH
21366: LD_EXP 125
21370: PUSH
21371: LD_INT 1
21373: PLUS
21374: PPUSH
21375: EMPTY
21376: PPUSH
21377: CALL_OW 1
21381: ST_TO_ADDR
// end end ;
21382: GO 21311
21384: POP
21385: POP
// for i := minerMinesList downto 1 do
21386: LD_ADDR_VAR 0 1
21390: PUSH
21391: DOUBLE
21392: LD_EXP 125
21396: INC
21397: ST_TO_ADDR
21398: LD_INT 1
21400: PUSH
21401: FOR_DOWNTO
21402: IFFALSE 21738
// begin if IsLive ( minersList [ i ] ) then
21404: LD_EXP 124
21408: PUSH
21409: LD_VAR 0 1
21413: ARRAY
21414: PPUSH
21415: CALL_OW 300
21419: IFFALSE 21447
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21421: LD_EXP 124
21425: PUSH
21426: LD_VAR 0 1
21430: ARRAY
21431: PPUSH
21432: LD_EXP 125
21436: PUSH
21437: LD_VAR 0 1
21441: ARRAY
21442: PPUSH
21443: CALL_OW 505
// if not minerMinesList [ i ] then
21447: LD_EXP 125
21451: PUSH
21452: LD_VAR 0 1
21456: ARRAY
21457: NOT
21458: IFFALSE 21462
// continue ;
21460: GO 21401
// for j := minerMinesList [ i ] downto 1 do
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: DOUBLE
21468: LD_EXP 125
21472: PUSH
21473: LD_VAR 0 1
21477: ARRAY
21478: INC
21479: ST_TO_ADDR
21480: LD_INT 1
21482: PUSH
21483: FOR_DOWNTO
21484: IFFALSE 21734
// begin side := GetSide ( minersList [ i ] ) ;
21486: LD_ADDR_VAR 0 3
21490: PUSH
21491: LD_EXP 124
21495: PUSH
21496: LD_VAR 0 1
21500: ARRAY
21501: PPUSH
21502: CALL_OW 255
21506: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21507: LD_ADDR_VAR 0 4
21511: PUSH
21512: LD_EXP 125
21516: PUSH
21517: LD_VAR 0 1
21521: ARRAY
21522: PUSH
21523: LD_VAR 0 2
21527: ARRAY
21528: PUSH
21529: LD_INT 1
21531: ARRAY
21532: PPUSH
21533: LD_EXP 125
21537: PUSH
21538: LD_VAR 0 1
21542: ARRAY
21543: PUSH
21544: LD_VAR 0 2
21548: ARRAY
21549: PUSH
21550: LD_INT 2
21552: ARRAY
21553: PPUSH
21554: CALL_OW 428
21558: ST_TO_ADDR
// if not tmp then
21559: LD_VAR 0 4
21563: NOT
21564: IFFALSE 21568
// continue ;
21566: GO 21483
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21568: LD_VAR 0 4
21572: PUSH
21573: LD_INT 81
21575: PUSH
21576: LD_VAR 0 3
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PPUSH
21585: CALL_OW 69
21589: IN
21590: PUSH
21591: LD_EXP 125
21595: PUSH
21596: LD_VAR 0 1
21600: ARRAY
21601: PUSH
21602: LD_VAR 0 2
21606: ARRAY
21607: PUSH
21608: LD_INT 1
21610: ARRAY
21611: PPUSH
21612: LD_EXP 125
21616: PUSH
21617: LD_VAR 0 1
21621: ARRAY
21622: PUSH
21623: LD_VAR 0 2
21627: ARRAY
21628: PUSH
21629: LD_INT 2
21631: ARRAY
21632: PPUSH
21633: CALL_OW 458
21637: AND
21638: IFFALSE 21732
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21640: LD_EXP 125
21644: PUSH
21645: LD_VAR 0 1
21649: ARRAY
21650: PUSH
21651: LD_VAR 0 2
21655: ARRAY
21656: PUSH
21657: LD_INT 1
21659: ARRAY
21660: PPUSH
21661: LD_EXP 125
21665: PUSH
21666: LD_VAR 0 1
21670: ARRAY
21671: PUSH
21672: LD_VAR 0 2
21676: ARRAY
21677: PUSH
21678: LD_INT 2
21680: ARRAY
21681: PPUSH
21682: LD_VAR 0 3
21686: PPUSH
21687: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21691: LD_ADDR_EXP 125
21695: PUSH
21696: LD_EXP 125
21700: PPUSH
21701: LD_VAR 0 1
21705: PPUSH
21706: LD_EXP 125
21710: PUSH
21711: LD_VAR 0 1
21715: ARRAY
21716: PPUSH
21717: LD_VAR 0 2
21721: PPUSH
21722: CALL_OW 3
21726: PPUSH
21727: CALL_OW 1
21731: ST_TO_ADDR
// end ; end ;
21732: GO 21483
21734: POP
21735: POP
// end ;
21736: GO 21401
21738: POP
21739: POP
// end ;
21740: PPOPN 4
21742: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21743: LD_INT 0
21745: PPUSH
21746: PPUSH
// result := false ;
21747: LD_ADDR_VAR 0 4
21751: PUSH
21752: LD_INT 0
21754: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21755: LD_VAR 0 1
21759: PPUSH
21760: CALL_OW 264
21764: PUSH
21765: LD_EXP 46
21769: EQUAL
21770: NOT
21771: IFFALSE 21775
// exit ;
21773: GO 22015
// index := GetElementIndex ( minersList , unit ) ;
21775: LD_ADDR_VAR 0 5
21779: PUSH
21780: LD_EXP 124
21784: PPUSH
21785: LD_VAR 0 1
21789: PPUSH
21790: CALL 27999 0 2
21794: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21795: LD_EXP 125
21799: PUSH
21800: LD_VAR 0 5
21804: ARRAY
21805: PUSH
21806: LD_EXP 126
21810: GREATEREQUAL
21811: IFFALSE 21815
// exit ;
21813: GO 22015
// ComMoveXY ( unit , x , y ) ;
21815: LD_VAR 0 1
21819: PPUSH
21820: LD_VAR 0 2
21824: PPUSH
21825: LD_VAR 0 3
21829: PPUSH
21830: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21834: LD_INT 35
21836: PPUSH
21837: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_VAR 0 2
21850: PPUSH
21851: LD_VAR 0 3
21855: PPUSH
21856: CALL 58771 0 3
21860: NOT
21861: PUSH
21862: LD_VAR 0 1
21866: PPUSH
21867: CALL_OW 314
21871: AND
21872: IFFALSE 21876
// exit ;
21874: GO 22015
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21876: LD_VAR 0 2
21880: PPUSH
21881: LD_VAR 0 3
21885: PPUSH
21886: CALL_OW 428
21890: PUSH
21891: LD_VAR 0 1
21895: EQUAL
21896: PUSH
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL_OW 314
21906: NOT
21907: AND
21908: IFFALSE 21834
// PlaySoundXY ( x , y , PlantMine ) ;
21910: LD_VAR 0 2
21914: PPUSH
21915: LD_VAR 0 3
21919: PPUSH
21920: LD_STRING PlantMine
21922: PPUSH
21923: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21927: LD_VAR 0 2
21931: PPUSH
21932: LD_VAR 0 3
21936: PPUSH
21937: LD_VAR 0 1
21941: PPUSH
21942: CALL_OW 255
21946: PPUSH
21947: LD_INT 0
21949: PPUSH
21950: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21954: LD_ADDR_EXP 125
21958: PUSH
21959: LD_EXP 125
21963: PPUSH
21964: LD_VAR 0 5
21968: PUSH
21969: LD_EXP 125
21973: PUSH
21974: LD_VAR 0 5
21978: ARRAY
21979: PUSH
21980: LD_INT 1
21982: PLUS
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PPUSH
21988: LD_VAR 0 2
21992: PUSH
21993: LD_VAR 0 3
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PPUSH
22002: CALL 28214 0 3
22006: ST_TO_ADDR
// result := true ;
22007: LD_ADDR_VAR 0 4
22011: PUSH
22012: LD_INT 1
22014: ST_TO_ADDR
// end ;
22015: LD_VAR 0 4
22019: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
// if not unit in minersList then
22025: LD_VAR 0 1
22029: PUSH
22030: LD_EXP 124
22034: IN
22035: NOT
22036: IFFALSE 22040
// exit ;
22038: GO 22432
// index := GetElementIndex ( minersList , unit ) ;
22040: LD_ADDR_VAR 0 6
22044: PUSH
22045: LD_EXP 124
22049: PPUSH
22050: LD_VAR 0 1
22054: PPUSH
22055: CALL 27999 0 2
22059: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22060: LD_ADDR_VAR 0 5
22064: PUSH
22065: DOUBLE
22066: LD_EXP 125
22070: PUSH
22071: LD_VAR 0 6
22075: ARRAY
22076: INC
22077: ST_TO_ADDR
22078: LD_INT 1
22080: PUSH
22081: FOR_DOWNTO
22082: IFFALSE 22243
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22084: LD_EXP 125
22088: PUSH
22089: LD_VAR 0 6
22093: ARRAY
22094: PUSH
22095: LD_VAR 0 5
22099: ARRAY
22100: PUSH
22101: LD_INT 1
22103: ARRAY
22104: PUSH
22105: LD_VAR 0 2
22109: EQUAL
22110: PUSH
22111: LD_EXP 125
22115: PUSH
22116: LD_VAR 0 6
22120: ARRAY
22121: PUSH
22122: LD_VAR 0 5
22126: ARRAY
22127: PUSH
22128: LD_INT 2
22130: ARRAY
22131: PUSH
22132: LD_VAR 0 3
22136: EQUAL
22137: AND
22138: IFFALSE 22241
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22140: LD_EXP 125
22144: PUSH
22145: LD_VAR 0 6
22149: ARRAY
22150: PUSH
22151: LD_VAR 0 5
22155: ARRAY
22156: PUSH
22157: LD_INT 1
22159: ARRAY
22160: PPUSH
22161: LD_EXP 125
22165: PUSH
22166: LD_VAR 0 6
22170: ARRAY
22171: PUSH
22172: LD_VAR 0 5
22176: ARRAY
22177: PUSH
22178: LD_INT 2
22180: ARRAY
22181: PPUSH
22182: LD_VAR 0 1
22186: PPUSH
22187: CALL_OW 255
22191: PPUSH
22192: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22196: LD_ADDR_EXP 125
22200: PUSH
22201: LD_EXP 125
22205: PPUSH
22206: LD_VAR 0 6
22210: PPUSH
22211: LD_EXP 125
22215: PUSH
22216: LD_VAR 0 6
22220: ARRAY
22221: PPUSH
22222: LD_VAR 0 5
22226: PPUSH
22227: CALL_OW 3
22231: PPUSH
22232: CALL_OW 1
22236: ST_TO_ADDR
// exit ;
22237: POP
22238: POP
22239: GO 22432
// end ; end ;
22241: GO 22081
22243: POP
22244: POP
// for i := minerMinesList [ index ] downto 1 do
22245: LD_ADDR_VAR 0 5
22249: PUSH
22250: DOUBLE
22251: LD_EXP 125
22255: PUSH
22256: LD_VAR 0 6
22260: ARRAY
22261: INC
22262: ST_TO_ADDR
22263: LD_INT 1
22265: PUSH
22266: FOR_DOWNTO
22267: IFFALSE 22430
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22269: LD_EXP 125
22273: PUSH
22274: LD_VAR 0 6
22278: ARRAY
22279: PUSH
22280: LD_VAR 0 5
22284: ARRAY
22285: PUSH
22286: LD_INT 1
22288: ARRAY
22289: PPUSH
22290: LD_EXP 125
22294: PUSH
22295: LD_VAR 0 6
22299: ARRAY
22300: PUSH
22301: LD_VAR 0 5
22305: ARRAY
22306: PUSH
22307: LD_INT 2
22309: ARRAY
22310: PPUSH
22311: LD_VAR 0 2
22315: PPUSH
22316: LD_VAR 0 3
22320: PPUSH
22321: CALL_OW 298
22325: PUSH
22326: LD_INT 6
22328: LESS
22329: IFFALSE 22428
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22331: LD_EXP 125
22335: PUSH
22336: LD_VAR 0 6
22340: ARRAY
22341: PUSH
22342: LD_VAR 0 5
22346: ARRAY
22347: PUSH
22348: LD_INT 1
22350: ARRAY
22351: PPUSH
22352: LD_EXP 125
22356: PUSH
22357: LD_VAR 0 6
22361: ARRAY
22362: PUSH
22363: LD_VAR 0 5
22367: ARRAY
22368: PUSH
22369: LD_INT 2
22371: ARRAY
22372: PPUSH
22373: LD_VAR 0 1
22377: PPUSH
22378: CALL_OW 255
22382: PPUSH
22383: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22387: LD_ADDR_EXP 125
22391: PUSH
22392: LD_EXP 125
22396: PPUSH
22397: LD_VAR 0 6
22401: PPUSH
22402: LD_EXP 125
22406: PUSH
22407: LD_VAR 0 6
22411: ARRAY
22412: PPUSH
22413: LD_VAR 0 5
22417: PPUSH
22418: CALL_OW 3
22422: PPUSH
22423: CALL_OW 1
22427: ST_TO_ADDR
// end ; end ;
22428: GO 22266
22430: POP
22431: POP
// end ;
22432: LD_VAR 0 4
22436: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22437: LD_INT 0
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
22444: PPUSH
22445: PPUSH
22446: PPUSH
22447: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL_OW 264
22457: PUSH
22458: LD_EXP 46
22462: EQUAL
22463: NOT
22464: PUSH
22465: LD_VAR 0 1
22469: PUSH
22470: LD_EXP 124
22474: IN
22475: NOT
22476: OR
22477: IFFALSE 22481
// exit ;
22479: GO 22803
// index := GetElementIndex ( minersList , unit ) ;
22481: LD_ADDR_VAR 0 6
22485: PUSH
22486: LD_EXP 124
22490: PPUSH
22491: LD_VAR 0 1
22495: PPUSH
22496: CALL 27999 0 2
22500: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22501: LD_ADDR_VAR 0 8
22505: PUSH
22506: LD_EXP 126
22510: PUSH
22511: LD_EXP 125
22515: PUSH
22516: LD_VAR 0 6
22520: ARRAY
22521: MINUS
22522: ST_TO_ADDR
// if not minesFreeAmount then
22523: LD_VAR 0 8
22527: NOT
22528: IFFALSE 22532
// exit ;
22530: GO 22803
// tmp := [ ] ;
22532: LD_ADDR_VAR 0 7
22536: PUSH
22537: EMPTY
22538: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22539: LD_ADDR_VAR 0 5
22543: PUSH
22544: DOUBLE
22545: LD_INT 1
22547: DEC
22548: ST_TO_ADDR
22549: LD_VAR 0 8
22553: PUSH
22554: FOR_TO
22555: IFFALSE 22750
// begin _d := rand ( 0 , 5 ) ;
22557: LD_ADDR_VAR 0 11
22561: PUSH
22562: LD_INT 0
22564: PPUSH
22565: LD_INT 5
22567: PPUSH
22568: CALL_OW 12
22572: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22573: LD_ADDR_VAR 0 12
22577: PUSH
22578: LD_INT 2
22580: PPUSH
22581: LD_INT 6
22583: PPUSH
22584: CALL_OW 12
22588: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22589: LD_ADDR_VAR 0 9
22593: PUSH
22594: LD_VAR 0 2
22598: PPUSH
22599: LD_VAR 0 11
22603: PPUSH
22604: LD_VAR 0 12
22608: PPUSH
22609: CALL_OW 272
22613: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22614: LD_ADDR_VAR 0 10
22618: PUSH
22619: LD_VAR 0 3
22623: PPUSH
22624: LD_VAR 0 11
22628: PPUSH
22629: LD_VAR 0 12
22633: PPUSH
22634: CALL_OW 273
22638: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22639: LD_VAR 0 9
22643: PPUSH
22644: LD_VAR 0 10
22648: PPUSH
22649: CALL_OW 488
22653: PUSH
22654: LD_VAR 0 9
22658: PUSH
22659: LD_VAR 0 10
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_VAR 0 7
22672: IN
22673: NOT
22674: AND
22675: PUSH
22676: LD_VAR 0 9
22680: PPUSH
22681: LD_VAR 0 10
22685: PPUSH
22686: CALL_OW 458
22690: NOT
22691: AND
22692: IFFALSE 22734
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22694: LD_ADDR_VAR 0 7
22698: PUSH
22699: LD_VAR 0 7
22703: PPUSH
22704: LD_VAR 0 7
22708: PUSH
22709: LD_INT 1
22711: PLUS
22712: PPUSH
22713: LD_VAR 0 9
22717: PUSH
22718: LD_VAR 0 10
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PPUSH
22727: CALL_OW 1
22731: ST_TO_ADDR
22732: GO 22748
// i := i - 1 ;
22734: LD_ADDR_VAR 0 5
22738: PUSH
22739: LD_VAR 0 5
22743: PUSH
22744: LD_INT 1
22746: MINUS
22747: ST_TO_ADDR
// end ;
22748: GO 22554
22750: POP
22751: POP
// for i in tmp do
22752: LD_ADDR_VAR 0 5
22756: PUSH
22757: LD_VAR 0 7
22761: PUSH
22762: FOR_IN
22763: IFFALSE 22801
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22765: LD_VAR 0 1
22769: PPUSH
22770: LD_VAR 0 5
22774: PUSH
22775: LD_INT 1
22777: ARRAY
22778: PPUSH
22779: LD_VAR 0 5
22783: PUSH
22784: LD_INT 2
22786: ARRAY
22787: PPUSH
22788: CALL 21743 0 3
22792: NOT
22793: IFFALSE 22799
// exit ;
22795: POP
22796: POP
22797: GO 22803
22799: GO 22762
22801: POP
22802: POP
// end ;
22803: LD_VAR 0 4
22807: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
22812: PPUSH
22813: PPUSH
22814: PPUSH
22815: PPUSH
22816: PPUSH
// if not GetClass ( unit ) = class_sniper then
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 257
22826: PUSH
22827: LD_INT 5
22829: EQUAL
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 23223
// dist := 8 ;
22835: LD_ADDR_VAR 0 5
22839: PUSH
22840: LD_INT 8
22842: ST_TO_ADDR
// viewRange := 12 ;
22843: LD_ADDR_VAR 0 7
22847: PUSH
22848: LD_INT 12
22850: ST_TO_ADDR
// side := GetSide ( unit ) ;
22851: LD_ADDR_VAR 0 6
22855: PUSH
22856: LD_VAR 0 1
22860: PPUSH
22861: CALL_OW 255
22865: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22866: LD_INT 61
22868: PPUSH
22869: LD_VAR 0 6
22873: PPUSH
22874: CALL_OW 321
22878: PUSH
22879: LD_INT 2
22881: EQUAL
22882: IFFALSE 22892
// viewRange := 16 ;
22884: LD_ADDR_VAR 0 7
22888: PUSH
22889: LD_INT 16
22891: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22892: LD_VAR 0 1
22896: PPUSH
22897: LD_VAR 0 2
22901: PPUSH
22902: LD_VAR 0 3
22906: PPUSH
22907: CALL_OW 297
22911: PUSH
22912: LD_VAR 0 5
22916: GREATER
22917: IFFALSE 22996
// begin ComMoveXY ( unit , x , y ) ;
22919: LD_VAR 0 1
22923: PPUSH
22924: LD_VAR 0 2
22928: PPUSH
22929: LD_VAR 0 3
22933: PPUSH
22934: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22938: LD_INT 35
22940: PPUSH
22941: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22945: LD_VAR 0 1
22949: PPUSH
22950: LD_VAR 0 2
22954: PPUSH
22955: LD_VAR 0 3
22959: PPUSH
22960: CALL 58771 0 3
22964: NOT
22965: IFFALSE 22969
// exit ;
22967: GO 23223
// until GetDistUnitXY ( unit , x , y ) < dist ;
22969: LD_VAR 0 1
22973: PPUSH
22974: LD_VAR 0 2
22978: PPUSH
22979: LD_VAR 0 3
22983: PPUSH
22984: CALL_OW 297
22988: PUSH
22989: LD_VAR 0 5
22993: LESS
22994: IFFALSE 22938
// end ; ComTurnXY ( unit , x , y ) ;
22996: LD_VAR 0 1
23000: PPUSH
23001: LD_VAR 0 2
23005: PPUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: CALL_OW 118
// wait ( 5 ) ;
23015: LD_INT 5
23017: PPUSH
23018: CALL_OW 67
// _d := GetDir ( unit ) ;
23022: LD_ADDR_VAR 0 10
23026: PUSH
23027: LD_VAR 0 1
23031: PPUSH
23032: CALL_OW 254
23036: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23037: LD_ADDR_VAR 0 8
23041: PUSH
23042: LD_VAR 0 1
23046: PPUSH
23047: CALL_OW 250
23051: PPUSH
23052: LD_VAR 0 10
23056: PPUSH
23057: LD_VAR 0 5
23061: PPUSH
23062: CALL_OW 272
23066: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23067: LD_ADDR_VAR 0 9
23071: PUSH
23072: LD_VAR 0 1
23076: PPUSH
23077: CALL_OW 251
23081: PPUSH
23082: LD_VAR 0 10
23086: PPUSH
23087: LD_VAR 0 5
23091: PPUSH
23092: CALL_OW 273
23096: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23097: LD_VAR 0 8
23101: PPUSH
23102: LD_VAR 0 9
23106: PPUSH
23107: CALL_OW 488
23111: NOT
23112: IFFALSE 23116
// exit ;
23114: GO 23223
// ComAnimCustom ( unit , 1 ) ;
23116: LD_VAR 0 1
23120: PPUSH
23121: LD_INT 1
23123: PPUSH
23124: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23128: LD_VAR 0 8
23132: PPUSH
23133: LD_VAR 0 9
23137: PPUSH
23138: LD_VAR 0 6
23142: PPUSH
23143: LD_VAR 0 7
23147: PPUSH
23148: CALL_OW 330
// repeat wait ( 1 ) ;
23152: LD_INT 1
23154: PPUSH
23155: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23159: LD_VAR 0 1
23163: PPUSH
23164: CALL_OW 316
23168: PUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL_OW 314
23178: OR
23179: PUSH
23180: LD_VAR 0 1
23184: PPUSH
23185: CALL_OW 302
23189: NOT
23190: OR
23191: PUSH
23192: LD_VAR 0 1
23196: PPUSH
23197: CALL_OW 301
23201: OR
23202: IFFALSE 23152
// RemoveSeeing ( _x , _y , side ) ;
23204: LD_VAR 0 8
23208: PPUSH
23209: LD_VAR 0 9
23213: PPUSH
23214: LD_VAR 0 6
23218: PPUSH
23219: CALL_OW 331
// end ; end_of_file
23223: LD_VAR 0 4
23227: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23228: LD_INT 0
23230: PPUSH
23231: PPUSH
// if exist_mode then
23232: LD_VAR 0 2
23236: IFFALSE 23261
// unit := CreateCharacter ( prefix & ident ) else
23238: LD_ADDR_VAR 0 5
23242: PUSH
23243: LD_VAR 0 3
23247: PUSH
23248: LD_VAR 0 1
23252: STR
23253: PPUSH
23254: CALL_OW 34
23258: ST_TO_ADDR
23259: GO 23276
// unit := NewCharacter ( ident ) ;
23261: LD_ADDR_VAR 0 5
23265: PUSH
23266: LD_VAR 0 1
23270: PPUSH
23271: CALL_OW 25
23275: ST_TO_ADDR
// result := unit ;
23276: LD_ADDR_VAR 0 4
23280: PUSH
23281: LD_VAR 0 5
23285: ST_TO_ADDR
// end ;
23286: LD_VAR 0 4
23290: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23291: LD_INT 0
23293: PPUSH
23294: PPUSH
// if not side or not nation then
23295: LD_VAR 0 1
23299: NOT
23300: PUSH
23301: LD_VAR 0 2
23305: NOT
23306: OR
23307: IFFALSE 23311
// exit ;
23309: GO 24079
// case nation of nation_american :
23311: LD_VAR 0 2
23315: PUSH
23316: LD_INT 1
23318: DOUBLE
23319: EQUAL
23320: IFTRUE 23324
23322: GO 23538
23324: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23325: LD_ADDR_VAR 0 4
23329: PUSH
23330: LD_INT 35
23332: PUSH
23333: LD_INT 45
23335: PUSH
23336: LD_INT 46
23338: PUSH
23339: LD_INT 47
23341: PUSH
23342: LD_INT 82
23344: PUSH
23345: LD_INT 83
23347: PUSH
23348: LD_INT 84
23350: PUSH
23351: LD_INT 85
23353: PUSH
23354: LD_INT 86
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: LD_INT 2
23362: PUSH
23363: LD_INT 6
23365: PUSH
23366: LD_INT 15
23368: PUSH
23369: LD_INT 16
23371: PUSH
23372: LD_INT 7
23374: PUSH
23375: LD_INT 12
23377: PUSH
23378: LD_INT 13
23380: PUSH
23381: LD_INT 10
23383: PUSH
23384: LD_INT 14
23386: PUSH
23387: LD_INT 20
23389: PUSH
23390: LD_INT 21
23392: PUSH
23393: LD_INT 22
23395: PUSH
23396: LD_INT 25
23398: PUSH
23399: LD_INT 32
23401: PUSH
23402: LD_INT 27
23404: PUSH
23405: LD_INT 36
23407: PUSH
23408: LD_INT 69
23410: PUSH
23411: LD_INT 39
23413: PUSH
23414: LD_INT 34
23416: PUSH
23417: LD_INT 40
23419: PUSH
23420: LD_INT 48
23422: PUSH
23423: LD_INT 49
23425: PUSH
23426: LD_INT 50
23428: PUSH
23429: LD_INT 51
23431: PUSH
23432: LD_INT 52
23434: PUSH
23435: LD_INT 53
23437: PUSH
23438: LD_INT 54
23440: PUSH
23441: LD_INT 55
23443: PUSH
23444: LD_INT 56
23446: PUSH
23447: LD_INT 57
23449: PUSH
23450: LD_INT 58
23452: PUSH
23453: LD_INT 59
23455: PUSH
23456: LD_INT 60
23458: PUSH
23459: LD_INT 61
23461: PUSH
23462: LD_INT 62
23464: PUSH
23465: LD_INT 80
23467: PUSH
23468: LD_INT 82
23470: PUSH
23471: LD_INT 83
23473: PUSH
23474: LD_INT 84
23476: PUSH
23477: LD_INT 85
23479: PUSH
23480: LD_INT 86
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: ST_TO_ADDR
23536: GO 24003
23538: LD_INT 2
23540: DOUBLE
23541: EQUAL
23542: IFTRUE 23546
23544: GO 23772
23546: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23547: LD_ADDR_VAR 0 4
23551: PUSH
23552: LD_INT 35
23554: PUSH
23555: LD_INT 45
23557: PUSH
23558: LD_INT 46
23560: PUSH
23561: LD_INT 47
23563: PUSH
23564: LD_INT 82
23566: PUSH
23567: LD_INT 83
23569: PUSH
23570: LD_INT 84
23572: PUSH
23573: LD_INT 85
23575: PUSH
23576: LD_INT 87
23578: PUSH
23579: LD_INT 70
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: LD_INT 11
23587: PUSH
23588: LD_INT 3
23590: PUSH
23591: LD_INT 4
23593: PUSH
23594: LD_INT 5
23596: PUSH
23597: LD_INT 6
23599: PUSH
23600: LD_INT 15
23602: PUSH
23603: LD_INT 18
23605: PUSH
23606: LD_INT 7
23608: PUSH
23609: LD_INT 17
23611: PUSH
23612: LD_INT 8
23614: PUSH
23615: LD_INT 20
23617: PUSH
23618: LD_INT 21
23620: PUSH
23621: LD_INT 22
23623: PUSH
23624: LD_INT 72
23626: PUSH
23627: LD_INT 26
23629: PUSH
23630: LD_INT 69
23632: PUSH
23633: LD_INT 39
23635: PUSH
23636: LD_INT 40
23638: PUSH
23639: LD_INT 41
23641: PUSH
23642: LD_INT 42
23644: PUSH
23645: LD_INT 43
23647: PUSH
23648: LD_INT 48
23650: PUSH
23651: LD_INT 49
23653: PUSH
23654: LD_INT 50
23656: PUSH
23657: LD_INT 51
23659: PUSH
23660: LD_INT 52
23662: PUSH
23663: LD_INT 53
23665: PUSH
23666: LD_INT 54
23668: PUSH
23669: LD_INT 55
23671: PUSH
23672: LD_INT 56
23674: PUSH
23675: LD_INT 60
23677: PUSH
23678: LD_INT 61
23680: PUSH
23681: LD_INT 62
23683: PUSH
23684: LD_INT 66
23686: PUSH
23687: LD_INT 67
23689: PUSH
23690: LD_INT 68
23692: PUSH
23693: LD_INT 81
23695: PUSH
23696: LD_INT 82
23698: PUSH
23699: LD_INT 83
23701: PUSH
23702: LD_INT 84
23704: PUSH
23705: LD_INT 85
23707: PUSH
23708: LD_INT 87
23710: PUSH
23711: LD_INT 88
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: ST_TO_ADDR
23770: GO 24003
23772: LD_INT 3
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 24002
23780: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23781: LD_ADDR_VAR 0 4
23785: PUSH
23786: LD_INT 46
23788: PUSH
23789: LD_INT 47
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: LD_INT 82
23800: PUSH
23801: LD_INT 83
23803: PUSH
23804: LD_INT 84
23806: PUSH
23807: LD_INT 85
23809: PUSH
23810: LD_INT 86
23812: PUSH
23813: LD_INT 11
23815: PUSH
23816: LD_INT 9
23818: PUSH
23819: LD_INT 20
23821: PUSH
23822: LD_INT 19
23824: PUSH
23825: LD_INT 21
23827: PUSH
23828: LD_INT 24
23830: PUSH
23831: LD_INT 22
23833: PUSH
23834: LD_INT 25
23836: PUSH
23837: LD_INT 28
23839: PUSH
23840: LD_INT 29
23842: PUSH
23843: LD_INT 30
23845: PUSH
23846: LD_INT 31
23848: PUSH
23849: LD_INT 37
23851: PUSH
23852: LD_INT 38
23854: PUSH
23855: LD_INT 32
23857: PUSH
23858: LD_INT 27
23860: PUSH
23861: LD_INT 33
23863: PUSH
23864: LD_INT 69
23866: PUSH
23867: LD_INT 39
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 40
23875: PUSH
23876: LD_INT 71
23878: PUSH
23879: LD_INT 23
23881: PUSH
23882: LD_INT 44
23884: PUSH
23885: LD_INT 48
23887: PUSH
23888: LD_INT 49
23890: PUSH
23891: LD_INT 50
23893: PUSH
23894: LD_INT 51
23896: PUSH
23897: LD_INT 52
23899: PUSH
23900: LD_INT 53
23902: PUSH
23903: LD_INT 54
23905: PUSH
23906: LD_INT 55
23908: PUSH
23909: LD_INT 56
23911: PUSH
23912: LD_INT 57
23914: PUSH
23915: LD_INT 58
23917: PUSH
23918: LD_INT 59
23920: PUSH
23921: LD_INT 63
23923: PUSH
23924: LD_INT 64
23926: PUSH
23927: LD_INT 65
23929: PUSH
23930: LD_INT 82
23932: PUSH
23933: LD_INT 83
23935: PUSH
23936: LD_INT 84
23938: PUSH
23939: LD_INT 85
23941: PUSH
23942: LD_INT 86
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: ST_TO_ADDR
24000: GO 24003
24002: POP
// if state > - 1 and state < 3 then
24003: LD_VAR 0 3
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: GREATER
24012: PUSH
24013: LD_VAR 0 3
24017: PUSH
24018: LD_INT 3
24020: LESS
24021: AND
24022: IFFALSE 24079
// for i in result do
24024: LD_ADDR_VAR 0 5
24028: PUSH
24029: LD_VAR 0 4
24033: PUSH
24034: FOR_IN
24035: IFFALSE 24077
// if GetTech ( i , side ) <> state then
24037: LD_VAR 0 5
24041: PPUSH
24042: LD_VAR 0 1
24046: PPUSH
24047: CALL_OW 321
24051: PUSH
24052: LD_VAR 0 3
24056: NONEQUAL
24057: IFFALSE 24075
// result := result diff i ;
24059: LD_ADDR_VAR 0 4
24063: PUSH
24064: LD_VAR 0 4
24068: PUSH
24069: LD_VAR 0 5
24073: DIFF
24074: ST_TO_ADDR
24075: GO 24034
24077: POP
24078: POP
// end ;
24079: LD_VAR 0 4
24083: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24084: LD_INT 0
24086: PPUSH
24087: PPUSH
24088: PPUSH
// result := true ;
24089: LD_ADDR_VAR 0 3
24093: PUSH
24094: LD_INT 1
24096: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24097: LD_ADDR_VAR 0 5
24101: PUSH
24102: LD_VAR 0 2
24106: PPUSH
24107: CALL_OW 480
24111: ST_TO_ADDR
// if not tmp then
24112: LD_VAR 0 5
24116: NOT
24117: IFFALSE 24121
// exit ;
24119: GO 24170
// for i in tmp do
24121: LD_ADDR_VAR 0 4
24125: PUSH
24126: LD_VAR 0 5
24130: PUSH
24131: FOR_IN
24132: IFFALSE 24168
// if GetTech ( i , side ) <> state_researched then
24134: LD_VAR 0 4
24138: PPUSH
24139: LD_VAR 0 1
24143: PPUSH
24144: CALL_OW 321
24148: PUSH
24149: LD_INT 2
24151: NONEQUAL
24152: IFFALSE 24166
// begin result := false ;
24154: LD_ADDR_VAR 0 3
24158: PUSH
24159: LD_INT 0
24161: ST_TO_ADDR
// exit ;
24162: POP
24163: POP
24164: GO 24170
// end ;
24166: GO 24131
24168: POP
24169: POP
// end ;
24170: LD_VAR 0 3
24174: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24175: LD_INT 0
24177: PPUSH
24178: PPUSH
24179: PPUSH
24180: PPUSH
24181: PPUSH
24182: PPUSH
24183: PPUSH
24184: PPUSH
24185: PPUSH
24186: PPUSH
24187: PPUSH
24188: PPUSH
24189: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24190: LD_VAR 0 1
24194: NOT
24195: PUSH
24196: LD_VAR 0 1
24200: PPUSH
24201: CALL_OW 257
24205: PUSH
24206: LD_INT 9
24208: NONEQUAL
24209: OR
24210: IFFALSE 24214
// exit ;
24212: GO 24787
// side := GetSide ( unit ) ;
24214: LD_ADDR_VAR 0 9
24218: PUSH
24219: LD_VAR 0 1
24223: PPUSH
24224: CALL_OW 255
24228: ST_TO_ADDR
// tech_space := tech_spacanom ;
24229: LD_ADDR_VAR 0 12
24233: PUSH
24234: LD_INT 29
24236: ST_TO_ADDR
// tech_time := tech_taurad ;
24237: LD_ADDR_VAR 0 13
24241: PUSH
24242: LD_INT 28
24244: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24245: LD_ADDR_VAR 0 11
24249: PUSH
24250: LD_VAR 0 1
24254: PPUSH
24255: CALL_OW 310
24259: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24260: LD_VAR 0 11
24264: PPUSH
24265: CALL_OW 247
24269: PUSH
24270: LD_INT 2
24272: EQUAL
24273: IFFALSE 24277
// exit ;
24275: GO 24787
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24277: LD_ADDR_VAR 0 8
24281: PUSH
24282: LD_INT 81
24284: PUSH
24285: LD_VAR 0 9
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: LD_INT 21
24299: PUSH
24300: LD_INT 3
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PPUSH
24315: CALL_OW 69
24319: ST_TO_ADDR
// if not tmp then
24320: LD_VAR 0 8
24324: NOT
24325: IFFALSE 24329
// exit ;
24327: GO 24787
// if in_unit then
24329: LD_VAR 0 11
24333: IFFALSE 24357
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24335: LD_ADDR_VAR 0 10
24339: PUSH
24340: LD_VAR 0 8
24344: PPUSH
24345: LD_VAR 0 11
24349: PPUSH
24350: CALL_OW 74
24354: ST_TO_ADDR
24355: GO 24377
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24357: LD_ADDR_VAR 0 10
24361: PUSH
24362: LD_VAR 0 8
24366: PPUSH
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 74
24376: ST_TO_ADDR
// if not enemy then
24377: LD_VAR 0 10
24381: NOT
24382: IFFALSE 24386
// exit ;
24384: GO 24787
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24386: LD_VAR 0 11
24390: PUSH
24391: LD_VAR 0 11
24395: PPUSH
24396: LD_VAR 0 10
24400: PPUSH
24401: CALL_OW 296
24405: PUSH
24406: LD_INT 13
24408: GREATER
24409: AND
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: LD_VAR 0 10
24420: PPUSH
24421: CALL_OW 296
24425: PUSH
24426: LD_INT 12
24428: GREATER
24429: OR
24430: IFFALSE 24434
// exit ;
24432: GO 24787
// missile := [ 1 ] ;
24434: LD_ADDR_VAR 0 14
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24445: LD_VAR 0 9
24449: PPUSH
24450: LD_VAR 0 12
24454: PPUSH
24455: CALL_OW 325
24459: IFFALSE 24488
// missile := Insert ( missile , missile + 1 , 2 ) ;
24461: LD_ADDR_VAR 0 14
24465: PUSH
24466: LD_VAR 0 14
24470: PPUSH
24471: LD_VAR 0 14
24475: PUSH
24476: LD_INT 1
24478: PLUS
24479: PPUSH
24480: LD_INT 2
24482: PPUSH
24483: CALL_OW 2
24487: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24488: LD_VAR 0 9
24492: PPUSH
24493: LD_VAR 0 13
24497: PPUSH
24498: CALL_OW 325
24502: PUSH
24503: LD_VAR 0 10
24507: PPUSH
24508: CALL_OW 255
24512: PPUSH
24513: LD_VAR 0 13
24517: PPUSH
24518: CALL_OW 325
24522: NOT
24523: AND
24524: IFFALSE 24553
// missile := Insert ( missile , missile + 1 , 3 ) ;
24526: LD_ADDR_VAR 0 14
24530: PUSH
24531: LD_VAR 0 14
24535: PPUSH
24536: LD_VAR 0 14
24540: PUSH
24541: LD_INT 1
24543: PLUS
24544: PPUSH
24545: LD_INT 3
24547: PPUSH
24548: CALL_OW 2
24552: ST_TO_ADDR
// if missile < 2 then
24553: LD_VAR 0 14
24557: PUSH
24558: LD_INT 2
24560: LESS
24561: IFFALSE 24565
// exit ;
24563: GO 24787
// x := GetX ( enemy ) ;
24565: LD_ADDR_VAR 0 4
24569: PUSH
24570: LD_VAR 0 10
24574: PPUSH
24575: CALL_OW 250
24579: ST_TO_ADDR
// y := GetY ( enemy ) ;
24580: LD_ADDR_VAR 0 5
24584: PUSH
24585: LD_VAR 0 10
24589: PPUSH
24590: CALL_OW 251
24594: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24595: LD_ADDR_VAR 0 6
24599: PUSH
24600: LD_VAR 0 4
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PPUSH
24609: LD_INT 1
24611: PPUSH
24612: CALL_OW 12
24616: PLUS
24617: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24618: LD_ADDR_VAR 0 7
24622: PUSH
24623: LD_VAR 0 5
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PPUSH
24632: LD_INT 1
24634: PPUSH
24635: CALL_OW 12
24639: PLUS
24640: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24641: LD_VAR 0 6
24645: PPUSH
24646: LD_VAR 0 7
24650: PPUSH
24651: CALL_OW 488
24655: NOT
24656: IFFALSE 24678
// begin _x := x ;
24658: LD_ADDR_VAR 0 6
24662: PUSH
24663: LD_VAR 0 4
24667: ST_TO_ADDR
// _y := y ;
24668: LD_ADDR_VAR 0 7
24672: PUSH
24673: LD_VAR 0 5
24677: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24678: LD_ADDR_VAR 0 3
24682: PUSH
24683: LD_INT 1
24685: PPUSH
24686: LD_VAR 0 14
24690: PPUSH
24691: CALL_OW 12
24695: ST_TO_ADDR
// case i of 1 :
24696: LD_VAR 0 3
24700: PUSH
24701: LD_INT 1
24703: DOUBLE
24704: EQUAL
24705: IFTRUE 24709
24707: GO 24726
24709: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24710: LD_VAR 0 1
24714: PPUSH
24715: LD_VAR 0 10
24719: PPUSH
24720: CALL_OW 115
24724: GO 24787
24726: LD_INT 2
24728: DOUBLE
24729: EQUAL
24730: IFTRUE 24734
24732: GO 24756
24734: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24735: LD_VAR 0 1
24739: PPUSH
24740: LD_VAR 0 6
24744: PPUSH
24745: LD_VAR 0 7
24749: PPUSH
24750: CALL_OW 153
24754: GO 24787
24756: LD_INT 3
24758: DOUBLE
24759: EQUAL
24760: IFTRUE 24764
24762: GO 24786
24764: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24765: LD_VAR 0 1
24769: PPUSH
24770: LD_VAR 0 6
24774: PPUSH
24775: LD_VAR 0 7
24779: PPUSH
24780: CALL_OW 154
24784: GO 24787
24786: POP
// end ;
24787: LD_VAR 0 2
24791: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24792: LD_INT 0
24794: PPUSH
24795: PPUSH
24796: PPUSH
24797: PPUSH
24798: PPUSH
24799: PPUSH
// if not unit or not building then
24800: LD_VAR 0 1
24804: NOT
24805: PUSH
24806: LD_VAR 0 2
24810: NOT
24811: OR
24812: IFFALSE 24816
// exit ;
24814: GO 24974
// x := GetX ( building ) ;
24816: LD_ADDR_VAR 0 5
24820: PUSH
24821: LD_VAR 0 2
24825: PPUSH
24826: CALL_OW 250
24830: ST_TO_ADDR
// y := GetY ( building ) ;
24831: LD_ADDR_VAR 0 6
24835: PUSH
24836: LD_VAR 0 2
24840: PPUSH
24841: CALL_OW 251
24845: ST_TO_ADDR
// for i = 0 to 5 do
24846: LD_ADDR_VAR 0 4
24850: PUSH
24851: DOUBLE
24852: LD_INT 0
24854: DEC
24855: ST_TO_ADDR
24856: LD_INT 5
24858: PUSH
24859: FOR_TO
24860: IFFALSE 24972
// begin _x := ShiftX ( x , i , 3 ) ;
24862: LD_ADDR_VAR 0 7
24866: PUSH
24867: LD_VAR 0 5
24871: PPUSH
24872: LD_VAR 0 4
24876: PPUSH
24877: LD_INT 3
24879: PPUSH
24880: CALL_OW 272
24884: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24885: LD_ADDR_VAR 0 8
24889: PUSH
24890: LD_VAR 0 6
24894: PPUSH
24895: LD_VAR 0 4
24899: PPUSH
24900: LD_INT 3
24902: PPUSH
24903: CALL_OW 273
24907: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24908: LD_VAR 0 7
24912: PPUSH
24913: LD_VAR 0 8
24917: PPUSH
24918: CALL_OW 488
24922: NOT
24923: IFFALSE 24927
// continue ;
24925: GO 24859
// if HexInfo ( _x , _y ) = 0 then
24927: LD_VAR 0 7
24931: PPUSH
24932: LD_VAR 0 8
24936: PPUSH
24937: CALL_OW 428
24941: PUSH
24942: LD_INT 0
24944: EQUAL
24945: IFFALSE 24970
// begin ComMoveXY ( unit , _x , _y ) ;
24947: LD_VAR 0 1
24951: PPUSH
24952: LD_VAR 0 7
24956: PPUSH
24957: LD_VAR 0 8
24961: PPUSH
24962: CALL_OW 111
// exit ;
24966: POP
24967: POP
24968: GO 24974
// end ; end ;
24970: GO 24859
24972: POP
24973: POP
// end ;
24974: LD_VAR 0 3
24978: RET
// export function ScanBase ( side , base_area ) ; begin
24979: LD_INT 0
24981: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: LD_VAR 0 2
24991: PPUSH
24992: LD_INT 81
24994: PUSH
24995: LD_VAR 0 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PPUSH
25004: CALL_OW 70
25008: ST_TO_ADDR
// end ;
25009: LD_VAR 0 3
25013: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25014: LD_INT 0
25016: PPUSH
25017: PPUSH
25018: PPUSH
25019: PPUSH
// result := false ;
25020: LD_ADDR_VAR 0 2
25024: PUSH
25025: LD_INT 0
25027: ST_TO_ADDR
// side := GetSide ( unit ) ;
25028: LD_ADDR_VAR 0 3
25032: PUSH
25033: LD_VAR 0 1
25037: PPUSH
25038: CALL_OW 255
25042: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25043: LD_ADDR_VAR 0 4
25047: PUSH
25048: LD_VAR 0 1
25052: PPUSH
25053: CALL_OW 248
25057: ST_TO_ADDR
// case nat of 1 :
25058: LD_VAR 0 4
25062: PUSH
25063: LD_INT 1
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25082
25071: POP
// tech := tech_lassight ; 2 :
25072: LD_ADDR_VAR 0 5
25076: PUSH
25077: LD_INT 12
25079: ST_TO_ADDR
25080: GO 25121
25082: LD_INT 2
25084: DOUBLE
25085: EQUAL
25086: IFTRUE 25090
25088: GO 25101
25090: POP
// tech := tech_mortar ; 3 :
25091: LD_ADDR_VAR 0 5
25095: PUSH
25096: LD_INT 41
25098: ST_TO_ADDR
25099: GO 25121
25101: LD_INT 3
25103: DOUBLE
25104: EQUAL
25105: IFTRUE 25109
25107: GO 25120
25109: POP
// tech := tech_bazooka ; end ;
25110: LD_ADDR_VAR 0 5
25114: PUSH
25115: LD_INT 44
25117: ST_TO_ADDR
25118: GO 25121
25120: POP
// if Researched ( side , tech ) then
25121: LD_VAR 0 3
25125: PPUSH
25126: LD_VAR 0 5
25130: PPUSH
25131: CALL_OW 325
25135: IFFALSE 25162
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25137: LD_ADDR_VAR 0 2
25141: PUSH
25142: LD_INT 5
25144: PUSH
25145: LD_INT 8
25147: PUSH
25148: LD_INT 9
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: PUSH
25156: LD_VAR 0 4
25160: ARRAY
25161: ST_TO_ADDR
// end ;
25162: LD_VAR 0 2
25166: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25167: LD_INT 0
25169: PPUSH
25170: PPUSH
25171: PPUSH
// if not mines then
25172: LD_VAR 0 2
25176: NOT
25177: IFFALSE 25181
// exit ;
25179: GO 25325
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25181: LD_ADDR_VAR 0 5
25185: PUSH
25186: LD_INT 81
25188: PUSH
25189: LD_VAR 0 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: LD_INT 21
25203: PUSH
25204: LD_INT 3
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PPUSH
25219: CALL_OW 69
25223: ST_TO_ADDR
// for i in mines do
25224: LD_ADDR_VAR 0 4
25228: PUSH
25229: LD_VAR 0 2
25233: PUSH
25234: FOR_IN
25235: IFFALSE 25323
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25237: LD_VAR 0 4
25241: PUSH
25242: LD_INT 1
25244: ARRAY
25245: PPUSH
25246: LD_VAR 0 4
25250: PUSH
25251: LD_INT 2
25253: ARRAY
25254: PPUSH
25255: CALL_OW 458
25259: NOT
25260: IFFALSE 25264
// continue ;
25262: GO 25234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25264: LD_VAR 0 4
25268: PUSH
25269: LD_INT 1
25271: ARRAY
25272: PPUSH
25273: LD_VAR 0 4
25277: PUSH
25278: LD_INT 2
25280: ARRAY
25281: PPUSH
25282: CALL_OW 428
25286: PUSH
25287: LD_VAR 0 5
25291: IN
25292: IFFALSE 25321
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25294: LD_VAR 0 4
25298: PUSH
25299: LD_INT 1
25301: ARRAY
25302: PPUSH
25303: LD_VAR 0 4
25307: PUSH
25308: LD_INT 2
25310: ARRAY
25311: PPUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 456
// end ;
25321: GO 25234
25323: POP
25324: POP
// end ;
25325: LD_VAR 0 3
25329: RET
// export function Count ( array ) ; var i ; begin
25330: LD_INT 0
25332: PPUSH
25333: PPUSH
// result := 0 ;
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_INT 0
25341: ST_TO_ADDR
// for i in array do
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_VAR 0 1
25351: PUSH
25352: FOR_IN
25353: IFFALSE 25377
// if i then
25355: LD_VAR 0 3
25359: IFFALSE 25375
// result := result + 1 ;
25361: LD_ADDR_VAR 0 2
25365: PUSH
25366: LD_VAR 0 2
25370: PUSH
25371: LD_INT 1
25373: PLUS
25374: ST_TO_ADDR
25375: GO 25352
25377: POP
25378: POP
// end ;
25379: LD_VAR 0 2
25383: RET
// export function IsEmpty ( building ) ; begin
25384: LD_INT 0
25386: PPUSH
// if not building then
25387: LD_VAR 0 1
25391: NOT
25392: IFFALSE 25396
// exit ;
25394: GO 25439
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25396: LD_ADDR_VAR 0 2
25400: PUSH
25401: LD_VAR 0 1
25405: PUSH
25406: LD_INT 22
25408: PUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: CALL_OW 255
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 58
25425: PUSH
25426: EMPTY
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PPUSH
25433: CALL_OW 69
25437: IN
25438: ST_TO_ADDR
// end ;
25439: LD_VAR 0 2
25443: RET
// export function IsNotFull ( building ) ; begin
25444: LD_INT 0
25446: PPUSH
// if not building then
25447: LD_VAR 0 1
25451: NOT
25452: IFFALSE 25456
// exit ;
25454: GO 25475
// result := UnitsInside ( building ) < 6 ;
25456: LD_ADDR_VAR 0 2
25460: PUSH
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL_OW 313
25470: PUSH
25471: LD_INT 6
25473: LESS
25474: ST_TO_ADDR
// end ;
25475: LD_VAR 0 2
25479: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25480: LD_INT 0
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
// tmp := [ ] ;
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: EMPTY
25492: ST_TO_ADDR
// list := [ ] ;
25493: LD_ADDR_VAR 0 5
25497: PUSH
25498: EMPTY
25499: ST_TO_ADDR
// for i = 16 to 25 do
25500: LD_ADDR_VAR 0 4
25504: PUSH
25505: DOUBLE
25506: LD_INT 16
25508: DEC
25509: ST_TO_ADDR
25510: LD_INT 25
25512: PUSH
25513: FOR_TO
25514: IFFALSE 25587
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25516: LD_ADDR_VAR 0 3
25520: PUSH
25521: LD_VAR 0 3
25525: PUSH
25526: LD_INT 22
25528: PUSH
25529: LD_VAR 0 1
25533: PPUSH
25534: CALL_OW 255
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 91
25545: PUSH
25546: LD_VAR 0 1
25550: PUSH
25551: LD_INT 6
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 30
25561: PUSH
25562: LD_VAR 0 4
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: LIST
25575: PUSH
25576: EMPTY
25577: LIST
25578: PPUSH
25579: CALL_OW 69
25583: ADD
25584: ST_TO_ADDR
25585: GO 25513
25587: POP
25588: POP
// for i = 1 to tmp do
25589: LD_ADDR_VAR 0 4
25593: PUSH
25594: DOUBLE
25595: LD_INT 1
25597: DEC
25598: ST_TO_ADDR
25599: LD_VAR 0 3
25603: PUSH
25604: FOR_TO
25605: IFFALSE 25693
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25607: LD_ADDR_VAR 0 5
25611: PUSH
25612: LD_VAR 0 5
25616: PUSH
25617: LD_VAR 0 3
25621: PUSH
25622: LD_VAR 0 4
25626: ARRAY
25627: PPUSH
25628: CALL_OW 266
25632: PUSH
25633: LD_VAR 0 3
25637: PUSH
25638: LD_VAR 0 4
25642: ARRAY
25643: PPUSH
25644: CALL_OW 250
25648: PUSH
25649: LD_VAR 0 3
25653: PUSH
25654: LD_VAR 0 4
25658: ARRAY
25659: PPUSH
25660: CALL_OW 251
25664: PUSH
25665: LD_VAR 0 3
25669: PUSH
25670: LD_VAR 0 4
25674: ARRAY
25675: PPUSH
25676: CALL_OW 254
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: ADD
25690: ST_TO_ADDR
25691: GO 25604
25693: POP
25694: POP
// result := list ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_VAR 0 5
25704: ST_TO_ADDR
// end ;
25705: LD_VAR 0 2
25709: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25710: LD_INT 0
25712: PPUSH
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
// if not factory then
25719: LD_VAR 0 1
25723: NOT
25724: IFFALSE 25728
// exit ;
25726: GO 26321
// if control = control_apeman then
25728: LD_VAR 0 4
25732: PUSH
25733: LD_INT 5
25735: EQUAL
25736: IFFALSE 25845
// begin tmp := UnitsInside ( factory ) ;
25738: LD_ADDR_VAR 0 8
25742: PUSH
25743: LD_VAR 0 1
25747: PPUSH
25748: CALL_OW 313
25752: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25753: LD_VAR 0 8
25757: PPUSH
25758: LD_INT 25
25760: PUSH
25761: LD_INT 12
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 72
25772: NOT
25773: IFFALSE 25783
// control := control_manual ;
25775: LD_ADDR_VAR 0 4
25779: PUSH
25780: LD_INT 1
25782: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25783: LD_ADDR_VAR 0 8
25787: PUSH
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL 25480 0 1
25797: ST_TO_ADDR
// if tmp then
25798: LD_VAR 0 8
25802: IFFALSE 25845
// begin for i in tmp do
25804: LD_ADDR_VAR 0 7
25808: PUSH
25809: LD_VAR 0 8
25813: PUSH
25814: FOR_IN
25815: IFFALSE 25843
// if i [ 1 ] = b_ext_radio then
25817: LD_VAR 0 7
25821: PUSH
25822: LD_INT 1
25824: ARRAY
25825: PUSH
25826: LD_INT 22
25828: EQUAL
25829: IFFALSE 25841
// begin control := control_remote ;
25831: LD_ADDR_VAR 0 4
25835: PUSH
25836: LD_INT 2
25838: ST_TO_ADDR
// break ;
25839: GO 25843
// end ;
25841: GO 25814
25843: POP
25844: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25845: LD_VAR 0 1
25849: PPUSH
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_VAR 0 3
25859: PPUSH
25860: LD_VAR 0 4
25864: PPUSH
25865: LD_VAR 0 5
25869: PPUSH
25870: CALL_OW 448
25874: IFFALSE 25909
// begin result := [ chassis , engine , control , weapon ] ;
25876: LD_ADDR_VAR 0 6
25880: PUSH
25881: LD_VAR 0 2
25885: PUSH
25886: LD_VAR 0 3
25890: PUSH
25891: LD_VAR 0 4
25895: PUSH
25896: LD_VAR 0 5
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: ST_TO_ADDR
// exit ;
25907: GO 26321
// end ; _chassis := AvailableChassisList ( factory ) ;
25909: LD_ADDR_VAR 0 9
25913: PUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL_OW 475
25923: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25924: LD_ADDR_VAR 0 11
25928: PUSH
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL_OW 476
25938: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25939: LD_ADDR_VAR 0 12
25943: PUSH
25944: LD_VAR 0 1
25948: PPUSH
25949: CALL_OW 477
25953: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25954: LD_ADDR_VAR 0 10
25958: PUSH
25959: LD_VAR 0 1
25963: PPUSH
25964: CALL_OW 478
25968: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25969: LD_VAR 0 9
25973: NOT
25974: PUSH
25975: LD_VAR 0 11
25979: NOT
25980: OR
25981: PUSH
25982: LD_VAR 0 12
25986: NOT
25987: OR
25988: PUSH
25989: LD_VAR 0 10
25993: NOT
25994: OR
25995: IFFALSE 26030
// begin result := [ chassis , engine , control , weapon ] ;
25997: LD_ADDR_VAR 0 6
26001: PUSH
26002: LD_VAR 0 2
26006: PUSH
26007: LD_VAR 0 3
26011: PUSH
26012: LD_VAR 0 4
26016: PUSH
26017: LD_VAR 0 5
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: ST_TO_ADDR
// exit ;
26028: GO 26321
// end ; if not chassis in _chassis then
26030: LD_VAR 0 2
26034: PUSH
26035: LD_VAR 0 9
26039: IN
26040: NOT
26041: IFFALSE 26067
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26043: LD_ADDR_VAR 0 2
26047: PUSH
26048: LD_VAR 0 9
26052: PUSH
26053: LD_INT 1
26055: PPUSH
26056: LD_VAR 0 9
26060: PPUSH
26061: CALL_OW 12
26065: ARRAY
26066: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26067: LD_VAR 0 2
26071: PPUSH
26072: LD_VAR 0 3
26076: PPUSH
26077: CALL 26326 0 2
26081: NOT
26082: IFFALSE 26141
// repeat engine := _engine [ 1 ] ;
26084: LD_ADDR_VAR 0 3
26088: PUSH
26089: LD_VAR 0 11
26093: PUSH
26094: LD_INT 1
26096: ARRAY
26097: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26098: LD_ADDR_VAR 0 11
26102: PUSH
26103: LD_VAR 0 11
26107: PPUSH
26108: LD_INT 1
26110: PPUSH
26111: CALL_OW 3
26115: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26116: LD_VAR 0 2
26120: PPUSH
26121: LD_VAR 0 3
26125: PPUSH
26126: CALL 26326 0 2
26130: PUSH
26131: LD_VAR 0 11
26135: PUSH
26136: EMPTY
26137: EQUAL
26138: OR
26139: IFFALSE 26084
// if not control in _control then
26141: LD_VAR 0 4
26145: PUSH
26146: LD_VAR 0 12
26150: IN
26151: NOT
26152: IFFALSE 26178
// control := _control [ rand ( 1 , _control ) ] ;
26154: LD_ADDR_VAR 0 4
26158: PUSH
26159: LD_VAR 0 12
26163: PUSH
26164: LD_INT 1
26166: PPUSH
26167: LD_VAR 0 12
26171: PPUSH
26172: CALL_OW 12
26176: ARRAY
26177: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26178: LD_VAR 0 2
26182: PPUSH
26183: LD_VAR 0 5
26187: PPUSH
26188: CALL 26546 0 2
26192: NOT
26193: IFFALSE 26252
// repeat weapon := _weapon [ 1 ] ;
26195: LD_ADDR_VAR 0 5
26199: PUSH
26200: LD_VAR 0 10
26204: PUSH
26205: LD_INT 1
26207: ARRAY
26208: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26209: LD_ADDR_VAR 0 10
26213: PUSH
26214: LD_VAR 0 10
26218: PPUSH
26219: LD_INT 1
26221: PPUSH
26222: CALL_OW 3
26226: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26227: LD_VAR 0 2
26231: PPUSH
26232: LD_VAR 0 5
26236: PPUSH
26237: CALL 26546 0 2
26241: PUSH
26242: LD_VAR 0 10
26246: PUSH
26247: EMPTY
26248: EQUAL
26249: OR
26250: IFFALSE 26195
// result := [ ] ;
26252: LD_ADDR_VAR 0 6
26256: PUSH
26257: EMPTY
26258: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26259: LD_VAR 0 1
26263: PPUSH
26264: LD_VAR 0 2
26268: PPUSH
26269: LD_VAR 0 3
26273: PPUSH
26274: LD_VAR 0 4
26278: PPUSH
26279: LD_VAR 0 5
26283: PPUSH
26284: CALL_OW 448
26288: IFFALSE 26321
// result := [ chassis , engine , control , weapon ] ;
26290: LD_ADDR_VAR 0 6
26294: PUSH
26295: LD_VAR 0 2
26299: PUSH
26300: LD_VAR 0 3
26304: PUSH
26305: LD_VAR 0 4
26309: PUSH
26310: LD_VAR 0 5
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: ST_TO_ADDR
// end ;
26321: LD_VAR 0 6
26325: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26326: LD_INT 0
26328: PPUSH
// if not chassis or not engine then
26329: LD_VAR 0 1
26333: NOT
26334: PUSH
26335: LD_VAR 0 2
26339: NOT
26340: OR
26341: IFFALSE 26345
// exit ;
26343: GO 26541
// case engine of engine_solar :
26345: LD_VAR 0 2
26349: PUSH
26350: LD_INT 2
26352: DOUBLE
26353: EQUAL
26354: IFTRUE 26358
26356: GO 26396
26358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26359: LD_ADDR_VAR 0 3
26363: PUSH
26364: LD_INT 11
26366: PUSH
26367: LD_INT 12
26369: PUSH
26370: LD_INT 13
26372: PUSH
26373: LD_INT 14
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 3
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: ST_TO_ADDR
26394: GO 26525
26396: LD_INT 1
26398: DOUBLE
26399: EQUAL
26400: IFTRUE 26404
26402: GO 26466
26404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26405: LD_ADDR_VAR 0 3
26409: PUSH
26410: LD_INT 11
26412: PUSH
26413: LD_INT 12
26415: PUSH
26416: LD_INT 13
26418: PUSH
26419: LD_INT 14
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 3
26430: PUSH
26431: LD_INT 4
26433: PUSH
26434: LD_INT 5
26436: PUSH
26437: LD_INT 21
26439: PUSH
26440: LD_INT 23
26442: PUSH
26443: LD_INT 22
26445: PUSH
26446: LD_INT 24
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
26464: GO 26525
26466: LD_INT 3
26468: DOUBLE
26469: EQUAL
26470: IFTRUE 26474
26472: GO 26524
26474: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26475: LD_ADDR_VAR 0 3
26479: PUSH
26480: LD_INT 13
26482: PUSH
26483: LD_INT 14
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 3
26491: PUSH
26492: LD_INT 4
26494: PUSH
26495: LD_INT 5
26497: PUSH
26498: LD_INT 21
26500: PUSH
26501: LD_INT 22
26503: PUSH
26504: LD_INT 23
26506: PUSH
26507: LD_INT 24
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: ST_TO_ADDR
26522: GO 26525
26524: POP
// result := ( chassis in result ) ;
26525: LD_ADDR_VAR 0 3
26529: PUSH
26530: LD_VAR 0 1
26534: PUSH
26535: LD_VAR 0 3
26539: IN
26540: ST_TO_ADDR
// end ;
26541: LD_VAR 0 3
26545: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26546: LD_INT 0
26548: PPUSH
// if not chassis or not weapon then
26549: LD_VAR 0 1
26553: NOT
26554: PUSH
26555: LD_VAR 0 2
26559: NOT
26560: OR
26561: IFFALSE 26565
// exit ;
26563: GO 27627
// case weapon of us_machine_gun :
26565: LD_VAR 0 2
26569: PUSH
26570: LD_INT 2
26572: DOUBLE
26573: EQUAL
26574: IFTRUE 26578
26576: GO 26608
26578: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26579: LD_ADDR_VAR 0 3
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: LD_INT 2
26589: PUSH
26590: LD_INT 3
26592: PUSH
26593: LD_INT 4
26595: PUSH
26596: LD_INT 5
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: ST_TO_ADDR
26606: GO 27611
26608: LD_INT 3
26610: DOUBLE
26611: EQUAL
26612: IFTRUE 26616
26614: GO 26646
26616: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: LD_INT 4
26633: PUSH
26634: LD_INT 5
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: ST_TO_ADDR
26644: GO 27611
26646: LD_INT 11
26648: DOUBLE
26649: EQUAL
26650: IFTRUE 26654
26652: GO 26684
26654: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26655: LD_ADDR_VAR 0 3
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: LD_INT 3
26668: PUSH
26669: LD_INT 4
26671: PUSH
26672: LD_INT 5
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: ST_TO_ADDR
26682: GO 27611
26684: LD_INT 4
26686: DOUBLE
26687: EQUAL
26688: IFTRUE 26692
26690: GO 26718
26692: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26693: LD_ADDR_VAR 0 3
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: LD_INT 3
26703: PUSH
26704: LD_INT 4
26706: PUSH
26707: LD_INT 5
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: ST_TO_ADDR
26716: GO 27611
26718: LD_INT 5
26720: DOUBLE
26721: EQUAL
26722: IFTRUE 26726
26724: GO 26752
26726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26727: LD_ADDR_VAR 0 3
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: LD_INT 3
26737: PUSH
26738: LD_INT 4
26740: PUSH
26741: LD_INT 5
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: ST_TO_ADDR
26750: GO 27611
26752: LD_INT 9
26754: DOUBLE
26755: EQUAL
26756: IFTRUE 26760
26758: GO 26786
26760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26761: LD_ADDR_VAR 0 3
26765: PUSH
26766: LD_INT 2
26768: PUSH
26769: LD_INT 3
26771: PUSH
26772: LD_INT 4
26774: PUSH
26775: LD_INT 5
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: ST_TO_ADDR
26784: GO 27611
26786: LD_INT 7
26788: DOUBLE
26789: EQUAL
26790: IFTRUE 26794
26792: GO 26820
26794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26795: LD_ADDR_VAR 0 3
26799: PUSH
26800: LD_INT 2
26802: PUSH
26803: LD_INT 3
26805: PUSH
26806: LD_INT 4
26808: PUSH
26809: LD_INT 5
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
26818: GO 27611
26820: LD_INT 12
26822: DOUBLE
26823: EQUAL
26824: IFTRUE 26828
26826: GO 26854
26828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26829: LD_ADDR_VAR 0 3
26833: PUSH
26834: LD_INT 2
26836: PUSH
26837: LD_INT 3
26839: PUSH
26840: LD_INT 4
26842: PUSH
26843: LD_INT 5
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: ST_TO_ADDR
26852: GO 27611
26854: LD_INT 13
26856: DOUBLE
26857: EQUAL
26858: IFTRUE 26862
26860: GO 26888
26862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26863: LD_ADDR_VAR 0 3
26867: PUSH
26868: LD_INT 2
26870: PUSH
26871: LD_INT 3
26873: PUSH
26874: LD_INT 4
26876: PUSH
26877: LD_INT 5
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: ST_TO_ADDR
26886: GO 27611
26888: LD_INT 14
26890: DOUBLE
26891: EQUAL
26892: IFTRUE 26896
26894: GO 26914
26896: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26897: LD_ADDR_VAR 0 3
26901: PUSH
26902: LD_INT 4
26904: PUSH
26905: LD_INT 5
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: ST_TO_ADDR
26912: GO 27611
26914: LD_INT 6
26916: DOUBLE
26917: EQUAL
26918: IFTRUE 26922
26920: GO 26940
26922: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26923: LD_ADDR_VAR 0 3
26927: PUSH
26928: LD_INT 4
26930: PUSH
26931: LD_INT 5
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: ST_TO_ADDR
26938: GO 27611
26940: LD_INT 10
26942: DOUBLE
26943: EQUAL
26944: IFTRUE 26948
26946: GO 26966
26948: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26949: LD_ADDR_VAR 0 3
26953: PUSH
26954: LD_INT 4
26956: PUSH
26957: LD_INT 5
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: ST_TO_ADDR
26964: GO 27611
26966: LD_INT 22
26968: DOUBLE
26969: EQUAL
26970: IFTRUE 26974
26972: GO 27000
26974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26975: LD_ADDR_VAR 0 3
26979: PUSH
26980: LD_INT 11
26982: PUSH
26983: LD_INT 12
26985: PUSH
26986: LD_INT 13
26988: PUSH
26989: LD_INT 14
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: ST_TO_ADDR
26998: GO 27611
27000: LD_INT 23
27002: DOUBLE
27003: EQUAL
27004: IFTRUE 27008
27006: GO 27034
27008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27009: LD_ADDR_VAR 0 3
27013: PUSH
27014: LD_INT 11
27016: PUSH
27017: LD_INT 12
27019: PUSH
27020: LD_INT 13
27022: PUSH
27023: LD_INT 14
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: ST_TO_ADDR
27032: GO 27611
27034: LD_INT 24
27036: DOUBLE
27037: EQUAL
27038: IFTRUE 27042
27040: GO 27068
27042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: LD_INT 11
27050: PUSH
27051: LD_INT 12
27053: PUSH
27054: LD_INT 13
27056: PUSH
27057: LD_INT 14
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: ST_TO_ADDR
27066: GO 27611
27068: LD_INT 30
27070: DOUBLE
27071: EQUAL
27072: IFTRUE 27076
27074: GO 27102
27076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27077: LD_ADDR_VAR 0 3
27081: PUSH
27082: LD_INT 11
27084: PUSH
27085: LD_INT 12
27087: PUSH
27088: LD_INT 13
27090: PUSH
27091: LD_INT 14
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: ST_TO_ADDR
27100: GO 27611
27102: LD_INT 25
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27128
27110: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27111: LD_ADDR_VAR 0 3
27115: PUSH
27116: LD_INT 13
27118: PUSH
27119: LD_INT 14
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: ST_TO_ADDR
27126: GO 27611
27128: LD_INT 27
27130: DOUBLE
27131: EQUAL
27132: IFTRUE 27136
27134: GO 27154
27136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_INT 13
27144: PUSH
27145: LD_INT 14
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: ST_TO_ADDR
27152: GO 27611
27154: LD_EXP 44
27158: DOUBLE
27159: EQUAL
27160: IFTRUE 27164
27162: GO 27190
27164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27165: LD_ADDR_VAR 0 3
27169: PUSH
27170: LD_INT 11
27172: PUSH
27173: LD_INT 12
27175: PUSH
27176: LD_INT 13
27178: PUSH
27179: LD_INT 14
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: ST_TO_ADDR
27188: GO 27611
27190: LD_INT 28
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27198
27196: GO 27216
27198: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27199: LD_ADDR_VAR 0 3
27203: PUSH
27204: LD_INT 13
27206: PUSH
27207: LD_INT 14
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: ST_TO_ADDR
27214: GO 27611
27216: LD_INT 29
27218: DOUBLE
27219: EQUAL
27220: IFTRUE 27224
27222: GO 27242
27224: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27225: LD_ADDR_VAR 0 3
27229: PUSH
27230: LD_INT 13
27232: PUSH
27233: LD_INT 14
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: ST_TO_ADDR
27240: GO 27611
27242: LD_INT 31
27244: DOUBLE
27245: EQUAL
27246: IFTRUE 27250
27248: GO 27268
27250: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27251: LD_ADDR_VAR 0 3
27255: PUSH
27256: LD_INT 13
27258: PUSH
27259: LD_INT 14
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: ST_TO_ADDR
27266: GO 27611
27268: LD_INT 26
27270: DOUBLE
27271: EQUAL
27272: IFTRUE 27276
27274: GO 27294
27276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27277: LD_ADDR_VAR 0 3
27281: PUSH
27282: LD_INT 13
27284: PUSH
27285: LD_INT 14
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: ST_TO_ADDR
27292: GO 27611
27294: LD_INT 42
27296: DOUBLE
27297: EQUAL
27298: IFTRUE 27302
27300: GO 27328
27302: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27303: LD_ADDR_VAR 0 3
27307: PUSH
27308: LD_INT 21
27310: PUSH
27311: LD_INT 22
27313: PUSH
27314: LD_INT 23
27316: PUSH
27317: LD_INT 24
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: ST_TO_ADDR
27326: GO 27611
27328: LD_INT 43
27330: DOUBLE
27331: EQUAL
27332: IFTRUE 27336
27334: GO 27362
27336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27337: LD_ADDR_VAR 0 3
27341: PUSH
27342: LD_INT 21
27344: PUSH
27345: LD_INT 22
27347: PUSH
27348: LD_INT 23
27350: PUSH
27351: LD_INT 24
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
27360: GO 27611
27362: LD_INT 44
27364: DOUBLE
27365: EQUAL
27366: IFTRUE 27370
27368: GO 27396
27370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27371: LD_ADDR_VAR 0 3
27375: PUSH
27376: LD_INT 21
27378: PUSH
27379: LD_INT 22
27381: PUSH
27382: LD_INT 23
27384: PUSH
27385: LD_INT 24
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: ST_TO_ADDR
27394: GO 27611
27396: LD_INT 45
27398: DOUBLE
27399: EQUAL
27400: IFTRUE 27404
27402: GO 27430
27404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27405: LD_ADDR_VAR 0 3
27409: PUSH
27410: LD_INT 21
27412: PUSH
27413: LD_INT 22
27415: PUSH
27416: LD_INT 23
27418: PUSH
27419: LD_INT 24
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: ST_TO_ADDR
27428: GO 27611
27430: LD_INT 49
27432: DOUBLE
27433: EQUAL
27434: IFTRUE 27438
27436: GO 27464
27438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27439: LD_ADDR_VAR 0 3
27443: PUSH
27444: LD_INT 21
27446: PUSH
27447: LD_INT 22
27449: PUSH
27450: LD_INT 23
27452: PUSH
27453: LD_INT 24
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: ST_TO_ADDR
27462: GO 27611
27464: LD_INT 51
27466: DOUBLE
27467: EQUAL
27468: IFTRUE 27472
27470: GO 27498
27472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27473: LD_ADDR_VAR 0 3
27477: PUSH
27478: LD_INT 21
27480: PUSH
27481: LD_INT 22
27483: PUSH
27484: LD_INT 23
27486: PUSH
27487: LD_INT 24
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: ST_TO_ADDR
27496: GO 27611
27498: LD_INT 52
27500: DOUBLE
27501: EQUAL
27502: IFTRUE 27506
27504: GO 27532
27506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27507: LD_ADDR_VAR 0 3
27511: PUSH
27512: LD_INT 21
27514: PUSH
27515: LD_INT 22
27517: PUSH
27518: LD_INT 23
27520: PUSH
27521: LD_INT 24
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
27530: GO 27611
27532: LD_INT 53
27534: DOUBLE
27535: EQUAL
27536: IFTRUE 27540
27538: GO 27558
27540: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27541: LD_ADDR_VAR 0 3
27545: PUSH
27546: LD_INT 23
27548: PUSH
27549: LD_INT 24
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: ST_TO_ADDR
27556: GO 27611
27558: LD_INT 46
27560: DOUBLE
27561: EQUAL
27562: IFTRUE 27566
27564: GO 27584
27566: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27567: LD_ADDR_VAR 0 3
27571: PUSH
27572: LD_INT 23
27574: PUSH
27575: LD_INT 24
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: ST_TO_ADDR
27582: GO 27611
27584: LD_INT 47
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27592
27590: GO 27610
27592: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: LD_INT 23
27600: PUSH
27601: LD_INT 24
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: ST_TO_ADDR
27608: GO 27611
27610: POP
// result := ( chassis in result ) ;
27611: LD_ADDR_VAR 0 3
27615: PUSH
27616: LD_VAR 0 1
27620: PUSH
27621: LD_VAR 0 3
27625: IN
27626: ST_TO_ADDR
// end ;
27627: LD_VAR 0 3
27631: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27632: LD_INT 0
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
// result := array ;
27641: LD_ADDR_VAR 0 5
27645: PUSH
27646: LD_VAR 0 1
27650: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27651: LD_VAR 0 1
27655: NOT
27656: PUSH
27657: LD_VAR 0 2
27661: NOT
27662: OR
27663: PUSH
27664: LD_VAR 0 3
27668: NOT
27669: OR
27670: PUSH
27671: LD_VAR 0 2
27675: PUSH
27676: LD_VAR 0 1
27680: GREATER
27681: OR
27682: PUSH
27683: LD_VAR 0 3
27687: PUSH
27688: LD_VAR 0 1
27692: GREATER
27693: OR
27694: IFFALSE 27698
// exit ;
27696: GO 27994
// if direction then
27698: LD_VAR 0 4
27702: IFFALSE 27766
// begin d := 1 ;
27704: LD_ADDR_VAR 0 9
27708: PUSH
27709: LD_INT 1
27711: ST_TO_ADDR
// if i_from > i_to then
27712: LD_VAR 0 2
27716: PUSH
27717: LD_VAR 0 3
27721: GREATER
27722: IFFALSE 27748
// length := ( array - i_from ) + i_to else
27724: LD_ADDR_VAR 0 11
27728: PUSH
27729: LD_VAR 0 1
27733: PUSH
27734: LD_VAR 0 2
27738: MINUS
27739: PUSH
27740: LD_VAR 0 3
27744: PLUS
27745: ST_TO_ADDR
27746: GO 27764
// length := i_to - i_from ;
27748: LD_ADDR_VAR 0 11
27752: PUSH
27753: LD_VAR 0 3
27757: PUSH
27758: LD_VAR 0 2
27762: MINUS
27763: ST_TO_ADDR
// end else
27764: GO 27827
// begin d := - 1 ;
27766: LD_ADDR_VAR 0 9
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: ST_TO_ADDR
// if i_from > i_to then
27775: LD_VAR 0 2
27779: PUSH
27780: LD_VAR 0 3
27784: GREATER
27785: IFFALSE 27805
// length := i_from - i_to else
27787: LD_ADDR_VAR 0 11
27791: PUSH
27792: LD_VAR 0 2
27796: PUSH
27797: LD_VAR 0 3
27801: MINUS
27802: ST_TO_ADDR
27803: GO 27827
// length := ( array - i_to ) + i_from ;
27805: LD_ADDR_VAR 0 11
27809: PUSH
27810: LD_VAR 0 1
27814: PUSH
27815: LD_VAR 0 3
27819: MINUS
27820: PUSH
27821: LD_VAR 0 2
27825: PLUS
27826: ST_TO_ADDR
// end ; if not length then
27827: LD_VAR 0 11
27831: NOT
27832: IFFALSE 27836
// exit ;
27834: GO 27994
// tmp := array ;
27836: LD_ADDR_VAR 0 10
27840: PUSH
27841: LD_VAR 0 1
27845: ST_TO_ADDR
// for i = 1 to length do
27846: LD_ADDR_VAR 0 6
27850: PUSH
27851: DOUBLE
27852: LD_INT 1
27854: DEC
27855: ST_TO_ADDR
27856: LD_VAR 0 11
27860: PUSH
27861: FOR_TO
27862: IFFALSE 27982
// begin for j = 1 to array do
27864: LD_ADDR_VAR 0 7
27868: PUSH
27869: DOUBLE
27870: LD_INT 1
27872: DEC
27873: ST_TO_ADDR
27874: LD_VAR 0 1
27878: PUSH
27879: FOR_TO
27880: IFFALSE 27968
// begin k := j + d ;
27882: LD_ADDR_VAR 0 8
27886: PUSH
27887: LD_VAR 0 7
27891: PUSH
27892: LD_VAR 0 9
27896: PLUS
27897: ST_TO_ADDR
// if k > array then
27898: LD_VAR 0 8
27902: PUSH
27903: LD_VAR 0 1
27907: GREATER
27908: IFFALSE 27918
// k := 1 ;
27910: LD_ADDR_VAR 0 8
27914: PUSH
27915: LD_INT 1
27917: ST_TO_ADDR
// if not k then
27918: LD_VAR 0 8
27922: NOT
27923: IFFALSE 27935
// k := array ;
27925: LD_ADDR_VAR 0 8
27929: PUSH
27930: LD_VAR 0 1
27934: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27935: LD_ADDR_VAR 0 10
27939: PUSH
27940: LD_VAR 0 10
27944: PPUSH
27945: LD_VAR 0 8
27949: PPUSH
27950: LD_VAR 0 1
27954: PUSH
27955: LD_VAR 0 7
27959: ARRAY
27960: PPUSH
27961: CALL_OW 1
27965: ST_TO_ADDR
// end ;
27966: GO 27879
27968: POP
27969: POP
// array := tmp ;
27970: LD_ADDR_VAR 0 1
27974: PUSH
27975: LD_VAR 0 10
27979: ST_TO_ADDR
// end ;
27980: GO 27861
27982: POP
27983: POP
// result := array ;
27984: LD_ADDR_VAR 0 5
27988: PUSH
27989: LD_VAR 0 1
27993: ST_TO_ADDR
// end ;
27994: LD_VAR 0 5
27998: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27999: LD_INT 0
28001: PPUSH
28002: PPUSH
// result := 0 ;
28003: LD_ADDR_VAR 0 3
28007: PUSH
28008: LD_INT 0
28010: ST_TO_ADDR
// if not array or not value in array then
28011: LD_VAR 0 1
28015: NOT
28016: PUSH
28017: LD_VAR 0 2
28021: PUSH
28022: LD_VAR 0 1
28026: IN
28027: NOT
28028: OR
28029: IFFALSE 28033
// exit ;
28031: GO 28087
// for i = 1 to array do
28033: LD_ADDR_VAR 0 4
28037: PUSH
28038: DOUBLE
28039: LD_INT 1
28041: DEC
28042: ST_TO_ADDR
28043: LD_VAR 0 1
28047: PUSH
28048: FOR_TO
28049: IFFALSE 28085
// if value = array [ i ] then
28051: LD_VAR 0 2
28055: PUSH
28056: LD_VAR 0 1
28060: PUSH
28061: LD_VAR 0 4
28065: ARRAY
28066: EQUAL
28067: IFFALSE 28083
// begin result := i ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_VAR 0 4
28078: ST_TO_ADDR
// exit ;
28079: POP
28080: POP
28081: GO 28087
// end ;
28083: GO 28048
28085: POP
28086: POP
// end ;
28087: LD_VAR 0 3
28091: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28092: LD_INT 0
28094: PPUSH
// vc_chassis := chassis ;
28095: LD_ADDR_OWVAR 37
28099: PUSH
28100: LD_VAR 0 1
28104: ST_TO_ADDR
// vc_engine := engine ;
28105: LD_ADDR_OWVAR 39
28109: PUSH
28110: LD_VAR 0 2
28114: ST_TO_ADDR
// vc_control := control ;
28115: LD_ADDR_OWVAR 38
28119: PUSH
28120: LD_VAR 0 3
28124: ST_TO_ADDR
// vc_weapon := weapon ;
28125: LD_ADDR_OWVAR 40
28129: PUSH
28130: LD_VAR 0 4
28134: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28135: LD_ADDR_OWVAR 41
28139: PUSH
28140: LD_VAR 0 5
28144: ST_TO_ADDR
// end ;
28145: LD_VAR 0 6
28149: RET
// export function WantPlant ( unit ) ; var task ; begin
28150: LD_INT 0
28152: PPUSH
28153: PPUSH
// result := false ;
28154: LD_ADDR_VAR 0 2
28158: PUSH
28159: LD_INT 0
28161: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28162: LD_ADDR_VAR 0 3
28166: PUSH
28167: LD_VAR 0 1
28171: PPUSH
28172: CALL_OW 437
28176: ST_TO_ADDR
// if task then
28177: LD_VAR 0 3
28181: IFFALSE 28209
// if task [ 1 ] [ 1 ] = p then
28183: LD_VAR 0 3
28187: PUSH
28188: LD_INT 1
28190: ARRAY
28191: PUSH
28192: LD_INT 1
28194: ARRAY
28195: PUSH
28196: LD_STRING p
28198: EQUAL
28199: IFFALSE 28209
// result := true ;
28201: LD_ADDR_VAR 0 2
28205: PUSH
28206: LD_INT 1
28208: ST_TO_ADDR
// end ;
28209: LD_VAR 0 2
28213: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28214: LD_INT 0
28216: PPUSH
28217: PPUSH
28218: PPUSH
28219: PPUSH
// if pos < 1 then
28220: LD_VAR 0 2
28224: PUSH
28225: LD_INT 1
28227: LESS
28228: IFFALSE 28232
// exit ;
28230: GO 28535
// if pos = 1 then
28232: LD_VAR 0 2
28236: PUSH
28237: LD_INT 1
28239: EQUAL
28240: IFFALSE 28273
// result := Replace ( arr , pos [ 1 ] , value ) else
28242: LD_ADDR_VAR 0 4
28246: PUSH
28247: LD_VAR 0 1
28251: PPUSH
28252: LD_VAR 0 2
28256: PUSH
28257: LD_INT 1
28259: ARRAY
28260: PPUSH
28261: LD_VAR 0 3
28265: PPUSH
28266: CALL_OW 1
28270: ST_TO_ADDR
28271: GO 28535
// begin tmp := arr ;
28273: LD_ADDR_VAR 0 6
28277: PUSH
28278: LD_VAR 0 1
28282: ST_TO_ADDR
// s_arr := [ tmp ] ;
28283: LD_ADDR_VAR 0 7
28287: PUSH
28288: LD_VAR 0 6
28292: PUSH
28293: EMPTY
28294: LIST
28295: ST_TO_ADDR
// for i = 1 to pos - 1 do
28296: LD_ADDR_VAR 0 5
28300: PUSH
28301: DOUBLE
28302: LD_INT 1
28304: DEC
28305: ST_TO_ADDR
28306: LD_VAR 0 2
28310: PUSH
28311: LD_INT 1
28313: MINUS
28314: PUSH
28315: FOR_TO
28316: IFFALSE 28361
// begin tmp := tmp [ pos [ i ] ] ;
28318: LD_ADDR_VAR 0 6
28322: PUSH
28323: LD_VAR 0 6
28327: PUSH
28328: LD_VAR 0 2
28332: PUSH
28333: LD_VAR 0 5
28337: ARRAY
28338: ARRAY
28339: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28340: LD_ADDR_VAR 0 7
28344: PUSH
28345: LD_VAR 0 7
28349: PUSH
28350: LD_VAR 0 6
28354: PUSH
28355: EMPTY
28356: LIST
28357: ADD
28358: ST_TO_ADDR
// end ;
28359: GO 28315
28361: POP
28362: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28363: LD_ADDR_VAR 0 6
28367: PUSH
28368: LD_VAR 0 6
28372: PPUSH
28373: LD_VAR 0 2
28377: PUSH
28378: LD_VAR 0 2
28382: ARRAY
28383: PPUSH
28384: LD_VAR 0 3
28388: PPUSH
28389: CALL_OW 1
28393: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28394: LD_ADDR_VAR 0 7
28398: PUSH
28399: LD_VAR 0 7
28403: PPUSH
28404: LD_VAR 0 7
28408: PPUSH
28409: LD_VAR 0 6
28413: PPUSH
28414: CALL_OW 1
28418: ST_TO_ADDR
// for i = s_arr downto 2 do
28419: LD_ADDR_VAR 0 5
28423: PUSH
28424: DOUBLE
28425: LD_VAR 0 7
28429: INC
28430: ST_TO_ADDR
28431: LD_INT 2
28433: PUSH
28434: FOR_DOWNTO
28435: IFFALSE 28519
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28437: LD_ADDR_VAR 0 6
28441: PUSH
28442: LD_VAR 0 7
28446: PUSH
28447: LD_VAR 0 5
28451: PUSH
28452: LD_INT 1
28454: MINUS
28455: ARRAY
28456: PPUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_VAR 0 5
28466: PUSH
28467: LD_INT 1
28469: MINUS
28470: ARRAY
28471: PPUSH
28472: LD_VAR 0 7
28476: PUSH
28477: LD_VAR 0 5
28481: ARRAY
28482: PPUSH
28483: CALL_OW 1
28487: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28488: LD_ADDR_VAR 0 7
28492: PUSH
28493: LD_VAR 0 7
28497: PPUSH
28498: LD_VAR 0 5
28502: PUSH
28503: LD_INT 1
28505: MINUS
28506: PPUSH
28507: LD_VAR 0 6
28511: PPUSH
28512: CALL_OW 1
28516: ST_TO_ADDR
// end ;
28517: GO 28434
28519: POP
28520: POP
// result := s_arr [ 1 ] ;
28521: LD_ADDR_VAR 0 4
28525: PUSH
28526: LD_VAR 0 7
28530: PUSH
28531: LD_INT 1
28533: ARRAY
28534: ST_TO_ADDR
// end ; end ;
28535: LD_VAR 0 4
28539: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28540: LD_INT 0
28542: PPUSH
28543: PPUSH
// if not list then
28544: LD_VAR 0 1
28548: NOT
28549: IFFALSE 28553
// exit ;
28551: GO 28644
// i := list [ pos1 ] ;
28553: LD_ADDR_VAR 0 5
28557: PUSH
28558: LD_VAR 0 1
28562: PUSH
28563: LD_VAR 0 2
28567: ARRAY
28568: ST_TO_ADDR
// if not i then
28569: LD_VAR 0 5
28573: NOT
28574: IFFALSE 28578
// exit ;
28576: GO 28644
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28578: LD_ADDR_VAR 0 1
28582: PUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: LD_VAR 0 2
28592: PPUSH
28593: LD_VAR 0 1
28597: PUSH
28598: LD_VAR 0 3
28602: ARRAY
28603: PPUSH
28604: CALL_OW 1
28608: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28609: LD_ADDR_VAR 0 1
28613: PUSH
28614: LD_VAR 0 1
28618: PPUSH
28619: LD_VAR 0 3
28623: PPUSH
28624: LD_VAR 0 5
28628: PPUSH
28629: CALL_OW 1
28633: ST_TO_ADDR
// result := list ;
28634: LD_ADDR_VAR 0 4
28638: PUSH
28639: LD_VAR 0 1
28643: ST_TO_ADDR
// end ;
28644: LD_VAR 0 4
28648: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28649: LD_INT 0
28651: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28652: LD_ADDR_VAR 0 5
28656: PUSH
28657: LD_VAR 0 1
28661: PPUSH
28662: CALL_OW 250
28666: PPUSH
28667: LD_VAR 0 1
28671: PPUSH
28672: CALL_OW 251
28676: PPUSH
28677: LD_VAR 0 2
28681: PPUSH
28682: LD_VAR 0 3
28686: PPUSH
28687: LD_VAR 0 4
28691: PPUSH
28692: CALL 28702 0 5
28696: ST_TO_ADDR
// end ;
28697: LD_VAR 0 5
28701: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28702: LD_INT 0
28704: PPUSH
28705: PPUSH
28706: PPUSH
28707: PPUSH
// if not list then
28708: LD_VAR 0 3
28712: NOT
28713: IFFALSE 28717
// exit ;
28715: GO 29105
// result := [ ] ;
28717: LD_ADDR_VAR 0 6
28721: PUSH
28722: EMPTY
28723: ST_TO_ADDR
// for i in list do
28724: LD_ADDR_VAR 0 7
28728: PUSH
28729: LD_VAR 0 3
28733: PUSH
28734: FOR_IN
28735: IFFALSE 28937
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28737: LD_ADDR_VAR 0 9
28741: PUSH
28742: LD_VAR 0 7
28746: PPUSH
28747: LD_VAR 0 1
28751: PPUSH
28752: LD_VAR 0 2
28756: PPUSH
28757: CALL_OW 297
28761: ST_TO_ADDR
// if not result then
28762: LD_VAR 0 6
28766: NOT
28767: IFFALSE 28793
// result := [ [ i , tmp ] ] else
28769: LD_ADDR_VAR 0 6
28773: PUSH
28774: LD_VAR 0 7
28778: PUSH
28779: LD_VAR 0 9
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: ST_TO_ADDR
28791: GO 28935
// begin if result [ result ] [ 2 ] < tmp then
28793: LD_VAR 0 6
28797: PUSH
28798: LD_VAR 0 6
28802: ARRAY
28803: PUSH
28804: LD_INT 2
28806: ARRAY
28807: PUSH
28808: LD_VAR 0 9
28812: LESS
28813: IFFALSE 28855
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28815: LD_ADDR_VAR 0 6
28819: PUSH
28820: LD_VAR 0 6
28824: PPUSH
28825: LD_VAR 0 6
28829: PUSH
28830: LD_INT 1
28832: PLUS
28833: PPUSH
28834: LD_VAR 0 7
28838: PUSH
28839: LD_VAR 0 9
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PPUSH
28848: CALL_OW 2
28852: ST_TO_ADDR
28853: GO 28935
// for j = 1 to result do
28855: LD_ADDR_VAR 0 8
28859: PUSH
28860: DOUBLE
28861: LD_INT 1
28863: DEC
28864: ST_TO_ADDR
28865: LD_VAR 0 6
28869: PUSH
28870: FOR_TO
28871: IFFALSE 28933
// begin if tmp < result [ j ] [ 2 ] then
28873: LD_VAR 0 9
28877: PUSH
28878: LD_VAR 0 6
28882: PUSH
28883: LD_VAR 0 8
28887: ARRAY
28888: PUSH
28889: LD_INT 2
28891: ARRAY
28892: LESS
28893: IFFALSE 28931
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28895: LD_ADDR_VAR 0 6
28899: PUSH
28900: LD_VAR 0 6
28904: PPUSH
28905: LD_VAR 0 8
28909: PPUSH
28910: LD_VAR 0 7
28914: PUSH
28915: LD_VAR 0 9
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PPUSH
28924: CALL_OW 2
28928: ST_TO_ADDR
// break ;
28929: GO 28933
// end ; end ;
28931: GO 28870
28933: POP
28934: POP
// end ; end ;
28935: GO 28734
28937: POP
28938: POP
// if result and not asc then
28939: LD_VAR 0 6
28943: PUSH
28944: LD_VAR 0 4
28948: NOT
28949: AND
28950: IFFALSE 29025
// begin tmp := result ;
28952: LD_ADDR_VAR 0 9
28956: PUSH
28957: LD_VAR 0 6
28961: ST_TO_ADDR
// for i = tmp downto 1 do
28962: LD_ADDR_VAR 0 7
28966: PUSH
28967: DOUBLE
28968: LD_VAR 0 9
28972: INC
28973: ST_TO_ADDR
28974: LD_INT 1
28976: PUSH
28977: FOR_DOWNTO
28978: IFFALSE 29023
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28980: LD_ADDR_VAR 0 6
28984: PUSH
28985: LD_VAR 0 6
28989: PPUSH
28990: LD_VAR 0 9
28994: PUSH
28995: LD_VAR 0 7
28999: MINUS
29000: PUSH
29001: LD_INT 1
29003: PLUS
29004: PPUSH
29005: LD_VAR 0 9
29009: PUSH
29010: LD_VAR 0 7
29014: ARRAY
29015: PPUSH
29016: CALL_OW 1
29020: ST_TO_ADDR
29021: GO 28977
29023: POP
29024: POP
// end ; tmp := [ ] ;
29025: LD_ADDR_VAR 0 9
29029: PUSH
29030: EMPTY
29031: ST_TO_ADDR
// if mode then
29032: LD_VAR 0 5
29036: IFFALSE 29105
// begin for i = 1 to result do
29038: LD_ADDR_VAR 0 7
29042: PUSH
29043: DOUBLE
29044: LD_INT 1
29046: DEC
29047: ST_TO_ADDR
29048: LD_VAR 0 6
29052: PUSH
29053: FOR_TO
29054: IFFALSE 29093
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29056: LD_ADDR_VAR 0 9
29060: PUSH
29061: LD_VAR 0 9
29065: PPUSH
29066: LD_VAR 0 7
29070: PPUSH
29071: LD_VAR 0 6
29075: PUSH
29076: LD_VAR 0 7
29080: ARRAY
29081: PUSH
29082: LD_INT 1
29084: ARRAY
29085: PPUSH
29086: CALL_OW 1
29090: ST_TO_ADDR
29091: GO 29053
29093: POP
29094: POP
// result := tmp ;
29095: LD_ADDR_VAR 0 6
29099: PUSH
29100: LD_VAR 0 9
29104: ST_TO_ADDR
// end ; end ;
29105: LD_VAR 0 6
29109: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29110: LD_INT 0
29112: PPUSH
29113: PPUSH
29114: PPUSH
29115: PPUSH
29116: PPUSH
29117: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29118: LD_ADDR_VAR 0 5
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: EMPTY
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: ST_TO_ADDR
// if not x or not y then
29140: LD_VAR 0 2
29144: NOT
29145: PUSH
29146: LD_VAR 0 3
29150: NOT
29151: OR
29152: IFFALSE 29156
// exit ;
29154: GO 30808
// if not range then
29156: LD_VAR 0 4
29160: NOT
29161: IFFALSE 29171
// range := 10 ;
29163: LD_ADDR_VAR 0 4
29167: PUSH
29168: LD_INT 10
29170: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29171: LD_ADDR_VAR 0 8
29175: PUSH
29176: LD_INT 81
29178: PUSH
29179: LD_VAR 0 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 92
29190: PUSH
29191: LD_VAR 0 2
29195: PUSH
29196: LD_VAR 0 3
29200: PUSH
29201: LD_VAR 0 4
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 3
29214: PUSH
29215: LD_INT 21
29217: PUSH
29218: LD_INT 3
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: PPUSH
29234: CALL_OW 69
29238: ST_TO_ADDR
// if not tmp then
29239: LD_VAR 0 8
29243: NOT
29244: IFFALSE 29248
// exit ;
29246: GO 30808
// for i in tmp do
29248: LD_ADDR_VAR 0 6
29252: PUSH
29253: LD_VAR 0 8
29257: PUSH
29258: FOR_IN
29259: IFFALSE 30783
// begin points := [ 0 , 0 , 0 ] ;
29261: LD_ADDR_VAR 0 9
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: LIST
29279: ST_TO_ADDR
// bpoints := 1 ;
29280: LD_ADDR_VAR 0 10
29284: PUSH
29285: LD_INT 1
29287: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29288: LD_VAR 0 6
29292: PPUSH
29293: CALL_OW 247
29297: PUSH
29298: LD_INT 1
29300: DOUBLE
29301: EQUAL
29302: IFTRUE 29306
29304: GO 29884
29306: POP
// begin if GetClass ( i ) = 1 then
29307: LD_VAR 0 6
29311: PPUSH
29312: CALL_OW 257
29316: PUSH
29317: LD_INT 1
29319: EQUAL
29320: IFFALSE 29341
// points := [ 10 , 5 , 3 ] ;
29322: LD_ADDR_VAR 0 9
29326: PUSH
29327: LD_INT 10
29329: PUSH
29330: LD_INT 5
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29341: LD_VAR 0 6
29345: PPUSH
29346: CALL_OW 257
29350: PUSH
29351: LD_INT 2
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: LD_INT 4
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: LIST
29364: IN
29365: IFFALSE 29386
// points := [ 3 , 2 , 1 ] ;
29367: LD_ADDR_VAR 0 9
29371: PUSH
29372: LD_INT 3
29374: PUSH
29375: LD_INT 2
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29386: LD_VAR 0 6
29390: PPUSH
29391: CALL_OW 257
29395: PUSH
29396: LD_INT 5
29398: EQUAL
29399: IFFALSE 29420
// points := [ 130 , 5 , 2 ] ;
29401: LD_ADDR_VAR 0 9
29405: PUSH
29406: LD_INT 130
29408: PUSH
29409: LD_INT 5
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29420: LD_VAR 0 6
29424: PPUSH
29425: CALL_OW 257
29429: PUSH
29430: LD_INT 8
29432: EQUAL
29433: IFFALSE 29454
// points := [ 35 , 35 , 30 ] ;
29435: LD_ADDR_VAR 0 9
29439: PUSH
29440: LD_INT 35
29442: PUSH
29443: LD_INT 35
29445: PUSH
29446: LD_INT 30
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29454: LD_VAR 0 6
29458: PPUSH
29459: CALL_OW 257
29463: PUSH
29464: LD_INT 9
29466: EQUAL
29467: IFFALSE 29488
// points := [ 20 , 55 , 40 ] ;
29469: LD_ADDR_VAR 0 9
29473: PUSH
29474: LD_INT 20
29476: PUSH
29477: LD_INT 55
29479: PUSH
29480: LD_INT 40
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: LIST
29487: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29488: LD_VAR 0 6
29492: PPUSH
29493: CALL_OW 257
29497: PUSH
29498: LD_INT 12
29500: PUSH
29501: LD_INT 16
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: IN
29508: IFFALSE 29529
// points := [ 5 , 3 , 2 ] ;
29510: LD_ADDR_VAR 0 9
29514: PUSH
29515: LD_INT 5
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29529: LD_VAR 0 6
29533: PPUSH
29534: CALL_OW 257
29538: PUSH
29539: LD_INT 17
29541: EQUAL
29542: IFFALSE 29563
// points := [ 100 , 50 , 75 ] ;
29544: LD_ADDR_VAR 0 9
29548: PUSH
29549: LD_INT 100
29551: PUSH
29552: LD_INT 50
29554: PUSH
29555: LD_INT 75
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29563: LD_VAR 0 6
29567: PPUSH
29568: CALL_OW 257
29572: PUSH
29573: LD_INT 15
29575: EQUAL
29576: IFFALSE 29597
// points := [ 10 , 5 , 3 ] ;
29578: LD_ADDR_VAR 0 9
29582: PUSH
29583: LD_INT 10
29585: PUSH
29586: LD_INT 5
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29597: LD_VAR 0 6
29601: PPUSH
29602: CALL_OW 257
29606: PUSH
29607: LD_INT 14
29609: EQUAL
29610: IFFALSE 29631
// points := [ 10 , 0 , 0 ] ;
29612: LD_ADDR_VAR 0 9
29616: PUSH
29617: LD_INT 10
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: LIST
29630: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29631: LD_VAR 0 6
29635: PPUSH
29636: CALL_OW 257
29640: PUSH
29641: LD_INT 11
29643: EQUAL
29644: IFFALSE 29665
// points := [ 30 , 10 , 5 ] ;
29646: LD_ADDR_VAR 0 9
29650: PUSH
29651: LD_INT 30
29653: PUSH
29654: LD_INT 10
29656: PUSH
29657: LD_INT 5
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29665: LD_VAR 0 1
29669: PPUSH
29670: LD_INT 5
29672: PPUSH
29673: CALL_OW 321
29677: PUSH
29678: LD_INT 2
29680: EQUAL
29681: IFFALSE 29698
// bpoints := bpoints * 1.8 ;
29683: LD_ADDR_VAR 0 10
29687: PUSH
29688: LD_VAR 0 10
29692: PUSH
29693: LD_REAL  1.80000000000000E+0000
29696: MUL
29697: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29698: LD_VAR 0 6
29702: PPUSH
29703: CALL_OW 257
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: LD_INT 3
29716: PUSH
29717: LD_INT 4
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: IN
29726: PUSH
29727: LD_VAR 0 1
29731: PPUSH
29732: LD_INT 51
29734: PPUSH
29735: CALL_OW 321
29739: PUSH
29740: LD_INT 2
29742: EQUAL
29743: AND
29744: IFFALSE 29761
// bpoints := bpoints * 1.2 ;
29746: LD_ADDR_VAR 0 10
29750: PUSH
29751: LD_VAR 0 10
29755: PUSH
29756: LD_REAL  1.20000000000000E+0000
29759: MUL
29760: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29761: LD_VAR 0 6
29765: PPUSH
29766: CALL_OW 257
29770: PUSH
29771: LD_INT 5
29773: PUSH
29774: LD_INT 7
29776: PUSH
29777: LD_INT 9
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: LIST
29784: IN
29785: PUSH
29786: LD_VAR 0 1
29790: PPUSH
29791: LD_INT 52
29793: PPUSH
29794: CALL_OW 321
29798: PUSH
29799: LD_INT 2
29801: EQUAL
29802: AND
29803: IFFALSE 29820
// bpoints := bpoints * 1.5 ;
29805: LD_ADDR_VAR 0 10
29809: PUSH
29810: LD_VAR 0 10
29814: PUSH
29815: LD_REAL  1.50000000000000E+0000
29818: MUL
29819: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_INT 66
29827: PPUSH
29828: CALL_OW 321
29832: PUSH
29833: LD_INT 2
29835: EQUAL
29836: IFFALSE 29853
// bpoints := bpoints * 1.1 ;
29838: LD_ADDR_VAR 0 10
29842: PUSH
29843: LD_VAR 0 10
29847: PUSH
29848: LD_REAL  1.10000000000000E+0000
29851: MUL
29852: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29853: LD_ADDR_VAR 0 10
29857: PUSH
29858: LD_VAR 0 10
29862: PUSH
29863: LD_VAR 0 6
29867: PPUSH
29868: LD_INT 1
29870: PPUSH
29871: CALL_OW 259
29875: PUSH
29876: LD_REAL  1.15000000000000E+0000
29879: MUL
29880: MUL
29881: ST_TO_ADDR
// end ; unit_vehicle :
29882: GO 30712
29884: LD_INT 2
29886: DOUBLE
29887: EQUAL
29888: IFTRUE 29892
29890: GO 30700
29892: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29893: LD_VAR 0 6
29897: PPUSH
29898: CALL_OW 264
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: LD_INT 42
29908: PUSH
29909: LD_INT 24
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: IN
29917: IFFALSE 29938
// points := [ 25 , 5 , 3 ] ;
29919: LD_ADDR_VAR 0 9
29923: PUSH
29924: LD_INT 25
29926: PUSH
29927: LD_INT 5
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29938: LD_VAR 0 6
29942: PPUSH
29943: CALL_OW 264
29947: PUSH
29948: LD_INT 4
29950: PUSH
29951: LD_INT 43
29953: PUSH
29954: LD_INT 25
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: IN
29962: IFFALSE 29983
// points := [ 40 , 15 , 5 ] ;
29964: LD_ADDR_VAR 0 9
29968: PUSH
29969: LD_INT 40
29971: PUSH
29972: LD_INT 15
29974: PUSH
29975: LD_INT 5
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29983: LD_VAR 0 6
29987: PPUSH
29988: CALL_OW 264
29992: PUSH
29993: LD_INT 3
29995: PUSH
29996: LD_INT 23
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: IN
30003: IFFALSE 30024
// points := [ 7 , 25 , 8 ] ;
30005: LD_ADDR_VAR 0 9
30009: PUSH
30010: LD_INT 7
30012: PUSH
30013: LD_INT 25
30015: PUSH
30016: LD_INT 8
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30024: LD_VAR 0 6
30028: PPUSH
30029: CALL_OW 264
30033: PUSH
30034: LD_INT 5
30036: PUSH
30037: LD_INT 27
30039: PUSH
30040: LD_INT 44
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: IN
30048: IFFALSE 30069
// points := [ 14 , 50 , 16 ] ;
30050: LD_ADDR_VAR 0 9
30054: PUSH
30055: LD_INT 14
30057: PUSH
30058: LD_INT 50
30060: PUSH
30061: LD_INT 16
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30069: LD_VAR 0 6
30073: PPUSH
30074: CALL_OW 264
30078: PUSH
30079: LD_INT 6
30081: PUSH
30082: LD_INT 46
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: IN
30089: IFFALSE 30110
// points := [ 32 , 120 , 70 ] ;
30091: LD_ADDR_VAR 0 9
30095: PUSH
30096: LD_INT 32
30098: PUSH
30099: LD_INT 120
30101: PUSH
30102: LD_INT 70
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30110: LD_VAR 0 6
30114: PPUSH
30115: CALL_OW 264
30119: PUSH
30120: LD_INT 7
30122: PUSH
30123: LD_INT 28
30125: PUSH
30126: LD_INT 45
30128: PUSH
30129: LD_EXP 44
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: IN
30140: IFFALSE 30161
// points := [ 35 , 20 , 45 ] ;
30142: LD_ADDR_VAR 0 9
30146: PUSH
30147: LD_INT 35
30149: PUSH
30150: LD_INT 20
30152: PUSH
30153: LD_INT 45
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30161: LD_VAR 0 6
30165: PPUSH
30166: CALL_OW 264
30170: PUSH
30171: LD_INT 47
30173: PUSH
30174: EMPTY
30175: LIST
30176: IN
30177: IFFALSE 30198
// points := [ 67 , 45 , 75 ] ;
30179: LD_ADDR_VAR 0 9
30183: PUSH
30184: LD_INT 67
30186: PUSH
30187: LD_INT 45
30189: PUSH
30190: LD_INT 75
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30198: LD_VAR 0 6
30202: PPUSH
30203: CALL_OW 264
30207: PUSH
30208: LD_INT 26
30210: PUSH
30211: EMPTY
30212: LIST
30213: IN
30214: IFFALSE 30235
// points := [ 120 , 30 , 80 ] ;
30216: LD_ADDR_VAR 0 9
30220: PUSH
30221: LD_INT 120
30223: PUSH
30224: LD_INT 30
30226: PUSH
30227: LD_INT 80
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30235: LD_VAR 0 6
30239: PPUSH
30240: CALL_OW 264
30244: PUSH
30245: LD_INT 22
30247: PUSH
30248: EMPTY
30249: LIST
30250: IN
30251: IFFALSE 30272
// points := [ 40 , 1 , 1 ] ;
30253: LD_ADDR_VAR 0 9
30257: PUSH
30258: LD_INT 40
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30272: LD_VAR 0 6
30276: PPUSH
30277: CALL_OW 264
30281: PUSH
30282: LD_INT 29
30284: PUSH
30285: EMPTY
30286: LIST
30287: IN
30288: IFFALSE 30309
// points := [ 70 , 200 , 400 ] ;
30290: LD_ADDR_VAR 0 9
30294: PUSH
30295: LD_INT 70
30297: PUSH
30298: LD_INT 200
30300: PUSH
30301: LD_INT 400
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30309: LD_VAR 0 6
30313: PPUSH
30314: CALL_OW 264
30318: PUSH
30319: LD_INT 14
30321: PUSH
30322: LD_INT 53
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: IN
30329: IFFALSE 30350
// points := [ 40 , 10 , 20 ] ;
30331: LD_ADDR_VAR 0 9
30335: PUSH
30336: LD_INT 40
30338: PUSH
30339: LD_INT 10
30341: PUSH
30342: LD_INT 20
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30350: LD_VAR 0 6
30354: PPUSH
30355: CALL_OW 264
30359: PUSH
30360: LD_INT 9
30362: PUSH
30363: EMPTY
30364: LIST
30365: IN
30366: IFFALSE 30387
// points := [ 5 , 70 , 20 ] ;
30368: LD_ADDR_VAR 0 9
30372: PUSH
30373: LD_INT 5
30375: PUSH
30376: LD_INT 70
30378: PUSH
30379: LD_INT 20
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30387: LD_VAR 0 6
30391: PPUSH
30392: CALL_OW 264
30396: PUSH
30397: LD_INT 10
30399: PUSH
30400: EMPTY
30401: LIST
30402: IN
30403: IFFALSE 30424
// points := [ 35 , 110 , 70 ] ;
30405: LD_ADDR_VAR 0 9
30409: PUSH
30410: LD_INT 35
30412: PUSH
30413: LD_INT 110
30415: PUSH
30416: LD_INT 70
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30424: LD_VAR 0 6
30428: PPUSH
30429: CALL_OW 265
30433: PUSH
30434: LD_INT 25
30436: EQUAL
30437: IFFALSE 30458
// points := [ 80 , 65 , 100 ] ;
30439: LD_ADDR_VAR 0 9
30443: PUSH
30444: LD_INT 80
30446: PUSH
30447: LD_INT 65
30449: PUSH
30450: LD_INT 100
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30458: LD_VAR 0 6
30462: PPUSH
30463: CALL_OW 263
30467: PUSH
30468: LD_INT 1
30470: EQUAL
30471: IFFALSE 30506
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30473: LD_ADDR_VAR 0 10
30477: PUSH
30478: LD_VAR 0 10
30482: PUSH
30483: LD_VAR 0 6
30487: PPUSH
30488: CALL_OW 311
30492: PPUSH
30493: LD_INT 3
30495: PPUSH
30496: CALL_OW 259
30500: PUSH
30501: LD_INT 4
30503: MUL
30504: MUL
30505: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30506: LD_VAR 0 6
30510: PPUSH
30511: CALL_OW 263
30515: PUSH
30516: LD_INT 2
30518: EQUAL
30519: IFFALSE 30570
// begin j := IsControledBy ( i ) ;
30521: LD_ADDR_VAR 0 7
30525: PUSH
30526: LD_VAR 0 6
30530: PPUSH
30531: CALL_OW 312
30535: ST_TO_ADDR
// if j then
30536: LD_VAR 0 7
30540: IFFALSE 30570
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30542: LD_ADDR_VAR 0 10
30546: PUSH
30547: LD_VAR 0 10
30551: PUSH
30552: LD_VAR 0 7
30556: PPUSH
30557: LD_INT 3
30559: PPUSH
30560: CALL_OW 259
30564: PUSH
30565: LD_INT 3
30567: MUL
30568: MUL
30569: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30570: LD_VAR 0 6
30574: PPUSH
30575: CALL_OW 264
30579: PUSH
30580: LD_INT 5
30582: PUSH
30583: LD_INT 6
30585: PUSH
30586: LD_INT 46
30588: PUSH
30589: LD_INT 44
30591: PUSH
30592: LD_INT 47
30594: PUSH
30595: LD_INT 45
30597: PUSH
30598: LD_INT 28
30600: PUSH
30601: LD_INT 7
30603: PUSH
30604: LD_INT 27
30606: PUSH
30607: LD_INT 29
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: IN
30622: PUSH
30623: LD_VAR 0 1
30627: PPUSH
30628: LD_INT 52
30630: PPUSH
30631: CALL_OW 321
30635: PUSH
30636: LD_INT 2
30638: EQUAL
30639: AND
30640: IFFALSE 30657
// bpoints := bpoints * 1.2 ;
30642: LD_ADDR_VAR 0 10
30646: PUSH
30647: LD_VAR 0 10
30651: PUSH
30652: LD_REAL  1.20000000000000E+0000
30655: MUL
30656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30657: LD_VAR 0 6
30661: PPUSH
30662: CALL_OW 264
30666: PUSH
30667: LD_INT 6
30669: PUSH
30670: LD_INT 46
30672: PUSH
30673: LD_INT 47
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: IN
30681: IFFALSE 30698
// bpoints := bpoints * 1.2 ;
30683: LD_ADDR_VAR 0 10
30687: PUSH
30688: LD_VAR 0 10
30692: PUSH
30693: LD_REAL  1.20000000000000E+0000
30696: MUL
30697: ST_TO_ADDR
// end ; unit_building :
30698: GO 30712
30700: LD_INT 3
30702: DOUBLE
30703: EQUAL
30704: IFTRUE 30708
30706: GO 30711
30708: POP
// ; end ;
30709: GO 30712
30711: POP
// for j = 1 to 3 do
30712: LD_ADDR_VAR 0 7
30716: PUSH
30717: DOUBLE
30718: LD_INT 1
30720: DEC
30721: ST_TO_ADDR
30722: LD_INT 3
30724: PUSH
30725: FOR_TO
30726: IFFALSE 30779
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30728: LD_ADDR_VAR 0 5
30732: PUSH
30733: LD_VAR 0 5
30737: PPUSH
30738: LD_VAR 0 7
30742: PPUSH
30743: LD_VAR 0 5
30747: PUSH
30748: LD_VAR 0 7
30752: ARRAY
30753: PUSH
30754: LD_VAR 0 9
30758: PUSH
30759: LD_VAR 0 7
30763: ARRAY
30764: PUSH
30765: LD_VAR 0 10
30769: MUL
30770: PLUS
30771: PPUSH
30772: CALL_OW 1
30776: ST_TO_ADDR
30777: GO 30725
30779: POP
30780: POP
// end ;
30781: GO 29258
30783: POP
30784: POP
// result := Replace ( result , 4 , tmp ) ;
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: LD_VAR 0 5
30794: PPUSH
30795: LD_INT 4
30797: PPUSH
30798: LD_VAR 0 8
30802: PPUSH
30803: CALL_OW 1
30807: ST_TO_ADDR
// end ;
30808: LD_VAR 0 5
30812: RET
// export function DangerAtRange ( unit , range ) ; begin
30813: LD_INT 0
30815: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 255
30830: PPUSH
30831: LD_VAR 0 1
30835: PPUSH
30836: CALL_OW 250
30840: PPUSH
30841: LD_VAR 0 1
30845: PPUSH
30846: CALL_OW 251
30850: PPUSH
30851: LD_VAR 0 2
30855: PPUSH
30856: CALL 29110 0 4
30860: ST_TO_ADDR
// end ;
30861: LD_VAR 0 3
30865: RET
// export function DangerInArea ( side , area ) ; begin
30866: LD_INT 0
30868: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30869: LD_ADDR_VAR 0 3
30873: PUSH
30874: LD_VAR 0 2
30878: PPUSH
30879: LD_INT 81
30881: PUSH
30882: LD_VAR 0 1
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PPUSH
30891: CALL_OW 70
30895: ST_TO_ADDR
// end ;
30896: LD_VAR 0 3
30900: RET
// export function IsExtension ( b ) ; begin
30901: LD_INT 0
30903: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30904: LD_ADDR_VAR 0 2
30908: PUSH
30909: LD_VAR 0 1
30913: PUSH
30914: LD_INT 23
30916: PUSH
30917: LD_INT 20
30919: PUSH
30920: LD_INT 22
30922: PUSH
30923: LD_INT 17
30925: PUSH
30926: LD_INT 24
30928: PUSH
30929: LD_INT 21
30931: PUSH
30932: LD_INT 19
30934: PUSH
30935: LD_INT 16
30937: PUSH
30938: LD_INT 25
30940: PUSH
30941: LD_INT 18
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: IN
30956: ST_TO_ADDR
// end ;
30957: LD_VAR 0 2
30961: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30962: LD_INT 0
30964: PPUSH
30965: PPUSH
30966: PPUSH
// result := [ ] ;
30967: LD_ADDR_VAR 0 4
30971: PUSH
30972: EMPTY
30973: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30974: LD_ADDR_VAR 0 5
30978: PUSH
30979: LD_VAR 0 2
30983: PPUSH
30984: LD_INT 21
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PPUSH
30994: CALL_OW 70
30998: ST_TO_ADDR
// if not tmp then
30999: LD_VAR 0 5
31003: NOT
31004: IFFALSE 31008
// exit ;
31006: GO 31072
// if checkLink then
31008: LD_VAR 0 3
31012: IFFALSE 31062
// begin for i in tmp do
31014: LD_ADDR_VAR 0 6
31018: PUSH
31019: LD_VAR 0 5
31023: PUSH
31024: FOR_IN
31025: IFFALSE 31060
// if GetBase ( i ) <> base then
31027: LD_VAR 0 6
31031: PPUSH
31032: CALL_OW 274
31036: PUSH
31037: LD_VAR 0 1
31041: NONEQUAL
31042: IFFALSE 31058
// ComLinkToBase ( base , i ) ;
31044: LD_VAR 0 1
31048: PPUSH
31049: LD_VAR 0 6
31053: PPUSH
31054: CALL_OW 169
31058: GO 31024
31060: POP
31061: POP
// end ; result := tmp ;
31062: LD_ADDR_VAR 0 4
31066: PUSH
31067: LD_VAR 0 5
31071: ST_TO_ADDR
// end ;
31072: LD_VAR 0 4
31076: RET
// export function ComComplete ( units , b ) ; var i ; begin
31077: LD_INT 0
31079: PPUSH
31080: PPUSH
// if not units then
31081: LD_VAR 0 1
31085: NOT
31086: IFFALSE 31090
// exit ;
31088: GO 31180
// for i in units do
31090: LD_ADDR_VAR 0 4
31094: PUSH
31095: LD_VAR 0 1
31099: PUSH
31100: FOR_IN
31101: IFFALSE 31178
// if BuildingStatus ( b ) = bs_build then
31103: LD_VAR 0 2
31107: PPUSH
31108: CALL_OW 461
31112: PUSH
31113: LD_INT 1
31115: EQUAL
31116: IFFALSE 31176
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31118: LD_VAR 0 4
31122: PPUSH
31123: LD_STRING h
31125: PUSH
31126: LD_VAR 0 2
31130: PPUSH
31131: CALL_OW 250
31135: PUSH
31136: LD_VAR 0 2
31140: PPUSH
31141: CALL_OW 251
31145: PUSH
31146: LD_VAR 0 2
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: PUSH
31169: EMPTY
31170: LIST
31171: PPUSH
31172: CALL_OW 446
31176: GO 31100
31178: POP
31179: POP
// end ;
31180: LD_VAR 0 3
31184: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31185: LD_INT 0
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
31191: PPUSH
31192: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31193: LD_VAR 0 1
31197: NOT
31198: PUSH
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 263
31208: PUSH
31209: LD_INT 2
31211: NONEQUAL
31212: OR
31213: IFFALSE 31217
// exit ;
31215: GO 31533
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31217: LD_ADDR_VAR 0 6
31221: PUSH
31222: LD_INT 22
31224: PUSH
31225: LD_VAR 0 1
31229: PPUSH
31230: CALL_OW 255
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 2
31241: PUSH
31242: LD_INT 30
31244: PUSH
31245: LD_INT 36
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 34
31254: PUSH
31255: LD_INT 31
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PPUSH
31271: CALL_OW 69
31275: ST_TO_ADDR
// if not tmp then
31276: LD_VAR 0 6
31280: NOT
31281: IFFALSE 31285
// exit ;
31283: GO 31533
// result := [ ] ;
31285: LD_ADDR_VAR 0 2
31289: PUSH
31290: EMPTY
31291: ST_TO_ADDR
// for i in tmp do
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: LD_VAR 0 6
31301: PUSH
31302: FOR_IN
31303: IFFALSE 31374
// begin t := UnitsInside ( i ) ;
31305: LD_ADDR_VAR 0 4
31309: PUSH
31310: LD_VAR 0 3
31314: PPUSH
31315: CALL_OW 313
31319: ST_TO_ADDR
// if t then
31320: LD_VAR 0 4
31324: IFFALSE 31372
// for j in t do
31326: LD_ADDR_VAR 0 7
31330: PUSH
31331: LD_VAR 0 4
31335: PUSH
31336: FOR_IN
31337: IFFALSE 31370
// result := Replace ( result , result + 1 , j ) ;
31339: LD_ADDR_VAR 0 2
31343: PUSH
31344: LD_VAR 0 2
31348: PPUSH
31349: LD_VAR 0 2
31353: PUSH
31354: LD_INT 1
31356: PLUS
31357: PPUSH
31358: LD_VAR 0 7
31362: PPUSH
31363: CALL_OW 1
31367: ST_TO_ADDR
31368: GO 31336
31370: POP
31371: POP
// end ;
31372: GO 31302
31374: POP
31375: POP
// if not result then
31376: LD_VAR 0 2
31380: NOT
31381: IFFALSE 31385
// exit ;
31383: GO 31533
// mech := result [ 1 ] ;
31385: LD_ADDR_VAR 0 5
31389: PUSH
31390: LD_VAR 0 2
31394: PUSH
31395: LD_INT 1
31397: ARRAY
31398: ST_TO_ADDR
// if result > 1 then
31399: LD_VAR 0 2
31403: PUSH
31404: LD_INT 1
31406: GREATER
31407: IFFALSE 31519
// begin for i = 2 to result do
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: DOUBLE
31415: LD_INT 2
31417: DEC
31418: ST_TO_ADDR
31419: LD_VAR 0 2
31423: PUSH
31424: FOR_TO
31425: IFFALSE 31517
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31427: LD_ADDR_VAR 0 4
31431: PUSH
31432: LD_VAR 0 2
31436: PUSH
31437: LD_VAR 0 3
31441: ARRAY
31442: PPUSH
31443: LD_INT 3
31445: PPUSH
31446: CALL_OW 259
31450: PUSH
31451: LD_VAR 0 2
31455: PUSH
31456: LD_VAR 0 3
31460: ARRAY
31461: PPUSH
31462: CALL_OW 432
31466: MINUS
31467: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31468: LD_VAR 0 4
31472: PUSH
31473: LD_VAR 0 5
31477: PPUSH
31478: LD_INT 3
31480: PPUSH
31481: CALL_OW 259
31485: PUSH
31486: LD_VAR 0 5
31490: PPUSH
31491: CALL_OW 432
31495: MINUS
31496: GREATEREQUAL
31497: IFFALSE 31515
// mech := result [ i ] ;
31499: LD_ADDR_VAR 0 5
31503: PUSH
31504: LD_VAR 0 2
31508: PUSH
31509: LD_VAR 0 3
31513: ARRAY
31514: ST_TO_ADDR
// end ;
31515: GO 31424
31517: POP
31518: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31519: LD_VAR 0 1
31523: PPUSH
31524: LD_VAR 0 5
31528: PPUSH
31529: CALL_OW 135
// end ;
31533: LD_VAR 0 2
31537: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31538: LD_INT 0
31540: PPUSH
31541: PPUSH
31542: PPUSH
31543: PPUSH
31544: PPUSH
31545: PPUSH
31546: PPUSH
31547: PPUSH
31548: PPUSH
31549: PPUSH
31550: PPUSH
31551: PPUSH
31552: PPUSH
// result := [ ] ;
31553: LD_ADDR_VAR 0 7
31557: PUSH
31558: EMPTY
31559: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31560: LD_VAR 0 1
31564: PPUSH
31565: CALL_OW 266
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: IN
31580: NOT
31581: IFFALSE 31585
// exit ;
31583: GO 33219
// if name then
31585: LD_VAR 0 3
31589: IFFALSE 31605
// SetBName ( base_dep , name ) ;
31591: LD_VAR 0 1
31595: PPUSH
31596: LD_VAR 0 3
31600: PPUSH
31601: CALL_OW 500
// base := GetBase ( base_dep ) ;
31605: LD_ADDR_VAR 0 15
31609: PUSH
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL_OW 274
31619: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31620: LD_ADDR_VAR 0 16
31624: PUSH
31625: LD_VAR 0 1
31629: PPUSH
31630: CALL_OW 255
31634: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31635: LD_ADDR_VAR 0 17
31639: PUSH
31640: LD_VAR 0 1
31644: PPUSH
31645: CALL_OW 248
31649: ST_TO_ADDR
// if sources then
31650: LD_VAR 0 5
31654: IFFALSE 31701
// for i = 1 to 3 do
31656: LD_ADDR_VAR 0 8
31660: PUSH
31661: DOUBLE
31662: LD_INT 1
31664: DEC
31665: ST_TO_ADDR
31666: LD_INT 3
31668: PUSH
31669: FOR_TO
31670: IFFALSE 31699
// AddResourceType ( base , i , sources [ i ] ) ;
31672: LD_VAR 0 15
31676: PPUSH
31677: LD_VAR 0 8
31681: PPUSH
31682: LD_VAR 0 5
31686: PUSH
31687: LD_VAR 0 8
31691: ARRAY
31692: PPUSH
31693: CALL_OW 276
31697: GO 31669
31699: POP
31700: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31701: LD_ADDR_VAR 0 18
31705: PUSH
31706: LD_VAR 0 15
31710: PPUSH
31711: LD_VAR 0 2
31715: PPUSH
31716: LD_INT 1
31718: PPUSH
31719: CALL 30962 0 3
31723: ST_TO_ADDR
// InitHc ;
31724: CALL_OW 19
// InitUc ;
31728: CALL_OW 18
// uc_side := side ;
31732: LD_ADDR_OWVAR 20
31736: PUSH
31737: LD_VAR 0 16
31741: ST_TO_ADDR
// uc_nation := nation ;
31742: LD_ADDR_OWVAR 21
31746: PUSH
31747: LD_VAR 0 17
31751: ST_TO_ADDR
// if buildings then
31752: LD_VAR 0 18
31756: IFFALSE 33078
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31758: LD_ADDR_VAR 0 19
31762: PUSH
31763: LD_VAR 0 18
31767: PPUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 30
31773: PUSH
31774: LD_INT 29
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 30
31783: PUSH
31784: LD_INT 30
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: PPUSH
31796: CALL_OW 72
31800: ST_TO_ADDR
// if tmp then
31801: LD_VAR 0 19
31805: IFFALSE 31853
// for i in tmp do
31807: LD_ADDR_VAR 0 8
31811: PUSH
31812: LD_VAR 0 19
31816: PUSH
31817: FOR_IN
31818: IFFALSE 31851
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31820: LD_VAR 0 8
31824: PPUSH
31825: CALL_OW 250
31829: PPUSH
31830: LD_VAR 0 8
31834: PPUSH
31835: CALL_OW 251
31839: PPUSH
31840: LD_VAR 0 16
31844: PPUSH
31845: CALL_OW 441
31849: GO 31817
31851: POP
31852: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31853: LD_VAR 0 18
31857: PPUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 30
31863: PUSH
31864: LD_INT 32
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: LD_INT 33
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: PPUSH
31886: CALL_OW 72
31890: IFFALSE 31978
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31892: LD_ADDR_VAR 0 8
31896: PUSH
31897: LD_VAR 0 18
31901: PPUSH
31902: LD_INT 2
31904: PUSH
31905: LD_INT 30
31907: PUSH
31908: LD_INT 32
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 30
31917: PUSH
31918: LD_INT 33
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: PPUSH
31930: CALL_OW 72
31934: PUSH
31935: FOR_IN
31936: IFFALSE 31976
// begin if not GetBWeapon ( i ) then
31938: LD_VAR 0 8
31942: PPUSH
31943: CALL_OW 269
31947: NOT
31948: IFFALSE 31974
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31950: LD_VAR 0 8
31954: PPUSH
31955: LD_VAR 0 8
31959: PPUSH
31960: LD_VAR 0 2
31964: PPUSH
31965: CALL 33224 0 2
31969: PPUSH
31970: CALL_OW 431
// end ;
31974: GO 31935
31976: POP
31977: POP
// end ; for i = 1 to personel do
31978: LD_ADDR_VAR 0 8
31982: PUSH
31983: DOUBLE
31984: LD_INT 1
31986: DEC
31987: ST_TO_ADDR
31988: LD_VAR 0 6
31992: PUSH
31993: FOR_TO
31994: IFFALSE 33058
// begin if i > 4 then
31996: LD_VAR 0 8
32000: PUSH
32001: LD_INT 4
32003: GREATER
32004: IFFALSE 32008
// break ;
32006: GO 33058
// case i of 1 :
32008: LD_VAR 0 8
32012: PUSH
32013: LD_INT 1
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32101
32021: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32022: LD_ADDR_VAR 0 12
32026: PUSH
32027: LD_VAR 0 18
32031: PPUSH
32032: LD_INT 22
32034: PUSH
32035: LD_VAR 0 16
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 58
32046: PUSH
32047: EMPTY
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 30
32055: PUSH
32056: LD_INT 32
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 30
32065: PUSH
32066: LD_INT 4
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 30
32075: PUSH
32076: LD_INT 5
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 72
32098: ST_TO_ADDR
32099: GO 32323
32101: LD_INT 2
32103: DOUBLE
32104: EQUAL
32105: IFTRUE 32109
32107: GO 32171
32109: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32110: LD_ADDR_VAR 0 12
32114: PUSH
32115: LD_VAR 0 18
32119: PPUSH
32120: LD_INT 22
32122: PUSH
32123: LD_VAR 0 16
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: LD_INT 30
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 30
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PPUSH
32164: CALL_OW 72
32168: ST_TO_ADDR
32169: GO 32323
32171: LD_INT 3
32173: DOUBLE
32174: EQUAL
32175: IFTRUE 32179
32177: GO 32241
32179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32180: LD_ADDR_VAR 0 12
32184: PUSH
32185: LD_VAR 0 18
32189: PPUSH
32190: LD_INT 22
32192: PUSH
32193: LD_VAR 0 16
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 30
32217: PUSH
32218: LD_INT 3
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PPUSH
32234: CALL_OW 72
32238: ST_TO_ADDR
32239: GO 32323
32241: LD_INT 4
32243: DOUBLE
32244: EQUAL
32245: IFTRUE 32249
32247: GO 32322
32249: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32250: LD_ADDR_VAR 0 12
32254: PUSH
32255: LD_VAR 0 18
32259: PPUSH
32260: LD_INT 22
32262: PUSH
32263: LD_VAR 0 16
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: LD_INT 30
32277: PUSH
32278: LD_INT 6
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 30
32287: PUSH
32288: LD_INT 7
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 30
32297: PUSH
32298: LD_INT 8
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PPUSH
32315: CALL_OW 72
32319: ST_TO_ADDR
32320: GO 32323
32322: POP
// if i = 1 then
32323: LD_VAR 0 8
32327: PUSH
32328: LD_INT 1
32330: EQUAL
32331: IFFALSE 32442
// begin tmp := [ ] ;
32333: LD_ADDR_VAR 0 19
32337: PUSH
32338: EMPTY
32339: ST_TO_ADDR
// for j in f do
32340: LD_ADDR_VAR 0 9
32344: PUSH
32345: LD_VAR 0 12
32349: PUSH
32350: FOR_IN
32351: IFFALSE 32424
// if GetBType ( j ) = b_bunker then
32353: LD_VAR 0 9
32357: PPUSH
32358: CALL_OW 266
32362: PUSH
32363: LD_INT 32
32365: EQUAL
32366: IFFALSE 32393
// tmp := Insert ( tmp , 1 , j ) else
32368: LD_ADDR_VAR 0 19
32372: PUSH
32373: LD_VAR 0 19
32377: PPUSH
32378: LD_INT 1
32380: PPUSH
32381: LD_VAR 0 9
32385: PPUSH
32386: CALL_OW 2
32390: ST_TO_ADDR
32391: GO 32422
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32393: LD_ADDR_VAR 0 19
32397: PUSH
32398: LD_VAR 0 19
32402: PPUSH
32403: LD_VAR 0 19
32407: PUSH
32408: LD_INT 1
32410: PLUS
32411: PPUSH
32412: LD_VAR 0 9
32416: PPUSH
32417: CALL_OW 2
32421: ST_TO_ADDR
32422: GO 32350
32424: POP
32425: POP
// if tmp then
32426: LD_VAR 0 19
32430: IFFALSE 32442
// f := tmp ;
32432: LD_ADDR_VAR 0 12
32436: PUSH
32437: LD_VAR 0 19
32441: ST_TO_ADDR
// end ; x := personel [ i ] ;
32442: LD_ADDR_VAR 0 13
32446: PUSH
32447: LD_VAR 0 6
32451: PUSH
32452: LD_VAR 0 8
32456: ARRAY
32457: ST_TO_ADDR
// if x = - 1 then
32458: LD_VAR 0 13
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: EQUAL
32467: IFFALSE 32676
// begin for j in f do
32469: LD_ADDR_VAR 0 9
32473: PUSH
32474: LD_VAR 0 12
32478: PUSH
32479: FOR_IN
32480: IFFALSE 32672
// repeat InitHc ;
32482: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32486: LD_VAR 0 9
32490: PPUSH
32491: CALL_OW 266
32495: PUSH
32496: LD_INT 5
32498: EQUAL
32499: IFFALSE 32569
// begin if UnitsInside ( j ) < 3 then
32501: LD_VAR 0 9
32505: PPUSH
32506: CALL_OW 313
32510: PUSH
32511: LD_INT 3
32513: LESS
32514: IFFALSE 32550
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32516: LD_INT 0
32518: PPUSH
32519: LD_INT 5
32521: PUSH
32522: LD_INT 8
32524: PUSH
32525: LD_INT 9
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: PUSH
32533: LD_VAR 0 17
32537: ARRAY
32538: PPUSH
32539: LD_VAR 0 4
32543: PPUSH
32544: CALL_OW 380
32548: GO 32567
// PrepareHuman ( false , i , skill ) ;
32550: LD_INT 0
32552: PPUSH
32553: LD_VAR 0 8
32557: PPUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: CALL_OW 380
// end else
32567: GO 32586
// PrepareHuman ( false , i , skill ) ;
32569: LD_INT 0
32571: PPUSH
32572: LD_VAR 0 8
32576: PPUSH
32577: LD_VAR 0 4
32581: PPUSH
32582: CALL_OW 380
// un := CreateHuman ;
32586: LD_ADDR_VAR 0 14
32590: PUSH
32591: CALL_OW 44
32595: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32596: LD_ADDR_VAR 0 7
32600: PUSH
32601: LD_VAR 0 7
32605: PPUSH
32606: LD_INT 1
32608: PPUSH
32609: LD_VAR 0 14
32613: PPUSH
32614: CALL_OW 2
32618: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32619: LD_VAR 0 14
32623: PPUSH
32624: LD_VAR 0 9
32628: PPUSH
32629: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32633: LD_VAR 0 9
32637: PPUSH
32638: CALL_OW 313
32642: PUSH
32643: LD_INT 6
32645: EQUAL
32646: PUSH
32647: LD_VAR 0 9
32651: PPUSH
32652: CALL_OW 266
32656: PUSH
32657: LD_INT 32
32659: PUSH
32660: LD_INT 31
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: IN
32667: OR
32668: IFFALSE 32482
32670: GO 32479
32672: POP
32673: POP
// end else
32674: GO 33056
// for j = 1 to x do
32676: LD_ADDR_VAR 0 9
32680: PUSH
32681: DOUBLE
32682: LD_INT 1
32684: DEC
32685: ST_TO_ADDR
32686: LD_VAR 0 13
32690: PUSH
32691: FOR_TO
32692: IFFALSE 33054
// begin InitHc ;
32694: CALL_OW 19
// if not f then
32698: LD_VAR 0 12
32702: NOT
32703: IFFALSE 32792
// begin PrepareHuman ( false , i , skill ) ;
32705: LD_INT 0
32707: PPUSH
32708: LD_VAR 0 8
32712: PPUSH
32713: LD_VAR 0 4
32717: PPUSH
32718: CALL_OW 380
// un := CreateHuman ;
32722: LD_ADDR_VAR 0 14
32726: PUSH
32727: CALL_OW 44
32731: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32732: LD_ADDR_VAR 0 7
32736: PUSH
32737: LD_VAR 0 7
32741: PPUSH
32742: LD_INT 1
32744: PPUSH
32745: LD_VAR 0 14
32749: PPUSH
32750: CALL_OW 2
32754: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32755: LD_VAR 0 14
32759: PPUSH
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 250
32769: PPUSH
32770: LD_VAR 0 1
32774: PPUSH
32775: CALL_OW 251
32779: PPUSH
32780: LD_INT 10
32782: PPUSH
32783: LD_INT 0
32785: PPUSH
32786: CALL_OW 50
// continue ;
32790: GO 32691
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32792: LD_VAR 0 12
32796: PUSH
32797: LD_INT 1
32799: ARRAY
32800: PPUSH
32801: CALL_OW 313
32805: PUSH
32806: LD_VAR 0 12
32810: PUSH
32811: LD_INT 1
32813: ARRAY
32814: PPUSH
32815: CALL_OW 266
32819: PUSH
32820: LD_INT 32
32822: PUSH
32823: LD_INT 31
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: IN
32830: AND
32831: PUSH
32832: LD_VAR 0 12
32836: PUSH
32837: LD_INT 1
32839: ARRAY
32840: PPUSH
32841: CALL_OW 313
32845: PUSH
32846: LD_INT 6
32848: EQUAL
32849: OR
32850: IFFALSE 32870
// f := Delete ( f , 1 ) ;
32852: LD_ADDR_VAR 0 12
32856: PUSH
32857: LD_VAR 0 12
32861: PPUSH
32862: LD_INT 1
32864: PPUSH
32865: CALL_OW 3
32869: ST_TO_ADDR
// if not f then
32870: LD_VAR 0 12
32874: NOT
32875: IFFALSE 32893
// begin x := x + 2 ;
32877: LD_ADDR_VAR 0 13
32881: PUSH
32882: LD_VAR 0 13
32886: PUSH
32887: LD_INT 2
32889: PLUS
32890: ST_TO_ADDR
// continue ;
32891: GO 32691
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32893: LD_VAR 0 12
32897: PUSH
32898: LD_INT 1
32900: ARRAY
32901: PPUSH
32902: CALL_OW 266
32906: PUSH
32907: LD_INT 5
32909: EQUAL
32910: IFFALSE 32984
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32912: LD_VAR 0 12
32916: PUSH
32917: LD_INT 1
32919: ARRAY
32920: PPUSH
32921: CALL_OW 313
32925: PUSH
32926: LD_INT 3
32928: LESS
32929: IFFALSE 32965
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32931: LD_INT 0
32933: PPUSH
32934: LD_INT 5
32936: PUSH
32937: LD_INT 8
32939: PUSH
32940: LD_INT 9
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: PUSH
32948: LD_VAR 0 17
32952: ARRAY
32953: PPUSH
32954: LD_VAR 0 4
32958: PPUSH
32959: CALL_OW 380
32963: GO 32982
// PrepareHuman ( false , i , skill ) ;
32965: LD_INT 0
32967: PPUSH
32968: LD_VAR 0 8
32972: PPUSH
32973: LD_VAR 0 4
32977: PPUSH
32978: CALL_OW 380
// end else
32982: GO 33001
// PrepareHuman ( false , i , skill ) ;
32984: LD_INT 0
32986: PPUSH
32987: LD_VAR 0 8
32991: PPUSH
32992: LD_VAR 0 4
32996: PPUSH
32997: CALL_OW 380
// un := CreateHuman ;
33001: LD_ADDR_VAR 0 14
33005: PUSH
33006: CALL_OW 44
33010: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33011: LD_ADDR_VAR 0 7
33015: PUSH
33016: LD_VAR 0 7
33020: PPUSH
33021: LD_INT 1
33023: PPUSH
33024: LD_VAR 0 14
33028: PPUSH
33029: CALL_OW 2
33033: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33034: LD_VAR 0 14
33038: PPUSH
33039: LD_VAR 0 12
33043: PUSH
33044: LD_INT 1
33046: ARRAY
33047: PPUSH
33048: CALL_OW 52
// end ;
33052: GO 32691
33054: POP
33055: POP
// end ;
33056: GO 31993
33058: POP
33059: POP
// result := result ^ buildings ;
33060: LD_ADDR_VAR 0 7
33064: PUSH
33065: LD_VAR 0 7
33069: PUSH
33070: LD_VAR 0 18
33074: ADD
33075: ST_TO_ADDR
// end else
33076: GO 33219
// begin for i = 1 to personel do
33078: LD_ADDR_VAR 0 8
33082: PUSH
33083: DOUBLE
33084: LD_INT 1
33086: DEC
33087: ST_TO_ADDR
33088: LD_VAR 0 6
33092: PUSH
33093: FOR_TO
33094: IFFALSE 33217
// begin if i > 4 then
33096: LD_VAR 0 8
33100: PUSH
33101: LD_INT 4
33103: GREATER
33104: IFFALSE 33108
// break ;
33106: GO 33217
// x := personel [ i ] ;
33108: LD_ADDR_VAR 0 13
33112: PUSH
33113: LD_VAR 0 6
33117: PUSH
33118: LD_VAR 0 8
33122: ARRAY
33123: ST_TO_ADDR
// if x = - 1 then
33124: LD_VAR 0 13
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: EQUAL
33133: IFFALSE 33137
// continue ;
33135: GO 33093
// PrepareHuman ( false , i , skill ) ;
33137: LD_INT 0
33139: PPUSH
33140: LD_VAR 0 8
33144: PPUSH
33145: LD_VAR 0 4
33149: PPUSH
33150: CALL_OW 380
// un := CreateHuman ;
33154: LD_ADDR_VAR 0 14
33158: PUSH
33159: CALL_OW 44
33163: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33164: LD_VAR 0 14
33168: PPUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 250
33178: PPUSH
33179: LD_VAR 0 1
33183: PPUSH
33184: CALL_OW 251
33188: PPUSH
33189: LD_INT 10
33191: PPUSH
33192: LD_INT 0
33194: PPUSH
33195: CALL_OW 50
// result := result ^ un ;
33199: LD_ADDR_VAR 0 7
33203: PUSH
33204: LD_VAR 0 7
33208: PUSH
33209: LD_VAR 0 14
33213: ADD
33214: ST_TO_ADDR
// end ;
33215: GO 33093
33217: POP
33218: POP
// end ; end ;
33219: LD_VAR 0 7
33223: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33224: LD_INT 0
33226: PPUSH
33227: PPUSH
33228: PPUSH
33229: PPUSH
33230: PPUSH
33231: PPUSH
33232: PPUSH
33233: PPUSH
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
33239: PPUSH
33240: PPUSH
33241: PPUSH
// result := false ;
33242: LD_ADDR_VAR 0 3
33246: PUSH
33247: LD_INT 0
33249: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33250: LD_VAR 0 1
33254: NOT
33255: PUSH
33256: LD_VAR 0 1
33260: PPUSH
33261: CALL_OW 266
33265: PUSH
33266: LD_INT 32
33268: PUSH
33269: LD_INT 33
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: IN
33276: NOT
33277: OR
33278: IFFALSE 33282
// exit ;
33280: GO 34391
// nat := GetNation ( tower ) ;
33282: LD_ADDR_VAR 0 12
33286: PUSH
33287: LD_VAR 0 1
33291: PPUSH
33292: CALL_OW 248
33296: ST_TO_ADDR
// side := GetSide ( tower ) ;
33297: LD_ADDR_VAR 0 16
33301: PUSH
33302: LD_VAR 0 1
33306: PPUSH
33307: CALL_OW 255
33311: ST_TO_ADDR
// x := GetX ( tower ) ;
33312: LD_ADDR_VAR 0 10
33316: PUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 250
33326: ST_TO_ADDR
// y := GetY ( tower ) ;
33327: LD_ADDR_VAR 0 11
33331: PUSH
33332: LD_VAR 0 1
33336: PPUSH
33337: CALL_OW 251
33341: ST_TO_ADDR
// if not x or not y then
33342: LD_VAR 0 10
33346: NOT
33347: PUSH
33348: LD_VAR 0 11
33352: NOT
33353: OR
33354: IFFALSE 33358
// exit ;
33356: GO 34391
// weapon := 0 ;
33358: LD_ADDR_VAR 0 18
33362: PUSH
33363: LD_INT 0
33365: ST_TO_ADDR
// fac_list := [ ] ;
33366: LD_ADDR_VAR 0 17
33370: PUSH
33371: EMPTY
33372: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33373: LD_ADDR_VAR 0 6
33377: PUSH
33378: LD_VAR 0 1
33382: PPUSH
33383: CALL_OW 274
33387: PPUSH
33388: LD_VAR 0 2
33392: PPUSH
33393: LD_INT 0
33395: PPUSH
33396: CALL 30962 0 3
33400: PPUSH
33401: LD_INT 30
33403: PUSH
33404: LD_INT 3
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PPUSH
33411: CALL_OW 72
33415: ST_TO_ADDR
// if not factories then
33416: LD_VAR 0 6
33420: NOT
33421: IFFALSE 33425
// exit ;
33423: GO 34391
// for i in factories do
33425: LD_ADDR_VAR 0 8
33429: PUSH
33430: LD_VAR 0 6
33434: PUSH
33435: FOR_IN
33436: IFFALSE 33461
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33438: LD_ADDR_VAR 0 17
33442: PUSH
33443: LD_VAR 0 17
33447: PUSH
33448: LD_VAR 0 8
33452: PPUSH
33453: CALL_OW 478
33457: UNION
33458: ST_TO_ADDR
33459: GO 33435
33461: POP
33462: POP
// if not fac_list then
33463: LD_VAR 0 17
33467: NOT
33468: IFFALSE 33472
// exit ;
33470: GO 34391
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33472: LD_ADDR_VAR 0 5
33476: PUSH
33477: LD_INT 4
33479: PUSH
33480: LD_INT 5
33482: PUSH
33483: LD_INT 9
33485: PUSH
33486: LD_INT 10
33488: PUSH
33489: LD_INT 6
33491: PUSH
33492: LD_INT 7
33494: PUSH
33495: LD_INT 11
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 27
33509: PUSH
33510: LD_INT 28
33512: PUSH
33513: LD_INT 26
33515: PUSH
33516: LD_INT 30
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 43
33527: PUSH
33528: LD_INT 44
33530: PUSH
33531: LD_INT 46
33533: PUSH
33534: LD_INT 45
33536: PUSH
33537: LD_INT 47
33539: PUSH
33540: LD_INT 49
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: PUSH
33556: LD_VAR 0 12
33560: ARRAY
33561: ST_TO_ADDR
// list := list isect fac_list ;
33562: LD_ADDR_VAR 0 5
33566: PUSH
33567: LD_VAR 0 5
33571: PUSH
33572: LD_VAR 0 17
33576: ISECT
33577: ST_TO_ADDR
// if not list then
33578: LD_VAR 0 5
33582: NOT
33583: IFFALSE 33587
// exit ;
33585: GO 34391
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33587: LD_VAR 0 12
33591: PUSH
33592: LD_INT 3
33594: EQUAL
33595: PUSH
33596: LD_INT 49
33598: PUSH
33599: LD_VAR 0 5
33603: IN
33604: AND
33605: PUSH
33606: LD_INT 31
33608: PPUSH
33609: LD_VAR 0 16
33613: PPUSH
33614: CALL_OW 321
33618: PUSH
33619: LD_INT 2
33621: EQUAL
33622: AND
33623: IFFALSE 33683
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33625: LD_INT 22
33627: PUSH
33628: LD_VAR 0 16
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 35
33639: PUSH
33640: LD_INT 49
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 91
33649: PUSH
33650: LD_VAR 0 1
33654: PUSH
33655: LD_INT 10
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: PPUSH
33668: CALL_OW 69
33672: NOT
33673: IFFALSE 33683
// weapon := ru_time_lapser ;
33675: LD_ADDR_VAR 0 18
33679: PUSH
33680: LD_INT 49
33682: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33683: LD_VAR 0 12
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: IN
33698: PUSH
33699: LD_INT 11
33701: PUSH
33702: LD_VAR 0 5
33706: IN
33707: PUSH
33708: LD_INT 30
33710: PUSH
33711: LD_VAR 0 5
33715: IN
33716: OR
33717: AND
33718: PUSH
33719: LD_INT 6
33721: PPUSH
33722: LD_VAR 0 16
33726: PPUSH
33727: CALL_OW 321
33731: PUSH
33732: LD_INT 2
33734: EQUAL
33735: AND
33736: IFFALSE 33901
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33738: LD_INT 22
33740: PUSH
33741: LD_VAR 0 16
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: LD_INT 35
33755: PUSH
33756: LD_INT 11
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 35
33765: PUSH
33766: LD_INT 30
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 91
33780: PUSH
33781: LD_VAR 0 1
33785: PUSH
33786: LD_INT 18
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: PPUSH
33799: CALL_OW 69
33803: NOT
33804: PUSH
33805: LD_INT 22
33807: PUSH
33808: LD_VAR 0 16
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: LD_INT 30
33822: PUSH
33823: LD_INT 32
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 30
33832: PUSH
33833: LD_INT 33
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 91
33847: PUSH
33848: LD_VAR 0 1
33852: PUSH
33853: LD_INT 12
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: PPUSH
33869: CALL_OW 69
33873: PUSH
33874: LD_INT 2
33876: GREATER
33877: AND
33878: IFFALSE 33901
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33880: LD_ADDR_VAR 0 18
33884: PUSH
33885: LD_INT 11
33887: PUSH
33888: LD_INT 30
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_VAR 0 12
33899: ARRAY
33900: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33901: LD_VAR 0 18
33905: NOT
33906: PUSH
33907: LD_INT 40
33909: PPUSH
33910: LD_VAR 0 16
33914: PPUSH
33915: CALL_OW 321
33919: PUSH
33920: LD_INT 2
33922: EQUAL
33923: AND
33924: PUSH
33925: LD_INT 7
33927: PUSH
33928: LD_VAR 0 5
33932: IN
33933: PUSH
33934: LD_INT 28
33936: PUSH
33937: LD_VAR 0 5
33941: IN
33942: OR
33943: PUSH
33944: LD_INT 45
33946: PUSH
33947: LD_VAR 0 5
33951: IN
33952: OR
33953: AND
33954: IFFALSE 34208
// begin hex := GetHexInfo ( x , y ) ;
33956: LD_ADDR_VAR 0 4
33960: PUSH
33961: LD_VAR 0 10
33965: PPUSH
33966: LD_VAR 0 11
33970: PPUSH
33971: CALL_OW 546
33975: ST_TO_ADDR
// if hex [ 1 ] then
33976: LD_VAR 0 4
33980: PUSH
33981: LD_INT 1
33983: ARRAY
33984: IFFALSE 33988
// exit ;
33986: GO 34391
// height := hex [ 2 ] ;
33988: LD_ADDR_VAR 0 15
33992: PUSH
33993: LD_VAR 0 4
33997: PUSH
33998: LD_INT 2
34000: ARRAY
34001: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34002: LD_ADDR_VAR 0 14
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: ST_TO_ADDR
// for i in tmp do
34025: LD_ADDR_VAR 0 8
34029: PUSH
34030: LD_VAR 0 14
34034: PUSH
34035: FOR_IN
34036: IFFALSE 34206
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34038: LD_ADDR_VAR 0 9
34042: PUSH
34043: LD_VAR 0 10
34047: PPUSH
34048: LD_VAR 0 8
34052: PPUSH
34053: LD_INT 5
34055: PPUSH
34056: CALL_OW 272
34060: PUSH
34061: LD_VAR 0 11
34065: PPUSH
34066: LD_VAR 0 8
34070: PPUSH
34071: LD_INT 5
34073: PPUSH
34074: CALL_OW 273
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34083: LD_VAR 0 9
34087: PUSH
34088: LD_INT 1
34090: ARRAY
34091: PPUSH
34092: LD_VAR 0 9
34096: PUSH
34097: LD_INT 2
34099: ARRAY
34100: PPUSH
34101: CALL_OW 488
34105: IFFALSE 34204
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34107: LD_ADDR_VAR 0 4
34111: PUSH
34112: LD_VAR 0 9
34116: PUSH
34117: LD_INT 1
34119: ARRAY
34120: PPUSH
34121: LD_VAR 0 9
34125: PUSH
34126: LD_INT 2
34128: ARRAY
34129: PPUSH
34130: CALL_OW 546
34134: ST_TO_ADDR
// if hex [ 1 ] then
34135: LD_VAR 0 4
34139: PUSH
34140: LD_INT 1
34142: ARRAY
34143: IFFALSE 34147
// continue ;
34145: GO 34035
// h := hex [ 2 ] ;
34147: LD_ADDR_VAR 0 13
34151: PUSH
34152: LD_VAR 0 4
34156: PUSH
34157: LD_INT 2
34159: ARRAY
34160: ST_TO_ADDR
// if h + 7 < height then
34161: LD_VAR 0 13
34165: PUSH
34166: LD_INT 7
34168: PLUS
34169: PUSH
34170: LD_VAR 0 15
34174: LESS
34175: IFFALSE 34204
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34177: LD_ADDR_VAR 0 18
34181: PUSH
34182: LD_INT 7
34184: PUSH
34185: LD_INT 28
34187: PUSH
34188: LD_INT 45
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: LIST
34195: PUSH
34196: LD_VAR 0 12
34200: ARRAY
34201: ST_TO_ADDR
// break ;
34202: GO 34206
// end ; end ; end ;
34204: GO 34035
34206: POP
34207: POP
// end ; if not weapon then
34208: LD_VAR 0 18
34212: NOT
34213: IFFALSE 34273
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34215: LD_ADDR_VAR 0 5
34219: PUSH
34220: LD_VAR 0 5
34224: PUSH
34225: LD_INT 11
34227: PUSH
34228: LD_INT 30
34230: PUSH
34231: LD_INT 49
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: DIFF
34239: ST_TO_ADDR
// if not list then
34240: LD_VAR 0 5
34244: NOT
34245: IFFALSE 34249
// exit ;
34247: GO 34391
// weapon := list [ rand ( 1 , list ) ] ;
34249: LD_ADDR_VAR 0 18
34253: PUSH
34254: LD_VAR 0 5
34258: PUSH
34259: LD_INT 1
34261: PPUSH
34262: LD_VAR 0 5
34266: PPUSH
34267: CALL_OW 12
34271: ARRAY
34272: ST_TO_ADDR
// end ; if weapon then
34273: LD_VAR 0 18
34277: IFFALSE 34391
// begin tmp := CostOfWeapon ( weapon ) ;
34279: LD_ADDR_VAR 0 14
34283: PUSH
34284: LD_VAR 0 18
34288: PPUSH
34289: CALL_OW 451
34293: ST_TO_ADDR
// j := GetBase ( tower ) ;
34294: LD_ADDR_VAR 0 9
34298: PUSH
34299: LD_VAR 0 1
34303: PPUSH
34304: CALL_OW 274
34308: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34309: LD_VAR 0 9
34313: PPUSH
34314: LD_INT 1
34316: PPUSH
34317: CALL_OW 275
34321: PUSH
34322: LD_VAR 0 14
34326: PUSH
34327: LD_INT 1
34329: ARRAY
34330: GREATEREQUAL
34331: PUSH
34332: LD_VAR 0 9
34336: PPUSH
34337: LD_INT 2
34339: PPUSH
34340: CALL_OW 275
34344: PUSH
34345: LD_VAR 0 14
34349: PUSH
34350: LD_INT 2
34352: ARRAY
34353: GREATEREQUAL
34354: AND
34355: PUSH
34356: LD_VAR 0 9
34360: PPUSH
34361: LD_INT 3
34363: PPUSH
34364: CALL_OW 275
34368: PUSH
34369: LD_VAR 0 14
34373: PUSH
34374: LD_INT 3
34376: ARRAY
34377: GREATEREQUAL
34378: AND
34379: IFFALSE 34391
// result := weapon ;
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_VAR 0 18
34390: ST_TO_ADDR
// end ; end ;
34391: LD_VAR 0 3
34395: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34396: LD_INT 0
34398: PPUSH
34399: PPUSH
// result := true ;
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_INT 1
34407: ST_TO_ADDR
// if array1 = array2 then
34408: LD_VAR 0 1
34412: PUSH
34413: LD_VAR 0 2
34417: EQUAL
34418: IFFALSE 34478
// begin for i = 1 to array1 do
34420: LD_ADDR_VAR 0 4
34424: PUSH
34425: DOUBLE
34426: LD_INT 1
34428: DEC
34429: ST_TO_ADDR
34430: LD_VAR 0 1
34434: PUSH
34435: FOR_TO
34436: IFFALSE 34474
// if array1 [ i ] <> array2 [ i ] then
34438: LD_VAR 0 1
34442: PUSH
34443: LD_VAR 0 4
34447: ARRAY
34448: PUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_VAR 0 4
34458: ARRAY
34459: NONEQUAL
34460: IFFALSE 34472
// begin result := false ;
34462: LD_ADDR_VAR 0 3
34466: PUSH
34467: LD_INT 0
34469: ST_TO_ADDR
// break ;
34470: GO 34474
// end ;
34472: GO 34435
34474: POP
34475: POP
// end else
34476: GO 34486
// result := false ;
34478: LD_ADDR_VAR 0 3
34482: PUSH
34483: LD_INT 0
34485: ST_TO_ADDR
// end ;
34486: LD_VAR 0 3
34490: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34491: LD_INT 0
34493: PPUSH
34494: PPUSH
// if not array1 or not array2 then
34495: LD_VAR 0 1
34499: NOT
34500: PUSH
34501: LD_VAR 0 2
34505: NOT
34506: OR
34507: IFFALSE 34511
// exit ;
34509: GO 34575
// result := true ;
34511: LD_ADDR_VAR 0 3
34515: PUSH
34516: LD_INT 1
34518: ST_TO_ADDR
// for i = 1 to array1 do
34519: LD_ADDR_VAR 0 4
34523: PUSH
34524: DOUBLE
34525: LD_INT 1
34527: DEC
34528: ST_TO_ADDR
34529: LD_VAR 0 1
34533: PUSH
34534: FOR_TO
34535: IFFALSE 34573
// if array1 [ i ] <> array2 [ i ] then
34537: LD_VAR 0 1
34541: PUSH
34542: LD_VAR 0 4
34546: ARRAY
34547: PUSH
34548: LD_VAR 0 2
34552: PUSH
34553: LD_VAR 0 4
34557: ARRAY
34558: NONEQUAL
34559: IFFALSE 34571
// begin result := false ;
34561: LD_ADDR_VAR 0 3
34565: PUSH
34566: LD_INT 0
34568: ST_TO_ADDR
// break ;
34569: GO 34573
// end ;
34571: GO 34534
34573: POP
34574: POP
// end ;
34575: LD_VAR 0 3
34579: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34580: LD_INT 0
34582: PPUSH
34583: PPUSH
34584: PPUSH
// pom := GetBase ( fac ) ;
34585: LD_ADDR_VAR 0 5
34589: PUSH
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 274
34599: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34600: LD_ADDR_VAR 0 4
34604: PUSH
34605: LD_VAR 0 2
34609: PUSH
34610: LD_INT 1
34612: ARRAY
34613: PPUSH
34614: LD_VAR 0 2
34618: PUSH
34619: LD_INT 2
34621: ARRAY
34622: PPUSH
34623: LD_VAR 0 2
34627: PUSH
34628: LD_INT 3
34630: ARRAY
34631: PPUSH
34632: LD_VAR 0 2
34636: PUSH
34637: LD_INT 4
34639: ARRAY
34640: PPUSH
34641: CALL_OW 449
34645: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34646: LD_ADDR_VAR 0 3
34650: PUSH
34651: LD_VAR 0 5
34655: PPUSH
34656: LD_INT 1
34658: PPUSH
34659: CALL_OW 275
34663: PUSH
34664: LD_VAR 0 4
34668: PUSH
34669: LD_INT 1
34671: ARRAY
34672: GREATEREQUAL
34673: PUSH
34674: LD_VAR 0 5
34678: PPUSH
34679: LD_INT 2
34681: PPUSH
34682: CALL_OW 275
34686: PUSH
34687: LD_VAR 0 4
34691: PUSH
34692: LD_INT 2
34694: ARRAY
34695: GREATEREQUAL
34696: AND
34697: PUSH
34698: LD_VAR 0 5
34702: PPUSH
34703: LD_INT 3
34705: PPUSH
34706: CALL_OW 275
34710: PUSH
34711: LD_VAR 0 4
34715: PUSH
34716: LD_INT 3
34718: ARRAY
34719: GREATEREQUAL
34720: AND
34721: ST_TO_ADDR
// end ;
34722: LD_VAR 0 3
34726: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34727: LD_INT 0
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
// pom := GetBase ( building ) ;
34733: LD_ADDR_VAR 0 3
34737: PUSH
34738: LD_VAR 0 1
34742: PPUSH
34743: CALL_OW 274
34747: ST_TO_ADDR
// if not pom then
34748: LD_VAR 0 3
34752: NOT
34753: IFFALSE 34757
// exit ;
34755: GO 34927
// btype := GetBType ( building ) ;
34757: LD_ADDR_VAR 0 5
34761: PUSH
34762: LD_VAR 0 1
34766: PPUSH
34767: CALL_OW 266
34771: ST_TO_ADDR
// if btype = b_armoury then
34772: LD_VAR 0 5
34776: PUSH
34777: LD_INT 4
34779: EQUAL
34780: IFFALSE 34790
// btype := b_barracks ;
34782: LD_ADDR_VAR 0 5
34786: PUSH
34787: LD_INT 5
34789: ST_TO_ADDR
// if btype = b_depot then
34790: LD_VAR 0 5
34794: PUSH
34795: LD_INT 0
34797: EQUAL
34798: IFFALSE 34808
// btype := b_warehouse ;
34800: LD_ADDR_VAR 0 5
34804: PUSH
34805: LD_INT 1
34807: ST_TO_ADDR
// if btype = b_workshop then
34808: LD_VAR 0 5
34812: PUSH
34813: LD_INT 2
34815: EQUAL
34816: IFFALSE 34826
// btype := b_factory ;
34818: LD_ADDR_VAR 0 5
34822: PUSH
34823: LD_INT 3
34825: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34826: LD_ADDR_VAR 0 4
34830: PUSH
34831: LD_VAR 0 5
34835: PPUSH
34836: LD_VAR 0 1
34840: PPUSH
34841: CALL_OW 248
34845: PPUSH
34846: CALL_OW 450
34850: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34851: LD_ADDR_VAR 0 2
34855: PUSH
34856: LD_VAR 0 3
34860: PPUSH
34861: LD_INT 1
34863: PPUSH
34864: CALL_OW 275
34868: PUSH
34869: LD_VAR 0 4
34873: PUSH
34874: LD_INT 1
34876: ARRAY
34877: GREATEREQUAL
34878: PUSH
34879: LD_VAR 0 3
34883: PPUSH
34884: LD_INT 2
34886: PPUSH
34887: CALL_OW 275
34891: PUSH
34892: LD_VAR 0 4
34896: PUSH
34897: LD_INT 2
34899: ARRAY
34900: GREATEREQUAL
34901: AND
34902: PUSH
34903: LD_VAR 0 3
34907: PPUSH
34908: LD_INT 3
34910: PPUSH
34911: CALL_OW 275
34915: PUSH
34916: LD_VAR 0 4
34920: PUSH
34921: LD_INT 3
34923: ARRAY
34924: GREATEREQUAL
34925: AND
34926: ST_TO_ADDR
// end ;
34927: LD_VAR 0 2
34931: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34932: LD_INT 0
34934: PPUSH
34935: PPUSH
34936: PPUSH
// pom := GetBase ( building ) ;
34937: LD_ADDR_VAR 0 4
34941: PUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 274
34951: ST_TO_ADDR
// if not pom then
34952: LD_VAR 0 4
34956: NOT
34957: IFFALSE 34961
// exit ;
34959: GO 35062
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34961: LD_ADDR_VAR 0 5
34965: PUSH
34966: LD_VAR 0 2
34970: PPUSH
34971: LD_VAR 0 1
34975: PPUSH
34976: CALL_OW 248
34980: PPUSH
34981: CALL_OW 450
34985: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34986: LD_ADDR_VAR 0 3
34990: PUSH
34991: LD_VAR 0 4
34995: PPUSH
34996: LD_INT 1
34998: PPUSH
34999: CALL_OW 275
35003: PUSH
35004: LD_VAR 0 5
35008: PUSH
35009: LD_INT 1
35011: ARRAY
35012: GREATEREQUAL
35013: PUSH
35014: LD_VAR 0 4
35018: PPUSH
35019: LD_INT 2
35021: PPUSH
35022: CALL_OW 275
35026: PUSH
35027: LD_VAR 0 5
35031: PUSH
35032: LD_INT 2
35034: ARRAY
35035: GREATEREQUAL
35036: AND
35037: PUSH
35038: LD_VAR 0 4
35042: PPUSH
35043: LD_INT 3
35045: PPUSH
35046: CALL_OW 275
35050: PUSH
35051: LD_VAR 0 5
35055: PUSH
35056: LD_INT 3
35058: ARRAY
35059: GREATEREQUAL
35060: AND
35061: ST_TO_ADDR
// end ;
35062: LD_VAR 0 3
35066: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35067: LD_INT 0
35069: PPUSH
35070: PPUSH
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
// result := false ;
35080: LD_ADDR_VAR 0 8
35084: PUSH
35085: LD_INT 0
35087: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35088: LD_VAR 0 5
35092: NOT
35093: PUSH
35094: LD_VAR 0 1
35098: NOT
35099: OR
35100: PUSH
35101: LD_VAR 0 2
35105: NOT
35106: OR
35107: PUSH
35108: LD_VAR 0 3
35112: NOT
35113: OR
35114: IFFALSE 35118
// exit ;
35116: GO 35932
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35118: LD_ADDR_VAR 0 14
35122: PUSH
35123: LD_VAR 0 1
35127: PPUSH
35128: LD_VAR 0 2
35132: PPUSH
35133: LD_VAR 0 3
35137: PPUSH
35138: LD_VAR 0 4
35142: PPUSH
35143: LD_VAR 0 5
35147: PUSH
35148: LD_INT 1
35150: ARRAY
35151: PPUSH
35152: CALL_OW 248
35156: PPUSH
35157: LD_INT 0
35159: PPUSH
35160: CALL 37169 0 6
35164: ST_TO_ADDR
// if not hexes then
35165: LD_VAR 0 14
35169: NOT
35170: IFFALSE 35174
// exit ;
35172: GO 35932
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35174: LD_ADDR_VAR 0 17
35178: PUSH
35179: LD_VAR 0 5
35183: PPUSH
35184: LD_INT 22
35186: PUSH
35187: LD_VAR 0 13
35191: PPUSH
35192: CALL_OW 255
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 30
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 30
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PPUSH
35233: CALL_OW 72
35237: ST_TO_ADDR
// for i = 1 to hexes do
35238: LD_ADDR_VAR 0 9
35242: PUSH
35243: DOUBLE
35244: LD_INT 1
35246: DEC
35247: ST_TO_ADDR
35248: LD_VAR 0 14
35252: PUSH
35253: FOR_TO
35254: IFFALSE 35930
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35256: LD_ADDR_VAR 0 13
35260: PUSH
35261: LD_VAR 0 14
35265: PUSH
35266: LD_VAR 0 9
35270: ARRAY
35271: PUSH
35272: LD_INT 1
35274: ARRAY
35275: PPUSH
35276: LD_VAR 0 14
35280: PUSH
35281: LD_VAR 0 9
35285: ARRAY
35286: PUSH
35287: LD_INT 2
35289: ARRAY
35290: PPUSH
35291: CALL_OW 428
35295: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35296: LD_VAR 0 14
35300: PUSH
35301: LD_VAR 0 9
35305: ARRAY
35306: PUSH
35307: LD_INT 1
35309: ARRAY
35310: PPUSH
35311: LD_VAR 0 14
35315: PUSH
35316: LD_VAR 0 9
35320: ARRAY
35321: PUSH
35322: LD_INT 2
35324: ARRAY
35325: PPUSH
35326: CALL_OW 351
35330: PUSH
35331: LD_VAR 0 14
35335: PUSH
35336: LD_VAR 0 9
35340: ARRAY
35341: PUSH
35342: LD_INT 1
35344: ARRAY
35345: PPUSH
35346: LD_VAR 0 14
35350: PUSH
35351: LD_VAR 0 9
35355: ARRAY
35356: PUSH
35357: LD_INT 2
35359: ARRAY
35360: PPUSH
35361: CALL_OW 488
35365: NOT
35366: OR
35367: PUSH
35368: LD_VAR 0 13
35372: PPUSH
35373: CALL_OW 247
35377: PUSH
35378: LD_INT 3
35380: EQUAL
35381: OR
35382: IFFALSE 35388
// exit ;
35384: POP
35385: POP
35386: GO 35932
// if not tmp then
35388: LD_VAR 0 13
35392: NOT
35393: IFFALSE 35397
// continue ;
35395: GO 35253
// result := true ;
35397: LD_ADDR_VAR 0 8
35401: PUSH
35402: LD_INT 1
35404: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35405: LD_VAR 0 6
35409: PUSH
35410: LD_VAR 0 13
35414: PPUSH
35415: CALL_OW 247
35419: PUSH
35420: LD_INT 2
35422: EQUAL
35423: AND
35424: PUSH
35425: LD_VAR 0 13
35429: PPUSH
35430: CALL_OW 263
35434: PUSH
35435: LD_INT 1
35437: EQUAL
35438: AND
35439: IFFALSE 35603
// begin if IsDrivenBy ( tmp ) then
35441: LD_VAR 0 13
35445: PPUSH
35446: CALL_OW 311
35450: IFFALSE 35454
// continue ;
35452: GO 35253
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35454: LD_VAR 0 6
35458: PPUSH
35459: LD_INT 3
35461: PUSH
35462: LD_INT 60
35464: PUSH
35465: EMPTY
35466: LIST
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 3
35474: PUSH
35475: LD_INT 55
35477: PUSH
35478: EMPTY
35479: LIST
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PPUSH
35489: CALL_OW 72
35493: IFFALSE 35601
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35495: LD_ADDR_VAR 0 18
35499: PUSH
35500: LD_VAR 0 6
35504: PPUSH
35505: LD_INT 3
35507: PUSH
35508: LD_INT 60
35510: PUSH
35511: EMPTY
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 3
35520: PUSH
35521: LD_INT 55
35523: PUSH
35524: EMPTY
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PPUSH
35535: CALL_OW 72
35539: PUSH
35540: LD_INT 1
35542: ARRAY
35543: ST_TO_ADDR
// if IsInUnit ( driver ) then
35544: LD_VAR 0 18
35548: PPUSH
35549: CALL_OW 310
35553: IFFALSE 35564
// ComExit ( driver ) ;
35555: LD_VAR 0 18
35559: PPUSH
35560: CALL 60353 0 1
// AddComEnterUnit ( driver , tmp ) ;
35564: LD_VAR 0 18
35568: PPUSH
35569: LD_VAR 0 13
35573: PPUSH
35574: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35578: LD_VAR 0 18
35582: PPUSH
35583: LD_VAR 0 7
35587: PPUSH
35588: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35592: LD_VAR 0 18
35596: PPUSH
35597: CALL_OW 181
// end ; continue ;
35601: GO 35253
// end ; if not cleaners or not tmp in cleaners then
35603: LD_VAR 0 6
35607: NOT
35608: PUSH
35609: LD_VAR 0 13
35613: PUSH
35614: LD_VAR 0 6
35618: IN
35619: NOT
35620: OR
35621: IFFALSE 35928
// begin if dep then
35623: LD_VAR 0 17
35627: IFFALSE 35763
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35629: LD_ADDR_VAR 0 16
35633: PUSH
35634: LD_VAR 0 17
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: PPUSH
35643: CALL_OW 250
35647: PPUSH
35648: LD_VAR 0 17
35652: PUSH
35653: LD_INT 1
35655: ARRAY
35656: PPUSH
35657: CALL_OW 254
35661: PPUSH
35662: LD_INT 5
35664: PPUSH
35665: CALL_OW 272
35669: PUSH
35670: LD_VAR 0 17
35674: PUSH
35675: LD_INT 1
35677: ARRAY
35678: PPUSH
35679: CALL_OW 251
35683: PPUSH
35684: LD_VAR 0 17
35688: PUSH
35689: LD_INT 1
35691: ARRAY
35692: PPUSH
35693: CALL_OW 254
35697: PPUSH
35698: LD_INT 5
35700: PPUSH
35701: CALL_OW 273
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35710: LD_VAR 0 16
35714: PUSH
35715: LD_INT 1
35717: ARRAY
35718: PPUSH
35719: LD_VAR 0 16
35723: PUSH
35724: LD_INT 2
35726: ARRAY
35727: PPUSH
35728: CALL_OW 488
35732: IFFALSE 35763
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35734: LD_VAR 0 13
35738: PPUSH
35739: LD_VAR 0 16
35743: PUSH
35744: LD_INT 1
35746: ARRAY
35747: PPUSH
35748: LD_VAR 0 16
35752: PUSH
35753: LD_INT 2
35755: ARRAY
35756: PPUSH
35757: CALL_OW 111
// continue ;
35761: GO 35253
// end ; end ; r := GetDir ( tmp ) ;
35763: LD_ADDR_VAR 0 15
35767: PUSH
35768: LD_VAR 0 13
35772: PPUSH
35773: CALL_OW 254
35777: ST_TO_ADDR
// if r = 5 then
35778: LD_VAR 0 15
35782: PUSH
35783: LD_INT 5
35785: EQUAL
35786: IFFALSE 35796
// r := 0 ;
35788: LD_ADDR_VAR 0 15
35792: PUSH
35793: LD_INT 0
35795: ST_TO_ADDR
// for j = r to 5 do
35796: LD_ADDR_VAR 0 10
35800: PUSH
35801: DOUBLE
35802: LD_VAR 0 15
35806: DEC
35807: ST_TO_ADDR
35808: LD_INT 5
35810: PUSH
35811: FOR_TO
35812: IFFALSE 35926
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35814: LD_ADDR_VAR 0 11
35818: PUSH
35819: LD_VAR 0 13
35823: PPUSH
35824: CALL_OW 250
35828: PPUSH
35829: LD_VAR 0 10
35833: PPUSH
35834: LD_INT 2
35836: PPUSH
35837: CALL_OW 272
35841: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35842: LD_ADDR_VAR 0 12
35846: PUSH
35847: LD_VAR 0 13
35851: PPUSH
35852: CALL_OW 251
35856: PPUSH
35857: LD_VAR 0 10
35861: PPUSH
35862: LD_INT 2
35864: PPUSH
35865: CALL_OW 273
35869: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35870: LD_VAR 0 11
35874: PPUSH
35875: LD_VAR 0 12
35879: PPUSH
35880: CALL_OW 488
35884: PUSH
35885: LD_VAR 0 11
35889: PPUSH
35890: LD_VAR 0 12
35894: PPUSH
35895: CALL_OW 428
35899: NOT
35900: AND
35901: IFFALSE 35924
// begin ComMoveXY ( tmp , _x , _y ) ;
35903: LD_VAR 0 13
35907: PPUSH
35908: LD_VAR 0 11
35912: PPUSH
35913: LD_VAR 0 12
35917: PPUSH
35918: CALL_OW 111
// break ;
35922: GO 35926
// end ; end ;
35924: GO 35811
35926: POP
35927: POP
// end ; end ;
35928: GO 35253
35930: POP
35931: POP
// end ;
35932: LD_VAR 0 8
35936: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35937: LD_INT 0
35939: PPUSH
// result := true ;
35940: LD_ADDR_VAR 0 3
35944: PUSH
35945: LD_INT 1
35947: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35948: LD_VAR 0 2
35952: PUSH
35953: LD_INT 24
35955: DOUBLE
35956: EQUAL
35957: IFTRUE 35967
35959: LD_INT 33
35961: DOUBLE
35962: EQUAL
35963: IFTRUE 35967
35965: GO 35992
35967: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35968: LD_ADDR_VAR 0 3
35972: PUSH
35973: LD_INT 32
35975: PPUSH
35976: LD_VAR 0 1
35980: PPUSH
35981: CALL_OW 321
35985: PUSH
35986: LD_INT 2
35988: EQUAL
35989: ST_TO_ADDR
35990: GO 36312
35992: LD_INT 20
35994: DOUBLE
35995: EQUAL
35996: IFTRUE 36000
35998: GO 36025
36000: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36001: LD_ADDR_VAR 0 3
36005: PUSH
36006: LD_INT 6
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 321
36018: PUSH
36019: LD_INT 2
36021: EQUAL
36022: ST_TO_ADDR
36023: GO 36312
36025: LD_INT 22
36027: DOUBLE
36028: EQUAL
36029: IFTRUE 36039
36031: LD_INT 36
36033: DOUBLE
36034: EQUAL
36035: IFTRUE 36039
36037: GO 36064
36039: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36040: LD_ADDR_VAR 0 3
36044: PUSH
36045: LD_INT 15
36047: PPUSH
36048: LD_VAR 0 1
36052: PPUSH
36053: CALL_OW 321
36057: PUSH
36058: LD_INT 2
36060: EQUAL
36061: ST_TO_ADDR
36062: GO 36312
36064: LD_INT 30
36066: DOUBLE
36067: EQUAL
36068: IFTRUE 36072
36070: GO 36097
36072: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36073: LD_ADDR_VAR 0 3
36077: PUSH
36078: LD_INT 20
36080: PPUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 321
36090: PUSH
36091: LD_INT 2
36093: EQUAL
36094: ST_TO_ADDR
36095: GO 36312
36097: LD_INT 28
36099: DOUBLE
36100: EQUAL
36101: IFTRUE 36111
36103: LD_INT 21
36105: DOUBLE
36106: EQUAL
36107: IFTRUE 36111
36109: GO 36136
36111: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36112: LD_ADDR_VAR 0 3
36116: PUSH
36117: LD_INT 21
36119: PPUSH
36120: LD_VAR 0 1
36124: PPUSH
36125: CALL_OW 321
36129: PUSH
36130: LD_INT 2
36132: EQUAL
36133: ST_TO_ADDR
36134: GO 36312
36136: LD_INT 16
36138: DOUBLE
36139: EQUAL
36140: IFTRUE 36144
36142: GO 36171
36144: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36145: LD_ADDR_VAR 0 3
36149: PUSH
36150: LD_EXP 51
36154: PPUSH
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL_OW 321
36164: PUSH
36165: LD_INT 2
36167: EQUAL
36168: ST_TO_ADDR
36169: GO 36312
36171: LD_INT 19
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36185
36177: LD_INT 23
36179: DOUBLE
36180: EQUAL
36181: IFTRUE 36185
36183: GO 36212
36185: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36186: LD_ADDR_VAR 0 3
36190: PUSH
36191: LD_EXP 50
36195: PPUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: CALL_OW 321
36205: PUSH
36206: LD_INT 2
36208: EQUAL
36209: ST_TO_ADDR
36210: GO 36312
36212: LD_INT 17
36214: DOUBLE
36215: EQUAL
36216: IFTRUE 36220
36218: GO 36245
36220: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36221: LD_ADDR_VAR 0 3
36225: PUSH
36226: LD_INT 39
36228: PPUSH
36229: LD_VAR 0 1
36233: PPUSH
36234: CALL_OW 321
36238: PUSH
36239: LD_INT 2
36241: EQUAL
36242: ST_TO_ADDR
36243: GO 36312
36245: LD_INT 18
36247: DOUBLE
36248: EQUAL
36249: IFTRUE 36253
36251: GO 36278
36253: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36254: LD_ADDR_VAR 0 3
36258: PUSH
36259: LD_INT 40
36261: PPUSH
36262: LD_VAR 0 1
36266: PPUSH
36267: CALL_OW 321
36271: PUSH
36272: LD_INT 2
36274: EQUAL
36275: ST_TO_ADDR
36276: GO 36312
36278: LD_INT 27
36280: DOUBLE
36281: EQUAL
36282: IFTRUE 36286
36284: GO 36311
36286: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36287: LD_ADDR_VAR 0 3
36291: PUSH
36292: LD_INT 35
36294: PPUSH
36295: LD_VAR 0 1
36299: PPUSH
36300: CALL_OW 321
36304: PUSH
36305: LD_INT 2
36307: EQUAL
36308: ST_TO_ADDR
36309: GO 36312
36311: POP
// end ;
36312: LD_VAR 0 3
36316: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36317: LD_INT 0
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
// result := false ;
36330: LD_ADDR_VAR 0 6
36334: PUSH
36335: LD_INT 0
36337: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36338: LD_VAR 0 1
36342: NOT
36343: PUSH
36344: LD_VAR 0 1
36348: PPUSH
36349: CALL_OW 266
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: IN
36364: NOT
36365: OR
36366: PUSH
36367: LD_VAR 0 2
36371: NOT
36372: OR
36373: PUSH
36374: LD_VAR 0 5
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: LD_INT 3
36390: PUSH
36391: LD_INT 4
36393: PUSH
36394: LD_INT 5
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: IN
36405: NOT
36406: OR
36407: PUSH
36408: LD_VAR 0 3
36412: PPUSH
36413: LD_VAR 0 4
36417: PPUSH
36418: CALL_OW 488
36422: NOT
36423: OR
36424: IFFALSE 36428
// exit ;
36426: GO 37164
// side := GetSide ( depot ) ;
36428: LD_ADDR_VAR 0 9
36432: PUSH
36433: LD_VAR 0 1
36437: PPUSH
36438: CALL_OW 255
36442: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36443: LD_VAR 0 9
36447: PPUSH
36448: LD_VAR 0 2
36452: PPUSH
36453: CALL 35937 0 2
36457: NOT
36458: IFFALSE 36462
// exit ;
36460: GO 37164
// pom := GetBase ( depot ) ;
36462: LD_ADDR_VAR 0 10
36466: PUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 274
36476: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36477: LD_ADDR_VAR 0 11
36481: PUSH
36482: LD_VAR 0 2
36486: PPUSH
36487: LD_VAR 0 1
36491: PPUSH
36492: CALL_OW 248
36496: PPUSH
36497: CALL_OW 450
36501: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36502: LD_VAR 0 10
36506: PPUSH
36507: LD_INT 1
36509: PPUSH
36510: CALL_OW 275
36514: PUSH
36515: LD_VAR 0 11
36519: PUSH
36520: LD_INT 1
36522: ARRAY
36523: GREATEREQUAL
36524: PUSH
36525: LD_VAR 0 10
36529: PPUSH
36530: LD_INT 2
36532: PPUSH
36533: CALL_OW 275
36537: PUSH
36538: LD_VAR 0 11
36542: PUSH
36543: LD_INT 2
36545: ARRAY
36546: GREATEREQUAL
36547: AND
36548: PUSH
36549: LD_VAR 0 10
36553: PPUSH
36554: LD_INT 3
36556: PPUSH
36557: CALL_OW 275
36561: PUSH
36562: LD_VAR 0 11
36566: PUSH
36567: LD_INT 3
36569: ARRAY
36570: GREATEREQUAL
36571: AND
36572: NOT
36573: IFFALSE 36577
// exit ;
36575: GO 37164
// if GetBType ( depot ) = b_depot then
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 266
36586: PUSH
36587: LD_INT 0
36589: EQUAL
36590: IFFALSE 36602
// dist := 28 else
36592: LD_ADDR_VAR 0 14
36596: PUSH
36597: LD_INT 28
36599: ST_TO_ADDR
36600: GO 36610
// dist := 36 ;
36602: LD_ADDR_VAR 0 14
36606: PUSH
36607: LD_INT 36
36609: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36610: LD_VAR 0 1
36614: PPUSH
36615: LD_VAR 0 3
36619: PPUSH
36620: LD_VAR 0 4
36624: PPUSH
36625: CALL_OW 297
36629: PUSH
36630: LD_VAR 0 14
36634: GREATER
36635: IFFALSE 36639
// exit ;
36637: GO 37164
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36639: LD_ADDR_VAR 0 12
36643: PUSH
36644: LD_VAR 0 2
36648: PPUSH
36649: LD_VAR 0 3
36653: PPUSH
36654: LD_VAR 0 4
36658: PPUSH
36659: LD_VAR 0 5
36663: PPUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 248
36673: PPUSH
36674: LD_INT 0
36676: PPUSH
36677: CALL 37169 0 6
36681: ST_TO_ADDR
// if not hexes then
36682: LD_VAR 0 12
36686: NOT
36687: IFFALSE 36691
// exit ;
36689: GO 37164
// hex := GetHexInfo ( x , y ) ;
36691: LD_ADDR_VAR 0 15
36695: PUSH
36696: LD_VAR 0 3
36700: PPUSH
36701: LD_VAR 0 4
36705: PPUSH
36706: CALL_OW 546
36710: ST_TO_ADDR
// if hex [ 1 ] then
36711: LD_VAR 0 15
36715: PUSH
36716: LD_INT 1
36718: ARRAY
36719: IFFALSE 36723
// exit ;
36721: GO 37164
// height := hex [ 2 ] ;
36723: LD_ADDR_VAR 0 13
36727: PUSH
36728: LD_VAR 0 15
36732: PUSH
36733: LD_INT 2
36735: ARRAY
36736: ST_TO_ADDR
// for i = 1 to hexes do
36737: LD_ADDR_VAR 0 7
36741: PUSH
36742: DOUBLE
36743: LD_INT 1
36745: DEC
36746: ST_TO_ADDR
36747: LD_VAR 0 12
36751: PUSH
36752: FOR_TO
36753: IFFALSE 37083
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36755: LD_VAR 0 12
36759: PUSH
36760: LD_VAR 0 7
36764: ARRAY
36765: PUSH
36766: LD_INT 1
36768: ARRAY
36769: PPUSH
36770: LD_VAR 0 12
36774: PUSH
36775: LD_VAR 0 7
36779: ARRAY
36780: PUSH
36781: LD_INT 2
36783: ARRAY
36784: PPUSH
36785: CALL_OW 488
36789: NOT
36790: PUSH
36791: LD_VAR 0 12
36795: PUSH
36796: LD_VAR 0 7
36800: ARRAY
36801: PUSH
36802: LD_INT 1
36804: ARRAY
36805: PPUSH
36806: LD_VAR 0 12
36810: PUSH
36811: LD_VAR 0 7
36815: ARRAY
36816: PUSH
36817: LD_INT 2
36819: ARRAY
36820: PPUSH
36821: CALL_OW 428
36825: PUSH
36826: LD_INT 0
36828: GREATER
36829: OR
36830: PUSH
36831: LD_VAR 0 12
36835: PUSH
36836: LD_VAR 0 7
36840: ARRAY
36841: PUSH
36842: LD_INT 1
36844: ARRAY
36845: PPUSH
36846: LD_VAR 0 12
36850: PUSH
36851: LD_VAR 0 7
36855: ARRAY
36856: PUSH
36857: LD_INT 2
36859: ARRAY
36860: PPUSH
36861: CALL_OW 351
36865: OR
36866: IFFALSE 36872
// exit ;
36868: POP
36869: POP
36870: GO 37164
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36872: LD_ADDR_VAR 0 8
36876: PUSH
36877: LD_VAR 0 12
36881: PUSH
36882: LD_VAR 0 7
36886: ARRAY
36887: PUSH
36888: LD_INT 1
36890: ARRAY
36891: PPUSH
36892: LD_VAR 0 12
36896: PUSH
36897: LD_VAR 0 7
36901: ARRAY
36902: PUSH
36903: LD_INT 2
36905: ARRAY
36906: PPUSH
36907: CALL_OW 546
36911: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36912: LD_VAR 0 8
36916: PUSH
36917: LD_INT 1
36919: ARRAY
36920: PUSH
36921: LD_VAR 0 8
36925: PUSH
36926: LD_INT 2
36928: ARRAY
36929: PUSH
36930: LD_VAR 0 13
36934: PUSH
36935: LD_INT 2
36937: PLUS
36938: GREATER
36939: OR
36940: PUSH
36941: LD_VAR 0 8
36945: PUSH
36946: LD_INT 2
36948: ARRAY
36949: PUSH
36950: LD_VAR 0 13
36954: PUSH
36955: LD_INT 2
36957: MINUS
36958: LESS
36959: OR
36960: PUSH
36961: LD_VAR 0 8
36965: PUSH
36966: LD_INT 3
36968: ARRAY
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: LD_INT 8
36975: PUSH
36976: LD_INT 9
36978: PUSH
36979: LD_INT 10
36981: PUSH
36982: LD_INT 11
36984: PUSH
36985: LD_INT 12
36987: PUSH
36988: LD_INT 13
36990: PUSH
36991: LD_INT 16
36993: PUSH
36994: LD_INT 17
36996: PUSH
36997: LD_INT 18
36999: PUSH
37000: LD_INT 19
37002: PUSH
37003: LD_INT 20
37005: PUSH
37006: LD_INT 21
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: IN
37024: NOT
37025: OR
37026: PUSH
37027: LD_VAR 0 8
37031: PUSH
37032: LD_INT 5
37034: ARRAY
37035: NOT
37036: OR
37037: PUSH
37038: LD_VAR 0 8
37042: PUSH
37043: LD_INT 6
37045: ARRAY
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 7
37055: PUSH
37056: LD_INT 9
37058: PUSH
37059: LD_INT 10
37061: PUSH
37062: LD_INT 11
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: IN
37073: NOT
37074: OR
37075: IFFALSE 37081
// exit ;
37077: POP
37078: POP
37079: GO 37164
// end ;
37081: GO 36752
37083: POP
37084: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37085: LD_VAR 0 9
37089: PPUSH
37090: LD_VAR 0 3
37094: PPUSH
37095: LD_VAR 0 4
37099: PPUSH
37100: LD_INT 20
37102: PPUSH
37103: CALL 29110 0 4
37107: PUSH
37108: LD_INT 4
37110: ARRAY
37111: IFFALSE 37115
// exit ;
37113: GO 37164
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37115: LD_VAR 0 2
37119: PUSH
37120: LD_INT 29
37122: PUSH
37123: LD_INT 30
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: IN
37130: PUSH
37131: LD_VAR 0 3
37135: PPUSH
37136: LD_VAR 0 4
37140: PPUSH
37141: LD_VAR 0 9
37145: PPUSH
37146: CALL_OW 440
37150: NOT
37151: AND
37152: IFFALSE 37156
// exit ;
37154: GO 37164
// result := true ;
37156: LD_ADDR_VAR 0 6
37160: PUSH
37161: LD_INT 1
37163: ST_TO_ADDR
// end ;
37164: LD_VAR 0 6
37168: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37169: LD_INT 0
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
37181: PPUSH
37182: PPUSH
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
37198: PPUSH
37199: PPUSH
37200: PPUSH
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
37209: PPUSH
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
37216: PPUSH
37217: PPUSH
37218: PPUSH
37219: PPUSH
37220: PPUSH
37221: PPUSH
37222: PPUSH
37223: PPUSH
37224: PPUSH
37225: PPUSH
37226: PPUSH
37227: PPUSH
37228: PPUSH
// result = [ ] ;
37229: LD_ADDR_VAR 0 7
37233: PUSH
37234: EMPTY
37235: ST_TO_ADDR
// temp_list = [ ] ;
37236: LD_ADDR_VAR 0 9
37240: PUSH
37241: EMPTY
37242: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37243: LD_VAR 0 4
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 4
37262: PUSH
37263: LD_INT 5
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: IN
37274: NOT
37275: PUSH
37276: LD_VAR 0 1
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: IN
37291: PUSH
37292: LD_VAR 0 5
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: IN
37311: NOT
37312: AND
37313: OR
37314: IFFALSE 37318
// exit ;
37316: GO 55709
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37318: LD_VAR 0 1
37322: PUSH
37323: LD_INT 6
37325: PUSH
37326: LD_INT 7
37328: PUSH
37329: LD_INT 8
37331: PUSH
37332: LD_INT 13
37334: PUSH
37335: LD_INT 12
37337: PUSH
37338: LD_INT 15
37340: PUSH
37341: LD_INT 11
37343: PUSH
37344: LD_INT 14
37346: PUSH
37347: LD_INT 10
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: IN
37361: IFFALSE 37371
// btype = b_lab ;
37363: LD_ADDR_VAR 0 1
37367: PUSH
37368: LD_INT 6
37370: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37371: LD_VAR 0 6
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 2
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: IN
37390: NOT
37391: PUSH
37392: LD_VAR 0 1
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: LD_INT 3
37408: PUSH
37409: LD_INT 6
37411: PUSH
37412: LD_INT 36
37414: PUSH
37415: LD_INT 4
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: LD_INT 31
37423: PUSH
37424: LD_INT 32
37426: PUSH
37427: LD_INT 33
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: IN
37443: NOT
37444: PUSH
37445: LD_VAR 0 6
37449: PUSH
37450: LD_INT 1
37452: EQUAL
37453: AND
37454: OR
37455: PUSH
37456: LD_VAR 0 1
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: IN
37471: NOT
37472: PUSH
37473: LD_VAR 0 6
37477: PUSH
37478: LD_INT 2
37480: EQUAL
37481: AND
37482: OR
37483: IFFALSE 37493
// mode = 0 ;
37485: LD_ADDR_VAR 0 6
37489: PUSH
37490: LD_INT 0
37492: ST_TO_ADDR
// case mode of 0 :
37493: LD_VAR 0 6
37497: PUSH
37498: LD_INT 0
37500: DOUBLE
37501: EQUAL
37502: IFTRUE 37506
37504: GO 48959
37506: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37507: LD_ADDR_VAR 0 11
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: LD_INT 3
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: LD_INT 3
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37700: LD_ADDR_VAR 0 12
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 2
37823: NEG
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: NEG
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 3
37857: NEG
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 3
37868: NEG
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37896: LD_ADDR_VAR 0 13
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 3
38055: NEG
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 3
38067: NEG
38068: PUSH
38069: LD_INT 3
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38095: LD_ADDR_VAR 0 14
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: LD_INT 3
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38291: LD_ADDR_VAR 0 15
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: NEG
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: LD_INT 1
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 3
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38484: LD_ADDR_VAR 0 16
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 1
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 2
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: NEG
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: NEG
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 3
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 3
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: LD_INT 3
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38677: LD_ADDR_VAR 0 17
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38907: LD_ADDR_VAR 0 18
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: NEG
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39137: LD_ADDR_VAR 0 19
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39367: LD_ADDR_VAR 0 20
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: LD_INT 1
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: NEG
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: LD_INT 2
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39597: LD_ADDR_VAR 0 21
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 2
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: NEG
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39827: LD_ADDR_VAR 0 22
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: LD_INT 2
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: LD_INT 0
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40057: LD_ADDR_VAR 0 23
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: LD_INT 3
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 3
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40337: LD_ADDR_VAR 0 24
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40613: LD_ADDR_VAR 0 25
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 2
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: LD_INT 3
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 3
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40887: LD_ADDR_VAR 0 26
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 3
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41163: LD_ADDR_VAR 0 27
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 3
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 3
41408: NEG
41409: PUSH
41410: LD_INT 2
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41443: LD_ADDR_VAR 0 28
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 3
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 3
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41725: LD_ADDR_VAR 0 29
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 2
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: NEG
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 3
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 3
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 3
41969: NEG
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42004: LD_ADDR_VAR 0 30
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 3
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 2
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 3
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 3
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 3
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42282: LD_ADDR_VAR 0 31
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: NEG
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 3
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 3
42525: NEG
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42560: LD_ADDR_VAR 0 32
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 2
42726: NEG
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 3
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: NEG
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42838: LD_ADDR_VAR 0 33
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 3
43082: NEG
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43117: LD_ADDR_VAR 0 34
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 2
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: NEG
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 3
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43397: LD_ADDR_VAR 0 35
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43509: LD_ADDR_VAR 0 36
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: NEG
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43621: LD_ADDR_VAR 0 37
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43733: LD_ADDR_VAR 0 38
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43845: LD_ADDR_VAR 0 39
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43957: LD_ADDR_VAR 0 40
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44069: LD_ADDR_VAR 0 41
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 3
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 3
44343: NEG
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: NEG
44379: PUSH
44380: LD_INT 3
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44419: LD_ADDR_VAR 0 42
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: LD_INT 3
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 3
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 3
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: NEG
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 3
44728: NEG
44729: PUSH
44730: LD_INT 3
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44769: LD_ADDR_VAR 0 43
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 3
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 3
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 3
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 3
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 3
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 3
45065: NEG
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45117: LD_ADDR_VAR 0 44
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 3
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 3
45391: NEG
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 3
45402: NEG
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 3
45414: NEG
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 3
45426: NEG
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45467: LD_ADDR_VAR 0 45
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: LD_INT 3
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 3
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 3
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 3
45764: NEG
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 3
45776: NEG
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45817: LD_ADDR_VAR 0 46
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: LD_INT 3
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 3
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 3
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 3
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 3
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46165: LD_ADDR_VAR 0 47
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46316: LD_ADDR_VAR 0 48
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46463: LD_ADDR_VAR 0 49
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46607: LD_ADDR_VAR 0 50
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46751: LD_ADDR_VAR 0 51
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46898: LD_ADDR_VAR 0 52
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47049: LD_ADDR_VAR 0 53
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47279: LD_ADDR_VAR 0 54
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47509: LD_ADDR_VAR 0 55
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47739: LD_ADDR_VAR 0 56
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47969: LD_ADDR_VAR 0 57
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48199: LD_ADDR_VAR 0 58
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48429: LD_ADDR_VAR 0 59
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48517: LD_ADDR_VAR 0 60
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48605: LD_ADDR_VAR 0 61
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48693: LD_ADDR_VAR 0 62
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48781: LD_ADDR_VAR 0 63
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48869: LD_ADDR_VAR 0 64
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// end ; 1 :
48957: GO 54854
48959: LD_INT 1
48961: DOUBLE
48962: EQUAL
48963: IFTRUE 48967
48965: GO 51590
48967: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48968: LD_ADDR_VAR 0 11
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 3
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49012: LD_ADDR_VAR 0 12
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 3
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49053: LD_ADDR_VAR 0 13
49057: PUSH
49058: LD_INT 3
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 3
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49093: LD_ADDR_VAR 0 14
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: LIST
49133: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49134: LD_ADDR_VAR 0 15
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 3
49152: NEG
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49178: LD_ADDR_VAR 0 16
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 3
49197: NEG
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 3
49209: NEG
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49224: LD_ADDR_VAR 0 17
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: LIST
49267: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49268: LD_ADDR_VAR 0 18
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: LIST
49308: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49309: LD_ADDR_VAR 0 19
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 3
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49349: LD_ADDR_VAR 0 20
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: LD_INT 3
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 3
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49390: LD_ADDR_VAR 0 21
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: NEG
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 3
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49434: LD_ADDR_VAR 0 22
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 3
49465: NEG
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49480: LD_ADDR_VAR 0 23
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 4
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49524: LD_ADDR_VAR 0 24
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 3
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 4
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49565: LD_ADDR_VAR 0 25
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 4
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: LD_INT 4
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49605: LD_ADDR_VAR 0 26
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 4
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: LIST
49645: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49646: LD_ADDR_VAR 0 27
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 4
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49690: LD_ADDR_VAR 0 28
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: LD_INT 4
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 4
49721: NEG
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: LIST
49735: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49736: LD_ADDR_VAR 0 29
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 4
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 4
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 3
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 5
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 5
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 4
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 6
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 6
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 5
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49891: LD_ADDR_VAR 0 30
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 4
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 4
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 5
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 5
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 5
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 6
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 6
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50034: LD_ADDR_VAR 0 31
50038: PUSH
50039: LD_INT 3
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 4
50071: PUSH
50072: LD_INT 3
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 4
50081: PUSH
50082: LD_INT 4
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: PUSH
50092: LD_INT 4
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 5
50101: PUSH
50102: LD_INT 4
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 5
50111: PUSH
50112: LD_INT 5
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 4
50121: PUSH
50122: LD_INT 5
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 6
50131: PUSH
50132: LD_INT 5
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 6
50141: PUSH
50142: LD_INT 6
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 5
50151: PUSH
50152: LD_INT 6
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50173: LD_ADDR_VAR 0 32
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 3
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 3
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 4
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 4
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 5
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 5
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 4
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 6
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 6
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 5
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50316: LD_ADDR_VAR 0 33
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 3
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 3
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 4
50368: NEG
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 4
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 4
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 5
50402: NEG
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 5
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 5
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 6
50436: NEG
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 6
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50471: LD_ADDR_VAR 0 34
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 3
50502: NEG
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 4
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 4
50526: NEG
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 4
50538: NEG
50539: PUSH
50540: LD_INT 4
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 4
50550: NEG
50551: PUSH
50552: LD_INT 5
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 5
50562: NEG
50563: PUSH
50564: LD_INT 4
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 5
50574: NEG
50575: PUSH
50576: LD_INT 5
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 5
50586: NEG
50587: PUSH
50588: LD_INT 6
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 6
50598: NEG
50599: PUSH
50600: LD_INT 5
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 6
50610: NEG
50611: PUSH
50612: LD_INT 6
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50634: LD_ADDR_VAR 0 41
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50678: LD_ADDR_VAR 0 42
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: LIST
50718: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50719: LD_ADDR_VAR 0 43
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50759: LD_ADDR_VAR 0 44
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 3
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50800: LD_ADDR_VAR 0 45
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50844: LD_ADDR_VAR 0 46
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50890: LD_ADDR_VAR 0 47
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 3
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 3
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50923: LD_ADDR_VAR 0 48
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50954: LD_ADDR_VAR 0 49
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50983: LD_ADDR_VAR 0 50
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51012: LD_ADDR_VAR 0 51
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51043: LD_ADDR_VAR 0 52
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51076: LD_ADDR_VAR 0 53
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 3
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 3
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51120: LD_ADDR_VAR 0 54
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51161: LD_ADDR_VAR 0 55
51165: PUSH
51166: LD_INT 3
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51201: LD_ADDR_VAR 0 56
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 3
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 3
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51242: LD_ADDR_VAR 0 57
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51286: LD_ADDR_VAR 0 58
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: NEG
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: LIST
51331: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51332: LD_ADDR_VAR 0 59
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51376: LD_ADDR_VAR 0 60
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51417: LD_ADDR_VAR 0 61
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51457: LD_ADDR_VAR 0 62
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51498: LD_ADDR_VAR 0 63
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51542: LD_ADDR_VAR 0 64
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// end ; 2 :
51588: GO 54854
51590: LD_INT 2
51592: DOUBLE
51593: EQUAL
51594: IFTRUE 51598
51596: GO 54853
51598: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51599: LD_ADDR_VAR 0 29
51603: PUSH
51604: LD_INT 4
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 4
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 5
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 5
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 4
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 5
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: LD_INT 3
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 4
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 4
51729: PUSH
51730: LD_INT 4
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: LD_INT 4
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 4
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 4
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 3
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 5
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 5
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 4
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 3
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: LD_INT 5
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 3
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: NEG
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 4
51938: NEG
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 4
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 4
51961: NEG
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 4
51984: NEG
51985: PUSH
51986: LD_INT 4
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 4
51996: NEG
51997: PUSH
51998: LD_INT 5
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 3
52008: NEG
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 4
52032: NEG
52033: PUSH
52034: LD_INT 3
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 5
52044: NEG
52045: PUSH
52046: LD_INT 4
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 5
52056: NEG
52057: PUSH
52058: LD_INT 5
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: LD_INT 5
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 5
52080: NEG
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52137: LD_ADDR_VAR 0 30
52141: PUSH
52142: LD_INT 4
52144: PUSH
52145: LD_INT 4
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 4
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 5
52164: PUSH
52165: LD_INT 4
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 5
52174: PUSH
52175: LD_INT 5
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 4
52184: PUSH
52185: LD_INT 5
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: LD_INT 4
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 5
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: LD_INT 5
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 4
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 4
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 4
52327: NEG
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 4
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: NEG
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 4
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 5
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 5
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 5
52406: NEG
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: NEG
52442: PUSH
52443: LD_INT 4
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 4
52489: NEG
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 4
52501: NEG
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: LD_INT 4
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 4
52525: NEG
52526: PUSH
52527: LD_INT 2
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 4
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 5
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 4
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 3
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 4
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 5
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 3
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 5
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52684: LD_ADDR_VAR 0 31
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 4
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 4
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 5
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 5
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 4
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: LD_INT 5
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 4
52840: NEG
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 4
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 4
52863: NEG
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 4
52886: NEG
52887: PUSH
52888: LD_INT 4
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 4
52898: NEG
52899: PUSH
52900: LD_INT 5
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: NEG
52911: PUSH
52912: LD_INT 4
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 3
52922: NEG
52923: PUSH
52924: LD_INT 3
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 4
52934: NEG
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 5
52946: NEG
52947: PUSH
52948: LD_INT 4
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 5
52958: NEG
52959: PUSH
52960: LD_INT 5
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: LD_INT 5
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 5
52982: NEG
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 4
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 3
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 4
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: LD_INT 4
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 4
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 4
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 5
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 5
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 4
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 5
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53234: LD_ADDR_VAR 0 32
53238: PUSH
53239: LD_INT 4
53241: NEG
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 4
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 4
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 5
53297: NEG
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 5
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 5
53320: NEG
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 3
53332: NEG
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: LD_INT 4
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: LD_INT 3
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 4
53403: NEG
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 4
53415: NEG
53416: PUSH
53417: LD_INT 4
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 4
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 4
53439: NEG
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 4
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 5
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 4
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: LD_INT 4
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 5
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 3
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: LD_INT 5
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 4
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 4
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 3
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 4
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 4
53646: PUSH
53647: LD_INT 4
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 5
53666: PUSH
53667: LD_INT 4
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 5
53676: PUSH
53677: LD_INT 5
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 4
53686: PUSH
53687: LD_INT 5
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 4
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 5
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 3
53726: PUSH
53727: LD_INT 5
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53781: LD_ADDR_VAR 0 33
53785: PUSH
53786: LD_INT 4
53788: NEG
53789: PUSH
53790: LD_INT 4
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 4
53800: NEG
53801: PUSH
53802: LD_INT 5
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: LD_INT 4
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 4
53836: NEG
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 5
53848: NEG
53849: PUSH
53850: LD_INT 4
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 5
53860: NEG
53861: PUSH
53862: LD_INT 5
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: LD_INT 5
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 5
53884: NEG
53885: PUSH
53886: LD_INT 3
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 4
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 3
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 4
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: LD_INT 4
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 4
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 4
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 5
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 5
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 4
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 5
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 4
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 4
54121: PUSH
54122: LD_INT 4
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: LD_INT 4
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 3
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 4
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 4
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 4
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 4
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 5
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 5
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 4
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 5
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54319: LD_ADDR_VAR 0 34
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 4
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 5
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 4
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 4
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 5
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: LD_INT 3
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 5
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 3
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 4
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 4
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 4
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 4
54521: PUSH
54522: LD_INT 4
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 4
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 5
54541: PUSH
54542: LD_INT 4
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 5
54551: PUSH
54552: LD_INT 5
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 4
54561: PUSH
54562: LD_INT 5
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 3
54571: PUSH
54572: LD_INT 4
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 5
54591: PUSH
54592: LD_INT 3
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: LD_INT 5
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 3
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 4
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 4
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 4
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 4
54704: NEG
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 4
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 3
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 4
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 5
54760: NEG
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 5
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 5
54783: NEG
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// end ; end ;
54851: GO 54854
54853: POP
// case btype of b_depot , b_warehouse :
54854: LD_VAR 0 1
54858: PUSH
54859: LD_INT 0
54861: DOUBLE
54862: EQUAL
54863: IFTRUE 54873
54865: LD_INT 1
54867: DOUBLE
54868: EQUAL
54869: IFTRUE 54873
54871: GO 55074
54873: POP
// case nation of nation_american :
54874: LD_VAR 0 5
54878: PUSH
54879: LD_INT 1
54881: DOUBLE
54882: EQUAL
54883: IFTRUE 54887
54885: GO 54943
54887: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54888: LD_ADDR_VAR 0 9
54892: PUSH
54893: LD_VAR 0 11
54897: PUSH
54898: LD_VAR 0 12
54902: PUSH
54903: LD_VAR 0 13
54907: PUSH
54908: LD_VAR 0 14
54912: PUSH
54913: LD_VAR 0 15
54917: PUSH
54918: LD_VAR 0 16
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: PUSH
54931: LD_VAR 0 4
54935: PUSH
54936: LD_INT 1
54938: PLUS
54939: ARRAY
54940: ST_TO_ADDR
54941: GO 55072
54943: LD_INT 2
54945: DOUBLE
54946: EQUAL
54947: IFTRUE 54951
54949: GO 55007
54951: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54952: LD_ADDR_VAR 0 9
54956: PUSH
54957: LD_VAR 0 17
54961: PUSH
54962: LD_VAR 0 18
54966: PUSH
54967: LD_VAR 0 19
54971: PUSH
54972: LD_VAR 0 20
54976: PUSH
54977: LD_VAR 0 21
54981: PUSH
54982: LD_VAR 0 22
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: PUSH
54995: LD_VAR 0 4
54999: PUSH
55000: LD_INT 1
55002: PLUS
55003: ARRAY
55004: ST_TO_ADDR
55005: GO 55072
55007: LD_INT 3
55009: DOUBLE
55010: EQUAL
55011: IFTRUE 55015
55013: GO 55071
55015: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55016: LD_ADDR_VAR 0 9
55020: PUSH
55021: LD_VAR 0 23
55025: PUSH
55026: LD_VAR 0 24
55030: PUSH
55031: LD_VAR 0 25
55035: PUSH
55036: LD_VAR 0 26
55040: PUSH
55041: LD_VAR 0 27
55045: PUSH
55046: LD_VAR 0 28
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: PUSH
55059: LD_VAR 0 4
55063: PUSH
55064: LD_INT 1
55066: PLUS
55067: ARRAY
55068: ST_TO_ADDR
55069: GO 55072
55071: POP
55072: GO 55627
55074: LD_INT 2
55076: DOUBLE
55077: EQUAL
55078: IFTRUE 55088
55080: LD_INT 3
55082: DOUBLE
55083: EQUAL
55084: IFTRUE 55088
55086: GO 55144
55088: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55089: LD_ADDR_VAR 0 9
55093: PUSH
55094: LD_VAR 0 29
55098: PUSH
55099: LD_VAR 0 30
55103: PUSH
55104: LD_VAR 0 31
55108: PUSH
55109: LD_VAR 0 32
55113: PUSH
55114: LD_VAR 0 33
55118: PUSH
55119: LD_VAR 0 34
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: PUSH
55132: LD_VAR 0 4
55136: PUSH
55137: LD_INT 1
55139: PLUS
55140: ARRAY
55141: ST_TO_ADDR
55142: GO 55627
55144: LD_INT 16
55146: DOUBLE
55147: EQUAL
55148: IFTRUE 55206
55150: LD_INT 17
55152: DOUBLE
55153: EQUAL
55154: IFTRUE 55206
55156: LD_INT 18
55158: DOUBLE
55159: EQUAL
55160: IFTRUE 55206
55162: LD_INT 19
55164: DOUBLE
55165: EQUAL
55166: IFTRUE 55206
55168: LD_INT 22
55170: DOUBLE
55171: EQUAL
55172: IFTRUE 55206
55174: LD_INT 20
55176: DOUBLE
55177: EQUAL
55178: IFTRUE 55206
55180: LD_INT 21
55182: DOUBLE
55183: EQUAL
55184: IFTRUE 55206
55186: LD_INT 23
55188: DOUBLE
55189: EQUAL
55190: IFTRUE 55206
55192: LD_INT 24
55194: DOUBLE
55195: EQUAL
55196: IFTRUE 55206
55198: LD_INT 25
55200: DOUBLE
55201: EQUAL
55202: IFTRUE 55206
55204: GO 55262
55206: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55207: LD_ADDR_VAR 0 9
55211: PUSH
55212: LD_VAR 0 35
55216: PUSH
55217: LD_VAR 0 36
55221: PUSH
55222: LD_VAR 0 37
55226: PUSH
55227: LD_VAR 0 38
55231: PUSH
55232: LD_VAR 0 39
55236: PUSH
55237: LD_VAR 0 40
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: PUSH
55250: LD_VAR 0 4
55254: PUSH
55255: LD_INT 1
55257: PLUS
55258: ARRAY
55259: ST_TO_ADDR
55260: GO 55627
55262: LD_INT 6
55264: DOUBLE
55265: EQUAL
55266: IFTRUE 55318
55268: LD_INT 7
55270: DOUBLE
55271: EQUAL
55272: IFTRUE 55318
55274: LD_INT 8
55276: DOUBLE
55277: EQUAL
55278: IFTRUE 55318
55280: LD_INT 13
55282: DOUBLE
55283: EQUAL
55284: IFTRUE 55318
55286: LD_INT 12
55288: DOUBLE
55289: EQUAL
55290: IFTRUE 55318
55292: LD_INT 15
55294: DOUBLE
55295: EQUAL
55296: IFTRUE 55318
55298: LD_INT 11
55300: DOUBLE
55301: EQUAL
55302: IFTRUE 55318
55304: LD_INT 14
55306: DOUBLE
55307: EQUAL
55308: IFTRUE 55318
55310: LD_INT 10
55312: DOUBLE
55313: EQUAL
55314: IFTRUE 55318
55316: GO 55374
55318: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55319: LD_ADDR_VAR 0 9
55323: PUSH
55324: LD_VAR 0 41
55328: PUSH
55329: LD_VAR 0 42
55333: PUSH
55334: LD_VAR 0 43
55338: PUSH
55339: LD_VAR 0 44
55343: PUSH
55344: LD_VAR 0 45
55348: PUSH
55349: LD_VAR 0 46
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: PUSH
55362: LD_VAR 0 4
55366: PUSH
55367: LD_INT 1
55369: PLUS
55370: ARRAY
55371: ST_TO_ADDR
55372: GO 55627
55374: LD_INT 36
55376: DOUBLE
55377: EQUAL
55378: IFTRUE 55382
55380: GO 55438
55382: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55383: LD_ADDR_VAR 0 9
55387: PUSH
55388: LD_VAR 0 47
55392: PUSH
55393: LD_VAR 0 48
55397: PUSH
55398: LD_VAR 0 49
55402: PUSH
55403: LD_VAR 0 50
55407: PUSH
55408: LD_VAR 0 51
55412: PUSH
55413: LD_VAR 0 52
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: PUSH
55426: LD_VAR 0 4
55430: PUSH
55431: LD_INT 1
55433: PLUS
55434: ARRAY
55435: ST_TO_ADDR
55436: GO 55627
55438: LD_INT 4
55440: DOUBLE
55441: EQUAL
55442: IFTRUE 55464
55444: LD_INT 5
55446: DOUBLE
55447: EQUAL
55448: IFTRUE 55464
55450: LD_INT 34
55452: DOUBLE
55453: EQUAL
55454: IFTRUE 55464
55456: LD_INT 37
55458: DOUBLE
55459: EQUAL
55460: IFTRUE 55464
55462: GO 55520
55464: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55465: LD_ADDR_VAR 0 9
55469: PUSH
55470: LD_VAR 0 53
55474: PUSH
55475: LD_VAR 0 54
55479: PUSH
55480: LD_VAR 0 55
55484: PUSH
55485: LD_VAR 0 56
55489: PUSH
55490: LD_VAR 0 57
55494: PUSH
55495: LD_VAR 0 58
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: PUSH
55508: LD_VAR 0 4
55512: PUSH
55513: LD_INT 1
55515: PLUS
55516: ARRAY
55517: ST_TO_ADDR
55518: GO 55627
55520: LD_INT 31
55522: DOUBLE
55523: EQUAL
55524: IFTRUE 55570
55526: LD_INT 32
55528: DOUBLE
55529: EQUAL
55530: IFTRUE 55570
55532: LD_INT 33
55534: DOUBLE
55535: EQUAL
55536: IFTRUE 55570
55538: LD_INT 27
55540: DOUBLE
55541: EQUAL
55542: IFTRUE 55570
55544: LD_INT 26
55546: DOUBLE
55547: EQUAL
55548: IFTRUE 55570
55550: LD_INT 28
55552: DOUBLE
55553: EQUAL
55554: IFTRUE 55570
55556: LD_INT 29
55558: DOUBLE
55559: EQUAL
55560: IFTRUE 55570
55562: LD_INT 30
55564: DOUBLE
55565: EQUAL
55566: IFTRUE 55570
55568: GO 55626
55570: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55571: LD_ADDR_VAR 0 9
55575: PUSH
55576: LD_VAR 0 59
55580: PUSH
55581: LD_VAR 0 60
55585: PUSH
55586: LD_VAR 0 61
55590: PUSH
55591: LD_VAR 0 62
55595: PUSH
55596: LD_VAR 0 63
55600: PUSH
55601: LD_VAR 0 64
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: PUSH
55614: LD_VAR 0 4
55618: PUSH
55619: LD_INT 1
55621: PLUS
55622: ARRAY
55623: ST_TO_ADDR
55624: GO 55627
55626: POP
// temp_list2 = [ ] ;
55627: LD_ADDR_VAR 0 10
55631: PUSH
55632: EMPTY
55633: ST_TO_ADDR
// for i in temp_list do
55634: LD_ADDR_VAR 0 8
55638: PUSH
55639: LD_VAR 0 9
55643: PUSH
55644: FOR_IN
55645: IFFALSE 55697
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55647: LD_ADDR_VAR 0 10
55651: PUSH
55652: LD_VAR 0 10
55656: PUSH
55657: LD_VAR 0 8
55661: PUSH
55662: LD_INT 1
55664: ARRAY
55665: PUSH
55666: LD_VAR 0 2
55670: PLUS
55671: PUSH
55672: LD_VAR 0 8
55676: PUSH
55677: LD_INT 2
55679: ARRAY
55680: PUSH
55681: LD_VAR 0 3
55685: PLUS
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: ADD
55694: ST_TO_ADDR
55695: GO 55644
55697: POP
55698: POP
// result = temp_list2 ;
55699: LD_ADDR_VAR 0 7
55703: PUSH
55704: LD_VAR 0 10
55708: ST_TO_ADDR
// end ;
55709: LD_VAR 0 7
55713: RET
// export function EnemyInRange ( unit , dist ) ; begin
55714: LD_INT 0
55716: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55717: LD_ADDR_VAR 0 3
55721: PUSH
55722: LD_VAR 0 1
55726: PPUSH
55727: CALL_OW 255
55731: PPUSH
55732: LD_VAR 0 1
55736: PPUSH
55737: CALL_OW 250
55741: PPUSH
55742: LD_VAR 0 1
55746: PPUSH
55747: CALL_OW 251
55751: PPUSH
55752: LD_VAR 0 2
55756: PPUSH
55757: CALL 29110 0 4
55761: PUSH
55762: LD_INT 4
55764: ARRAY
55765: ST_TO_ADDR
// end ;
55766: LD_VAR 0 3
55770: RET
// export function PlayerSeeMe ( unit ) ; begin
55771: LD_INT 0
55773: PPUSH
// result := See ( your_side , unit ) ;
55774: LD_ADDR_VAR 0 2
55778: PUSH
55779: LD_OWVAR 2
55783: PPUSH
55784: LD_VAR 0 1
55788: PPUSH
55789: CALL_OW 292
55793: ST_TO_ADDR
// end ;
55794: LD_VAR 0 2
55798: RET
// export function ReverseDir ( unit ) ; begin
55799: LD_INT 0
55801: PPUSH
// if not unit then
55802: LD_VAR 0 1
55806: NOT
55807: IFFALSE 55811
// exit ;
55809: GO 55834
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55811: LD_ADDR_VAR 0 2
55815: PUSH
55816: LD_VAR 0 1
55820: PPUSH
55821: CALL_OW 254
55825: PUSH
55826: LD_INT 3
55828: PLUS
55829: PUSH
55830: LD_INT 6
55832: MOD
55833: ST_TO_ADDR
// end ;
55834: LD_VAR 0 2
55838: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55839: LD_INT 0
55841: PPUSH
55842: PPUSH
55843: PPUSH
55844: PPUSH
55845: PPUSH
// if not hexes then
55846: LD_VAR 0 2
55850: NOT
55851: IFFALSE 55855
// exit ;
55853: GO 56003
// dist := 9999 ;
55855: LD_ADDR_VAR 0 5
55859: PUSH
55860: LD_INT 9999
55862: ST_TO_ADDR
// for i = 1 to hexes do
55863: LD_ADDR_VAR 0 4
55867: PUSH
55868: DOUBLE
55869: LD_INT 1
55871: DEC
55872: ST_TO_ADDR
55873: LD_VAR 0 2
55877: PUSH
55878: FOR_TO
55879: IFFALSE 55991
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55881: LD_VAR 0 1
55885: PPUSH
55886: LD_VAR 0 2
55890: PUSH
55891: LD_VAR 0 4
55895: ARRAY
55896: PUSH
55897: LD_INT 1
55899: ARRAY
55900: PPUSH
55901: LD_VAR 0 2
55905: PUSH
55906: LD_VAR 0 4
55910: ARRAY
55911: PUSH
55912: LD_INT 2
55914: ARRAY
55915: PPUSH
55916: CALL_OW 297
55920: PUSH
55921: LD_VAR 0 5
55925: LESS
55926: IFFALSE 55989
// begin hex := hexes [ i ] ;
55928: LD_ADDR_VAR 0 7
55932: PUSH
55933: LD_VAR 0 2
55937: PUSH
55938: LD_VAR 0 4
55942: ARRAY
55943: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55944: LD_ADDR_VAR 0 5
55948: PUSH
55949: LD_VAR 0 1
55953: PPUSH
55954: LD_VAR 0 2
55958: PUSH
55959: LD_VAR 0 4
55963: ARRAY
55964: PUSH
55965: LD_INT 1
55967: ARRAY
55968: PPUSH
55969: LD_VAR 0 2
55973: PUSH
55974: LD_VAR 0 4
55978: ARRAY
55979: PUSH
55980: LD_INT 2
55982: ARRAY
55983: PPUSH
55984: CALL_OW 297
55988: ST_TO_ADDR
// end ; end ;
55989: GO 55878
55991: POP
55992: POP
// result := hex ;
55993: LD_ADDR_VAR 0 3
55997: PUSH
55998: LD_VAR 0 7
56002: ST_TO_ADDR
// end ;
56003: LD_VAR 0 3
56007: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56008: LD_INT 0
56010: PPUSH
56011: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56012: LD_VAR 0 1
56016: NOT
56017: PUSH
56018: LD_VAR 0 1
56022: PUSH
56023: LD_INT 21
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 23
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PPUSH
56047: CALL_OW 69
56051: IN
56052: NOT
56053: OR
56054: IFFALSE 56058
// exit ;
56056: GO 56105
// for i = 1 to 3 do
56058: LD_ADDR_VAR 0 3
56062: PUSH
56063: DOUBLE
56064: LD_INT 1
56066: DEC
56067: ST_TO_ADDR
56068: LD_INT 3
56070: PUSH
56071: FOR_TO
56072: IFFALSE 56103
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56074: LD_VAR 0 1
56078: PPUSH
56079: CALL_OW 250
56083: PPUSH
56084: LD_VAR 0 1
56088: PPUSH
56089: CALL_OW 251
56093: PPUSH
56094: LD_INT 1
56096: PPUSH
56097: CALL_OW 453
56101: GO 56071
56103: POP
56104: POP
// end ;
56105: LD_VAR 0 2
56109: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56110: LD_INT 0
56112: PPUSH
56113: PPUSH
56114: PPUSH
56115: PPUSH
56116: PPUSH
56117: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56118: LD_VAR 0 1
56122: NOT
56123: PUSH
56124: LD_VAR 0 2
56128: NOT
56129: OR
56130: PUSH
56131: LD_VAR 0 1
56135: PPUSH
56136: CALL_OW 314
56140: OR
56141: IFFALSE 56145
// exit ;
56143: GO 56586
// x := GetX ( enemy_unit ) ;
56145: LD_ADDR_VAR 0 7
56149: PUSH
56150: LD_VAR 0 2
56154: PPUSH
56155: CALL_OW 250
56159: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56160: LD_ADDR_VAR 0 8
56164: PUSH
56165: LD_VAR 0 2
56169: PPUSH
56170: CALL_OW 251
56174: ST_TO_ADDR
// if not x or not y then
56175: LD_VAR 0 7
56179: NOT
56180: PUSH
56181: LD_VAR 0 8
56185: NOT
56186: OR
56187: IFFALSE 56191
// exit ;
56189: GO 56586
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56191: LD_ADDR_VAR 0 6
56195: PUSH
56196: LD_VAR 0 7
56200: PPUSH
56201: LD_INT 0
56203: PPUSH
56204: LD_INT 4
56206: PPUSH
56207: CALL_OW 272
56211: PUSH
56212: LD_VAR 0 8
56216: PPUSH
56217: LD_INT 0
56219: PPUSH
56220: LD_INT 4
56222: PPUSH
56223: CALL_OW 273
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_VAR 0 7
56236: PPUSH
56237: LD_INT 1
56239: PPUSH
56240: LD_INT 4
56242: PPUSH
56243: CALL_OW 272
56247: PUSH
56248: LD_VAR 0 8
56252: PPUSH
56253: LD_INT 1
56255: PPUSH
56256: LD_INT 4
56258: PPUSH
56259: CALL_OW 273
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_VAR 0 7
56272: PPUSH
56273: LD_INT 2
56275: PPUSH
56276: LD_INT 4
56278: PPUSH
56279: CALL_OW 272
56283: PUSH
56284: LD_VAR 0 8
56288: PPUSH
56289: LD_INT 2
56291: PPUSH
56292: LD_INT 4
56294: PPUSH
56295: CALL_OW 273
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_VAR 0 7
56308: PPUSH
56309: LD_INT 3
56311: PPUSH
56312: LD_INT 4
56314: PPUSH
56315: CALL_OW 272
56319: PUSH
56320: LD_VAR 0 8
56324: PPUSH
56325: LD_INT 3
56327: PPUSH
56328: LD_INT 4
56330: PPUSH
56331: CALL_OW 273
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_VAR 0 7
56344: PPUSH
56345: LD_INT 4
56347: PPUSH
56348: LD_INT 4
56350: PPUSH
56351: CALL_OW 272
56355: PUSH
56356: LD_VAR 0 8
56360: PPUSH
56361: LD_INT 4
56363: PPUSH
56364: LD_INT 4
56366: PPUSH
56367: CALL_OW 273
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_VAR 0 7
56380: PPUSH
56381: LD_INT 5
56383: PPUSH
56384: LD_INT 4
56386: PPUSH
56387: CALL_OW 272
56391: PUSH
56392: LD_VAR 0 8
56396: PPUSH
56397: LD_INT 5
56399: PPUSH
56400: LD_INT 4
56402: PPUSH
56403: CALL_OW 273
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: ST_TO_ADDR
// for i = tmp downto 1 do
56420: LD_ADDR_VAR 0 4
56424: PUSH
56425: DOUBLE
56426: LD_VAR 0 6
56430: INC
56431: ST_TO_ADDR
56432: LD_INT 1
56434: PUSH
56435: FOR_DOWNTO
56436: IFFALSE 56537
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56438: LD_VAR 0 6
56442: PUSH
56443: LD_VAR 0 4
56447: ARRAY
56448: PUSH
56449: LD_INT 1
56451: ARRAY
56452: PPUSH
56453: LD_VAR 0 6
56457: PUSH
56458: LD_VAR 0 4
56462: ARRAY
56463: PUSH
56464: LD_INT 2
56466: ARRAY
56467: PPUSH
56468: CALL_OW 488
56472: NOT
56473: PUSH
56474: LD_VAR 0 6
56478: PUSH
56479: LD_VAR 0 4
56483: ARRAY
56484: PUSH
56485: LD_INT 1
56487: ARRAY
56488: PPUSH
56489: LD_VAR 0 6
56493: PUSH
56494: LD_VAR 0 4
56498: ARRAY
56499: PUSH
56500: LD_INT 2
56502: ARRAY
56503: PPUSH
56504: CALL_OW 428
56508: PUSH
56509: LD_INT 0
56511: NONEQUAL
56512: OR
56513: IFFALSE 56535
// tmp := Delete ( tmp , i ) ;
56515: LD_ADDR_VAR 0 6
56519: PUSH
56520: LD_VAR 0 6
56524: PPUSH
56525: LD_VAR 0 4
56529: PPUSH
56530: CALL_OW 3
56534: ST_TO_ADDR
56535: GO 56435
56537: POP
56538: POP
// j := GetClosestHex ( unit , tmp ) ;
56539: LD_ADDR_VAR 0 5
56543: PUSH
56544: LD_VAR 0 1
56548: PPUSH
56549: LD_VAR 0 6
56553: PPUSH
56554: CALL 55839 0 2
56558: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56559: LD_VAR 0 1
56563: PPUSH
56564: LD_VAR 0 5
56568: PUSH
56569: LD_INT 1
56571: ARRAY
56572: PPUSH
56573: LD_VAR 0 5
56577: PUSH
56578: LD_INT 2
56580: ARRAY
56581: PPUSH
56582: CALL_OW 111
// end ;
56586: LD_VAR 0 3
56590: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56591: LD_INT 0
56593: PPUSH
56594: PPUSH
56595: PPUSH
// uc_side = 0 ;
56596: LD_ADDR_OWVAR 20
56600: PUSH
56601: LD_INT 0
56603: ST_TO_ADDR
// uc_nation = 0 ;
56604: LD_ADDR_OWVAR 21
56608: PUSH
56609: LD_INT 0
56611: ST_TO_ADDR
// InitHc_All ( ) ;
56612: CALL_OW 584
// InitVc ;
56616: CALL_OW 20
// if mastodonts then
56620: LD_VAR 0 6
56624: IFFALSE 56691
// for i = 1 to mastodonts do
56626: LD_ADDR_VAR 0 11
56630: PUSH
56631: DOUBLE
56632: LD_INT 1
56634: DEC
56635: ST_TO_ADDR
56636: LD_VAR 0 6
56640: PUSH
56641: FOR_TO
56642: IFFALSE 56689
// begin vc_chassis := 31 ;
56644: LD_ADDR_OWVAR 37
56648: PUSH
56649: LD_INT 31
56651: ST_TO_ADDR
// vc_control := control_rider ;
56652: LD_ADDR_OWVAR 38
56656: PUSH
56657: LD_INT 4
56659: ST_TO_ADDR
// animal := CreateVehicle ;
56660: LD_ADDR_VAR 0 12
56664: PUSH
56665: CALL_OW 45
56669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56670: LD_VAR 0 12
56674: PPUSH
56675: LD_VAR 0 8
56679: PPUSH
56680: LD_INT 0
56682: PPUSH
56683: CALL 58879 0 3
// end ;
56687: GO 56641
56689: POP
56690: POP
// if horses then
56691: LD_VAR 0 5
56695: IFFALSE 56762
// for i = 1 to horses do
56697: LD_ADDR_VAR 0 11
56701: PUSH
56702: DOUBLE
56703: LD_INT 1
56705: DEC
56706: ST_TO_ADDR
56707: LD_VAR 0 5
56711: PUSH
56712: FOR_TO
56713: IFFALSE 56760
// begin hc_class := 21 ;
56715: LD_ADDR_OWVAR 28
56719: PUSH
56720: LD_INT 21
56722: ST_TO_ADDR
// hc_gallery :=  ;
56723: LD_ADDR_OWVAR 33
56727: PUSH
56728: LD_STRING 
56730: ST_TO_ADDR
// animal := CreateHuman ;
56731: LD_ADDR_VAR 0 12
56735: PUSH
56736: CALL_OW 44
56740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56741: LD_VAR 0 12
56745: PPUSH
56746: LD_VAR 0 8
56750: PPUSH
56751: LD_INT 0
56753: PPUSH
56754: CALL 58879 0 3
// end ;
56758: GO 56712
56760: POP
56761: POP
// if birds then
56762: LD_VAR 0 1
56766: IFFALSE 56833
// for i = 1 to birds do
56768: LD_ADDR_VAR 0 11
56772: PUSH
56773: DOUBLE
56774: LD_INT 1
56776: DEC
56777: ST_TO_ADDR
56778: LD_VAR 0 1
56782: PUSH
56783: FOR_TO
56784: IFFALSE 56831
// begin hc_class = 18 ;
56786: LD_ADDR_OWVAR 28
56790: PUSH
56791: LD_INT 18
56793: ST_TO_ADDR
// hc_gallery =  ;
56794: LD_ADDR_OWVAR 33
56798: PUSH
56799: LD_STRING 
56801: ST_TO_ADDR
// animal := CreateHuman ;
56802: LD_ADDR_VAR 0 12
56806: PUSH
56807: CALL_OW 44
56811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56812: LD_VAR 0 12
56816: PPUSH
56817: LD_VAR 0 8
56821: PPUSH
56822: LD_INT 0
56824: PPUSH
56825: CALL 58879 0 3
// end ;
56829: GO 56783
56831: POP
56832: POP
// if tigers then
56833: LD_VAR 0 2
56837: IFFALSE 56921
// for i = 1 to tigers do
56839: LD_ADDR_VAR 0 11
56843: PUSH
56844: DOUBLE
56845: LD_INT 1
56847: DEC
56848: ST_TO_ADDR
56849: LD_VAR 0 2
56853: PUSH
56854: FOR_TO
56855: IFFALSE 56919
// begin hc_class = class_tiger ;
56857: LD_ADDR_OWVAR 28
56861: PUSH
56862: LD_INT 14
56864: ST_TO_ADDR
// hc_gallery =  ;
56865: LD_ADDR_OWVAR 33
56869: PUSH
56870: LD_STRING 
56872: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56873: LD_ADDR_OWVAR 35
56877: PUSH
56878: LD_INT 7
56880: NEG
56881: PPUSH
56882: LD_INT 7
56884: PPUSH
56885: CALL_OW 12
56889: ST_TO_ADDR
// animal := CreateHuman ;
56890: LD_ADDR_VAR 0 12
56894: PUSH
56895: CALL_OW 44
56899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56900: LD_VAR 0 12
56904: PPUSH
56905: LD_VAR 0 8
56909: PPUSH
56910: LD_INT 0
56912: PPUSH
56913: CALL 58879 0 3
// end ;
56917: GO 56854
56919: POP
56920: POP
// if apemans then
56921: LD_VAR 0 3
56925: IFFALSE 57048
// for i = 1 to apemans do
56927: LD_ADDR_VAR 0 11
56931: PUSH
56932: DOUBLE
56933: LD_INT 1
56935: DEC
56936: ST_TO_ADDR
56937: LD_VAR 0 3
56941: PUSH
56942: FOR_TO
56943: IFFALSE 57046
// begin hc_class = class_apeman ;
56945: LD_ADDR_OWVAR 28
56949: PUSH
56950: LD_INT 12
56952: ST_TO_ADDR
// hc_gallery =  ;
56953: LD_ADDR_OWVAR 33
56957: PUSH
56958: LD_STRING 
56960: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56961: LD_ADDR_OWVAR 35
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PPUSH
56970: LD_INT 2
56972: PPUSH
56973: CALL_OW 12
56977: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56978: LD_ADDR_OWVAR 31
56982: PUSH
56983: LD_INT 1
56985: PPUSH
56986: LD_INT 3
56988: PPUSH
56989: CALL_OW 12
56993: PUSH
56994: LD_INT 1
56996: PPUSH
56997: LD_INT 3
56999: PPUSH
57000: CALL_OW 12
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: ST_TO_ADDR
// animal := CreateHuman ;
57017: LD_ADDR_VAR 0 12
57021: PUSH
57022: CALL_OW 44
57026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57027: LD_VAR 0 12
57031: PPUSH
57032: LD_VAR 0 8
57036: PPUSH
57037: LD_INT 0
57039: PPUSH
57040: CALL 58879 0 3
// end ;
57044: GO 56942
57046: POP
57047: POP
// if enchidnas then
57048: LD_VAR 0 4
57052: IFFALSE 57119
// for i = 1 to enchidnas do
57054: LD_ADDR_VAR 0 11
57058: PUSH
57059: DOUBLE
57060: LD_INT 1
57062: DEC
57063: ST_TO_ADDR
57064: LD_VAR 0 4
57068: PUSH
57069: FOR_TO
57070: IFFALSE 57117
// begin hc_class = 13 ;
57072: LD_ADDR_OWVAR 28
57076: PUSH
57077: LD_INT 13
57079: ST_TO_ADDR
// hc_gallery =  ;
57080: LD_ADDR_OWVAR 33
57084: PUSH
57085: LD_STRING 
57087: ST_TO_ADDR
// animal := CreateHuman ;
57088: LD_ADDR_VAR 0 12
57092: PUSH
57093: CALL_OW 44
57097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57098: LD_VAR 0 12
57102: PPUSH
57103: LD_VAR 0 8
57107: PPUSH
57108: LD_INT 0
57110: PPUSH
57111: CALL 58879 0 3
// end ;
57115: GO 57069
57117: POP
57118: POP
// if fishes then
57119: LD_VAR 0 7
57123: IFFALSE 57190
// for i = 1 to fishes do
57125: LD_ADDR_VAR 0 11
57129: PUSH
57130: DOUBLE
57131: LD_INT 1
57133: DEC
57134: ST_TO_ADDR
57135: LD_VAR 0 7
57139: PUSH
57140: FOR_TO
57141: IFFALSE 57188
// begin hc_class = 20 ;
57143: LD_ADDR_OWVAR 28
57147: PUSH
57148: LD_INT 20
57150: ST_TO_ADDR
// hc_gallery =  ;
57151: LD_ADDR_OWVAR 33
57155: PUSH
57156: LD_STRING 
57158: ST_TO_ADDR
// animal := CreateHuman ;
57159: LD_ADDR_VAR 0 12
57163: PUSH
57164: CALL_OW 44
57168: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57169: LD_VAR 0 12
57173: PPUSH
57174: LD_VAR 0 9
57178: PPUSH
57179: LD_INT 0
57181: PPUSH
57182: CALL 58879 0 3
// end ;
57186: GO 57140
57188: POP
57189: POP
// end ;
57190: LD_VAR 0 10
57194: RET
// export function WantHeal ( sci , unit ) ; begin
57195: LD_INT 0
57197: PPUSH
// if GetTaskList ( sci ) > 0 then
57198: LD_VAR 0 1
57202: PPUSH
57203: CALL_OW 437
57207: PUSH
57208: LD_INT 0
57210: GREATER
57211: IFFALSE 57281
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57213: LD_VAR 0 1
57217: PPUSH
57218: CALL_OW 437
57222: PUSH
57223: LD_INT 1
57225: ARRAY
57226: PUSH
57227: LD_INT 1
57229: ARRAY
57230: PUSH
57231: LD_STRING l
57233: EQUAL
57234: PUSH
57235: LD_VAR 0 1
57239: PPUSH
57240: CALL_OW 437
57244: PUSH
57245: LD_INT 1
57247: ARRAY
57248: PUSH
57249: LD_INT 4
57251: ARRAY
57252: PUSH
57253: LD_VAR 0 2
57257: EQUAL
57258: AND
57259: IFFALSE 57271
// result := true else
57261: LD_ADDR_VAR 0 3
57265: PUSH
57266: LD_INT 1
57268: ST_TO_ADDR
57269: GO 57279
// result := false ;
57271: LD_ADDR_VAR 0 3
57275: PUSH
57276: LD_INT 0
57278: ST_TO_ADDR
// end else
57279: GO 57289
// result := false ;
57281: LD_ADDR_VAR 0 3
57285: PUSH
57286: LD_INT 0
57288: ST_TO_ADDR
// end ;
57289: LD_VAR 0 3
57293: RET
// export function HealTarget ( sci ) ; begin
57294: LD_INT 0
57296: PPUSH
// if not sci then
57297: LD_VAR 0 1
57301: NOT
57302: IFFALSE 57306
// exit ;
57304: GO 57371
// result := 0 ;
57306: LD_ADDR_VAR 0 2
57310: PUSH
57311: LD_INT 0
57313: ST_TO_ADDR
// if GetTaskList ( sci ) then
57314: LD_VAR 0 1
57318: PPUSH
57319: CALL_OW 437
57323: IFFALSE 57371
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57325: LD_VAR 0 1
57329: PPUSH
57330: CALL_OW 437
57334: PUSH
57335: LD_INT 1
57337: ARRAY
57338: PUSH
57339: LD_INT 1
57341: ARRAY
57342: PUSH
57343: LD_STRING l
57345: EQUAL
57346: IFFALSE 57371
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57348: LD_ADDR_VAR 0 2
57352: PUSH
57353: LD_VAR 0 1
57357: PPUSH
57358: CALL_OW 437
57362: PUSH
57363: LD_INT 1
57365: ARRAY
57366: PUSH
57367: LD_INT 4
57369: ARRAY
57370: ST_TO_ADDR
// end ;
57371: LD_VAR 0 2
57375: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57376: LD_INT 0
57378: PPUSH
57379: PPUSH
57380: PPUSH
57381: PPUSH
// if not base_units then
57382: LD_VAR 0 1
57386: NOT
57387: IFFALSE 57391
// exit ;
57389: GO 57478
// result := false ;
57391: LD_ADDR_VAR 0 2
57395: PUSH
57396: LD_INT 0
57398: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57399: LD_ADDR_VAR 0 5
57403: PUSH
57404: LD_VAR 0 1
57408: PPUSH
57409: LD_INT 21
57411: PUSH
57412: LD_INT 3
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PPUSH
57419: CALL_OW 72
57423: ST_TO_ADDR
// if not tmp then
57424: LD_VAR 0 5
57428: NOT
57429: IFFALSE 57433
// exit ;
57431: GO 57478
// for i in tmp do
57433: LD_ADDR_VAR 0 3
57437: PUSH
57438: LD_VAR 0 5
57442: PUSH
57443: FOR_IN
57444: IFFALSE 57476
// begin result := EnemyInRange ( i , 22 ) ;
57446: LD_ADDR_VAR 0 2
57450: PUSH
57451: LD_VAR 0 3
57455: PPUSH
57456: LD_INT 22
57458: PPUSH
57459: CALL 55714 0 2
57463: ST_TO_ADDR
// if result then
57464: LD_VAR 0 2
57468: IFFALSE 57474
// exit ;
57470: POP
57471: POP
57472: GO 57478
// end ;
57474: GO 57443
57476: POP
57477: POP
// end ;
57478: LD_VAR 0 2
57482: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57483: LD_INT 0
57485: PPUSH
57486: PPUSH
// if not units then
57487: LD_VAR 0 1
57491: NOT
57492: IFFALSE 57496
// exit ;
57494: GO 57566
// result := [ ] ;
57496: LD_ADDR_VAR 0 3
57500: PUSH
57501: EMPTY
57502: ST_TO_ADDR
// for i in units do
57503: LD_ADDR_VAR 0 4
57507: PUSH
57508: LD_VAR 0 1
57512: PUSH
57513: FOR_IN
57514: IFFALSE 57564
// if GetTag ( i ) = tag then
57516: LD_VAR 0 4
57520: PPUSH
57521: CALL_OW 110
57525: PUSH
57526: LD_VAR 0 2
57530: EQUAL
57531: IFFALSE 57562
// result := Replace ( result , result + 1 , i ) ;
57533: LD_ADDR_VAR 0 3
57537: PUSH
57538: LD_VAR 0 3
57542: PPUSH
57543: LD_VAR 0 3
57547: PUSH
57548: LD_INT 1
57550: PLUS
57551: PPUSH
57552: LD_VAR 0 4
57556: PPUSH
57557: CALL_OW 1
57561: ST_TO_ADDR
57562: GO 57513
57564: POP
57565: POP
// end ;
57566: LD_VAR 0 3
57570: RET
// export function IsDriver ( un ) ; begin
57571: LD_INT 0
57573: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57574: LD_ADDR_VAR 0 2
57578: PUSH
57579: LD_VAR 0 1
57583: PUSH
57584: LD_INT 55
57586: PUSH
57587: EMPTY
57588: LIST
57589: PPUSH
57590: CALL_OW 69
57594: IN
57595: ST_TO_ADDR
// end ;
57596: LD_VAR 0 2
57600: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57601: LD_INT 0
57603: PPUSH
57604: PPUSH
// list := [ ] ;
57605: LD_ADDR_VAR 0 5
57609: PUSH
57610: EMPTY
57611: ST_TO_ADDR
// case d of 0 :
57612: LD_VAR 0 3
57616: PUSH
57617: LD_INT 0
57619: DOUBLE
57620: EQUAL
57621: IFTRUE 57625
57623: GO 57758
57625: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57626: LD_ADDR_VAR 0 5
57630: PUSH
57631: LD_VAR 0 1
57635: PUSH
57636: LD_INT 4
57638: MINUS
57639: PUSH
57640: LD_VAR 0 2
57644: PUSH
57645: LD_INT 4
57647: MINUS
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: PUSH
57657: LD_VAR 0 1
57661: PUSH
57662: LD_INT 3
57664: MINUS
57665: PUSH
57666: LD_VAR 0 2
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: PUSH
57679: LD_VAR 0 1
57683: PUSH
57684: LD_INT 4
57686: PLUS
57687: PUSH
57688: LD_VAR 0 2
57692: PUSH
57693: LD_INT 4
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: PUSH
57701: LD_VAR 0 1
57705: PUSH
57706: LD_INT 3
57708: PLUS
57709: PUSH
57710: LD_VAR 0 2
57714: PUSH
57715: LD_INT 3
57717: PLUS
57718: PUSH
57719: LD_INT 5
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: PUSH
57727: LD_VAR 0 1
57731: PUSH
57732: LD_VAR 0 2
57736: PUSH
57737: LD_INT 4
57739: PLUS
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: ST_TO_ADDR
// end ; 1 :
57756: GO 58456
57758: LD_INT 1
57760: DOUBLE
57761: EQUAL
57762: IFTRUE 57766
57764: GO 57899
57766: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57767: LD_ADDR_VAR 0 5
57771: PUSH
57772: LD_VAR 0 1
57776: PUSH
57777: LD_VAR 0 2
57781: PUSH
57782: LD_INT 4
57784: MINUS
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: PUSH
57794: LD_VAR 0 1
57798: PUSH
57799: LD_INT 3
57801: MINUS
57802: PUSH
57803: LD_VAR 0 2
57807: PUSH
57808: LD_INT 3
57810: MINUS
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: PUSH
57820: LD_VAR 0 1
57824: PUSH
57825: LD_INT 4
57827: MINUS
57828: PUSH
57829: LD_VAR 0 2
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: PUSH
57842: LD_VAR 0 1
57846: PUSH
57847: LD_VAR 0 2
57851: PUSH
57852: LD_INT 3
57854: PLUS
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: PUSH
57864: LD_VAR 0 1
57868: PUSH
57869: LD_INT 4
57871: PLUS
57872: PUSH
57873: LD_VAR 0 2
57877: PUSH
57878: LD_INT 4
57880: PLUS
57881: PUSH
57882: LD_INT 5
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// end ; 2 :
57897: GO 58456
57899: LD_INT 2
57901: DOUBLE
57902: EQUAL
57903: IFTRUE 57907
57905: GO 58036
57907: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57908: LD_ADDR_VAR 0 5
57912: PUSH
57913: LD_VAR 0 1
57917: PUSH
57918: LD_VAR 0 2
57922: PUSH
57923: LD_INT 3
57925: MINUS
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: PUSH
57935: LD_VAR 0 1
57939: PUSH
57940: LD_INT 4
57942: PLUS
57943: PUSH
57944: LD_VAR 0 2
57948: PUSH
57949: LD_INT 4
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: LIST
57956: PUSH
57957: LD_VAR 0 1
57961: PUSH
57962: LD_VAR 0 2
57966: PUSH
57967: LD_INT 4
57969: PLUS
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: PUSH
57979: LD_VAR 0 1
57983: PUSH
57984: LD_INT 3
57986: MINUS
57987: PUSH
57988: LD_VAR 0 2
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: LIST
58000: PUSH
58001: LD_VAR 0 1
58005: PUSH
58006: LD_INT 4
58008: MINUS
58009: PUSH
58010: LD_VAR 0 2
58014: PUSH
58015: LD_INT 4
58017: MINUS
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: ST_TO_ADDR
// end ; 3 :
58034: GO 58456
58036: LD_INT 3
58038: DOUBLE
58039: EQUAL
58040: IFTRUE 58044
58042: GO 58177
58044: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58045: LD_ADDR_VAR 0 5
58049: PUSH
58050: LD_VAR 0 1
58054: PUSH
58055: LD_INT 3
58057: PLUS
58058: PUSH
58059: LD_VAR 0 2
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: LIST
58071: PUSH
58072: LD_VAR 0 1
58076: PUSH
58077: LD_INT 4
58079: PLUS
58080: PUSH
58081: LD_VAR 0 2
58085: PUSH
58086: LD_INT 4
58088: PLUS
58089: PUSH
58090: LD_INT 5
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: PUSH
58098: LD_VAR 0 1
58102: PUSH
58103: LD_INT 4
58105: MINUS
58106: PUSH
58107: LD_VAR 0 2
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: LIST
58119: PUSH
58120: LD_VAR 0 1
58124: PUSH
58125: LD_VAR 0 2
58129: PUSH
58130: LD_INT 4
58132: MINUS
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: PUSH
58142: LD_VAR 0 1
58146: PUSH
58147: LD_INT 3
58149: MINUS
58150: PUSH
58151: LD_VAR 0 2
58155: PUSH
58156: LD_INT 3
58158: MINUS
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: ST_TO_ADDR
// end ; 4 :
58175: GO 58456
58177: LD_INT 4
58179: DOUBLE
58180: EQUAL
58181: IFTRUE 58185
58183: GO 58318
58185: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58186: LD_ADDR_VAR 0 5
58190: PUSH
58191: LD_VAR 0 1
58195: PUSH
58196: LD_VAR 0 2
58200: PUSH
58201: LD_INT 4
58203: PLUS
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: PUSH
58213: LD_VAR 0 1
58217: PUSH
58218: LD_INT 3
58220: PLUS
58221: PUSH
58222: LD_VAR 0 2
58226: PUSH
58227: LD_INT 3
58229: PLUS
58230: PUSH
58231: LD_INT 5
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: PUSH
58239: LD_VAR 0 1
58243: PUSH
58244: LD_INT 4
58246: PLUS
58247: PUSH
58248: LD_VAR 0 2
58252: PUSH
58253: LD_INT 4
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: LIST
58260: PUSH
58261: LD_VAR 0 1
58265: PUSH
58266: LD_VAR 0 2
58270: PUSH
58271: LD_INT 3
58273: MINUS
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: PUSH
58283: LD_VAR 0 1
58287: PUSH
58288: LD_INT 4
58290: MINUS
58291: PUSH
58292: LD_VAR 0 2
58296: PUSH
58297: LD_INT 4
58299: MINUS
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// end ; 5 :
58316: GO 58456
58318: LD_INT 5
58320: DOUBLE
58321: EQUAL
58322: IFTRUE 58326
58324: GO 58455
58326: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58327: LD_ADDR_VAR 0 5
58331: PUSH
58332: LD_VAR 0 1
58336: PUSH
58337: LD_INT 4
58339: MINUS
58340: PUSH
58341: LD_VAR 0 2
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: LIST
58353: PUSH
58354: LD_VAR 0 1
58358: PUSH
58359: LD_VAR 0 2
58363: PUSH
58364: LD_INT 4
58366: MINUS
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: LIST
58375: PUSH
58376: LD_VAR 0 1
58380: PUSH
58381: LD_INT 4
58383: PLUS
58384: PUSH
58385: LD_VAR 0 2
58389: PUSH
58390: LD_INT 4
58392: PLUS
58393: PUSH
58394: LD_INT 5
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: LIST
58401: PUSH
58402: LD_VAR 0 1
58406: PUSH
58407: LD_INT 3
58409: PLUS
58410: PUSH
58411: LD_VAR 0 2
58415: PUSH
58416: LD_INT 4
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: PUSH
58424: LD_VAR 0 1
58428: PUSH
58429: LD_VAR 0 2
58433: PUSH
58434: LD_INT 3
58436: PLUS
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: ST_TO_ADDR
// end ; end ;
58453: GO 58456
58455: POP
// result := list ;
58456: LD_ADDR_VAR 0 4
58460: PUSH
58461: LD_VAR 0 5
58465: ST_TO_ADDR
// end ;
58466: LD_VAR 0 4
58470: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58471: LD_INT 0
58473: PPUSH
58474: PPUSH
58475: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58476: LD_VAR 0 1
58480: NOT
58481: PUSH
58482: LD_VAR 0 2
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: LD_INT 4
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: IN
58505: NOT
58506: OR
58507: IFFALSE 58511
// exit ;
58509: GO 58603
// tmp := [ ] ;
58511: LD_ADDR_VAR 0 5
58515: PUSH
58516: EMPTY
58517: ST_TO_ADDR
// for i in units do
58518: LD_ADDR_VAR 0 4
58522: PUSH
58523: LD_VAR 0 1
58527: PUSH
58528: FOR_IN
58529: IFFALSE 58572
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58531: LD_ADDR_VAR 0 5
58535: PUSH
58536: LD_VAR 0 5
58540: PPUSH
58541: LD_VAR 0 5
58545: PUSH
58546: LD_INT 1
58548: PLUS
58549: PPUSH
58550: LD_VAR 0 4
58554: PPUSH
58555: LD_VAR 0 2
58559: PPUSH
58560: CALL_OW 259
58564: PPUSH
58565: CALL_OW 2
58569: ST_TO_ADDR
58570: GO 58528
58572: POP
58573: POP
// if not tmp then
58574: LD_VAR 0 5
58578: NOT
58579: IFFALSE 58583
// exit ;
58581: GO 58603
// result := SortListByListDesc ( units , tmp ) ;
58583: LD_ADDR_VAR 0 3
58587: PUSH
58588: LD_VAR 0 1
58592: PPUSH
58593: LD_VAR 0 5
58597: PPUSH
58598: CALL_OW 77
58602: ST_TO_ADDR
// end ;
58603: LD_VAR 0 3
58607: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58608: LD_INT 0
58610: PPUSH
58611: PPUSH
58612: PPUSH
// result := false ;
58613: LD_ADDR_VAR 0 3
58617: PUSH
58618: LD_INT 0
58620: ST_TO_ADDR
// x := GetX ( building ) ;
58621: LD_ADDR_VAR 0 4
58625: PUSH
58626: LD_VAR 0 2
58630: PPUSH
58631: CALL_OW 250
58635: ST_TO_ADDR
// y := GetY ( building ) ;
58636: LD_ADDR_VAR 0 5
58640: PUSH
58641: LD_VAR 0 2
58645: PPUSH
58646: CALL_OW 251
58650: ST_TO_ADDR
// if not building or not x or not y then
58651: LD_VAR 0 2
58655: NOT
58656: PUSH
58657: LD_VAR 0 4
58661: NOT
58662: OR
58663: PUSH
58664: LD_VAR 0 5
58668: NOT
58669: OR
58670: IFFALSE 58674
// exit ;
58672: GO 58766
// if GetTaskList ( unit ) then
58674: LD_VAR 0 1
58678: PPUSH
58679: CALL_OW 437
58683: IFFALSE 58766
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58685: LD_STRING e
58687: PUSH
58688: LD_VAR 0 1
58692: PPUSH
58693: CALL_OW 437
58697: PUSH
58698: LD_INT 1
58700: ARRAY
58701: PUSH
58702: LD_INT 1
58704: ARRAY
58705: EQUAL
58706: PUSH
58707: LD_VAR 0 4
58711: PUSH
58712: LD_VAR 0 1
58716: PPUSH
58717: CALL_OW 437
58721: PUSH
58722: LD_INT 1
58724: ARRAY
58725: PUSH
58726: LD_INT 2
58728: ARRAY
58729: EQUAL
58730: AND
58731: PUSH
58732: LD_VAR 0 5
58736: PUSH
58737: LD_VAR 0 1
58741: PPUSH
58742: CALL_OW 437
58746: PUSH
58747: LD_INT 1
58749: ARRAY
58750: PUSH
58751: LD_INT 3
58753: ARRAY
58754: EQUAL
58755: AND
58756: IFFALSE 58766
// result := true end ;
58758: LD_ADDR_VAR 0 3
58762: PUSH
58763: LD_INT 1
58765: ST_TO_ADDR
// end ;
58766: LD_VAR 0 3
58770: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58771: LD_INT 0
58773: PPUSH
// result := false ;
58774: LD_ADDR_VAR 0 4
58778: PUSH
58779: LD_INT 0
58781: ST_TO_ADDR
// if GetTaskList ( unit ) then
58782: LD_VAR 0 1
58786: PPUSH
58787: CALL_OW 437
58791: IFFALSE 58874
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58793: LD_STRING M
58795: PUSH
58796: LD_VAR 0 1
58800: PPUSH
58801: CALL_OW 437
58805: PUSH
58806: LD_INT 1
58808: ARRAY
58809: PUSH
58810: LD_INT 1
58812: ARRAY
58813: EQUAL
58814: PUSH
58815: LD_VAR 0 2
58819: PUSH
58820: LD_VAR 0 1
58824: PPUSH
58825: CALL_OW 437
58829: PUSH
58830: LD_INT 1
58832: ARRAY
58833: PUSH
58834: LD_INT 2
58836: ARRAY
58837: EQUAL
58838: AND
58839: PUSH
58840: LD_VAR 0 3
58844: PUSH
58845: LD_VAR 0 1
58849: PPUSH
58850: CALL_OW 437
58854: PUSH
58855: LD_INT 1
58857: ARRAY
58858: PUSH
58859: LD_INT 3
58861: ARRAY
58862: EQUAL
58863: AND
58864: IFFALSE 58874
// result := true ;
58866: LD_ADDR_VAR 0 4
58870: PUSH
58871: LD_INT 1
58873: ST_TO_ADDR
// end ; end ;
58874: LD_VAR 0 4
58878: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58879: LD_INT 0
58881: PPUSH
58882: PPUSH
58883: PPUSH
58884: PPUSH
// if not unit or not area then
58885: LD_VAR 0 1
58889: NOT
58890: PUSH
58891: LD_VAR 0 2
58895: NOT
58896: OR
58897: IFFALSE 58901
// exit ;
58899: GO 59065
// tmp := AreaToList ( area , i ) ;
58901: LD_ADDR_VAR 0 6
58905: PUSH
58906: LD_VAR 0 2
58910: PPUSH
58911: LD_VAR 0 5
58915: PPUSH
58916: CALL_OW 517
58920: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58921: LD_ADDR_VAR 0 5
58925: PUSH
58926: DOUBLE
58927: LD_INT 1
58929: DEC
58930: ST_TO_ADDR
58931: LD_VAR 0 6
58935: PUSH
58936: LD_INT 1
58938: ARRAY
58939: PUSH
58940: FOR_TO
58941: IFFALSE 59063
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58943: LD_ADDR_VAR 0 7
58947: PUSH
58948: LD_VAR 0 6
58952: PUSH
58953: LD_INT 1
58955: ARRAY
58956: PUSH
58957: LD_VAR 0 5
58961: ARRAY
58962: PUSH
58963: LD_VAR 0 6
58967: PUSH
58968: LD_INT 2
58970: ARRAY
58971: PUSH
58972: LD_VAR 0 5
58976: ARRAY
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58982: LD_VAR 0 7
58986: PUSH
58987: LD_INT 1
58989: ARRAY
58990: PPUSH
58991: LD_VAR 0 7
58995: PUSH
58996: LD_INT 2
58998: ARRAY
58999: PPUSH
59000: CALL_OW 428
59004: PUSH
59005: LD_INT 0
59007: EQUAL
59008: IFFALSE 59061
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59010: LD_VAR 0 1
59014: PPUSH
59015: LD_VAR 0 7
59019: PUSH
59020: LD_INT 1
59022: ARRAY
59023: PPUSH
59024: LD_VAR 0 7
59028: PUSH
59029: LD_INT 2
59031: ARRAY
59032: PPUSH
59033: LD_VAR 0 3
59037: PPUSH
59038: CALL_OW 48
// result := IsPlaced ( unit ) ;
59042: LD_ADDR_VAR 0 4
59046: PUSH
59047: LD_VAR 0 1
59051: PPUSH
59052: CALL_OW 305
59056: ST_TO_ADDR
// exit ;
59057: POP
59058: POP
59059: GO 59065
// end ; end ;
59061: GO 58940
59063: POP
59064: POP
// end ;
59065: LD_VAR 0 4
59069: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59070: LD_INT 0
59072: PPUSH
59073: PPUSH
59074: PPUSH
// if not side or side > 8 then
59075: LD_VAR 0 1
59079: NOT
59080: PUSH
59081: LD_VAR 0 1
59085: PUSH
59086: LD_INT 8
59088: GREATER
59089: OR
59090: IFFALSE 59094
// exit ;
59092: GO 59281
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59094: LD_ADDR_VAR 0 4
59098: PUSH
59099: LD_INT 22
59101: PUSH
59102: LD_VAR 0 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 21
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PPUSH
59125: CALL_OW 69
59129: ST_TO_ADDR
// if not tmp then
59130: LD_VAR 0 4
59134: NOT
59135: IFFALSE 59139
// exit ;
59137: GO 59281
// enable_addtolog := true ;
59139: LD_ADDR_OWVAR 81
59143: PUSH
59144: LD_INT 1
59146: ST_TO_ADDR
// AddToLog ( [ ) ;
59147: LD_STRING [
59149: PPUSH
59150: CALL_OW 561
// for i in tmp do
59154: LD_ADDR_VAR 0 3
59158: PUSH
59159: LD_VAR 0 4
59163: PUSH
59164: FOR_IN
59165: IFFALSE 59272
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59167: LD_STRING [
59169: PUSH
59170: LD_VAR 0 3
59174: PPUSH
59175: CALL_OW 266
59179: STR
59180: PUSH
59181: LD_STRING , 
59183: STR
59184: PUSH
59185: LD_VAR 0 3
59189: PPUSH
59190: CALL_OW 250
59194: STR
59195: PUSH
59196: LD_STRING , 
59198: STR
59199: PUSH
59200: LD_VAR 0 3
59204: PPUSH
59205: CALL_OW 251
59209: STR
59210: PUSH
59211: LD_STRING , 
59213: STR
59214: PUSH
59215: LD_VAR 0 3
59219: PPUSH
59220: CALL_OW 254
59224: STR
59225: PUSH
59226: LD_STRING , 
59228: STR
59229: PUSH
59230: LD_VAR 0 3
59234: PPUSH
59235: LD_INT 1
59237: PPUSH
59238: CALL_OW 268
59242: STR
59243: PUSH
59244: LD_STRING , 
59246: STR
59247: PUSH
59248: LD_VAR 0 3
59252: PPUSH
59253: LD_INT 2
59255: PPUSH
59256: CALL_OW 268
59260: STR
59261: PUSH
59262: LD_STRING ],
59264: STR
59265: PPUSH
59266: CALL_OW 561
// end ;
59270: GO 59164
59272: POP
59273: POP
// AddToLog ( ]; ) ;
59274: LD_STRING ];
59276: PPUSH
59277: CALL_OW 561
// end ;
59281: LD_VAR 0 2
59285: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59286: LD_INT 0
59288: PPUSH
59289: PPUSH
59290: PPUSH
59291: PPUSH
59292: PPUSH
// if not area or not rate or not max then
59293: LD_VAR 0 1
59297: NOT
59298: PUSH
59299: LD_VAR 0 2
59303: NOT
59304: OR
59305: PUSH
59306: LD_VAR 0 4
59310: NOT
59311: OR
59312: IFFALSE 59316
// exit ;
59314: GO 59508
// while 1 do
59316: LD_INT 1
59318: IFFALSE 59508
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59320: LD_ADDR_VAR 0 9
59324: PUSH
59325: LD_VAR 0 1
59329: PPUSH
59330: LD_INT 1
59332: PPUSH
59333: CALL_OW 287
59337: PUSH
59338: LD_INT 10
59340: MUL
59341: ST_TO_ADDR
// r := rate / 10 ;
59342: LD_ADDR_VAR 0 7
59346: PUSH
59347: LD_VAR 0 2
59351: PUSH
59352: LD_INT 10
59354: DIVREAL
59355: ST_TO_ADDR
// time := 1 1$00 ;
59356: LD_ADDR_VAR 0 8
59360: PUSH
59361: LD_INT 2100
59363: ST_TO_ADDR
// if amount < min then
59364: LD_VAR 0 9
59368: PUSH
59369: LD_VAR 0 3
59373: LESS
59374: IFFALSE 59392
// r := r * 2 else
59376: LD_ADDR_VAR 0 7
59380: PUSH
59381: LD_VAR 0 7
59385: PUSH
59386: LD_INT 2
59388: MUL
59389: ST_TO_ADDR
59390: GO 59418
// if amount > max then
59392: LD_VAR 0 9
59396: PUSH
59397: LD_VAR 0 4
59401: GREATER
59402: IFFALSE 59418
// r := r / 2 ;
59404: LD_ADDR_VAR 0 7
59408: PUSH
59409: LD_VAR 0 7
59413: PUSH
59414: LD_INT 2
59416: DIVREAL
59417: ST_TO_ADDR
// time := time / r ;
59418: LD_ADDR_VAR 0 8
59422: PUSH
59423: LD_VAR 0 8
59427: PUSH
59428: LD_VAR 0 7
59432: DIVREAL
59433: ST_TO_ADDR
// if time < 0 then
59434: LD_VAR 0 8
59438: PUSH
59439: LD_INT 0
59441: LESS
59442: IFFALSE 59459
// time := time * - 1 ;
59444: LD_ADDR_VAR 0 8
59448: PUSH
59449: LD_VAR 0 8
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: MUL
59458: ST_TO_ADDR
// wait ( time ) ;
59459: LD_VAR 0 8
59463: PPUSH
59464: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59468: LD_INT 35
59470: PPUSH
59471: LD_INT 875
59473: PPUSH
59474: CALL_OW 12
59478: PPUSH
59479: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59483: LD_INT 1
59485: PPUSH
59486: LD_INT 5
59488: PPUSH
59489: CALL_OW 12
59493: PPUSH
59494: LD_VAR 0 1
59498: PPUSH
59499: LD_INT 1
59501: PPUSH
59502: CALL_OW 55
// end ;
59506: GO 59316
// end ;
59508: LD_VAR 0 5
59512: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59513: LD_INT 0
59515: PPUSH
59516: PPUSH
59517: PPUSH
59518: PPUSH
59519: PPUSH
59520: PPUSH
59521: PPUSH
59522: PPUSH
// if not turrets or not factories then
59523: LD_VAR 0 1
59527: NOT
59528: PUSH
59529: LD_VAR 0 2
59533: NOT
59534: OR
59535: IFFALSE 59539
// exit ;
59537: GO 59846
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59539: LD_ADDR_VAR 0 10
59543: PUSH
59544: LD_INT 5
59546: PUSH
59547: LD_INT 6
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: LD_INT 4
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 3
59566: PUSH
59567: LD_INT 5
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 24
59581: PUSH
59582: LD_INT 25
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 23
59591: PUSH
59592: LD_INT 27
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 42
59605: PUSH
59606: LD_INT 43
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 44
59615: PUSH
59616: LD_INT 46
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 45
59625: PUSH
59626: LD_INT 47
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: LIST
59642: ST_TO_ADDR
// result := [ ] ;
59643: LD_ADDR_VAR 0 3
59647: PUSH
59648: EMPTY
59649: ST_TO_ADDR
// for i in turrets do
59650: LD_ADDR_VAR 0 4
59654: PUSH
59655: LD_VAR 0 1
59659: PUSH
59660: FOR_IN
59661: IFFALSE 59844
// begin nat := GetNation ( i ) ;
59663: LD_ADDR_VAR 0 7
59667: PUSH
59668: LD_VAR 0 4
59672: PPUSH
59673: CALL_OW 248
59677: ST_TO_ADDR
// weapon := 0 ;
59678: LD_ADDR_VAR 0 8
59682: PUSH
59683: LD_INT 0
59685: ST_TO_ADDR
// if not nat then
59686: LD_VAR 0 7
59690: NOT
59691: IFFALSE 59695
// continue ;
59693: GO 59660
// for j in list [ nat ] do
59695: LD_ADDR_VAR 0 5
59699: PUSH
59700: LD_VAR 0 10
59704: PUSH
59705: LD_VAR 0 7
59709: ARRAY
59710: PUSH
59711: FOR_IN
59712: IFFALSE 59753
// if GetBWeapon ( i ) = j [ 1 ] then
59714: LD_VAR 0 4
59718: PPUSH
59719: CALL_OW 269
59723: PUSH
59724: LD_VAR 0 5
59728: PUSH
59729: LD_INT 1
59731: ARRAY
59732: EQUAL
59733: IFFALSE 59751
// begin weapon := j [ 2 ] ;
59735: LD_ADDR_VAR 0 8
59739: PUSH
59740: LD_VAR 0 5
59744: PUSH
59745: LD_INT 2
59747: ARRAY
59748: ST_TO_ADDR
// break ;
59749: GO 59753
// end ;
59751: GO 59711
59753: POP
59754: POP
// if not weapon then
59755: LD_VAR 0 8
59759: NOT
59760: IFFALSE 59764
// continue ;
59762: GO 59660
// for k in factories do
59764: LD_ADDR_VAR 0 6
59768: PUSH
59769: LD_VAR 0 2
59773: PUSH
59774: FOR_IN
59775: IFFALSE 59840
// begin weapons := AvailableWeaponList ( k ) ;
59777: LD_ADDR_VAR 0 9
59781: PUSH
59782: LD_VAR 0 6
59786: PPUSH
59787: CALL_OW 478
59791: ST_TO_ADDR
// if not weapons then
59792: LD_VAR 0 9
59796: NOT
59797: IFFALSE 59801
// continue ;
59799: GO 59774
// if weapon in weapons then
59801: LD_VAR 0 8
59805: PUSH
59806: LD_VAR 0 9
59810: IN
59811: IFFALSE 59838
// begin result := [ i , weapon ] ;
59813: LD_ADDR_VAR 0 3
59817: PUSH
59818: LD_VAR 0 4
59822: PUSH
59823: LD_VAR 0 8
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// exit ;
59832: POP
59833: POP
59834: POP
59835: POP
59836: GO 59846
// end ; end ;
59838: GO 59774
59840: POP
59841: POP
// end ;
59842: GO 59660
59844: POP
59845: POP
// end ;
59846: LD_VAR 0 3
59850: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59851: LD_INT 0
59853: PPUSH
// if not side or side > 8 then
59854: LD_VAR 0 3
59858: NOT
59859: PUSH
59860: LD_VAR 0 3
59864: PUSH
59865: LD_INT 8
59867: GREATER
59868: OR
59869: IFFALSE 59873
// exit ;
59871: GO 59932
// if not range then
59873: LD_VAR 0 4
59877: NOT
59878: IFFALSE 59889
// range := - 12 ;
59880: LD_ADDR_VAR 0 4
59884: PUSH
59885: LD_INT 12
59887: NEG
59888: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59889: LD_VAR 0 1
59893: PPUSH
59894: LD_VAR 0 2
59898: PPUSH
59899: LD_VAR 0 3
59903: PPUSH
59904: LD_VAR 0 4
59908: PPUSH
59909: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59913: LD_VAR 0 1
59917: PPUSH
59918: LD_VAR 0 2
59922: PPUSH
59923: LD_VAR 0 3
59927: PPUSH
59928: CALL_OW 331
// end ;
59932: LD_VAR 0 5
59936: RET
// export function Video ( mode ) ; begin
59937: LD_INT 0
59939: PPUSH
// ingame_video = mode ;
59940: LD_ADDR_OWVAR 52
59944: PUSH
59945: LD_VAR 0 1
59949: ST_TO_ADDR
// interface_hidden = mode ;
59950: LD_ADDR_OWVAR 54
59954: PUSH
59955: LD_VAR 0 1
59959: ST_TO_ADDR
// end ;
59960: LD_VAR 0 2
59964: RET
// export function Join ( array , element ) ; begin
59965: LD_INT 0
59967: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59968: LD_ADDR_VAR 0 3
59972: PUSH
59973: LD_VAR 0 1
59977: PPUSH
59978: LD_VAR 0 1
59982: PUSH
59983: LD_INT 1
59985: PLUS
59986: PPUSH
59987: LD_VAR 0 2
59991: PPUSH
59992: CALL_OW 1
59996: ST_TO_ADDR
// end ;
59997: LD_VAR 0 3
60001: RET
// export function JoinUnion ( array , element ) ; begin
60002: LD_INT 0
60004: PPUSH
// result := array union element ;
60005: LD_ADDR_VAR 0 3
60009: PUSH
60010: LD_VAR 0 1
60014: PUSH
60015: LD_VAR 0 2
60019: UNION
60020: ST_TO_ADDR
// end ;
60021: LD_VAR 0 3
60025: RET
// export function GetBehemoths ( side ) ; begin
60026: LD_INT 0
60028: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60029: LD_ADDR_VAR 0 2
60033: PUSH
60034: LD_INT 22
60036: PUSH
60037: LD_VAR 0 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 31
60048: PUSH
60049: LD_INT 25
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PPUSH
60060: CALL_OW 69
60064: ST_TO_ADDR
// end ;
60065: LD_VAR 0 2
60069: RET
// export function Shuffle ( array ) ; var i , index ; begin
60070: LD_INT 0
60072: PPUSH
60073: PPUSH
60074: PPUSH
// result := [ ] ;
60075: LD_ADDR_VAR 0 2
60079: PUSH
60080: EMPTY
60081: ST_TO_ADDR
// if not array then
60082: LD_VAR 0 1
60086: NOT
60087: IFFALSE 60091
// exit ;
60089: GO 60190
// Randomize ;
60091: CALL_OW 10
// for i = array downto 1 do
60095: LD_ADDR_VAR 0 3
60099: PUSH
60100: DOUBLE
60101: LD_VAR 0 1
60105: INC
60106: ST_TO_ADDR
60107: LD_INT 1
60109: PUSH
60110: FOR_DOWNTO
60111: IFFALSE 60188
// begin index := rand ( 1 , array ) ;
60113: LD_ADDR_VAR 0 4
60117: PUSH
60118: LD_INT 1
60120: PPUSH
60121: LD_VAR 0 1
60125: PPUSH
60126: CALL_OW 12
60130: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60131: LD_ADDR_VAR 0 2
60135: PUSH
60136: LD_VAR 0 2
60140: PPUSH
60141: LD_VAR 0 2
60145: PUSH
60146: LD_INT 1
60148: PLUS
60149: PPUSH
60150: LD_VAR 0 1
60154: PUSH
60155: LD_VAR 0 4
60159: ARRAY
60160: PPUSH
60161: CALL_OW 2
60165: ST_TO_ADDR
// array := Delete ( array , index ) ;
60166: LD_ADDR_VAR 0 1
60170: PUSH
60171: LD_VAR 0 1
60175: PPUSH
60176: LD_VAR 0 4
60180: PPUSH
60181: CALL_OW 3
60185: ST_TO_ADDR
// end ;
60186: GO 60110
60188: POP
60189: POP
// end ;
60190: LD_VAR 0 2
60194: RET
// export function GetBaseMaterials ( base ) ; begin
60195: LD_INT 0
60197: PPUSH
// result := [ 0 , 0 , 0 ] ;
60198: LD_ADDR_VAR 0 2
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: LIST
60216: ST_TO_ADDR
// if not base then
60217: LD_VAR 0 1
60221: NOT
60222: IFFALSE 60226
// exit ;
60224: GO 60275
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60226: LD_ADDR_VAR 0 2
60230: PUSH
60231: LD_VAR 0 1
60235: PPUSH
60236: LD_INT 1
60238: PPUSH
60239: CALL_OW 275
60243: PUSH
60244: LD_VAR 0 1
60248: PPUSH
60249: LD_INT 2
60251: PPUSH
60252: CALL_OW 275
60256: PUSH
60257: LD_VAR 0 1
60261: PPUSH
60262: LD_INT 3
60264: PPUSH
60265: CALL_OW 275
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: ST_TO_ADDR
// end ;
60275: LD_VAR 0 2
60279: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60280: LD_INT 0
60282: PPUSH
60283: PPUSH
// result := array ;
60284: LD_ADDR_VAR 0 3
60288: PUSH
60289: LD_VAR 0 1
60293: ST_TO_ADDR
// if size > 0 then
60294: LD_VAR 0 2
60298: PUSH
60299: LD_INT 0
60301: GREATER
60302: IFFALSE 60348
// for i := array downto size do
60304: LD_ADDR_VAR 0 4
60308: PUSH
60309: DOUBLE
60310: LD_VAR 0 1
60314: INC
60315: ST_TO_ADDR
60316: LD_VAR 0 2
60320: PUSH
60321: FOR_DOWNTO
60322: IFFALSE 60346
// result := Delete ( result , result ) ;
60324: LD_ADDR_VAR 0 3
60328: PUSH
60329: LD_VAR 0 3
60333: PPUSH
60334: LD_VAR 0 3
60338: PPUSH
60339: CALL_OW 3
60343: ST_TO_ADDR
60344: GO 60321
60346: POP
60347: POP
// end ;
60348: LD_VAR 0 3
60352: RET
// export function ComExit ( unit ) ; var tmp ; begin
60353: LD_INT 0
60355: PPUSH
60356: PPUSH
// if not IsInUnit ( unit ) then
60357: LD_VAR 0 1
60361: PPUSH
60362: CALL_OW 310
60366: NOT
60367: IFFALSE 60371
// exit ;
60369: GO 60431
// tmp := IsInUnit ( unit ) ;
60371: LD_ADDR_VAR 0 3
60375: PUSH
60376: LD_VAR 0 1
60380: PPUSH
60381: CALL_OW 310
60385: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60386: LD_VAR 0 3
60390: PPUSH
60391: CALL_OW 247
60395: PUSH
60396: LD_INT 2
60398: EQUAL
60399: IFFALSE 60412
// ComExitVehicle ( unit ) else
60401: LD_VAR 0 1
60405: PPUSH
60406: CALL_OW 121
60410: GO 60421
// ComExitBuilding ( unit ) ;
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 122
// result := tmp ;
60421: LD_ADDR_VAR 0 2
60425: PUSH
60426: LD_VAR 0 3
60430: ST_TO_ADDR
// end ;
60431: LD_VAR 0 2
60435: RET
// export function ComExitAll ( units ) ; var i ; begin
60436: LD_INT 0
60438: PPUSH
60439: PPUSH
// if not units then
60440: LD_VAR 0 1
60444: NOT
60445: IFFALSE 60449
// exit ;
60447: GO 60475
// for i in units do
60449: LD_ADDR_VAR 0 3
60453: PUSH
60454: LD_VAR 0 1
60458: PUSH
60459: FOR_IN
60460: IFFALSE 60473
// ComExit ( i ) ;
60462: LD_VAR 0 3
60466: PPUSH
60467: CALL 60353 0 1
60471: GO 60459
60473: POP
60474: POP
// end ;
60475: LD_VAR 0 2
60479: RET
// export function ResetHc ; begin
60480: LD_INT 0
60482: PPUSH
// InitHc ;
60483: CALL_OW 19
// hc_importance := 0 ;
60487: LD_ADDR_OWVAR 32
60491: PUSH
60492: LD_INT 0
60494: ST_TO_ADDR
// end ;
60495: LD_VAR 0 1
60499: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60500: LD_INT 0
60502: PPUSH
60503: PPUSH
60504: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60505: LD_ADDR_VAR 0 6
60509: PUSH
60510: LD_VAR 0 1
60514: PUSH
60515: LD_VAR 0 3
60519: PLUS
60520: PUSH
60521: LD_INT 2
60523: DIV
60524: ST_TO_ADDR
// if _x < 0 then
60525: LD_VAR 0 6
60529: PUSH
60530: LD_INT 0
60532: LESS
60533: IFFALSE 60550
// _x := _x * - 1 ;
60535: LD_ADDR_VAR 0 6
60539: PUSH
60540: LD_VAR 0 6
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: MUL
60549: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60550: LD_ADDR_VAR 0 7
60554: PUSH
60555: LD_VAR 0 2
60559: PUSH
60560: LD_VAR 0 4
60564: PLUS
60565: PUSH
60566: LD_INT 2
60568: DIV
60569: ST_TO_ADDR
// if _y < 0 then
60570: LD_VAR 0 7
60574: PUSH
60575: LD_INT 0
60577: LESS
60578: IFFALSE 60595
// _y := _y * - 1 ;
60580: LD_ADDR_VAR 0 7
60584: PUSH
60585: LD_VAR 0 7
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: MUL
60594: ST_TO_ADDR
// result := [ _x , _y ] ;
60595: LD_ADDR_VAR 0 5
60599: PUSH
60600: LD_VAR 0 6
60604: PUSH
60605: LD_VAR 0 7
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: ST_TO_ADDR
// end ;
60614: LD_VAR 0 5
60618: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60619: LD_INT 0
60621: PPUSH
60622: PPUSH
60623: PPUSH
60624: PPUSH
// task := GetTaskList ( unit ) ;
60625: LD_ADDR_VAR 0 7
60629: PUSH
60630: LD_VAR 0 1
60634: PPUSH
60635: CALL_OW 437
60639: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60640: LD_VAR 0 7
60644: NOT
60645: PUSH
60646: LD_VAR 0 1
60650: PPUSH
60651: LD_VAR 0 2
60655: PPUSH
60656: CALL_OW 308
60660: NOT
60661: AND
60662: IFFALSE 60666
// exit ;
60664: GO 60784
// if IsInArea ( unit , area ) then
60666: LD_VAR 0 1
60670: PPUSH
60671: LD_VAR 0 2
60675: PPUSH
60676: CALL_OW 308
60680: IFFALSE 60698
// begin ComMoveToArea ( unit , goAway ) ;
60682: LD_VAR 0 1
60686: PPUSH
60687: LD_VAR 0 3
60691: PPUSH
60692: CALL_OW 113
// exit ;
60696: GO 60784
// end ; if task [ 1 ] [ 1 ] <> M then
60698: LD_VAR 0 7
60702: PUSH
60703: LD_INT 1
60705: ARRAY
60706: PUSH
60707: LD_INT 1
60709: ARRAY
60710: PUSH
60711: LD_STRING M
60713: NONEQUAL
60714: IFFALSE 60718
// exit ;
60716: GO 60784
// x := task [ 1 ] [ 2 ] ;
60718: LD_ADDR_VAR 0 5
60722: PUSH
60723: LD_VAR 0 7
60727: PUSH
60728: LD_INT 1
60730: ARRAY
60731: PUSH
60732: LD_INT 2
60734: ARRAY
60735: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60736: LD_ADDR_VAR 0 6
60740: PUSH
60741: LD_VAR 0 7
60745: PUSH
60746: LD_INT 1
60748: ARRAY
60749: PUSH
60750: LD_INT 3
60752: ARRAY
60753: ST_TO_ADDR
// if InArea ( x , y , area ) then
60754: LD_VAR 0 5
60758: PPUSH
60759: LD_VAR 0 6
60763: PPUSH
60764: LD_VAR 0 2
60768: PPUSH
60769: CALL_OW 309
60773: IFFALSE 60784
// ComStop ( unit ) ;
60775: LD_VAR 0 1
60779: PPUSH
60780: CALL_OW 141
// end ;
60784: LD_VAR 0 4
60788: RET
// export function Abs ( value ) ; begin
60789: LD_INT 0
60791: PPUSH
// result := value ;
60792: LD_ADDR_VAR 0 2
60796: PUSH
60797: LD_VAR 0 1
60801: ST_TO_ADDR
// if value < 0 then
60802: LD_VAR 0 1
60806: PUSH
60807: LD_INT 0
60809: LESS
60810: IFFALSE 60827
// result := value * - 1 ;
60812: LD_ADDR_VAR 0 2
60816: PUSH
60817: LD_VAR 0 1
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: MUL
60826: ST_TO_ADDR
// end ;
60827: LD_VAR 0 2
60831: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60832: LD_INT 0
60834: PPUSH
60835: PPUSH
60836: PPUSH
60837: PPUSH
60838: PPUSH
60839: PPUSH
60840: PPUSH
60841: PPUSH
// if not unit or not building then
60842: LD_VAR 0 1
60846: NOT
60847: PUSH
60848: LD_VAR 0 2
60852: NOT
60853: OR
60854: IFFALSE 60858
// exit ;
60856: GO 61084
// x := GetX ( building ) ;
60858: LD_ADDR_VAR 0 4
60862: PUSH
60863: LD_VAR 0 2
60867: PPUSH
60868: CALL_OW 250
60872: ST_TO_ADDR
// y := GetY ( building ) ;
60873: LD_ADDR_VAR 0 6
60877: PUSH
60878: LD_VAR 0 2
60882: PPUSH
60883: CALL_OW 251
60887: ST_TO_ADDR
// d := GetDir ( building ) ;
60888: LD_ADDR_VAR 0 8
60892: PUSH
60893: LD_VAR 0 2
60897: PPUSH
60898: CALL_OW 254
60902: ST_TO_ADDR
// r := 4 ;
60903: LD_ADDR_VAR 0 9
60907: PUSH
60908: LD_INT 4
60910: ST_TO_ADDR
// for i := 1 to 5 do
60911: LD_ADDR_VAR 0 10
60915: PUSH
60916: DOUBLE
60917: LD_INT 1
60919: DEC
60920: ST_TO_ADDR
60921: LD_INT 5
60923: PUSH
60924: FOR_TO
60925: IFFALSE 61082
// begin _x := ShiftX ( x , d , r + i ) ;
60927: LD_ADDR_VAR 0 5
60931: PUSH
60932: LD_VAR 0 4
60936: PPUSH
60937: LD_VAR 0 8
60941: PPUSH
60942: LD_VAR 0 9
60946: PUSH
60947: LD_VAR 0 10
60951: PLUS
60952: PPUSH
60953: CALL_OW 272
60957: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60958: LD_ADDR_VAR 0 7
60962: PUSH
60963: LD_VAR 0 6
60967: PPUSH
60968: LD_VAR 0 8
60972: PPUSH
60973: LD_VAR 0 9
60977: PUSH
60978: LD_VAR 0 10
60982: PLUS
60983: PPUSH
60984: CALL_OW 273
60988: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60989: LD_VAR 0 5
60993: PPUSH
60994: LD_VAR 0 7
60998: PPUSH
60999: CALL_OW 488
61003: PUSH
61004: LD_VAR 0 5
61008: PPUSH
61009: LD_VAR 0 7
61013: PPUSH
61014: CALL_OW 428
61018: PPUSH
61019: CALL_OW 247
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: IN
61034: NOT
61035: AND
61036: IFFALSE 61080
// begin ComMoveXY ( unit , _x , _y ) ;
61038: LD_VAR 0 1
61042: PPUSH
61043: LD_VAR 0 5
61047: PPUSH
61048: LD_VAR 0 7
61052: PPUSH
61053: CALL_OW 111
// result := [ _x , _y ] ;
61057: LD_ADDR_VAR 0 3
61061: PUSH
61062: LD_VAR 0 5
61066: PUSH
61067: LD_VAR 0 7
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: ST_TO_ADDR
// exit ;
61076: POP
61077: POP
61078: GO 61084
// end ; end ;
61080: GO 60924
61082: POP
61083: POP
// end ;
61084: LD_VAR 0 3
61088: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61089: LD_INT 0
61091: PPUSH
61092: PPUSH
61093: PPUSH
// result := 0 ;
61094: LD_ADDR_VAR 0 3
61098: PUSH
61099: LD_INT 0
61101: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61102: LD_VAR 0 1
61106: PUSH
61107: LD_INT 0
61109: LESS
61110: PUSH
61111: LD_VAR 0 1
61115: PUSH
61116: LD_INT 8
61118: GREATER
61119: OR
61120: PUSH
61121: LD_VAR 0 2
61125: PUSH
61126: LD_INT 0
61128: LESS
61129: OR
61130: PUSH
61131: LD_VAR 0 2
61135: PUSH
61136: LD_INT 8
61138: GREATER
61139: OR
61140: IFFALSE 61144
// exit ;
61142: GO 61219
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61144: LD_ADDR_VAR 0 4
61148: PUSH
61149: LD_INT 22
61151: PUSH
61152: LD_VAR 0 2
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PPUSH
61161: CALL_OW 69
61165: PUSH
61166: FOR_IN
61167: IFFALSE 61217
// begin un := UnitShoot ( i ) ;
61169: LD_ADDR_VAR 0 5
61173: PUSH
61174: LD_VAR 0 4
61178: PPUSH
61179: CALL_OW 504
61183: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61184: LD_VAR 0 5
61188: PPUSH
61189: CALL_OW 255
61193: PUSH
61194: LD_VAR 0 1
61198: EQUAL
61199: IFFALSE 61215
// begin result := un ;
61201: LD_ADDR_VAR 0 3
61205: PUSH
61206: LD_VAR 0 5
61210: ST_TO_ADDR
// exit ;
61211: POP
61212: POP
61213: GO 61219
// end ; end ;
61215: GO 61166
61217: POP
61218: POP
// end ;
61219: LD_VAR 0 3
61223: RET
// export function GetCargoBay ( units ) ; begin
61224: LD_INT 0
61226: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61227: LD_ADDR_VAR 0 2
61231: PUSH
61232: LD_VAR 0 1
61236: PPUSH
61237: LD_INT 2
61239: PUSH
61240: LD_INT 34
61242: PUSH
61243: LD_INT 12
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 34
61252: PUSH
61253: LD_INT 51
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 34
61262: PUSH
61263: LD_INT 32
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 34
61272: PUSH
61273: LD_EXP 40
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: PPUSH
61289: CALL_OW 72
61293: ST_TO_ADDR
// end ;
61294: LD_VAR 0 2
61298: RET
// export function Negate ( value ) ; begin
61299: LD_INT 0
61301: PPUSH
// result := not value ;
61302: LD_ADDR_VAR 0 2
61306: PUSH
61307: LD_VAR 0 1
61311: NOT
61312: ST_TO_ADDR
// end ;
61313: LD_VAR 0 2
61317: RET
// export function Inc ( value ) ; begin
61318: LD_INT 0
61320: PPUSH
// result := value + 1 ;
61321: LD_ADDR_VAR 0 2
61325: PUSH
61326: LD_VAR 0 1
61330: PUSH
61331: LD_INT 1
61333: PLUS
61334: ST_TO_ADDR
// end ;
61335: LD_VAR 0 2
61339: RET
// export function Dec ( value ) ; begin
61340: LD_INT 0
61342: PPUSH
// result := value - 1 ;
61343: LD_ADDR_VAR 0 2
61347: PUSH
61348: LD_VAR 0 1
61352: PUSH
61353: LD_INT 1
61355: MINUS
61356: ST_TO_ADDR
// end ;
61357: LD_VAR 0 2
61361: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61362: LD_INT 0
61364: PPUSH
61365: PPUSH
61366: PPUSH
61367: PPUSH
61368: PPUSH
61369: PPUSH
61370: PPUSH
61371: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61372: LD_VAR 0 1
61376: PPUSH
61377: LD_VAR 0 2
61381: PPUSH
61382: CALL_OW 488
61386: NOT
61387: PUSH
61388: LD_VAR 0 3
61392: PPUSH
61393: LD_VAR 0 4
61397: PPUSH
61398: CALL_OW 488
61402: NOT
61403: OR
61404: IFFALSE 61417
// begin result := - 1 ;
61406: LD_ADDR_VAR 0 5
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: ST_TO_ADDR
// exit ;
61415: GO 61652
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61417: LD_ADDR_VAR 0 12
61421: PUSH
61422: LD_VAR 0 1
61426: PPUSH
61427: LD_VAR 0 2
61431: PPUSH
61432: LD_VAR 0 3
61436: PPUSH
61437: LD_VAR 0 4
61441: PPUSH
61442: CALL 60500 0 4
61446: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61447: LD_ADDR_VAR 0 11
61451: PUSH
61452: LD_VAR 0 1
61456: PPUSH
61457: LD_VAR 0 2
61461: PPUSH
61462: LD_VAR 0 12
61466: PUSH
61467: LD_INT 1
61469: ARRAY
61470: PPUSH
61471: LD_VAR 0 12
61475: PUSH
61476: LD_INT 2
61478: ARRAY
61479: PPUSH
61480: CALL_OW 298
61484: ST_TO_ADDR
// distance := 9999 ;
61485: LD_ADDR_VAR 0 10
61489: PUSH
61490: LD_INT 9999
61492: ST_TO_ADDR
// for i := 0 to 5 do
61493: LD_ADDR_VAR 0 6
61497: PUSH
61498: DOUBLE
61499: LD_INT 0
61501: DEC
61502: ST_TO_ADDR
61503: LD_INT 5
61505: PUSH
61506: FOR_TO
61507: IFFALSE 61650
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61509: LD_ADDR_VAR 0 7
61513: PUSH
61514: LD_VAR 0 1
61518: PPUSH
61519: LD_VAR 0 6
61523: PPUSH
61524: LD_VAR 0 11
61528: PPUSH
61529: CALL_OW 272
61533: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61534: LD_ADDR_VAR 0 8
61538: PUSH
61539: LD_VAR 0 2
61543: PPUSH
61544: LD_VAR 0 6
61548: PPUSH
61549: LD_VAR 0 11
61553: PPUSH
61554: CALL_OW 273
61558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61559: LD_VAR 0 7
61563: PPUSH
61564: LD_VAR 0 8
61568: PPUSH
61569: CALL_OW 488
61573: NOT
61574: IFFALSE 61578
// continue ;
61576: GO 61506
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61578: LD_ADDR_VAR 0 9
61582: PUSH
61583: LD_VAR 0 12
61587: PUSH
61588: LD_INT 1
61590: ARRAY
61591: PPUSH
61592: LD_VAR 0 12
61596: PUSH
61597: LD_INT 2
61599: ARRAY
61600: PPUSH
61601: LD_VAR 0 7
61605: PPUSH
61606: LD_VAR 0 8
61610: PPUSH
61611: CALL_OW 298
61615: ST_TO_ADDR
// if tmp < distance then
61616: LD_VAR 0 9
61620: PUSH
61621: LD_VAR 0 10
61625: LESS
61626: IFFALSE 61648
// begin result := i ;
61628: LD_ADDR_VAR 0 5
61632: PUSH
61633: LD_VAR 0 6
61637: ST_TO_ADDR
// distance := tmp ;
61638: LD_ADDR_VAR 0 10
61642: PUSH
61643: LD_VAR 0 9
61647: ST_TO_ADDR
// end ; end ;
61648: GO 61506
61650: POP
61651: POP
// end ;
61652: LD_VAR 0 5
61656: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61657: LD_INT 0
61659: PPUSH
61660: PPUSH
// if not driver or not IsInUnit ( driver ) then
61661: LD_VAR 0 1
61665: NOT
61666: PUSH
61667: LD_VAR 0 1
61671: PPUSH
61672: CALL_OW 310
61676: NOT
61677: OR
61678: IFFALSE 61682
// exit ;
61680: GO 61772
// vehicle := IsInUnit ( driver ) ;
61682: LD_ADDR_VAR 0 3
61686: PUSH
61687: LD_VAR 0 1
61691: PPUSH
61692: CALL_OW 310
61696: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61697: LD_VAR 0 1
61701: PPUSH
61702: LD_STRING \
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: PUSH
61732: LD_STRING E
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_VAR 0 3
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PPUSH
61768: CALL_OW 446
// end ;
61772: LD_VAR 0 2
61776: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61777: LD_INT 0
61779: PPUSH
61780: PPUSH
// if not driver or not IsInUnit ( driver ) then
61781: LD_VAR 0 1
61785: NOT
61786: PUSH
61787: LD_VAR 0 1
61791: PPUSH
61792: CALL_OW 310
61796: NOT
61797: OR
61798: IFFALSE 61802
// exit ;
61800: GO 61892
// vehicle := IsInUnit ( driver ) ;
61802: LD_ADDR_VAR 0 3
61806: PUSH
61807: LD_VAR 0 1
61811: PPUSH
61812: CALL_OW 310
61816: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61817: LD_VAR 0 1
61821: PPUSH
61822: LD_STRING \
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: PUSH
61852: LD_STRING E
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_VAR 0 3
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PPUSH
61888: CALL_OW 447
// end ;
61892: LD_VAR 0 2
61896: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61897: LD_INT 0
61899: PPUSH
61900: PPUSH
61901: PPUSH
// tmp := [ ] ;
61902: LD_ADDR_VAR 0 5
61906: PUSH
61907: EMPTY
61908: ST_TO_ADDR
// for i in units do
61909: LD_ADDR_VAR 0 4
61913: PUSH
61914: LD_VAR 0 1
61918: PUSH
61919: FOR_IN
61920: IFFALSE 61958
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61922: LD_ADDR_VAR 0 5
61926: PUSH
61927: LD_VAR 0 5
61931: PPUSH
61932: LD_VAR 0 5
61936: PUSH
61937: LD_INT 1
61939: PLUS
61940: PPUSH
61941: LD_VAR 0 4
61945: PPUSH
61946: CALL_OW 256
61950: PPUSH
61951: CALL_OW 2
61955: ST_TO_ADDR
61956: GO 61919
61958: POP
61959: POP
// if not tmp then
61960: LD_VAR 0 5
61964: NOT
61965: IFFALSE 61969
// exit ;
61967: GO 62017
// if asc then
61969: LD_VAR 0 2
61973: IFFALSE 61997
// result := SortListByListAsc ( units , tmp ) else
61975: LD_ADDR_VAR 0 3
61979: PUSH
61980: LD_VAR 0 1
61984: PPUSH
61985: LD_VAR 0 5
61989: PPUSH
61990: CALL_OW 76
61994: ST_TO_ADDR
61995: GO 62017
// result := SortListByListDesc ( units , tmp ) ;
61997: LD_ADDR_VAR 0 3
62001: PUSH
62002: LD_VAR 0 1
62006: PPUSH
62007: LD_VAR 0 5
62011: PPUSH
62012: CALL_OW 77
62016: ST_TO_ADDR
// end ;
62017: LD_VAR 0 3
62021: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62022: LD_INT 0
62024: PPUSH
62025: PPUSH
// task := GetTaskList ( mech ) ;
62026: LD_ADDR_VAR 0 4
62030: PUSH
62031: LD_VAR 0 1
62035: PPUSH
62036: CALL_OW 437
62040: ST_TO_ADDR
// if not task then
62041: LD_VAR 0 4
62045: NOT
62046: IFFALSE 62050
// exit ;
62048: GO 62092
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62050: LD_ADDR_VAR 0 3
62054: PUSH
62055: LD_VAR 0 4
62059: PUSH
62060: LD_INT 1
62062: ARRAY
62063: PUSH
62064: LD_INT 1
62066: ARRAY
62067: PUSH
62068: LD_STRING r
62070: EQUAL
62071: PUSH
62072: LD_VAR 0 4
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: PUSH
62081: LD_INT 4
62083: ARRAY
62084: PUSH
62085: LD_VAR 0 2
62089: EQUAL
62090: AND
62091: ST_TO_ADDR
// end ;
62092: LD_VAR 0 3
62096: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62097: LD_INT 0
62099: PPUSH
// SetDir ( unit , d ) ;
62100: LD_VAR 0 1
62104: PPUSH
62105: LD_VAR 0 4
62109: PPUSH
62110: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62114: LD_VAR 0 1
62118: PPUSH
62119: LD_VAR 0 2
62123: PPUSH
62124: LD_VAR 0 3
62128: PPUSH
62129: LD_VAR 0 5
62133: PPUSH
62134: CALL_OW 48
// end ;
62138: LD_VAR 0 6
62142: RET
// export function ToNaturalNumber ( number ) ; begin
62143: LD_INT 0
62145: PPUSH
// result := number div 1 ;
62146: LD_ADDR_VAR 0 2
62150: PUSH
62151: LD_VAR 0 1
62155: PUSH
62156: LD_INT 1
62158: DIV
62159: ST_TO_ADDR
// if number < 0 then
62160: LD_VAR 0 1
62164: PUSH
62165: LD_INT 0
62167: LESS
62168: IFFALSE 62178
// result := 0 ;
62170: LD_ADDR_VAR 0 2
62174: PUSH
62175: LD_INT 0
62177: ST_TO_ADDR
// end ;
62178: LD_VAR 0 2
62182: RET
// export function SortByClass ( units , class ) ; var un ; begin
62183: LD_INT 0
62185: PPUSH
62186: PPUSH
// if not units or not class then
62187: LD_VAR 0 1
62191: NOT
62192: PUSH
62193: LD_VAR 0 2
62197: NOT
62198: OR
62199: IFFALSE 62203
// exit ;
62201: GO 62298
// result := [ ] ;
62203: LD_ADDR_VAR 0 3
62207: PUSH
62208: EMPTY
62209: ST_TO_ADDR
// for un in units do
62210: LD_ADDR_VAR 0 4
62214: PUSH
62215: LD_VAR 0 1
62219: PUSH
62220: FOR_IN
62221: IFFALSE 62296
// if GetClass ( un ) = class then
62223: LD_VAR 0 4
62227: PPUSH
62228: CALL_OW 257
62232: PUSH
62233: LD_VAR 0 2
62237: EQUAL
62238: IFFALSE 62265
// result := Insert ( result , 1 , un ) else
62240: LD_ADDR_VAR 0 3
62244: PUSH
62245: LD_VAR 0 3
62249: PPUSH
62250: LD_INT 1
62252: PPUSH
62253: LD_VAR 0 4
62257: PPUSH
62258: CALL_OW 2
62262: ST_TO_ADDR
62263: GO 62294
// result := Replace ( result , result + 1 , un ) ;
62265: LD_ADDR_VAR 0 3
62269: PUSH
62270: LD_VAR 0 3
62274: PPUSH
62275: LD_VAR 0 3
62279: PUSH
62280: LD_INT 1
62282: PLUS
62283: PPUSH
62284: LD_VAR 0 4
62288: PPUSH
62289: CALL_OW 1
62293: ST_TO_ADDR
62294: GO 62220
62296: POP
62297: POP
// end ;
62298: LD_VAR 0 3
62302: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62303: LD_INT 0
62305: PPUSH
62306: PPUSH
62307: PPUSH
62308: PPUSH
62309: PPUSH
62310: PPUSH
62311: PPUSH
// result := [ ] ;
62312: LD_ADDR_VAR 0 4
62316: PUSH
62317: EMPTY
62318: ST_TO_ADDR
// if x - r < 0 then
62319: LD_VAR 0 1
62323: PUSH
62324: LD_VAR 0 3
62328: MINUS
62329: PUSH
62330: LD_INT 0
62332: LESS
62333: IFFALSE 62345
// min_x := 0 else
62335: LD_ADDR_VAR 0 8
62339: PUSH
62340: LD_INT 0
62342: ST_TO_ADDR
62343: GO 62361
// min_x := x - r ;
62345: LD_ADDR_VAR 0 8
62349: PUSH
62350: LD_VAR 0 1
62354: PUSH
62355: LD_VAR 0 3
62359: MINUS
62360: ST_TO_ADDR
// if y - r < 0 then
62361: LD_VAR 0 2
62365: PUSH
62366: LD_VAR 0 3
62370: MINUS
62371: PUSH
62372: LD_INT 0
62374: LESS
62375: IFFALSE 62387
// min_y := 0 else
62377: LD_ADDR_VAR 0 7
62381: PUSH
62382: LD_INT 0
62384: ST_TO_ADDR
62385: GO 62403
// min_y := y - r ;
62387: LD_ADDR_VAR 0 7
62391: PUSH
62392: LD_VAR 0 2
62396: PUSH
62397: LD_VAR 0 3
62401: MINUS
62402: ST_TO_ADDR
// max_x := x + r ;
62403: LD_ADDR_VAR 0 9
62407: PUSH
62408: LD_VAR 0 1
62412: PUSH
62413: LD_VAR 0 3
62417: PLUS
62418: ST_TO_ADDR
// max_y := y + r ;
62419: LD_ADDR_VAR 0 10
62423: PUSH
62424: LD_VAR 0 2
62428: PUSH
62429: LD_VAR 0 3
62433: PLUS
62434: ST_TO_ADDR
// for _x = min_x to max_x do
62435: LD_ADDR_VAR 0 5
62439: PUSH
62440: DOUBLE
62441: LD_VAR 0 8
62445: DEC
62446: ST_TO_ADDR
62447: LD_VAR 0 9
62451: PUSH
62452: FOR_TO
62453: IFFALSE 62554
// for _y = min_y to max_y do
62455: LD_ADDR_VAR 0 6
62459: PUSH
62460: DOUBLE
62461: LD_VAR 0 7
62465: DEC
62466: ST_TO_ADDR
62467: LD_VAR 0 10
62471: PUSH
62472: FOR_TO
62473: IFFALSE 62550
// begin if not ValidHex ( _x , _y ) then
62475: LD_VAR 0 5
62479: PPUSH
62480: LD_VAR 0 6
62484: PPUSH
62485: CALL_OW 488
62489: NOT
62490: IFFALSE 62494
// continue ;
62492: GO 62472
// if GetResourceTypeXY ( _x , _y ) then
62494: LD_VAR 0 5
62498: PPUSH
62499: LD_VAR 0 6
62503: PPUSH
62504: CALL_OW 283
62508: IFFALSE 62548
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62510: LD_ADDR_VAR 0 4
62514: PUSH
62515: LD_VAR 0 4
62519: PPUSH
62520: LD_VAR 0 4
62524: PUSH
62525: LD_INT 1
62527: PLUS
62528: PPUSH
62529: LD_VAR 0 5
62533: PUSH
62534: LD_VAR 0 6
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PPUSH
62543: CALL_OW 1
62547: ST_TO_ADDR
// end ;
62548: GO 62472
62550: POP
62551: POP
62552: GO 62452
62554: POP
62555: POP
// end ;
62556: LD_VAR 0 4
62560: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62561: LD_INT 0
62563: PPUSH
62564: PPUSH
62565: PPUSH
62566: PPUSH
62567: PPUSH
62568: PPUSH
62569: PPUSH
62570: PPUSH
// if not units then
62571: LD_VAR 0 1
62575: NOT
62576: IFFALSE 62580
// exit ;
62578: GO 63005
// result := UnitFilter ( units , [ f_ok ] ) ;
62580: LD_ADDR_VAR 0 3
62584: PUSH
62585: LD_VAR 0 1
62589: PPUSH
62590: LD_INT 50
62592: PUSH
62593: EMPTY
62594: LIST
62595: PPUSH
62596: CALL_OW 72
62600: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62601: LD_ADDR_VAR 0 8
62605: PUSH
62606: LD_VAR 0 1
62610: PUSH
62611: LD_INT 1
62613: ARRAY
62614: PPUSH
62615: CALL_OW 255
62619: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
62620: LD_ADDR_VAR 0 10
62624: PUSH
62625: LD_INT 29
62627: PUSH
62628: LD_EXP 43
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: ST_TO_ADDR
// if not result then
62637: LD_VAR 0 3
62641: NOT
62642: IFFALSE 62646
// exit ;
62644: GO 63005
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62646: LD_ADDR_VAR 0 5
62650: PUSH
62651: LD_INT 81
62653: PUSH
62654: LD_VAR 0 8
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PPUSH
62663: CALL_OW 69
62667: ST_TO_ADDR
// for i in result do
62668: LD_ADDR_VAR 0 4
62672: PUSH
62673: LD_VAR 0 3
62677: PUSH
62678: FOR_IN
62679: IFFALSE 63003
// begin tag := GetTag ( i ) + 1 ;
62681: LD_ADDR_VAR 0 9
62685: PUSH
62686: LD_VAR 0 4
62690: PPUSH
62691: CALL_OW 110
62695: PUSH
62696: LD_INT 1
62698: PLUS
62699: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62700: LD_ADDR_VAR 0 7
62704: PUSH
62705: LD_VAR 0 4
62709: PPUSH
62710: CALL_OW 250
62714: PPUSH
62715: LD_VAR 0 4
62719: PPUSH
62720: CALL_OW 251
62724: PPUSH
62725: LD_INT 6
62727: PPUSH
62728: CALL 62303 0 3
62732: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62733: LD_VAR 0 7
62737: PUSH
62738: LD_VAR 0 4
62742: PPUSH
62743: CALL_OW 264
62747: PUSH
62748: LD_VAR 0 10
62752: IN
62753: NOT
62754: AND
62755: IFFALSE 62794
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62757: LD_VAR 0 4
62761: PPUSH
62762: LD_VAR 0 7
62766: PUSH
62767: LD_INT 1
62769: ARRAY
62770: PUSH
62771: LD_INT 1
62773: ARRAY
62774: PPUSH
62775: LD_VAR 0 7
62779: PUSH
62780: LD_INT 1
62782: ARRAY
62783: PUSH
62784: LD_INT 2
62786: ARRAY
62787: PPUSH
62788: CALL_OW 116
62792: GO 63001
// if path > tag then
62794: LD_VAR 0 2
62798: PUSH
62799: LD_VAR 0 9
62803: GREATER
62804: IFFALSE 62971
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
62806: LD_ADDR_VAR 0 6
62810: PUSH
62811: LD_VAR 0 5
62815: PPUSH
62816: LD_INT 91
62818: PUSH
62819: LD_VAR 0 4
62823: PUSH
62824: LD_INT 12
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: PPUSH
62832: CALL_OW 72
62836: ST_TO_ADDR
// if nearEnemy then
62837: LD_VAR 0 6
62841: IFFALSE 62869
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62843: LD_VAR 0 4
62847: PPUSH
62848: LD_VAR 0 6
62852: PPUSH
62853: LD_VAR 0 4
62857: PPUSH
62858: CALL_OW 74
62862: PPUSH
62863: CALL_OW 115
62867: GO 62969
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62869: LD_VAR 0 4
62873: PPUSH
62874: LD_VAR 0 2
62878: PUSH
62879: LD_VAR 0 9
62883: ARRAY
62884: PUSH
62885: LD_INT 1
62887: ARRAY
62888: PPUSH
62889: LD_VAR 0 2
62893: PUSH
62894: LD_VAR 0 9
62898: ARRAY
62899: PUSH
62900: LD_INT 2
62902: ARRAY
62903: PPUSH
62904: CALL_OW 297
62908: PUSH
62909: LD_INT 6
62911: GREATER
62912: IFFALSE 62955
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62914: LD_VAR 0 4
62918: PPUSH
62919: LD_VAR 0 2
62923: PUSH
62924: LD_VAR 0 9
62928: ARRAY
62929: PUSH
62930: LD_INT 1
62932: ARRAY
62933: PPUSH
62934: LD_VAR 0 2
62938: PUSH
62939: LD_VAR 0 9
62943: ARRAY
62944: PUSH
62945: LD_INT 2
62947: ARRAY
62948: PPUSH
62949: CALL_OW 114
62953: GO 62969
// SetTag ( i , tag ) ;
62955: LD_VAR 0 4
62959: PPUSH
62960: LD_VAR 0 9
62964: PPUSH
62965: CALL_OW 109
// end else
62969: GO 63001
// if enemy then
62971: LD_VAR 0 5
62975: IFFALSE 63001
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62977: LD_VAR 0 4
62981: PPUSH
62982: LD_VAR 0 5
62986: PPUSH
62987: LD_VAR 0 4
62991: PPUSH
62992: CALL_OW 74
62996: PPUSH
62997: CALL_OW 115
// end ;
63001: GO 62678
63003: POP
63004: POP
// end ;
63005: LD_VAR 0 3
63009: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63010: LD_INT 0
63012: PPUSH
63013: PPUSH
63014: PPUSH
// if not unit or IsInUnit ( unit ) then
63015: LD_VAR 0 1
63019: NOT
63020: PUSH
63021: LD_VAR 0 1
63025: PPUSH
63026: CALL_OW 310
63030: OR
63031: IFFALSE 63035
// exit ;
63033: GO 63126
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63035: LD_ADDR_VAR 0 4
63039: PUSH
63040: LD_VAR 0 1
63044: PPUSH
63045: CALL_OW 250
63049: PPUSH
63050: LD_VAR 0 2
63054: PPUSH
63055: LD_INT 1
63057: PPUSH
63058: CALL_OW 272
63062: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63063: LD_ADDR_VAR 0 5
63067: PUSH
63068: LD_VAR 0 1
63072: PPUSH
63073: CALL_OW 251
63077: PPUSH
63078: LD_VAR 0 2
63082: PPUSH
63083: LD_INT 1
63085: PPUSH
63086: CALL_OW 273
63090: ST_TO_ADDR
// if ValidHex ( x , y ) then
63091: LD_VAR 0 4
63095: PPUSH
63096: LD_VAR 0 5
63100: PPUSH
63101: CALL_OW 488
63105: IFFALSE 63126
// ComTurnXY ( unit , x , y ) ;
63107: LD_VAR 0 1
63111: PPUSH
63112: LD_VAR 0 4
63116: PPUSH
63117: LD_VAR 0 5
63121: PPUSH
63122: CALL_OW 118
// end ;
63126: LD_VAR 0 3
63130: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63131: LD_INT 0
63133: PPUSH
63134: PPUSH
// result := false ;
63135: LD_ADDR_VAR 0 3
63139: PUSH
63140: LD_INT 0
63142: ST_TO_ADDR
// if not units then
63143: LD_VAR 0 2
63147: NOT
63148: IFFALSE 63152
// exit ;
63150: GO 63197
// for i in units do
63152: LD_ADDR_VAR 0 4
63156: PUSH
63157: LD_VAR 0 2
63161: PUSH
63162: FOR_IN
63163: IFFALSE 63195
// if See ( side , i ) then
63165: LD_VAR 0 1
63169: PPUSH
63170: LD_VAR 0 4
63174: PPUSH
63175: CALL_OW 292
63179: IFFALSE 63193
// begin result := true ;
63181: LD_ADDR_VAR 0 3
63185: PUSH
63186: LD_INT 1
63188: ST_TO_ADDR
// exit ;
63189: POP
63190: POP
63191: GO 63197
// end ;
63193: GO 63162
63195: POP
63196: POP
// end ;
63197: LD_VAR 0 3
63201: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63202: LD_INT 0
63204: PPUSH
63205: PPUSH
63206: PPUSH
63207: PPUSH
// if not unit or not points then
63208: LD_VAR 0 1
63212: NOT
63213: PUSH
63214: LD_VAR 0 2
63218: NOT
63219: OR
63220: IFFALSE 63224
// exit ;
63222: GO 63314
// dist := 99999 ;
63224: LD_ADDR_VAR 0 5
63228: PUSH
63229: LD_INT 99999
63231: ST_TO_ADDR
// for i in points do
63232: LD_ADDR_VAR 0 4
63236: PUSH
63237: LD_VAR 0 2
63241: PUSH
63242: FOR_IN
63243: IFFALSE 63312
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63245: LD_ADDR_VAR 0 6
63249: PUSH
63250: LD_VAR 0 1
63254: PPUSH
63255: LD_VAR 0 4
63259: PUSH
63260: LD_INT 1
63262: ARRAY
63263: PPUSH
63264: LD_VAR 0 4
63268: PUSH
63269: LD_INT 2
63271: ARRAY
63272: PPUSH
63273: CALL_OW 297
63277: ST_TO_ADDR
// if tmpDist < dist then
63278: LD_VAR 0 6
63282: PUSH
63283: LD_VAR 0 5
63287: LESS
63288: IFFALSE 63310
// begin result := i ;
63290: LD_ADDR_VAR 0 3
63294: PUSH
63295: LD_VAR 0 4
63299: ST_TO_ADDR
// dist := tmpDist ;
63300: LD_ADDR_VAR 0 5
63304: PUSH
63305: LD_VAR 0 6
63309: ST_TO_ADDR
// end ; end ;
63310: GO 63242
63312: POP
63313: POP
// end ;
63314: LD_VAR 0 3
63318: RET
