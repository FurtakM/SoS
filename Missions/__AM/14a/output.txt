// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20014 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 19910 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20030 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 24199 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 24199 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 29039 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 29039 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 29039 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 29039 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 24199 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 24199 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 24199 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 24199 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 24199 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 24199 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 24199 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 24199 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 24199 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 24199 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 24199 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 24199 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 24199 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 24199 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 24199 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 29039 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_INT 89
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: IN
3775: PUSH
3776: LD_EXP 3
3780: PPUSH
3781: CALL_OW 310
3785: PPUSH
3786: CALL_OW 264
3790: PUSH
3791: LD_INT 51
3793: PUSH
3794: LD_INT 12
3796: PUSH
3797: LD_INT 89
3799: PUSH
3800: LD_INT 32
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: IN
3809: OR
3810: AND
3811: IFFALSE 4021
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_EXP 2
3830: PPUSH
3831: CALL_OW 310
3835: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 310
3850: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3851: LD_VAR 0 2
3855: PPUSH
3856: CALL_OW 265
3860: PUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: CALL_OW 262
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_VAR 0 2
3878: PPUSH
3879: CALL_OW 264
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 271
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 248
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_STRING 14a_JMMVeh
3914: PPUSH
3915: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: CALL_OW 265
3928: PUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 262
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 264
3951: PUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 271
3961: PUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 248
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_STRING 14a_BurlakVeh
3982: PPUSH
3983: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3987: LD_EXP 2
3991: PPUSH
3992: LD_STRING 14a_JMM
3994: PPUSH
3995: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3999: LD_EXP 3
4003: PPUSH
4004: LD_STRING 14a_Burlak
4006: PPUSH
4007: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING %_cont
4016: PPUSH
4017: CALL_OW 340
// end ;
4021: PPOPN 3
4023: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4024: LD_INT 22
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 24
4039: PUSH
4040: LD_INT 950
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 69
4059: IFFALSE 4071
4061: GO 4063
4063: DISABLE
// YouLost ( FriendlyFire ) ;
4064: LD_STRING FriendlyFire
4066: PPUSH
4067: CALL_OW 104
4071: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4072: LD_EXP 3
4076: PPUSH
4077: CALL_OW 301
4081: IFFALSE 4093
4083: GO 4085
4085: DISABLE
// YouLost ( Burlak ) ;
4086: LD_STRING Burlak
4088: PPUSH
4089: CALL_OW 104
4093: END
// every 0 0$1 trigger IsDead ( JMM ) do
4094: LD_EXP 2
4098: PPUSH
4099: CALL_OW 301
4103: IFFALSE 4115
4105: GO 4107
4107: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4108: LD_STRING JMM
4110: PPUSH
4111: CALL_OW 104
4115: END
// export globalGameSaveCounter ; every 0 0$1 do
4116: GO 4118
4118: DISABLE
// begin enable ;
4119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4120: LD_STRING updateTimer(
4122: PUSH
4123: LD_OWVAR 1
4127: STR
4128: PUSH
4129: LD_STRING );
4131: STR
4132: PPUSH
4133: CALL_OW 559
// end ;
4137: END
// every 0 0$1 do
4138: GO 4140
4140: DISABLE
// begin globalGameSaveCounter := 0 ;
4141: LD_ADDR_EXP 39
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4149: LD_STRING setGameSaveCounter(0)
4151: PPUSH
4152: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4156: LD_STRING initStreamRollete();
4158: PPUSH
4159: CALL_OW 559
// InitStreamMode ;
4163: CALL 5489 0 0
// DefineStreamItems ( false ) ;
4167: LD_INT 0
4169: PPUSH
4170: CALL 5953 0 1
// end ;
4174: END
// export function SOS_MapStart ( ) ; begin
4175: LD_INT 0
4177: PPUSH
// if streamModeActive then
4178: LD_EXP 40
4182: IFFALSE 4191
// DefineStreamItems ( true ) ;
4184: LD_INT 1
4186: PPUSH
4187: CALL 5953 0 1
// UpdateLuaVariables ( ) ;
4191: CALL 4208 0 0
// UpdateFactoryWaypoints ( ) ;
4195: CALL 18814 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4199: CALL 19071 0 0
// end ;
4203: LD_VAR 0 1
4207: RET
// function UpdateLuaVariables ( ) ; begin
4208: LD_INT 0
4210: PPUSH
// if globalGameSaveCounter then
4211: LD_EXP 39
4215: IFFALSE 4249
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4217: LD_ADDR_EXP 39
4221: PUSH
4222: LD_EXP 39
4226: PPUSH
4227: CALL 62852 0 1
4231: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4232: LD_STRING setGameSaveCounter(
4234: PUSH
4235: LD_EXP 39
4239: STR
4240: PUSH
4241: LD_STRING )
4243: STR
4244: PPUSH
4245: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4249: LD_STRING setGameDifficulty(
4251: PUSH
4252: LD_OWVAR 67
4256: STR
4257: PUSH
4258: LD_STRING )
4260: STR
4261: PPUSH
4262: CALL_OW 559
// end ;
4266: LD_VAR 0 1
4270: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4271: LD_INT 0
4273: PPUSH
// if p2 = stream_mode then
4274: LD_VAR 0 2
4278: PUSH
4279: LD_INT 100
4281: EQUAL
4282: IFFALSE 5285
// begin if not StreamModeActive then
4284: LD_EXP 40
4288: NOT
4289: IFFALSE 4299
// StreamModeActive := true ;
4291: LD_ADDR_EXP 40
4295: PUSH
4296: LD_INT 1
4298: ST_TO_ADDR
// if p3 = 0 then
4299: LD_VAR 0 3
4303: PUSH
4304: LD_INT 0
4306: EQUAL
4307: IFFALSE 4313
// InitStreamMode ;
4309: CALL 5489 0 0
// if p3 = 1 then
4313: LD_VAR 0 3
4317: PUSH
4318: LD_INT 1
4320: EQUAL
4321: IFFALSE 4331
// sRocket := true ;
4323: LD_ADDR_EXP 45
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// if p3 = 2 then
4331: LD_VAR 0 3
4335: PUSH
4336: LD_INT 2
4338: EQUAL
4339: IFFALSE 4349
// sSpeed := true ;
4341: LD_ADDR_EXP 44
4345: PUSH
4346: LD_INT 1
4348: ST_TO_ADDR
// if p3 = 3 then
4349: LD_VAR 0 3
4353: PUSH
4354: LD_INT 3
4356: EQUAL
4357: IFFALSE 4367
// sEngine := true ;
4359: LD_ADDR_EXP 46
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// if p3 = 4 then
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 4
4374: EQUAL
4375: IFFALSE 4385
// sSpec := true ;
4377: LD_ADDR_EXP 43
4381: PUSH
4382: LD_INT 1
4384: ST_TO_ADDR
// if p3 = 5 then
4385: LD_VAR 0 3
4389: PUSH
4390: LD_INT 5
4392: EQUAL
4393: IFFALSE 4403
// sLevel := true ;
4395: LD_ADDR_EXP 47
4399: PUSH
4400: LD_INT 1
4402: ST_TO_ADDR
// if p3 = 6 then
4403: LD_VAR 0 3
4407: PUSH
4408: LD_INT 6
4410: EQUAL
4411: IFFALSE 4421
// sArmoury := true ;
4413: LD_ADDR_EXP 48
4417: PUSH
4418: LD_INT 1
4420: ST_TO_ADDR
// if p3 = 7 then
4421: LD_VAR 0 3
4425: PUSH
4426: LD_INT 7
4428: EQUAL
4429: IFFALSE 4439
// sRadar := true ;
4431: LD_ADDR_EXP 49
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// if p3 = 8 then
4439: LD_VAR 0 3
4443: PUSH
4444: LD_INT 8
4446: EQUAL
4447: IFFALSE 4457
// sBunker := true ;
4449: LD_ADDR_EXP 50
4453: PUSH
4454: LD_INT 1
4456: ST_TO_ADDR
// if p3 = 9 then
4457: LD_VAR 0 3
4461: PUSH
4462: LD_INT 9
4464: EQUAL
4465: IFFALSE 4475
// sHack := true ;
4467: LD_ADDR_EXP 51
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// if p3 = 10 then
4475: LD_VAR 0 3
4479: PUSH
4480: LD_INT 10
4482: EQUAL
4483: IFFALSE 4493
// sFire := true ;
4485: LD_ADDR_EXP 52
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// if p3 = 11 then
4493: LD_VAR 0 3
4497: PUSH
4498: LD_INT 11
4500: EQUAL
4501: IFFALSE 4511
// sRefresh := true ;
4503: LD_ADDR_EXP 53
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// if p3 = 12 then
4511: LD_VAR 0 3
4515: PUSH
4516: LD_INT 12
4518: EQUAL
4519: IFFALSE 4529
// sExp := true ;
4521: LD_ADDR_EXP 54
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if p3 = 13 then
4529: LD_VAR 0 3
4533: PUSH
4534: LD_INT 13
4536: EQUAL
4537: IFFALSE 4547
// sDepot := true ;
4539: LD_ADDR_EXP 55
4543: PUSH
4544: LD_INT 1
4546: ST_TO_ADDR
// if p3 = 14 then
4547: LD_VAR 0 3
4551: PUSH
4552: LD_INT 14
4554: EQUAL
4555: IFFALSE 4565
// sFlag := true ;
4557: LD_ADDR_EXP 56
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if p3 = 15 then
4565: LD_VAR 0 3
4569: PUSH
4570: LD_INT 15
4572: EQUAL
4573: IFFALSE 4583
// sKamikadze := true ;
4575: LD_ADDR_EXP 64
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// if p3 = 16 then
4583: LD_VAR 0 3
4587: PUSH
4588: LD_INT 16
4590: EQUAL
4591: IFFALSE 4601
// sTroll := true ;
4593: LD_ADDR_EXP 65
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// if p3 = 17 then
4601: LD_VAR 0 3
4605: PUSH
4606: LD_INT 17
4608: EQUAL
4609: IFFALSE 4619
// sSlow := true ;
4611: LD_ADDR_EXP 66
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// if p3 = 18 then
4619: LD_VAR 0 3
4623: PUSH
4624: LD_INT 18
4626: EQUAL
4627: IFFALSE 4637
// sLack := true ;
4629: LD_ADDR_EXP 67
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// if p3 = 19 then
4637: LD_VAR 0 3
4641: PUSH
4642: LD_INT 19
4644: EQUAL
4645: IFFALSE 4655
// sTank := true ;
4647: LD_ADDR_EXP 69
4651: PUSH
4652: LD_INT 1
4654: ST_TO_ADDR
// if p3 = 20 then
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 20
4662: EQUAL
4663: IFFALSE 4673
// sRemote := true ;
4665: LD_ADDR_EXP 70
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// if p3 = 21 then
4673: LD_VAR 0 3
4677: PUSH
4678: LD_INT 21
4680: EQUAL
4681: IFFALSE 4691
// sPowell := true ;
4683: LD_ADDR_EXP 71
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// if p3 = 22 then
4691: LD_VAR 0 3
4695: PUSH
4696: LD_INT 22
4698: EQUAL
4699: IFFALSE 4709
// sTeleport := true ;
4701: LD_ADDR_EXP 74
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// if p3 = 23 then
4709: LD_VAR 0 3
4713: PUSH
4714: LD_INT 23
4716: EQUAL
4717: IFFALSE 4727
// sOilTower := true ;
4719: LD_ADDR_EXP 76
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// if p3 = 24 then
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 24
4734: EQUAL
4735: IFFALSE 4745
// sShovel := true ;
4737: LD_ADDR_EXP 77
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// if p3 = 25 then
4745: LD_VAR 0 3
4749: PUSH
4750: LD_INT 25
4752: EQUAL
4753: IFFALSE 4763
// sSheik := true ;
4755: LD_ADDR_EXP 78
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// if p3 = 26 then
4763: LD_VAR 0 3
4767: PUSH
4768: LD_INT 26
4770: EQUAL
4771: IFFALSE 4781
// sEarthquake := true ;
4773: LD_ADDR_EXP 80
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// if p3 = 27 then
4781: LD_VAR 0 3
4785: PUSH
4786: LD_INT 27
4788: EQUAL
4789: IFFALSE 4799
// sAI := true ;
4791: LD_ADDR_EXP 81
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// if p3 = 28 then
4799: LD_VAR 0 3
4803: PUSH
4804: LD_INT 28
4806: EQUAL
4807: IFFALSE 4817
// sCargo := true ;
4809: LD_ADDR_EXP 84
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// if p3 = 29 then
4817: LD_VAR 0 3
4821: PUSH
4822: LD_INT 29
4824: EQUAL
4825: IFFALSE 4835
// sDLaser := true ;
4827: LD_ADDR_EXP 85
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// if p3 = 30 then
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 30
4842: EQUAL
4843: IFFALSE 4853
// sExchange := true ;
4845: LD_ADDR_EXP 86
4849: PUSH
4850: LD_INT 1
4852: ST_TO_ADDR
// if p3 = 31 then
4853: LD_VAR 0 3
4857: PUSH
4858: LD_INT 31
4860: EQUAL
4861: IFFALSE 4871
// sFac := true ;
4863: LD_ADDR_EXP 87
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// if p3 = 32 then
4871: LD_VAR 0 3
4875: PUSH
4876: LD_INT 32
4878: EQUAL
4879: IFFALSE 4889
// sPower := true ;
4881: LD_ADDR_EXP 88
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// if p3 = 33 then
4889: LD_VAR 0 3
4893: PUSH
4894: LD_INT 33
4896: EQUAL
4897: IFFALSE 4907
// sRandom := true ;
4899: LD_ADDR_EXP 89
4903: PUSH
4904: LD_INT 1
4906: ST_TO_ADDR
// if p3 = 34 then
4907: LD_VAR 0 3
4911: PUSH
4912: LD_INT 34
4914: EQUAL
4915: IFFALSE 4925
// sShield := true ;
4917: LD_ADDR_EXP 90
4921: PUSH
4922: LD_INT 1
4924: ST_TO_ADDR
// if p3 = 35 then
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 35
4932: EQUAL
4933: IFFALSE 4943
// sTime := true ;
4935: LD_ADDR_EXP 91
4939: PUSH
4940: LD_INT 1
4942: ST_TO_ADDR
// if p3 = 36 then
4943: LD_VAR 0 3
4947: PUSH
4948: LD_INT 36
4950: EQUAL
4951: IFFALSE 4961
// sTools := true ;
4953: LD_ADDR_EXP 92
4957: PUSH
4958: LD_INT 1
4960: ST_TO_ADDR
// if p3 = 101 then
4961: LD_VAR 0 3
4965: PUSH
4966: LD_INT 101
4968: EQUAL
4969: IFFALSE 4979
// sSold := true ;
4971: LD_ADDR_EXP 57
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if p3 = 102 then
4979: LD_VAR 0 3
4983: PUSH
4984: LD_INT 102
4986: EQUAL
4987: IFFALSE 4997
// sDiff := true ;
4989: LD_ADDR_EXP 58
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if p3 = 103 then
4997: LD_VAR 0 3
5001: PUSH
5002: LD_INT 103
5004: EQUAL
5005: IFFALSE 5015
// sFog := true ;
5007: LD_ADDR_EXP 61
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// if p3 = 104 then
5015: LD_VAR 0 3
5019: PUSH
5020: LD_INT 104
5022: EQUAL
5023: IFFALSE 5033
// sReset := true ;
5025: LD_ADDR_EXP 62
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// if p3 = 105 then
5033: LD_VAR 0 3
5037: PUSH
5038: LD_INT 105
5040: EQUAL
5041: IFFALSE 5051
// sSun := true ;
5043: LD_ADDR_EXP 63
5047: PUSH
5048: LD_INT 1
5050: ST_TO_ADDR
// if p3 = 106 then
5051: LD_VAR 0 3
5055: PUSH
5056: LD_INT 106
5058: EQUAL
5059: IFFALSE 5069
// sTiger := true ;
5061: LD_ADDR_EXP 59
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// if p3 = 107 then
5069: LD_VAR 0 3
5073: PUSH
5074: LD_INT 107
5076: EQUAL
5077: IFFALSE 5087
// sBomb := true ;
5079: LD_ADDR_EXP 60
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// if p3 = 108 then
5087: LD_VAR 0 3
5091: PUSH
5092: LD_INT 108
5094: EQUAL
5095: IFFALSE 5105
// sWound := true ;
5097: LD_ADDR_EXP 68
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// if p3 = 109 then
5105: LD_VAR 0 3
5109: PUSH
5110: LD_INT 109
5112: EQUAL
5113: IFFALSE 5123
// sBetray := true ;
5115: LD_ADDR_EXP 72
5119: PUSH
5120: LD_INT 1
5122: ST_TO_ADDR
// if p3 = 110 then
5123: LD_VAR 0 3
5127: PUSH
5128: LD_INT 110
5130: EQUAL
5131: IFFALSE 5141
// sContamin := true ;
5133: LD_ADDR_EXP 73
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// if p3 = 111 then
5141: LD_VAR 0 3
5145: PUSH
5146: LD_INT 111
5148: EQUAL
5149: IFFALSE 5159
// sOil := true ;
5151: LD_ADDR_EXP 75
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// if p3 = 112 then
5159: LD_VAR 0 3
5163: PUSH
5164: LD_INT 112
5166: EQUAL
5167: IFFALSE 5177
// sStu := true ;
5169: LD_ADDR_EXP 79
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// if p3 = 113 then
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 113
5184: EQUAL
5185: IFFALSE 5195
// sBazooka := true ;
5187: LD_ADDR_EXP 82
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// if p3 = 114 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 114
5202: EQUAL
5203: IFFALSE 5213
// sMortar := true ;
5205: LD_ADDR_EXP 83
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if p3 = 115 then
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 115
5220: EQUAL
5221: IFFALSE 5231
// sRanger := true ;
5223: LD_ADDR_EXP 93
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// if p3 = 116 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 116
5238: EQUAL
5239: IFFALSE 5249
// sComputer := true ;
5241: LD_ADDR_EXP 94
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if p3 = 117 then
5249: LD_VAR 0 3
5253: PUSH
5254: LD_INT 117
5256: EQUAL
5257: IFFALSE 5267
// s30 := true ;
5259: LD_ADDR_EXP 95
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if p3 = 118 then
5267: LD_VAR 0 3
5271: PUSH
5272: LD_INT 118
5274: EQUAL
5275: IFFALSE 5285
// s60 := true ;
5277: LD_ADDR_EXP 96
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ; if p2 = hack_mode then
5285: LD_VAR 0 2
5289: PUSH
5290: LD_INT 101
5292: EQUAL
5293: IFFALSE 5421
// begin case p3 of 1 :
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 1
5302: DOUBLE
5303: EQUAL
5304: IFTRUE 5308
5306: GO 5315
5308: POP
// hHackUnlimitedResources ; 2 :
5309: CALL 17560 0 0
5313: GO 5421
5315: LD_INT 2
5317: DOUBLE
5318: EQUAL
5319: IFTRUE 5323
5321: GO 5330
5323: POP
// hHackSetLevel10 ; 3 :
5324: CALL 17693 0 0
5328: GO 5421
5330: LD_INT 3
5332: DOUBLE
5333: EQUAL
5334: IFTRUE 5338
5336: GO 5345
5338: POP
// hHackSetLevel10YourUnits ; 4 :
5339: CALL 17778 0 0
5343: GO 5421
5345: LD_INT 4
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5360
5353: POP
// hHackInvincible ; 5 :
5354: CALL 18226 0 0
5358: GO 5421
5360: LD_INT 5
5362: DOUBLE
5363: EQUAL
5364: IFTRUE 5368
5366: GO 5375
5368: POP
// hHackInvisible ; 6 :
5369: CALL 18337 0 0
5373: GO 5421
5375: LD_INT 6
5377: DOUBLE
5378: EQUAL
5379: IFTRUE 5383
5381: GO 5390
5383: POP
// hHackChangeYourSide ; 7 :
5384: CALL 18394 0 0
5388: GO 5421
5390: LD_INT 7
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5405
5398: POP
// hHackChangeUnitSide ; 8 :
5399: CALL 18436 0 0
5403: GO 5421
5405: LD_INT 8
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5420
5413: POP
// hHackFog ; end ;
5414: CALL 18537 0 0
5418: GO 5421
5420: POP
// end ; if p2 = game_save_mode then
5421: LD_VAR 0 2
5425: PUSH
5426: LD_INT 102
5428: EQUAL
5429: IFFALSE 5484
// begin if p3 = 1 then
5431: LD_VAR 0 3
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5451
// globalGameSaveCounter := p4 ;
5441: LD_ADDR_EXP 39
5445: PUSH
5446: LD_VAR 0 4
5450: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5451: LD_VAR 0 3
5455: PUSH
5456: LD_INT 2
5458: EQUAL
5459: PUSH
5460: LD_EXP 39
5464: AND
5465: IFFALSE 5484
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5467: LD_STRING setGameSaveCounter(
5469: PUSH
5470: LD_EXP 39
5474: STR
5475: PUSH
5476: LD_STRING )
5478: STR
5479: PPUSH
5480: CALL_OW 559
// end ; end ;
5484: LD_VAR 0 7
5488: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5489: LD_INT 0
5491: PPUSH
// streamModeActive := false ;
5492: LD_ADDR_EXP 40
5496: PUSH
5497: LD_INT 0
5499: ST_TO_ADDR
// normalCounter := 36 ;
5500: LD_ADDR_EXP 41
5504: PUSH
5505: LD_INT 36
5507: ST_TO_ADDR
// hardcoreCounter := 18 ;
5508: LD_ADDR_EXP 42
5512: PUSH
5513: LD_INT 18
5515: ST_TO_ADDR
// sRocket := false ;
5516: LD_ADDR_EXP 45
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// sSpeed := false ;
5524: LD_ADDR_EXP 44
5528: PUSH
5529: LD_INT 0
5531: ST_TO_ADDR
// sEngine := false ;
5532: LD_ADDR_EXP 46
5536: PUSH
5537: LD_INT 0
5539: ST_TO_ADDR
// sSpec := false ;
5540: LD_ADDR_EXP 43
5544: PUSH
5545: LD_INT 0
5547: ST_TO_ADDR
// sLevel := false ;
5548: LD_ADDR_EXP 47
5552: PUSH
5553: LD_INT 0
5555: ST_TO_ADDR
// sArmoury := false ;
5556: LD_ADDR_EXP 48
5560: PUSH
5561: LD_INT 0
5563: ST_TO_ADDR
// sRadar := false ;
5564: LD_ADDR_EXP 49
5568: PUSH
5569: LD_INT 0
5571: ST_TO_ADDR
// sBunker := false ;
5572: LD_ADDR_EXP 50
5576: PUSH
5577: LD_INT 0
5579: ST_TO_ADDR
// sHack := false ;
5580: LD_ADDR_EXP 51
5584: PUSH
5585: LD_INT 0
5587: ST_TO_ADDR
// sFire := false ;
5588: LD_ADDR_EXP 52
5592: PUSH
5593: LD_INT 0
5595: ST_TO_ADDR
// sRefresh := false ;
5596: LD_ADDR_EXP 53
5600: PUSH
5601: LD_INT 0
5603: ST_TO_ADDR
// sExp := false ;
5604: LD_ADDR_EXP 54
5608: PUSH
5609: LD_INT 0
5611: ST_TO_ADDR
// sDepot := false ;
5612: LD_ADDR_EXP 55
5616: PUSH
5617: LD_INT 0
5619: ST_TO_ADDR
// sFlag := false ;
5620: LD_ADDR_EXP 56
5624: PUSH
5625: LD_INT 0
5627: ST_TO_ADDR
// sKamikadze := false ;
5628: LD_ADDR_EXP 64
5632: PUSH
5633: LD_INT 0
5635: ST_TO_ADDR
// sTroll := false ;
5636: LD_ADDR_EXP 65
5640: PUSH
5641: LD_INT 0
5643: ST_TO_ADDR
// sSlow := false ;
5644: LD_ADDR_EXP 66
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// sLack := false ;
5652: LD_ADDR_EXP 67
5656: PUSH
5657: LD_INT 0
5659: ST_TO_ADDR
// sTank := false ;
5660: LD_ADDR_EXP 69
5664: PUSH
5665: LD_INT 0
5667: ST_TO_ADDR
// sRemote := false ;
5668: LD_ADDR_EXP 70
5672: PUSH
5673: LD_INT 0
5675: ST_TO_ADDR
// sPowell := false ;
5676: LD_ADDR_EXP 71
5680: PUSH
5681: LD_INT 0
5683: ST_TO_ADDR
// sTeleport := false ;
5684: LD_ADDR_EXP 74
5688: PUSH
5689: LD_INT 0
5691: ST_TO_ADDR
// sOilTower := false ;
5692: LD_ADDR_EXP 76
5696: PUSH
5697: LD_INT 0
5699: ST_TO_ADDR
// sShovel := false ;
5700: LD_ADDR_EXP 77
5704: PUSH
5705: LD_INT 0
5707: ST_TO_ADDR
// sSheik := false ;
5708: LD_ADDR_EXP 78
5712: PUSH
5713: LD_INT 0
5715: ST_TO_ADDR
// sEarthquake := false ;
5716: LD_ADDR_EXP 80
5720: PUSH
5721: LD_INT 0
5723: ST_TO_ADDR
// sAI := false ;
5724: LD_ADDR_EXP 81
5728: PUSH
5729: LD_INT 0
5731: ST_TO_ADDR
// sCargo := false ;
5732: LD_ADDR_EXP 84
5736: PUSH
5737: LD_INT 0
5739: ST_TO_ADDR
// sDLaser := false ;
5740: LD_ADDR_EXP 85
5744: PUSH
5745: LD_INT 0
5747: ST_TO_ADDR
// sExchange := false ;
5748: LD_ADDR_EXP 86
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// sFac := false ;
5756: LD_ADDR_EXP 87
5760: PUSH
5761: LD_INT 0
5763: ST_TO_ADDR
// sPower := false ;
5764: LD_ADDR_EXP 88
5768: PUSH
5769: LD_INT 0
5771: ST_TO_ADDR
// sRandom := false ;
5772: LD_ADDR_EXP 89
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// sShield := false ;
5780: LD_ADDR_EXP 90
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// sTime := false ;
5788: LD_ADDR_EXP 91
5792: PUSH
5793: LD_INT 0
5795: ST_TO_ADDR
// sTools := false ;
5796: LD_ADDR_EXP 92
5800: PUSH
5801: LD_INT 0
5803: ST_TO_ADDR
// sSold := false ;
5804: LD_ADDR_EXP 57
5808: PUSH
5809: LD_INT 0
5811: ST_TO_ADDR
// sDiff := false ;
5812: LD_ADDR_EXP 58
5816: PUSH
5817: LD_INT 0
5819: ST_TO_ADDR
// sFog := false ;
5820: LD_ADDR_EXP 61
5824: PUSH
5825: LD_INT 0
5827: ST_TO_ADDR
// sReset := false ;
5828: LD_ADDR_EXP 62
5832: PUSH
5833: LD_INT 0
5835: ST_TO_ADDR
// sSun := false ;
5836: LD_ADDR_EXP 63
5840: PUSH
5841: LD_INT 0
5843: ST_TO_ADDR
// sTiger := false ;
5844: LD_ADDR_EXP 59
5848: PUSH
5849: LD_INT 0
5851: ST_TO_ADDR
// sBomb := false ;
5852: LD_ADDR_EXP 60
5856: PUSH
5857: LD_INT 0
5859: ST_TO_ADDR
// sWound := false ;
5860: LD_ADDR_EXP 68
5864: PUSH
5865: LD_INT 0
5867: ST_TO_ADDR
// sBetray := false ;
5868: LD_ADDR_EXP 72
5872: PUSH
5873: LD_INT 0
5875: ST_TO_ADDR
// sContamin := false ;
5876: LD_ADDR_EXP 73
5880: PUSH
5881: LD_INT 0
5883: ST_TO_ADDR
// sOil := false ;
5884: LD_ADDR_EXP 75
5888: PUSH
5889: LD_INT 0
5891: ST_TO_ADDR
// sStu := false ;
5892: LD_ADDR_EXP 79
5896: PUSH
5897: LD_INT 0
5899: ST_TO_ADDR
// sBazooka := false ;
5900: LD_ADDR_EXP 82
5904: PUSH
5905: LD_INT 0
5907: ST_TO_ADDR
// sMortar := false ;
5908: LD_ADDR_EXP 83
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// sRanger := false ;
5916: LD_ADDR_EXP 93
5920: PUSH
5921: LD_INT 0
5923: ST_TO_ADDR
// sComputer := false ;
5924: LD_ADDR_EXP 94
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// s30 := false ;
5932: LD_ADDR_EXP 95
5936: PUSH
5937: LD_INT 0
5939: ST_TO_ADDR
// s60 := false ;
5940: LD_ADDR_EXP 96
5944: PUSH
5945: LD_INT 0
5947: ST_TO_ADDR
// end ;
5948: LD_VAR 0 1
5952: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5953: LD_INT 0
5955: PPUSH
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
// result := [ ] ;
5962: LD_ADDR_VAR 0 2
5966: PUSH
5967: EMPTY
5968: ST_TO_ADDR
// if campaign_id = 1 then
5969: LD_OWVAR 69
5973: PUSH
5974: LD_INT 1
5976: EQUAL
5977: IFFALSE 9143
// begin case mission_number of 1 :
5979: LD_OWVAR 70
5983: PUSH
5984: LD_INT 1
5986: DOUBLE
5987: EQUAL
5988: IFTRUE 5992
5990: GO 6068
5992: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: LD_INT 11
6006: PUSH
6007: LD_INT 12
6009: PUSH
6010: LD_INT 15
6012: PUSH
6013: LD_INT 16
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 23
6021: PUSH
6022: LD_INT 26
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 101
6038: PUSH
6039: LD_INT 102
6041: PUSH
6042: LD_INT 106
6044: PUSH
6045: LD_INT 116
6047: PUSH
6048: LD_INT 117
6050: PUSH
6051: LD_INT 118
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: ST_TO_ADDR
6066: GO 9141
6068: LD_INT 2
6070: DOUBLE
6071: EQUAL
6072: IFTRUE 6076
6074: GO 6160
6076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: LD_INT 4
6087: PUSH
6088: LD_INT 11
6090: PUSH
6091: LD_INT 12
6093: PUSH
6094: LD_INT 15
6096: PUSH
6097: LD_INT 16
6099: PUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 23
6105: PUSH
6106: LD_INT 26
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 101
6122: PUSH
6123: LD_INT 102
6125: PUSH
6126: LD_INT 105
6128: PUSH
6129: LD_INT 106
6131: PUSH
6132: LD_INT 108
6134: PUSH
6135: LD_INT 116
6137: PUSH
6138: LD_INT 117
6140: PUSH
6141: LD_INT 118
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: ST_TO_ADDR
6158: GO 9141
6160: LD_INT 3
6162: DOUBLE
6163: EQUAL
6164: IFTRUE 6168
6166: GO 6256
6168: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6169: LD_ADDR_VAR 0 2
6173: PUSH
6174: LD_INT 2
6176: PUSH
6177: LD_INT 4
6179: PUSH
6180: LD_INT 5
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 15
6191: PUSH
6192: LD_INT 16
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_INT 26
6200: PUSH
6201: LD_INT 36
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 101
6218: PUSH
6219: LD_INT 102
6221: PUSH
6222: LD_INT 105
6224: PUSH
6225: LD_INT 106
6227: PUSH
6228: LD_INT 108
6230: PUSH
6231: LD_INT 116
6233: PUSH
6234: LD_INT 117
6236: PUSH
6237: LD_INT 118
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
6254: GO 9141
6256: LD_INT 4
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6360
6264: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: LD_INT 4
6275: PUSH
6276: LD_INT 5
6278: PUSH
6279: LD_INT 8
6281: PUSH
6282: LD_INT 11
6284: PUSH
6285: LD_INT 12
6287: PUSH
6288: LD_INT 15
6290: PUSH
6291: LD_INT 16
6293: PUSH
6294: LD_INT 22
6296: PUSH
6297: LD_INT 23
6299: PUSH
6300: LD_INT 26
6302: PUSH
6303: LD_INT 36
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 101
6322: PUSH
6323: LD_INT 102
6325: PUSH
6326: LD_INT 105
6328: PUSH
6329: LD_INT 106
6331: PUSH
6332: LD_INT 108
6334: PUSH
6335: LD_INT 116
6337: PUSH
6338: LD_INT 117
6340: PUSH
6341: LD_INT 118
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 9141
6360: LD_INT 5
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6480
6368: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 4
6379: PUSH
6380: LD_INT 5
6382: PUSH
6383: LD_INT 6
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 12
6394: PUSH
6395: LD_INT 15
6397: PUSH
6398: LD_INT 16
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 23
6406: PUSH
6407: LD_INT 25
6409: PUSH
6410: LD_INT 26
6412: PUSH
6413: LD_INT 36
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 101
6434: PUSH
6435: LD_INT 102
6437: PUSH
6438: LD_INT 105
6440: PUSH
6441: LD_INT 106
6443: PUSH
6444: LD_INT 108
6446: PUSH
6447: LD_INT 109
6449: PUSH
6450: LD_INT 112
6452: PUSH
6453: LD_INT 116
6455: PUSH
6456: LD_INT 117
6458: PUSH
6459: LD_INT 118
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: ST_TO_ADDR
6478: GO 9141
6480: LD_INT 6
6482: DOUBLE
6483: EQUAL
6484: IFTRUE 6488
6486: GO 6620
6488: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_INT 2
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: LD_INT 6
6505: PUSH
6506: LD_INT 8
6508: PUSH
6509: LD_INT 11
6511: PUSH
6512: LD_INT 12
6514: PUSH
6515: LD_INT 15
6517: PUSH
6518: LD_INT 16
6520: PUSH
6521: LD_INT 20
6523: PUSH
6524: LD_INT 21
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 23
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 31
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: LD_INT 36
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 101
6574: PUSH
6575: LD_INT 102
6577: PUSH
6578: LD_INT 105
6580: PUSH
6581: LD_INT 106
6583: PUSH
6584: LD_INT 108
6586: PUSH
6587: LD_INT 109
6589: PUSH
6590: LD_INT 112
6592: PUSH
6593: LD_INT 116
6595: PUSH
6596: LD_INT 117
6598: PUSH
6599: LD_INT 118
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: ST_TO_ADDR
6618: GO 9141
6620: LD_INT 7
6622: DOUBLE
6623: EQUAL
6624: IFTRUE 6628
6626: GO 6740
6628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6629: LD_ADDR_VAR 0 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 4
6639: PUSH
6640: LD_INT 5
6642: PUSH
6643: LD_INT 7
6645: PUSH
6646: LD_INT 11
6648: PUSH
6649: LD_INT 12
6651: PUSH
6652: LD_INT 15
6654: PUSH
6655: LD_INT 16
6657: PUSH
6658: LD_INT 20
6660: PUSH
6661: LD_INT 21
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_INT 23
6669: PUSH
6670: LD_INT 25
6672: PUSH
6673: LD_INT 26
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 101
6694: PUSH
6695: LD_INT 102
6697: PUSH
6698: LD_INT 103
6700: PUSH
6701: LD_INT 105
6703: PUSH
6704: LD_INT 106
6706: PUSH
6707: LD_INT 108
6709: PUSH
6710: LD_INT 112
6712: PUSH
6713: LD_INT 116
6715: PUSH
6716: LD_INT 117
6718: PUSH
6719: LD_INT 118
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: ST_TO_ADDR
6738: GO 9141
6740: LD_INT 8
6742: DOUBLE
6743: EQUAL
6744: IFTRUE 6748
6746: GO 6888
6748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6749: LD_ADDR_VAR 0 2
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: LD_INT 4
6759: PUSH
6760: LD_INT 5
6762: PUSH
6763: LD_INT 6
6765: PUSH
6766: LD_INT 7
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 15
6780: PUSH
6781: LD_INT 16
6783: PUSH
6784: LD_INT 20
6786: PUSH
6787: LD_INT 21
6789: PUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 23
6795: PUSH
6796: LD_INT 25
6798: PUSH
6799: LD_INT 26
6801: PUSH
6802: LD_INT 30
6804: PUSH
6805: LD_INT 31
6807: PUSH
6808: LD_INT 32
6810: PUSH
6811: LD_INT 36
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 101
6838: PUSH
6839: LD_INT 102
6841: PUSH
6842: LD_INT 103
6844: PUSH
6845: LD_INT 105
6847: PUSH
6848: LD_INT 106
6850: PUSH
6851: LD_INT 108
6853: PUSH
6854: LD_INT 109
6856: PUSH
6857: LD_INT 112
6859: PUSH
6860: LD_INT 116
6862: PUSH
6863: LD_INT 117
6865: PUSH
6866: LD_INT 118
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: ST_TO_ADDR
6886: GO 9141
6888: LD_INT 9
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 7044
6896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6897: LD_ADDR_VAR 0 2
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: LD_INT 4
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 6
6913: PUSH
6914: LD_INT 7
6916: PUSH
6917: LD_INT 8
6919: PUSH
6920: LD_INT 11
6922: PUSH
6923: LD_INT 12
6925: PUSH
6926: LD_INT 15
6928: PUSH
6929: LD_INT 16
6931: PUSH
6932: LD_INT 20
6934: PUSH
6935: LD_INT 21
6937: PUSH
6938: LD_INT 22
6940: PUSH
6941: LD_INT 23
6943: PUSH
6944: LD_INT 25
6946: PUSH
6947: LD_INT 26
6949: PUSH
6950: LD_INT 28
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 31
6958: PUSH
6959: LD_INT 32
6961: PUSH
6962: LD_INT 36
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 101
6990: PUSH
6991: LD_INT 102
6993: PUSH
6994: LD_INT 103
6996: PUSH
6997: LD_INT 105
6999: PUSH
7000: LD_INT 106
7002: PUSH
7003: LD_INT 108
7005: PUSH
7006: LD_INT 109
7008: PUSH
7009: LD_INT 112
7011: PUSH
7012: LD_INT 114
7014: PUSH
7015: LD_INT 116
7017: PUSH
7018: LD_INT 117
7020: PUSH
7021: LD_INT 118
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: ST_TO_ADDR
7042: GO 9141
7044: LD_INT 10
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7248
7052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 4
7063: PUSH
7064: LD_INT 5
7066: PUSH
7067: LD_INT 6
7069: PUSH
7070: LD_INT 7
7072: PUSH
7073: LD_INT 8
7075: PUSH
7076: LD_INT 9
7078: PUSH
7079: LD_INT 10
7081: PUSH
7082: LD_INT 11
7084: PUSH
7085: LD_INT 12
7087: PUSH
7088: LD_INT 13
7090: PUSH
7091: LD_INT 14
7093: PUSH
7094: LD_INT 15
7096: PUSH
7097: LD_INT 16
7099: PUSH
7100: LD_INT 17
7102: PUSH
7103: LD_INT 18
7105: PUSH
7106: LD_INT 19
7108: PUSH
7109: LD_INT 20
7111: PUSH
7112: LD_INT 21
7114: PUSH
7115: LD_INT 22
7117: PUSH
7118: LD_INT 23
7120: PUSH
7121: LD_INT 24
7123: PUSH
7124: LD_INT 25
7126: PUSH
7127: LD_INT 26
7129: PUSH
7130: LD_INT 28
7132: PUSH
7133: LD_INT 30
7135: PUSH
7136: LD_INT 31
7138: PUSH
7139: LD_INT 32
7141: PUSH
7142: LD_INT 36
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 101
7178: PUSH
7179: LD_INT 102
7181: PUSH
7182: LD_INT 103
7184: PUSH
7185: LD_INT 104
7187: PUSH
7188: LD_INT 105
7190: PUSH
7191: LD_INT 106
7193: PUSH
7194: LD_INT 107
7196: PUSH
7197: LD_INT 108
7199: PUSH
7200: LD_INT 109
7202: PUSH
7203: LD_INT 110
7205: PUSH
7206: LD_INT 111
7208: PUSH
7209: LD_INT 112
7211: PUSH
7212: LD_INT 114
7214: PUSH
7215: LD_INT 116
7217: PUSH
7218: LD_INT 117
7220: PUSH
7221: LD_INT 118
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 9141
7248: LD_INT 11
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7460
7256: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: LD_INT 6
7276: PUSH
7277: LD_INT 7
7279: PUSH
7280: LD_INT 8
7282: PUSH
7283: LD_INT 9
7285: PUSH
7286: LD_INT 10
7288: PUSH
7289: LD_INT 11
7291: PUSH
7292: LD_INT 12
7294: PUSH
7295: LD_INT 13
7297: PUSH
7298: LD_INT 14
7300: PUSH
7301: LD_INT 15
7303: PUSH
7304: LD_INT 16
7306: PUSH
7307: LD_INT 17
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 19
7315: PUSH
7316: LD_INT 20
7318: PUSH
7319: LD_INT 21
7321: PUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 23
7327: PUSH
7328: LD_INT 24
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 26
7336: PUSH
7337: LD_INT 28
7339: PUSH
7340: LD_INT 30
7342: PUSH
7343: LD_INT 31
7345: PUSH
7346: LD_INT 32
7348: PUSH
7349: LD_INT 34
7351: PUSH
7352: LD_INT 36
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 101
7390: PUSH
7391: LD_INT 102
7393: PUSH
7394: LD_INT 103
7396: PUSH
7397: LD_INT 104
7399: PUSH
7400: LD_INT 105
7402: PUSH
7403: LD_INT 106
7405: PUSH
7406: LD_INT 107
7408: PUSH
7409: LD_INT 108
7411: PUSH
7412: LD_INT 109
7414: PUSH
7415: LD_INT 110
7417: PUSH
7418: LD_INT 111
7420: PUSH
7421: LD_INT 112
7423: PUSH
7424: LD_INT 114
7426: PUSH
7427: LD_INT 116
7429: PUSH
7430: LD_INT 117
7432: PUSH
7433: LD_INT 118
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: ST_TO_ADDR
7458: GO 9141
7460: LD_INT 12
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7688
7468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7469: LD_ADDR_VAR 0 2
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 4
7485: PUSH
7486: LD_INT 5
7488: PUSH
7489: LD_INT 6
7491: PUSH
7492: LD_INT 7
7494: PUSH
7495: LD_INT 8
7497: PUSH
7498: LD_INT 9
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 11
7506: PUSH
7507: LD_INT 12
7509: PUSH
7510: LD_INT 13
7512: PUSH
7513: LD_INT 14
7515: PUSH
7516: LD_INT 15
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: LD_INT 17
7524: PUSH
7525: LD_INT 18
7527: PUSH
7528: LD_INT 19
7530: PUSH
7531: LD_INT 20
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 23
7542: PUSH
7543: LD_INT 24
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 26
7551: PUSH
7552: LD_INT 27
7554: PUSH
7555: LD_INT 28
7557: PUSH
7558: LD_INT 30
7560: PUSH
7561: LD_INT 31
7563: PUSH
7564: LD_INT 32
7566: PUSH
7567: LD_INT 33
7569: PUSH
7570: LD_INT 34
7572: PUSH
7573: LD_INT 36
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 101
7614: PUSH
7615: LD_INT 102
7617: PUSH
7618: LD_INT 103
7620: PUSH
7621: LD_INT 104
7623: PUSH
7624: LD_INT 105
7626: PUSH
7627: LD_INT 106
7629: PUSH
7630: LD_INT 107
7632: PUSH
7633: LD_INT 108
7635: PUSH
7636: LD_INT 109
7638: PUSH
7639: LD_INT 110
7641: PUSH
7642: LD_INT 111
7644: PUSH
7645: LD_INT 112
7647: PUSH
7648: LD_INT 113
7650: PUSH
7651: LD_INT 114
7653: PUSH
7654: LD_INT 116
7656: PUSH
7657: LD_INT 117
7659: PUSH
7660: LD_INT 118
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 9141
7688: LD_INT 13
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7904
7696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 8
7719: PUSH
7720: LD_INT 9
7722: PUSH
7723: LD_INT 10
7725: PUSH
7726: LD_INT 11
7728: PUSH
7729: LD_INT 12
7731: PUSH
7732: LD_INT 14
7734: PUSH
7735: LD_INT 15
7737: PUSH
7738: LD_INT 16
7740: PUSH
7741: LD_INT 17
7743: PUSH
7744: LD_INT 18
7746: PUSH
7747: LD_INT 19
7749: PUSH
7750: LD_INT 20
7752: PUSH
7753: LD_INT 21
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 23
7761: PUSH
7762: LD_INT 24
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 26
7770: PUSH
7771: LD_INT 27
7773: PUSH
7774: LD_INT 28
7776: PUSH
7777: LD_INT 30
7779: PUSH
7780: LD_INT 31
7782: PUSH
7783: LD_INT 32
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 34
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 101
7830: PUSH
7831: LD_INT 102
7833: PUSH
7834: LD_INT 103
7836: PUSH
7837: LD_INT 104
7839: PUSH
7840: LD_INT 105
7842: PUSH
7843: LD_INT 106
7845: PUSH
7846: LD_INT 107
7848: PUSH
7849: LD_INT 108
7851: PUSH
7852: LD_INT 109
7854: PUSH
7855: LD_INT 110
7857: PUSH
7858: LD_INT 111
7860: PUSH
7861: LD_INT 112
7863: PUSH
7864: LD_INT 113
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: LD_INT 116
7872: PUSH
7873: LD_INT 117
7875: PUSH
7876: LD_INT 118
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: ST_TO_ADDR
7902: GO 9141
7904: LD_INT 14
7906: DOUBLE
7907: EQUAL
7908: IFTRUE 7912
7910: GO 8136
7912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 4
7929: PUSH
7930: LD_INT 5
7932: PUSH
7933: LD_INT 6
7935: PUSH
7936: LD_INT 7
7938: PUSH
7939: LD_INT 8
7941: PUSH
7942: LD_INT 9
7944: PUSH
7945: LD_INT 10
7947: PUSH
7948: LD_INT 11
7950: PUSH
7951: LD_INT 12
7953: PUSH
7954: LD_INT 13
7956: PUSH
7957: LD_INT 14
7959: PUSH
7960: LD_INT 15
7962: PUSH
7963: LD_INT 16
7965: PUSH
7966: LD_INT 17
7968: PUSH
7969: LD_INT 18
7971: PUSH
7972: LD_INT 19
7974: PUSH
7975: LD_INT 20
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 23
7986: PUSH
7987: LD_INT 24
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 26
7995: PUSH
7996: LD_INT 27
7998: PUSH
7999: LD_INT 28
8001: PUSH
8002: LD_INT 29
8004: PUSH
8005: LD_INT 30
8007: PUSH
8008: LD_INT 31
8010: PUSH
8011: LD_INT 32
8013: PUSH
8014: LD_INT 33
8016: PUSH
8017: LD_INT 34
8019: PUSH
8020: LD_INT 36
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 101
8062: PUSH
8063: LD_INT 102
8065: PUSH
8066: LD_INT 103
8068: PUSH
8069: LD_INT 104
8071: PUSH
8072: LD_INT 105
8074: PUSH
8075: LD_INT 106
8077: PUSH
8078: LD_INT 107
8080: PUSH
8081: LD_INT 108
8083: PUSH
8084: LD_INT 109
8086: PUSH
8087: LD_INT 110
8089: PUSH
8090: LD_INT 111
8092: PUSH
8093: LD_INT 112
8095: PUSH
8096: LD_INT 113
8098: PUSH
8099: LD_INT 114
8101: PUSH
8102: LD_INT 116
8104: PUSH
8105: LD_INT 117
8107: PUSH
8108: LD_INT 118
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: ST_TO_ADDR
8134: GO 9141
8136: LD_INT 15
8138: DOUBLE
8139: EQUAL
8140: IFTRUE 8144
8142: GO 8368
8144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8145: LD_ADDR_VAR 0 2
8149: PUSH
8150: LD_INT 1
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 6
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: LD_INT 8
8173: PUSH
8174: LD_INT 9
8176: PUSH
8177: LD_INT 10
8179: PUSH
8180: LD_INT 11
8182: PUSH
8183: LD_INT 12
8185: PUSH
8186: LD_INT 13
8188: PUSH
8189: LD_INT 14
8191: PUSH
8192: LD_INT 15
8194: PUSH
8195: LD_INT 16
8197: PUSH
8198: LD_INT 17
8200: PUSH
8201: LD_INT 18
8203: PUSH
8204: LD_INT 19
8206: PUSH
8207: LD_INT 20
8209: PUSH
8210: LD_INT 21
8212: PUSH
8213: LD_INT 22
8215: PUSH
8216: LD_INT 23
8218: PUSH
8219: LD_INT 24
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 26
8227: PUSH
8228: LD_INT 27
8230: PUSH
8231: LD_INT 28
8233: PUSH
8234: LD_INT 29
8236: PUSH
8237: LD_INT 30
8239: PUSH
8240: LD_INT 31
8242: PUSH
8243: LD_INT 32
8245: PUSH
8246: LD_INT 33
8248: PUSH
8249: LD_INT 34
8251: PUSH
8252: LD_INT 36
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 101
8294: PUSH
8295: LD_INT 102
8297: PUSH
8298: LD_INT 103
8300: PUSH
8301: LD_INT 104
8303: PUSH
8304: LD_INT 105
8306: PUSH
8307: LD_INT 106
8309: PUSH
8310: LD_INT 107
8312: PUSH
8313: LD_INT 108
8315: PUSH
8316: LD_INT 109
8318: PUSH
8319: LD_INT 110
8321: PUSH
8322: LD_INT 111
8324: PUSH
8325: LD_INT 112
8327: PUSH
8328: LD_INT 113
8330: PUSH
8331: LD_INT 114
8333: PUSH
8334: LD_INT 116
8336: PUSH
8337: LD_INT 117
8339: PUSH
8340: LD_INT 118
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: ST_TO_ADDR
8366: GO 9141
8368: LD_INT 16
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8512
8376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8377: LD_ADDR_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 4
8387: PUSH
8388: LD_INT 5
8390: PUSH
8391: LD_INT 7
8393: PUSH
8394: LD_INT 11
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: LD_INT 15
8402: PUSH
8403: LD_INT 16
8405: PUSH
8406: LD_INT 20
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 22
8414: PUSH
8415: LD_INT 23
8417: PUSH
8418: LD_INT 25
8420: PUSH
8421: LD_INT 26
8423: PUSH
8424: LD_INT 30
8426: PUSH
8427: LD_INT 31
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: LD_INT 33
8435: PUSH
8436: LD_INT 34
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 101
8462: PUSH
8463: LD_INT 102
8465: PUSH
8466: LD_INT 103
8468: PUSH
8469: LD_INT 106
8471: PUSH
8472: LD_INT 108
8474: PUSH
8475: LD_INT 112
8477: PUSH
8478: LD_INT 113
8480: PUSH
8481: LD_INT 114
8483: PUSH
8484: LD_INT 116
8486: PUSH
8487: LD_INT 117
8489: PUSH
8490: LD_INT 118
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: ST_TO_ADDR
8510: GO 9141
8512: LD_INT 17
8514: DOUBLE
8515: EQUAL
8516: IFTRUE 8520
8518: GO 8744
8520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: LD_INT 4
8537: PUSH
8538: LD_INT 5
8540: PUSH
8541: LD_INT 6
8543: PUSH
8544: LD_INT 7
8546: PUSH
8547: LD_INT 8
8549: PUSH
8550: LD_INT 9
8552: PUSH
8553: LD_INT 10
8555: PUSH
8556: LD_INT 11
8558: PUSH
8559: LD_INT 12
8561: PUSH
8562: LD_INT 13
8564: PUSH
8565: LD_INT 14
8567: PUSH
8568: LD_INT 15
8570: PUSH
8571: LD_INT 16
8573: PUSH
8574: LD_INT 17
8576: PUSH
8577: LD_INT 18
8579: PUSH
8580: LD_INT 19
8582: PUSH
8583: LD_INT 20
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 23
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 26
8603: PUSH
8604: LD_INT 27
8606: PUSH
8607: LD_INT 28
8609: PUSH
8610: LD_INT 29
8612: PUSH
8613: LD_INT 30
8615: PUSH
8616: LD_INT 31
8618: PUSH
8619: LD_INT 32
8621: PUSH
8622: LD_INT 33
8624: PUSH
8625: LD_INT 34
8627: PUSH
8628: LD_INT 36
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 101
8670: PUSH
8671: LD_INT 102
8673: PUSH
8674: LD_INT 103
8676: PUSH
8677: LD_INT 104
8679: PUSH
8680: LD_INT 105
8682: PUSH
8683: LD_INT 106
8685: PUSH
8686: LD_INT 107
8688: PUSH
8689: LD_INT 108
8691: PUSH
8692: LD_INT 109
8694: PUSH
8695: LD_INT 110
8697: PUSH
8698: LD_INT 111
8700: PUSH
8701: LD_INT 112
8703: PUSH
8704: LD_INT 113
8706: PUSH
8707: LD_INT 114
8709: PUSH
8710: LD_INT 116
8712: PUSH
8713: LD_INT 117
8715: PUSH
8716: LD_INT 118
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: ST_TO_ADDR
8742: GO 9141
8744: LD_INT 18
8746: DOUBLE
8747: EQUAL
8748: IFTRUE 8752
8750: GO 8900
8752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8753: LD_ADDR_VAR 0 2
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: LD_INT 4
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 7
8769: PUSH
8770: LD_INT 11
8772: PUSH
8773: LD_INT 12
8775: PUSH
8776: LD_INT 15
8778: PUSH
8779: LD_INT 16
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 26
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 31
8805: PUSH
8806: LD_INT 32
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 34
8814: PUSH
8815: LD_INT 35
8817: PUSH
8818: LD_INT 36
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 101
8846: PUSH
8847: LD_INT 102
8849: PUSH
8850: LD_INT 103
8852: PUSH
8853: LD_INT 106
8855: PUSH
8856: LD_INT 108
8858: PUSH
8859: LD_INT 112
8861: PUSH
8862: LD_INT 113
8864: PUSH
8865: LD_INT 114
8867: PUSH
8868: LD_INT 115
8870: PUSH
8871: LD_INT 116
8873: PUSH
8874: LD_INT 117
8876: PUSH
8877: LD_INT 118
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: ST_TO_ADDR
8898: GO 9141
8900: LD_INT 19
8902: DOUBLE
8903: EQUAL
8904: IFTRUE 8908
8906: GO 9140
8908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: LD_INT 2
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 4
8925: PUSH
8926: LD_INT 5
8928: PUSH
8929: LD_INT 6
8931: PUSH
8932: LD_INT 7
8934: PUSH
8935: LD_INT 8
8937: PUSH
8938: LD_INT 9
8940: PUSH
8941: LD_INT 10
8943: PUSH
8944: LD_INT 11
8946: PUSH
8947: LD_INT 12
8949: PUSH
8950: LD_INT 13
8952: PUSH
8953: LD_INT 14
8955: PUSH
8956: LD_INT 15
8958: PUSH
8959: LD_INT 16
8961: PUSH
8962: LD_INT 17
8964: PUSH
8965: LD_INT 18
8967: PUSH
8968: LD_INT 19
8970: PUSH
8971: LD_INT 20
8973: PUSH
8974: LD_INT 21
8976: PUSH
8977: LD_INT 22
8979: PUSH
8980: LD_INT 23
8982: PUSH
8983: LD_INT 24
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 27
8994: PUSH
8995: LD_INT 28
8997: PUSH
8998: LD_INT 29
9000: PUSH
9001: LD_INT 30
9003: PUSH
9004: LD_INT 31
9006: PUSH
9007: LD_INT 32
9009: PUSH
9010: LD_INT 33
9012: PUSH
9013: LD_INT 34
9015: PUSH
9016: LD_INT 35
9018: PUSH
9019: LD_INT 36
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 101
9062: PUSH
9063: LD_INT 102
9065: PUSH
9066: LD_INT 103
9068: PUSH
9069: LD_INT 104
9071: PUSH
9072: LD_INT 105
9074: PUSH
9075: LD_INT 106
9077: PUSH
9078: LD_INT 107
9080: PUSH
9081: LD_INT 108
9083: PUSH
9084: LD_INT 109
9086: PUSH
9087: LD_INT 110
9089: PUSH
9090: LD_INT 111
9092: PUSH
9093: LD_INT 112
9095: PUSH
9096: LD_INT 113
9098: PUSH
9099: LD_INT 114
9101: PUSH
9102: LD_INT 115
9104: PUSH
9105: LD_INT 116
9107: PUSH
9108: LD_INT 117
9110: PUSH
9111: LD_INT 118
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: ST_TO_ADDR
9138: GO 9141
9140: POP
// end else
9141: GO 9372
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9143: LD_ADDR_VAR 0 2
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: LD_INT 2
9153: PUSH
9154: LD_INT 3
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: LD_INT 5
9162: PUSH
9163: LD_INT 6
9165: PUSH
9166: LD_INT 7
9168: PUSH
9169: LD_INT 8
9171: PUSH
9172: LD_INT 9
9174: PUSH
9175: LD_INT 10
9177: PUSH
9178: LD_INT 11
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: LD_INT 13
9186: PUSH
9187: LD_INT 14
9189: PUSH
9190: LD_INT 15
9192: PUSH
9193: LD_INT 16
9195: PUSH
9196: LD_INT 17
9198: PUSH
9199: LD_INT 18
9201: PUSH
9202: LD_INT 19
9204: PUSH
9205: LD_INT 20
9207: PUSH
9208: LD_INT 21
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 23
9216: PUSH
9217: LD_INT 24
9219: PUSH
9220: LD_INT 25
9222: PUSH
9223: LD_INT 26
9225: PUSH
9226: LD_INT 27
9228: PUSH
9229: LD_INT 28
9231: PUSH
9232: LD_INT 29
9234: PUSH
9235: LD_INT 30
9237: PUSH
9238: LD_INT 31
9240: PUSH
9241: LD_INT 32
9243: PUSH
9244: LD_INT 33
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 35
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 101
9296: PUSH
9297: LD_INT 102
9299: PUSH
9300: LD_INT 103
9302: PUSH
9303: LD_INT 104
9305: PUSH
9306: LD_INT 105
9308: PUSH
9309: LD_INT 106
9311: PUSH
9312: LD_INT 107
9314: PUSH
9315: LD_INT 108
9317: PUSH
9318: LD_INT 109
9320: PUSH
9321: LD_INT 110
9323: PUSH
9324: LD_INT 111
9326: PUSH
9327: LD_INT 112
9329: PUSH
9330: LD_INT 113
9332: PUSH
9333: LD_INT 114
9335: PUSH
9336: LD_INT 115
9338: PUSH
9339: LD_INT 116
9341: PUSH
9342: LD_INT 117
9344: PUSH
9345: LD_INT 118
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: ST_TO_ADDR
// if result then
9372: LD_VAR 0 2
9376: IFFALSE 10162
// begin normal :=  ;
9378: LD_ADDR_VAR 0 5
9382: PUSH
9383: LD_STRING 
9385: ST_TO_ADDR
// hardcore :=  ;
9386: LD_ADDR_VAR 0 6
9390: PUSH
9391: LD_STRING 
9393: ST_TO_ADDR
// active :=  ;
9394: LD_ADDR_VAR 0 7
9398: PUSH
9399: LD_STRING 
9401: ST_TO_ADDR
// for i = 1 to normalCounter do
9402: LD_ADDR_VAR 0 8
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_EXP 41
9416: PUSH
9417: FOR_TO
9418: IFFALSE 9519
// begin tmp := 0 ;
9420: LD_ADDR_VAR 0 3
9424: PUSH
9425: LD_STRING 0
9427: ST_TO_ADDR
// if result [ 1 ] then
9428: LD_VAR 0 2
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: IFFALSE 9501
// if result [ 1 ] [ 1 ] = i then
9438: LD_VAR 0 2
9442: PUSH
9443: LD_INT 1
9445: ARRAY
9446: PUSH
9447: LD_INT 1
9449: ARRAY
9450: PUSH
9451: LD_VAR 0 8
9455: EQUAL
9456: IFFALSE 9501
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9458: LD_ADDR_VAR 0 2
9462: PUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: CALL_OW 3
9487: PPUSH
9488: CALL_OW 1
9492: ST_TO_ADDR
// tmp := 1 ;
9493: LD_ADDR_VAR 0 3
9497: PUSH
9498: LD_STRING 1
9500: ST_TO_ADDR
// end ; normal := normal & tmp ;
9501: LD_ADDR_VAR 0 5
9505: PUSH
9506: LD_VAR 0 5
9510: PUSH
9511: LD_VAR 0 3
9515: STR
9516: ST_TO_ADDR
// end ;
9517: GO 9417
9519: POP
9520: POP
// for i = 1 to hardcoreCounter do
9521: LD_ADDR_VAR 0 8
9525: PUSH
9526: DOUBLE
9527: LD_INT 1
9529: DEC
9530: ST_TO_ADDR
9531: LD_EXP 42
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9642
// begin tmp := 0 ;
9539: LD_ADDR_VAR 0 3
9543: PUSH
9544: LD_STRING 0
9546: ST_TO_ADDR
// if result [ 2 ] then
9547: LD_VAR 0 2
9551: PUSH
9552: LD_INT 2
9554: ARRAY
9555: IFFALSE 9624
// if result [ 2 ] [ 1 ] = 100 + i then
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 2
9564: ARRAY
9565: PUSH
9566: LD_INT 1
9568: ARRAY
9569: PUSH
9570: LD_INT 100
9572: PUSH
9573: LD_VAR 0 8
9577: PLUS
9578: EQUAL
9579: IFFALSE 9624
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9581: LD_ADDR_VAR 0 2
9585: PUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: LD_INT 2
9593: PPUSH
9594: LD_VAR 0 2
9598: PUSH
9599: LD_INT 2
9601: ARRAY
9602: PPUSH
9603: LD_INT 1
9605: PPUSH
9606: CALL_OW 3
9610: PPUSH
9611: CALL_OW 1
9615: ST_TO_ADDR
// tmp := 1 ;
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: LD_STRING 1
9623: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9624: LD_ADDR_VAR 0 6
9628: PUSH
9629: LD_VAR 0 6
9633: PUSH
9634: LD_VAR 0 3
9638: STR
9639: ST_TO_ADDR
// end ;
9640: GO 9536
9642: POP
9643: POP
// if isGameLoad then
9644: LD_VAR 0 1
9648: IFFALSE 10123
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9650: LD_ADDR_VAR 0 4
9654: PUSH
9655: LD_EXP 45
9659: PUSH
9660: LD_EXP 44
9664: PUSH
9665: LD_EXP 46
9669: PUSH
9670: LD_EXP 43
9674: PUSH
9675: LD_EXP 47
9679: PUSH
9680: LD_EXP 48
9684: PUSH
9685: LD_EXP 49
9689: PUSH
9690: LD_EXP 50
9694: PUSH
9695: LD_EXP 51
9699: PUSH
9700: LD_EXP 52
9704: PUSH
9705: LD_EXP 53
9709: PUSH
9710: LD_EXP 54
9714: PUSH
9715: LD_EXP 55
9719: PUSH
9720: LD_EXP 56
9724: PUSH
9725: LD_EXP 64
9729: PUSH
9730: LD_EXP 65
9734: PUSH
9735: LD_EXP 66
9739: PUSH
9740: LD_EXP 67
9744: PUSH
9745: LD_EXP 69
9749: PUSH
9750: LD_EXP 70
9754: PUSH
9755: LD_EXP 71
9759: PUSH
9760: LD_EXP 74
9764: PUSH
9765: LD_EXP 76
9769: PUSH
9770: LD_EXP 77
9774: PUSH
9775: LD_EXP 78
9779: PUSH
9780: LD_EXP 80
9784: PUSH
9785: LD_EXP 81
9789: PUSH
9790: LD_EXP 84
9794: PUSH
9795: LD_EXP 85
9799: PUSH
9800: LD_EXP 86
9804: PUSH
9805: LD_EXP 87
9809: PUSH
9810: LD_EXP 88
9814: PUSH
9815: LD_EXP 89
9819: PUSH
9820: LD_EXP 90
9824: PUSH
9825: LD_EXP 91
9829: PUSH
9830: LD_EXP 92
9834: PUSH
9835: LD_EXP 57
9839: PUSH
9840: LD_EXP 58
9844: PUSH
9845: LD_EXP 61
9849: PUSH
9850: LD_EXP 62
9854: PUSH
9855: LD_EXP 63
9859: PUSH
9860: LD_EXP 59
9864: PUSH
9865: LD_EXP 60
9869: PUSH
9870: LD_EXP 68
9874: PUSH
9875: LD_EXP 72
9879: PUSH
9880: LD_EXP 73
9884: PUSH
9885: LD_EXP 75
9889: PUSH
9890: LD_EXP 79
9894: PUSH
9895: LD_EXP 82
9899: PUSH
9900: LD_EXP 83
9904: PUSH
9905: LD_EXP 93
9909: PUSH
9910: LD_EXP 94
9914: PUSH
9915: LD_EXP 95
9919: PUSH
9920: LD_EXP 96
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: ST_TO_ADDR
// tmp :=  ;
9981: LD_ADDR_VAR 0 3
9985: PUSH
9986: LD_STRING 
9988: ST_TO_ADDR
// for i = 1 to normalCounter do
9989: LD_ADDR_VAR 0 8
9993: PUSH
9994: DOUBLE
9995: LD_INT 1
9997: DEC
9998: ST_TO_ADDR
9999: LD_EXP 41
10003: PUSH
10004: FOR_TO
10005: IFFALSE 10041
// begin if flags [ i ] then
10007: LD_VAR 0 4
10011: PUSH
10012: LD_VAR 0 8
10016: ARRAY
10017: IFFALSE 10039
// tmp := tmp & i & ; ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_VAR 0 3
10028: PUSH
10029: LD_VAR 0 8
10033: STR
10034: PUSH
10035: LD_STRING ;
10037: STR
10038: ST_TO_ADDR
// end ;
10039: GO 10004
10041: POP
10042: POP
// for i = 1 to hardcoreCounter do
10043: LD_ADDR_VAR 0 8
10047: PUSH
10048: DOUBLE
10049: LD_INT 1
10051: DEC
10052: ST_TO_ADDR
10053: LD_EXP 42
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10105
// begin if flags [ normalCounter + i ] then
10061: LD_VAR 0 4
10065: PUSH
10066: LD_EXP 41
10070: PUSH
10071: LD_VAR 0 8
10075: PLUS
10076: ARRAY
10077: IFFALSE 10103
// tmp := tmp & ( 100 + i ) & ; ;
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_VAR 0 3
10088: PUSH
10089: LD_INT 100
10091: PUSH
10092: LD_VAR 0 8
10096: PLUS
10097: STR
10098: PUSH
10099: LD_STRING ;
10101: STR
10102: ST_TO_ADDR
// end ;
10103: GO 10058
10105: POP
10106: POP
// if tmp then
10107: LD_VAR 0 3
10111: IFFALSE 10123
// active := tmp ;
10113: LD_ADDR_VAR 0 7
10117: PUSH
10118: LD_VAR 0 3
10122: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10123: LD_STRING getStreamItemsFromMission("
10125: PUSH
10126: LD_VAR 0 5
10130: STR
10131: PUSH
10132: LD_STRING ","
10134: STR
10135: PUSH
10136: LD_VAR 0 6
10140: STR
10141: PUSH
10142: LD_STRING ","
10144: STR
10145: PUSH
10146: LD_VAR 0 7
10150: STR
10151: PUSH
10152: LD_STRING ")
10154: STR
10155: PPUSH
10156: CALL_OW 559
// end else
10160: GO 10169
// ToLua ( getStreamItemsFromMission("","","") ) ;
10162: LD_STRING getStreamItemsFromMission("","","")
10164: PPUSH
10165: CALL_OW 559
// end ;
10169: LD_VAR 0 2
10173: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10174: LD_EXP 40
10178: PUSH
10179: LD_EXP 45
10183: AND
10184: IFFALSE 10308
10186: GO 10188
10188: DISABLE
10189: LD_INT 0
10191: PPUSH
10192: PPUSH
// begin enable ;
10193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10194: LD_ADDR_VAR 0 2
10198: PUSH
10199: LD_INT 22
10201: PUSH
10202: LD_OWVAR 2
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: LD_INT 34
10216: PUSH
10217: LD_INT 7
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 45
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 28
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 47
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: ST_TO_ADDR
// if not tmp then
10270: LD_VAR 0 2
10274: NOT
10275: IFFALSE 10279
// exit ;
10277: GO 10308
// for i in tmp do
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_VAR 0 2
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10306
// begin SetLives ( i , 0 ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_INT 0
10299: PPUSH
10300: CALL_OW 234
// end ;
10304: GO 10289
10306: POP
10307: POP
// end ;
10308: PPOPN 2
10310: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10311: LD_EXP 40
10315: PUSH
10316: LD_EXP 46
10320: AND
10321: IFFALSE 10405
10323: GO 10325
10325: DISABLE
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// begin enable ;
10330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10331: LD_ADDR_VAR 0 2
10335: PUSH
10336: LD_INT 22
10338: PUSH
10339: LD_OWVAR 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 32
10350: PUSH
10351: LD_INT 3
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 69
10366: ST_TO_ADDR
// if not tmp then
10367: LD_VAR 0 2
10371: NOT
10372: IFFALSE 10376
// exit ;
10374: GO 10405
// for i in tmp do
10376: LD_ADDR_VAR 0 1
10380: PUSH
10381: LD_VAR 0 2
10385: PUSH
10386: FOR_IN
10387: IFFALSE 10403
// begin SetLives ( i , 0 ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_INT 0
10396: PPUSH
10397: CALL_OW 234
// end ;
10401: GO 10386
10403: POP
10404: POP
// end ;
10405: PPOPN 2
10407: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10408: LD_EXP 40
10412: PUSH
10413: LD_EXP 43
10417: AND
10418: IFFALSE 10511
10420: GO 10422
10422: DISABLE
10423: LD_INT 0
10425: PPUSH
// begin enable ;
10426: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10427: LD_ADDR_VAR 0 1
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_OWVAR 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 5
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 25
10459: PUSH
10460: LD_INT 9
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 25
10469: PUSH
10470: LD_INT 8
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: PUSH
10492: FOR_IN
10493: IFFALSE 10509
// begin SetClass ( i , 1 ) ;
10495: LD_VAR 0 1
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 336
// end ;
10507: GO 10492
10509: POP
10510: POP
// end ;
10511: PPOPN 1
10513: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10514: LD_EXP 40
10518: PUSH
10519: LD_EXP 44
10523: AND
10524: PUSH
10525: LD_OWVAR 65
10529: PUSH
10530: LD_INT 7
10532: LESS
10533: AND
10534: IFFALSE 10548
10536: GO 10538
10538: DISABLE
// begin enable ;
10539: ENABLE
// game_speed := 7 ;
10540: LD_ADDR_OWVAR 65
10544: PUSH
10545: LD_INT 7
10547: ST_TO_ADDR
// end ;
10548: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10549: LD_EXP 40
10553: PUSH
10554: LD_EXP 47
10558: AND
10559: IFFALSE 10761
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_INT 81
10576: PUSH
10577: LD_OWVAR 2
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 69
10604: ST_TO_ADDR
// if not tmp then
10605: LD_VAR 0 3
10609: NOT
10610: IFFALSE 10614
// exit ;
10612: GO 10761
// if tmp > 5 then
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 5
10621: GREATER
10622: IFFALSE 10634
// k := 5 else
10624: LD_ADDR_VAR 0 2
10628: PUSH
10629: LD_INT 5
10631: ST_TO_ADDR
10632: GO 10644
// k := tmp ;
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: LD_VAR 0 3
10643: ST_TO_ADDR
// for i := 1 to k do
10644: LD_ADDR_VAR 0 1
10648: PUSH
10649: DOUBLE
10650: LD_INT 1
10652: DEC
10653: ST_TO_ADDR
10654: LD_VAR 0 2
10658: PUSH
10659: FOR_TO
10660: IFFALSE 10759
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10662: LD_VAR 0 3
10666: PUSH
10667: LD_VAR 0 1
10671: ARRAY
10672: PPUSH
10673: LD_VAR 0 1
10677: PUSH
10678: LD_INT 4
10680: MOD
10681: PUSH
10682: LD_INT 1
10684: PLUS
10685: PPUSH
10686: CALL_OW 259
10690: PUSH
10691: LD_INT 10
10693: LESS
10694: IFFALSE 10757
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10696: LD_VAR 0 3
10700: PUSH
10701: LD_VAR 0 1
10705: ARRAY
10706: PPUSH
10707: LD_VAR 0 1
10711: PUSH
10712: LD_INT 4
10714: MOD
10715: PUSH
10716: LD_INT 1
10718: PLUS
10719: PPUSH
10720: LD_VAR 0 3
10724: PUSH
10725: LD_VAR 0 1
10729: ARRAY
10730: PPUSH
10731: LD_VAR 0 1
10735: PUSH
10736: LD_INT 4
10738: MOD
10739: PUSH
10740: LD_INT 1
10742: PLUS
10743: PPUSH
10744: CALL_OW 259
10748: PUSH
10749: LD_INT 1
10751: PLUS
10752: PPUSH
10753: CALL_OW 237
10757: GO 10659
10759: POP
10760: POP
// end ;
10761: PPOPN 3
10763: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10764: LD_EXP 40
10768: PUSH
10769: LD_EXP 48
10773: AND
10774: IFFALSE 10794
10776: GO 10778
10778: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10779: LD_INT 4
10781: PPUSH
10782: LD_OWVAR 2
10786: PPUSH
10787: LD_INT 0
10789: PPUSH
10790: CALL_OW 324
10794: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 77
10804: AND
10805: IFFALSE 10825
10807: GO 10809
10809: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10810: LD_INT 19
10812: PPUSH
10813: LD_OWVAR 2
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 324
10825: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10826: LD_EXP 40
10830: PUSH
10831: LD_EXP 49
10835: AND
10836: IFFALSE 10938
10838: GO 10840
10840: DISABLE
10841: LD_INT 0
10843: PPUSH
10844: PPUSH
// begin enable ;
10845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_INT 22
10853: PUSH
10854: LD_OWVAR 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 2
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 11
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 34
10878: PUSH
10879: LD_INT 30
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: ST_TO_ADDR
// if not tmp then
10900: LD_VAR 0 2
10904: NOT
10905: IFFALSE 10909
// exit ;
10907: GO 10938
// for i in tmp do
10909: LD_ADDR_VAR 0 1
10913: PUSH
10914: LD_VAR 0 2
10918: PUSH
10919: FOR_IN
10920: IFFALSE 10936
// begin SetLives ( i , 0 ) ;
10922: LD_VAR 0 1
10926: PPUSH
10927: LD_INT 0
10929: PPUSH
10930: CALL_OW 234
// end ;
10934: GO 10919
10936: POP
10937: POP
// end ;
10938: PPOPN 2
10940: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10941: LD_EXP 40
10945: PUSH
10946: LD_EXP 50
10950: AND
10951: IFFALSE 10971
10953: GO 10955
10955: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10956: LD_INT 32
10958: PPUSH
10959: LD_OWVAR 2
10963: PPUSH
10964: LD_INT 0
10966: PPUSH
10967: CALL_OW 324
10971: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10972: LD_EXP 40
10976: PUSH
10977: LD_EXP 51
10981: AND
10982: IFFALSE 11163
10984: GO 10986
10986: DISABLE
10987: LD_INT 0
10989: PPUSH
10990: PPUSH
10991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: LD_INT 22
10999: PUSH
11000: LD_OWVAR 2
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 33
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: ST_TO_ADDR
// if not tmp then
11028: LD_VAR 0 2
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11163
// side := 0 ;
11037: LD_ADDR_VAR 0 3
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// for i := 1 to 8 do
11045: LD_ADDR_VAR 0 1
11049: PUSH
11050: DOUBLE
11051: LD_INT 1
11053: DEC
11054: ST_TO_ADDR
11055: LD_INT 8
11057: PUSH
11058: FOR_TO
11059: IFFALSE 11107
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11061: LD_OWVAR 2
11065: PUSH
11066: LD_VAR 0 1
11070: NONEQUAL
11071: PUSH
11072: LD_OWVAR 2
11076: PPUSH
11077: LD_VAR 0 1
11081: PPUSH
11082: CALL_OW 81
11086: PUSH
11087: LD_INT 2
11089: EQUAL
11090: AND
11091: IFFALSE 11105
// begin side := i ;
11093: LD_ADDR_VAR 0 3
11097: PUSH
11098: LD_VAR 0 1
11102: ST_TO_ADDR
// break ;
11103: GO 11107
// end ;
11105: GO 11058
11107: POP
11108: POP
// if not side then
11109: LD_VAR 0 3
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11163
// for i := 1 to tmp do
11118: LD_ADDR_VAR 0 1
11122: PUSH
11123: DOUBLE
11124: LD_INT 1
11126: DEC
11127: ST_TO_ADDR
11128: LD_VAR 0 2
11132: PUSH
11133: FOR_TO
11134: IFFALSE 11161
// if Prob ( 60 ) then
11136: LD_INT 60
11138: PPUSH
11139: CALL_OW 13
11143: IFFALSE 11159
// SetSide ( i , side ) ;
11145: LD_VAR 0 1
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: CALL_OW 235
11159: GO 11133
11161: POP
11162: POP
// end ;
11163: PPOPN 3
11165: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11166: LD_EXP 40
11170: PUSH
11171: LD_EXP 53
11175: AND
11176: IFFALSE 11295
11178: GO 11180
11180: DISABLE
11181: LD_INT 0
11183: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11184: LD_ADDR_VAR 0 1
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_OWVAR 2
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 21
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 3
11213: PUSH
11214: LD_INT 23
11216: PUSH
11217: LD_INT 0
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 69
11237: PUSH
11238: FOR_IN
11239: IFFALSE 11293
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11241: LD_VAR 0 1
11245: PPUSH
11246: CALL_OW 257
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: IN
11269: IFFALSE 11291
// SetClass ( un , rand ( 1 , 4 ) ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: LD_INT 4
11281: PPUSH
11282: CALL_OW 12
11286: PPUSH
11287: CALL_OW 336
11291: GO 11238
11293: POP
11294: POP
// end ;
11295: PPOPN 1
11297: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11298: LD_EXP 40
11302: PUSH
11303: LD_EXP 52
11307: AND
11308: IFFALSE 11387
11310: GO 11312
11312: DISABLE
11313: LD_INT 0
11315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11316: LD_ADDR_VAR 0 1
11320: PUSH
11321: LD_INT 22
11323: PUSH
11324: LD_OWVAR 2
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 21
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// if not tmp then
11352: LD_VAR 0 1
11356: NOT
11357: IFFALSE 11361
// exit ;
11359: GO 11387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11361: LD_VAR 0 1
11365: PUSH
11366: LD_INT 1
11368: PPUSH
11369: LD_VAR 0 1
11373: PPUSH
11374: CALL_OW 12
11378: ARRAY
11379: PPUSH
11380: LD_INT 100
11382: PPUSH
11383: CALL_OW 234
// end ;
11387: PPOPN 1
11389: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11390: LD_EXP 40
11394: PUSH
11395: LD_EXP 54
11399: AND
11400: IFFALSE 11498
11402: GO 11404
11404: DISABLE
11405: LD_INT 0
11407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11408: LD_ADDR_VAR 0 1
11412: PUSH
11413: LD_INT 22
11415: PUSH
11416: LD_OWVAR 2
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 69
11443: ST_TO_ADDR
// if not tmp then
11444: LD_VAR 0 1
11448: NOT
11449: IFFALSE 11453
// exit ;
11451: GO 11498
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11453: LD_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 12
11470: ARRAY
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: LD_INT 4
11477: PPUSH
11478: CALL_OW 12
11482: PPUSH
11483: LD_INT 3000
11485: PPUSH
11486: LD_INT 9000
11488: PPUSH
11489: CALL_OW 12
11493: PPUSH
11494: CALL_OW 492
// end ;
11498: PPOPN 1
11500: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11501: LD_EXP 40
11505: PUSH
11506: LD_EXP 55
11510: AND
11511: IFFALSE 11531
11513: GO 11515
11515: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11516: LD_INT 1
11518: PPUSH
11519: LD_OWVAR 2
11523: PPUSH
11524: LD_INT 0
11526: PPUSH
11527: CALL_OW 324
11531: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11532: LD_EXP 40
11536: PUSH
11537: LD_EXP 56
11541: AND
11542: IFFALSE 11625
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11551: LD_ADDR_VAR 0 2
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_OWVAR 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 21
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: ST_TO_ADDR
// if not tmp then
11587: LD_VAR 0 2
11591: NOT
11592: IFFALSE 11596
// exit ;
11594: GO 11625
// for i in tmp do
11596: LD_ADDR_VAR 0 1
11600: PUSH
11601: LD_VAR 0 2
11605: PUSH
11606: FOR_IN
11607: IFFALSE 11623
// SetBLevel ( i , 10 ) ;
11609: LD_VAR 0 1
11613: PPUSH
11614: LD_INT 10
11616: PPUSH
11617: CALL_OW 241
11621: GO 11606
11623: POP
11624: POP
// end ;
11625: PPOPN 2
11627: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11628: LD_EXP 40
11632: PUSH
11633: LD_EXP 57
11637: AND
11638: IFFALSE 11749
11640: GO 11642
11642: DISABLE
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
11647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11648: LD_ADDR_VAR 0 3
11652: PUSH
11653: LD_INT 22
11655: PUSH
11656: LD_OWVAR 2
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 25
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 69
11683: ST_TO_ADDR
// if not tmp then
11684: LD_VAR 0 3
11688: NOT
11689: IFFALSE 11693
// exit ;
11691: GO 11749
// un := tmp [ rand ( 1 , tmp ) ] ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_VAR 0 3
11702: PUSH
11703: LD_INT 1
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: CALL_OW 12
11715: ARRAY
11716: ST_TO_ADDR
// if Crawls ( un ) then
11717: LD_VAR 0 2
11721: PPUSH
11722: CALL_OW 318
11726: IFFALSE 11737
// ComWalk ( un ) ;
11728: LD_VAR 0 2
11732: PPUSH
11733: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_INT 5
11744: PPUSH
11745: CALL_OW 336
// end ;
11749: PPOPN 3
11751: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11752: LD_EXP 40
11756: PUSH
11757: LD_EXP 58
11761: AND
11762: PUSH
11763: LD_OWVAR 67
11767: PUSH
11768: LD_INT 4
11770: LESS
11771: AND
11772: IFFALSE 11791
11774: GO 11776
11776: DISABLE
// begin Difficulty := Difficulty + 1 ;
11777: LD_ADDR_OWVAR 67
11781: PUSH
11782: LD_OWVAR 67
11786: PUSH
11787: LD_INT 1
11789: PLUS
11790: ST_TO_ADDR
// end ;
11791: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11792: LD_EXP 40
11796: PUSH
11797: LD_EXP 59
11801: AND
11802: IFFALSE 11905
11804: GO 11806
11806: DISABLE
11807: LD_INT 0
11809: PPUSH
// begin for i := 1 to 5 do
11810: LD_ADDR_VAR 0 1
11814: PUSH
11815: DOUBLE
11816: LD_INT 1
11818: DEC
11819: ST_TO_ADDR
11820: LD_INT 5
11822: PUSH
11823: FOR_TO
11824: IFFALSE 11903
// begin uc_nation := nation_nature ;
11826: LD_ADDR_OWVAR 21
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// uc_side := 0 ;
11834: LD_ADDR_OWVAR 20
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11842: LD_ADDR_OWVAR 29
11846: PUSH
11847: LD_INT 12
11849: PUSH
11850: LD_INT 12
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: ST_TO_ADDR
// hc_agressivity := 20 ;
11857: LD_ADDR_OWVAR 35
11861: PUSH
11862: LD_INT 20
11864: ST_TO_ADDR
// hc_class := class_tiger ;
11865: LD_ADDR_OWVAR 28
11869: PUSH
11870: LD_INT 14
11872: ST_TO_ADDR
// hc_gallery :=  ;
11873: LD_ADDR_OWVAR 33
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// hc_name :=  ;
11881: LD_ADDR_OWVAR 26
11885: PUSH
11886: LD_STRING 
11888: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11889: CALL_OW 44
11893: PPUSH
11894: LD_INT 0
11896: PPUSH
11897: CALL_OW 51
// end ;
11901: GO 11823
11903: POP
11904: POP
// end ;
11905: PPOPN 1
11907: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11908: LD_EXP 40
11912: PUSH
11913: LD_EXP 60
11917: AND
11918: IFFALSE 11927
11920: GO 11922
11922: DISABLE
// StreamSibBomb ;
11923: CALL 11928 0 0
11927: END
// export function StreamSibBomb ; var i , x , y ; begin
11928: LD_INT 0
11930: PPUSH
11931: PPUSH
11932: PPUSH
11933: PPUSH
// result := false ;
11934: LD_ADDR_VAR 0 1
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// for i := 1 to 16 do
11942: LD_ADDR_VAR 0 2
11946: PUSH
11947: DOUBLE
11948: LD_INT 1
11950: DEC
11951: ST_TO_ADDR
11952: LD_INT 16
11954: PUSH
11955: FOR_TO
11956: IFFALSE 12155
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 10
11965: PUSH
11966: LD_INT 20
11968: PUSH
11969: LD_INT 30
11971: PUSH
11972: LD_INT 40
11974: PUSH
11975: LD_INT 50
11977: PUSH
11978: LD_INT 60
11980: PUSH
11981: LD_INT 70
11983: PUSH
11984: LD_INT 80
11986: PUSH
11987: LD_INT 90
11989: PUSH
11990: LD_INT 100
11992: PUSH
11993: LD_INT 110
11995: PUSH
11996: LD_INT 120
11998: PUSH
11999: LD_INT 130
12001: PUSH
12002: LD_INT 140
12004: PUSH
12005: LD_INT 150
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 1
12027: PPUSH
12028: LD_INT 15
12030: PPUSH
12031: CALL_OW 12
12035: ARRAY
12036: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12037: LD_ADDR_VAR 0 4
12041: PUSH
12042: LD_INT 10
12044: PUSH
12045: LD_INT 20
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 40
12053: PUSH
12054: LD_INT 50
12056: PUSH
12057: LD_INT 60
12059: PUSH
12060: LD_INT 70
12062: PUSH
12063: LD_INT 80
12065: PUSH
12066: LD_INT 90
12068: PUSH
12069: LD_INT 100
12071: PUSH
12072: LD_INT 110
12074: PUSH
12075: LD_INT 120
12077: PUSH
12078: LD_INT 130
12080: PUSH
12081: LD_INT 140
12083: PUSH
12084: LD_INT 150
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 1
12106: PPUSH
12107: LD_INT 15
12109: PPUSH
12110: CALL_OW 12
12114: ARRAY
12115: ST_TO_ADDR
// if ValidHex ( x , y ) then
12116: LD_VAR 0 3
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: CALL_OW 488
12130: IFFALSE 12153
// begin result := [ x , y ] ;
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: LD_VAR 0 4
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: ST_TO_ADDR
// break ;
12151: GO 12155
// end ; end ;
12153: GO 11955
12155: POP
12156: POP
// if result then
12157: LD_VAR 0 1
12161: IFFALSE 12221
// begin ToLua ( playSibBomb() ) ;
12163: LD_STRING playSibBomb()
12165: PPUSH
12166: CALL_OW 559
// wait ( 0 0$14 ) ;
12170: LD_INT 490
12172: PPUSH
12173: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12177: LD_VAR 0 1
12181: PUSH
12182: LD_INT 1
12184: ARRAY
12185: PPUSH
12186: LD_VAR 0 1
12190: PUSH
12191: LD_INT 2
12193: ARRAY
12194: PPUSH
12195: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12199: LD_VAR 0 1
12203: PUSH
12204: LD_INT 1
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 2
12215: ARRAY
12216: PPUSH
12217: CALL_OW 429
// end ; end ;
12221: LD_VAR 0 1
12225: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12226: LD_EXP 40
12230: PUSH
12231: LD_EXP 62
12235: AND
12236: IFFALSE 12248
12238: GO 12240
12240: DISABLE
// YouLost (  ) ;
12241: LD_STRING 
12243: PPUSH
12244: CALL_OW 104
12248: END
// every 0 0$1 trigger StreamModeActive and sFog do
12249: LD_EXP 40
12253: PUSH
12254: LD_EXP 61
12258: AND
12259: IFFALSE 12273
12261: GO 12263
12263: DISABLE
// FogOff ( your_side ) ;
12264: LD_OWVAR 2
12268: PPUSH
12269: CALL_OW 344
12273: END
// every 0 0$1 trigger StreamModeActive and sSun do
12274: LD_EXP 40
12278: PUSH
12279: LD_EXP 63
12283: AND
12284: IFFALSE 12312
12286: GO 12288
12288: DISABLE
// begin solar_recharge_percent := 0 ;
12289: LD_ADDR_OWVAR 79
12293: PUSH
12294: LD_INT 0
12296: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12297: LD_INT 10500
12299: PPUSH
12300: CALL_OW 67
// solar_recharge_percent := 100 ;
12304: LD_ADDR_OWVAR 79
12308: PUSH
12309: LD_INT 100
12311: ST_TO_ADDR
// end ;
12312: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12313: LD_EXP 40
12317: PUSH
12318: LD_EXP 64
12322: AND
12323: IFFALSE 12562
12325: GO 12327
12327: DISABLE
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
// begin tmp := [ ] ;
12333: LD_ADDR_VAR 0 3
12337: PUSH
12338: EMPTY
12339: ST_TO_ADDR
// for i := 1 to 6 do
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: DOUBLE
12346: LD_INT 1
12348: DEC
12349: ST_TO_ADDR
12350: LD_INT 6
12352: PUSH
12353: FOR_TO
12354: IFFALSE 12459
// begin uc_nation := nation_nature ;
12356: LD_ADDR_OWVAR 21
12360: PUSH
12361: LD_INT 0
12363: ST_TO_ADDR
// uc_side := 0 ;
12364: LD_ADDR_OWVAR 20
12368: PUSH
12369: LD_INT 0
12371: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12372: LD_ADDR_OWVAR 29
12376: PUSH
12377: LD_INT 12
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: ST_TO_ADDR
// hc_agressivity := 20 ;
12387: LD_ADDR_OWVAR 35
12391: PUSH
12392: LD_INT 20
12394: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12395: LD_ADDR_OWVAR 28
12399: PUSH
12400: LD_INT 17
12402: ST_TO_ADDR
// hc_gallery :=  ;
12403: LD_ADDR_OWVAR 33
12407: PUSH
12408: LD_STRING 
12410: ST_TO_ADDR
// hc_name :=  ;
12411: LD_ADDR_OWVAR 26
12415: PUSH
12416: LD_STRING 
12418: ST_TO_ADDR
// un := CreateHuman ;
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: CALL_OW 44
12428: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12429: LD_VAR 0 2
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 51
// tmp := tmp ^ un ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_VAR 0 3
12450: PUSH
12451: LD_VAR 0 2
12455: ADD
12456: ST_TO_ADDR
// end ;
12457: GO 12353
12459: POP
12460: POP
// repeat wait ( 0 0$1 ) ;
12461: LD_INT 35
12463: PPUSH
12464: CALL_OW 67
// for un in tmp do
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_VAR 0 3
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12553
// begin if IsDead ( un ) then
12481: LD_VAR 0 2
12485: PPUSH
12486: CALL_OW 301
12490: IFFALSE 12510
// begin tmp := tmp diff un ;
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_VAR 0 3
12501: PUSH
12502: LD_VAR 0 2
12506: DIFF
12507: ST_TO_ADDR
// continue ;
12508: GO 12478
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12510: LD_VAR 0 2
12514: PPUSH
12515: LD_INT 3
12517: PUSH
12518: LD_INT 22
12520: PUSH
12521: LD_INT 0
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: PPUSH
12537: LD_VAR 0 2
12541: PPUSH
12542: CALL_OW 74
12546: PPUSH
12547: CALL_OW 115
// end ;
12551: GO 12478
12553: POP
12554: POP
// until not tmp ;
12555: LD_VAR 0 3
12559: NOT
12560: IFFALSE 12461
// end ;
12562: PPOPN 3
12564: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12565: LD_EXP 40
12569: PUSH
12570: LD_EXP 65
12574: AND
12575: IFFALSE 12629
12577: GO 12579
12579: DISABLE
// begin ToLua ( displayTroll(); ) ;
12580: LD_STRING displayTroll();
12582: PPUSH
12583: CALL_OW 559
// wait ( 3 3$00 ) ;
12587: LD_INT 6300
12589: PPUSH
12590: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12594: LD_STRING hideTroll();
12596: PPUSH
12597: CALL_OW 559
// wait ( 1 1$00 ) ;
12601: LD_INT 2100
12603: PPUSH
12604: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12608: LD_STRING displayTroll();
12610: PPUSH
12611: CALL_OW 559
// wait ( 1 1$00 ) ;
12615: LD_INT 2100
12617: PPUSH
12618: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12622: LD_STRING hideTroll();
12624: PPUSH
12625: CALL_OW 559
// end ;
12629: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12630: LD_EXP 40
12634: PUSH
12635: LD_EXP 66
12639: AND
12640: IFFALSE 12703
12642: GO 12644
12644: DISABLE
12645: LD_INT 0
12647: PPUSH
// begin p := 0 ;
12648: LD_ADDR_VAR 0 1
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// repeat game_speed := 1 ;
12656: LD_ADDR_OWVAR 65
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12664: LD_INT 35
12666: PPUSH
12667: CALL_OW 67
// p := p + 1 ;
12671: LD_ADDR_VAR 0 1
12675: PUSH
12676: LD_VAR 0 1
12680: PUSH
12681: LD_INT 1
12683: PLUS
12684: ST_TO_ADDR
// until p >= 60 ;
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 60
12692: GREATEREQUAL
12693: IFFALSE 12656
// game_speed := 4 ;
12695: LD_ADDR_OWVAR 65
12699: PUSH
12700: LD_INT 4
12702: ST_TO_ADDR
// end ;
12703: PPOPN 1
12705: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12706: LD_EXP 40
12710: PUSH
12711: LD_EXP 67
12715: AND
12716: IFFALSE 12862
12718: GO 12720
12720: DISABLE
12721: LD_INT 0
12723: PPUSH
12724: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_OWVAR 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 0
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 30
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: ST_TO_ADDR
// if not depot then
12779: LD_VAR 0 1
12783: NOT
12784: IFFALSE 12788
// exit ;
12786: GO 12862
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12788: LD_ADDR_VAR 0 2
12792: PUSH
12793: LD_VAR 0 1
12797: PUSH
12798: LD_INT 1
12800: PPUSH
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 12
12810: ARRAY
12811: PPUSH
12812: CALL_OW 274
12816: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12817: LD_VAR 0 2
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: LD_INT 0
12827: PPUSH
12828: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12832: LD_VAR 0 2
12836: PPUSH
12837: LD_INT 2
12839: PPUSH
12840: LD_INT 0
12842: PPUSH
12843: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_INT 3
12854: PPUSH
12855: LD_INT 0
12857: PPUSH
12858: CALL_OW 277
// end ;
12862: PPOPN 2
12864: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12865: LD_EXP 40
12869: PUSH
12870: LD_EXP 68
12874: AND
12875: IFFALSE 12972
12877: GO 12879
12879: DISABLE
12880: LD_INT 0
12882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12883: LD_ADDR_VAR 0 1
12887: PUSH
12888: LD_INT 22
12890: PUSH
12891: LD_OWVAR 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 21
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 23
12915: PUSH
12916: LD_INT 0
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 69
12936: ST_TO_ADDR
// if not tmp then
12937: LD_VAR 0 1
12941: NOT
12942: IFFALSE 12946
// exit ;
12944: GO 12972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_VAR 0 1
12958: PPUSH
12959: CALL_OW 12
12963: ARRAY
12964: PPUSH
12965: LD_INT 200
12967: PPUSH
12968: CALL_OW 234
// end ;
12972: PPOPN 1
12974: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12975: LD_EXP 40
12979: PUSH
12980: LD_EXP 69
12984: AND
12985: IFFALSE 13064
12987: GO 12989
12989: DISABLE
12990: LD_INT 0
12992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_OWVAR 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 21
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: ST_TO_ADDR
// if not tmp then
13029: LD_VAR 0 1
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13038: LD_VAR 0 1
13042: PUSH
13043: LD_INT 1
13045: PPUSH
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 12
13055: ARRAY
13056: PPUSH
13057: LD_INT 60
13059: PPUSH
13060: CALL_OW 234
// end ;
13064: PPOPN 1
13066: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13067: LD_EXP 40
13071: PUSH
13072: LD_EXP 70
13076: AND
13077: IFFALSE 13176
13079: GO 13081
13081: DISABLE
13082: LD_INT 0
13084: PPUSH
13085: PPUSH
// begin enable ;
13086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_OWVAR 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 61
13106: PUSH
13107: EMPTY
13108: LIST
13109: PUSH
13110: LD_INT 33
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: ST_TO_ADDR
// if not tmp then
13130: LD_VAR 0 1
13134: NOT
13135: IFFALSE 13139
// exit ;
13137: GO 13176
// for i in tmp do
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_VAR 0 1
13148: PUSH
13149: FOR_IN
13150: IFFALSE 13174
// if IsControledBy ( i ) then
13152: LD_VAR 0 2
13156: PPUSH
13157: CALL_OW 312
13161: IFFALSE 13172
// ComUnlink ( i ) ;
13163: LD_VAR 0 2
13167: PPUSH
13168: CALL_OW 136
13172: GO 13149
13174: POP
13175: POP
// end ;
13176: PPOPN 2
13178: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13179: LD_EXP 40
13183: PUSH
13184: LD_EXP 71
13188: AND
13189: IFFALSE 13329
13191: GO 13193
13193: DISABLE
13194: LD_INT 0
13196: PPUSH
13197: PPUSH
// begin ToLua ( displayPowell(); ) ;
13198: LD_STRING displayPowell();
13200: PPUSH
13201: CALL_OW 559
// uc_side := 0 ;
13205: LD_ADDR_OWVAR 20
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// uc_nation := 2 ;
13213: LD_ADDR_OWVAR 21
13217: PUSH
13218: LD_INT 2
13220: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13221: LD_ADDR_OWVAR 37
13225: PUSH
13226: LD_INT 14
13228: ST_TO_ADDR
// vc_engine := engine_siberite ;
13229: LD_ADDR_OWVAR 39
13233: PUSH
13234: LD_INT 3
13236: ST_TO_ADDR
// vc_control := control_apeman ;
13237: LD_ADDR_OWVAR 38
13241: PUSH
13242: LD_INT 5
13244: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13245: LD_ADDR_OWVAR 40
13249: PUSH
13250: LD_INT 29
13252: ST_TO_ADDR
// un := CreateVehicle ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: CALL_OW 45
13262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13263: LD_VAR 0 2
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13275: LD_INT 35
13277: PPUSH
13278: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13282: LD_VAR 0 2
13286: PPUSH
13287: LD_INT 22
13289: PUSH
13290: LD_OWVAR 2
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 69
13303: PPUSH
13304: LD_VAR 0 2
13308: PPUSH
13309: CALL_OW 74
13313: PPUSH
13314: CALL_OW 115
// until IsDead ( un ) ;
13318: LD_VAR 0 2
13322: PPUSH
13323: CALL_OW 301
13327: IFFALSE 13275
// end ;
13329: PPOPN 2
13331: END
// every 0 0$1 trigger StreamModeActive and sStu do
13332: LD_EXP 40
13336: PUSH
13337: LD_EXP 79
13341: AND
13342: IFFALSE 13358
13344: GO 13346
13346: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13347: LD_STRING displayStucuk();
13349: PPUSH
13350: CALL_OW 559
// ResetFog ;
13354: CALL_OW 335
// end ;
13358: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13359: LD_EXP 40
13363: PUSH
13364: LD_EXP 72
13368: AND
13369: IFFALSE 13510
13371: GO 13373
13373: DISABLE
13374: LD_INT 0
13376: PPUSH
13377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_OWVAR 2
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 21
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: ST_TO_ADDR
// if not tmp then
13414: LD_VAR 0 2
13418: NOT
13419: IFFALSE 13423
// exit ;
13421: GO 13510
// un := tmp [ rand ( 1 , tmp ) ] ;
13423: LD_ADDR_VAR 0 1
13427: PUSH
13428: LD_VAR 0 2
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_VAR 0 2
13440: PPUSH
13441: CALL_OW 12
13445: ARRAY
13446: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13447: LD_VAR 0 1
13451: PPUSH
13452: LD_INT 0
13454: PPUSH
13455: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13459: LD_VAR 0 1
13463: PPUSH
13464: LD_OWVAR 3
13468: PUSH
13469: LD_VAR 0 1
13473: DIFF
13474: PPUSH
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 74
13484: PPUSH
13485: CALL_OW 115
// wait ( 0 0$20 ) ;
13489: LD_INT 700
13491: PPUSH
13492: CALL_OW 67
// SetSide ( un , your_side ) ;
13496: LD_VAR 0 1
13500: PPUSH
13501: LD_OWVAR 2
13505: PPUSH
13506: CALL_OW 235
// end ;
13510: PPOPN 2
13512: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13513: LD_EXP 40
13517: PUSH
13518: LD_EXP 73
13522: AND
13523: IFFALSE 13629
13525: GO 13527
13527: DISABLE
13528: LD_INT 0
13530: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_OWVAR 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: LD_INT 30
13553: PUSH
13554: LD_INT 0
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 30
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PPUSH
13580: CALL_OW 69
13584: ST_TO_ADDR
// if not depot then
13585: LD_VAR 0 1
13589: NOT
13590: IFFALSE 13594
// exit ;
13592: GO 13629
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13594: LD_VAR 0 1
13598: PUSH
13599: LD_INT 1
13601: ARRAY
13602: PPUSH
13603: CALL_OW 250
13607: PPUSH
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: CALL_OW 251
13621: PPUSH
13622: LD_INT 70
13624: PPUSH
13625: CALL_OW 495
// end ;
13629: PPOPN 1
13631: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13632: LD_EXP 40
13636: PUSH
13637: LD_EXP 74
13641: AND
13642: IFFALSE 13853
13644: GO 13646
13646: DISABLE
13647: LD_INT 0
13649: PPUSH
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13654: LD_ADDR_VAR 0 5
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 5
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13853
// for i in tmp do
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_VAR 0 5
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13851
// begin d := rand ( 0 , 5 ) ;
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: LD_INT 0
13719: PPUSH
13720: LD_INT 5
13722: PPUSH
13723: CALL_OW 12
13727: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13728: LD_ADDR_VAR 0 2
13732: PUSH
13733: LD_VAR 0 1
13737: PPUSH
13738: CALL_OW 250
13742: PPUSH
13743: LD_VAR 0 4
13747: PPUSH
13748: LD_INT 3
13750: PPUSH
13751: LD_INT 12
13753: PPUSH
13754: CALL_OW 12
13758: PPUSH
13759: CALL_OW 272
13763: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13764: LD_ADDR_VAR 0 3
13768: PUSH
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 251
13778: PPUSH
13779: LD_VAR 0 4
13783: PPUSH
13784: LD_INT 3
13786: PPUSH
13787: LD_INT 12
13789: PPUSH
13790: CALL_OW 12
13794: PPUSH
13795: CALL_OW 273
13799: ST_TO_ADDR
// if ValidHex ( x , y ) then
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: CALL_OW 488
13814: IFFALSE 13849
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_VAR 0 2
13825: PPUSH
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 3
13833: PPUSH
13834: LD_INT 6
13836: PPUSH
13837: CALL_OW 12
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 483
// end ;
13849: GO 13709
13851: POP
13852: POP
// end ;
13853: PPOPN 5
13855: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13856: LD_EXP 40
13860: PUSH
13861: LD_EXP 75
13865: AND
13866: IFFALSE 13960
13868: GO 13870
13870: DISABLE
13871: LD_INT 0
13873: PPUSH
13874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_INT 22
13882: PUSH
13883: LD_OWVAR 2
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 32
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: ST_TO_ADDR
// if not tmp then
13922: LD_VAR 0 2
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13960
// for i in tmp do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_VAR 0 2
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13958
// SetFuel ( i , 0 ) ;
13944: LD_VAR 0 1
13948: PPUSH
13949: LD_INT 0
13951: PPUSH
13952: CALL_OW 240
13956: GO 13941
13958: POP
13959: POP
// end ;
13960: PPOPN 2
13962: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13963: LD_EXP 40
13967: PUSH
13968: LD_EXP 76
13972: AND
13973: IFFALSE 14039
13975: GO 13977
13977: DISABLE
13978: LD_INT 0
13980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13981: LD_ADDR_VAR 0 1
13985: PUSH
13986: LD_INT 22
13988: PUSH
13989: LD_OWVAR 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 30
14000: PUSH
14001: LD_INT 29
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PPUSH
14012: CALL_OW 69
14016: ST_TO_ADDR
// if not tmp then
14017: LD_VAR 0 1
14021: NOT
14022: IFFALSE 14026
// exit ;
14024: GO 14039
// DestroyUnit ( tmp [ 1 ] ) ;
14026: LD_VAR 0 1
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: CALL_OW 65
// end ;
14039: PPOPN 1
14041: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14042: LD_EXP 40
14046: PUSH
14047: LD_EXP 78
14051: AND
14052: IFFALSE 14181
14054: GO 14056
14056: DISABLE
14057: LD_INT 0
14059: PPUSH
// begin uc_side := 0 ;
14060: LD_ADDR_OWVAR 20
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// uc_nation := nation_arabian ;
14068: LD_ADDR_OWVAR 21
14072: PUSH
14073: LD_INT 2
14075: ST_TO_ADDR
// hc_gallery :=  ;
14076: LD_ADDR_OWVAR 33
14080: PUSH
14081: LD_STRING 
14083: ST_TO_ADDR
// hc_name :=  ;
14084: LD_ADDR_OWVAR 26
14088: PUSH
14089: LD_STRING 
14091: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14092: LD_INT 1
14094: PPUSH
14095: LD_INT 11
14097: PPUSH
14098: LD_INT 10
14100: PPUSH
14101: CALL_OW 380
// un := CreateHuman ;
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: CALL_OW 44
14114: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14115: LD_VAR 0 1
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14127: LD_INT 35
14129: PPUSH
14130: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_INT 22
14141: PUSH
14142: LD_OWVAR 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: PPUSH
14156: LD_VAR 0 1
14160: PPUSH
14161: CALL_OW 74
14165: PPUSH
14166: CALL_OW 115
// until IsDead ( un ) ;
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 301
14179: IFFALSE 14127
// end ;
14181: PPOPN 1
14183: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14184: LD_EXP 40
14188: PUSH
14189: LD_EXP 80
14193: AND
14194: IFFALSE 14206
14196: GO 14198
14198: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14199: LD_STRING earthquake(getX(game), 0, 32)
14201: PPUSH
14202: CALL_OW 559
14206: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14207: LD_EXP 40
14211: PUSH
14212: LD_EXP 81
14216: AND
14217: IFFALSE 14308
14219: GO 14221
14221: DISABLE
14222: LD_INT 0
14224: PPUSH
// begin enable ;
14225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_OWVAR 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 2
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 33
14255: PUSH
14256: LD_INT 3
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// if not tmp then
14273: LD_VAR 0 1
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 14308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14282: LD_VAR 0 1
14286: PUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_VAR 0 1
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 234
// end ;
14308: PPOPN 1
14310: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14311: LD_EXP 40
14315: PUSH
14316: LD_EXP 82
14320: AND
14321: IFFALSE 14462
14323: GO 14325
14325: DISABLE
14326: LD_INT 0
14328: PPUSH
14329: PPUSH
14330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_OWVAR 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 25
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: ST_TO_ADDR
// if not tmp then
14367: LD_VAR 0 3
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 14462
// un := tmp [ rand ( 1 , tmp ) ] ;
14376: LD_ADDR_VAR 0 2
14380: PUSH
14381: LD_VAR 0 3
14385: PUSH
14386: LD_INT 1
14388: PPUSH
14389: LD_VAR 0 3
14393: PPUSH
14394: CALL_OW 12
14398: ARRAY
14399: ST_TO_ADDR
// if Crawls ( un ) then
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 318
14409: IFFALSE 14420
// ComWalk ( un ) ;
14411: LD_VAR 0 2
14415: PPUSH
14416: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14420: LD_VAR 0 2
14424: PPUSH
14425: LD_INT 9
14427: PPUSH
14428: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14432: LD_INT 28
14434: PPUSH
14435: LD_OWVAR 2
14439: PPUSH
14440: LD_INT 2
14442: PPUSH
14443: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14447: LD_INT 29
14449: PPUSH
14450: LD_OWVAR 2
14454: PPUSH
14455: LD_INT 2
14457: PPUSH
14458: CALL_OW 322
// end ;
14462: PPOPN 3
14464: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14465: LD_EXP 40
14469: PUSH
14470: LD_EXP 83
14474: AND
14475: IFFALSE 14586
14477: GO 14479
14479: DISABLE
14480: LD_INT 0
14482: PPUSH
14483: PPUSH
14484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_OWVAR 2
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 25
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 69
14520: ST_TO_ADDR
// if not tmp then
14521: LD_VAR 0 3
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 14586
// un := tmp [ rand ( 1 , tmp ) ] ;
14530: LD_ADDR_VAR 0 2
14534: PUSH
14535: LD_VAR 0 3
14539: PUSH
14540: LD_INT 1
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// if Crawls ( un ) then
14554: LD_VAR 0 2
14558: PPUSH
14559: CALL_OW 318
14563: IFFALSE 14574
// ComWalk ( un ) ;
14565: LD_VAR 0 2
14569: PPUSH
14570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14574: LD_VAR 0 2
14578: PPUSH
14579: LD_INT 8
14581: PPUSH
14582: CALL_OW 336
// end ;
14586: PPOPN 3
14588: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14589: LD_EXP 40
14593: PUSH
14594: LD_EXP 84
14598: AND
14599: IFFALSE 14743
14601: GO 14603
14603: DISABLE
14604: LD_INT 0
14606: PPUSH
14607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14608: LD_ADDR_VAR 0 2
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_OWVAR 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 21
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: LD_INT 34
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 34
14650: PUSH
14651: LD_INT 51
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 32
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: ST_TO_ADDR
// if not tmp then
14684: LD_VAR 0 2
14688: NOT
14689: IFFALSE 14693
// exit ;
14691: GO 14743
// for i in tmp do
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: FOR_IN
14704: IFFALSE 14741
// if GetCargo ( i , mat_artifact ) = 0 then
14706: LD_VAR 0 1
14710: PPUSH
14711: LD_INT 4
14713: PPUSH
14714: CALL_OW 289
14718: PUSH
14719: LD_INT 0
14721: EQUAL
14722: IFFALSE 14739
// SetCargo ( i , mat_siberit , 100 ) ;
14724: LD_VAR 0 1
14728: PPUSH
14729: LD_INT 3
14731: PPUSH
14732: LD_INT 100
14734: PPUSH
14735: CALL_OW 290
14739: GO 14703
14741: POP
14742: POP
// end ;
14743: PPOPN 2
14745: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14746: LD_EXP 40
14750: PUSH
14751: LD_EXP 85
14755: AND
14756: IFFALSE 14939
14758: GO 14760
14760: DISABLE
14761: LD_INT 0
14763: PPUSH
14764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14765: LD_ADDR_VAR 0 2
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_OWVAR 2
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 2
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14939
// for i := 1 to 2 do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: DOUBLE
14802: LD_INT 1
14804: DEC
14805: ST_TO_ADDR
14806: LD_INT 2
14808: PUSH
14809: FOR_TO
14810: IFFALSE 14937
// begin uc_side := your_side ;
14812: LD_ADDR_OWVAR 20
14816: PUSH
14817: LD_OWVAR 2
14821: ST_TO_ADDR
// uc_nation := nation_american ;
14822: LD_ADDR_OWVAR 21
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// vc_chassis := us_morphling ;
14830: LD_ADDR_OWVAR 37
14834: PUSH
14835: LD_INT 5
14837: ST_TO_ADDR
// vc_engine := engine_siberite ;
14838: LD_ADDR_OWVAR 39
14842: PUSH
14843: LD_INT 3
14845: ST_TO_ADDR
// vc_control := control_computer ;
14846: LD_ADDR_OWVAR 38
14850: PUSH
14851: LD_INT 3
14853: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14854: LD_ADDR_OWVAR 40
14858: PUSH
14859: LD_INT 10
14861: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14862: LD_VAR 0 2
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: CALL_OW 310
14875: NOT
14876: IFFALSE 14923
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14878: CALL_OW 45
14882: PPUSH
14883: LD_VAR 0 2
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: CALL_OW 250
14896: PPUSH
14897: LD_VAR 0 2
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: PPUSH
14906: CALL_OW 251
14910: PPUSH
14911: LD_INT 12
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 50
14921: GO 14935
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14923: CALL_OW 45
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 51
// end ;
14935: GO 14809
14937: POP
14938: POP
// end ;
14939: PPOPN 2
14941: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14942: LD_EXP 40
14946: PUSH
14947: LD_EXP 86
14951: AND
14952: IFFALSE 15174
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14965: LD_ADDR_VAR 0 6
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_OWVAR 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 3
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 0
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: ST_TO_ADDR
// if not tmp then
15019: LD_VAR 0 6
15023: NOT
15024: IFFALSE 15028
// exit ;
15026: GO 15174
// s1 := rand ( 1 , 4 ) ;
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_INT 1
15035: PPUSH
15036: LD_INT 4
15038: PPUSH
15039: CALL_OW 12
15043: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15044: LD_ADDR_VAR 0 4
15048: PUSH
15049: LD_VAR 0 6
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: PPUSH
15058: LD_VAR 0 2
15062: PPUSH
15063: CALL_OW 259
15067: ST_TO_ADDR
// if s1 = 1 then
15068: LD_VAR 0 2
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: IFFALSE 15096
// s2 := rand ( 2 , 4 ) else
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: LD_INT 2
15085: PPUSH
15086: LD_INT 4
15088: PPUSH
15089: CALL_OW 12
15093: ST_TO_ADDR
15094: GO 15104
// s2 := 1 ;
15096: LD_ADDR_VAR 0 3
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15104: LD_ADDR_VAR 0 5
15108: PUSH
15109: LD_VAR 0 6
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: CALL_OW 259
15127: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15128: LD_VAR 0 6
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 2
15141: PPUSH
15142: LD_VAR 0 5
15146: PPUSH
15147: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15151: LD_VAR 0 6
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: LD_VAR 0 3
15164: PPUSH
15165: LD_VAR 0 4
15169: PPUSH
15170: CALL_OW 237
// end ;
15174: PPOPN 6
15176: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15177: LD_EXP 40
15181: PUSH
15182: LD_EXP 87
15186: AND
15187: IFFALSE 15266
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15195: LD_ADDR_VAR 0 1
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 30
15214: PUSH
15215: LD_INT 3
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 1
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15240: LD_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 12
15257: ARRAY
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: CALL_OW 234
// end ;
15266: PPOPN 1
15268: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15269: LD_EXP 40
15273: PUSH
15274: LD_EXP 88
15278: AND
15279: IFFALSE 15391
15281: GO 15283
15283: DISABLE
15284: LD_INT 0
15286: PPUSH
15287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15288: LD_ADDR_VAR 0 2
15292: PUSH
15293: LD_INT 22
15295: PUSH
15296: LD_OWVAR 2
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 30
15310: PUSH
15311: LD_INT 27
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 26
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 28
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: ST_TO_ADDR
// if not tmp then
15353: LD_VAR 0 2
15357: NOT
15358: IFFALSE 15362
// exit ;
15360: GO 15391
// for i in tmp do
15362: LD_ADDR_VAR 0 1
15366: PUSH
15367: LD_VAR 0 2
15371: PUSH
15372: FOR_IN
15373: IFFALSE 15389
// SetLives ( i , 1 ) ;
15375: LD_VAR 0 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 234
15387: GO 15372
15389: POP
15390: POP
// end ;
15391: PPOPN 2
15393: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15394: LD_EXP 40
15398: PUSH
15399: LD_EXP 89
15403: AND
15404: IFFALSE 15691
15406: GO 15408
15408: DISABLE
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// begin i := rand ( 1 , 7 ) ;
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: LD_INT 1
15421: PPUSH
15422: LD_INT 7
15424: PPUSH
15425: CALL_OW 12
15429: ST_TO_ADDR
// case i of 1 :
15430: LD_VAR 0 1
15434: PUSH
15435: LD_INT 1
15437: DOUBLE
15438: EQUAL
15439: IFTRUE 15443
15441: GO 15453
15443: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15444: LD_STRING earthquake(getX(game), 0, 32)
15446: PPUSH
15447: CALL_OW 559
15451: GO 15691
15453: LD_INT 2
15455: DOUBLE
15456: EQUAL
15457: IFTRUE 15461
15459: GO 15475
15461: POP
// begin ToLua ( displayStucuk(); ) ;
15462: LD_STRING displayStucuk();
15464: PPUSH
15465: CALL_OW 559
// ResetFog ;
15469: CALL_OW 335
// end ; 3 :
15473: GO 15691
15475: LD_INT 3
15477: DOUBLE
15478: EQUAL
15479: IFTRUE 15483
15481: GO 15587
15483: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15484: LD_ADDR_VAR 0 2
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_OWVAR 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: ST_TO_ADDR
// if not tmp then
15520: LD_VAR 0 2
15524: NOT
15525: IFFALSE 15529
// exit ;
15527: GO 15691
// un := tmp [ rand ( 1 , tmp ) ] ;
15529: LD_ADDR_VAR 0 3
15533: PUSH
15534: LD_VAR 0 2
15538: PUSH
15539: LD_INT 1
15541: PPUSH
15542: LD_VAR 0 2
15546: PPUSH
15547: CALL_OW 12
15551: ARRAY
15552: ST_TO_ADDR
// if Crawls ( un ) then
15553: LD_VAR 0 3
15557: PPUSH
15558: CALL_OW 318
15562: IFFALSE 15573
// ComWalk ( un ) ;
15564: LD_VAR 0 3
15568: PPUSH
15569: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_INT 8
15580: PPUSH
15581: CALL_OW 336
// end ; 4 :
15585: GO 15691
15587: LD_INT 4
15589: DOUBLE
15590: EQUAL
15591: IFTRUE 15595
15593: GO 15669
15595: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15596: LD_ADDR_VAR 0 2
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_OWVAR 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 30
15615: PUSH
15616: LD_INT 29
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 69
15631: ST_TO_ADDR
// if not tmp then
15632: LD_VAR 0 2
15636: NOT
15637: IFFALSE 15641
// exit ;
15639: GO 15691
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15641: LD_VAR 0 2
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15654: LD_VAR 0 2
15658: PUSH
15659: LD_INT 1
15661: ARRAY
15662: PPUSH
15663: CALL_OW 65
// end ; 5 .. 7 :
15667: GO 15691
15669: LD_INT 5
15671: DOUBLE
15672: GREATEREQUAL
15673: IFFALSE 15681
15675: LD_INT 7
15677: DOUBLE
15678: LESSEQUAL
15679: IFTRUE 15683
15681: GO 15690
15683: POP
// StreamSibBomb ; end ;
15684: CALL 11928 0 0
15688: GO 15691
15690: POP
// end ;
15691: PPOPN 3
15693: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15694: LD_EXP 40
15698: PUSH
15699: LD_EXP 90
15703: AND
15704: IFFALSE 15860
15706: GO 15708
15708: DISABLE
15709: LD_INT 0
15711: PPUSH
15712: PPUSH
15713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15714: LD_ADDR_VAR 0 2
15718: PUSH
15719: LD_INT 81
15721: PUSH
15722: LD_OWVAR 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 2
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 21
15746: PUSH
15747: LD_INT 2
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PPUSH
15763: CALL_OW 69
15767: ST_TO_ADDR
// if not tmp then
15768: LD_VAR 0 2
15772: NOT
15773: IFFALSE 15777
// exit ;
15775: GO 15860
// p := 0 ;
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_INT 0
15784: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15785: LD_INT 35
15787: PPUSH
15788: CALL_OW 67
// p := p + 1 ;
15792: LD_ADDR_VAR 0 3
15796: PUSH
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 1
15804: PLUS
15805: ST_TO_ADDR
// for i in tmp do
15806: LD_ADDR_VAR 0 1
15810: PUSH
15811: LD_VAR 0 2
15815: PUSH
15816: FOR_IN
15817: IFFALSE 15848
// if GetLives ( i ) < 1000 then
15819: LD_VAR 0 1
15823: PPUSH
15824: CALL_OW 256
15828: PUSH
15829: LD_INT 1000
15831: LESS
15832: IFFALSE 15846
// SetLives ( i , 1000 ) ;
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_INT 1000
15841: PPUSH
15842: CALL_OW 234
15846: GO 15816
15848: POP
15849: POP
// until p > 20 ;
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 20
15857: GREATER
15858: IFFALSE 15785
// end ;
15860: PPOPN 3
15862: END
// every 0 0$1 trigger StreamModeActive and sTime do
15863: LD_EXP 40
15867: PUSH
15868: LD_EXP 91
15872: AND
15873: IFFALSE 15908
15875: GO 15877
15877: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15878: LD_INT 28
15880: PPUSH
15881: LD_OWVAR 2
15885: PPUSH
15886: LD_INT 2
15888: PPUSH
15889: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15893: LD_INT 30
15895: PPUSH
15896: LD_OWVAR 2
15900: PPUSH
15901: LD_INT 2
15903: PPUSH
15904: CALL_OW 322
// end ;
15908: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15909: LD_EXP 40
15913: PUSH
15914: LD_EXP 92
15918: AND
15919: IFFALSE 16040
15921: GO 15923
15923: DISABLE
15924: LD_INT 0
15926: PPUSH
15927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_INT 22
15935: PUSH
15936: LD_OWVAR 2
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 21
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 23
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: PPUSH
15977: CALL_OW 69
15981: ST_TO_ADDR
// if not tmp then
15982: LD_VAR 0 2
15986: NOT
15987: IFFALSE 15991
// exit ;
15989: GO 16040
// for i in tmp do
15991: LD_ADDR_VAR 0 1
15995: PUSH
15996: LD_VAR 0 2
16000: PUSH
16001: FOR_IN
16002: IFFALSE 16038
// begin if Crawls ( i ) then
16004: LD_VAR 0 1
16008: PPUSH
16009: CALL_OW 318
16013: IFFALSE 16024
// ComWalk ( i ) ;
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL_OW 138
// SetClass ( i , 2 ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: LD_INT 2
16031: PPUSH
16032: CALL_OW 336
// end ;
16036: GO 16001
16038: POP
16039: POP
// end ;
16040: PPOPN 2
16042: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16043: LD_EXP 40
16047: PUSH
16048: LD_EXP 93
16052: AND
16053: IFFALSE 16341
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
16062: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16063: LD_OWVAR 2
16067: PPUSH
16068: LD_INT 9
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16081: LD_INT 9
16083: PPUSH
16084: LD_OWVAR 2
16088: PPUSH
16089: CALL_OW 343
// uc_side := 9 ;
16093: LD_ADDR_OWVAR 20
16097: PUSH
16098: LD_INT 9
16100: ST_TO_ADDR
// uc_nation := 2 ;
16101: LD_ADDR_OWVAR 21
16105: PUSH
16106: LD_INT 2
16108: ST_TO_ADDR
// hc_name := Dark Warrior ;
16109: LD_ADDR_OWVAR 26
16113: PUSH
16114: LD_STRING Dark Warrior
16116: ST_TO_ADDR
// hc_gallery :=  ;
16117: LD_ADDR_OWVAR 33
16121: PUSH
16122: LD_STRING 
16124: ST_TO_ADDR
// hc_noskilllimit := true ;
16125: LD_ADDR_OWVAR 76
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16133: LD_ADDR_OWVAR 31
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 30
16143: PUSH
16144: LD_INT 30
16146: PUSH
16147: LD_INT 30
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: ST_TO_ADDR
// un := CreateHuman ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: CALL_OW 44
16165: ST_TO_ADDR
// hc_noskilllimit := false ;
16166: LD_ADDR_OWVAR 76
16170: PUSH
16171: LD_INT 0
16173: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 51
// ToLua ( playRanger() ) ;
16186: LD_STRING playRanger()
16188: PPUSH
16189: CALL_OW 559
// p := 0 ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16201: LD_INT 35
16203: PPUSH
16204: CALL_OW 67
// p := p + 1 ;
16208: LD_ADDR_VAR 0 2
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16222: LD_VAR 0 3
16226: PPUSH
16227: CALL_OW 256
16231: PUSH
16232: LD_INT 1000
16234: LESS
16235: IFFALSE 16249
// SetLives ( un , 1000 ) ;
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_INT 1000
16244: PPUSH
16245: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 81
16256: PUSH
16257: LD_OWVAR 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 91
16268: PUSH
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 30
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PPUSH
16291: LD_VAR 0 3
16295: PPUSH
16296: CALL_OW 74
16300: PPUSH
16301: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16305: LD_VAR 0 2
16309: PUSH
16310: LD_INT 80
16312: GREATER
16313: PUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: CALL_OW 301
16323: OR
16324: IFFALSE 16201
// if un then
16326: LD_VAR 0 3
16330: IFFALSE 16341
// RemoveUnit ( un ) ;
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 64
// end ;
16341: PPOPN 3
16343: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16344: LD_EXP 94
16348: IFFALSE 16464
16350: GO 16352
16352: DISABLE
16353: LD_INT 0
16355: PPUSH
16356: PPUSH
16357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_INT 81
16365: PUSH
16366: LD_OWVAR 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 21
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PPUSH
16389: CALL_OW 69
16393: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16394: LD_STRING playComputer()
16396: PPUSH
16397: CALL_OW 559
// if not tmp then
16401: LD_VAR 0 2
16405: NOT
16406: IFFALSE 16410
// exit ;
16408: GO 16464
// for i in tmp do
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: FOR_IN
16421: IFFALSE 16462
// for j := 1 to 4 do
16423: LD_ADDR_VAR 0 3
16427: PUSH
16428: DOUBLE
16429: LD_INT 1
16431: DEC
16432: ST_TO_ADDR
16433: LD_INT 4
16435: PUSH
16436: FOR_TO
16437: IFFALSE 16458
// SetSkill ( i , j , 10 ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 10
16451: PPUSH
16452: CALL_OW 237
16456: GO 16436
16458: POP
16459: POP
16460: GO 16420
16462: POP
16463: POP
// end ;
16464: PPOPN 3
16466: END
// every 0 0$1 trigger s30 do var i , tmp ;
16467: LD_EXP 95
16471: IFFALSE 16540
16473: GO 16475
16475: DISABLE
16476: LD_INT 0
16478: PPUSH
16479: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: ST_TO_ADDR
// if not tmp then
16502: LD_VAR 0 2
16506: NOT
16507: IFFALSE 16511
// exit ;
16509: GO 16540
// for i in tmp do
16511: LD_ADDR_VAR 0 1
16515: PUSH
16516: LD_VAR 0 2
16520: PUSH
16521: FOR_IN
16522: IFFALSE 16538
// SetLives ( i , 300 ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_INT 300
16531: PPUSH
16532: CALL_OW 234
16536: GO 16521
16538: POP
16539: POP
// end ;
16540: PPOPN 2
16542: END
// every 0 0$1 trigger s60 do var i , tmp ;
16543: LD_EXP 96
16547: IFFALSE 16616
16549: GO 16551
16551: DISABLE
16552: LD_INT 0
16554: PPUSH
16555: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_OWVAR 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// if not tmp then
16578: LD_VAR 0 2
16582: NOT
16583: IFFALSE 16587
// exit ;
16585: GO 16616
// for i in tmp do
16587: LD_ADDR_VAR 0 1
16591: PUSH
16592: LD_VAR 0 2
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16614
// SetLives ( i , 600 ) ;
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_INT 600
16607: PPUSH
16608: CALL_OW 234
16612: GO 16597
16614: POP
16615: POP
// end ;
16616: PPOPN 2
16618: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16619: LD_INT 0
16621: PPUSH
// case cmd of 301 :
16622: LD_VAR 0 1
16626: PUSH
16627: LD_INT 301
16629: DOUBLE
16630: EQUAL
16631: IFTRUE 16635
16633: GO 16667
16635: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16636: LD_VAR 0 6
16640: PPUSH
16641: LD_VAR 0 7
16645: PPUSH
16646: LD_VAR 0 8
16650: PPUSH
16651: LD_VAR 0 4
16655: PPUSH
16656: LD_VAR 0 5
16660: PPUSH
16661: CALL 17868 0 5
16665: GO 16788
16667: LD_INT 302
16669: DOUBLE
16670: EQUAL
16671: IFTRUE 16675
16673: GO 16712
16675: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16676: LD_VAR 0 6
16680: PPUSH
16681: LD_VAR 0 7
16685: PPUSH
16686: LD_VAR 0 8
16690: PPUSH
16691: LD_VAR 0 9
16695: PPUSH
16696: LD_VAR 0 4
16700: PPUSH
16701: LD_VAR 0 5
16705: PPUSH
16706: CALL 17959 0 6
16710: GO 16788
16712: LD_INT 303
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16757
16720: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16721: LD_VAR 0 6
16725: PPUSH
16726: LD_VAR 0 7
16730: PPUSH
16731: LD_VAR 0 8
16735: PPUSH
16736: LD_VAR 0 9
16740: PPUSH
16741: LD_VAR 0 4
16745: PPUSH
16746: LD_VAR 0 5
16750: PPUSH
16751: CALL 16793 0 6
16755: GO 16788
16757: LD_INT 304
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16787
16765: POP
// hHackTeleport ( unit , x , y ) ; end ;
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_VAR 0 4
16775: PPUSH
16776: LD_VAR 0 5
16780: PPUSH
16781: CALL 18552 0 3
16785: GO 16788
16787: POP
// end ;
16788: LD_VAR 0 12
16792: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16793: LD_INT 0
16795: PPUSH
16796: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16797: LD_VAR 0 1
16801: PUSH
16802: LD_INT 1
16804: LESS
16805: PUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 3
16813: GREATER
16814: OR
16815: PUSH
16816: LD_VAR 0 5
16820: PPUSH
16821: LD_VAR 0 6
16825: PPUSH
16826: CALL_OW 428
16830: OR
16831: IFFALSE 16835
// exit ;
16833: GO 17555
// uc_side := your_side ;
16835: LD_ADDR_OWVAR 20
16839: PUSH
16840: LD_OWVAR 2
16844: ST_TO_ADDR
// uc_nation := nation ;
16845: LD_ADDR_OWVAR 21
16849: PUSH
16850: LD_VAR 0 1
16854: ST_TO_ADDR
// bc_level = 1 ;
16855: LD_ADDR_OWVAR 43
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// case btype of 1 :
16863: LD_VAR 0 2
16867: PUSH
16868: LD_INT 1
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16887
16876: POP
// bc_type := b_depot ; 2 :
16877: LD_ADDR_OWVAR 42
16881: PUSH
16882: LD_INT 0
16884: ST_TO_ADDR
16885: GO 17499
16887: LD_INT 2
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16906
16895: POP
// bc_type := b_warehouse ; 3 :
16896: LD_ADDR_OWVAR 42
16900: PUSH
16901: LD_INT 1
16903: ST_TO_ADDR
16904: GO 17499
16906: LD_INT 3
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16925
16914: POP
// bc_type := b_lab ; 4 .. 9 :
16915: LD_ADDR_OWVAR 42
16919: PUSH
16920: LD_INT 6
16922: ST_TO_ADDR
16923: GO 17499
16925: LD_INT 4
16927: DOUBLE
16928: GREATEREQUAL
16929: IFFALSE 16937
16931: LD_INT 9
16933: DOUBLE
16934: LESSEQUAL
16935: IFTRUE 16939
16937: GO 16991
16939: POP
// begin bc_type := b_lab_half ;
16940: LD_ADDR_OWVAR 42
16944: PUSH
16945: LD_INT 7
16947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16948: LD_ADDR_OWVAR 44
16952: PUSH
16953: LD_INT 10
16955: PUSH
16956: LD_INT 11
16958: PUSH
16959: LD_INT 12
16961: PUSH
16962: LD_INT 15
16964: PUSH
16965: LD_INT 14
16967: PUSH
16968: LD_INT 13
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PUSH
16979: LD_VAR 0 2
16983: PUSH
16984: LD_INT 3
16986: MINUS
16987: ARRAY
16988: ST_TO_ADDR
// end ; 10 .. 13 :
16989: GO 17499
16991: LD_INT 10
16993: DOUBLE
16994: GREATEREQUAL
16995: IFFALSE 17003
16997: LD_INT 13
16999: DOUBLE
17000: LESSEQUAL
17001: IFTRUE 17005
17003: GO 17082
17005: POP
// begin bc_type := b_lab_full ;
17006: LD_ADDR_OWVAR 42
17010: PUSH
17011: LD_INT 8
17013: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17014: LD_ADDR_OWVAR 44
17018: PUSH
17019: LD_INT 10
17021: PUSH
17022: LD_INT 12
17024: PUSH
17025: LD_INT 14
17027: PUSH
17028: LD_INT 13
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: LD_VAR 0 2
17041: PUSH
17042: LD_INT 9
17044: MINUS
17045: ARRAY
17046: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17047: LD_ADDR_OWVAR 45
17051: PUSH
17052: LD_INT 11
17054: PUSH
17055: LD_INT 15
17057: PUSH
17058: LD_INT 12
17060: PUSH
17061: LD_INT 15
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: PUSH
17070: LD_VAR 0 2
17074: PUSH
17075: LD_INT 9
17077: MINUS
17078: ARRAY
17079: ST_TO_ADDR
// end ; 14 :
17080: GO 17499
17082: LD_INT 14
17084: DOUBLE
17085: EQUAL
17086: IFTRUE 17090
17088: GO 17101
17090: POP
// bc_type := b_workshop ; 15 :
17091: LD_ADDR_OWVAR 42
17095: PUSH
17096: LD_INT 2
17098: ST_TO_ADDR
17099: GO 17499
17101: LD_INT 15
17103: DOUBLE
17104: EQUAL
17105: IFTRUE 17109
17107: GO 17120
17109: POP
// bc_type := b_factory ; 16 :
17110: LD_ADDR_OWVAR 42
17114: PUSH
17115: LD_INT 3
17117: ST_TO_ADDR
17118: GO 17499
17120: LD_INT 16
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17139
17128: POP
// bc_type := b_ext_gun ; 17 :
17129: LD_ADDR_OWVAR 42
17133: PUSH
17134: LD_INT 17
17136: ST_TO_ADDR
17137: GO 17499
17139: LD_INT 17
17141: DOUBLE
17142: EQUAL
17143: IFTRUE 17147
17145: GO 17175
17147: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17148: LD_ADDR_OWVAR 42
17152: PUSH
17153: LD_INT 19
17155: PUSH
17156: LD_INT 23
17158: PUSH
17159: LD_INT 19
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: PUSH
17167: LD_VAR 0 1
17171: ARRAY
17172: ST_TO_ADDR
17173: GO 17499
17175: LD_INT 18
17177: DOUBLE
17178: EQUAL
17179: IFTRUE 17183
17181: GO 17194
17183: POP
// bc_type := b_ext_radar ; 19 :
17184: LD_ADDR_OWVAR 42
17188: PUSH
17189: LD_INT 20
17191: ST_TO_ADDR
17192: GO 17499
17194: LD_INT 19
17196: DOUBLE
17197: EQUAL
17198: IFTRUE 17202
17200: GO 17213
17202: POP
// bc_type := b_ext_radio ; 20 :
17203: LD_ADDR_OWVAR 42
17207: PUSH
17208: LD_INT 22
17210: ST_TO_ADDR
17211: GO 17499
17213: LD_INT 20
17215: DOUBLE
17216: EQUAL
17217: IFTRUE 17221
17219: GO 17232
17221: POP
// bc_type := b_ext_siberium ; 21 :
17222: LD_ADDR_OWVAR 42
17226: PUSH
17227: LD_INT 21
17229: ST_TO_ADDR
17230: GO 17499
17232: LD_INT 21
17234: DOUBLE
17235: EQUAL
17236: IFTRUE 17240
17238: GO 17251
17240: POP
// bc_type := b_ext_computer ; 22 :
17241: LD_ADDR_OWVAR 42
17245: PUSH
17246: LD_INT 24
17248: ST_TO_ADDR
17249: GO 17499
17251: LD_INT 22
17253: DOUBLE
17254: EQUAL
17255: IFTRUE 17259
17257: GO 17270
17259: POP
// bc_type := b_ext_track ; 23 :
17260: LD_ADDR_OWVAR 42
17264: PUSH
17265: LD_INT 16
17267: ST_TO_ADDR
17268: GO 17499
17270: LD_INT 23
17272: DOUBLE
17273: EQUAL
17274: IFTRUE 17278
17276: GO 17289
17278: POP
// bc_type := b_ext_laser ; 24 :
17279: LD_ADDR_OWVAR 42
17283: PUSH
17284: LD_INT 25
17286: ST_TO_ADDR
17287: GO 17499
17289: LD_INT 24
17291: DOUBLE
17292: EQUAL
17293: IFTRUE 17297
17295: GO 17308
17297: POP
// bc_type := b_control_tower ; 25 :
17298: LD_ADDR_OWVAR 42
17302: PUSH
17303: LD_INT 36
17305: ST_TO_ADDR
17306: GO 17499
17308: LD_INT 25
17310: DOUBLE
17311: EQUAL
17312: IFTRUE 17316
17314: GO 17327
17316: POP
// bc_type := b_breastwork ; 26 :
17317: LD_ADDR_OWVAR 42
17321: PUSH
17322: LD_INT 31
17324: ST_TO_ADDR
17325: GO 17499
17327: LD_INT 26
17329: DOUBLE
17330: EQUAL
17331: IFTRUE 17335
17333: GO 17346
17335: POP
// bc_type := b_bunker ; 27 :
17336: LD_ADDR_OWVAR 42
17340: PUSH
17341: LD_INT 32
17343: ST_TO_ADDR
17344: GO 17499
17346: LD_INT 27
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17354
17352: GO 17365
17354: POP
// bc_type := b_turret ; 28 :
17355: LD_ADDR_OWVAR 42
17359: PUSH
17360: LD_INT 33
17362: ST_TO_ADDR
17363: GO 17499
17365: LD_INT 28
17367: DOUBLE
17368: EQUAL
17369: IFTRUE 17373
17371: GO 17384
17373: POP
// bc_type := b_armoury ; 29 :
17374: LD_ADDR_OWVAR 42
17378: PUSH
17379: LD_INT 4
17381: ST_TO_ADDR
17382: GO 17499
17384: LD_INT 29
17386: DOUBLE
17387: EQUAL
17388: IFTRUE 17392
17390: GO 17403
17392: POP
// bc_type := b_barracks ; 30 :
17393: LD_ADDR_OWVAR 42
17397: PUSH
17398: LD_INT 5
17400: ST_TO_ADDR
17401: GO 17499
17403: LD_INT 30
17405: DOUBLE
17406: EQUAL
17407: IFTRUE 17411
17409: GO 17422
17411: POP
// bc_type := b_solar_power ; 31 :
17412: LD_ADDR_OWVAR 42
17416: PUSH
17417: LD_INT 27
17419: ST_TO_ADDR
17420: GO 17499
17422: LD_INT 31
17424: DOUBLE
17425: EQUAL
17426: IFTRUE 17430
17428: GO 17441
17430: POP
// bc_type := b_oil_power ; 32 :
17431: LD_ADDR_OWVAR 42
17435: PUSH
17436: LD_INT 26
17438: ST_TO_ADDR
17439: GO 17499
17441: LD_INT 32
17443: DOUBLE
17444: EQUAL
17445: IFTRUE 17449
17447: GO 17460
17449: POP
// bc_type := b_siberite_power ; 33 :
17450: LD_ADDR_OWVAR 42
17454: PUSH
17455: LD_INT 28
17457: ST_TO_ADDR
17458: GO 17499
17460: LD_INT 33
17462: DOUBLE
17463: EQUAL
17464: IFTRUE 17468
17466: GO 17479
17468: POP
// bc_type := b_oil_mine ; 34 :
17469: LD_ADDR_OWVAR 42
17473: PUSH
17474: LD_INT 29
17476: ST_TO_ADDR
17477: GO 17499
17479: LD_INT 34
17481: DOUBLE
17482: EQUAL
17483: IFTRUE 17487
17485: GO 17498
17487: POP
// bc_type := b_siberite_mine ; end ;
17488: LD_ADDR_OWVAR 42
17492: PUSH
17493: LD_INT 30
17495: ST_TO_ADDR
17496: GO 17499
17498: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17499: LD_ADDR_VAR 0 8
17503: PUSH
17504: LD_VAR 0 5
17508: PPUSH
17509: LD_VAR 0 6
17513: PPUSH
17514: LD_VAR 0 3
17518: PPUSH
17519: CALL_OW 47
17523: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17524: LD_OWVAR 42
17528: PUSH
17529: LD_INT 32
17531: PUSH
17532: LD_INT 33
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: IN
17539: IFFALSE 17555
// PlaceWeaponTurret ( b , weapon ) ;
17541: LD_VAR 0 8
17545: PPUSH
17546: LD_VAR 0 4
17550: PPUSH
17551: CALL_OW 431
// end ;
17555: LD_VAR 0 7
17559: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
17564: PPUSH
17565: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17566: LD_ADDR_VAR 0 4
17570: PUSH
17571: LD_INT 22
17573: PUSH
17574: LD_OWVAR 2
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: LD_INT 30
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 30
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PPUSH
17615: CALL_OW 69
17619: ST_TO_ADDR
// if not tmp then
17620: LD_VAR 0 4
17624: NOT
17625: IFFALSE 17629
// exit ;
17627: GO 17688
// for i in tmp do
17629: LD_ADDR_VAR 0 2
17633: PUSH
17634: LD_VAR 0 4
17638: PUSH
17639: FOR_IN
17640: IFFALSE 17686
// for j = 1 to 3 do
17642: LD_ADDR_VAR 0 3
17646: PUSH
17647: DOUBLE
17648: LD_INT 1
17650: DEC
17651: ST_TO_ADDR
17652: LD_INT 3
17654: PUSH
17655: FOR_TO
17656: IFFALSE 17682
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17658: LD_VAR 0 2
17662: PPUSH
17663: CALL_OW 274
17667: PPUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_INT 99999
17675: PPUSH
17676: CALL_OW 277
17680: GO 17655
17682: POP
17683: POP
17684: GO 17639
17686: POP
17687: POP
// end ;
17688: LD_VAR 0 1
17692: RET
// export function hHackSetLevel10 ; var i , j ; begin
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
17697: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17698: LD_ADDR_VAR 0 2
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PPUSH
17713: CALL_OW 69
17717: PUSH
17718: FOR_IN
17719: IFFALSE 17771
// if IsSelected ( i ) then
17721: LD_VAR 0 2
17725: PPUSH
17726: CALL_OW 306
17730: IFFALSE 17769
// begin for j := 1 to 4 do
17732: LD_ADDR_VAR 0 3
17736: PUSH
17737: DOUBLE
17738: LD_INT 1
17740: DEC
17741: ST_TO_ADDR
17742: LD_INT 4
17744: PUSH
17745: FOR_TO
17746: IFFALSE 17767
// SetSkill ( i , j , 10 ) ;
17748: LD_VAR 0 2
17752: PPUSH
17753: LD_VAR 0 3
17757: PPUSH
17758: LD_INT 10
17760: PPUSH
17761: CALL_OW 237
17765: GO 17745
17767: POP
17768: POP
// end ;
17769: GO 17718
17771: POP
17772: POP
// end ;
17773: LD_VAR 0 1
17777: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17778: LD_INT 0
17780: PPUSH
17781: PPUSH
17782: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17783: LD_ADDR_VAR 0 2
17787: PUSH
17788: LD_INT 22
17790: PUSH
17791: LD_OWVAR 2
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 21
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PPUSH
17814: CALL_OW 69
17818: PUSH
17819: FOR_IN
17820: IFFALSE 17861
// begin for j := 1 to 4 do
17822: LD_ADDR_VAR 0 3
17826: PUSH
17827: DOUBLE
17828: LD_INT 1
17830: DEC
17831: ST_TO_ADDR
17832: LD_INT 4
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17857
// SetSkill ( i , j , 10 ) ;
17838: LD_VAR 0 2
17842: PPUSH
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 10
17850: PPUSH
17851: CALL_OW 237
17855: GO 17835
17857: POP
17858: POP
// end ;
17859: GO 17819
17861: POP
17862: POP
// end ;
17863: LD_VAR 0 1
17867: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17868: LD_INT 0
17870: PPUSH
// uc_side := your_side ;
17871: LD_ADDR_OWVAR 20
17875: PUSH
17876: LD_OWVAR 2
17880: ST_TO_ADDR
// uc_nation := nation ;
17881: LD_ADDR_OWVAR 21
17885: PUSH
17886: LD_VAR 0 1
17890: ST_TO_ADDR
// InitHc ;
17891: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17895: LD_INT 0
17897: PPUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: LD_VAR 0 3
17907: PPUSH
17908: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17912: LD_VAR 0 4
17916: PPUSH
17917: LD_VAR 0 5
17921: PPUSH
17922: CALL_OW 428
17926: PUSH
17927: LD_INT 0
17929: EQUAL
17930: IFFALSE 17954
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17932: CALL_OW 44
17936: PPUSH
17937: LD_VAR 0 4
17941: PPUSH
17942: LD_VAR 0 5
17946: PPUSH
17947: LD_INT 1
17949: PPUSH
17950: CALL_OW 48
// end ;
17954: LD_VAR 0 6
17958: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17959: LD_INT 0
17961: PPUSH
17962: PPUSH
// uc_side := your_side ;
17963: LD_ADDR_OWVAR 20
17967: PUSH
17968: LD_OWVAR 2
17972: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17973: LD_VAR 0 1
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: LD_INT 4
17989: PUSH
17990: LD_INT 5
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: IN
18000: IFFALSE 18012
// uc_nation := nation_american else
18002: LD_ADDR_OWVAR 21
18006: PUSH
18007: LD_INT 1
18009: ST_TO_ADDR
18010: GO 18055
// if chassis in [ 11 , 12 , 13 , 14 ] then
18012: LD_VAR 0 1
18016: PUSH
18017: LD_INT 11
18019: PUSH
18020: LD_INT 12
18022: PUSH
18023: LD_INT 13
18025: PUSH
18026: LD_INT 14
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: IN
18035: IFFALSE 18047
// uc_nation := nation_arabian else
18037: LD_ADDR_OWVAR 21
18041: PUSH
18042: LD_INT 2
18044: ST_TO_ADDR
18045: GO 18055
// uc_nation := nation_russian ;
18047: LD_ADDR_OWVAR 21
18051: PUSH
18052: LD_INT 3
18054: ST_TO_ADDR
// vc_chassis := chassis ;
18055: LD_ADDR_OWVAR 37
18059: PUSH
18060: LD_VAR 0 1
18064: ST_TO_ADDR
// vc_engine := engine ;
18065: LD_ADDR_OWVAR 39
18069: PUSH
18070: LD_VAR 0 2
18074: ST_TO_ADDR
// vc_control := control ;
18075: LD_ADDR_OWVAR 38
18079: PUSH
18080: LD_VAR 0 3
18084: ST_TO_ADDR
// vc_weapon := weapon ;
18085: LD_ADDR_OWVAR 40
18089: PUSH
18090: LD_VAR 0 4
18094: ST_TO_ADDR
// un := CreateVehicle ;
18095: LD_ADDR_VAR 0 8
18099: PUSH
18100: CALL_OW 45
18104: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18105: LD_VAR 0 8
18109: PPUSH
18110: LD_INT 0
18112: PPUSH
18113: LD_INT 5
18115: PPUSH
18116: CALL_OW 12
18120: PPUSH
18121: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18125: LD_VAR 0 8
18129: PPUSH
18130: LD_VAR 0 5
18134: PPUSH
18135: LD_VAR 0 6
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL_OW 48
// end ;
18147: LD_VAR 0 7
18151: RET
// export hInvincible ; every 1 do
18152: GO 18154
18154: DISABLE
// hInvincible := [ ] ;
18155: LD_ADDR_EXP 97
18159: PUSH
18160: EMPTY
18161: ST_TO_ADDR
18162: END
// every 10 do var i ;
18163: GO 18165
18165: DISABLE
18166: LD_INT 0
18168: PPUSH
// begin enable ;
18169: ENABLE
// if not hInvincible then
18170: LD_EXP 97
18174: NOT
18175: IFFALSE 18179
// exit ;
18177: GO 18223
// for i in hInvincible do
18179: LD_ADDR_VAR 0 1
18183: PUSH
18184: LD_EXP 97
18188: PUSH
18189: FOR_IN
18190: IFFALSE 18221
// if GetLives ( i ) < 1000 then
18192: LD_VAR 0 1
18196: PPUSH
18197: CALL_OW 256
18201: PUSH
18202: LD_INT 1000
18204: LESS
18205: IFFALSE 18219
// SetLives ( i , 1000 ) ;
18207: LD_VAR 0 1
18211: PPUSH
18212: LD_INT 1000
18214: PPUSH
18215: CALL_OW 234
18219: GO 18189
18221: POP
18222: POP
// end ;
18223: PPOPN 1
18225: END
// export function hHackInvincible ; var i ; begin
18226: LD_INT 0
18228: PPUSH
18229: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18230: LD_ADDR_VAR 0 2
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: LD_INT 21
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 21
18250: PUSH
18251: LD_INT 2
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: PUSH
18268: FOR_IN
18269: IFFALSE 18330
// if IsSelected ( i ) then
18271: LD_VAR 0 2
18275: PPUSH
18276: CALL_OW 306
18280: IFFALSE 18328
// begin if i in hInvincible then
18282: LD_VAR 0 2
18286: PUSH
18287: LD_EXP 97
18291: IN
18292: IFFALSE 18312
// hInvincible := hInvincible diff i else
18294: LD_ADDR_EXP 97
18298: PUSH
18299: LD_EXP 97
18303: PUSH
18304: LD_VAR 0 2
18308: DIFF
18309: ST_TO_ADDR
18310: GO 18328
// hInvincible := hInvincible union i ;
18312: LD_ADDR_EXP 97
18316: PUSH
18317: LD_EXP 97
18321: PUSH
18322: LD_VAR 0 2
18326: UNION
18327: ST_TO_ADDR
// end ;
18328: GO 18268
18330: POP
18331: POP
// end ;
18332: LD_VAR 0 1
18336: RET
// export function hHackInvisible ; var i , j ; begin
18337: LD_INT 0
18339: PPUSH
18340: PPUSH
18341: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18342: LD_ADDR_VAR 0 2
18346: PUSH
18347: LD_INT 21
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PPUSH
18357: CALL_OW 69
18361: PUSH
18362: FOR_IN
18363: IFFALSE 18387
// if IsSelected ( i ) then
18365: LD_VAR 0 2
18369: PPUSH
18370: CALL_OW 306
18374: IFFALSE 18385
// ComForceInvisible ( i ) ;
18376: LD_VAR 0 2
18380: PPUSH
18381: CALL_OW 496
18385: GO 18362
18387: POP
18388: POP
// end ;
18389: LD_VAR 0 1
18393: RET
// export function hHackChangeYourSide ; begin
18394: LD_INT 0
18396: PPUSH
// if your_side = 8 then
18397: LD_OWVAR 2
18401: PUSH
18402: LD_INT 8
18404: EQUAL
18405: IFFALSE 18417
// your_side := 0 else
18407: LD_ADDR_OWVAR 2
18411: PUSH
18412: LD_INT 0
18414: ST_TO_ADDR
18415: GO 18431
// your_side := your_side + 1 ;
18417: LD_ADDR_OWVAR 2
18421: PUSH
18422: LD_OWVAR 2
18426: PUSH
18427: LD_INT 1
18429: PLUS
18430: ST_TO_ADDR
// end ;
18431: LD_VAR 0 1
18435: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18436: LD_INT 0
18438: PPUSH
18439: PPUSH
18440: PPUSH
// for i in all_units do
18441: LD_ADDR_VAR 0 2
18445: PUSH
18446: LD_OWVAR 3
18450: PUSH
18451: FOR_IN
18452: IFFALSE 18530
// if IsSelected ( i ) then
18454: LD_VAR 0 2
18458: PPUSH
18459: CALL_OW 306
18463: IFFALSE 18528
// begin j := GetSide ( i ) ;
18465: LD_ADDR_VAR 0 3
18469: PUSH
18470: LD_VAR 0 2
18474: PPUSH
18475: CALL_OW 255
18479: ST_TO_ADDR
// if j = 8 then
18480: LD_VAR 0 3
18484: PUSH
18485: LD_INT 8
18487: EQUAL
18488: IFFALSE 18500
// j := 0 else
18490: LD_ADDR_VAR 0 3
18494: PUSH
18495: LD_INT 0
18497: ST_TO_ADDR
18498: GO 18514
// j := j + 1 ;
18500: LD_ADDR_VAR 0 3
18504: PUSH
18505: LD_VAR 0 3
18509: PUSH
18510: LD_INT 1
18512: PLUS
18513: ST_TO_ADDR
// SetSide ( i , j ) ;
18514: LD_VAR 0 2
18518: PPUSH
18519: LD_VAR 0 3
18523: PPUSH
18524: CALL_OW 235
// end ;
18528: GO 18451
18530: POP
18531: POP
// end ;
18532: LD_VAR 0 1
18536: RET
// export function hHackFog ; begin
18537: LD_INT 0
18539: PPUSH
// FogOff ( true ) ;
18540: LD_INT 1
18542: PPUSH
18543: CALL_OW 344
// end ;
18547: LD_VAR 0 1
18551: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18552: LD_INT 0
18554: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18555: LD_VAR 0 1
18559: PPUSH
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_VAR 0 3
18569: PPUSH
18570: LD_INT 1
18572: PPUSH
18573: LD_INT 1
18575: PPUSH
18576: CALL_OW 483
// CenterOnXY ( x , y ) ;
18580: LD_VAR 0 2
18584: PPUSH
18585: LD_VAR 0 3
18589: PPUSH
18590: CALL_OW 84
// end ;
18594: LD_VAR 0 4
18598: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18599: LD_INT 0
18601: PPUSH
18602: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18603: LD_VAR 0 1
18607: NOT
18608: PUSH
18609: LD_VAR 0 2
18613: PPUSH
18614: LD_VAR 0 3
18618: PPUSH
18619: CALL_OW 488
18623: NOT
18624: OR
18625: PUSH
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 266
18635: PUSH
18636: LD_INT 3
18638: NONEQUAL
18639: PUSH
18640: LD_VAR 0 1
18644: PPUSH
18645: CALL_OW 247
18649: PUSH
18650: LD_INT 1
18652: EQUAL
18653: NOT
18654: AND
18655: OR
18656: IFFALSE 18660
// exit ;
18658: GO 18809
// if GetType ( factory ) = unit_human then
18660: LD_VAR 0 1
18664: PPUSH
18665: CALL_OW 247
18669: PUSH
18670: LD_INT 1
18672: EQUAL
18673: IFFALSE 18690
// factory := IsInUnit ( factory ) ;
18675: LD_ADDR_VAR 0 1
18679: PUSH
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 310
18689: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL_OW 266
18699: PUSH
18700: LD_INT 3
18702: NONEQUAL
18703: IFFALSE 18707
// exit ;
18705: GO 18809
// if HexInfo ( x , y ) = factory then
18707: LD_VAR 0 2
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: CALL_OW 428
18721: PUSH
18722: LD_VAR 0 1
18726: EQUAL
18727: IFFALSE 18754
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18729: LD_ADDR_EXP 98
18733: PUSH
18734: LD_EXP 98
18738: PPUSH
18739: LD_VAR 0 1
18743: PPUSH
18744: LD_INT 0
18746: PPUSH
18747: CALL_OW 1
18751: ST_TO_ADDR
18752: GO 18805
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18754: LD_ADDR_EXP 98
18758: PUSH
18759: LD_EXP 98
18763: PPUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: LD_VAR 0 1
18773: PPUSH
18774: CALL_OW 255
18778: PUSH
18779: LD_VAR 0 1
18783: PUSH
18784: LD_VAR 0 2
18788: PUSH
18789: LD_VAR 0 3
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PPUSH
18800: CALL_OW 1
18804: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18805: CALL 18814 0 0
// end ;
18809: LD_VAR 0 4
18813: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
18818: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18819: LD_STRING resetFactoryWaypoint();
18821: PPUSH
18822: CALL_OW 559
// if factoryWaypoints then
18826: LD_EXP 98
18830: IFFALSE 18956
// begin list := PrepareArray ( factoryWaypoints ) ;
18832: LD_ADDR_VAR 0 3
18836: PUSH
18837: LD_EXP 98
18841: PPUSH
18842: CALL 65249 0 1
18846: ST_TO_ADDR
// for i := 1 to list do
18847: LD_ADDR_VAR 0 2
18851: PUSH
18852: DOUBLE
18853: LD_INT 1
18855: DEC
18856: ST_TO_ADDR
18857: LD_VAR 0 3
18861: PUSH
18862: FOR_TO
18863: IFFALSE 18954
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18865: LD_STRING setFactoryWaypointXY(
18867: PUSH
18868: LD_VAR 0 3
18872: PUSH
18873: LD_VAR 0 2
18877: ARRAY
18878: PUSH
18879: LD_INT 1
18881: ARRAY
18882: STR
18883: PUSH
18884: LD_STRING ,
18886: STR
18887: PUSH
18888: LD_VAR 0 3
18892: PUSH
18893: LD_VAR 0 2
18897: ARRAY
18898: PUSH
18899: LD_INT 2
18901: ARRAY
18902: STR
18903: PUSH
18904: LD_STRING ,
18906: STR
18907: PUSH
18908: LD_VAR 0 3
18912: PUSH
18913: LD_VAR 0 2
18917: ARRAY
18918: PUSH
18919: LD_INT 3
18921: ARRAY
18922: STR
18923: PUSH
18924: LD_STRING ,
18926: STR
18927: PUSH
18928: LD_VAR 0 3
18932: PUSH
18933: LD_VAR 0 2
18937: ARRAY
18938: PUSH
18939: LD_INT 4
18941: ARRAY
18942: STR
18943: PUSH
18944: LD_STRING )
18946: STR
18947: PPUSH
18948: CALL_OW 559
18952: GO 18862
18954: POP
18955: POP
// end ; end ;
18956: LD_VAR 0 1
18960: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
18961: LD_INT 0
18963: PPUSH
// if HexInfo ( x , y ) = warehouse then
18964: LD_VAR 0 2
18968: PPUSH
18969: LD_VAR 0 3
18973: PPUSH
18974: CALL_OW 428
18978: PUSH
18979: LD_VAR 0 1
18983: EQUAL
18984: IFFALSE 19011
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
18986: LD_ADDR_EXP 99
18990: PUSH
18991: LD_EXP 99
18995: PPUSH
18996: LD_VAR 0 1
19000: PPUSH
19001: LD_INT 0
19003: PPUSH
19004: CALL_OW 1
19008: ST_TO_ADDR
19009: GO 19062
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19011: LD_ADDR_EXP 99
19015: PUSH
19016: LD_EXP 99
19020: PPUSH
19021: LD_VAR 0 1
19025: PPUSH
19026: LD_VAR 0 1
19030: PPUSH
19031: CALL_OW 255
19035: PUSH
19036: LD_VAR 0 1
19040: PUSH
19041: LD_VAR 0 2
19045: PUSH
19046: LD_VAR 0 3
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 1
19061: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19062: CALL 19071 0 0
// end ;
19066: LD_VAR 0 4
19070: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19071: LD_INT 0
19073: PPUSH
19074: PPUSH
19075: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19076: LD_STRING resetWarehouseGatheringPoints();
19078: PPUSH
19079: CALL_OW 559
// if warehouseGatheringPoints then
19083: LD_EXP 99
19087: IFFALSE 19213
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19089: LD_ADDR_VAR 0 3
19093: PUSH
19094: LD_EXP 99
19098: PPUSH
19099: CALL 65249 0 1
19103: ST_TO_ADDR
// for i := 1 to list do
19104: LD_ADDR_VAR 0 2
19108: PUSH
19109: DOUBLE
19110: LD_INT 1
19112: DEC
19113: ST_TO_ADDR
19114: LD_VAR 0 3
19118: PUSH
19119: FOR_TO
19120: IFFALSE 19211
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19122: LD_STRING setWarehouseGatheringPointXY(
19124: PUSH
19125: LD_VAR 0 3
19129: PUSH
19130: LD_VAR 0 2
19134: ARRAY
19135: PUSH
19136: LD_INT 1
19138: ARRAY
19139: STR
19140: PUSH
19141: LD_STRING ,
19143: STR
19144: PUSH
19145: LD_VAR 0 3
19149: PUSH
19150: LD_VAR 0 2
19154: ARRAY
19155: PUSH
19156: LD_INT 2
19158: ARRAY
19159: STR
19160: PUSH
19161: LD_STRING ,
19163: STR
19164: PUSH
19165: LD_VAR 0 3
19169: PUSH
19170: LD_VAR 0 2
19174: ARRAY
19175: PUSH
19176: LD_INT 3
19178: ARRAY
19179: STR
19180: PUSH
19181: LD_STRING ,
19183: STR
19184: PUSH
19185: LD_VAR 0 3
19189: PUSH
19190: LD_VAR 0 2
19194: ARRAY
19195: PUSH
19196: LD_INT 4
19198: ARRAY
19199: STR
19200: PUSH
19201: LD_STRING )
19203: STR
19204: PPUSH
19205: CALL_OW 559
19209: GO 19119
19211: POP
19212: POP
// end ; end ;
19213: LD_VAR 0 1
19217: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19218: LD_EXP 99
19222: IFFALSE 19907
19224: GO 19226
19226: DISABLE
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
// begin enable ;
19238: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_EXP 99
19248: PPUSH
19249: CALL 65249 0 1
19253: ST_TO_ADDR
// if not list then
19254: LD_VAR 0 3
19258: NOT
19259: IFFALSE 19263
// exit ;
19261: GO 19907
// for i := 1 to list do
19263: LD_ADDR_VAR 0 1
19267: PUSH
19268: DOUBLE
19269: LD_INT 1
19271: DEC
19272: ST_TO_ADDR
19273: LD_VAR 0 3
19277: PUSH
19278: FOR_TO
19279: IFFALSE 19905
// begin depot := list [ i ] [ 2 ] ;
19281: LD_ADDR_VAR 0 8
19285: PUSH
19286: LD_VAR 0 3
19290: PUSH
19291: LD_VAR 0 1
19295: ARRAY
19296: PUSH
19297: LD_INT 2
19299: ARRAY
19300: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19301: LD_ADDR_VAR 0 5
19305: PUSH
19306: LD_VAR 0 3
19310: PUSH
19311: LD_VAR 0 1
19315: ARRAY
19316: PUSH
19317: LD_INT 1
19319: ARRAY
19320: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19321: LD_VAR 0 8
19325: PPUSH
19326: CALL_OW 301
19330: PUSH
19331: LD_VAR 0 5
19335: PUSH
19336: LD_VAR 0 8
19340: PPUSH
19341: CALL_OW 255
19345: NONEQUAL
19346: OR
19347: IFFALSE 19376
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19349: LD_ADDR_EXP 99
19353: PUSH
19354: LD_EXP 99
19358: PPUSH
19359: LD_VAR 0 8
19363: PPUSH
19364: LD_INT 0
19366: PPUSH
19367: CALL_OW 1
19371: ST_TO_ADDR
// exit ;
19372: POP
19373: POP
19374: GO 19907
// end ; x := list [ i ] [ 3 ] ;
19376: LD_ADDR_VAR 0 6
19380: PUSH
19381: LD_VAR 0 3
19385: PUSH
19386: LD_VAR 0 1
19390: ARRAY
19391: PUSH
19392: LD_INT 3
19394: ARRAY
19395: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19396: LD_ADDR_VAR 0 7
19400: PUSH
19401: LD_VAR 0 3
19405: PUSH
19406: LD_VAR 0 1
19410: ARRAY
19411: PUSH
19412: LD_INT 4
19414: ARRAY
19415: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19416: LD_ADDR_VAR 0 9
19420: PUSH
19421: LD_VAR 0 6
19425: PPUSH
19426: LD_VAR 0 7
19430: PPUSH
19431: LD_INT 16
19433: PPUSH
19434: CALL 63837 0 3
19438: ST_TO_ADDR
// if not cratesNearbyPoint then
19439: LD_VAR 0 9
19443: NOT
19444: IFFALSE 19450
// exit ;
19446: POP
19447: POP
19448: GO 19907
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19450: LD_ADDR_VAR 0 4
19454: PUSH
19455: LD_INT 22
19457: PUSH
19458: LD_VAR 0 5
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 3
19469: PUSH
19470: LD_INT 60
19472: PUSH
19473: EMPTY
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 91
19482: PUSH
19483: LD_VAR 0 8
19487: PUSH
19488: LD_INT 6
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: LD_INT 25
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 25
19511: PUSH
19512: LD_INT 16
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 69
19534: PUSH
19535: LD_VAR 0 8
19539: PPUSH
19540: CALL_OW 313
19544: PPUSH
19545: LD_INT 3
19547: PUSH
19548: LD_INT 60
19550: PUSH
19551: EMPTY
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: LD_INT 25
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 25
19573: PUSH
19574: LD_INT 16
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PPUSH
19590: CALL_OW 72
19594: UNION
19595: ST_TO_ADDR
// if tmp then
19596: LD_VAR 0 4
19600: IFFALSE 19680
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19602: LD_ADDR_VAR 0 4
19606: PUSH
19607: LD_VAR 0 4
19611: PPUSH
19612: LD_INT 3
19614: PPUSH
19615: CALL 61806 0 2
19619: ST_TO_ADDR
// for j in tmp do
19620: LD_ADDR_VAR 0 2
19624: PUSH
19625: LD_VAR 0 4
19629: PUSH
19630: FOR_IN
19631: IFFALSE 19674
// begin if IsInUnit ( j ) then
19633: LD_VAR 0 2
19637: PPUSH
19638: CALL_OW 310
19642: IFFALSE 19653
// ComExit ( j ) ;
19644: LD_VAR 0 2
19648: PPUSH
19649: CALL 61889 0 1
// AddComCollect ( j , x , y ) ;
19653: LD_VAR 0 2
19657: PPUSH
19658: LD_VAR 0 6
19662: PPUSH
19663: LD_VAR 0 7
19667: PPUSH
19668: CALL_OW 177
// end ;
19672: GO 19630
19674: POP
19675: POP
// exit ;
19676: POP
19677: POP
19678: GO 19907
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19680: LD_ADDR_VAR 0 4
19684: PUSH
19685: LD_INT 22
19687: PUSH
19688: LD_VAR 0 5
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 91
19699: PUSH
19700: LD_VAR 0 8
19704: PUSH
19705: LD_INT 8
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 2
19715: PUSH
19716: LD_INT 34
19718: PUSH
19719: LD_INT 12
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 34
19728: PUSH
19729: LD_INT 51
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 34
19738: PUSH
19739: LD_INT 32
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 34
19748: PUSH
19749: LD_INT 89
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: LIST
19767: PPUSH
19768: CALL_OW 69
19772: ST_TO_ADDR
// if tmp then
19773: LD_VAR 0 4
19777: IFFALSE 19903
// begin for j in tmp do
19779: LD_ADDR_VAR 0 2
19783: PUSH
19784: LD_VAR 0 4
19788: PUSH
19789: FOR_IN
19790: IFFALSE 19901
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19792: LD_VAR 0 2
19796: PPUSH
19797: CALL_OW 262
19801: PUSH
19802: LD_INT 3
19804: EQUAL
19805: PUSH
19806: LD_VAR 0 2
19810: PPUSH
19811: CALL_OW 261
19815: PUSH
19816: LD_INT 20
19818: GREATER
19819: OR
19820: PUSH
19821: LD_VAR 0 2
19825: PPUSH
19826: CALL_OW 314
19830: NOT
19831: AND
19832: PUSH
19833: LD_VAR 0 2
19837: PPUSH
19838: CALL_OW 263
19842: PUSH
19843: LD_INT 1
19845: NONEQUAL
19846: PUSH
19847: LD_VAR 0 2
19851: PPUSH
19852: CALL_OW 311
19856: OR
19857: AND
19858: IFFALSE 19899
// begin ComCollect ( j , x , y ) ;
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 6
19869: PPUSH
19870: LD_VAR 0 7
19874: PPUSH
19875: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19879: LD_VAR 0 2
19883: PPUSH
19884: LD_VAR 0 8
19888: PPUSH
19889: CALL_OW 172
// exit ;
19893: POP
19894: POP
19895: POP
19896: POP
19897: GO 19907
// end ;
19899: GO 19789
19901: POP
19902: POP
// end ; end ;
19903: GO 19278
19905: POP
19906: POP
// end ; end_of_file
19907: PPOPN 9
19909: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19910: LD_INT 0
19912: PPUSH
19913: PPUSH
19914: PPUSH
19915: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL_OW 264
19925: PUSH
19926: LD_INT 91
19928: EQUAL
19929: IFFALSE 20001
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19931: LD_INT 68
19933: PPUSH
19934: LD_VAR 0 1
19938: PPUSH
19939: CALL_OW 255
19943: PPUSH
19944: CALL_OW 321
19948: PUSH
19949: LD_INT 2
19951: EQUAL
19952: IFFALSE 19964
// eff := 70 else
19954: LD_ADDR_VAR 0 4
19958: PUSH
19959: LD_INT 70
19961: ST_TO_ADDR
19962: GO 19972
// eff := 30 ;
19964: LD_ADDR_VAR 0 4
19968: PUSH
19969: LD_INT 30
19971: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19972: LD_VAR 0 1
19976: PPUSH
19977: CALL_OW 250
19981: PPUSH
19982: LD_VAR 0 1
19986: PPUSH
19987: CALL_OW 251
19991: PPUSH
19992: LD_VAR 0 4
19996: PPUSH
19997: CALL_OW 495
// end ; end ;
20001: LD_VAR 0 2
20005: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20006: LD_INT 0
20008: PPUSH
// end ;
20009: LD_VAR 0 4
20013: RET
// export function SOS_Command ( cmd ) ; begin
20014: LD_INT 0
20016: PPUSH
// end ;
20017: LD_VAR 0 2
20021: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20022: LD_INT 0
20024: PPUSH
// end ;
20025: LD_VAR 0 6
20029: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20030: LD_INT 0
20032: PPUSH
20033: PPUSH
// if not vehicle or not factory then
20034: LD_VAR 0 1
20038: NOT
20039: PUSH
20040: LD_VAR 0 2
20044: NOT
20045: OR
20046: IFFALSE 20050
// exit ;
20048: GO 20281
// if factoryWaypoints >= factory then
20050: LD_EXP 98
20054: PUSH
20055: LD_VAR 0 2
20059: GREATEREQUAL
20060: IFFALSE 20281
// if factoryWaypoints [ factory ] then
20062: LD_EXP 98
20066: PUSH
20067: LD_VAR 0 2
20071: ARRAY
20072: IFFALSE 20281
// begin if GetControl ( vehicle ) = control_manual then
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 263
20083: PUSH
20084: LD_INT 1
20086: EQUAL
20087: IFFALSE 20168
// begin driver := IsDrivenBy ( vehicle ) ;
20089: LD_ADDR_VAR 0 4
20093: PUSH
20094: LD_VAR 0 1
20098: PPUSH
20099: CALL_OW 311
20103: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20104: LD_VAR 0 4
20108: PPUSH
20109: LD_EXP 98
20113: PUSH
20114: LD_VAR 0 2
20118: ARRAY
20119: PUSH
20120: LD_INT 3
20122: ARRAY
20123: PPUSH
20124: LD_EXP 98
20128: PUSH
20129: LD_VAR 0 2
20133: ARRAY
20134: PUSH
20135: LD_INT 4
20137: ARRAY
20138: PPUSH
20139: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20143: LD_VAR 0 4
20147: PPUSH
20148: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20152: LD_VAR 0 4
20156: PPUSH
20157: LD_VAR 0 2
20161: PPUSH
20162: CALL_OW 180
// end else
20166: GO 20281
// if GetControl ( vehicle ) = control_remote then
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 263
20177: PUSH
20178: LD_INT 2
20180: EQUAL
20181: IFFALSE 20242
// begin wait ( 0 0$2 ) ;
20183: LD_INT 70
20185: PPUSH
20186: CALL_OW 67
// if Connect ( vehicle ) then
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL 32130 0 1
20199: IFFALSE 20240
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20201: LD_VAR 0 1
20205: PPUSH
20206: LD_EXP 98
20210: PUSH
20211: LD_VAR 0 2
20215: ARRAY
20216: PUSH
20217: LD_INT 3
20219: ARRAY
20220: PPUSH
20221: LD_EXP 98
20225: PUSH
20226: LD_VAR 0 2
20230: ARRAY
20231: PUSH
20232: LD_INT 4
20234: ARRAY
20235: PPUSH
20236: CALL_OW 171
// end else
20240: GO 20281
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20242: LD_VAR 0 1
20246: PPUSH
20247: LD_EXP 98
20251: PUSH
20252: LD_VAR 0 2
20256: ARRAY
20257: PUSH
20258: LD_INT 3
20260: ARRAY
20261: PPUSH
20262: LD_EXP 98
20266: PUSH
20267: LD_VAR 0 2
20271: ARRAY
20272: PUSH
20273: LD_INT 4
20275: ARRAY
20276: PPUSH
20277: CALL_OW 171
// end ; end ;
20281: LD_VAR 0 3
20285: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20286: LD_INT 0
20288: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20289: LD_VAR 0 1
20293: PUSH
20294: LD_INT 250
20296: EQUAL
20297: PUSH
20298: LD_VAR 0 2
20302: PPUSH
20303: CALL_OW 264
20307: PUSH
20308: LD_INT 81
20310: EQUAL
20311: AND
20312: IFFALSE 20333
// MinerPlaceMine ( unit , x , y ) ;
20314: LD_VAR 0 2
20318: PPUSH
20319: LD_VAR 0 4
20323: PPUSH
20324: LD_VAR 0 5
20328: PPUSH
20329: CALL 22718 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20333: LD_VAR 0 1
20337: PUSH
20338: LD_INT 251
20340: EQUAL
20341: PUSH
20342: LD_VAR 0 2
20346: PPUSH
20347: CALL_OW 264
20351: PUSH
20352: LD_INT 81
20354: EQUAL
20355: AND
20356: IFFALSE 20377
// MinerDetonateMine ( unit , x , y ) ;
20358: LD_VAR 0 2
20362: PPUSH
20363: LD_VAR 0 4
20367: PPUSH
20368: LD_VAR 0 5
20372: PPUSH
20373: CALL 22993 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20377: LD_VAR 0 1
20381: PUSH
20382: LD_INT 252
20384: EQUAL
20385: PUSH
20386: LD_VAR 0 2
20390: PPUSH
20391: CALL_OW 264
20395: PUSH
20396: LD_INT 81
20398: EQUAL
20399: AND
20400: IFFALSE 20421
// MinerCreateMinefield ( unit , x , y ) ;
20402: LD_VAR 0 2
20406: PPUSH
20407: LD_VAR 0 4
20411: PPUSH
20412: LD_VAR 0 5
20416: PPUSH
20417: CALL 23410 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20421: LD_VAR 0 1
20425: PUSH
20426: LD_INT 253
20428: EQUAL
20429: PUSH
20430: LD_VAR 0 2
20434: PPUSH
20435: CALL_OW 257
20439: PUSH
20440: LD_INT 5
20442: EQUAL
20443: AND
20444: IFFALSE 20465
// ComBinocular ( unit , x , y ) ;
20446: LD_VAR 0 2
20450: PPUSH
20451: LD_VAR 0 4
20455: PPUSH
20456: LD_VAR 0 5
20460: PPUSH
20461: CALL 23779 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20465: LD_VAR 0 1
20469: PUSH
20470: LD_INT 254
20472: EQUAL
20473: PUSH
20474: LD_VAR 0 2
20478: PPUSH
20479: CALL_OW 264
20483: PUSH
20484: LD_INT 99
20486: EQUAL
20487: AND
20488: PUSH
20489: LD_VAR 0 3
20493: PPUSH
20494: CALL_OW 263
20498: PUSH
20499: LD_INT 3
20501: EQUAL
20502: AND
20503: IFFALSE 20519
// HackDestroyVehicle ( unit , selectedUnit ) ;
20505: LD_VAR 0 2
20509: PPUSH
20510: LD_VAR 0 3
20514: PPUSH
20515: CALL 22082 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20519: LD_VAR 0 1
20523: PUSH
20524: LD_INT 255
20526: EQUAL
20527: PUSH
20528: LD_VAR 0 2
20532: PPUSH
20533: CALL_OW 264
20537: PUSH
20538: LD_INT 14
20540: PUSH
20541: LD_INT 53
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: IN
20548: AND
20549: PUSH
20550: LD_VAR 0 4
20554: PPUSH
20555: LD_VAR 0 5
20559: PPUSH
20560: CALL_OW 488
20564: AND
20565: IFFALSE 20589
// CutTreeXYR ( unit , x , y , 12 ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_VAR 0 4
20576: PPUSH
20577: LD_VAR 0 5
20581: PPUSH
20582: LD_INT 12
20584: PPUSH
20585: CALL 20652 0 4
// if cmd = 256 then
20589: LD_VAR 0 1
20593: PUSH
20594: LD_INT 256
20596: EQUAL
20597: IFFALSE 20618
// SetFactoryWaypoint ( unit , x , y ) ;
20599: LD_VAR 0 2
20603: PPUSH
20604: LD_VAR 0 4
20608: PPUSH
20609: LD_VAR 0 5
20613: PPUSH
20614: CALL 18599 0 3
// if cmd = 257 then
20618: LD_VAR 0 1
20622: PUSH
20623: LD_INT 257
20625: EQUAL
20626: IFFALSE 20647
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20628: LD_VAR 0 2
20632: PPUSH
20633: LD_VAR 0 4
20637: PPUSH
20638: LD_VAR 0 5
20642: PPUSH
20643: CALL 18961 0 3
// end ;
20647: LD_VAR 0 6
20651: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20652: LD_INT 0
20654: PPUSH
20655: PPUSH
20656: PPUSH
20657: PPUSH
20658: PPUSH
20659: PPUSH
20660: PPUSH
20661: PPUSH
20662: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20663: LD_VAR 0 1
20667: NOT
20668: PUSH
20669: LD_VAR 0 2
20673: PPUSH
20674: LD_VAR 0 3
20678: PPUSH
20679: CALL_OW 488
20683: NOT
20684: OR
20685: PUSH
20686: LD_VAR 0 4
20690: NOT
20691: OR
20692: IFFALSE 20696
// exit ;
20694: GO 21036
// list := [ ] ;
20696: LD_ADDR_VAR 0 13
20700: PUSH
20701: EMPTY
20702: ST_TO_ADDR
// if x - r < 0 then
20703: LD_VAR 0 2
20707: PUSH
20708: LD_VAR 0 4
20712: MINUS
20713: PUSH
20714: LD_INT 0
20716: LESS
20717: IFFALSE 20729
// min_x := 0 else
20719: LD_ADDR_VAR 0 7
20723: PUSH
20724: LD_INT 0
20726: ST_TO_ADDR
20727: GO 20745
// min_x := x - r ;
20729: LD_ADDR_VAR 0 7
20733: PUSH
20734: LD_VAR 0 2
20738: PUSH
20739: LD_VAR 0 4
20743: MINUS
20744: ST_TO_ADDR
// if y - r < 0 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_VAR 0 4
20754: MINUS
20755: PUSH
20756: LD_INT 0
20758: LESS
20759: IFFALSE 20771
// min_y := 0 else
20761: LD_ADDR_VAR 0 8
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
20769: GO 20787
// min_y := y - r ;
20771: LD_ADDR_VAR 0 8
20775: PUSH
20776: LD_VAR 0 3
20780: PUSH
20781: LD_VAR 0 4
20785: MINUS
20786: ST_TO_ADDR
// max_x := x + r ;
20787: LD_ADDR_VAR 0 9
20791: PUSH
20792: LD_VAR 0 2
20796: PUSH
20797: LD_VAR 0 4
20801: PLUS
20802: ST_TO_ADDR
// max_y := y + r ;
20803: LD_ADDR_VAR 0 10
20807: PUSH
20808: LD_VAR 0 3
20812: PUSH
20813: LD_VAR 0 4
20817: PLUS
20818: ST_TO_ADDR
// for _x = min_x to max_x do
20819: LD_ADDR_VAR 0 11
20823: PUSH
20824: DOUBLE
20825: LD_VAR 0 7
20829: DEC
20830: ST_TO_ADDR
20831: LD_VAR 0 9
20835: PUSH
20836: FOR_TO
20837: IFFALSE 20954
// for _y = min_y to max_y do
20839: LD_ADDR_VAR 0 12
20843: PUSH
20844: DOUBLE
20845: LD_VAR 0 8
20849: DEC
20850: ST_TO_ADDR
20851: LD_VAR 0 10
20855: PUSH
20856: FOR_TO
20857: IFFALSE 20950
// begin if not ValidHex ( _x , _y ) then
20859: LD_VAR 0 11
20863: PPUSH
20864: LD_VAR 0 12
20868: PPUSH
20869: CALL_OW 488
20873: NOT
20874: IFFALSE 20878
// continue ;
20876: GO 20856
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20878: LD_VAR 0 11
20882: PPUSH
20883: LD_VAR 0 12
20887: PPUSH
20888: CALL_OW 351
20892: PUSH
20893: LD_VAR 0 11
20897: PPUSH
20898: LD_VAR 0 12
20902: PPUSH
20903: CALL_OW 554
20907: AND
20908: IFFALSE 20948
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20910: LD_ADDR_VAR 0 13
20914: PUSH
20915: LD_VAR 0 13
20919: PPUSH
20920: LD_VAR 0 13
20924: PUSH
20925: LD_INT 1
20927: PLUS
20928: PPUSH
20929: LD_VAR 0 11
20933: PUSH
20934: LD_VAR 0 12
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 2
20947: ST_TO_ADDR
// end ;
20948: GO 20856
20950: POP
20951: POP
20952: GO 20836
20954: POP
20955: POP
// if not list then
20956: LD_VAR 0 13
20960: NOT
20961: IFFALSE 20965
// exit ;
20963: GO 21036
// for i in list do
20965: LD_ADDR_VAR 0 6
20969: PUSH
20970: LD_VAR 0 13
20974: PUSH
20975: FOR_IN
20976: IFFALSE 21034
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20978: LD_VAR 0 1
20982: PPUSH
20983: LD_STRING M
20985: PUSH
20986: LD_VAR 0 6
20990: PUSH
20991: LD_INT 1
20993: ARRAY
20994: PUSH
20995: LD_VAR 0 6
20999: PUSH
21000: LD_INT 2
21002: ARRAY
21003: PUSH
21004: LD_INT 0
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: PPUSH
21028: CALL_OW 447
21032: GO 20975
21034: POP
21035: POP
// end ;
21036: LD_VAR 0 5
21040: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21041: LD_EXP 101
21045: NOT
21046: IFFALSE 21096
21048: GO 21050
21050: DISABLE
// begin initHack := true ;
21051: LD_ADDR_EXP 101
21055: PUSH
21056: LD_INT 1
21058: ST_TO_ADDR
// hackTanks := [ ] ;
21059: LD_ADDR_EXP 102
21063: PUSH
21064: EMPTY
21065: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21066: LD_ADDR_EXP 103
21070: PUSH
21071: EMPTY
21072: ST_TO_ADDR
// hackLimit := 3 ;
21073: LD_ADDR_EXP 104
21077: PUSH
21078: LD_INT 3
21080: ST_TO_ADDR
// hackDist := 12 ;
21081: LD_ADDR_EXP 105
21085: PUSH
21086: LD_INT 12
21088: ST_TO_ADDR
// hackCounter := [ ] ;
21089: LD_ADDR_EXP 106
21093: PUSH
21094: EMPTY
21095: ST_TO_ADDR
// end ;
21096: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21097: LD_EXP 101
21101: PUSH
21102: LD_INT 34
21104: PUSH
21105: LD_INT 99
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PPUSH
21112: CALL_OW 69
21116: AND
21117: IFFALSE 21370
21119: GO 21121
21121: DISABLE
21122: LD_INT 0
21124: PPUSH
21125: PPUSH
// begin enable ;
21126: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21127: LD_ADDR_VAR 0 1
21131: PUSH
21132: LD_INT 34
21134: PUSH
21135: LD_INT 99
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 69
21146: PUSH
21147: FOR_IN
21148: IFFALSE 21368
// begin if not i in hackTanks then
21150: LD_VAR 0 1
21154: PUSH
21155: LD_EXP 102
21159: IN
21160: NOT
21161: IFFALSE 21244
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21163: LD_ADDR_EXP 102
21167: PUSH
21168: LD_EXP 102
21172: PPUSH
21173: LD_EXP 102
21177: PUSH
21178: LD_INT 1
21180: PLUS
21181: PPUSH
21182: LD_VAR 0 1
21186: PPUSH
21187: CALL_OW 1
21191: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21192: LD_ADDR_EXP 103
21196: PUSH
21197: LD_EXP 103
21201: PPUSH
21202: LD_EXP 103
21206: PUSH
21207: LD_INT 1
21209: PLUS
21210: PPUSH
21211: EMPTY
21212: PPUSH
21213: CALL_OW 1
21217: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21218: LD_ADDR_EXP 106
21222: PUSH
21223: LD_EXP 106
21227: PPUSH
21228: LD_EXP 106
21232: PUSH
21233: LD_INT 1
21235: PLUS
21236: PPUSH
21237: EMPTY
21238: PPUSH
21239: CALL_OW 1
21243: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 302
21253: NOT
21254: IFFALSE 21267
// begin HackUnlinkAll ( i ) ;
21256: LD_VAR 0 1
21260: PPUSH
21261: CALL 21373 0 1
// continue ;
21265: GO 21147
// end ; HackCheckCapturedStatus ( i ) ;
21267: LD_VAR 0 1
21271: PPUSH
21272: CALL 21816 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21276: LD_ADDR_VAR 0 2
21280: PUSH
21281: LD_INT 81
21283: PUSH
21284: LD_VAR 0 1
21288: PPUSH
21289: CALL_OW 255
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 33
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 91
21310: PUSH
21311: LD_VAR 0 1
21315: PUSH
21316: LD_EXP 105
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 50
21328: PUSH
21329: EMPTY
21330: LIST
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: PPUSH
21338: CALL_OW 69
21342: ST_TO_ADDR
// if not tmp then
21343: LD_VAR 0 2
21347: NOT
21348: IFFALSE 21352
// continue ;
21350: GO 21147
// HackLink ( i , tmp ) ;
21352: LD_VAR 0 1
21356: PPUSH
21357: LD_VAR 0 2
21361: PPUSH
21362: CALL 21509 0 2
// end ;
21366: GO 21147
21368: POP
21369: POP
// end ;
21370: PPOPN 2
21372: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21373: LD_INT 0
21375: PPUSH
21376: PPUSH
21377: PPUSH
// if not hack in hackTanks then
21378: LD_VAR 0 1
21382: PUSH
21383: LD_EXP 102
21387: IN
21388: NOT
21389: IFFALSE 21393
// exit ;
21391: GO 21504
// index := GetElementIndex ( hackTanks , hack ) ;
21393: LD_ADDR_VAR 0 4
21397: PUSH
21398: LD_EXP 102
21402: PPUSH
21403: LD_VAR 0 1
21407: PPUSH
21408: CALL 28946 0 2
21412: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21413: LD_EXP 103
21417: PUSH
21418: LD_VAR 0 4
21422: ARRAY
21423: IFFALSE 21504
// begin for i in hackTanksCaptured [ index ] do
21425: LD_ADDR_VAR 0 3
21429: PUSH
21430: LD_EXP 103
21434: PUSH
21435: LD_VAR 0 4
21439: ARRAY
21440: PUSH
21441: FOR_IN
21442: IFFALSE 21468
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21444: LD_VAR 0 3
21448: PUSH
21449: LD_INT 1
21451: ARRAY
21452: PPUSH
21453: LD_VAR 0 3
21457: PUSH
21458: LD_INT 2
21460: ARRAY
21461: PPUSH
21462: CALL_OW 235
21466: GO 21441
21468: POP
21469: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21470: LD_ADDR_EXP 103
21474: PUSH
21475: LD_EXP 103
21479: PPUSH
21480: LD_VAR 0 4
21484: PPUSH
21485: EMPTY
21486: PPUSH
21487: CALL_OW 1
21491: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21492: LD_VAR 0 1
21496: PPUSH
21497: LD_INT 0
21499: PPUSH
21500: CALL_OW 505
// end ; end ;
21504: LD_VAR 0 2
21508: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21509: LD_INT 0
21511: PPUSH
21512: PPUSH
21513: PPUSH
// if not hack in hackTanks or not vehicles then
21514: LD_VAR 0 1
21518: PUSH
21519: LD_EXP 102
21523: IN
21524: NOT
21525: PUSH
21526: LD_VAR 0 2
21530: NOT
21531: OR
21532: IFFALSE 21536
// exit ;
21534: GO 21811
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21536: LD_ADDR_VAR 0 2
21540: PUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: LD_VAR 0 2
21550: PPUSH
21551: LD_INT 1
21553: PPUSH
21554: LD_INT 1
21556: PPUSH
21557: CALL 29596 0 4
21561: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21562: LD_ADDR_VAR 0 5
21566: PUSH
21567: LD_EXP 102
21571: PPUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL 28946 0 2
21581: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21582: LD_EXP 103
21586: PUSH
21587: LD_VAR 0 5
21591: ARRAY
21592: PUSH
21593: LD_EXP 104
21597: LESS
21598: IFFALSE 21787
// begin for i := 1 to vehicles do
21600: LD_ADDR_VAR 0 4
21604: PUSH
21605: DOUBLE
21606: LD_INT 1
21608: DEC
21609: ST_TO_ADDR
21610: LD_VAR 0 2
21614: PUSH
21615: FOR_TO
21616: IFFALSE 21785
// begin if hackTanksCaptured [ index ] = hackLimit then
21618: LD_EXP 103
21622: PUSH
21623: LD_VAR 0 5
21627: ARRAY
21628: PUSH
21629: LD_EXP 104
21633: EQUAL
21634: IFFALSE 21638
// break ;
21636: GO 21785
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21638: LD_ADDR_EXP 106
21642: PUSH
21643: LD_EXP 106
21647: PPUSH
21648: LD_VAR 0 5
21652: PPUSH
21653: LD_EXP 106
21657: PUSH
21658: LD_VAR 0 5
21662: ARRAY
21663: PUSH
21664: LD_INT 1
21666: PLUS
21667: PPUSH
21668: CALL_OW 1
21672: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21673: LD_ADDR_EXP 103
21677: PUSH
21678: LD_EXP 103
21682: PPUSH
21683: LD_VAR 0 5
21687: PUSH
21688: LD_EXP 103
21692: PUSH
21693: LD_VAR 0 5
21697: ARRAY
21698: PUSH
21699: LD_INT 1
21701: PLUS
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PPUSH
21707: LD_VAR 0 2
21711: PUSH
21712: LD_VAR 0 4
21716: ARRAY
21717: PUSH
21718: LD_VAR 0 2
21722: PUSH
21723: LD_VAR 0 4
21727: ARRAY
21728: PPUSH
21729: CALL_OW 255
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PPUSH
21738: CALL 29161 0 3
21742: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21743: LD_VAR 0 2
21747: PUSH
21748: LD_VAR 0 4
21752: ARRAY
21753: PPUSH
21754: LD_VAR 0 1
21758: PPUSH
21759: CALL_OW 255
21763: PPUSH
21764: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21768: LD_VAR 0 2
21772: PUSH
21773: LD_VAR 0 4
21777: ARRAY
21778: PPUSH
21779: CALL_OW 141
// end ;
21783: GO 21615
21785: POP
21786: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_EXP 103
21796: PUSH
21797: LD_VAR 0 5
21801: ARRAY
21802: PUSH
21803: LD_INT 0
21805: PLUS
21806: PPUSH
21807: CALL_OW 505
// end ;
21811: LD_VAR 0 3
21815: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21816: LD_INT 0
21818: PPUSH
21819: PPUSH
21820: PPUSH
21821: PPUSH
// if not hack in hackTanks then
21822: LD_VAR 0 1
21826: PUSH
21827: LD_EXP 102
21831: IN
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 22077
// index := GetElementIndex ( hackTanks , hack ) ;
21837: LD_ADDR_VAR 0 4
21841: PUSH
21842: LD_EXP 102
21846: PPUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL 28946 0 2
21856: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21857: LD_ADDR_VAR 0 3
21861: PUSH
21862: DOUBLE
21863: LD_EXP 103
21867: PUSH
21868: LD_VAR 0 4
21872: ARRAY
21873: INC
21874: ST_TO_ADDR
21875: LD_INT 1
21877: PUSH
21878: FOR_DOWNTO
21879: IFFALSE 22051
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21881: LD_ADDR_VAR 0 5
21885: PUSH
21886: LD_EXP 103
21890: PUSH
21891: LD_VAR 0 4
21895: ARRAY
21896: PUSH
21897: LD_VAR 0 3
21901: ARRAY
21902: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21903: LD_VAR 0 5
21907: PUSH
21908: LD_INT 1
21910: ARRAY
21911: PPUSH
21912: CALL_OW 302
21916: NOT
21917: PUSH
21918: LD_VAR 0 5
21922: PUSH
21923: LD_INT 1
21925: ARRAY
21926: PPUSH
21927: CALL_OW 255
21931: PUSH
21932: LD_VAR 0 1
21936: PPUSH
21937: CALL_OW 255
21941: NONEQUAL
21942: OR
21943: IFFALSE 22049
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21945: LD_VAR 0 5
21949: PUSH
21950: LD_INT 1
21952: ARRAY
21953: PPUSH
21954: CALL_OW 305
21958: PUSH
21959: LD_VAR 0 5
21963: PUSH
21964: LD_INT 1
21966: ARRAY
21967: PPUSH
21968: CALL_OW 255
21972: PUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 255
21982: EQUAL
21983: AND
21984: IFFALSE 22008
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21986: LD_VAR 0 5
21990: PUSH
21991: LD_INT 1
21993: ARRAY
21994: PPUSH
21995: LD_VAR 0 5
21999: PUSH
22000: LD_INT 2
22002: ARRAY
22003: PPUSH
22004: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22008: LD_ADDR_EXP 103
22012: PUSH
22013: LD_EXP 103
22017: PPUSH
22018: LD_VAR 0 4
22022: PPUSH
22023: LD_EXP 103
22027: PUSH
22028: LD_VAR 0 4
22032: ARRAY
22033: PPUSH
22034: LD_VAR 0 3
22038: PPUSH
22039: CALL_OW 3
22043: PPUSH
22044: CALL_OW 1
22048: ST_TO_ADDR
// end ; end ;
22049: GO 21878
22051: POP
22052: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22053: LD_VAR 0 1
22057: PPUSH
22058: LD_EXP 103
22062: PUSH
22063: LD_VAR 0 4
22067: ARRAY
22068: PUSH
22069: LD_INT 0
22071: PLUS
22072: PPUSH
22073: CALL_OW 505
// end ;
22077: LD_VAR 0 2
22081: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22082: LD_INT 0
22084: PPUSH
22085: PPUSH
22086: PPUSH
22087: PPUSH
// if not hack in hackTanks then
22088: LD_VAR 0 1
22092: PUSH
22093: LD_EXP 102
22097: IN
22098: NOT
22099: IFFALSE 22103
// exit ;
22101: GO 22188
// index := GetElementIndex ( hackTanks , hack ) ;
22103: LD_ADDR_VAR 0 5
22107: PUSH
22108: LD_EXP 102
22112: PPUSH
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL 28946 0 2
22122: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22123: LD_ADDR_VAR 0 4
22127: PUSH
22128: DOUBLE
22129: LD_INT 1
22131: DEC
22132: ST_TO_ADDR
22133: LD_EXP 103
22137: PUSH
22138: LD_VAR 0 5
22142: ARRAY
22143: PUSH
22144: FOR_TO
22145: IFFALSE 22186
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22147: LD_EXP 103
22151: PUSH
22152: LD_VAR 0 5
22156: ARRAY
22157: PUSH
22158: LD_VAR 0 4
22162: ARRAY
22163: PUSH
22164: LD_INT 1
22166: ARRAY
22167: PUSH
22168: LD_VAR 0 2
22172: EQUAL
22173: IFFALSE 22184
// KillUnit ( vehicle ) ;
22175: LD_VAR 0 2
22179: PPUSH
22180: CALL_OW 66
22184: GO 22144
22186: POP
22187: POP
// end ;
22188: LD_VAR 0 3
22192: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22193: LD_EXP 107
22197: NOT
22198: IFFALSE 22233
22200: GO 22202
22202: DISABLE
// begin initMiner := true ;
22203: LD_ADDR_EXP 107
22207: PUSH
22208: LD_INT 1
22210: ST_TO_ADDR
// minersList := [ ] ;
22211: LD_ADDR_EXP 108
22215: PUSH
22216: EMPTY
22217: ST_TO_ADDR
// minerMinesList := [ ] ;
22218: LD_ADDR_EXP 109
22222: PUSH
22223: EMPTY
22224: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22225: LD_ADDR_EXP 110
22229: PUSH
22230: LD_INT 5
22232: ST_TO_ADDR
// end ;
22233: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22234: LD_EXP 107
22238: PUSH
22239: LD_INT 34
22241: PUSH
22242: LD_INT 81
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PPUSH
22249: CALL_OW 69
22253: AND
22254: IFFALSE 22715
22256: GO 22258
22258: DISABLE
22259: LD_INT 0
22261: PPUSH
22262: PPUSH
22263: PPUSH
22264: PPUSH
// begin enable ;
22265: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22266: LD_ADDR_VAR 0 1
22270: PUSH
22271: LD_INT 34
22273: PUSH
22274: LD_INT 81
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PPUSH
22281: CALL_OW 69
22285: PUSH
22286: FOR_IN
22287: IFFALSE 22359
// begin if not i in minersList then
22289: LD_VAR 0 1
22293: PUSH
22294: LD_EXP 108
22298: IN
22299: NOT
22300: IFFALSE 22357
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22302: LD_ADDR_EXP 108
22306: PUSH
22307: LD_EXP 108
22311: PPUSH
22312: LD_EXP 108
22316: PUSH
22317: LD_INT 1
22319: PLUS
22320: PPUSH
22321: LD_VAR 0 1
22325: PPUSH
22326: CALL_OW 1
22330: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22331: LD_ADDR_EXP 109
22335: PUSH
22336: LD_EXP 109
22340: PPUSH
22341: LD_EXP 109
22345: PUSH
22346: LD_INT 1
22348: PLUS
22349: PPUSH
22350: EMPTY
22351: PPUSH
22352: CALL_OW 1
22356: ST_TO_ADDR
// end end ;
22357: GO 22286
22359: POP
22360: POP
// for i := minerMinesList downto 1 do
22361: LD_ADDR_VAR 0 1
22365: PUSH
22366: DOUBLE
22367: LD_EXP 109
22371: INC
22372: ST_TO_ADDR
22373: LD_INT 1
22375: PUSH
22376: FOR_DOWNTO
22377: IFFALSE 22713
// begin if IsLive ( minersList [ i ] ) then
22379: LD_EXP 108
22383: PUSH
22384: LD_VAR 0 1
22388: ARRAY
22389: PPUSH
22390: CALL_OW 300
22394: IFFALSE 22422
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22396: LD_EXP 108
22400: PUSH
22401: LD_VAR 0 1
22405: ARRAY
22406: PPUSH
22407: LD_EXP 109
22411: PUSH
22412: LD_VAR 0 1
22416: ARRAY
22417: PPUSH
22418: CALL_OW 505
// if not minerMinesList [ i ] then
22422: LD_EXP 109
22426: PUSH
22427: LD_VAR 0 1
22431: ARRAY
22432: NOT
22433: IFFALSE 22437
// continue ;
22435: GO 22376
// for j := minerMinesList [ i ] downto 1 do
22437: LD_ADDR_VAR 0 2
22441: PUSH
22442: DOUBLE
22443: LD_EXP 109
22447: PUSH
22448: LD_VAR 0 1
22452: ARRAY
22453: INC
22454: ST_TO_ADDR
22455: LD_INT 1
22457: PUSH
22458: FOR_DOWNTO
22459: IFFALSE 22709
// begin side := GetSide ( minersList [ i ] ) ;
22461: LD_ADDR_VAR 0 3
22465: PUSH
22466: LD_EXP 108
22470: PUSH
22471: LD_VAR 0 1
22475: ARRAY
22476: PPUSH
22477: CALL_OW 255
22481: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22482: LD_ADDR_VAR 0 4
22486: PUSH
22487: LD_EXP 109
22491: PUSH
22492: LD_VAR 0 1
22496: ARRAY
22497: PUSH
22498: LD_VAR 0 2
22502: ARRAY
22503: PUSH
22504: LD_INT 1
22506: ARRAY
22507: PPUSH
22508: LD_EXP 109
22512: PUSH
22513: LD_VAR 0 1
22517: ARRAY
22518: PUSH
22519: LD_VAR 0 2
22523: ARRAY
22524: PUSH
22525: LD_INT 2
22527: ARRAY
22528: PPUSH
22529: CALL_OW 428
22533: ST_TO_ADDR
// if not tmp then
22534: LD_VAR 0 4
22538: NOT
22539: IFFALSE 22543
// continue ;
22541: GO 22458
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22543: LD_VAR 0 4
22547: PUSH
22548: LD_INT 81
22550: PUSH
22551: LD_VAR 0 3
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL_OW 69
22564: IN
22565: PUSH
22566: LD_EXP 109
22570: PUSH
22571: LD_VAR 0 1
22575: ARRAY
22576: PUSH
22577: LD_VAR 0 2
22581: ARRAY
22582: PUSH
22583: LD_INT 1
22585: ARRAY
22586: PPUSH
22587: LD_EXP 109
22591: PUSH
22592: LD_VAR 0 1
22596: ARRAY
22597: PUSH
22598: LD_VAR 0 2
22602: ARRAY
22603: PUSH
22604: LD_INT 2
22606: ARRAY
22607: PPUSH
22608: CALL_OW 458
22612: AND
22613: IFFALSE 22707
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22615: LD_EXP 109
22619: PUSH
22620: LD_VAR 0 1
22624: ARRAY
22625: PUSH
22626: LD_VAR 0 2
22630: ARRAY
22631: PUSH
22632: LD_INT 1
22634: ARRAY
22635: PPUSH
22636: LD_EXP 109
22640: PUSH
22641: LD_VAR 0 1
22645: ARRAY
22646: PUSH
22647: LD_VAR 0 2
22651: ARRAY
22652: PUSH
22653: LD_INT 2
22655: ARRAY
22656: PPUSH
22657: LD_VAR 0 3
22661: PPUSH
22662: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22666: LD_ADDR_EXP 109
22670: PUSH
22671: LD_EXP 109
22675: PPUSH
22676: LD_VAR 0 1
22680: PPUSH
22681: LD_EXP 109
22685: PUSH
22686: LD_VAR 0 1
22690: ARRAY
22691: PPUSH
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 3
22701: PPUSH
22702: CALL_OW 1
22706: ST_TO_ADDR
// end ; end ;
22707: GO 22458
22709: POP
22710: POP
// end ;
22711: GO 22376
22713: POP
22714: POP
// end ;
22715: PPOPN 4
22717: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22718: LD_INT 0
22720: PPUSH
22721: PPUSH
// result := false ;
22722: LD_ADDR_VAR 0 4
22726: PUSH
22727: LD_INT 0
22729: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22730: LD_VAR 0 1
22734: PPUSH
22735: CALL_OW 264
22739: PUSH
22740: LD_INT 81
22742: EQUAL
22743: NOT
22744: IFFALSE 22748
// exit ;
22746: GO 22988
// index := GetElementIndex ( minersList , unit ) ;
22748: LD_ADDR_VAR 0 5
22752: PUSH
22753: LD_EXP 108
22757: PPUSH
22758: LD_VAR 0 1
22762: PPUSH
22763: CALL 28946 0 2
22767: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22768: LD_EXP 109
22772: PUSH
22773: LD_VAR 0 5
22777: ARRAY
22778: PUSH
22779: LD_EXP 110
22783: GREATEREQUAL
22784: IFFALSE 22788
// exit ;
22786: GO 22988
// ComMoveXY ( unit , x , y ) ;
22788: LD_VAR 0 1
22792: PPUSH
22793: LD_VAR 0 2
22797: PPUSH
22798: LD_VAR 0 3
22802: PPUSH
22803: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22807: LD_INT 35
22809: PPUSH
22810: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_VAR 0 2
22823: PPUSH
22824: LD_VAR 0 3
22828: PPUSH
22829: CALL 60301 0 3
22833: NOT
22834: PUSH
22835: LD_VAR 0 1
22839: PPUSH
22840: CALL_OW 314
22844: AND
22845: IFFALSE 22849
// exit ;
22847: GO 22988
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22849: LD_VAR 0 2
22853: PPUSH
22854: LD_VAR 0 3
22858: PPUSH
22859: CALL_OW 428
22863: PUSH
22864: LD_VAR 0 1
22868: EQUAL
22869: PUSH
22870: LD_VAR 0 1
22874: PPUSH
22875: CALL_OW 314
22879: NOT
22880: AND
22881: IFFALSE 22807
// PlaySoundXY ( x , y , PlantMine ) ;
22883: LD_VAR 0 2
22887: PPUSH
22888: LD_VAR 0 3
22892: PPUSH
22893: LD_STRING PlantMine
22895: PPUSH
22896: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22900: LD_VAR 0 2
22904: PPUSH
22905: LD_VAR 0 3
22909: PPUSH
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL_OW 255
22919: PPUSH
22920: LD_INT 0
22922: PPUSH
22923: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22927: LD_ADDR_EXP 109
22931: PUSH
22932: LD_EXP 109
22936: PPUSH
22937: LD_VAR 0 5
22941: PUSH
22942: LD_EXP 109
22946: PUSH
22947: LD_VAR 0 5
22951: ARRAY
22952: PUSH
22953: LD_INT 1
22955: PLUS
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PPUSH
22961: LD_VAR 0 2
22965: PUSH
22966: LD_VAR 0 3
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL 29161 0 3
22979: ST_TO_ADDR
// result := true ;
22980: LD_ADDR_VAR 0 4
22984: PUSH
22985: LD_INT 1
22987: ST_TO_ADDR
// end ;
22988: LD_VAR 0 4
22992: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22993: LD_INT 0
22995: PPUSH
22996: PPUSH
22997: PPUSH
// if not unit in minersList then
22998: LD_VAR 0 1
23002: PUSH
23003: LD_EXP 108
23007: IN
23008: NOT
23009: IFFALSE 23013
// exit ;
23011: GO 23405
// index := GetElementIndex ( minersList , unit ) ;
23013: LD_ADDR_VAR 0 6
23017: PUSH
23018: LD_EXP 108
23022: PPUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL 28946 0 2
23032: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23033: LD_ADDR_VAR 0 5
23037: PUSH
23038: DOUBLE
23039: LD_EXP 109
23043: PUSH
23044: LD_VAR 0 6
23048: ARRAY
23049: INC
23050: ST_TO_ADDR
23051: LD_INT 1
23053: PUSH
23054: FOR_DOWNTO
23055: IFFALSE 23216
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23057: LD_EXP 109
23061: PUSH
23062: LD_VAR 0 6
23066: ARRAY
23067: PUSH
23068: LD_VAR 0 5
23072: ARRAY
23073: PUSH
23074: LD_INT 1
23076: ARRAY
23077: PUSH
23078: LD_VAR 0 2
23082: EQUAL
23083: PUSH
23084: LD_EXP 109
23088: PUSH
23089: LD_VAR 0 6
23093: ARRAY
23094: PUSH
23095: LD_VAR 0 5
23099: ARRAY
23100: PUSH
23101: LD_INT 2
23103: ARRAY
23104: PUSH
23105: LD_VAR 0 3
23109: EQUAL
23110: AND
23111: IFFALSE 23214
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23113: LD_EXP 109
23117: PUSH
23118: LD_VAR 0 6
23122: ARRAY
23123: PUSH
23124: LD_VAR 0 5
23128: ARRAY
23129: PUSH
23130: LD_INT 1
23132: ARRAY
23133: PPUSH
23134: LD_EXP 109
23138: PUSH
23139: LD_VAR 0 6
23143: ARRAY
23144: PUSH
23145: LD_VAR 0 5
23149: ARRAY
23150: PUSH
23151: LD_INT 2
23153: ARRAY
23154: PPUSH
23155: LD_VAR 0 1
23159: PPUSH
23160: CALL_OW 255
23164: PPUSH
23165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23169: LD_ADDR_EXP 109
23173: PUSH
23174: LD_EXP 109
23178: PPUSH
23179: LD_VAR 0 6
23183: PPUSH
23184: LD_EXP 109
23188: PUSH
23189: LD_VAR 0 6
23193: ARRAY
23194: PPUSH
23195: LD_VAR 0 5
23199: PPUSH
23200: CALL_OW 3
23204: PPUSH
23205: CALL_OW 1
23209: ST_TO_ADDR
// exit ;
23210: POP
23211: POP
23212: GO 23405
// end ; end ;
23214: GO 23054
23216: POP
23217: POP
// for i := minerMinesList [ index ] downto 1 do
23218: LD_ADDR_VAR 0 5
23222: PUSH
23223: DOUBLE
23224: LD_EXP 109
23228: PUSH
23229: LD_VAR 0 6
23233: ARRAY
23234: INC
23235: ST_TO_ADDR
23236: LD_INT 1
23238: PUSH
23239: FOR_DOWNTO
23240: IFFALSE 23403
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23242: LD_EXP 109
23246: PUSH
23247: LD_VAR 0 6
23251: ARRAY
23252: PUSH
23253: LD_VAR 0 5
23257: ARRAY
23258: PUSH
23259: LD_INT 1
23261: ARRAY
23262: PPUSH
23263: LD_EXP 109
23267: PUSH
23268: LD_VAR 0 6
23272: ARRAY
23273: PUSH
23274: LD_VAR 0 5
23278: ARRAY
23279: PUSH
23280: LD_INT 2
23282: ARRAY
23283: PPUSH
23284: LD_VAR 0 2
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: CALL_OW 298
23298: PUSH
23299: LD_INT 6
23301: LESS
23302: IFFALSE 23401
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23304: LD_EXP 109
23308: PUSH
23309: LD_VAR 0 6
23313: ARRAY
23314: PUSH
23315: LD_VAR 0 5
23319: ARRAY
23320: PUSH
23321: LD_INT 1
23323: ARRAY
23324: PPUSH
23325: LD_EXP 109
23329: PUSH
23330: LD_VAR 0 6
23334: ARRAY
23335: PUSH
23336: LD_VAR 0 5
23340: ARRAY
23341: PUSH
23342: LD_INT 2
23344: ARRAY
23345: PPUSH
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 255
23355: PPUSH
23356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23360: LD_ADDR_EXP 109
23364: PUSH
23365: LD_EXP 109
23369: PPUSH
23370: LD_VAR 0 6
23374: PPUSH
23375: LD_EXP 109
23379: PUSH
23380: LD_VAR 0 6
23384: ARRAY
23385: PPUSH
23386: LD_VAR 0 5
23390: PPUSH
23391: CALL_OW 3
23395: PPUSH
23396: CALL_OW 1
23400: ST_TO_ADDR
// end ; end ;
23401: GO 23239
23403: POP
23404: POP
// end ;
23405: LD_VAR 0 4
23409: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23410: LD_INT 0
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
23416: PPUSH
23417: PPUSH
23418: PPUSH
23419: PPUSH
23420: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23421: LD_VAR 0 1
23425: PPUSH
23426: CALL_OW 264
23430: PUSH
23431: LD_INT 81
23433: EQUAL
23434: NOT
23435: PUSH
23436: LD_VAR 0 1
23440: PUSH
23441: LD_EXP 108
23445: IN
23446: NOT
23447: OR
23448: IFFALSE 23452
// exit ;
23450: GO 23774
// index := GetElementIndex ( minersList , unit ) ;
23452: LD_ADDR_VAR 0 6
23456: PUSH
23457: LD_EXP 108
23461: PPUSH
23462: LD_VAR 0 1
23466: PPUSH
23467: CALL 28946 0 2
23471: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23472: LD_ADDR_VAR 0 8
23476: PUSH
23477: LD_EXP 110
23481: PUSH
23482: LD_EXP 109
23486: PUSH
23487: LD_VAR 0 6
23491: ARRAY
23492: MINUS
23493: ST_TO_ADDR
// if not minesFreeAmount then
23494: LD_VAR 0 8
23498: NOT
23499: IFFALSE 23503
// exit ;
23501: GO 23774
// tmp := [ ] ;
23503: LD_ADDR_VAR 0 7
23507: PUSH
23508: EMPTY
23509: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23510: LD_ADDR_VAR 0 5
23514: PUSH
23515: DOUBLE
23516: LD_INT 1
23518: DEC
23519: ST_TO_ADDR
23520: LD_VAR 0 8
23524: PUSH
23525: FOR_TO
23526: IFFALSE 23721
// begin _d := rand ( 0 , 5 ) ;
23528: LD_ADDR_VAR 0 11
23532: PUSH
23533: LD_INT 0
23535: PPUSH
23536: LD_INT 5
23538: PPUSH
23539: CALL_OW 12
23543: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23544: LD_ADDR_VAR 0 12
23548: PUSH
23549: LD_INT 2
23551: PPUSH
23552: LD_INT 6
23554: PPUSH
23555: CALL_OW 12
23559: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23560: LD_ADDR_VAR 0 9
23564: PUSH
23565: LD_VAR 0 2
23569: PPUSH
23570: LD_VAR 0 11
23574: PPUSH
23575: LD_VAR 0 12
23579: PPUSH
23580: CALL_OW 272
23584: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23585: LD_ADDR_VAR 0 10
23589: PUSH
23590: LD_VAR 0 3
23594: PPUSH
23595: LD_VAR 0 11
23599: PPUSH
23600: LD_VAR 0 12
23604: PPUSH
23605: CALL_OW 273
23609: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23610: LD_VAR 0 9
23614: PPUSH
23615: LD_VAR 0 10
23619: PPUSH
23620: CALL_OW 488
23624: PUSH
23625: LD_VAR 0 9
23629: PUSH
23630: LD_VAR 0 10
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_VAR 0 7
23643: IN
23644: NOT
23645: AND
23646: PUSH
23647: LD_VAR 0 9
23651: PPUSH
23652: LD_VAR 0 10
23656: PPUSH
23657: CALL_OW 458
23661: NOT
23662: AND
23663: IFFALSE 23705
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23665: LD_ADDR_VAR 0 7
23669: PUSH
23670: LD_VAR 0 7
23674: PPUSH
23675: LD_VAR 0 7
23679: PUSH
23680: LD_INT 1
23682: PLUS
23683: PPUSH
23684: LD_VAR 0 9
23688: PUSH
23689: LD_VAR 0 10
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 1
23702: ST_TO_ADDR
23703: GO 23719
// i := i - 1 ;
23705: LD_ADDR_VAR 0 5
23709: PUSH
23710: LD_VAR 0 5
23714: PUSH
23715: LD_INT 1
23717: MINUS
23718: ST_TO_ADDR
// end ;
23719: GO 23525
23721: POP
23722: POP
// for i in tmp do
23723: LD_ADDR_VAR 0 5
23727: PUSH
23728: LD_VAR 0 7
23732: PUSH
23733: FOR_IN
23734: IFFALSE 23772
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23736: LD_VAR 0 1
23740: PPUSH
23741: LD_VAR 0 5
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PPUSH
23750: LD_VAR 0 5
23754: PUSH
23755: LD_INT 2
23757: ARRAY
23758: PPUSH
23759: CALL 22718 0 3
23763: NOT
23764: IFFALSE 23770
// exit ;
23766: POP
23767: POP
23768: GO 23774
23770: GO 23733
23772: POP
23773: POP
// end ;
23774: LD_VAR 0 4
23778: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
23787: PPUSH
// if not GetClass ( unit ) = class_sniper then
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 257
23797: PUSH
23798: LD_INT 5
23800: EQUAL
23801: NOT
23802: IFFALSE 23806
// exit ;
23804: GO 24194
// dist := 8 ;
23806: LD_ADDR_VAR 0 5
23810: PUSH
23811: LD_INT 8
23813: ST_TO_ADDR
// viewRange := 12 ;
23814: LD_ADDR_VAR 0 7
23818: PUSH
23819: LD_INT 12
23821: ST_TO_ADDR
// side := GetSide ( unit ) ;
23822: LD_ADDR_VAR 0 6
23826: PUSH
23827: LD_VAR 0 1
23831: PPUSH
23832: CALL_OW 255
23836: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23837: LD_INT 61
23839: PPUSH
23840: LD_VAR 0 6
23844: PPUSH
23845: CALL_OW 321
23849: PUSH
23850: LD_INT 2
23852: EQUAL
23853: IFFALSE 23863
// viewRange := 16 ;
23855: LD_ADDR_VAR 0 7
23859: PUSH
23860: LD_INT 16
23862: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_VAR 0 2
23872: PPUSH
23873: LD_VAR 0 3
23877: PPUSH
23878: CALL_OW 297
23882: PUSH
23883: LD_VAR 0 5
23887: GREATER
23888: IFFALSE 23967
// begin ComMoveXY ( unit , x , y ) ;
23890: LD_VAR 0 1
23894: PPUSH
23895: LD_VAR 0 2
23899: PPUSH
23900: LD_VAR 0 3
23904: PPUSH
23905: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23909: LD_INT 35
23911: PPUSH
23912: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_VAR 0 2
23925: PPUSH
23926: LD_VAR 0 3
23930: PPUSH
23931: CALL 60301 0 3
23935: NOT
23936: IFFALSE 23940
// exit ;
23938: GO 24194
// until GetDistUnitXY ( unit , x , y ) < dist ;
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_VAR 0 2
23949: PPUSH
23950: LD_VAR 0 3
23954: PPUSH
23955: CALL_OW 297
23959: PUSH
23960: LD_VAR 0 5
23964: LESS
23965: IFFALSE 23909
// end ; ComTurnXY ( unit , x , y ) ;
23967: LD_VAR 0 1
23971: PPUSH
23972: LD_VAR 0 2
23976: PPUSH
23977: LD_VAR 0 3
23981: PPUSH
23982: CALL_OW 118
// wait ( 5 ) ;
23986: LD_INT 5
23988: PPUSH
23989: CALL_OW 67
// _d := GetDir ( unit ) ;
23993: LD_ADDR_VAR 0 10
23997: PUSH
23998: LD_VAR 0 1
24002: PPUSH
24003: CALL_OW 254
24007: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24008: LD_ADDR_VAR 0 8
24012: PUSH
24013: LD_VAR 0 1
24017: PPUSH
24018: CALL_OW 250
24022: PPUSH
24023: LD_VAR 0 10
24027: PPUSH
24028: LD_VAR 0 5
24032: PPUSH
24033: CALL_OW 272
24037: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24038: LD_ADDR_VAR 0 9
24042: PUSH
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL_OW 251
24052: PPUSH
24053: LD_VAR 0 10
24057: PPUSH
24058: LD_VAR 0 5
24062: PPUSH
24063: CALL_OW 273
24067: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24068: LD_VAR 0 8
24072: PPUSH
24073: LD_VAR 0 9
24077: PPUSH
24078: CALL_OW 488
24082: NOT
24083: IFFALSE 24087
// exit ;
24085: GO 24194
// ComAnimCustom ( unit , 1 ) ;
24087: LD_VAR 0 1
24091: PPUSH
24092: LD_INT 1
24094: PPUSH
24095: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24099: LD_VAR 0 8
24103: PPUSH
24104: LD_VAR 0 9
24108: PPUSH
24109: LD_VAR 0 6
24113: PPUSH
24114: LD_VAR 0 7
24118: PPUSH
24119: CALL_OW 330
// repeat wait ( 1 ) ;
24123: LD_INT 1
24125: PPUSH
24126: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: CALL_OW 316
24139: PUSH
24140: LD_VAR 0 1
24144: PPUSH
24145: CALL_OW 314
24149: OR
24150: PUSH
24151: LD_VAR 0 1
24155: PPUSH
24156: CALL_OW 302
24160: NOT
24161: OR
24162: PUSH
24163: LD_VAR 0 1
24167: PPUSH
24168: CALL_OW 301
24172: OR
24173: IFFALSE 24123
// RemoveSeeing ( _x , _y , side ) ;
24175: LD_VAR 0 8
24179: PPUSH
24180: LD_VAR 0 9
24184: PPUSH
24185: LD_VAR 0 6
24189: PPUSH
24190: CALL_OW 331
// end ; end_of_file
24194: LD_VAR 0 4
24198: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24199: LD_INT 0
24201: PPUSH
24202: PPUSH
// if exist_mode then
24203: LD_VAR 0 2
24207: IFFALSE 24232
// unit := CreateCharacter ( prefix & ident ) else
24209: LD_ADDR_VAR 0 5
24213: PUSH
24214: LD_VAR 0 3
24218: PUSH
24219: LD_VAR 0 1
24223: STR
24224: PPUSH
24225: CALL_OW 34
24229: ST_TO_ADDR
24230: GO 24247
// unit := NewCharacter ( ident ) ;
24232: LD_ADDR_VAR 0 5
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 25
24246: ST_TO_ADDR
// result := unit ;
24247: LD_ADDR_VAR 0 4
24251: PUSH
24252: LD_VAR 0 5
24256: ST_TO_ADDR
// end ;
24257: LD_VAR 0 4
24261: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24262: LD_INT 0
24264: PPUSH
24265: PPUSH
// if not side or not nation then
24266: LD_VAR 0 1
24270: NOT
24271: PUSH
24272: LD_VAR 0 2
24276: NOT
24277: OR
24278: IFFALSE 24282
// exit ;
24280: GO 25050
// case nation of nation_american :
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 1
24289: DOUBLE
24290: EQUAL
24291: IFTRUE 24295
24293: GO 24509
24295: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_INT 35
24303: PUSH
24304: LD_INT 45
24306: PUSH
24307: LD_INT 46
24309: PUSH
24310: LD_INT 47
24312: PUSH
24313: LD_INT 82
24315: PUSH
24316: LD_INT 83
24318: PUSH
24319: LD_INT 84
24321: PUSH
24322: LD_INT 85
24324: PUSH
24325: LD_INT 86
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 6
24336: PUSH
24337: LD_INT 15
24339: PUSH
24340: LD_INT 16
24342: PUSH
24343: LD_INT 7
24345: PUSH
24346: LD_INT 12
24348: PUSH
24349: LD_INT 13
24351: PUSH
24352: LD_INT 10
24354: PUSH
24355: LD_INT 14
24357: PUSH
24358: LD_INT 20
24360: PUSH
24361: LD_INT 21
24363: PUSH
24364: LD_INT 22
24366: PUSH
24367: LD_INT 25
24369: PUSH
24370: LD_INT 32
24372: PUSH
24373: LD_INT 27
24375: PUSH
24376: LD_INT 36
24378: PUSH
24379: LD_INT 69
24381: PUSH
24382: LD_INT 39
24384: PUSH
24385: LD_INT 34
24387: PUSH
24388: LD_INT 40
24390: PUSH
24391: LD_INT 48
24393: PUSH
24394: LD_INT 49
24396: PUSH
24397: LD_INT 50
24399: PUSH
24400: LD_INT 51
24402: PUSH
24403: LD_INT 52
24405: PUSH
24406: LD_INT 53
24408: PUSH
24409: LD_INT 54
24411: PUSH
24412: LD_INT 55
24414: PUSH
24415: LD_INT 56
24417: PUSH
24418: LD_INT 57
24420: PUSH
24421: LD_INT 58
24423: PUSH
24424: LD_INT 59
24426: PUSH
24427: LD_INT 60
24429: PUSH
24430: LD_INT 61
24432: PUSH
24433: LD_INT 62
24435: PUSH
24436: LD_INT 80
24438: PUSH
24439: LD_INT 82
24441: PUSH
24442: LD_INT 83
24444: PUSH
24445: LD_INT 84
24447: PUSH
24448: LD_INT 85
24450: PUSH
24451: LD_INT 86
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: ST_TO_ADDR
24507: GO 24974
24509: LD_INT 2
24511: DOUBLE
24512: EQUAL
24513: IFTRUE 24517
24515: GO 24743
24517: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24518: LD_ADDR_VAR 0 4
24522: PUSH
24523: LD_INT 35
24525: PUSH
24526: LD_INT 45
24528: PUSH
24529: LD_INT 46
24531: PUSH
24532: LD_INT 47
24534: PUSH
24535: LD_INT 82
24537: PUSH
24538: LD_INT 83
24540: PUSH
24541: LD_INT 84
24543: PUSH
24544: LD_INT 85
24546: PUSH
24547: LD_INT 87
24549: PUSH
24550: LD_INT 70
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: LD_INT 11
24558: PUSH
24559: LD_INT 3
24561: PUSH
24562: LD_INT 4
24564: PUSH
24565: LD_INT 5
24567: PUSH
24568: LD_INT 6
24570: PUSH
24571: LD_INT 15
24573: PUSH
24574: LD_INT 18
24576: PUSH
24577: LD_INT 7
24579: PUSH
24580: LD_INT 17
24582: PUSH
24583: LD_INT 8
24585: PUSH
24586: LD_INT 20
24588: PUSH
24589: LD_INT 21
24591: PUSH
24592: LD_INT 22
24594: PUSH
24595: LD_INT 72
24597: PUSH
24598: LD_INT 26
24600: PUSH
24601: LD_INT 69
24603: PUSH
24604: LD_INT 39
24606: PUSH
24607: LD_INT 40
24609: PUSH
24610: LD_INT 41
24612: PUSH
24613: LD_INT 42
24615: PUSH
24616: LD_INT 43
24618: PUSH
24619: LD_INT 48
24621: PUSH
24622: LD_INT 49
24624: PUSH
24625: LD_INT 50
24627: PUSH
24628: LD_INT 51
24630: PUSH
24631: LD_INT 52
24633: PUSH
24634: LD_INT 53
24636: PUSH
24637: LD_INT 54
24639: PUSH
24640: LD_INT 55
24642: PUSH
24643: LD_INT 56
24645: PUSH
24646: LD_INT 60
24648: PUSH
24649: LD_INT 61
24651: PUSH
24652: LD_INT 62
24654: PUSH
24655: LD_INT 66
24657: PUSH
24658: LD_INT 67
24660: PUSH
24661: LD_INT 68
24663: PUSH
24664: LD_INT 81
24666: PUSH
24667: LD_INT 82
24669: PUSH
24670: LD_INT 83
24672: PUSH
24673: LD_INT 84
24675: PUSH
24676: LD_INT 85
24678: PUSH
24679: LD_INT 87
24681: PUSH
24682: LD_INT 88
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: ST_TO_ADDR
24741: GO 24974
24743: LD_INT 3
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24973
24751: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24752: LD_ADDR_VAR 0 4
24756: PUSH
24757: LD_INT 46
24759: PUSH
24760: LD_INT 47
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: LD_INT 82
24771: PUSH
24772: LD_INT 83
24774: PUSH
24775: LD_INT 84
24777: PUSH
24778: LD_INT 85
24780: PUSH
24781: LD_INT 86
24783: PUSH
24784: LD_INT 11
24786: PUSH
24787: LD_INT 9
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 19
24795: PUSH
24796: LD_INT 21
24798: PUSH
24799: LD_INT 24
24801: PUSH
24802: LD_INT 22
24804: PUSH
24805: LD_INT 25
24807: PUSH
24808: LD_INT 28
24810: PUSH
24811: LD_INT 29
24813: PUSH
24814: LD_INT 30
24816: PUSH
24817: LD_INT 31
24819: PUSH
24820: LD_INT 37
24822: PUSH
24823: LD_INT 38
24825: PUSH
24826: LD_INT 32
24828: PUSH
24829: LD_INT 27
24831: PUSH
24832: LD_INT 33
24834: PUSH
24835: LD_INT 69
24837: PUSH
24838: LD_INT 39
24840: PUSH
24841: LD_INT 34
24843: PUSH
24844: LD_INT 40
24846: PUSH
24847: LD_INT 71
24849: PUSH
24850: LD_INT 23
24852: PUSH
24853: LD_INT 44
24855: PUSH
24856: LD_INT 48
24858: PUSH
24859: LD_INT 49
24861: PUSH
24862: LD_INT 50
24864: PUSH
24865: LD_INT 51
24867: PUSH
24868: LD_INT 52
24870: PUSH
24871: LD_INT 53
24873: PUSH
24874: LD_INT 54
24876: PUSH
24877: LD_INT 55
24879: PUSH
24880: LD_INT 56
24882: PUSH
24883: LD_INT 57
24885: PUSH
24886: LD_INT 58
24888: PUSH
24889: LD_INT 59
24891: PUSH
24892: LD_INT 63
24894: PUSH
24895: LD_INT 64
24897: PUSH
24898: LD_INT 65
24900: PUSH
24901: LD_INT 82
24903: PUSH
24904: LD_INT 83
24906: PUSH
24907: LD_INT 84
24909: PUSH
24910: LD_INT 85
24912: PUSH
24913: LD_INT 86
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: ST_TO_ADDR
24971: GO 24974
24973: POP
// if state > - 1 and state < 3 then
24974: LD_VAR 0 3
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: GREATER
24983: PUSH
24984: LD_VAR 0 3
24988: PUSH
24989: LD_INT 3
24991: LESS
24992: AND
24993: IFFALSE 25050
// for i in result do
24995: LD_ADDR_VAR 0 5
24999: PUSH
25000: LD_VAR 0 4
25004: PUSH
25005: FOR_IN
25006: IFFALSE 25048
// if GetTech ( i , side ) <> state then
25008: LD_VAR 0 5
25012: PPUSH
25013: LD_VAR 0 1
25017: PPUSH
25018: CALL_OW 321
25022: PUSH
25023: LD_VAR 0 3
25027: NONEQUAL
25028: IFFALSE 25046
// result := result diff i ;
25030: LD_ADDR_VAR 0 4
25034: PUSH
25035: LD_VAR 0 4
25039: PUSH
25040: LD_VAR 0 5
25044: DIFF
25045: ST_TO_ADDR
25046: GO 25005
25048: POP
25049: POP
// end ;
25050: LD_VAR 0 4
25054: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25055: LD_INT 0
25057: PPUSH
25058: PPUSH
25059: PPUSH
// result := true ;
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_INT 1
25067: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25068: LD_ADDR_VAR 0 5
25072: PUSH
25073: LD_VAR 0 2
25077: PPUSH
25078: CALL_OW 480
25082: ST_TO_ADDR
// if not tmp then
25083: LD_VAR 0 5
25087: NOT
25088: IFFALSE 25092
// exit ;
25090: GO 25141
// for i in tmp do
25092: LD_ADDR_VAR 0 4
25096: PUSH
25097: LD_VAR 0 5
25101: PUSH
25102: FOR_IN
25103: IFFALSE 25139
// if GetTech ( i , side ) <> state_researched then
25105: LD_VAR 0 4
25109: PPUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 321
25119: PUSH
25120: LD_INT 2
25122: NONEQUAL
25123: IFFALSE 25137
// begin result := false ;
25125: LD_ADDR_VAR 0 3
25129: PUSH
25130: LD_INT 0
25132: ST_TO_ADDR
// exit ;
25133: POP
25134: POP
25135: GO 25141
// end ;
25137: GO 25102
25139: POP
25140: POP
// end ;
25141: LD_VAR 0 3
25145: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25146: LD_INT 0
25148: PPUSH
25149: PPUSH
25150: PPUSH
25151: PPUSH
25152: PPUSH
25153: PPUSH
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
25160: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25161: LD_VAR 0 1
25165: NOT
25166: PUSH
25167: LD_VAR 0 1
25171: PPUSH
25172: CALL_OW 257
25176: PUSH
25177: LD_INT 9
25179: NONEQUAL
25180: OR
25181: IFFALSE 25185
// exit ;
25183: GO 25758
// side := GetSide ( unit ) ;
25185: LD_ADDR_VAR 0 9
25189: PUSH
25190: LD_VAR 0 1
25194: PPUSH
25195: CALL_OW 255
25199: ST_TO_ADDR
// tech_space := tech_spacanom ;
25200: LD_ADDR_VAR 0 12
25204: PUSH
25205: LD_INT 29
25207: ST_TO_ADDR
// tech_time := tech_taurad ;
25208: LD_ADDR_VAR 0 13
25212: PUSH
25213: LD_INT 28
25215: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25216: LD_ADDR_VAR 0 11
25220: PUSH
25221: LD_VAR 0 1
25225: PPUSH
25226: CALL_OW 310
25230: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25231: LD_VAR 0 11
25235: PPUSH
25236: CALL_OW 247
25240: PUSH
25241: LD_INT 2
25243: EQUAL
25244: IFFALSE 25248
// exit ;
25246: GO 25758
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25248: LD_ADDR_VAR 0 8
25252: PUSH
25253: LD_INT 81
25255: PUSH
25256: LD_VAR 0 9
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 3
25267: PUSH
25268: LD_INT 21
25270: PUSH
25271: LD_INT 3
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PPUSH
25286: CALL_OW 69
25290: ST_TO_ADDR
// if not tmp then
25291: LD_VAR 0 8
25295: NOT
25296: IFFALSE 25300
// exit ;
25298: GO 25758
// if in_unit then
25300: LD_VAR 0 11
25304: IFFALSE 25328
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25306: LD_ADDR_VAR 0 10
25310: PUSH
25311: LD_VAR 0 8
25315: PPUSH
25316: LD_VAR 0 11
25320: PPUSH
25321: CALL_OW 74
25325: ST_TO_ADDR
25326: GO 25348
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25328: LD_ADDR_VAR 0 10
25332: PUSH
25333: LD_VAR 0 8
25337: PPUSH
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL_OW 74
25347: ST_TO_ADDR
// if not enemy then
25348: LD_VAR 0 10
25352: NOT
25353: IFFALSE 25357
// exit ;
25355: GO 25758
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25357: LD_VAR 0 11
25361: PUSH
25362: LD_VAR 0 11
25366: PPUSH
25367: LD_VAR 0 10
25371: PPUSH
25372: CALL_OW 296
25376: PUSH
25377: LD_INT 13
25379: GREATER
25380: AND
25381: PUSH
25382: LD_VAR 0 1
25386: PPUSH
25387: LD_VAR 0 10
25391: PPUSH
25392: CALL_OW 296
25396: PUSH
25397: LD_INT 12
25399: GREATER
25400: OR
25401: IFFALSE 25405
// exit ;
25403: GO 25758
// missile := [ 1 ] ;
25405: LD_ADDR_VAR 0 14
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25416: LD_VAR 0 9
25420: PPUSH
25421: LD_VAR 0 12
25425: PPUSH
25426: CALL_OW 325
25430: IFFALSE 25459
// missile := Replace ( missile , missile + 1 , 2 ) ;
25432: LD_ADDR_VAR 0 14
25436: PUSH
25437: LD_VAR 0 14
25441: PPUSH
25442: LD_VAR 0 14
25446: PUSH
25447: LD_INT 1
25449: PLUS
25450: PPUSH
25451: LD_INT 2
25453: PPUSH
25454: CALL_OW 1
25458: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25459: LD_VAR 0 9
25463: PPUSH
25464: LD_VAR 0 13
25468: PPUSH
25469: CALL_OW 325
25473: PUSH
25474: LD_VAR 0 10
25478: PPUSH
25479: CALL_OW 255
25483: PPUSH
25484: LD_VAR 0 13
25488: PPUSH
25489: CALL_OW 325
25493: NOT
25494: AND
25495: IFFALSE 25524
// missile := Replace ( missile , missile + 1 , 3 ) ;
25497: LD_ADDR_VAR 0 14
25501: PUSH
25502: LD_VAR 0 14
25506: PPUSH
25507: LD_VAR 0 14
25511: PUSH
25512: LD_INT 1
25514: PLUS
25515: PPUSH
25516: LD_INT 3
25518: PPUSH
25519: CALL_OW 1
25523: ST_TO_ADDR
// if missile < 2 then
25524: LD_VAR 0 14
25528: PUSH
25529: LD_INT 2
25531: LESS
25532: IFFALSE 25536
// exit ;
25534: GO 25758
// x := GetX ( enemy ) ;
25536: LD_ADDR_VAR 0 4
25540: PUSH
25541: LD_VAR 0 10
25545: PPUSH
25546: CALL_OW 250
25550: ST_TO_ADDR
// y := GetY ( enemy ) ;
25551: LD_ADDR_VAR 0 5
25555: PUSH
25556: LD_VAR 0 10
25560: PPUSH
25561: CALL_OW 251
25565: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25566: LD_ADDR_VAR 0 6
25570: PUSH
25571: LD_VAR 0 4
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PPUSH
25580: LD_INT 1
25582: PPUSH
25583: CALL_OW 12
25587: PLUS
25588: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25589: LD_ADDR_VAR 0 7
25593: PUSH
25594: LD_VAR 0 5
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PPUSH
25603: LD_INT 1
25605: PPUSH
25606: CALL_OW 12
25610: PLUS
25611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25612: LD_VAR 0 6
25616: PPUSH
25617: LD_VAR 0 7
25621: PPUSH
25622: CALL_OW 488
25626: NOT
25627: IFFALSE 25649
// begin _x := x ;
25629: LD_ADDR_VAR 0 6
25633: PUSH
25634: LD_VAR 0 4
25638: ST_TO_ADDR
// _y := y ;
25639: LD_ADDR_VAR 0 7
25643: PUSH
25644: LD_VAR 0 5
25648: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25649: LD_ADDR_VAR 0 3
25653: PUSH
25654: LD_INT 1
25656: PPUSH
25657: LD_VAR 0 14
25661: PPUSH
25662: CALL_OW 12
25666: ST_TO_ADDR
// case i of 1 :
25667: LD_VAR 0 3
25671: PUSH
25672: LD_INT 1
25674: DOUBLE
25675: EQUAL
25676: IFTRUE 25680
25678: GO 25697
25680: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25681: LD_VAR 0 1
25685: PPUSH
25686: LD_VAR 0 10
25690: PPUSH
25691: CALL_OW 115
25695: GO 25758
25697: LD_INT 2
25699: DOUBLE
25700: EQUAL
25701: IFTRUE 25705
25703: GO 25727
25705: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25706: LD_VAR 0 1
25710: PPUSH
25711: LD_VAR 0 6
25715: PPUSH
25716: LD_VAR 0 7
25720: PPUSH
25721: CALL_OW 153
25725: GO 25758
25727: LD_INT 3
25729: DOUBLE
25730: EQUAL
25731: IFTRUE 25735
25733: GO 25757
25735: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25736: LD_VAR 0 1
25740: PPUSH
25741: LD_VAR 0 6
25745: PPUSH
25746: LD_VAR 0 7
25750: PPUSH
25751: CALL_OW 154
25755: GO 25758
25757: POP
// end ;
25758: LD_VAR 0 2
25762: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
25767: PPUSH
25768: PPUSH
25769: PPUSH
25770: PPUSH
// if not unit or not building then
25771: LD_VAR 0 1
25775: NOT
25776: PUSH
25777: LD_VAR 0 2
25781: NOT
25782: OR
25783: IFFALSE 25787
// exit ;
25785: GO 25945
// x := GetX ( building ) ;
25787: LD_ADDR_VAR 0 5
25791: PUSH
25792: LD_VAR 0 2
25796: PPUSH
25797: CALL_OW 250
25801: ST_TO_ADDR
// y := GetY ( building ) ;
25802: LD_ADDR_VAR 0 6
25806: PUSH
25807: LD_VAR 0 2
25811: PPUSH
25812: CALL_OW 251
25816: ST_TO_ADDR
// for i = 0 to 5 do
25817: LD_ADDR_VAR 0 4
25821: PUSH
25822: DOUBLE
25823: LD_INT 0
25825: DEC
25826: ST_TO_ADDR
25827: LD_INT 5
25829: PUSH
25830: FOR_TO
25831: IFFALSE 25943
// begin _x := ShiftX ( x , i , 3 ) ;
25833: LD_ADDR_VAR 0 7
25837: PUSH
25838: LD_VAR 0 5
25842: PPUSH
25843: LD_VAR 0 4
25847: PPUSH
25848: LD_INT 3
25850: PPUSH
25851: CALL_OW 272
25855: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25856: LD_ADDR_VAR 0 8
25860: PUSH
25861: LD_VAR 0 6
25865: PPUSH
25866: LD_VAR 0 4
25870: PPUSH
25871: LD_INT 3
25873: PPUSH
25874: CALL_OW 273
25878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25879: LD_VAR 0 7
25883: PPUSH
25884: LD_VAR 0 8
25888: PPUSH
25889: CALL_OW 488
25893: NOT
25894: IFFALSE 25898
// continue ;
25896: GO 25830
// if HexInfo ( _x , _y ) = 0 then
25898: LD_VAR 0 7
25902: PPUSH
25903: LD_VAR 0 8
25907: PPUSH
25908: CALL_OW 428
25912: PUSH
25913: LD_INT 0
25915: EQUAL
25916: IFFALSE 25941
// begin ComMoveXY ( unit , _x , _y ) ;
25918: LD_VAR 0 1
25922: PPUSH
25923: LD_VAR 0 7
25927: PPUSH
25928: LD_VAR 0 8
25932: PPUSH
25933: CALL_OW 111
// exit ;
25937: POP
25938: POP
25939: GO 25945
// end ; end ;
25941: GO 25830
25943: POP
25944: POP
// end ;
25945: LD_VAR 0 3
25949: RET
// export function ScanBase ( side , base_area ) ; begin
25950: LD_INT 0
25952: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25953: LD_ADDR_VAR 0 3
25957: PUSH
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_INT 81
25965: PUSH
25966: LD_VAR 0 1
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PPUSH
25975: CALL_OW 70
25979: ST_TO_ADDR
// end ;
25980: LD_VAR 0 3
25984: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
// result := false ;
25991: LD_ADDR_VAR 0 2
25995: PUSH
25996: LD_INT 0
25998: ST_TO_ADDR
// side := GetSide ( unit ) ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_VAR 0 1
26008: PPUSH
26009: CALL_OW 255
26013: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26014: LD_ADDR_VAR 0 4
26018: PUSH
26019: LD_VAR 0 1
26023: PPUSH
26024: CALL_OW 248
26028: ST_TO_ADDR
// case nat of 1 :
26029: LD_VAR 0 4
26033: PUSH
26034: LD_INT 1
26036: DOUBLE
26037: EQUAL
26038: IFTRUE 26042
26040: GO 26053
26042: POP
// tech := tech_lassight ; 2 :
26043: LD_ADDR_VAR 0 5
26047: PUSH
26048: LD_INT 12
26050: ST_TO_ADDR
26051: GO 26092
26053: LD_INT 2
26055: DOUBLE
26056: EQUAL
26057: IFTRUE 26061
26059: GO 26072
26061: POP
// tech := tech_mortar ; 3 :
26062: LD_ADDR_VAR 0 5
26066: PUSH
26067: LD_INT 41
26069: ST_TO_ADDR
26070: GO 26092
26072: LD_INT 3
26074: DOUBLE
26075: EQUAL
26076: IFTRUE 26080
26078: GO 26091
26080: POP
// tech := tech_bazooka ; end ;
26081: LD_ADDR_VAR 0 5
26085: PUSH
26086: LD_INT 44
26088: ST_TO_ADDR
26089: GO 26092
26091: POP
// if Researched ( side , tech ) then
26092: LD_VAR 0 3
26096: PPUSH
26097: LD_VAR 0 5
26101: PPUSH
26102: CALL_OW 325
26106: IFFALSE 26133
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26108: LD_ADDR_VAR 0 2
26112: PUSH
26113: LD_INT 5
26115: PUSH
26116: LD_INT 8
26118: PUSH
26119: LD_INT 9
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: LIST
26126: PUSH
26127: LD_VAR 0 4
26131: ARRAY
26132: ST_TO_ADDR
// end ;
26133: LD_VAR 0 2
26137: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26138: LD_INT 0
26140: PPUSH
26141: PPUSH
26142: PPUSH
// if not mines then
26143: LD_VAR 0 2
26147: NOT
26148: IFFALSE 26152
// exit ;
26150: GO 26296
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26152: LD_ADDR_VAR 0 5
26156: PUSH
26157: LD_INT 81
26159: PUSH
26160: LD_VAR 0 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 3
26171: PUSH
26172: LD_INT 21
26174: PUSH
26175: LD_INT 3
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PPUSH
26190: CALL_OW 69
26194: ST_TO_ADDR
// for i in mines do
26195: LD_ADDR_VAR 0 4
26199: PUSH
26200: LD_VAR 0 2
26204: PUSH
26205: FOR_IN
26206: IFFALSE 26294
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26208: LD_VAR 0 4
26212: PUSH
26213: LD_INT 1
26215: ARRAY
26216: PPUSH
26217: LD_VAR 0 4
26221: PUSH
26222: LD_INT 2
26224: ARRAY
26225: PPUSH
26226: CALL_OW 458
26230: NOT
26231: IFFALSE 26235
// continue ;
26233: GO 26205
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26235: LD_VAR 0 4
26239: PUSH
26240: LD_INT 1
26242: ARRAY
26243: PPUSH
26244: LD_VAR 0 4
26248: PUSH
26249: LD_INT 2
26251: ARRAY
26252: PPUSH
26253: CALL_OW 428
26257: PUSH
26258: LD_VAR 0 5
26262: IN
26263: IFFALSE 26292
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26265: LD_VAR 0 4
26269: PUSH
26270: LD_INT 1
26272: ARRAY
26273: PPUSH
26274: LD_VAR 0 4
26278: PUSH
26279: LD_INT 2
26281: ARRAY
26282: PPUSH
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 456
// end ;
26292: GO 26205
26294: POP
26295: POP
// end ;
26296: LD_VAR 0 3
26300: RET
// export function Count ( array ) ; begin
26301: LD_INT 0
26303: PPUSH
// result := array + 0 ;
26304: LD_ADDR_VAR 0 2
26308: PUSH
26309: LD_VAR 0 1
26313: PUSH
26314: LD_INT 0
26316: PLUS
26317: ST_TO_ADDR
// end ;
26318: LD_VAR 0 2
26322: RET
// export function IsEmpty ( building ) ; begin
26323: LD_INT 0
26325: PPUSH
// if not building then
26326: LD_VAR 0 1
26330: NOT
26331: IFFALSE 26335
// exit ;
26333: GO 26378
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26335: LD_ADDR_VAR 0 2
26339: PUSH
26340: LD_VAR 0 1
26344: PUSH
26345: LD_INT 22
26347: PUSH
26348: LD_VAR 0 1
26352: PPUSH
26353: CALL_OW 255
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 58
26364: PUSH
26365: EMPTY
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PPUSH
26372: CALL_OW 69
26376: IN
26377: ST_TO_ADDR
// end ;
26378: LD_VAR 0 2
26382: RET
// export function IsNotFull ( building ) ; var places ; begin
26383: LD_INT 0
26385: PPUSH
26386: PPUSH
// if not building then
26387: LD_VAR 0 1
26391: NOT
26392: IFFALSE 26396
// exit ;
26394: GO 26424
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26396: LD_ADDR_VAR 0 2
26400: PUSH
26401: LD_VAR 0 1
26405: PPUSH
26406: LD_INT 3
26408: PUSH
26409: LD_INT 62
26411: PUSH
26412: EMPTY
26413: LIST
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PPUSH
26419: CALL_OW 72
26423: ST_TO_ADDR
// end ;
26424: LD_VAR 0 2
26428: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26429: LD_INT 0
26431: PPUSH
26432: PPUSH
26433: PPUSH
26434: PPUSH
// tmp := [ ] ;
26435: LD_ADDR_VAR 0 3
26439: PUSH
26440: EMPTY
26441: ST_TO_ADDR
// list := [ ] ;
26442: LD_ADDR_VAR 0 5
26446: PUSH
26447: EMPTY
26448: ST_TO_ADDR
// for i = 16 to 25 do
26449: LD_ADDR_VAR 0 4
26453: PUSH
26454: DOUBLE
26455: LD_INT 16
26457: DEC
26458: ST_TO_ADDR
26459: LD_INT 25
26461: PUSH
26462: FOR_TO
26463: IFFALSE 26536
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26465: LD_ADDR_VAR 0 3
26469: PUSH
26470: LD_VAR 0 3
26474: PUSH
26475: LD_INT 22
26477: PUSH
26478: LD_VAR 0 1
26482: PPUSH
26483: CALL_OW 255
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 91
26494: PUSH
26495: LD_VAR 0 1
26499: PUSH
26500: LD_INT 6
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 30
26510: PUSH
26511: LD_VAR 0 4
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: PUSH
26525: EMPTY
26526: LIST
26527: PPUSH
26528: CALL_OW 69
26532: ADD
26533: ST_TO_ADDR
26534: GO 26462
26536: POP
26537: POP
// for i = 1 to tmp do
26538: LD_ADDR_VAR 0 4
26542: PUSH
26543: DOUBLE
26544: LD_INT 1
26546: DEC
26547: ST_TO_ADDR
26548: LD_VAR 0 3
26552: PUSH
26553: FOR_TO
26554: IFFALSE 26642
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26556: LD_ADDR_VAR 0 5
26560: PUSH
26561: LD_VAR 0 5
26565: PUSH
26566: LD_VAR 0 3
26570: PUSH
26571: LD_VAR 0 4
26575: ARRAY
26576: PPUSH
26577: CALL_OW 266
26581: PUSH
26582: LD_VAR 0 3
26586: PUSH
26587: LD_VAR 0 4
26591: ARRAY
26592: PPUSH
26593: CALL_OW 250
26597: PUSH
26598: LD_VAR 0 3
26602: PUSH
26603: LD_VAR 0 4
26607: ARRAY
26608: PPUSH
26609: CALL_OW 251
26613: PUSH
26614: LD_VAR 0 3
26618: PUSH
26619: LD_VAR 0 4
26623: ARRAY
26624: PPUSH
26625: CALL_OW 254
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: ADD
26639: ST_TO_ADDR
26640: GO 26553
26642: POP
26643: POP
// result := list ;
26644: LD_ADDR_VAR 0 2
26648: PUSH
26649: LD_VAR 0 5
26653: ST_TO_ADDR
// end ;
26654: LD_VAR 0 2
26658: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26659: LD_INT 0
26661: PPUSH
26662: PPUSH
26663: PPUSH
26664: PPUSH
26665: PPUSH
26666: PPUSH
26667: PPUSH
// if not factory then
26668: LD_VAR 0 1
26672: NOT
26673: IFFALSE 26677
// exit ;
26675: GO 27270
// if control = control_apeman then
26677: LD_VAR 0 4
26681: PUSH
26682: LD_INT 5
26684: EQUAL
26685: IFFALSE 26794
// begin tmp := UnitsInside ( factory ) ;
26687: LD_ADDR_VAR 0 8
26691: PUSH
26692: LD_VAR 0 1
26696: PPUSH
26697: CALL_OW 313
26701: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26702: LD_VAR 0 8
26706: PPUSH
26707: LD_INT 25
26709: PUSH
26710: LD_INT 12
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PPUSH
26717: CALL_OW 72
26721: NOT
26722: IFFALSE 26732
// control := control_manual ;
26724: LD_ADDR_VAR 0 4
26728: PUSH
26729: LD_INT 1
26731: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26732: LD_ADDR_VAR 0 8
26736: PUSH
26737: LD_VAR 0 1
26741: PPUSH
26742: CALL 26429 0 1
26746: ST_TO_ADDR
// if tmp then
26747: LD_VAR 0 8
26751: IFFALSE 26794
// begin for i in tmp do
26753: LD_ADDR_VAR 0 7
26757: PUSH
26758: LD_VAR 0 8
26762: PUSH
26763: FOR_IN
26764: IFFALSE 26792
// if i [ 1 ] = b_ext_radio then
26766: LD_VAR 0 7
26770: PUSH
26771: LD_INT 1
26773: ARRAY
26774: PUSH
26775: LD_INT 22
26777: EQUAL
26778: IFFALSE 26790
// begin control := control_remote ;
26780: LD_ADDR_VAR 0 4
26784: PUSH
26785: LD_INT 2
26787: ST_TO_ADDR
// break ;
26788: GO 26792
// end ;
26790: GO 26763
26792: POP
26793: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26794: LD_VAR 0 1
26798: PPUSH
26799: LD_VAR 0 2
26803: PPUSH
26804: LD_VAR 0 3
26808: PPUSH
26809: LD_VAR 0 4
26813: PPUSH
26814: LD_VAR 0 5
26818: PPUSH
26819: CALL_OW 448
26823: IFFALSE 26858
// begin result := [ chassis , engine , control , weapon ] ;
26825: LD_ADDR_VAR 0 6
26829: PUSH
26830: LD_VAR 0 2
26834: PUSH
26835: LD_VAR 0 3
26839: PUSH
26840: LD_VAR 0 4
26844: PUSH
26845: LD_VAR 0 5
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: ST_TO_ADDR
// exit ;
26856: GO 27270
// end ; _chassis := AvailableChassisList ( factory ) ;
26858: LD_ADDR_VAR 0 9
26862: PUSH
26863: LD_VAR 0 1
26867: PPUSH
26868: CALL_OW 475
26872: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26873: LD_ADDR_VAR 0 11
26877: PUSH
26878: LD_VAR 0 1
26882: PPUSH
26883: CALL_OW 476
26887: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26888: LD_ADDR_VAR 0 12
26892: PUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 477
26902: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26903: LD_ADDR_VAR 0 10
26907: PUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: CALL_OW 478
26917: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26918: LD_VAR 0 9
26922: NOT
26923: PUSH
26924: LD_VAR 0 11
26928: NOT
26929: OR
26930: PUSH
26931: LD_VAR 0 12
26935: NOT
26936: OR
26937: PUSH
26938: LD_VAR 0 10
26942: NOT
26943: OR
26944: IFFALSE 26979
// begin result := [ chassis , engine , control , weapon ] ;
26946: LD_ADDR_VAR 0 6
26950: PUSH
26951: LD_VAR 0 2
26955: PUSH
26956: LD_VAR 0 3
26960: PUSH
26961: LD_VAR 0 4
26965: PUSH
26966: LD_VAR 0 5
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: ST_TO_ADDR
// exit ;
26977: GO 27270
// end ; if not chassis in _chassis then
26979: LD_VAR 0 2
26983: PUSH
26984: LD_VAR 0 9
26988: IN
26989: NOT
26990: IFFALSE 27016
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26992: LD_ADDR_VAR 0 2
26996: PUSH
26997: LD_VAR 0 9
27001: PUSH
27002: LD_INT 1
27004: PPUSH
27005: LD_VAR 0 9
27009: PPUSH
27010: CALL_OW 12
27014: ARRAY
27015: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27016: LD_VAR 0 2
27020: PPUSH
27021: LD_VAR 0 3
27025: PPUSH
27026: CALL 27275 0 2
27030: NOT
27031: IFFALSE 27090
// repeat engine := _engine [ 1 ] ;
27033: LD_ADDR_VAR 0 3
27037: PUSH
27038: LD_VAR 0 11
27042: PUSH
27043: LD_INT 1
27045: ARRAY
27046: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27047: LD_ADDR_VAR 0 11
27051: PUSH
27052: LD_VAR 0 11
27056: PPUSH
27057: LD_INT 1
27059: PPUSH
27060: CALL_OW 3
27064: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27065: LD_VAR 0 2
27069: PPUSH
27070: LD_VAR 0 3
27074: PPUSH
27075: CALL 27275 0 2
27079: PUSH
27080: LD_VAR 0 11
27084: PUSH
27085: EMPTY
27086: EQUAL
27087: OR
27088: IFFALSE 27033
// if not control in _control then
27090: LD_VAR 0 4
27094: PUSH
27095: LD_VAR 0 12
27099: IN
27100: NOT
27101: IFFALSE 27127
// control := _control [ rand ( 1 , _control ) ] ;
27103: LD_ADDR_VAR 0 4
27107: PUSH
27108: LD_VAR 0 12
27112: PUSH
27113: LD_INT 1
27115: PPUSH
27116: LD_VAR 0 12
27120: PPUSH
27121: CALL_OW 12
27125: ARRAY
27126: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_VAR 0 5
27136: PPUSH
27137: CALL 27495 0 2
27141: NOT
27142: IFFALSE 27201
// repeat weapon := _weapon [ 1 ] ;
27144: LD_ADDR_VAR 0 5
27148: PUSH
27149: LD_VAR 0 10
27153: PUSH
27154: LD_INT 1
27156: ARRAY
27157: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27158: LD_ADDR_VAR 0 10
27162: PUSH
27163: LD_VAR 0 10
27167: PPUSH
27168: LD_INT 1
27170: PPUSH
27171: CALL_OW 3
27175: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27176: LD_VAR 0 2
27180: PPUSH
27181: LD_VAR 0 5
27185: PPUSH
27186: CALL 27495 0 2
27190: PUSH
27191: LD_VAR 0 10
27195: PUSH
27196: EMPTY
27197: EQUAL
27198: OR
27199: IFFALSE 27144
// result := [ ] ;
27201: LD_ADDR_VAR 0 6
27205: PUSH
27206: EMPTY
27207: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27208: LD_VAR 0 1
27212: PPUSH
27213: LD_VAR 0 2
27217: PPUSH
27218: LD_VAR 0 3
27222: PPUSH
27223: LD_VAR 0 4
27227: PPUSH
27228: LD_VAR 0 5
27232: PPUSH
27233: CALL_OW 448
27237: IFFALSE 27270
// result := [ chassis , engine , control , weapon ] ;
27239: LD_ADDR_VAR 0 6
27243: PUSH
27244: LD_VAR 0 2
27248: PUSH
27249: LD_VAR 0 3
27253: PUSH
27254: LD_VAR 0 4
27258: PUSH
27259: LD_VAR 0 5
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: ST_TO_ADDR
// end ;
27270: LD_VAR 0 6
27274: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27275: LD_INT 0
27277: PPUSH
// if not chassis or not engine then
27278: LD_VAR 0 1
27282: NOT
27283: PUSH
27284: LD_VAR 0 2
27288: NOT
27289: OR
27290: IFFALSE 27294
// exit ;
27292: GO 27490
// case engine of engine_solar :
27294: LD_VAR 0 2
27298: PUSH
27299: LD_INT 2
27301: DOUBLE
27302: EQUAL
27303: IFTRUE 27307
27305: GO 27345
27307: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27308: LD_ADDR_VAR 0 3
27312: PUSH
27313: LD_INT 11
27315: PUSH
27316: LD_INT 12
27318: PUSH
27319: LD_INT 13
27321: PUSH
27322: LD_INT 14
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: LD_INT 3
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: ST_TO_ADDR
27343: GO 27474
27345: LD_INT 1
27347: DOUBLE
27348: EQUAL
27349: IFTRUE 27353
27351: GO 27415
27353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27354: LD_ADDR_VAR 0 3
27358: PUSH
27359: LD_INT 11
27361: PUSH
27362: LD_INT 12
27364: PUSH
27365: LD_INT 13
27367: PUSH
27368: LD_INT 14
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: LD_INT 3
27379: PUSH
27380: LD_INT 4
27382: PUSH
27383: LD_INT 5
27385: PUSH
27386: LD_INT 21
27388: PUSH
27389: LD_INT 23
27391: PUSH
27392: LD_INT 22
27394: PUSH
27395: LD_INT 24
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
27413: GO 27474
27415: LD_INT 3
27417: DOUBLE
27418: EQUAL
27419: IFTRUE 27423
27421: GO 27473
27423: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27424: LD_ADDR_VAR 0 3
27428: PUSH
27429: LD_INT 13
27431: PUSH
27432: LD_INT 14
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: LD_INT 3
27440: PUSH
27441: LD_INT 4
27443: PUSH
27444: LD_INT 5
27446: PUSH
27447: LD_INT 21
27449: PUSH
27450: LD_INT 22
27452: PUSH
27453: LD_INT 23
27455: PUSH
27456: LD_INT 24
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: ST_TO_ADDR
27471: GO 27474
27473: POP
// result := ( chassis in result ) ;
27474: LD_ADDR_VAR 0 3
27478: PUSH
27479: LD_VAR 0 1
27483: PUSH
27484: LD_VAR 0 3
27488: IN
27489: ST_TO_ADDR
// end ;
27490: LD_VAR 0 3
27494: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27495: LD_INT 0
27497: PPUSH
// if not chassis or not weapon then
27498: LD_VAR 0 1
27502: NOT
27503: PUSH
27504: LD_VAR 0 2
27508: NOT
27509: OR
27510: IFFALSE 27514
// exit ;
27512: GO 28574
// case weapon of us_machine_gun :
27514: LD_VAR 0 2
27518: PUSH
27519: LD_INT 2
27521: DOUBLE
27522: EQUAL
27523: IFTRUE 27527
27525: GO 27557
27527: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27528: LD_ADDR_VAR 0 3
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: LD_INT 2
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: LD_INT 4
27544: PUSH
27545: LD_INT 5
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: ST_TO_ADDR
27555: GO 28558
27557: LD_INT 3
27559: DOUBLE
27560: EQUAL
27561: IFTRUE 27565
27563: GO 27595
27565: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27566: LD_ADDR_VAR 0 3
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: LD_INT 2
27576: PUSH
27577: LD_INT 3
27579: PUSH
27580: LD_INT 4
27582: PUSH
27583: LD_INT 5
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: ST_TO_ADDR
27593: GO 28558
27595: LD_INT 11
27597: DOUBLE
27598: EQUAL
27599: IFTRUE 27603
27601: GO 27633
27603: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27604: LD_ADDR_VAR 0 3
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: LD_INT 4
27620: PUSH
27621: LD_INT 5
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: ST_TO_ADDR
27631: GO 28558
27633: LD_INT 4
27635: DOUBLE
27636: EQUAL
27637: IFTRUE 27641
27639: GO 27667
27641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27642: LD_ADDR_VAR 0 3
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: LD_INT 3
27652: PUSH
27653: LD_INT 4
27655: PUSH
27656: LD_INT 5
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: ST_TO_ADDR
27665: GO 28558
27667: LD_INT 5
27669: DOUBLE
27670: EQUAL
27671: IFTRUE 27675
27673: GO 27701
27675: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_INT 2
27683: PUSH
27684: LD_INT 3
27686: PUSH
27687: LD_INT 4
27689: PUSH
27690: LD_INT 5
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: ST_TO_ADDR
27699: GO 28558
27701: LD_INT 9
27703: DOUBLE
27704: EQUAL
27705: IFTRUE 27709
27707: GO 27735
27709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27710: LD_ADDR_VAR 0 3
27714: PUSH
27715: LD_INT 2
27717: PUSH
27718: LD_INT 3
27720: PUSH
27721: LD_INT 4
27723: PUSH
27724: LD_INT 5
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: ST_TO_ADDR
27733: GO 28558
27735: LD_INT 7
27737: DOUBLE
27738: EQUAL
27739: IFTRUE 27743
27741: GO 27769
27743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27744: LD_ADDR_VAR 0 3
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: LD_INT 3
27754: PUSH
27755: LD_INT 4
27757: PUSH
27758: LD_INT 5
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: ST_TO_ADDR
27767: GO 28558
27769: LD_INT 12
27771: DOUBLE
27772: EQUAL
27773: IFTRUE 27777
27775: GO 27803
27777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27778: LD_ADDR_VAR 0 3
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: LD_INT 3
27788: PUSH
27789: LD_INT 4
27791: PUSH
27792: LD_INT 5
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: ST_TO_ADDR
27801: GO 28558
27803: LD_INT 13
27805: DOUBLE
27806: EQUAL
27807: IFTRUE 27811
27809: GO 27837
27811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: LD_INT 3
27822: PUSH
27823: LD_INT 4
27825: PUSH
27826: LD_INT 5
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
27835: GO 28558
27837: LD_INT 14
27839: DOUBLE
27840: EQUAL
27841: IFTRUE 27845
27843: GO 27863
27845: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27846: LD_ADDR_VAR 0 3
27850: PUSH
27851: LD_INT 4
27853: PUSH
27854: LD_INT 5
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: ST_TO_ADDR
27861: GO 28558
27863: LD_INT 6
27865: DOUBLE
27866: EQUAL
27867: IFTRUE 27871
27869: GO 27889
27871: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27872: LD_ADDR_VAR 0 3
27876: PUSH
27877: LD_INT 4
27879: PUSH
27880: LD_INT 5
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: ST_TO_ADDR
27887: GO 28558
27889: LD_INT 10
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27897
27895: GO 27915
27897: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27898: LD_ADDR_VAR 0 3
27902: PUSH
27903: LD_INT 4
27905: PUSH
27906: LD_INT 5
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: ST_TO_ADDR
27913: GO 28558
27915: LD_INT 22
27917: DOUBLE
27918: EQUAL
27919: IFTRUE 27923
27921: GO 27949
27923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27924: LD_ADDR_VAR 0 3
27928: PUSH
27929: LD_INT 11
27931: PUSH
27932: LD_INT 12
27934: PUSH
27935: LD_INT 13
27937: PUSH
27938: LD_INT 14
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
27947: GO 28558
27949: LD_INT 23
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 27983
27957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27958: LD_ADDR_VAR 0 3
27962: PUSH
27963: LD_INT 11
27965: PUSH
27966: LD_INT 12
27968: PUSH
27969: LD_INT 13
27971: PUSH
27972: LD_INT 14
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: ST_TO_ADDR
27981: GO 28558
27983: LD_INT 24
27985: DOUBLE
27986: EQUAL
27987: IFTRUE 27991
27989: GO 28017
27991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27992: LD_ADDR_VAR 0 3
27996: PUSH
27997: LD_INT 11
27999: PUSH
28000: LD_INT 12
28002: PUSH
28003: LD_INT 13
28005: PUSH
28006: LD_INT 14
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
28015: GO 28558
28017: LD_INT 30
28019: DOUBLE
28020: EQUAL
28021: IFTRUE 28025
28023: GO 28051
28025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28026: LD_ADDR_VAR 0 3
28030: PUSH
28031: LD_INT 11
28033: PUSH
28034: LD_INT 12
28036: PUSH
28037: LD_INT 13
28039: PUSH
28040: LD_INT 14
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
28049: GO 28558
28051: LD_INT 25
28053: DOUBLE
28054: EQUAL
28055: IFTRUE 28059
28057: GO 28077
28059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28060: LD_ADDR_VAR 0 3
28064: PUSH
28065: LD_INT 13
28067: PUSH
28068: LD_INT 14
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: ST_TO_ADDR
28075: GO 28558
28077: LD_INT 27
28079: DOUBLE
28080: EQUAL
28081: IFTRUE 28085
28083: GO 28103
28085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28086: LD_ADDR_VAR 0 3
28090: PUSH
28091: LD_INT 13
28093: PUSH
28094: LD_INT 14
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: ST_TO_ADDR
28101: GO 28558
28103: LD_INT 92
28105: DOUBLE
28106: EQUAL
28107: IFTRUE 28111
28109: GO 28137
28111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28112: LD_ADDR_VAR 0 3
28116: PUSH
28117: LD_INT 11
28119: PUSH
28120: LD_INT 12
28122: PUSH
28123: LD_INT 13
28125: PUSH
28126: LD_INT 14
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: ST_TO_ADDR
28135: GO 28558
28137: LD_INT 28
28139: DOUBLE
28140: EQUAL
28141: IFTRUE 28145
28143: GO 28163
28145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_INT 13
28153: PUSH
28154: LD_INT 14
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: ST_TO_ADDR
28161: GO 28558
28163: LD_INT 29
28165: DOUBLE
28166: EQUAL
28167: IFTRUE 28171
28169: GO 28189
28171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: LD_INT 13
28179: PUSH
28180: LD_INT 14
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: ST_TO_ADDR
28187: GO 28558
28189: LD_INT 31
28191: DOUBLE
28192: EQUAL
28193: IFTRUE 28197
28195: GO 28215
28197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 13
28205: PUSH
28206: LD_INT 14
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: ST_TO_ADDR
28213: GO 28558
28215: LD_INT 26
28217: DOUBLE
28218: EQUAL
28219: IFTRUE 28223
28221: GO 28241
28223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28224: LD_ADDR_VAR 0 3
28228: PUSH
28229: LD_INT 13
28231: PUSH
28232: LD_INT 14
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: ST_TO_ADDR
28239: GO 28558
28241: LD_INT 42
28243: DOUBLE
28244: EQUAL
28245: IFTRUE 28249
28247: GO 28275
28249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28250: LD_ADDR_VAR 0 3
28254: PUSH
28255: LD_INT 21
28257: PUSH
28258: LD_INT 22
28260: PUSH
28261: LD_INT 23
28263: PUSH
28264: LD_INT 24
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: ST_TO_ADDR
28273: GO 28558
28275: LD_INT 43
28277: DOUBLE
28278: EQUAL
28279: IFTRUE 28283
28281: GO 28309
28283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28284: LD_ADDR_VAR 0 3
28288: PUSH
28289: LD_INT 21
28291: PUSH
28292: LD_INT 22
28294: PUSH
28295: LD_INT 23
28297: PUSH
28298: LD_INT 24
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
28307: GO 28558
28309: LD_INT 44
28311: DOUBLE
28312: EQUAL
28313: IFTRUE 28317
28315: GO 28343
28317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28318: LD_ADDR_VAR 0 3
28322: PUSH
28323: LD_INT 21
28325: PUSH
28326: LD_INT 22
28328: PUSH
28329: LD_INT 23
28331: PUSH
28332: LD_INT 24
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: ST_TO_ADDR
28341: GO 28558
28343: LD_INT 45
28345: DOUBLE
28346: EQUAL
28347: IFTRUE 28351
28349: GO 28377
28351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28352: LD_ADDR_VAR 0 3
28356: PUSH
28357: LD_INT 21
28359: PUSH
28360: LD_INT 22
28362: PUSH
28363: LD_INT 23
28365: PUSH
28366: LD_INT 24
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: ST_TO_ADDR
28375: GO 28558
28377: LD_INT 49
28379: DOUBLE
28380: EQUAL
28381: IFTRUE 28385
28383: GO 28411
28385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28386: LD_ADDR_VAR 0 3
28390: PUSH
28391: LD_INT 21
28393: PUSH
28394: LD_INT 22
28396: PUSH
28397: LD_INT 23
28399: PUSH
28400: LD_INT 24
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: ST_TO_ADDR
28409: GO 28558
28411: LD_INT 51
28413: DOUBLE
28414: EQUAL
28415: IFTRUE 28419
28417: GO 28445
28419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28420: LD_ADDR_VAR 0 3
28424: PUSH
28425: LD_INT 21
28427: PUSH
28428: LD_INT 22
28430: PUSH
28431: LD_INT 23
28433: PUSH
28434: LD_INT 24
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: ST_TO_ADDR
28443: GO 28558
28445: LD_INT 52
28447: DOUBLE
28448: EQUAL
28449: IFTRUE 28453
28451: GO 28479
28453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28454: LD_ADDR_VAR 0 3
28458: PUSH
28459: LD_INT 21
28461: PUSH
28462: LD_INT 22
28464: PUSH
28465: LD_INT 23
28467: PUSH
28468: LD_INT 24
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: ST_TO_ADDR
28477: GO 28558
28479: LD_INT 53
28481: DOUBLE
28482: EQUAL
28483: IFTRUE 28487
28485: GO 28505
28487: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28488: LD_ADDR_VAR 0 3
28492: PUSH
28493: LD_INT 23
28495: PUSH
28496: LD_INT 24
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: ST_TO_ADDR
28503: GO 28558
28505: LD_INT 46
28507: DOUBLE
28508: EQUAL
28509: IFTRUE 28513
28511: GO 28531
28513: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28514: LD_ADDR_VAR 0 3
28518: PUSH
28519: LD_INT 23
28521: PUSH
28522: LD_INT 24
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: ST_TO_ADDR
28529: GO 28558
28531: LD_INT 47
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28557
28539: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_INT 23
28547: PUSH
28548: LD_INT 24
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: ST_TO_ADDR
28555: GO 28558
28557: POP
// result := ( chassis in result ) ;
28558: LD_ADDR_VAR 0 3
28562: PUSH
28563: LD_VAR 0 1
28567: PUSH
28568: LD_VAR 0 3
28572: IN
28573: ST_TO_ADDR
// end ;
28574: LD_VAR 0 3
28578: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28579: LD_INT 0
28581: PPUSH
28582: PPUSH
28583: PPUSH
28584: PPUSH
28585: PPUSH
28586: PPUSH
28587: PPUSH
// result := array ;
28588: LD_ADDR_VAR 0 5
28592: PUSH
28593: LD_VAR 0 1
28597: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28598: LD_VAR 0 1
28602: NOT
28603: PUSH
28604: LD_VAR 0 2
28608: NOT
28609: OR
28610: PUSH
28611: LD_VAR 0 3
28615: NOT
28616: OR
28617: PUSH
28618: LD_VAR 0 2
28622: PUSH
28623: LD_VAR 0 1
28627: GREATER
28628: OR
28629: PUSH
28630: LD_VAR 0 3
28634: PUSH
28635: LD_VAR 0 1
28639: GREATER
28640: OR
28641: IFFALSE 28645
// exit ;
28643: GO 28941
// if direction then
28645: LD_VAR 0 4
28649: IFFALSE 28713
// begin d := 1 ;
28651: LD_ADDR_VAR 0 9
28655: PUSH
28656: LD_INT 1
28658: ST_TO_ADDR
// if i_from > i_to then
28659: LD_VAR 0 2
28663: PUSH
28664: LD_VAR 0 3
28668: GREATER
28669: IFFALSE 28695
// length := ( array - i_from ) + i_to else
28671: LD_ADDR_VAR 0 11
28675: PUSH
28676: LD_VAR 0 1
28680: PUSH
28681: LD_VAR 0 2
28685: MINUS
28686: PUSH
28687: LD_VAR 0 3
28691: PLUS
28692: ST_TO_ADDR
28693: GO 28711
// length := i_to - i_from ;
28695: LD_ADDR_VAR 0 11
28699: PUSH
28700: LD_VAR 0 3
28704: PUSH
28705: LD_VAR 0 2
28709: MINUS
28710: ST_TO_ADDR
// end else
28711: GO 28774
// begin d := - 1 ;
28713: LD_ADDR_VAR 0 9
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: ST_TO_ADDR
// if i_from > i_to then
28722: LD_VAR 0 2
28726: PUSH
28727: LD_VAR 0 3
28731: GREATER
28732: IFFALSE 28752
// length := i_from - i_to else
28734: LD_ADDR_VAR 0 11
28738: PUSH
28739: LD_VAR 0 2
28743: PUSH
28744: LD_VAR 0 3
28748: MINUS
28749: ST_TO_ADDR
28750: GO 28774
// length := ( array - i_to ) + i_from ;
28752: LD_ADDR_VAR 0 11
28756: PUSH
28757: LD_VAR 0 1
28761: PUSH
28762: LD_VAR 0 3
28766: MINUS
28767: PUSH
28768: LD_VAR 0 2
28772: PLUS
28773: ST_TO_ADDR
// end ; if not length then
28774: LD_VAR 0 11
28778: NOT
28779: IFFALSE 28783
// exit ;
28781: GO 28941
// tmp := array ;
28783: LD_ADDR_VAR 0 10
28787: PUSH
28788: LD_VAR 0 1
28792: ST_TO_ADDR
// for i = 1 to length do
28793: LD_ADDR_VAR 0 6
28797: PUSH
28798: DOUBLE
28799: LD_INT 1
28801: DEC
28802: ST_TO_ADDR
28803: LD_VAR 0 11
28807: PUSH
28808: FOR_TO
28809: IFFALSE 28929
// begin for j = 1 to array do
28811: LD_ADDR_VAR 0 7
28815: PUSH
28816: DOUBLE
28817: LD_INT 1
28819: DEC
28820: ST_TO_ADDR
28821: LD_VAR 0 1
28825: PUSH
28826: FOR_TO
28827: IFFALSE 28915
// begin k := j + d ;
28829: LD_ADDR_VAR 0 8
28833: PUSH
28834: LD_VAR 0 7
28838: PUSH
28839: LD_VAR 0 9
28843: PLUS
28844: ST_TO_ADDR
// if k > array then
28845: LD_VAR 0 8
28849: PUSH
28850: LD_VAR 0 1
28854: GREATER
28855: IFFALSE 28865
// k := 1 ;
28857: LD_ADDR_VAR 0 8
28861: PUSH
28862: LD_INT 1
28864: ST_TO_ADDR
// if not k then
28865: LD_VAR 0 8
28869: NOT
28870: IFFALSE 28882
// k := array ;
28872: LD_ADDR_VAR 0 8
28876: PUSH
28877: LD_VAR 0 1
28881: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28882: LD_ADDR_VAR 0 10
28886: PUSH
28887: LD_VAR 0 10
28891: PPUSH
28892: LD_VAR 0 8
28896: PPUSH
28897: LD_VAR 0 1
28901: PUSH
28902: LD_VAR 0 7
28906: ARRAY
28907: PPUSH
28908: CALL_OW 1
28912: ST_TO_ADDR
// end ;
28913: GO 28826
28915: POP
28916: POP
// array := tmp ;
28917: LD_ADDR_VAR 0 1
28921: PUSH
28922: LD_VAR 0 10
28926: ST_TO_ADDR
// end ;
28927: GO 28808
28929: POP
28930: POP
// result := array ;
28931: LD_ADDR_VAR 0 5
28935: PUSH
28936: LD_VAR 0 1
28940: ST_TO_ADDR
// end ;
28941: LD_VAR 0 5
28945: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28946: LD_INT 0
28948: PPUSH
28949: PPUSH
// result := 0 ;
28950: LD_ADDR_VAR 0 3
28954: PUSH
28955: LD_INT 0
28957: ST_TO_ADDR
// if not array or not value in array then
28958: LD_VAR 0 1
28962: NOT
28963: PUSH
28964: LD_VAR 0 2
28968: PUSH
28969: LD_VAR 0 1
28973: IN
28974: NOT
28975: OR
28976: IFFALSE 28980
// exit ;
28978: GO 29034
// for i = 1 to array do
28980: LD_ADDR_VAR 0 4
28984: PUSH
28985: DOUBLE
28986: LD_INT 1
28988: DEC
28989: ST_TO_ADDR
28990: LD_VAR 0 1
28994: PUSH
28995: FOR_TO
28996: IFFALSE 29032
// if value = array [ i ] then
28998: LD_VAR 0 2
29002: PUSH
29003: LD_VAR 0 1
29007: PUSH
29008: LD_VAR 0 4
29012: ARRAY
29013: EQUAL
29014: IFFALSE 29030
// begin result := i ;
29016: LD_ADDR_VAR 0 3
29020: PUSH
29021: LD_VAR 0 4
29025: ST_TO_ADDR
// exit ;
29026: POP
29027: POP
29028: GO 29034
// end ;
29030: GO 28995
29032: POP
29033: POP
// end ;
29034: LD_VAR 0 3
29038: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29039: LD_INT 0
29041: PPUSH
// vc_chassis := chassis ;
29042: LD_ADDR_OWVAR 37
29046: PUSH
29047: LD_VAR 0 1
29051: ST_TO_ADDR
// vc_engine := engine ;
29052: LD_ADDR_OWVAR 39
29056: PUSH
29057: LD_VAR 0 2
29061: ST_TO_ADDR
// vc_control := control ;
29062: LD_ADDR_OWVAR 38
29066: PUSH
29067: LD_VAR 0 3
29071: ST_TO_ADDR
// vc_weapon := weapon ;
29072: LD_ADDR_OWVAR 40
29076: PUSH
29077: LD_VAR 0 4
29081: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29082: LD_ADDR_OWVAR 41
29086: PUSH
29087: LD_VAR 0 5
29091: ST_TO_ADDR
// end ;
29092: LD_VAR 0 6
29096: RET
// export function WantPlant ( unit ) ; var task ; begin
29097: LD_INT 0
29099: PPUSH
29100: PPUSH
// result := false ;
29101: LD_ADDR_VAR 0 2
29105: PUSH
29106: LD_INT 0
29108: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29109: LD_ADDR_VAR 0 3
29113: PUSH
29114: LD_VAR 0 1
29118: PPUSH
29119: CALL_OW 437
29123: ST_TO_ADDR
// if task then
29124: LD_VAR 0 3
29128: IFFALSE 29156
// if task [ 1 ] [ 1 ] = p then
29130: LD_VAR 0 3
29134: PUSH
29135: LD_INT 1
29137: ARRAY
29138: PUSH
29139: LD_INT 1
29141: ARRAY
29142: PUSH
29143: LD_STRING p
29145: EQUAL
29146: IFFALSE 29156
// result := true ;
29148: LD_ADDR_VAR 0 2
29152: PUSH
29153: LD_INT 1
29155: ST_TO_ADDR
// end ;
29156: LD_VAR 0 2
29160: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29161: LD_INT 0
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
// if pos < 1 then
29167: LD_VAR 0 2
29171: PUSH
29172: LD_INT 1
29174: LESS
29175: IFFALSE 29179
// exit ;
29177: GO 29482
// if pos = 1 then
29179: LD_VAR 0 2
29183: PUSH
29184: LD_INT 1
29186: EQUAL
29187: IFFALSE 29220
// result := Replace ( arr , pos [ 1 ] , value ) else
29189: LD_ADDR_VAR 0 4
29193: PUSH
29194: LD_VAR 0 1
29198: PPUSH
29199: LD_VAR 0 2
29203: PUSH
29204: LD_INT 1
29206: ARRAY
29207: PPUSH
29208: LD_VAR 0 3
29212: PPUSH
29213: CALL_OW 1
29217: ST_TO_ADDR
29218: GO 29482
// begin tmp := arr ;
29220: LD_ADDR_VAR 0 6
29224: PUSH
29225: LD_VAR 0 1
29229: ST_TO_ADDR
// s_arr := [ tmp ] ;
29230: LD_ADDR_VAR 0 7
29234: PUSH
29235: LD_VAR 0 6
29239: PUSH
29240: EMPTY
29241: LIST
29242: ST_TO_ADDR
// for i = 1 to pos - 1 do
29243: LD_ADDR_VAR 0 5
29247: PUSH
29248: DOUBLE
29249: LD_INT 1
29251: DEC
29252: ST_TO_ADDR
29253: LD_VAR 0 2
29257: PUSH
29258: LD_INT 1
29260: MINUS
29261: PUSH
29262: FOR_TO
29263: IFFALSE 29308
// begin tmp := tmp [ pos [ i ] ] ;
29265: LD_ADDR_VAR 0 6
29269: PUSH
29270: LD_VAR 0 6
29274: PUSH
29275: LD_VAR 0 2
29279: PUSH
29280: LD_VAR 0 5
29284: ARRAY
29285: ARRAY
29286: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29287: LD_ADDR_VAR 0 7
29291: PUSH
29292: LD_VAR 0 7
29296: PUSH
29297: LD_VAR 0 6
29301: PUSH
29302: EMPTY
29303: LIST
29304: ADD
29305: ST_TO_ADDR
// end ;
29306: GO 29262
29308: POP
29309: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29310: LD_ADDR_VAR 0 6
29314: PUSH
29315: LD_VAR 0 6
29319: PPUSH
29320: LD_VAR 0 2
29324: PUSH
29325: LD_VAR 0 2
29329: ARRAY
29330: PPUSH
29331: LD_VAR 0 3
29335: PPUSH
29336: CALL_OW 1
29340: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29341: LD_ADDR_VAR 0 7
29345: PUSH
29346: LD_VAR 0 7
29350: PPUSH
29351: LD_VAR 0 7
29355: PPUSH
29356: LD_VAR 0 6
29360: PPUSH
29361: CALL_OW 1
29365: ST_TO_ADDR
// for i = s_arr downto 2 do
29366: LD_ADDR_VAR 0 5
29370: PUSH
29371: DOUBLE
29372: LD_VAR 0 7
29376: INC
29377: ST_TO_ADDR
29378: LD_INT 2
29380: PUSH
29381: FOR_DOWNTO
29382: IFFALSE 29466
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29384: LD_ADDR_VAR 0 6
29388: PUSH
29389: LD_VAR 0 7
29393: PUSH
29394: LD_VAR 0 5
29398: PUSH
29399: LD_INT 1
29401: MINUS
29402: ARRAY
29403: PPUSH
29404: LD_VAR 0 2
29408: PUSH
29409: LD_VAR 0 5
29413: PUSH
29414: LD_INT 1
29416: MINUS
29417: ARRAY
29418: PPUSH
29419: LD_VAR 0 7
29423: PUSH
29424: LD_VAR 0 5
29428: ARRAY
29429: PPUSH
29430: CALL_OW 1
29434: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29435: LD_ADDR_VAR 0 7
29439: PUSH
29440: LD_VAR 0 7
29444: PPUSH
29445: LD_VAR 0 5
29449: PUSH
29450: LD_INT 1
29452: MINUS
29453: PPUSH
29454: LD_VAR 0 6
29458: PPUSH
29459: CALL_OW 1
29463: ST_TO_ADDR
// end ;
29464: GO 29381
29466: POP
29467: POP
// result := s_arr [ 1 ] ;
29468: LD_ADDR_VAR 0 4
29472: PUSH
29473: LD_VAR 0 7
29477: PUSH
29478: LD_INT 1
29480: ARRAY
29481: ST_TO_ADDR
// end ; end ;
29482: LD_VAR 0 4
29486: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29487: LD_INT 0
29489: PPUSH
29490: PPUSH
// if not list then
29491: LD_VAR 0 1
29495: NOT
29496: IFFALSE 29500
// exit ;
29498: GO 29591
// i := list [ pos1 ] ;
29500: LD_ADDR_VAR 0 5
29504: PUSH
29505: LD_VAR 0 1
29509: PUSH
29510: LD_VAR 0 2
29514: ARRAY
29515: ST_TO_ADDR
// if not i then
29516: LD_VAR 0 5
29520: NOT
29521: IFFALSE 29525
// exit ;
29523: GO 29591
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29525: LD_ADDR_VAR 0 1
29529: PUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: LD_VAR 0 2
29539: PPUSH
29540: LD_VAR 0 1
29544: PUSH
29545: LD_VAR 0 3
29549: ARRAY
29550: PPUSH
29551: CALL_OW 1
29555: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29556: LD_ADDR_VAR 0 1
29560: PUSH
29561: LD_VAR 0 1
29565: PPUSH
29566: LD_VAR 0 3
29570: PPUSH
29571: LD_VAR 0 5
29575: PPUSH
29576: CALL_OW 1
29580: ST_TO_ADDR
// result := list ;
29581: LD_ADDR_VAR 0 4
29585: PUSH
29586: LD_VAR 0 1
29590: ST_TO_ADDR
// end ;
29591: LD_VAR 0 4
29595: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29596: LD_INT 0
29598: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29599: LD_ADDR_VAR 0 5
29603: PUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 250
29613: PPUSH
29614: LD_VAR 0 1
29618: PPUSH
29619: CALL_OW 251
29623: PPUSH
29624: LD_VAR 0 2
29628: PPUSH
29629: LD_VAR 0 3
29633: PPUSH
29634: LD_VAR 0 4
29638: PPUSH
29639: CALL 29649 0 5
29643: ST_TO_ADDR
// end ;
29644: LD_VAR 0 5
29648: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29649: LD_INT 0
29651: PPUSH
29652: PPUSH
29653: PPUSH
29654: PPUSH
// if not list then
29655: LD_VAR 0 3
29659: NOT
29660: IFFALSE 29664
// exit ;
29662: GO 30052
// result := [ ] ;
29664: LD_ADDR_VAR 0 6
29668: PUSH
29669: EMPTY
29670: ST_TO_ADDR
// for i in list do
29671: LD_ADDR_VAR 0 7
29675: PUSH
29676: LD_VAR 0 3
29680: PUSH
29681: FOR_IN
29682: IFFALSE 29884
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29684: LD_ADDR_VAR 0 9
29688: PUSH
29689: LD_VAR 0 7
29693: PPUSH
29694: LD_VAR 0 1
29698: PPUSH
29699: LD_VAR 0 2
29703: PPUSH
29704: CALL_OW 297
29708: ST_TO_ADDR
// if not result then
29709: LD_VAR 0 6
29713: NOT
29714: IFFALSE 29740
// result := [ [ i , tmp ] ] else
29716: LD_ADDR_VAR 0 6
29720: PUSH
29721: LD_VAR 0 7
29725: PUSH
29726: LD_VAR 0 9
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: EMPTY
29736: LIST
29737: ST_TO_ADDR
29738: GO 29882
// begin if result [ result ] [ 2 ] < tmp then
29740: LD_VAR 0 6
29744: PUSH
29745: LD_VAR 0 6
29749: ARRAY
29750: PUSH
29751: LD_INT 2
29753: ARRAY
29754: PUSH
29755: LD_VAR 0 9
29759: LESS
29760: IFFALSE 29802
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29762: LD_ADDR_VAR 0 6
29766: PUSH
29767: LD_VAR 0 6
29771: PPUSH
29772: LD_VAR 0 6
29776: PUSH
29777: LD_INT 1
29779: PLUS
29780: PPUSH
29781: LD_VAR 0 7
29785: PUSH
29786: LD_VAR 0 9
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PPUSH
29795: CALL_OW 2
29799: ST_TO_ADDR
29800: GO 29882
// for j = 1 to result do
29802: LD_ADDR_VAR 0 8
29806: PUSH
29807: DOUBLE
29808: LD_INT 1
29810: DEC
29811: ST_TO_ADDR
29812: LD_VAR 0 6
29816: PUSH
29817: FOR_TO
29818: IFFALSE 29880
// begin if tmp < result [ j ] [ 2 ] then
29820: LD_VAR 0 9
29824: PUSH
29825: LD_VAR 0 6
29829: PUSH
29830: LD_VAR 0 8
29834: ARRAY
29835: PUSH
29836: LD_INT 2
29838: ARRAY
29839: LESS
29840: IFFALSE 29878
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29842: LD_ADDR_VAR 0 6
29846: PUSH
29847: LD_VAR 0 6
29851: PPUSH
29852: LD_VAR 0 8
29856: PPUSH
29857: LD_VAR 0 7
29861: PUSH
29862: LD_VAR 0 9
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PPUSH
29871: CALL_OW 2
29875: ST_TO_ADDR
// break ;
29876: GO 29880
// end ; end ;
29878: GO 29817
29880: POP
29881: POP
// end ; end ;
29882: GO 29681
29884: POP
29885: POP
// if result and not asc then
29886: LD_VAR 0 6
29890: PUSH
29891: LD_VAR 0 4
29895: NOT
29896: AND
29897: IFFALSE 29972
// begin tmp := result ;
29899: LD_ADDR_VAR 0 9
29903: PUSH
29904: LD_VAR 0 6
29908: ST_TO_ADDR
// for i = tmp downto 1 do
29909: LD_ADDR_VAR 0 7
29913: PUSH
29914: DOUBLE
29915: LD_VAR 0 9
29919: INC
29920: ST_TO_ADDR
29921: LD_INT 1
29923: PUSH
29924: FOR_DOWNTO
29925: IFFALSE 29970
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29927: LD_ADDR_VAR 0 6
29931: PUSH
29932: LD_VAR 0 6
29936: PPUSH
29937: LD_VAR 0 9
29941: PUSH
29942: LD_VAR 0 7
29946: MINUS
29947: PUSH
29948: LD_INT 1
29950: PLUS
29951: PPUSH
29952: LD_VAR 0 9
29956: PUSH
29957: LD_VAR 0 7
29961: ARRAY
29962: PPUSH
29963: CALL_OW 1
29967: ST_TO_ADDR
29968: GO 29924
29970: POP
29971: POP
// end ; tmp := [ ] ;
29972: LD_ADDR_VAR 0 9
29976: PUSH
29977: EMPTY
29978: ST_TO_ADDR
// if mode then
29979: LD_VAR 0 5
29983: IFFALSE 30052
// begin for i = 1 to result do
29985: LD_ADDR_VAR 0 7
29989: PUSH
29990: DOUBLE
29991: LD_INT 1
29993: DEC
29994: ST_TO_ADDR
29995: LD_VAR 0 6
29999: PUSH
30000: FOR_TO
30001: IFFALSE 30040
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30003: LD_ADDR_VAR 0 9
30007: PUSH
30008: LD_VAR 0 9
30012: PPUSH
30013: LD_VAR 0 7
30017: PPUSH
30018: LD_VAR 0 6
30022: PUSH
30023: LD_VAR 0 7
30027: ARRAY
30028: PUSH
30029: LD_INT 1
30031: ARRAY
30032: PPUSH
30033: CALL_OW 1
30037: ST_TO_ADDR
30038: GO 30000
30040: POP
30041: POP
// result := tmp ;
30042: LD_ADDR_VAR 0 6
30046: PUSH
30047: LD_VAR 0 9
30051: ST_TO_ADDR
// end ; end ;
30052: LD_VAR 0 6
30056: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30057: LD_INT 0
30059: PPUSH
30060: PPUSH
30061: PPUSH
30062: PPUSH
30063: PPUSH
30064: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30065: LD_ADDR_VAR 0 5
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: ST_TO_ADDR
// if not x or not y then
30087: LD_VAR 0 2
30091: NOT
30092: PUSH
30093: LD_VAR 0 3
30097: NOT
30098: OR
30099: IFFALSE 30103
// exit ;
30101: GO 31753
// if not range then
30103: LD_VAR 0 4
30107: NOT
30108: IFFALSE 30118
// range := 10 ;
30110: LD_ADDR_VAR 0 4
30114: PUSH
30115: LD_INT 10
30117: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30118: LD_ADDR_VAR 0 8
30122: PUSH
30123: LD_INT 81
30125: PUSH
30126: LD_VAR 0 1
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 92
30137: PUSH
30138: LD_VAR 0 2
30142: PUSH
30143: LD_VAR 0 3
30147: PUSH
30148: LD_VAR 0 4
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: LD_INT 21
30164: PUSH
30165: LD_INT 3
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: LIST
30180: PPUSH
30181: CALL_OW 69
30185: ST_TO_ADDR
// if not tmp then
30186: LD_VAR 0 8
30190: NOT
30191: IFFALSE 30195
// exit ;
30193: GO 31753
// for i in tmp do
30195: LD_ADDR_VAR 0 6
30199: PUSH
30200: LD_VAR 0 8
30204: PUSH
30205: FOR_IN
30206: IFFALSE 31728
// begin points := [ 0 , 0 , 0 ] ;
30208: LD_ADDR_VAR 0 9
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: ST_TO_ADDR
// bpoints := 1 ;
30227: LD_ADDR_VAR 0 10
30231: PUSH
30232: LD_INT 1
30234: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30235: LD_VAR 0 6
30239: PPUSH
30240: CALL_OW 247
30244: PUSH
30245: LD_INT 1
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30831
30253: POP
// begin if GetClass ( i ) = 1 then
30254: LD_VAR 0 6
30258: PPUSH
30259: CALL_OW 257
30263: PUSH
30264: LD_INT 1
30266: EQUAL
30267: IFFALSE 30288
// points := [ 10 , 5 , 3 ] ;
30269: LD_ADDR_VAR 0 9
30273: PUSH
30274: LD_INT 10
30276: PUSH
30277: LD_INT 5
30279: PUSH
30280: LD_INT 3
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: LIST
30287: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30288: LD_VAR 0 6
30292: PPUSH
30293: CALL_OW 257
30297: PUSH
30298: LD_INT 2
30300: PUSH
30301: LD_INT 3
30303: PUSH
30304: LD_INT 4
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: IN
30312: IFFALSE 30333
// points := [ 3 , 2 , 1 ] ;
30314: LD_ADDR_VAR 0 9
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30333: LD_VAR 0 6
30337: PPUSH
30338: CALL_OW 257
30342: PUSH
30343: LD_INT 5
30345: EQUAL
30346: IFFALSE 30367
// points := [ 130 , 5 , 2 ] ;
30348: LD_ADDR_VAR 0 9
30352: PUSH
30353: LD_INT 130
30355: PUSH
30356: LD_INT 5
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30367: LD_VAR 0 6
30371: PPUSH
30372: CALL_OW 257
30376: PUSH
30377: LD_INT 8
30379: EQUAL
30380: IFFALSE 30401
// points := [ 35 , 35 , 30 ] ;
30382: LD_ADDR_VAR 0 9
30386: PUSH
30387: LD_INT 35
30389: PUSH
30390: LD_INT 35
30392: PUSH
30393: LD_INT 30
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30401: LD_VAR 0 6
30405: PPUSH
30406: CALL_OW 257
30410: PUSH
30411: LD_INT 9
30413: EQUAL
30414: IFFALSE 30435
// points := [ 20 , 55 , 40 ] ;
30416: LD_ADDR_VAR 0 9
30420: PUSH
30421: LD_INT 20
30423: PUSH
30424: LD_INT 55
30426: PUSH
30427: LD_INT 40
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30435: LD_VAR 0 6
30439: PPUSH
30440: CALL_OW 257
30444: PUSH
30445: LD_INT 12
30447: PUSH
30448: LD_INT 16
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: IN
30455: IFFALSE 30476
// points := [ 5 , 3 , 2 ] ;
30457: LD_ADDR_VAR 0 9
30461: PUSH
30462: LD_INT 5
30464: PUSH
30465: LD_INT 3
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30476: LD_VAR 0 6
30480: PPUSH
30481: CALL_OW 257
30485: PUSH
30486: LD_INT 17
30488: EQUAL
30489: IFFALSE 30510
// points := [ 100 , 50 , 75 ] ;
30491: LD_ADDR_VAR 0 9
30495: PUSH
30496: LD_INT 100
30498: PUSH
30499: LD_INT 50
30501: PUSH
30502: LD_INT 75
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30510: LD_VAR 0 6
30514: PPUSH
30515: CALL_OW 257
30519: PUSH
30520: LD_INT 15
30522: EQUAL
30523: IFFALSE 30544
// points := [ 10 , 5 , 3 ] ;
30525: LD_ADDR_VAR 0 9
30529: PUSH
30530: LD_INT 10
30532: PUSH
30533: LD_INT 5
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30544: LD_VAR 0 6
30548: PPUSH
30549: CALL_OW 257
30553: PUSH
30554: LD_INT 14
30556: EQUAL
30557: IFFALSE 30578
// points := [ 10 , 0 , 0 ] ;
30559: LD_ADDR_VAR 0 9
30563: PUSH
30564: LD_INT 10
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30578: LD_VAR 0 6
30582: PPUSH
30583: CALL_OW 257
30587: PUSH
30588: LD_INT 11
30590: EQUAL
30591: IFFALSE 30612
// points := [ 30 , 10 , 5 ] ;
30593: LD_ADDR_VAR 0 9
30597: PUSH
30598: LD_INT 30
30600: PUSH
30601: LD_INT 10
30603: PUSH
30604: LD_INT 5
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30612: LD_VAR 0 1
30616: PPUSH
30617: LD_INT 5
30619: PPUSH
30620: CALL_OW 321
30624: PUSH
30625: LD_INT 2
30627: EQUAL
30628: IFFALSE 30645
// bpoints := bpoints * 1.8 ;
30630: LD_ADDR_VAR 0 10
30634: PUSH
30635: LD_VAR 0 10
30639: PUSH
30640: LD_REAL  1.80000000000000E+0000
30643: MUL
30644: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30645: LD_VAR 0 6
30649: PPUSH
30650: CALL_OW 257
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: LD_INT 3
30663: PUSH
30664: LD_INT 4
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: IN
30673: PUSH
30674: LD_VAR 0 1
30678: PPUSH
30679: LD_INT 51
30681: PPUSH
30682: CALL_OW 321
30686: PUSH
30687: LD_INT 2
30689: EQUAL
30690: AND
30691: IFFALSE 30708
// bpoints := bpoints * 1.2 ;
30693: LD_ADDR_VAR 0 10
30697: PUSH
30698: LD_VAR 0 10
30702: PUSH
30703: LD_REAL  1.20000000000000E+0000
30706: MUL
30707: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30708: LD_VAR 0 6
30712: PPUSH
30713: CALL_OW 257
30717: PUSH
30718: LD_INT 5
30720: PUSH
30721: LD_INT 7
30723: PUSH
30724: LD_INT 9
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: IN
30732: PUSH
30733: LD_VAR 0 1
30737: PPUSH
30738: LD_INT 52
30740: PPUSH
30741: CALL_OW 321
30745: PUSH
30746: LD_INT 2
30748: EQUAL
30749: AND
30750: IFFALSE 30767
// bpoints := bpoints * 1.5 ;
30752: LD_ADDR_VAR 0 10
30756: PUSH
30757: LD_VAR 0 10
30761: PUSH
30762: LD_REAL  1.50000000000000E+0000
30765: MUL
30766: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30767: LD_VAR 0 1
30771: PPUSH
30772: LD_INT 66
30774: PPUSH
30775: CALL_OW 321
30779: PUSH
30780: LD_INT 2
30782: EQUAL
30783: IFFALSE 30800
// bpoints := bpoints * 1.1 ;
30785: LD_ADDR_VAR 0 10
30789: PUSH
30790: LD_VAR 0 10
30794: PUSH
30795: LD_REAL  1.10000000000000E+0000
30798: MUL
30799: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30800: LD_ADDR_VAR 0 10
30804: PUSH
30805: LD_VAR 0 10
30809: PUSH
30810: LD_VAR 0 6
30814: PPUSH
30815: LD_INT 1
30817: PPUSH
30818: CALL_OW 259
30822: PUSH
30823: LD_REAL  1.15000000000000E+0000
30826: MUL
30827: MUL
30828: ST_TO_ADDR
// end ; unit_vehicle :
30829: GO 31657
30831: LD_INT 2
30833: DOUBLE
30834: EQUAL
30835: IFTRUE 30839
30837: GO 31645
30839: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30840: LD_VAR 0 6
30844: PPUSH
30845: CALL_OW 264
30849: PUSH
30850: LD_INT 2
30852: PUSH
30853: LD_INT 42
30855: PUSH
30856: LD_INT 24
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: IN
30864: IFFALSE 30885
// points := [ 25 , 5 , 3 ] ;
30866: LD_ADDR_VAR 0 9
30870: PUSH
30871: LD_INT 25
30873: PUSH
30874: LD_INT 5
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30885: LD_VAR 0 6
30889: PPUSH
30890: CALL_OW 264
30894: PUSH
30895: LD_INT 4
30897: PUSH
30898: LD_INT 43
30900: PUSH
30901: LD_INT 25
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: IN
30909: IFFALSE 30930
// points := [ 40 , 15 , 5 ] ;
30911: LD_ADDR_VAR 0 9
30915: PUSH
30916: LD_INT 40
30918: PUSH
30919: LD_INT 15
30921: PUSH
30922: LD_INT 5
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30930: LD_VAR 0 6
30934: PPUSH
30935: CALL_OW 264
30939: PUSH
30940: LD_INT 3
30942: PUSH
30943: LD_INT 23
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: IN
30950: IFFALSE 30971
// points := [ 7 , 25 , 8 ] ;
30952: LD_ADDR_VAR 0 9
30956: PUSH
30957: LD_INT 7
30959: PUSH
30960: LD_INT 25
30962: PUSH
30963: LD_INT 8
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30971: LD_VAR 0 6
30975: PPUSH
30976: CALL_OW 264
30980: PUSH
30981: LD_INT 5
30983: PUSH
30984: LD_INT 27
30986: PUSH
30987: LD_INT 44
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: LIST
30994: IN
30995: IFFALSE 31016
// points := [ 14 , 50 , 16 ] ;
30997: LD_ADDR_VAR 0 9
31001: PUSH
31002: LD_INT 14
31004: PUSH
31005: LD_INT 50
31007: PUSH
31008: LD_INT 16
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31016: LD_VAR 0 6
31020: PPUSH
31021: CALL_OW 264
31025: PUSH
31026: LD_INT 6
31028: PUSH
31029: LD_INT 46
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: IN
31036: IFFALSE 31057
// points := [ 32 , 120 , 70 ] ;
31038: LD_ADDR_VAR 0 9
31042: PUSH
31043: LD_INT 32
31045: PUSH
31046: LD_INT 120
31048: PUSH
31049: LD_INT 70
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31057: LD_VAR 0 6
31061: PPUSH
31062: CALL_OW 264
31066: PUSH
31067: LD_INT 7
31069: PUSH
31070: LD_INT 28
31072: PUSH
31073: LD_INT 45
31075: PUSH
31076: LD_INT 92
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: IN
31085: IFFALSE 31106
// points := [ 35 , 20 , 45 ] ;
31087: LD_ADDR_VAR 0 9
31091: PUSH
31092: LD_INT 35
31094: PUSH
31095: LD_INT 20
31097: PUSH
31098: LD_INT 45
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: LIST
31105: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31106: LD_VAR 0 6
31110: PPUSH
31111: CALL_OW 264
31115: PUSH
31116: LD_INT 47
31118: PUSH
31119: EMPTY
31120: LIST
31121: IN
31122: IFFALSE 31143
// points := [ 67 , 45 , 75 ] ;
31124: LD_ADDR_VAR 0 9
31128: PUSH
31129: LD_INT 67
31131: PUSH
31132: LD_INT 45
31134: PUSH
31135: LD_INT 75
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31143: LD_VAR 0 6
31147: PPUSH
31148: CALL_OW 264
31152: PUSH
31153: LD_INT 26
31155: PUSH
31156: EMPTY
31157: LIST
31158: IN
31159: IFFALSE 31180
// points := [ 120 , 30 , 80 ] ;
31161: LD_ADDR_VAR 0 9
31165: PUSH
31166: LD_INT 120
31168: PUSH
31169: LD_INT 30
31171: PUSH
31172: LD_INT 80
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31180: LD_VAR 0 6
31184: PPUSH
31185: CALL_OW 264
31189: PUSH
31190: LD_INT 22
31192: PUSH
31193: EMPTY
31194: LIST
31195: IN
31196: IFFALSE 31217
// points := [ 40 , 1 , 1 ] ;
31198: LD_ADDR_VAR 0 9
31202: PUSH
31203: LD_INT 40
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 1
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31217: LD_VAR 0 6
31221: PPUSH
31222: CALL_OW 264
31226: PUSH
31227: LD_INT 29
31229: PUSH
31230: EMPTY
31231: LIST
31232: IN
31233: IFFALSE 31254
// points := [ 70 , 200 , 400 ] ;
31235: LD_ADDR_VAR 0 9
31239: PUSH
31240: LD_INT 70
31242: PUSH
31243: LD_INT 200
31245: PUSH
31246: LD_INT 400
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31254: LD_VAR 0 6
31258: PPUSH
31259: CALL_OW 264
31263: PUSH
31264: LD_INT 14
31266: PUSH
31267: LD_INT 53
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: IN
31274: IFFALSE 31295
// points := [ 40 , 10 , 20 ] ;
31276: LD_ADDR_VAR 0 9
31280: PUSH
31281: LD_INT 40
31283: PUSH
31284: LD_INT 10
31286: PUSH
31287: LD_INT 20
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31295: LD_VAR 0 6
31299: PPUSH
31300: CALL_OW 264
31304: PUSH
31305: LD_INT 9
31307: PUSH
31308: EMPTY
31309: LIST
31310: IN
31311: IFFALSE 31332
// points := [ 5 , 70 , 20 ] ;
31313: LD_ADDR_VAR 0 9
31317: PUSH
31318: LD_INT 5
31320: PUSH
31321: LD_INT 70
31323: PUSH
31324: LD_INT 20
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31332: LD_VAR 0 6
31336: PPUSH
31337: CALL_OW 264
31341: PUSH
31342: LD_INT 10
31344: PUSH
31345: EMPTY
31346: LIST
31347: IN
31348: IFFALSE 31369
// points := [ 35 , 110 , 70 ] ;
31350: LD_ADDR_VAR 0 9
31354: PUSH
31355: LD_INT 35
31357: PUSH
31358: LD_INT 110
31360: PUSH
31361: LD_INT 70
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31369: LD_VAR 0 6
31373: PPUSH
31374: CALL_OW 265
31378: PUSH
31379: LD_INT 25
31381: EQUAL
31382: IFFALSE 31403
// points := [ 80 , 65 , 100 ] ;
31384: LD_ADDR_VAR 0 9
31388: PUSH
31389: LD_INT 80
31391: PUSH
31392: LD_INT 65
31394: PUSH
31395: LD_INT 100
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31403: LD_VAR 0 6
31407: PPUSH
31408: CALL_OW 263
31412: PUSH
31413: LD_INT 1
31415: EQUAL
31416: IFFALSE 31451
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31418: LD_ADDR_VAR 0 10
31422: PUSH
31423: LD_VAR 0 10
31427: PUSH
31428: LD_VAR 0 6
31432: PPUSH
31433: CALL_OW 311
31437: PPUSH
31438: LD_INT 3
31440: PPUSH
31441: CALL_OW 259
31445: PUSH
31446: LD_INT 4
31448: MUL
31449: MUL
31450: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31451: LD_VAR 0 6
31455: PPUSH
31456: CALL_OW 263
31460: PUSH
31461: LD_INT 2
31463: EQUAL
31464: IFFALSE 31515
// begin j := IsControledBy ( i ) ;
31466: LD_ADDR_VAR 0 7
31470: PUSH
31471: LD_VAR 0 6
31475: PPUSH
31476: CALL_OW 312
31480: ST_TO_ADDR
// if j then
31481: LD_VAR 0 7
31485: IFFALSE 31515
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31487: LD_ADDR_VAR 0 10
31491: PUSH
31492: LD_VAR 0 10
31496: PUSH
31497: LD_VAR 0 7
31501: PPUSH
31502: LD_INT 3
31504: PPUSH
31505: CALL_OW 259
31509: PUSH
31510: LD_INT 3
31512: MUL
31513: MUL
31514: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31515: LD_VAR 0 6
31519: PPUSH
31520: CALL_OW 264
31524: PUSH
31525: LD_INT 5
31527: PUSH
31528: LD_INT 6
31530: PUSH
31531: LD_INT 46
31533: PUSH
31534: LD_INT 44
31536: PUSH
31537: LD_INT 47
31539: PUSH
31540: LD_INT 45
31542: PUSH
31543: LD_INT 28
31545: PUSH
31546: LD_INT 7
31548: PUSH
31549: LD_INT 27
31551: PUSH
31552: LD_INT 29
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: IN
31567: PUSH
31568: LD_VAR 0 1
31572: PPUSH
31573: LD_INT 52
31575: PPUSH
31576: CALL_OW 321
31580: PUSH
31581: LD_INT 2
31583: EQUAL
31584: AND
31585: IFFALSE 31602
// bpoints := bpoints * 1.2 ;
31587: LD_ADDR_VAR 0 10
31591: PUSH
31592: LD_VAR 0 10
31596: PUSH
31597: LD_REAL  1.20000000000000E+0000
31600: MUL
31601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31602: LD_VAR 0 6
31606: PPUSH
31607: CALL_OW 264
31611: PUSH
31612: LD_INT 6
31614: PUSH
31615: LD_INT 46
31617: PUSH
31618: LD_INT 47
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: IN
31626: IFFALSE 31643
// bpoints := bpoints * 1.2 ;
31628: LD_ADDR_VAR 0 10
31632: PUSH
31633: LD_VAR 0 10
31637: PUSH
31638: LD_REAL  1.20000000000000E+0000
31641: MUL
31642: ST_TO_ADDR
// end ; unit_building :
31643: GO 31657
31645: LD_INT 3
31647: DOUBLE
31648: EQUAL
31649: IFTRUE 31653
31651: GO 31656
31653: POP
// ; end ;
31654: GO 31657
31656: POP
// for j = 1 to 3 do
31657: LD_ADDR_VAR 0 7
31661: PUSH
31662: DOUBLE
31663: LD_INT 1
31665: DEC
31666: ST_TO_ADDR
31667: LD_INT 3
31669: PUSH
31670: FOR_TO
31671: IFFALSE 31724
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31673: LD_ADDR_VAR 0 5
31677: PUSH
31678: LD_VAR 0 5
31682: PPUSH
31683: LD_VAR 0 7
31687: PPUSH
31688: LD_VAR 0 5
31692: PUSH
31693: LD_VAR 0 7
31697: ARRAY
31698: PUSH
31699: LD_VAR 0 9
31703: PUSH
31704: LD_VAR 0 7
31708: ARRAY
31709: PUSH
31710: LD_VAR 0 10
31714: MUL
31715: PLUS
31716: PPUSH
31717: CALL_OW 1
31721: ST_TO_ADDR
31722: GO 31670
31724: POP
31725: POP
// end ;
31726: GO 30205
31728: POP
31729: POP
// result := Replace ( result , 4 , tmp ) ;
31730: LD_ADDR_VAR 0 5
31734: PUSH
31735: LD_VAR 0 5
31739: PPUSH
31740: LD_INT 4
31742: PPUSH
31743: LD_VAR 0 8
31747: PPUSH
31748: CALL_OW 1
31752: ST_TO_ADDR
// end ;
31753: LD_VAR 0 5
31757: RET
// export function DangerAtRange ( unit , range ) ; begin
31758: LD_INT 0
31760: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31761: LD_ADDR_VAR 0 3
31765: PUSH
31766: LD_VAR 0 1
31770: PPUSH
31771: CALL_OW 255
31775: PPUSH
31776: LD_VAR 0 1
31780: PPUSH
31781: CALL_OW 250
31785: PPUSH
31786: LD_VAR 0 1
31790: PPUSH
31791: CALL_OW 251
31795: PPUSH
31796: LD_VAR 0 2
31800: PPUSH
31801: CALL 30057 0 4
31805: ST_TO_ADDR
// end ;
31806: LD_VAR 0 3
31810: RET
// export function DangerInArea ( side , area ) ; begin
31811: LD_INT 0
31813: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31814: LD_ADDR_VAR 0 3
31818: PUSH
31819: LD_VAR 0 2
31823: PPUSH
31824: LD_INT 81
31826: PUSH
31827: LD_VAR 0 1
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PPUSH
31836: CALL_OW 70
31840: ST_TO_ADDR
// end ;
31841: LD_VAR 0 3
31845: RET
// export function IsExtension ( b ) ; begin
31846: LD_INT 0
31848: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31849: LD_ADDR_VAR 0 2
31853: PUSH
31854: LD_VAR 0 1
31858: PUSH
31859: LD_INT 23
31861: PUSH
31862: LD_INT 20
31864: PUSH
31865: LD_INT 22
31867: PUSH
31868: LD_INT 17
31870: PUSH
31871: LD_INT 24
31873: PUSH
31874: LD_INT 21
31876: PUSH
31877: LD_INT 19
31879: PUSH
31880: LD_INT 16
31882: PUSH
31883: LD_INT 25
31885: PUSH
31886: LD_INT 18
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: IN
31901: ST_TO_ADDR
// end ;
31902: LD_VAR 0 2
31906: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31907: LD_INT 0
31909: PPUSH
31910: PPUSH
31911: PPUSH
// result := [ ] ;
31912: LD_ADDR_VAR 0 4
31916: PUSH
31917: EMPTY
31918: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_VAR 0 2
31928: PPUSH
31929: LD_INT 21
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PPUSH
31939: CALL_OW 70
31943: ST_TO_ADDR
// if not tmp then
31944: LD_VAR 0 5
31948: NOT
31949: IFFALSE 31953
// exit ;
31951: GO 32017
// if checkLink then
31953: LD_VAR 0 3
31957: IFFALSE 32007
// begin for i in tmp do
31959: LD_ADDR_VAR 0 6
31963: PUSH
31964: LD_VAR 0 5
31968: PUSH
31969: FOR_IN
31970: IFFALSE 32005
// if GetBase ( i ) <> base then
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 274
31981: PUSH
31982: LD_VAR 0 1
31986: NONEQUAL
31987: IFFALSE 32003
// ComLinkToBase ( base , i ) ;
31989: LD_VAR 0 1
31993: PPUSH
31994: LD_VAR 0 6
31998: PPUSH
31999: CALL_OW 169
32003: GO 31969
32005: POP
32006: POP
// end ; result := tmp ;
32007: LD_ADDR_VAR 0 4
32011: PUSH
32012: LD_VAR 0 5
32016: ST_TO_ADDR
// end ;
32017: LD_VAR 0 4
32021: RET
// export function ComComplete ( units , b ) ; var i ; begin
32022: LD_INT 0
32024: PPUSH
32025: PPUSH
// if not units then
32026: LD_VAR 0 1
32030: NOT
32031: IFFALSE 32035
// exit ;
32033: GO 32125
// for i in units do
32035: LD_ADDR_VAR 0 4
32039: PUSH
32040: LD_VAR 0 1
32044: PUSH
32045: FOR_IN
32046: IFFALSE 32123
// if BuildingStatus ( b ) = bs_build then
32048: LD_VAR 0 2
32052: PPUSH
32053: CALL_OW 461
32057: PUSH
32058: LD_INT 1
32060: EQUAL
32061: IFFALSE 32121
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32063: LD_VAR 0 4
32067: PPUSH
32068: LD_STRING h
32070: PUSH
32071: LD_VAR 0 2
32075: PPUSH
32076: CALL_OW 250
32080: PUSH
32081: LD_VAR 0 2
32085: PPUSH
32086: CALL_OW 251
32090: PUSH
32091: LD_VAR 0 2
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: PUSH
32114: EMPTY
32115: LIST
32116: PPUSH
32117: CALL_OW 446
32121: GO 32045
32123: POP
32124: POP
// end ;
32125: LD_VAR 0 3
32129: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32130: LD_INT 0
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
32136: PPUSH
32137: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32138: LD_VAR 0 1
32142: NOT
32143: PUSH
32144: LD_VAR 0 1
32148: PPUSH
32149: CALL_OW 263
32153: PUSH
32154: LD_INT 2
32156: NONEQUAL
32157: OR
32158: IFFALSE 32162
// exit ;
32160: GO 32478
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32162: LD_ADDR_VAR 0 6
32166: PUSH
32167: LD_INT 22
32169: PUSH
32170: LD_VAR 0 1
32174: PPUSH
32175: CALL_OW 255
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 30
32189: PUSH
32190: LD_INT 36
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 34
32199: PUSH
32200: LD_INT 31
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PPUSH
32216: CALL_OW 69
32220: ST_TO_ADDR
// if not tmp then
32221: LD_VAR 0 6
32225: NOT
32226: IFFALSE 32230
// exit ;
32228: GO 32478
// result := [ ] ;
32230: LD_ADDR_VAR 0 2
32234: PUSH
32235: EMPTY
32236: ST_TO_ADDR
// for i in tmp do
32237: LD_ADDR_VAR 0 3
32241: PUSH
32242: LD_VAR 0 6
32246: PUSH
32247: FOR_IN
32248: IFFALSE 32319
// begin t := UnitsInside ( i ) ;
32250: LD_ADDR_VAR 0 4
32254: PUSH
32255: LD_VAR 0 3
32259: PPUSH
32260: CALL_OW 313
32264: ST_TO_ADDR
// if t then
32265: LD_VAR 0 4
32269: IFFALSE 32317
// for j in t do
32271: LD_ADDR_VAR 0 7
32275: PUSH
32276: LD_VAR 0 4
32280: PUSH
32281: FOR_IN
32282: IFFALSE 32315
// result := Replace ( result , result + 1 , j ) ;
32284: LD_ADDR_VAR 0 2
32288: PUSH
32289: LD_VAR 0 2
32293: PPUSH
32294: LD_VAR 0 2
32298: PUSH
32299: LD_INT 1
32301: PLUS
32302: PPUSH
32303: LD_VAR 0 7
32307: PPUSH
32308: CALL_OW 1
32312: ST_TO_ADDR
32313: GO 32281
32315: POP
32316: POP
// end ;
32317: GO 32247
32319: POP
32320: POP
// if not result then
32321: LD_VAR 0 2
32325: NOT
32326: IFFALSE 32330
// exit ;
32328: GO 32478
// mech := result [ 1 ] ;
32330: LD_ADDR_VAR 0 5
32334: PUSH
32335: LD_VAR 0 2
32339: PUSH
32340: LD_INT 1
32342: ARRAY
32343: ST_TO_ADDR
// if result > 1 then
32344: LD_VAR 0 2
32348: PUSH
32349: LD_INT 1
32351: GREATER
32352: IFFALSE 32464
// begin for i = 2 to result do
32354: LD_ADDR_VAR 0 3
32358: PUSH
32359: DOUBLE
32360: LD_INT 2
32362: DEC
32363: ST_TO_ADDR
32364: LD_VAR 0 2
32368: PUSH
32369: FOR_TO
32370: IFFALSE 32462
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32372: LD_ADDR_VAR 0 4
32376: PUSH
32377: LD_VAR 0 2
32381: PUSH
32382: LD_VAR 0 3
32386: ARRAY
32387: PPUSH
32388: LD_INT 3
32390: PPUSH
32391: CALL_OW 259
32395: PUSH
32396: LD_VAR 0 2
32400: PUSH
32401: LD_VAR 0 3
32405: ARRAY
32406: PPUSH
32407: CALL_OW 432
32411: MINUS
32412: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32413: LD_VAR 0 4
32417: PUSH
32418: LD_VAR 0 5
32422: PPUSH
32423: LD_INT 3
32425: PPUSH
32426: CALL_OW 259
32430: PUSH
32431: LD_VAR 0 5
32435: PPUSH
32436: CALL_OW 432
32440: MINUS
32441: GREATEREQUAL
32442: IFFALSE 32460
// mech := result [ i ] ;
32444: LD_ADDR_VAR 0 5
32448: PUSH
32449: LD_VAR 0 2
32453: PUSH
32454: LD_VAR 0 3
32458: ARRAY
32459: ST_TO_ADDR
// end ;
32460: GO 32369
32462: POP
32463: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32464: LD_VAR 0 1
32468: PPUSH
32469: LD_VAR 0 5
32473: PPUSH
32474: CALL_OW 135
// end ;
32478: LD_VAR 0 2
32482: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32483: LD_INT 0
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
// result := [ ] ;
32498: LD_ADDR_VAR 0 7
32502: PUSH
32503: EMPTY
32504: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32505: LD_VAR 0 1
32509: PPUSH
32510: CALL_OW 266
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: IN
32525: NOT
32526: IFFALSE 32530
// exit ;
32528: GO 34164
// if name then
32530: LD_VAR 0 3
32534: IFFALSE 32550
// SetBName ( base_dep , name ) ;
32536: LD_VAR 0 1
32540: PPUSH
32541: LD_VAR 0 3
32545: PPUSH
32546: CALL_OW 500
// base := GetBase ( base_dep ) ;
32550: LD_ADDR_VAR 0 15
32554: PUSH
32555: LD_VAR 0 1
32559: PPUSH
32560: CALL_OW 274
32564: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32565: LD_ADDR_VAR 0 16
32569: PUSH
32570: LD_VAR 0 1
32574: PPUSH
32575: CALL_OW 255
32579: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32580: LD_ADDR_VAR 0 17
32584: PUSH
32585: LD_VAR 0 1
32589: PPUSH
32590: CALL_OW 248
32594: ST_TO_ADDR
// if sources then
32595: LD_VAR 0 5
32599: IFFALSE 32646
// for i = 1 to 3 do
32601: LD_ADDR_VAR 0 8
32605: PUSH
32606: DOUBLE
32607: LD_INT 1
32609: DEC
32610: ST_TO_ADDR
32611: LD_INT 3
32613: PUSH
32614: FOR_TO
32615: IFFALSE 32644
// AddResourceType ( base , i , sources [ i ] ) ;
32617: LD_VAR 0 15
32621: PPUSH
32622: LD_VAR 0 8
32626: PPUSH
32627: LD_VAR 0 5
32631: PUSH
32632: LD_VAR 0 8
32636: ARRAY
32637: PPUSH
32638: CALL_OW 276
32642: GO 32614
32644: POP
32645: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32646: LD_ADDR_VAR 0 18
32650: PUSH
32651: LD_VAR 0 15
32655: PPUSH
32656: LD_VAR 0 2
32660: PPUSH
32661: LD_INT 1
32663: PPUSH
32664: CALL 31907 0 3
32668: ST_TO_ADDR
// InitHc ;
32669: CALL_OW 19
// InitUc ;
32673: CALL_OW 18
// uc_side := side ;
32677: LD_ADDR_OWVAR 20
32681: PUSH
32682: LD_VAR 0 16
32686: ST_TO_ADDR
// uc_nation := nation ;
32687: LD_ADDR_OWVAR 21
32691: PUSH
32692: LD_VAR 0 17
32696: ST_TO_ADDR
// if buildings then
32697: LD_VAR 0 18
32701: IFFALSE 34023
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32703: LD_ADDR_VAR 0 19
32707: PUSH
32708: LD_VAR 0 18
32712: PPUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 30
32718: PUSH
32719: LD_INT 29
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 30
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: PPUSH
32741: CALL_OW 72
32745: ST_TO_ADDR
// if tmp then
32746: LD_VAR 0 19
32750: IFFALSE 32798
// for i in tmp do
32752: LD_ADDR_VAR 0 8
32756: PUSH
32757: LD_VAR 0 19
32761: PUSH
32762: FOR_IN
32763: IFFALSE 32796
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32765: LD_VAR 0 8
32769: PPUSH
32770: CALL_OW 250
32774: PPUSH
32775: LD_VAR 0 8
32779: PPUSH
32780: CALL_OW 251
32784: PPUSH
32785: LD_VAR 0 16
32789: PPUSH
32790: CALL_OW 441
32794: GO 32762
32796: POP
32797: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32798: LD_VAR 0 18
32802: PPUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 30
32808: PUSH
32809: LD_INT 32
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 30
32818: PUSH
32819: LD_INT 33
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: PPUSH
32831: CALL_OW 72
32835: IFFALSE 32923
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32837: LD_ADDR_VAR 0 8
32841: PUSH
32842: LD_VAR 0 18
32846: PPUSH
32847: LD_INT 2
32849: PUSH
32850: LD_INT 30
32852: PUSH
32853: LD_INT 32
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 30
32862: PUSH
32863: LD_INT 33
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: PPUSH
32875: CALL_OW 72
32879: PUSH
32880: FOR_IN
32881: IFFALSE 32921
// begin if not GetBWeapon ( i ) then
32883: LD_VAR 0 8
32887: PPUSH
32888: CALL_OW 269
32892: NOT
32893: IFFALSE 32919
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32895: LD_VAR 0 8
32899: PPUSH
32900: LD_VAR 0 8
32904: PPUSH
32905: LD_VAR 0 2
32909: PPUSH
32910: CALL 34169 0 2
32914: PPUSH
32915: CALL_OW 431
// end ;
32919: GO 32880
32921: POP
32922: POP
// end ; for i = 1 to personel do
32923: LD_ADDR_VAR 0 8
32927: PUSH
32928: DOUBLE
32929: LD_INT 1
32931: DEC
32932: ST_TO_ADDR
32933: LD_VAR 0 6
32937: PUSH
32938: FOR_TO
32939: IFFALSE 34003
// begin if i > 4 then
32941: LD_VAR 0 8
32945: PUSH
32946: LD_INT 4
32948: GREATER
32949: IFFALSE 32953
// break ;
32951: GO 34003
// case i of 1 :
32953: LD_VAR 0 8
32957: PUSH
32958: LD_INT 1
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 33046
32966: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32967: LD_ADDR_VAR 0 12
32971: PUSH
32972: LD_VAR 0 18
32976: PPUSH
32977: LD_INT 22
32979: PUSH
32980: LD_VAR 0 16
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 58
32991: PUSH
32992: EMPTY
32993: LIST
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: LD_INT 30
33000: PUSH
33001: LD_INT 32
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 30
33010: PUSH
33011: LD_INT 4
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 30
33020: PUSH
33021: LD_INT 5
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: PPUSH
33039: CALL_OW 72
33043: ST_TO_ADDR
33044: GO 33268
33046: LD_INT 2
33048: DOUBLE
33049: EQUAL
33050: IFTRUE 33054
33052: GO 33116
33054: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33055: LD_ADDR_VAR 0 12
33059: PUSH
33060: LD_VAR 0 18
33064: PPUSH
33065: LD_INT 22
33067: PUSH
33068: LD_VAR 0 16
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 30
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 30
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PPUSH
33109: CALL_OW 72
33113: ST_TO_ADDR
33114: GO 33268
33116: LD_INT 3
33118: DOUBLE
33119: EQUAL
33120: IFTRUE 33124
33122: GO 33186
33124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33125: LD_ADDR_VAR 0 12
33129: PUSH
33130: LD_VAR 0 18
33134: PPUSH
33135: LD_INT 22
33137: PUSH
33138: LD_VAR 0 16
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: LD_INT 30
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 30
33162: PUSH
33163: LD_INT 3
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PPUSH
33179: CALL_OW 72
33183: ST_TO_ADDR
33184: GO 33268
33186: LD_INT 4
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33267
33194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33195: LD_ADDR_VAR 0 12
33199: PUSH
33200: LD_VAR 0 18
33204: PPUSH
33205: LD_INT 22
33207: PUSH
33208: LD_VAR 0 16
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: LD_INT 30
33222: PUSH
33223: LD_INT 6
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 30
33232: PUSH
33233: LD_INT 7
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 30
33242: PUSH
33243: LD_INT 8
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PPUSH
33260: CALL_OW 72
33264: ST_TO_ADDR
33265: GO 33268
33267: POP
// if i = 1 then
33268: LD_VAR 0 8
33272: PUSH
33273: LD_INT 1
33275: EQUAL
33276: IFFALSE 33387
// begin tmp := [ ] ;
33278: LD_ADDR_VAR 0 19
33282: PUSH
33283: EMPTY
33284: ST_TO_ADDR
// for j in f do
33285: LD_ADDR_VAR 0 9
33289: PUSH
33290: LD_VAR 0 12
33294: PUSH
33295: FOR_IN
33296: IFFALSE 33369
// if GetBType ( j ) = b_bunker then
33298: LD_VAR 0 9
33302: PPUSH
33303: CALL_OW 266
33307: PUSH
33308: LD_INT 32
33310: EQUAL
33311: IFFALSE 33338
// tmp := Insert ( tmp , 1 , j ) else
33313: LD_ADDR_VAR 0 19
33317: PUSH
33318: LD_VAR 0 19
33322: PPUSH
33323: LD_INT 1
33325: PPUSH
33326: LD_VAR 0 9
33330: PPUSH
33331: CALL_OW 2
33335: ST_TO_ADDR
33336: GO 33367
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33338: LD_ADDR_VAR 0 19
33342: PUSH
33343: LD_VAR 0 19
33347: PPUSH
33348: LD_VAR 0 19
33352: PUSH
33353: LD_INT 1
33355: PLUS
33356: PPUSH
33357: LD_VAR 0 9
33361: PPUSH
33362: CALL_OW 2
33366: ST_TO_ADDR
33367: GO 33295
33369: POP
33370: POP
// if tmp then
33371: LD_VAR 0 19
33375: IFFALSE 33387
// f := tmp ;
33377: LD_ADDR_VAR 0 12
33381: PUSH
33382: LD_VAR 0 19
33386: ST_TO_ADDR
// end ; x := personel [ i ] ;
33387: LD_ADDR_VAR 0 13
33391: PUSH
33392: LD_VAR 0 6
33396: PUSH
33397: LD_VAR 0 8
33401: ARRAY
33402: ST_TO_ADDR
// if x = - 1 then
33403: LD_VAR 0 13
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: EQUAL
33412: IFFALSE 33621
// begin for j in f do
33414: LD_ADDR_VAR 0 9
33418: PUSH
33419: LD_VAR 0 12
33423: PUSH
33424: FOR_IN
33425: IFFALSE 33617
// repeat InitHc ;
33427: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33431: LD_VAR 0 9
33435: PPUSH
33436: CALL_OW 266
33440: PUSH
33441: LD_INT 5
33443: EQUAL
33444: IFFALSE 33514
// begin if UnitsInside ( j ) < 3 then
33446: LD_VAR 0 9
33450: PPUSH
33451: CALL_OW 313
33455: PUSH
33456: LD_INT 3
33458: LESS
33459: IFFALSE 33495
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33461: LD_INT 0
33463: PPUSH
33464: LD_INT 5
33466: PUSH
33467: LD_INT 8
33469: PUSH
33470: LD_INT 9
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: PUSH
33478: LD_VAR 0 17
33482: ARRAY
33483: PPUSH
33484: LD_VAR 0 4
33488: PPUSH
33489: CALL_OW 380
33493: GO 33512
// PrepareHuman ( false , i , skill ) ;
33495: LD_INT 0
33497: PPUSH
33498: LD_VAR 0 8
33502: PPUSH
33503: LD_VAR 0 4
33507: PPUSH
33508: CALL_OW 380
// end else
33512: GO 33531
// PrepareHuman ( false , i , skill ) ;
33514: LD_INT 0
33516: PPUSH
33517: LD_VAR 0 8
33521: PPUSH
33522: LD_VAR 0 4
33526: PPUSH
33527: CALL_OW 380
// un := CreateHuman ;
33531: LD_ADDR_VAR 0 14
33535: PUSH
33536: CALL_OW 44
33540: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33541: LD_ADDR_VAR 0 7
33545: PUSH
33546: LD_VAR 0 7
33550: PPUSH
33551: LD_INT 1
33553: PPUSH
33554: LD_VAR 0 14
33558: PPUSH
33559: CALL_OW 2
33563: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33564: LD_VAR 0 14
33568: PPUSH
33569: LD_VAR 0 9
33573: PPUSH
33574: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33578: LD_VAR 0 9
33582: PPUSH
33583: CALL_OW 313
33587: PUSH
33588: LD_INT 6
33590: EQUAL
33591: PUSH
33592: LD_VAR 0 9
33596: PPUSH
33597: CALL_OW 266
33601: PUSH
33602: LD_INT 32
33604: PUSH
33605: LD_INT 31
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: IN
33612: OR
33613: IFFALSE 33427
33615: GO 33424
33617: POP
33618: POP
// end else
33619: GO 34001
// for j = 1 to x do
33621: LD_ADDR_VAR 0 9
33625: PUSH
33626: DOUBLE
33627: LD_INT 1
33629: DEC
33630: ST_TO_ADDR
33631: LD_VAR 0 13
33635: PUSH
33636: FOR_TO
33637: IFFALSE 33999
// begin InitHc ;
33639: CALL_OW 19
// if not f then
33643: LD_VAR 0 12
33647: NOT
33648: IFFALSE 33737
// begin PrepareHuman ( false , i , skill ) ;
33650: LD_INT 0
33652: PPUSH
33653: LD_VAR 0 8
33657: PPUSH
33658: LD_VAR 0 4
33662: PPUSH
33663: CALL_OW 380
// un := CreateHuman ;
33667: LD_ADDR_VAR 0 14
33671: PUSH
33672: CALL_OW 44
33676: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33677: LD_ADDR_VAR 0 7
33681: PUSH
33682: LD_VAR 0 7
33686: PPUSH
33687: LD_INT 1
33689: PPUSH
33690: LD_VAR 0 14
33694: PPUSH
33695: CALL_OW 2
33699: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33700: LD_VAR 0 14
33704: PPUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 250
33714: PPUSH
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL_OW 251
33724: PPUSH
33725: LD_INT 10
33727: PPUSH
33728: LD_INT 0
33730: PPUSH
33731: CALL_OW 50
// continue ;
33735: GO 33636
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33737: LD_VAR 0 12
33741: PUSH
33742: LD_INT 1
33744: ARRAY
33745: PPUSH
33746: CALL_OW 313
33750: PUSH
33751: LD_VAR 0 12
33755: PUSH
33756: LD_INT 1
33758: ARRAY
33759: PPUSH
33760: CALL_OW 266
33764: PUSH
33765: LD_INT 32
33767: PUSH
33768: LD_INT 31
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: IN
33775: AND
33776: PUSH
33777: LD_VAR 0 12
33781: PUSH
33782: LD_INT 1
33784: ARRAY
33785: PPUSH
33786: CALL_OW 313
33790: PUSH
33791: LD_INT 6
33793: EQUAL
33794: OR
33795: IFFALSE 33815
// f := Delete ( f , 1 ) ;
33797: LD_ADDR_VAR 0 12
33801: PUSH
33802: LD_VAR 0 12
33806: PPUSH
33807: LD_INT 1
33809: PPUSH
33810: CALL_OW 3
33814: ST_TO_ADDR
// if not f then
33815: LD_VAR 0 12
33819: NOT
33820: IFFALSE 33838
// begin x := x + 2 ;
33822: LD_ADDR_VAR 0 13
33826: PUSH
33827: LD_VAR 0 13
33831: PUSH
33832: LD_INT 2
33834: PLUS
33835: ST_TO_ADDR
// continue ;
33836: GO 33636
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33838: LD_VAR 0 12
33842: PUSH
33843: LD_INT 1
33845: ARRAY
33846: PPUSH
33847: CALL_OW 266
33851: PUSH
33852: LD_INT 5
33854: EQUAL
33855: IFFALSE 33929
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33857: LD_VAR 0 12
33861: PUSH
33862: LD_INT 1
33864: ARRAY
33865: PPUSH
33866: CALL_OW 313
33870: PUSH
33871: LD_INT 3
33873: LESS
33874: IFFALSE 33910
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33876: LD_INT 0
33878: PPUSH
33879: LD_INT 5
33881: PUSH
33882: LD_INT 8
33884: PUSH
33885: LD_INT 9
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: PUSH
33893: LD_VAR 0 17
33897: ARRAY
33898: PPUSH
33899: LD_VAR 0 4
33903: PPUSH
33904: CALL_OW 380
33908: GO 33927
// PrepareHuman ( false , i , skill ) ;
33910: LD_INT 0
33912: PPUSH
33913: LD_VAR 0 8
33917: PPUSH
33918: LD_VAR 0 4
33922: PPUSH
33923: CALL_OW 380
// end else
33927: GO 33946
// PrepareHuman ( false , i , skill ) ;
33929: LD_INT 0
33931: PPUSH
33932: LD_VAR 0 8
33936: PPUSH
33937: LD_VAR 0 4
33941: PPUSH
33942: CALL_OW 380
// un := CreateHuman ;
33946: LD_ADDR_VAR 0 14
33950: PUSH
33951: CALL_OW 44
33955: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33956: LD_ADDR_VAR 0 7
33960: PUSH
33961: LD_VAR 0 7
33965: PPUSH
33966: LD_INT 1
33968: PPUSH
33969: LD_VAR 0 14
33973: PPUSH
33974: CALL_OW 2
33978: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33979: LD_VAR 0 14
33983: PPUSH
33984: LD_VAR 0 12
33988: PUSH
33989: LD_INT 1
33991: ARRAY
33992: PPUSH
33993: CALL_OW 52
// end ;
33997: GO 33636
33999: POP
34000: POP
// end ;
34001: GO 32938
34003: POP
34004: POP
// result := result ^ buildings ;
34005: LD_ADDR_VAR 0 7
34009: PUSH
34010: LD_VAR 0 7
34014: PUSH
34015: LD_VAR 0 18
34019: ADD
34020: ST_TO_ADDR
// end else
34021: GO 34164
// begin for i = 1 to personel do
34023: LD_ADDR_VAR 0 8
34027: PUSH
34028: DOUBLE
34029: LD_INT 1
34031: DEC
34032: ST_TO_ADDR
34033: LD_VAR 0 6
34037: PUSH
34038: FOR_TO
34039: IFFALSE 34162
// begin if i > 4 then
34041: LD_VAR 0 8
34045: PUSH
34046: LD_INT 4
34048: GREATER
34049: IFFALSE 34053
// break ;
34051: GO 34162
// x := personel [ i ] ;
34053: LD_ADDR_VAR 0 13
34057: PUSH
34058: LD_VAR 0 6
34062: PUSH
34063: LD_VAR 0 8
34067: ARRAY
34068: ST_TO_ADDR
// if x = - 1 then
34069: LD_VAR 0 13
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: EQUAL
34078: IFFALSE 34082
// continue ;
34080: GO 34038
// PrepareHuman ( false , i , skill ) ;
34082: LD_INT 0
34084: PPUSH
34085: LD_VAR 0 8
34089: PPUSH
34090: LD_VAR 0 4
34094: PPUSH
34095: CALL_OW 380
// un := CreateHuman ;
34099: LD_ADDR_VAR 0 14
34103: PUSH
34104: CALL_OW 44
34108: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34109: LD_VAR 0 14
34113: PPUSH
34114: LD_VAR 0 1
34118: PPUSH
34119: CALL_OW 250
34123: PPUSH
34124: LD_VAR 0 1
34128: PPUSH
34129: CALL_OW 251
34133: PPUSH
34134: LD_INT 10
34136: PPUSH
34137: LD_INT 0
34139: PPUSH
34140: CALL_OW 50
// result := result ^ un ;
34144: LD_ADDR_VAR 0 7
34148: PUSH
34149: LD_VAR 0 7
34153: PUSH
34154: LD_VAR 0 14
34158: ADD
34159: ST_TO_ADDR
// end ;
34160: GO 34038
34162: POP
34163: POP
// end ; end ;
34164: LD_VAR 0 7
34168: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34169: LD_INT 0
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
34175: PPUSH
34176: PPUSH
34177: PPUSH
34178: PPUSH
34179: PPUSH
34180: PPUSH
34181: PPUSH
34182: PPUSH
34183: PPUSH
34184: PPUSH
34185: PPUSH
34186: PPUSH
// result := false ;
34187: LD_ADDR_VAR 0 3
34191: PUSH
34192: LD_INT 0
34194: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34195: LD_VAR 0 1
34199: NOT
34200: PUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 266
34210: PUSH
34211: LD_INT 32
34213: PUSH
34214: LD_INT 33
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: IN
34221: NOT
34222: OR
34223: IFFALSE 34227
// exit ;
34225: GO 35336
// nat := GetNation ( tower ) ;
34227: LD_ADDR_VAR 0 12
34231: PUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 248
34241: ST_TO_ADDR
// side := GetSide ( tower ) ;
34242: LD_ADDR_VAR 0 16
34246: PUSH
34247: LD_VAR 0 1
34251: PPUSH
34252: CALL_OW 255
34256: ST_TO_ADDR
// x := GetX ( tower ) ;
34257: LD_ADDR_VAR 0 10
34261: PUSH
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 250
34271: ST_TO_ADDR
// y := GetY ( tower ) ;
34272: LD_ADDR_VAR 0 11
34276: PUSH
34277: LD_VAR 0 1
34281: PPUSH
34282: CALL_OW 251
34286: ST_TO_ADDR
// if not x or not y then
34287: LD_VAR 0 10
34291: NOT
34292: PUSH
34293: LD_VAR 0 11
34297: NOT
34298: OR
34299: IFFALSE 34303
// exit ;
34301: GO 35336
// weapon := 0 ;
34303: LD_ADDR_VAR 0 18
34307: PUSH
34308: LD_INT 0
34310: ST_TO_ADDR
// fac_list := [ ] ;
34311: LD_ADDR_VAR 0 17
34315: PUSH
34316: EMPTY
34317: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34318: LD_ADDR_VAR 0 6
34322: PUSH
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 274
34332: PPUSH
34333: LD_VAR 0 2
34337: PPUSH
34338: LD_INT 0
34340: PPUSH
34341: CALL 31907 0 3
34345: PPUSH
34346: LD_INT 30
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PPUSH
34356: CALL_OW 72
34360: ST_TO_ADDR
// if not factories then
34361: LD_VAR 0 6
34365: NOT
34366: IFFALSE 34370
// exit ;
34368: GO 35336
// for i in factories do
34370: LD_ADDR_VAR 0 8
34374: PUSH
34375: LD_VAR 0 6
34379: PUSH
34380: FOR_IN
34381: IFFALSE 34406
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34383: LD_ADDR_VAR 0 17
34387: PUSH
34388: LD_VAR 0 17
34392: PUSH
34393: LD_VAR 0 8
34397: PPUSH
34398: CALL_OW 478
34402: UNION
34403: ST_TO_ADDR
34404: GO 34380
34406: POP
34407: POP
// if not fac_list then
34408: LD_VAR 0 17
34412: NOT
34413: IFFALSE 34417
// exit ;
34415: GO 35336
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34417: LD_ADDR_VAR 0 5
34421: PUSH
34422: LD_INT 4
34424: PUSH
34425: LD_INT 5
34427: PUSH
34428: LD_INT 9
34430: PUSH
34431: LD_INT 10
34433: PUSH
34434: LD_INT 6
34436: PUSH
34437: LD_INT 7
34439: PUSH
34440: LD_INT 11
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 27
34454: PUSH
34455: LD_INT 28
34457: PUSH
34458: LD_INT 26
34460: PUSH
34461: LD_INT 30
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 43
34472: PUSH
34473: LD_INT 44
34475: PUSH
34476: LD_INT 46
34478: PUSH
34479: LD_INT 45
34481: PUSH
34482: LD_INT 47
34484: PUSH
34485: LD_INT 49
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: PUSH
34501: LD_VAR 0 12
34505: ARRAY
34506: ST_TO_ADDR
// list := list isect fac_list ;
34507: LD_ADDR_VAR 0 5
34511: PUSH
34512: LD_VAR 0 5
34516: PUSH
34517: LD_VAR 0 17
34521: ISECT
34522: ST_TO_ADDR
// if not list then
34523: LD_VAR 0 5
34527: NOT
34528: IFFALSE 34532
// exit ;
34530: GO 35336
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34532: LD_VAR 0 12
34536: PUSH
34537: LD_INT 3
34539: EQUAL
34540: PUSH
34541: LD_INT 49
34543: PUSH
34544: LD_VAR 0 5
34548: IN
34549: AND
34550: PUSH
34551: LD_INT 31
34553: PPUSH
34554: LD_VAR 0 16
34558: PPUSH
34559: CALL_OW 321
34563: PUSH
34564: LD_INT 2
34566: EQUAL
34567: AND
34568: IFFALSE 34628
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34570: LD_INT 22
34572: PUSH
34573: LD_VAR 0 16
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 35
34584: PUSH
34585: LD_INT 49
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 91
34594: PUSH
34595: LD_VAR 0 1
34599: PUSH
34600: LD_INT 10
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: LIST
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: PPUSH
34613: CALL_OW 69
34617: NOT
34618: IFFALSE 34628
// weapon := ru_time_lapser ;
34620: LD_ADDR_VAR 0 18
34624: PUSH
34625: LD_INT 49
34627: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34628: LD_VAR 0 12
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: IN
34643: PUSH
34644: LD_INT 11
34646: PUSH
34647: LD_VAR 0 5
34651: IN
34652: PUSH
34653: LD_INT 30
34655: PUSH
34656: LD_VAR 0 5
34660: IN
34661: OR
34662: AND
34663: PUSH
34664: LD_INT 6
34666: PPUSH
34667: LD_VAR 0 16
34671: PPUSH
34672: CALL_OW 321
34676: PUSH
34677: LD_INT 2
34679: EQUAL
34680: AND
34681: IFFALSE 34846
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34683: LD_INT 22
34685: PUSH
34686: LD_VAR 0 16
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 35
34700: PUSH
34701: LD_INT 11
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 35
34710: PUSH
34711: LD_INT 30
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 91
34725: PUSH
34726: LD_VAR 0 1
34730: PUSH
34731: LD_INT 18
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: LIST
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: PPUSH
34744: CALL_OW 69
34748: NOT
34749: PUSH
34750: LD_INT 22
34752: PUSH
34753: LD_VAR 0 16
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 30
34767: PUSH
34768: LD_INT 32
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 30
34777: PUSH
34778: LD_INT 33
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 91
34792: PUSH
34793: LD_VAR 0 1
34797: PUSH
34798: LD_INT 12
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: PUSH
34811: EMPTY
34812: LIST
34813: PPUSH
34814: CALL_OW 69
34818: PUSH
34819: LD_INT 2
34821: GREATER
34822: AND
34823: IFFALSE 34846
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34825: LD_ADDR_VAR 0 18
34829: PUSH
34830: LD_INT 11
34832: PUSH
34833: LD_INT 30
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_VAR 0 12
34844: ARRAY
34845: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34846: LD_VAR 0 18
34850: NOT
34851: PUSH
34852: LD_INT 40
34854: PPUSH
34855: LD_VAR 0 16
34859: PPUSH
34860: CALL_OW 321
34864: PUSH
34865: LD_INT 2
34867: EQUAL
34868: AND
34869: PUSH
34870: LD_INT 7
34872: PUSH
34873: LD_VAR 0 5
34877: IN
34878: PUSH
34879: LD_INT 28
34881: PUSH
34882: LD_VAR 0 5
34886: IN
34887: OR
34888: PUSH
34889: LD_INT 45
34891: PUSH
34892: LD_VAR 0 5
34896: IN
34897: OR
34898: AND
34899: IFFALSE 35153
// begin hex := GetHexInfo ( x , y ) ;
34901: LD_ADDR_VAR 0 4
34905: PUSH
34906: LD_VAR 0 10
34910: PPUSH
34911: LD_VAR 0 11
34915: PPUSH
34916: CALL_OW 546
34920: ST_TO_ADDR
// if hex [ 1 ] then
34921: LD_VAR 0 4
34925: PUSH
34926: LD_INT 1
34928: ARRAY
34929: IFFALSE 34933
// exit ;
34931: GO 35336
// height := hex [ 2 ] ;
34933: LD_ADDR_VAR 0 15
34937: PUSH
34938: LD_VAR 0 4
34942: PUSH
34943: LD_INT 2
34945: ARRAY
34946: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34947: LD_ADDR_VAR 0 14
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: LD_INT 3
34960: PUSH
34961: LD_INT 5
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: ST_TO_ADDR
// for i in tmp do
34970: LD_ADDR_VAR 0 8
34974: PUSH
34975: LD_VAR 0 14
34979: PUSH
34980: FOR_IN
34981: IFFALSE 35151
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34983: LD_ADDR_VAR 0 9
34987: PUSH
34988: LD_VAR 0 10
34992: PPUSH
34993: LD_VAR 0 8
34997: PPUSH
34998: LD_INT 5
35000: PPUSH
35001: CALL_OW 272
35005: PUSH
35006: LD_VAR 0 11
35010: PPUSH
35011: LD_VAR 0 8
35015: PPUSH
35016: LD_INT 5
35018: PPUSH
35019: CALL_OW 273
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35028: LD_VAR 0 9
35032: PUSH
35033: LD_INT 1
35035: ARRAY
35036: PPUSH
35037: LD_VAR 0 9
35041: PUSH
35042: LD_INT 2
35044: ARRAY
35045: PPUSH
35046: CALL_OW 488
35050: IFFALSE 35149
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35052: LD_ADDR_VAR 0 4
35056: PUSH
35057: LD_VAR 0 9
35061: PUSH
35062: LD_INT 1
35064: ARRAY
35065: PPUSH
35066: LD_VAR 0 9
35070: PUSH
35071: LD_INT 2
35073: ARRAY
35074: PPUSH
35075: CALL_OW 546
35079: ST_TO_ADDR
// if hex [ 1 ] then
35080: LD_VAR 0 4
35084: PUSH
35085: LD_INT 1
35087: ARRAY
35088: IFFALSE 35092
// continue ;
35090: GO 34980
// h := hex [ 2 ] ;
35092: LD_ADDR_VAR 0 13
35096: PUSH
35097: LD_VAR 0 4
35101: PUSH
35102: LD_INT 2
35104: ARRAY
35105: ST_TO_ADDR
// if h + 7 < height then
35106: LD_VAR 0 13
35110: PUSH
35111: LD_INT 7
35113: PLUS
35114: PUSH
35115: LD_VAR 0 15
35119: LESS
35120: IFFALSE 35149
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35122: LD_ADDR_VAR 0 18
35126: PUSH
35127: LD_INT 7
35129: PUSH
35130: LD_INT 28
35132: PUSH
35133: LD_INT 45
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: PUSH
35141: LD_VAR 0 12
35145: ARRAY
35146: ST_TO_ADDR
// break ;
35147: GO 35151
// end ; end ; end ;
35149: GO 34980
35151: POP
35152: POP
// end ; if not weapon then
35153: LD_VAR 0 18
35157: NOT
35158: IFFALSE 35218
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35160: LD_ADDR_VAR 0 5
35164: PUSH
35165: LD_VAR 0 5
35169: PUSH
35170: LD_INT 11
35172: PUSH
35173: LD_INT 30
35175: PUSH
35176: LD_INT 49
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: DIFF
35184: ST_TO_ADDR
// if not list then
35185: LD_VAR 0 5
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 35336
// weapon := list [ rand ( 1 , list ) ] ;
35194: LD_ADDR_VAR 0 18
35198: PUSH
35199: LD_VAR 0 5
35203: PUSH
35204: LD_INT 1
35206: PPUSH
35207: LD_VAR 0 5
35211: PPUSH
35212: CALL_OW 12
35216: ARRAY
35217: ST_TO_ADDR
// end ; if weapon then
35218: LD_VAR 0 18
35222: IFFALSE 35336
// begin tmp := CostOfWeapon ( weapon ) ;
35224: LD_ADDR_VAR 0 14
35228: PUSH
35229: LD_VAR 0 18
35233: PPUSH
35234: CALL_OW 451
35238: ST_TO_ADDR
// j := GetBase ( tower ) ;
35239: LD_ADDR_VAR 0 9
35243: PUSH
35244: LD_VAR 0 1
35248: PPUSH
35249: CALL_OW 274
35253: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35254: LD_VAR 0 9
35258: PPUSH
35259: LD_INT 1
35261: PPUSH
35262: CALL_OW 275
35266: PUSH
35267: LD_VAR 0 14
35271: PUSH
35272: LD_INT 1
35274: ARRAY
35275: GREATEREQUAL
35276: PUSH
35277: LD_VAR 0 9
35281: PPUSH
35282: LD_INT 2
35284: PPUSH
35285: CALL_OW 275
35289: PUSH
35290: LD_VAR 0 14
35294: PUSH
35295: LD_INT 2
35297: ARRAY
35298: GREATEREQUAL
35299: AND
35300: PUSH
35301: LD_VAR 0 9
35305: PPUSH
35306: LD_INT 3
35308: PPUSH
35309: CALL_OW 275
35313: PUSH
35314: LD_VAR 0 14
35318: PUSH
35319: LD_INT 3
35321: ARRAY
35322: GREATEREQUAL
35323: AND
35324: IFFALSE 35336
// result := weapon ;
35326: LD_ADDR_VAR 0 3
35330: PUSH
35331: LD_VAR 0 18
35335: ST_TO_ADDR
// end ; end ;
35336: LD_VAR 0 3
35340: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35341: LD_INT 0
35343: PPUSH
35344: PPUSH
// result := true ;
35345: LD_ADDR_VAR 0 3
35349: PUSH
35350: LD_INT 1
35352: ST_TO_ADDR
// if array1 = array2 then
35353: LD_VAR 0 1
35357: PUSH
35358: LD_VAR 0 2
35362: EQUAL
35363: IFFALSE 35423
// begin for i = 1 to array1 do
35365: LD_ADDR_VAR 0 4
35369: PUSH
35370: DOUBLE
35371: LD_INT 1
35373: DEC
35374: ST_TO_ADDR
35375: LD_VAR 0 1
35379: PUSH
35380: FOR_TO
35381: IFFALSE 35419
// if array1 [ i ] <> array2 [ i ] then
35383: LD_VAR 0 1
35387: PUSH
35388: LD_VAR 0 4
35392: ARRAY
35393: PUSH
35394: LD_VAR 0 2
35398: PUSH
35399: LD_VAR 0 4
35403: ARRAY
35404: NONEQUAL
35405: IFFALSE 35417
// begin result := false ;
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_INT 0
35414: ST_TO_ADDR
// break ;
35415: GO 35419
// end ;
35417: GO 35380
35419: POP
35420: POP
// end else
35421: GO 35431
// result := false ;
35423: LD_ADDR_VAR 0 3
35427: PUSH
35428: LD_INT 0
35430: ST_TO_ADDR
// end ;
35431: LD_VAR 0 3
35435: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35436: LD_INT 0
35438: PPUSH
35439: PPUSH
// if not array1 or not array2 then
35440: LD_VAR 0 1
35444: NOT
35445: PUSH
35446: LD_VAR 0 2
35450: NOT
35451: OR
35452: IFFALSE 35456
// exit ;
35454: GO 35520
// result := true ;
35456: LD_ADDR_VAR 0 3
35460: PUSH
35461: LD_INT 1
35463: ST_TO_ADDR
// for i = 1 to array1 do
35464: LD_ADDR_VAR 0 4
35468: PUSH
35469: DOUBLE
35470: LD_INT 1
35472: DEC
35473: ST_TO_ADDR
35474: LD_VAR 0 1
35478: PUSH
35479: FOR_TO
35480: IFFALSE 35518
// if array1 [ i ] <> array2 [ i ] then
35482: LD_VAR 0 1
35486: PUSH
35487: LD_VAR 0 4
35491: ARRAY
35492: PUSH
35493: LD_VAR 0 2
35497: PUSH
35498: LD_VAR 0 4
35502: ARRAY
35503: NONEQUAL
35504: IFFALSE 35516
// begin result := false ;
35506: LD_ADDR_VAR 0 3
35510: PUSH
35511: LD_INT 0
35513: ST_TO_ADDR
// break ;
35514: GO 35518
// end ;
35516: GO 35479
35518: POP
35519: POP
// end ;
35520: LD_VAR 0 3
35524: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35525: LD_INT 0
35527: PPUSH
35528: PPUSH
35529: PPUSH
// pom := GetBase ( fac ) ;
35530: LD_ADDR_VAR 0 5
35534: PUSH
35535: LD_VAR 0 1
35539: PPUSH
35540: CALL_OW 274
35544: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35545: LD_ADDR_VAR 0 4
35549: PUSH
35550: LD_VAR 0 2
35554: PUSH
35555: LD_INT 1
35557: ARRAY
35558: PPUSH
35559: LD_VAR 0 2
35563: PUSH
35564: LD_INT 2
35566: ARRAY
35567: PPUSH
35568: LD_VAR 0 2
35572: PUSH
35573: LD_INT 3
35575: ARRAY
35576: PPUSH
35577: LD_VAR 0 2
35581: PUSH
35582: LD_INT 4
35584: ARRAY
35585: PPUSH
35586: CALL_OW 449
35590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35591: LD_ADDR_VAR 0 3
35595: PUSH
35596: LD_VAR 0 5
35600: PPUSH
35601: LD_INT 1
35603: PPUSH
35604: CALL_OW 275
35608: PUSH
35609: LD_VAR 0 4
35613: PUSH
35614: LD_INT 1
35616: ARRAY
35617: GREATEREQUAL
35618: PUSH
35619: LD_VAR 0 5
35623: PPUSH
35624: LD_INT 2
35626: PPUSH
35627: CALL_OW 275
35631: PUSH
35632: LD_VAR 0 4
35636: PUSH
35637: LD_INT 2
35639: ARRAY
35640: GREATEREQUAL
35641: AND
35642: PUSH
35643: LD_VAR 0 5
35647: PPUSH
35648: LD_INT 3
35650: PPUSH
35651: CALL_OW 275
35655: PUSH
35656: LD_VAR 0 4
35660: PUSH
35661: LD_INT 3
35663: ARRAY
35664: GREATEREQUAL
35665: AND
35666: ST_TO_ADDR
// end ;
35667: LD_VAR 0 3
35671: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35672: LD_INT 0
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
// pom := GetBase ( building ) ;
35678: LD_ADDR_VAR 0 3
35682: PUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 274
35692: ST_TO_ADDR
// if not pom then
35693: LD_VAR 0 3
35697: NOT
35698: IFFALSE 35702
// exit ;
35700: GO 35872
// btype := GetBType ( building ) ;
35702: LD_ADDR_VAR 0 5
35706: PUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 266
35716: ST_TO_ADDR
// if btype = b_armoury then
35717: LD_VAR 0 5
35721: PUSH
35722: LD_INT 4
35724: EQUAL
35725: IFFALSE 35735
// btype := b_barracks ;
35727: LD_ADDR_VAR 0 5
35731: PUSH
35732: LD_INT 5
35734: ST_TO_ADDR
// if btype = b_depot then
35735: LD_VAR 0 5
35739: PUSH
35740: LD_INT 0
35742: EQUAL
35743: IFFALSE 35753
// btype := b_warehouse ;
35745: LD_ADDR_VAR 0 5
35749: PUSH
35750: LD_INT 1
35752: ST_TO_ADDR
// if btype = b_workshop then
35753: LD_VAR 0 5
35757: PUSH
35758: LD_INT 2
35760: EQUAL
35761: IFFALSE 35771
// btype := b_factory ;
35763: LD_ADDR_VAR 0 5
35767: PUSH
35768: LD_INT 3
35770: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35771: LD_ADDR_VAR 0 4
35775: PUSH
35776: LD_VAR 0 5
35780: PPUSH
35781: LD_VAR 0 1
35785: PPUSH
35786: CALL_OW 248
35790: PPUSH
35791: CALL_OW 450
35795: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35796: LD_ADDR_VAR 0 2
35800: PUSH
35801: LD_VAR 0 3
35805: PPUSH
35806: LD_INT 1
35808: PPUSH
35809: CALL_OW 275
35813: PUSH
35814: LD_VAR 0 4
35818: PUSH
35819: LD_INT 1
35821: ARRAY
35822: GREATEREQUAL
35823: PUSH
35824: LD_VAR 0 3
35828: PPUSH
35829: LD_INT 2
35831: PPUSH
35832: CALL_OW 275
35836: PUSH
35837: LD_VAR 0 4
35841: PUSH
35842: LD_INT 2
35844: ARRAY
35845: GREATEREQUAL
35846: AND
35847: PUSH
35848: LD_VAR 0 3
35852: PPUSH
35853: LD_INT 3
35855: PPUSH
35856: CALL_OW 275
35860: PUSH
35861: LD_VAR 0 4
35865: PUSH
35866: LD_INT 3
35868: ARRAY
35869: GREATEREQUAL
35870: AND
35871: ST_TO_ADDR
// end ;
35872: LD_VAR 0 2
35876: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35877: LD_INT 0
35879: PPUSH
35880: PPUSH
35881: PPUSH
// pom := GetBase ( building ) ;
35882: LD_ADDR_VAR 0 4
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 274
35896: ST_TO_ADDR
// if not pom then
35897: LD_VAR 0 4
35901: NOT
35902: IFFALSE 35906
// exit ;
35904: GO 36007
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35906: LD_ADDR_VAR 0 5
35910: PUSH
35911: LD_VAR 0 2
35915: PPUSH
35916: LD_VAR 0 1
35920: PPUSH
35921: CALL_OW 248
35925: PPUSH
35926: CALL_OW 450
35930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35931: LD_ADDR_VAR 0 3
35935: PUSH
35936: LD_VAR 0 4
35940: PPUSH
35941: LD_INT 1
35943: PPUSH
35944: CALL_OW 275
35948: PUSH
35949: LD_VAR 0 5
35953: PUSH
35954: LD_INT 1
35956: ARRAY
35957: GREATEREQUAL
35958: PUSH
35959: LD_VAR 0 4
35963: PPUSH
35964: LD_INT 2
35966: PPUSH
35967: CALL_OW 275
35971: PUSH
35972: LD_VAR 0 5
35976: PUSH
35977: LD_INT 2
35979: ARRAY
35980: GREATEREQUAL
35981: AND
35982: PUSH
35983: LD_VAR 0 4
35987: PPUSH
35988: LD_INT 3
35990: PPUSH
35991: CALL_OW 275
35995: PUSH
35996: LD_VAR 0 5
36000: PUSH
36001: LD_INT 3
36003: ARRAY
36004: GREATEREQUAL
36005: AND
36006: ST_TO_ADDR
// end ;
36007: LD_VAR 0 3
36011: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36012: LD_INT 0
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
// result := false ;
36025: LD_ADDR_VAR 0 8
36029: PUSH
36030: LD_INT 0
36032: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36033: LD_VAR 0 5
36037: NOT
36038: PUSH
36039: LD_VAR 0 1
36043: NOT
36044: OR
36045: PUSH
36046: LD_VAR 0 2
36050: NOT
36051: OR
36052: PUSH
36053: LD_VAR 0 3
36057: NOT
36058: OR
36059: IFFALSE 36063
// exit ;
36061: GO 36877
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36063: LD_ADDR_VAR 0 14
36067: PUSH
36068: LD_VAR 0 1
36072: PPUSH
36073: LD_VAR 0 2
36077: PPUSH
36078: LD_VAR 0 3
36082: PPUSH
36083: LD_VAR 0 4
36087: PPUSH
36088: LD_VAR 0 5
36092: PUSH
36093: LD_INT 1
36095: ARRAY
36096: PPUSH
36097: CALL_OW 248
36101: PPUSH
36102: LD_INT 0
36104: PPUSH
36105: CALL 38110 0 6
36109: ST_TO_ADDR
// if not hexes then
36110: LD_VAR 0 14
36114: NOT
36115: IFFALSE 36119
// exit ;
36117: GO 36877
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36119: LD_ADDR_VAR 0 17
36123: PUSH
36124: LD_VAR 0 5
36128: PPUSH
36129: LD_INT 22
36131: PUSH
36132: LD_VAR 0 13
36136: PPUSH
36137: CALL_OW 255
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: LD_INT 30
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 30
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PPUSH
36178: CALL_OW 72
36182: ST_TO_ADDR
// for i = 1 to hexes do
36183: LD_ADDR_VAR 0 9
36187: PUSH
36188: DOUBLE
36189: LD_INT 1
36191: DEC
36192: ST_TO_ADDR
36193: LD_VAR 0 14
36197: PUSH
36198: FOR_TO
36199: IFFALSE 36875
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36201: LD_ADDR_VAR 0 13
36205: PUSH
36206: LD_VAR 0 14
36210: PUSH
36211: LD_VAR 0 9
36215: ARRAY
36216: PUSH
36217: LD_INT 1
36219: ARRAY
36220: PPUSH
36221: LD_VAR 0 14
36225: PUSH
36226: LD_VAR 0 9
36230: ARRAY
36231: PUSH
36232: LD_INT 2
36234: ARRAY
36235: PPUSH
36236: CALL_OW 428
36240: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36241: LD_VAR 0 14
36245: PUSH
36246: LD_VAR 0 9
36250: ARRAY
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PPUSH
36256: LD_VAR 0 14
36260: PUSH
36261: LD_VAR 0 9
36265: ARRAY
36266: PUSH
36267: LD_INT 2
36269: ARRAY
36270: PPUSH
36271: CALL_OW 351
36275: PUSH
36276: LD_VAR 0 14
36280: PUSH
36281: LD_VAR 0 9
36285: ARRAY
36286: PUSH
36287: LD_INT 1
36289: ARRAY
36290: PPUSH
36291: LD_VAR 0 14
36295: PUSH
36296: LD_VAR 0 9
36300: ARRAY
36301: PUSH
36302: LD_INT 2
36304: ARRAY
36305: PPUSH
36306: CALL_OW 488
36310: NOT
36311: OR
36312: PUSH
36313: LD_VAR 0 13
36317: PPUSH
36318: CALL_OW 247
36322: PUSH
36323: LD_INT 3
36325: EQUAL
36326: OR
36327: IFFALSE 36333
// exit ;
36329: POP
36330: POP
36331: GO 36877
// if not tmp then
36333: LD_VAR 0 13
36337: NOT
36338: IFFALSE 36342
// continue ;
36340: GO 36198
// result := true ;
36342: LD_ADDR_VAR 0 8
36346: PUSH
36347: LD_INT 1
36349: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36350: LD_VAR 0 6
36354: PUSH
36355: LD_VAR 0 13
36359: PPUSH
36360: CALL_OW 247
36364: PUSH
36365: LD_INT 2
36367: EQUAL
36368: AND
36369: PUSH
36370: LD_VAR 0 13
36374: PPUSH
36375: CALL_OW 263
36379: PUSH
36380: LD_INT 1
36382: EQUAL
36383: AND
36384: IFFALSE 36548
// begin if IsDrivenBy ( tmp ) then
36386: LD_VAR 0 13
36390: PPUSH
36391: CALL_OW 311
36395: IFFALSE 36399
// continue ;
36397: GO 36198
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36399: LD_VAR 0 6
36403: PPUSH
36404: LD_INT 3
36406: PUSH
36407: LD_INT 60
36409: PUSH
36410: EMPTY
36411: LIST
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 3
36419: PUSH
36420: LD_INT 55
36422: PUSH
36423: EMPTY
36424: LIST
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PPUSH
36434: CALL_OW 72
36438: IFFALSE 36546
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36440: LD_ADDR_VAR 0 18
36444: PUSH
36445: LD_VAR 0 6
36449: PPUSH
36450: LD_INT 3
36452: PUSH
36453: LD_INT 60
36455: PUSH
36456: EMPTY
36457: LIST
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 3
36465: PUSH
36466: LD_INT 55
36468: PUSH
36469: EMPTY
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PPUSH
36480: CALL_OW 72
36484: PUSH
36485: LD_INT 1
36487: ARRAY
36488: ST_TO_ADDR
// if IsInUnit ( driver ) then
36489: LD_VAR 0 18
36493: PPUSH
36494: CALL_OW 310
36498: IFFALSE 36509
// ComExit ( driver ) ;
36500: LD_VAR 0 18
36504: PPUSH
36505: CALL 61889 0 1
// AddComEnterUnit ( driver , tmp ) ;
36509: LD_VAR 0 18
36513: PPUSH
36514: LD_VAR 0 13
36518: PPUSH
36519: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36523: LD_VAR 0 18
36527: PPUSH
36528: LD_VAR 0 7
36532: PPUSH
36533: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36537: LD_VAR 0 18
36541: PPUSH
36542: CALL_OW 181
// end ; continue ;
36546: GO 36198
// end ; if not cleaners or not tmp in cleaners then
36548: LD_VAR 0 6
36552: NOT
36553: PUSH
36554: LD_VAR 0 13
36558: PUSH
36559: LD_VAR 0 6
36563: IN
36564: NOT
36565: OR
36566: IFFALSE 36873
// begin if dep then
36568: LD_VAR 0 17
36572: IFFALSE 36708
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36574: LD_ADDR_VAR 0 16
36578: PUSH
36579: LD_VAR 0 17
36583: PUSH
36584: LD_INT 1
36586: ARRAY
36587: PPUSH
36588: CALL_OW 250
36592: PPUSH
36593: LD_VAR 0 17
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: PPUSH
36602: CALL_OW 254
36606: PPUSH
36607: LD_INT 5
36609: PPUSH
36610: CALL_OW 272
36614: PUSH
36615: LD_VAR 0 17
36619: PUSH
36620: LD_INT 1
36622: ARRAY
36623: PPUSH
36624: CALL_OW 251
36628: PPUSH
36629: LD_VAR 0 17
36633: PUSH
36634: LD_INT 1
36636: ARRAY
36637: PPUSH
36638: CALL_OW 254
36642: PPUSH
36643: LD_INT 5
36645: PPUSH
36646: CALL_OW 273
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36655: LD_VAR 0 16
36659: PUSH
36660: LD_INT 1
36662: ARRAY
36663: PPUSH
36664: LD_VAR 0 16
36668: PUSH
36669: LD_INT 2
36671: ARRAY
36672: PPUSH
36673: CALL_OW 488
36677: IFFALSE 36708
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36679: LD_VAR 0 13
36683: PPUSH
36684: LD_VAR 0 16
36688: PUSH
36689: LD_INT 1
36691: ARRAY
36692: PPUSH
36693: LD_VAR 0 16
36697: PUSH
36698: LD_INT 2
36700: ARRAY
36701: PPUSH
36702: CALL_OW 111
// continue ;
36706: GO 36198
// end ; end ; r := GetDir ( tmp ) ;
36708: LD_ADDR_VAR 0 15
36712: PUSH
36713: LD_VAR 0 13
36717: PPUSH
36718: CALL_OW 254
36722: ST_TO_ADDR
// if r = 5 then
36723: LD_VAR 0 15
36727: PUSH
36728: LD_INT 5
36730: EQUAL
36731: IFFALSE 36741
// r := 0 ;
36733: LD_ADDR_VAR 0 15
36737: PUSH
36738: LD_INT 0
36740: ST_TO_ADDR
// for j = r to 5 do
36741: LD_ADDR_VAR 0 10
36745: PUSH
36746: DOUBLE
36747: LD_VAR 0 15
36751: DEC
36752: ST_TO_ADDR
36753: LD_INT 5
36755: PUSH
36756: FOR_TO
36757: IFFALSE 36871
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36759: LD_ADDR_VAR 0 11
36763: PUSH
36764: LD_VAR 0 13
36768: PPUSH
36769: CALL_OW 250
36773: PPUSH
36774: LD_VAR 0 10
36778: PPUSH
36779: LD_INT 2
36781: PPUSH
36782: CALL_OW 272
36786: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36787: LD_ADDR_VAR 0 12
36791: PUSH
36792: LD_VAR 0 13
36796: PPUSH
36797: CALL_OW 251
36801: PPUSH
36802: LD_VAR 0 10
36806: PPUSH
36807: LD_INT 2
36809: PPUSH
36810: CALL_OW 273
36814: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36815: LD_VAR 0 11
36819: PPUSH
36820: LD_VAR 0 12
36824: PPUSH
36825: CALL_OW 488
36829: PUSH
36830: LD_VAR 0 11
36834: PPUSH
36835: LD_VAR 0 12
36839: PPUSH
36840: CALL_OW 428
36844: NOT
36845: AND
36846: IFFALSE 36869
// begin ComMoveXY ( tmp , _x , _y ) ;
36848: LD_VAR 0 13
36852: PPUSH
36853: LD_VAR 0 11
36857: PPUSH
36858: LD_VAR 0 12
36862: PPUSH
36863: CALL_OW 111
// break ;
36867: GO 36871
// end ; end ;
36869: GO 36756
36871: POP
36872: POP
// end ; end ;
36873: GO 36198
36875: POP
36876: POP
// end ;
36877: LD_VAR 0 8
36881: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36882: LD_INT 0
36884: PPUSH
// result := true ;
36885: LD_ADDR_VAR 0 3
36889: PUSH
36890: LD_INT 1
36892: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36893: LD_VAR 0 2
36897: PUSH
36898: LD_INT 24
36900: DOUBLE
36901: EQUAL
36902: IFTRUE 36912
36904: LD_INT 33
36906: DOUBLE
36907: EQUAL
36908: IFTRUE 36912
36910: GO 36937
36912: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36913: LD_ADDR_VAR 0 3
36917: PUSH
36918: LD_INT 32
36920: PPUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL_OW 321
36930: PUSH
36931: LD_INT 2
36933: EQUAL
36934: ST_TO_ADDR
36935: GO 37253
36937: LD_INT 20
36939: DOUBLE
36940: EQUAL
36941: IFTRUE 36945
36943: GO 36970
36945: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36946: LD_ADDR_VAR 0 3
36950: PUSH
36951: LD_INT 6
36953: PPUSH
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL_OW 321
36963: PUSH
36964: LD_INT 2
36966: EQUAL
36967: ST_TO_ADDR
36968: GO 37253
36970: LD_INT 22
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36984
36976: LD_INT 36
36978: DOUBLE
36979: EQUAL
36980: IFTRUE 36984
36982: GO 37009
36984: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36985: LD_ADDR_VAR 0 3
36989: PUSH
36990: LD_INT 15
36992: PPUSH
36993: LD_VAR 0 1
36997: PPUSH
36998: CALL_OW 321
37002: PUSH
37003: LD_INT 2
37005: EQUAL
37006: ST_TO_ADDR
37007: GO 37253
37009: LD_INT 30
37011: DOUBLE
37012: EQUAL
37013: IFTRUE 37017
37015: GO 37042
37017: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37018: LD_ADDR_VAR 0 3
37022: PUSH
37023: LD_INT 20
37025: PPUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 321
37035: PUSH
37036: LD_INT 2
37038: EQUAL
37039: ST_TO_ADDR
37040: GO 37253
37042: LD_INT 28
37044: DOUBLE
37045: EQUAL
37046: IFTRUE 37056
37048: LD_INT 21
37050: DOUBLE
37051: EQUAL
37052: IFTRUE 37056
37054: GO 37081
37056: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37057: LD_ADDR_VAR 0 3
37061: PUSH
37062: LD_INT 21
37064: PPUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: CALL_OW 321
37074: PUSH
37075: LD_INT 2
37077: EQUAL
37078: ST_TO_ADDR
37079: GO 37253
37081: LD_INT 16
37083: DOUBLE
37084: EQUAL
37085: IFTRUE 37089
37087: GO 37114
37089: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37090: LD_ADDR_VAR 0 3
37094: PUSH
37095: LD_INT 84
37097: PPUSH
37098: LD_VAR 0 1
37102: PPUSH
37103: CALL_OW 321
37107: PUSH
37108: LD_INT 2
37110: EQUAL
37111: ST_TO_ADDR
37112: GO 37253
37114: LD_INT 19
37116: DOUBLE
37117: EQUAL
37118: IFTRUE 37128
37120: LD_INT 23
37122: DOUBLE
37123: EQUAL
37124: IFTRUE 37128
37126: GO 37153
37128: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37129: LD_ADDR_VAR 0 3
37133: PUSH
37134: LD_INT 83
37136: PPUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL_OW 321
37146: PUSH
37147: LD_INT 2
37149: EQUAL
37150: ST_TO_ADDR
37151: GO 37253
37153: LD_INT 17
37155: DOUBLE
37156: EQUAL
37157: IFTRUE 37161
37159: GO 37186
37161: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37162: LD_ADDR_VAR 0 3
37166: PUSH
37167: LD_INT 39
37169: PPUSH
37170: LD_VAR 0 1
37174: PPUSH
37175: CALL_OW 321
37179: PUSH
37180: LD_INT 2
37182: EQUAL
37183: ST_TO_ADDR
37184: GO 37253
37186: LD_INT 18
37188: DOUBLE
37189: EQUAL
37190: IFTRUE 37194
37192: GO 37219
37194: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37195: LD_ADDR_VAR 0 3
37199: PUSH
37200: LD_INT 40
37202: PPUSH
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 321
37212: PUSH
37213: LD_INT 2
37215: EQUAL
37216: ST_TO_ADDR
37217: GO 37253
37219: LD_INT 27
37221: DOUBLE
37222: EQUAL
37223: IFTRUE 37227
37225: GO 37252
37227: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37228: LD_ADDR_VAR 0 3
37232: PUSH
37233: LD_INT 35
37235: PPUSH
37236: LD_VAR 0 1
37240: PPUSH
37241: CALL_OW 321
37245: PUSH
37246: LD_INT 2
37248: EQUAL
37249: ST_TO_ADDR
37250: GO 37253
37252: POP
// end ;
37253: LD_VAR 0 3
37257: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37258: LD_INT 0
37260: PPUSH
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
// result := false ;
37271: LD_ADDR_VAR 0 6
37275: PUSH
37276: LD_INT 0
37278: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37279: LD_VAR 0 1
37283: NOT
37284: PUSH
37285: LD_VAR 0 1
37289: PPUSH
37290: CALL_OW 266
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: IN
37305: NOT
37306: OR
37307: PUSH
37308: LD_VAR 0 2
37312: NOT
37313: OR
37314: PUSH
37315: LD_VAR 0 5
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: LD_INT 3
37331: PUSH
37332: LD_INT 4
37334: PUSH
37335: LD_INT 5
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: IN
37346: NOT
37347: OR
37348: PUSH
37349: LD_VAR 0 3
37353: PPUSH
37354: LD_VAR 0 4
37358: PPUSH
37359: CALL_OW 488
37363: NOT
37364: OR
37365: IFFALSE 37369
// exit ;
37367: GO 38105
// side := GetSide ( depot ) ;
37369: LD_ADDR_VAR 0 9
37373: PUSH
37374: LD_VAR 0 1
37378: PPUSH
37379: CALL_OW 255
37383: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37384: LD_VAR 0 9
37388: PPUSH
37389: LD_VAR 0 2
37393: PPUSH
37394: CALL 36882 0 2
37398: NOT
37399: IFFALSE 37403
// exit ;
37401: GO 38105
// pom := GetBase ( depot ) ;
37403: LD_ADDR_VAR 0 10
37407: PUSH
37408: LD_VAR 0 1
37412: PPUSH
37413: CALL_OW 274
37417: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37418: LD_ADDR_VAR 0 11
37422: PUSH
37423: LD_VAR 0 2
37427: PPUSH
37428: LD_VAR 0 1
37432: PPUSH
37433: CALL_OW 248
37437: PPUSH
37438: CALL_OW 450
37442: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37443: LD_VAR 0 10
37447: PPUSH
37448: LD_INT 1
37450: PPUSH
37451: CALL_OW 275
37455: PUSH
37456: LD_VAR 0 11
37460: PUSH
37461: LD_INT 1
37463: ARRAY
37464: GREATEREQUAL
37465: PUSH
37466: LD_VAR 0 10
37470: PPUSH
37471: LD_INT 2
37473: PPUSH
37474: CALL_OW 275
37478: PUSH
37479: LD_VAR 0 11
37483: PUSH
37484: LD_INT 2
37486: ARRAY
37487: GREATEREQUAL
37488: AND
37489: PUSH
37490: LD_VAR 0 10
37494: PPUSH
37495: LD_INT 3
37497: PPUSH
37498: CALL_OW 275
37502: PUSH
37503: LD_VAR 0 11
37507: PUSH
37508: LD_INT 3
37510: ARRAY
37511: GREATEREQUAL
37512: AND
37513: NOT
37514: IFFALSE 37518
// exit ;
37516: GO 38105
// if GetBType ( depot ) = b_depot then
37518: LD_VAR 0 1
37522: PPUSH
37523: CALL_OW 266
37527: PUSH
37528: LD_INT 0
37530: EQUAL
37531: IFFALSE 37543
// dist := 28 else
37533: LD_ADDR_VAR 0 14
37537: PUSH
37538: LD_INT 28
37540: ST_TO_ADDR
37541: GO 37551
// dist := 36 ;
37543: LD_ADDR_VAR 0 14
37547: PUSH
37548: LD_INT 36
37550: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37551: LD_VAR 0 1
37555: PPUSH
37556: LD_VAR 0 3
37560: PPUSH
37561: LD_VAR 0 4
37565: PPUSH
37566: CALL_OW 297
37570: PUSH
37571: LD_VAR 0 14
37575: GREATER
37576: IFFALSE 37580
// exit ;
37578: GO 38105
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37580: LD_ADDR_VAR 0 12
37584: PUSH
37585: LD_VAR 0 2
37589: PPUSH
37590: LD_VAR 0 3
37594: PPUSH
37595: LD_VAR 0 4
37599: PPUSH
37600: LD_VAR 0 5
37604: PPUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: CALL_OW 248
37614: PPUSH
37615: LD_INT 0
37617: PPUSH
37618: CALL 38110 0 6
37622: ST_TO_ADDR
// if not hexes then
37623: LD_VAR 0 12
37627: NOT
37628: IFFALSE 37632
// exit ;
37630: GO 38105
// hex := GetHexInfo ( x , y ) ;
37632: LD_ADDR_VAR 0 15
37636: PUSH
37637: LD_VAR 0 3
37641: PPUSH
37642: LD_VAR 0 4
37646: PPUSH
37647: CALL_OW 546
37651: ST_TO_ADDR
// if hex [ 1 ] then
37652: LD_VAR 0 15
37656: PUSH
37657: LD_INT 1
37659: ARRAY
37660: IFFALSE 37664
// exit ;
37662: GO 38105
// height := hex [ 2 ] ;
37664: LD_ADDR_VAR 0 13
37668: PUSH
37669: LD_VAR 0 15
37673: PUSH
37674: LD_INT 2
37676: ARRAY
37677: ST_TO_ADDR
// for i = 1 to hexes do
37678: LD_ADDR_VAR 0 7
37682: PUSH
37683: DOUBLE
37684: LD_INT 1
37686: DEC
37687: ST_TO_ADDR
37688: LD_VAR 0 12
37692: PUSH
37693: FOR_TO
37694: IFFALSE 38024
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37696: LD_VAR 0 12
37700: PUSH
37701: LD_VAR 0 7
37705: ARRAY
37706: PUSH
37707: LD_INT 1
37709: ARRAY
37710: PPUSH
37711: LD_VAR 0 12
37715: PUSH
37716: LD_VAR 0 7
37720: ARRAY
37721: PUSH
37722: LD_INT 2
37724: ARRAY
37725: PPUSH
37726: CALL_OW 488
37730: NOT
37731: PUSH
37732: LD_VAR 0 12
37736: PUSH
37737: LD_VAR 0 7
37741: ARRAY
37742: PUSH
37743: LD_INT 1
37745: ARRAY
37746: PPUSH
37747: LD_VAR 0 12
37751: PUSH
37752: LD_VAR 0 7
37756: ARRAY
37757: PUSH
37758: LD_INT 2
37760: ARRAY
37761: PPUSH
37762: CALL_OW 428
37766: PUSH
37767: LD_INT 0
37769: GREATER
37770: OR
37771: PUSH
37772: LD_VAR 0 12
37776: PUSH
37777: LD_VAR 0 7
37781: ARRAY
37782: PUSH
37783: LD_INT 1
37785: ARRAY
37786: PPUSH
37787: LD_VAR 0 12
37791: PUSH
37792: LD_VAR 0 7
37796: ARRAY
37797: PUSH
37798: LD_INT 2
37800: ARRAY
37801: PPUSH
37802: CALL_OW 351
37806: OR
37807: IFFALSE 37813
// exit ;
37809: POP
37810: POP
37811: GO 38105
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37813: LD_ADDR_VAR 0 8
37817: PUSH
37818: LD_VAR 0 12
37822: PUSH
37823: LD_VAR 0 7
37827: ARRAY
37828: PUSH
37829: LD_INT 1
37831: ARRAY
37832: PPUSH
37833: LD_VAR 0 12
37837: PUSH
37838: LD_VAR 0 7
37842: ARRAY
37843: PUSH
37844: LD_INT 2
37846: ARRAY
37847: PPUSH
37848: CALL_OW 546
37852: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37853: LD_VAR 0 8
37857: PUSH
37858: LD_INT 1
37860: ARRAY
37861: PUSH
37862: LD_VAR 0 8
37866: PUSH
37867: LD_INT 2
37869: ARRAY
37870: PUSH
37871: LD_VAR 0 13
37875: PUSH
37876: LD_INT 2
37878: PLUS
37879: GREATER
37880: OR
37881: PUSH
37882: LD_VAR 0 8
37886: PUSH
37887: LD_INT 2
37889: ARRAY
37890: PUSH
37891: LD_VAR 0 13
37895: PUSH
37896: LD_INT 2
37898: MINUS
37899: LESS
37900: OR
37901: PUSH
37902: LD_VAR 0 8
37906: PUSH
37907: LD_INT 3
37909: ARRAY
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 8
37916: PUSH
37917: LD_INT 9
37919: PUSH
37920: LD_INT 10
37922: PUSH
37923: LD_INT 11
37925: PUSH
37926: LD_INT 12
37928: PUSH
37929: LD_INT 13
37931: PUSH
37932: LD_INT 16
37934: PUSH
37935: LD_INT 17
37937: PUSH
37938: LD_INT 18
37940: PUSH
37941: LD_INT 19
37943: PUSH
37944: LD_INT 20
37946: PUSH
37947: LD_INT 21
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: IN
37965: NOT
37966: OR
37967: PUSH
37968: LD_VAR 0 8
37972: PUSH
37973: LD_INT 5
37975: ARRAY
37976: NOT
37977: OR
37978: PUSH
37979: LD_VAR 0 8
37983: PUSH
37984: LD_INT 6
37986: ARRAY
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: LD_INT 7
37996: PUSH
37997: LD_INT 9
37999: PUSH
38000: LD_INT 10
38002: PUSH
38003: LD_INT 11
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: IN
38014: NOT
38015: OR
38016: IFFALSE 38022
// exit ;
38018: POP
38019: POP
38020: GO 38105
// end ;
38022: GO 37693
38024: POP
38025: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38026: LD_VAR 0 9
38030: PPUSH
38031: LD_VAR 0 3
38035: PPUSH
38036: LD_VAR 0 4
38040: PPUSH
38041: LD_INT 20
38043: PPUSH
38044: CALL 30057 0 4
38048: PUSH
38049: LD_INT 4
38051: ARRAY
38052: IFFALSE 38056
// exit ;
38054: GO 38105
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38056: LD_VAR 0 2
38060: PUSH
38061: LD_INT 29
38063: PUSH
38064: LD_INT 30
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: IN
38071: PUSH
38072: LD_VAR 0 3
38076: PPUSH
38077: LD_VAR 0 4
38081: PPUSH
38082: LD_VAR 0 9
38086: PPUSH
38087: CALL_OW 440
38091: NOT
38092: AND
38093: IFFALSE 38097
// exit ;
38095: GO 38105
// result := true ;
38097: LD_ADDR_VAR 0 6
38101: PUSH
38102: LD_INT 1
38104: ST_TO_ADDR
// end ;
38105: LD_VAR 0 6
38109: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38110: LD_INT 0
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
38126: PPUSH
38127: PPUSH
38128: PPUSH
38129: PPUSH
38130: PPUSH
38131: PPUSH
38132: PPUSH
38133: PPUSH
38134: PPUSH
38135: PPUSH
38136: PPUSH
38137: PPUSH
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
38147: PPUSH
38148: PPUSH
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
38157: PPUSH
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
38168: PPUSH
38169: PPUSH
// result = [ ] ;
38170: LD_ADDR_VAR 0 7
38174: PUSH
38175: EMPTY
38176: ST_TO_ADDR
// temp_list = [ ] ;
38177: LD_ADDR_VAR 0 9
38181: PUSH
38182: EMPTY
38183: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38184: LD_VAR 0 4
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: LD_INT 4
38203: PUSH
38204: LD_INT 5
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: IN
38215: NOT
38216: PUSH
38217: LD_VAR 0 1
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: IN
38232: PUSH
38233: LD_VAR 0 5
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 3
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: IN
38252: NOT
38253: AND
38254: OR
38255: IFFALSE 38259
// exit ;
38257: GO 56650
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38259: LD_VAR 0 1
38263: PUSH
38264: LD_INT 6
38266: PUSH
38267: LD_INT 7
38269: PUSH
38270: LD_INT 8
38272: PUSH
38273: LD_INT 13
38275: PUSH
38276: LD_INT 12
38278: PUSH
38279: LD_INT 15
38281: PUSH
38282: LD_INT 11
38284: PUSH
38285: LD_INT 14
38287: PUSH
38288: LD_INT 10
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: IN
38302: IFFALSE 38312
// btype = b_lab ;
38304: LD_ADDR_VAR 0 1
38308: PUSH
38309: LD_INT 6
38311: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38312: LD_VAR 0 6
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: IN
38331: NOT
38332: PUSH
38333: LD_VAR 0 1
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: LD_INT 6
38352: PUSH
38353: LD_INT 36
38355: PUSH
38356: LD_INT 4
38358: PUSH
38359: LD_INT 5
38361: PUSH
38362: LD_INT 31
38364: PUSH
38365: LD_INT 32
38367: PUSH
38368: LD_INT 33
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: IN
38384: NOT
38385: PUSH
38386: LD_VAR 0 6
38390: PUSH
38391: LD_INT 1
38393: EQUAL
38394: AND
38395: OR
38396: PUSH
38397: LD_VAR 0 1
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: LD_INT 3
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: IN
38412: NOT
38413: PUSH
38414: LD_VAR 0 6
38418: PUSH
38419: LD_INT 2
38421: EQUAL
38422: AND
38423: OR
38424: IFFALSE 38434
// mode = 0 ;
38426: LD_ADDR_VAR 0 6
38430: PUSH
38431: LD_INT 0
38433: ST_TO_ADDR
// case mode of 0 :
38434: LD_VAR 0 6
38438: PUSH
38439: LD_INT 0
38441: DOUBLE
38442: EQUAL
38443: IFTRUE 38447
38445: GO 49900
38447: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38448: LD_ADDR_VAR 0 11
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 3
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38641: LD_ADDR_VAR 0 12
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 2
38764: NEG
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 3
38798: NEG
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 3
38809: NEG
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38837: LD_ADDR_VAR 0 13
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: LD_INT 3
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 3
38996: NEG
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 3
39008: NEG
39009: PUSH
39010: LD_INT 3
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39036: LD_ADDR_VAR 0 14
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: LD_INT 2
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 3
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: LD_INT 2
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39232: LD_ADDR_VAR 0 15
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39425: LD_ADDR_VAR 0 16
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 2
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 3
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 3
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39618: LD_ADDR_VAR 0 17
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39848: LD_ADDR_VAR 0 18
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 2
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40078: LD_ADDR_VAR 0 19
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: LD_INT 2
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40308: LD_ADDR_VAR 0 20
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40538: LD_ADDR_VAR 0 21
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40768: LD_ADDR_VAR 0 22
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: NEG
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40998: LD_ADDR_VAR 0 23
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 2
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 3
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: LD_INT 3
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 2
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41278: LD_ADDR_VAR 0 24
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 2
41454: NEG
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 3
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 3
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41554: LD_ADDR_VAR 0 25
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 3
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 3
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 3
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41828: LD_ADDR_VAR 0 26
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: LD_INT 2
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 2
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 3
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: NEG
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42104: LD_ADDR_VAR 0 27
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 2
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 3
42337: NEG
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 3
42349: NEG
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42384: LD_ADDR_VAR 0 28
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 2
42560: NEG
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 2
42583: NEG
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: NEG
42596: PUSH
42597: LD_INT 3
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: NEG
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: LD_INT 2
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42666: LD_ADDR_VAR 0 29
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: NEG
42857: PUSH
42858: LD_INT 3
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: NEG
42911: PUSH
42912: LD_INT 2
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42945: LD_ADDR_VAR 0 30
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 3
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43223: LD_ADDR_VAR 0 31
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 3
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 3
43466: NEG
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43501: LD_ADDR_VAR 0 32
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 3
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: LD_INT 3
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 3
43744: NEG
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43779: LD_ADDR_VAR 0 33
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 3
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 3
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 3
44023: NEG
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44058: LD_ADDR_VAR 0 34
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 3
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 3
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44338: LD_ADDR_VAR 0 35
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44450: LD_ADDR_VAR 0 36
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44562: LD_ADDR_VAR 0 37
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44674: LD_ADDR_VAR 0 38
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44786: LD_ADDR_VAR 0 39
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44898: LD_ADDR_VAR 0 40
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45010: LD_ADDR_VAR 0 41
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 3
45253: PUSH
45254: LD_INT 3
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: LD_INT 3
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 3
45284: NEG
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 3
45295: NEG
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: NEG
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45360: LD_ADDR_VAR 0 42
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 3
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 3
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 3
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 3
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 3
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 3
45657: NEG
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 3
45669: NEG
45670: PUSH
45671: LD_INT 3
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45710: LD_ADDR_VAR 0 43
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 3
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 3
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 3
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 3
46006: NEG
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 3
46017: NEG
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46058: LD_ADDR_VAR 0 44
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: LD_INT 3
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 3
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 3
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 3
46332: NEG
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 3
46355: NEG
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 3
46367: NEG
46368: PUSH
46369: LD_INT 3
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46408: LD_ADDR_VAR 0 45
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 3
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 3
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 3
46705: NEG
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 3
46717: NEG
46718: PUSH
46719: LD_INT 3
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46758: LD_ADDR_VAR 0 46
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 3
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 3
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 3
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 3
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 3
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 3
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47106: LD_ADDR_VAR 0 47
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47257: LD_ADDR_VAR 0 48
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47404: LD_ADDR_VAR 0 49
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47548: LD_ADDR_VAR 0 50
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47692: LD_ADDR_VAR 0 51
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47839: LD_ADDR_VAR 0 52
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47990: LD_ADDR_VAR 0 53
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48220: LD_ADDR_VAR 0 54
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48450: LD_ADDR_VAR 0 55
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48680: LD_ADDR_VAR 0 56
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48910: LD_ADDR_VAR 0 57
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49140: LD_ADDR_VAR 0 58
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49370: LD_ADDR_VAR 0 59
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49458: LD_ADDR_VAR 0 60
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49546: LD_ADDR_VAR 0 61
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49634: LD_ADDR_VAR 0 62
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49722: LD_ADDR_VAR 0 63
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49810: LD_ADDR_VAR 0 64
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: ST_TO_ADDR
// end ; 1 :
49898: GO 55795
49900: LD_INT 1
49902: DOUBLE
49903: EQUAL
49904: IFTRUE 49908
49906: GO 52531
49908: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49909: LD_ADDR_VAR 0 11
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49953: LD_ADDR_VAR 0 12
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: LIST
49993: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49994: LD_ADDR_VAR 0 13
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50034: LD_ADDR_VAR 0 14
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50075: LD_ADDR_VAR 0 15
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50119: LD_ADDR_VAR 0 16
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 3
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50165: LD_ADDR_VAR 0 17
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 3
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50209: LD_ADDR_VAR 0 18
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50250: LD_ADDR_VAR 0 19
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50290: LD_ADDR_VAR 0 20
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50331: LD_ADDR_VAR 0 21
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 3
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50375: LD_ADDR_VAR 0 22
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 3
50394: NEG
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 3
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50421: LD_ADDR_VAR 0 23
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 3
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 4
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50465: LD_ADDR_VAR 0 24
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 4
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50506: LD_ADDR_VAR 0 25
50510: PUSH
50511: LD_INT 3
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 4
50523: PUSH
50524: LD_INT 3
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 3
50533: PUSH
50534: LD_INT 4
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50546: LD_ADDR_VAR 0 26
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 4
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50587: LD_ADDR_VAR 0 27
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 4
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50631: LD_ADDR_VAR 0 28
50635: PUSH
50636: LD_INT 3
50638: NEG
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 3
50650: NEG
50651: PUSH
50652: LD_INT 4
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 4
50662: NEG
50663: PUSH
50664: LD_INT 3
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50677: LD_ADDR_VAR 0 29
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 4
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 4
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 5
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 5
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: LD_INT 4
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 6
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 6
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 5
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50832: LD_ADDR_VAR 0 30
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 3
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 3
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 4
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 4
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 4
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 5
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 5
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 5
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 6
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 6
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50975: LD_ADDR_VAR 0 31
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 4
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 4
51022: PUSH
51023: LD_INT 4
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: LD_INT 4
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 5
51042: PUSH
51043: LD_INT 4
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 5
51052: PUSH
51053: LD_INT 5
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 4
51062: PUSH
51063: LD_INT 5
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 6
51072: PUSH
51073: LD_INT 5
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 6
51082: PUSH
51083: LD_INT 6
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 5
51092: PUSH
51093: LD_INT 6
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51114: LD_ADDR_VAR 0 32
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: LD_INT 5
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 5
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 4
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 6
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 6
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 5
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51257: LD_ADDR_VAR 0 33
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 3
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 4
51309: NEG
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 4
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 4
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 5
51343: NEG
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 5
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 5
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 6
51377: NEG
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 6
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51412: LD_ADDR_VAR 0 34
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: NEG
51456: PUSH
51457: LD_INT 4
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 4
51467: NEG
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 4
51479: NEG
51480: PUSH
51481: LD_INT 4
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 4
51491: NEG
51492: PUSH
51493: LD_INT 5
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 5
51503: NEG
51504: PUSH
51505: LD_INT 4
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 5
51515: NEG
51516: PUSH
51517: LD_INT 5
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 5
51527: NEG
51528: PUSH
51529: LD_INT 6
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 6
51539: NEG
51540: PUSH
51541: LD_INT 5
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 6
51551: NEG
51552: PUSH
51553: LD_INT 6
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51575: LD_ADDR_VAR 0 41
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51619: LD_ADDR_VAR 0 42
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51660: LD_ADDR_VAR 0 43
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 3
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51700: LD_ADDR_VAR 0 44
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51741: LD_ADDR_VAR 0 45
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51785: LD_ADDR_VAR 0 46
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51831: LD_ADDR_VAR 0 47
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51864: LD_ADDR_VAR 0 48
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51895: LD_ADDR_VAR 0 49
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51924: LD_ADDR_VAR 0 50
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51953: LD_ADDR_VAR 0 51
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51984: LD_ADDR_VAR 0 52
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52017: LD_ADDR_VAR 0 53
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52061: LD_ADDR_VAR 0 54
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52102: LD_ADDR_VAR 0 55
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: LD_INT 3
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: LD_INT 3
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52142: LD_ADDR_VAR 0 56
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52183: LD_ADDR_VAR 0 57
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52227: LD_ADDR_VAR 0 58
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: LD_INT 3
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52273: LD_ADDR_VAR 0 59
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52317: LD_ADDR_VAR 0 60
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52358: LD_ADDR_VAR 0 61
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52398: LD_ADDR_VAR 0 62
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: LIST
52438: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52439: LD_ADDR_VAR 0 63
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52483: LD_ADDR_VAR 0 64
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// end ; 2 :
52529: GO 55795
52531: LD_INT 2
52533: DOUBLE
52534: EQUAL
52535: IFTRUE 52539
52537: GO 55794
52539: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52540: LD_ADDR_VAR 0 29
52544: PUSH
52545: LD_INT 4
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 4
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 5
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 5
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 4
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 3
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 5
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 4
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 4
52670: PUSH
52671: LD_INT 4
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: LD_INT 4
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 4
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 4
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 4
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 4
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 5
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 5
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 4
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 5
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: LD_INT 3
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 3
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 3
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 4
52879: NEG
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 4
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 4
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 4
52925: NEG
52926: PUSH
52927: LD_INT 4
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 4
52937: NEG
52938: PUSH
52939: LD_INT 5
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: LD_INT 4
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 3
52961: NEG
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 4
52973: NEG
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 5
52985: NEG
52986: PUSH
52987: LD_INT 4
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 5
52997: NEG
52998: PUSH
52999: LD_INT 5
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 5
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 5
53021: NEG
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53078: LD_ADDR_VAR 0 30
53082: PUSH
53083: LD_INT 4
53085: PUSH
53086: LD_INT 4
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 4
53095: PUSH
53096: LD_INT 3
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 5
53105: PUSH
53106: LD_INT 4
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 5
53115: PUSH
53116: LD_INT 5
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 4
53125: PUSH
53126: LD_INT 5
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: LD_INT 4
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 5
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: LD_INT 5
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 3
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 4
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 4
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 4
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 4
53268: NEG
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 4
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 3
53291: NEG
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 4
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 5
53324: NEG
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 5
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 5
53347: NEG
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 3
53382: NEG
53383: PUSH
53384: LD_INT 4
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 4
53430: NEG
53431: PUSH
53432: LD_INT 3
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 4
53442: NEG
53443: PUSH
53444: LD_INT 4
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 4
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 4
53466: NEG
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 4
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 5
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 4
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 3
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 4
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 5
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 5
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53625: LD_ADDR_VAR 0 31
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 4
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 4
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 5
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 5
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 4
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 5
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: NEG
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 4
53781: NEG
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 4
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 4
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 4
53827: NEG
53828: PUSH
53829: LD_INT 4
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 4
53839: NEG
53840: PUSH
53841: LD_INT 5
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: LD_INT 4
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 3
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 4
53875: NEG
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 5
53887: NEG
53888: PUSH
53889: LD_INT 4
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 5
53899: NEG
53900: PUSH
53901: LD_INT 5
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: NEG
53912: PUSH
53913: LD_INT 5
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 5
53923: NEG
53924: PUSH
53925: LD_INT 3
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 4
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 4
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 4
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 4
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 4
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 5
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 5
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 4
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 3
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 3
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 5
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54175: LD_ADDR_VAR 0 32
54179: PUSH
54180: LD_INT 4
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 4
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 4
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 5
54238: NEG
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 5
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 5
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: NEG
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: LD_INT 4
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: NEG
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 4
54344: NEG
54345: PUSH
54346: LD_INT 3
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 4
54356: NEG
54357: PUSH
54358: LD_INT 4
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 4
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 4
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 4
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 5
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 4
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 3
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 3
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 4
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 5
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: LD_INT 5
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 4
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 4
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 4
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 4
54587: PUSH
54588: LD_INT 4
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 4
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 5
54607: PUSH
54608: LD_INT 4
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 5
54617: PUSH
54618: LD_INT 5
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 4
54627: PUSH
54628: LD_INT 5
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: PUSH
54638: LD_INT 4
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 5
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: LD_INT 5
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54722: LD_ADDR_VAR 0 33
54726: PUSH
54727: LD_INT 4
54729: NEG
54730: PUSH
54731: LD_INT 4
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 4
54741: NEG
54742: PUSH
54743: LD_INT 5
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: LD_INT 3
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 4
54777: NEG
54778: PUSH
54779: LD_INT 3
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 5
54789: NEG
54790: PUSH
54791: LD_INT 4
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 5
54801: NEG
54802: PUSH
54803: LD_INT 5
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: NEG
54814: PUSH
54815: LD_INT 5
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 5
54825: NEG
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 4
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 3
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 4
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: LD_INT 4
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 4
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 4
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 5
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 5
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 4
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 3
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 5
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 3
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 3
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 4
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 4
55062: PUSH
55063: LD_INT 4
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 4
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 4
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 4
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 4
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 4
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 5
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 4
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55260: LD_ADDR_VAR 0 34
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 4
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 5
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 4
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 4
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 5
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 5
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 4
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 4
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 4
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 4
55462: PUSH
55463: LD_INT 4
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 4
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 5
55482: PUSH
55483: LD_INT 4
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 5
55492: PUSH
55493: LD_INT 5
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: LD_INT 5
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 4
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 5
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: LD_INT 5
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 4
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: LD_INT 4
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 4
55645: NEG
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 4
55656: NEG
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: NEG
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 4
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 5
55701: NEG
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 5
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 5
55724: NEG
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: ST_TO_ADDR
// end ; end ;
55792: GO 55795
55794: POP
// case btype of b_depot , b_warehouse :
55795: LD_VAR 0 1
55799: PUSH
55800: LD_INT 0
55802: DOUBLE
55803: EQUAL
55804: IFTRUE 55814
55806: LD_INT 1
55808: DOUBLE
55809: EQUAL
55810: IFTRUE 55814
55812: GO 56015
55814: POP
// case nation of nation_american :
55815: LD_VAR 0 5
55819: PUSH
55820: LD_INT 1
55822: DOUBLE
55823: EQUAL
55824: IFTRUE 55828
55826: GO 55884
55828: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55829: LD_ADDR_VAR 0 9
55833: PUSH
55834: LD_VAR 0 11
55838: PUSH
55839: LD_VAR 0 12
55843: PUSH
55844: LD_VAR 0 13
55848: PUSH
55849: LD_VAR 0 14
55853: PUSH
55854: LD_VAR 0 15
55858: PUSH
55859: LD_VAR 0 16
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: PUSH
55872: LD_VAR 0 4
55876: PUSH
55877: LD_INT 1
55879: PLUS
55880: ARRAY
55881: ST_TO_ADDR
55882: GO 56013
55884: LD_INT 2
55886: DOUBLE
55887: EQUAL
55888: IFTRUE 55892
55890: GO 55948
55892: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55893: LD_ADDR_VAR 0 9
55897: PUSH
55898: LD_VAR 0 17
55902: PUSH
55903: LD_VAR 0 18
55907: PUSH
55908: LD_VAR 0 19
55912: PUSH
55913: LD_VAR 0 20
55917: PUSH
55918: LD_VAR 0 21
55922: PUSH
55923: LD_VAR 0 22
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: PUSH
55936: LD_VAR 0 4
55940: PUSH
55941: LD_INT 1
55943: PLUS
55944: ARRAY
55945: ST_TO_ADDR
55946: GO 56013
55948: LD_INT 3
55950: DOUBLE
55951: EQUAL
55952: IFTRUE 55956
55954: GO 56012
55956: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55957: LD_ADDR_VAR 0 9
55961: PUSH
55962: LD_VAR 0 23
55966: PUSH
55967: LD_VAR 0 24
55971: PUSH
55972: LD_VAR 0 25
55976: PUSH
55977: LD_VAR 0 26
55981: PUSH
55982: LD_VAR 0 27
55986: PUSH
55987: LD_VAR 0 28
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: PUSH
56000: LD_VAR 0 4
56004: PUSH
56005: LD_INT 1
56007: PLUS
56008: ARRAY
56009: ST_TO_ADDR
56010: GO 56013
56012: POP
56013: GO 56568
56015: LD_INT 2
56017: DOUBLE
56018: EQUAL
56019: IFTRUE 56029
56021: LD_INT 3
56023: DOUBLE
56024: EQUAL
56025: IFTRUE 56029
56027: GO 56085
56029: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56030: LD_ADDR_VAR 0 9
56034: PUSH
56035: LD_VAR 0 29
56039: PUSH
56040: LD_VAR 0 30
56044: PUSH
56045: LD_VAR 0 31
56049: PUSH
56050: LD_VAR 0 32
56054: PUSH
56055: LD_VAR 0 33
56059: PUSH
56060: LD_VAR 0 34
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: PUSH
56073: LD_VAR 0 4
56077: PUSH
56078: LD_INT 1
56080: PLUS
56081: ARRAY
56082: ST_TO_ADDR
56083: GO 56568
56085: LD_INT 16
56087: DOUBLE
56088: EQUAL
56089: IFTRUE 56147
56091: LD_INT 17
56093: DOUBLE
56094: EQUAL
56095: IFTRUE 56147
56097: LD_INT 18
56099: DOUBLE
56100: EQUAL
56101: IFTRUE 56147
56103: LD_INT 19
56105: DOUBLE
56106: EQUAL
56107: IFTRUE 56147
56109: LD_INT 22
56111: DOUBLE
56112: EQUAL
56113: IFTRUE 56147
56115: LD_INT 20
56117: DOUBLE
56118: EQUAL
56119: IFTRUE 56147
56121: LD_INT 21
56123: DOUBLE
56124: EQUAL
56125: IFTRUE 56147
56127: LD_INT 23
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56147
56133: LD_INT 24
56135: DOUBLE
56136: EQUAL
56137: IFTRUE 56147
56139: LD_INT 25
56141: DOUBLE
56142: EQUAL
56143: IFTRUE 56147
56145: GO 56203
56147: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56148: LD_ADDR_VAR 0 9
56152: PUSH
56153: LD_VAR 0 35
56157: PUSH
56158: LD_VAR 0 36
56162: PUSH
56163: LD_VAR 0 37
56167: PUSH
56168: LD_VAR 0 38
56172: PUSH
56173: LD_VAR 0 39
56177: PUSH
56178: LD_VAR 0 40
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: PUSH
56191: LD_VAR 0 4
56195: PUSH
56196: LD_INT 1
56198: PLUS
56199: ARRAY
56200: ST_TO_ADDR
56201: GO 56568
56203: LD_INT 6
56205: DOUBLE
56206: EQUAL
56207: IFTRUE 56259
56209: LD_INT 7
56211: DOUBLE
56212: EQUAL
56213: IFTRUE 56259
56215: LD_INT 8
56217: DOUBLE
56218: EQUAL
56219: IFTRUE 56259
56221: LD_INT 13
56223: DOUBLE
56224: EQUAL
56225: IFTRUE 56259
56227: LD_INT 12
56229: DOUBLE
56230: EQUAL
56231: IFTRUE 56259
56233: LD_INT 15
56235: DOUBLE
56236: EQUAL
56237: IFTRUE 56259
56239: LD_INT 11
56241: DOUBLE
56242: EQUAL
56243: IFTRUE 56259
56245: LD_INT 14
56247: DOUBLE
56248: EQUAL
56249: IFTRUE 56259
56251: LD_INT 10
56253: DOUBLE
56254: EQUAL
56255: IFTRUE 56259
56257: GO 56315
56259: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56260: LD_ADDR_VAR 0 9
56264: PUSH
56265: LD_VAR 0 41
56269: PUSH
56270: LD_VAR 0 42
56274: PUSH
56275: LD_VAR 0 43
56279: PUSH
56280: LD_VAR 0 44
56284: PUSH
56285: LD_VAR 0 45
56289: PUSH
56290: LD_VAR 0 46
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: PUSH
56303: LD_VAR 0 4
56307: PUSH
56308: LD_INT 1
56310: PLUS
56311: ARRAY
56312: ST_TO_ADDR
56313: GO 56568
56315: LD_INT 36
56317: DOUBLE
56318: EQUAL
56319: IFTRUE 56323
56321: GO 56379
56323: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56324: LD_ADDR_VAR 0 9
56328: PUSH
56329: LD_VAR 0 47
56333: PUSH
56334: LD_VAR 0 48
56338: PUSH
56339: LD_VAR 0 49
56343: PUSH
56344: LD_VAR 0 50
56348: PUSH
56349: LD_VAR 0 51
56353: PUSH
56354: LD_VAR 0 52
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: PUSH
56367: LD_VAR 0 4
56371: PUSH
56372: LD_INT 1
56374: PLUS
56375: ARRAY
56376: ST_TO_ADDR
56377: GO 56568
56379: LD_INT 4
56381: DOUBLE
56382: EQUAL
56383: IFTRUE 56405
56385: LD_INT 5
56387: DOUBLE
56388: EQUAL
56389: IFTRUE 56405
56391: LD_INT 34
56393: DOUBLE
56394: EQUAL
56395: IFTRUE 56405
56397: LD_INT 37
56399: DOUBLE
56400: EQUAL
56401: IFTRUE 56405
56403: GO 56461
56405: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56406: LD_ADDR_VAR 0 9
56410: PUSH
56411: LD_VAR 0 53
56415: PUSH
56416: LD_VAR 0 54
56420: PUSH
56421: LD_VAR 0 55
56425: PUSH
56426: LD_VAR 0 56
56430: PUSH
56431: LD_VAR 0 57
56435: PUSH
56436: LD_VAR 0 58
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: PUSH
56449: LD_VAR 0 4
56453: PUSH
56454: LD_INT 1
56456: PLUS
56457: ARRAY
56458: ST_TO_ADDR
56459: GO 56568
56461: LD_INT 31
56463: DOUBLE
56464: EQUAL
56465: IFTRUE 56511
56467: LD_INT 32
56469: DOUBLE
56470: EQUAL
56471: IFTRUE 56511
56473: LD_INT 33
56475: DOUBLE
56476: EQUAL
56477: IFTRUE 56511
56479: LD_INT 27
56481: DOUBLE
56482: EQUAL
56483: IFTRUE 56511
56485: LD_INT 26
56487: DOUBLE
56488: EQUAL
56489: IFTRUE 56511
56491: LD_INT 28
56493: DOUBLE
56494: EQUAL
56495: IFTRUE 56511
56497: LD_INT 29
56499: DOUBLE
56500: EQUAL
56501: IFTRUE 56511
56503: LD_INT 30
56505: DOUBLE
56506: EQUAL
56507: IFTRUE 56511
56509: GO 56567
56511: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56512: LD_ADDR_VAR 0 9
56516: PUSH
56517: LD_VAR 0 59
56521: PUSH
56522: LD_VAR 0 60
56526: PUSH
56527: LD_VAR 0 61
56531: PUSH
56532: LD_VAR 0 62
56536: PUSH
56537: LD_VAR 0 63
56541: PUSH
56542: LD_VAR 0 64
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: PUSH
56555: LD_VAR 0 4
56559: PUSH
56560: LD_INT 1
56562: PLUS
56563: ARRAY
56564: ST_TO_ADDR
56565: GO 56568
56567: POP
// temp_list2 = [ ] ;
56568: LD_ADDR_VAR 0 10
56572: PUSH
56573: EMPTY
56574: ST_TO_ADDR
// for i in temp_list do
56575: LD_ADDR_VAR 0 8
56579: PUSH
56580: LD_VAR 0 9
56584: PUSH
56585: FOR_IN
56586: IFFALSE 56638
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56588: LD_ADDR_VAR 0 10
56592: PUSH
56593: LD_VAR 0 10
56597: PUSH
56598: LD_VAR 0 8
56602: PUSH
56603: LD_INT 1
56605: ARRAY
56606: PUSH
56607: LD_VAR 0 2
56611: PLUS
56612: PUSH
56613: LD_VAR 0 8
56617: PUSH
56618: LD_INT 2
56620: ARRAY
56621: PUSH
56622: LD_VAR 0 3
56626: PLUS
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: ADD
56635: ST_TO_ADDR
56636: GO 56585
56638: POP
56639: POP
// result = temp_list2 ;
56640: LD_ADDR_VAR 0 7
56644: PUSH
56645: LD_VAR 0 10
56649: ST_TO_ADDR
// end ;
56650: LD_VAR 0 7
56654: RET
// export function EnemyInRange ( unit , dist ) ; begin
56655: LD_INT 0
56657: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56658: LD_ADDR_VAR 0 3
56662: PUSH
56663: LD_VAR 0 1
56667: PPUSH
56668: CALL_OW 255
56672: PPUSH
56673: LD_VAR 0 1
56677: PPUSH
56678: CALL_OW 250
56682: PPUSH
56683: LD_VAR 0 1
56687: PPUSH
56688: CALL_OW 251
56692: PPUSH
56693: LD_VAR 0 2
56697: PPUSH
56698: CALL 30057 0 4
56702: PUSH
56703: LD_INT 4
56705: ARRAY
56706: ST_TO_ADDR
// end ;
56707: LD_VAR 0 3
56711: RET
// export function PlayerSeeMe ( unit ) ; begin
56712: LD_INT 0
56714: PPUSH
// result := See ( your_side , unit ) ;
56715: LD_ADDR_VAR 0 2
56719: PUSH
56720: LD_OWVAR 2
56724: PPUSH
56725: LD_VAR 0 1
56729: PPUSH
56730: CALL_OW 292
56734: ST_TO_ADDR
// end ;
56735: LD_VAR 0 2
56739: RET
// export function ReverseDir ( unit ) ; begin
56740: LD_INT 0
56742: PPUSH
// if not unit then
56743: LD_VAR 0 1
56747: NOT
56748: IFFALSE 56752
// exit ;
56750: GO 56775
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56752: LD_ADDR_VAR 0 2
56756: PUSH
56757: LD_VAR 0 1
56761: PPUSH
56762: CALL_OW 254
56766: PUSH
56767: LD_INT 3
56769: PLUS
56770: PUSH
56771: LD_INT 6
56773: MOD
56774: ST_TO_ADDR
// end ;
56775: LD_VAR 0 2
56779: RET
// export function ReverseArray ( array ) ; var i ; begin
56780: LD_INT 0
56782: PPUSH
56783: PPUSH
// if not array then
56784: LD_VAR 0 1
56788: NOT
56789: IFFALSE 56793
// exit ;
56791: GO 56848
// result := [ ] ;
56793: LD_ADDR_VAR 0 2
56797: PUSH
56798: EMPTY
56799: ST_TO_ADDR
// for i := array downto 1 do
56800: LD_ADDR_VAR 0 3
56804: PUSH
56805: DOUBLE
56806: LD_VAR 0 1
56810: INC
56811: ST_TO_ADDR
56812: LD_INT 1
56814: PUSH
56815: FOR_DOWNTO
56816: IFFALSE 56846
// result := Join ( result , array [ i ] ) ;
56818: LD_ADDR_VAR 0 2
56822: PUSH
56823: LD_VAR 0 2
56827: PPUSH
56828: LD_VAR 0 1
56832: PUSH
56833: LD_VAR 0 3
56837: ARRAY
56838: PPUSH
56839: CALL 61491 0 2
56843: ST_TO_ADDR
56844: GO 56815
56846: POP
56847: POP
// end ;
56848: LD_VAR 0 2
56852: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56853: LD_INT 0
56855: PPUSH
56856: PPUSH
56857: PPUSH
56858: PPUSH
56859: PPUSH
56860: PPUSH
// if not unit or not hexes then
56861: LD_VAR 0 1
56865: NOT
56866: PUSH
56867: LD_VAR 0 2
56871: NOT
56872: OR
56873: IFFALSE 56877
// exit ;
56875: GO 57000
// dist := 9999 ;
56877: LD_ADDR_VAR 0 5
56881: PUSH
56882: LD_INT 9999
56884: ST_TO_ADDR
// for i = 1 to hexes do
56885: LD_ADDR_VAR 0 4
56889: PUSH
56890: DOUBLE
56891: LD_INT 1
56893: DEC
56894: ST_TO_ADDR
56895: LD_VAR 0 2
56899: PUSH
56900: FOR_TO
56901: IFFALSE 56988
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56903: LD_ADDR_VAR 0 6
56907: PUSH
56908: LD_VAR 0 1
56912: PPUSH
56913: LD_VAR 0 2
56917: PUSH
56918: LD_VAR 0 4
56922: ARRAY
56923: PUSH
56924: LD_INT 1
56926: ARRAY
56927: PPUSH
56928: LD_VAR 0 2
56932: PUSH
56933: LD_VAR 0 4
56937: ARRAY
56938: PUSH
56939: LD_INT 2
56941: ARRAY
56942: PPUSH
56943: CALL_OW 297
56947: ST_TO_ADDR
// if tdist < dist then
56948: LD_VAR 0 6
56952: PUSH
56953: LD_VAR 0 5
56957: LESS
56958: IFFALSE 56986
// begin hex := hexes [ i ] ;
56960: LD_ADDR_VAR 0 8
56964: PUSH
56965: LD_VAR 0 2
56969: PUSH
56970: LD_VAR 0 4
56974: ARRAY
56975: ST_TO_ADDR
// dist := tdist ;
56976: LD_ADDR_VAR 0 5
56980: PUSH
56981: LD_VAR 0 6
56985: ST_TO_ADDR
// end ; end ;
56986: GO 56900
56988: POP
56989: POP
// result := hex ;
56990: LD_ADDR_VAR 0 3
56994: PUSH
56995: LD_VAR 0 8
56999: ST_TO_ADDR
// end ;
57000: LD_VAR 0 3
57004: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57005: LD_INT 0
57007: PPUSH
57008: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57009: LD_VAR 0 1
57013: NOT
57014: PUSH
57015: LD_VAR 0 1
57019: PUSH
57020: LD_INT 21
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 23
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PPUSH
57044: CALL_OW 69
57048: IN
57049: NOT
57050: OR
57051: IFFALSE 57055
// exit ;
57053: GO 57102
// for i = 1 to 3 do
57055: LD_ADDR_VAR 0 3
57059: PUSH
57060: DOUBLE
57061: LD_INT 1
57063: DEC
57064: ST_TO_ADDR
57065: LD_INT 3
57067: PUSH
57068: FOR_TO
57069: IFFALSE 57100
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57071: LD_VAR 0 1
57075: PPUSH
57076: CALL_OW 250
57080: PPUSH
57081: LD_VAR 0 1
57085: PPUSH
57086: CALL_OW 251
57090: PPUSH
57091: LD_INT 1
57093: PPUSH
57094: CALL_OW 453
57098: GO 57068
57100: POP
57101: POP
// end ;
57102: LD_VAR 0 2
57106: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57107: LD_INT 0
57109: PPUSH
57110: PPUSH
57111: PPUSH
57112: PPUSH
57113: PPUSH
57114: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57115: LD_VAR 0 1
57119: NOT
57120: PUSH
57121: LD_VAR 0 2
57125: NOT
57126: OR
57127: PUSH
57128: LD_VAR 0 1
57132: PPUSH
57133: CALL_OW 314
57137: OR
57138: IFFALSE 57142
// exit ;
57140: GO 57609
// if GetLives ( i ) < 250 then
57142: LD_VAR 0 4
57146: PPUSH
57147: CALL_OW 256
57151: PUSH
57152: LD_INT 250
57154: LESS
57155: IFFALSE 57168
// begin ComAutodestruct ( i ) ;
57157: LD_VAR 0 4
57161: PPUSH
57162: CALL 57005 0 1
// exit ;
57166: GO 57609
// end ; x := GetX ( enemy_unit ) ;
57168: LD_ADDR_VAR 0 7
57172: PUSH
57173: LD_VAR 0 2
57177: PPUSH
57178: CALL_OW 250
57182: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57183: LD_ADDR_VAR 0 8
57187: PUSH
57188: LD_VAR 0 2
57192: PPUSH
57193: CALL_OW 251
57197: ST_TO_ADDR
// if not x or not y then
57198: LD_VAR 0 7
57202: NOT
57203: PUSH
57204: LD_VAR 0 8
57208: NOT
57209: OR
57210: IFFALSE 57214
// exit ;
57212: GO 57609
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57214: LD_ADDR_VAR 0 6
57218: PUSH
57219: LD_VAR 0 7
57223: PPUSH
57224: LD_INT 0
57226: PPUSH
57227: LD_INT 4
57229: PPUSH
57230: CALL_OW 272
57234: PUSH
57235: LD_VAR 0 8
57239: PPUSH
57240: LD_INT 0
57242: PPUSH
57243: LD_INT 4
57245: PPUSH
57246: CALL_OW 273
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_VAR 0 7
57259: PPUSH
57260: LD_INT 1
57262: PPUSH
57263: LD_INT 4
57265: PPUSH
57266: CALL_OW 272
57270: PUSH
57271: LD_VAR 0 8
57275: PPUSH
57276: LD_INT 1
57278: PPUSH
57279: LD_INT 4
57281: PPUSH
57282: CALL_OW 273
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_VAR 0 7
57295: PPUSH
57296: LD_INT 2
57298: PPUSH
57299: LD_INT 4
57301: PPUSH
57302: CALL_OW 272
57306: PUSH
57307: LD_VAR 0 8
57311: PPUSH
57312: LD_INT 2
57314: PPUSH
57315: LD_INT 4
57317: PPUSH
57318: CALL_OW 273
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_VAR 0 7
57331: PPUSH
57332: LD_INT 3
57334: PPUSH
57335: LD_INT 4
57337: PPUSH
57338: CALL_OW 272
57342: PUSH
57343: LD_VAR 0 8
57347: PPUSH
57348: LD_INT 3
57350: PPUSH
57351: LD_INT 4
57353: PPUSH
57354: CALL_OW 273
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_VAR 0 7
57367: PPUSH
57368: LD_INT 4
57370: PPUSH
57371: LD_INT 4
57373: PPUSH
57374: CALL_OW 272
57378: PUSH
57379: LD_VAR 0 8
57383: PPUSH
57384: LD_INT 4
57386: PPUSH
57387: LD_INT 4
57389: PPUSH
57390: CALL_OW 273
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_VAR 0 7
57403: PPUSH
57404: LD_INT 5
57406: PPUSH
57407: LD_INT 4
57409: PPUSH
57410: CALL_OW 272
57414: PUSH
57415: LD_VAR 0 8
57419: PPUSH
57420: LD_INT 5
57422: PPUSH
57423: LD_INT 4
57425: PPUSH
57426: CALL_OW 273
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: ST_TO_ADDR
// for i = tmp downto 1 do
57443: LD_ADDR_VAR 0 4
57447: PUSH
57448: DOUBLE
57449: LD_VAR 0 6
57453: INC
57454: ST_TO_ADDR
57455: LD_INT 1
57457: PUSH
57458: FOR_DOWNTO
57459: IFFALSE 57560
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57461: LD_VAR 0 6
57465: PUSH
57466: LD_VAR 0 4
57470: ARRAY
57471: PUSH
57472: LD_INT 1
57474: ARRAY
57475: PPUSH
57476: LD_VAR 0 6
57480: PUSH
57481: LD_VAR 0 4
57485: ARRAY
57486: PUSH
57487: LD_INT 2
57489: ARRAY
57490: PPUSH
57491: CALL_OW 488
57495: NOT
57496: PUSH
57497: LD_VAR 0 6
57501: PUSH
57502: LD_VAR 0 4
57506: ARRAY
57507: PUSH
57508: LD_INT 1
57510: ARRAY
57511: PPUSH
57512: LD_VAR 0 6
57516: PUSH
57517: LD_VAR 0 4
57521: ARRAY
57522: PUSH
57523: LD_INT 2
57525: ARRAY
57526: PPUSH
57527: CALL_OW 428
57531: PUSH
57532: LD_INT 0
57534: NONEQUAL
57535: OR
57536: IFFALSE 57558
// tmp := Delete ( tmp , i ) ;
57538: LD_ADDR_VAR 0 6
57542: PUSH
57543: LD_VAR 0 6
57547: PPUSH
57548: LD_VAR 0 4
57552: PPUSH
57553: CALL_OW 3
57557: ST_TO_ADDR
57558: GO 57458
57560: POP
57561: POP
// j := GetClosestHex ( unit , tmp ) ;
57562: LD_ADDR_VAR 0 5
57566: PUSH
57567: LD_VAR 0 1
57571: PPUSH
57572: LD_VAR 0 6
57576: PPUSH
57577: CALL 56853 0 2
57581: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57582: LD_VAR 0 1
57586: PPUSH
57587: LD_VAR 0 5
57591: PUSH
57592: LD_INT 1
57594: ARRAY
57595: PPUSH
57596: LD_VAR 0 5
57600: PUSH
57601: LD_INT 2
57603: ARRAY
57604: PPUSH
57605: CALL_OW 111
// end ;
57609: LD_VAR 0 3
57613: RET
// export function PrepareApemanSoldier ( ) ; begin
57614: LD_INT 0
57616: PPUSH
// uc_nation := 0 ;
57617: LD_ADDR_OWVAR 21
57621: PUSH
57622: LD_INT 0
57624: ST_TO_ADDR
// hc_sex := sex_male ;
57625: LD_ADDR_OWVAR 27
57629: PUSH
57630: LD_INT 1
57632: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57633: LD_ADDR_OWVAR 28
57637: PUSH
57638: LD_INT 15
57640: ST_TO_ADDR
// hc_gallery :=  ;
57641: LD_ADDR_OWVAR 33
57645: PUSH
57646: LD_STRING 
57648: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57649: LD_ADDR_OWVAR 31
57653: PUSH
57654: LD_INT 0
57656: PPUSH
57657: LD_INT 3
57659: PPUSH
57660: CALL_OW 12
57664: PUSH
57665: LD_INT 0
57667: PPUSH
57668: LD_INT 3
57670: PPUSH
57671: CALL_OW 12
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: ST_TO_ADDR
// end ;
57688: LD_VAR 0 1
57692: RET
// export function PrepareApemanEngineer ( ) ; begin
57693: LD_INT 0
57695: PPUSH
// uc_nation := 0 ;
57696: LD_ADDR_OWVAR 21
57700: PUSH
57701: LD_INT 0
57703: ST_TO_ADDR
// hc_sex := sex_male ;
57704: LD_ADDR_OWVAR 27
57708: PUSH
57709: LD_INT 1
57711: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57712: LD_ADDR_OWVAR 28
57716: PUSH
57717: LD_INT 16
57719: ST_TO_ADDR
// hc_gallery :=  ;
57720: LD_ADDR_OWVAR 33
57724: PUSH
57725: LD_STRING 
57727: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57728: LD_ADDR_OWVAR 31
57732: PUSH
57733: LD_INT 0
57735: PPUSH
57736: LD_INT 3
57738: PPUSH
57739: CALL_OW 12
57743: PUSH
57744: LD_INT 0
57746: PPUSH
57747: LD_INT 3
57749: PPUSH
57750: CALL_OW 12
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: ST_TO_ADDR
// end ;
57767: LD_VAR 0 1
57771: RET
// export function PrepareApeman ( agressivity ) ; begin
57772: LD_INT 0
57774: PPUSH
// uc_side := 0 ;
57775: LD_ADDR_OWVAR 20
57779: PUSH
57780: LD_INT 0
57782: ST_TO_ADDR
// uc_nation := 0 ;
57783: LD_ADDR_OWVAR 21
57787: PUSH
57788: LD_INT 0
57790: ST_TO_ADDR
// hc_sex := sex_male ;
57791: LD_ADDR_OWVAR 27
57795: PUSH
57796: LD_INT 1
57798: ST_TO_ADDR
// hc_class := class_apeman ;
57799: LD_ADDR_OWVAR 28
57803: PUSH
57804: LD_INT 12
57806: ST_TO_ADDR
// hc_gallery :=  ;
57807: LD_ADDR_OWVAR 33
57811: PUSH
57812: LD_STRING 
57814: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57815: LD_ADDR_OWVAR 35
57819: PUSH
57820: LD_VAR 0 1
57824: NEG
57825: PPUSH
57826: LD_VAR 0 1
57830: PPUSH
57831: CALL_OW 12
57835: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57836: LD_ADDR_OWVAR 31
57840: PUSH
57841: LD_INT 0
57843: PPUSH
57844: LD_INT 3
57846: PPUSH
57847: CALL_OW 12
57851: PUSH
57852: LD_INT 0
57854: PPUSH
57855: LD_INT 3
57857: PPUSH
57858: CALL_OW 12
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// end ;
57875: LD_VAR 0 2
57879: RET
// export function PrepareTiger ( agressivity ) ; begin
57880: LD_INT 0
57882: PPUSH
// uc_side := 0 ;
57883: LD_ADDR_OWVAR 20
57887: PUSH
57888: LD_INT 0
57890: ST_TO_ADDR
// uc_nation := 0 ;
57891: LD_ADDR_OWVAR 21
57895: PUSH
57896: LD_INT 0
57898: ST_TO_ADDR
// hc_class := class_tiger ;
57899: LD_ADDR_OWVAR 28
57903: PUSH
57904: LD_INT 14
57906: ST_TO_ADDR
// hc_gallery :=  ;
57907: LD_ADDR_OWVAR 33
57911: PUSH
57912: LD_STRING 
57914: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57915: LD_ADDR_OWVAR 35
57919: PUSH
57920: LD_VAR 0 1
57924: NEG
57925: PPUSH
57926: LD_VAR 0 1
57930: PPUSH
57931: CALL_OW 12
57935: ST_TO_ADDR
// end ;
57936: LD_VAR 0 2
57940: RET
// export function PrepareEnchidna ( ) ; begin
57941: LD_INT 0
57943: PPUSH
// uc_side := 0 ;
57944: LD_ADDR_OWVAR 20
57948: PUSH
57949: LD_INT 0
57951: ST_TO_ADDR
// uc_nation := 0 ;
57952: LD_ADDR_OWVAR 21
57956: PUSH
57957: LD_INT 0
57959: ST_TO_ADDR
// hc_class := class_baggie ;
57960: LD_ADDR_OWVAR 28
57964: PUSH
57965: LD_INT 13
57967: ST_TO_ADDR
// hc_gallery :=  ;
57968: LD_ADDR_OWVAR 33
57972: PUSH
57973: LD_STRING 
57975: ST_TO_ADDR
// end ;
57976: LD_VAR 0 1
57980: RET
// export function PrepareFrog ( ) ; begin
57981: LD_INT 0
57983: PPUSH
// uc_side := 0 ;
57984: LD_ADDR_OWVAR 20
57988: PUSH
57989: LD_INT 0
57991: ST_TO_ADDR
// uc_nation := 0 ;
57992: LD_ADDR_OWVAR 21
57996: PUSH
57997: LD_INT 0
57999: ST_TO_ADDR
// hc_class := class_frog ;
58000: LD_ADDR_OWVAR 28
58004: PUSH
58005: LD_INT 19
58007: ST_TO_ADDR
// hc_gallery :=  ;
58008: LD_ADDR_OWVAR 33
58012: PUSH
58013: LD_STRING 
58015: ST_TO_ADDR
// end ;
58016: LD_VAR 0 1
58020: RET
// export function PrepareFish ( ) ; begin
58021: LD_INT 0
58023: PPUSH
// uc_side := 0 ;
58024: LD_ADDR_OWVAR 20
58028: PUSH
58029: LD_INT 0
58031: ST_TO_ADDR
// uc_nation := 0 ;
58032: LD_ADDR_OWVAR 21
58036: PUSH
58037: LD_INT 0
58039: ST_TO_ADDR
// hc_class := class_fish ;
58040: LD_ADDR_OWVAR 28
58044: PUSH
58045: LD_INT 20
58047: ST_TO_ADDR
// hc_gallery :=  ;
58048: LD_ADDR_OWVAR 33
58052: PUSH
58053: LD_STRING 
58055: ST_TO_ADDR
// end ;
58056: LD_VAR 0 1
58060: RET
// export function PrepareBird ( ) ; begin
58061: LD_INT 0
58063: PPUSH
// uc_side := 0 ;
58064: LD_ADDR_OWVAR 20
58068: PUSH
58069: LD_INT 0
58071: ST_TO_ADDR
// uc_nation := 0 ;
58072: LD_ADDR_OWVAR 21
58076: PUSH
58077: LD_INT 0
58079: ST_TO_ADDR
// hc_class := class_phororhacos ;
58080: LD_ADDR_OWVAR 28
58084: PUSH
58085: LD_INT 18
58087: ST_TO_ADDR
// hc_gallery :=  ;
58088: LD_ADDR_OWVAR 33
58092: PUSH
58093: LD_STRING 
58095: ST_TO_ADDR
// end ;
58096: LD_VAR 0 1
58100: RET
// export function PrepareHorse ( ) ; begin
58101: LD_INT 0
58103: PPUSH
// uc_side := 0 ;
58104: LD_ADDR_OWVAR 20
58108: PUSH
58109: LD_INT 0
58111: ST_TO_ADDR
// uc_nation := 0 ;
58112: LD_ADDR_OWVAR 21
58116: PUSH
58117: LD_INT 0
58119: ST_TO_ADDR
// hc_class := class_horse ;
58120: LD_ADDR_OWVAR 28
58124: PUSH
58125: LD_INT 21
58127: ST_TO_ADDR
// hc_gallery :=  ;
58128: LD_ADDR_OWVAR 33
58132: PUSH
58133: LD_STRING 
58135: ST_TO_ADDR
// end ;
58136: LD_VAR 0 1
58140: RET
// export function PrepareMastodont ( ) ; begin
58141: LD_INT 0
58143: PPUSH
// uc_side := 0 ;
58144: LD_ADDR_OWVAR 20
58148: PUSH
58149: LD_INT 0
58151: ST_TO_ADDR
// uc_nation := 0 ;
58152: LD_ADDR_OWVAR 21
58156: PUSH
58157: LD_INT 0
58159: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58160: LD_ADDR_OWVAR 37
58164: PUSH
58165: LD_INT 31
58167: ST_TO_ADDR
// vc_control := control_rider ;
58168: LD_ADDR_OWVAR 38
58172: PUSH
58173: LD_INT 4
58175: ST_TO_ADDR
// end ;
58176: LD_VAR 0 1
58180: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58181: LD_INT 0
58183: PPUSH
58184: PPUSH
58185: PPUSH
// uc_side = 0 ;
58186: LD_ADDR_OWVAR 20
58190: PUSH
58191: LD_INT 0
58193: ST_TO_ADDR
// uc_nation = 0 ;
58194: LD_ADDR_OWVAR 21
58198: PUSH
58199: LD_INT 0
58201: ST_TO_ADDR
// InitHc_All ( ) ;
58202: CALL_OW 584
// InitVc ;
58206: CALL_OW 20
// if mastodonts then
58210: LD_VAR 0 6
58214: IFFALSE 58281
// for i = 1 to mastodonts do
58216: LD_ADDR_VAR 0 11
58220: PUSH
58221: DOUBLE
58222: LD_INT 1
58224: DEC
58225: ST_TO_ADDR
58226: LD_VAR 0 6
58230: PUSH
58231: FOR_TO
58232: IFFALSE 58279
// begin vc_chassis := 31 ;
58234: LD_ADDR_OWVAR 37
58238: PUSH
58239: LD_INT 31
58241: ST_TO_ADDR
// vc_control := control_rider ;
58242: LD_ADDR_OWVAR 38
58246: PUSH
58247: LD_INT 4
58249: ST_TO_ADDR
// animal := CreateVehicle ;
58250: LD_ADDR_VAR 0 12
58254: PUSH
58255: CALL_OW 45
58259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58260: LD_VAR 0 12
58264: PPUSH
58265: LD_VAR 0 8
58269: PPUSH
58270: LD_INT 0
58272: PPUSH
58273: CALL 60409 0 3
// end ;
58277: GO 58231
58279: POP
58280: POP
// if horses then
58281: LD_VAR 0 5
58285: IFFALSE 58352
// for i = 1 to horses do
58287: LD_ADDR_VAR 0 11
58291: PUSH
58292: DOUBLE
58293: LD_INT 1
58295: DEC
58296: ST_TO_ADDR
58297: LD_VAR 0 5
58301: PUSH
58302: FOR_TO
58303: IFFALSE 58350
// begin hc_class := 21 ;
58305: LD_ADDR_OWVAR 28
58309: PUSH
58310: LD_INT 21
58312: ST_TO_ADDR
// hc_gallery :=  ;
58313: LD_ADDR_OWVAR 33
58317: PUSH
58318: LD_STRING 
58320: ST_TO_ADDR
// animal := CreateHuman ;
58321: LD_ADDR_VAR 0 12
58325: PUSH
58326: CALL_OW 44
58330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58331: LD_VAR 0 12
58335: PPUSH
58336: LD_VAR 0 8
58340: PPUSH
58341: LD_INT 0
58343: PPUSH
58344: CALL 60409 0 3
// end ;
58348: GO 58302
58350: POP
58351: POP
// if birds then
58352: LD_VAR 0 1
58356: IFFALSE 58423
// for i = 1 to birds do
58358: LD_ADDR_VAR 0 11
58362: PUSH
58363: DOUBLE
58364: LD_INT 1
58366: DEC
58367: ST_TO_ADDR
58368: LD_VAR 0 1
58372: PUSH
58373: FOR_TO
58374: IFFALSE 58421
// begin hc_class = 18 ;
58376: LD_ADDR_OWVAR 28
58380: PUSH
58381: LD_INT 18
58383: ST_TO_ADDR
// hc_gallery =  ;
58384: LD_ADDR_OWVAR 33
58388: PUSH
58389: LD_STRING 
58391: ST_TO_ADDR
// animal := CreateHuman ;
58392: LD_ADDR_VAR 0 12
58396: PUSH
58397: CALL_OW 44
58401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58402: LD_VAR 0 12
58406: PPUSH
58407: LD_VAR 0 8
58411: PPUSH
58412: LD_INT 0
58414: PPUSH
58415: CALL 60409 0 3
// end ;
58419: GO 58373
58421: POP
58422: POP
// if tigers then
58423: LD_VAR 0 2
58427: IFFALSE 58511
// for i = 1 to tigers do
58429: LD_ADDR_VAR 0 11
58433: PUSH
58434: DOUBLE
58435: LD_INT 1
58437: DEC
58438: ST_TO_ADDR
58439: LD_VAR 0 2
58443: PUSH
58444: FOR_TO
58445: IFFALSE 58509
// begin hc_class = class_tiger ;
58447: LD_ADDR_OWVAR 28
58451: PUSH
58452: LD_INT 14
58454: ST_TO_ADDR
// hc_gallery =  ;
58455: LD_ADDR_OWVAR 33
58459: PUSH
58460: LD_STRING 
58462: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58463: LD_ADDR_OWVAR 35
58467: PUSH
58468: LD_INT 7
58470: NEG
58471: PPUSH
58472: LD_INT 7
58474: PPUSH
58475: CALL_OW 12
58479: ST_TO_ADDR
// animal := CreateHuman ;
58480: LD_ADDR_VAR 0 12
58484: PUSH
58485: CALL_OW 44
58489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58490: LD_VAR 0 12
58494: PPUSH
58495: LD_VAR 0 8
58499: PPUSH
58500: LD_INT 0
58502: PPUSH
58503: CALL 60409 0 3
// end ;
58507: GO 58444
58509: POP
58510: POP
// if apemans then
58511: LD_VAR 0 3
58515: IFFALSE 58638
// for i = 1 to apemans do
58517: LD_ADDR_VAR 0 11
58521: PUSH
58522: DOUBLE
58523: LD_INT 1
58525: DEC
58526: ST_TO_ADDR
58527: LD_VAR 0 3
58531: PUSH
58532: FOR_TO
58533: IFFALSE 58636
// begin hc_class = class_apeman ;
58535: LD_ADDR_OWVAR 28
58539: PUSH
58540: LD_INT 12
58542: ST_TO_ADDR
// hc_gallery =  ;
58543: LD_ADDR_OWVAR 33
58547: PUSH
58548: LD_STRING 
58550: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58551: LD_ADDR_OWVAR 35
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PPUSH
58560: LD_INT 2
58562: PPUSH
58563: CALL_OW 12
58567: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58568: LD_ADDR_OWVAR 31
58572: PUSH
58573: LD_INT 1
58575: PPUSH
58576: LD_INT 3
58578: PPUSH
58579: CALL_OW 12
58583: PUSH
58584: LD_INT 1
58586: PPUSH
58587: LD_INT 3
58589: PPUSH
58590: CALL_OW 12
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// animal := CreateHuman ;
58607: LD_ADDR_VAR 0 12
58611: PUSH
58612: CALL_OW 44
58616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58617: LD_VAR 0 12
58621: PPUSH
58622: LD_VAR 0 8
58626: PPUSH
58627: LD_INT 0
58629: PPUSH
58630: CALL 60409 0 3
// end ;
58634: GO 58532
58636: POP
58637: POP
// if enchidnas then
58638: LD_VAR 0 4
58642: IFFALSE 58709
// for i = 1 to enchidnas do
58644: LD_ADDR_VAR 0 11
58648: PUSH
58649: DOUBLE
58650: LD_INT 1
58652: DEC
58653: ST_TO_ADDR
58654: LD_VAR 0 4
58658: PUSH
58659: FOR_TO
58660: IFFALSE 58707
// begin hc_class = 13 ;
58662: LD_ADDR_OWVAR 28
58666: PUSH
58667: LD_INT 13
58669: ST_TO_ADDR
// hc_gallery =  ;
58670: LD_ADDR_OWVAR 33
58674: PUSH
58675: LD_STRING 
58677: ST_TO_ADDR
// animal := CreateHuman ;
58678: LD_ADDR_VAR 0 12
58682: PUSH
58683: CALL_OW 44
58687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58688: LD_VAR 0 12
58692: PPUSH
58693: LD_VAR 0 8
58697: PPUSH
58698: LD_INT 0
58700: PPUSH
58701: CALL 60409 0 3
// end ;
58705: GO 58659
58707: POP
58708: POP
// if fishes then
58709: LD_VAR 0 7
58713: IFFALSE 58780
// for i = 1 to fishes do
58715: LD_ADDR_VAR 0 11
58719: PUSH
58720: DOUBLE
58721: LD_INT 1
58723: DEC
58724: ST_TO_ADDR
58725: LD_VAR 0 7
58729: PUSH
58730: FOR_TO
58731: IFFALSE 58778
// begin hc_class = 20 ;
58733: LD_ADDR_OWVAR 28
58737: PUSH
58738: LD_INT 20
58740: ST_TO_ADDR
// hc_gallery =  ;
58741: LD_ADDR_OWVAR 33
58745: PUSH
58746: LD_STRING 
58748: ST_TO_ADDR
// animal := CreateHuman ;
58749: LD_ADDR_VAR 0 12
58753: PUSH
58754: CALL_OW 44
58758: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58759: LD_VAR 0 12
58763: PPUSH
58764: LD_VAR 0 9
58768: PPUSH
58769: LD_INT 0
58771: PPUSH
58772: CALL 60409 0 3
// end ;
58776: GO 58730
58778: POP
58779: POP
// end ;
58780: LD_VAR 0 10
58784: RET
// export function WantHeal ( sci , unit ) ; begin
58785: LD_INT 0
58787: PPUSH
// if GetTaskList ( sci ) > 0 then
58788: LD_VAR 0 1
58792: PPUSH
58793: CALL_OW 437
58797: PUSH
58798: LD_INT 0
58800: GREATER
58801: IFFALSE 58871
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58803: LD_VAR 0 1
58807: PPUSH
58808: CALL_OW 437
58812: PUSH
58813: LD_INT 1
58815: ARRAY
58816: PUSH
58817: LD_INT 1
58819: ARRAY
58820: PUSH
58821: LD_STRING l
58823: EQUAL
58824: PUSH
58825: LD_VAR 0 1
58829: PPUSH
58830: CALL_OW 437
58834: PUSH
58835: LD_INT 1
58837: ARRAY
58838: PUSH
58839: LD_INT 4
58841: ARRAY
58842: PUSH
58843: LD_VAR 0 2
58847: EQUAL
58848: AND
58849: IFFALSE 58861
// result := true else
58851: LD_ADDR_VAR 0 3
58855: PUSH
58856: LD_INT 1
58858: ST_TO_ADDR
58859: GO 58869
// result := false ;
58861: LD_ADDR_VAR 0 3
58865: PUSH
58866: LD_INT 0
58868: ST_TO_ADDR
// end else
58869: GO 58879
// result := false ;
58871: LD_ADDR_VAR 0 3
58875: PUSH
58876: LD_INT 0
58878: ST_TO_ADDR
// end ;
58879: LD_VAR 0 3
58883: RET
// export function HealTarget ( sci ) ; begin
58884: LD_INT 0
58886: PPUSH
// if not sci then
58887: LD_VAR 0 1
58891: NOT
58892: IFFALSE 58896
// exit ;
58894: GO 58961
// result := 0 ;
58896: LD_ADDR_VAR 0 2
58900: PUSH
58901: LD_INT 0
58903: ST_TO_ADDR
// if GetTaskList ( sci ) then
58904: LD_VAR 0 1
58908: PPUSH
58909: CALL_OW 437
58913: IFFALSE 58961
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58915: LD_VAR 0 1
58919: PPUSH
58920: CALL_OW 437
58924: PUSH
58925: LD_INT 1
58927: ARRAY
58928: PUSH
58929: LD_INT 1
58931: ARRAY
58932: PUSH
58933: LD_STRING l
58935: EQUAL
58936: IFFALSE 58961
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58938: LD_ADDR_VAR 0 2
58942: PUSH
58943: LD_VAR 0 1
58947: PPUSH
58948: CALL_OW 437
58952: PUSH
58953: LD_INT 1
58955: ARRAY
58956: PUSH
58957: LD_INT 4
58959: ARRAY
58960: ST_TO_ADDR
// end ;
58961: LD_VAR 0 2
58965: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58966: LD_INT 0
58968: PPUSH
58969: PPUSH
58970: PPUSH
58971: PPUSH
// if not base_units then
58972: LD_VAR 0 1
58976: NOT
58977: IFFALSE 58981
// exit ;
58979: GO 59068
// result := false ;
58981: LD_ADDR_VAR 0 2
58985: PUSH
58986: LD_INT 0
58988: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58989: LD_ADDR_VAR 0 5
58993: PUSH
58994: LD_VAR 0 1
58998: PPUSH
58999: LD_INT 21
59001: PUSH
59002: LD_INT 3
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PPUSH
59009: CALL_OW 72
59013: ST_TO_ADDR
// if not tmp then
59014: LD_VAR 0 5
59018: NOT
59019: IFFALSE 59023
// exit ;
59021: GO 59068
// for i in tmp do
59023: LD_ADDR_VAR 0 3
59027: PUSH
59028: LD_VAR 0 5
59032: PUSH
59033: FOR_IN
59034: IFFALSE 59066
// begin result := EnemyInRange ( i , 22 ) ;
59036: LD_ADDR_VAR 0 2
59040: PUSH
59041: LD_VAR 0 3
59045: PPUSH
59046: LD_INT 22
59048: PPUSH
59049: CALL 56655 0 2
59053: ST_TO_ADDR
// if result then
59054: LD_VAR 0 2
59058: IFFALSE 59064
// exit ;
59060: POP
59061: POP
59062: GO 59068
// end ;
59064: GO 59033
59066: POP
59067: POP
// end ;
59068: LD_VAR 0 2
59072: RET
// export function FilterByTag ( units , tag ) ; begin
59073: LD_INT 0
59075: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59076: LD_ADDR_VAR 0 3
59080: PUSH
59081: LD_VAR 0 1
59085: PPUSH
59086: LD_INT 120
59088: PUSH
59089: LD_VAR 0 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PPUSH
59098: CALL_OW 72
59102: ST_TO_ADDR
// end ;
59103: LD_VAR 0 3
59107: RET
// export function IsDriver ( un ) ; begin
59108: LD_INT 0
59110: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59111: LD_ADDR_VAR 0 2
59115: PUSH
59116: LD_VAR 0 1
59120: PUSH
59121: LD_INT 55
59123: PUSH
59124: EMPTY
59125: LIST
59126: PPUSH
59127: CALL_OW 69
59131: IN
59132: ST_TO_ADDR
// end ;
59133: LD_VAR 0 2
59137: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59138: LD_INT 0
59140: PPUSH
59141: PPUSH
// list := [ ] ;
59142: LD_ADDR_VAR 0 5
59146: PUSH
59147: EMPTY
59148: ST_TO_ADDR
// case d of 0 :
59149: LD_VAR 0 3
59153: PUSH
59154: LD_INT 0
59156: DOUBLE
59157: EQUAL
59158: IFTRUE 59162
59160: GO 59295
59162: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59163: LD_ADDR_VAR 0 5
59167: PUSH
59168: LD_VAR 0 1
59172: PUSH
59173: LD_INT 4
59175: MINUS
59176: PUSH
59177: LD_VAR 0 2
59181: PUSH
59182: LD_INT 4
59184: MINUS
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: PUSH
59194: LD_VAR 0 1
59198: PUSH
59199: LD_INT 3
59201: MINUS
59202: PUSH
59203: LD_VAR 0 2
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: LIST
59215: PUSH
59216: LD_VAR 0 1
59220: PUSH
59221: LD_INT 4
59223: PLUS
59224: PUSH
59225: LD_VAR 0 2
59229: PUSH
59230: LD_INT 4
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: LIST
59237: PUSH
59238: LD_VAR 0 1
59242: PUSH
59243: LD_INT 3
59245: PLUS
59246: PUSH
59247: LD_VAR 0 2
59251: PUSH
59252: LD_INT 3
59254: PLUS
59255: PUSH
59256: LD_INT 5
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: PUSH
59264: LD_VAR 0 1
59268: PUSH
59269: LD_VAR 0 2
59273: PUSH
59274: LD_INT 4
59276: PLUS
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: ST_TO_ADDR
// end ; 1 :
59293: GO 59993
59295: LD_INT 1
59297: DOUBLE
59298: EQUAL
59299: IFTRUE 59303
59301: GO 59436
59303: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59304: LD_ADDR_VAR 0 5
59308: PUSH
59309: LD_VAR 0 1
59313: PUSH
59314: LD_VAR 0 2
59318: PUSH
59319: LD_INT 4
59321: MINUS
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: PUSH
59331: LD_VAR 0 1
59335: PUSH
59336: LD_INT 3
59338: MINUS
59339: PUSH
59340: LD_VAR 0 2
59344: PUSH
59345: LD_INT 3
59347: MINUS
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: PUSH
59357: LD_VAR 0 1
59361: PUSH
59362: LD_INT 4
59364: MINUS
59365: PUSH
59366: LD_VAR 0 2
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: PUSH
59379: LD_VAR 0 1
59383: PUSH
59384: LD_VAR 0 2
59388: PUSH
59389: LD_INT 3
59391: PLUS
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: PUSH
59401: LD_VAR 0 1
59405: PUSH
59406: LD_INT 4
59408: PLUS
59409: PUSH
59410: LD_VAR 0 2
59414: PUSH
59415: LD_INT 4
59417: PLUS
59418: PUSH
59419: LD_INT 5
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: LIST
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: ST_TO_ADDR
// end ; 2 :
59434: GO 59993
59436: LD_INT 2
59438: DOUBLE
59439: EQUAL
59440: IFTRUE 59444
59442: GO 59573
59444: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59445: LD_ADDR_VAR 0 5
59449: PUSH
59450: LD_VAR 0 1
59454: PUSH
59455: LD_VAR 0 2
59459: PUSH
59460: LD_INT 3
59462: MINUS
59463: PUSH
59464: LD_INT 3
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: PUSH
59472: LD_VAR 0 1
59476: PUSH
59477: LD_INT 4
59479: PLUS
59480: PUSH
59481: LD_VAR 0 2
59485: PUSH
59486: LD_INT 4
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: PUSH
59494: LD_VAR 0 1
59498: PUSH
59499: LD_VAR 0 2
59503: PUSH
59504: LD_INT 4
59506: PLUS
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: PUSH
59516: LD_VAR 0 1
59520: PUSH
59521: LD_INT 3
59523: MINUS
59524: PUSH
59525: LD_VAR 0 2
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: LIST
59537: PUSH
59538: LD_VAR 0 1
59542: PUSH
59543: LD_INT 4
59545: MINUS
59546: PUSH
59547: LD_VAR 0 2
59551: PUSH
59552: LD_INT 4
59554: MINUS
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: ST_TO_ADDR
// end ; 3 :
59571: GO 59993
59573: LD_INT 3
59575: DOUBLE
59576: EQUAL
59577: IFTRUE 59581
59579: GO 59714
59581: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59582: LD_ADDR_VAR 0 5
59586: PUSH
59587: LD_VAR 0 1
59591: PUSH
59592: LD_INT 3
59594: PLUS
59595: PUSH
59596: LD_VAR 0 2
59600: PUSH
59601: LD_INT 4
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: LIST
59608: PUSH
59609: LD_VAR 0 1
59613: PUSH
59614: LD_INT 4
59616: PLUS
59617: PUSH
59618: LD_VAR 0 2
59622: PUSH
59623: LD_INT 4
59625: PLUS
59626: PUSH
59627: LD_INT 5
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: LIST
59634: PUSH
59635: LD_VAR 0 1
59639: PUSH
59640: LD_INT 4
59642: MINUS
59643: PUSH
59644: LD_VAR 0 2
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: PUSH
59657: LD_VAR 0 1
59661: PUSH
59662: LD_VAR 0 2
59666: PUSH
59667: LD_INT 4
59669: MINUS
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: PUSH
59679: LD_VAR 0 1
59683: PUSH
59684: LD_INT 3
59686: MINUS
59687: PUSH
59688: LD_VAR 0 2
59692: PUSH
59693: LD_INT 3
59695: MINUS
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: ST_TO_ADDR
// end ; 4 :
59712: GO 59993
59714: LD_INT 4
59716: DOUBLE
59717: EQUAL
59718: IFTRUE 59722
59720: GO 59855
59722: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59723: LD_ADDR_VAR 0 5
59727: PUSH
59728: LD_VAR 0 1
59732: PUSH
59733: LD_VAR 0 2
59737: PUSH
59738: LD_INT 4
59740: PLUS
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: PUSH
59750: LD_VAR 0 1
59754: PUSH
59755: LD_INT 3
59757: PLUS
59758: PUSH
59759: LD_VAR 0 2
59763: PUSH
59764: LD_INT 3
59766: PLUS
59767: PUSH
59768: LD_INT 5
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: PUSH
59776: LD_VAR 0 1
59780: PUSH
59781: LD_INT 4
59783: PLUS
59784: PUSH
59785: LD_VAR 0 2
59789: PUSH
59790: LD_INT 4
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: LIST
59797: PUSH
59798: LD_VAR 0 1
59802: PUSH
59803: LD_VAR 0 2
59807: PUSH
59808: LD_INT 3
59810: MINUS
59811: PUSH
59812: LD_INT 3
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: PUSH
59820: LD_VAR 0 1
59824: PUSH
59825: LD_INT 4
59827: MINUS
59828: PUSH
59829: LD_VAR 0 2
59833: PUSH
59834: LD_INT 4
59836: MINUS
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: ST_TO_ADDR
// end ; 5 :
59853: GO 59993
59855: LD_INT 5
59857: DOUBLE
59858: EQUAL
59859: IFTRUE 59863
59861: GO 59992
59863: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59864: LD_ADDR_VAR 0 5
59868: PUSH
59869: LD_VAR 0 1
59873: PUSH
59874: LD_INT 4
59876: MINUS
59877: PUSH
59878: LD_VAR 0 2
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: LIST
59890: PUSH
59891: LD_VAR 0 1
59895: PUSH
59896: LD_VAR 0 2
59900: PUSH
59901: LD_INT 4
59903: MINUS
59904: PUSH
59905: LD_INT 3
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: LIST
59912: PUSH
59913: LD_VAR 0 1
59917: PUSH
59918: LD_INT 4
59920: PLUS
59921: PUSH
59922: LD_VAR 0 2
59926: PUSH
59927: LD_INT 4
59929: PLUS
59930: PUSH
59931: LD_INT 5
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: LIST
59938: PUSH
59939: LD_VAR 0 1
59943: PUSH
59944: LD_INT 3
59946: PLUS
59947: PUSH
59948: LD_VAR 0 2
59952: PUSH
59953: LD_INT 4
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: PUSH
59961: LD_VAR 0 1
59965: PUSH
59966: LD_VAR 0 2
59970: PUSH
59971: LD_INT 3
59973: PLUS
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: ST_TO_ADDR
// end ; end ;
59990: GO 59993
59992: POP
// result := list ;
59993: LD_ADDR_VAR 0 4
59997: PUSH
59998: LD_VAR 0 5
60002: ST_TO_ADDR
// end ;
60003: LD_VAR 0 4
60007: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60008: LD_INT 0
60010: PPUSH
60011: PPUSH
60012: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60013: LD_VAR 0 1
60017: NOT
60018: PUSH
60019: LD_VAR 0 2
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: LD_INT 4
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: IN
60042: NOT
60043: OR
60044: IFFALSE 60048
// exit ;
60046: GO 60131
// tmp := [ ] ;
60048: LD_ADDR_VAR 0 5
60052: PUSH
60053: EMPTY
60054: ST_TO_ADDR
// for i in units do
60055: LD_ADDR_VAR 0 4
60059: PUSH
60060: LD_VAR 0 1
60064: PUSH
60065: FOR_IN
60066: IFFALSE 60100
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60068: LD_ADDR_VAR 0 5
60072: PUSH
60073: LD_VAR 0 5
60077: PPUSH
60078: LD_VAR 0 4
60082: PPUSH
60083: LD_VAR 0 2
60087: PPUSH
60088: CALL_OW 259
60092: PPUSH
60093: CALL 61491 0 2
60097: ST_TO_ADDR
60098: GO 60065
60100: POP
60101: POP
// if not tmp then
60102: LD_VAR 0 5
60106: NOT
60107: IFFALSE 60111
// exit ;
60109: GO 60131
// result := SortListByListDesc ( units , tmp ) ;
60111: LD_ADDR_VAR 0 3
60115: PUSH
60116: LD_VAR 0 1
60120: PPUSH
60121: LD_VAR 0 5
60125: PPUSH
60126: CALL_OW 77
60130: ST_TO_ADDR
// end ;
60131: LD_VAR 0 3
60135: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60136: LD_INT 0
60138: PPUSH
60139: PPUSH
60140: PPUSH
// result := false ;
60141: LD_ADDR_VAR 0 3
60145: PUSH
60146: LD_INT 0
60148: ST_TO_ADDR
// if not building then
60149: LD_VAR 0 2
60153: NOT
60154: IFFALSE 60158
// exit ;
60156: GO 60296
// x := GetX ( building ) ;
60158: LD_ADDR_VAR 0 4
60162: PUSH
60163: LD_VAR 0 2
60167: PPUSH
60168: CALL_OW 250
60172: ST_TO_ADDR
// y := GetY ( building ) ;
60173: LD_ADDR_VAR 0 5
60177: PUSH
60178: LD_VAR 0 2
60182: PPUSH
60183: CALL_OW 251
60187: ST_TO_ADDR
// if not x or not y then
60188: LD_VAR 0 4
60192: NOT
60193: PUSH
60194: LD_VAR 0 5
60198: NOT
60199: OR
60200: IFFALSE 60204
// exit ;
60202: GO 60296
// if GetTaskList ( unit ) then
60204: LD_VAR 0 1
60208: PPUSH
60209: CALL_OW 437
60213: IFFALSE 60296
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60215: LD_STRING e
60217: PUSH
60218: LD_VAR 0 1
60222: PPUSH
60223: CALL_OW 437
60227: PUSH
60228: LD_INT 1
60230: ARRAY
60231: PUSH
60232: LD_INT 1
60234: ARRAY
60235: EQUAL
60236: PUSH
60237: LD_VAR 0 4
60241: PUSH
60242: LD_VAR 0 1
60246: PPUSH
60247: CALL_OW 437
60251: PUSH
60252: LD_INT 1
60254: ARRAY
60255: PUSH
60256: LD_INT 2
60258: ARRAY
60259: EQUAL
60260: AND
60261: PUSH
60262: LD_VAR 0 5
60266: PUSH
60267: LD_VAR 0 1
60271: PPUSH
60272: CALL_OW 437
60276: PUSH
60277: LD_INT 1
60279: ARRAY
60280: PUSH
60281: LD_INT 3
60283: ARRAY
60284: EQUAL
60285: AND
60286: IFFALSE 60296
// result := true end ;
60288: LD_ADDR_VAR 0 3
60292: PUSH
60293: LD_INT 1
60295: ST_TO_ADDR
// end ;
60296: LD_VAR 0 3
60300: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60301: LD_INT 0
60303: PPUSH
// result := false ;
60304: LD_ADDR_VAR 0 4
60308: PUSH
60309: LD_INT 0
60311: ST_TO_ADDR
// if GetTaskList ( unit ) then
60312: LD_VAR 0 1
60316: PPUSH
60317: CALL_OW 437
60321: IFFALSE 60404
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60323: LD_STRING M
60325: PUSH
60326: LD_VAR 0 1
60330: PPUSH
60331: CALL_OW 437
60335: PUSH
60336: LD_INT 1
60338: ARRAY
60339: PUSH
60340: LD_INT 1
60342: ARRAY
60343: EQUAL
60344: PUSH
60345: LD_VAR 0 2
60349: PUSH
60350: LD_VAR 0 1
60354: PPUSH
60355: CALL_OW 437
60359: PUSH
60360: LD_INT 1
60362: ARRAY
60363: PUSH
60364: LD_INT 2
60366: ARRAY
60367: EQUAL
60368: AND
60369: PUSH
60370: LD_VAR 0 3
60374: PUSH
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL_OW 437
60384: PUSH
60385: LD_INT 1
60387: ARRAY
60388: PUSH
60389: LD_INT 3
60391: ARRAY
60392: EQUAL
60393: AND
60394: IFFALSE 60404
// result := true ;
60396: LD_ADDR_VAR 0 4
60400: PUSH
60401: LD_INT 1
60403: ST_TO_ADDR
// end ; end ;
60404: LD_VAR 0 4
60408: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60409: LD_INT 0
60411: PPUSH
60412: PPUSH
60413: PPUSH
60414: PPUSH
// if not unit or not area then
60415: LD_VAR 0 1
60419: NOT
60420: PUSH
60421: LD_VAR 0 2
60425: NOT
60426: OR
60427: IFFALSE 60431
// exit ;
60429: GO 60594
// tmp := AreaToList ( area , i ) ;
60431: LD_ADDR_VAR 0 6
60435: PUSH
60436: LD_VAR 0 2
60440: PPUSH
60441: LD_VAR 0 5
60445: PPUSH
60446: CALL_OW 517
60450: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60451: LD_ADDR_VAR 0 5
60455: PUSH
60456: DOUBLE
60457: LD_INT 1
60459: DEC
60460: ST_TO_ADDR
60461: LD_VAR 0 6
60465: PUSH
60466: LD_INT 1
60468: ARRAY
60469: PUSH
60470: FOR_TO
60471: IFFALSE 60592
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60473: LD_ADDR_VAR 0 7
60477: PUSH
60478: LD_VAR 0 6
60482: PUSH
60483: LD_INT 1
60485: ARRAY
60486: PUSH
60487: LD_VAR 0 5
60491: ARRAY
60492: PUSH
60493: LD_VAR 0 6
60497: PUSH
60498: LD_INT 2
60500: ARRAY
60501: PUSH
60502: LD_VAR 0 5
60506: ARRAY
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
60512: LD_INT 92
60514: PUSH
60515: LD_VAR 0 7
60519: PUSH
60520: LD_INT 1
60522: ARRAY
60523: PUSH
60524: LD_VAR 0 7
60528: PUSH
60529: LD_INT 2
60531: ARRAY
60532: PUSH
60533: LD_INT 3
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: PPUSH
60542: CALL_OW 69
60546: PUSH
60547: LD_INT 0
60549: EQUAL
60550: IFFALSE 60590
// begin PlaceUnitArea ( unit , area , mode ) ;
60552: LD_VAR 0 1
60556: PPUSH
60557: LD_VAR 0 2
60561: PPUSH
60562: LD_VAR 0 3
60566: PPUSH
60567: CALL_OW 49
// result := IsPlaced ( unit ) ;
60571: LD_ADDR_VAR 0 4
60575: PUSH
60576: LD_VAR 0 1
60580: PPUSH
60581: CALL_OW 305
60585: ST_TO_ADDR
// exit ;
60586: POP
60587: POP
60588: GO 60594
// end ; end ;
60590: GO 60470
60592: POP
60593: POP
// end ;
60594: LD_VAR 0 4
60598: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60599: LD_INT 0
60601: PPUSH
60602: PPUSH
60603: PPUSH
// if not side or side > 8 then
60604: LD_VAR 0 1
60608: NOT
60609: PUSH
60610: LD_VAR 0 1
60614: PUSH
60615: LD_INT 8
60617: GREATER
60618: OR
60619: IFFALSE 60623
// exit ;
60621: GO 60810
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60623: LD_ADDR_VAR 0 4
60627: PUSH
60628: LD_INT 22
60630: PUSH
60631: LD_VAR 0 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 21
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PPUSH
60654: CALL_OW 69
60658: ST_TO_ADDR
// if not tmp then
60659: LD_VAR 0 4
60663: NOT
60664: IFFALSE 60668
// exit ;
60666: GO 60810
// enable_addtolog := true ;
60668: LD_ADDR_OWVAR 81
60672: PUSH
60673: LD_INT 1
60675: ST_TO_ADDR
// AddToLog ( [ ) ;
60676: LD_STRING [
60678: PPUSH
60679: CALL_OW 561
// for i in tmp do
60683: LD_ADDR_VAR 0 3
60687: PUSH
60688: LD_VAR 0 4
60692: PUSH
60693: FOR_IN
60694: IFFALSE 60801
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60696: LD_STRING [
60698: PUSH
60699: LD_VAR 0 3
60703: PPUSH
60704: CALL_OW 266
60708: STR
60709: PUSH
60710: LD_STRING , 
60712: STR
60713: PUSH
60714: LD_VAR 0 3
60718: PPUSH
60719: CALL_OW 250
60723: STR
60724: PUSH
60725: LD_STRING , 
60727: STR
60728: PUSH
60729: LD_VAR 0 3
60733: PPUSH
60734: CALL_OW 251
60738: STR
60739: PUSH
60740: LD_STRING , 
60742: STR
60743: PUSH
60744: LD_VAR 0 3
60748: PPUSH
60749: CALL_OW 254
60753: STR
60754: PUSH
60755: LD_STRING , 
60757: STR
60758: PUSH
60759: LD_VAR 0 3
60763: PPUSH
60764: LD_INT 1
60766: PPUSH
60767: CALL_OW 268
60771: STR
60772: PUSH
60773: LD_STRING , 
60775: STR
60776: PUSH
60777: LD_VAR 0 3
60781: PPUSH
60782: LD_INT 2
60784: PPUSH
60785: CALL_OW 268
60789: STR
60790: PUSH
60791: LD_STRING ],
60793: STR
60794: PPUSH
60795: CALL_OW 561
// end ;
60799: GO 60693
60801: POP
60802: POP
// AddToLog ( ]; ) ;
60803: LD_STRING ];
60805: PPUSH
60806: CALL_OW 561
// end ;
60810: LD_VAR 0 2
60814: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60815: LD_INT 0
60817: PPUSH
60818: PPUSH
60819: PPUSH
60820: PPUSH
60821: PPUSH
// if not area or not rate or not max then
60822: LD_VAR 0 1
60826: NOT
60827: PUSH
60828: LD_VAR 0 2
60832: NOT
60833: OR
60834: PUSH
60835: LD_VAR 0 4
60839: NOT
60840: OR
60841: IFFALSE 60845
// exit ;
60843: GO 61034
// while 1 do
60845: LD_INT 1
60847: IFFALSE 61034
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60849: LD_ADDR_VAR 0 9
60853: PUSH
60854: LD_VAR 0 1
60858: PPUSH
60859: LD_INT 1
60861: PPUSH
60862: CALL_OW 287
60866: PUSH
60867: LD_INT 10
60869: MUL
60870: ST_TO_ADDR
// r := rate / 10 ;
60871: LD_ADDR_VAR 0 7
60875: PUSH
60876: LD_VAR 0 2
60880: PUSH
60881: LD_INT 10
60883: DIVREAL
60884: ST_TO_ADDR
// time := 1 1$00 ;
60885: LD_ADDR_VAR 0 8
60889: PUSH
60890: LD_INT 2100
60892: ST_TO_ADDR
// if amount < min then
60893: LD_VAR 0 9
60897: PUSH
60898: LD_VAR 0 3
60902: LESS
60903: IFFALSE 60921
// r := r * 2 else
60905: LD_ADDR_VAR 0 7
60909: PUSH
60910: LD_VAR 0 7
60914: PUSH
60915: LD_INT 2
60917: MUL
60918: ST_TO_ADDR
60919: GO 60947
// if amount > max then
60921: LD_VAR 0 9
60925: PUSH
60926: LD_VAR 0 4
60930: GREATER
60931: IFFALSE 60947
// r := r / 2 ;
60933: LD_ADDR_VAR 0 7
60937: PUSH
60938: LD_VAR 0 7
60942: PUSH
60943: LD_INT 2
60945: DIVREAL
60946: ST_TO_ADDR
// time := time / r ;
60947: LD_ADDR_VAR 0 8
60951: PUSH
60952: LD_VAR 0 8
60956: PUSH
60957: LD_VAR 0 7
60961: DIVREAL
60962: ST_TO_ADDR
// if time < 0 then
60963: LD_VAR 0 8
60967: PUSH
60968: LD_INT 0
60970: LESS
60971: IFFALSE 60988
// time := time * - 1 ;
60973: LD_ADDR_VAR 0 8
60977: PUSH
60978: LD_VAR 0 8
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: MUL
60987: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60988: LD_VAR 0 8
60992: PUSH
60993: LD_INT 35
60995: PPUSH
60996: LD_INT 875
60998: PPUSH
60999: CALL_OW 12
61003: PLUS
61004: PPUSH
61005: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61009: LD_INT 1
61011: PPUSH
61012: LD_INT 5
61014: PPUSH
61015: CALL_OW 12
61019: PPUSH
61020: LD_VAR 0 1
61024: PPUSH
61025: LD_INT 1
61027: PPUSH
61028: CALL_OW 55
// end ;
61032: GO 60845
// end ;
61034: LD_VAR 0 5
61038: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61039: LD_INT 0
61041: PPUSH
61042: PPUSH
61043: PPUSH
61044: PPUSH
61045: PPUSH
61046: PPUSH
61047: PPUSH
61048: PPUSH
// if not turrets or not factories then
61049: LD_VAR 0 1
61053: NOT
61054: PUSH
61055: LD_VAR 0 2
61059: NOT
61060: OR
61061: IFFALSE 61065
// exit ;
61063: GO 61372
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61065: LD_ADDR_VAR 0 10
61069: PUSH
61070: LD_INT 5
61072: PUSH
61073: LD_INT 6
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 4
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: LD_INT 5
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 24
61107: PUSH
61108: LD_INT 25
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 23
61117: PUSH
61118: LD_INT 27
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 42
61131: PUSH
61132: LD_INT 43
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 44
61141: PUSH
61142: LD_INT 46
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 45
61151: PUSH
61152: LD_INT 47
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: LIST
61168: ST_TO_ADDR
// result := [ ] ;
61169: LD_ADDR_VAR 0 3
61173: PUSH
61174: EMPTY
61175: ST_TO_ADDR
// for i in turrets do
61176: LD_ADDR_VAR 0 4
61180: PUSH
61181: LD_VAR 0 1
61185: PUSH
61186: FOR_IN
61187: IFFALSE 61370
// begin nat := GetNation ( i ) ;
61189: LD_ADDR_VAR 0 7
61193: PUSH
61194: LD_VAR 0 4
61198: PPUSH
61199: CALL_OW 248
61203: ST_TO_ADDR
// weapon := 0 ;
61204: LD_ADDR_VAR 0 8
61208: PUSH
61209: LD_INT 0
61211: ST_TO_ADDR
// if not nat then
61212: LD_VAR 0 7
61216: NOT
61217: IFFALSE 61221
// continue ;
61219: GO 61186
// for j in list [ nat ] do
61221: LD_ADDR_VAR 0 5
61225: PUSH
61226: LD_VAR 0 10
61230: PUSH
61231: LD_VAR 0 7
61235: ARRAY
61236: PUSH
61237: FOR_IN
61238: IFFALSE 61279
// if GetBWeapon ( i ) = j [ 1 ] then
61240: LD_VAR 0 4
61244: PPUSH
61245: CALL_OW 269
61249: PUSH
61250: LD_VAR 0 5
61254: PUSH
61255: LD_INT 1
61257: ARRAY
61258: EQUAL
61259: IFFALSE 61277
// begin weapon := j [ 2 ] ;
61261: LD_ADDR_VAR 0 8
61265: PUSH
61266: LD_VAR 0 5
61270: PUSH
61271: LD_INT 2
61273: ARRAY
61274: ST_TO_ADDR
// break ;
61275: GO 61279
// end ;
61277: GO 61237
61279: POP
61280: POP
// if not weapon then
61281: LD_VAR 0 8
61285: NOT
61286: IFFALSE 61290
// continue ;
61288: GO 61186
// for k in factories do
61290: LD_ADDR_VAR 0 6
61294: PUSH
61295: LD_VAR 0 2
61299: PUSH
61300: FOR_IN
61301: IFFALSE 61366
// begin weapons := AvailableWeaponList ( k ) ;
61303: LD_ADDR_VAR 0 9
61307: PUSH
61308: LD_VAR 0 6
61312: PPUSH
61313: CALL_OW 478
61317: ST_TO_ADDR
// if not weapons then
61318: LD_VAR 0 9
61322: NOT
61323: IFFALSE 61327
// continue ;
61325: GO 61300
// if weapon in weapons then
61327: LD_VAR 0 8
61331: PUSH
61332: LD_VAR 0 9
61336: IN
61337: IFFALSE 61364
// begin result := [ i , weapon ] ;
61339: LD_ADDR_VAR 0 3
61343: PUSH
61344: LD_VAR 0 4
61348: PUSH
61349: LD_VAR 0 8
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: ST_TO_ADDR
// exit ;
61358: POP
61359: POP
61360: POP
61361: POP
61362: GO 61372
// end ; end ;
61364: GO 61300
61366: POP
61367: POP
// end ;
61368: GO 61186
61370: POP
61371: POP
// end ;
61372: LD_VAR 0 3
61376: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61377: LD_INT 0
61379: PPUSH
// if not side or side > 8 then
61380: LD_VAR 0 3
61384: NOT
61385: PUSH
61386: LD_VAR 0 3
61390: PUSH
61391: LD_INT 8
61393: GREATER
61394: OR
61395: IFFALSE 61399
// exit ;
61397: GO 61458
// if not range then
61399: LD_VAR 0 4
61403: NOT
61404: IFFALSE 61415
// range := - 12 ;
61406: LD_ADDR_VAR 0 4
61410: PUSH
61411: LD_INT 12
61413: NEG
61414: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61415: LD_VAR 0 1
61419: PPUSH
61420: LD_VAR 0 2
61424: PPUSH
61425: LD_VAR 0 3
61429: PPUSH
61430: LD_VAR 0 4
61434: PPUSH
61435: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61439: LD_VAR 0 1
61443: PPUSH
61444: LD_VAR 0 2
61448: PPUSH
61449: LD_VAR 0 3
61453: PPUSH
61454: CALL_OW 331
// end ;
61458: LD_VAR 0 5
61462: RET
// export function Video ( mode ) ; begin
61463: LD_INT 0
61465: PPUSH
// ingame_video = mode ;
61466: LD_ADDR_OWVAR 52
61470: PUSH
61471: LD_VAR 0 1
61475: ST_TO_ADDR
// interface_hidden = mode ;
61476: LD_ADDR_OWVAR 54
61480: PUSH
61481: LD_VAR 0 1
61485: ST_TO_ADDR
// end ;
61486: LD_VAR 0 2
61490: RET
// export function Join ( array , element ) ; begin
61491: LD_INT 0
61493: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61494: LD_ADDR_VAR 0 3
61498: PUSH
61499: LD_VAR 0 1
61503: PPUSH
61504: LD_VAR 0 1
61508: PUSH
61509: LD_INT 1
61511: PLUS
61512: PPUSH
61513: LD_VAR 0 2
61517: PPUSH
61518: CALL_OW 1
61522: ST_TO_ADDR
// end ;
61523: LD_VAR 0 3
61527: RET
// export function JoinUnion ( array , element ) ; begin
61528: LD_INT 0
61530: PPUSH
// result := array union element ;
61531: LD_ADDR_VAR 0 3
61535: PUSH
61536: LD_VAR 0 1
61540: PUSH
61541: LD_VAR 0 2
61545: UNION
61546: ST_TO_ADDR
// end ;
61547: LD_VAR 0 3
61551: RET
// export function GetBehemoths ( side ) ; begin
61552: LD_INT 0
61554: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61555: LD_ADDR_VAR 0 2
61559: PUSH
61560: LD_INT 22
61562: PUSH
61563: LD_VAR 0 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 31
61574: PUSH
61575: LD_INT 25
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PPUSH
61586: CALL_OW 69
61590: ST_TO_ADDR
// end ;
61591: LD_VAR 0 2
61595: RET
// export function Shuffle ( array ) ; var i , index ; begin
61596: LD_INT 0
61598: PPUSH
61599: PPUSH
61600: PPUSH
// result := [ ] ;
61601: LD_ADDR_VAR 0 2
61605: PUSH
61606: EMPTY
61607: ST_TO_ADDR
// if not array then
61608: LD_VAR 0 1
61612: NOT
61613: IFFALSE 61617
// exit ;
61615: GO 61716
// Randomize ;
61617: CALL_OW 10
// for i = array downto 1 do
61621: LD_ADDR_VAR 0 3
61625: PUSH
61626: DOUBLE
61627: LD_VAR 0 1
61631: INC
61632: ST_TO_ADDR
61633: LD_INT 1
61635: PUSH
61636: FOR_DOWNTO
61637: IFFALSE 61714
// begin index := rand ( 1 , array ) ;
61639: LD_ADDR_VAR 0 4
61643: PUSH
61644: LD_INT 1
61646: PPUSH
61647: LD_VAR 0 1
61651: PPUSH
61652: CALL_OW 12
61656: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61657: LD_ADDR_VAR 0 2
61661: PUSH
61662: LD_VAR 0 2
61666: PPUSH
61667: LD_VAR 0 2
61671: PUSH
61672: LD_INT 1
61674: PLUS
61675: PPUSH
61676: LD_VAR 0 1
61680: PUSH
61681: LD_VAR 0 4
61685: ARRAY
61686: PPUSH
61687: CALL_OW 2
61691: ST_TO_ADDR
// array := Delete ( array , index ) ;
61692: LD_ADDR_VAR 0 1
61696: PUSH
61697: LD_VAR 0 1
61701: PPUSH
61702: LD_VAR 0 4
61706: PPUSH
61707: CALL_OW 3
61711: ST_TO_ADDR
// end ;
61712: GO 61636
61714: POP
61715: POP
// end ;
61716: LD_VAR 0 2
61720: RET
// export function GetBaseMaterials ( base ) ; begin
61721: LD_INT 0
61723: PPUSH
// result := [ 0 , 0 , 0 ] ;
61724: LD_ADDR_VAR 0 2
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: LIST
61742: ST_TO_ADDR
// if not base then
61743: LD_VAR 0 1
61747: NOT
61748: IFFALSE 61752
// exit ;
61750: GO 61801
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61752: LD_ADDR_VAR 0 2
61756: PUSH
61757: LD_VAR 0 1
61761: PPUSH
61762: LD_INT 1
61764: PPUSH
61765: CALL_OW 275
61769: PUSH
61770: LD_VAR 0 1
61774: PPUSH
61775: LD_INT 2
61777: PPUSH
61778: CALL_OW 275
61782: PUSH
61783: LD_VAR 0 1
61787: PPUSH
61788: LD_INT 3
61790: PPUSH
61791: CALL_OW 275
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: ST_TO_ADDR
// end ;
61801: LD_VAR 0 2
61805: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61806: LD_INT 0
61808: PPUSH
61809: PPUSH
// result := array ;
61810: LD_ADDR_VAR 0 3
61814: PUSH
61815: LD_VAR 0 1
61819: ST_TO_ADDR
// if size >= result then
61820: LD_VAR 0 2
61824: PUSH
61825: LD_VAR 0 3
61829: GREATEREQUAL
61830: IFFALSE 61834
// exit ;
61832: GO 61884
// if size then
61834: LD_VAR 0 2
61838: IFFALSE 61884
// for i := array downto size do
61840: LD_ADDR_VAR 0 4
61844: PUSH
61845: DOUBLE
61846: LD_VAR 0 1
61850: INC
61851: ST_TO_ADDR
61852: LD_VAR 0 2
61856: PUSH
61857: FOR_DOWNTO
61858: IFFALSE 61882
// result := Delete ( result , result ) ;
61860: LD_ADDR_VAR 0 3
61864: PUSH
61865: LD_VAR 0 3
61869: PPUSH
61870: LD_VAR 0 3
61874: PPUSH
61875: CALL_OW 3
61879: ST_TO_ADDR
61880: GO 61857
61882: POP
61883: POP
// end ;
61884: LD_VAR 0 3
61888: RET
// export function ComExit ( unit ) ; var tmp ; begin
61889: LD_INT 0
61891: PPUSH
61892: PPUSH
// if not IsInUnit ( unit ) then
61893: LD_VAR 0 1
61897: PPUSH
61898: CALL_OW 310
61902: NOT
61903: IFFALSE 61907
// exit ;
61905: GO 61967
// tmp := IsInUnit ( unit ) ;
61907: LD_ADDR_VAR 0 3
61911: PUSH
61912: LD_VAR 0 1
61916: PPUSH
61917: CALL_OW 310
61921: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61922: LD_VAR 0 3
61926: PPUSH
61927: CALL_OW 247
61931: PUSH
61932: LD_INT 2
61934: EQUAL
61935: IFFALSE 61948
// ComExitVehicle ( unit ) else
61937: LD_VAR 0 1
61941: PPUSH
61942: CALL_OW 121
61946: GO 61957
// ComExitBuilding ( unit ) ;
61948: LD_VAR 0 1
61952: PPUSH
61953: CALL_OW 122
// result := tmp ;
61957: LD_ADDR_VAR 0 2
61961: PUSH
61962: LD_VAR 0 3
61966: ST_TO_ADDR
// end ;
61967: LD_VAR 0 2
61971: RET
// export function ComExitAll ( units ) ; var i ; begin
61972: LD_INT 0
61974: PPUSH
61975: PPUSH
// if not units then
61976: LD_VAR 0 1
61980: NOT
61981: IFFALSE 61985
// exit ;
61983: GO 62011
// for i in units do
61985: LD_ADDR_VAR 0 3
61989: PUSH
61990: LD_VAR 0 1
61994: PUSH
61995: FOR_IN
61996: IFFALSE 62009
// ComExit ( i ) ;
61998: LD_VAR 0 3
62002: PPUSH
62003: CALL 61889 0 1
62007: GO 61995
62009: POP
62010: POP
// end ;
62011: LD_VAR 0 2
62015: RET
// export function ResetHc ; begin
62016: LD_INT 0
62018: PPUSH
// InitHc ;
62019: CALL_OW 19
// hc_importance := 0 ;
62023: LD_ADDR_OWVAR 32
62027: PUSH
62028: LD_INT 0
62030: ST_TO_ADDR
// end ;
62031: LD_VAR 0 1
62035: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62036: LD_INT 0
62038: PPUSH
62039: PPUSH
62040: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62041: LD_ADDR_VAR 0 6
62045: PUSH
62046: LD_VAR 0 1
62050: PUSH
62051: LD_VAR 0 3
62055: PLUS
62056: PUSH
62057: LD_INT 2
62059: DIV
62060: ST_TO_ADDR
// if _x < 0 then
62061: LD_VAR 0 6
62065: PUSH
62066: LD_INT 0
62068: LESS
62069: IFFALSE 62086
// _x := _x * - 1 ;
62071: LD_ADDR_VAR 0 6
62075: PUSH
62076: LD_VAR 0 6
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: MUL
62085: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62086: LD_ADDR_VAR 0 7
62090: PUSH
62091: LD_VAR 0 2
62095: PUSH
62096: LD_VAR 0 4
62100: PLUS
62101: PUSH
62102: LD_INT 2
62104: DIV
62105: ST_TO_ADDR
// if _y < 0 then
62106: LD_VAR 0 7
62110: PUSH
62111: LD_INT 0
62113: LESS
62114: IFFALSE 62131
// _y := _y * - 1 ;
62116: LD_ADDR_VAR 0 7
62120: PUSH
62121: LD_VAR 0 7
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: MUL
62130: ST_TO_ADDR
// result := [ _x , _y ] ;
62131: LD_ADDR_VAR 0 5
62135: PUSH
62136: LD_VAR 0 6
62140: PUSH
62141: LD_VAR 0 7
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: ST_TO_ADDR
// end ;
62150: LD_VAR 0 5
62154: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62155: LD_INT 0
62157: PPUSH
62158: PPUSH
62159: PPUSH
62160: PPUSH
// task := GetTaskList ( unit ) ;
62161: LD_ADDR_VAR 0 7
62165: PUSH
62166: LD_VAR 0 1
62170: PPUSH
62171: CALL_OW 437
62175: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62176: LD_VAR 0 7
62180: NOT
62181: PUSH
62182: LD_VAR 0 1
62186: PPUSH
62187: LD_VAR 0 2
62191: PPUSH
62192: CALL_OW 308
62196: NOT
62197: AND
62198: IFFALSE 62202
// exit ;
62200: GO 62320
// if IsInArea ( unit , area ) then
62202: LD_VAR 0 1
62206: PPUSH
62207: LD_VAR 0 2
62211: PPUSH
62212: CALL_OW 308
62216: IFFALSE 62234
// begin ComMoveToArea ( unit , goAway ) ;
62218: LD_VAR 0 1
62222: PPUSH
62223: LD_VAR 0 3
62227: PPUSH
62228: CALL_OW 113
// exit ;
62232: GO 62320
// end ; if task [ 1 ] [ 1 ] <> M then
62234: LD_VAR 0 7
62238: PUSH
62239: LD_INT 1
62241: ARRAY
62242: PUSH
62243: LD_INT 1
62245: ARRAY
62246: PUSH
62247: LD_STRING M
62249: NONEQUAL
62250: IFFALSE 62254
// exit ;
62252: GO 62320
// x := task [ 1 ] [ 2 ] ;
62254: LD_ADDR_VAR 0 5
62258: PUSH
62259: LD_VAR 0 7
62263: PUSH
62264: LD_INT 1
62266: ARRAY
62267: PUSH
62268: LD_INT 2
62270: ARRAY
62271: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62272: LD_ADDR_VAR 0 6
62276: PUSH
62277: LD_VAR 0 7
62281: PUSH
62282: LD_INT 1
62284: ARRAY
62285: PUSH
62286: LD_INT 3
62288: ARRAY
62289: ST_TO_ADDR
// if InArea ( x , y , area ) then
62290: LD_VAR 0 5
62294: PPUSH
62295: LD_VAR 0 6
62299: PPUSH
62300: LD_VAR 0 2
62304: PPUSH
62305: CALL_OW 309
62309: IFFALSE 62320
// ComStop ( unit ) ;
62311: LD_VAR 0 1
62315: PPUSH
62316: CALL_OW 141
// end ;
62320: LD_VAR 0 4
62324: RET
// export function Abs ( value ) ; begin
62325: LD_INT 0
62327: PPUSH
// result := value ;
62328: LD_ADDR_VAR 0 2
62332: PUSH
62333: LD_VAR 0 1
62337: ST_TO_ADDR
// if value < 0 then
62338: LD_VAR 0 1
62342: PUSH
62343: LD_INT 0
62345: LESS
62346: IFFALSE 62363
// result := value * - 1 ;
62348: LD_ADDR_VAR 0 2
62352: PUSH
62353: LD_VAR 0 1
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: MUL
62362: ST_TO_ADDR
// end ;
62363: LD_VAR 0 2
62367: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62368: LD_INT 0
62370: PPUSH
62371: PPUSH
62372: PPUSH
62373: PPUSH
62374: PPUSH
62375: PPUSH
62376: PPUSH
62377: PPUSH
// if not unit or not building then
62378: LD_VAR 0 1
62382: NOT
62383: PUSH
62384: LD_VAR 0 2
62388: NOT
62389: OR
62390: IFFALSE 62394
// exit ;
62392: GO 62620
// x := GetX ( building ) ;
62394: LD_ADDR_VAR 0 4
62398: PUSH
62399: LD_VAR 0 2
62403: PPUSH
62404: CALL_OW 250
62408: ST_TO_ADDR
// y := GetY ( building ) ;
62409: LD_ADDR_VAR 0 6
62413: PUSH
62414: LD_VAR 0 2
62418: PPUSH
62419: CALL_OW 251
62423: ST_TO_ADDR
// d := GetDir ( building ) ;
62424: LD_ADDR_VAR 0 8
62428: PUSH
62429: LD_VAR 0 2
62433: PPUSH
62434: CALL_OW 254
62438: ST_TO_ADDR
// r := 4 ;
62439: LD_ADDR_VAR 0 9
62443: PUSH
62444: LD_INT 4
62446: ST_TO_ADDR
// for i := 1 to 5 do
62447: LD_ADDR_VAR 0 10
62451: PUSH
62452: DOUBLE
62453: LD_INT 1
62455: DEC
62456: ST_TO_ADDR
62457: LD_INT 5
62459: PUSH
62460: FOR_TO
62461: IFFALSE 62618
// begin _x := ShiftX ( x , d , r + i ) ;
62463: LD_ADDR_VAR 0 5
62467: PUSH
62468: LD_VAR 0 4
62472: PPUSH
62473: LD_VAR 0 8
62477: PPUSH
62478: LD_VAR 0 9
62482: PUSH
62483: LD_VAR 0 10
62487: PLUS
62488: PPUSH
62489: CALL_OW 272
62493: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62494: LD_ADDR_VAR 0 7
62498: PUSH
62499: LD_VAR 0 6
62503: PPUSH
62504: LD_VAR 0 8
62508: PPUSH
62509: LD_VAR 0 9
62513: PUSH
62514: LD_VAR 0 10
62518: PLUS
62519: PPUSH
62520: CALL_OW 273
62524: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62525: LD_VAR 0 5
62529: PPUSH
62530: LD_VAR 0 7
62534: PPUSH
62535: CALL_OW 488
62539: PUSH
62540: LD_VAR 0 5
62544: PPUSH
62545: LD_VAR 0 7
62549: PPUSH
62550: CALL_OW 428
62554: PPUSH
62555: CALL_OW 247
62559: PUSH
62560: LD_INT 3
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: IN
62570: NOT
62571: AND
62572: IFFALSE 62616
// begin ComMoveXY ( unit , _x , _y ) ;
62574: LD_VAR 0 1
62578: PPUSH
62579: LD_VAR 0 5
62583: PPUSH
62584: LD_VAR 0 7
62588: PPUSH
62589: CALL_OW 111
// result := [ _x , _y ] ;
62593: LD_ADDR_VAR 0 3
62597: PUSH
62598: LD_VAR 0 5
62602: PUSH
62603: LD_VAR 0 7
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: ST_TO_ADDR
// exit ;
62612: POP
62613: POP
62614: GO 62620
// end ; end ;
62616: GO 62460
62618: POP
62619: POP
// end ;
62620: LD_VAR 0 3
62624: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62625: LD_INT 0
62627: PPUSH
62628: PPUSH
62629: PPUSH
// result := 0 ;
62630: LD_ADDR_VAR 0 3
62634: PUSH
62635: LD_INT 0
62637: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62638: LD_VAR 0 1
62642: PUSH
62643: LD_INT 0
62645: LESS
62646: PUSH
62647: LD_VAR 0 1
62651: PUSH
62652: LD_INT 8
62654: GREATER
62655: OR
62656: PUSH
62657: LD_VAR 0 2
62661: PUSH
62662: LD_INT 0
62664: LESS
62665: OR
62666: PUSH
62667: LD_VAR 0 2
62671: PUSH
62672: LD_INT 8
62674: GREATER
62675: OR
62676: IFFALSE 62680
// exit ;
62678: GO 62755
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62680: LD_ADDR_VAR 0 4
62684: PUSH
62685: LD_INT 22
62687: PUSH
62688: LD_VAR 0 2
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PPUSH
62697: CALL_OW 69
62701: PUSH
62702: FOR_IN
62703: IFFALSE 62753
// begin un := UnitShoot ( i ) ;
62705: LD_ADDR_VAR 0 5
62709: PUSH
62710: LD_VAR 0 4
62714: PPUSH
62715: CALL_OW 504
62719: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62720: LD_VAR 0 5
62724: PPUSH
62725: CALL_OW 255
62729: PUSH
62730: LD_VAR 0 1
62734: EQUAL
62735: IFFALSE 62751
// begin result := un ;
62737: LD_ADDR_VAR 0 3
62741: PUSH
62742: LD_VAR 0 5
62746: ST_TO_ADDR
// exit ;
62747: POP
62748: POP
62749: GO 62755
// end ; end ;
62751: GO 62702
62753: POP
62754: POP
// end ;
62755: LD_VAR 0 3
62759: RET
// export function GetCargoBay ( units ) ; begin
62760: LD_INT 0
62762: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62763: LD_ADDR_VAR 0 2
62767: PUSH
62768: LD_VAR 0 1
62772: PPUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 34
62778: PUSH
62779: LD_INT 12
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 34
62788: PUSH
62789: LD_INT 51
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 34
62798: PUSH
62799: LD_INT 32
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 34
62808: PUSH
62809: LD_INT 89
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: PPUSH
62823: CALL_OW 72
62827: ST_TO_ADDR
// end ;
62828: LD_VAR 0 2
62832: RET
// export function Negate ( value ) ; begin
62833: LD_INT 0
62835: PPUSH
// result := not value ;
62836: LD_ADDR_VAR 0 2
62840: PUSH
62841: LD_VAR 0 1
62845: NOT
62846: ST_TO_ADDR
// end ;
62847: LD_VAR 0 2
62851: RET
// export function Inc ( value ) ; begin
62852: LD_INT 0
62854: PPUSH
// result := value + 1 ;
62855: LD_ADDR_VAR 0 2
62859: PUSH
62860: LD_VAR 0 1
62864: PUSH
62865: LD_INT 1
62867: PLUS
62868: ST_TO_ADDR
// end ;
62869: LD_VAR 0 2
62873: RET
// export function Dec ( value ) ; begin
62874: LD_INT 0
62876: PPUSH
// result := value - 1 ;
62877: LD_ADDR_VAR 0 2
62881: PUSH
62882: LD_VAR 0 1
62886: PUSH
62887: LD_INT 1
62889: MINUS
62890: ST_TO_ADDR
// end ;
62891: LD_VAR 0 2
62895: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62896: LD_INT 0
62898: PPUSH
62899: PPUSH
62900: PPUSH
62901: PPUSH
62902: PPUSH
62903: PPUSH
62904: PPUSH
62905: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62906: LD_VAR 0 1
62910: PPUSH
62911: LD_VAR 0 2
62915: PPUSH
62916: CALL_OW 488
62920: NOT
62921: PUSH
62922: LD_VAR 0 3
62926: PPUSH
62927: LD_VAR 0 4
62931: PPUSH
62932: CALL_OW 488
62936: NOT
62937: OR
62938: IFFALSE 62951
// begin result := - 1 ;
62940: LD_ADDR_VAR 0 5
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: ST_TO_ADDR
// exit ;
62949: GO 63186
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62951: LD_ADDR_VAR 0 12
62955: PUSH
62956: LD_VAR 0 1
62960: PPUSH
62961: LD_VAR 0 2
62965: PPUSH
62966: LD_VAR 0 3
62970: PPUSH
62971: LD_VAR 0 4
62975: PPUSH
62976: CALL 62036 0 4
62980: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62981: LD_ADDR_VAR 0 11
62985: PUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: LD_VAR 0 2
62995: PPUSH
62996: LD_VAR 0 12
63000: PUSH
63001: LD_INT 1
63003: ARRAY
63004: PPUSH
63005: LD_VAR 0 12
63009: PUSH
63010: LD_INT 2
63012: ARRAY
63013: PPUSH
63014: CALL_OW 298
63018: ST_TO_ADDR
// distance := 9999 ;
63019: LD_ADDR_VAR 0 10
63023: PUSH
63024: LD_INT 9999
63026: ST_TO_ADDR
// for i := 0 to 5 do
63027: LD_ADDR_VAR 0 6
63031: PUSH
63032: DOUBLE
63033: LD_INT 0
63035: DEC
63036: ST_TO_ADDR
63037: LD_INT 5
63039: PUSH
63040: FOR_TO
63041: IFFALSE 63184
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63043: LD_ADDR_VAR 0 7
63047: PUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: LD_VAR 0 6
63057: PPUSH
63058: LD_VAR 0 11
63062: PPUSH
63063: CALL_OW 272
63067: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63068: LD_ADDR_VAR 0 8
63072: PUSH
63073: LD_VAR 0 2
63077: PPUSH
63078: LD_VAR 0 6
63082: PPUSH
63083: LD_VAR 0 11
63087: PPUSH
63088: CALL_OW 273
63092: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63093: LD_VAR 0 7
63097: PPUSH
63098: LD_VAR 0 8
63102: PPUSH
63103: CALL_OW 488
63107: NOT
63108: IFFALSE 63112
// continue ;
63110: GO 63040
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63112: LD_ADDR_VAR 0 9
63116: PUSH
63117: LD_VAR 0 12
63121: PUSH
63122: LD_INT 1
63124: ARRAY
63125: PPUSH
63126: LD_VAR 0 12
63130: PUSH
63131: LD_INT 2
63133: ARRAY
63134: PPUSH
63135: LD_VAR 0 7
63139: PPUSH
63140: LD_VAR 0 8
63144: PPUSH
63145: CALL_OW 298
63149: ST_TO_ADDR
// if tmp < distance then
63150: LD_VAR 0 9
63154: PUSH
63155: LD_VAR 0 10
63159: LESS
63160: IFFALSE 63182
// begin result := i ;
63162: LD_ADDR_VAR 0 5
63166: PUSH
63167: LD_VAR 0 6
63171: ST_TO_ADDR
// distance := tmp ;
63172: LD_ADDR_VAR 0 10
63176: PUSH
63177: LD_VAR 0 9
63181: ST_TO_ADDR
// end ; end ;
63182: GO 63040
63184: POP
63185: POP
// end ;
63186: LD_VAR 0 5
63190: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63191: LD_INT 0
63193: PPUSH
63194: PPUSH
// if not driver or not IsInUnit ( driver ) then
63195: LD_VAR 0 1
63199: NOT
63200: PUSH
63201: LD_VAR 0 1
63205: PPUSH
63206: CALL_OW 310
63210: NOT
63211: OR
63212: IFFALSE 63216
// exit ;
63214: GO 63306
// vehicle := IsInUnit ( driver ) ;
63216: LD_ADDR_VAR 0 3
63220: PUSH
63221: LD_VAR 0 1
63225: PPUSH
63226: CALL_OW 310
63230: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63231: LD_VAR 0 1
63235: PPUSH
63236: LD_STRING \
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: PUSH
63266: LD_STRING E
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_VAR 0 3
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PPUSH
63302: CALL_OW 446
// end ;
63306: LD_VAR 0 2
63310: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63311: LD_INT 0
63313: PPUSH
63314: PPUSH
// if not driver or not IsInUnit ( driver ) then
63315: LD_VAR 0 1
63319: NOT
63320: PUSH
63321: LD_VAR 0 1
63325: PPUSH
63326: CALL_OW 310
63330: NOT
63331: OR
63332: IFFALSE 63336
// exit ;
63334: GO 63426
// vehicle := IsInUnit ( driver ) ;
63336: LD_ADDR_VAR 0 3
63340: PUSH
63341: LD_VAR 0 1
63345: PPUSH
63346: CALL_OW 310
63350: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63351: LD_VAR 0 1
63355: PPUSH
63356: LD_STRING \
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: PUSH
63386: LD_STRING E
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_VAR 0 3
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PPUSH
63422: CALL_OW 447
// end ;
63426: LD_VAR 0 2
63430: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63431: LD_INT 0
63433: PPUSH
63434: PPUSH
63435: PPUSH
// tmp := [ ] ;
63436: LD_ADDR_VAR 0 5
63440: PUSH
63441: EMPTY
63442: ST_TO_ADDR
// for i in units do
63443: LD_ADDR_VAR 0 4
63447: PUSH
63448: LD_VAR 0 1
63452: PUSH
63453: FOR_IN
63454: IFFALSE 63492
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63456: LD_ADDR_VAR 0 5
63460: PUSH
63461: LD_VAR 0 5
63465: PPUSH
63466: LD_VAR 0 5
63470: PUSH
63471: LD_INT 1
63473: PLUS
63474: PPUSH
63475: LD_VAR 0 4
63479: PPUSH
63480: CALL_OW 256
63484: PPUSH
63485: CALL_OW 2
63489: ST_TO_ADDR
63490: GO 63453
63492: POP
63493: POP
// if not tmp then
63494: LD_VAR 0 5
63498: NOT
63499: IFFALSE 63503
// exit ;
63501: GO 63551
// if asc then
63503: LD_VAR 0 2
63507: IFFALSE 63531
// result := SortListByListAsc ( units , tmp ) else
63509: LD_ADDR_VAR 0 3
63513: PUSH
63514: LD_VAR 0 1
63518: PPUSH
63519: LD_VAR 0 5
63523: PPUSH
63524: CALL_OW 76
63528: ST_TO_ADDR
63529: GO 63551
// result := SortListByListDesc ( units , tmp ) ;
63531: LD_ADDR_VAR 0 3
63535: PUSH
63536: LD_VAR 0 1
63540: PPUSH
63541: LD_VAR 0 5
63545: PPUSH
63546: CALL_OW 77
63550: ST_TO_ADDR
// end ;
63551: LD_VAR 0 3
63555: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63556: LD_INT 0
63558: PPUSH
63559: PPUSH
// task := GetTaskList ( mech ) ;
63560: LD_ADDR_VAR 0 4
63564: PUSH
63565: LD_VAR 0 1
63569: PPUSH
63570: CALL_OW 437
63574: ST_TO_ADDR
// if not task then
63575: LD_VAR 0 4
63579: NOT
63580: IFFALSE 63584
// exit ;
63582: GO 63626
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63584: LD_ADDR_VAR 0 3
63588: PUSH
63589: LD_VAR 0 4
63593: PUSH
63594: LD_INT 1
63596: ARRAY
63597: PUSH
63598: LD_INT 1
63600: ARRAY
63601: PUSH
63602: LD_STRING r
63604: EQUAL
63605: PUSH
63606: LD_VAR 0 4
63610: PUSH
63611: LD_INT 1
63613: ARRAY
63614: PUSH
63615: LD_INT 4
63617: ARRAY
63618: PUSH
63619: LD_VAR 0 2
63623: EQUAL
63624: AND
63625: ST_TO_ADDR
// end ;
63626: LD_VAR 0 3
63630: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63631: LD_INT 0
63633: PPUSH
// SetDir ( unit , d ) ;
63634: LD_VAR 0 1
63638: PPUSH
63639: LD_VAR 0 4
63643: PPUSH
63644: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63648: LD_VAR 0 1
63652: PPUSH
63653: LD_VAR 0 2
63657: PPUSH
63658: LD_VAR 0 3
63662: PPUSH
63663: LD_VAR 0 5
63667: PPUSH
63668: CALL_OW 48
// end ;
63672: LD_VAR 0 6
63676: RET
// export function ToNaturalNumber ( number ) ; begin
63677: LD_INT 0
63679: PPUSH
// result := number div 1 ;
63680: LD_ADDR_VAR 0 2
63684: PUSH
63685: LD_VAR 0 1
63689: PUSH
63690: LD_INT 1
63692: DIV
63693: ST_TO_ADDR
// if number < 0 then
63694: LD_VAR 0 1
63698: PUSH
63699: LD_INT 0
63701: LESS
63702: IFFALSE 63712
// result := 0 ;
63704: LD_ADDR_VAR 0 2
63708: PUSH
63709: LD_INT 0
63711: ST_TO_ADDR
// end ;
63712: LD_VAR 0 2
63716: RET
// export function SortByClass ( units , class ) ; var un ; begin
63717: LD_INT 0
63719: PPUSH
63720: PPUSH
// if not units or not class then
63721: LD_VAR 0 1
63725: NOT
63726: PUSH
63727: LD_VAR 0 2
63731: NOT
63732: OR
63733: IFFALSE 63737
// exit ;
63735: GO 63832
// result := [ ] ;
63737: LD_ADDR_VAR 0 3
63741: PUSH
63742: EMPTY
63743: ST_TO_ADDR
// for un in units do
63744: LD_ADDR_VAR 0 4
63748: PUSH
63749: LD_VAR 0 1
63753: PUSH
63754: FOR_IN
63755: IFFALSE 63830
// if GetClass ( un ) = class then
63757: LD_VAR 0 4
63761: PPUSH
63762: CALL_OW 257
63766: PUSH
63767: LD_VAR 0 2
63771: EQUAL
63772: IFFALSE 63799
// result := Insert ( result , 1 , un ) else
63774: LD_ADDR_VAR 0 3
63778: PUSH
63779: LD_VAR 0 3
63783: PPUSH
63784: LD_INT 1
63786: PPUSH
63787: LD_VAR 0 4
63791: PPUSH
63792: CALL_OW 2
63796: ST_TO_ADDR
63797: GO 63828
// result := Replace ( result , result + 1 , un ) ;
63799: LD_ADDR_VAR 0 3
63803: PUSH
63804: LD_VAR 0 3
63808: PPUSH
63809: LD_VAR 0 3
63813: PUSH
63814: LD_INT 1
63816: PLUS
63817: PPUSH
63818: LD_VAR 0 4
63822: PPUSH
63823: CALL_OW 1
63827: ST_TO_ADDR
63828: GO 63754
63830: POP
63831: POP
// end ;
63832: LD_VAR 0 3
63836: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63837: LD_INT 0
63839: PPUSH
63840: PPUSH
63841: PPUSH
63842: PPUSH
63843: PPUSH
63844: PPUSH
63845: PPUSH
// result := [ ] ;
63846: LD_ADDR_VAR 0 4
63850: PUSH
63851: EMPTY
63852: ST_TO_ADDR
// if x - r < 0 then
63853: LD_VAR 0 1
63857: PUSH
63858: LD_VAR 0 3
63862: MINUS
63863: PUSH
63864: LD_INT 0
63866: LESS
63867: IFFALSE 63879
// min_x := 0 else
63869: LD_ADDR_VAR 0 8
63873: PUSH
63874: LD_INT 0
63876: ST_TO_ADDR
63877: GO 63895
// min_x := x - r ;
63879: LD_ADDR_VAR 0 8
63883: PUSH
63884: LD_VAR 0 1
63888: PUSH
63889: LD_VAR 0 3
63893: MINUS
63894: ST_TO_ADDR
// if y - r < 0 then
63895: LD_VAR 0 2
63899: PUSH
63900: LD_VAR 0 3
63904: MINUS
63905: PUSH
63906: LD_INT 0
63908: LESS
63909: IFFALSE 63921
// min_y := 0 else
63911: LD_ADDR_VAR 0 7
63915: PUSH
63916: LD_INT 0
63918: ST_TO_ADDR
63919: GO 63937
// min_y := y - r ;
63921: LD_ADDR_VAR 0 7
63925: PUSH
63926: LD_VAR 0 2
63930: PUSH
63931: LD_VAR 0 3
63935: MINUS
63936: ST_TO_ADDR
// max_x := x + r ;
63937: LD_ADDR_VAR 0 9
63941: PUSH
63942: LD_VAR 0 1
63946: PUSH
63947: LD_VAR 0 3
63951: PLUS
63952: ST_TO_ADDR
// max_y := y + r ;
63953: LD_ADDR_VAR 0 10
63957: PUSH
63958: LD_VAR 0 2
63962: PUSH
63963: LD_VAR 0 3
63967: PLUS
63968: ST_TO_ADDR
// for _x = min_x to max_x do
63969: LD_ADDR_VAR 0 5
63973: PUSH
63974: DOUBLE
63975: LD_VAR 0 8
63979: DEC
63980: ST_TO_ADDR
63981: LD_VAR 0 9
63985: PUSH
63986: FOR_TO
63987: IFFALSE 64088
// for _y = min_y to max_y do
63989: LD_ADDR_VAR 0 6
63993: PUSH
63994: DOUBLE
63995: LD_VAR 0 7
63999: DEC
64000: ST_TO_ADDR
64001: LD_VAR 0 10
64005: PUSH
64006: FOR_TO
64007: IFFALSE 64084
// begin if not ValidHex ( _x , _y ) then
64009: LD_VAR 0 5
64013: PPUSH
64014: LD_VAR 0 6
64018: PPUSH
64019: CALL_OW 488
64023: NOT
64024: IFFALSE 64028
// continue ;
64026: GO 64006
// if GetResourceTypeXY ( _x , _y ) then
64028: LD_VAR 0 5
64032: PPUSH
64033: LD_VAR 0 6
64037: PPUSH
64038: CALL_OW 283
64042: IFFALSE 64082
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64044: LD_ADDR_VAR 0 4
64048: PUSH
64049: LD_VAR 0 4
64053: PPUSH
64054: LD_VAR 0 4
64058: PUSH
64059: LD_INT 1
64061: PLUS
64062: PPUSH
64063: LD_VAR 0 5
64067: PUSH
64068: LD_VAR 0 6
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PPUSH
64077: CALL_OW 1
64081: ST_TO_ADDR
// end ;
64082: GO 64006
64084: POP
64085: POP
64086: GO 63986
64088: POP
64089: POP
// end ;
64090: LD_VAR 0 4
64094: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64095: LD_INT 0
64097: PPUSH
64098: PPUSH
64099: PPUSH
64100: PPUSH
64101: PPUSH
64102: PPUSH
64103: PPUSH
64104: PPUSH
// if not units then
64105: LD_VAR 0 1
64109: NOT
64110: IFFALSE 64114
// exit ;
64112: GO 64638
// result := UnitFilter ( units , [ f_ok ] ) ;
64114: LD_ADDR_VAR 0 3
64118: PUSH
64119: LD_VAR 0 1
64123: PPUSH
64124: LD_INT 50
64126: PUSH
64127: EMPTY
64128: LIST
64129: PPUSH
64130: CALL_OW 72
64134: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64135: LD_ADDR_VAR 0 8
64139: PUSH
64140: LD_VAR 0 1
64144: PUSH
64145: LD_INT 1
64147: ARRAY
64148: PPUSH
64149: CALL_OW 255
64153: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64154: LD_ADDR_VAR 0 10
64158: PUSH
64159: LD_INT 29
64161: PUSH
64162: LD_INT 91
64164: PUSH
64165: LD_INT 49
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: ST_TO_ADDR
// if not result then
64173: LD_VAR 0 3
64177: NOT
64178: IFFALSE 64182
// exit ;
64180: GO 64638
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64182: LD_ADDR_VAR 0 5
64186: PUSH
64187: LD_INT 81
64189: PUSH
64190: LD_VAR 0 8
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PPUSH
64199: CALL_OW 69
64203: ST_TO_ADDR
// for i in result do
64204: LD_ADDR_VAR 0 4
64208: PUSH
64209: LD_VAR 0 3
64213: PUSH
64214: FOR_IN
64215: IFFALSE 64636
// begin tag := GetTag ( i ) + 1 ;
64217: LD_ADDR_VAR 0 9
64221: PUSH
64222: LD_VAR 0 4
64226: PPUSH
64227: CALL_OW 110
64231: PUSH
64232: LD_INT 1
64234: PLUS
64235: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64236: LD_ADDR_VAR 0 7
64240: PUSH
64241: LD_VAR 0 4
64245: PPUSH
64246: CALL_OW 250
64250: PPUSH
64251: LD_VAR 0 4
64255: PPUSH
64256: CALL_OW 251
64260: PPUSH
64261: LD_INT 6
64263: PPUSH
64264: CALL 63837 0 3
64268: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64269: LD_VAR 0 4
64273: PPUSH
64274: CALL_OW 247
64278: PUSH
64279: LD_INT 2
64281: EQUAL
64282: PUSH
64283: LD_VAR 0 7
64287: AND
64288: PUSH
64289: LD_VAR 0 4
64293: PPUSH
64294: CALL_OW 264
64298: PUSH
64299: LD_VAR 0 10
64303: IN
64304: NOT
64305: AND
64306: IFFALSE 64345
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64308: LD_VAR 0 4
64312: PPUSH
64313: LD_VAR 0 7
64317: PUSH
64318: LD_INT 1
64320: ARRAY
64321: PUSH
64322: LD_INT 1
64324: ARRAY
64325: PPUSH
64326: LD_VAR 0 7
64330: PUSH
64331: LD_INT 1
64333: ARRAY
64334: PUSH
64335: LD_INT 2
64337: ARRAY
64338: PPUSH
64339: CALL_OW 116
64343: GO 64634
// if path > tag then
64345: LD_VAR 0 2
64349: PUSH
64350: LD_VAR 0 9
64354: GREATER
64355: IFFALSE 64563
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64357: LD_ADDR_VAR 0 6
64361: PUSH
64362: LD_VAR 0 5
64366: PPUSH
64367: LD_INT 91
64369: PUSH
64370: LD_VAR 0 4
64374: PUSH
64375: LD_INT 8
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: PPUSH
64383: CALL_OW 72
64387: ST_TO_ADDR
// if nearEnemy then
64388: LD_VAR 0 6
64392: IFFALSE 64461
// begin if GetWeapon ( i ) = ru_time_lapser then
64394: LD_VAR 0 4
64398: PPUSH
64399: CALL_OW 264
64403: PUSH
64404: LD_INT 49
64406: EQUAL
64407: IFFALSE 64435
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64409: LD_VAR 0 4
64413: PPUSH
64414: LD_VAR 0 6
64418: PPUSH
64419: LD_VAR 0 4
64423: PPUSH
64424: CALL_OW 74
64428: PPUSH
64429: CALL_OW 112
64433: GO 64459
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64435: LD_VAR 0 4
64439: PPUSH
64440: LD_VAR 0 6
64444: PPUSH
64445: LD_VAR 0 4
64449: PPUSH
64450: CALL_OW 74
64454: PPUSH
64455: CALL_OW 115
// end else
64459: GO 64561
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64461: LD_VAR 0 4
64465: PPUSH
64466: LD_VAR 0 2
64470: PUSH
64471: LD_VAR 0 9
64475: ARRAY
64476: PUSH
64477: LD_INT 1
64479: ARRAY
64480: PPUSH
64481: LD_VAR 0 2
64485: PUSH
64486: LD_VAR 0 9
64490: ARRAY
64491: PUSH
64492: LD_INT 2
64494: ARRAY
64495: PPUSH
64496: CALL_OW 297
64500: PUSH
64501: LD_INT 6
64503: GREATER
64504: IFFALSE 64547
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64506: LD_VAR 0 4
64510: PPUSH
64511: LD_VAR 0 2
64515: PUSH
64516: LD_VAR 0 9
64520: ARRAY
64521: PUSH
64522: LD_INT 1
64524: ARRAY
64525: PPUSH
64526: LD_VAR 0 2
64530: PUSH
64531: LD_VAR 0 9
64535: ARRAY
64536: PUSH
64537: LD_INT 2
64539: ARRAY
64540: PPUSH
64541: CALL_OW 114
64545: GO 64561
// SetTag ( i , tag ) ;
64547: LD_VAR 0 4
64551: PPUSH
64552: LD_VAR 0 9
64556: PPUSH
64557: CALL_OW 109
// end else
64561: GO 64634
// if enemy then
64563: LD_VAR 0 5
64567: IFFALSE 64634
// begin if GetWeapon ( i ) = ru_time_lapser then
64569: LD_VAR 0 4
64573: PPUSH
64574: CALL_OW 264
64578: PUSH
64579: LD_INT 49
64581: EQUAL
64582: IFFALSE 64610
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64584: LD_VAR 0 4
64588: PPUSH
64589: LD_VAR 0 5
64593: PPUSH
64594: LD_VAR 0 4
64598: PPUSH
64599: CALL_OW 74
64603: PPUSH
64604: CALL_OW 112
64608: GO 64634
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64610: LD_VAR 0 4
64614: PPUSH
64615: LD_VAR 0 5
64619: PPUSH
64620: LD_VAR 0 4
64624: PPUSH
64625: CALL_OW 74
64629: PPUSH
64630: CALL_OW 115
// end ; end ;
64634: GO 64214
64636: POP
64637: POP
// end ;
64638: LD_VAR 0 3
64642: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64643: LD_INT 0
64645: PPUSH
64646: PPUSH
64647: PPUSH
// if not unit or IsInUnit ( unit ) then
64648: LD_VAR 0 1
64652: NOT
64653: PUSH
64654: LD_VAR 0 1
64658: PPUSH
64659: CALL_OW 310
64663: OR
64664: IFFALSE 64668
// exit ;
64666: GO 64759
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64668: LD_ADDR_VAR 0 4
64672: PUSH
64673: LD_VAR 0 1
64677: PPUSH
64678: CALL_OW 250
64682: PPUSH
64683: LD_VAR 0 2
64687: PPUSH
64688: LD_INT 1
64690: PPUSH
64691: CALL_OW 272
64695: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64696: LD_ADDR_VAR 0 5
64700: PUSH
64701: LD_VAR 0 1
64705: PPUSH
64706: CALL_OW 251
64710: PPUSH
64711: LD_VAR 0 2
64715: PPUSH
64716: LD_INT 1
64718: PPUSH
64719: CALL_OW 273
64723: ST_TO_ADDR
// if ValidHex ( x , y ) then
64724: LD_VAR 0 4
64728: PPUSH
64729: LD_VAR 0 5
64733: PPUSH
64734: CALL_OW 488
64738: IFFALSE 64759
// ComTurnXY ( unit , x , y ) ;
64740: LD_VAR 0 1
64744: PPUSH
64745: LD_VAR 0 4
64749: PPUSH
64750: LD_VAR 0 5
64754: PPUSH
64755: CALL_OW 118
// end ;
64759: LD_VAR 0 3
64763: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64764: LD_INT 0
64766: PPUSH
64767: PPUSH
// result := false ;
64768: LD_ADDR_VAR 0 3
64772: PUSH
64773: LD_INT 0
64775: ST_TO_ADDR
// if not units then
64776: LD_VAR 0 2
64780: NOT
64781: IFFALSE 64785
// exit ;
64783: GO 64830
// for i in units do
64785: LD_ADDR_VAR 0 4
64789: PUSH
64790: LD_VAR 0 2
64794: PUSH
64795: FOR_IN
64796: IFFALSE 64828
// if See ( side , i ) then
64798: LD_VAR 0 1
64802: PPUSH
64803: LD_VAR 0 4
64807: PPUSH
64808: CALL_OW 292
64812: IFFALSE 64826
// begin result := true ;
64814: LD_ADDR_VAR 0 3
64818: PUSH
64819: LD_INT 1
64821: ST_TO_ADDR
// exit ;
64822: POP
64823: POP
64824: GO 64830
// end ;
64826: GO 64795
64828: POP
64829: POP
// end ;
64830: LD_VAR 0 3
64834: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64835: LD_INT 0
64837: PPUSH
64838: PPUSH
64839: PPUSH
64840: PPUSH
// if not unit or not points then
64841: LD_VAR 0 1
64845: NOT
64846: PUSH
64847: LD_VAR 0 2
64851: NOT
64852: OR
64853: IFFALSE 64857
// exit ;
64855: GO 64947
// dist := 99999 ;
64857: LD_ADDR_VAR 0 5
64861: PUSH
64862: LD_INT 99999
64864: ST_TO_ADDR
// for i in points do
64865: LD_ADDR_VAR 0 4
64869: PUSH
64870: LD_VAR 0 2
64874: PUSH
64875: FOR_IN
64876: IFFALSE 64945
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64878: LD_ADDR_VAR 0 6
64882: PUSH
64883: LD_VAR 0 1
64887: PPUSH
64888: LD_VAR 0 4
64892: PUSH
64893: LD_INT 1
64895: ARRAY
64896: PPUSH
64897: LD_VAR 0 4
64901: PUSH
64902: LD_INT 2
64904: ARRAY
64905: PPUSH
64906: CALL_OW 297
64910: ST_TO_ADDR
// if tmpDist < dist then
64911: LD_VAR 0 6
64915: PUSH
64916: LD_VAR 0 5
64920: LESS
64921: IFFALSE 64943
// begin result := i ;
64923: LD_ADDR_VAR 0 3
64927: PUSH
64928: LD_VAR 0 4
64932: ST_TO_ADDR
// dist := tmpDist ;
64933: LD_ADDR_VAR 0 5
64937: PUSH
64938: LD_VAR 0 6
64942: ST_TO_ADDR
// end ; end ;
64943: GO 64875
64945: POP
64946: POP
// end ;
64947: LD_VAR 0 3
64951: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64952: LD_INT 0
64954: PPUSH
// uc_side := side ;
64955: LD_ADDR_OWVAR 20
64959: PUSH
64960: LD_VAR 0 1
64964: ST_TO_ADDR
// uc_nation := 3 ;
64965: LD_ADDR_OWVAR 21
64969: PUSH
64970: LD_INT 3
64972: ST_TO_ADDR
// vc_chassis := 25 ;
64973: LD_ADDR_OWVAR 37
64977: PUSH
64978: LD_INT 25
64980: ST_TO_ADDR
// vc_engine := engine_siberite ;
64981: LD_ADDR_OWVAR 39
64985: PUSH
64986: LD_INT 3
64988: ST_TO_ADDR
// vc_control := control_computer ;
64989: LD_ADDR_OWVAR 38
64993: PUSH
64994: LD_INT 3
64996: ST_TO_ADDR
// vc_weapon := 59 ;
64997: LD_ADDR_OWVAR 40
65001: PUSH
65002: LD_INT 59
65004: ST_TO_ADDR
// result := CreateVehicle ;
65005: LD_ADDR_VAR 0 5
65009: PUSH
65010: CALL_OW 45
65014: ST_TO_ADDR
// SetDir ( result , d ) ;
65015: LD_VAR 0 5
65019: PPUSH
65020: LD_VAR 0 4
65024: PPUSH
65025: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65029: LD_VAR 0 5
65033: PPUSH
65034: LD_VAR 0 2
65038: PPUSH
65039: LD_VAR 0 3
65043: PPUSH
65044: LD_INT 0
65046: PPUSH
65047: CALL_OW 48
// end ;
65051: LD_VAR 0 5
65055: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65056: LD_INT 0
65058: PPUSH
65059: PPUSH
65060: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65061: LD_ADDR_VAR 0 2
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65084: LD_VAR 0 1
65088: NOT
65089: PUSH
65090: LD_VAR 0 1
65094: PPUSH
65095: CALL_OW 264
65099: PUSH
65100: LD_INT 12
65102: PUSH
65103: LD_INT 51
65105: PUSH
65106: LD_INT 32
65108: PUSH
65109: LD_INT 89
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: IN
65118: NOT
65119: OR
65120: IFFALSE 65124
// exit ;
65122: GO 65222
// for i := 1 to 3 do
65124: LD_ADDR_VAR 0 3
65128: PUSH
65129: DOUBLE
65130: LD_INT 1
65132: DEC
65133: ST_TO_ADDR
65134: LD_INT 3
65136: PUSH
65137: FOR_TO
65138: IFFALSE 65220
// begin tmp := GetCargo ( cargo , i ) ;
65140: LD_ADDR_VAR 0 4
65144: PUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: LD_VAR 0 3
65154: PPUSH
65155: CALL_OW 289
65159: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65160: LD_ADDR_VAR 0 2
65164: PUSH
65165: LD_VAR 0 2
65169: PPUSH
65170: LD_VAR 0 3
65174: PPUSH
65175: LD_VAR 0 4
65179: PPUSH
65180: CALL_OW 1
65184: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65185: LD_ADDR_VAR 0 2
65189: PUSH
65190: LD_VAR 0 2
65194: PPUSH
65195: LD_INT 4
65197: PPUSH
65198: LD_VAR 0 2
65202: PUSH
65203: LD_INT 4
65205: ARRAY
65206: PUSH
65207: LD_VAR 0 4
65211: PLUS
65212: PPUSH
65213: CALL_OW 1
65217: ST_TO_ADDR
// end ;
65218: GO 65137
65220: POP
65221: POP
// end ;
65222: LD_VAR 0 2
65226: RET
// export function Length ( array ) ; begin
65227: LD_INT 0
65229: PPUSH
// result := array + 0 ;
65230: LD_ADDR_VAR 0 2
65234: PUSH
65235: LD_VAR 0 1
65239: PUSH
65240: LD_INT 0
65242: PLUS
65243: ST_TO_ADDR
// end ;
65244: LD_VAR 0 2
65248: RET
// export function PrepareArray ( array ) ; begin
65249: LD_INT 0
65251: PPUSH
// result := array diff 0 ;
65252: LD_ADDR_VAR 0 2
65256: PUSH
65257: LD_VAR 0 1
65261: PUSH
65262: LD_INT 0
65264: DIFF
65265: ST_TO_ADDR
// if not result [ 1 ] then
65266: LD_VAR 0 2
65270: PUSH
65271: LD_INT 1
65273: ARRAY
65274: NOT
65275: IFFALSE 65295
// result := Delete ( result , 1 ) ;
65277: LD_ADDR_VAR 0 2
65281: PUSH
65282: LD_VAR 0 2
65286: PPUSH
65287: LD_INT 1
65289: PPUSH
65290: CALL_OW 3
65294: ST_TO_ADDR
// end ;
65295: LD_VAR 0 2
65299: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65300: LD_INT 0
65302: PPUSH
65303: PPUSH
65304: PPUSH
65305: PPUSH
// sibRocketRange := 25 ;
65306: LD_ADDR_VAR 0 6
65310: PUSH
65311: LD_INT 25
65313: ST_TO_ADDR
// result := false ;
65314: LD_ADDR_VAR 0 4
65318: PUSH
65319: LD_INT 0
65321: ST_TO_ADDR
// for i := 0 to 5 do
65322: LD_ADDR_VAR 0 5
65326: PUSH
65327: DOUBLE
65328: LD_INT 0
65330: DEC
65331: ST_TO_ADDR
65332: LD_INT 5
65334: PUSH
65335: FOR_TO
65336: IFFALSE 65403
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65338: LD_VAR 0 1
65342: PPUSH
65343: LD_VAR 0 5
65347: PPUSH
65348: LD_VAR 0 6
65352: PPUSH
65353: CALL_OW 272
65357: PPUSH
65358: LD_VAR 0 2
65362: PPUSH
65363: LD_VAR 0 5
65367: PPUSH
65368: LD_VAR 0 6
65372: PPUSH
65373: CALL_OW 273
65377: PPUSH
65378: LD_VAR 0 3
65382: PPUSH
65383: CALL_OW 309
65387: IFFALSE 65401
// begin result := true ;
65389: LD_ADDR_VAR 0 4
65393: PUSH
65394: LD_INT 1
65396: ST_TO_ADDR
// exit ;
65397: POP
65398: POP
65399: GO 65405
// end ;
65401: GO 65335
65403: POP
65404: POP
// end ;
65405: LD_VAR 0 4
65409: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65410: LD_INT 0
65412: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65413: LD_VAR 0 1
65417: PPUSH
65418: LD_VAR 0 2
65422: PPUSH
65423: LD_INT 0
65425: PPUSH
65426: LD_INT 0
65428: PPUSH
65429: LD_INT 1
65431: PPUSH
65432: LD_INT 0
65434: PPUSH
65435: CALL_OW 587
// end ;
65439: LD_VAR 0 3
65443: RET
// export function CenterOnNow ( unit ) ; begin
65444: LD_INT 0
65446: PPUSH
// result := IsInUnit ( unit ) ;
65447: LD_ADDR_VAR 0 2
65451: PUSH
65452: LD_VAR 0 1
65456: PPUSH
65457: CALL_OW 310
65461: ST_TO_ADDR
// if not result then
65462: LD_VAR 0 2
65466: NOT
65467: IFFALSE 65479
// result := unit ;
65469: LD_ADDR_VAR 0 2
65473: PUSH
65474: LD_VAR 0 1
65478: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65479: LD_VAR 0 1
65483: PPUSH
65484: CALL_OW 87
// end ; end_of_file
65488: LD_VAR 0 2
65492: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65493: LD_VAR 0 1
65497: PPUSH
65498: LD_VAR 0 2
65502: PPUSH
65503: LD_VAR 0 3
65507: PPUSH
65508: LD_VAR 0 4
65512: PPUSH
65513: LD_VAR 0 5
65517: PPUSH
65518: LD_VAR 0 6
65522: PPUSH
65523: CALL 4271 0 6
// end ;
65527: PPOPN 6
65529: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65530: LD_INT 0
65532: PPUSH
// begin if not units then
65533: LD_VAR 0 1
65537: NOT
65538: IFFALSE 65542
// exit ;
65540: GO 65542
// end ;
65542: PPOPN 7
65544: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65545: CALL 4175 0 0
// end ;
65549: PPOPN 1
65551: END
