// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20022 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 19918 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20038 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 24646 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 24646 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 29486 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 29486 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 29486 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 29486 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 24646 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 24646 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 24646 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 24646 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 24646 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 24646 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 24646 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 24646 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 24646 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 24646 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 24646 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 24646 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 24646 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 24646 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 24646 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 29486 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_INT 89
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: IN
3775: PUSH
3776: LD_EXP 3
3780: PPUSH
3781: CALL_OW 310
3785: PPUSH
3786: CALL_OW 264
3790: PUSH
3791: LD_INT 51
3793: PUSH
3794: LD_INT 12
3796: PUSH
3797: LD_INT 89
3799: PUSH
3800: LD_INT 32
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: IN
3809: OR
3810: AND
3811: IFFALSE 4021
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_EXP 2
3830: PPUSH
3831: CALL_OW 310
3835: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 310
3850: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3851: LD_VAR 0 2
3855: PPUSH
3856: CALL_OW 265
3860: PUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: CALL_OW 262
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_VAR 0 2
3878: PPUSH
3879: CALL_OW 264
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 271
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 248
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_STRING 14a_JMMVeh
3914: PPUSH
3915: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: CALL_OW 265
3928: PUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 262
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 264
3951: PUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 271
3961: PUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 248
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_STRING 14a_BurlakVeh
3982: PPUSH
3983: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3987: LD_EXP 2
3991: PPUSH
3992: LD_STRING 14a_JMM
3994: PPUSH
3995: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3999: LD_EXP 3
4003: PPUSH
4004: LD_STRING 14a_Burlak
4006: PPUSH
4007: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING %_cont
4016: PPUSH
4017: CALL_OW 340
// end ;
4021: PPOPN 3
4023: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4024: LD_INT 22
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 24
4039: PUSH
4040: LD_INT 950
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 69
4059: IFFALSE 4071
4061: GO 4063
4063: DISABLE
// YouLost ( FriendlyFire ) ;
4064: LD_STRING FriendlyFire
4066: PPUSH
4067: CALL_OW 104
4071: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4072: LD_EXP 3
4076: PPUSH
4077: CALL_OW 301
4081: IFFALSE 4093
4083: GO 4085
4085: DISABLE
// YouLost ( Burlak ) ;
4086: LD_STRING Burlak
4088: PPUSH
4089: CALL_OW 104
4093: END
// every 0 0$1 trigger IsDead ( JMM ) do
4094: LD_EXP 2
4098: PPUSH
4099: CALL_OW 301
4103: IFFALSE 4115
4105: GO 4107
4107: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4108: LD_STRING JMM
4110: PPUSH
4111: CALL_OW 104
4115: END
// export globalGameSaveCounter ; every 0 0$1 do
4116: GO 4118
4118: DISABLE
// begin enable ;
4119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4120: LD_STRING updateTimer(
4122: PUSH
4123: LD_OWVAR 1
4127: STR
4128: PUSH
4129: LD_STRING );
4131: STR
4132: PPUSH
4133: CALL_OW 559
// end ;
4137: END
// every 0 0$1 do
4138: GO 4140
4140: DISABLE
// begin globalGameSaveCounter := 0 ;
4141: LD_ADDR_EXP 39
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4149: LD_STRING setGameSaveCounter(0)
4151: PPUSH
4152: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4156: LD_STRING initStreamRollete();
4158: PPUSH
4159: CALL_OW 559
// InitStreamMode ;
4163: CALL 5489 0 0
// DefineStreamItems ( false ) ;
4167: LD_INT 0
4169: PPUSH
4170: CALL 5953 0 1
// end ;
4174: END
// export function SOS_MapStart ( ) ; begin
4175: LD_INT 0
4177: PPUSH
// if streamModeActive then
4178: LD_EXP 40
4182: IFFALSE 4191
// DefineStreamItems ( true ) ;
4184: LD_INT 1
4186: PPUSH
4187: CALL 5953 0 1
// UpdateLuaVariables ( ) ;
4191: CALL 4208 0 0
// UpdateFactoryWaypoints ( ) ;
4195: CALL 18822 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4199: CALL 19079 0 0
// end ;
4203: LD_VAR 0 1
4207: RET
// function UpdateLuaVariables ( ) ; begin
4208: LD_INT 0
4210: PPUSH
// if globalGameSaveCounter then
4211: LD_EXP 39
4215: IFFALSE 4249
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4217: LD_ADDR_EXP 39
4221: PUSH
4222: LD_EXP 39
4226: PPUSH
4227: CALL 63709 0 1
4231: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4232: LD_STRING setGameSaveCounter(
4234: PUSH
4235: LD_EXP 39
4239: STR
4240: PUSH
4241: LD_STRING )
4243: STR
4244: PPUSH
4245: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4249: LD_STRING setGameDifficulty(
4251: PUSH
4252: LD_OWVAR 67
4256: STR
4257: PUSH
4258: LD_STRING )
4260: STR
4261: PPUSH
4262: CALL_OW 559
// end ;
4266: LD_VAR 0 1
4270: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4271: LD_INT 0
4273: PPUSH
// if p2 = stream_mode then
4274: LD_VAR 0 2
4278: PUSH
4279: LD_INT 100
4281: EQUAL
4282: IFFALSE 5285
// begin if not StreamModeActive then
4284: LD_EXP 40
4288: NOT
4289: IFFALSE 4299
// StreamModeActive := true ;
4291: LD_ADDR_EXP 40
4295: PUSH
4296: LD_INT 1
4298: ST_TO_ADDR
// if p3 = 0 then
4299: LD_VAR 0 3
4303: PUSH
4304: LD_INT 0
4306: EQUAL
4307: IFFALSE 4313
// InitStreamMode ;
4309: CALL 5489 0 0
// if p3 = 1 then
4313: LD_VAR 0 3
4317: PUSH
4318: LD_INT 1
4320: EQUAL
4321: IFFALSE 4331
// sRocket := true ;
4323: LD_ADDR_EXP 45
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// if p3 = 2 then
4331: LD_VAR 0 3
4335: PUSH
4336: LD_INT 2
4338: EQUAL
4339: IFFALSE 4349
// sSpeed := true ;
4341: LD_ADDR_EXP 44
4345: PUSH
4346: LD_INT 1
4348: ST_TO_ADDR
// if p3 = 3 then
4349: LD_VAR 0 3
4353: PUSH
4354: LD_INT 3
4356: EQUAL
4357: IFFALSE 4367
// sEngine := true ;
4359: LD_ADDR_EXP 46
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// if p3 = 4 then
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 4
4374: EQUAL
4375: IFFALSE 4385
// sSpec := true ;
4377: LD_ADDR_EXP 43
4381: PUSH
4382: LD_INT 1
4384: ST_TO_ADDR
// if p3 = 5 then
4385: LD_VAR 0 3
4389: PUSH
4390: LD_INT 5
4392: EQUAL
4393: IFFALSE 4403
// sLevel := true ;
4395: LD_ADDR_EXP 47
4399: PUSH
4400: LD_INT 1
4402: ST_TO_ADDR
// if p3 = 6 then
4403: LD_VAR 0 3
4407: PUSH
4408: LD_INT 6
4410: EQUAL
4411: IFFALSE 4421
// sArmoury := true ;
4413: LD_ADDR_EXP 48
4417: PUSH
4418: LD_INT 1
4420: ST_TO_ADDR
// if p3 = 7 then
4421: LD_VAR 0 3
4425: PUSH
4426: LD_INT 7
4428: EQUAL
4429: IFFALSE 4439
// sRadar := true ;
4431: LD_ADDR_EXP 49
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// if p3 = 8 then
4439: LD_VAR 0 3
4443: PUSH
4444: LD_INT 8
4446: EQUAL
4447: IFFALSE 4457
// sBunker := true ;
4449: LD_ADDR_EXP 50
4453: PUSH
4454: LD_INT 1
4456: ST_TO_ADDR
// if p3 = 9 then
4457: LD_VAR 0 3
4461: PUSH
4462: LD_INT 9
4464: EQUAL
4465: IFFALSE 4475
// sHack := true ;
4467: LD_ADDR_EXP 51
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// if p3 = 10 then
4475: LD_VAR 0 3
4479: PUSH
4480: LD_INT 10
4482: EQUAL
4483: IFFALSE 4493
// sFire := true ;
4485: LD_ADDR_EXP 52
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// if p3 = 11 then
4493: LD_VAR 0 3
4497: PUSH
4498: LD_INT 11
4500: EQUAL
4501: IFFALSE 4511
// sRefresh := true ;
4503: LD_ADDR_EXP 53
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// if p3 = 12 then
4511: LD_VAR 0 3
4515: PUSH
4516: LD_INT 12
4518: EQUAL
4519: IFFALSE 4529
// sExp := true ;
4521: LD_ADDR_EXP 54
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if p3 = 13 then
4529: LD_VAR 0 3
4533: PUSH
4534: LD_INT 13
4536: EQUAL
4537: IFFALSE 4547
// sDepot := true ;
4539: LD_ADDR_EXP 55
4543: PUSH
4544: LD_INT 1
4546: ST_TO_ADDR
// if p3 = 14 then
4547: LD_VAR 0 3
4551: PUSH
4552: LD_INT 14
4554: EQUAL
4555: IFFALSE 4565
// sFlag := true ;
4557: LD_ADDR_EXP 56
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if p3 = 15 then
4565: LD_VAR 0 3
4569: PUSH
4570: LD_INT 15
4572: EQUAL
4573: IFFALSE 4583
// sKamikadze := true ;
4575: LD_ADDR_EXP 64
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// if p3 = 16 then
4583: LD_VAR 0 3
4587: PUSH
4588: LD_INT 16
4590: EQUAL
4591: IFFALSE 4601
// sTroll := true ;
4593: LD_ADDR_EXP 65
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// if p3 = 17 then
4601: LD_VAR 0 3
4605: PUSH
4606: LD_INT 17
4608: EQUAL
4609: IFFALSE 4619
// sSlow := true ;
4611: LD_ADDR_EXP 66
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// if p3 = 18 then
4619: LD_VAR 0 3
4623: PUSH
4624: LD_INT 18
4626: EQUAL
4627: IFFALSE 4637
// sLack := true ;
4629: LD_ADDR_EXP 67
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// if p3 = 19 then
4637: LD_VAR 0 3
4641: PUSH
4642: LD_INT 19
4644: EQUAL
4645: IFFALSE 4655
// sTank := true ;
4647: LD_ADDR_EXP 69
4651: PUSH
4652: LD_INT 1
4654: ST_TO_ADDR
// if p3 = 20 then
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 20
4662: EQUAL
4663: IFFALSE 4673
// sRemote := true ;
4665: LD_ADDR_EXP 70
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// if p3 = 21 then
4673: LD_VAR 0 3
4677: PUSH
4678: LD_INT 21
4680: EQUAL
4681: IFFALSE 4691
// sPowell := true ;
4683: LD_ADDR_EXP 71
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// if p3 = 22 then
4691: LD_VAR 0 3
4695: PUSH
4696: LD_INT 22
4698: EQUAL
4699: IFFALSE 4709
// sTeleport := true ;
4701: LD_ADDR_EXP 74
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// if p3 = 23 then
4709: LD_VAR 0 3
4713: PUSH
4714: LD_INT 23
4716: EQUAL
4717: IFFALSE 4727
// sOilTower := true ;
4719: LD_ADDR_EXP 76
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// if p3 = 24 then
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 24
4734: EQUAL
4735: IFFALSE 4745
// sShovel := true ;
4737: LD_ADDR_EXP 77
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// if p3 = 25 then
4745: LD_VAR 0 3
4749: PUSH
4750: LD_INT 25
4752: EQUAL
4753: IFFALSE 4763
// sSheik := true ;
4755: LD_ADDR_EXP 78
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// if p3 = 26 then
4763: LD_VAR 0 3
4767: PUSH
4768: LD_INT 26
4770: EQUAL
4771: IFFALSE 4781
// sEarthquake := true ;
4773: LD_ADDR_EXP 80
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// if p3 = 27 then
4781: LD_VAR 0 3
4785: PUSH
4786: LD_INT 27
4788: EQUAL
4789: IFFALSE 4799
// sAI := true ;
4791: LD_ADDR_EXP 81
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// if p3 = 28 then
4799: LD_VAR 0 3
4803: PUSH
4804: LD_INT 28
4806: EQUAL
4807: IFFALSE 4817
// sCargo := true ;
4809: LD_ADDR_EXP 84
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// if p3 = 29 then
4817: LD_VAR 0 3
4821: PUSH
4822: LD_INT 29
4824: EQUAL
4825: IFFALSE 4835
// sDLaser := true ;
4827: LD_ADDR_EXP 85
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// if p3 = 30 then
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 30
4842: EQUAL
4843: IFFALSE 4853
// sExchange := true ;
4845: LD_ADDR_EXP 86
4849: PUSH
4850: LD_INT 1
4852: ST_TO_ADDR
// if p3 = 31 then
4853: LD_VAR 0 3
4857: PUSH
4858: LD_INT 31
4860: EQUAL
4861: IFFALSE 4871
// sFac := true ;
4863: LD_ADDR_EXP 87
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// if p3 = 32 then
4871: LD_VAR 0 3
4875: PUSH
4876: LD_INT 32
4878: EQUAL
4879: IFFALSE 4889
// sPower := true ;
4881: LD_ADDR_EXP 88
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// if p3 = 33 then
4889: LD_VAR 0 3
4893: PUSH
4894: LD_INT 33
4896: EQUAL
4897: IFFALSE 4907
// sRandom := true ;
4899: LD_ADDR_EXP 89
4903: PUSH
4904: LD_INT 1
4906: ST_TO_ADDR
// if p3 = 34 then
4907: LD_VAR 0 3
4911: PUSH
4912: LD_INT 34
4914: EQUAL
4915: IFFALSE 4925
// sShield := true ;
4917: LD_ADDR_EXP 90
4921: PUSH
4922: LD_INT 1
4924: ST_TO_ADDR
// if p3 = 35 then
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 35
4932: EQUAL
4933: IFFALSE 4943
// sTime := true ;
4935: LD_ADDR_EXP 91
4939: PUSH
4940: LD_INT 1
4942: ST_TO_ADDR
// if p3 = 36 then
4943: LD_VAR 0 3
4947: PUSH
4948: LD_INT 36
4950: EQUAL
4951: IFFALSE 4961
// sTools := true ;
4953: LD_ADDR_EXP 92
4957: PUSH
4958: LD_INT 1
4960: ST_TO_ADDR
// if p3 = 101 then
4961: LD_VAR 0 3
4965: PUSH
4966: LD_INT 101
4968: EQUAL
4969: IFFALSE 4979
// sSold := true ;
4971: LD_ADDR_EXP 57
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if p3 = 102 then
4979: LD_VAR 0 3
4983: PUSH
4984: LD_INT 102
4986: EQUAL
4987: IFFALSE 4997
// sDiff := true ;
4989: LD_ADDR_EXP 58
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if p3 = 103 then
4997: LD_VAR 0 3
5001: PUSH
5002: LD_INT 103
5004: EQUAL
5005: IFFALSE 5015
// sFog := true ;
5007: LD_ADDR_EXP 61
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// if p3 = 104 then
5015: LD_VAR 0 3
5019: PUSH
5020: LD_INT 104
5022: EQUAL
5023: IFFALSE 5033
// sReset := true ;
5025: LD_ADDR_EXP 62
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// if p3 = 105 then
5033: LD_VAR 0 3
5037: PUSH
5038: LD_INT 105
5040: EQUAL
5041: IFFALSE 5051
// sSun := true ;
5043: LD_ADDR_EXP 63
5047: PUSH
5048: LD_INT 1
5050: ST_TO_ADDR
// if p3 = 106 then
5051: LD_VAR 0 3
5055: PUSH
5056: LD_INT 106
5058: EQUAL
5059: IFFALSE 5069
// sTiger := true ;
5061: LD_ADDR_EXP 59
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// if p3 = 107 then
5069: LD_VAR 0 3
5073: PUSH
5074: LD_INT 107
5076: EQUAL
5077: IFFALSE 5087
// sBomb := true ;
5079: LD_ADDR_EXP 60
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// if p3 = 108 then
5087: LD_VAR 0 3
5091: PUSH
5092: LD_INT 108
5094: EQUAL
5095: IFFALSE 5105
// sWound := true ;
5097: LD_ADDR_EXP 68
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// if p3 = 109 then
5105: LD_VAR 0 3
5109: PUSH
5110: LD_INT 109
5112: EQUAL
5113: IFFALSE 5123
// sBetray := true ;
5115: LD_ADDR_EXP 72
5119: PUSH
5120: LD_INT 1
5122: ST_TO_ADDR
// if p3 = 110 then
5123: LD_VAR 0 3
5127: PUSH
5128: LD_INT 110
5130: EQUAL
5131: IFFALSE 5141
// sContamin := true ;
5133: LD_ADDR_EXP 73
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// if p3 = 111 then
5141: LD_VAR 0 3
5145: PUSH
5146: LD_INT 111
5148: EQUAL
5149: IFFALSE 5159
// sOil := true ;
5151: LD_ADDR_EXP 75
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// if p3 = 112 then
5159: LD_VAR 0 3
5163: PUSH
5164: LD_INT 112
5166: EQUAL
5167: IFFALSE 5177
// sStu := true ;
5169: LD_ADDR_EXP 79
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// if p3 = 113 then
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 113
5184: EQUAL
5185: IFFALSE 5195
// sBazooka := true ;
5187: LD_ADDR_EXP 82
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// if p3 = 114 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 114
5202: EQUAL
5203: IFFALSE 5213
// sMortar := true ;
5205: LD_ADDR_EXP 83
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if p3 = 115 then
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 115
5220: EQUAL
5221: IFFALSE 5231
// sRanger := true ;
5223: LD_ADDR_EXP 93
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// if p3 = 116 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 116
5238: EQUAL
5239: IFFALSE 5249
// sComputer := true ;
5241: LD_ADDR_EXP 94
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if p3 = 117 then
5249: LD_VAR 0 3
5253: PUSH
5254: LD_INT 117
5256: EQUAL
5257: IFFALSE 5267
// s30 := true ;
5259: LD_ADDR_EXP 95
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if p3 = 118 then
5267: LD_VAR 0 3
5271: PUSH
5272: LD_INT 118
5274: EQUAL
5275: IFFALSE 5285
// s60 := true ;
5277: LD_ADDR_EXP 96
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ; if p2 = hack_mode then
5285: LD_VAR 0 2
5289: PUSH
5290: LD_INT 101
5292: EQUAL
5293: IFFALSE 5421
// begin case p3 of 1 :
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 1
5302: DOUBLE
5303: EQUAL
5304: IFTRUE 5308
5306: GO 5315
5308: POP
// hHackUnlimitedResources ; 2 :
5309: CALL 17568 0 0
5313: GO 5421
5315: LD_INT 2
5317: DOUBLE
5318: EQUAL
5319: IFTRUE 5323
5321: GO 5330
5323: POP
// hHackSetLevel10 ; 3 :
5324: CALL 17701 0 0
5328: GO 5421
5330: LD_INT 3
5332: DOUBLE
5333: EQUAL
5334: IFTRUE 5338
5336: GO 5345
5338: POP
// hHackSetLevel10YourUnits ; 4 :
5339: CALL 17786 0 0
5343: GO 5421
5345: LD_INT 4
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5360
5353: POP
// hHackInvincible ; 5 :
5354: CALL 18234 0 0
5358: GO 5421
5360: LD_INT 5
5362: DOUBLE
5363: EQUAL
5364: IFTRUE 5368
5366: GO 5375
5368: POP
// hHackInvisible ; 6 :
5369: CALL 18345 0 0
5373: GO 5421
5375: LD_INT 6
5377: DOUBLE
5378: EQUAL
5379: IFTRUE 5383
5381: GO 5390
5383: POP
// hHackChangeYourSide ; 7 :
5384: CALL 18402 0 0
5388: GO 5421
5390: LD_INT 7
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5405
5398: POP
// hHackChangeUnitSide ; 8 :
5399: CALL 18444 0 0
5403: GO 5421
5405: LD_INT 8
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5420
5413: POP
// hHackFog ; end ;
5414: CALL 18545 0 0
5418: GO 5421
5420: POP
// end ; if p2 = game_save_mode then
5421: LD_VAR 0 2
5425: PUSH
5426: LD_INT 102
5428: EQUAL
5429: IFFALSE 5484
// begin if p3 = 1 then
5431: LD_VAR 0 3
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5451
// globalGameSaveCounter := p4 ;
5441: LD_ADDR_EXP 39
5445: PUSH
5446: LD_VAR 0 4
5450: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5451: LD_VAR 0 3
5455: PUSH
5456: LD_INT 2
5458: EQUAL
5459: PUSH
5460: LD_EXP 39
5464: AND
5465: IFFALSE 5484
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5467: LD_STRING setGameSaveCounter(
5469: PUSH
5470: LD_EXP 39
5474: STR
5475: PUSH
5476: LD_STRING )
5478: STR
5479: PPUSH
5480: CALL_OW 559
// end ; end ;
5484: LD_VAR 0 7
5488: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5489: LD_INT 0
5491: PPUSH
// streamModeActive := false ;
5492: LD_ADDR_EXP 40
5496: PUSH
5497: LD_INT 0
5499: ST_TO_ADDR
// normalCounter := 36 ;
5500: LD_ADDR_EXP 41
5504: PUSH
5505: LD_INT 36
5507: ST_TO_ADDR
// hardcoreCounter := 18 ;
5508: LD_ADDR_EXP 42
5512: PUSH
5513: LD_INT 18
5515: ST_TO_ADDR
// sRocket := false ;
5516: LD_ADDR_EXP 45
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// sSpeed := false ;
5524: LD_ADDR_EXP 44
5528: PUSH
5529: LD_INT 0
5531: ST_TO_ADDR
// sEngine := false ;
5532: LD_ADDR_EXP 46
5536: PUSH
5537: LD_INT 0
5539: ST_TO_ADDR
// sSpec := false ;
5540: LD_ADDR_EXP 43
5544: PUSH
5545: LD_INT 0
5547: ST_TO_ADDR
// sLevel := false ;
5548: LD_ADDR_EXP 47
5552: PUSH
5553: LD_INT 0
5555: ST_TO_ADDR
// sArmoury := false ;
5556: LD_ADDR_EXP 48
5560: PUSH
5561: LD_INT 0
5563: ST_TO_ADDR
// sRadar := false ;
5564: LD_ADDR_EXP 49
5568: PUSH
5569: LD_INT 0
5571: ST_TO_ADDR
// sBunker := false ;
5572: LD_ADDR_EXP 50
5576: PUSH
5577: LD_INT 0
5579: ST_TO_ADDR
// sHack := false ;
5580: LD_ADDR_EXP 51
5584: PUSH
5585: LD_INT 0
5587: ST_TO_ADDR
// sFire := false ;
5588: LD_ADDR_EXP 52
5592: PUSH
5593: LD_INT 0
5595: ST_TO_ADDR
// sRefresh := false ;
5596: LD_ADDR_EXP 53
5600: PUSH
5601: LD_INT 0
5603: ST_TO_ADDR
// sExp := false ;
5604: LD_ADDR_EXP 54
5608: PUSH
5609: LD_INT 0
5611: ST_TO_ADDR
// sDepot := false ;
5612: LD_ADDR_EXP 55
5616: PUSH
5617: LD_INT 0
5619: ST_TO_ADDR
// sFlag := false ;
5620: LD_ADDR_EXP 56
5624: PUSH
5625: LD_INT 0
5627: ST_TO_ADDR
// sKamikadze := false ;
5628: LD_ADDR_EXP 64
5632: PUSH
5633: LD_INT 0
5635: ST_TO_ADDR
// sTroll := false ;
5636: LD_ADDR_EXP 65
5640: PUSH
5641: LD_INT 0
5643: ST_TO_ADDR
// sSlow := false ;
5644: LD_ADDR_EXP 66
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// sLack := false ;
5652: LD_ADDR_EXP 67
5656: PUSH
5657: LD_INT 0
5659: ST_TO_ADDR
// sTank := false ;
5660: LD_ADDR_EXP 69
5664: PUSH
5665: LD_INT 0
5667: ST_TO_ADDR
// sRemote := false ;
5668: LD_ADDR_EXP 70
5672: PUSH
5673: LD_INT 0
5675: ST_TO_ADDR
// sPowell := false ;
5676: LD_ADDR_EXP 71
5680: PUSH
5681: LD_INT 0
5683: ST_TO_ADDR
// sTeleport := false ;
5684: LD_ADDR_EXP 74
5688: PUSH
5689: LD_INT 0
5691: ST_TO_ADDR
// sOilTower := false ;
5692: LD_ADDR_EXP 76
5696: PUSH
5697: LD_INT 0
5699: ST_TO_ADDR
// sShovel := false ;
5700: LD_ADDR_EXP 77
5704: PUSH
5705: LD_INT 0
5707: ST_TO_ADDR
// sSheik := false ;
5708: LD_ADDR_EXP 78
5712: PUSH
5713: LD_INT 0
5715: ST_TO_ADDR
// sEarthquake := false ;
5716: LD_ADDR_EXP 80
5720: PUSH
5721: LD_INT 0
5723: ST_TO_ADDR
// sAI := false ;
5724: LD_ADDR_EXP 81
5728: PUSH
5729: LD_INT 0
5731: ST_TO_ADDR
// sCargo := false ;
5732: LD_ADDR_EXP 84
5736: PUSH
5737: LD_INT 0
5739: ST_TO_ADDR
// sDLaser := false ;
5740: LD_ADDR_EXP 85
5744: PUSH
5745: LD_INT 0
5747: ST_TO_ADDR
// sExchange := false ;
5748: LD_ADDR_EXP 86
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// sFac := false ;
5756: LD_ADDR_EXP 87
5760: PUSH
5761: LD_INT 0
5763: ST_TO_ADDR
// sPower := false ;
5764: LD_ADDR_EXP 88
5768: PUSH
5769: LD_INT 0
5771: ST_TO_ADDR
// sRandom := false ;
5772: LD_ADDR_EXP 89
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// sShield := false ;
5780: LD_ADDR_EXP 90
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// sTime := false ;
5788: LD_ADDR_EXP 91
5792: PUSH
5793: LD_INT 0
5795: ST_TO_ADDR
// sTools := false ;
5796: LD_ADDR_EXP 92
5800: PUSH
5801: LD_INT 0
5803: ST_TO_ADDR
// sSold := false ;
5804: LD_ADDR_EXP 57
5808: PUSH
5809: LD_INT 0
5811: ST_TO_ADDR
// sDiff := false ;
5812: LD_ADDR_EXP 58
5816: PUSH
5817: LD_INT 0
5819: ST_TO_ADDR
// sFog := false ;
5820: LD_ADDR_EXP 61
5824: PUSH
5825: LD_INT 0
5827: ST_TO_ADDR
// sReset := false ;
5828: LD_ADDR_EXP 62
5832: PUSH
5833: LD_INT 0
5835: ST_TO_ADDR
// sSun := false ;
5836: LD_ADDR_EXP 63
5840: PUSH
5841: LD_INT 0
5843: ST_TO_ADDR
// sTiger := false ;
5844: LD_ADDR_EXP 59
5848: PUSH
5849: LD_INT 0
5851: ST_TO_ADDR
// sBomb := false ;
5852: LD_ADDR_EXP 60
5856: PUSH
5857: LD_INT 0
5859: ST_TO_ADDR
// sWound := false ;
5860: LD_ADDR_EXP 68
5864: PUSH
5865: LD_INT 0
5867: ST_TO_ADDR
// sBetray := false ;
5868: LD_ADDR_EXP 72
5872: PUSH
5873: LD_INT 0
5875: ST_TO_ADDR
// sContamin := false ;
5876: LD_ADDR_EXP 73
5880: PUSH
5881: LD_INT 0
5883: ST_TO_ADDR
// sOil := false ;
5884: LD_ADDR_EXP 75
5888: PUSH
5889: LD_INT 0
5891: ST_TO_ADDR
// sStu := false ;
5892: LD_ADDR_EXP 79
5896: PUSH
5897: LD_INT 0
5899: ST_TO_ADDR
// sBazooka := false ;
5900: LD_ADDR_EXP 82
5904: PUSH
5905: LD_INT 0
5907: ST_TO_ADDR
// sMortar := false ;
5908: LD_ADDR_EXP 83
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// sRanger := false ;
5916: LD_ADDR_EXP 93
5920: PUSH
5921: LD_INT 0
5923: ST_TO_ADDR
// sComputer := false ;
5924: LD_ADDR_EXP 94
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// s30 := false ;
5932: LD_ADDR_EXP 95
5936: PUSH
5937: LD_INT 0
5939: ST_TO_ADDR
// s60 := false ;
5940: LD_ADDR_EXP 96
5944: PUSH
5945: LD_INT 0
5947: ST_TO_ADDR
// end ;
5948: LD_VAR 0 1
5952: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5953: LD_INT 0
5955: PPUSH
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
// result := [ ] ;
5962: LD_ADDR_VAR 0 2
5966: PUSH
5967: EMPTY
5968: ST_TO_ADDR
// if campaign_id = 1 then
5969: LD_OWVAR 69
5973: PUSH
5974: LD_INT 1
5976: EQUAL
5977: IFFALSE 9143
// begin case mission_number of 1 :
5979: LD_OWVAR 70
5983: PUSH
5984: LD_INT 1
5986: DOUBLE
5987: EQUAL
5988: IFTRUE 5992
5990: GO 6068
5992: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: LD_INT 11
6006: PUSH
6007: LD_INT 12
6009: PUSH
6010: LD_INT 15
6012: PUSH
6013: LD_INT 16
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 23
6021: PUSH
6022: LD_INT 26
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 101
6038: PUSH
6039: LD_INT 102
6041: PUSH
6042: LD_INT 106
6044: PUSH
6045: LD_INT 116
6047: PUSH
6048: LD_INT 117
6050: PUSH
6051: LD_INT 118
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: ST_TO_ADDR
6066: GO 9141
6068: LD_INT 2
6070: DOUBLE
6071: EQUAL
6072: IFTRUE 6076
6074: GO 6160
6076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: LD_INT 4
6087: PUSH
6088: LD_INT 11
6090: PUSH
6091: LD_INT 12
6093: PUSH
6094: LD_INT 15
6096: PUSH
6097: LD_INT 16
6099: PUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 23
6105: PUSH
6106: LD_INT 26
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 101
6122: PUSH
6123: LD_INT 102
6125: PUSH
6126: LD_INT 105
6128: PUSH
6129: LD_INT 106
6131: PUSH
6132: LD_INT 108
6134: PUSH
6135: LD_INT 116
6137: PUSH
6138: LD_INT 117
6140: PUSH
6141: LD_INT 118
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: ST_TO_ADDR
6158: GO 9141
6160: LD_INT 3
6162: DOUBLE
6163: EQUAL
6164: IFTRUE 6168
6166: GO 6256
6168: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6169: LD_ADDR_VAR 0 2
6173: PUSH
6174: LD_INT 2
6176: PUSH
6177: LD_INT 4
6179: PUSH
6180: LD_INT 5
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 15
6191: PUSH
6192: LD_INT 16
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_INT 26
6200: PUSH
6201: LD_INT 36
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 101
6218: PUSH
6219: LD_INT 102
6221: PUSH
6222: LD_INT 105
6224: PUSH
6225: LD_INT 106
6227: PUSH
6228: LD_INT 108
6230: PUSH
6231: LD_INT 116
6233: PUSH
6234: LD_INT 117
6236: PUSH
6237: LD_INT 118
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
6254: GO 9141
6256: LD_INT 4
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6360
6264: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: LD_INT 4
6275: PUSH
6276: LD_INT 5
6278: PUSH
6279: LD_INT 8
6281: PUSH
6282: LD_INT 11
6284: PUSH
6285: LD_INT 12
6287: PUSH
6288: LD_INT 15
6290: PUSH
6291: LD_INT 16
6293: PUSH
6294: LD_INT 22
6296: PUSH
6297: LD_INT 23
6299: PUSH
6300: LD_INT 26
6302: PUSH
6303: LD_INT 36
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 101
6322: PUSH
6323: LD_INT 102
6325: PUSH
6326: LD_INT 105
6328: PUSH
6329: LD_INT 106
6331: PUSH
6332: LD_INT 108
6334: PUSH
6335: LD_INT 116
6337: PUSH
6338: LD_INT 117
6340: PUSH
6341: LD_INT 118
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 9141
6360: LD_INT 5
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6480
6368: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 4
6379: PUSH
6380: LD_INT 5
6382: PUSH
6383: LD_INT 6
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 12
6394: PUSH
6395: LD_INT 15
6397: PUSH
6398: LD_INT 16
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 23
6406: PUSH
6407: LD_INT 25
6409: PUSH
6410: LD_INT 26
6412: PUSH
6413: LD_INT 36
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 101
6434: PUSH
6435: LD_INT 102
6437: PUSH
6438: LD_INT 105
6440: PUSH
6441: LD_INT 106
6443: PUSH
6444: LD_INT 108
6446: PUSH
6447: LD_INT 109
6449: PUSH
6450: LD_INT 112
6452: PUSH
6453: LD_INT 116
6455: PUSH
6456: LD_INT 117
6458: PUSH
6459: LD_INT 118
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: ST_TO_ADDR
6478: GO 9141
6480: LD_INT 6
6482: DOUBLE
6483: EQUAL
6484: IFTRUE 6488
6486: GO 6620
6488: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_INT 2
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: LD_INT 6
6505: PUSH
6506: LD_INT 8
6508: PUSH
6509: LD_INT 11
6511: PUSH
6512: LD_INT 12
6514: PUSH
6515: LD_INT 15
6517: PUSH
6518: LD_INT 16
6520: PUSH
6521: LD_INT 20
6523: PUSH
6524: LD_INT 21
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 23
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 31
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: LD_INT 36
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 101
6574: PUSH
6575: LD_INT 102
6577: PUSH
6578: LD_INT 105
6580: PUSH
6581: LD_INT 106
6583: PUSH
6584: LD_INT 108
6586: PUSH
6587: LD_INT 109
6589: PUSH
6590: LD_INT 112
6592: PUSH
6593: LD_INT 116
6595: PUSH
6596: LD_INT 117
6598: PUSH
6599: LD_INT 118
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: ST_TO_ADDR
6618: GO 9141
6620: LD_INT 7
6622: DOUBLE
6623: EQUAL
6624: IFTRUE 6628
6626: GO 6740
6628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6629: LD_ADDR_VAR 0 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 4
6639: PUSH
6640: LD_INT 5
6642: PUSH
6643: LD_INT 7
6645: PUSH
6646: LD_INT 11
6648: PUSH
6649: LD_INT 12
6651: PUSH
6652: LD_INT 15
6654: PUSH
6655: LD_INT 16
6657: PUSH
6658: LD_INT 20
6660: PUSH
6661: LD_INT 21
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_INT 23
6669: PUSH
6670: LD_INT 25
6672: PUSH
6673: LD_INT 26
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 101
6694: PUSH
6695: LD_INT 102
6697: PUSH
6698: LD_INT 103
6700: PUSH
6701: LD_INT 105
6703: PUSH
6704: LD_INT 106
6706: PUSH
6707: LD_INT 108
6709: PUSH
6710: LD_INT 112
6712: PUSH
6713: LD_INT 116
6715: PUSH
6716: LD_INT 117
6718: PUSH
6719: LD_INT 118
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: ST_TO_ADDR
6738: GO 9141
6740: LD_INT 8
6742: DOUBLE
6743: EQUAL
6744: IFTRUE 6748
6746: GO 6888
6748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6749: LD_ADDR_VAR 0 2
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: LD_INT 4
6759: PUSH
6760: LD_INT 5
6762: PUSH
6763: LD_INT 6
6765: PUSH
6766: LD_INT 7
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 15
6780: PUSH
6781: LD_INT 16
6783: PUSH
6784: LD_INT 20
6786: PUSH
6787: LD_INT 21
6789: PUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 23
6795: PUSH
6796: LD_INT 25
6798: PUSH
6799: LD_INT 26
6801: PUSH
6802: LD_INT 30
6804: PUSH
6805: LD_INT 31
6807: PUSH
6808: LD_INT 32
6810: PUSH
6811: LD_INT 36
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 101
6838: PUSH
6839: LD_INT 102
6841: PUSH
6842: LD_INT 103
6844: PUSH
6845: LD_INT 105
6847: PUSH
6848: LD_INT 106
6850: PUSH
6851: LD_INT 108
6853: PUSH
6854: LD_INT 109
6856: PUSH
6857: LD_INT 112
6859: PUSH
6860: LD_INT 116
6862: PUSH
6863: LD_INT 117
6865: PUSH
6866: LD_INT 118
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: ST_TO_ADDR
6886: GO 9141
6888: LD_INT 9
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 7044
6896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6897: LD_ADDR_VAR 0 2
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: LD_INT 4
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 6
6913: PUSH
6914: LD_INT 7
6916: PUSH
6917: LD_INT 8
6919: PUSH
6920: LD_INT 11
6922: PUSH
6923: LD_INT 12
6925: PUSH
6926: LD_INT 15
6928: PUSH
6929: LD_INT 16
6931: PUSH
6932: LD_INT 20
6934: PUSH
6935: LD_INT 21
6937: PUSH
6938: LD_INT 22
6940: PUSH
6941: LD_INT 23
6943: PUSH
6944: LD_INT 25
6946: PUSH
6947: LD_INT 26
6949: PUSH
6950: LD_INT 28
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 31
6958: PUSH
6959: LD_INT 32
6961: PUSH
6962: LD_INT 36
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 101
6990: PUSH
6991: LD_INT 102
6993: PUSH
6994: LD_INT 103
6996: PUSH
6997: LD_INT 105
6999: PUSH
7000: LD_INT 106
7002: PUSH
7003: LD_INT 108
7005: PUSH
7006: LD_INT 109
7008: PUSH
7009: LD_INT 112
7011: PUSH
7012: LD_INT 114
7014: PUSH
7015: LD_INT 116
7017: PUSH
7018: LD_INT 117
7020: PUSH
7021: LD_INT 118
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: ST_TO_ADDR
7042: GO 9141
7044: LD_INT 10
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7248
7052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 4
7063: PUSH
7064: LD_INT 5
7066: PUSH
7067: LD_INT 6
7069: PUSH
7070: LD_INT 7
7072: PUSH
7073: LD_INT 8
7075: PUSH
7076: LD_INT 9
7078: PUSH
7079: LD_INT 10
7081: PUSH
7082: LD_INT 11
7084: PUSH
7085: LD_INT 12
7087: PUSH
7088: LD_INT 13
7090: PUSH
7091: LD_INT 14
7093: PUSH
7094: LD_INT 15
7096: PUSH
7097: LD_INT 16
7099: PUSH
7100: LD_INT 17
7102: PUSH
7103: LD_INT 18
7105: PUSH
7106: LD_INT 19
7108: PUSH
7109: LD_INT 20
7111: PUSH
7112: LD_INT 21
7114: PUSH
7115: LD_INT 22
7117: PUSH
7118: LD_INT 23
7120: PUSH
7121: LD_INT 24
7123: PUSH
7124: LD_INT 25
7126: PUSH
7127: LD_INT 26
7129: PUSH
7130: LD_INT 28
7132: PUSH
7133: LD_INT 30
7135: PUSH
7136: LD_INT 31
7138: PUSH
7139: LD_INT 32
7141: PUSH
7142: LD_INT 36
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 101
7178: PUSH
7179: LD_INT 102
7181: PUSH
7182: LD_INT 103
7184: PUSH
7185: LD_INT 104
7187: PUSH
7188: LD_INT 105
7190: PUSH
7191: LD_INT 106
7193: PUSH
7194: LD_INT 107
7196: PUSH
7197: LD_INT 108
7199: PUSH
7200: LD_INT 109
7202: PUSH
7203: LD_INT 110
7205: PUSH
7206: LD_INT 111
7208: PUSH
7209: LD_INT 112
7211: PUSH
7212: LD_INT 114
7214: PUSH
7215: LD_INT 116
7217: PUSH
7218: LD_INT 117
7220: PUSH
7221: LD_INT 118
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 9141
7248: LD_INT 11
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7460
7256: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: LD_INT 6
7276: PUSH
7277: LD_INT 7
7279: PUSH
7280: LD_INT 8
7282: PUSH
7283: LD_INT 9
7285: PUSH
7286: LD_INT 10
7288: PUSH
7289: LD_INT 11
7291: PUSH
7292: LD_INT 12
7294: PUSH
7295: LD_INT 13
7297: PUSH
7298: LD_INT 14
7300: PUSH
7301: LD_INT 15
7303: PUSH
7304: LD_INT 16
7306: PUSH
7307: LD_INT 17
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 19
7315: PUSH
7316: LD_INT 20
7318: PUSH
7319: LD_INT 21
7321: PUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 23
7327: PUSH
7328: LD_INT 24
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 26
7336: PUSH
7337: LD_INT 28
7339: PUSH
7340: LD_INT 30
7342: PUSH
7343: LD_INT 31
7345: PUSH
7346: LD_INT 32
7348: PUSH
7349: LD_INT 34
7351: PUSH
7352: LD_INT 36
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 101
7390: PUSH
7391: LD_INT 102
7393: PUSH
7394: LD_INT 103
7396: PUSH
7397: LD_INT 104
7399: PUSH
7400: LD_INT 105
7402: PUSH
7403: LD_INT 106
7405: PUSH
7406: LD_INT 107
7408: PUSH
7409: LD_INT 108
7411: PUSH
7412: LD_INT 109
7414: PUSH
7415: LD_INT 110
7417: PUSH
7418: LD_INT 111
7420: PUSH
7421: LD_INT 112
7423: PUSH
7424: LD_INT 114
7426: PUSH
7427: LD_INT 116
7429: PUSH
7430: LD_INT 117
7432: PUSH
7433: LD_INT 118
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: ST_TO_ADDR
7458: GO 9141
7460: LD_INT 12
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7688
7468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7469: LD_ADDR_VAR 0 2
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 4
7485: PUSH
7486: LD_INT 5
7488: PUSH
7489: LD_INT 6
7491: PUSH
7492: LD_INT 7
7494: PUSH
7495: LD_INT 8
7497: PUSH
7498: LD_INT 9
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 11
7506: PUSH
7507: LD_INT 12
7509: PUSH
7510: LD_INT 13
7512: PUSH
7513: LD_INT 14
7515: PUSH
7516: LD_INT 15
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: LD_INT 17
7524: PUSH
7525: LD_INT 18
7527: PUSH
7528: LD_INT 19
7530: PUSH
7531: LD_INT 20
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 23
7542: PUSH
7543: LD_INT 24
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 26
7551: PUSH
7552: LD_INT 27
7554: PUSH
7555: LD_INT 28
7557: PUSH
7558: LD_INT 30
7560: PUSH
7561: LD_INT 31
7563: PUSH
7564: LD_INT 32
7566: PUSH
7567: LD_INT 33
7569: PUSH
7570: LD_INT 34
7572: PUSH
7573: LD_INT 36
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 101
7614: PUSH
7615: LD_INT 102
7617: PUSH
7618: LD_INT 103
7620: PUSH
7621: LD_INT 104
7623: PUSH
7624: LD_INT 105
7626: PUSH
7627: LD_INT 106
7629: PUSH
7630: LD_INT 107
7632: PUSH
7633: LD_INT 108
7635: PUSH
7636: LD_INT 109
7638: PUSH
7639: LD_INT 110
7641: PUSH
7642: LD_INT 111
7644: PUSH
7645: LD_INT 112
7647: PUSH
7648: LD_INT 113
7650: PUSH
7651: LD_INT 114
7653: PUSH
7654: LD_INT 116
7656: PUSH
7657: LD_INT 117
7659: PUSH
7660: LD_INT 118
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 9141
7688: LD_INT 13
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7904
7696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 8
7719: PUSH
7720: LD_INT 9
7722: PUSH
7723: LD_INT 10
7725: PUSH
7726: LD_INT 11
7728: PUSH
7729: LD_INT 12
7731: PUSH
7732: LD_INT 14
7734: PUSH
7735: LD_INT 15
7737: PUSH
7738: LD_INT 16
7740: PUSH
7741: LD_INT 17
7743: PUSH
7744: LD_INT 18
7746: PUSH
7747: LD_INT 19
7749: PUSH
7750: LD_INT 20
7752: PUSH
7753: LD_INT 21
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 23
7761: PUSH
7762: LD_INT 24
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 26
7770: PUSH
7771: LD_INT 27
7773: PUSH
7774: LD_INT 28
7776: PUSH
7777: LD_INT 30
7779: PUSH
7780: LD_INT 31
7782: PUSH
7783: LD_INT 32
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 34
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 101
7830: PUSH
7831: LD_INT 102
7833: PUSH
7834: LD_INT 103
7836: PUSH
7837: LD_INT 104
7839: PUSH
7840: LD_INT 105
7842: PUSH
7843: LD_INT 106
7845: PUSH
7846: LD_INT 107
7848: PUSH
7849: LD_INT 108
7851: PUSH
7852: LD_INT 109
7854: PUSH
7855: LD_INT 110
7857: PUSH
7858: LD_INT 111
7860: PUSH
7861: LD_INT 112
7863: PUSH
7864: LD_INT 113
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: LD_INT 116
7872: PUSH
7873: LD_INT 117
7875: PUSH
7876: LD_INT 118
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: ST_TO_ADDR
7902: GO 9141
7904: LD_INT 14
7906: DOUBLE
7907: EQUAL
7908: IFTRUE 7912
7910: GO 8136
7912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 4
7929: PUSH
7930: LD_INT 5
7932: PUSH
7933: LD_INT 6
7935: PUSH
7936: LD_INT 7
7938: PUSH
7939: LD_INT 8
7941: PUSH
7942: LD_INT 9
7944: PUSH
7945: LD_INT 10
7947: PUSH
7948: LD_INT 11
7950: PUSH
7951: LD_INT 12
7953: PUSH
7954: LD_INT 13
7956: PUSH
7957: LD_INT 14
7959: PUSH
7960: LD_INT 15
7962: PUSH
7963: LD_INT 16
7965: PUSH
7966: LD_INT 17
7968: PUSH
7969: LD_INT 18
7971: PUSH
7972: LD_INT 19
7974: PUSH
7975: LD_INT 20
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 23
7986: PUSH
7987: LD_INT 24
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 26
7995: PUSH
7996: LD_INT 27
7998: PUSH
7999: LD_INT 28
8001: PUSH
8002: LD_INT 29
8004: PUSH
8005: LD_INT 30
8007: PUSH
8008: LD_INT 31
8010: PUSH
8011: LD_INT 32
8013: PUSH
8014: LD_INT 33
8016: PUSH
8017: LD_INT 34
8019: PUSH
8020: LD_INT 36
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 101
8062: PUSH
8063: LD_INT 102
8065: PUSH
8066: LD_INT 103
8068: PUSH
8069: LD_INT 104
8071: PUSH
8072: LD_INT 105
8074: PUSH
8075: LD_INT 106
8077: PUSH
8078: LD_INT 107
8080: PUSH
8081: LD_INT 108
8083: PUSH
8084: LD_INT 109
8086: PUSH
8087: LD_INT 110
8089: PUSH
8090: LD_INT 111
8092: PUSH
8093: LD_INT 112
8095: PUSH
8096: LD_INT 113
8098: PUSH
8099: LD_INT 114
8101: PUSH
8102: LD_INT 116
8104: PUSH
8105: LD_INT 117
8107: PUSH
8108: LD_INT 118
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: ST_TO_ADDR
8134: GO 9141
8136: LD_INT 15
8138: DOUBLE
8139: EQUAL
8140: IFTRUE 8144
8142: GO 8368
8144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8145: LD_ADDR_VAR 0 2
8149: PUSH
8150: LD_INT 1
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 6
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: LD_INT 8
8173: PUSH
8174: LD_INT 9
8176: PUSH
8177: LD_INT 10
8179: PUSH
8180: LD_INT 11
8182: PUSH
8183: LD_INT 12
8185: PUSH
8186: LD_INT 13
8188: PUSH
8189: LD_INT 14
8191: PUSH
8192: LD_INT 15
8194: PUSH
8195: LD_INT 16
8197: PUSH
8198: LD_INT 17
8200: PUSH
8201: LD_INT 18
8203: PUSH
8204: LD_INT 19
8206: PUSH
8207: LD_INT 20
8209: PUSH
8210: LD_INT 21
8212: PUSH
8213: LD_INT 22
8215: PUSH
8216: LD_INT 23
8218: PUSH
8219: LD_INT 24
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 26
8227: PUSH
8228: LD_INT 27
8230: PUSH
8231: LD_INT 28
8233: PUSH
8234: LD_INT 29
8236: PUSH
8237: LD_INT 30
8239: PUSH
8240: LD_INT 31
8242: PUSH
8243: LD_INT 32
8245: PUSH
8246: LD_INT 33
8248: PUSH
8249: LD_INT 34
8251: PUSH
8252: LD_INT 36
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 101
8294: PUSH
8295: LD_INT 102
8297: PUSH
8298: LD_INT 103
8300: PUSH
8301: LD_INT 104
8303: PUSH
8304: LD_INT 105
8306: PUSH
8307: LD_INT 106
8309: PUSH
8310: LD_INT 107
8312: PUSH
8313: LD_INT 108
8315: PUSH
8316: LD_INT 109
8318: PUSH
8319: LD_INT 110
8321: PUSH
8322: LD_INT 111
8324: PUSH
8325: LD_INT 112
8327: PUSH
8328: LD_INT 113
8330: PUSH
8331: LD_INT 114
8333: PUSH
8334: LD_INT 116
8336: PUSH
8337: LD_INT 117
8339: PUSH
8340: LD_INT 118
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: ST_TO_ADDR
8366: GO 9141
8368: LD_INT 16
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8512
8376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8377: LD_ADDR_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 4
8387: PUSH
8388: LD_INT 5
8390: PUSH
8391: LD_INT 7
8393: PUSH
8394: LD_INT 11
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: LD_INT 15
8402: PUSH
8403: LD_INT 16
8405: PUSH
8406: LD_INT 20
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 22
8414: PUSH
8415: LD_INT 23
8417: PUSH
8418: LD_INT 25
8420: PUSH
8421: LD_INT 26
8423: PUSH
8424: LD_INT 30
8426: PUSH
8427: LD_INT 31
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: LD_INT 33
8435: PUSH
8436: LD_INT 34
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 101
8462: PUSH
8463: LD_INT 102
8465: PUSH
8466: LD_INT 103
8468: PUSH
8469: LD_INT 106
8471: PUSH
8472: LD_INT 108
8474: PUSH
8475: LD_INT 112
8477: PUSH
8478: LD_INT 113
8480: PUSH
8481: LD_INT 114
8483: PUSH
8484: LD_INT 116
8486: PUSH
8487: LD_INT 117
8489: PUSH
8490: LD_INT 118
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: ST_TO_ADDR
8510: GO 9141
8512: LD_INT 17
8514: DOUBLE
8515: EQUAL
8516: IFTRUE 8520
8518: GO 8744
8520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: LD_INT 4
8537: PUSH
8538: LD_INT 5
8540: PUSH
8541: LD_INT 6
8543: PUSH
8544: LD_INT 7
8546: PUSH
8547: LD_INT 8
8549: PUSH
8550: LD_INT 9
8552: PUSH
8553: LD_INT 10
8555: PUSH
8556: LD_INT 11
8558: PUSH
8559: LD_INT 12
8561: PUSH
8562: LD_INT 13
8564: PUSH
8565: LD_INT 14
8567: PUSH
8568: LD_INT 15
8570: PUSH
8571: LD_INT 16
8573: PUSH
8574: LD_INT 17
8576: PUSH
8577: LD_INT 18
8579: PUSH
8580: LD_INT 19
8582: PUSH
8583: LD_INT 20
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 23
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 26
8603: PUSH
8604: LD_INT 27
8606: PUSH
8607: LD_INT 28
8609: PUSH
8610: LD_INT 29
8612: PUSH
8613: LD_INT 30
8615: PUSH
8616: LD_INT 31
8618: PUSH
8619: LD_INT 32
8621: PUSH
8622: LD_INT 33
8624: PUSH
8625: LD_INT 34
8627: PUSH
8628: LD_INT 36
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 101
8670: PUSH
8671: LD_INT 102
8673: PUSH
8674: LD_INT 103
8676: PUSH
8677: LD_INT 104
8679: PUSH
8680: LD_INT 105
8682: PUSH
8683: LD_INT 106
8685: PUSH
8686: LD_INT 107
8688: PUSH
8689: LD_INT 108
8691: PUSH
8692: LD_INT 109
8694: PUSH
8695: LD_INT 110
8697: PUSH
8698: LD_INT 111
8700: PUSH
8701: LD_INT 112
8703: PUSH
8704: LD_INT 113
8706: PUSH
8707: LD_INT 114
8709: PUSH
8710: LD_INT 116
8712: PUSH
8713: LD_INT 117
8715: PUSH
8716: LD_INT 118
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: ST_TO_ADDR
8742: GO 9141
8744: LD_INT 18
8746: DOUBLE
8747: EQUAL
8748: IFTRUE 8752
8750: GO 8900
8752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8753: LD_ADDR_VAR 0 2
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: LD_INT 4
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 7
8769: PUSH
8770: LD_INT 11
8772: PUSH
8773: LD_INT 12
8775: PUSH
8776: LD_INT 15
8778: PUSH
8779: LD_INT 16
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 26
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 31
8805: PUSH
8806: LD_INT 32
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 34
8814: PUSH
8815: LD_INT 35
8817: PUSH
8818: LD_INT 36
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 101
8846: PUSH
8847: LD_INT 102
8849: PUSH
8850: LD_INT 103
8852: PUSH
8853: LD_INT 106
8855: PUSH
8856: LD_INT 108
8858: PUSH
8859: LD_INT 112
8861: PUSH
8862: LD_INT 113
8864: PUSH
8865: LD_INT 114
8867: PUSH
8868: LD_INT 115
8870: PUSH
8871: LD_INT 116
8873: PUSH
8874: LD_INT 117
8876: PUSH
8877: LD_INT 118
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: ST_TO_ADDR
8898: GO 9141
8900: LD_INT 19
8902: DOUBLE
8903: EQUAL
8904: IFTRUE 8908
8906: GO 9140
8908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: LD_INT 2
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 4
8925: PUSH
8926: LD_INT 5
8928: PUSH
8929: LD_INT 6
8931: PUSH
8932: LD_INT 7
8934: PUSH
8935: LD_INT 8
8937: PUSH
8938: LD_INT 9
8940: PUSH
8941: LD_INT 10
8943: PUSH
8944: LD_INT 11
8946: PUSH
8947: LD_INT 12
8949: PUSH
8950: LD_INT 13
8952: PUSH
8953: LD_INT 14
8955: PUSH
8956: LD_INT 15
8958: PUSH
8959: LD_INT 16
8961: PUSH
8962: LD_INT 17
8964: PUSH
8965: LD_INT 18
8967: PUSH
8968: LD_INT 19
8970: PUSH
8971: LD_INT 20
8973: PUSH
8974: LD_INT 21
8976: PUSH
8977: LD_INT 22
8979: PUSH
8980: LD_INT 23
8982: PUSH
8983: LD_INT 24
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 27
8994: PUSH
8995: LD_INT 28
8997: PUSH
8998: LD_INT 29
9000: PUSH
9001: LD_INT 30
9003: PUSH
9004: LD_INT 31
9006: PUSH
9007: LD_INT 32
9009: PUSH
9010: LD_INT 33
9012: PUSH
9013: LD_INT 34
9015: PUSH
9016: LD_INT 35
9018: PUSH
9019: LD_INT 36
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 101
9062: PUSH
9063: LD_INT 102
9065: PUSH
9066: LD_INT 103
9068: PUSH
9069: LD_INT 104
9071: PUSH
9072: LD_INT 105
9074: PUSH
9075: LD_INT 106
9077: PUSH
9078: LD_INT 107
9080: PUSH
9081: LD_INT 108
9083: PUSH
9084: LD_INT 109
9086: PUSH
9087: LD_INT 110
9089: PUSH
9090: LD_INT 111
9092: PUSH
9093: LD_INT 112
9095: PUSH
9096: LD_INT 113
9098: PUSH
9099: LD_INT 114
9101: PUSH
9102: LD_INT 115
9104: PUSH
9105: LD_INT 116
9107: PUSH
9108: LD_INT 117
9110: PUSH
9111: LD_INT 118
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: ST_TO_ADDR
9138: GO 9141
9140: POP
// end else
9141: GO 9372
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9143: LD_ADDR_VAR 0 2
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: LD_INT 2
9153: PUSH
9154: LD_INT 3
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: LD_INT 5
9162: PUSH
9163: LD_INT 6
9165: PUSH
9166: LD_INT 7
9168: PUSH
9169: LD_INT 8
9171: PUSH
9172: LD_INT 9
9174: PUSH
9175: LD_INT 10
9177: PUSH
9178: LD_INT 11
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: LD_INT 13
9186: PUSH
9187: LD_INT 14
9189: PUSH
9190: LD_INT 15
9192: PUSH
9193: LD_INT 16
9195: PUSH
9196: LD_INT 17
9198: PUSH
9199: LD_INT 18
9201: PUSH
9202: LD_INT 19
9204: PUSH
9205: LD_INT 20
9207: PUSH
9208: LD_INT 21
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 23
9216: PUSH
9217: LD_INT 24
9219: PUSH
9220: LD_INT 25
9222: PUSH
9223: LD_INT 26
9225: PUSH
9226: LD_INT 27
9228: PUSH
9229: LD_INT 28
9231: PUSH
9232: LD_INT 29
9234: PUSH
9235: LD_INT 30
9237: PUSH
9238: LD_INT 31
9240: PUSH
9241: LD_INT 32
9243: PUSH
9244: LD_INT 33
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 35
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 101
9296: PUSH
9297: LD_INT 102
9299: PUSH
9300: LD_INT 103
9302: PUSH
9303: LD_INT 104
9305: PUSH
9306: LD_INT 105
9308: PUSH
9309: LD_INT 106
9311: PUSH
9312: LD_INT 107
9314: PUSH
9315: LD_INT 108
9317: PUSH
9318: LD_INT 109
9320: PUSH
9321: LD_INT 110
9323: PUSH
9324: LD_INT 111
9326: PUSH
9327: LD_INT 112
9329: PUSH
9330: LD_INT 113
9332: PUSH
9333: LD_INT 114
9335: PUSH
9336: LD_INT 115
9338: PUSH
9339: LD_INT 116
9341: PUSH
9342: LD_INT 117
9344: PUSH
9345: LD_INT 118
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: ST_TO_ADDR
// if result then
9372: LD_VAR 0 2
9376: IFFALSE 10162
// begin normal :=  ;
9378: LD_ADDR_VAR 0 5
9382: PUSH
9383: LD_STRING 
9385: ST_TO_ADDR
// hardcore :=  ;
9386: LD_ADDR_VAR 0 6
9390: PUSH
9391: LD_STRING 
9393: ST_TO_ADDR
// active :=  ;
9394: LD_ADDR_VAR 0 7
9398: PUSH
9399: LD_STRING 
9401: ST_TO_ADDR
// for i = 1 to normalCounter do
9402: LD_ADDR_VAR 0 8
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_EXP 41
9416: PUSH
9417: FOR_TO
9418: IFFALSE 9519
// begin tmp := 0 ;
9420: LD_ADDR_VAR 0 3
9424: PUSH
9425: LD_STRING 0
9427: ST_TO_ADDR
// if result [ 1 ] then
9428: LD_VAR 0 2
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: IFFALSE 9501
// if result [ 1 ] [ 1 ] = i then
9438: LD_VAR 0 2
9442: PUSH
9443: LD_INT 1
9445: ARRAY
9446: PUSH
9447: LD_INT 1
9449: ARRAY
9450: PUSH
9451: LD_VAR 0 8
9455: EQUAL
9456: IFFALSE 9501
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9458: LD_ADDR_VAR 0 2
9462: PUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: CALL_OW 3
9487: PPUSH
9488: CALL_OW 1
9492: ST_TO_ADDR
// tmp := 1 ;
9493: LD_ADDR_VAR 0 3
9497: PUSH
9498: LD_STRING 1
9500: ST_TO_ADDR
// end ; normal := normal & tmp ;
9501: LD_ADDR_VAR 0 5
9505: PUSH
9506: LD_VAR 0 5
9510: PUSH
9511: LD_VAR 0 3
9515: STR
9516: ST_TO_ADDR
// end ;
9517: GO 9417
9519: POP
9520: POP
// for i = 1 to hardcoreCounter do
9521: LD_ADDR_VAR 0 8
9525: PUSH
9526: DOUBLE
9527: LD_INT 1
9529: DEC
9530: ST_TO_ADDR
9531: LD_EXP 42
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9642
// begin tmp := 0 ;
9539: LD_ADDR_VAR 0 3
9543: PUSH
9544: LD_STRING 0
9546: ST_TO_ADDR
// if result [ 2 ] then
9547: LD_VAR 0 2
9551: PUSH
9552: LD_INT 2
9554: ARRAY
9555: IFFALSE 9624
// if result [ 2 ] [ 1 ] = 100 + i then
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 2
9564: ARRAY
9565: PUSH
9566: LD_INT 1
9568: ARRAY
9569: PUSH
9570: LD_INT 100
9572: PUSH
9573: LD_VAR 0 8
9577: PLUS
9578: EQUAL
9579: IFFALSE 9624
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9581: LD_ADDR_VAR 0 2
9585: PUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: LD_INT 2
9593: PPUSH
9594: LD_VAR 0 2
9598: PUSH
9599: LD_INT 2
9601: ARRAY
9602: PPUSH
9603: LD_INT 1
9605: PPUSH
9606: CALL_OW 3
9610: PPUSH
9611: CALL_OW 1
9615: ST_TO_ADDR
// tmp := 1 ;
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: LD_STRING 1
9623: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9624: LD_ADDR_VAR 0 6
9628: PUSH
9629: LD_VAR 0 6
9633: PUSH
9634: LD_VAR 0 3
9638: STR
9639: ST_TO_ADDR
// end ;
9640: GO 9536
9642: POP
9643: POP
// if isGameLoad then
9644: LD_VAR 0 1
9648: IFFALSE 10123
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9650: LD_ADDR_VAR 0 4
9654: PUSH
9655: LD_EXP 45
9659: PUSH
9660: LD_EXP 44
9664: PUSH
9665: LD_EXP 46
9669: PUSH
9670: LD_EXP 43
9674: PUSH
9675: LD_EXP 47
9679: PUSH
9680: LD_EXP 48
9684: PUSH
9685: LD_EXP 49
9689: PUSH
9690: LD_EXP 50
9694: PUSH
9695: LD_EXP 51
9699: PUSH
9700: LD_EXP 52
9704: PUSH
9705: LD_EXP 53
9709: PUSH
9710: LD_EXP 54
9714: PUSH
9715: LD_EXP 55
9719: PUSH
9720: LD_EXP 56
9724: PUSH
9725: LD_EXP 64
9729: PUSH
9730: LD_EXP 65
9734: PUSH
9735: LD_EXP 66
9739: PUSH
9740: LD_EXP 67
9744: PUSH
9745: LD_EXP 69
9749: PUSH
9750: LD_EXP 70
9754: PUSH
9755: LD_EXP 71
9759: PUSH
9760: LD_EXP 74
9764: PUSH
9765: LD_EXP 76
9769: PUSH
9770: LD_EXP 77
9774: PUSH
9775: LD_EXP 78
9779: PUSH
9780: LD_EXP 80
9784: PUSH
9785: LD_EXP 81
9789: PUSH
9790: LD_EXP 84
9794: PUSH
9795: LD_EXP 85
9799: PUSH
9800: LD_EXP 86
9804: PUSH
9805: LD_EXP 87
9809: PUSH
9810: LD_EXP 88
9814: PUSH
9815: LD_EXP 89
9819: PUSH
9820: LD_EXP 90
9824: PUSH
9825: LD_EXP 91
9829: PUSH
9830: LD_EXP 92
9834: PUSH
9835: LD_EXP 57
9839: PUSH
9840: LD_EXP 58
9844: PUSH
9845: LD_EXP 61
9849: PUSH
9850: LD_EXP 62
9854: PUSH
9855: LD_EXP 63
9859: PUSH
9860: LD_EXP 59
9864: PUSH
9865: LD_EXP 60
9869: PUSH
9870: LD_EXP 68
9874: PUSH
9875: LD_EXP 72
9879: PUSH
9880: LD_EXP 73
9884: PUSH
9885: LD_EXP 75
9889: PUSH
9890: LD_EXP 79
9894: PUSH
9895: LD_EXP 82
9899: PUSH
9900: LD_EXP 83
9904: PUSH
9905: LD_EXP 93
9909: PUSH
9910: LD_EXP 94
9914: PUSH
9915: LD_EXP 95
9919: PUSH
9920: LD_EXP 96
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: ST_TO_ADDR
// tmp :=  ;
9981: LD_ADDR_VAR 0 3
9985: PUSH
9986: LD_STRING 
9988: ST_TO_ADDR
// for i = 1 to normalCounter do
9989: LD_ADDR_VAR 0 8
9993: PUSH
9994: DOUBLE
9995: LD_INT 1
9997: DEC
9998: ST_TO_ADDR
9999: LD_EXP 41
10003: PUSH
10004: FOR_TO
10005: IFFALSE 10041
// begin if flags [ i ] then
10007: LD_VAR 0 4
10011: PUSH
10012: LD_VAR 0 8
10016: ARRAY
10017: IFFALSE 10039
// tmp := tmp & i & ; ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_VAR 0 3
10028: PUSH
10029: LD_VAR 0 8
10033: STR
10034: PUSH
10035: LD_STRING ;
10037: STR
10038: ST_TO_ADDR
// end ;
10039: GO 10004
10041: POP
10042: POP
// for i = 1 to hardcoreCounter do
10043: LD_ADDR_VAR 0 8
10047: PUSH
10048: DOUBLE
10049: LD_INT 1
10051: DEC
10052: ST_TO_ADDR
10053: LD_EXP 42
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10105
// begin if flags [ normalCounter + i ] then
10061: LD_VAR 0 4
10065: PUSH
10066: LD_EXP 41
10070: PUSH
10071: LD_VAR 0 8
10075: PLUS
10076: ARRAY
10077: IFFALSE 10103
// tmp := tmp & ( 100 + i ) & ; ;
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_VAR 0 3
10088: PUSH
10089: LD_INT 100
10091: PUSH
10092: LD_VAR 0 8
10096: PLUS
10097: STR
10098: PUSH
10099: LD_STRING ;
10101: STR
10102: ST_TO_ADDR
// end ;
10103: GO 10058
10105: POP
10106: POP
// if tmp then
10107: LD_VAR 0 3
10111: IFFALSE 10123
// active := tmp ;
10113: LD_ADDR_VAR 0 7
10117: PUSH
10118: LD_VAR 0 3
10122: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10123: LD_STRING getStreamItemsFromMission("
10125: PUSH
10126: LD_VAR 0 5
10130: STR
10131: PUSH
10132: LD_STRING ","
10134: STR
10135: PUSH
10136: LD_VAR 0 6
10140: STR
10141: PUSH
10142: LD_STRING ","
10144: STR
10145: PUSH
10146: LD_VAR 0 7
10150: STR
10151: PUSH
10152: LD_STRING ")
10154: STR
10155: PPUSH
10156: CALL_OW 559
// end else
10160: GO 10169
// ToLua ( getStreamItemsFromMission("","","") ) ;
10162: LD_STRING getStreamItemsFromMission("","","")
10164: PPUSH
10165: CALL_OW 559
// end ;
10169: LD_VAR 0 2
10173: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10174: LD_EXP 40
10178: PUSH
10179: LD_EXP 45
10183: AND
10184: IFFALSE 10308
10186: GO 10188
10188: DISABLE
10189: LD_INT 0
10191: PPUSH
10192: PPUSH
// begin enable ;
10193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10194: LD_ADDR_VAR 0 2
10198: PUSH
10199: LD_INT 22
10201: PUSH
10202: LD_OWVAR 2
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: LD_INT 34
10216: PUSH
10217: LD_INT 7
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 45
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 28
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 47
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: ST_TO_ADDR
// if not tmp then
10270: LD_VAR 0 2
10274: NOT
10275: IFFALSE 10279
// exit ;
10277: GO 10308
// for i in tmp do
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_VAR 0 2
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10306
// begin SetLives ( i , 0 ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_INT 0
10299: PPUSH
10300: CALL_OW 234
// end ;
10304: GO 10289
10306: POP
10307: POP
// end ;
10308: PPOPN 2
10310: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10311: LD_EXP 40
10315: PUSH
10316: LD_EXP 46
10320: AND
10321: IFFALSE 10405
10323: GO 10325
10325: DISABLE
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// begin enable ;
10330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10331: LD_ADDR_VAR 0 2
10335: PUSH
10336: LD_INT 22
10338: PUSH
10339: LD_OWVAR 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 32
10350: PUSH
10351: LD_INT 3
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 69
10366: ST_TO_ADDR
// if not tmp then
10367: LD_VAR 0 2
10371: NOT
10372: IFFALSE 10376
// exit ;
10374: GO 10405
// for i in tmp do
10376: LD_ADDR_VAR 0 1
10380: PUSH
10381: LD_VAR 0 2
10385: PUSH
10386: FOR_IN
10387: IFFALSE 10403
// begin SetLives ( i , 0 ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_INT 0
10396: PPUSH
10397: CALL_OW 234
// end ;
10401: GO 10386
10403: POP
10404: POP
// end ;
10405: PPOPN 2
10407: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10408: LD_EXP 40
10412: PUSH
10413: LD_EXP 43
10417: AND
10418: IFFALSE 10511
10420: GO 10422
10422: DISABLE
10423: LD_INT 0
10425: PPUSH
// begin enable ;
10426: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10427: LD_ADDR_VAR 0 1
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_OWVAR 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 5
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 25
10459: PUSH
10460: LD_INT 9
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 25
10469: PUSH
10470: LD_INT 8
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: PUSH
10492: FOR_IN
10493: IFFALSE 10509
// begin SetClass ( i , 1 ) ;
10495: LD_VAR 0 1
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 336
// end ;
10507: GO 10492
10509: POP
10510: POP
// end ;
10511: PPOPN 1
10513: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10514: LD_EXP 40
10518: PUSH
10519: LD_EXP 44
10523: AND
10524: PUSH
10525: LD_OWVAR 65
10529: PUSH
10530: LD_INT 7
10532: LESS
10533: AND
10534: IFFALSE 10548
10536: GO 10538
10538: DISABLE
// begin enable ;
10539: ENABLE
// game_speed := 7 ;
10540: LD_ADDR_OWVAR 65
10544: PUSH
10545: LD_INT 7
10547: ST_TO_ADDR
// end ;
10548: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10549: LD_EXP 40
10553: PUSH
10554: LD_EXP 47
10558: AND
10559: IFFALSE 10761
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_INT 81
10576: PUSH
10577: LD_OWVAR 2
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 69
10604: ST_TO_ADDR
// if not tmp then
10605: LD_VAR 0 3
10609: NOT
10610: IFFALSE 10614
// exit ;
10612: GO 10761
// if tmp > 5 then
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 5
10621: GREATER
10622: IFFALSE 10634
// k := 5 else
10624: LD_ADDR_VAR 0 2
10628: PUSH
10629: LD_INT 5
10631: ST_TO_ADDR
10632: GO 10644
// k := tmp ;
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: LD_VAR 0 3
10643: ST_TO_ADDR
// for i := 1 to k do
10644: LD_ADDR_VAR 0 1
10648: PUSH
10649: DOUBLE
10650: LD_INT 1
10652: DEC
10653: ST_TO_ADDR
10654: LD_VAR 0 2
10658: PUSH
10659: FOR_TO
10660: IFFALSE 10759
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10662: LD_VAR 0 3
10666: PUSH
10667: LD_VAR 0 1
10671: ARRAY
10672: PPUSH
10673: LD_VAR 0 1
10677: PUSH
10678: LD_INT 4
10680: MOD
10681: PUSH
10682: LD_INT 1
10684: PLUS
10685: PPUSH
10686: CALL_OW 259
10690: PUSH
10691: LD_INT 10
10693: LESS
10694: IFFALSE 10757
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10696: LD_VAR 0 3
10700: PUSH
10701: LD_VAR 0 1
10705: ARRAY
10706: PPUSH
10707: LD_VAR 0 1
10711: PUSH
10712: LD_INT 4
10714: MOD
10715: PUSH
10716: LD_INT 1
10718: PLUS
10719: PPUSH
10720: LD_VAR 0 3
10724: PUSH
10725: LD_VAR 0 1
10729: ARRAY
10730: PPUSH
10731: LD_VAR 0 1
10735: PUSH
10736: LD_INT 4
10738: MOD
10739: PUSH
10740: LD_INT 1
10742: PLUS
10743: PPUSH
10744: CALL_OW 259
10748: PUSH
10749: LD_INT 1
10751: PLUS
10752: PPUSH
10753: CALL_OW 237
10757: GO 10659
10759: POP
10760: POP
// end ;
10761: PPOPN 3
10763: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10764: LD_EXP 40
10768: PUSH
10769: LD_EXP 48
10773: AND
10774: IFFALSE 10794
10776: GO 10778
10778: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10779: LD_INT 4
10781: PPUSH
10782: LD_OWVAR 2
10786: PPUSH
10787: LD_INT 0
10789: PPUSH
10790: CALL_OW 324
10794: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 77
10804: AND
10805: IFFALSE 10825
10807: GO 10809
10809: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10810: LD_INT 19
10812: PPUSH
10813: LD_OWVAR 2
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 324
10825: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10826: LD_EXP 40
10830: PUSH
10831: LD_EXP 49
10835: AND
10836: IFFALSE 10938
10838: GO 10840
10840: DISABLE
10841: LD_INT 0
10843: PPUSH
10844: PPUSH
// begin enable ;
10845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_INT 22
10853: PUSH
10854: LD_OWVAR 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 2
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 11
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 34
10878: PUSH
10879: LD_INT 30
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: ST_TO_ADDR
// if not tmp then
10900: LD_VAR 0 2
10904: NOT
10905: IFFALSE 10909
// exit ;
10907: GO 10938
// for i in tmp do
10909: LD_ADDR_VAR 0 1
10913: PUSH
10914: LD_VAR 0 2
10918: PUSH
10919: FOR_IN
10920: IFFALSE 10936
// begin SetLives ( i , 0 ) ;
10922: LD_VAR 0 1
10926: PPUSH
10927: LD_INT 0
10929: PPUSH
10930: CALL_OW 234
// end ;
10934: GO 10919
10936: POP
10937: POP
// end ;
10938: PPOPN 2
10940: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10941: LD_EXP 40
10945: PUSH
10946: LD_EXP 50
10950: AND
10951: IFFALSE 10971
10953: GO 10955
10955: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10956: LD_INT 32
10958: PPUSH
10959: LD_OWVAR 2
10963: PPUSH
10964: LD_INT 0
10966: PPUSH
10967: CALL_OW 324
10971: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10972: LD_EXP 40
10976: PUSH
10977: LD_EXP 51
10981: AND
10982: IFFALSE 11163
10984: GO 10986
10986: DISABLE
10987: LD_INT 0
10989: PPUSH
10990: PPUSH
10991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: LD_INT 22
10999: PUSH
11000: LD_OWVAR 2
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 33
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: ST_TO_ADDR
// if not tmp then
11028: LD_VAR 0 2
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11163
// side := 0 ;
11037: LD_ADDR_VAR 0 3
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// for i := 1 to 8 do
11045: LD_ADDR_VAR 0 1
11049: PUSH
11050: DOUBLE
11051: LD_INT 1
11053: DEC
11054: ST_TO_ADDR
11055: LD_INT 8
11057: PUSH
11058: FOR_TO
11059: IFFALSE 11107
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11061: LD_OWVAR 2
11065: PUSH
11066: LD_VAR 0 1
11070: NONEQUAL
11071: PUSH
11072: LD_OWVAR 2
11076: PPUSH
11077: LD_VAR 0 1
11081: PPUSH
11082: CALL_OW 81
11086: PUSH
11087: LD_INT 2
11089: EQUAL
11090: AND
11091: IFFALSE 11105
// begin side := i ;
11093: LD_ADDR_VAR 0 3
11097: PUSH
11098: LD_VAR 0 1
11102: ST_TO_ADDR
// break ;
11103: GO 11107
// end ;
11105: GO 11058
11107: POP
11108: POP
// if not side then
11109: LD_VAR 0 3
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11163
// for i := 1 to tmp do
11118: LD_ADDR_VAR 0 1
11122: PUSH
11123: DOUBLE
11124: LD_INT 1
11126: DEC
11127: ST_TO_ADDR
11128: LD_VAR 0 2
11132: PUSH
11133: FOR_TO
11134: IFFALSE 11161
// if Prob ( 60 ) then
11136: LD_INT 60
11138: PPUSH
11139: CALL_OW 13
11143: IFFALSE 11159
// SetSide ( i , side ) ;
11145: LD_VAR 0 1
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: CALL_OW 235
11159: GO 11133
11161: POP
11162: POP
// end ;
11163: PPOPN 3
11165: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11166: LD_EXP 40
11170: PUSH
11171: LD_EXP 53
11175: AND
11176: IFFALSE 11295
11178: GO 11180
11180: DISABLE
11181: LD_INT 0
11183: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11184: LD_ADDR_VAR 0 1
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_OWVAR 2
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 21
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 3
11213: PUSH
11214: LD_INT 23
11216: PUSH
11217: LD_INT 0
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 69
11237: PUSH
11238: FOR_IN
11239: IFFALSE 11293
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11241: LD_VAR 0 1
11245: PPUSH
11246: CALL_OW 257
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: IN
11269: IFFALSE 11291
// SetClass ( un , rand ( 1 , 4 ) ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: LD_INT 4
11281: PPUSH
11282: CALL_OW 12
11286: PPUSH
11287: CALL_OW 336
11291: GO 11238
11293: POP
11294: POP
// end ;
11295: PPOPN 1
11297: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11298: LD_EXP 40
11302: PUSH
11303: LD_EXP 52
11307: AND
11308: IFFALSE 11387
11310: GO 11312
11312: DISABLE
11313: LD_INT 0
11315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11316: LD_ADDR_VAR 0 1
11320: PUSH
11321: LD_INT 22
11323: PUSH
11324: LD_OWVAR 2
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 21
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// if not tmp then
11352: LD_VAR 0 1
11356: NOT
11357: IFFALSE 11361
// exit ;
11359: GO 11387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11361: LD_VAR 0 1
11365: PUSH
11366: LD_INT 1
11368: PPUSH
11369: LD_VAR 0 1
11373: PPUSH
11374: CALL_OW 12
11378: ARRAY
11379: PPUSH
11380: LD_INT 100
11382: PPUSH
11383: CALL_OW 234
// end ;
11387: PPOPN 1
11389: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11390: LD_EXP 40
11394: PUSH
11395: LD_EXP 54
11399: AND
11400: IFFALSE 11498
11402: GO 11404
11404: DISABLE
11405: LD_INT 0
11407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11408: LD_ADDR_VAR 0 1
11412: PUSH
11413: LD_INT 22
11415: PUSH
11416: LD_OWVAR 2
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 69
11443: ST_TO_ADDR
// if not tmp then
11444: LD_VAR 0 1
11448: NOT
11449: IFFALSE 11453
// exit ;
11451: GO 11498
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11453: LD_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 12
11470: ARRAY
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: LD_INT 4
11477: PPUSH
11478: CALL_OW 12
11482: PPUSH
11483: LD_INT 3000
11485: PPUSH
11486: LD_INT 9000
11488: PPUSH
11489: CALL_OW 12
11493: PPUSH
11494: CALL_OW 492
// end ;
11498: PPOPN 1
11500: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11501: LD_EXP 40
11505: PUSH
11506: LD_EXP 55
11510: AND
11511: IFFALSE 11531
11513: GO 11515
11515: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11516: LD_INT 1
11518: PPUSH
11519: LD_OWVAR 2
11523: PPUSH
11524: LD_INT 0
11526: PPUSH
11527: CALL_OW 324
11531: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11532: LD_EXP 40
11536: PUSH
11537: LD_EXP 56
11541: AND
11542: IFFALSE 11625
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11551: LD_ADDR_VAR 0 2
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_OWVAR 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 21
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: ST_TO_ADDR
// if not tmp then
11587: LD_VAR 0 2
11591: NOT
11592: IFFALSE 11596
// exit ;
11594: GO 11625
// for i in tmp do
11596: LD_ADDR_VAR 0 1
11600: PUSH
11601: LD_VAR 0 2
11605: PUSH
11606: FOR_IN
11607: IFFALSE 11623
// SetBLevel ( i , 10 ) ;
11609: LD_VAR 0 1
11613: PPUSH
11614: LD_INT 10
11616: PPUSH
11617: CALL_OW 241
11621: GO 11606
11623: POP
11624: POP
// end ;
11625: PPOPN 2
11627: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11628: LD_EXP 40
11632: PUSH
11633: LD_EXP 57
11637: AND
11638: IFFALSE 11749
11640: GO 11642
11642: DISABLE
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
11647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11648: LD_ADDR_VAR 0 3
11652: PUSH
11653: LD_INT 22
11655: PUSH
11656: LD_OWVAR 2
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 25
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 69
11683: ST_TO_ADDR
// if not tmp then
11684: LD_VAR 0 3
11688: NOT
11689: IFFALSE 11693
// exit ;
11691: GO 11749
// un := tmp [ rand ( 1 , tmp ) ] ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_VAR 0 3
11702: PUSH
11703: LD_INT 1
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: CALL_OW 12
11715: ARRAY
11716: ST_TO_ADDR
// if Crawls ( un ) then
11717: LD_VAR 0 2
11721: PPUSH
11722: CALL_OW 318
11726: IFFALSE 11737
// ComWalk ( un ) ;
11728: LD_VAR 0 2
11732: PPUSH
11733: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_INT 5
11744: PPUSH
11745: CALL_OW 336
// end ;
11749: PPOPN 3
11751: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11752: LD_EXP 40
11756: PUSH
11757: LD_EXP 58
11761: AND
11762: PUSH
11763: LD_OWVAR 67
11767: PUSH
11768: LD_INT 4
11770: LESS
11771: AND
11772: IFFALSE 11791
11774: GO 11776
11776: DISABLE
// begin Difficulty := Difficulty + 1 ;
11777: LD_ADDR_OWVAR 67
11781: PUSH
11782: LD_OWVAR 67
11786: PUSH
11787: LD_INT 1
11789: PLUS
11790: ST_TO_ADDR
// end ;
11791: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11792: LD_EXP 40
11796: PUSH
11797: LD_EXP 59
11801: AND
11802: IFFALSE 11905
11804: GO 11806
11806: DISABLE
11807: LD_INT 0
11809: PPUSH
// begin for i := 1 to 5 do
11810: LD_ADDR_VAR 0 1
11814: PUSH
11815: DOUBLE
11816: LD_INT 1
11818: DEC
11819: ST_TO_ADDR
11820: LD_INT 5
11822: PUSH
11823: FOR_TO
11824: IFFALSE 11903
// begin uc_nation := nation_nature ;
11826: LD_ADDR_OWVAR 21
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// uc_side := 0 ;
11834: LD_ADDR_OWVAR 20
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11842: LD_ADDR_OWVAR 29
11846: PUSH
11847: LD_INT 12
11849: PUSH
11850: LD_INT 12
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: ST_TO_ADDR
// hc_agressivity := 20 ;
11857: LD_ADDR_OWVAR 35
11861: PUSH
11862: LD_INT 20
11864: ST_TO_ADDR
// hc_class := class_tiger ;
11865: LD_ADDR_OWVAR 28
11869: PUSH
11870: LD_INT 14
11872: ST_TO_ADDR
// hc_gallery :=  ;
11873: LD_ADDR_OWVAR 33
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// hc_name :=  ;
11881: LD_ADDR_OWVAR 26
11885: PUSH
11886: LD_STRING 
11888: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11889: CALL_OW 44
11893: PPUSH
11894: LD_INT 0
11896: PPUSH
11897: CALL_OW 51
// end ;
11901: GO 11823
11903: POP
11904: POP
// end ;
11905: PPOPN 1
11907: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11908: LD_EXP 40
11912: PUSH
11913: LD_EXP 60
11917: AND
11918: IFFALSE 11927
11920: GO 11922
11922: DISABLE
// StreamSibBomb ;
11923: CALL 11928 0 0
11927: END
// export function StreamSibBomb ; var i , x , y ; begin
11928: LD_INT 0
11930: PPUSH
11931: PPUSH
11932: PPUSH
11933: PPUSH
// result := false ;
11934: LD_ADDR_VAR 0 1
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// for i := 1 to 16 do
11942: LD_ADDR_VAR 0 2
11946: PUSH
11947: DOUBLE
11948: LD_INT 1
11950: DEC
11951: ST_TO_ADDR
11952: LD_INT 16
11954: PUSH
11955: FOR_TO
11956: IFFALSE 12155
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 10
11965: PUSH
11966: LD_INT 20
11968: PUSH
11969: LD_INT 30
11971: PUSH
11972: LD_INT 40
11974: PUSH
11975: LD_INT 50
11977: PUSH
11978: LD_INT 60
11980: PUSH
11981: LD_INT 70
11983: PUSH
11984: LD_INT 80
11986: PUSH
11987: LD_INT 90
11989: PUSH
11990: LD_INT 100
11992: PUSH
11993: LD_INT 110
11995: PUSH
11996: LD_INT 120
11998: PUSH
11999: LD_INT 130
12001: PUSH
12002: LD_INT 140
12004: PUSH
12005: LD_INT 150
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 1
12027: PPUSH
12028: LD_INT 15
12030: PPUSH
12031: CALL_OW 12
12035: ARRAY
12036: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12037: LD_ADDR_VAR 0 4
12041: PUSH
12042: LD_INT 10
12044: PUSH
12045: LD_INT 20
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 40
12053: PUSH
12054: LD_INT 50
12056: PUSH
12057: LD_INT 60
12059: PUSH
12060: LD_INT 70
12062: PUSH
12063: LD_INT 80
12065: PUSH
12066: LD_INT 90
12068: PUSH
12069: LD_INT 100
12071: PUSH
12072: LD_INT 110
12074: PUSH
12075: LD_INT 120
12077: PUSH
12078: LD_INT 130
12080: PUSH
12081: LD_INT 140
12083: PUSH
12084: LD_INT 150
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 1
12106: PPUSH
12107: LD_INT 15
12109: PPUSH
12110: CALL_OW 12
12114: ARRAY
12115: ST_TO_ADDR
// if ValidHex ( x , y ) then
12116: LD_VAR 0 3
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: CALL_OW 488
12130: IFFALSE 12153
// begin result := [ x , y ] ;
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: LD_VAR 0 4
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: ST_TO_ADDR
// break ;
12151: GO 12155
// end ; end ;
12153: GO 11955
12155: POP
12156: POP
// if result then
12157: LD_VAR 0 1
12161: IFFALSE 12221
// begin ToLua ( playSibBomb() ) ;
12163: LD_STRING playSibBomb()
12165: PPUSH
12166: CALL_OW 559
// wait ( 0 0$14 ) ;
12170: LD_INT 490
12172: PPUSH
12173: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12177: LD_VAR 0 1
12181: PUSH
12182: LD_INT 1
12184: ARRAY
12185: PPUSH
12186: LD_VAR 0 1
12190: PUSH
12191: LD_INT 2
12193: ARRAY
12194: PPUSH
12195: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12199: LD_VAR 0 1
12203: PUSH
12204: LD_INT 1
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 2
12215: ARRAY
12216: PPUSH
12217: CALL_OW 429
// end ; end ;
12221: LD_VAR 0 1
12225: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12226: LD_EXP 40
12230: PUSH
12231: LD_EXP 62
12235: AND
12236: IFFALSE 12248
12238: GO 12240
12240: DISABLE
// YouLost (  ) ;
12241: LD_STRING 
12243: PPUSH
12244: CALL_OW 104
12248: END
// every 0 0$1 trigger StreamModeActive and sFog do
12249: LD_EXP 40
12253: PUSH
12254: LD_EXP 61
12258: AND
12259: IFFALSE 12273
12261: GO 12263
12263: DISABLE
// FogOff ( your_side ) ;
12264: LD_OWVAR 2
12268: PPUSH
12269: CALL_OW 344
12273: END
// every 0 0$1 trigger StreamModeActive and sSun do
12274: LD_EXP 40
12278: PUSH
12279: LD_EXP 63
12283: AND
12284: IFFALSE 12312
12286: GO 12288
12288: DISABLE
// begin solar_recharge_percent := 0 ;
12289: LD_ADDR_OWVAR 79
12293: PUSH
12294: LD_INT 0
12296: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12297: LD_INT 10500
12299: PPUSH
12300: CALL_OW 67
// solar_recharge_percent := 100 ;
12304: LD_ADDR_OWVAR 79
12308: PUSH
12309: LD_INT 100
12311: ST_TO_ADDR
// end ;
12312: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12313: LD_EXP 40
12317: PUSH
12318: LD_EXP 64
12322: AND
12323: IFFALSE 12562
12325: GO 12327
12327: DISABLE
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
// begin tmp := [ ] ;
12333: LD_ADDR_VAR 0 3
12337: PUSH
12338: EMPTY
12339: ST_TO_ADDR
// for i := 1 to 6 do
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: DOUBLE
12346: LD_INT 1
12348: DEC
12349: ST_TO_ADDR
12350: LD_INT 6
12352: PUSH
12353: FOR_TO
12354: IFFALSE 12459
// begin uc_nation := nation_nature ;
12356: LD_ADDR_OWVAR 21
12360: PUSH
12361: LD_INT 0
12363: ST_TO_ADDR
// uc_side := 0 ;
12364: LD_ADDR_OWVAR 20
12368: PUSH
12369: LD_INT 0
12371: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12372: LD_ADDR_OWVAR 29
12376: PUSH
12377: LD_INT 12
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: ST_TO_ADDR
// hc_agressivity := 20 ;
12387: LD_ADDR_OWVAR 35
12391: PUSH
12392: LD_INT 20
12394: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12395: LD_ADDR_OWVAR 28
12399: PUSH
12400: LD_INT 17
12402: ST_TO_ADDR
// hc_gallery :=  ;
12403: LD_ADDR_OWVAR 33
12407: PUSH
12408: LD_STRING 
12410: ST_TO_ADDR
// hc_name :=  ;
12411: LD_ADDR_OWVAR 26
12415: PUSH
12416: LD_STRING 
12418: ST_TO_ADDR
// un := CreateHuman ;
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: CALL_OW 44
12428: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12429: LD_VAR 0 2
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 51
// tmp := tmp ^ un ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_VAR 0 3
12450: PUSH
12451: LD_VAR 0 2
12455: ADD
12456: ST_TO_ADDR
// end ;
12457: GO 12353
12459: POP
12460: POP
// repeat wait ( 0 0$1 ) ;
12461: LD_INT 35
12463: PPUSH
12464: CALL_OW 67
// for un in tmp do
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_VAR 0 3
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12553
// begin if IsDead ( un ) then
12481: LD_VAR 0 2
12485: PPUSH
12486: CALL_OW 301
12490: IFFALSE 12510
// begin tmp := tmp diff un ;
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_VAR 0 3
12501: PUSH
12502: LD_VAR 0 2
12506: DIFF
12507: ST_TO_ADDR
// continue ;
12508: GO 12478
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12510: LD_VAR 0 2
12514: PPUSH
12515: LD_INT 3
12517: PUSH
12518: LD_INT 22
12520: PUSH
12521: LD_INT 0
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: PPUSH
12537: LD_VAR 0 2
12541: PPUSH
12542: CALL_OW 74
12546: PPUSH
12547: CALL_OW 115
// end ;
12551: GO 12478
12553: POP
12554: POP
// until not tmp ;
12555: LD_VAR 0 3
12559: NOT
12560: IFFALSE 12461
// end ;
12562: PPOPN 3
12564: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12565: LD_EXP 40
12569: PUSH
12570: LD_EXP 65
12574: AND
12575: IFFALSE 12629
12577: GO 12579
12579: DISABLE
// begin ToLua ( displayTroll(); ) ;
12580: LD_STRING displayTroll();
12582: PPUSH
12583: CALL_OW 559
// wait ( 3 3$00 ) ;
12587: LD_INT 6300
12589: PPUSH
12590: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12594: LD_STRING hideTroll();
12596: PPUSH
12597: CALL_OW 559
// wait ( 1 1$00 ) ;
12601: LD_INT 2100
12603: PPUSH
12604: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12608: LD_STRING displayTroll();
12610: PPUSH
12611: CALL_OW 559
// wait ( 1 1$00 ) ;
12615: LD_INT 2100
12617: PPUSH
12618: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12622: LD_STRING hideTroll();
12624: PPUSH
12625: CALL_OW 559
// end ;
12629: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12630: LD_EXP 40
12634: PUSH
12635: LD_EXP 66
12639: AND
12640: IFFALSE 12703
12642: GO 12644
12644: DISABLE
12645: LD_INT 0
12647: PPUSH
// begin p := 0 ;
12648: LD_ADDR_VAR 0 1
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// repeat game_speed := 1 ;
12656: LD_ADDR_OWVAR 65
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12664: LD_INT 35
12666: PPUSH
12667: CALL_OW 67
// p := p + 1 ;
12671: LD_ADDR_VAR 0 1
12675: PUSH
12676: LD_VAR 0 1
12680: PUSH
12681: LD_INT 1
12683: PLUS
12684: ST_TO_ADDR
// until p >= 60 ;
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 60
12692: GREATEREQUAL
12693: IFFALSE 12656
// game_speed := 4 ;
12695: LD_ADDR_OWVAR 65
12699: PUSH
12700: LD_INT 4
12702: ST_TO_ADDR
// end ;
12703: PPOPN 1
12705: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12706: LD_EXP 40
12710: PUSH
12711: LD_EXP 67
12715: AND
12716: IFFALSE 12862
12718: GO 12720
12720: DISABLE
12721: LD_INT 0
12723: PPUSH
12724: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_OWVAR 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 0
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 30
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: ST_TO_ADDR
// if not depot then
12779: LD_VAR 0 1
12783: NOT
12784: IFFALSE 12788
// exit ;
12786: GO 12862
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12788: LD_ADDR_VAR 0 2
12792: PUSH
12793: LD_VAR 0 1
12797: PUSH
12798: LD_INT 1
12800: PPUSH
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 12
12810: ARRAY
12811: PPUSH
12812: CALL_OW 274
12816: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12817: LD_VAR 0 2
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: LD_INT 0
12827: PPUSH
12828: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12832: LD_VAR 0 2
12836: PPUSH
12837: LD_INT 2
12839: PPUSH
12840: LD_INT 0
12842: PPUSH
12843: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_INT 3
12854: PPUSH
12855: LD_INT 0
12857: PPUSH
12858: CALL_OW 277
// end ;
12862: PPOPN 2
12864: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12865: LD_EXP 40
12869: PUSH
12870: LD_EXP 68
12874: AND
12875: IFFALSE 12972
12877: GO 12879
12879: DISABLE
12880: LD_INT 0
12882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12883: LD_ADDR_VAR 0 1
12887: PUSH
12888: LD_INT 22
12890: PUSH
12891: LD_OWVAR 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 21
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 23
12915: PUSH
12916: LD_INT 0
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 69
12936: ST_TO_ADDR
// if not tmp then
12937: LD_VAR 0 1
12941: NOT
12942: IFFALSE 12946
// exit ;
12944: GO 12972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_VAR 0 1
12958: PPUSH
12959: CALL_OW 12
12963: ARRAY
12964: PPUSH
12965: LD_INT 200
12967: PPUSH
12968: CALL_OW 234
// end ;
12972: PPOPN 1
12974: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12975: LD_EXP 40
12979: PUSH
12980: LD_EXP 69
12984: AND
12985: IFFALSE 13064
12987: GO 12989
12989: DISABLE
12990: LD_INT 0
12992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_OWVAR 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 21
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: ST_TO_ADDR
// if not tmp then
13029: LD_VAR 0 1
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13038: LD_VAR 0 1
13042: PUSH
13043: LD_INT 1
13045: PPUSH
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 12
13055: ARRAY
13056: PPUSH
13057: LD_INT 60
13059: PPUSH
13060: CALL_OW 234
// end ;
13064: PPOPN 1
13066: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13067: LD_EXP 40
13071: PUSH
13072: LD_EXP 70
13076: AND
13077: IFFALSE 13176
13079: GO 13081
13081: DISABLE
13082: LD_INT 0
13084: PPUSH
13085: PPUSH
// begin enable ;
13086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_OWVAR 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 61
13106: PUSH
13107: EMPTY
13108: LIST
13109: PUSH
13110: LD_INT 33
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: ST_TO_ADDR
// if not tmp then
13130: LD_VAR 0 1
13134: NOT
13135: IFFALSE 13139
// exit ;
13137: GO 13176
// for i in tmp do
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_VAR 0 1
13148: PUSH
13149: FOR_IN
13150: IFFALSE 13174
// if IsControledBy ( i ) then
13152: LD_VAR 0 2
13156: PPUSH
13157: CALL_OW 312
13161: IFFALSE 13172
// ComUnlink ( i ) ;
13163: LD_VAR 0 2
13167: PPUSH
13168: CALL_OW 136
13172: GO 13149
13174: POP
13175: POP
// end ;
13176: PPOPN 2
13178: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13179: LD_EXP 40
13183: PUSH
13184: LD_EXP 71
13188: AND
13189: IFFALSE 13329
13191: GO 13193
13193: DISABLE
13194: LD_INT 0
13196: PPUSH
13197: PPUSH
// begin ToLua ( displayPowell(); ) ;
13198: LD_STRING displayPowell();
13200: PPUSH
13201: CALL_OW 559
// uc_side := 0 ;
13205: LD_ADDR_OWVAR 20
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// uc_nation := 2 ;
13213: LD_ADDR_OWVAR 21
13217: PUSH
13218: LD_INT 2
13220: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13221: LD_ADDR_OWVAR 37
13225: PUSH
13226: LD_INT 14
13228: ST_TO_ADDR
// vc_engine := engine_siberite ;
13229: LD_ADDR_OWVAR 39
13233: PUSH
13234: LD_INT 3
13236: ST_TO_ADDR
// vc_control := control_apeman ;
13237: LD_ADDR_OWVAR 38
13241: PUSH
13242: LD_INT 5
13244: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13245: LD_ADDR_OWVAR 40
13249: PUSH
13250: LD_INT 29
13252: ST_TO_ADDR
// un := CreateVehicle ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: CALL_OW 45
13262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13263: LD_VAR 0 2
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13275: LD_INT 35
13277: PPUSH
13278: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13282: LD_VAR 0 2
13286: PPUSH
13287: LD_INT 22
13289: PUSH
13290: LD_OWVAR 2
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 69
13303: PPUSH
13304: LD_VAR 0 2
13308: PPUSH
13309: CALL_OW 74
13313: PPUSH
13314: CALL_OW 115
// until IsDead ( un ) ;
13318: LD_VAR 0 2
13322: PPUSH
13323: CALL_OW 301
13327: IFFALSE 13275
// end ;
13329: PPOPN 2
13331: END
// every 0 0$1 trigger StreamModeActive and sStu do
13332: LD_EXP 40
13336: PUSH
13337: LD_EXP 79
13341: AND
13342: IFFALSE 13358
13344: GO 13346
13346: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13347: LD_STRING displayStucuk();
13349: PPUSH
13350: CALL_OW 559
// ResetFog ;
13354: CALL_OW 335
// end ;
13358: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13359: LD_EXP 40
13363: PUSH
13364: LD_EXP 72
13368: AND
13369: IFFALSE 13510
13371: GO 13373
13373: DISABLE
13374: LD_INT 0
13376: PPUSH
13377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_OWVAR 2
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 21
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: ST_TO_ADDR
// if not tmp then
13414: LD_VAR 0 2
13418: NOT
13419: IFFALSE 13423
// exit ;
13421: GO 13510
// un := tmp [ rand ( 1 , tmp ) ] ;
13423: LD_ADDR_VAR 0 1
13427: PUSH
13428: LD_VAR 0 2
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_VAR 0 2
13440: PPUSH
13441: CALL_OW 12
13445: ARRAY
13446: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13447: LD_VAR 0 1
13451: PPUSH
13452: LD_INT 0
13454: PPUSH
13455: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13459: LD_VAR 0 1
13463: PPUSH
13464: LD_OWVAR 3
13468: PUSH
13469: LD_VAR 0 1
13473: DIFF
13474: PPUSH
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 74
13484: PPUSH
13485: CALL_OW 115
// wait ( 0 0$20 ) ;
13489: LD_INT 700
13491: PPUSH
13492: CALL_OW 67
// SetSide ( un , your_side ) ;
13496: LD_VAR 0 1
13500: PPUSH
13501: LD_OWVAR 2
13505: PPUSH
13506: CALL_OW 235
// end ;
13510: PPOPN 2
13512: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13513: LD_EXP 40
13517: PUSH
13518: LD_EXP 73
13522: AND
13523: IFFALSE 13629
13525: GO 13527
13527: DISABLE
13528: LD_INT 0
13530: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_OWVAR 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: LD_INT 30
13553: PUSH
13554: LD_INT 0
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 30
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PPUSH
13580: CALL_OW 69
13584: ST_TO_ADDR
// if not depot then
13585: LD_VAR 0 1
13589: NOT
13590: IFFALSE 13594
// exit ;
13592: GO 13629
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13594: LD_VAR 0 1
13598: PUSH
13599: LD_INT 1
13601: ARRAY
13602: PPUSH
13603: CALL_OW 250
13607: PPUSH
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: CALL_OW 251
13621: PPUSH
13622: LD_INT 70
13624: PPUSH
13625: CALL_OW 495
// end ;
13629: PPOPN 1
13631: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13632: LD_EXP 40
13636: PUSH
13637: LD_EXP 74
13641: AND
13642: IFFALSE 13853
13644: GO 13646
13646: DISABLE
13647: LD_INT 0
13649: PPUSH
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13654: LD_ADDR_VAR 0 5
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 5
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13853
// for i in tmp do
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_VAR 0 5
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13851
// begin d := rand ( 0 , 5 ) ;
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: LD_INT 0
13719: PPUSH
13720: LD_INT 5
13722: PPUSH
13723: CALL_OW 12
13727: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13728: LD_ADDR_VAR 0 2
13732: PUSH
13733: LD_VAR 0 1
13737: PPUSH
13738: CALL_OW 250
13742: PPUSH
13743: LD_VAR 0 4
13747: PPUSH
13748: LD_INT 3
13750: PPUSH
13751: LD_INT 12
13753: PPUSH
13754: CALL_OW 12
13758: PPUSH
13759: CALL_OW 272
13763: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13764: LD_ADDR_VAR 0 3
13768: PUSH
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 251
13778: PPUSH
13779: LD_VAR 0 4
13783: PPUSH
13784: LD_INT 3
13786: PPUSH
13787: LD_INT 12
13789: PPUSH
13790: CALL_OW 12
13794: PPUSH
13795: CALL_OW 273
13799: ST_TO_ADDR
// if ValidHex ( x , y ) then
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: CALL_OW 488
13814: IFFALSE 13849
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_VAR 0 2
13825: PPUSH
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 3
13833: PPUSH
13834: LD_INT 6
13836: PPUSH
13837: CALL_OW 12
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 483
// end ;
13849: GO 13709
13851: POP
13852: POP
// end ;
13853: PPOPN 5
13855: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13856: LD_EXP 40
13860: PUSH
13861: LD_EXP 75
13865: AND
13866: IFFALSE 13960
13868: GO 13870
13870: DISABLE
13871: LD_INT 0
13873: PPUSH
13874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_INT 22
13882: PUSH
13883: LD_OWVAR 2
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 32
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: ST_TO_ADDR
// if not tmp then
13922: LD_VAR 0 2
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13960
// for i in tmp do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_VAR 0 2
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13958
// SetFuel ( i , 0 ) ;
13944: LD_VAR 0 1
13948: PPUSH
13949: LD_INT 0
13951: PPUSH
13952: CALL_OW 240
13956: GO 13941
13958: POP
13959: POP
// end ;
13960: PPOPN 2
13962: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13963: LD_EXP 40
13967: PUSH
13968: LD_EXP 76
13972: AND
13973: IFFALSE 14039
13975: GO 13977
13977: DISABLE
13978: LD_INT 0
13980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13981: LD_ADDR_VAR 0 1
13985: PUSH
13986: LD_INT 22
13988: PUSH
13989: LD_OWVAR 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 30
14000: PUSH
14001: LD_INT 29
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PPUSH
14012: CALL_OW 69
14016: ST_TO_ADDR
// if not tmp then
14017: LD_VAR 0 1
14021: NOT
14022: IFFALSE 14026
// exit ;
14024: GO 14039
// DestroyUnit ( tmp [ 1 ] ) ;
14026: LD_VAR 0 1
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: CALL_OW 65
// end ;
14039: PPOPN 1
14041: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14042: LD_EXP 40
14046: PUSH
14047: LD_EXP 78
14051: AND
14052: IFFALSE 14181
14054: GO 14056
14056: DISABLE
14057: LD_INT 0
14059: PPUSH
// begin uc_side := 0 ;
14060: LD_ADDR_OWVAR 20
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// uc_nation := nation_arabian ;
14068: LD_ADDR_OWVAR 21
14072: PUSH
14073: LD_INT 2
14075: ST_TO_ADDR
// hc_gallery :=  ;
14076: LD_ADDR_OWVAR 33
14080: PUSH
14081: LD_STRING 
14083: ST_TO_ADDR
// hc_name :=  ;
14084: LD_ADDR_OWVAR 26
14088: PUSH
14089: LD_STRING 
14091: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14092: LD_INT 1
14094: PPUSH
14095: LD_INT 11
14097: PPUSH
14098: LD_INT 10
14100: PPUSH
14101: CALL_OW 380
// un := CreateHuman ;
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: CALL_OW 44
14114: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14115: LD_VAR 0 1
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14127: LD_INT 35
14129: PPUSH
14130: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_INT 22
14141: PUSH
14142: LD_OWVAR 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: PPUSH
14156: LD_VAR 0 1
14160: PPUSH
14161: CALL_OW 74
14165: PPUSH
14166: CALL_OW 115
// until IsDead ( un ) ;
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 301
14179: IFFALSE 14127
// end ;
14181: PPOPN 1
14183: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14184: LD_EXP 40
14188: PUSH
14189: LD_EXP 80
14193: AND
14194: IFFALSE 14206
14196: GO 14198
14198: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14199: LD_STRING earthquake(getX(game), 0, 32)
14201: PPUSH
14202: CALL_OW 559
14206: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14207: LD_EXP 40
14211: PUSH
14212: LD_EXP 81
14216: AND
14217: IFFALSE 14308
14219: GO 14221
14221: DISABLE
14222: LD_INT 0
14224: PPUSH
// begin enable ;
14225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_OWVAR 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 2
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 33
14255: PUSH
14256: LD_INT 3
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// if not tmp then
14273: LD_VAR 0 1
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 14308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14282: LD_VAR 0 1
14286: PUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_VAR 0 1
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 234
// end ;
14308: PPOPN 1
14310: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14311: LD_EXP 40
14315: PUSH
14316: LD_EXP 82
14320: AND
14321: IFFALSE 14462
14323: GO 14325
14325: DISABLE
14326: LD_INT 0
14328: PPUSH
14329: PPUSH
14330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_OWVAR 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 25
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: ST_TO_ADDR
// if not tmp then
14367: LD_VAR 0 3
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 14462
// un := tmp [ rand ( 1 , tmp ) ] ;
14376: LD_ADDR_VAR 0 2
14380: PUSH
14381: LD_VAR 0 3
14385: PUSH
14386: LD_INT 1
14388: PPUSH
14389: LD_VAR 0 3
14393: PPUSH
14394: CALL_OW 12
14398: ARRAY
14399: ST_TO_ADDR
// if Crawls ( un ) then
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 318
14409: IFFALSE 14420
// ComWalk ( un ) ;
14411: LD_VAR 0 2
14415: PPUSH
14416: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14420: LD_VAR 0 2
14424: PPUSH
14425: LD_INT 9
14427: PPUSH
14428: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14432: LD_INT 28
14434: PPUSH
14435: LD_OWVAR 2
14439: PPUSH
14440: LD_INT 2
14442: PPUSH
14443: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14447: LD_INT 29
14449: PPUSH
14450: LD_OWVAR 2
14454: PPUSH
14455: LD_INT 2
14457: PPUSH
14458: CALL_OW 322
// end ;
14462: PPOPN 3
14464: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14465: LD_EXP 40
14469: PUSH
14470: LD_EXP 83
14474: AND
14475: IFFALSE 14586
14477: GO 14479
14479: DISABLE
14480: LD_INT 0
14482: PPUSH
14483: PPUSH
14484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_OWVAR 2
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 25
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 69
14520: ST_TO_ADDR
// if not tmp then
14521: LD_VAR 0 3
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 14586
// un := tmp [ rand ( 1 , tmp ) ] ;
14530: LD_ADDR_VAR 0 2
14534: PUSH
14535: LD_VAR 0 3
14539: PUSH
14540: LD_INT 1
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// if Crawls ( un ) then
14554: LD_VAR 0 2
14558: PPUSH
14559: CALL_OW 318
14563: IFFALSE 14574
// ComWalk ( un ) ;
14565: LD_VAR 0 2
14569: PPUSH
14570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14574: LD_VAR 0 2
14578: PPUSH
14579: LD_INT 8
14581: PPUSH
14582: CALL_OW 336
// end ;
14586: PPOPN 3
14588: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14589: LD_EXP 40
14593: PUSH
14594: LD_EXP 84
14598: AND
14599: IFFALSE 14743
14601: GO 14603
14603: DISABLE
14604: LD_INT 0
14606: PPUSH
14607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14608: LD_ADDR_VAR 0 2
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_OWVAR 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 21
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: LD_INT 34
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 34
14650: PUSH
14651: LD_INT 51
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 32
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: ST_TO_ADDR
// if not tmp then
14684: LD_VAR 0 2
14688: NOT
14689: IFFALSE 14693
// exit ;
14691: GO 14743
// for i in tmp do
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: FOR_IN
14704: IFFALSE 14741
// if GetCargo ( i , mat_artifact ) = 0 then
14706: LD_VAR 0 1
14710: PPUSH
14711: LD_INT 4
14713: PPUSH
14714: CALL_OW 289
14718: PUSH
14719: LD_INT 0
14721: EQUAL
14722: IFFALSE 14739
// SetCargo ( i , mat_siberit , 100 ) ;
14724: LD_VAR 0 1
14728: PPUSH
14729: LD_INT 3
14731: PPUSH
14732: LD_INT 100
14734: PPUSH
14735: CALL_OW 290
14739: GO 14703
14741: POP
14742: POP
// end ;
14743: PPOPN 2
14745: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14746: LD_EXP 40
14750: PUSH
14751: LD_EXP 85
14755: AND
14756: IFFALSE 14939
14758: GO 14760
14760: DISABLE
14761: LD_INT 0
14763: PPUSH
14764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14765: LD_ADDR_VAR 0 2
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_OWVAR 2
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 2
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14939
// for i := 1 to 2 do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: DOUBLE
14802: LD_INT 1
14804: DEC
14805: ST_TO_ADDR
14806: LD_INT 2
14808: PUSH
14809: FOR_TO
14810: IFFALSE 14937
// begin uc_side := your_side ;
14812: LD_ADDR_OWVAR 20
14816: PUSH
14817: LD_OWVAR 2
14821: ST_TO_ADDR
// uc_nation := nation_american ;
14822: LD_ADDR_OWVAR 21
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// vc_chassis := us_morphling ;
14830: LD_ADDR_OWVAR 37
14834: PUSH
14835: LD_INT 5
14837: ST_TO_ADDR
// vc_engine := engine_siberite ;
14838: LD_ADDR_OWVAR 39
14842: PUSH
14843: LD_INT 3
14845: ST_TO_ADDR
// vc_control := control_computer ;
14846: LD_ADDR_OWVAR 38
14850: PUSH
14851: LD_INT 3
14853: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14854: LD_ADDR_OWVAR 40
14858: PUSH
14859: LD_INT 10
14861: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14862: LD_VAR 0 2
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: CALL_OW 310
14875: NOT
14876: IFFALSE 14923
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14878: CALL_OW 45
14882: PPUSH
14883: LD_VAR 0 2
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: CALL_OW 250
14896: PPUSH
14897: LD_VAR 0 2
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: PPUSH
14906: CALL_OW 251
14910: PPUSH
14911: LD_INT 12
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 50
14921: GO 14935
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14923: CALL_OW 45
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 51
// end ;
14935: GO 14809
14937: POP
14938: POP
// end ;
14939: PPOPN 2
14941: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14942: LD_EXP 40
14946: PUSH
14947: LD_EXP 86
14951: AND
14952: IFFALSE 15174
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14965: LD_ADDR_VAR 0 6
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_OWVAR 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 3
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 0
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: ST_TO_ADDR
// if not tmp then
15019: LD_VAR 0 6
15023: NOT
15024: IFFALSE 15028
// exit ;
15026: GO 15174
// s1 := rand ( 1 , 4 ) ;
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_INT 1
15035: PPUSH
15036: LD_INT 4
15038: PPUSH
15039: CALL_OW 12
15043: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15044: LD_ADDR_VAR 0 4
15048: PUSH
15049: LD_VAR 0 6
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: PPUSH
15058: LD_VAR 0 2
15062: PPUSH
15063: CALL_OW 259
15067: ST_TO_ADDR
// if s1 = 1 then
15068: LD_VAR 0 2
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: IFFALSE 15096
// s2 := rand ( 2 , 4 ) else
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: LD_INT 2
15085: PPUSH
15086: LD_INT 4
15088: PPUSH
15089: CALL_OW 12
15093: ST_TO_ADDR
15094: GO 15104
// s2 := 1 ;
15096: LD_ADDR_VAR 0 3
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15104: LD_ADDR_VAR 0 5
15108: PUSH
15109: LD_VAR 0 6
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: CALL_OW 259
15127: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15128: LD_VAR 0 6
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 2
15141: PPUSH
15142: LD_VAR 0 5
15146: PPUSH
15147: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15151: LD_VAR 0 6
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: LD_VAR 0 3
15164: PPUSH
15165: LD_VAR 0 4
15169: PPUSH
15170: CALL_OW 237
// end ;
15174: PPOPN 6
15176: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15177: LD_EXP 40
15181: PUSH
15182: LD_EXP 87
15186: AND
15187: IFFALSE 15266
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15195: LD_ADDR_VAR 0 1
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 30
15214: PUSH
15215: LD_INT 3
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 1
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15240: LD_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 12
15257: ARRAY
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: CALL_OW 234
// end ;
15266: PPOPN 1
15268: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15269: LD_EXP 40
15273: PUSH
15274: LD_EXP 88
15278: AND
15279: IFFALSE 15391
15281: GO 15283
15283: DISABLE
15284: LD_INT 0
15286: PPUSH
15287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15288: LD_ADDR_VAR 0 2
15292: PUSH
15293: LD_INT 22
15295: PUSH
15296: LD_OWVAR 2
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 30
15310: PUSH
15311: LD_INT 27
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 26
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 28
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: ST_TO_ADDR
// if not tmp then
15353: LD_VAR 0 2
15357: NOT
15358: IFFALSE 15362
// exit ;
15360: GO 15391
// for i in tmp do
15362: LD_ADDR_VAR 0 1
15366: PUSH
15367: LD_VAR 0 2
15371: PUSH
15372: FOR_IN
15373: IFFALSE 15389
// SetLives ( i , 1 ) ;
15375: LD_VAR 0 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 234
15387: GO 15372
15389: POP
15390: POP
// end ;
15391: PPOPN 2
15393: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15394: LD_EXP 40
15398: PUSH
15399: LD_EXP 89
15403: AND
15404: IFFALSE 15691
15406: GO 15408
15408: DISABLE
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// begin i := rand ( 1 , 7 ) ;
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: LD_INT 1
15421: PPUSH
15422: LD_INT 7
15424: PPUSH
15425: CALL_OW 12
15429: ST_TO_ADDR
// case i of 1 :
15430: LD_VAR 0 1
15434: PUSH
15435: LD_INT 1
15437: DOUBLE
15438: EQUAL
15439: IFTRUE 15443
15441: GO 15453
15443: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15444: LD_STRING earthquake(getX(game), 0, 32)
15446: PPUSH
15447: CALL_OW 559
15451: GO 15691
15453: LD_INT 2
15455: DOUBLE
15456: EQUAL
15457: IFTRUE 15461
15459: GO 15475
15461: POP
// begin ToLua ( displayStucuk(); ) ;
15462: LD_STRING displayStucuk();
15464: PPUSH
15465: CALL_OW 559
// ResetFog ;
15469: CALL_OW 335
// end ; 3 :
15473: GO 15691
15475: LD_INT 3
15477: DOUBLE
15478: EQUAL
15479: IFTRUE 15483
15481: GO 15587
15483: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15484: LD_ADDR_VAR 0 2
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_OWVAR 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: ST_TO_ADDR
// if not tmp then
15520: LD_VAR 0 2
15524: NOT
15525: IFFALSE 15529
// exit ;
15527: GO 15691
// un := tmp [ rand ( 1 , tmp ) ] ;
15529: LD_ADDR_VAR 0 3
15533: PUSH
15534: LD_VAR 0 2
15538: PUSH
15539: LD_INT 1
15541: PPUSH
15542: LD_VAR 0 2
15546: PPUSH
15547: CALL_OW 12
15551: ARRAY
15552: ST_TO_ADDR
// if Crawls ( un ) then
15553: LD_VAR 0 3
15557: PPUSH
15558: CALL_OW 318
15562: IFFALSE 15573
// ComWalk ( un ) ;
15564: LD_VAR 0 3
15568: PPUSH
15569: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_INT 8
15580: PPUSH
15581: CALL_OW 336
// end ; 4 :
15585: GO 15691
15587: LD_INT 4
15589: DOUBLE
15590: EQUAL
15591: IFTRUE 15595
15593: GO 15669
15595: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15596: LD_ADDR_VAR 0 2
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_OWVAR 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 30
15615: PUSH
15616: LD_INT 29
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 69
15631: ST_TO_ADDR
// if not tmp then
15632: LD_VAR 0 2
15636: NOT
15637: IFFALSE 15641
// exit ;
15639: GO 15691
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15641: LD_VAR 0 2
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15654: LD_VAR 0 2
15658: PUSH
15659: LD_INT 1
15661: ARRAY
15662: PPUSH
15663: CALL_OW 65
// end ; 5 .. 7 :
15667: GO 15691
15669: LD_INT 5
15671: DOUBLE
15672: GREATEREQUAL
15673: IFFALSE 15681
15675: LD_INT 7
15677: DOUBLE
15678: LESSEQUAL
15679: IFTRUE 15683
15681: GO 15690
15683: POP
// StreamSibBomb ; end ;
15684: CALL 11928 0 0
15688: GO 15691
15690: POP
// end ;
15691: PPOPN 3
15693: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15694: LD_EXP 40
15698: PUSH
15699: LD_EXP 90
15703: AND
15704: IFFALSE 15860
15706: GO 15708
15708: DISABLE
15709: LD_INT 0
15711: PPUSH
15712: PPUSH
15713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15714: LD_ADDR_VAR 0 2
15718: PUSH
15719: LD_INT 81
15721: PUSH
15722: LD_OWVAR 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 2
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 21
15746: PUSH
15747: LD_INT 2
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PPUSH
15763: CALL_OW 69
15767: ST_TO_ADDR
// if not tmp then
15768: LD_VAR 0 2
15772: NOT
15773: IFFALSE 15777
// exit ;
15775: GO 15860
// p := 0 ;
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_INT 0
15784: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15785: LD_INT 35
15787: PPUSH
15788: CALL_OW 67
// p := p + 1 ;
15792: LD_ADDR_VAR 0 3
15796: PUSH
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 1
15804: PLUS
15805: ST_TO_ADDR
// for i in tmp do
15806: LD_ADDR_VAR 0 1
15810: PUSH
15811: LD_VAR 0 2
15815: PUSH
15816: FOR_IN
15817: IFFALSE 15848
// if GetLives ( i ) < 1000 then
15819: LD_VAR 0 1
15823: PPUSH
15824: CALL_OW 256
15828: PUSH
15829: LD_INT 1000
15831: LESS
15832: IFFALSE 15846
// SetLives ( i , 1000 ) ;
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_INT 1000
15841: PPUSH
15842: CALL_OW 234
15846: GO 15816
15848: POP
15849: POP
// until p > 20 ;
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 20
15857: GREATER
15858: IFFALSE 15785
// end ;
15860: PPOPN 3
15862: END
// every 0 0$1 trigger StreamModeActive and sTime do
15863: LD_EXP 40
15867: PUSH
15868: LD_EXP 91
15872: AND
15873: IFFALSE 15908
15875: GO 15877
15877: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15878: LD_INT 28
15880: PPUSH
15881: LD_OWVAR 2
15885: PPUSH
15886: LD_INT 2
15888: PPUSH
15889: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15893: LD_INT 30
15895: PPUSH
15896: LD_OWVAR 2
15900: PPUSH
15901: LD_INT 2
15903: PPUSH
15904: CALL_OW 322
// end ;
15908: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15909: LD_EXP 40
15913: PUSH
15914: LD_EXP 92
15918: AND
15919: IFFALSE 16040
15921: GO 15923
15923: DISABLE
15924: LD_INT 0
15926: PPUSH
15927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_INT 22
15935: PUSH
15936: LD_OWVAR 2
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 21
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 23
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: PPUSH
15977: CALL_OW 69
15981: ST_TO_ADDR
// if not tmp then
15982: LD_VAR 0 2
15986: NOT
15987: IFFALSE 15991
// exit ;
15989: GO 16040
// for i in tmp do
15991: LD_ADDR_VAR 0 1
15995: PUSH
15996: LD_VAR 0 2
16000: PUSH
16001: FOR_IN
16002: IFFALSE 16038
// begin if Crawls ( i ) then
16004: LD_VAR 0 1
16008: PPUSH
16009: CALL_OW 318
16013: IFFALSE 16024
// ComWalk ( i ) ;
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL_OW 138
// SetClass ( i , 2 ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: LD_INT 2
16031: PPUSH
16032: CALL_OW 336
// end ;
16036: GO 16001
16038: POP
16039: POP
// end ;
16040: PPOPN 2
16042: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16043: LD_EXP 40
16047: PUSH
16048: LD_EXP 93
16052: AND
16053: IFFALSE 16341
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
16062: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16063: LD_OWVAR 2
16067: PPUSH
16068: LD_INT 9
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16081: LD_INT 9
16083: PPUSH
16084: LD_OWVAR 2
16088: PPUSH
16089: CALL_OW 343
// uc_side := 9 ;
16093: LD_ADDR_OWVAR 20
16097: PUSH
16098: LD_INT 9
16100: ST_TO_ADDR
// uc_nation := 2 ;
16101: LD_ADDR_OWVAR 21
16105: PUSH
16106: LD_INT 2
16108: ST_TO_ADDR
// hc_name := Dark Warrior ;
16109: LD_ADDR_OWVAR 26
16113: PUSH
16114: LD_STRING Dark Warrior
16116: ST_TO_ADDR
// hc_gallery :=  ;
16117: LD_ADDR_OWVAR 33
16121: PUSH
16122: LD_STRING 
16124: ST_TO_ADDR
// hc_noskilllimit := true ;
16125: LD_ADDR_OWVAR 76
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16133: LD_ADDR_OWVAR 31
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 30
16143: PUSH
16144: LD_INT 30
16146: PUSH
16147: LD_INT 30
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: ST_TO_ADDR
// un := CreateHuman ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: CALL_OW 44
16165: ST_TO_ADDR
// hc_noskilllimit := false ;
16166: LD_ADDR_OWVAR 76
16170: PUSH
16171: LD_INT 0
16173: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 51
// ToLua ( playRanger() ) ;
16186: LD_STRING playRanger()
16188: PPUSH
16189: CALL_OW 559
// p := 0 ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16201: LD_INT 35
16203: PPUSH
16204: CALL_OW 67
// p := p + 1 ;
16208: LD_ADDR_VAR 0 2
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16222: LD_VAR 0 3
16226: PPUSH
16227: CALL_OW 256
16231: PUSH
16232: LD_INT 1000
16234: LESS
16235: IFFALSE 16249
// SetLives ( un , 1000 ) ;
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_INT 1000
16244: PPUSH
16245: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 81
16256: PUSH
16257: LD_OWVAR 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 91
16268: PUSH
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 30
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PPUSH
16291: LD_VAR 0 3
16295: PPUSH
16296: CALL_OW 74
16300: PPUSH
16301: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16305: LD_VAR 0 2
16309: PUSH
16310: LD_INT 80
16312: GREATER
16313: PUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: CALL_OW 301
16323: OR
16324: IFFALSE 16201
// if un then
16326: LD_VAR 0 3
16330: IFFALSE 16341
// RemoveUnit ( un ) ;
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 64
// end ;
16341: PPOPN 3
16343: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16344: LD_EXP 94
16348: IFFALSE 16464
16350: GO 16352
16352: DISABLE
16353: LD_INT 0
16355: PPUSH
16356: PPUSH
16357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_INT 81
16365: PUSH
16366: LD_OWVAR 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 21
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PPUSH
16389: CALL_OW 69
16393: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16394: LD_STRING playComputer()
16396: PPUSH
16397: CALL_OW 559
// if not tmp then
16401: LD_VAR 0 2
16405: NOT
16406: IFFALSE 16410
// exit ;
16408: GO 16464
// for i in tmp do
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: FOR_IN
16421: IFFALSE 16462
// for j := 1 to 4 do
16423: LD_ADDR_VAR 0 3
16427: PUSH
16428: DOUBLE
16429: LD_INT 1
16431: DEC
16432: ST_TO_ADDR
16433: LD_INT 4
16435: PUSH
16436: FOR_TO
16437: IFFALSE 16458
// SetSkill ( i , j , 10 ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 10
16451: PPUSH
16452: CALL_OW 237
16456: GO 16436
16458: POP
16459: POP
16460: GO 16420
16462: POP
16463: POP
// end ;
16464: PPOPN 3
16466: END
// every 0 0$1 trigger s30 do var i , tmp ;
16467: LD_EXP 95
16471: IFFALSE 16540
16473: GO 16475
16475: DISABLE
16476: LD_INT 0
16478: PPUSH
16479: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: ST_TO_ADDR
// if not tmp then
16502: LD_VAR 0 2
16506: NOT
16507: IFFALSE 16511
// exit ;
16509: GO 16540
// for i in tmp do
16511: LD_ADDR_VAR 0 1
16515: PUSH
16516: LD_VAR 0 2
16520: PUSH
16521: FOR_IN
16522: IFFALSE 16538
// SetLives ( i , 300 ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_INT 300
16531: PPUSH
16532: CALL_OW 234
16536: GO 16521
16538: POP
16539: POP
// end ;
16540: PPOPN 2
16542: END
// every 0 0$1 trigger s60 do var i , tmp ;
16543: LD_EXP 96
16547: IFFALSE 16616
16549: GO 16551
16551: DISABLE
16552: LD_INT 0
16554: PPUSH
16555: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_OWVAR 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// if not tmp then
16578: LD_VAR 0 2
16582: NOT
16583: IFFALSE 16587
// exit ;
16585: GO 16616
// for i in tmp do
16587: LD_ADDR_VAR 0 1
16591: PUSH
16592: LD_VAR 0 2
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16614
// SetLives ( i , 600 ) ;
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_INT 600
16607: PPUSH
16608: CALL_OW 234
16612: GO 16597
16614: POP
16615: POP
// end ;
16616: PPOPN 2
16618: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16619: LD_INT 0
16621: PPUSH
// case cmd of 301 :
16622: LD_VAR 0 1
16626: PUSH
16627: LD_INT 301
16629: DOUBLE
16630: EQUAL
16631: IFTRUE 16635
16633: GO 16667
16635: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16636: LD_VAR 0 6
16640: PPUSH
16641: LD_VAR 0 7
16645: PPUSH
16646: LD_VAR 0 8
16650: PPUSH
16651: LD_VAR 0 4
16655: PPUSH
16656: LD_VAR 0 5
16660: PPUSH
16661: CALL 17876 0 5
16665: GO 16788
16667: LD_INT 302
16669: DOUBLE
16670: EQUAL
16671: IFTRUE 16675
16673: GO 16712
16675: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16676: LD_VAR 0 6
16680: PPUSH
16681: LD_VAR 0 7
16685: PPUSH
16686: LD_VAR 0 8
16690: PPUSH
16691: LD_VAR 0 9
16695: PPUSH
16696: LD_VAR 0 4
16700: PPUSH
16701: LD_VAR 0 5
16705: PPUSH
16706: CALL 17967 0 6
16710: GO 16788
16712: LD_INT 303
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16757
16720: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16721: LD_VAR 0 6
16725: PPUSH
16726: LD_VAR 0 7
16730: PPUSH
16731: LD_VAR 0 8
16735: PPUSH
16736: LD_VAR 0 9
16740: PPUSH
16741: LD_VAR 0 4
16745: PPUSH
16746: LD_VAR 0 5
16750: PPUSH
16751: CALL 16793 0 6
16755: GO 16788
16757: LD_INT 304
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16787
16765: POP
// hHackTeleport ( unit , x , y ) ; end ;
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_VAR 0 4
16775: PPUSH
16776: LD_VAR 0 5
16780: PPUSH
16781: CALL 18560 0 3
16785: GO 16788
16787: POP
// end ;
16788: LD_VAR 0 12
16792: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16793: LD_INT 0
16795: PPUSH
16796: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16797: LD_VAR 0 1
16801: PUSH
16802: LD_INT 1
16804: LESS
16805: PUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 3
16813: GREATER
16814: OR
16815: PUSH
16816: LD_VAR 0 5
16820: PPUSH
16821: LD_VAR 0 6
16825: PPUSH
16826: CALL_OW 428
16830: OR
16831: IFFALSE 16835
// exit ;
16833: GO 17563
// uc_side := your_side ;
16835: LD_ADDR_OWVAR 20
16839: PUSH
16840: LD_OWVAR 2
16844: ST_TO_ADDR
// uc_nation := nation ;
16845: LD_ADDR_OWVAR 21
16849: PUSH
16850: LD_VAR 0 1
16854: ST_TO_ADDR
// bc_level = 1 ;
16855: LD_ADDR_OWVAR 43
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// case btype of 1 :
16863: LD_VAR 0 2
16867: PUSH
16868: LD_INT 1
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16887
16876: POP
// bc_type := b_depot ; 2 :
16877: LD_ADDR_OWVAR 42
16881: PUSH
16882: LD_INT 0
16884: ST_TO_ADDR
16885: GO 17507
16887: LD_INT 2
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16906
16895: POP
// bc_type := b_warehouse ; 3 :
16896: LD_ADDR_OWVAR 42
16900: PUSH
16901: LD_INT 1
16903: ST_TO_ADDR
16904: GO 17507
16906: LD_INT 3
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16925
16914: POP
// bc_type := b_lab ; 4 .. 9 :
16915: LD_ADDR_OWVAR 42
16919: PUSH
16920: LD_INT 6
16922: ST_TO_ADDR
16923: GO 17507
16925: LD_INT 4
16927: DOUBLE
16928: GREATEREQUAL
16929: IFFALSE 16937
16931: LD_INT 9
16933: DOUBLE
16934: LESSEQUAL
16935: IFTRUE 16939
16937: GO 16999
16939: POP
// begin bc_type := b_lab_half ;
16940: LD_ADDR_OWVAR 42
16944: PUSH
16945: LD_INT 7
16947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16948: LD_ADDR_OWVAR 44
16952: PUSH
16953: LD_INT 10
16955: PUSH
16956: LD_INT 11
16958: PUSH
16959: LD_INT 12
16961: PUSH
16962: LD_INT 15
16964: PUSH
16965: LD_INT 14
16967: PUSH
16968: LD_INT 13
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PUSH
16979: LD_VAR 0 2
16983: PUSH
16984: LD_INT 3
16986: MINUS
16987: ARRAY
16988: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
16989: LD_ADDR_OWVAR 45
16993: PUSH
16994: LD_INT 9
16996: ST_TO_ADDR
// end ; 10 .. 13 :
16997: GO 17507
16999: LD_INT 10
17001: DOUBLE
17002: GREATEREQUAL
17003: IFFALSE 17011
17005: LD_INT 13
17007: DOUBLE
17008: LESSEQUAL
17009: IFTRUE 17013
17011: GO 17090
17013: POP
// begin bc_type := b_lab_full ;
17014: LD_ADDR_OWVAR 42
17018: PUSH
17019: LD_INT 8
17021: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17022: LD_ADDR_OWVAR 44
17026: PUSH
17027: LD_INT 10
17029: PUSH
17030: LD_INT 12
17032: PUSH
17033: LD_INT 14
17035: PUSH
17036: LD_INT 13
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: PUSH
17045: LD_VAR 0 2
17049: PUSH
17050: LD_INT 9
17052: MINUS
17053: ARRAY
17054: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17055: LD_ADDR_OWVAR 45
17059: PUSH
17060: LD_INT 11
17062: PUSH
17063: LD_INT 15
17065: PUSH
17066: LD_INT 12
17068: PUSH
17069: LD_INT 15
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: LD_VAR 0 2
17082: PUSH
17083: LD_INT 9
17085: MINUS
17086: ARRAY
17087: ST_TO_ADDR
// end ; 14 :
17088: GO 17507
17090: LD_INT 14
17092: DOUBLE
17093: EQUAL
17094: IFTRUE 17098
17096: GO 17109
17098: POP
// bc_type := b_workshop ; 15 :
17099: LD_ADDR_OWVAR 42
17103: PUSH
17104: LD_INT 2
17106: ST_TO_ADDR
17107: GO 17507
17109: LD_INT 15
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17128
17117: POP
// bc_type := b_factory ; 16 :
17118: LD_ADDR_OWVAR 42
17122: PUSH
17123: LD_INT 3
17125: ST_TO_ADDR
17126: GO 17507
17128: LD_INT 16
17130: DOUBLE
17131: EQUAL
17132: IFTRUE 17136
17134: GO 17147
17136: POP
// bc_type := b_ext_gun ; 17 :
17137: LD_ADDR_OWVAR 42
17141: PUSH
17142: LD_INT 17
17144: ST_TO_ADDR
17145: GO 17507
17147: LD_INT 17
17149: DOUBLE
17150: EQUAL
17151: IFTRUE 17155
17153: GO 17183
17155: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17156: LD_ADDR_OWVAR 42
17160: PUSH
17161: LD_INT 19
17163: PUSH
17164: LD_INT 23
17166: PUSH
17167: LD_INT 19
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: LIST
17174: PUSH
17175: LD_VAR 0 1
17179: ARRAY
17180: ST_TO_ADDR
17181: GO 17507
17183: LD_INT 18
17185: DOUBLE
17186: EQUAL
17187: IFTRUE 17191
17189: GO 17202
17191: POP
// bc_type := b_ext_radar ; 19 :
17192: LD_ADDR_OWVAR 42
17196: PUSH
17197: LD_INT 20
17199: ST_TO_ADDR
17200: GO 17507
17202: LD_INT 19
17204: DOUBLE
17205: EQUAL
17206: IFTRUE 17210
17208: GO 17221
17210: POP
// bc_type := b_ext_radio ; 20 :
17211: LD_ADDR_OWVAR 42
17215: PUSH
17216: LD_INT 22
17218: ST_TO_ADDR
17219: GO 17507
17221: LD_INT 20
17223: DOUBLE
17224: EQUAL
17225: IFTRUE 17229
17227: GO 17240
17229: POP
// bc_type := b_ext_siberium ; 21 :
17230: LD_ADDR_OWVAR 42
17234: PUSH
17235: LD_INT 21
17237: ST_TO_ADDR
17238: GO 17507
17240: LD_INT 21
17242: DOUBLE
17243: EQUAL
17244: IFTRUE 17248
17246: GO 17259
17248: POP
// bc_type := b_ext_computer ; 22 :
17249: LD_ADDR_OWVAR 42
17253: PUSH
17254: LD_INT 24
17256: ST_TO_ADDR
17257: GO 17507
17259: LD_INT 22
17261: DOUBLE
17262: EQUAL
17263: IFTRUE 17267
17265: GO 17278
17267: POP
// bc_type := b_ext_track ; 23 :
17268: LD_ADDR_OWVAR 42
17272: PUSH
17273: LD_INT 16
17275: ST_TO_ADDR
17276: GO 17507
17278: LD_INT 23
17280: DOUBLE
17281: EQUAL
17282: IFTRUE 17286
17284: GO 17297
17286: POP
// bc_type := b_ext_laser ; 24 :
17287: LD_ADDR_OWVAR 42
17291: PUSH
17292: LD_INT 25
17294: ST_TO_ADDR
17295: GO 17507
17297: LD_INT 24
17299: DOUBLE
17300: EQUAL
17301: IFTRUE 17305
17303: GO 17316
17305: POP
// bc_type := b_control_tower ; 25 :
17306: LD_ADDR_OWVAR 42
17310: PUSH
17311: LD_INT 36
17313: ST_TO_ADDR
17314: GO 17507
17316: LD_INT 25
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17335
17324: POP
// bc_type := b_breastwork ; 26 :
17325: LD_ADDR_OWVAR 42
17329: PUSH
17330: LD_INT 31
17332: ST_TO_ADDR
17333: GO 17507
17335: LD_INT 26
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17354
17343: POP
// bc_type := b_bunker ; 27 :
17344: LD_ADDR_OWVAR 42
17348: PUSH
17349: LD_INT 32
17351: ST_TO_ADDR
17352: GO 17507
17354: LD_INT 27
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17373
17362: POP
// bc_type := b_turret ; 28 :
17363: LD_ADDR_OWVAR 42
17367: PUSH
17368: LD_INT 33
17370: ST_TO_ADDR
17371: GO 17507
17373: LD_INT 28
17375: DOUBLE
17376: EQUAL
17377: IFTRUE 17381
17379: GO 17392
17381: POP
// bc_type := b_armoury ; 29 :
17382: LD_ADDR_OWVAR 42
17386: PUSH
17387: LD_INT 4
17389: ST_TO_ADDR
17390: GO 17507
17392: LD_INT 29
17394: DOUBLE
17395: EQUAL
17396: IFTRUE 17400
17398: GO 17411
17400: POP
// bc_type := b_barracks ; 30 :
17401: LD_ADDR_OWVAR 42
17405: PUSH
17406: LD_INT 5
17408: ST_TO_ADDR
17409: GO 17507
17411: LD_INT 30
17413: DOUBLE
17414: EQUAL
17415: IFTRUE 17419
17417: GO 17430
17419: POP
// bc_type := b_solar_power ; 31 :
17420: LD_ADDR_OWVAR 42
17424: PUSH
17425: LD_INT 27
17427: ST_TO_ADDR
17428: GO 17507
17430: LD_INT 31
17432: DOUBLE
17433: EQUAL
17434: IFTRUE 17438
17436: GO 17449
17438: POP
// bc_type := b_oil_power ; 32 :
17439: LD_ADDR_OWVAR 42
17443: PUSH
17444: LD_INT 26
17446: ST_TO_ADDR
17447: GO 17507
17449: LD_INT 32
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17468
17457: POP
// bc_type := b_siberite_power ; 33 :
17458: LD_ADDR_OWVAR 42
17462: PUSH
17463: LD_INT 28
17465: ST_TO_ADDR
17466: GO 17507
17468: LD_INT 33
17470: DOUBLE
17471: EQUAL
17472: IFTRUE 17476
17474: GO 17487
17476: POP
// bc_type := b_oil_mine ; 34 :
17477: LD_ADDR_OWVAR 42
17481: PUSH
17482: LD_INT 29
17484: ST_TO_ADDR
17485: GO 17507
17487: LD_INT 34
17489: DOUBLE
17490: EQUAL
17491: IFTRUE 17495
17493: GO 17506
17495: POP
// bc_type := b_siberite_mine ; end ;
17496: LD_ADDR_OWVAR 42
17500: PUSH
17501: LD_INT 30
17503: ST_TO_ADDR
17504: GO 17507
17506: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17507: LD_ADDR_VAR 0 8
17511: PUSH
17512: LD_VAR 0 5
17516: PPUSH
17517: LD_VAR 0 6
17521: PPUSH
17522: LD_VAR 0 3
17526: PPUSH
17527: CALL_OW 47
17531: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17532: LD_OWVAR 42
17536: PUSH
17537: LD_INT 32
17539: PUSH
17540: LD_INT 33
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: IN
17547: IFFALSE 17563
// PlaceWeaponTurret ( b , weapon ) ;
17549: LD_VAR 0 8
17553: PPUSH
17554: LD_VAR 0 4
17558: PPUSH
17559: CALL_OW 431
// end ;
17563: LD_VAR 0 7
17567: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17568: LD_INT 0
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17574: LD_ADDR_VAR 0 4
17578: PUSH
17579: LD_INT 22
17581: PUSH
17582: LD_OWVAR 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: LD_INT 30
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 30
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: ST_TO_ADDR
// if not tmp then
17628: LD_VAR 0 4
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17696
// for i in tmp do
17637: LD_ADDR_VAR 0 2
17641: PUSH
17642: LD_VAR 0 4
17646: PUSH
17647: FOR_IN
17648: IFFALSE 17694
// for j = 1 to 3 do
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: DOUBLE
17656: LD_INT 1
17658: DEC
17659: ST_TO_ADDR
17660: LD_INT 3
17662: PUSH
17663: FOR_TO
17664: IFFALSE 17690
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17666: LD_VAR 0 2
17670: PPUSH
17671: CALL_OW 274
17675: PPUSH
17676: LD_VAR 0 3
17680: PPUSH
17681: LD_INT 99999
17683: PPUSH
17684: CALL_OW 277
17688: GO 17663
17690: POP
17691: POP
17692: GO 17647
17694: POP
17695: POP
// end ;
17696: LD_VAR 0 1
17700: RET
// export function hHackSetLevel10 ; var i , j ; begin
17701: LD_INT 0
17703: PPUSH
17704: PPUSH
17705: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 21
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: PUSH
17726: FOR_IN
17727: IFFALSE 17779
// if IsSelected ( i ) then
17729: LD_VAR 0 2
17733: PPUSH
17734: CALL_OW 306
17738: IFFALSE 17777
// begin for j := 1 to 4 do
17740: LD_ADDR_VAR 0 3
17744: PUSH
17745: DOUBLE
17746: LD_INT 1
17748: DEC
17749: ST_TO_ADDR
17750: LD_INT 4
17752: PUSH
17753: FOR_TO
17754: IFFALSE 17775
// SetSkill ( i , j , 10 ) ;
17756: LD_VAR 0 2
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: LD_INT 10
17768: PPUSH
17769: CALL_OW 237
17773: GO 17753
17775: POP
17776: POP
// end ;
17777: GO 17726
17779: POP
17780: POP
// end ;
17781: LD_VAR 0 1
17785: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17786: LD_INT 0
17788: PPUSH
17789: PPUSH
17790: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17791: LD_ADDR_VAR 0 2
17795: PUSH
17796: LD_INT 22
17798: PUSH
17799: LD_OWVAR 2
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 21
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: PUSH
17827: FOR_IN
17828: IFFALSE 17869
// begin for j := 1 to 4 do
17830: LD_ADDR_VAR 0 3
17834: PUSH
17835: DOUBLE
17836: LD_INT 1
17838: DEC
17839: ST_TO_ADDR
17840: LD_INT 4
17842: PUSH
17843: FOR_TO
17844: IFFALSE 17865
// SetSkill ( i , j , 10 ) ;
17846: LD_VAR 0 2
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_INT 10
17858: PPUSH
17859: CALL_OW 237
17863: GO 17843
17865: POP
17866: POP
// end ;
17867: GO 17827
17869: POP
17870: POP
// end ;
17871: LD_VAR 0 1
17875: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17876: LD_INT 0
17878: PPUSH
// uc_side := your_side ;
17879: LD_ADDR_OWVAR 20
17883: PUSH
17884: LD_OWVAR 2
17888: ST_TO_ADDR
// uc_nation := nation ;
17889: LD_ADDR_OWVAR 21
17893: PUSH
17894: LD_VAR 0 1
17898: ST_TO_ADDR
// InitHc ;
17899: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17903: LD_INT 0
17905: PPUSH
17906: LD_VAR 0 2
17910: PPUSH
17911: LD_VAR 0 3
17915: PPUSH
17916: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17920: LD_VAR 0 4
17924: PPUSH
17925: LD_VAR 0 5
17929: PPUSH
17930: CALL_OW 428
17934: PUSH
17935: LD_INT 0
17937: EQUAL
17938: IFFALSE 17962
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17940: CALL_OW 44
17944: PPUSH
17945: LD_VAR 0 4
17949: PPUSH
17950: LD_VAR 0 5
17954: PPUSH
17955: LD_INT 1
17957: PPUSH
17958: CALL_OW 48
// end ;
17962: LD_VAR 0 6
17966: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
// uc_side := your_side ;
17971: LD_ADDR_OWVAR 20
17975: PUSH
17976: LD_OWVAR 2
17980: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 3
17994: PUSH
17995: LD_INT 4
17997: PUSH
17998: LD_INT 5
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: IN
18008: IFFALSE 18020
// uc_nation := nation_american else
18010: LD_ADDR_OWVAR 21
18014: PUSH
18015: LD_INT 1
18017: ST_TO_ADDR
18018: GO 18063
// if chassis in [ 11 , 12 , 13 , 14 ] then
18020: LD_VAR 0 1
18024: PUSH
18025: LD_INT 11
18027: PUSH
18028: LD_INT 12
18030: PUSH
18031: LD_INT 13
18033: PUSH
18034: LD_INT 14
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: IN
18043: IFFALSE 18055
// uc_nation := nation_arabian else
18045: LD_ADDR_OWVAR 21
18049: PUSH
18050: LD_INT 2
18052: ST_TO_ADDR
18053: GO 18063
// uc_nation := nation_russian ;
18055: LD_ADDR_OWVAR 21
18059: PUSH
18060: LD_INT 3
18062: ST_TO_ADDR
// vc_chassis := chassis ;
18063: LD_ADDR_OWVAR 37
18067: PUSH
18068: LD_VAR 0 1
18072: ST_TO_ADDR
// vc_engine := engine ;
18073: LD_ADDR_OWVAR 39
18077: PUSH
18078: LD_VAR 0 2
18082: ST_TO_ADDR
// vc_control := control ;
18083: LD_ADDR_OWVAR 38
18087: PUSH
18088: LD_VAR 0 3
18092: ST_TO_ADDR
// vc_weapon := weapon ;
18093: LD_ADDR_OWVAR 40
18097: PUSH
18098: LD_VAR 0 4
18102: ST_TO_ADDR
// un := CreateVehicle ;
18103: LD_ADDR_VAR 0 8
18107: PUSH
18108: CALL_OW 45
18112: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18113: LD_VAR 0 8
18117: PPUSH
18118: LD_INT 0
18120: PPUSH
18121: LD_INT 5
18123: PPUSH
18124: CALL_OW 12
18128: PPUSH
18129: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18133: LD_VAR 0 8
18137: PPUSH
18138: LD_VAR 0 5
18142: PPUSH
18143: LD_VAR 0 6
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 48
// end ;
18155: LD_VAR 0 7
18159: RET
// export hInvincible ; every 1 do
18160: GO 18162
18162: DISABLE
// hInvincible := [ ] ;
18163: LD_ADDR_EXP 97
18167: PUSH
18168: EMPTY
18169: ST_TO_ADDR
18170: END
// every 10 do var i ;
18171: GO 18173
18173: DISABLE
18174: LD_INT 0
18176: PPUSH
// begin enable ;
18177: ENABLE
// if not hInvincible then
18178: LD_EXP 97
18182: NOT
18183: IFFALSE 18187
// exit ;
18185: GO 18231
// for i in hInvincible do
18187: LD_ADDR_VAR 0 1
18191: PUSH
18192: LD_EXP 97
18196: PUSH
18197: FOR_IN
18198: IFFALSE 18229
// if GetLives ( i ) < 1000 then
18200: LD_VAR 0 1
18204: PPUSH
18205: CALL_OW 256
18209: PUSH
18210: LD_INT 1000
18212: LESS
18213: IFFALSE 18227
// SetLives ( i , 1000 ) ;
18215: LD_VAR 0 1
18219: PPUSH
18220: LD_INT 1000
18222: PPUSH
18223: CALL_OW 234
18227: GO 18197
18229: POP
18230: POP
// end ;
18231: PPOPN 1
18233: END
// export function hHackInvincible ; var i ; begin
18234: LD_INT 0
18236: PPUSH
18237: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18238: LD_ADDR_VAR 0 2
18242: PUSH
18243: LD_INT 2
18245: PUSH
18246: LD_INT 21
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 21
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18338
// if IsSelected ( i ) then
18279: LD_VAR 0 2
18283: PPUSH
18284: CALL_OW 306
18288: IFFALSE 18336
// begin if i in hInvincible then
18290: LD_VAR 0 2
18294: PUSH
18295: LD_EXP 97
18299: IN
18300: IFFALSE 18320
// hInvincible := hInvincible diff i else
18302: LD_ADDR_EXP 97
18306: PUSH
18307: LD_EXP 97
18311: PUSH
18312: LD_VAR 0 2
18316: DIFF
18317: ST_TO_ADDR
18318: GO 18336
// hInvincible := hInvincible union i ;
18320: LD_ADDR_EXP 97
18324: PUSH
18325: LD_EXP 97
18329: PUSH
18330: LD_VAR 0 2
18334: UNION
18335: ST_TO_ADDR
// end ;
18336: GO 18276
18338: POP
18339: POP
// end ;
18340: LD_VAR 0 1
18344: RET
// export function hHackInvisible ; var i , j ; begin
18345: LD_INT 0
18347: PPUSH
18348: PPUSH
18349: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18350: LD_ADDR_VAR 0 2
18354: PUSH
18355: LD_INT 21
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PPUSH
18365: CALL_OW 69
18369: PUSH
18370: FOR_IN
18371: IFFALSE 18395
// if IsSelected ( i ) then
18373: LD_VAR 0 2
18377: PPUSH
18378: CALL_OW 306
18382: IFFALSE 18393
// ComForceInvisible ( i ) ;
18384: LD_VAR 0 2
18388: PPUSH
18389: CALL_OW 496
18393: GO 18370
18395: POP
18396: POP
// end ;
18397: LD_VAR 0 1
18401: RET
// export function hHackChangeYourSide ; begin
18402: LD_INT 0
18404: PPUSH
// if your_side = 8 then
18405: LD_OWVAR 2
18409: PUSH
18410: LD_INT 8
18412: EQUAL
18413: IFFALSE 18425
// your_side := 0 else
18415: LD_ADDR_OWVAR 2
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
18423: GO 18439
// your_side := your_side + 1 ;
18425: LD_ADDR_OWVAR 2
18429: PUSH
18430: LD_OWVAR 2
18434: PUSH
18435: LD_INT 1
18437: PLUS
18438: ST_TO_ADDR
// end ;
18439: LD_VAR 0 1
18443: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
18448: PPUSH
// for i in all_units do
18449: LD_ADDR_VAR 0 2
18453: PUSH
18454: LD_OWVAR 3
18458: PUSH
18459: FOR_IN
18460: IFFALSE 18538
// if IsSelected ( i ) then
18462: LD_VAR 0 2
18466: PPUSH
18467: CALL_OW 306
18471: IFFALSE 18536
// begin j := GetSide ( i ) ;
18473: LD_ADDR_VAR 0 3
18477: PUSH
18478: LD_VAR 0 2
18482: PPUSH
18483: CALL_OW 255
18487: ST_TO_ADDR
// if j = 8 then
18488: LD_VAR 0 3
18492: PUSH
18493: LD_INT 8
18495: EQUAL
18496: IFFALSE 18508
// j := 0 else
18498: LD_ADDR_VAR 0 3
18502: PUSH
18503: LD_INT 0
18505: ST_TO_ADDR
18506: GO 18522
// j := j + 1 ;
18508: LD_ADDR_VAR 0 3
18512: PUSH
18513: LD_VAR 0 3
18517: PUSH
18518: LD_INT 1
18520: PLUS
18521: ST_TO_ADDR
// SetSide ( i , j ) ;
18522: LD_VAR 0 2
18526: PPUSH
18527: LD_VAR 0 3
18531: PPUSH
18532: CALL_OW 235
// end ;
18536: GO 18459
18538: POP
18539: POP
// end ;
18540: LD_VAR 0 1
18544: RET
// export function hHackFog ; begin
18545: LD_INT 0
18547: PPUSH
// FogOff ( true ) ;
18548: LD_INT 1
18550: PPUSH
18551: CALL_OW 344
// end ;
18555: LD_VAR 0 1
18559: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18560: LD_INT 0
18562: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18563: LD_VAR 0 1
18567: PPUSH
18568: LD_VAR 0 2
18572: PPUSH
18573: LD_VAR 0 3
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: LD_INT 1
18583: PPUSH
18584: CALL_OW 483
// CenterOnXY ( x , y ) ;
18588: LD_VAR 0 2
18592: PPUSH
18593: LD_VAR 0 3
18597: PPUSH
18598: CALL_OW 84
// end ;
18602: LD_VAR 0 4
18606: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18611: LD_VAR 0 1
18615: NOT
18616: PUSH
18617: LD_VAR 0 2
18621: PPUSH
18622: LD_VAR 0 3
18626: PPUSH
18627: CALL_OW 488
18631: NOT
18632: OR
18633: PUSH
18634: LD_VAR 0 1
18638: PPUSH
18639: CALL_OW 266
18643: PUSH
18644: LD_INT 3
18646: NONEQUAL
18647: PUSH
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 247
18657: PUSH
18658: LD_INT 1
18660: EQUAL
18661: NOT
18662: AND
18663: OR
18664: IFFALSE 18668
// exit ;
18666: GO 18817
// if GetType ( factory ) = unit_human then
18668: LD_VAR 0 1
18672: PPUSH
18673: CALL_OW 247
18677: PUSH
18678: LD_INT 1
18680: EQUAL
18681: IFFALSE 18698
// factory := IsInUnit ( factory ) ;
18683: LD_ADDR_VAR 0 1
18687: PUSH
18688: LD_VAR 0 1
18692: PPUSH
18693: CALL_OW 310
18697: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18698: LD_VAR 0 1
18702: PPUSH
18703: CALL_OW 266
18707: PUSH
18708: LD_INT 3
18710: NONEQUAL
18711: IFFALSE 18715
// exit ;
18713: GO 18817
// if HexInfo ( x , y ) = factory then
18715: LD_VAR 0 2
18719: PPUSH
18720: LD_VAR 0 3
18724: PPUSH
18725: CALL_OW 428
18729: PUSH
18730: LD_VAR 0 1
18734: EQUAL
18735: IFFALSE 18762
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18737: LD_ADDR_EXP 98
18741: PUSH
18742: LD_EXP 98
18746: PPUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: LD_INT 0
18754: PPUSH
18755: CALL_OW 1
18759: ST_TO_ADDR
18760: GO 18813
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18762: LD_ADDR_EXP 98
18766: PUSH
18767: LD_EXP 98
18771: PPUSH
18772: LD_VAR 0 1
18776: PPUSH
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 255
18786: PUSH
18787: LD_VAR 0 1
18791: PUSH
18792: LD_VAR 0 2
18796: PUSH
18797: LD_VAR 0 3
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 1
18812: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18813: CALL 18822 0 0
// end ;
18817: LD_VAR 0 4
18821: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18822: LD_INT 0
18824: PPUSH
18825: PPUSH
18826: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18827: LD_STRING resetFactoryWaypoint();
18829: PPUSH
18830: CALL_OW 559
// if factoryWaypoints then
18834: LD_EXP 98
18838: IFFALSE 18964
// begin list := PrepareArray ( factoryWaypoints ) ;
18840: LD_ADDR_VAR 0 3
18844: PUSH
18845: LD_EXP 98
18849: PPUSH
18850: CALL 66106 0 1
18854: ST_TO_ADDR
// for i := 1 to list do
18855: LD_ADDR_VAR 0 2
18859: PUSH
18860: DOUBLE
18861: LD_INT 1
18863: DEC
18864: ST_TO_ADDR
18865: LD_VAR 0 3
18869: PUSH
18870: FOR_TO
18871: IFFALSE 18962
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18873: LD_STRING setFactoryWaypointXY(
18875: PUSH
18876: LD_VAR 0 3
18880: PUSH
18881: LD_VAR 0 2
18885: ARRAY
18886: PUSH
18887: LD_INT 1
18889: ARRAY
18890: STR
18891: PUSH
18892: LD_STRING ,
18894: STR
18895: PUSH
18896: LD_VAR 0 3
18900: PUSH
18901: LD_VAR 0 2
18905: ARRAY
18906: PUSH
18907: LD_INT 2
18909: ARRAY
18910: STR
18911: PUSH
18912: LD_STRING ,
18914: STR
18915: PUSH
18916: LD_VAR 0 3
18920: PUSH
18921: LD_VAR 0 2
18925: ARRAY
18926: PUSH
18927: LD_INT 3
18929: ARRAY
18930: STR
18931: PUSH
18932: LD_STRING ,
18934: STR
18935: PUSH
18936: LD_VAR 0 3
18940: PUSH
18941: LD_VAR 0 2
18945: ARRAY
18946: PUSH
18947: LD_INT 4
18949: ARRAY
18950: STR
18951: PUSH
18952: LD_STRING )
18954: STR
18955: PPUSH
18956: CALL_OW 559
18960: GO 18870
18962: POP
18963: POP
// end ; end ;
18964: LD_VAR 0 1
18968: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
18969: LD_INT 0
18971: PPUSH
// if HexInfo ( x , y ) = warehouse then
18972: LD_VAR 0 2
18976: PPUSH
18977: LD_VAR 0 3
18981: PPUSH
18982: CALL_OW 428
18986: PUSH
18987: LD_VAR 0 1
18991: EQUAL
18992: IFFALSE 19019
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
18994: LD_ADDR_EXP 99
18998: PUSH
18999: LD_EXP 99
19003: PPUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: LD_INT 0
19011: PPUSH
19012: CALL_OW 1
19016: ST_TO_ADDR
19017: GO 19070
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19019: LD_ADDR_EXP 99
19023: PUSH
19024: LD_EXP 99
19028: PPUSH
19029: LD_VAR 0 1
19033: PPUSH
19034: LD_VAR 0 1
19038: PPUSH
19039: CALL_OW 255
19043: PUSH
19044: LD_VAR 0 1
19048: PUSH
19049: LD_VAR 0 2
19053: PUSH
19054: LD_VAR 0 3
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 1
19069: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19070: CALL 19079 0 0
// end ;
19074: LD_VAR 0 4
19078: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
19083: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19084: LD_STRING resetWarehouseGatheringPoints();
19086: PPUSH
19087: CALL_OW 559
// if warehouseGatheringPoints then
19091: LD_EXP 99
19095: IFFALSE 19221
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19097: LD_ADDR_VAR 0 3
19101: PUSH
19102: LD_EXP 99
19106: PPUSH
19107: CALL 66106 0 1
19111: ST_TO_ADDR
// for i := 1 to list do
19112: LD_ADDR_VAR 0 2
19116: PUSH
19117: DOUBLE
19118: LD_INT 1
19120: DEC
19121: ST_TO_ADDR
19122: LD_VAR 0 3
19126: PUSH
19127: FOR_TO
19128: IFFALSE 19219
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19130: LD_STRING setWarehouseGatheringPointXY(
19132: PUSH
19133: LD_VAR 0 3
19137: PUSH
19138: LD_VAR 0 2
19142: ARRAY
19143: PUSH
19144: LD_INT 1
19146: ARRAY
19147: STR
19148: PUSH
19149: LD_STRING ,
19151: STR
19152: PUSH
19153: LD_VAR 0 3
19157: PUSH
19158: LD_VAR 0 2
19162: ARRAY
19163: PUSH
19164: LD_INT 2
19166: ARRAY
19167: STR
19168: PUSH
19169: LD_STRING ,
19171: STR
19172: PUSH
19173: LD_VAR 0 3
19177: PUSH
19178: LD_VAR 0 2
19182: ARRAY
19183: PUSH
19184: LD_INT 3
19186: ARRAY
19187: STR
19188: PUSH
19189: LD_STRING ,
19191: STR
19192: PUSH
19193: LD_VAR 0 3
19197: PUSH
19198: LD_VAR 0 2
19202: ARRAY
19203: PUSH
19204: LD_INT 4
19206: ARRAY
19207: STR
19208: PUSH
19209: LD_STRING )
19211: STR
19212: PPUSH
19213: CALL_OW 559
19217: GO 19127
19219: POP
19220: POP
// end ; end ;
19221: LD_VAR 0 1
19225: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19226: LD_EXP 99
19230: IFFALSE 19915
19232: GO 19234
19234: DISABLE
19235: LD_INT 0
19237: PPUSH
19238: PPUSH
19239: PPUSH
19240: PPUSH
19241: PPUSH
19242: PPUSH
19243: PPUSH
19244: PPUSH
19245: PPUSH
// begin enable ;
19246: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19247: LD_ADDR_VAR 0 3
19251: PUSH
19252: LD_EXP 99
19256: PPUSH
19257: CALL 66106 0 1
19261: ST_TO_ADDR
// if not list then
19262: LD_VAR 0 3
19266: NOT
19267: IFFALSE 19271
// exit ;
19269: GO 19915
// for i := 1 to list do
19271: LD_ADDR_VAR 0 1
19275: PUSH
19276: DOUBLE
19277: LD_INT 1
19279: DEC
19280: ST_TO_ADDR
19281: LD_VAR 0 3
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19913
// begin depot := list [ i ] [ 2 ] ;
19289: LD_ADDR_VAR 0 8
19293: PUSH
19294: LD_VAR 0 3
19298: PUSH
19299: LD_VAR 0 1
19303: ARRAY
19304: PUSH
19305: LD_INT 2
19307: ARRAY
19308: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19309: LD_ADDR_VAR 0 5
19313: PUSH
19314: LD_VAR 0 3
19318: PUSH
19319: LD_VAR 0 1
19323: ARRAY
19324: PUSH
19325: LD_INT 1
19327: ARRAY
19328: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19329: LD_VAR 0 8
19333: PPUSH
19334: CALL_OW 301
19338: PUSH
19339: LD_VAR 0 5
19343: PUSH
19344: LD_VAR 0 8
19348: PPUSH
19349: CALL_OW 255
19353: NONEQUAL
19354: OR
19355: IFFALSE 19384
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19357: LD_ADDR_EXP 99
19361: PUSH
19362: LD_EXP 99
19366: PPUSH
19367: LD_VAR 0 8
19371: PPUSH
19372: LD_INT 0
19374: PPUSH
19375: CALL_OW 1
19379: ST_TO_ADDR
// exit ;
19380: POP
19381: POP
19382: GO 19915
// end ; x := list [ i ] [ 3 ] ;
19384: LD_ADDR_VAR 0 6
19388: PUSH
19389: LD_VAR 0 3
19393: PUSH
19394: LD_VAR 0 1
19398: ARRAY
19399: PUSH
19400: LD_INT 3
19402: ARRAY
19403: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19404: LD_ADDR_VAR 0 7
19408: PUSH
19409: LD_VAR 0 3
19413: PUSH
19414: LD_VAR 0 1
19418: ARRAY
19419: PUSH
19420: LD_INT 4
19422: ARRAY
19423: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19424: LD_ADDR_VAR 0 9
19428: PUSH
19429: LD_VAR 0 6
19433: PPUSH
19434: LD_VAR 0 7
19438: PPUSH
19439: LD_INT 16
19441: PPUSH
19442: CALL 64694 0 3
19446: ST_TO_ADDR
// if not cratesNearbyPoint then
19447: LD_VAR 0 9
19451: NOT
19452: IFFALSE 19458
// exit ;
19454: POP
19455: POP
19456: GO 19915
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19458: LD_ADDR_VAR 0 4
19462: PUSH
19463: LD_INT 22
19465: PUSH
19466: LD_VAR 0 5
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 3
19477: PUSH
19478: LD_INT 60
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 91
19490: PUSH
19491: LD_VAR 0 8
19495: PUSH
19496: LD_INT 6
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 25
19509: PUSH
19510: LD_INT 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 25
19519: PUSH
19520: LD_INT 16
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: LIST
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: PUSH
19543: LD_VAR 0 8
19547: PPUSH
19548: CALL_OW 313
19552: PPUSH
19553: LD_INT 3
19555: PUSH
19556: LD_INT 60
19558: PUSH
19559: EMPTY
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 25
19571: PUSH
19572: LD_INT 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 25
19581: PUSH
19582: LD_INT 16
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PPUSH
19598: CALL_OW 72
19602: UNION
19603: ST_TO_ADDR
// if tmp then
19604: LD_VAR 0 4
19608: IFFALSE 19688
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19610: LD_ADDR_VAR 0 4
19614: PUSH
19615: LD_VAR 0 4
19619: PPUSH
19620: LD_INT 3
19622: PPUSH
19623: CALL 62663 0 2
19627: ST_TO_ADDR
// for j in tmp do
19628: LD_ADDR_VAR 0 2
19632: PUSH
19633: LD_VAR 0 4
19637: PUSH
19638: FOR_IN
19639: IFFALSE 19682
// begin if IsInUnit ( j ) then
19641: LD_VAR 0 2
19645: PPUSH
19646: CALL_OW 310
19650: IFFALSE 19661
// ComExit ( j ) ;
19652: LD_VAR 0 2
19656: PPUSH
19657: CALL 62746 0 1
// AddComCollect ( j , x , y ) ;
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_VAR 0 6
19670: PPUSH
19671: LD_VAR 0 7
19675: PPUSH
19676: CALL_OW 177
// end ;
19680: GO 19638
19682: POP
19683: POP
// exit ;
19684: POP
19685: POP
19686: GO 19915
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19688: LD_ADDR_VAR 0 4
19692: PUSH
19693: LD_INT 22
19695: PUSH
19696: LD_VAR 0 5
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 91
19707: PUSH
19708: LD_VAR 0 8
19712: PUSH
19713: LD_INT 8
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 34
19726: PUSH
19727: LD_INT 12
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 34
19736: PUSH
19737: LD_INT 51
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 34
19746: PUSH
19747: LD_INT 32
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 34
19756: PUSH
19757: LD_INT 89
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: PPUSH
19776: CALL_OW 69
19780: ST_TO_ADDR
// if tmp then
19781: LD_VAR 0 4
19785: IFFALSE 19911
// begin for j in tmp do
19787: LD_ADDR_VAR 0 2
19791: PUSH
19792: LD_VAR 0 4
19796: PUSH
19797: FOR_IN
19798: IFFALSE 19909
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19800: LD_VAR 0 2
19804: PPUSH
19805: CALL_OW 262
19809: PUSH
19810: LD_INT 3
19812: EQUAL
19813: PUSH
19814: LD_VAR 0 2
19818: PPUSH
19819: CALL_OW 261
19823: PUSH
19824: LD_INT 20
19826: GREATER
19827: OR
19828: PUSH
19829: LD_VAR 0 2
19833: PPUSH
19834: CALL_OW 314
19838: NOT
19839: AND
19840: PUSH
19841: LD_VAR 0 2
19845: PPUSH
19846: CALL_OW 263
19850: PUSH
19851: LD_INT 1
19853: NONEQUAL
19854: PUSH
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 311
19864: OR
19865: AND
19866: IFFALSE 19907
// begin ComCollect ( j , x , y ) ;
19868: LD_VAR 0 2
19872: PPUSH
19873: LD_VAR 0 6
19877: PPUSH
19878: LD_VAR 0 7
19882: PPUSH
19883: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19887: LD_VAR 0 2
19891: PPUSH
19892: LD_VAR 0 8
19896: PPUSH
19897: CALL_OW 172
// exit ;
19901: POP
19902: POP
19903: POP
19904: POP
19905: GO 19915
// end ;
19907: GO 19797
19909: POP
19910: POP
// end ; end ;
19911: GO 19286
19913: POP
19914: POP
// end ; end_of_file
19915: PPOPN 9
19917: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19918: LD_INT 0
19920: PPUSH
19921: PPUSH
19922: PPUSH
19923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19924: LD_VAR 0 1
19928: PPUSH
19929: CALL_OW 264
19933: PUSH
19934: LD_INT 91
19936: EQUAL
19937: IFFALSE 20009
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19939: LD_INT 68
19941: PPUSH
19942: LD_VAR 0 1
19946: PPUSH
19947: CALL_OW 255
19951: PPUSH
19952: CALL_OW 321
19956: PUSH
19957: LD_INT 2
19959: EQUAL
19960: IFFALSE 19972
// eff := 70 else
19962: LD_ADDR_VAR 0 4
19966: PUSH
19967: LD_INT 70
19969: ST_TO_ADDR
19970: GO 19980
// eff := 30 ;
19972: LD_ADDR_VAR 0 4
19976: PUSH
19977: LD_INT 30
19979: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19980: LD_VAR 0 1
19984: PPUSH
19985: CALL_OW 250
19989: PPUSH
19990: LD_VAR 0 1
19994: PPUSH
19995: CALL_OW 251
19999: PPUSH
20000: LD_VAR 0 4
20004: PPUSH
20005: CALL_OW 495
// end ; end ;
20009: LD_VAR 0 2
20013: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20014: LD_INT 0
20016: PPUSH
// end ;
20017: LD_VAR 0 4
20021: RET
// export function SOS_Command ( cmd ) ; begin
20022: LD_INT 0
20024: PPUSH
// end ;
20025: LD_VAR 0 2
20029: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20030: LD_INT 0
20032: PPUSH
// end ;
20033: LD_VAR 0 6
20037: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20038: LD_INT 0
20040: PPUSH
20041: PPUSH
// if not vehicle or not factory then
20042: LD_VAR 0 1
20046: NOT
20047: PUSH
20048: LD_VAR 0 2
20052: NOT
20053: OR
20054: IFFALSE 20058
// exit ;
20056: GO 20289
// if factoryWaypoints >= factory then
20058: LD_EXP 98
20062: PUSH
20063: LD_VAR 0 2
20067: GREATEREQUAL
20068: IFFALSE 20289
// if factoryWaypoints [ factory ] then
20070: LD_EXP 98
20074: PUSH
20075: LD_VAR 0 2
20079: ARRAY
20080: IFFALSE 20289
// begin if GetControl ( vehicle ) = control_manual then
20082: LD_VAR 0 1
20086: PPUSH
20087: CALL_OW 263
20091: PUSH
20092: LD_INT 1
20094: EQUAL
20095: IFFALSE 20176
// begin driver := IsDrivenBy ( vehicle ) ;
20097: LD_ADDR_VAR 0 4
20101: PUSH
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 311
20111: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20112: LD_VAR 0 4
20116: PPUSH
20117: LD_EXP 98
20121: PUSH
20122: LD_VAR 0 2
20126: ARRAY
20127: PUSH
20128: LD_INT 3
20130: ARRAY
20131: PPUSH
20132: LD_EXP 98
20136: PUSH
20137: LD_VAR 0 2
20141: ARRAY
20142: PUSH
20143: LD_INT 4
20145: ARRAY
20146: PPUSH
20147: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20151: LD_VAR 0 4
20155: PPUSH
20156: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20160: LD_VAR 0 4
20164: PPUSH
20165: LD_VAR 0 2
20169: PPUSH
20170: CALL_OW 180
// end else
20174: GO 20289
// if GetControl ( vehicle ) = control_remote then
20176: LD_VAR 0 1
20180: PPUSH
20181: CALL_OW 263
20185: PUSH
20186: LD_INT 2
20188: EQUAL
20189: IFFALSE 20250
// begin wait ( 0 0$2 ) ;
20191: LD_INT 70
20193: PPUSH
20194: CALL_OW 67
// if Connect ( vehicle ) then
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL 32954 0 1
20207: IFFALSE 20248
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20209: LD_VAR 0 1
20213: PPUSH
20214: LD_EXP 98
20218: PUSH
20219: LD_VAR 0 2
20223: ARRAY
20224: PUSH
20225: LD_INT 3
20227: ARRAY
20228: PPUSH
20229: LD_EXP 98
20233: PUSH
20234: LD_VAR 0 2
20238: ARRAY
20239: PUSH
20240: LD_INT 4
20242: ARRAY
20243: PPUSH
20244: CALL_OW 171
// end else
20248: GO 20289
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: LD_EXP 98
20259: PUSH
20260: LD_VAR 0 2
20264: ARRAY
20265: PUSH
20266: LD_INT 3
20268: ARRAY
20269: PPUSH
20270: LD_EXP 98
20274: PUSH
20275: LD_VAR 0 2
20279: ARRAY
20280: PUSH
20281: LD_INT 4
20283: ARRAY
20284: PPUSH
20285: CALL_OW 171
// end ; end ;
20289: LD_VAR 0 3
20293: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20294: LD_INT 0
20296: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20297: LD_VAR 0 1
20301: PUSH
20302: LD_INT 250
20304: EQUAL
20305: PUSH
20306: LD_VAR 0 2
20310: PPUSH
20311: CALL_OW 264
20315: PUSH
20316: LD_INT 81
20318: EQUAL
20319: AND
20320: IFFALSE 20341
// MinerPlaceMine ( unit , x , y ) ;
20322: LD_VAR 0 2
20326: PPUSH
20327: LD_VAR 0 4
20331: PPUSH
20332: LD_VAR 0 5
20336: PPUSH
20337: CALL 23165 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20341: LD_VAR 0 1
20345: PUSH
20346: LD_INT 251
20348: EQUAL
20349: PUSH
20350: LD_VAR 0 2
20354: PPUSH
20355: CALL_OW 264
20359: PUSH
20360: LD_INT 81
20362: EQUAL
20363: AND
20364: IFFALSE 20385
// MinerDetonateMine ( unit , x , y ) ;
20366: LD_VAR 0 2
20370: PPUSH
20371: LD_VAR 0 4
20375: PPUSH
20376: LD_VAR 0 5
20380: PPUSH
20381: CALL 23440 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20385: LD_VAR 0 1
20389: PUSH
20390: LD_INT 252
20392: EQUAL
20393: PUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: CALL_OW 264
20403: PUSH
20404: LD_INT 81
20406: EQUAL
20407: AND
20408: IFFALSE 20429
// MinerCreateMinefield ( unit , x , y ) ;
20410: LD_VAR 0 2
20414: PPUSH
20415: LD_VAR 0 4
20419: PPUSH
20420: LD_VAR 0 5
20424: PPUSH
20425: CALL 23857 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20429: LD_VAR 0 1
20433: PUSH
20434: LD_INT 253
20436: EQUAL
20437: PUSH
20438: LD_VAR 0 2
20442: PPUSH
20443: CALL_OW 257
20447: PUSH
20448: LD_INT 5
20450: EQUAL
20451: AND
20452: IFFALSE 20473
// ComBinocular ( unit , x , y ) ;
20454: LD_VAR 0 2
20458: PPUSH
20459: LD_VAR 0 4
20463: PPUSH
20464: LD_VAR 0 5
20468: PPUSH
20469: CALL 24226 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20473: LD_VAR 0 1
20477: PUSH
20478: LD_INT 254
20480: EQUAL
20481: PUSH
20482: LD_VAR 0 2
20486: PPUSH
20487: CALL_OW 264
20491: PUSH
20492: LD_INT 99
20494: EQUAL
20495: AND
20496: PUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 263
20506: PUSH
20507: LD_INT 3
20509: EQUAL
20510: AND
20511: IFFALSE 20527
// HackDestroyVehicle ( unit , selectedUnit ) ;
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_VAR 0 3
20522: PPUSH
20523: CALL 22529 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20527: LD_VAR 0 1
20531: PUSH
20532: LD_INT 255
20534: EQUAL
20535: PUSH
20536: LD_VAR 0 2
20540: PPUSH
20541: CALL_OW 264
20545: PUSH
20546: LD_INT 14
20548: PUSH
20549: LD_INT 53
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: IN
20556: AND
20557: PUSH
20558: LD_VAR 0 4
20562: PPUSH
20563: LD_VAR 0 5
20567: PPUSH
20568: CALL_OW 488
20572: AND
20573: IFFALSE 20597
// CutTreeXYR ( unit , x , y , 12 ) ;
20575: LD_VAR 0 2
20579: PPUSH
20580: LD_VAR 0 4
20584: PPUSH
20585: LD_VAR 0 5
20589: PPUSH
20590: LD_INT 12
20592: PPUSH
20593: CALL 20692 0 4
// if cmd = 256 then
20597: LD_VAR 0 1
20601: PUSH
20602: LD_INT 256
20604: EQUAL
20605: IFFALSE 20626
// SetFactoryWaypoint ( unit , x , y ) ;
20607: LD_VAR 0 2
20611: PPUSH
20612: LD_VAR 0 4
20616: PPUSH
20617: LD_VAR 0 5
20621: PPUSH
20622: CALL 18607 0 3
// if cmd = 257 then
20626: LD_VAR 0 1
20630: PUSH
20631: LD_INT 257
20633: EQUAL
20634: IFFALSE 20655
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20636: LD_VAR 0 2
20640: PPUSH
20641: LD_VAR 0 4
20645: PPUSH
20646: LD_VAR 0 5
20650: PPUSH
20651: CALL 18969 0 3
// if cmd = 258 then
20655: LD_VAR 0 1
20659: PUSH
20660: LD_INT 258
20662: EQUAL
20663: IFFALSE 20687
// BurnTreeXYR ( unit , x , y , 8 ) ;
20665: LD_VAR 0 2
20669: PPUSH
20670: LD_VAR 0 4
20674: PPUSH
20675: LD_VAR 0 5
20679: PPUSH
20680: LD_INT 8
20682: PPUSH
20683: CALL 21086 0 4
// end ;
20687: LD_VAR 0 6
20691: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20692: LD_INT 0
20694: PPUSH
20695: PPUSH
20696: PPUSH
20697: PPUSH
20698: PPUSH
20699: PPUSH
20700: PPUSH
20701: PPUSH
20702: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
20703: LD_VAR 0 1
20707: PPUSH
20708: CALL_OW 302
20712: NOT
20713: PUSH
20714: LD_VAR 0 2
20718: PPUSH
20719: LD_VAR 0 3
20723: PPUSH
20724: CALL_OW 488
20728: NOT
20729: OR
20730: PUSH
20731: LD_VAR 0 4
20735: NOT
20736: OR
20737: IFFALSE 20741
// exit ;
20739: GO 21081
// list := [ ] ;
20741: LD_ADDR_VAR 0 13
20745: PUSH
20746: EMPTY
20747: ST_TO_ADDR
// if x - r < 0 then
20748: LD_VAR 0 2
20752: PUSH
20753: LD_VAR 0 4
20757: MINUS
20758: PUSH
20759: LD_INT 0
20761: LESS
20762: IFFALSE 20774
// min_x := 0 else
20764: LD_ADDR_VAR 0 7
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
20772: GO 20790
// min_x := x - r ;
20774: LD_ADDR_VAR 0 7
20778: PUSH
20779: LD_VAR 0 2
20783: PUSH
20784: LD_VAR 0 4
20788: MINUS
20789: ST_TO_ADDR
// if y - r < 0 then
20790: LD_VAR 0 3
20794: PUSH
20795: LD_VAR 0 4
20799: MINUS
20800: PUSH
20801: LD_INT 0
20803: LESS
20804: IFFALSE 20816
// min_y := 0 else
20806: LD_ADDR_VAR 0 8
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
20814: GO 20832
// min_y := y - r ;
20816: LD_ADDR_VAR 0 8
20820: PUSH
20821: LD_VAR 0 3
20825: PUSH
20826: LD_VAR 0 4
20830: MINUS
20831: ST_TO_ADDR
// max_x := x + r ;
20832: LD_ADDR_VAR 0 9
20836: PUSH
20837: LD_VAR 0 2
20841: PUSH
20842: LD_VAR 0 4
20846: PLUS
20847: ST_TO_ADDR
// max_y := y + r ;
20848: LD_ADDR_VAR 0 10
20852: PUSH
20853: LD_VAR 0 3
20857: PUSH
20858: LD_VAR 0 4
20862: PLUS
20863: ST_TO_ADDR
// for _x = min_x to max_x do
20864: LD_ADDR_VAR 0 11
20868: PUSH
20869: DOUBLE
20870: LD_VAR 0 7
20874: DEC
20875: ST_TO_ADDR
20876: LD_VAR 0 9
20880: PUSH
20881: FOR_TO
20882: IFFALSE 20999
// for _y = min_y to max_y do
20884: LD_ADDR_VAR 0 12
20888: PUSH
20889: DOUBLE
20890: LD_VAR 0 8
20894: DEC
20895: ST_TO_ADDR
20896: LD_VAR 0 10
20900: PUSH
20901: FOR_TO
20902: IFFALSE 20995
// begin if not ValidHex ( _x , _y ) then
20904: LD_VAR 0 11
20908: PPUSH
20909: LD_VAR 0 12
20913: PPUSH
20914: CALL_OW 488
20918: NOT
20919: IFFALSE 20923
// continue ;
20921: GO 20901
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20923: LD_VAR 0 11
20927: PPUSH
20928: LD_VAR 0 12
20932: PPUSH
20933: CALL_OW 351
20937: PUSH
20938: LD_VAR 0 11
20942: PPUSH
20943: LD_VAR 0 12
20947: PPUSH
20948: CALL_OW 554
20952: AND
20953: IFFALSE 20993
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20955: LD_ADDR_VAR 0 13
20959: PUSH
20960: LD_VAR 0 13
20964: PPUSH
20965: LD_VAR 0 13
20969: PUSH
20970: LD_INT 1
20972: PLUS
20973: PPUSH
20974: LD_VAR 0 11
20978: PUSH
20979: LD_VAR 0 12
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 2
20992: ST_TO_ADDR
// end ;
20993: GO 20901
20995: POP
20996: POP
20997: GO 20881
20999: POP
21000: POP
// if not list then
21001: LD_VAR 0 13
21005: NOT
21006: IFFALSE 21010
// exit ;
21008: GO 21081
// for i in list do
21010: LD_ADDR_VAR 0 6
21014: PUSH
21015: LD_VAR 0 13
21019: PUSH
21020: FOR_IN
21021: IFFALSE 21079
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_STRING M
21030: PUSH
21031: LD_VAR 0 6
21035: PUSH
21036: LD_INT 1
21038: ARRAY
21039: PUSH
21040: LD_VAR 0 6
21044: PUSH
21045: LD_INT 2
21047: ARRAY
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: LD_INT 0
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: PPUSH
21073: CALL_OW 447
21077: GO 21020
21079: POP
21080: POP
// end ;
21081: LD_VAR 0 5
21085: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21086: LD_INT 0
21088: PPUSH
21089: PPUSH
21090: PPUSH
21091: PPUSH
21092: PPUSH
21093: PPUSH
21094: PPUSH
21095: PPUSH
21096: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21097: LD_VAR 0 1
21101: PPUSH
21102: CALL_OW 302
21106: NOT
21107: PUSH
21108: LD_VAR 0 2
21112: PPUSH
21113: LD_VAR 0 3
21117: PPUSH
21118: CALL_OW 488
21122: NOT
21123: OR
21124: PUSH
21125: LD_VAR 0 4
21129: NOT
21130: OR
21131: IFFALSE 21135
// exit ;
21133: GO 21483
// list := [ ] ;
21135: LD_ADDR_VAR 0 13
21139: PUSH
21140: EMPTY
21141: ST_TO_ADDR
// if x - r < 0 then
21142: LD_VAR 0 2
21146: PUSH
21147: LD_VAR 0 4
21151: MINUS
21152: PUSH
21153: LD_INT 0
21155: LESS
21156: IFFALSE 21168
// min_x := 0 else
21158: LD_ADDR_VAR 0 7
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
21166: GO 21184
// min_x := x - r ;
21168: LD_ADDR_VAR 0 7
21172: PUSH
21173: LD_VAR 0 2
21177: PUSH
21178: LD_VAR 0 4
21182: MINUS
21183: ST_TO_ADDR
// if y - r < 0 then
21184: LD_VAR 0 3
21188: PUSH
21189: LD_VAR 0 4
21193: MINUS
21194: PUSH
21195: LD_INT 0
21197: LESS
21198: IFFALSE 21210
// min_y := 0 else
21200: LD_ADDR_VAR 0 8
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
21208: GO 21226
// min_y := y - r ;
21210: LD_ADDR_VAR 0 8
21214: PUSH
21215: LD_VAR 0 3
21219: PUSH
21220: LD_VAR 0 4
21224: MINUS
21225: ST_TO_ADDR
// max_x := x + r ;
21226: LD_ADDR_VAR 0 9
21230: PUSH
21231: LD_VAR 0 2
21235: PUSH
21236: LD_VAR 0 4
21240: PLUS
21241: ST_TO_ADDR
// max_y := y + r ;
21242: LD_ADDR_VAR 0 10
21246: PUSH
21247: LD_VAR 0 3
21251: PUSH
21252: LD_VAR 0 4
21256: PLUS
21257: ST_TO_ADDR
// for _x = min_x to max_x do
21258: LD_ADDR_VAR 0 11
21262: PUSH
21263: DOUBLE
21264: LD_VAR 0 7
21268: DEC
21269: ST_TO_ADDR
21270: LD_VAR 0 9
21274: PUSH
21275: FOR_TO
21276: IFFALSE 21393
// for _y = min_y to max_y do
21278: LD_ADDR_VAR 0 12
21282: PUSH
21283: DOUBLE
21284: LD_VAR 0 8
21288: DEC
21289: ST_TO_ADDR
21290: LD_VAR 0 10
21294: PUSH
21295: FOR_TO
21296: IFFALSE 21389
// begin if not ValidHex ( _x , _y ) then
21298: LD_VAR 0 11
21302: PPUSH
21303: LD_VAR 0 12
21307: PPUSH
21308: CALL_OW 488
21312: NOT
21313: IFFALSE 21317
// continue ;
21315: GO 21295
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21317: LD_VAR 0 11
21321: PPUSH
21322: LD_VAR 0 12
21326: PPUSH
21327: CALL_OW 351
21331: PUSH
21332: LD_VAR 0 11
21336: PPUSH
21337: LD_VAR 0 12
21341: PPUSH
21342: CALL_OW 554
21346: AND
21347: IFFALSE 21387
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21349: LD_ADDR_VAR 0 13
21353: PUSH
21354: LD_VAR 0 13
21358: PPUSH
21359: LD_VAR 0 13
21363: PUSH
21364: LD_INT 1
21366: PLUS
21367: PPUSH
21368: LD_VAR 0 11
21372: PUSH
21373: LD_VAR 0 12
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PPUSH
21382: CALL_OW 2
21386: ST_TO_ADDR
// end ;
21387: GO 21295
21389: POP
21390: POP
21391: GO 21275
21393: POP
21394: POP
// if not list then
21395: LD_VAR 0 13
21399: NOT
21400: IFFALSE 21404
// exit ;
21402: GO 21483
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
21404: LD_ADDR_VAR 0 13
21408: PUSH
21409: LD_VAR 0 1
21413: PPUSH
21414: LD_VAR 0 13
21418: PPUSH
21419: LD_INT 1
21421: PPUSH
21422: LD_INT 1
21424: PPUSH
21425: CALL 30096 0 4
21429: ST_TO_ADDR
// ComStop ( flame ) ;
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 141
// for i in list do
21439: LD_ADDR_VAR 0 6
21443: PUSH
21444: LD_VAR 0 13
21448: PUSH
21449: FOR_IN
21450: IFFALSE 21481
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
21452: LD_VAR 0 1
21456: PPUSH
21457: LD_VAR 0 6
21461: PUSH
21462: LD_INT 1
21464: ARRAY
21465: PPUSH
21466: LD_VAR 0 6
21470: PUSH
21471: LD_INT 2
21473: ARRAY
21474: PPUSH
21475: CALL_OW 176
21479: GO 21449
21481: POP
21482: POP
// end ;
21483: LD_VAR 0 5
21487: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21488: LD_EXP 101
21492: NOT
21493: IFFALSE 21543
21495: GO 21497
21497: DISABLE
// begin initHack := true ;
21498: LD_ADDR_EXP 101
21502: PUSH
21503: LD_INT 1
21505: ST_TO_ADDR
// hackTanks := [ ] ;
21506: LD_ADDR_EXP 102
21510: PUSH
21511: EMPTY
21512: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21513: LD_ADDR_EXP 103
21517: PUSH
21518: EMPTY
21519: ST_TO_ADDR
// hackLimit := 3 ;
21520: LD_ADDR_EXP 104
21524: PUSH
21525: LD_INT 3
21527: ST_TO_ADDR
// hackDist := 12 ;
21528: LD_ADDR_EXP 105
21532: PUSH
21533: LD_INT 12
21535: ST_TO_ADDR
// hackCounter := [ ] ;
21536: LD_ADDR_EXP 106
21540: PUSH
21541: EMPTY
21542: ST_TO_ADDR
// end ;
21543: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21544: LD_EXP 101
21548: PUSH
21549: LD_INT 34
21551: PUSH
21552: LD_INT 99
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PPUSH
21559: CALL_OW 69
21563: AND
21564: IFFALSE 21817
21566: GO 21568
21568: DISABLE
21569: LD_INT 0
21571: PPUSH
21572: PPUSH
// begin enable ;
21573: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21574: LD_ADDR_VAR 0 1
21578: PUSH
21579: LD_INT 34
21581: PUSH
21582: LD_INT 99
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PPUSH
21589: CALL_OW 69
21593: PUSH
21594: FOR_IN
21595: IFFALSE 21815
// begin if not i in hackTanks then
21597: LD_VAR 0 1
21601: PUSH
21602: LD_EXP 102
21606: IN
21607: NOT
21608: IFFALSE 21691
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21610: LD_ADDR_EXP 102
21614: PUSH
21615: LD_EXP 102
21619: PPUSH
21620: LD_EXP 102
21624: PUSH
21625: LD_INT 1
21627: PLUS
21628: PPUSH
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 1
21638: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21639: LD_ADDR_EXP 103
21643: PUSH
21644: LD_EXP 103
21648: PPUSH
21649: LD_EXP 103
21653: PUSH
21654: LD_INT 1
21656: PLUS
21657: PPUSH
21658: EMPTY
21659: PPUSH
21660: CALL_OW 1
21664: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21665: LD_ADDR_EXP 106
21669: PUSH
21670: LD_EXP 106
21674: PPUSH
21675: LD_EXP 106
21679: PUSH
21680: LD_INT 1
21682: PLUS
21683: PPUSH
21684: EMPTY
21685: PPUSH
21686: CALL_OW 1
21690: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 302
21700: NOT
21701: IFFALSE 21714
// begin HackUnlinkAll ( i ) ;
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL 21820 0 1
// continue ;
21712: GO 21594
// end ; HackCheckCapturedStatus ( i ) ;
21714: LD_VAR 0 1
21718: PPUSH
21719: CALL 22263 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21723: LD_ADDR_VAR 0 2
21727: PUSH
21728: LD_INT 81
21730: PUSH
21731: LD_VAR 0 1
21735: PPUSH
21736: CALL_OW 255
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 33
21747: PUSH
21748: LD_INT 3
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 91
21757: PUSH
21758: LD_VAR 0 1
21762: PUSH
21763: LD_EXP 105
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 50
21775: PUSH
21776: EMPTY
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: PPUSH
21785: CALL_OW 69
21789: ST_TO_ADDR
// if not tmp then
21790: LD_VAR 0 2
21794: NOT
21795: IFFALSE 21799
// continue ;
21797: GO 21594
// HackLink ( i , tmp ) ;
21799: LD_VAR 0 1
21803: PPUSH
21804: LD_VAR 0 2
21808: PPUSH
21809: CALL 21956 0 2
// end ;
21813: GO 21594
21815: POP
21816: POP
// end ;
21817: PPOPN 2
21819: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21820: LD_INT 0
21822: PPUSH
21823: PPUSH
21824: PPUSH
// if not hack in hackTanks then
21825: LD_VAR 0 1
21829: PUSH
21830: LD_EXP 102
21834: IN
21835: NOT
21836: IFFALSE 21840
// exit ;
21838: GO 21951
// index := GetElementIndex ( hackTanks , hack ) ;
21840: LD_ADDR_VAR 0 4
21844: PUSH
21845: LD_EXP 102
21849: PPUSH
21850: LD_VAR 0 1
21854: PPUSH
21855: CALL 29393 0 2
21859: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21860: LD_EXP 103
21864: PUSH
21865: LD_VAR 0 4
21869: ARRAY
21870: IFFALSE 21951
// begin for i in hackTanksCaptured [ index ] do
21872: LD_ADDR_VAR 0 3
21876: PUSH
21877: LD_EXP 103
21881: PUSH
21882: LD_VAR 0 4
21886: ARRAY
21887: PUSH
21888: FOR_IN
21889: IFFALSE 21915
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21891: LD_VAR 0 3
21895: PUSH
21896: LD_INT 1
21898: ARRAY
21899: PPUSH
21900: LD_VAR 0 3
21904: PUSH
21905: LD_INT 2
21907: ARRAY
21908: PPUSH
21909: CALL_OW 235
21913: GO 21888
21915: POP
21916: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21917: LD_ADDR_EXP 103
21921: PUSH
21922: LD_EXP 103
21926: PPUSH
21927: LD_VAR 0 4
21931: PPUSH
21932: EMPTY
21933: PPUSH
21934: CALL_OW 1
21938: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21939: LD_VAR 0 1
21943: PPUSH
21944: LD_INT 0
21946: PPUSH
21947: CALL_OW 505
// end ; end ;
21951: LD_VAR 0 2
21955: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21956: LD_INT 0
21958: PPUSH
21959: PPUSH
21960: PPUSH
// if not hack in hackTanks or not vehicles then
21961: LD_VAR 0 1
21965: PUSH
21966: LD_EXP 102
21970: IN
21971: NOT
21972: PUSH
21973: LD_VAR 0 2
21977: NOT
21978: OR
21979: IFFALSE 21983
// exit ;
21981: GO 22258
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21983: LD_ADDR_VAR 0 2
21987: PUSH
21988: LD_VAR 0 1
21992: PPUSH
21993: LD_VAR 0 2
21997: PPUSH
21998: LD_INT 1
22000: PPUSH
22001: LD_INT 1
22003: PPUSH
22004: CALL 30043 0 4
22008: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22009: LD_ADDR_VAR 0 5
22013: PUSH
22014: LD_EXP 102
22018: PPUSH
22019: LD_VAR 0 1
22023: PPUSH
22024: CALL 29393 0 2
22028: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22029: LD_EXP 103
22033: PUSH
22034: LD_VAR 0 5
22038: ARRAY
22039: PUSH
22040: LD_EXP 104
22044: LESS
22045: IFFALSE 22234
// begin for i := 1 to vehicles do
22047: LD_ADDR_VAR 0 4
22051: PUSH
22052: DOUBLE
22053: LD_INT 1
22055: DEC
22056: ST_TO_ADDR
22057: LD_VAR 0 2
22061: PUSH
22062: FOR_TO
22063: IFFALSE 22232
// begin if hackTanksCaptured [ index ] = hackLimit then
22065: LD_EXP 103
22069: PUSH
22070: LD_VAR 0 5
22074: ARRAY
22075: PUSH
22076: LD_EXP 104
22080: EQUAL
22081: IFFALSE 22085
// break ;
22083: GO 22232
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22085: LD_ADDR_EXP 106
22089: PUSH
22090: LD_EXP 106
22094: PPUSH
22095: LD_VAR 0 5
22099: PPUSH
22100: LD_EXP 106
22104: PUSH
22105: LD_VAR 0 5
22109: ARRAY
22110: PUSH
22111: LD_INT 1
22113: PLUS
22114: PPUSH
22115: CALL_OW 1
22119: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22120: LD_ADDR_EXP 103
22124: PUSH
22125: LD_EXP 103
22129: PPUSH
22130: LD_VAR 0 5
22134: PUSH
22135: LD_EXP 103
22139: PUSH
22140: LD_VAR 0 5
22144: ARRAY
22145: PUSH
22146: LD_INT 1
22148: PLUS
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PPUSH
22154: LD_VAR 0 2
22158: PUSH
22159: LD_VAR 0 4
22163: ARRAY
22164: PUSH
22165: LD_VAR 0 2
22169: PUSH
22170: LD_VAR 0 4
22174: ARRAY
22175: PPUSH
22176: CALL_OW 255
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL 29608 0 3
22189: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22190: LD_VAR 0 2
22194: PUSH
22195: LD_VAR 0 4
22199: ARRAY
22200: PPUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL_OW 255
22210: PPUSH
22211: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22215: LD_VAR 0 2
22219: PUSH
22220: LD_VAR 0 4
22224: ARRAY
22225: PPUSH
22226: CALL_OW 141
// end ;
22230: GO 22062
22232: POP
22233: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22234: LD_VAR 0 1
22238: PPUSH
22239: LD_EXP 103
22243: PUSH
22244: LD_VAR 0 5
22248: ARRAY
22249: PUSH
22250: LD_INT 0
22252: PLUS
22253: PPUSH
22254: CALL_OW 505
// end ;
22258: LD_VAR 0 3
22262: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22263: LD_INT 0
22265: PPUSH
22266: PPUSH
22267: PPUSH
22268: PPUSH
// if not hack in hackTanks then
22269: LD_VAR 0 1
22273: PUSH
22274: LD_EXP 102
22278: IN
22279: NOT
22280: IFFALSE 22284
// exit ;
22282: GO 22524
// index := GetElementIndex ( hackTanks , hack ) ;
22284: LD_ADDR_VAR 0 4
22288: PUSH
22289: LD_EXP 102
22293: PPUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: CALL 29393 0 2
22303: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22304: LD_ADDR_VAR 0 3
22308: PUSH
22309: DOUBLE
22310: LD_EXP 103
22314: PUSH
22315: LD_VAR 0 4
22319: ARRAY
22320: INC
22321: ST_TO_ADDR
22322: LD_INT 1
22324: PUSH
22325: FOR_DOWNTO
22326: IFFALSE 22498
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22328: LD_ADDR_VAR 0 5
22332: PUSH
22333: LD_EXP 103
22337: PUSH
22338: LD_VAR 0 4
22342: ARRAY
22343: PUSH
22344: LD_VAR 0 3
22348: ARRAY
22349: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22350: LD_VAR 0 5
22354: PUSH
22355: LD_INT 1
22357: ARRAY
22358: PPUSH
22359: CALL_OW 302
22363: NOT
22364: PUSH
22365: LD_VAR 0 5
22369: PUSH
22370: LD_INT 1
22372: ARRAY
22373: PPUSH
22374: CALL_OW 255
22378: PUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 255
22388: NONEQUAL
22389: OR
22390: IFFALSE 22496
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22392: LD_VAR 0 5
22396: PUSH
22397: LD_INT 1
22399: ARRAY
22400: PPUSH
22401: CALL_OW 305
22405: PUSH
22406: LD_VAR 0 5
22410: PUSH
22411: LD_INT 1
22413: ARRAY
22414: PPUSH
22415: CALL_OW 255
22419: PUSH
22420: LD_VAR 0 1
22424: PPUSH
22425: CALL_OW 255
22429: EQUAL
22430: AND
22431: IFFALSE 22455
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22433: LD_VAR 0 5
22437: PUSH
22438: LD_INT 1
22440: ARRAY
22441: PPUSH
22442: LD_VAR 0 5
22446: PUSH
22447: LD_INT 2
22449: ARRAY
22450: PPUSH
22451: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22455: LD_ADDR_EXP 103
22459: PUSH
22460: LD_EXP 103
22464: PPUSH
22465: LD_VAR 0 4
22469: PPUSH
22470: LD_EXP 103
22474: PUSH
22475: LD_VAR 0 4
22479: ARRAY
22480: PPUSH
22481: LD_VAR 0 3
22485: PPUSH
22486: CALL_OW 3
22490: PPUSH
22491: CALL_OW 1
22495: ST_TO_ADDR
// end ; end ;
22496: GO 22325
22498: POP
22499: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22500: LD_VAR 0 1
22504: PPUSH
22505: LD_EXP 103
22509: PUSH
22510: LD_VAR 0 4
22514: ARRAY
22515: PUSH
22516: LD_INT 0
22518: PLUS
22519: PPUSH
22520: CALL_OW 505
// end ;
22524: LD_VAR 0 2
22528: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22529: LD_INT 0
22531: PPUSH
22532: PPUSH
22533: PPUSH
22534: PPUSH
// if not hack in hackTanks then
22535: LD_VAR 0 1
22539: PUSH
22540: LD_EXP 102
22544: IN
22545: NOT
22546: IFFALSE 22550
// exit ;
22548: GO 22635
// index := GetElementIndex ( hackTanks , hack ) ;
22550: LD_ADDR_VAR 0 5
22554: PUSH
22555: LD_EXP 102
22559: PPUSH
22560: LD_VAR 0 1
22564: PPUSH
22565: CALL 29393 0 2
22569: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22570: LD_ADDR_VAR 0 4
22574: PUSH
22575: DOUBLE
22576: LD_INT 1
22578: DEC
22579: ST_TO_ADDR
22580: LD_EXP 103
22584: PUSH
22585: LD_VAR 0 5
22589: ARRAY
22590: PUSH
22591: FOR_TO
22592: IFFALSE 22633
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22594: LD_EXP 103
22598: PUSH
22599: LD_VAR 0 5
22603: ARRAY
22604: PUSH
22605: LD_VAR 0 4
22609: ARRAY
22610: PUSH
22611: LD_INT 1
22613: ARRAY
22614: PUSH
22615: LD_VAR 0 2
22619: EQUAL
22620: IFFALSE 22631
// KillUnit ( vehicle ) ;
22622: LD_VAR 0 2
22626: PPUSH
22627: CALL_OW 66
22631: GO 22591
22633: POP
22634: POP
// end ;
22635: LD_VAR 0 3
22639: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22640: LD_EXP 107
22644: NOT
22645: IFFALSE 22680
22647: GO 22649
22649: DISABLE
// begin initMiner := true ;
22650: LD_ADDR_EXP 107
22654: PUSH
22655: LD_INT 1
22657: ST_TO_ADDR
// minersList := [ ] ;
22658: LD_ADDR_EXP 108
22662: PUSH
22663: EMPTY
22664: ST_TO_ADDR
// minerMinesList := [ ] ;
22665: LD_ADDR_EXP 109
22669: PUSH
22670: EMPTY
22671: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22672: LD_ADDR_EXP 110
22676: PUSH
22677: LD_INT 5
22679: ST_TO_ADDR
// end ;
22680: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22681: LD_EXP 107
22685: PUSH
22686: LD_INT 34
22688: PUSH
22689: LD_INT 81
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PPUSH
22696: CALL_OW 69
22700: AND
22701: IFFALSE 23162
22703: GO 22705
22705: DISABLE
22706: LD_INT 0
22708: PPUSH
22709: PPUSH
22710: PPUSH
22711: PPUSH
// begin enable ;
22712: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22713: LD_ADDR_VAR 0 1
22717: PUSH
22718: LD_INT 34
22720: PUSH
22721: LD_INT 81
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PPUSH
22728: CALL_OW 69
22732: PUSH
22733: FOR_IN
22734: IFFALSE 22806
// begin if not i in minersList then
22736: LD_VAR 0 1
22740: PUSH
22741: LD_EXP 108
22745: IN
22746: NOT
22747: IFFALSE 22804
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22749: LD_ADDR_EXP 108
22753: PUSH
22754: LD_EXP 108
22758: PPUSH
22759: LD_EXP 108
22763: PUSH
22764: LD_INT 1
22766: PLUS
22767: PPUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 1
22777: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22778: LD_ADDR_EXP 109
22782: PUSH
22783: LD_EXP 109
22787: PPUSH
22788: LD_EXP 109
22792: PUSH
22793: LD_INT 1
22795: PLUS
22796: PPUSH
22797: EMPTY
22798: PPUSH
22799: CALL_OW 1
22803: ST_TO_ADDR
// end end ;
22804: GO 22733
22806: POP
22807: POP
// for i := minerMinesList downto 1 do
22808: LD_ADDR_VAR 0 1
22812: PUSH
22813: DOUBLE
22814: LD_EXP 109
22818: INC
22819: ST_TO_ADDR
22820: LD_INT 1
22822: PUSH
22823: FOR_DOWNTO
22824: IFFALSE 23160
// begin if IsLive ( minersList [ i ] ) then
22826: LD_EXP 108
22830: PUSH
22831: LD_VAR 0 1
22835: ARRAY
22836: PPUSH
22837: CALL_OW 300
22841: IFFALSE 22869
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22843: LD_EXP 108
22847: PUSH
22848: LD_VAR 0 1
22852: ARRAY
22853: PPUSH
22854: LD_EXP 109
22858: PUSH
22859: LD_VAR 0 1
22863: ARRAY
22864: PPUSH
22865: CALL_OW 505
// if not minerMinesList [ i ] then
22869: LD_EXP 109
22873: PUSH
22874: LD_VAR 0 1
22878: ARRAY
22879: NOT
22880: IFFALSE 22884
// continue ;
22882: GO 22823
// for j := minerMinesList [ i ] downto 1 do
22884: LD_ADDR_VAR 0 2
22888: PUSH
22889: DOUBLE
22890: LD_EXP 109
22894: PUSH
22895: LD_VAR 0 1
22899: ARRAY
22900: INC
22901: ST_TO_ADDR
22902: LD_INT 1
22904: PUSH
22905: FOR_DOWNTO
22906: IFFALSE 23156
// begin side := GetSide ( minersList [ i ] ) ;
22908: LD_ADDR_VAR 0 3
22912: PUSH
22913: LD_EXP 108
22917: PUSH
22918: LD_VAR 0 1
22922: ARRAY
22923: PPUSH
22924: CALL_OW 255
22928: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22929: LD_ADDR_VAR 0 4
22933: PUSH
22934: LD_EXP 109
22938: PUSH
22939: LD_VAR 0 1
22943: ARRAY
22944: PUSH
22945: LD_VAR 0 2
22949: ARRAY
22950: PUSH
22951: LD_INT 1
22953: ARRAY
22954: PPUSH
22955: LD_EXP 109
22959: PUSH
22960: LD_VAR 0 1
22964: ARRAY
22965: PUSH
22966: LD_VAR 0 2
22970: ARRAY
22971: PUSH
22972: LD_INT 2
22974: ARRAY
22975: PPUSH
22976: CALL_OW 428
22980: ST_TO_ADDR
// if not tmp then
22981: LD_VAR 0 4
22985: NOT
22986: IFFALSE 22990
// continue ;
22988: GO 22905
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22990: LD_VAR 0 4
22994: PUSH
22995: LD_INT 81
22997: PUSH
22998: LD_VAR 0 3
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PPUSH
23007: CALL_OW 69
23011: IN
23012: PUSH
23013: LD_EXP 109
23017: PUSH
23018: LD_VAR 0 1
23022: ARRAY
23023: PUSH
23024: LD_VAR 0 2
23028: ARRAY
23029: PUSH
23030: LD_INT 1
23032: ARRAY
23033: PPUSH
23034: LD_EXP 109
23038: PUSH
23039: LD_VAR 0 1
23043: ARRAY
23044: PUSH
23045: LD_VAR 0 2
23049: ARRAY
23050: PUSH
23051: LD_INT 2
23053: ARRAY
23054: PPUSH
23055: CALL_OW 458
23059: AND
23060: IFFALSE 23154
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23062: LD_EXP 109
23066: PUSH
23067: LD_VAR 0 1
23071: ARRAY
23072: PUSH
23073: LD_VAR 0 2
23077: ARRAY
23078: PUSH
23079: LD_INT 1
23081: ARRAY
23082: PPUSH
23083: LD_EXP 109
23087: PUSH
23088: LD_VAR 0 1
23092: ARRAY
23093: PUSH
23094: LD_VAR 0 2
23098: ARRAY
23099: PUSH
23100: LD_INT 2
23102: ARRAY
23103: PPUSH
23104: LD_VAR 0 3
23108: PPUSH
23109: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23113: LD_ADDR_EXP 109
23117: PUSH
23118: LD_EXP 109
23122: PPUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: LD_EXP 109
23132: PUSH
23133: LD_VAR 0 1
23137: ARRAY
23138: PPUSH
23139: LD_VAR 0 2
23143: PPUSH
23144: CALL_OW 3
23148: PPUSH
23149: CALL_OW 1
23153: ST_TO_ADDR
// end ; end ;
23154: GO 22905
23156: POP
23157: POP
// end ;
23158: GO 22823
23160: POP
23161: POP
// end ;
23162: PPOPN 4
23164: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23165: LD_INT 0
23167: PPUSH
23168: PPUSH
// result := false ;
23169: LD_ADDR_VAR 0 4
23173: PUSH
23174: LD_INT 0
23176: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23177: LD_VAR 0 1
23181: PPUSH
23182: CALL_OW 264
23186: PUSH
23187: LD_INT 81
23189: EQUAL
23190: NOT
23191: IFFALSE 23195
// exit ;
23193: GO 23435
// index := GetElementIndex ( minersList , unit ) ;
23195: LD_ADDR_VAR 0 5
23199: PUSH
23200: LD_EXP 108
23204: PPUSH
23205: LD_VAR 0 1
23209: PPUSH
23210: CALL 29393 0 2
23214: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23215: LD_EXP 109
23219: PUSH
23220: LD_VAR 0 5
23224: ARRAY
23225: PUSH
23226: LD_EXP 110
23230: GREATEREQUAL
23231: IFFALSE 23235
// exit ;
23233: GO 23435
// ComMoveXY ( unit , x , y ) ;
23235: LD_VAR 0 1
23239: PPUSH
23240: LD_VAR 0 2
23244: PPUSH
23245: LD_VAR 0 3
23249: PPUSH
23250: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23254: LD_INT 35
23256: PPUSH
23257: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23261: LD_VAR 0 1
23265: PPUSH
23266: LD_VAR 0 2
23270: PPUSH
23271: LD_VAR 0 3
23275: PPUSH
23276: CALL 61145 0 3
23280: NOT
23281: PUSH
23282: LD_VAR 0 1
23286: PPUSH
23287: CALL_OW 314
23291: AND
23292: IFFALSE 23296
// exit ;
23294: GO 23435
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23296: LD_VAR 0 2
23300: PPUSH
23301: LD_VAR 0 3
23305: PPUSH
23306: CALL_OW 428
23310: PUSH
23311: LD_VAR 0 1
23315: EQUAL
23316: PUSH
23317: LD_VAR 0 1
23321: PPUSH
23322: CALL_OW 314
23326: NOT
23327: AND
23328: IFFALSE 23254
// PlaySoundXY ( x , y , PlantMine ) ;
23330: LD_VAR 0 2
23334: PPUSH
23335: LD_VAR 0 3
23339: PPUSH
23340: LD_STRING PlantMine
23342: PPUSH
23343: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23347: LD_VAR 0 2
23351: PPUSH
23352: LD_VAR 0 3
23356: PPUSH
23357: LD_VAR 0 1
23361: PPUSH
23362: CALL_OW 255
23366: PPUSH
23367: LD_INT 0
23369: PPUSH
23370: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23374: LD_ADDR_EXP 109
23378: PUSH
23379: LD_EXP 109
23383: PPUSH
23384: LD_VAR 0 5
23388: PUSH
23389: LD_EXP 109
23393: PUSH
23394: LD_VAR 0 5
23398: ARRAY
23399: PUSH
23400: LD_INT 1
23402: PLUS
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PPUSH
23408: LD_VAR 0 2
23412: PUSH
23413: LD_VAR 0 3
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PPUSH
23422: CALL 29608 0 3
23426: ST_TO_ADDR
// result := true ;
23427: LD_ADDR_VAR 0 4
23431: PUSH
23432: LD_INT 1
23434: ST_TO_ADDR
// end ;
23435: LD_VAR 0 4
23439: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23440: LD_INT 0
23442: PPUSH
23443: PPUSH
23444: PPUSH
// if not unit in minersList then
23445: LD_VAR 0 1
23449: PUSH
23450: LD_EXP 108
23454: IN
23455: NOT
23456: IFFALSE 23460
// exit ;
23458: GO 23852
// index := GetElementIndex ( minersList , unit ) ;
23460: LD_ADDR_VAR 0 6
23464: PUSH
23465: LD_EXP 108
23469: PPUSH
23470: LD_VAR 0 1
23474: PPUSH
23475: CALL 29393 0 2
23479: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23480: LD_ADDR_VAR 0 5
23484: PUSH
23485: DOUBLE
23486: LD_EXP 109
23490: PUSH
23491: LD_VAR 0 6
23495: ARRAY
23496: INC
23497: ST_TO_ADDR
23498: LD_INT 1
23500: PUSH
23501: FOR_DOWNTO
23502: IFFALSE 23663
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23504: LD_EXP 109
23508: PUSH
23509: LD_VAR 0 6
23513: ARRAY
23514: PUSH
23515: LD_VAR 0 5
23519: ARRAY
23520: PUSH
23521: LD_INT 1
23523: ARRAY
23524: PUSH
23525: LD_VAR 0 2
23529: EQUAL
23530: PUSH
23531: LD_EXP 109
23535: PUSH
23536: LD_VAR 0 6
23540: ARRAY
23541: PUSH
23542: LD_VAR 0 5
23546: ARRAY
23547: PUSH
23548: LD_INT 2
23550: ARRAY
23551: PUSH
23552: LD_VAR 0 3
23556: EQUAL
23557: AND
23558: IFFALSE 23661
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23560: LD_EXP 109
23564: PUSH
23565: LD_VAR 0 6
23569: ARRAY
23570: PUSH
23571: LD_VAR 0 5
23575: ARRAY
23576: PUSH
23577: LD_INT 1
23579: ARRAY
23580: PPUSH
23581: LD_EXP 109
23585: PUSH
23586: LD_VAR 0 6
23590: ARRAY
23591: PUSH
23592: LD_VAR 0 5
23596: ARRAY
23597: PUSH
23598: LD_INT 2
23600: ARRAY
23601: PPUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 255
23611: PPUSH
23612: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23616: LD_ADDR_EXP 109
23620: PUSH
23621: LD_EXP 109
23625: PPUSH
23626: LD_VAR 0 6
23630: PPUSH
23631: LD_EXP 109
23635: PUSH
23636: LD_VAR 0 6
23640: ARRAY
23641: PPUSH
23642: LD_VAR 0 5
23646: PPUSH
23647: CALL_OW 3
23651: PPUSH
23652: CALL_OW 1
23656: ST_TO_ADDR
// exit ;
23657: POP
23658: POP
23659: GO 23852
// end ; end ;
23661: GO 23501
23663: POP
23664: POP
// for i := minerMinesList [ index ] downto 1 do
23665: LD_ADDR_VAR 0 5
23669: PUSH
23670: DOUBLE
23671: LD_EXP 109
23675: PUSH
23676: LD_VAR 0 6
23680: ARRAY
23681: INC
23682: ST_TO_ADDR
23683: LD_INT 1
23685: PUSH
23686: FOR_DOWNTO
23687: IFFALSE 23850
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23689: LD_EXP 109
23693: PUSH
23694: LD_VAR 0 6
23698: ARRAY
23699: PUSH
23700: LD_VAR 0 5
23704: ARRAY
23705: PUSH
23706: LD_INT 1
23708: ARRAY
23709: PPUSH
23710: LD_EXP 109
23714: PUSH
23715: LD_VAR 0 6
23719: ARRAY
23720: PUSH
23721: LD_VAR 0 5
23725: ARRAY
23726: PUSH
23727: LD_INT 2
23729: ARRAY
23730: PPUSH
23731: LD_VAR 0 2
23735: PPUSH
23736: LD_VAR 0 3
23740: PPUSH
23741: CALL_OW 298
23745: PUSH
23746: LD_INT 6
23748: LESS
23749: IFFALSE 23848
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23751: LD_EXP 109
23755: PUSH
23756: LD_VAR 0 6
23760: ARRAY
23761: PUSH
23762: LD_VAR 0 5
23766: ARRAY
23767: PUSH
23768: LD_INT 1
23770: ARRAY
23771: PPUSH
23772: LD_EXP 109
23776: PUSH
23777: LD_VAR 0 6
23781: ARRAY
23782: PUSH
23783: LD_VAR 0 5
23787: ARRAY
23788: PUSH
23789: LD_INT 2
23791: ARRAY
23792: PPUSH
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 255
23802: PPUSH
23803: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23807: LD_ADDR_EXP 109
23811: PUSH
23812: LD_EXP 109
23816: PPUSH
23817: LD_VAR 0 6
23821: PPUSH
23822: LD_EXP 109
23826: PUSH
23827: LD_VAR 0 6
23831: ARRAY
23832: PPUSH
23833: LD_VAR 0 5
23837: PPUSH
23838: CALL_OW 3
23842: PPUSH
23843: CALL_OW 1
23847: ST_TO_ADDR
// end ; end ;
23848: GO 23686
23850: POP
23851: POP
// end ;
23852: LD_VAR 0 4
23856: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23857: LD_INT 0
23859: PPUSH
23860: PPUSH
23861: PPUSH
23862: PPUSH
23863: PPUSH
23864: PPUSH
23865: PPUSH
23866: PPUSH
23867: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 264
23877: PUSH
23878: LD_INT 81
23880: EQUAL
23881: NOT
23882: PUSH
23883: LD_VAR 0 1
23887: PUSH
23888: LD_EXP 108
23892: IN
23893: NOT
23894: OR
23895: IFFALSE 23899
// exit ;
23897: GO 24221
// index := GetElementIndex ( minersList , unit ) ;
23899: LD_ADDR_VAR 0 6
23903: PUSH
23904: LD_EXP 108
23908: PPUSH
23909: LD_VAR 0 1
23913: PPUSH
23914: CALL 29393 0 2
23918: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23919: LD_ADDR_VAR 0 8
23923: PUSH
23924: LD_EXP 110
23928: PUSH
23929: LD_EXP 109
23933: PUSH
23934: LD_VAR 0 6
23938: ARRAY
23939: MINUS
23940: ST_TO_ADDR
// if not minesFreeAmount then
23941: LD_VAR 0 8
23945: NOT
23946: IFFALSE 23950
// exit ;
23948: GO 24221
// tmp := [ ] ;
23950: LD_ADDR_VAR 0 7
23954: PUSH
23955: EMPTY
23956: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23957: LD_ADDR_VAR 0 5
23961: PUSH
23962: DOUBLE
23963: LD_INT 1
23965: DEC
23966: ST_TO_ADDR
23967: LD_VAR 0 8
23971: PUSH
23972: FOR_TO
23973: IFFALSE 24168
// begin _d := rand ( 0 , 5 ) ;
23975: LD_ADDR_VAR 0 11
23979: PUSH
23980: LD_INT 0
23982: PPUSH
23983: LD_INT 5
23985: PPUSH
23986: CALL_OW 12
23990: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23991: LD_ADDR_VAR 0 12
23995: PUSH
23996: LD_INT 2
23998: PPUSH
23999: LD_INT 6
24001: PPUSH
24002: CALL_OW 12
24006: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24007: LD_ADDR_VAR 0 9
24011: PUSH
24012: LD_VAR 0 2
24016: PPUSH
24017: LD_VAR 0 11
24021: PPUSH
24022: LD_VAR 0 12
24026: PPUSH
24027: CALL_OW 272
24031: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24032: LD_ADDR_VAR 0 10
24036: PUSH
24037: LD_VAR 0 3
24041: PPUSH
24042: LD_VAR 0 11
24046: PPUSH
24047: LD_VAR 0 12
24051: PPUSH
24052: CALL_OW 273
24056: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24057: LD_VAR 0 9
24061: PPUSH
24062: LD_VAR 0 10
24066: PPUSH
24067: CALL_OW 488
24071: PUSH
24072: LD_VAR 0 9
24076: PUSH
24077: LD_VAR 0 10
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_VAR 0 7
24090: IN
24091: NOT
24092: AND
24093: PUSH
24094: LD_VAR 0 9
24098: PPUSH
24099: LD_VAR 0 10
24103: PPUSH
24104: CALL_OW 458
24108: NOT
24109: AND
24110: IFFALSE 24152
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24112: LD_ADDR_VAR 0 7
24116: PUSH
24117: LD_VAR 0 7
24121: PPUSH
24122: LD_VAR 0 7
24126: PUSH
24127: LD_INT 1
24129: PLUS
24130: PPUSH
24131: LD_VAR 0 9
24135: PUSH
24136: LD_VAR 0 10
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PPUSH
24145: CALL_OW 1
24149: ST_TO_ADDR
24150: GO 24166
// i := i - 1 ;
24152: LD_ADDR_VAR 0 5
24156: PUSH
24157: LD_VAR 0 5
24161: PUSH
24162: LD_INT 1
24164: MINUS
24165: ST_TO_ADDR
// end ;
24166: GO 23972
24168: POP
24169: POP
// for i in tmp do
24170: LD_ADDR_VAR 0 5
24174: PUSH
24175: LD_VAR 0 7
24179: PUSH
24180: FOR_IN
24181: IFFALSE 24219
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24183: LD_VAR 0 1
24187: PPUSH
24188: LD_VAR 0 5
24192: PUSH
24193: LD_INT 1
24195: ARRAY
24196: PPUSH
24197: LD_VAR 0 5
24201: PUSH
24202: LD_INT 2
24204: ARRAY
24205: PPUSH
24206: CALL 23165 0 3
24210: NOT
24211: IFFALSE 24217
// exit ;
24213: POP
24214: POP
24215: GO 24221
24217: GO 24180
24219: POP
24220: POP
// end ;
24221: LD_VAR 0 4
24225: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24226: LD_INT 0
24228: PPUSH
24229: PPUSH
24230: PPUSH
24231: PPUSH
24232: PPUSH
24233: PPUSH
24234: PPUSH
// if not GetClass ( unit ) = class_sniper then
24235: LD_VAR 0 1
24239: PPUSH
24240: CALL_OW 257
24244: PUSH
24245: LD_INT 5
24247: EQUAL
24248: NOT
24249: IFFALSE 24253
// exit ;
24251: GO 24641
// dist := 8 ;
24253: LD_ADDR_VAR 0 5
24257: PUSH
24258: LD_INT 8
24260: ST_TO_ADDR
// viewRange := 12 ;
24261: LD_ADDR_VAR 0 7
24265: PUSH
24266: LD_INT 12
24268: ST_TO_ADDR
// side := GetSide ( unit ) ;
24269: LD_ADDR_VAR 0 6
24273: PUSH
24274: LD_VAR 0 1
24278: PPUSH
24279: CALL_OW 255
24283: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24284: LD_INT 61
24286: PPUSH
24287: LD_VAR 0 6
24291: PPUSH
24292: CALL_OW 321
24296: PUSH
24297: LD_INT 2
24299: EQUAL
24300: IFFALSE 24310
// viewRange := 16 ;
24302: LD_ADDR_VAR 0 7
24306: PUSH
24307: LD_INT 16
24309: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24310: LD_VAR 0 1
24314: PPUSH
24315: LD_VAR 0 2
24319: PPUSH
24320: LD_VAR 0 3
24324: PPUSH
24325: CALL_OW 297
24329: PUSH
24330: LD_VAR 0 5
24334: GREATER
24335: IFFALSE 24414
// begin ComMoveXY ( unit , x , y ) ;
24337: LD_VAR 0 1
24341: PPUSH
24342: LD_VAR 0 2
24346: PPUSH
24347: LD_VAR 0 3
24351: PPUSH
24352: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24356: LD_INT 35
24358: PPUSH
24359: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24363: LD_VAR 0 1
24367: PPUSH
24368: LD_VAR 0 2
24372: PPUSH
24373: LD_VAR 0 3
24377: PPUSH
24378: CALL 61145 0 3
24382: NOT
24383: IFFALSE 24387
// exit ;
24385: GO 24641
// until GetDistUnitXY ( unit , x , y ) < dist ;
24387: LD_VAR 0 1
24391: PPUSH
24392: LD_VAR 0 2
24396: PPUSH
24397: LD_VAR 0 3
24401: PPUSH
24402: CALL_OW 297
24406: PUSH
24407: LD_VAR 0 5
24411: LESS
24412: IFFALSE 24356
// end ; ComTurnXY ( unit , x , y ) ;
24414: LD_VAR 0 1
24418: PPUSH
24419: LD_VAR 0 2
24423: PPUSH
24424: LD_VAR 0 3
24428: PPUSH
24429: CALL_OW 118
// wait ( 5 ) ;
24433: LD_INT 5
24435: PPUSH
24436: CALL_OW 67
// _d := GetDir ( unit ) ;
24440: LD_ADDR_VAR 0 10
24444: PUSH
24445: LD_VAR 0 1
24449: PPUSH
24450: CALL_OW 254
24454: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24455: LD_ADDR_VAR 0 8
24459: PUSH
24460: LD_VAR 0 1
24464: PPUSH
24465: CALL_OW 250
24469: PPUSH
24470: LD_VAR 0 10
24474: PPUSH
24475: LD_VAR 0 5
24479: PPUSH
24480: CALL_OW 272
24484: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24485: LD_ADDR_VAR 0 9
24489: PUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 251
24499: PPUSH
24500: LD_VAR 0 10
24504: PPUSH
24505: LD_VAR 0 5
24509: PPUSH
24510: CALL_OW 273
24514: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24515: LD_VAR 0 8
24519: PPUSH
24520: LD_VAR 0 9
24524: PPUSH
24525: CALL_OW 488
24529: NOT
24530: IFFALSE 24534
// exit ;
24532: GO 24641
// ComAnimCustom ( unit , 1 ) ;
24534: LD_VAR 0 1
24538: PPUSH
24539: LD_INT 1
24541: PPUSH
24542: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24546: LD_VAR 0 8
24550: PPUSH
24551: LD_VAR 0 9
24555: PPUSH
24556: LD_VAR 0 6
24560: PPUSH
24561: LD_VAR 0 7
24565: PPUSH
24566: CALL_OW 330
// repeat wait ( 1 ) ;
24570: LD_INT 1
24572: PPUSH
24573: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: CALL_OW 316
24586: PUSH
24587: LD_VAR 0 1
24591: PPUSH
24592: CALL_OW 314
24596: OR
24597: PUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 302
24607: NOT
24608: OR
24609: PUSH
24610: LD_VAR 0 1
24614: PPUSH
24615: CALL_OW 301
24619: OR
24620: IFFALSE 24570
// RemoveSeeing ( _x , _y , side ) ;
24622: LD_VAR 0 8
24626: PPUSH
24627: LD_VAR 0 9
24631: PPUSH
24632: LD_VAR 0 6
24636: PPUSH
24637: CALL_OW 331
// end ; end_of_file
24641: LD_VAR 0 4
24645: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24646: LD_INT 0
24648: PPUSH
24649: PPUSH
// if exist_mode then
24650: LD_VAR 0 2
24654: IFFALSE 24679
// unit := CreateCharacter ( prefix & ident ) else
24656: LD_ADDR_VAR 0 5
24660: PUSH
24661: LD_VAR 0 3
24665: PUSH
24666: LD_VAR 0 1
24670: STR
24671: PPUSH
24672: CALL_OW 34
24676: ST_TO_ADDR
24677: GO 24694
// unit := NewCharacter ( ident ) ;
24679: LD_ADDR_VAR 0 5
24683: PUSH
24684: LD_VAR 0 1
24688: PPUSH
24689: CALL_OW 25
24693: ST_TO_ADDR
// result := unit ;
24694: LD_ADDR_VAR 0 4
24698: PUSH
24699: LD_VAR 0 5
24703: ST_TO_ADDR
// end ;
24704: LD_VAR 0 4
24708: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24709: LD_INT 0
24711: PPUSH
24712: PPUSH
// if not side or not nation then
24713: LD_VAR 0 1
24717: NOT
24718: PUSH
24719: LD_VAR 0 2
24723: NOT
24724: OR
24725: IFFALSE 24729
// exit ;
24727: GO 25497
// case nation of nation_american :
24729: LD_VAR 0 2
24733: PUSH
24734: LD_INT 1
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24956
24742: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24743: LD_ADDR_VAR 0 4
24747: PUSH
24748: LD_INT 35
24750: PUSH
24751: LD_INT 45
24753: PUSH
24754: LD_INT 46
24756: PUSH
24757: LD_INT 47
24759: PUSH
24760: LD_INT 82
24762: PUSH
24763: LD_INT 83
24765: PUSH
24766: LD_INT 84
24768: PUSH
24769: LD_INT 85
24771: PUSH
24772: LD_INT 86
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: LD_INT 2
24780: PUSH
24781: LD_INT 6
24783: PUSH
24784: LD_INT 15
24786: PUSH
24787: LD_INT 16
24789: PUSH
24790: LD_INT 7
24792: PUSH
24793: LD_INT 12
24795: PUSH
24796: LD_INT 13
24798: PUSH
24799: LD_INT 10
24801: PUSH
24802: LD_INT 14
24804: PUSH
24805: LD_INT 20
24807: PUSH
24808: LD_INT 21
24810: PUSH
24811: LD_INT 22
24813: PUSH
24814: LD_INT 25
24816: PUSH
24817: LD_INT 32
24819: PUSH
24820: LD_INT 27
24822: PUSH
24823: LD_INT 36
24825: PUSH
24826: LD_INT 69
24828: PUSH
24829: LD_INT 39
24831: PUSH
24832: LD_INT 34
24834: PUSH
24835: LD_INT 40
24837: PUSH
24838: LD_INT 48
24840: PUSH
24841: LD_INT 49
24843: PUSH
24844: LD_INT 50
24846: PUSH
24847: LD_INT 51
24849: PUSH
24850: LD_INT 52
24852: PUSH
24853: LD_INT 53
24855: PUSH
24856: LD_INT 54
24858: PUSH
24859: LD_INT 55
24861: PUSH
24862: LD_INT 56
24864: PUSH
24865: LD_INT 57
24867: PUSH
24868: LD_INT 58
24870: PUSH
24871: LD_INT 59
24873: PUSH
24874: LD_INT 60
24876: PUSH
24877: LD_INT 61
24879: PUSH
24880: LD_INT 62
24882: PUSH
24883: LD_INT 80
24885: PUSH
24886: LD_INT 82
24888: PUSH
24889: LD_INT 83
24891: PUSH
24892: LD_INT 84
24894: PUSH
24895: LD_INT 85
24897: PUSH
24898: LD_INT 86
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: ST_TO_ADDR
24954: GO 25421
24956: LD_INT 2
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24964
24962: GO 25190
24964: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24965: LD_ADDR_VAR 0 4
24969: PUSH
24970: LD_INT 35
24972: PUSH
24973: LD_INT 45
24975: PUSH
24976: LD_INT 46
24978: PUSH
24979: LD_INT 47
24981: PUSH
24982: LD_INT 82
24984: PUSH
24985: LD_INT 83
24987: PUSH
24988: LD_INT 84
24990: PUSH
24991: LD_INT 85
24993: PUSH
24994: LD_INT 87
24996: PUSH
24997: LD_INT 70
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 11
25005: PUSH
25006: LD_INT 3
25008: PUSH
25009: LD_INT 4
25011: PUSH
25012: LD_INT 5
25014: PUSH
25015: LD_INT 6
25017: PUSH
25018: LD_INT 15
25020: PUSH
25021: LD_INT 18
25023: PUSH
25024: LD_INT 7
25026: PUSH
25027: LD_INT 17
25029: PUSH
25030: LD_INT 8
25032: PUSH
25033: LD_INT 20
25035: PUSH
25036: LD_INT 21
25038: PUSH
25039: LD_INT 22
25041: PUSH
25042: LD_INT 72
25044: PUSH
25045: LD_INT 26
25047: PUSH
25048: LD_INT 69
25050: PUSH
25051: LD_INT 39
25053: PUSH
25054: LD_INT 40
25056: PUSH
25057: LD_INT 41
25059: PUSH
25060: LD_INT 42
25062: PUSH
25063: LD_INT 43
25065: PUSH
25066: LD_INT 48
25068: PUSH
25069: LD_INT 49
25071: PUSH
25072: LD_INT 50
25074: PUSH
25075: LD_INT 51
25077: PUSH
25078: LD_INT 52
25080: PUSH
25081: LD_INT 53
25083: PUSH
25084: LD_INT 54
25086: PUSH
25087: LD_INT 55
25089: PUSH
25090: LD_INT 56
25092: PUSH
25093: LD_INT 60
25095: PUSH
25096: LD_INT 61
25098: PUSH
25099: LD_INT 62
25101: PUSH
25102: LD_INT 66
25104: PUSH
25105: LD_INT 67
25107: PUSH
25108: LD_INT 68
25110: PUSH
25111: LD_INT 81
25113: PUSH
25114: LD_INT 82
25116: PUSH
25117: LD_INT 83
25119: PUSH
25120: LD_INT 84
25122: PUSH
25123: LD_INT 85
25125: PUSH
25126: LD_INT 87
25128: PUSH
25129: LD_INT 88
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: ST_TO_ADDR
25188: GO 25421
25190: LD_INT 3
25192: DOUBLE
25193: EQUAL
25194: IFTRUE 25198
25196: GO 25420
25198: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25199: LD_ADDR_VAR 0 4
25203: PUSH
25204: LD_INT 46
25206: PUSH
25207: LD_INT 47
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: LD_INT 82
25218: PUSH
25219: LD_INT 83
25221: PUSH
25222: LD_INT 84
25224: PUSH
25225: LD_INT 85
25227: PUSH
25228: LD_INT 86
25230: PUSH
25231: LD_INT 11
25233: PUSH
25234: LD_INT 9
25236: PUSH
25237: LD_INT 20
25239: PUSH
25240: LD_INT 19
25242: PUSH
25243: LD_INT 21
25245: PUSH
25246: LD_INT 24
25248: PUSH
25249: LD_INT 22
25251: PUSH
25252: LD_INT 25
25254: PUSH
25255: LD_INT 28
25257: PUSH
25258: LD_INT 29
25260: PUSH
25261: LD_INT 30
25263: PUSH
25264: LD_INT 31
25266: PUSH
25267: LD_INT 37
25269: PUSH
25270: LD_INT 38
25272: PUSH
25273: LD_INT 32
25275: PUSH
25276: LD_INT 27
25278: PUSH
25279: LD_INT 33
25281: PUSH
25282: LD_INT 69
25284: PUSH
25285: LD_INT 39
25287: PUSH
25288: LD_INT 34
25290: PUSH
25291: LD_INT 40
25293: PUSH
25294: LD_INT 71
25296: PUSH
25297: LD_INT 23
25299: PUSH
25300: LD_INT 44
25302: PUSH
25303: LD_INT 48
25305: PUSH
25306: LD_INT 49
25308: PUSH
25309: LD_INT 50
25311: PUSH
25312: LD_INT 51
25314: PUSH
25315: LD_INT 52
25317: PUSH
25318: LD_INT 53
25320: PUSH
25321: LD_INT 54
25323: PUSH
25324: LD_INT 55
25326: PUSH
25327: LD_INT 56
25329: PUSH
25330: LD_INT 57
25332: PUSH
25333: LD_INT 58
25335: PUSH
25336: LD_INT 59
25338: PUSH
25339: LD_INT 63
25341: PUSH
25342: LD_INT 64
25344: PUSH
25345: LD_INT 65
25347: PUSH
25348: LD_INT 82
25350: PUSH
25351: LD_INT 83
25353: PUSH
25354: LD_INT 84
25356: PUSH
25357: LD_INT 85
25359: PUSH
25360: LD_INT 86
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: ST_TO_ADDR
25418: GO 25421
25420: POP
// if state > - 1 and state < 3 then
25421: LD_VAR 0 3
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: GREATER
25430: PUSH
25431: LD_VAR 0 3
25435: PUSH
25436: LD_INT 3
25438: LESS
25439: AND
25440: IFFALSE 25497
// for i in result do
25442: LD_ADDR_VAR 0 5
25446: PUSH
25447: LD_VAR 0 4
25451: PUSH
25452: FOR_IN
25453: IFFALSE 25495
// if GetTech ( i , side ) <> state then
25455: LD_VAR 0 5
25459: PPUSH
25460: LD_VAR 0 1
25464: PPUSH
25465: CALL_OW 321
25469: PUSH
25470: LD_VAR 0 3
25474: NONEQUAL
25475: IFFALSE 25493
// result := result diff i ;
25477: LD_ADDR_VAR 0 4
25481: PUSH
25482: LD_VAR 0 4
25486: PUSH
25487: LD_VAR 0 5
25491: DIFF
25492: ST_TO_ADDR
25493: GO 25452
25495: POP
25496: POP
// end ;
25497: LD_VAR 0 4
25501: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25502: LD_INT 0
25504: PPUSH
25505: PPUSH
25506: PPUSH
// result := true ;
25507: LD_ADDR_VAR 0 3
25511: PUSH
25512: LD_INT 1
25514: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25515: LD_ADDR_VAR 0 5
25519: PUSH
25520: LD_VAR 0 2
25524: PPUSH
25525: CALL_OW 480
25529: ST_TO_ADDR
// if not tmp then
25530: LD_VAR 0 5
25534: NOT
25535: IFFALSE 25539
// exit ;
25537: GO 25588
// for i in tmp do
25539: LD_ADDR_VAR 0 4
25543: PUSH
25544: LD_VAR 0 5
25548: PUSH
25549: FOR_IN
25550: IFFALSE 25586
// if GetTech ( i , side ) <> state_researched then
25552: LD_VAR 0 4
25556: PPUSH
25557: LD_VAR 0 1
25561: PPUSH
25562: CALL_OW 321
25566: PUSH
25567: LD_INT 2
25569: NONEQUAL
25570: IFFALSE 25584
// begin result := false ;
25572: LD_ADDR_VAR 0 3
25576: PUSH
25577: LD_INT 0
25579: ST_TO_ADDR
// exit ;
25580: POP
25581: POP
25582: GO 25588
// end ;
25584: GO 25549
25586: POP
25587: POP
// end ;
25588: LD_VAR 0 3
25592: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25593: LD_INT 0
25595: PPUSH
25596: PPUSH
25597: PPUSH
25598: PPUSH
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
25603: PPUSH
25604: PPUSH
25605: PPUSH
25606: PPUSH
25607: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25608: LD_VAR 0 1
25612: NOT
25613: PUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 257
25623: PUSH
25624: LD_INT 9
25626: NONEQUAL
25627: OR
25628: IFFALSE 25632
// exit ;
25630: GO 26205
// side := GetSide ( unit ) ;
25632: LD_ADDR_VAR 0 9
25636: PUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 255
25646: ST_TO_ADDR
// tech_space := tech_spacanom ;
25647: LD_ADDR_VAR 0 12
25651: PUSH
25652: LD_INT 29
25654: ST_TO_ADDR
// tech_time := tech_taurad ;
25655: LD_ADDR_VAR 0 13
25659: PUSH
25660: LD_INT 28
25662: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25663: LD_ADDR_VAR 0 11
25667: PUSH
25668: LD_VAR 0 1
25672: PPUSH
25673: CALL_OW 310
25677: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25678: LD_VAR 0 11
25682: PPUSH
25683: CALL_OW 247
25687: PUSH
25688: LD_INT 2
25690: EQUAL
25691: IFFALSE 25695
// exit ;
25693: GO 26205
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25695: LD_ADDR_VAR 0 8
25699: PUSH
25700: LD_INT 81
25702: PUSH
25703: LD_VAR 0 9
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: LD_INT 21
25717: PUSH
25718: LD_INT 3
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PPUSH
25733: CALL_OW 69
25737: ST_TO_ADDR
// if not tmp then
25738: LD_VAR 0 8
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 26205
// if in_unit then
25747: LD_VAR 0 11
25751: IFFALSE 25775
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25753: LD_ADDR_VAR 0 10
25757: PUSH
25758: LD_VAR 0 8
25762: PPUSH
25763: LD_VAR 0 11
25767: PPUSH
25768: CALL_OW 74
25772: ST_TO_ADDR
25773: GO 25795
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25775: LD_ADDR_VAR 0 10
25779: PUSH
25780: LD_VAR 0 8
25784: PPUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 74
25794: ST_TO_ADDR
// if not enemy then
25795: LD_VAR 0 10
25799: NOT
25800: IFFALSE 25804
// exit ;
25802: GO 26205
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25804: LD_VAR 0 11
25808: PUSH
25809: LD_VAR 0 11
25813: PPUSH
25814: LD_VAR 0 10
25818: PPUSH
25819: CALL_OW 296
25823: PUSH
25824: LD_INT 13
25826: GREATER
25827: AND
25828: PUSH
25829: LD_VAR 0 1
25833: PPUSH
25834: LD_VAR 0 10
25838: PPUSH
25839: CALL_OW 296
25843: PUSH
25844: LD_INT 12
25846: GREATER
25847: OR
25848: IFFALSE 25852
// exit ;
25850: GO 26205
// missile := [ 1 ] ;
25852: LD_ADDR_VAR 0 14
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: EMPTY
25861: LIST
25862: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25863: LD_VAR 0 9
25867: PPUSH
25868: LD_VAR 0 12
25872: PPUSH
25873: CALL_OW 325
25877: IFFALSE 25906
// missile := Replace ( missile , missile + 1 , 2 ) ;
25879: LD_ADDR_VAR 0 14
25883: PUSH
25884: LD_VAR 0 14
25888: PPUSH
25889: LD_VAR 0 14
25893: PUSH
25894: LD_INT 1
25896: PLUS
25897: PPUSH
25898: LD_INT 2
25900: PPUSH
25901: CALL_OW 1
25905: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25906: LD_VAR 0 9
25910: PPUSH
25911: LD_VAR 0 13
25915: PPUSH
25916: CALL_OW 325
25920: PUSH
25921: LD_VAR 0 10
25925: PPUSH
25926: CALL_OW 255
25930: PPUSH
25931: LD_VAR 0 13
25935: PPUSH
25936: CALL_OW 325
25940: NOT
25941: AND
25942: IFFALSE 25971
// missile := Replace ( missile , missile + 1 , 3 ) ;
25944: LD_ADDR_VAR 0 14
25948: PUSH
25949: LD_VAR 0 14
25953: PPUSH
25954: LD_VAR 0 14
25958: PUSH
25959: LD_INT 1
25961: PLUS
25962: PPUSH
25963: LD_INT 3
25965: PPUSH
25966: CALL_OW 1
25970: ST_TO_ADDR
// if missile < 2 then
25971: LD_VAR 0 14
25975: PUSH
25976: LD_INT 2
25978: LESS
25979: IFFALSE 25983
// exit ;
25981: GO 26205
// x := GetX ( enemy ) ;
25983: LD_ADDR_VAR 0 4
25987: PUSH
25988: LD_VAR 0 10
25992: PPUSH
25993: CALL_OW 250
25997: ST_TO_ADDR
// y := GetY ( enemy ) ;
25998: LD_ADDR_VAR 0 5
26002: PUSH
26003: LD_VAR 0 10
26007: PPUSH
26008: CALL_OW 251
26012: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26013: LD_ADDR_VAR 0 6
26017: PUSH
26018: LD_VAR 0 4
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PPUSH
26027: LD_INT 1
26029: PPUSH
26030: CALL_OW 12
26034: PLUS
26035: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26036: LD_ADDR_VAR 0 7
26040: PUSH
26041: LD_VAR 0 5
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PPUSH
26050: LD_INT 1
26052: PPUSH
26053: CALL_OW 12
26057: PLUS
26058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26059: LD_VAR 0 6
26063: PPUSH
26064: LD_VAR 0 7
26068: PPUSH
26069: CALL_OW 488
26073: NOT
26074: IFFALSE 26096
// begin _x := x ;
26076: LD_ADDR_VAR 0 6
26080: PUSH
26081: LD_VAR 0 4
26085: ST_TO_ADDR
// _y := y ;
26086: LD_ADDR_VAR 0 7
26090: PUSH
26091: LD_VAR 0 5
26095: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26096: LD_ADDR_VAR 0 3
26100: PUSH
26101: LD_INT 1
26103: PPUSH
26104: LD_VAR 0 14
26108: PPUSH
26109: CALL_OW 12
26113: ST_TO_ADDR
// case i of 1 :
26114: LD_VAR 0 3
26118: PUSH
26119: LD_INT 1
26121: DOUBLE
26122: EQUAL
26123: IFTRUE 26127
26125: GO 26144
26127: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26128: LD_VAR 0 1
26132: PPUSH
26133: LD_VAR 0 10
26137: PPUSH
26138: CALL_OW 115
26142: GO 26205
26144: LD_INT 2
26146: DOUBLE
26147: EQUAL
26148: IFTRUE 26152
26150: GO 26174
26152: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26153: LD_VAR 0 1
26157: PPUSH
26158: LD_VAR 0 6
26162: PPUSH
26163: LD_VAR 0 7
26167: PPUSH
26168: CALL_OW 153
26172: GO 26205
26174: LD_INT 3
26176: DOUBLE
26177: EQUAL
26178: IFTRUE 26182
26180: GO 26204
26182: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26183: LD_VAR 0 1
26187: PPUSH
26188: LD_VAR 0 6
26192: PPUSH
26193: LD_VAR 0 7
26197: PPUSH
26198: CALL_OW 154
26202: GO 26205
26204: POP
// end ;
26205: LD_VAR 0 2
26209: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
26214: PPUSH
26215: PPUSH
26216: PPUSH
26217: PPUSH
// if not unit or not building then
26218: LD_VAR 0 1
26222: NOT
26223: PUSH
26224: LD_VAR 0 2
26228: NOT
26229: OR
26230: IFFALSE 26234
// exit ;
26232: GO 26392
// x := GetX ( building ) ;
26234: LD_ADDR_VAR 0 5
26238: PUSH
26239: LD_VAR 0 2
26243: PPUSH
26244: CALL_OW 250
26248: ST_TO_ADDR
// y := GetY ( building ) ;
26249: LD_ADDR_VAR 0 6
26253: PUSH
26254: LD_VAR 0 2
26258: PPUSH
26259: CALL_OW 251
26263: ST_TO_ADDR
// for i = 0 to 5 do
26264: LD_ADDR_VAR 0 4
26268: PUSH
26269: DOUBLE
26270: LD_INT 0
26272: DEC
26273: ST_TO_ADDR
26274: LD_INT 5
26276: PUSH
26277: FOR_TO
26278: IFFALSE 26390
// begin _x := ShiftX ( x , i , 3 ) ;
26280: LD_ADDR_VAR 0 7
26284: PUSH
26285: LD_VAR 0 5
26289: PPUSH
26290: LD_VAR 0 4
26294: PPUSH
26295: LD_INT 3
26297: PPUSH
26298: CALL_OW 272
26302: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26303: LD_ADDR_VAR 0 8
26307: PUSH
26308: LD_VAR 0 6
26312: PPUSH
26313: LD_VAR 0 4
26317: PPUSH
26318: LD_INT 3
26320: PPUSH
26321: CALL_OW 273
26325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26326: LD_VAR 0 7
26330: PPUSH
26331: LD_VAR 0 8
26335: PPUSH
26336: CALL_OW 488
26340: NOT
26341: IFFALSE 26345
// continue ;
26343: GO 26277
// if HexInfo ( _x , _y ) = 0 then
26345: LD_VAR 0 7
26349: PPUSH
26350: LD_VAR 0 8
26354: PPUSH
26355: CALL_OW 428
26359: PUSH
26360: LD_INT 0
26362: EQUAL
26363: IFFALSE 26388
// begin ComMoveXY ( unit , _x , _y ) ;
26365: LD_VAR 0 1
26369: PPUSH
26370: LD_VAR 0 7
26374: PPUSH
26375: LD_VAR 0 8
26379: PPUSH
26380: CALL_OW 111
// exit ;
26384: POP
26385: POP
26386: GO 26392
// end ; end ;
26388: GO 26277
26390: POP
26391: POP
// end ;
26392: LD_VAR 0 3
26396: RET
// export function ScanBase ( side , base_area ) ; begin
26397: LD_INT 0
26399: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26400: LD_ADDR_VAR 0 3
26404: PUSH
26405: LD_VAR 0 2
26409: PPUSH
26410: LD_INT 81
26412: PUSH
26413: LD_VAR 0 1
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PPUSH
26422: CALL_OW 70
26426: ST_TO_ADDR
// end ;
26427: LD_VAR 0 3
26431: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26432: LD_INT 0
26434: PPUSH
26435: PPUSH
26436: PPUSH
26437: PPUSH
// result := false ;
26438: LD_ADDR_VAR 0 2
26442: PUSH
26443: LD_INT 0
26445: ST_TO_ADDR
// side := GetSide ( unit ) ;
26446: LD_ADDR_VAR 0 3
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 255
26460: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26461: LD_ADDR_VAR 0 4
26465: PUSH
26466: LD_VAR 0 1
26470: PPUSH
26471: CALL_OW 248
26475: ST_TO_ADDR
// case nat of 1 :
26476: LD_VAR 0 4
26480: PUSH
26481: LD_INT 1
26483: DOUBLE
26484: EQUAL
26485: IFTRUE 26489
26487: GO 26500
26489: POP
// tech := tech_lassight ; 2 :
26490: LD_ADDR_VAR 0 5
26494: PUSH
26495: LD_INT 12
26497: ST_TO_ADDR
26498: GO 26539
26500: LD_INT 2
26502: DOUBLE
26503: EQUAL
26504: IFTRUE 26508
26506: GO 26519
26508: POP
// tech := tech_mortar ; 3 :
26509: LD_ADDR_VAR 0 5
26513: PUSH
26514: LD_INT 41
26516: ST_TO_ADDR
26517: GO 26539
26519: LD_INT 3
26521: DOUBLE
26522: EQUAL
26523: IFTRUE 26527
26525: GO 26538
26527: POP
// tech := tech_bazooka ; end ;
26528: LD_ADDR_VAR 0 5
26532: PUSH
26533: LD_INT 44
26535: ST_TO_ADDR
26536: GO 26539
26538: POP
// if Researched ( side , tech ) then
26539: LD_VAR 0 3
26543: PPUSH
26544: LD_VAR 0 5
26548: PPUSH
26549: CALL_OW 325
26553: IFFALSE 26580
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26555: LD_ADDR_VAR 0 2
26559: PUSH
26560: LD_INT 5
26562: PUSH
26563: LD_INT 8
26565: PUSH
26566: LD_INT 9
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: LIST
26573: PUSH
26574: LD_VAR 0 4
26578: ARRAY
26579: ST_TO_ADDR
// end ;
26580: LD_VAR 0 2
26584: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26585: LD_INT 0
26587: PPUSH
26588: PPUSH
26589: PPUSH
// if not mines then
26590: LD_VAR 0 2
26594: NOT
26595: IFFALSE 26599
// exit ;
26597: GO 26743
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26599: LD_ADDR_VAR 0 5
26603: PUSH
26604: LD_INT 81
26606: PUSH
26607: LD_VAR 0 1
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 3
26618: PUSH
26619: LD_INT 21
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PPUSH
26637: CALL_OW 69
26641: ST_TO_ADDR
// for i in mines do
26642: LD_ADDR_VAR 0 4
26646: PUSH
26647: LD_VAR 0 2
26651: PUSH
26652: FOR_IN
26653: IFFALSE 26741
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26655: LD_VAR 0 4
26659: PUSH
26660: LD_INT 1
26662: ARRAY
26663: PPUSH
26664: LD_VAR 0 4
26668: PUSH
26669: LD_INT 2
26671: ARRAY
26672: PPUSH
26673: CALL_OW 458
26677: NOT
26678: IFFALSE 26682
// continue ;
26680: GO 26652
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26682: LD_VAR 0 4
26686: PUSH
26687: LD_INT 1
26689: ARRAY
26690: PPUSH
26691: LD_VAR 0 4
26695: PUSH
26696: LD_INT 2
26698: ARRAY
26699: PPUSH
26700: CALL_OW 428
26704: PUSH
26705: LD_VAR 0 5
26709: IN
26710: IFFALSE 26739
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26712: LD_VAR 0 4
26716: PUSH
26717: LD_INT 1
26719: ARRAY
26720: PPUSH
26721: LD_VAR 0 4
26725: PUSH
26726: LD_INT 2
26728: ARRAY
26729: PPUSH
26730: LD_VAR 0 1
26734: PPUSH
26735: CALL_OW 456
// end ;
26739: GO 26652
26741: POP
26742: POP
// end ;
26743: LD_VAR 0 3
26747: RET
// export function Count ( array ) ; begin
26748: LD_INT 0
26750: PPUSH
// result := array + 0 ;
26751: LD_ADDR_VAR 0 2
26755: PUSH
26756: LD_VAR 0 1
26760: PUSH
26761: LD_INT 0
26763: PLUS
26764: ST_TO_ADDR
// end ;
26765: LD_VAR 0 2
26769: RET
// export function IsEmpty ( building ) ; begin
26770: LD_INT 0
26772: PPUSH
// if not building then
26773: LD_VAR 0 1
26777: NOT
26778: IFFALSE 26782
// exit ;
26780: GO 26825
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26782: LD_ADDR_VAR 0 2
26786: PUSH
26787: LD_VAR 0 1
26791: PUSH
26792: LD_INT 22
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 255
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 58
26811: PUSH
26812: EMPTY
26813: LIST
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PPUSH
26819: CALL_OW 69
26823: IN
26824: ST_TO_ADDR
// end ;
26825: LD_VAR 0 2
26829: RET
// export function IsNotFull ( building ) ; var places ; begin
26830: LD_INT 0
26832: PPUSH
26833: PPUSH
// if not building then
26834: LD_VAR 0 1
26838: NOT
26839: IFFALSE 26843
// exit ;
26841: GO 26871
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26843: LD_ADDR_VAR 0 2
26847: PUSH
26848: LD_VAR 0 1
26852: PPUSH
26853: LD_INT 3
26855: PUSH
26856: LD_INT 62
26858: PUSH
26859: EMPTY
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 72
26870: ST_TO_ADDR
// end ;
26871: LD_VAR 0 2
26875: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26876: LD_INT 0
26878: PPUSH
26879: PPUSH
26880: PPUSH
26881: PPUSH
// tmp := [ ] ;
26882: LD_ADDR_VAR 0 3
26886: PUSH
26887: EMPTY
26888: ST_TO_ADDR
// list := [ ] ;
26889: LD_ADDR_VAR 0 5
26893: PUSH
26894: EMPTY
26895: ST_TO_ADDR
// for i = 16 to 25 do
26896: LD_ADDR_VAR 0 4
26900: PUSH
26901: DOUBLE
26902: LD_INT 16
26904: DEC
26905: ST_TO_ADDR
26906: LD_INT 25
26908: PUSH
26909: FOR_TO
26910: IFFALSE 26983
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26912: LD_ADDR_VAR 0 3
26916: PUSH
26917: LD_VAR 0 3
26921: PUSH
26922: LD_INT 22
26924: PUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: CALL_OW 255
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 91
26941: PUSH
26942: LD_VAR 0 1
26946: PUSH
26947: LD_INT 6
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 30
26957: PUSH
26958: LD_VAR 0 4
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: PPUSH
26975: CALL_OW 69
26979: ADD
26980: ST_TO_ADDR
26981: GO 26909
26983: POP
26984: POP
// for i = 1 to tmp do
26985: LD_ADDR_VAR 0 4
26989: PUSH
26990: DOUBLE
26991: LD_INT 1
26993: DEC
26994: ST_TO_ADDR
26995: LD_VAR 0 3
26999: PUSH
27000: FOR_TO
27001: IFFALSE 27089
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27003: LD_ADDR_VAR 0 5
27007: PUSH
27008: LD_VAR 0 5
27012: PUSH
27013: LD_VAR 0 3
27017: PUSH
27018: LD_VAR 0 4
27022: ARRAY
27023: PPUSH
27024: CALL_OW 266
27028: PUSH
27029: LD_VAR 0 3
27033: PUSH
27034: LD_VAR 0 4
27038: ARRAY
27039: PPUSH
27040: CALL_OW 250
27044: PUSH
27045: LD_VAR 0 3
27049: PUSH
27050: LD_VAR 0 4
27054: ARRAY
27055: PPUSH
27056: CALL_OW 251
27060: PUSH
27061: LD_VAR 0 3
27065: PUSH
27066: LD_VAR 0 4
27070: ARRAY
27071: PPUSH
27072: CALL_OW 254
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: ADD
27086: ST_TO_ADDR
27087: GO 27000
27089: POP
27090: POP
// result := list ;
27091: LD_ADDR_VAR 0 2
27095: PUSH
27096: LD_VAR 0 5
27100: ST_TO_ADDR
// end ;
27101: LD_VAR 0 2
27105: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27106: LD_INT 0
27108: PPUSH
27109: PPUSH
27110: PPUSH
27111: PPUSH
27112: PPUSH
27113: PPUSH
27114: PPUSH
// if not factory then
27115: LD_VAR 0 1
27119: NOT
27120: IFFALSE 27124
// exit ;
27122: GO 27717
// if control = control_apeman then
27124: LD_VAR 0 4
27128: PUSH
27129: LD_INT 5
27131: EQUAL
27132: IFFALSE 27241
// begin tmp := UnitsInside ( factory ) ;
27134: LD_ADDR_VAR 0 8
27138: PUSH
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL_OW 313
27148: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27149: LD_VAR 0 8
27153: PPUSH
27154: LD_INT 25
27156: PUSH
27157: LD_INT 12
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PPUSH
27164: CALL_OW 72
27168: NOT
27169: IFFALSE 27179
// control := control_manual ;
27171: LD_ADDR_VAR 0 4
27175: PUSH
27176: LD_INT 1
27178: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27179: LD_ADDR_VAR 0 8
27183: PUSH
27184: LD_VAR 0 1
27188: PPUSH
27189: CALL 26876 0 1
27193: ST_TO_ADDR
// if tmp then
27194: LD_VAR 0 8
27198: IFFALSE 27241
// begin for i in tmp do
27200: LD_ADDR_VAR 0 7
27204: PUSH
27205: LD_VAR 0 8
27209: PUSH
27210: FOR_IN
27211: IFFALSE 27239
// if i [ 1 ] = b_ext_radio then
27213: LD_VAR 0 7
27217: PUSH
27218: LD_INT 1
27220: ARRAY
27221: PUSH
27222: LD_INT 22
27224: EQUAL
27225: IFFALSE 27237
// begin control := control_remote ;
27227: LD_ADDR_VAR 0 4
27231: PUSH
27232: LD_INT 2
27234: ST_TO_ADDR
// break ;
27235: GO 27239
// end ;
27237: GO 27210
27239: POP
27240: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27241: LD_VAR 0 1
27245: PPUSH
27246: LD_VAR 0 2
27250: PPUSH
27251: LD_VAR 0 3
27255: PPUSH
27256: LD_VAR 0 4
27260: PPUSH
27261: LD_VAR 0 5
27265: PPUSH
27266: CALL_OW 448
27270: IFFALSE 27305
// begin result := [ chassis , engine , control , weapon ] ;
27272: LD_ADDR_VAR 0 6
27276: PUSH
27277: LD_VAR 0 2
27281: PUSH
27282: LD_VAR 0 3
27286: PUSH
27287: LD_VAR 0 4
27291: PUSH
27292: LD_VAR 0 5
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: ST_TO_ADDR
// exit ;
27303: GO 27717
// end ; _chassis := AvailableChassisList ( factory ) ;
27305: LD_ADDR_VAR 0 9
27309: PUSH
27310: LD_VAR 0 1
27314: PPUSH
27315: CALL_OW 475
27319: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27320: LD_ADDR_VAR 0 11
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 476
27334: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27335: LD_ADDR_VAR 0 12
27339: PUSH
27340: LD_VAR 0 1
27344: PPUSH
27345: CALL_OW 477
27349: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27350: LD_ADDR_VAR 0 10
27354: PUSH
27355: LD_VAR 0 1
27359: PPUSH
27360: CALL_OW 478
27364: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27365: LD_VAR 0 9
27369: NOT
27370: PUSH
27371: LD_VAR 0 11
27375: NOT
27376: OR
27377: PUSH
27378: LD_VAR 0 12
27382: NOT
27383: OR
27384: PUSH
27385: LD_VAR 0 10
27389: NOT
27390: OR
27391: IFFALSE 27426
// begin result := [ chassis , engine , control , weapon ] ;
27393: LD_ADDR_VAR 0 6
27397: PUSH
27398: LD_VAR 0 2
27402: PUSH
27403: LD_VAR 0 3
27407: PUSH
27408: LD_VAR 0 4
27412: PUSH
27413: LD_VAR 0 5
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
// exit ;
27424: GO 27717
// end ; if not chassis in _chassis then
27426: LD_VAR 0 2
27430: PUSH
27431: LD_VAR 0 9
27435: IN
27436: NOT
27437: IFFALSE 27463
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27439: LD_ADDR_VAR 0 2
27443: PUSH
27444: LD_VAR 0 9
27448: PUSH
27449: LD_INT 1
27451: PPUSH
27452: LD_VAR 0 9
27456: PPUSH
27457: CALL_OW 12
27461: ARRAY
27462: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27463: LD_VAR 0 2
27467: PPUSH
27468: LD_VAR 0 3
27472: PPUSH
27473: CALL 27722 0 2
27477: NOT
27478: IFFALSE 27537
// repeat engine := _engine [ 1 ] ;
27480: LD_ADDR_VAR 0 3
27484: PUSH
27485: LD_VAR 0 11
27489: PUSH
27490: LD_INT 1
27492: ARRAY
27493: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27494: LD_ADDR_VAR 0 11
27498: PUSH
27499: LD_VAR 0 11
27503: PPUSH
27504: LD_INT 1
27506: PPUSH
27507: CALL_OW 3
27511: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27512: LD_VAR 0 2
27516: PPUSH
27517: LD_VAR 0 3
27521: PPUSH
27522: CALL 27722 0 2
27526: PUSH
27527: LD_VAR 0 11
27531: PUSH
27532: EMPTY
27533: EQUAL
27534: OR
27535: IFFALSE 27480
// if not control in _control then
27537: LD_VAR 0 4
27541: PUSH
27542: LD_VAR 0 12
27546: IN
27547: NOT
27548: IFFALSE 27574
// control := _control [ rand ( 1 , _control ) ] ;
27550: LD_ADDR_VAR 0 4
27554: PUSH
27555: LD_VAR 0 12
27559: PUSH
27560: LD_INT 1
27562: PPUSH
27563: LD_VAR 0 12
27567: PPUSH
27568: CALL_OW 12
27572: ARRAY
27573: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27574: LD_VAR 0 2
27578: PPUSH
27579: LD_VAR 0 5
27583: PPUSH
27584: CALL 27942 0 2
27588: NOT
27589: IFFALSE 27648
// repeat weapon := _weapon [ 1 ] ;
27591: LD_ADDR_VAR 0 5
27595: PUSH
27596: LD_VAR 0 10
27600: PUSH
27601: LD_INT 1
27603: ARRAY
27604: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27605: LD_ADDR_VAR 0 10
27609: PUSH
27610: LD_VAR 0 10
27614: PPUSH
27615: LD_INT 1
27617: PPUSH
27618: CALL_OW 3
27622: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27623: LD_VAR 0 2
27627: PPUSH
27628: LD_VAR 0 5
27632: PPUSH
27633: CALL 27942 0 2
27637: PUSH
27638: LD_VAR 0 10
27642: PUSH
27643: EMPTY
27644: EQUAL
27645: OR
27646: IFFALSE 27591
// result := [ ] ;
27648: LD_ADDR_VAR 0 6
27652: PUSH
27653: EMPTY
27654: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27655: LD_VAR 0 1
27659: PPUSH
27660: LD_VAR 0 2
27664: PPUSH
27665: LD_VAR 0 3
27669: PPUSH
27670: LD_VAR 0 4
27674: PPUSH
27675: LD_VAR 0 5
27679: PPUSH
27680: CALL_OW 448
27684: IFFALSE 27717
// result := [ chassis , engine , control , weapon ] ;
27686: LD_ADDR_VAR 0 6
27690: PUSH
27691: LD_VAR 0 2
27695: PUSH
27696: LD_VAR 0 3
27700: PUSH
27701: LD_VAR 0 4
27705: PUSH
27706: LD_VAR 0 5
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: ST_TO_ADDR
// end ;
27717: LD_VAR 0 6
27721: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27722: LD_INT 0
27724: PPUSH
// if not chassis or not engine then
27725: LD_VAR 0 1
27729: NOT
27730: PUSH
27731: LD_VAR 0 2
27735: NOT
27736: OR
27737: IFFALSE 27741
// exit ;
27739: GO 27937
// case engine of engine_solar :
27741: LD_VAR 0 2
27745: PUSH
27746: LD_INT 2
27748: DOUBLE
27749: EQUAL
27750: IFTRUE 27754
27752: GO 27792
27754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27755: LD_ADDR_VAR 0 3
27759: PUSH
27760: LD_INT 11
27762: PUSH
27763: LD_INT 12
27765: PUSH
27766: LD_INT 13
27768: PUSH
27769: LD_INT 14
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: LD_INT 3
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: ST_TO_ADDR
27790: GO 27921
27792: LD_INT 1
27794: DOUBLE
27795: EQUAL
27796: IFTRUE 27800
27798: GO 27862
27800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27801: LD_ADDR_VAR 0 3
27805: PUSH
27806: LD_INT 11
27808: PUSH
27809: LD_INT 12
27811: PUSH
27812: LD_INT 13
27814: PUSH
27815: LD_INT 14
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: LD_INT 3
27826: PUSH
27827: LD_INT 4
27829: PUSH
27830: LD_INT 5
27832: PUSH
27833: LD_INT 21
27835: PUSH
27836: LD_INT 23
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_INT 24
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: ST_TO_ADDR
27860: GO 27921
27862: LD_INT 3
27864: DOUBLE
27865: EQUAL
27866: IFTRUE 27870
27868: GO 27920
27870: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27871: LD_ADDR_VAR 0 3
27875: PUSH
27876: LD_INT 13
27878: PUSH
27879: LD_INT 14
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 3
27887: PUSH
27888: LD_INT 4
27890: PUSH
27891: LD_INT 5
27893: PUSH
27894: LD_INT 21
27896: PUSH
27897: LD_INT 22
27899: PUSH
27900: LD_INT 23
27902: PUSH
27903: LD_INT 24
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
27918: GO 27921
27920: POP
// result := ( chassis in result ) ;
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: LD_VAR 0 1
27930: PUSH
27931: LD_VAR 0 3
27935: IN
27936: ST_TO_ADDR
// end ;
27937: LD_VAR 0 3
27941: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27942: LD_INT 0
27944: PPUSH
// if not chassis or not weapon then
27945: LD_VAR 0 1
27949: NOT
27950: PUSH
27951: LD_VAR 0 2
27955: NOT
27956: OR
27957: IFFALSE 27961
// exit ;
27959: GO 29021
// case weapon of us_machine_gun :
27961: LD_VAR 0 2
27965: PUSH
27966: LD_INT 2
27968: DOUBLE
27969: EQUAL
27970: IFTRUE 27974
27972: GO 28004
27974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27975: LD_ADDR_VAR 0 3
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: LD_INT 3
27988: PUSH
27989: LD_INT 4
27991: PUSH
27992: LD_INT 5
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: ST_TO_ADDR
28002: GO 29005
28004: LD_INT 3
28006: DOUBLE
28007: EQUAL
28008: IFTRUE 28012
28010: GO 28042
28012: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: LD_INT 3
28026: PUSH
28027: LD_INT 4
28029: PUSH
28030: LD_INT 5
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: ST_TO_ADDR
28040: GO 29005
28042: LD_INT 11
28044: DOUBLE
28045: EQUAL
28046: IFTRUE 28050
28048: GO 28080
28050: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28051: LD_ADDR_VAR 0 3
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: LD_INT 3
28064: PUSH
28065: LD_INT 4
28067: PUSH
28068: LD_INT 5
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: ST_TO_ADDR
28078: GO 29005
28080: LD_INT 4
28082: DOUBLE
28083: EQUAL
28084: IFTRUE 28088
28086: GO 28114
28088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28089: LD_ADDR_VAR 0 3
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: LD_INT 4
28102: PUSH
28103: LD_INT 5
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
28112: GO 29005
28114: LD_INT 5
28116: DOUBLE
28117: EQUAL
28118: IFTRUE 28122
28120: GO 28148
28122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_INT 2
28130: PUSH
28131: LD_INT 3
28133: PUSH
28134: LD_INT 4
28136: PUSH
28137: LD_INT 5
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
28146: GO 29005
28148: LD_INT 9
28150: DOUBLE
28151: EQUAL
28152: IFTRUE 28156
28154: GO 28182
28156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28157: LD_ADDR_VAR 0 3
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: LD_INT 3
28167: PUSH
28168: LD_INT 4
28170: PUSH
28171: LD_INT 5
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
28180: GO 29005
28182: LD_INT 7
28184: DOUBLE
28185: EQUAL
28186: IFTRUE 28190
28188: GO 28216
28190: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28191: LD_ADDR_VAR 0 3
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: LD_INT 4
28204: PUSH
28205: LD_INT 5
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: ST_TO_ADDR
28214: GO 29005
28216: LD_INT 12
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28250
28224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28225: LD_ADDR_VAR 0 3
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: LD_INT 3
28235: PUSH
28236: LD_INT 4
28238: PUSH
28239: LD_INT 5
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
28248: GO 29005
28250: LD_INT 13
28252: DOUBLE
28253: EQUAL
28254: IFTRUE 28258
28256: GO 28284
28258: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28259: LD_ADDR_VAR 0 3
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: LD_INT 3
28269: PUSH
28270: LD_INT 4
28272: PUSH
28273: LD_INT 5
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: ST_TO_ADDR
28282: GO 29005
28284: LD_INT 14
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28310
28292: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_INT 4
28300: PUSH
28301: LD_INT 5
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: ST_TO_ADDR
28308: GO 29005
28310: LD_INT 6
28312: DOUBLE
28313: EQUAL
28314: IFTRUE 28318
28316: GO 28336
28318: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28319: LD_ADDR_VAR 0 3
28323: PUSH
28324: LD_INT 4
28326: PUSH
28327: LD_INT 5
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: ST_TO_ADDR
28334: GO 29005
28336: LD_INT 10
28338: DOUBLE
28339: EQUAL
28340: IFTRUE 28344
28342: GO 28362
28344: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 4
28352: PUSH
28353: LD_INT 5
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: ST_TO_ADDR
28360: GO 29005
28362: LD_INT 22
28364: DOUBLE
28365: EQUAL
28366: IFTRUE 28370
28368: GO 28396
28370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28371: LD_ADDR_VAR 0 3
28375: PUSH
28376: LD_INT 11
28378: PUSH
28379: LD_INT 12
28381: PUSH
28382: LD_INT 13
28384: PUSH
28385: LD_INT 14
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: ST_TO_ADDR
28394: GO 29005
28396: LD_INT 23
28398: DOUBLE
28399: EQUAL
28400: IFTRUE 28404
28402: GO 28430
28404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28405: LD_ADDR_VAR 0 3
28409: PUSH
28410: LD_INT 11
28412: PUSH
28413: LD_INT 12
28415: PUSH
28416: LD_INT 13
28418: PUSH
28419: LD_INT 14
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: ST_TO_ADDR
28428: GO 29005
28430: LD_INT 24
28432: DOUBLE
28433: EQUAL
28434: IFTRUE 28438
28436: GO 28464
28438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28439: LD_ADDR_VAR 0 3
28443: PUSH
28444: LD_INT 11
28446: PUSH
28447: LD_INT 12
28449: PUSH
28450: LD_INT 13
28452: PUSH
28453: LD_INT 14
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
28462: GO 29005
28464: LD_INT 30
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28472
28470: GO 28498
28472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28473: LD_ADDR_VAR 0 3
28477: PUSH
28478: LD_INT 11
28480: PUSH
28481: LD_INT 12
28483: PUSH
28484: LD_INT 13
28486: PUSH
28487: LD_INT 14
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
28496: GO 29005
28498: LD_INT 25
28500: DOUBLE
28501: EQUAL
28502: IFTRUE 28506
28504: GO 28524
28506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28507: LD_ADDR_VAR 0 3
28511: PUSH
28512: LD_INT 13
28514: PUSH
28515: LD_INT 14
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: ST_TO_ADDR
28522: GO 29005
28524: LD_INT 27
28526: DOUBLE
28527: EQUAL
28528: IFTRUE 28532
28530: GO 28550
28532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28533: LD_ADDR_VAR 0 3
28537: PUSH
28538: LD_INT 13
28540: PUSH
28541: LD_INT 14
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: ST_TO_ADDR
28548: GO 29005
28550: LD_INT 92
28552: DOUBLE
28553: EQUAL
28554: IFTRUE 28558
28556: GO 28584
28558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_INT 11
28566: PUSH
28567: LD_INT 12
28569: PUSH
28570: LD_INT 13
28572: PUSH
28573: LD_INT 14
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: ST_TO_ADDR
28582: GO 29005
28584: LD_INT 28
28586: DOUBLE
28587: EQUAL
28588: IFTRUE 28592
28590: GO 28610
28592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28593: LD_ADDR_VAR 0 3
28597: PUSH
28598: LD_INT 13
28600: PUSH
28601: LD_INT 14
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: ST_TO_ADDR
28608: GO 29005
28610: LD_INT 29
28612: DOUBLE
28613: EQUAL
28614: IFTRUE 28618
28616: GO 28636
28618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28619: LD_ADDR_VAR 0 3
28623: PUSH
28624: LD_INT 13
28626: PUSH
28627: LD_INT 14
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: ST_TO_ADDR
28634: GO 29005
28636: LD_INT 31
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28644
28642: GO 28662
28644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28645: LD_ADDR_VAR 0 3
28649: PUSH
28650: LD_INT 13
28652: PUSH
28653: LD_INT 14
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: ST_TO_ADDR
28660: GO 29005
28662: LD_INT 26
28664: DOUBLE
28665: EQUAL
28666: IFTRUE 28670
28668: GO 28688
28670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28671: LD_ADDR_VAR 0 3
28675: PUSH
28676: LD_INT 13
28678: PUSH
28679: LD_INT 14
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: ST_TO_ADDR
28686: GO 29005
28688: LD_INT 42
28690: DOUBLE
28691: EQUAL
28692: IFTRUE 28696
28694: GO 28722
28696: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28697: LD_ADDR_VAR 0 3
28701: PUSH
28702: LD_INT 21
28704: PUSH
28705: LD_INT 22
28707: PUSH
28708: LD_INT 23
28710: PUSH
28711: LD_INT 24
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
28720: GO 29005
28722: LD_INT 43
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28756
28730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28731: LD_ADDR_VAR 0 3
28735: PUSH
28736: LD_INT 21
28738: PUSH
28739: LD_INT 22
28741: PUSH
28742: LD_INT 23
28744: PUSH
28745: LD_INT 24
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
28754: GO 29005
28756: LD_INT 44
28758: DOUBLE
28759: EQUAL
28760: IFTRUE 28764
28762: GO 28790
28764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28765: LD_ADDR_VAR 0 3
28769: PUSH
28770: LD_INT 21
28772: PUSH
28773: LD_INT 22
28775: PUSH
28776: LD_INT 23
28778: PUSH
28779: LD_INT 24
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: ST_TO_ADDR
28788: GO 29005
28790: LD_INT 45
28792: DOUBLE
28793: EQUAL
28794: IFTRUE 28798
28796: GO 28824
28798: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28799: LD_ADDR_VAR 0 3
28803: PUSH
28804: LD_INT 21
28806: PUSH
28807: LD_INT 22
28809: PUSH
28810: LD_INT 23
28812: PUSH
28813: LD_INT 24
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
28822: GO 29005
28824: LD_INT 49
28826: DOUBLE
28827: EQUAL
28828: IFTRUE 28832
28830: GO 28858
28832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28833: LD_ADDR_VAR 0 3
28837: PUSH
28838: LD_INT 21
28840: PUSH
28841: LD_INT 22
28843: PUSH
28844: LD_INT 23
28846: PUSH
28847: LD_INT 24
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: ST_TO_ADDR
28856: GO 29005
28858: LD_INT 51
28860: DOUBLE
28861: EQUAL
28862: IFTRUE 28866
28864: GO 28892
28866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28867: LD_ADDR_VAR 0 3
28871: PUSH
28872: LD_INT 21
28874: PUSH
28875: LD_INT 22
28877: PUSH
28878: LD_INT 23
28880: PUSH
28881: LD_INT 24
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
28890: GO 29005
28892: LD_INT 52
28894: DOUBLE
28895: EQUAL
28896: IFTRUE 28900
28898: GO 28926
28900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28901: LD_ADDR_VAR 0 3
28905: PUSH
28906: LD_INT 21
28908: PUSH
28909: LD_INT 22
28911: PUSH
28912: LD_INT 23
28914: PUSH
28915: LD_INT 24
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: ST_TO_ADDR
28924: GO 29005
28926: LD_INT 53
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28952
28934: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28935: LD_ADDR_VAR 0 3
28939: PUSH
28940: LD_INT 23
28942: PUSH
28943: LD_INT 24
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: ST_TO_ADDR
28950: GO 29005
28952: LD_INT 46
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 28978
28960: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28961: LD_ADDR_VAR 0 3
28965: PUSH
28966: LD_INT 23
28968: PUSH
28969: LD_INT 24
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: ST_TO_ADDR
28976: GO 29005
28978: LD_INT 47
28980: DOUBLE
28981: EQUAL
28982: IFTRUE 28986
28984: GO 29004
28986: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28987: LD_ADDR_VAR 0 3
28991: PUSH
28992: LD_INT 23
28994: PUSH
28995: LD_INT 24
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: ST_TO_ADDR
29002: GO 29005
29004: POP
// result := ( chassis in result ) ;
29005: LD_ADDR_VAR 0 3
29009: PUSH
29010: LD_VAR 0 1
29014: PUSH
29015: LD_VAR 0 3
29019: IN
29020: ST_TO_ADDR
// end ;
29021: LD_VAR 0 3
29025: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29026: LD_INT 0
29028: PPUSH
29029: PPUSH
29030: PPUSH
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
// result := array ;
29035: LD_ADDR_VAR 0 5
29039: PUSH
29040: LD_VAR 0 1
29044: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29045: LD_VAR 0 1
29049: NOT
29050: PUSH
29051: LD_VAR 0 2
29055: NOT
29056: OR
29057: PUSH
29058: LD_VAR 0 3
29062: NOT
29063: OR
29064: PUSH
29065: LD_VAR 0 2
29069: PUSH
29070: LD_VAR 0 1
29074: GREATER
29075: OR
29076: PUSH
29077: LD_VAR 0 3
29081: PUSH
29082: LD_VAR 0 1
29086: GREATER
29087: OR
29088: IFFALSE 29092
// exit ;
29090: GO 29388
// if direction then
29092: LD_VAR 0 4
29096: IFFALSE 29160
// begin d := 1 ;
29098: LD_ADDR_VAR 0 9
29102: PUSH
29103: LD_INT 1
29105: ST_TO_ADDR
// if i_from > i_to then
29106: LD_VAR 0 2
29110: PUSH
29111: LD_VAR 0 3
29115: GREATER
29116: IFFALSE 29142
// length := ( array - i_from ) + i_to else
29118: LD_ADDR_VAR 0 11
29122: PUSH
29123: LD_VAR 0 1
29127: PUSH
29128: LD_VAR 0 2
29132: MINUS
29133: PUSH
29134: LD_VAR 0 3
29138: PLUS
29139: ST_TO_ADDR
29140: GO 29158
// length := i_to - i_from ;
29142: LD_ADDR_VAR 0 11
29146: PUSH
29147: LD_VAR 0 3
29151: PUSH
29152: LD_VAR 0 2
29156: MINUS
29157: ST_TO_ADDR
// end else
29158: GO 29221
// begin d := - 1 ;
29160: LD_ADDR_VAR 0 9
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: ST_TO_ADDR
// if i_from > i_to then
29169: LD_VAR 0 2
29173: PUSH
29174: LD_VAR 0 3
29178: GREATER
29179: IFFALSE 29199
// length := i_from - i_to else
29181: LD_ADDR_VAR 0 11
29185: PUSH
29186: LD_VAR 0 2
29190: PUSH
29191: LD_VAR 0 3
29195: MINUS
29196: ST_TO_ADDR
29197: GO 29221
// length := ( array - i_to ) + i_from ;
29199: LD_ADDR_VAR 0 11
29203: PUSH
29204: LD_VAR 0 1
29208: PUSH
29209: LD_VAR 0 3
29213: MINUS
29214: PUSH
29215: LD_VAR 0 2
29219: PLUS
29220: ST_TO_ADDR
// end ; if not length then
29221: LD_VAR 0 11
29225: NOT
29226: IFFALSE 29230
// exit ;
29228: GO 29388
// tmp := array ;
29230: LD_ADDR_VAR 0 10
29234: PUSH
29235: LD_VAR 0 1
29239: ST_TO_ADDR
// for i = 1 to length do
29240: LD_ADDR_VAR 0 6
29244: PUSH
29245: DOUBLE
29246: LD_INT 1
29248: DEC
29249: ST_TO_ADDR
29250: LD_VAR 0 11
29254: PUSH
29255: FOR_TO
29256: IFFALSE 29376
// begin for j = 1 to array do
29258: LD_ADDR_VAR 0 7
29262: PUSH
29263: DOUBLE
29264: LD_INT 1
29266: DEC
29267: ST_TO_ADDR
29268: LD_VAR 0 1
29272: PUSH
29273: FOR_TO
29274: IFFALSE 29362
// begin k := j + d ;
29276: LD_ADDR_VAR 0 8
29280: PUSH
29281: LD_VAR 0 7
29285: PUSH
29286: LD_VAR 0 9
29290: PLUS
29291: ST_TO_ADDR
// if k > array then
29292: LD_VAR 0 8
29296: PUSH
29297: LD_VAR 0 1
29301: GREATER
29302: IFFALSE 29312
// k := 1 ;
29304: LD_ADDR_VAR 0 8
29308: PUSH
29309: LD_INT 1
29311: ST_TO_ADDR
// if not k then
29312: LD_VAR 0 8
29316: NOT
29317: IFFALSE 29329
// k := array ;
29319: LD_ADDR_VAR 0 8
29323: PUSH
29324: LD_VAR 0 1
29328: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29329: LD_ADDR_VAR 0 10
29333: PUSH
29334: LD_VAR 0 10
29338: PPUSH
29339: LD_VAR 0 8
29343: PPUSH
29344: LD_VAR 0 1
29348: PUSH
29349: LD_VAR 0 7
29353: ARRAY
29354: PPUSH
29355: CALL_OW 1
29359: ST_TO_ADDR
// end ;
29360: GO 29273
29362: POP
29363: POP
// array := tmp ;
29364: LD_ADDR_VAR 0 1
29368: PUSH
29369: LD_VAR 0 10
29373: ST_TO_ADDR
// end ;
29374: GO 29255
29376: POP
29377: POP
// result := array ;
29378: LD_ADDR_VAR 0 5
29382: PUSH
29383: LD_VAR 0 1
29387: ST_TO_ADDR
// end ;
29388: LD_VAR 0 5
29392: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29393: LD_INT 0
29395: PPUSH
29396: PPUSH
// result := 0 ;
29397: LD_ADDR_VAR 0 3
29401: PUSH
29402: LD_INT 0
29404: ST_TO_ADDR
// if not array or not value in array then
29405: LD_VAR 0 1
29409: NOT
29410: PUSH
29411: LD_VAR 0 2
29415: PUSH
29416: LD_VAR 0 1
29420: IN
29421: NOT
29422: OR
29423: IFFALSE 29427
// exit ;
29425: GO 29481
// for i = 1 to array do
29427: LD_ADDR_VAR 0 4
29431: PUSH
29432: DOUBLE
29433: LD_INT 1
29435: DEC
29436: ST_TO_ADDR
29437: LD_VAR 0 1
29441: PUSH
29442: FOR_TO
29443: IFFALSE 29479
// if value = array [ i ] then
29445: LD_VAR 0 2
29449: PUSH
29450: LD_VAR 0 1
29454: PUSH
29455: LD_VAR 0 4
29459: ARRAY
29460: EQUAL
29461: IFFALSE 29477
// begin result := i ;
29463: LD_ADDR_VAR 0 3
29467: PUSH
29468: LD_VAR 0 4
29472: ST_TO_ADDR
// exit ;
29473: POP
29474: POP
29475: GO 29481
// end ;
29477: GO 29442
29479: POP
29480: POP
// end ;
29481: LD_VAR 0 3
29485: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29486: LD_INT 0
29488: PPUSH
// vc_chassis := chassis ;
29489: LD_ADDR_OWVAR 37
29493: PUSH
29494: LD_VAR 0 1
29498: ST_TO_ADDR
// vc_engine := engine ;
29499: LD_ADDR_OWVAR 39
29503: PUSH
29504: LD_VAR 0 2
29508: ST_TO_ADDR
// vc_control := control ;
29509: LD_ADDR_OWVAR 38
29513: PUSH
29514: LD_VAR 0 3
29518: ST_TO_ADDR
// vc_weapon := weapon ;
29519: LD_ADDR_OWVAR 40
29523: PUSH
29524: LD_VAR 0 4
29528: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29529: LD_ADDR_OWVAR 41
29533: PUSH
29534: LD_VAR 0 5
29538: ST_TO_ADDR
// end ;
29539: LD_VAR 0 6
29543: RET
// export function WantPlant ( unit ) ; var task ; begin
29544: LD_INT 0
29546: PPUSH
29547: PPUSH
// result := false ;
29548: LD_ADDR_VAR 0 2
29552: PUSH
29553: LD_INT 0
29555: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29556: LD_ADDR_VAR 0 3
29560: PUSH
29561: LD_VAR 0 1
29565: PPUSH
29566: CALL_OW 437
29570: ST_TO_ADDR
// if task then
29571: LD_VAR 0 3
29575: IFFALSE 29603
// if task [ 1 ] [ 1 ] = p then
29577: LD_VAR 0 3
29581: PUSH
29582: LD_INT 1
29584: ARRAY
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PUSH
29590: LD_STRING p
29592: EQUAL
29593: IFFALSE 29603
// result := true ;
29595: LD_ADDR_VAR 0 2
29599: PUSH
29600: LD_INT 1
29602: ST_TO_ADDR
// end ;
29603: LD_VAR 0 2
29607: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29608: LD_INT 0
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
// if pos < 1 then
29614: LD_VAR 0 2
29618: PUSH
29619: LD_INT 1
29621: LESS
29622: IFFALSE 29626
// exit ;
29624: GO 29929
// if pos = 1 then
29626: LD_VAR 0 2
29630: PUSH
29631: LD_INT 1
29633: EQUAL
29634: IFFALSE 29667
// result := Replace ( arr , pos [ 1 ] , value ) else
29636: LD_ADDR_VAR 0 4
29640: PUSH
29641: LD_VAR 0 1
29645: PPUSH
29646: LD_VAR 0 2
29650: PUSH
29651: LD_INT 1
29653: ARRAY
29654: PPUSH
29655: LD_VAR 0 3
29659: PPUSH
29660: CALL_OW 1
29664: ST_TO_ADDR
29665: GO 29929
// begin tmp := arr ;
29667: LD_ADDR_VAR 0 6
29671: PUSH
29672: LD_VAR 0 1
29676: ST_TO_ADDR
// s_arr := [ tmp ] ;
29677: LD_ADDR_VAR 0 7
29681: PUSH
29682: LD_VAR 0 6
29686: PUSH
29687: EMPTY
29688: LIST
29689: ST_TO_ADDR
// for i = 1 to pos - 1 do
29690: LD_ADDR_VAR 0 5
29694: PUSH
29695: DOUBLE
29696: LD_INT 1
29698: DEC
29699: ST_TO_ADDR
29700: LD_VAR 0 2
29704: PUSH
29705: LD_INT 1
29707: MINUS
29708: PUSH
29709: FOR_TO
29710: IFFALSE 29755
// begin tmp := tmp [ pos [ i ] ] ;
29712: LD_ADDR_VAR 0 6
29716: PUSH
29717: LD_VAR 0 6
29721: PUSH
29722: LD_VAR 0 2
29726: PUSH
29727: LD_VAR 0 5
29731: ARRAY
29732: ARRAY
29733: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29734: LD_ADDR_VAR 0 7
29738: PUSH
29739: LD_VAR 0 7
29743: PUSH
29744: LD_VAR 0 6
29748: PUSH
29749: EMPTY
29750: LIST
29751: ADD
29752: ST_TO_ADDR
// end ;
29753: GO 29709
29755: POP
29756: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29757: LD_ADDR_VAR 0 6
29761: PUSH
29762: LD_VAR 0 6
29766: PPUSH
29767: LD_VAR 0 2
29771: PUSH
29772: LD_VAR 0 2
29776: ARRAY
29777: PPUSH
29778: LD_VAR 0 3
29782: PPUSH
29783: CALL_OW 1
29787: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29788: LD_ADDR_VAR 0 7
29792: PUSH
29793: LD_VAR 0 7
29797: PPUSH
29798: LD_VAR 0 7
29802: PPUSH
29803: LD_VAR 0 6
29807: PPUSH
29808: CALL_OW 1
29812: ST_TO_ADDR
// for i = s_arr downto 2 do
29813: LD_ADDR_VAR 0 5
29817: PUSH
29818: DOUBLE
29819: LD_VAR 0 7
29823: INC
29824: ST_TO_ADDR
29825: LD_INT 2
29827: PUSH
29828: FOR_DOWNTO
29829: IFFALSE 29913
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29831: LD_ADDR_VAR 0 6
29835: PUSH
29836: LD_VAR 0 7
29840: PUSH
29841: LD_VAR 0 5
29845: PUSH
29846: LD_INT 1
29848: MINUS
29849: ARRAY
29850: PPUSH
29851: LD_VAR 0 2
29855: PUSH
29856: LD_VAR 0 5
29860: PUSH
29861: LD_INT 1
29863: MINUS
29864: ARRAY
29865: PPUSH
29866: LD_VAR 0 7
29870: PUSH
29871: LD_VAR 0 5
29875: ARRAY
29876: PPUSH
29877: CALL_OW 1
29881: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29882: LD_ADDR_VAR 0 7
29886: PUSH
29887: LD_VAR 0 7
29891: PPUSH
29892: LD_VAR 0 5
29896: PUSH
29897: LD_INT 1
29899: MINUS
29900: PPUSH
29901: LD_VAR 0 6
29905: PPUSH
29906: CALL_OW 1
29910: ST_TO_ADDR
// end ;
29911: GO 29828
29913: POP
29914: POP
// result := s_arr [ 1 ] ;
29915: LD_ADDR_VAR 0 4
29919: PUSH
29920: LD_VAR 0 7
29924: PUSH
29925: LD_INT 1
29927: ARRAY
29928: ST_TO_ADDR
// end ; end ;
29929: LD_VAR 0 4
29933: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29934: LD_INT 0
29936: PPUSH
29937: PPUSH
// if not list then
29938: LD_VAR 0 1
29942: NOT
29943: IFFALSE 29947
// exit ;
29945: GO 30038
// i := list [ pos1 ] ;
29947: LD_ADDR_VAR 0 5
29951: PUSH
29952: LD_VAR 0 1
29956: PUSH
29957: LD_VAR 0 2
29961: ARRAY
29962: ST_TO_ADDR
// if not i then
29963: LD_VAR 0 5
29967: NOT
29968: IFFALSE 29972
// exit ;
29970: GO 30038
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29972: LD_ADDR_VAR 0 1
29976: PUSH
29977: LD_VAR 0 1
29981: PPUSH
29982: LD_VAR 0 2
29986: PPUSH
29987: LD_VAR 0 1
29991: PUSH
29992: LD_VAR 0 3
29996: ARRAY
29997: PPUSH
29998: CALL_OW 1
30002: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30003: LD_ADDR_VAR 0 1
30007: PUSH
30008: LD_VAR 0 1
30012: PPUSH
30013: LD_VAR 0 3
30017: PPUSH
30018: LD_VAR 0 5
30022: PPUSH
30023: CALL_OW 1
30027: ST_TO_ADDR
// result := list ;
30028: LD_ADDR_VAR 0 4
30032: PUSH
30033: LD_VAR 0 1
30037: ST_TO_ADDR
// end ;
30038: LD_VAR 0 4
30042: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30043: LD_INT 0
30045: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30046: LD_ADDR_VAR 0 5
30050: PUSH
30051: LD_VAR 0 1
30055: PPUSH
30056: CALL_OW 250
30060: PPUSH
30061: LD_VAR 0 1
30065: PPUSH
30066: CALL_OW 251
30070: PPUSH
30071: LD_VAR 0 2
30075: PPUSH
30076: LD_VAR 0 3
30080: PPUSH
30081: LD_VAR 0 4
30085: PPUSH
30086: CALL 30464 0 5
30090: ST_TO_ADDR
// end ;
30091: LD_VAR 0 5
30095: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30096: LD_INT 0
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
// if not list or not unit then
30102: LD_VAR 0 2
30106: NOT
30107: PUSH
30108: LD_VAR 0 1
30112: NOT
30113: OR
30114: IFFALSE 30118
// exit ;
30116: GO 30459
// result := [ ] ;
30118: LD_ADDR_VAR 0 5
30122: PUSH
30123: EMPTY
30124: ST_TO_ADDR
// for i in list do
30125: LD_ADDR_VAR 0 6
30129: PUSH
30130: LD_VAR 0 2
30134: PUSH
30135: FOR_IN
30136: IFFALSE 30354
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30138: LD_ADDR_VAR 0 8
30142: PUSH
30143: LD_VAR 0 1
30147: PPUSH
30148: LD_VAR 0 6
30152: PUSH
30153: LD_INT 1
30155: ARRAY
30156: PPUSH
30157: LD_VAR 0 6
30161: PUSH
30162: LD_INT 2
30164: ARRAY
30165: PPUSH
30166: CALL_OW 297
30170: ST_TO_ADDR
// if not Count ( result ) then
30171: LD_VAR 0 5
30175: PPUSH
30176: CALL 26748 0 1
30180: NOT
30181: IFFALSE 30214
// begin result := Join ( result , [ i , tmp ] ) ;
30183: LD_ADDR_VAR 0 5
30187: PUSH
30188: LD_VAR 0 5
30192: PPUSH
30193: LD_VAR 0 6
30197: PUSH
30198: LD_VAR 0 8
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PPUSH
30207: CALL 62348 0 2
30211: ST_TO_ADDR
// continue ;
30212: GO 30135
// end ; if result [ result ] [ 2 ] <= tmp then
30214: LD_VAR 0 5
30218: PUSH
30219: LD_VAR 0 5
30223: ARRAY
30224: PUSH
30225: LD_INT 2
30227: ARRAY
30228: PUSH
30229: LD_VAR 0 8
30233: LESSEQUAL
30234: IFFALSE 30267
// result := Join ( result , [ i , tmp ] ) else
30236: LD_ADDR_VAR 0 5
30240: PUSH
30241: LD_VAR 0 5
30245: PPUSH
30246: LD_VAR 0 6
30250: PUSH
30251: LD_VAR 0 8
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PPUSH
30260: CALL 62348 0 2
30264: ST_TO_ADDR
30265: GO 30352
// begin for j := 1 to Count ( result ) do
30267: LD_ADDR_VAR 0 7
30271: PUSH
30272: DOUBLE
30273: LD_INT 1
30275: DEC
30276: ST_TO_ADDR
30277: LD_VAR 0 5
30281: PPUSH
30282: CALL 26748 0 1
30286: PUSH
30287: FOR_TO
30288: IFFALSE 30350
// begin if tmp < result [ j ] [ 2 ] then
30290: LD_VAR 0 8
30294: PUSH
30295: LD_VAR 0 5
30299: PUSH
30300: LD_VAR 0 7
30304: ARRAY
30305: PUSH
30306: LD_INT 2
30308: ARRAY
30309: LESS
30310: IFFALSE 30348
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30312: LD_ADDR_VAR 0 5
30316: PUSH
30317: LD_VAR 0 5
30321: PPUSH
30322: LD_VAR 0 7
30326: PPUSH
30327: LD_VAR 0 6
30331: PUSH
30332: LD_VAR 0 8
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PPUSH
30341: CALL_OW 2
30345: ST_TO_ADDR
// break ;
30346: GO 30350
// end ; end ;
30348: GO 30287
30350: POP
30351: POP
// end ; end ;
30352: GO 30135
30354: POP
30355: POP
// if result and not asc then
30356: LD_VAR 0 5
30360: PUSH
30361: LD_VAR 0 3
30365: NOT
30366: AND
30367: IFFALSE 30384
// result := ReverseArray ( result ) ;
30369: LD_ADDR_VAR 0 5
30373: PUSH
30374: LD_VAR 0 5
30378: PPUSH
30379: CALL 57624 0 1
30383: ST_TO_ADDR
// tmp := [ ] ;
30384: LD_ADDR_VAR 0 8
30388: PUSH
30389: EMPTY
30390: ST_TO_ADDR
// if mode then
30391: LD_VAR 0 4
30395: IFFALSE 30459
// begin for i := 1 to result do
30397: LD_ADDR_VAR 0 6
30401: PUSH
30402: DOUBLE
30403: LD_INT 1
30405: DEC
30406: ST_TO_ADDR
30407: LD_VAR 0 5
30411: PUSH
30412: FOR_TO
30413: IFFALSE 30447
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30415: LD_ADDR_VAR 0 8
30419: PUSH
30420: LD_VAR 0 8
30424: PPUSH
30425: LD_VAR 0 5
30429: PUSH
30430: LD_VAR 0 6
30434: ARRAY
30435: PUSH
30436: LD_INT 1
30438: ARRAY
30439: PPUSH
30440: CALL 62348 0 2
30444: ST_TO_ADDR
30445: GO 30412
30447: POP
30448: POP
// result := tmp ;
30449: LD_ADDR_VAR 0 5
30453: PUSH
30454: LD_VAR 0 8
30458: ST_TO_ADDR
// end ; end ;
30459: LD_VAR 0 5
30463: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30464: LD_INT 0
30466: PPUSH
30467: PPUSH
30468: PPUSH
30469: PPUSH
// if not list then
30470: LD_VAR 0 3
30474: NOT
30475: IFFALSE 30479
// exit ;
30477: GO 30867
// result := [ ] ;
30479: LD_ADDR_VAR 0 6
30483: PUSH
30484: EMPTY
30485: ST_TO_ADDR
// for i in list do
30486: LD_ADDR_VAR 0 7
30490: PUSH
30491: LD_VAR 0 3
30495: PUSH
30496: FOR_IN
30497: IFFALSE 30699
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30499: LD_ADDR_VAR 0 9
30503: PUSH
30504: LD_VAR 0 7
30508: PPUSH
30509: LD_VAR 0 1
30513: PPUSH
30514: LD_VAR 0 2
30518: PPUSH
30519: CALL_OW 297
30523: ST_TO_ADDR
// if not result then
30524: LD_VAR 0 6
30528: NOT
30529: IFFALSE 30555
// result := [ [ i , tmp ] ] else
30531: LD_ADDR_VAR 0 6
30535: PUSH
30536: LD_VAR 0 7
30540: PUSH
30541: LD_VAR 0 9
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: ST_TO_ADDR
30553: GO 30697
// begin if result [ result ] [ 2 ] < tmp then
30555: LD_VAR 0 6
30559: PUSH
30560: LD_VAR 0 6
30564: ARRAY
30565: PUSH
30566: LD_INT 2
30568: ARRAY
30569: PUSH
30570: LD_VAR 0 9
30574: LESS
30575: IFFALSE 30617
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30577: LD_ADDR_VAR 0 6
30581: PUSH
30582: LD_VAR 0 6
30586: PPUSH
30587: LD_VAR 0 6
30591: PUSH
30592: LD_INT 1
30594: PLUS
30595: PPUSH
30596: LD_VAR 0 7
30600: PUSH
30601: LD_VAR 0 9
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PPUSH
30610: CALL_OW 2
30614: ST_TO_ADDR
30615: GO 30697
// for j = 1 to result do
30617: LD_ADDR_VAR 0 8
30621: PUSH
30622: DOUBLE
30623: LD_INT 1
30625: DEC
30626: ST_TO_ADDR
30627: LD_VAR 0 6
30631: PUSH
30632: FOR_TO
30633: IFFALSE 30695
// begin if tmp < result [ j ] [ 2 ] then
30635: LD_VAR 0 9
30639: PUSH
30640: LD_VAR 0 6
30644: PUSH
30645: LD_VAR 0 8
30649: ARRAY
30650: PUSH
30651: LD_INT 2
30653: ARRAY
30654: LESS
30655: IFFALSE 30693
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30657: LD_ADDR_VAR 0 6
30661: PUSH
30662: LD_VAR 0 6
30666: PPUSH
30667: LD_VAR 0 8
30671: PPUSH
30672: LD_VAR 0 7
30676: PUSH
30677: LD_VAR 0 9
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PPUSH
30686: CALL_OW 2
30690: ST_TO_ADDR
// break ;
30691: GO 30695
// end ; end ;
30693: GO 30632
30695: POP
30696: POP
// end ; end ;
30697: GO 30496
30699: POP
30700: POP
// if result and not asc then
30701: LD_VAR 0 6
30705: PUSH
30706: LD_VAR 0 4
30710: NOT
30711: AND
30712: IFFALSE 30787
// begin tmp := result ;
30714: LD_ADDR_VAR 0 9
30718: PUSH
30719: LD_VAR 0 6
30723: ST_TO_ADDR
// for i = tmp downto 1 do
30724: LD_ADDR_VAR 0 7
30728: PUSH
30729: DOUBLE
30730: LD_VAR 0 9
30734: INC
30735: ST_TO_ADDR
30736: LD_INT 1
30738: PUSH
30739: FOR_DOWNTO
30740: IFFALSE 30785
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30742: LD_ADDR_VAR 0 6
30746: PUSH
30747: LD_VAR 0 6
30751: PPUSH
30752: LD_VAR 0 9
30756: PUSH
30757: LD_VAR 0 7
30761: MINUS
30762: PUSH
30763: LD_INT 1
30765: PLUS
30766: PPUSH
30767: LD_VAR 0 9
30771: PUSH
30772: LD_VAR 0 7
30776: ARRAY
30777: PPUSH
30778: CALL_OW 1
30782: ST_TO_ADDR
30783: GO 30739
30785: POP
30786: POP
// end ; tmp := [ ] ;
30787: LD_ADDR_VAR 0 9
30791: PUSH
30792: EMPTY
30793: ST_TO_ADDR
// if mode then
30794: LD_VAR 0 5
30798: IFFALSE 30867
// begin for i = 1 to result do
30800: LD_ADDR_VAR 0 7
30804: PUSH
30805: DOUBLE
30806: LD_INT 1
30808: DEC
30809: ST_TO_ADDR
30810: LD_VAR 0 6
30814: PUSH
30815: FOR_TO
30816: IFFALSE 30855
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30818: LD_ADDR_VAR 0 9
30822: PUSH
30823: LD_VAR 0 9
30827: PPUSH
30828: LD_VAR 0 7
30832: PPUSH
30833: LD_VAR 0 6
30837: PUSH
30838: LD_VAR 0 7
30842: ARRAY
30843: PUSH
30844: LD_INT 1
30846: ARRAY
30847: PPUSH
30848: CALL_OW 1
30852: ST_TO_ADDR
30853: GO 30815
30855: POP
30856: POP
// result := tmp ;
30857: LD_ADDR_VAR 0 6
30861: PUSH
30862: LD_VAR 0 9
30866: ST_TO_ADDR
// end ; end ;
30867: LD_VAR 0 6
30871: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30872: LD_INT 0
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30880: LD_ADDR_VAR 0 5
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: EMPTY
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// if not x or not y then
30902: LD_VAR 0 2
30906: NOT
30907: PUSH
30908: LD_VAR 0 3
30912: NOT
30913: OR
30914: IFFALSE 30918
// exit ;
30916: GO 32568
// if not range then
30918: LD_VAR 0 4
30922: NOT
30923: IFFALSE 30933
// range := 10 ;
30925: LD_ADDR_VAR 0 4
30929: PUSH
30930: LD_INT 10
30932: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30933: LD_ADDR_VAR 0 8
30937: PUSH
30938: LD_INT 81
30940: PUSH
30941: LD_VAR 0 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 92
30952: PUSH
30953: LD_VAR 0 2
30957: PUSH
30958: LD_VAR 0 3
30962: PUSH
30963: LD_VAR 0 4
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 3
30976: PUSH
30977: LD_INT 21
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: LIST
30995: PPUSH
30996: CALL_OW 69
31000: ST_TO_ADDR
// if not tmp then
31001: LD_VAR 0 8
31005: NOT
31006: IFFALSE 31010
// exit ;
31008: GO 32568
// for i in tmp do
31010: LD_ADDR_VAR 0 6
31014: PUSH
31015: LD_VAR 0 8
31019: PUSH
31020: FOR_IN
31021: IFFALSE 32543
// begin points := [ 0 , 0 , 0 ] ;
31023: LD_ADDR_VAR 0 9
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// bpoints := 1 ;
31042: LD_ADDR_VAR 0 10
31046: PUSH
31047: LD_INT 1
31049: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31050: LD_VAR 0 6
31054: PPUSH
31055: CALL_OW 247
31059: PUSH
31060: LD_INT 1
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31646
31068: POP
// begin if GetClass ( i ) = 1 then
31069: LD_VAR 0 6
31073: PPUSH
31074: CALL_OW 257
31078: PUSH
31079: LD_INT 1
31081: EQUAL
31082: IFFALSE 31103
// points := [ 10 , 5 , 3 ] ;
31084: LD_ADDR_VAR 0 9
31088: PUSH
31089: LD_INT 10
31091: PUSH
31092: LD_INT 5
31094: PUSH
31095: LD_INT 3
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31103: LD_VAR 0 6
31107: PPUSH
31108: CALL_OW 257
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: LIST
31126: IN
31127: IFFALSE 31148
// points := [ 3 , 2 , 1 ] ;
31129: LD_ADDR_VAR 0 9
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 2
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31148: LD_VAR 0 6
31152: PPUSH
31153: CALL_OW 257
31157: PUSH
31158: LD_INT 5
31160: EQUAL
31161: IFFALSE 31182
// points := [ 130 , 5 , 2 ] ;
31163: LD_ADDR_VAR 0 9
31167: PUSH
31168: LD_INT 130
31170: PUSH
31171: LD_INT 5
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31182: LD_VAR 0 6
31186: PPUSH
31187: CALL_OW 257
31191: PUSH
31192: LD_INT 8
31194: EQUAL
31195: IFFALSE 31216
// points := [ 35 , 35 , 30 ] ;
31197: LD_ADDR_VAR 0 9
31201: PUSH
31202: LD_INT 35
31204: PUSH
31205: LD_INT 35
31207: PUSH
31208: LD_INT 30
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31216: LD_VAR 0 6
31220: PPUSH
31221: CALL_OW 257
31225: PUSH
31226: LD_INT 9
31228: EQUAL
31229: IFFALSE 31250
// points := [ 20 , 55 , 40 ] ;
31231: LD_ADDR_VAR 0 9
31235: PUSH
31236: LD_INT 20
31238: PUSH
31239: LD_INT 55
31241: PUSH
31242: LD_INT 40
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31250: LD_VAR 0 6
31254: PPUSH
31255: CALL_OW 257
31259: PUSH
31260: LD_INT 12
31262: PUSH
31263: LD_INT 16
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: IN
31270: IFFALSE 31291
// points := [ 5 , 3 , 2 ] ;
31272: LD_ADDR_VAR 0 9
31276: PUSH
31277: LD_INT 5
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31291: LD_VAR 0 6
31295: PPUSH
31296: CALL_OW 257
31300: PUSH
31301: LD_INT 17
31303: EQUAL
31304: IFFALSE 31325
// points := [ 100 , 50 , 75 ] ;
31306: LD_ADDR_VAR 0 9
31310: PUSH
31311: LD_INT 100
31313: PUSH
31314: LD_INT 50
31316: PUSH
31317: LD_INT 75
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31325: LD_VAR 0 6
31329: PPUSH
31330: CALL_OW 257
31334: PUSH
31335: LD_INT 15
31337: EQUAL
31338: IFFALSE 31359
// points := [ 10 , 5 , 3 ] ;
31340: LD_ADDR_VAR 0 9
31344: PUSH
31345: LD_INT 10
31347: PUSH
31348: LD_INT 5
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31359: LD_VAR 0 6
31363: PPUSH
31364: CALL_OW 257
31368: PUSH
31369: LD_INT 14
31371: EQUAL
31372: IFFALSE 31393
// points := [ 10 , 0 , 0 ] ;
31374: LD_ADDR_VAR 0 9
31378: PUSH
31379: LD_INT 10
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31393: LD_VAR 0 6
31397: PPUSH
31398: CALL_OW 257
31402: PUSH
31403: LD_INT 11
31405: EQUAL
31406: IFFALSE 31427
// points := [ 30 , 10 , 5 ] ;
31408: LD_ADDR_VAR 0 9
31412: PUSH
31413: LD_INT 30
31415: PUSH
31416: LD_INT 10
31418: PUSH
31419: LD_INT 5
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31427: LD_VAR 0 1
31431: PPUSH
31432: LD_INT 5
31434: PPUSH
31435: CALL_OW 321
31439: PUSH
31440: LD_INT 2
31442: EQUAL
31443: IFFALSE 31460
// bpoints := bpoints * 1.8 ;
31445: LD_ADDR_VAR 0 10
31449: PUSH
31450: LD_VAR 0 10
31454: PUSH
31455: LD_REAL  1.80000000000000E+0000
31458: MUL
31459: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31460: LD_VAR 0 6
31464: PPUSH
31465: CALL_OW 257
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 4
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: IN
31488: PUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: LD_INT 51
31496: PPUSH
31497: CALL_OW 321
31501: PUSH
31502: LD_INT 2
31504: EQUAL
31505: AND
31506: IFFALSE 31523
// bpoints := bpoints * 1.2 ;
31508: LD_ADDR_VAR 0 10
31512: PUSH
31513: LD_VAR 0 10
31517: PUSH
31518: LD_REAL  1.20000000000000E+0000
31521: MUL
31522: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31523: LD_VAR 0 6
31527: PPUSH
31528: CALL_OW 257
31532: PUSH
31533: LD_INT 5
31535: PUSH
31536: LD_INT 7
31538: PUSH
31539: LD_INT 9
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: LIST
31546: IN
31547: PUSH
31548: LD_VAR 0 1
31552: PPUSH
31553: LD_INT 52
31555: PPUSH
31556: CALL_OW 321
31560: PUSH
31561: LD_INT 2
31563: EQUAL
31564: AND
31565: IFFALSE 31582
// bpoints := bpoints * 1.5 ;
31567: LD_ADDR_VAR 0 10
31571: PUSH
31572: LD_VAR 0 10
31576: PUSH
31577: LD_REAL  1.50000000000000E+0000
31580: MUL
31581: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31582: LD_VAR 0 1
31586: PPUSH
31587: LD_INT 66
31589: PPUSH
31590: CALL_OW 321
31594: PUSH
31595: LD_INT 2
31597: EQUAL
31598: IFFALSE 31615
// bpoints := bpoints * 1.1 ;
31600: LD_ADDR_VAR 0 10
31604: PUSH
31605: LD_VAR 0 10
31609: PUSH
31610: LD_REAL  1.10000000000000E+0000
31613: MUL
31614: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31615: LD_ADDR_VAR 0 10
31619: PUSH
31620: LD_VAR 0 10
31624: PUSH
31625: LD_VAR 0 6
31629: PPUSH
31630: LD_INT 1
31632: PPUSH
31633: CALL_OW 259
31637: PUSH
31638: LD_REAL  1.15000000000000E+0000
31641: MUL
31642: MUL
31643: ST_TO_ADDR
// end ; unit_vehicle :
31644: GO 32472
31646: LD_INT 2
31648: DOUBLE
31649: EQUAL
31650: IFTRUE 31654
31652: GO 32460
31654: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31655: LD_VAR 0 6
31659: PPUSH
31660: CALL_OW 264
31664: PUSH
31665: LD_INT 2
31667: PUSH
31668: LD_INT 42
31670: PUSH
31671: LD_INT 24
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: IN
31679: IFFALSE 31700
// points := [ 25 , 5 , 3 ] ;
31681: LD_ADDR_VAR 0 9
31685: PUSH
31686: LD_INT 25
31688: PUSH
31689: LD_INT 5
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31700: LD_VAR 0 6
31704: PPUSH
31705: CALL_OW 264
31709: PUSH
31710: LD_INT 4
31712: PUSH
31713: LD_INT 43
31715: PUSH
31716: LD_INT 25
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: IN
31724: IFFALSE 31745
// points := [ 40 , 15 , 5 ] ;
31726: LD_ADDR_VAR 0 9
31730: PUSH
31731: LD_INT 40
31733: PUSH
31734: LD_INT 15
31736: PUSH
31737: LD_INT 5
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: LIST
31744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31745: LD_VAR 0 6
31749: PPUSH
31750: CALL_OW 264
31754: PUSH
31755: LD_INT 3
31757: PUSH
31758: LD_INT 23
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: IN
31765: IFFALSE 31786
// points := [ 7 , 25 , 8 ] ;
31767: LD_ADDR_VAR 0 9
31771: PUSH
31772: LD_INT 7
31774: PUSH
31775: LD_INT 25
31777: PUSH
31778: LD_INT 8
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31786: LD_VAR 0 6
31790: PPUSH
31791: CALL_OW 264
31795: PUSH
31796: LD_INT 5
31798: PUSH
31799: LD_INT 27
31801: PUSH
31802: LD_INT 44
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: LIST
31809: IN
31810: IFFALSE 31831
// points := [ 14 , 50 , 16 ] ;
31812: LD_ADDR_VAR 0 9
31816: PUSH
31817: LD_INT 14
31819: PUSH
31820: LD_INT 50
31822: PUSH
31823: LD_INT 16
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: LIST
31830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31831: LD_VAR 0 6
31835: PPUSH
31836: CALL_OW 264
31840: PUSH
31841: LD_INT 6
31843: PUSH
31844: LD_INT 46
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: IN
31851: IFFALSE 31872
// points := [ 32 , 120 , 70 ] ;
31853: LD_ADDR_VAR 0 9
31857: PUSH
31858: LD_INT 32
31860: PUSH
31861: LD_INT 120
31863: PUSH
31864: LD_INT 70
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31872: LD_VAR 0 6
31876: PPUSH
31877: CALL_OW 264
31881: PUSH
31882: LD_INT 7
31884: PUSH
31885: LD_INT 28
31887: PUSH
31888: LD_INT 45
31890: PUSH
31891: LD_INT 92
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: IN
31900: IFFALSE 31921
// points := [ 35 , 20 , 45 ] ;
31902: LD_ADDR_VAR 0 9
31906: PUSH
31907: LD_INT 35
31909: PUSH
31910: LD_INT 20
31912: PUSH
31913: LD_INT 45
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: LIST
31920: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31921: LD_VAR 0 6
31925: PPUSH
31926: CALL_OW 264
31930: PUSH
31931: LD_INT 47
31933: PUSH
31934: EMPTY
31935: LIST
31936: IN
31937: IFFALSE 31958
// points := [ 67 , 45 , 75 ] ;
31939: LD_ADDR_VAR 0 9
31943: PUSH
31944: LD_INT 67
31946: PUSH
31947: LD_INT 45
31949: PUSH
31950: LD_INT 75
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31958: LD_VAR 0 6
31962: PPUSH
31963: CALL_OW 264
31967: PUSH
31968: LD_INT 26
31970: PUSH
31971: EMPTY
31972: LIST
31973: IN
31974: IFFALSE 31995
// points := [ 120 , 30 , 80 ] ;
31976: LD_ADDR_VAR 0 9
31980: PUSH
31981: LD_INT 120
31983: PUSH
31984: LD_INT 30
31986: PUSH
31987: LD_INT 80
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31995: LD_VAR 0 6
31999: PPUSH
32000: CALL_OW 264
32004: PUSH
32005: LD_INT 22
32007: PUSH
32008: EMPTY
32009: LIST
32010: IN
32011: IFFALSE 32032
// points := [ 40 , 1 , 1 ] ;
32013: LD_ADDR_VAR 0 9
32017: PUSH
32018: LD_INT 40
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32032: LD_VAR 0 6
32036: PPUSH
32037: CALL_OW 264
32041: PUSH
32042: LD_INT 29
32044: PUSH
32045: EMPTY
32046: LIST
32047: IN
32048: IFFALSE 32069
// points := [ 70 , 200 , 400 ] ;
32050: LD_ADDR_VAR 0 9
32054: PUSH
32055: LD_INT 70
32057: PUSH
32058: LD_INT 200
32060: PUSH
32061: LD_INT 400
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32069: LD_VAR 0 6
32073: PPUSH
32074: CALL_OW 264
32078: PUSH
32079: LD_INT 14
32081: PUSH
32082: LD_INT 53
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: IN
32089: IFFALSE 32110
// points := [ 40 , 10 , 20 ] ;
32091: LD_ADDR_VAR 0 9
32095: PUSH
32096: LD_INT 40
32098: PUSH
32099: LD_INT 10
32101: PUSH
32102: LD_INT 20
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32110: LD_VAR 0 6
32114: PPUSH
32115: CALL_OW 264
32119: PUSH
32120: LD_INT 9
32122: PUSH
32123: EMPTY
32124: LIST
32125: IN
32126: IFFALSE 32147
// points := [ 5 , 70 , 20 ] ;
32128: LD_ADDR_VAR 0 9
32132: PUSH
32133: LD_INT 5
32135: PUSH
32136: LD_INT 70
32138: PUSH
32139: LD_INT 20
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32147: LD_VAR 0 6
32151: PPUSH
32152: CALL_OW 264
32156: PUSH
32157: LD_INT 10
32159: PUSH
32160: EMPTY
32161: LIST
32162: IN
32163: IFFALSE 32184
// points := [ 35 , 110 , 70 ] ;
32165: LD_ADDR_VAR 0 9
32169: PUSH
32170: LD_INT 35
32172: PUSH
32173: LD_INT 110
32175: PUSH
32176: LD_INT 70
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32184: LD_VAR 0 6
32188: PPUSH
32189: CALL_OW 265
32193: PUSH
32194: LD_INT 25
32196: EQUAL
32197: IFFALSE 32218
// points := [ 80 , 65 , 100 ] ;
32199: LD_ADDR_VAR 0 9
32203: PUSH
32204: LD_INT 80
32206: PUSH
32207: LD_INT 65
32209: PUSH
32210: LD_INT 100
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32218: LD_VAR 0 6
32222: PPUSH
32223: CALL_OW 263
32227: PUSH
32228: LD_INT 1
32230: EQUAL
32231: IFFALSE 32266
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32233: LD_ADDR_VAR 0 10
32237: PUSH
32238: LD_VAR 0 10
32242: PUSH
32243: LD_VAR 0 6
32247: PPUSH
32248: CALL_OW 311
32252: PPUSH
32253: LD_INT 3
32255: PPUSH
32256: CALL_OW 259
32260: PUSH
32261: LD_INT 4
32263: MUL
32264: MUL
32265: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32266: LD_VAR 0 6
32270: PPUSH
32271: CALL_OW 263
32275: PUSH
32276: LD_INT 2
32278: EQUAL
32279: IFFALSE 32330
// begin j := IsControledBy ( i ) ;
32281: LD_ADDR_VAR 0 7
32285: PUSH
32286: LD_VAR 0 6
32290: PPUSH
32291: CALL_OW 312
32295: ST_TO_ADDR
// if j then
32296: LD_VAR 0 7
32300: IFFALSE 32330
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32302: LD_ADDR_VAR 0 10
32306: PUSH
32307: LD_VAR 0 10
32311: PUSH
32312: LD_VAR 0 7
32316: PPUSH
32317: LD_INT 3
32319: PPUSH
32320: CALL_OW 259
32324: PUSH
32325: LD_INT 3
32327: MUL
32328: MUL
32329: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32330: LD_VAR 0 6
32334: PPUSH
32335: CALL_OW 264
32339: PUSH
32340: LD_INT 5
32342: PUSH
32343: LD_INT 6
32345: PUSH
32346: LD_INT 46
32348: PUSH
32349: LD_INT 44
32351: PUSH
32352: LD_INT 47
32354: PUSH
32355: LD_INT 45
32357: PUSH
32358: LD_INT 28
32360: PUSH
32361: LD_INT 7
32363: PUSH
32364: LD_INT 27
32366: PUSH
32367: LD_INT 29
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: IN
32382: PUSH
32383: LD_VAR 0 1
32387: PPUSH
32388: LD_INT 52
32390: PPUSH
32391: CALL_OW 321
32395: PUSH
32396: LD_INT 2
32398: EQUAL
32399: AND
32400: IFFALSE 32417
// bpoints := bpoints * 1.2 ;
32402: LD_ADDR_VAR 0 10
32406: PUSH
32407: LD_VAR 0 10
32411: PUSH
32412: LD_REAL  1.20000000000000E+0000
32415: MUL
32416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32417: LD_VAR 0 6
32421: PPUSH
32422: CALL_OW 264
32426: PUSH
32427: LD_INT 6
32429: PUSH
32430: LD_INT 46
32432: PUSH
32433: LD_INT 47
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: IN
32441: IFFALSE 32458
// bpoints := bpoints * 1.2 ;
32443: LD_ADDR_VAR 0 10
32447: PUSH
32448: LD_VAR 0 10
32452: PUSH
32453: LD_REAL  1.20000000000000E+0000
32456: MUL
32457: ST_TO_ADDR
// end ; unit_building :
32458: GO 32472
32460: LD_INT 3
32462: DOUBLE
32463: EQUAL
32464: IFTRUE 32468
32466: GO 32471
32468: POP
// ; end ;
32469: GO 32472
32471: POP
// for j = 1 to 3 do
32472: LD_ADDR_VAR 0 7
32476: PUSH
32477: DOUBLE
32478: LD_INT 1
32480: DEC
32481: ST_TO_ADDR
32482: LD_INT 3
32484: PUSH
32485: FOR_TO
32486: IFFALSE 32539
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32488: LD_ADDR_VAR 0 5
32492: PUSH
32493: LD_VAR 0 5
32497: PPUSH
32498: LD_VAR 0 7
32502: PPUSH
32503: LD_VAR 0 5
32507: PUSH
32508: LD_VAR 0 7
32512: ARRAY
32513: PUSH
32514: LD_VAR 0 9
32518: PUSH
32519: LD_VAR 0 7
32523: ARRAY
32524: PUSH
32525: LD_VAR 0 10
32529: MUL
32530: PLUS
32531: PPUSH
32532: CALL_OW 1
32536: ST_TO_ADDR
32537: GO 32485
32539: POP
32540: POP
// end ;
32541: GO 31020
32543: POP
32544: POP
// result := Replace ( result , 4 , tmp ) ;
32545: LD_ADDR_VAR 0 5
32549: PUSH
32550: LD_VAR 0 5
32554: PPUSH
32555: LD_INT 4
32557: PPUSH
32558: LD_VAR 0 8
32562: PPUSH
32563: CALL_OW 1
32567: ST_TO_ADDR
// end ;
32568: LD_VAR 0 5
32572: RET
// export function DangerAtRange ( unit , range ) ; begin
32573: LD_INT 0
32575: PPUSH
// if not unit then
32576: LD_VAR 0 1
32580: NOT
32581: IFFALSE 32585
// exit ;
32583: GO 32630
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_VAR 0 1
32594: PPUSH
32595: CALL_OW 255
32599: PPUSH
32600: LD_VAR 0 1
32604: PPUSH
32605: CALL_OW 250
32609: PPUSH
32610: LD_VAR 0 1
32614: PPUSH
32615: CALL_OW 251
32619: PPUSH
32620: LD_VAR 0 2
32624: PPUSH
32625: CALL 30872 0 4
32629: ST_TO_ADDR
// end ;
32630: LD_VAR 0 3
32634: RET
// export function DangerInArea ( side , area ) ; begin
32635: LD_INT 0
32637: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_VAR 0 2
32647: PPUSH
32648: LD_INT 81
32650: PUSH
32651: LD_VAR 0 1
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PPUSH
32660: CALL_OW 70
32664: ST_TO_ADDR
// end ;
32665: LD_VAR 0 3
32669: RET
// export function IsExtension ( b ) ; begin
32670: LD_INT 0
32672: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32673: LD_ADDR_VAR 0 2
32677: PUSH
32678: LD_VAR 0 1
32682: PUSH
32683: LD_INT 23
32685: PUSH
32686: LD_INT 20
32688: PUSH
32689: LD_INT 22
32691: PUSH
32692: LD_INT 17
32694: PUSH
32695: LD_INT 24
32697: PUSH
32698: LD_INT 21
32700: PUSH
32701: LD_INT 19
32703: PUSH
32704: LD_INT 16
32706: PUSH
32707: LD_INT 25
32709: PUSH
32710: LD_INT 18
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: IN
32725: ST_TO_ADDR
// end ;
32726: LD_VAR 0 2
32730: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32731: LD_INT 0
32733: PPUSH
32734: PPUSH
32735: PPUSH
// result := [ ] ;
32736: LD_ADDR_VAR 0 4
32740: PUSH
32741: EMPTY
32742: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32743: LD_ADDR_VAR 0 5
32747: PUSH
32748: LD_VAR 0 2
32752: PPUSH
32753: LD_INT 21
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PPUSH
32763: CALL_OW 70
32767: ST_TO_ADDR
// if not tmp then
32768: LD_VAR 0 5
32772: NOT
32773: IFFALSE 32777
// exit ;
32775: GO 32841
// if checkLink then
32777: LD_VAR 0 3
32781: IFFALSE 32831
// begin for i in tmp do
32783: LD_ADDR_VAR 0 6
32787: PUSH
32788: LD_VAR 0 5
32792: PUSH
32793: FOR_IN
32794: IFFALSE 32829
// if GetBase ( i ) <> base then
32796: LD_VAR 0 6
32800: PPUSH
32801: CALL_OW 274
32805: PUSH
32806: LD_VAR 0 1
32810: NONEQUAL
32811: IFFALSE 32827
// ComLinkToBase ( base , i ) ;
32813: LD_VAR 0 1
32817: PPUSH
32818: LD_VAR 0 6
32822: PPUSH
32823: CALL_OW 169
32827: GO 32793
32829: POP
32830: POP
// end ; result := tmp ;
32831: LD_ADDR_VAR 0 4
32835: PUSH
32836: LD_VAR 0 5
32840: ST_TO_ADDR
// end ;
32841: LD_VAR 0 4
32845: RET
// export function ComComplete ( units , b ) ; var i ; begin
32846: LD_INT 0
32848: PPUSH
32849: PPUSH
// if not units then
32850: LD_VAR 0 1
32854: NOT
32855: IFFALSE 32859
// exit ;
32857: GO 32949
// for i in units do
32859: LD_ADDR_VAR 0 4
32863: PUSH
32864: LD_VAR 0 1
32868: PUSH
32869: FOR_IN
32870: IFFALSE 32947
// if BuildingStatus ( b ) = bs_build then
32872: LD_VAR 0 2
32876: PPUSH
32877: CALL_OW 461
32881: PUSH
32882: LD_INT 1
32884: EQUAL
32885: IFFALSE 32945
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32887: LD_VAR 0 4
32891: PPUSH
32892: LD_STRING h
32894: PUSH
32895: LD_VAR 0 2
32899: PPUSH
32900: CALL_OW 250
32904: PUSH
32905: LD_VAR 0 2
32909: PPUSH
32910: CALL_OW 251
32914: PUSH
32915: LD_VAR 0 2
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: PUSH
32938: EMPTY
32939: LIST
32940: PPUSH
32941: CALL_OW 446
32945: GO 32869
32947: POP
32948: POP
// end ;
32949: LD_VAR 0 3
32953: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32954: LD_INT 0
32956: PPUSH
32957: PPUSH
32958: PPUSH
32959: PPUSH
32960: PPUSH
32961: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32962: LD_VAR 0 1
32966: NOT
32967: PUSH
32968: LD_VAR 0 1
32972: PPUSH
32973: CALL_OW 263
32977: PUSH
32978: LD_INT 2
32980: NONEQUAL
32981: OR
32982: IFFALSE 32986
// exit ;
32984: GO 33302
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32986: LD_ADDR_VAR 0 6
32990: PUSH
32991: LD_INT 22
32993: PUSH
32994: LD_VAR 0 1
32998: PPUSH
32999: CALL_OW 255
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: LD_INT 30
33013: PUSH
33014: LD_INT 36
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 34
33023: PUSH
33024: LD_INT 31
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PPUSH
33040: CALL_OW 69
33044: ST_TO_ADDR
// if not tmp then
33045: LD_VAR 0 6
33049: NOT
33050: IFFALSE 33054
// exit ;
33052: GO 33302
// result := [ ] ;
33054: LD_ADDR_VAR 0 2
33058: PUSH
33059: EMPTY
33060: ST_TO_ADDR
// for i in tmp do
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_VAR 0 6
33070: PUSH
33071: FOR_IN
33072: IFFALSE 33143
// begin t := UnitsInside ( i ) ;
33074: LD_ADDR_VAR 0 4
33078: PUSH
33079: LD_VAR 0 3
33083: PPUSH
33084: CALL_OW 313
33088: ST_TO_ADDR
// if t then
33089: LD_VAR 0 4
33093: IFFALSE 33141
// for j in t do
33095: LD_ADDR_VAR 0 7
33099: PUSH
33100: LD_VAR 0 4
33104: PUSH
33105: FOR_IN
33106: IFFALSE 33139
// result := Replace ( result , result + 1 , j ) ;
33108: LD_ADDR_VAR 0 2
33112: PUSH
33113: LD_VAR 0 2
33117: PPUSH
33118: LD_VAR 0 2
33122: PUSH
33123: LD_INT 1
33125: PLUS
33126: PPUSH
33127: LD_VAR 0 7
33131: PPUSH
33132: CALL_OW 1
33136: ST_TO_ADDR
33137: GO 33105
33139: POP
33140: POP
// end ;
33141: GO 33071
33143: POP
33144: POP
// if not result then
33145: LD_VAR 0 2
33149: NOT
33150: IFFALSE 33154
// exit ;
33152: GO 33302
// mech := result [ 1 ] ;
33154: LD_ADDR_VAR 0 5
33158: PUSH
33159: LD_VAR 0 2
33163: PUSH
33164: LD_INT 1
33166: ARRAY
33167: ST_TO_ADDR
// if result > 1 then
33168: LD_VAR 0 2
33172: PUSH
33173: LD_INT 1
33175: GREATER
33176: IFFALSE 33288
// begin for i = 2 to result do
33178: LD_ADDR_VAR 0 3
33182: PUSH
33183: DOUBLE
33184: LD_INT 2
33186: DEC
33187: ST_TO_ADDR
33188: LD_VAR 0 2
33192: PUSH
33193: FOR_TO
33194: IFFALSE 33286
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33196: LD_ADDR_VAR 0 4
33200: PUSH
33201: LD_VAR 0 2
33205: PUSH
33206: LD_VAR 0 3
33210: ARRAY
33211: PPUSH
33212: LD_INT 3
33214: PPUSH
33215: CALL_OW 259
33219: PUSH
33220: LD_VAR 0 2
33224: PUSH
33225: LD_VAR 0 3
33229: ARRAY
33230: PPUSH
33231: CALL_OW 432
33235: MINUS
33236: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33237: LD_VAR 0 4
33241: PUSH
33242: LD_VAR 0 5
33246: PPUSH
33247: LD_INT 3
33249: PPUSH
33250: CALL_OW 259
33254: PUSH
33255: LD_VAR 0 5
33259: PPUSH
33260: CALL_OW 432
33264: MINUS
33265: GREATEREQUAL
33266: IFFALSE 33284
// mech := result [ i ] ;
33268: LD_ADDR_VAR 0 5
33272: PUSH
33273: LD_VAR 0 2
33277: PUSH
33278: LD_VAR 0 3
33282: ARRAY
33283: ST_TO_ADDR
// end ;
33284: GO 33193
33286: POP
33287: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33288: LD_VAR 0 1
33292: PPUSH
33293: LD_VAR 0 5
33297: PPUSH
33298: CALL_OW 135
// end ;
33302: LD_VAR 0 2
33306: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33307: LD_INT 0
33309: PPUSH
33310: PPUSH
33311: PPUSH
33312: PPUSH
33313: PPUSH
33314: PPUSH
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
// result := [ ] ;
33322: LD_ADDR_VAR 0 7
33326: PUSH
33327: EMPTY
33328: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 266
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: IN
33349: NOT
33350: IFFALSE 33354
// exit ;
33352: GO 34988
// if name then
33354: LD_VAR 0 3
33358: IFFALSE 33374
// SetBName ( base_dep , name ) ;
33360: LD_VAR 0 1
33364: PPUSH
33365: LD_VAR 0 3
33369: PPUSH
33370: CALL_OW 500
// base := GetBase ( base_dep ) ;
33374: LD_ADDR_VAR 0 15
33378: PUSH
33379: LD_VAR 0 1
33383: PPUSH
33384: CALL_OW 274
33388: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33389: LD_ADDR_VAR 0 16
33393: PUSH
33394: LD_VAR 0 1
33398: PPUSH
33399: CALL_OW 255
33403: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33404: LD_ADDR_VAR 0 17
33408: PUSH
33409: LD_VAR 0 1
33413: PPUSH
33414: CALL_OW 248
33418: ST_TO_ADDR
// if sources then
33419: LD_VAR 0 5
33423: IFFALSE 33470
// for i = 1 to 3 do
33425: LD_ADDR_VAR 0 8
33429: PUSH
33430: DOUBLE
33431: LD_INT 1
33433: DEC
33434: ST_TO_ADDR
33435: LD_INT 3
33437: PUSH
33438: FOR_TO
33439: IFFALSE 33468
// AddResourceType ( base , i , sources [ i ] ) ;
33441: LD_VAR 0 15
33445: PPUSH
33446: LD_VAR 0 8
33450: PPUSH
33451: LD_VAR 0 5
33455: PUSH
33456: LD_VAR 0 8
33460: ARRAY
33461: PPUSH
33462: CALL_OW 276
33466: GO 33438
33468: POP
33469: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33470: LD_ADDR_VAR 0 18
33474: PUSH
33475: LD_VAR 0 15
33479: PPUSH
33480: LD_VAR 0 2
33484: PPUSH
33485: LD_INT 1
33487: PPUSH
33488: CALL 32731 0 3
33492: ST_TO_ADDR
// InitHc ;
33493: CALL_OW 19
// InitUc ;
33497: CALL_OW 18
// uc_side := side ;
33501: LD_ADDR_OWVAR 20
33505: PUSH
33506: LD_VAR 0 16
33510: ST_TO_ADDR
// uc_nation := nation ;
33511: LD_ADDR_OWVAR 21
33515: PUSH
33516: LD_VAR 0 17
33520: ST_TO_ADDR
// if buildings then
33521: LD_VAR 0 18
33525: IFFALSE 34847
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33527: LD_ADDR_VAR 0 19
33531: PUSH
33532: LD_VAR 0 18
33536: PPUSH
33537: LD_INT 2
33539: PUSH
33540: LD_INT 30
33542: PUSH
33543: LD_INT 29
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 30
33552: PUSH
33553: LD_INT 30
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: PPUSH
33565: CALL_OW 72
33569: ST_TO_ADDR
// if tmp then
33570: LD_VAR 0 19
33574: IFFALSE 33622
// for i in tmp do
33576: LD_ADDR_VAR 0 8
33580: PUSH
33581: LD_VAR 0 19
33585: PUSH
33586: FOR_IN
33587: IFFALSE 33620
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33589: LD_VAR 0 8
33593: PPUSH
33594: CALL_OW 250
33598: PPUSH
33599: LD_VAR 0 8
33603: PPUSH
33604: CALL_OW 251
33608: PPUSH
33609: LD_VAR 0 16
33613: PPUSH
33614: CALL_OW 441
33618: GO 33586
33620: POP
33621: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33622: LD_VAR 0 18
33626: PPUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 30
33632: PUSH
33633: LD_INT 32
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 30
33642: PUSH
33643: LD_INT 33
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: PPUSH
33655: CALL_OW 72
33659: IFFALSE 33747
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33661: LD_ADDR_VAR 0 8
33665: PUSH
33666: LD_VAR 0 18
33670: PPUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 30
33676: PUSH
33677: LD_INT 32
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 30
33686: PUSH
33687: LD_INT 33
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: PPUSH
33699: CALL_OW 72
33703: PUSH
33704: FOR_IN
33705: IFFALSE 33745
// begin if not GetBWeapon ( i ) then
33707: LD_VAR 0 8
33711: PPUSH
33712: CALL_OW 269
33716: NOT
33717: IFFALSE 33743
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33719: LD_VAR 0 8
33723: PPUSH
33724: LD_VAR 0 8
33728: PPUSH
33729: LD_VAR 0 2
33733: PPUSH
33734: CALL 34993 0 2
33738: PPUSH
33739: CALL_OW 431
// end ;
33743: GO 33704
33745: POP
33746: POP
// end ; for i = 1 to personel do
33747: LD_ADDR_VAR 0 8
33751: PUSH
33752: DOUBLE
33753: LD_INT 1
33755: DEC
33756: ST_TO_ADDR
33757: LD_VAR 0 6
33761: PUSH
33762: FOR_TO
33763: IFFALSE 34827
// begin if i > 4 then
33765: LD_VAR 0 8
33769: PUSH
33770: LD_INT 4
33772: GREATER
33773: IFFALSE 33777
// break ;
33775: GO 34827
// case i of 1 :
33777: LD_VAR 0 8
33781: PUSH
33782: LD_INT 1
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33790
33788: GO 33870
33790: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33791: LD_ADDR_VAR 0 12
33795: PUSH
33796: LD_VAR 0 18
33800: PPUSH
33801: LD_INT 22
33803: PUSH
33804: LD_VAR 0 16
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 58
33815: PUSH
33816: EMPTY
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 30
33824: PUSH
33825: LD_INT 32
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 30
33834: PUSH
33835: LD_INT 4
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 30
33844: PUSH
33845: LD_INT 5
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: PPUSH
33863: CALL_OW 72
33867: ST_TO_ADDR
33868: GO 34092
33870: LD_INT 2
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33940
33878: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33879: LD_ADDR_VAR 0 12
33883: PUSH
33884: LD_VAR 0 18
33888: PPUSH
33889: LD_INT 22
33891: PUSH
33892: LD_VAR 0 16
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: LD_INT 30
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 30
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: LIST
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PPUSH
33933: CALL_OW 72
33937: ST_TO_ADDR
33938: GO 34092
33940: LD_INT 3
33942: DOUBLE
33943: EQUAL
33944: IFTRUE 33948
33946: GO 34010
33948: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33949: LD_ADDR_VAR 0 12
33953: PUSH
33954: LD_VAR 0 18
33958: PPUSH
33959: LD_INT 22
33961: PUSH
33962: LD_VAR 0 16
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: LD_INT 30
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 30
33986: PUSH
33987: LD_INT 3
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PPUSH
34003: CALL_OW 72
34007: ST_TO_ADDR
34008: GO 34092
34010: LD_INT 4
34012: DOUBLE
34013: EQUAL
34014: IFTRUE 34018
34016: GO 34091
34018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34019: LD_ADDR_VAR 0 12
34023: PUSH
34024: LD_VAR 0 18
34028: PPUSH
34029: LD_INT 22
34031: PUSH
34032: LD_VAR 0 16
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: LD_INT 30
34046: PUSH
34047: LD_INT 6
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 30
34056: PUSH
34057: LD_INT 7
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 30
34066: PUSH
34067: LD_INT 8
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PPUSH
34084: CALL_OW 72
34088: ST_TO_ADDR
34089: GO 34092
34091: POP
// if i = 1 then
34092: LD_VAR 0 8
34096: PUSH
34097: LD_INT 1
34099: EQUAL
34100: IFFALSE 34211
// begin tmp := [ ] ;
34102: LD_ADDR_VAR 0 19
34106: PUSH
34107: EMPTY
34108: ST_TO_ADDR
// for j in f do
34109: LD_ADDR_VAR 0 9
34113: PUSH
34114: LD_VAR 0 12
34118: PUSH
34119: FOR_IN
34120: IFFALSE 34193
// if GetBType ( j ) = b_bunker then
34122: LD_VAR 0 9
34126: PPUSH
34127: CALL_OW 266
34131: PUSH
34132: LD_INT 32
34134: EQUAL
34135: IFFALSE 34162
// tmp := Insert ( tmp , 1 , j ) else
34137: LD_ADDR_VAR 0 19
34141: PUSH
34142: LD_VAR 0 19
34146: PPUSH
34147: LD_INT 1
34149: PPUSH
34150: LD_VAR 0 9
34154: PPUSH
34155: CALL_OW 2
34159: ST_TO_ADDR
34160: GO 34191
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34162: LD_ADDR_VAR 0 19
34166: PUSH
34167: LD_VAR 0 19
34171: PPUSH
34172: LD_VAR 0 19
34176: PUSH
34177: LD_INT 1
34179: PLUS
34180: PPUSH
34181: LD_VAR 0 9
34185: PPUSH
34186: CALL_OW 2
34190: ST_TO_ADDR
34191: GO 34119
34193: POP
34194: POP
// if tmp then
34195: LD_VAR 0 19
34199: IFFALSE 34211
// f := tmp ;
34201: LD_ADDR_VAR 0 12
34205: PUSH
34206: LD_VAR 0 19
34210: ST_TO_ADDR
// end ; x := personel [ i ] ;
34211: LD_ADDR_VAR 0 13
34215: PUSH
34216: LD_VAR 0 6
34220: PUSH
34221: LD_VAR 0 8
34225: ARRAY
34226: ST_TO_ADDR
// if x = - 1 then
34227: LD_VAR 0 13
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: EQUAL
34236: IFFALSE 34445
// begin for j in f do
34238: LD_ADDR_VAR 0 9
34242: PUSH
34243: LD_VAR 0 12
34247: PUSH
34248: FOR_IN
34249: IFFALSE 34441
// repeat InitHc ;
34251: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34255: LD_VAR 0 9
34259: PPUSH
34260: CALL_OW 266
34264: PUSH
34265: LD_INT 5
34267: EQUAL
34268: IFFALSE 34338
// begin if UnitsInside ( j ) < 3 then
34270: LD_VAR 0 9
34274: PPUSH
34275: CALL_OW 313
34279: PUSH
34280: LD_INT 3
34282: LESS
34283: IFFALSE 34319
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34285: LD_INT 0
34287: PPUSH
34288: LD_INT 5
34290: PUSH
34291: LD_INT 8
34293: PUSH
34294: LD_INT 9
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: PUSH
34302: LD_VAR 0 17
34306: ARRAY
34307: PPUSH
34308: LD_VAR 0 4
34312: PPUSH
34313: CALL_OW 380
34317: GO 34336
// PrepareHuman ( false , i , skill ) ;
34319: LD_INT 0
34321: PPUSH
34322: LD_VAR 0 8
34326: PPUSH
34327: LD_VAR 0 4
34331: PPUSH
34332: CALL_OW 380
// end else
34336: GO 34355
// PrepareHuman ( false , i , skill ) ;
34338: LD_INT 0
34340: PPUSH
34341: LD_VAR 0 8
34345: PPUSH
34346: LD_VAR 0 4
34350: PPUSH
34351: CALL_OW 380
// un := CreateHuman ;
34355: LD_ADDR_VAR 0 14
34359: PUSH
34360: CALL_OW 44
34364: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34365: LD_ADDR_VAR 0 7
34369: PUSH
34370: LD_VAR 0 7
34374: PPUSH
34375: LD_INT 1
34377: PPUSH
34378: LD_VAR 0 14
34382: PPUSH
34383: CALL_OW 2
34387: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34388: LD_VAR 0 14
34392: PPUSH
34393: LD_VAR 0 9
34397: PPUSH
34398: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34402: LD_VAR 0 9
34406: PPUSH
34407: CALL_OW 313
34411: PUSH
34412: LD_INT 6
34414: EQUAL
34415: PUSH
34416: LD_VAR 0 9
34420: PPUSH
34421: CALL_OW 266
34425: PUSH
34426: LD_INT 32
34428: PUSH
34429: LD_INT 31
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: IN
34436: OR
34437: IFFALSE 34251
34439: GO 34248
34441: POP
34442: POP
// end else
34443: GO 34825
// for j = 1 to x do
34445: LD_ADDR_VAR 0 9
34449: PUSH
34450: DOUBLE
34451: LD_INT 1
34453: DEC
34454: ST_TO_ADDR
34455: LD_VAR 0 13
34459: PUSH
34460: FOR_TO
34461: IFFALSE 34823
// begin InitHc ;
34463: CALL_OW 19
// if not f then
34467: LD_VAR 0 12
34471: NOT
34472: IFFALSE 34561
// begin PrepareHuman ( false , i , skill ) ;
34474: LD_INT 0
34476: PPUSH
34477: LD_VAR 0 8
34481: PPUSH
34482: LD_VAR 0 4
34486: PPUSH
34487: CALL_OW 380
// un := CreateHuman ;
34491: LD_ADDR_VAR 0 14
34495: PUSH
34496: CALL_OW 44
34500: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34501: LD_ADDR_VAR 0 7
34505: PUSH
34506: LD_VAR 0 7
34510: PPUSH
34511: LD_INT 1
34513: PPUSH
34514: LD_VAR 0 14
34518: PPUSH
34519: CALL_OW 2
34523: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34524: LD_VAR 0 14
34528: PPUSH
34529: LD_VAR 0 1
34533: PPUSH
34534: CALL_OW 250
34538: PPUSH
34539: LD_VAR 0 1
34543: PPUSH
34544: CALL_OW 251
34548: PPUSH
34549: LD_INT 10
34551: PPUSH
34552: LD_INT 0
34554: PPUSH
34555: CALL_OW 50
// continue ;
34559: GO 34460
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34561: LD_VAR 0 12
34565: PUSH
34566: LD_INT 1
34568: ARRAY
34569: PPUSH
34570: CALL_OW 313
34574: PUSH
34575: LD_VAR 0 12
34579: PUSH
34580: LD_INT 1
34582: ARRAY
34583: PPUSH
34584: CALL_OW 266
34588: PUSH
34589: LD_INT 32
34591: PUSH
34592: LD_INT 31
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: IN
34599: AND
34600: PUSH
34601: LD_VAR 0 12
34605: PUSH
34606: LD_INT 1
34608: ARRAY
34609: PPUSH
34610: CALL_OW 313
34614: PUSH
34615: LD_INT 6
34617: EQUAL
34618: OR
34619: IFFALSE 34639
// f := Delete ( f , 1 ) ;
34621: LD_ADDR_VAR 0 12
34625: PUSH
34626: LD_VAR 0 12
34630: PPUSH
34631: LD_INT 1
34633: PPUSH
34634: CALL_OW 3
34638: ST_TO_ADDR
// if not f then
34639: LD_VAR 0 12
34643: NOT
34644: IFFALSE 34662
// begin x := x + 2 ;
34646: LD_ADDR_VAR 0 13
34650: PUSH
34651: LD_VAR 0 13
34655: PUSH
34656: LD_INT 2
34658: PLUS
34659: ST_TO_ADDR
// continue ;
34660: GO 34460
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34662: LD_VAR 0 12
34666: PUSH
34667: LD_INT 1
34669: ARRAY
34670: PPUSH
34671: CALL_OW 266
34675: PUSH
34676: LD_INT 5
34678: EQUAL
34679: IFFALSE 34753
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34681: LD_VAR 0 12
34685: PUSH
34686: LD_INT 1
34688: ARRAY
34689: PPUSH
34690: CALL_OW 313
34694: PUSH
34695: LD_INT 3
34697: LESS
34698: IFFALSE 34734
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34700: LD_INT 0
34702: PPUSH
34703: LD_INT 5
34705: PUSH
34706: LD_INT 8
34708: PUSH
34709: LD_INT 9
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: PUSH
34717: LD_VAR 0 17
34721: ARRAY
34722: PPUSH
34723: LD_VAR 0 4
34727: PPUSH
34728: CALL_OW 380
34732: GO 34751
// PrepareHuman ( false , i , skill ) ;
34734: LD_INT 0
34736: PPUSH
34737: LD_VAR 0 8
34741: PPUSH
34742: LD_VAR 0 4
34746: PPUSH
34747: CALL_OW 380
// end else
34751: GO 34770
// PrepareHuman ( false , i , skill ) ;
34753: LD_INT 0
34755: PPUSH
34756: LD_VAR 0 8
34760: PPUSH
34761: LD_VAR 0 4
34765: PPUSH
34766: CALL_OW 380
// un := CreateHuman ;
34770: LD_ADDR_VAR 0 14
34774: PUSH
34775: CALL_OW 44
34779: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34780: LD_ADDR_VAR 0 7
34784: PUSH
34785: LD_VAR 0 7
34789: PPUSH
34790: LD_INT 1
34792: PPUSH
34793: LD_VAR 0 14
34797: PPUSH
34798: CALL_OW 2
34802: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34803: LD_VAR 0 14
34807: PPUSH
34808: LD_VAR 0 12
34812: PUSH
34813: LD_INT 1
34815: ARRAY
34816: PPUSH
34817: CALL_OW 52
// end ;
34821: GO 34460
34823: POP
34824: POP
// end ;
34825: GO 33762
34827: POP
34828: POP
// result := result ^ buildings ;
34829: LD_ADDR_VAR 0 7
34833: PUSH
34834: LD_VAR 0 7
34838: PUSH
34839: LD_VAR 0 18
34843: ADD
34844: ST_TO_ADDR
// end else
34845: GO 34988
// begin for i = 1 to personel do
34847: LD_ADDR_VAR 0 8
34851: PUSH
34852: DOUBLE
34853: LD_INT 1
34855: DEC
34856: ST_TO_ADDR
34857: LD_VAR 0 6
34861: PUSH
34862: FOR_TO
34863: IFFALSE 34986
// begin if i > 4 then
34865: LD_VAR 0 8
34869: PUSH
34870: LD_INT 4
34872: GREATER
34873: IFFALSE 34877
// break ;
34875: GO 34986
// x := personel [ i ] ;
34877: LD_ADDR_VAR 0 13
34881: PUSH
34882: LD_VAR 0 6
34886: PUSH
34887: LD_VAR 0 8
34891: ARRAY
34892: ST_TO_ADDR
// if x = - 1 then
34893: LD_VAR 0 13
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: EQUAL
34902: IFFALSE 34906
// continue ;
34904: GO 34862
// PrepareHuman ( false , i , skill ) ;
34906: LD_INT 0
34908: PPUSH
34909: LD_VAR 0 8
34913: PPUSH
34914: LD_VAR 0 4
34918: PPUSH
34919: CALL_OW 380
// un := CreateHuman ;
34923: LD_ADDR_VAR 0 14
34927: PUSH
34928: CALL_OW 44
34932: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34933: LD_VAR 0 14
34937: PPUSH
34938: LD_VAR 0 1
34942: PPUSH
34943: CALL_OW 250
34947: PPUSH
34948: LD_VAR 0 1
34952: PPUSH
34953: CALL_OW 251
34957: PPUSH
34958: LD_INT 10
34960: PPUSH
34961: LD_INT 0
34963: PPUSH
34964: CALL_OW 50
// result := result ^ un ;
34968: LD_ADDR_VAR 0 7
34972: PUSH
34973: LD_VAR 0 7
34977: PUSH
34978: LD_VAR 0 14
34982: ADD
34983: ST_TO_ADDR
// end ;
34984: GO 34862
34986: POP
34987: POP
// end ; end ;
34988: LD_VAR 0 7
34992: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34993: LD_INT 0
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
35009: PPUSH
35010: PPUSH
// result := false ;
35011: LD_ADDR_VAR 0 3
35015: PUSH
35016: LD_INT 0
35018: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35019: LD_VAR 0 1
35023: NOT
35024: PUSH
35025: LD_VAR 0 1
35029: PPUSH
35030: CALL_OW 266
35034: PUSH
35035: LD_INT 32
35037: PUSH
35038: LD_INT 33
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: IN
35045: NOT
35046: OR
35047: IFFALSE 35051
// exit ;
35049: GO 36160
// nat := GetNation ( tower ) ;
35051: LD_ADDR_VAR 0 12
35055: PUSH
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 248
35065: ST_TO_ADDR
// side := GetSide ( tower ) ;
35066: LD_ADDR_VAR 0 16
35070: PUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: CALL_OW 255
35080: ST_TO_ADDR
// x := GetX ( tower ) ;
35081: LD_ADDR_VAR 0 10
35085: PUSH
35086: LD_VAR 0 1
35090: PPUSH
35091: CALL_OW 250
35095: ST_TO_ADDR
// y := GetY ( tower ) ;
35096: LD_ADDR_VAR 0 11
35100: PUSH
35101: LD_VAR 0 1
35105: PPUSH
35106: CALL_OW 251
35110: ST_TO_ADDR
// if not x or not y then
35111: LD_VAR 0 10
35115: NOT
35116: PUSH
35117: LD_VAR 0 11
35121: NOT
35122: OR
35123: IFFALSE 35127
// exit ;
35125: GO 36160
// weapon := 0 ;
35127: LD_ADDR_VAR 0 18
35131: PUSH
35132: LD_INT 0
35134: ST_TO_ADDR
// fac_list := [ ] ;
35135: LD_ADDR_VAR 0 17
35139: PUSH
35140: EMPTY
35141: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35142: LD_ADDR_VAR 0 6
35146: PUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 274
35156: PPUSH
35157: LD_VAR 0 2
35161: PPUSH
35162: LD_INT 0
35164: PPUSH
35165: CALL 32731 0 3
35169: PPUSH
35170: LD_INT 30
35172: PUSH
35173: LD_INT 3
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PPUSH
35180: CALL_OW 72
35184: ST_TO_ADDR
// if not factories then
35185: LD_VAR 0 6
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 36160
// for i in factories do
35194: LD_ADDR_VAR 0 8
35198: PUSH
35199: LD_VAR 0 6
35203: PUSH
35204: FOR_IN
35205: IFFALSE 35230
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35207: LD_ADDR_VAR 0 17
35211: PUSH
35212: LD_VAR 0 17
35216: PUSH
35217: LD_VAR 0 8
35221: PPUSH
35222: CALL_OW 478
35226: UNION
35227: ST_TO_ADDR
35228: GO 35204
35230: POP
35231: POP
// if not fac_list then
35232: LD_VAR 0 17
35236: NOT
35237: IFFALSE 35241
// exit ;
35239: GO 36160
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35241: LD_ADDR_VAR 0 5
35245: PUSH
35246: LD_INT 4
35248: PUSH
35249: LD_INT 5
35251: PUSH
35252: LD_INT 9
35254: PUSH
35255: LD_INT 10
35257: PUSH
35258: LD_INT 6
35260: PUSH
35261: LD_INT 7
35263: PUSH
35264: LD_INT 11
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 27
35278: PUSH
35279: LD_INT 28
35281: PUSH
35282: LD_INT 26
35284: PUSH
35285: LD_INT 30
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 43
35296: PUSH
35297: LD_INT 44
35299: PUSH
35300: LD_INT 46
35302: PUSH
35303: LD_INT 45
35305: PUSH
35306: LD_INT 47
35308: PUSH
35309: LD_INT 49
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: PUSH
35325: LD_VAR 0 12
35329: ARRAY
35330: ST_TO_ADDR
// list := list isect fac_list ;
35331: LD_ADDR_VAR 0 5
35335: PUSH
35336: LD_VAR 0 5
35340: PUSH
35341: LD_VAR 0 17
35345: ISECT
35346: ST_TO_ADDR
// if not list then
35347: LD_VAR 0 5
35351: NOT
35352: IFFALSE 35356
// exit ;
35354: GO 36160
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35356: LD_VAR 0 12
35360: PUSH
35361: LD_INT 3
35363: EQUAL
35364: PUSH
35365: LD_INT 49
35367: PUSH
35368: LD_VAR 0 5
35372: IN
35373: AND
35374: PUSH
35375: LD_INT 31
35377: PPUSH
35378: LD_VAR 0 16
35382: PPUSH
35383: CALL_OW 321
35387: PUSH
35388: LD_INT 2
35390: EQUAL
35391: AND
35392: IFFALSE 35452
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35394: LD_INT 22
35396: PUSH
35397: LD_VAR 0 16
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 35
35408: PUSH
35409: LD_INT 49
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 91
35418: PUSH
35419: LD_VAR 0 1
35423: PUSH
35424: LD_INT 10
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: PPUSH
35437: CALL_OW 69
35441: NOT
35442: IFFALSE 35452
// weapon := ru_time_lapser ;
35444: LD_ADDR_VAR 0 18
35448: PUSH
35449: LD_INT 49
35451: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35452: LD_VAR 0 12
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: IN
35467: PUSH
35468: LD_INT 11
35470: PUSH
35471: LD_VAR 0 5
35475: IN
35476: PUSH
35477: LD_INT 30
35479: PUSH
35480: LD_VAR 0 5
35484: IN
35485: OR
35486: AND
35487: PUSH
35488: LD_INT 6
35490: PPUSH
35491: LD_VAR 0 16
35495: PPUSH
35496: CALL_OW 321
35500: PUSH
35501: LD_INT 2
35503: EQUAL
35504: AND
35505: IFFALSE 35670
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35507: LD_INT 22
35509: PUSH
35510: LD_VAR 0 16
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: LD_INT 35
35524: PUSH
35525: LD_INT 11
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 35
35534: PUSH
35535: LD_INT 30
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 91
35549: PUSH
35550: LD_VAR 0 1
35554: PUSH
35555: LD_INT 18
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: PPUSH
35568: CALL_OW 69
35572: NOT
35573: PUSH
35574: LD_INT 22
35576: PUSH
35577: LD_VAR 0 16
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: LD_INT 30
35591: PUSH
35592: LD_INT 32
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 30
35601: PUSH
35602: LD_INT 33
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 91
35616: PUSH
35617: LD_VAR 0 1
35621: PUSH
35622: LD_INT 12
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: PUSH
35635: EMPTY
35636: LIST
35637: PPUSH
35638: CALL_OW 69
35642: PUSH
35643: LD_INT 2
35645: GREATER
35646: AND
35647: IFFALSE 35670
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35649: LD_ADDR_VAR 0 18
35653: PUSH
35654: LD_INT 11
35656: PUSH
35657: LD_INT 30
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_VAR 0 12
35668: ARRAY
35669: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35670: LD_VAR 0 18
35674: NOT
35675: PUSH
35676: LD_INT 40
35678: PPUSH
35679: LD_VAR 0 16
35683: PPUSH
35684: CALL_OW 321
35688: PUSH
35689: LD_INT 2
35691: EQUAL
35692: AND
35693: PUSH
35694: LD_INT 7
35696: PUSH
35697: LD_VAR 0 5
35701: IN
35702: PUSH
35703: LD_INT 28
35705: PUSH
35706: LD_VAR 0 5
35710: IN
35711: OR
35712: PUSH
35713: LD_INT 45
35715: PUSH
35716: LD_VAR 0 5
35720: IN
35721: OR
35722: AND
35723: IFFALSE 35977
// begin hex := GetHexInfo ( x , y ) ;
35725: LD_ADDR_VAR 0 4
35729: PUSH
35730: LD_VAR 0 10
35734: PPUSH
35735: LD_VAR 0 11
35739: PPUSH
35740: CALL_OW 546
35744: ST_TO_ADDR
// if hex [ 1 ] then
35745: LD_VAR 0 4
35749: PUSH
35750: LD_INT 1
35752: ARRAY
35753: IFFALSE 35757
// exit ;
35755: GO 36160
// height := hex [ 2 ] ;
35757: LD_ADDR_VAR 0 15
35761: PUSH
35762: LD_VAR 0 4
35766: PUSH
35767: LD_INT 2
35769: ARRAY
35770: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35771: LD_ADDR_VAR 0 14
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: LD_INT 3
35784: PUSH
35785: LD_INT 5
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: ST_TO_ADDR
// for i in tmp do
35794: LD_ADDR_VAR 0 8
35798: PUSH
35799: LD_VAR 0 14
35803: PUSH
35804: FOR_IN
35805: IFFALSE 35975
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35807: LD_ADDR_VAR 0 9
35811: PUSH
35812: LD_VAR 0 10
35816: PPUSH
35817: LD_VAR 0 8
35821: PPUSH
35822: LD_INT 5
35824: PPUSH
35825: CALL_OW 272
35829: PUSH
35830: LD_VAR 0 11
35834: PPUSH
35835: LD_VAR 0 8
35839: PPUSH
35840: LD_INT 5
35842: PPUSH
35843: CALL_OW 273
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35852: LD_VAR 0 9
35856: PUSH
35857: LD_INT 1
35859: ARRAY
35860: PPUSH
35861: LD_VAR 0 9
35865: PUSH
35866: LD_INT 2
35868: ARRAY
35869: PPUSH
35870: CALL_OW 488
35874: IFFALSE 35973
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35876: LD_ADDR_VAR 0 4
35880: PUSH
35881: LD_VAR 0 9
35885: PUSH
35886: LD_INT 1
35888: ARRAY
35889: PPUSH
35890: LD_VAR 0 9
35894: PUSH
35895: LD_INT 2
35897: ARRAY
35898: PPUSH
35899: CALL_OW 546
35903: ST_TO_ADDR
// if hex [ 1 ] then
35904: LD_VAR 0 4
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: IFFALSE 35916
// continue ;
35914: GO 35804
// h := hex [ 2 ] ;
35916: LD_ADDR_VAR 0 13
35920: PUSH
35921: LD_VAR 0 4
35925: PUSH
35926: LD_INT 2
35928: ARRAY
35929: ST_TO_ADDR
// if h + 7 < height then
35930: LD_VAR 0 13
35934: PUSH
35935: LD_INT 7
35937: PLUS
35938: PUSH
35939: LD_VAR 0 15
35943: LESS
35944: IFFALSE 35973
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35946: LD_ADDR_VAR 0 18
35950: PUSH
35951: LD_INT 7
35953: PUSH
35954: LD_INT 28
35956: PUSH
35957: LD_INT 45
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: PUSH
35965: LD_VAR 0 12
35969: ARRAY
35970: ST_TO_ADDR
// break ;
35971: GO 35975
// end ; end ; end ;
35973: GO 35804
35975: POP
35976: POP
// end ; if not weapon then
35977: LD_VAR 0 18
35981: NOT
35982: IFFALSE 36042
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35984: LD_ADDR_VAR 0 5
35988: PUSH
35989: LD_VAR 0 5
35993: PUSH
35994: LD_INT 11
35996: PUSH
35997: LD_INT 30
35999: PUSH
36000: LD_INT 49
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: DIFF
36008: ST_TO_ADDR
// if not list then
36009: LD_VAR 0 5
36013: NOT
36014: IFFALSE 36018
// exit ;
36016: GO 36160
// weapon := list [ rand ( 1 , list ) ] ;
36018: LD_ADDR_VAR 0 18
36022: PUSH
36023: LD_VAR 0 5
36027: PUSH
36028: LD_INT 1
36030: PPUSH
36031: LD_VAR 0 5
36035: PPUSH
36036: CALL_OW 12
36040: ARRAY
36041: ST_TO_ADDR
// end ; if weapon then
36042: LD_VAR 0 18
36046: IFFALSE 36160
// begin tmp := CostOfWeapon ( weapon ) ;
36048: LD_ADDR_VAR 0 14
36052: PUSH
36053: LD_VAR 0 18
36057: PPUSH
36058: CALL_OW 451
36062: ST_TO_ADDR
// j := GetBase ( tower ) ;
36063: LD_ADDR_VAR 0 9
36067: PUSH
36068: LD_VAR 0 1
36072: PPUSH
36073: CALL_OW 274
36077: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36078: LD_VAR 0 9
36082: PPUSH
36083: LD_INT 1
36085: PPUSH
36086: CALL_OW 275
36090: PUSH
36091: LD_VAR 0 14
36095: PUSH
36096: LD_INT 1
36098: ARRAY
36099: GREATEREQUAL
36100: PUSH
36101: LD_VAR 0 9
36105: PPUSH
36106: LD_INT 2
36108: PPUSH
36109: CALL_OW 275
36113: PUSH
36114: LD_VAR 0 14
36118: PUSH
36119: LD_INT 2
36121: ARRAY
36122: GREATEREQUAL
36123: AND
36124: PUSH
36125: LD_VAR 0 9
36129: PPUSH
36130: LD_INT 3
36132: PPUSH
36133: CALL_OW 275
36137: PUSH
36138: LD_VAR 0 14
36142: PUSH
36143: LD_INT 3
36145: ARRAY
36146: GREATEREQUAL
36147: AND
36148: IFFALSE 36160
// result := weapon ;
36150: LD_ADDR_VAR 0 3
36154: PUSH
36155: LD_VAR 0 18
36159: ST_TO_ADDR
// end ; end ;
36160: LD_VAR 0 3
36164: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36165: LD_INT 0
36167: PPUSH
36168: PPUSH
// result := true ;
36169: LD_ADDR_VAR 0 3
36173: PUSH
36174: LD_INT 1
36176: ST_TO_ADDR
// if array1 = array2 then
36177: LD_VAR 0 1
36181: PUSH
36182: LD_VAR 0 2
36186: EQUAL
36187: IFFALSE 36247
// begin for i = 1 to array1 do
36189: LD_ADDR_VAR 0 4
36193: PUSH
36194: DOUBLE
36195: LD_INT 1
36197: DEC
36198: ST_TO_ADDR
36199: LD_VAR 0 1
36203: PUSH
36204: FOR_TO
36205: IFFALSE 36243
// if array1 [ i ] <> array2 [ i ] then
36207: LD_VAR 0 1
36211: PUSH
36212: LD_VAR 0 4
36216: ARRAY
36217: PUSH
36218: LD_VAR 0 2
36222: PUSH
36223: LD_VAR 0 4
36227: ARRAY
36228: NONEQUAL
36229: IFFALSE 36241
// begin result := false ;
36231: LD_ADDR_VAR 0 3
36235: PUSH
36236: LD_INT 0
36238: ST_TO_ADDR
// break ;
36239: GO 36243
// end ;
36241: GO 36204
36243: POP
36244: POP
// end else
36245: GO 36255
// result := false ;
36247: LD_ADDR_VAR 0 3
36251: PUSH
36252: LD_INT 0
36254: ST_TO_ADDR
// end ;
36255: LD_VAR 0 3
36259: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36260: LD_INT 0
36262: PPUSH
36263: PPUSH
// if not array1 or not array2 then
36264: LD_VAR 0 1
36268: NOT
36269: PUSH
36270: LD_VAR 0 2
36274: NOT
36275: OR
36276: IFFALSE 36280
// exit ;
36278: GO 36344
// result := true ;
36280: LD_ADDR_VAR 0 3
36284: PUSH
36285: LD_INT 1
36287: ST_TO_ADDR
// for i = 1 to array1 do
36288: LD_ADDR_VAR 0 4
36292: PUSH
36293: DOUBLE
36294: LD_INT 1
36296: DEC
36297: ST_TO_ADDR
36298: LD_VAR 0 1
36302: PUSH
36303: FOR_TO
36304: IFFALSE 36342
// if array1 [ i ] <> array2 [ i ] then
36306: LD_VAR 0 1
36310: PUSH
36311: LD_VAR 0 4
36315: ARRAY
36316: PUSH
36317: LD_VAR 0 2
36321: PUSH
36322: LD_VAR 0 4
36326: ARRAY
36327: NONEQUAL
36328: IFFALSE 36340
// begin result := false ;
36330: LD_ADDR_VAR 0 3
36334: PUSH
36335: LD_INT 0
36337: ST_TO_ADDR
// break ;
36338: GO 36342
// end ;
36340: GO 36303
36342: POP
36343: POP
// end ;
36344: LD_VAR 0 3
36348: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36349: LD_INT 0
36351: PPUSH
36352: PPUSH
36353: PPUSH
// pom := GetBase ( fac ) ;
36354: LD_ADDR_VAR 0 5
36358: PUSH
36359: LD_VAR 0 1
36363: PPUSH
36364: CALL_OW 274
36368: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36369: LD_ADDR_VAR 0 4
36373: PUSH
36374: LD_VAR 0 2
36378: PUSH
36379: LD_INT 1
36381: ARRAY
36382: PPUSH
36383: LD_VAR 0 2
36387: PUSH
36388: LD_INT 2
36390: ARRAY
36391: PPUSH
36392: LD_VAR 0 2
36396: PUSH
36397: LD_INT 3
36399: ARRAY
36400: PPUSH
36401: LD_VAR 0 2
36405: PUSH
36406: LD_INT 4
36408: ARRAY
36409: PPUSH
36410: CALL_OW 449
36414: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36415: LD_ADDR_VAR 0 3
36419: PUSH
36420: LD_VAR 0 5
36424: PPUSH
36425: LD_INT 1
36427: PPUSH
36428: CALL_OW 275
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: LD_INT 1
36440: ARRAY
36441: GREATEREQUAL
36442: PUSH
36443: LD_VAR 0 5
36447: PPUSH
36448: LD_INT 2
36450: PPUSH
36451: CALL_OW 275
36455: PUSH
36456: LD_VAR 0 4
36460: PUSH
36461: LD_INT 2
36463: ARRAY
36464: GREATEREQUAL
36465: AND
36466: PUSH
36467: LD_VAR 0 5
36471: PPUSH
36472: LD_INT 3
36474: PPUSH
36475: CALL_OW 275
36479: PUSH
36480: LD_VAR 0 4
36484: PUSH
36485: LD_INT 3
36487: ARRAY
36488: GREATEREQUAL
36489: AND
36490: ST_TO_ADDR
// end ;
36491: LD_VAR 0 3
36495: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36496: LD_INT 0
36498: PPUSH
36499: PPUSH
36500: PPUSH
36501: PPUSH
// pom := GetBase ( building ) ;
36502: LD_ADDR_VAR 0 3
36506: PUSH
36507: LD_VAR 0 1
36511: PPUSH
36512: CALL_OW 274
36516: ST_TO_ADDR
// if not pom then
36517: LD_VAR 0 3
36521: NOT
36522: IFFALSE 36526
// exit ;
36524: GO 36696
// btype := GetBType ( building ) ;
36526: LD_ADDR_VAR 0 5
36530: PUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 266
36540: ST_TO_ADDR
// if btype = b_armoury then
36541: LD_VAR 0 5
36545: PUSH
36546: LD_INT 4
36548: EQUAL
36549: IFFALSE 36559
// btype := b_barracks ;
36551: LD_ADDR_VAR 0 5
36555: PUSH
36556: LD_INT 5
36558: ST_TO_ADDR
// if btype = b_depot then
36559: LD_VAR 0 5
36563: PUSH
36564: LD_INT 0
36566: EQUAL
36567: IFFALSE 36577
// btype := b_warehouse ;
36569: LD_ADDR_VAR 0 5
36573: PUSH
36574: LD_INT 1
36576: ST_TO_ADDR
// if btype = b_workshop then
36577: LD_VAR 0 5
36581: PUSH
36582: LD_INT 2
36584: EQUAL
36585: IFFALSE 36595
// btype := b_factory ;
36587: LD_ADDR_VAR 0 5
36591: PUSH
36592: LD_INT 3
36594: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36595: LD_ADDR_VAR 0 4
36599: PUSH
36600: LD_VAR 0 5
36604: PPUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 248
36614: PPUSH
36615: CALL_OW 450
36619: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36620: LD_ADDR_VAR 0 2
36624: PUSH
36625: LD_VAR 0 3
36629: PPUSH
36630: LD_INT 1
36632: PPUSH
36633: CALL_OW 275
36637: PUSH
36638: LD_VAR 0 4
36642: PUSH
36643: LD_INT 1
36645: ARRAY
36646: GREATEREQUAL
36647: PUSH
36648: LD_VAR 0 3
36652: PPUSH
36653: LD_INT 2
36655: PPUSH
36656: CALL_OW 275
36660: PUSH
36661: LD_VAR 0 4
36665: PUSH
36666: LD_INT 2
36668: ARRAY
36669: GREATEREQUAL
36670: AND
36671: PUSH
36672: LD_VAR 0 3
36676: PPUSH
36677: LD_INT 3
36679: PPUSH
36680: CALL_OW 275
36684: PUSH
36685: LD_VAR 0 4
36689: PUSH
36690: LD_INT 3
36692: ARRAY
36693: GREATEREQUAL
36694: AND
36695: ST_TO_ADDR
// end ;
36696: LD_VAR 0 2
36700: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
36705: PPUSH
// pom := GetBase ( building ) ;
36706: LD_ADDR_VAR 0 4
36710: PUSH
36711: LD_VAR 0 1
36715: PPUSH
36716: CALL_OW 274
36720: ST_TO_ADDR
// if not pom then
36721: LD_VAR 0 4
36725: NOT
36726: IFFALSE 36730
// exit ;
36728: GO 36831
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36730: LD_ADDR_VAR 0 5
36734: PUSH
36735: LD_VAR 0 2
36739: PPUSH
36740: LD_VAR 0 1
36744: PPUSH
36745: CALL_OW 248
36749: PPUSH
36750: CALL_OW 450
36754: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36755: LD_ADDR_VAR 0 3
36759: PUSH
36760: LD_VAR 0 4
36764: PPUSH
36765: LD_INT 1
36767: PPUSH
36768: CALL_OW 275
36772: PUSH
36773: LD_VAR 0 5
36777: PUSH
36778: LD_INT 1
36780: ARRAY
36781: GREATEREQUAL
36782: PUSH
36783: LD_VAR 0 4
36787: PPUSH
36788: LD_INT 2
36790: PPUSH
36791: CALL_OW 275
36795: PUSH
36796: LD_VAR 0 5
36800: PUSH
36801: LD_INT 2
36803: ARRAY
36804: GREATEREQUAL
36805: AND
36806: PUSH
36807: LD_VAR 0 4
36811: PPUSH
36812: LD_INT 3
36814: PPUSH
36815: CALL_OW 275
36819: PUSH
36820: LD_VAR 0 5
36824: PUSH
36825: LD_INT 3
36827: ARRAY
36828: GREATEREQUAL
36829: AND
36830: ST_TO_ADDR
// end ;
36831: LD_VAR 0 3
36835: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36836: LD_INT 0
36838: PPUSH
36839: PPUSH
36840: PPUSH
36841: PPUSH
36842: PPUSH
36843: PPUSH
36844: PPUSH
36845: PPUSH
36846: PPUSH
36847: PPUSH
36848: PPUSH
// result := false ;
36849: LD_ADDR_VAR 0 8
36853: PUSH
36854: LD_INT 0
36856: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36857: LD_VAR 0 5
36861: NOT
36862: PUSH
36863: LD_VAR 0 1
36867: NOT
36868: OR
36869: PUSH
36870: LD_VAR 0 2
36874: NOT
36875: OR
36876: PUSH
36877: LD_VAR 0 3
36881: NOT
36882: OR
36883: IFFALSE 36887
// exit ;
36885: GO 37701
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36887: LD_ADDR_VAR 0 14
36891: PUSH
36892: LD_VAR 0 1
36896: PPUSH
36897: LD_VAR 0 2
36901: PPUSH
36902: LD_VAR 0 3
36906: PPUSH
36907: LD_VAR 0 4
36911: PPUSH
36912: LD_VAR 0 5
36916: PUSH
36917: LD_INT 1
36919: ARRAY
36920: PPUSH
36921: CALL_OW 248
36925: PPUSH
36926: LD_INT 0
36928: PPUSH
36929: CALL 38954 0 6
36933: ST_TO_ADDR
// if not hexes then
36934: LD_VAR 0 14
36938: NOT
36939: IFFALSE 36943
// exit ;
36941: GO 37701
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36943: LD_ADDR_VAR 0 17
36947: PUSH
36948: LD_VAR 0 5
36952: PPUSH
36953: LD_INT 22
36955: PUSH
36956: LD_VAR 0 13
36960: PPUSH
36961: CALL_OW 255
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 30
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 30
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PPUSH
37002: CALL_OW 72
37006: ST_TO_ADDR
// for i = 1 to hexes do
37007: LD_ADDR_VAR 0 9
37011: PUSH
37012: DOUBLE
37013: LD_INT 1
37015: DEC
37016: ST_TO_ADDR
37017: LD_VAR 0 14
37021: PUSH
37022: FOR_TO
37023: IFFALSE 37699
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37025: LD_ADDR_VAR 0 13
37029: PUSH
37030: LD_VAR 0 14
37034: PUSH
37035: LD_VAR 0 9
37039: ARRAY
37040: PUSH
37041: LD_INT 1
37043: ARRAY
37044: PPUSH
37045: LD_VAR 0 14
37049: PUSH
37050: LD_VAR 0 9
37054: ARRAY
37055: PUSH
37056: LD_INT 2
37058: ARRAY
37059: PPUSH
37060: CALL_OW 428
37064: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37065: LD_VAR 0 14
37069: PUSH
37070: LD_VAR 0 9
37074: ARRAY
37075: PUSH
37076: LD_INT 1
37078: ARRAY
37079: PPUSH
37080: LD_VAR 0 14
37084: PUSH
37085: LD_VAR 0 9
37089: ARRAY
37090: PUSH
37091: LD_INT 2
37093: ARRAY
37094: PPUSH
37095: CALL_OW 351
37099: PUSH
37100: LD_VAR 0 14
37104: PUSH
37105: LD_VAR 0 9
37109: ARRAY
37110: PUSH
37111: LD_INT 1
37113: ARRAY
37114: PPUSH
37115: LD_VAR 0 14
37119: PUSH
37120: LD_VAR 0 9
37124: ARRAY
37125: PUSH
37126: LD_INT 2
37128: ARRAY
37129: PPUSH
37130: CALL_OW 488
37134: NOT
37135: OR
37136: PUSH
37137: LD_VAR 0 13
37141: PPUSH
37142: CALL_OW 247
37146: PUSH
37147: LD_INT 3
37149: EQUAL
37150: OR
37151: IFFALSE 37157
// exit ;
37153: POP
37154: POP
37155: GO 37701
// if not tmp then
37157: LD_VAR 0 13
37161: NOT
37162: IFFALSE 37166
// continue ;
37164: GO 37022
// result := true ;
37166: LD_ADDR_VAR 0 8
37170: PUSH
37171: LD_INT 1
37173: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37174: LD_VAR 0 6
37178: PUSH
37179: LD_VAR 0 13
37183: PPUSH
37184: CALL_OW 247
37188: PUSH
37189: LD_INT 2
37191: EQUAL
37192: AND
37193: PUSH
37194: LD_VAR 0 13
37198: PPUSH
37199: CALL_OW 263
37203: PUSH
37204: LD_INT 1
37206: EQUAL
37207: AND
37208: IFFALSE 37372
// begin if IsDrivenBy ( tmp ) then
37210: LD_VAR 0 13
37214: PPUSH
37215: CALL_OW 311
37219: IFFALSE 37223
// continue ;
37221: GO 37022
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37223: LD_VAR 0 6
37227: PPUSH
37228: LD_INT 3
37230: PUSH
37231: LD_INT 60
37233: PUSH
37234: EMPTY
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: LD_INT 55
37246: PUSH
37247: EMPTY
37248: LIST
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PPUSH
37258: CALL_OW 72
37262: IFFALSE 37370
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37264: LD_ADDR_VAR 0 18
37268: PUSH
37269: LD_VAR 0 6
37273: PPUSH
37274: LD_INT 3
37276: PUSH
37277: LD_INT 60
37279: PUSH
37280: EMPTY
37281: LIST
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 3
37289: PUSH
37290: LD_INT 55
37292: PUSH
37293: EMPTY
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PPUSH
37304: CALL_OW 72
37308: PUSH
37309: LD_INT 1
37311: ARRAY
37312: ST_TO_ADDR
// if IsInUnit ( driver ) then
37313: LD_VAR 0 18
37317: PPUSH
37318: CALL_OW 310
37322: IFFALSE 37333
// ComExit ( driver ) ;
37324: LD_VAR 0 18
37328: PPUSH
37329: CALL 62746 0 1
// AddComEnterUnit ( driver , tmp ) ;
37333: LD_VAR 0 18
37337: PPUSH
37338: LD_VAR 0 13
37342: PPUSH
37343: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37347: LD_VAR 0 18
37351: PPUSH
37352: LD_VAR 0 7
37356: PPUSH
37357: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37361: LD_VAR 0 18
37365: PPUSH
37366: CALL_OW 181
// end ; continue ;
37370: GO 37022
// end ; if not cleaners or not tmp in cleaners then
37372: LD_VAR 0 6
37376: NOT
37377: PUSH
37378: LD_VAR 0 13
37382: PUSH
37383: LD_VAR 0 6
37387: IN
37388: NOT
37389: OR
37390: IFFALSE 37697
// begin if dep then
37392: LD_VAR 0 17
37396: IFFALSE 37532
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37398: LD_ADDR_VAR 0 16
37402: PUSH
37403: LD_VAR 0 17
37407: PUSH
37408: LD_INT 1
37410: ARRAY
37411: PPUSH
37412: CALL_OW 250
37416: PPUSH
37417: LD_VAR 0 17
37421: PUSH
37422: LD_INT 1
37424: ARRAY
37425: PPUSH
37426: CALL_OW 254
37430: PPUSH
37431: LD_INT 5
37433: PPUSH
37434: CALL_OW 272
37438: PUSH
37439: LD_VAR 0 17
37443: PUSH
37444: LD_INT 1
37446: ARRAY
37447: PPUSH
37448: CALL_OW 251
37452: PPUSH
37453: LD_VAR 0 17
37457: PUSH
37458: LD_INT 1
37460: ARRAY
37461: PPUSH
37462: CALL_OW 254
37466: PPUSH
37467: LD_INT 5
37469: PPUSH
37470: CALL_OW 273
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37479: LD_VAR 0 16
37483: PUSH
37484: LD_INT 1
37486: ARRAY
37487: PPUSH
37488: LD_VAR 0 16
37492: PUSH
37493: LD_INT 2
37495: ARRAY
37496: PPUSH
37497: CALL_OW 488
37501: IFFALSE 37532
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37503: LD_VAR 0 13
37507: PPUSH
37508: LD_VAR 0 16
37512: PUSH
37513: LD_INT 1
37515: ARRAY
37516: PPUSH
37517: LD_VAR 0 16
37521: PUSH
37522: LD_INT 2
37524: ARRAY
37525: PPUSH
37526: CALL_OW 111
// continue ;
37530: GO 37022
// end ; end ; r := GetDir ( tmp ) ;
37532: LD_ADDR_VAR 0 15
37536: PUSH
37537: LD_VAR 0 13
37541: PPUSH
37542: CALL_OW 254
37546: ST_TO_ADDR
// if r = 5 then
37547: LD_VAR 0 15
37551: PUSH
37552: LD_INT 5
37554: EQUAL
37555: IFFALSE 37565
// r := 0 ;
37557: LD_ADDR_VAR 0 15
37561: PUSH
37562: LD_INT 0
37564: ST_TO_ADDR
// for j = r to 5 do
37565: LD_ADDR_VAR 0 10
37569: PUSH
37570: DOUBLE
37571: LD_VAR 0 15
37575: DEC
37576: ST_TO_ADDR
37577: LD_INT 5
37579: PUSH
37580: FOR_TO
37581: IFFALSE 37695
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37583: LD_ADDR_VAR 0 11
37587: PUSH
37588: LD_VAR 0 13
37592: PPUSH
37593: CALL_OW 250
37597: PPUSH
37598: LD_VAR 0 10
37602: PPUSH
37603: LD_INT 2
37605: PPUSH
37606: CALL_OW 272
37610: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37611: LD_ADDR_VAR 0 12
37615: PUSH
37616: LD_VAR 0 13
37620: PPUSH
37621: CALL_OW 251
37625: PPUSH
37626: LD_VAR 0 10
37630: PPUSH
37631: LD_INT 2
37633: PPUSH
37634: CALL_OW 273
37638: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37639: LD_VAR 0 11
37643: PPUSH
37644: LD_VAR 0 12
37648: PPUSH
37649: CALL_OW 488
37653: PUSH
37654: LD_VAR 0 11
37658: PPUSH
37659: LD_VAR 0 12
37663: PPUSH
37664: CALL_OW 428
37668: NOT
37669: AND
37670: IFFALSE 37693
// begin ComMoveXY ( tmp , _x , _y ) ;
37672: LD_VAR 0 13
37676: PPUSH
37677: LD_VAR 0 11
37681: PPUSH
37682: LD_VAR 0 12
37686: PPUSH
37687: CALL_OW 111
// break ;
37691: GO 37695
// end ; end ;
37693: GO 37580
37695: POP
37696: POP
// end ; end ;
37697: GO 37022
37699: POP
37700: POP
// end ;
37701: LD_VAR 0 8
37705: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37706: LD_INT 0
37708: PPUSH
// result := true ;
37709: LD_ADDR_VAR 0 3
37713: PUSH
37714: LD_INT 1
37716: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37717: LD_VAR 0 2
37721: PUSH
37722: LD_INT 24
37724: DOUBLE
37725: EQUAL
37726: IFTRUE 37736
37728: LD_INT 33
37730: DOUBLE
37731: EQUAL
37732: IFTRUE 37736
37734: GO 37761
37736: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_INT 32
37744: PPUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL_OW 321
37754: PUSH
37755: LD_INT 2
37757: EQUAL
37758: ST_TO_ADDR
37759: GO 38077
37761: LD_INT 20
37763: DOUBLE
37764: EQUAL
37765: IFTRUE 37769
37767: GO 37794
37769: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_INT 6
37777: PPUSH
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL_OW 321
37787: PUSH
37788: LD_INT 2
37790: EQUAL
37791: ST_TO_ADDR
37792: GO 38077
37794: LD_INT 22
37796: DOUBLE
37797: EQUAL
37798: IFTRUE 37808
37800: LD_INT 36
37802: DOUBLE
37803: EQUAL
37804: IFTRUE 37808
37806: GO 37833
37808: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: LD_INT 15
37816: PPUSH
37817: LD_VAR 0 1
37821: PPUSH
37822: CALL_OW 321
37826: PUSH
37827: LD_INT 2
37829: EQUAL
37830: ST_TO_ADDR
37831: GO 38077
37833: LD_INT 30
37835: DOUBLE
37836: EQUAL
37837: IFTRUE 37841
37839: GO 37866
37841: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37842: LD_ADDR_VAR 0 3
37846: PUSH
37847: LD_INT 20
37849: PPUSH
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 321
37859: PUSH
37860: LD_INT 2
37862: EQUAL
37863: ST_TO_ADDR
37864: GO 38077
37866: LD_INT 28
37868: DOUBLE
37869: EQUAL
37870: IFTRUE 37880
37872: LD_INT 21
37874: DOUBLE
37875: EQUAL
37876: IFTRUE 37880
37878: GO 37905
37880: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37881: LD_ADDR_VAR 0 3
37885: PUSH
37886: LD_INT 21
37888: PPUSH
37889: LD_VAR 0 1
37893: PPUSH
37894: CALL_OW 321
37898: PUSH
37899: LD_INT 2
37901: EQUAL
37902: ST_TO_ADDR
37903: GO 38077
37905: LD_INT 16
37907: DOUBLE
37908: EQUAL
37909: IFTRUE 37913
37911: GO 37938
37913: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37914: LD_ADDR_VAR 0 3
37918: PUSH
37919: LD_INT 84
37921: PPUSH
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL_OW 321
37931: PUSH
37932: LD_INT 2
37934: EQUAL
37935: ST_TO_ADDR
37936: GO 38077
37938: LD_INT 19
37940: DOUBLE
37941: EQUAL
37942: IFTRUE 37952
37944: LD_INT 23
37946: DOUBLE
37947: EQUAL
37948: IFTRUE 37952
37950: GO 37977
37952: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37953: LD_ADDR_VAR 0 3
37957: PUSH
37958: LD_INT 83
37960: PPUSH
37961: LD_VAR 0 1
37965: PPUSH
37966: CALL_OW 321
37970: PUSH
37971: LD_INT 2
37973: EQUAL
37974: ST_TO_ADDR
37975: GO 38077
37977: LD_INT 17
37979: DOUBLE
37980: EQUAL
37981: IFTRUE 37985
37983: GO 38010
37985: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37986: LD_ADDR_VAR 0 3
37990: PUSH
37991: LD_INT 39
37993: PPUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL_OW 321
38003: PUSH
38004: LD_INT 2
38006: EQUAL
38007: ST_TO_ADDR
38008: GO 38077
38010: LD_INT 18
38012: DOUBLE
38013: EQUAL
38014: IFTRUE 38018
38016: GO 38043
38018: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38019: LD_ADDR_VAR 0 3
38023: PUSH
38024: LD_INT 40
38026: PPUSH
38027: LD_VAR 0 1
38031: PPUSH
38032: CALL_OW 321
38036: PUSH
38037: LD_INT 2
38039: EQUAL
38040: ST_TO_ADDR
38041: GO 38077
38043: LD_INT 27
38045: DOUBLE
38046: EQUAL
38047: IFTRUE 38051
38049: GO 38076
38051: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38052: LD_ADDR_VAR 0 3
38056: PUSH
38057: LD_INT 35
38059: PPUSH
38060: LD_VAR 0 1
38064: PPUSH
38065: CALL_OW 321
38069: PUSH
38070: LD_INT 2
38072: EQUAL
38073: ST_TO_ADDR
38074: GO 38077
38076: POP
// end ;
38077: LD_VAR 0 3
38081: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38082: LD_INT 0
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
38094: PPUSH
// result := false ;
38095: LD_ADDR_VAR 0 6
38099: PUSH
38100: LD_INT 0
38102: ST_TO_ADDR
// if btype = b_depot then
38103: LD_VAR 0 2
38107: PUSH
38108: LD_INT 0
38110: EQUAL
38111: IFFALSE 38123
// begin result := true ;
38113: LD_ADDR_VAR 0 6
38117: PUSH
38118: LD_INT 1
38120: ST_TO_ADDR
// exit ;
38121: GO 38949
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38123: LD_VAR 0 1
38127: NOT
38128: PUSH
38129: LD_VAR 0 1
38133: PPUSH
38134: CALL_OW 266
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: IN
38149: NOT
38150: OR
38151: PUSH
38152: LD_VAR 0 2
38156: NOT
38157: OR
38158: PUSH
38159: LD_VAR 0 5
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: LD_INT 4
38178: PUSH
38179: LD_INT 5
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: IN
38190: NOT
38191: OR
38192: PUSH
38193: LD_VAR 0 3
38197: PPUSH
38198: LD_VAR 0 4
38202: PPUSH
38203: CALL_OW 488
38207: NOT
38208: OR
38209: IFFALSE 38213
// exit ;
38211: GO 38949
// side := GetSide ( depot ) ;
38213: LD_ADDR_VAR 0 9
38217: PUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: CALL_OW 255
38227: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38228: LD_VAR 0 9
38232: PPUSH
38233: LD_VAR 0 2
38237: PPUSH
38238: CALL 37706 0 2
38242: NOT
38243: IFFALSE 38247
// exit ;
38245: GO 38949
// pom := GetBase ( depot ) ;
38247: LD_ADDR_VAR 0 10
38251: PUSH
38252: LD_VAR 0 1
38256: PPUSH
38257: CALL_OW 274
38261: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38262: LD_ADDR_VAR 0 11
38266: PUSH
38267: LD_VAR 0 2
38271: PPUSH
38272: LD_VAR 0 1
38276: PPUSH
38277: CALL_OW 248
38281: PPUSH
38282: CALL_OW 450
38286: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38287: LD_VAR 0 10
38291: PPUSH
38292: LD_INT 1
38294: PPUSH
38295: CALL_OW 275
38299: PUSH
38300: LD_VAR 0 11
38304: PUSH
38305: LD_INT 1
38307: ARRAY
38308: GREATEREQUAL
38309: PUSH
38310: LD_VAR 0 10
38314: PPUSH
38315: LD_INT 2
38317: PPUSH
38318: CALL_OW 275
38322: PUSH
38323: LD_VAR 0 11
38327: PUSH
38328: LD_INT 2
38330: ARRAY
38331: GREATEREQUAL
38332: AND
38333: PUSH
38334: LD_VAR 0 10
38338: PPUSH
38339: LD_INT 3
38341: PPUSH
38342: CALL_OW 275
38346: PUSH
38347: LD_VAR 0 11
38351: PUSH
38352: LD_INT 3
38354: ARRAY
38355: GREATEREQUAL
38356: AND
38357: NOT
38358: IFFALSE 38362
// exit ;
38360: GO 38949
// if GetBType ( depot ) = b_depot then
38362: LD_VAR 0 1
38366: PPUSH
38367: CALL_OW 266
38371: PUSH
38372: LD_INT 0
38374: EQUAL
38375: IFFALSE 38387
// dist := 28 else
38377: LD_ADDR_VAR 0 14
38381: PUSH
38382: LD_INT 28
38384: ST_TO_ADDR
38385: GO 38395
// dist := 36 ;
38387: LD_ADDR_VAR 0 14
38391: PUSH
38392: LD_INT 36
38394: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38395: LD_VAR 0 1
38399: PPUSH
38400: LD_VAR 0 3
38404: PPUSH
38405: LD_VAR 0 4
38409: PPUSH
38410: CALL_OW 297
38414: PUSH
38415: LD_VAR 0 14
38419: GREATER
38420: IFFALSE 38424
// exit ;
38422: GO 38949
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38424: LD_ADDR_VAR 0 12
38428: PUSH
38429: LD_VAR 0 2
38433: PPUSH
38434: LD_VAR 0 3
38438: PPUSH
38439: LD_VAR 0 4
38443: PPUSH
38444: LD_VAR 0 5
38448: PPUSH
38449: LD_VAR 0 1
38453: PPUSH
38454: CALL_OW 248
38458: PPUSH
38459: LD_INT 0
38461: PPUSH
38462: CALL 38954 0 6
38466: ST_TO_ADDR
// if not hexes then
38467: LD_VAR 0 12
38471: NOT
38472: IFFALSE 38476
// exit ;
38474: GO 38949
// hex := GetHexInfo ( x , y ) ;
38476: LD_ADDR_VAR 0 15
38480: PUSH
38481: LD_VAR 0 3
38485: PPUSH
38486: LD_VAR 0 4
38490: PPUSH
38491: CALL_OW 546
38495: ST_TO_ADDR
// if hex [ 1 ] then
38496: LD_VAR 0 15
38500: PUSH
38501: LD_INT 1
38503: ARRAY
38504: IFFALSE 38508
// exit ;
38506: GO 38949
// height := hex [ 2 ] ;
38508: LD_ADDR_VAR 0 13
38512: PUSH
38513: LD_VAR 0 15
38517: PUSH
38518: LD_INT 2
38520: ARRAY
38521: ST_TO_ADDR
// for i = 1 to hexes do
38522: LD_ADDR_VAR 0 7
38526: PUSH
38527: DOUBLE
38528: LD_INT 1
38530: DEC
38531: ST_TO_ADDR
38532: LD_VAR 0 12
38536: PUSH
38537: FOR_TO
38538: IFFALSE 38868
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38540: LD_VAR 0 12
38544: PUSH
38545: LD_VAR 0 7
38549: ARRAY
38550: PUSH
38551: LD_INT 1
38553: ARRAY
38554: PPUSH
38555: LD_VAR 0 12
38559: PUSH
38560: LD_VAR 0 7
38564: ARRAY
38565: PUSH
38566: LD_INT 2
38568: ARRAY
38569: PPUSH
38570: CALL_OW 488
38574: NOT
38575: PUSH
38576: LD_VAR 0 12
38580: PUSH
38581: LD_VAR 0 7
38585: ARRAY
38586: PUSH
38587: LD_INT 1
38589: ARRAY
38590: PPUSH
38591: LD_VAR 0 12
38595: PUSH
38596: LD_VAR 0 7
38600: ARRAY
38601: PUSH
38602: LD_INT 2
38604: ARRAY
38605: PPUSH
38606: CALL_OW 428
38610: PUSH
38611: LD_INT 0
38613: GREATER
38614: OR
38615: PUSH
38616: LD_VAR 0 12
38620: PUSH
38621: LD_VAR 0 7
38625: ARRAY
38626: PUSH
38627: LD_INT 1
38629: ARRAY
38630: PPUSH
38631: LD_VAR 0 12
38635: PUSH
38636: LD_VAR 0 7
38640: ARRAY
38641: PUSH
38642: LD_INT 2
38644: ARRAY
38645: PPUSH
38646: CALL_OW 351
38650: OR
38651: IFFALSE 38657
// exit ;
38653: POP
38654: POP
38655: GO 38949
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38657: LD_ADDR_VAR 0 8
38661: PUSH
38662: LD_VAR 0 12
38666: PUSH
38667: LD_VAR 0 7
38671: ARRAY
38672: PUSH
38673: LD_INT 1
38675: ARRAY
38676: PPUSH
38677: LD_VAR 0 12
38681: PUSH
38682: LD_VAR 0 7
38686: ARRAY
38687: PUSH
38688: LD_INT 2
38690: ARRAY
38691: PPUSH
38692: CALL_OW 546
38696: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38697: LD_VAR 0 8
38701: PUSH
38702: LD_INT 1
38704: ARRAY
38705: PUSH
38706: LD_VAR 0 8
38710: PUSH
38711: LD_INT 2
38713: ARRAY
38714: PUSH
38715: LD_VAR 0 13
38719: PUSH
38720: LD_INT 2
38722: PLUS
38723: GREATER
38724: OR
38725: PUSH
38726: LD_VAR 0 8
38730: PUSH
38731: LD_INT 2
38733: ARRAY
38734: PUSH
38735: LD_VAR 0 13
38739: PUSH
38740: LD_INT 2
38742: MINUS
38743: LESS
38744: OR
38745: PUSH
38746: LD_VAR 0 8
38750: PUSH
38751: LD_INT 3
38753: ARRAY
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 8
38760: PUSH
38761: LD_INT 9
38763: PUSH
38764: LD_INT 10
38766: PUSH
38767: LD_INT 11
38769: PUSH
38770: LD_INT 12
38772: PUSH
38773: LD_INT 13
38775: PUSH
38776: LD_INT 16
38778: PUSH
38779: LD_INT 17
38781: PUSH
38782: LD_INT 18
38784: PUSH
38785: LD_INT 19
38787: PUSH
38788: LD_INT 20
38790: PUSH
38791: LD_INT 21
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: IN
38809: NOT
38810: OR
38811: PUSH
38812: LD_VAR 0 8
38816: PUSH
38817: LD_INT 5
38819: ARRAY
38820: NOT
38821: OR
38822: PUSH
38823: LD_VAR 0 8
38827: PUSH
38828: LD_INT 6
38830: ARRAY
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 7
38840: PUSH
38841: LD_INT 9
38843: PUSH
38844: LD_INT 10
38846: PUSH
38847: LD_INT 11
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: IN
38858: NOT
38859: OR
38860: IFFALSE 38866
// exit ;
38862: POP
38863: POP
38864: GO 38949
// end ;
38866: GO 38537
38868: POP
38869: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38870: LD_VAR 0 9
38874: PPUSH
38875: LD_VAR 0 3
38879: PPUSH
38880: LD_VAR 0 4
38884: PPUSH
38885: LD_INT 20
38887: PPUSH
38888: CALL 30872 0 4
38892: PUSH
38893: LD_INT 4
38895: ARRAY
38896: IFFALSE 38900
// exit ;
38898: GO 38949
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38900: LD_VAR 0 2
38904: PUSH
38905: LD_INT 29
38907: PUSH
38908: LD_INT 30
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: IN
38915: PUSH
38916: LD_VAR 0 3
38920: PPUSH
38921: LD_VAR 0 4
38925: PPUSH
38926: LD_VAR 0 9
38930: PPUSH
38931: CALL_OW 440
38935: NOT
38936: AND
38937: IFFALSE 38941
// exit ;
38939: GO 38949
// result := true ;
38941: LD_ADDR_VAR 0 6
38945: PUSH
38946: LD_INT 1
38948: ST_TO_ADDR
// end ;
38949: LD_VAR 0 6
38953: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38954: LD_INT 0
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
38994: PPUSH
38995: PPUSH
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
// result = [ ] ;
39014: LD_ADDR_VAR 0 7
39018: PUSH
39019: EMPTY
39020: ST_TO_ADDR
// temp_list = [ ] ;
39021: LD_ADDR_VAR 0 9
39025: PUSH
39026: EMPTY
39027: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39028: LD_VAR 0 4
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 3
39044: PUSH
39045: LD_INT 4
39047: PUSH
39048: LD_INT 5
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: IN
39059: NOT
39060: PUSH
39061: LD_VAR 0 1
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: IN
39076: PUSH
39077: LD_VAR 0 5
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: LD_INT 3
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: IN
39096: NOT
39097: AND
39098: OR
39099: IFFALSE 39103
// exit ;
39101: GO 57494
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39103: LD_VAR 0 1
39107: PUSH
39108: LD_INT 6
39110: PUSH
39111: LD_INT 7
39113: PUSH
39114: LD_INT 8
39116: PUSH
39117: LD_INT 13
39119: PUSH
39120: LD_INT 12
39122: PUSH
39123: LD_INT 15
39125: PUSH
39126: LD_INT 11
39128: PUSH
39129: LD_INT 14
39131: PUSH
39132: LD_INT 10
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: IN
39146: IFFALSE 39156
// btype = b_lab ;
39148: LD_ADDR_VAR 0 1
39152: PUSH
39153: LD_INT 6
39155: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39156: LD_VAR 0 6
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: IN
39175: NOT
39176: PUSH
39177: LD_VAR 0 1
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 2
39190: PUSH
39191: LD_INT 3
39193: PUSH
39194: LD_INT 6
39196: PUSH
39197: LD_INT 36
39199: PUSH
39200: LD_INT 4
39202: PUSH
39203: LD_INT 5
39205: PUSH
39206: LD_INT 31
39208: PUSH
39209: LD_INT 32
39211: PUSH
39212: LD_INT 33
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: IN
39228: NOT
39229: PUSH
39230: LD_VAR 0 6
39234: PUSH
39235: LD_INT 1
39237: EQUAL
39238: AND
39239: OR
39240: PUSH
39241: LD_VAR 0 1
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 3
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: IN
39256: NOT
39257: PUSH
39258: LD_VAR 0 6
39262: PUSH
39263: LD_INT 2
39265: EQUAL
39266: AND
39267: OR
39268: IFFALSE 39278
// mode = 0 ;
39270: LD_ADDR_VAR 0 6
39274: PUSH
39275: LD_INT 0
39277: ST_TO_ADDR
// case mode of 0 :
39278: LD_VAR 0 6
39282: PUSH
39283: LD_INT 0
39285: DOUBLE
39286: EQUAL
39287: IFTRUE 39291
39289: GO 50744
39291: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39292: LD_ADDR_VAR 0 11
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: LD_INT 2
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39485: LD_ADDR_VAR 0 12
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 3
39653: NEG
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39681: LD_ADDR_VAR 0 13
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: LD_INT 2
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 3
39840: NEG
39841: PUSH
39842: LD_INT 2
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 3
39852: NEG
39853: PUSH
39854: LD_INT 3
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39880: LD_ADDR_VAR 0 14
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 3
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 3
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40076: LD_ADDR_VAR 0 15
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 3
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40269: LD_ADDR_VAR 0 16
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 3
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: LD_INT 3
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40462: LD_ADDR_VAR 0 17
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: NEG
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: NEG
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40692: LD_ADDR_VAR 0 18
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40922: LD_ADDR_VAR 0 19
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41152: LD_ADDR_VAR 0 20
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41382: LD_ADDR_VAR 0 21
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: NEG
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41612: LD_ADDR_VAR 0 22
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41842: LD_ADDR_VAR 0 23
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 2
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 3
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 3
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42122: LD_ADDR_VAR 0 24
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 2
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 3
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42398: LD_ADDR_VAR 0 25
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42672: LD_ADDR_VAR 0 26
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 3
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: NEG
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42948: LD_ADDR_VAR 0 27
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43228: LD_ADDR_VAR 0 28
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 3
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 3
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 3
43475: NEG
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43510: LD_ADDR_VAR 0 29
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 2
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: LD_INT 3
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 3
43754: NEG
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43789: LD_ADDR_VAR 0 30
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 3
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 3
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 3
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44067: LD_ADDR_VAR 0 31
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: NEG
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 3
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 3
44310: NEG
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44345: LD_ADDR_VAR 0 32
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 3
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44623: LD_ADDR_VAR 0 33
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 3
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 3
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44902: LD_ADDR_VAR 0 34
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: LD_INT 3
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 3
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45182: LD_ADDR_VAR 0 35
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45294: LD_ADDR_VAR 0 36
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45406: LD_ADDR_VAR 0 37
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45518: LD_ADDR_VAR 0 38
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45630: LD_ADDR_VAR 0 39
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45742: LD_ADDR_VAR 0 40
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45854: LD_ADDR_VAR 0 41
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 3
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 3
46163: NEG
46164: PUSH
46165: LD_INT 3
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46204: LD_ADDR_VAR 0 42
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 3
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 3
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: LD_INT 3
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 3
46513: NEG
46514: PUSH
46515: LD_INT 3
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46554: LD_ADDR_VAR 0 43
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 3
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 3
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46902: LD_ADDR_VAR 0 44
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 3
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 3
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 3
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: LD_INT 3
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: NEG
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47252: LD_ADDR_VAR 0 45
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 3
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 3
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 3
47549: NEG
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 3
47561: NEG
47562: PUSH
47563: LD_INT 3
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47602: LD_ADDR_VAR 0 46
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 3
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 3
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47950: LD_ADDR_VAR 0 47
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48101: LD_ADDR_VAR 0 48
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48248: LD_ADDR_VAR 0 49
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48392: LD_ADDR_VAR 0 50
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48536: LD_ADDR_VAR 0 51
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48683: LD_ADDR_VAR 0 52
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48834: LD_ADDR_VAR 0 53
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49064: LD_ADDR_VAR 0 54
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49294: LD_ADDR_VAR 0 55
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49524: LD_ADDR_VAR 0 56
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49754: LD_ADDR_VAR 0 57
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49984: LD_ADDR_VAR 0 58
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50214: LD_ADDR_VAR 0 59
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50302: LD_ADDR_VAR 0 60
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50390: LD_ADDR_VAR 0 61
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50478: LD_ADDR_VAR 0 62
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50566: LD_ADDR_VAR 0 63
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50654: LD_ADDR_VAR 0 64
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: ST_TO_ADDR
// end ; 1 :
50742: GO 56639
50744: LD_INT 1
50746: DOUBLE
50747: EQUAL
50748: IFTRUE 50752
50750: GO 53375
50752: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50753: LD_ADDR_VAR 0 11
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 3
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50797: LD_ADDR_VAR 0 12
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50838: LD_ADDR_VAR 0 13
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: LIST
50877: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50878: LD_ADDR_VAR 0 14
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: LIST
50918: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50919: LD_ADDR_VAR 0 15
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50963: LD_ADDR_VAR 0 16
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: NEG
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51009: LD_ADDR_VAR 0 17
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 3
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51053: LD_ADDR_VAR 0 18
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51094: LD_ADDR_VAR 0 19
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51134: LD_ADDR_VAR 0 20
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 3
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: LIST
51174: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51175: LD_ADDR_VAR 0 21
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 3
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51219: LD_ADDR_VAR 0 22
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 3
51238: NEG
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: LIST
51264: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51265: LD_ADDR_VAR 0 23
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 4
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51309: LD_ADDR_VAR 0 24
51313: PUSH
51314: LD_INT 3
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 4
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51350: LD_ADDR_VAR 0 25
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 4
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: LD_INT 4
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51390: LD_ADDR_VAR 0 26
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 4
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: LIST
51430: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51431: LD_ADDR_VAR 0 27
51435: PUSH
51436: LD_INT 3
51438: NEG
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 4
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51475: LD_ADDR_VAR 0 28
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: NEG
51495: PUSH
51496: LD_INT 4
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 4
51506: NEG
51507: PUSH
51508: LD_INT 3
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51521: LD_ADDR_VAR 0 29
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 3
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 4
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 4
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 5
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 5
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 4
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 6
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 6
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 5
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51676: LD_ADDR_VAR 0 30
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 3
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 3
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 4
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 4
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 4
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 5
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 5
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 5
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 6
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 6
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51819: LD_ADDR_VAR 0 31
51823: PUSH
51824: LD_INT 3
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 4
51856: PUSH
51857: LD_INT 3
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 4
51866: PUSH
51867: LD_INT 4
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: LD_INT 4
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 5
51886: PUSH
51887: LD_INT 4
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 5
51896: PUSH
51897: LD_INT 5
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 4
51906: PUSH
51907: LD_INT 5
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 6
51916: PUSH
51917: LD_INT 5
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 6
51926: PUSH
51927: LD_INT 6
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 5
51936: PUSH
51937: LD_INT 6
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51958: LD_ADDR_VAR 0 32
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 4
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 5
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 5
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 4
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 6
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 6
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 5
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52101: LD_ADDR_VAR 0 33
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: NEG
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 3
52142: NEG
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 4
52153: NEG
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 4
52164: NEG
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 4
52176: NEG
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 5
52187: NEG
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 5
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 5
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 6
52221: NEG
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 6
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52256: LD_ADDR_VAR 0 34
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 3
52287: NEG
52288: PUSH
52289: LD_INT 3
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: LD_INT 4
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 4
52311: NEG
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 4
52323: NEG
52324: PUSH
52325: LD_INT 4
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 4
52335: NEG
52336: PUSH
52337: LD_INT 5
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 5
52347: NEG
52348: PUSH
52349: LD_INT 4
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 5
52359: NEG
52360: PUSH
52361: LD_INT 5
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 5
52371: NEG
52372: PUSH
52373: LD_INT 6
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 6
52383: NEG
52384: PUSH
52385: LD_INT 5
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 6
52395: NEG
52396: PUSH
52397: LD_INT 6
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52419: LD_ADDR_VAR 0 41
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 3
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52463: LD_ADDR_VAR 0 42
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52504: LD_ADDR_VAR 0 43
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 3
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52544: LD_ADDR_VAR 0 44
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52585: LD_ADDR_VAR 0 45
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52629: LD_ADDR_VAR 0 46
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: NEG
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52675: LD_ADDR_VAR 0 47
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 3
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 3
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52708: LD_ADDR_VAR 0 48
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52739: LD_ADDR_VAR 0 49
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52768: LD_ADDR_VAR 0 50
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52797: LD_ADDR_VAR 0 51
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52828: LD_ADDR_VAR 0 52
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52861: LD_ADDR_VAR 0 53
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 3
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: LIST
52904: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52905: LD_ADDR_VAR 0 54
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 3
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52946: LD_ADDR_VAR 0 55
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: LD_INT 3
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: LIST
52985: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52986: LD_ADDR_VAR 0 56
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 3
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: LIST
53026: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53027: LD_ADDR_VAR 0 57
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 3
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53071: LD_ADDR_VAR 0 58
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: NEG
53103: PUSH
53104: LD_INT 3
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53117: LD_ADDR_VAR 0 59
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53161: LD_ADDR_VAR 0 60
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53202: LD_ADDR_VAR 0 61
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53242: LD_ADDR_VAR 0 62
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: LIST
53282: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53283: LD_ADDR_VAR 0 63
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53327: LD_ADDR_VAR 0 64
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// end ; 2 :
53373: GO 56639
53375: LD_INT 2
53377: DOUBLE
53378: EQUAL
53379: IFTRUE 53383
53381: GO 56638
53383: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53384: LD_ADDR_VAR 0 29
53388: PUSH
53389: LD_INT 4
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 4
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 5
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 5
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 5
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 4
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 4
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 4
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 4
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 4
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 5
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 5
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 4
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: LD_INT 5
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 4
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 4
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 4
53746: NEG
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 4
53769: NEG
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 4
53781: NEG
53782: PUSH
53783: LD_INT 5
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: NEG
53794: PUSH
53795: LD_INT 4
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: LD_INT 3
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 4
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 5
53829: NEG
53830: PUSH
53831: LD_INT 4
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 5
53841: NEG
53842: PUSH
53843: LD_INT 5
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: LD_INT 5
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 5
53865: NEG
53866: PUSH
53867: LD_INT 3
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53922: LD_ADDR_VAR 0 30
53926: PUSH
53927: LD_INT 4
53929: PUSH
53930: LD_INT 4
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 4
53939: PUSH
53940: LD_INT 3
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 5
53949: PUSH
53950: LD_INT 4
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 5
53959: PUSH
53960: LD_INT 5
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: LD_INT 5
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: LD_INT 4
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 5
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 3
54009: PUSH
54010: LD_INT 5
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 3
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 4
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 4
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 3
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: LD_INT 4
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 4
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 4
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 4
54157: NEG
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 5
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 5
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 5
54191: NEG
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 3
54226: NEG
54227: PUSH
54228: LD_INT 4
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 4
54274: NEG
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 4
54286: NEG
54287: PUSH
54288: LD_INT 4
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: LD_INT 4
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 4
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 4
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 5
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 4
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 3
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 4
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 5
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 5
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54469: LD_ADDR_VAR 0 31
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 4
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 4
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 5
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 5
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 4
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: LD_INT 5
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 4
54625: NEG
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 4
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 4
54671: NEG
54672: PUSH
54673: LD_INT 4
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 4
54683: NEG
54684: PUSH
54685: LD_INT 5
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: LD_INT 4
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: LD_INT 3
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 5
54731: NEG
54732: PUSH
54733: LD_INT 4
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 5
54743: NEG
54744: PUSH
54745: LD_INT 5
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: LD_INT 5
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 5
54767: NEG
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 3
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 4
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 3
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: LD_INT 3
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 4
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: LD_INT 4
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 4
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 4
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 5
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 5
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 4
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 5
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55019: LD_ADDR_VAR 0 32
55023: PUSH
55024: LD_INT 4
55026: NEG
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 4
55037: NEG
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 4
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 5
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 5
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 5
55105: NEG
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: LD_INT 4
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 4
55188: NEG
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 4
55200: NEG
55201: PUSH
55202: LD_INT 4
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: LD_INT 4
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 4
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 4
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 5
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 4
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 3
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 4
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 5
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 3
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 5
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 4
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 4
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 4
55431: PUSH
55432: LD_INT 4
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 4
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 5
55451: PUSH
55452: LD_INT 4
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 5
55461: PUSH
55462: LD_INT 5
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 4
55471: PUSH
55472: LD_INT 5
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 4
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 5
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: LD_INT 5
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55566: LD_ADDR_VAR 0 33
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: LD_INT 4
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 4
55585: NEG
55586: PUSH
55587: LD_INT 5
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: LD_INT 4
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 4
55621: NEG
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 5
55633: NEG
55634: PUSH
55635: LD_INT 4
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 5
55645: NEG
55646: PUSH
55647: LD_INT 5
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: LD_INT 5
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 5
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 4
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 4
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: LD_INT 4
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 4
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 4
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 5
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 4
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 3
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 5
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 4
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 4
55906: PUSH
55907: LD_INT 4
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 4
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 4
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 4
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 4
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 3
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 4
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 5
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 5
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 4
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 3
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: LD_INT 5
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56104: LD_ADDR_VAR 0 34
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 4
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 5
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 4
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 4
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 5
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 5
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 4
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 4
56306: PUSH
56307: LD_INT 4
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 4
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 5
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 5
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 4
56346: PUSH
56347: LD_INT 5
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 5
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 5
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 4
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 4
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 4
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 4
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 5
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 5
56568: NEG
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: ST_TO_ADDR
// end ; end ;
56636: GO 56639
56638: POP
// case btype of b_depot , b_warehouse :
56639: LD_VAR 0 1
56643: PUSH
56644: LD_INT 0
56646: DOUBLE
56647: EQUAL
56648: IFTRUE 56658
56650: LD_INT 1
56652: DOUBLE
56653: EQUAL
56654: IFTRUE 56658
56656: GO 56859
56658: POP
// case nation of nation_american :
56659: LD_VAR 0 5
56663: PUSH
56664: LD_INT 1
56666: DOUBLE
56667: EQUAL
56668: IFTRUE 56672
56670: GO 56728
56672: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56673: LD_ADDR_VAR 0 9
56677: PUSH
56678: LD_VAR 0 11
56682: PUSH
56683: LD_VAR 0 12
56687: PUSH
56688: LD_VAR 0 13
56692: PUSH
56693: LD_VAR 0 14
56697: PUSH
56698: LD_VAR 0 15
56702: PUSH
56703: LD_VAR 0 16
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: PUSH
56716: LD_VAR 0 4
56720: PUSH
56721: LD_INT 1
56723: PLUS
56724: ARRAY
56725: ST_TO_ADDR
56726: GO 56857
56728: LD_INT 2
56730: DOUBLE
56731: EQUAL
56732: IFTRUE 56736
56734: GO 56792
56736: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56737: LD_ADDR_VAR 0 9
56741: PUSH
56742: LD_VAR 0 17
56746: PUSH
56747: LD_VAR 0 18
56751: PUSH
56752: LD_VAR 0 19
56756: PUSH
56757: LD_VAR 0 20
56761: PUSH
56762: LD_VAR 0 21
56766: PUSH
56767: LD_VAR 0 22
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: PUSH
56780: LD_VAR 0 4
56784: PUSH
56785: LD_INT 1
56787: PLUS
56788: ARRAY
56789: ST_TO_ADDR
56790: GO 56857
56792: LD_INT 3
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56800
56798: GO 56856
56800: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56801: LD_ADDR_VAR 0 9
56805: PUSH
56806: LD_VAR 0 23
56810: PUSH
56811: LD_VAR 0 24
56815: PUSH
56816: LD_VAR 0 25
56820: PUSH
56821: LD_VAR 0 26
56825: PUSH
56826: LD_VAR 0 27
56830: PUSH
56831: LD_VAR 0 28
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: PUSH
56844: LD_VAR 0 4
56848: PUSH
56849: LD_INT 1
56851: PLUS
56852: ARRAY
56853: ST_TO_ADDR
56854: GO 56857
56856: POP
56857: GO 57412
56859: LD_INT 2
56861: DOUBLE
56862: EQUAL
56863: IFTRUE 56873
56865: LD_INT 3
56867: DOUBLE
56868: EQUAL
56869: IFTRUE 56873
56871: GO 56929
56873: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56874: LD_ADDR_VAR 0 9
56878: PUSH
56879: LD_VAR 0 29
56883: PUSH
56884: LD_VAR 0 30
56888: PUSH
56889: LD_VAR 0 31
56893: PUSH
56894: LD_VAR 0 32
56898: PUSH
56899: LD_VAR 0 33
56903: PUSH
56904: LD_VAR 0 34
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: PUSH
56917: LD_VAR 0 4
56921: PUSH
56922: LD_INT 1
56924: PLUS
56925: ARRAY
56926: ST_TO_ADDR
56927: GO 57412
56929: LD_INT 16
56931: DOUBLE
56932: EQUAL
56933: IFTRUE 56991
56935: LD_INT 17
56937: DOUBLE
56938: EQUAL
56939: IFTRUE 56991
56941: LD_INT 18
56943: DOUBLE
56944: EQUAL
56945: IFTRUE 56991
56947: LD_INT 19
56949: DOUBLE
56950: EQUAL
56951: IFTRUE 56991
56953: LD_INT 22
56955: DOUBLE
56956: EQUAL
56957: IFTRUE 56991
56959: LD_INT 20
56961: DOUBLE
56962: EQUAL
56963: IFTRUE 56991
56965: LD_INT 21
56967: DOUBLE
56968: EQUAL
56969: IFTRUE 56991
56971: LD_INT 23
56973: DOUBLE
56974: EQUAL
56975: IFTRUE 56991
56977: LD_INT 24
56979: DOUBLE
56980: EQUAL
56981: IFTRUE 56991
56983: LD_INT 25
56985: DOUBLE
56986: EQUAL
56987: IFTRUE 56991
56989: GO 57047
56991: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56992: LD_ADDR_VAR 0 9
56996: PUSH
56997: LD_VAR 0 35
57001: PUSH
57002: LD_VAR 0 36
57006: PUSH
57007: LD_VAR 0 37
57011: PUSH
57012: LD_VAR 0 38
57016: PUSH
57017: LD_VAR 0 39
57021: PUSH
57022: LD_VAR 0 40
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: PUSH
57035: LD_VAR 0 4
57039: PUSH
57040: LD_INT 1
57042: PLUS
57043: ARRAY
57044: ST_TO_ADDR
57045: GO 57412
57047: LD_INT 6
57049: DOUBLE
57050: EQUAL
57051: IFTRUE 57103
57053: LD_INT 7
57055: DOUBLE
57056: EQUAL
57057: IFTRUE 57103
57059: LD_INT 8
57061: DOUBLE
57062: EQUAL
57063: IFTRUE 57103
57065: LD_INT 13
57067: DOUBLE
57068: EQUAL
57069: IFTRUE 57103
57071: LD_INT 12
57073: DOUBLE
57074: EQUAL
57075: IFTRUE 57103
57077: LD_INT 15
57079: DOUBLE
57080: EQUAL
57081: IFTRUE 57103
57083: LD_INT 11
57085: DOUBLE
57086: EQUAL
57087: IFTRUE 57103
57089: LD_INT 14
57091: DOUBLE
57092: EQUAL
57093: IFTRUE 57103
57095: LD_INT 10
57097: DOUBLE
57098: EQUAL
57099: IFTRUE 57103
57101: GO 57159
57103: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57104: LD_ADDR_VAR 0 9
57108: PUSH
57109: LD_VAR 0 41
57113: PUSH
57114: LD_VAR 0 42
57118: PUSH
57119: LD_VAR 0 43
57123: PUSH
57124: LD_VAR 0 44
57128: PUSH
57129: LD_VAR 0 45
57133: PUSH
57134: LD_VAR 0 46
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: PUSH
57147: LD_VAR 0 4
57151: PUSH
57152: LD_INT 1
57154: PLUS
57155: ARRAY
57156: ST_TO_ADDR
57157: GO 57412
57159: LD_INT 36
57161: DOUBLE
57162: EQUAL
57163: IFTRUE 57167
57165: GO 57223
57167: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57168: LD_ADDR_VAR 0 9
57172: PUSH
57173: LD_VAR 0 47
57177: PUSH
57178: LD_VAR 0 48
57182: PUSH
57183: LD_VAR 0 49
57187: PUSH
57188: LD_VAR 0 50
57192: PUSH
57193: LD_VAR 0 51
57197: PUSH
57198: LD_VAR 0 52
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: PUSH
57211: LD_VAR 0 4
57215: PUSH
57216: LD_INT 1
57218: PLUS
57219: ARRAY
57220: ST_TO_ADDR
57221: GO 57412
57223: LD_INT 4
57225: DOUBLE
57226: EQUAL
57227: IFTRUE 57249
57229: LD_INT 5
57231: DOUBLE
57232: EQUAL
57233: IFTRUE 57249
57235: LD_INT 34
57237: DOUBLE
57238: EQUAL
57239: IFTRUE 57249
57241: LD_INT 37
57243: DOUBLE
57244: EQUAL
57245: IFTRUE 57249
57247: GO 57305
57249: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57250: LD_ADDR_VAR 0 9
57254: PUSH
57255: LD_VAR 0 53
57259: PUSH
57260: LD_VAR 0 54
57264: PUSH
57265: LD_VAR 0 55
57269: PUSH
57270: LD_VAR 0 56
57274: PUSH
57275: LD_VAR 0 57
57279: PUSH
57280: LD_VAR 0 58
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: PUSH
57293: LD_VAR 0 4
57297: PUSH
57298: LD_INT 1
57300: PLUS
57301: ARRAY
57302: ST_TO_ADDR
57303: GO 57412
57305: LD_INT 31
57307: DOUBLE
57308: EQUAL
57309: IFTRUE 57355
57311: LD_INT 32
57313: DOUBLE
57314: EQUAL
57315: IFTRUE 57355
57317: LD_INT 33
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57355
57323: LD_INT 27
57325: DOUBLE
57326: EQUAL
57327: IFTRUE 57355
57329: LD_INT 26
57331: DOUBLE
57332: EQUAL
57333: IFTRUE 57355
57335: LD_INT 28
57337: DOUBLE
57338: EQUAL
57339: IFTRUE 57355
57341: LD_INT 29
57343: DOUBLE
57344: EQUAL
57345: IFTRUE 57355
57347: LD_INT 30
57349: DOUBLE
57350: EQUAL
57351: IFTRUE 57355
57353: GO 57411
57355: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57356: LD_ADDR_VAR 0 9
57360: PUSH
57361: LD_VAR 0 59
57365: PUSH
57366: LD_VAR 0 60
57370: PUSH
57371: LD_VAR 0 61
57375: PUSH
57376: LD_VAR 0 62
57380: PUSH
57381: LD_VAR 0 63
57385: PUSH
57386: LD_VAR 0 64
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: PUSH
57399: LD_VAR 0 4
57403: PUSH
57404: LD_INT 1
57406: PLUS
57407: ARRAY
57408: ST_TO_ADDR
57409: GO 57412
57411: POP
// temp_list2 = [ ] ;
57412: LD_ADDR_VAR 0 10
57416: PUSH
57417: EMPTY
57418: ST_TO_ADDR
// for i in temp_list do
57419: LD_ADDR_VAR 0 8
57423: PUSH
57424: LD_VAR 0 9
57428: PUSH
57429: FOR_IN
57430: IFFALSE 57482
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57432: LD_ADDR_VAR 0 10
57436: PUSH
57437: LD_VAR 0 10
57441: PUSH
57442: LD_VAR 0 8
57446: PUSH
57447: LD_INT 1
57449: ARRAY
57450: PUSH
57451: LD_VAR 0 2
57455: PLUS
57456: PUSH
57457: LD_VAR 0 8
57461: PUSH
57462: LD_INT 2
57464: ARRAY
57465: PUSH
57466: LD_VAR 0 3
57470: PLUS
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: EMPTY
57477: LIST
57478: ADD
57479: ST_TO_ADDR
57480: GO 57429
57482: POP
57483: POP
// result = temp_list2 ;
57484: LD_ADDR_VAR 0 7
57488: PUSH
57489: LD_VAR 0 10
57493: ST_TO_ADDR
// end ;
57494: LD_VAR 0 7
57498: RET
// export function EnemyInRange ( unit , dist ) ; begin
57499: LD_INT 0
57501: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57502: LD_ADDR_VAR 0 3
57506: PUSH
57507: LD_VAR 0 1
57511: PPUSH
57512: CALL_OW 255
57516: PPUSH
57517: LD_VAR 0 1
57521: PPUSH
57522: CALL_OW 250
57526: PPUSH
57527: LD_VAR 0 1
57531: PPUSH
57532: CALL_OW 251
57536: PPUSH
57537: LD_VAR 0 2
57541: PPUSH
57542: CALL 30872 0 4
57546: PUSH
57547: LD_INT 4
57549: ARRAY
57550: ST_TO_ADDR
// end ;
57551: LD_VAR 0 3
57555: RET
// export function PlayerSeeMe ( unit ) ; begin
57556: LD_INT 0
57558: PPUSH
// result := See ( your_side , unit ) ;
57559: LD_ADDR_VAR 0 2
57563: PUSH
57564: LD_OWVAR 2
57568: PPUSH
57569: LD_VAR 0 1
57573: PPUSH
57574: CALL_OW 292
57578: ST_TO_ADDR
// end ;
57579: LD_VAR 0 2
57583: RET
// export function ReverseDir ( unit ) ; begin
57584: LD_INT 0
57586: PPUSH
// if not unit then
57587: LD_VAR 0 1
57591: NOT
57592: IFFALSE 57596
// exit ;
57594: GO 57619
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57596: LD_ADDR_VAR 0 2
57600: PUSH
57601: LD_VAR 0 1
57605: PPUSH
57606: CALL_OW 254
57610: PUSH
57611: LD_INT 3
57613: PLUS
57614: PUSH
57615: LD_INT 6
57617: MOD
57618: ST_TO_ADDR
// end ;
57619: LD_VAR 0 2
57623: RET
// export function ReverseArray ( array ) ; var i ; begin
57624: LD_INT 0
57626: PPUSH
57627: PPUSH
// if not array then
57628: LD_VAR 0 1
57632: NOT
57633: IFFALSE 57637
// exit ;
57635: GO 57692
// result := [ ] ;
57637: LD_ADDR_VAR 0 2
57641: PUSH
57642: EMPTY
57643: ST_TO_ADDR
// for i := array downto 1 do
57644: LD_ADDR_VAR 0 3
57648: PUSH
57649: DOUBLE
57650: LD_VAR 0 1
57654: INC
57655: ST_TO_ADDR
57656: LD_INT 1
57658: PUSH
57659: FOR_DOWNTO
57660: IFFALSE 57690
// result := Join ( result , array [ i ] ) ;
57662: LD_ADDR_VAR 0 2
57666: PUSH
57667: LD_VAR 0 2
57671: PPUSH
57672: LD_VAR 0 1
57676: PUSH
57677: LD_VAR 0 3
57681: ARRAY
57682: PPUSH
57683: CALL 62348 0 2
57687: ST_TO_ADDR
57688: GO 57659
57690: POP
57691: POP
// end ;
57692: LD_VAR 0 2
57696: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57697: LD_INT 0
57699: PPUSH
57700: PPUSH
57701: PPUSH
57702: PPUSH
57703: PPUSH
57704: PPUSH
// if not unit or not hexes then
57705: LD_VAR 0 1
57709: NOT
57710: PUSH
57711: LD_VAR 0 2
57715: NOT
57716: OR
57717: IFFALSE 57721
// exit ;
57719: GO 57844
// dist := 9999 ;
57721: LD_ADDR_VAR 0 5
57725: PUSH
57726: LD_INT 9999
57728: ST_TO_ADDR
// for i = 1 to hexes do
57729: LD_ADDR_VAR 0 4
57733: PUSH
57734: DOUBLE
57735: LD_INT 1
57737: DEC
57738: ST_TO_ADDR
57739: LD_VAR 0 2
57743: PUSH
57744: FOR_TO
57745: IFFALSE 57832
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57747: LD_ADDR_VAR 0 6
57751: PUSH
57752: LD_VAR 0 1
57756: PPUSH
57757: LD_VAR 0 2
57761: PUSH
57762: LD_VAR 0 4
57766: ARRAY
57767: PUSH
57768: LD_INT 1
57770: ARRAY
57771: PPUSH
57772: LD_VAR 0 2
57776: PUSH
57777: LD_VAR 0 4
57781: ARRAY
57782: PUSH
57783: LD_INT 2
57785: ARRAY
57786: PPUSH
57787: CALL_OW 297
57791: ST_TO_ADDR
// if tdist < dist then
57792: LD_VAR 0 6
57796: PUSH
57797: LD_VAR 0 5
57801: LESS
57802: IFFALSE 57830
// begin hex := hexes [ i ] ;
57804: LD_ADDR_VAR 0 8
57808: PUSH
57809: LD_VAR 0 2
57813: PUSH
57814: LD_VAR 0 4
57818: ARRAY
57819: ST_TO_ADDR
// dist := tdist ;
57820: LD_ADDR_VAR 0 5
57824: PUSH
57825: LD_VAR 0 6
57829: ST_TO_ADDR
// end ; end ;
57830: GO 57744
57832: POP
57833: POP
// result := hex ;
57834: LD_ADDR_VAR 0 3
57838: PUSH
57839: LD_VAR 0 8
57843: ST_TO_ADDR
// end ;
57844: LD_VAR 0 3
57848: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57849: LD_INT 0
57851: PPUSH
57852: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57853: LD_VAR 0 1
57857: NOT
57858: PUSH
57859: LD_VAR 0 1
57863: PUSH
57864: LD_INT 21
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 23
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PPUSH
57888: CALL_OW 69
57892: IN
57893: NOT
57894: OR
57895: IFFALSE 57899
// exit ;
57897: GO 57946
// for i = 1 to 3 do
57899: LD_ADDR_VAR 0 3
57903: PUSH
57904: DOUBLE
57905: LD_INT 1
57907: DEC
57908: ST_TO_ADDR
57909: LD_INT 3
57911: PUSH
57912: FOR_TO
57913: IFFALSE 57944
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57915: LD_VAR 0 1
57919: PPUSH
57920: CALL_OW 250
57924: PPUSH
57925: LD_VAR 0 1
57929: PPUSH
57930: CALL_OW 251
57934: PPUSH
57935: LD_INT 1
57937: PPUSH
57938: CALL_OW 453
57942: GO 57912
57944: POP
57945: POP
// end ;
57946: LD_VAR 0 2
57950: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57951: LD_INT 0
57953: PPUSH
57954: PPUSH
57955: PPUSH
57956: PPUSH
57957: PPUSH
57958: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57959: LD_VAR 0 1
57963: NOT
57964: PUSH
57965: LD_VAR 0 2
57969: NOT
57970: OR
57971: PUSH
57972: LD_VAR 0 1
57976: PPUSH
57977: CALL_OW 314
57981: OR
57982: IFFALSE 57986
// exit ;
57984: GO 58453
// if GetLives ( i ) < 250 then
57986: LD_VAR 0 4
57990: PPUSH
57991: CALL_OW 256
57995: PUSH
57996: LD_INT 250
57998: LESS
57999: IFFALSE 58012
// begin ComAutodestruct ( i ) ;
58001: LD_VAR 0 4
58005: PPUSH
58006: CALL 57849 0 1
// exit ;
58010: GO 58453
// end ; x := GetX ( enemy_unit ) ;
58012: LD_ADDR_VAR 0 7
58016: PUSH
58017: LD_VAR 0 2
58021: PPUSH
58022: CALL_OW 250
58026: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58027: LD_ADDR_VAR 0 8
58031: PUSH
58032: LD_VAR 0 2
58036: PPUSH
58037: CALL_OW 251
58041: ST_TO_ADDR
// if not x or not y then
58042: LD_VAR 0 7
58046: NOT
58047: PUSH
58048: LD_VAR 0 8
58052: NOT
58053: OR
58054: IFFALSE 58058
// exit ;
58056: GO 58453
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58058: LD_ADDR_VAR 0 6
58062: PUSH
58063: LD_VAR 0 7
58067: PPUSH
58068: LD_INT 0
58070: PPUSH
58071: LD_INT 4
58073: PPUSH
58074: CALL_OW 272
58078: PUSH
58079: LD_VAR 0 8
58083: PPUSH
58084: LD_INT 0
58086: PPUSH
58087: LD_INT 4
58089: PPUSH
58090: CALL_OW 273
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_VAR 0 7
58103: PPUSH
58104: LD_INT 1
58106: PPUSH
58107: LD_INT 4
58109: PPUSH
58110: CALL_OW 272
58114: PUSH
58115: LD_VAR 0 8
58119: PPUSH
58120: LD_INT 1
58122: PPUSH
58123: LD_INT 4
58125: PPUSH
58126: CALL_OW 273
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_VAR 0 7
58139: PPUSH
58140: LD_INT 2
58142: PPUSH
58143: LD_INT 4
58145: PPUSH
58146: CALL_OW 272
58150: PUSH
58151: LD_VAR 0 8
58155: PPUSH
58156: LD_INT 2
58158: PPUSH
58159: LD_INT 4
58161: PPUSH
58162: CALL_OW 273
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_VAR 0 7
58175: PPUSH
58176: LD_INT 3
58178: PPUSH
58179: LD_INT 4
58181: PPUSH
58182: CALL_OW 272
58186: PUSH
58187: LD_VAR 0 8
58191: PPUSH
58192: LD_INT 3
58194: PPUSH
58195: LD_INT 4
58197: PPUSH
58198: CALL_OW 273
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_VAR 0 7
58211: PPUSH
58212: LD_INT 4
58214: PPUSH
58215: LD_INT 4
58217: PPUSH
58218: CALL_OW 272
58222: PUSH
58223: LD_VAR 0 8
58227: PPUSH
58228: LD_INT 4
58230: PPUSH
58231: LD_INT 4
58233: PPUSH
58234: CALL_OW 273
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_VAR 0 7
58247: PPUSH
58248: LD_INT 5
58250: PPUSH
58251: LD_INT 4
58253: PPUSH
58254: CALL_OW 272
58258: PUSH
58259: LD_VAR 0 8
58263: PPUSH
58264: LD_INT 5
58266: PPUSH
58267: LD_INT 4
58269: PPUSH
58270: CALL_OW 273
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: ST_TO_ADDR
// for i = tmp downto 1 do
58287: LD_ADDR_VAR 0 4
58291: PUSH
58292: DOUBLE
58293: LD_VAR 0 6
58297: INC
58298: ST_TO_ADDR
58299: LD_INT 1
58301: PUSH
58302: FOR_DOWNTO
58303: IFFALSE 58404
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58305: LD_VAR 0 6
58309: PUSH
58310: LD_VAR 0 4
58314: ARRAY
58315: PUSH
58316: LD_INT 1
58318: ARRAY
58319: PPUSH
58320: LD_VAR 0 6
58324: PUSH
58325: LD_VAR 0 4
58329: ARRAY
58330: PUSH
58331: LD_INT 2
58333: ARRAY
58334: PPUSH
58335: CALL_OW 488
58339: NOT
58340: PUSH
58341: LD_VAR 0 6
58345: PUSH
58346: LD_VAR 0 4
58350: ARRAY
58351: PUSH
58352: LD_INT 1
58354: ARRAY
58355: PPUSH
58356: LD_VAR 0 6
58360: PUSH
58361: LD_VAR 0 4
58365: ARRAY
58366: PUSH
58367: LD_INT 2
58369: ARRAY
58370: PPUSH
58371: CALL_OW 428
58375: PUSH
58376: LD_INT 0
58378: NONEQUAL
58379: OR
58380: IFFALSE 58402
// tmp := Delete ( tmp , i ) ;
58382: LD_ADDR_VAR 0 6
58386: PUSH
58387: LD_VAR 0 6
58391: PPUSH
58392: LD_VAR 0 4
58396: PPUSH
58397: CALL_OW 3
58401: ST_TO_ADDR
58402: GO 58302
58404: POP
58405: POP
// j := GetClosestHex ( unit , tmp ) ;
58406: LD_ADDR_VAR 0 5
58410: PUSH
58411: LD_VAR 0 1
58415: PPUSH
58416: LD_VAR 0 6
58420: PPUSH
58421: CALL 57697 0 2
58425: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58426: LD_VAR 0 1
58430: PPUSH
58431: LD_VAR 0 5
58435: PUSH
58436: LD_INT 1
58438: ARRAY
58439: PPUSH
58440: LD_VAR 0 5
58444: PUSH
58445: LD_INT 2
58447: ARRAY
58448: PPUSH
58449: CALL_OW 111
// end ;
58453: LD_VAR 0 3
58457: RET
// export function PrepareApemanSoldier ( ) ; begin
58458: LD_INT 0
58460: PPUSH
// uc_nation := 0 ;
58461: LD_ADDR_OWVAR 21
58465: PUSH
58466: LD_INT 0
58468: ST_TO_ADDR
// hc_sex := sex_male ;
58469: LD_ADDR_OWVAR 27
58473: PUSH
58474: LD_INT 1
58476: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58477: LD_ADDR_OWVAR 28
58481: PUSH
58482: LD_INT 15
58484: ST_TO_ADDR
// hc_gallery :=  ;
58485: LD_ADDR_OWVAR 33
58489: PUSH
58490: LD_STRING 
58492: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58493: LD_ADDR_OWVAR 31
58497: PUSH
58498: LD_INT 0
58500: PPUSH
58501: LD_INT 3
58503: PPUSH
58504: CALL_OW 12
58508: PUSH
58509: LD_INT 0
58511: PPUSH
58512: LD_INT 3
58514: PPUSH
58515: CALL_OW 12
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: ST_TO_ADDR
// end ;
58532: LD_VAR 0 1
58536: RET
// export function PrepareApemanEngineer ( ) ; begin
58537: LD_INT 0
58539: PPUSH
// uc_nation := 0 ;
58540: LD_ADDR_OWVAR 21
58544: PUSH
58545: LD_INT 0
58547: ST_TO_ADDR
// hc_sex := sex_male ;
58548: LD_ADDR_OWVAR 27
58552: PUSH
58553: LD_INT 1
58555: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58556: LD_ADDR_OWVAR 28
58560: PUSH
58561: LD_INT 16
58563: ST_TO_ADDR
// hc_gallery :=  ;
58564: LD_ADDR_OWVAR 33
58568: PUSH
58569: LD_STRING 
58571: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58572: LD_ADDR_OWVAR 31
58576: PUSH
58577: LD_INT 0
58579: PPUSH
58580: LD_INT 3
58582: PPUSH
58583: CALL_OW 12
58587: PUSH
58588: LD_INT 0
58590: PPUSH
58591: LD_INT 3
58593: PPUSH
58594: CALL_OW 12
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// end ;
58611: LD_VAR 0 1
58615: RET
// export function PrepareApeman ( agressivity ) ; begin
58616: LD_INT 0
58618: PPUSH
// uc_side := 0 ;
58619: LD_ADDR_OWVAR 20
58623: PUSH
58624: LD_INT 0
58626: ST_TO_ADDR
// uc_nation := 0 ;
58627: LD_ADDR_OWVAR 21
58631: PUSH
58632: LD_INT 0
58634: ST_TO_ADDR
// hc_sex := sex_male ;
58635: LD_ADDR_OWVAR 27
58639: PUSH
58640: LD_INT 1
58642: ST_TO_ADDR
// hc_class := class_apeman ;
58643: LD_ADDR_OWVAR 28
58647: PUSH
58648: LD_INT 12
58650: ST_TO_ADDR
// hc_gallery :=  ;
58651: LD_ADDR_OWVAR 33
58655: PUSH
58656: LD_STRING 
58658: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58659: LD_ADDR_OWVAR 35
58663: PUSH
58664: LD_VAR 0 1
58668: NEG
58669: PPUSH
58670: LD_VAR 0 1
58674: PPUSH
58675: CALL_OW 12
58679: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58680: LD_ADDR_OWVAR 31
58684: PUSH
58685: LD_INT 0
58687: PPUSH
58688: LD_INT 3
58690: PPUSH
58691: CALL_OW 12
58695: PUSH
58696: LD_INT 0
58698: PPUSH
58699: LD_INT 3
58701: PPUSH
58702: CALL_OW 12
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: ST_TO_ADDR
// end ;
58719: LD_VAR 0 2
58723: RET
// export function PrepareTiger ( agressivity ) ; begin
58724: LD_INT 0
58726: PPUSH
// uc_side := 0 ;
58727: LD_ADDR_OWVAR 20
58731: PUSH
58732: LD_INT 0
58734: ST_TO_ADDR
// uc_nation := 0 ;
58735: LD_ADDR_OWVAR 21
58739: PUSH
58740: LD_INT 0
58742: ST_TO_ADDR
// hc_class := class_tiger ;
58743: LD_ADDR_OWVAR 28
58747: PUSH
58748: LD_INT 14
58750: ST_TO_ADDR
// hc_gallery :=  ;
58751: LD_ADDR_OWVAR 33
58755: PUSH
58756: LD_STRING 
58758: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58759: LD_ADDR_OWVAR 35
58763: PUSH
58764: LD_VAR 0 1
58768: NEG
58769: PPUSH
58770: LD_VAR 0 1
58774: PPUSH
58775: CALL_OW 12
58779: ST_TO_ADDR
// end ;
58780: LD_VAR 0 2
58784: RET
// export function PrepareEnchidna ( ) ; begin
58785: LD_INT 0
58787: PPUSH
// uc_side := 0 ;
58788: LD_ADDR_OWVAR 20
58792: PUSH
58793: LD_INT 0
58795: ST_TO_ADDR
// uc_nation := 0 ;
58796: LD_ADDR_OWVAR 21
58800: PUSH
58801: LD_INT 0
58803: ST_TO_ADDR
// hc_class := class_baggie ;
58804: LD_ADDR_OWVAR 28
58808: PUSH
58809: LD_INT 13
58811: ST_TO_ADDR
// hc_gallery :=  ;
58812: LD_ADDR_OWVAR 33
58816: PUSH
58817: LD_STRING 
58819: ST_TO_ADDR
// end ;
58820: LD_VAR 0 1
58824: RET
// export function PrepareFrog ( ) ; begin
58825: LD_INT 0
58827: PPUSH
// uc_side := 0 ;
58828: LD_ADDR_OWVAR 20
58832: PUSH
58833: LD_INT 0
58835: ST_TO_ADDR
// uc_nation := 0 ;
58836: LD_ADDR_OWVAR 21
58840: PUSH
58841: LD_INT 0
58843: ST_TO_ADDR
// hc_class := class_frog ;
58844: LD_ADDR_OWVAR 28
58848: PUSH
58849: LD_INT 19
58851: ST_TO_ADDR
// hc_gallery :=  ;
58852: LD_ADDR_OWVAR 33
58856: PUSH
58857: LD_STRING 
58859: ST_TO_ADDR
// end ;
58860: LD_VAR 0 1
58864: RET
// export function PrepareFish ( ) ; begin
58865: LD_INT 0
58867: PPUSH
// uc_side := 0 ;
58868: LD_ADDR_OWVAR 20
58872: PUSH
58873: LD_INT 0
58875: ST_TO_ADDR
// uc_nation := 0 ;
58876: LD_ADDR_OWVAR 21
58880: PUSH
58881: LD_INT 0
58883: ST_TO_ADDR
// hc_class := class_fish ;
58884: LD_ADDR_OWVAR 28
58888: PUSH
58889: LD_INT 20
58891: ST_TO_ADDR
// hc_gallery :=  ;
58892: LD_ADDR_OWVAR 33
58896: PUSH
58897: LD_STRING 
58899: ST_TO_ADDR
// end ;
58900: LD_VAR 0 1
58904: RET
// export function PrepareBird ( ) ; begin
58905: LD_INT 0
58907: PPUSH
// uc_side := 0 ;
58908: LD_ADDR_OWVAR 20
58912: PUSH
58913: LD_INT 0
58915: ST_TO_ADDR
// uc_nation := 0 ;
58916: LD_ADDR_OWVAR 21
58920: PUSH
58921: LD_INT 0
58923: ST_TO_ADDR
// hc_class := class_phororhacos ;
58924: LD_ADDR_OWVAR 28
58928: PUSH
58929: LD_INT 18
58931: ST_TO_ADDR
// hc_gallery :=  ;
58932: LD_ADDR_OWVAR 33
58936: PUSH
58937: LD_STRING 
58939: ST_TO_ADDR
// end ;
58940: LD_VAR 0 1
58944: RET
// export function PrepareHorse ( ) ; begin
58945: LD_INT 0
58947: PPUSH
// uc_side := 0 ;
58948: LD_ADDR_OWVAR 20
58952: PUSH
58953: LD_INT 0
58955: ST_TO_ADDR
// uc_nation := 0 ;
58956: LD_ADDR_OWVAR 21
58960: PUSH
58961: LD_INT 0
58963: ST_TO_ADDR
// hc_class := class_horse ;
58964: LD_ADDR_OWVAR 28
58968: PUSH
58969: LD_INT 21
58971: ST_TO_ADDR
// hc_gallery :=  ;
58972: LD_ADDR_OWVAR 33
58976: PUSH
58977: LD_STRING 
58979: ST_TO_ADDR
// end ;
58980: LD_VAR 0 1
58984: RET
// export function PrepareMastodont ( ) ; begin
58985: LD_INT 0
58987: PPUSH
// uc_side := 0 ;
58988: LD_ADDR_OWVAR 20
58992: PUSH
58993: LD_INT 0
58995: ST_TO_ADDR
// uc_nation := 0 ;
58996: LD_ADDR_OWVAR 21
59000: PUSH
59001: LD_INT 0
59003: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59004: LD_ADDR_OWVAR 37
59008: PUSH
59009: LD_INT 31
59011: ST_TO_ADDR
// vc_control := control_rider ;
59012: LD_ADDR_OWVAR 38
59016: PUSH
59017: LD_INT 4
59019: ST_TO_ADDR
// end ;
59020: LD_VAR 0 1
59024: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59025: LD_INT 0
59027: PPUSH
59028: PPUSH
59029: PPUSH
// uc_side = 0 ;
59030: LD_ADDR_OWVAR 20
59034: PUSH
59035: LD_INT 0
59037: ST_TO_ADDR
// uc_nation = 0 ;
59038: LD_ADDR_OWVAR 21
59042: PUSH
59043: LD_INT 0
59045: ST_TO_ADDR
// InitHc_All ( ) ;
59046: CALL_OW 584
// InitVc ;
59050: CALL_OW 20
// if mastodonts then
59054: LD_VAR 0 6
59058: IFFALSE 59125
// for i = 1 to mastodonts do
59060: LD_ADDR_VAR 0 11
59064: PUSH
59065: DOUBLE
59066: LD_INT 1
59068: DEC
59069: ST_TO_ADDR
59070: LD_VAR 0 6
59074: PUSH
59075: FOR_TO
59076: IFFALSE 59123
// begin vc_chassis := 31 ;
59078: LD_ADDR_OWVAR 37
59082: PUSH
59083: LD_INT 31
59085: ST_TO_ADDR
// vc_control := control_rider ;
59086: LD_ADDR_OWVAR 38
59090: PUSH
59091: LD_INT 4
59093: ST_TO_ADDR
// animal := CreateVehicle ;
59094: LD_ADDR_VAR 0 12
59098: PUSH
59099: CALL_OW 45
59103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59104: LD_VAR 0 12
59108: PPUSH
59109: LD_VAR 0 8
59113: PPUSH
59114: LD_INT 0
59116: PPUSH
59117: CALL 61253 0 3
// end ;
59121: GO 59075
59123: POP
59124: POP
// if horses then
59125: LD_VAR 0 5
59129: IFFALSE 59196
// for i = 1 to horses do
59131: LD_ADDR_VAR 0 11
59135: PUSH
59136: DOUBLE
59137: LD_INT 1
59139: DEC
59140: ST_TO_ADDR
59141: LD_VAR 0 5
59145: PUSH
59146: FOR_TO
59147: IFFALSE 59194
// begin hc_class := 21 ;
59149: LD_ADDR_OWVAR 28
59153: PUSH
59154: LD_INT 21
59156: ST_TO_ADDR
// hc_gallery :=  ;
59157: LD_ADDR_OWVAR 33
59161: PUSH
59162: LD_STRING 
59164: ST_TO_ADDR
// animal := CreateHuman ;
59165: LD_ADDR_VAR 0 12
59169: PUSH
59170: CALL_OW 44
59174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59175: LD_VAR 0 12
59179: PPUSH
59180: LD_VAR 0 8
59184: PPUSH
59185: LD_INT 0
59187: PPUSH
59188: CALL 61253 0 3
// end ;
59192: GO 59146
59194: POP
59195: POP
// if birds then
59196: LD_VAR 0 1
59200: IFFALSE 59267
// for i = 1 to birds do
59202: LD_ADDR_VAR 0 11
59206: PUSH
59207: DOUBLE
59208: LD_INT 1
59210: DEC
59211: ST_TO_ADDR
59212: LD_VAR 0 1
59216: PUSH
59217: FOR_TO
59218: IFFALSE 59265
// begin hc_class := 18 ;
59220: LD_ADDR_OWVAR 28
59224: PUSH
59225: LD_INT 18
59227: ST_TO_ADDR
// hc_gallery =  ;
59228: LD_ADDR_OWVAR 33
59232: PUSH
59233: LD_STRING 
59235: ST_TO_ADDR
// animal := CreateHuman ;
59236: LD_ADDR_VAR 0 12
59240: PUSH
59241: CALL_OW 44
59245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59246: LD_VAR 0 12
59250: PPUSH
59251: LD_VAR 0 8
59255: PPUSH
59256: LD_INT 0
59258: PPUSH
59259: CALL 61253 0 3
// end ;
59263: GO 59217
59265: POP
59266: POP
// if tigers then
59267: LD_VAR 0 2
59271: IFFALSE 59355
// for i = 1 to tigers do
59273: LD_ADDR_VAR 0 11
59277: PUSH
59278: DOUBLE
59279: LD_INT 1
59281: DEC
59282: ST_TO_ADDR
59283: LD_VAR 0 2
59287: PUSH
59288: FOR_TO
59289: IFFALSE 59353
// begin hc_class = class_tiger ;
59291: LD_ADDR_OWVAR 28
59295: PUSH
59296: LD_INT 14
59298: ST_TO_ADDR
// hc_gallery =  ;
59299: LD_ADDR_OWVAR 33
59303: PUSH
59304: LD_STRING 
59306: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59307: LD_ADDR_OWVAR 35
59311: PUSH
59312: LD_INT 7
59314: NEG
59315: PPUSH
59316: LD_INT 7
59318: PPUSH
59319: CALL_OW 12
59323: ST_TO_ADDR
// animal := CreateHuman ;
59324: LD_ADDR_VAR 0 12
59328: PUSH
59329: CALL_OW 44
59333: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59334: LD_VAR 0 12
59338: PPUSH
59339: LD_VAR 0 8
59343: PPUSH
59344: LD_INT 0
59346: PPUSH
59347: CALL 61253 0 3
// end ;
59351: GO 59288
59353: POP
59354: POP
// if apemans then
59355: LD_VAR 0 3
59359: IFFALSE 59482
// for i = 1 to apemans do
59361: LD_ADDR_VAR 0 11
59365: PUSH
59366: DOUBLE
59367: LD_INT 1
59369: DEC
59370: ST_TO_ADDR
59371: LD_VAR 0 3
59375: PUSH
59376: FOR_TO
59377: IFFALSE 59480
// begin hc_class = class_apeman ;
59379: LD_ADDR_OWVAR 28
59383: PUSH
59384: LD_INT 12
59386: ST_TO_ADDR
// hc_gallery =  ;
59387: LD_ADDR_OWVAR 33
59391: PUSH
59392: LD_STRING 
59394: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59395: LD_ADDR_OWVAR 35
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PPUSH
59404: LD_INT 2
59406: PPUSH
59407: CALL_OW 12
59411: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59412: LD_ADDR_OWVAR 31
59416: PUSH
59417: LD_INT 1
59419: PPUSH
59420: LD_INT 3
59422: PPUSH
59423: CALL_OW 12
59427: PUSH
59428: LD_INT 1
59430: PPUSH
59431: LD_INT 3
59433: PPUSH
59434: CALL_OW 12
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: ST_TO_ADDR
// animal := CreateHuman ;
59451: LD_ADDR_VAR 0 12
59455: PUSH
59456: CALL_OW 44
59460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59461: LD_VAR 0 12
59465: PPUSH
59466: LD_VAR 0 8
59470: PPUSH
59471: LD_INT 0
59473: PPUSH
59474: CALL 61253 0 3
// end ;
59478: GO 59376
59480: POP
59481: POP
// if enchidnas then
59482: LD_VAR 0 4
59486: IFFALSE 59553
// for i = 1 to enchidnas do
59488: LD_ADDR_VAR 0 11
59492: PUSH
59493: DOUBLE
59494: LD_INT 1
59496: DEC
59497: ST_TO_ADDR
59498: LD_VAR 0 4
59502: PUSH
59503: FOR_TO
59504: IFFALSE 59551
// begin hc_class = 13 ;
59506: LD_ADDR_OWVAR 28
59510: PUSH
59511: LD_INT 13
59513: ST_TO_ADDR
// hc_gallery =  ;
59514: LD_ADDR_OWVAR 33
59518: PUSH
59519: LD_STRING 
59521: ST_TO_ADDR
// animal := CreateHuman ;
59522: LD_ADDR_VAR 0 12
59526: PUSH
59527: CALL_OW 44
59531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59532: LD_VAR 0 12
59536: PPUSH
59537: LD_VAR 0 8
59541: PPUSH
59542: LD_INT 0
59544: PPUSH
59545: CALL 61253 0 3
// end ;
59549: GO 59503
59551: POP
59552: POP
// if fishes then
59553: LD_VAR 0 7
59557: IFFALSE 59624
// for i = 1 to fishes do
59559: LD_ADDR_VAR 0 11
59563: PUSH
59564: DOUBLE
59565: LD_INT 1
59567: DEC
59568: ST_TO_ADDR
59569: LD_VAR 0 7
59573: PUSH
59574: FOR_TO
59575: IFFALSE 59622
// begin hc_class = 20 ;
59577: LD_ADDR_OWVAR 28
59581: PUSH
59582: LD_INT 20
59584: ST_TO_ADDR
// hc_gallery =  ;
59585: LD_ADDR_OWVAR 33
59589: PUSH
59590: LD_STRING 
59592: ST_TO_ADDR
// animal := CreateHuman ;
59593: LD_ADDR_VAR 0 12
59597: PUSH
59598: CALL_OW 44
59602: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59603: LD_VAR 0 12
59607: PPUSH
59608: LD_VAR 0 9
59612: PPUSH
59613: LD_INT 0
59615: PPUSH
59616: CALL 61253 0 3
// end ;
59620: GO 59574
59622: POP
59623: POP
// end ;
59624: LD_VAR 0 10
59628: RET
// export function WantHeal ( sci , unit ) ; begin
59629: LD_INT 0
59631: PPUSH
// if GetTaskList ( sci ) > 0 then
59632: LD_VAR 0 1
59636: PPUSH
59637: CALL_OW 437
59641: PUSH
59642: LD_INT 0
59644: GREATER
59645: IFFALSE 59715
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59647: LD_VAR 0 1
59651: PPUSH
59652: CALL_OW 437
59656: PUSH
59657: LD_INT 1
59659: ARRAY
59660: PUSH
59661: LD_INT 1
59663: ARRAY
59664: PUSH
59665: LD_STRING l
59667: EQUAL
59668: PUSH
59669: LD_VAR 0 1
59673: PPUSH
59674: CALL_OW 437
59678: PUSH
59679: LD_INT 1
59681: ARRAY
59682: PUSH
59683: LD_INT 4
59685: ARRAY
59686: PUSH
59687: LD_VAR 0 2
59691: EQUAL
59692: AND
59693: IFFALSE 59705
// result := true else
59695: LD_ADDR_VAR 0 3
59699: PUSH
59700: LD_INT 1
59702: ST_TO_ADDR
59703: GO 59713
// result := false ;
59705: LD_ADDR_VAR 0 3
59709: PUSH
59710: LD_INT 0
59712: ST_TO_ADDR
// end else
59713: GO 59723
// result := false ;
59715: LD_ADDR_VAR 0 3
59719: PUSH
59720: LD_INT 0
59722: ST_TO_ADDR
// end ;
59723: LD_VAR 0 3
59727: RET
// export function HealTarget ( sci ) ; begin
59728: LD_INT 0
59730: PPUSH
// if not sci then
59731: LD_VAR 0 1
59735: NOT
59736: IFFALSE 59740
// exit ;
59738: GO 59805
// result := 0 ;
59740: LD_ADDR_VAR 0 2
59744: PUSH
59745: LD_INT 0
59747: ST_TO_ADDR
// if GetTaskList ( sci ) then
59748: LD_VAR 0 1
59752: PPUSH
59753: CALL_OW 437
59757: IFFALSE 59805
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59759: LD_VAR 0 1
59763: PPUSH
59764: CALL_OW 437
59768: PUSH
59769: LD_INT 1
59771: ARRAY
59772: PUSH
59773: LD_INT 1
59775: ARRAY
59776: PUSH
59777: LD_STRING l
59779: EQUAL
59780: IFFALSE 59805
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59782: LD_ADDR_VAR 0 2
59786: PUSH
59787: LD_VAR 0 1
59791: PPUSH
59792: CALL_OW 437
59796: PUSH
59797: LD_INT 1
59799: ARRAY
59800: PUSH
59801: LD_INT 4
59803: ARRAY
59804: ST_TO_ADDR
// end ;
59805: LD_VAR 0 2
59809: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59810: LD_INT 0
59812: PPUSH
59813: PPUSH
59814: PPUSH
59815: PPUSH
// if not base_units then
59816: LD_VAR 0 1
59820: NOT
59821: IFFALSE 59825
// exit ;
59823: GO 59912
// result := false ;
59825: LD_ADDR_VAR 0 2
59829: PUSH
59830: LD_INT 0
59832: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59833: LD_ADDR_VAR 0 5
59837: PUSH
59838: LD_VAR 0 1
59842: PPUSH
59843: LD_INT 21
59845: PUSH
59846: LD_INT 3
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PPUSH
59853: CALL_OW 72
59857: ST_TO_ADDR
// if not tmp then
59858: LD_VAR 0 5
59862: NOT
59863: IFFALSE 59867
// exit ;
59865: GO 59912
// for i in tmp do
59867: LD_ADDR_VAR 0 3
59871: PUSH
59872: LD_VAR 0 5
59876: PUSH
59877: FOR_IN
59878: IFFALSE 59910
// begin result := EnemyInRange ( i , 22 ) ;
59880: LD_ADDR_VAR 0 2
59884: PUSH
59885: LD_VAR 0 3
59889: PPUSH
59890: LD_INT 22
59892: PPUSH
59893: CALL 57499 0 2
59897: ST_TO_ADDR
// if result then
59898: LD_VAR 0 2
59902: IFFALSE 59908
// exit ;
59904: POP
59905: POP
59906: GO 59912
// end ;
59908: GO 59877
59910: POP
59911: POP
// end ;
59912: LD_VAR 0 2
59916: RET
// export function FilterByTag ( units , tag ) ; begin
59917: LD_INT 0
59919: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59920: LD_ADDR_VAR 0 3
59924: PUSH
59925: LD_VAR 0 1
59929: PPUSH
59930: LD_INT 120
59932: PUSH
59933: LD_VAR 0 2
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PPUSH
59942: CALL_OW 72
59946: ST_TO_ADDR
// end ;
59947: LD_VAR 0 3
59951: RET
// export function IsDriver ( un ) ; begin
59952: LD_INT 0
59954: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59955: LD_ADDR_VAR 0 2
59959: PUSH
59960: LD_VAR 0 1
59964: PUSH
59965: LD_INT 55
59967: PUSH
59968: EMPTY
59969: LIST
59970: PPUSH
59971: CALL_OW 69
59975: IN
59976: ST_TO_ADDR
// end ;
59977: LD_VAR 0 2
59981: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59982: LD_INT 0
59984: PPUSH
59985: PPUSH
// list := [ ] ;
59986: LD_ADDR_VAR 0 5
59990: PUSH
59991: EMPTY
59992: ST_TO_ADDR
// case d of 0 :
59993: LD_VAR 0 3
59997: PUSH
59998: LD_INT 0
60000: DOUBLE
60001: EQUAL
60002: IFTRUE 60006
60004: GO 60139
60006: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60007: LD_ADDR_VAR 0 5
60011: PUSH
60012: LD_VAR 0 1
60016: PUSH
60017: LD_INT 4
60019: MINUS
60020: PUSH
60021: LD_VAR 0 2
60025: PUSH
60026: LD_INT 4
60028: MINUS
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: PUSH
60038: LD_VAR 0 1
60042: PUSH
60043: LD_INT 3
60045: MINUS
60046: PUSH
60047: LD_VAR 0 2
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: PUSH
60060: LD_VAR 0 1
60064: PUSH
60065: LD_INT 4
60067: PLUS
60068: PUSH
60069: LD_VAR 0 2
60073: PUSH
60074: LD_INT 4
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: PUSH
60082: LD_VAR 0 1
60086: PUSH
60087: LD_INT 3
60089: PLUS
60090: PUSH
60091: LD_VAR 0 2
60095: PUSH
60096: LD_INT 3
60098: PLUS
60099: PUSH
60100: LD_INT 5
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: PUSH
60108: LD_VAR 0 1
60112: PUSH
60113: LD_VAR 0 2
60117: PUSH
60118: LD_INT 4
60120: PLUS
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: ST_TO_ADDR
// end ; 1 :
60137: GO 60837
60139: LD_INT 1
60141: DOUBLE
60142: EQUAL
60143: IFTRUE 60147
60145: GO 60280
60147: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60148: LD_ADDR_VAR 0 5
60152: PUSH
60153: LD_VAR 0 1
60157: PUSH
60158: LD_VAR 0 2
60162: PUSH
60163: LD_INT 4
60165: MINUS
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: LIST
60174: PUSH
60175: LD_VAR 0 1
60179: PUSH
60180: LD_INT 3
60182: MINUS
60183: PUSH
60184: LD_VAR 0 2
60188: PUSH
60189: LD_INT 3
60191: MINUS
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: PUSH
60201: LD_VAR 0 1
60205: PUSH
60206: LD_INT 4
60208: MINUS
60209: PUSH
60210: LD_VAR 0 2
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: PUSH
60223: LD_VAR 0 1
60227: PUSH
60228: LD_VAR 0 2
60232: PUSH
60233: LD_INT 3
60235: PLUS
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: PUSH
60245: LD_VAR 0 1
60249: PUSH
60250: LD_INT 4
60252: PLUS
60253: PUSH
60254: LD_VAR 0 2
60258: PUSH
60259: LD_INT 4
60261: PLUS
60262: PUSH
60263: LD_INT 5
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: LIST
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// end ; 2 :
60278: GO 60837
60280: LD_INT 2
60282: DOUBLE
60283: EQUAL
60284: IFTRUE 60288
60286: GO 60417
60288: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60289: LD_ADDR_VAR 0 5
60293: PUSH
60294: LD_VAR 0 1
60298: PUSH
60299: LD_VAR 0 2
60303: PUSH
60304: LD_INT 3
60306: MINUS
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: LIST
60315: PUSH
60316: LD_VAR 0 1
60320: PUSH
60321: LD_INT 4
60323: PLUS
60324: PUSH
60325: LD_VAR 0 2
60329: PUSH
60330: LD_INT 4
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: PUSH
60338: LD_VAR 0 1
60342: PUSH
60343: LD_VAR 0 2
60347: PUSH
60348: LD_INT 4
60350: PLUS
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: PUSH
60360: LD_VAR 0 1
60364: PUSH
60365: LD_INT 3
60367: MINUS
60368: PUSH
60369: LD_VAR 0 2
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: PUSH
60382: LD_VAR 0 1
60386: PUSH
60387: LD_INT 4
60389: MINUS
60390: PUSH
60391: LD_VAR 0 2
60395: PUSH
60396: LD_INT 4
60398: MINUS
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: ST_TO_ADDR
// end ; 3 :
60415: GO 60837
60417: LD_INT 3
60419: DOUBLE
60420: EQUAL
60421: IFTRUE 60425
60423: GO 60558
60425: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60426: LD_ADDR_VAR 0 5
60430: PUSH
60431: LD_VAR 0 1
60435: PUSH
60436: LD_INT 3
60438: PLUS
60439: PUSH
60440: LD_VAR 0 2
60444: PUSH
60445: LD_INT 4
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: LIST
60452: PUSH
60453: LD_VAR 0 1
60457: PUSH
60458: LD_INT 4
60460: PLUS
60461: PUSH
60462: LD_VAR 0 2
60466: PUSH
60467: LD_INT 4
60469: PLUS
60470: PUSH
60471: LD_INT 5
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: PUSH
60479: LD_VAR 0 1
60483: PUSH
60484: LD_INT 4
60486: MINUS
60487: PUSH
60488: LD_VAR 0 2
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: PUSH
60501: LD_VAR 0 1
60505: PUSH
60506: LD_VAR 0 2
60510: PUSH
60511: LD_INT 4
60513: MINUS
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: LIST
60522: PUSH
60523: LD_VAR 0 1
60527: PUSH
60528: LD_INT 3
60530: MINUS
60531: PUSH
60532: LD_VAR 0 2
60536: PUSH
60537: LD_INT 3
60539: MINUS
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: ST_TO_ADDR
// end ; 4 :
60556: GO 60837
60558: LD_INT 4
60560: DOUBLE
60561: EQUAL
60562: IFTRUE 60566
60564: GO 60699
60566: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60567: LD_ADDR_VAR 0 5
60571: PUSH
60572: LD_VAR 0 1
60576: PUSH
60577: LD_VAR 0 2
60581: PUSH
60582: LD_INT 4
60584: PLUS
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: PUSH
60594: LD_VAR 0 1
60598: PUSH
60599: LD_INT 3
60601: PLUS
60602: PUSH
60603: LD_VAR 0 2
60607: PUSH
60608: LD_INT 3
60610: PLUS
60611: PUSH
60612: LD_INT 5
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: PUSH
60620: LD_VAR 0 1
60624: PUSH
60625: LD_INT 4
60627: PLUS
60628: PUSH
60629: LD_VAR 0 2
60633: PUSH
60634: LD_INT 4
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: LIST
60641: PUSH
60642: LD_VAR 0 1
60646: PUSH
60647: LD_VAR 0 2
60651: PUSH
60652: LD_INT 3
60654: MINUS
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: LIST
60663: PUSH
60664: LD_VAR 0 1
60668: PUSH
60669: LD_INT 4
60671: MINUS
60672: PUSH
60673: LD_VAR 0 2
60677: PUSH
60678: LD_INT 4
60680: MINUS
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: LIST
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: ST_TO_ADDR
// end ; 5 :
60697: GO 60837
60699: LD_INT 5
60701: DOUBLE
60702: EQUAL
60703: IFTRUE 60707
60705: GO 60836
60707: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60708: LD_ADDR_VAR 0 5
60712: PUSH
60713: LD_VAR 0 1
60717: PUSH
60718: LD_INT 4
60720: MINUS
60721: PUSH
60722: LD_VAR 0 2
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: LIST
60734: PUSH
60735: LD_VAR 0 1
60739: PUSH
60740: LD_VAR 0 2
60744: PUSH
60745: LD_INT 4
60747: MINUS
60748: PUSH
60749: LD_INT 3
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: LIST
60756: PUSH
60757: LD_VAR 0 1
60761: PUSH
60762: LD_INT 4
60764: PLUS
60765: PUSH
60766: LD_VAR 0 2
60770: PUSH
60771: LD_INT 4
60773: PLUS
60774: PUSH
60775: LD_INT 5
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: PUSH
60783: LD_VAR 0 1
60787: PUSH
60788: LD_INT 3
60790: PLUS
60791: PUSH
60792: LD_VAR 0 2
60796: PUSH
60797: LD_INT 4
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: PUSH
60805: LD_VAR 0 1
60809: PUSH
60810: LD_VAR 0 2
60814: PUSH
60815: LD_INT 3
60817: PLUS
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: LIST
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: ST_TO_ADDR
// end ; end ;
60834: GO 60837
60836: POP
// result := list ;
60837: LD_ADDR_VAR 0 4
60841: PUSH
60842: LD_VAR 0 5
60846: ST_TO_ADDR
// end ;
60847: LD_VAR 0 4
60851: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60852: LD_INT 0
60854: PPUSH
60855: PPUSH
60856: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60857: LD_VAR 0 1
60861: NOT
60862: PUSH
60863: LD_VAR 0 2
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 3
60876: PUSH
60877: LD_INT 4
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: IN
60886: NOT
60887: OR
60888: IFFALSE 60892
// exit ;
60890: GO 60975
// tmp := [ ] ;
60892: LD_ADDR_VAR 0 5
60896: PUSH
60897: EMPTY
60898: ST_TO_ADDR
// for i in units do
60899: LD_ADDR_VAR 0 4
60903: PUSH
60904: LD_VAR 0 1
60908: PUSH
60909: FOR_IN
60910: IFFALSE 60944
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60912: LD_ADDR_VAR 0 5
60916: PUSH
60917: LD_VAR 0 5
60921: PPUSH
60922: LD_VAR 0 4
60926: PPUSH
60927: LD_VAR 0 2
60931: PPUSH
60932: CALL_OW 259
60936: PPUSH
60937: CALL 62348 0 2
60941: ST_TO_ADDR
60942: GO 60909
60944: POP
60945: POP
// if not tmp then
60946: LD_VAR 0 5
60950: NOT
60951: IFFALSE 60955
// exit ;
60953: GO 60975
// result := SortListByListDesc ( units , tmp ) ;
60955: LD_ADDR_VAR 0 3
60959: PUSH
60960: LD_VAR 0 1
60964: PPUSH
60965: LD_VAR 0 5
60969: PPUSH
60970: CALL_OW 77
60974: ST_TO_ADDR
// end ;
60975: LD_VAR 0 3
60979: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60980: LD_INT 0
60982: PPUSH
60983: PPUSH
60984: PPUSH
// result := false ;
60985: LD_ADDR_VAR 0 3
60989: PUSH
60990: LD_INT 0
60992: ST_TO_ADDR
// if not building then
60993: LD_VAR 0 2
60997: NOT
60998: IFFALSE 61002
// exit ;
61000: GO 61140
// x := GetX ( building ) ;
61002: LD_ADDR_VAR 0 4
61006: PUSH
61007: LD_VAR 0 2
61011: PPUSH
61012: CALL_OW 250
61016: ST_TO_ADDR
// y := GetY ( building ) ;
61017: LD_ADDR_VAR 0 5
61021: PUSH
61022: LD_VAR 0 2
61026: PPUSH
61027: CALL_OW 251
61031: ST_TO_ADDR
// if not x or not y then
61032: LD_VAR 0 4
61036: NOT
61037: PUSH
61038: LD_VAR 0 5
61042: NOT
61043: OR
61044: IFFALSE 61048
// exit ;
61046: GO 61140
// if GetTaskList ( unit ) then
61048: LD_VAR 0 1
61052: PPUSH
61053: CALL_OW 437
61057: IFFALSE 61140
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61059: LD_STRING e
61061: PUSH
61062: LD_VAR 0 1
61066: PPUSH
61067: CALL_OW 437
61071: PUSH
61072: LD_INT 1
61074: ARRAY
61075: PUSH
61076: LD_INT 1
61078: ARRAY
61079: EQUAL
61080: PUSH
61081: LD_VAR 0 4
61085: PUSH
61086: LD_VAR 0 1
61090: PPUSH
61091: CALL_OW 437
61095: PUSH
61096: LD_INT 1
61098: ARRAY
61099: PUSH
61100: LD_INT 2
61102: ARRAY
61103: EQUAL
61104: AND
61105: PUSH
61106: LD_VAR 0 5
61110: PUSH
61111: LD_VAR 0 1
61115: PPUSH
61116: CALL_OW 437
61120: PUSH
61121: LD_INT 1
61123: ARRAY
61124: PUSH
61125: LD_INT 3
61127: ARRAY
61128: EQUAL
61129: AND
61130: IFFALSE 61140
// result := true end ;
61132: LD_ADDR_VAR 0 3
61136: PUSH
61137: LD_INT 1
61139: ST_TO_ADDR
// end ;
61140: LD_VAR 0 3
61144: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61145: LD_INT 0
61147: PPUSH
// result := false ;
61148: LD_ADDR_VAR 0 4
61152: PUSH
61153: LD_INT 0
61155: ST_TO_ADDR
// if GetTaskList ( unit ) then
61156: LD_VAR 0 1
61160: PPUSH
61161: CALL_OW 437
61165: IFFALSE 61248
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61167: LD_STRING M
61169: PUSH
61170: LD_VAR 0 1
61174: PPUSH
61175: CALL_OW 437
61179: PUSH
61180: LD_INT 1
61182: ARRAY
61183: PUSH
61184: LD_INT 1
61186: ARRAY
61187: EQUAL
61188: PUSH
61189: LD_VAR 0 2
61193: PUSH
61194: LD_VAR 0 1
61198: PPUSH
61199: CALL_OW 437
61203: PUSH
61204: LD_INT 1
61206: ARRAY
61207: PUSH
61208: LD_INT 2
61210: ARRAY
61211: EQUAL
61212: AND
61213: PUSH
61214: LD_VAR 0 3
61218: PUSH
61219: LD_VAR 0 1
61223: PPUSH
61224: CALL_OW 437
61228: PUSH
61229: LD_INT 1
61231: ARRAY
61232: PUSH
61233: LD_INT 3
61235: ARRAY
61236: EQUAL
61237: AND
61238: IFFALSE 61248
// result := true ;
61240: LD_ADDR_VAR 0 4
61244: PUSH
61245: LD_INT 1
61247: ST_TO_ADDR
// end ; end ;
61248: LD_VAR 0 4
61252: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61253: LD_INT 0
61255: PPUSH
61256: PPUSH
61257: PPUSH
61258: PPUSH
// if not unit or not area then
61259: LD_VAR 0 1
61263: NOT
61264: PUSH
61265: LD_VAR 0 2
61269: NOT
61270: OR
61271: IFFALSE 61275
// exit ;
61273: GO 61451
// tmp := AreaToList ( area , i ) ;
61275: LD_ADDR_VAR 0 6
61279: PUSH
61280: LD_VAR 0 2
61284: PPUSH
61285: LD_VAR 0 5
61289: PPUSH
61290: CALL_OW 517
61294: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61295: LD_ADDR_VAR 0 5
61299: PUSH
61300: DOUBLE
61301: LD_INT 1
61303: DEC
61304: ST_TO_ADDR
61305: LD_VAR 0 6
61309: PUSH
61310: LD_INT 1
61312: ARRAY
61313: PUSH
61314: FOR_TO
61315: IFFALSE 61449
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61317: LD_ADDR_VAR 0 7
61321: PUSH
61322: LD_VAR 0 6
61326: PUSH
61327: LD_INT 1
61329: ARRAY
61330: PUSH
61331: LD_VAR 0 5
61335: ARRAY
61336: PUSH
61337: LD_VAR 0 6
61341: PUSH
61342: LD_INT 2
61344: ARRAY
61345: PUSH
61346: LD_VAR 0 5
61350: ARRAY
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61356: LD_INT 92
61358: PUSH
61359: LD_VAR 0 7
61363: PUSH
61364: LD_INT 1
61366: ARRAY
61367: PUSH
61368: LD_VAR 0 7
61372: PUSH
61373: LD_INT 2
61375: ARRAY
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: PPUSH
61386: CALL_OW 69
61390: PUSH
61391: LD_INT 0
61393: EQUAL
61394: IFFALSE 61447
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61396: LD_VAR 0 1
61400: PPUSH
61401: LD_VAR 0 7
61405: PUSH
61406: LD_INT 1
61408: ARRAY
61409: PPUSH
61410: LD_VAR 0 7
61414: PUSH
61415: LD_INT 2
61417: ARRAY
61418: PPUSH
61419: LD_VAR 0 3
61423: PPUSH
61424: CALL_OW 48
// result := IsPlaced ( unit ) ;
61428: LD_ADDR_VAR 0 4
61432: PUSH
61433: LD_VAR 0 1
61437: PPUSH
61438: CALL_OW 305
61442: ST_TO_ADDR
// exit ;
61443: POP
61444: POP
61445: GO 61451
// end ; end ;
61447: GO 61314
61449: POP
61450: POP
// end ;
61451: LD_VAR 0 4
61455: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61456: LD_INT 0
61458: PPUSH
61459: PPUSH
61460: PPUSH
// if not side or side > 8 then
61461: LD_VAR 0 1
61465: NOT
61466: PUSH
61467: LD_VAR 0 1
61471: PUSH
61472: LD_INT 8
61474: GREATER
61475: OR
61476: IFFALSE 61480
// exit ;
61478: GO 61667
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61480: LD_ADDR_VAR 0 4
61484: PUSH
61485: LD_INT 22
61487: PUSH
61488: LD_VAR 0 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 21
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PPUSH
61511: CALL_OW 69
61515: ST_TO_ADDR
// if not tmp then
61516: LD_VAR 0 4
61520: NOT
61521: IFFALSE 61525
// exit ;
61523: GO 61667
// enable_addtolog := true ;
61525: LD_ADDR_OWVAR 81
61529: PUSH
61530: LD_INT 1
61532: ST_TO_ADDR
// AddToLog ( [ ) ;
61533: LD_STRING [
61535: PPUSH
61536: CALL_OW 561
// for i in tmp do
61540: LD_ADDR_VAR 0 3
61544: PUSH
61545: LD_VAR 0 4
61549: PUSH
61550: FOR_IN
61551: IFFALSE 61658
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61553: LD_STRING [
61555: PUSH
61556: LD_VAR 0 3
61560: PPUSH
61561: CALL_OW 266
61565: STR
61566: PUSH
61567: LD_STRING , 
61569: STR
61570: PUSH
61571: LD_VAR 0 3
61575: PPUSH
61576: CALL_OW 250
61580: STR
61581: PUSH
61582: LD_STRING , 
61584: STR
61585: PUSH
61586: LD_VAR 0 3
61590: PPUSH
61591: CALL_OW 251
61595: STR
61596: PUSH
61597: LD_STRING , 
61599: STR
61600: PUSH
61601: LD_VAR 0 3
61605: PPUSH
61606: CALL_OW 254
61610: STR
61611: PUSH
61612: LD_STRING , 
61614: STR
61615: PUSH
61616: LD_VAR 0 3
61620: PPUSH
61621: LD_INT 1
61623: PPUSH
61624: CALL_OW 268
61628: STR
61629: PUSH
61630: LD_STRING , 
61632: STR
61633: PUSH
61634: LD_VAR 0 3
61638: PPUSH
61639: LD_INT 2
61641: PPUSH
61642: CALL_OW 268
61646: STR
61647: PUSH
61648: LD_STRING ],
61650: STR
61651: PPUSH
61652: CALL_OW 561
// end ;
61656: GO 61550
61658: POP
61659: POP
// AddToLog ( ]; ) ;
61660: LD_STRING ];
61662: PPUSH
61663: CALL_OW 561
// end ;
61667: LD_VAR 0 2
61671: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61672: LD_INT 0
61674: PPUSH
61675: PPUSH
61676: PPUSH
61677: PPUSH
61678: PPUSH
// if not area or not rate or not max then
61679: LD_VAR 0 1
61683: NOT
61684: PUSH
61685: LD_VAR 0 2
61689: NOT
61690: OR
61691: PUSH
61692: LD_VAR 0 4
61696: NOT
61697: OR
61698: IFFALSE 61702
// exit ;
61700: GO 61891
// while 1 do
61702: LD_INT 1
61704: IFFALSE 61891
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61706: LD_ADDR_VAR 0 9
61710: PUSH
61711: LD_VAR 0 1
61715: PPUSH
61716: LD_INT 1
61718: PPUSH
61719: CALL_OW 287
61723: PUSH
61724: LD_INT 10
61726: MUL
61727: ST_TO_ADDR
// r := rate / 10 ;
61728: LD_ADDR_VAR 0 7
61732: PUSH
61733: LD_VAR 0 2
61737: PUSH
61738: LD_INT 10
61740: DIVREAL
61741: ST_TO_ADDR
// time := 1 1$00 ;
61742: LD_ADDR_VAR 0 8
61746: PUSH
61747: LD_INT 2100
61749: ST_TO_ADDR
// if amount < min then
61750: LD_VAR 0 9
61754: PUSH
61755: LD_VAR 0 3
61759: LESS
61760: IFFALSE 61778
// r := r * 2 else
61762: LD_ADDR_VAR 0 7
61766: PUSH
61767: LD_VAR 0 7
61771: PUSH
61772: LD_INT 2
61774: MUL
61775: ST_TO_ADDR
61776: GO 61804
// if amount > max then
61778: LD_VAR 0 9
61782: PUSH
61783: LD_VAR 0 4
61787: GREATER
61788: IFFALSE 61804
// r := r / 2 ;
61790: LD_ADDR_VAR 0 7
61794: PUSH
61795: LD_VAR 0 7
61799: PUSH
61800: LD_INT 2
61802: DIVREAL
61803: ST_TO_ADDR
// time := time / r ;
61804: LD_ADDR_VAR 0 8
61808: PUSH
61809: LD_VAR 0 8
61813: PUSH
61814: LD_VAR 0 7
61818: DIVREAL
61819: ST_TO_ADDR
// if time < 0 then
61820: LD_VAR 0 8
61824: PUSH
61825: LD_INT 0
61827: LESS
61828: IFFALSE 61845
// time := time * - 1 ;
61830: LD_ADDR_VAR 0 8
61834: PUSH
61835: LD_VAR 0 8
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: MUL
61844: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61845: LD_VAR 0 8
61849: PUSH
61850: LD_INT 35
61852: PPUSH
61853: LD_INT 875
61855: PPUSH
61856: CALL_OW 12
61860: PLUS
61861: PPUSH
61862: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61866: LD_INT 1
61868: PPUSH
61869: LD_INT 5
61871: PPUSH
61872: CALL_OW 12
61876: PPUSH
61877: LD_VAR 0 1
61881: PPUSH
61882: LD_INT 1
61884: PPUSH
61885: CALL_OW 55
// end ;
61889: GO 61702
// end ;
61891: LD_VAR 0 5
61895: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61896: LD_INT 0
61898: PPUSH
61899: PPUSH
61900: PPUSH
61901: PPUSH
61902: PPUSH
61903: PPUSH
61904: PPUSH
61905: PPUSH
// if not turrets or not factories then
61906: LD_VAR 0 1
61910: NOT
61911: PUSH
61912: LD_VAR 0 2
61916: NOT
61917: OR
61918: IFFALSE 61922
// exit ;
61920: GO 62229
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61922: LD_ADDR_VAR 0 10
61926: PUSH
61927: LD_INT 5
61929: PUSH
61930: LD_INT 6
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: LD_INT 5
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 24
61964: PUSH
61965: LD_INT 25
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 23
61974: PUSH
61975: LD_INT 27
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 42
61988: PUSH
61989: LD_INT 43
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 44
61998: PUSH
61999: LD_INT 46
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 45
62008: PUSH
62009: LD_INT 47
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: LIST
62025: ST_TO_ADDR
// result := [ ] ;
62026: LD_ADDR_VAR 0 3
62030: PUSH
62031: EMPTY
62032: ST_TO_ADDR
// for i in turrets do
62033: LD_ADDR_VAR 0 4
62037: PUSH
62038: LD_VAR 0 1
62042: PUSH
62043: FOR_IN
62044: IFFALSE 62227
// begin nat := GetNation ( i ) ;
62046: LD_ADDR_VAR 0 7
62050: PUSH
62051: LD_VAR 0 4
62055: PPUSH
62056: CALL_OW 248
62060: ST_TO_ADDR
// weapon := 0 ;
62061: LD_ADDR_VAR 0 8
62065: PUSH
62066: LD_INT 0
62068: ST_TO_ADDR
// if not nat then
62069: LD_VAR 0 7
62073: NOT
62074: IFFALSE 62078
// continue ;
62076: GO 62043
// for j in list [ nat ] do
62078: LD_ADDR_VAR 0 5
62082: PUSH
62083: LD_VAR 0 10
62087: PUSH
62088: LD_VAR 0 7
62092: ARRAY
62093: PUSH
62094: FOR_IN
62095: IFFALSE 62136
// if GetBWeapon ( i ) = j [ 1 ] then
62097: LD_VAR 0 4
62101: PPUSH
62102: CALL_OW 269
62106: PUSH
62107: LD_VAR 0 5
62111: PUSH
62112: LD_INT 1
62114: ARRAY
62115: EQUAL
62116: IFFALSE 62134
// begin weapon := j [ 2 ] ;
62118: LD_ADDR_VAR 0 8
62122: PUSH
62123: LD_VAR 0 5
62127: PUSH
62128: LD_INT 2
62130: ARRAY
62131: ST_TO_ADDR
// break ;
62132: GO 62136
// end ;
62134: GO 62094
62136: POP
62137: POP
// if not weapon then
62138: LD_VAR 0 8
62142: NOT
62143: IFFALSE 62147
// continue ;
62145: GO 62043
// for k in factories do
62147: LD_ADDR_VAR 0 6
62151: PUSH
62152: LD_VAR 0 2
62156: PUSH
62157: FOR_IN
62158: IFFALSE 62223
// begin weapons := AvailableWeaponList ( k ) ;
62160: LD_ADDR_VAR 0 9
62164: PUSH
62165: LD_VAR 0 6
62169: PPUSH
62170: CALL_OW 478
62174: ST_TO_ADDR
// if not weapons then
62175: LD_VAR 0 9
62179: NOT
62180: IFFALSE 62184
// continue ;
62182: GO 62157
// if weapon in weapons then
62184: LD_VAR 0 8
62188: PUSH
62189: LD_VAR 0 9
62193: IN
62194: IFFALSE 62221
// begin result := [ i , weapon ] ;
62196: LD_ADDR_VAR 0 3
62200: PUSH
62201: LD_VAR 0 4
62205: PUSH
62206: LD_VAR 0 8
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: ST_TO_ADDR
// exit ;
62215: POP
62216: POP
62217: POP
62218: POP
62219: GO 62229
// end ; end ;
62221: GO 62157
62223: POP
62224: POP
// end ;
62225: GO 62043
62227: POP
62228: POP
// end ;
62229: LD_VAR 0 3
62233: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62234: LD_INT 0
62236: PPUSH
// if not side or side > 8 then
62237: LD_VAR 0 3
62241: NOT
62242: PUSH
62243: LD_VAR 0 3
62247: PUSH
62248: LD_INT 8
62250: GREATER
62251: OR
62252: IFFALSE 62256
// exit ;
62254: GO 62315
// if not range then
62256: LD_VAR 0 4
62260: NOT
62261: IFFALSE 62272
// range := - 12 ;
62263: LD_ADDR_VAR 0 4
62267: PUSH
62268: LD_INT 12
62270: NEG
62271: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62272: LD_VAR 0 1
62276: PPUSH
62277: LD_VAR 0 2
62281: PPUSH
62282: LD_VAR 0 3
62286: PPUSH
62287: LD_VAR 0 4
62291: PPUSH
62292: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62296: LD_VAR 0 1
62300: PPUSH
62301: LD_VAR 0 2
62305: PPUSH
62306: LD_VAR 0 3
62310: PPUSH
62311: CALL_OW 331
// end ;
62315: LD_VAR 0 5
62319: RET
// export function Video ( mode ) ; begin
62320: LD_INT 0
62322: PPUSH
// ingame_video = mode ;
62323: LD_ADDR_OWVAR 52
62327: PUSH
62328: LD_VAR 0 1
62332: ST_TO_ADDR
// interface_hidden = mode ;
62333: LD_ADDR_OWVAR 54
62337: PUSH
62338: LD_VAR 0 1
62342: ST_TO_ADDR
// end ;
62343: LD_VAR 0 2
62347: RET
// export function Join ( array , element ) ; begin
62348: LD_INT 0
62350: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62351: LD_ADDR_VAR 0 3
62355: PUSH
62356: LD_VAR 0 1
62360: PPUSH
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 1
62368: PLUS
62369: PPUSH
62370: LD_VAR 0 2
62374: PPUSH
62375: CALL_OW 1
62379: ST_TO_ADDR
// end ;
62380: LD_VAR 0 3
62384: RET
// export function JoinUnion ( array , element ) ; begin
62385: LD_INT 0
62387: PPUSH
// result := array union element ;
62388: LD_ADDR_VAR 0 3
62392: PUSH
62393: LD_VAR 0 1
62397: PUSH
62398: LD_VAR 0 2
62402: UNION
62403: ST_TO_ADDR
// end ;
62404: LD_VAR 0 3
62408: RET
// export function GetBehemoths ( side ) ; begin
62409: LD_INT 0
62411: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62412: LD_ADDR_VAR 0 2
62416: PUSH
62417: LD_INT 22
62419: PUSH
62420: LD_VAR 0 1
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 31
62431: PUSH
62432: LD_INT 25
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PPUSH
62443: CALL_OW 69
62447: ST_TO_ADDR
// end ;
62448: LD_VAR 0 2
62452: RET
// export function Shuffle ( array ) ; var i , index ; begin
62453: LD_INT 0
62455: PPUSH
62456: PPUSH
62457: PPUSH
// result := [ ] ;
62458: LD_ADDR_VAR 0 2
62462: PUSH
62463: EMPTY
62464: ST_TO_ADDR
// if not array then
62465: LD_VAR 0 1
62469: NOT
62470: IFFALSE 62474
// exit ;
62472: GO 62573
// Randomize ;
62474: CALL_OW 10
// for i = array downto 1 do
62478: LD_ADDR_VAR 0 3
62482: PUSH
62483: DOUBLE
62484: LD_VAR 0 1
62488: INC
62489: ST_TO_ADDR
62490: LD_INT 1
62492: PUSH
62493: FOR_DOWNTO
62494: IFFALSE 62571
// begin index := rand ( 1 , array ) ;
62496: LD_ADDR_VAR 0 4
62500: PUSH
62501: LD_INT 1
62503: PPUSH
62504: LD_VAR 0 1
62508: PPUSH
62509: CALL_OW 12
62513: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62514: LD_ADDR_VAR 0 2
62518: PUSH
62519: LD_VAR 0 2
62523: PPUSH
62524: LD_VAR 0 2
62528: PUSH
62529: LD_INT 1
62531: PLUS
62532: PPUSH
62533: LD_VAR 0 1
62537: PUSH
62538: LD_VAR 0 4
62542: ARRAY
62543: PPUSH
62544: CALL_OW 2
62548: ST_TO_ADDR
// array := Delete ( array , index ) ;
62549: LD_ADDR_VAR 0 1
62553: PUSH
62554: LD_VAR 0 1
62558: PPUSH
62559: LD_VAR 0 4
62563: PPUSH
62564: CALL_OW 3
62568: ST_TO_ADDR
// end ;
62569: GO 62493
62571: POP
62572: POP
// end ;
62573: LD_VAR 0 2
62577: RET
// export function GetBaseMaterials ( base ) ; begin
62578: LD_INT 0
62580: PPUSH
// result := [ 0 , 0 , 0 ] ;
62581: LD_ADDR_VAR 0 2
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: LIST
62599: ST_TO_ADDR
// if not base then
62600: LD_VAR 0 1
62604: NOT
62605: IFFALSE 62609
// exit ;
62607: GO 62658
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62609: LD_ADDR_VAR 0 2
62613: PUSH
62614: LD_VAR 0 1
62618: PPUSH
62619: LD_INT 1
62621: PPUSH
62622: CALL_OW 275
62626: PUSH
62627: LD_VAR 0 1
62631: PPUSH
62632: LD_INT 2
62634: PPUSH
62635: CALL_OW 275
62639: PUSH
62640: LD_VAR 0 1
62644: PPUSH
62645: LD_INT 3
62647: PPUSH
62648: CALL_OW 275
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: ST_TO_ADDR
// end ;
62658: LD_VAR 0 2
62662: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62663: LD_INT 0
62665: PPUSH
62666: PPUSH
// result := array ;
62667: LD_ADDR_VAR 0 3
62671: PUSH
62672: LD_VAR 0 1
62676: ST_TO_ADDR
// if size >= result then
62677: LD_VAR 0 2
62681: PUSH
62682: LD_VAR 0 3
62686: GREATEREQUAL
62687: IFFALSE 62691
// exit ;
62689: GO 62741
// if size then
62691: LD_VAR 0 2
62695: IFFALSE 62741
// for i := array downto size do
62697: LD_ADDR_VAR 0 4
62701: PUSH
62702: DOUBLE
62703: LD_VAR 0 1
62707: INC
62708: ST_TO_ADDR
62709: LD_VAR 0 2
62713: PUSH
62714: FOR_DOWNTO
62715: IFFALSE 62739
// result := Delete ( result , result ) ;
62717: LD_ADDR_VAR 0 3
62721: PUSH
62722: LD_VAR 0 3
62726: PPUSH
62727: LD_VAR 0 3
62731: PPUSH
62732: CALL_OW 3
62736: ST_TO_ADDR
62737: GO 62714
62739: POP
62740: POP
// end ;
62741: LD_VAR 0 3
62745: RET
// export function ComExit ( unit ) ; var tmp ; begin
62746: LD_INT 0
62748: PPUSH
62749: PPUSH
// if not IsInUnit ( unit ) then
62750: LD_VAR 0 1
62754: PPUSH
62755: CALL_OW 310
62759: NOT
62760: IFFALSE 62764
// exit ;
62762: GO 62824
// tmp := IsInUnit ( unit ) ;
62764: LD_ADDR_VAR 0 3
62768: PUSH
62769: LD_VAR 0 1
62773: PPUSH
62774: CALL_OW 310
62778: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62779: LD_VAR 0 3
62783: PPUSH
62784: CALL_OW 247
62788: PUSH
62789: LD_INT 2
62791: EQUAL
62792: IFFALSE 62805
// ComExitVehicle ( unit ) else
62794: LD_VAR 0 1
62798: PPUSH
62799: CALL_OW 121
62803: GO 62814
// ComExitBuilding ( unit ) ;
62805: LD_VAR 0 1
62809: PPUSH
62810: CALL_OW 122
// result := tmp ;
62814: LD_ADDR_VAR 0 2
62818: PUSH
62819: LD_VAR 0 3
62823: ST_TO_ADDR
// end ;
62824: LD_VAR 0 2
62828: RET
// export function ComExitAll ( units ) ; var i ; begin
62829: LD_INT 0
62831: PPUSH
62832: PPUSH
// if not units then
62833: LD_VAR 0 1
62837: NOT
62838: IFFALSE 62842
// exit ;
62840: GO 62868
// for i in units do
62842: LD_ADDR_VAR 0 3
62846: PUSH
62847: LD_VAR 0 1
62851: PUSH
62852: FOR_IN
62853: IFFALSE 62866
// ComExit ( i ) ;
62855: LD_VAR 0 3
62859: PPUSH
62860: CALL 62746 0 1
62864: GO 62852
62866: POP
62867: POP
// end ;
62868: LD_VAR 0 2
62872: RET
// export function ResetHc ; begin
62873: LD_INT 0
62875: PPUSH
// InitHc ;
62876: CALL_OW 19
// hc_importance := 0 ;
62880: LD_ADDR_OWVAR 32
62884: PUSH
62885: LD_INT 0
62887: ST_TO_ADDR
// end ;
62888: LD_VAR 0 1
62892: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62893: LD_INT 0
62895: PPUSH
62896: PPUSH
62897: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62898: LD_ADDR_VAR 0 6
62902: PUSH
62903: LD_VAR 0 1
62907: PUSH
62908: LD_VAR 0 3
62912: PLUS
62913: PUSH
62914: LD_INT 2
62916: DIV
62917: ST_TO_ADDR
// if _x < 0 then
62918: LD_VAR 0 6
62922: PUSH
62923: LD_INT 0
62925: LESS
62926: IFFALSE 62943
// _x := _x * - 1 ;
62928: LD_ADDR_VAR 0 6
62932: PUSH
62933: LD_VAR 0 6
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: MUL
62942: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62943: LD_ADDR_VAR 0 7
62947: PUSH
62948: LD_VAR 0 2
62952: PUSH
62953: LD_VAR 0 4
62957: PLUS
62958: PUSH
62959: LD_INT 2
62961: DIV
62962: ST_TO_ADDR
// if _y < 0 then
62963: LD_VAR 0 7
62967: PUSH
62968: LD_INT 0
62970: LESS
62971: IFFALSE 62988
// _y := _y * - 1 ;
62973: LD_ADDR_VAR 0 7
62977: PUSH
62978: LD_VAR 0 7
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: MUL
62987: ST_TO_ADDR
// result := [ _x , _y ] ;
62988: LD_ADDR_VAR 0 5
62992: PUSH
62993: LD_VAR 0 6
62997: PUSH
62998: LD_VAR 0 7
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: ST_TO_ADDR
// end ;
63007: LD_VAR 0 5
63011: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63012: LD_INT 0
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
// task := GetTaskList ( unit ) ;
63018: LD_ADDR_VAR 0 7
63022: PUSH
63023: LD_VAR 0 1
63027: PPUSH
63028: CALL_OW 437
63032: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63033: LD_VAR 0 7
63037: NOT
63038: PUSH
63039: LD_VAR 0 1
63043: PPUSH
63044: LD_VAR 0 2
63048: PPUSH
63049: CALL_OW 308
63053: NOT
63054: AND
63055: IFFALSE 63059
// exit ;
63057: GO 63177
// if IsInArea ( unit , area ) then
63059: LD_VAR 0 1
63063: PPUSH
63064: LD_VAR 0 2
63068: PPUSH
63069: CALL_OW 308
63073: IFFALSE 63091
// begin ComMoveToArea ( unit , goAway ) ;
63075: LD_VAR 0 1
63079: PPUSH
63080: LD_VAR 0 3
63084: PPUSH
63085: CALL_OW 113
// exit ;
63089: GO 63177
// end ; if task [ 1 ] [ 1 ] <> M then
63091: LD_VAR 0 7
63095: PUSH
63096: LD_INT 1
63098: ARRAY
63099: PUSH
63100: LD_INT 1
63102: ARRAY
63103: PUSH
63104: LD_STRING M
63106: NONEQUAL
63107: IFFALSE 63111
// exit ;
63109: GO 63177
// x := task [ 1 ] [ 2 ] ;
63111: LD_ADDR_VAR 0 5
63115: PUSH
63116: LD_VAR 0 7
63120: PUSH
63121: LD_INT 1
63123: ARRAY
63124: PUSH
63125: LD_INT 2
63127: ARRAY
63128: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63129: LD_ADDR_VAR 0 6
63133: PUSH
63134: LD_VAR 0 7
63138: PUSH
63139: LD_INT 1
63141: ARRAY
63142: PUSH
63143: LD_INT 3
63145: ARRAY
63146: ST_TO_ADDR
// if InArea ( x , y , area ) then
63147: LD_VAR 0 5
63151: PPUSH
63152: LD_VAR 0 6
63156: PPUSH
63157: LD_VAR 0 2
63161: PPUSH
63162: CALL_OW 309
63166: IFFALSE 63177
// ComStop ( unit ) ;
63168: LD_VAR 0 1
63172: PPUSH
63173: CALL_OW 141
// end ;
63177: LD_VAR 0 4
63181: RET
// export function Abs ( value ) ; begin
63182: LD_INT 0
63184: PPUSH
// result := value ;
63185: LD_ADDR_VAR 0 2
63189: PUSH
63190: LD_VAR 0 1
63194: ST_TO_ADDR
// if value < 0 then
63195: LD_VAR 0 1
63199: PUSH
63200: LD_INT 0
63202: LESS
63203: IFFALSE 63220
// result := value * - 1 ;
63205: LD_ADDR_VAR 0 2
63209: PUSH
63210: LD_VAR 0 1
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: MUL
63219: ST_TO_ADDR
// end ;
63220: LD_VAR 0 2
63224: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63225: LD_INT 0
63227: PPUSH
63228: PPUSH
63229: PPUSH
63230: PPUSH
63231: PPUSH
63232: PPUSH
63233: PPUSH
63234: PPUSH
// if not unit or not building then
63235: LD_VAR 0 1
63239: NOT
63240: PUSH
63241: LD_VAR 0 2
63245: NOT
63246: OR
63247: IFFALSE 63251
// exit ;
63249: GO 63477
// x := GetX ( building ) ;
63251: LD_ADDR_VAR 0 4
63255: PUSH
63256: LD_VAR 0 2
63260: PPUSH
63261: CALL_OW 250
63265: ST_TO_ADDR
// y := GetY ( building ) ;
63266: LD_ADDR_VAR 0 6
63270: PUSH
63271: LD_VAR 0 2
63275: PPUSH
63276: CALL_OW 251
63280: ST_TO_ADDR
// d := GetDir ( building ) ;
63281: LD_ADDR_VAR 0 8
63285: PUSH
63286: LD_VAR 0 2
63290: PPUSH
63291: CALL_OW 254
63295: ST_TO_ADDR
// r := 4 ;
63296: LD_ADDR_VAR 0 9
63300: PUSH
63301: LD_INT 4
63303: ST_TO_ADDR
// for i := 1 to 5 do
63304: LD_ADDR_VAR 0 10
63308: PUSH
63309: DOUBLE
63310: LD_INT 1
63312: DEC
63313: ST_TO_ADDR
63314: LD_INT 5
63316: PUSH
63317: FOR_TO
63318: IFFALSE 63475
// begin _x := ShiftX ( x , d , r + i ) ;
63320: LD_ADDR_VAR 0 5
63324: PUSH
63325: LD_VAR 0 4
63329: PPUSH
63330: LD_VAR 0 8
63334: PPUSH
63335: LD_VAR 0 9
63339: PUSH
63340: LD_VAR 0 10
63344: PLUS
63345: PPUSH
63346: CALL_OW 272
63350: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63351: LD_ADDR_VAR 0 7
63355: PUSH
63356: LD_VAR 0 6
63360: PPUSH
63361: LD_VAR 0 8
63365: PPUSH
63366: LD_VAR 0 9
63370: PUSH
63371: LD_VAR 0 10
63375: PLUS
63376: PPUSH
63377: CALL_OW 273
63381: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63382: LD_VAR 0 5
63386: PPUSH
63387: LD_VAR 0 7
63391: PPUSH
63392: CALL_OW 488
63396: PUSH
63397: LD_VAR 0 5
63401: PPUSH
63402: LD_VAR 0 7
63406: PPUSH
63407: CALL_OW 428
63411: PPUSH
63412: CALL_OW 247
63416: PUSH
63417: LD_INT 3
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: IN
63427: NOT
63428: AND
63429: IFFALSE 63473
// begin ComMoveXY ( unit , _x , _y ) ;
63431: LD_VAR 0 1
63435: PPUSH
63436: LD_VAR 0 5
63440: PPUSH
63441: LD_VAR 0 7
63445: PPUSH
63446: CALL_OW 111
// result := [ _x , _y ] ;
63450: LD_ADDR_VAR 0 3
63454: PUSH
63455: LD_VAR 0 5
63459: PUSH
63460: LD_VAR 0 7
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: ST_TO_ADDR
// exit ;
63469: POP
63470: POP
63471: GO 63477
// end ; end ;
63473: GO 63317
63475: POP
63476: POP
// end ;
63477: LD_VAR 0 3
63481: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63482: LD_INT 0
63484: PPUSH
63485: PPUSH
63486: PPUSH
// result := 0 ;
63487: LD_ADDR_VAR 0 3
63491: PUSH
63492: LD_INT 0
63494: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63495: LD_VAR 0 1
63499: PUSH
63500: LD_INT 0
63502: LESS
63503: PUSH
63504: LD_VAR 0 1
63508: PUSH
63509: LD_INT 8
63511: GREATER
63512: OR
63513: PUSH
63514: LD_VAR 0 2
63518: PUSH
63519: LD_INT 0
63521: LESS
63522: OR
63523: PUSH
63524: LD_VAR 0 2
63528: PUSH
63529: LD_INT 8
63531: GREATER
63532: OR
63533: IFFALSE 63537
// exit ;
63535: GO 63612
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63537: LD_ADDR_VAR 0 4
63541: PUSH
63542: LD_INT 22
63544: PUSH
63545: LD_VAR 0 2
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PPUSH
63554: CALL_OW 69
63558: PUSH
63559: FOR_IN
63560: IFFALSE 63610
// begin un := UnitShoot ( i ) ;
63562: LD_ADDR_VAR 0 5
63566: PUSH
63567: LD_VAR 0 4
63571: PPUSH
63572: CALL_OW 504
63576: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63577: LD_VAR 0 5
63581: PPUSH
63582: CALL_OW 255
63586: PUSH
63587: LD_VAR 0 1
63591: EQUAL
63592: IFFALSE 63608
// begin result := un ;
63594: LD_ADDR_VAR 0 3
63598: PUSH
63599: LD_VAR 0 5
63603: ST_TO_ADDR
// exit ;
63604: POP
63605: POP
63606: GO 63612
// end ; end ;
63608: GO 63559
63610: POP
63611: POP
// end ;
63612: LD_VAR 0 3
63616: RET
// export function GetCargoBay ( units ) ; begin
63617: LD_INT 0
63619: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63620: LD_ADDR_VAR 0 2
63624: PUSH
63625: LD_VAR 0 1
63629: PPUSH
63630: LD_INT 2
63632: PUSH
63633: LD_INT 34
63635: PUSH
63636: LD_INT 12
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 34
63645: PUSH
63646: LD_INT 51
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 34
63655: PUSH
63656: LD_INT 32
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 34
63665: PUSH
63666: LD_INT 89
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: PPUSH
63680: CALL_OW 72
63684: ST_TO_ADDR
// end ;
63685: LD_VAR 0 2
63689: RET
// export function Negate ( value ) ; begin
63690: LD_INT 0
63692: PPUSH
// result := not value ;
63693: LD_ADDR_VAR 0 2
63697: PUSH
63698: LD_VAR 0 1
63702: NOT
63703: ST_TO_ADDR
// end ;
63704: LD_VAR 0 2
63708: RET
// export function Inc ( value ) ; begin
63709: LD_INT 0
63711: PPUSH
// result := value + 1 ;
63712: LD_ADDR_VAR 0 2
63716: PUSH
63717: LD_VAR 0 1
63721: PUSH
63722: LD_INT 1
63724: PLUS
63725: ST_TO_ADDR
// end ;
63726: LD_VAR 0 2
63730: RET
// export function Dec ( value ) ; begin
63731: LD_INT 0
63733: PPUSH
// result := value - 1 ;
63734: LD_ADDR_VAR 0 2
63738: PUSH
63739: LD_VAR 0 1
63743: PUSH
63744: LD_INT 1
63746: MINUS
63747: ST_TO_ADDR
// end ;
63748: LD_VAR 0 2
63752: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63753: LD_INT 0
63755: PPUSH
63756: PPUSH
63757: PPUSH
63758: PPUSH
63759: PPUSH
63760: PPUSH
63761: PPUSH
63762: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63763: LD_VAR 0 1
63767: PPUSH
63768: LD_VAR 0 2
63772: PPUSH
63773: CALL_OW 488
63777: NOT
63778: PUSH
63779: LD_VAR 0 3
63783: PPUSH
63784: LD_VAR 0 4
63788: PPUSH
63789: CALL_OW 488
63793: NOT
63794: OR
63795: IFFALSE 63808
// begin result := - 1 ;
63797: LD_ADDR_VAR 0 5
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: ST_TO_ADDR
// exit ;
63806: GO 64043
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63808: LD_ADDR_VAR 0 12
63812: PUSH
63813: LD_VAR 0 1
63817: PPUSH
63818: LD_VAR 0 2
63822: PPUSH
63823: LD_VAR 0 3
63827: PPUSH
63828: LD_VAR 0 4
63832: PPUSH
63833: CALL 62893 0 4
63837: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63838: LD_ADDR_VAR 0 11
63842: PUSH
63843: LD_VAR 0 1
63847: PPUSH
63848: LD_VAR 0 2
63852: PPUSH
63853: LD_VAR 0 12
63857: PUSH
63858: LD_INT 1
63860: ARRAY
63861: PPUSH
63862: LD_VAR 0 12
63866: PUSH
63867: LD_INT 2
63869: ARRAY
63870: PPUSH
63871: CALL_OW 298
63875: ST_TO_ADDR
// distance := 9999 ;
63876: LD_ADDR_VAR 0 10
63880: PUSH
63881: LD_INT 9999
63883: ST_TO_ADDR
// for i := 0 to 5 do
63884: LD_ADDR_VAR 0 6
63888: PUSH
63889: DOUBLE
63890: LD_INT 0
63892: DEC
63893: ST_TO_ADDR
63894: LD_INT 5
63896: PUSH
63897: FOR_TO
63898: IFFALSE 64041
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63900: LD_ADDR_VAR 0 7
63904: PUSH
63905: LD_VAR 0 1
63909: PPUSH
63910: LD_VAR 0 6
63914: PPUSH
63915: LD_VAR 0 11
63919: PPUSH
63920: CALL_OW 272
63924: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63925: LD_ADDR_VAR 0 8
63929: PUSH
63930: LD_VAR 0 2
63934: PPUSH
63935: LD_VAR 0 6
63939: PPUSH
63940: LD_VAR 0 11
63944: PPUSH
63945: CALL_OW 273
63949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63950: LD_VAR 0 7
63954: PPUSH
63955: LD_VAR 0 8
63959: PPUSH
63960: CALL_OW 488
63964: NOT
63965: IFFALSE 63969
// continue ;
63967: GO 63897
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63969: LD_ADDR_VAR 0 9
63973: PUSH
63974: LD_VAR 0 12
63978: PUSH
63979: LD_INT 1
63981: ARRAY
63982: PPUSH
63983: LD_VAR 0 12
63987: PUSH
63988: LD_INT 2
63990: ARRAY
63991: PPUSH
63992: LD_VAR 0 7
63996: PPUSH
63997: LD_VAR 0 8
64001: PPUSH
64002: CALL_OW 298
64006: ST_TO_ADDR
// if tmp < distance then
64007: LD_VAR 0 9
64011: PUSH
64012: LD_VAR 0 10
64016: LESS
64017: IFFALSE 64039
// begin result := i ;
64019: LD_ADDR_VAR 0 5
64023: PUSH
64024: LD_VAR 0 6
64028: ST_TO_ADDR
// distance := tmp ;
64029: LD_ADDR_VAR 0 10
64033: PUSH
64034: LD_VAR 0 9
64038: ST_TO_ADDR
// end ; end ;
64039: GO 63897
64041: POP
64042: POP
// end ;
64043: LD_VAR 0 5
64047: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64048: LD_INT 0
64050: PPUSH
64051: PPUSH
// if not driver or not IsInUnit ( driver ) then
64052: LD_VAR 0 1
64056: NOT
64057: PUSH
64058: LD_VAR 0 1
64062: PPUSH
64063: CALL_OW 310
64067: NOT
64068: OR
64069: IFFALSE 64073
// exit ;
64071: GO 64163
// vehicle := IsInUnit ( driver ) ;
64073: LD_ADDR_VAR 0 3
64077: PUSH
64078: LD_VAR 0 1
64082: PPUSH
64083: CALL_OW 310
64087: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64088: LD_VAR 0 1
64092: PPUSH
64093: LD_STRING \
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: PUSH
64123: LD_STRING E
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: LD_VAR 0 3
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PPUSH
64159: CALL_OW 446
// end ;
64163: LD_VAR 0 2
64167: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64168: LD_INT 0
64170: PPUSH
64171: PPUSH
// if not driver or not IsInUnit ( driver ) then
64172: LD_VAR 0 1
64176: NOT
64177: PUSH
64178: LD_VAR 0 1
64182: PPUSH
64183: CALL_OW 310
64187: NOT
64188: OR
64189: IFFALSE 64193
// exit ;
64191: GO 64283
// vehicle := IsInUnit ( driver ) ;
64193: LD_ADDR_VAR 0 3
64197: PUSH
64198: LD_VAR 0 1
64202: PPUSH
64203: CALL_OW 310
64207: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64208: LD_VAR 0 1
64212: PPUSH
64213: LD_STRING \
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: PUSH
64243: LD_STRING E
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_VAR 0 3
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PPUSH
64279: CALL_OW 447
// end ;
64283: LD_VAR 0 2
64287: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64288: LD_INT 0
64290: PPUSH
64291: PPUSH
64292: PPUSH
// tmp := [ ] ;
64293: LD_ADDR_VAR 0 5
64297: PUSH
64298: EMPTY
64299: ST_TO_ADDR
// for i in units do
64300: LD_ADDR_VAR 0 4
64304: PUSH
64305: LD_VAR 0 1
64309: PUSH
64310: FOR_IN
64311: IFFALSE 64349
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64313: LD_ADDR_VAR 0 5
64317: PUSH
64318: LD_VAR 0 5
64322: PPUSH
64323: LD_VAR 0 5
64327: PUSH
64328: LD_INT 1
64330: PLUS
64331: PPUSH
64332: LD_VAR 0 4
64336: PPUSH
64337: CALL_OW 256
64341: PPUSH
64342: CALL_OW 2
64346: ST_TO_ADDR
64347: GO 64310
64349: POP
64350: POP
// if not tmp then
64351: LD_VAR 0 5
64355: NOT
64356: IFFALSE 64360
// exit ;
64358: GO 64408
// if asc then
64360: LD_VAR 0 2
64364: IFFALSE 64388
// result := SortListByListAsc ( units , tmp ) else
64366: LD_ADDR_VAR 0 3
64370: PUSH
64371: LD_VAR 0 1
64375: PPUSH
64376: LD_VAR 0 5
64380: PPUSH
64381: CALL_OW 76
64385: ST_TO_ADDR
64386: GO 64408
// result := SortListByListDesc ( units , tmp ) ;
64388: LD_ADDR_VAR 0 3
64392: PUSH
64393: LD_VAR 0 1
64397: PPUSH
64398: LD_VAR 0 5
64402: PPUSH
64403: CALL_OW 77
64407: ST_TO_ADDR
// end ;
64408: LD_VAR 0 3
64412: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64413: LD_INT 0
64415: PPUSH
64416: PPUSH
// task := GetTaskList ( mech ) ;
64417: LD_ADDR_VAR 0 4
64421: PUSH
64422: LD_VAR 0 1
64426: PPUSH
64427: CALL_OW 437
64431: ST_TO_ADDR
// if not task then
64432: LD_VAR 0 4
64436: NOT
64437: IFFALSE 64441
// exit ;
64439: GO 64483
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64441: LD_ADDR_VAR 0 3
64445: PUSH
64446: LD_VAR 0 4
64450: PUSH
64451: LD_INT 1
64453: ARRAY
64454: PUSH
64455: LD_INT 1
64457: ARRAY
64458: PUSH
64459: LD_STRING r
64461: EQUAL
64462: PUSH
64463: LD_VAR 0 4
64467: PUSH
64468: LD_INT 1
64470: ARRAY
64471: PUSH
64472: LD_INT 4
64474: ARRAY
64475: PUSH
64476: LD_VAR 0 2
64480: EQUAL
64481: AND
64482: ST_TO_ADDR
// end ;
64483: LD_VAR 0 3
64487: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64488: LD_INT 0
64490: PPUSH
// SetDir ( unit , d ) ;
64491: LD_VAR 0 1
64495: PPUSH
64496: LD_VAR 0 4
64500: PPUSH
64501: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64505: LD_VAR 0 1
64509: PPUSH
64510: LD_VAR 0 2
64514: PPUSH
64515: LD_VAR 0 3
64519: PPUSH
64520: LD_VAR 0 5
64524: PPUSH
64525: CALL_OW 48
// end ;
64529: LD_VAR 0 6
64533: RET
// export function ToNaturalNumber ( number ) ; begin
64534: LD_INT 0
64536: PPUSH
// result := number div 1 ;
64537: LD_ADDR_VAR 0 2
64541: PUSH
64542: LD_VAR 0 1
64546: PUSH
64547: LD_INT 1
64549: DIV
64550: ST_TO_ADDR
// if number < 0 then
64551: LD_VAR 0 1
64555: PUSH
64556: LD_INT 0
64558: LESS
64559: IFFALSE 64569
// result := 0 ;
64561: LD_ADDR_VAR 0 2
64565: PUSH
64566: LD_INT 0
64568: ST_TO_ADDR
// end ;
64569: LD_VAR 0 2
64573: RET
// export function SortByClass ( units , class ) ; var un ; begin
64574: LD_INT 0
64576: PPUSH
64577: PPUSH
// if not units or not class then
64578: LD_VAR 0 1
64582: NOT
64583: PUSH
64584: LD_VAR 0 2
64588: NOT
64589: OR
64590: IFFALSE 64594
// exit ;
64592: GO 64689
// result := [ ] ;
64594: LD_ADDR_VAR 0 3
64598: PUSH
64599: EMPTY
64600: ST_TO_ADDR
// for un in units do
64601: LD_ADDR_VAR 0 4
64605: PUSH
64606: LD_VAR 0 1
64610: PUSH
64611: FOR_IN
64612: IFFALSE 64687
// if GetClass ( un ) = class then
64614: LD_VAR 0 4
64618: PPUSH
64619: CALL_OW 257
64623: PUSH
64624: LD_VAR 0 2
64628: EQUAL
64629: IFFALSE 64656
// result := Insert ( result , 1 , un ) else
64631: LD_ADDR_VAR 0 3
64635: PUSH
64636: LD_VAR 0 3
64640: PPUSH
64641: LD_INT 1
64643: PPUSH
64644: LD_VAR 0 4
64648: PPUSH
64649: CALL_OW 2
64653: ST_TO_ADDR
64654: GO 64685
// result := Replace ( result , result + 1 , un ) ;
64656: LD_ADDR_VAR 0 3
64660: PUSH
64661: LD_VAR 0 3
64665: PPUSH
64666: LD_VAR 0 3
64670: PUSH
64671: LD_INT 1
64673: PLUS
64674: PPUSH
64675: LD_VAR 0 4
64679: PPUSH
64680: CALL_OW 1
64684: ST_TO_ADDR
64685: GO 64611
64687: POP
64688: POP
// end ;
64689: LD_VAR 0 3
64693: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64694: LD_INT 0
64696: PPUSH
64697: PPUSH
64698: PPUSH
64699: PPUSH
64700: PPUSH
64701: PPUSH
64702: PPUSH
// result := [ ] ;
64703: LD_ADDR_VAR 0 4
64707: PUSH
64708: EMPTY
64709: ST_TO_ADDR
// if x - r < 0 then
64710: LD_VAR 0 1
64714: PUSH
64715: LD_VAR 0 3
64719: MINUS
64720: PUSH
64721: LD_INT 0
64723: LESS
64724: IFFALSE 64736
// min_x := 0 else
64726: LD_ADDR_VAR 0 8
64730: PUSH
64731: LD_INT 0
64733: ST_TO_ADDR
64734: GO 64752
// min_x := x - r ;
64736: LD_ADDR_VAR 0 8
64740: PUSH
64741: LD_VAR 0 1
64745: PUSH
64746: LD_VAR 0 3
64750: MINUS
64751: ST_TO_ADDR
// if y - r < 0 then
64752: LD_VAR 0 2
64756: PUSH
64757: LD_VAR 0 3
64761: MINUS
64762: PUSH
64763: LD_INT 0
64765: LESS
64766: IFFALSE 64778
// min_y := 0 else
64768: LD_ADDR_VAR 0 7
64772: PUSH
64773: LD_INT 0
64775: ST_TO_ADDR
64776: GO 64794
// min_y := y - r ;
64778: LD_ADDR_VAR 0 7
64782: PUSH
64783: LD_VAR 0 2
64787: PUSH
64788: LD_VAR 0 3
64792: MINUS
64793: ST_TO_ADDR
// max_x := x + r ;
64794: LD_ADDR_VAR 0 9
64798: PUSH
64799: LD_VAR 0 1
64803: PUSH
64804: LD_VAR 0 3
64808: PLUS
64809: ST_TO_ADDR
// max_y := y + r ;
64810: LD_ADDR_VAR 0 10
64814: PUSH
64815: LD_VAR 0 2
64819: PUSH
64820: LD_VAR 0 3
64824: PLUS
64825: ST_TO_ADDR
// for _x = min_x to max_x do
64826: LD_ADDR_VAR 0 5
64830: PUSH
64831: DOUBLE
64832: LD_VAR 0 8
64836: DEC
64837: ST_TO_ADDR
64838: LD_VAR 0 9
64842: PUSH
64843: FOR_TO
64844: IFFALSE 64945
// for _y = min_y to max_y do
64846: LD_ADDR_VAR 0 6
64850: PUSH
64851: DOUBLE
64852: LD_VAR 0 7
64856: DEC
64857: ST_TO_ADDR
64858: LD_VAR 0 10
64862: PUSH
64863: FOR_TO
64864: IFFALSE 64941
// begin if not ValidHex ( _x , _y ) then
64866: LD_VAR 0 5
64870: PPUSH
64871: LD_VAR 0 6
64875: PPUSH
64876: CALL_OW 488
64880: NOT
64881: IFFALSE 64885
// continue ;
64883: GO 64863
// if GetResourceTypeXY ( _x , _y ) then
64885: LD_VAR 0 5
64889: PPUSH
64890: LD_VAR 0 6
64894: PPUSH
64895: CALL_OW 283
64899: IFFALSE 64939
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64901: LD_ADDR_VAR 0 4
64905: PUSH
64906: LD_VAR 0 4
64910: PPUSH
64911: LD_VAR 0 4
64915: PUSH
64916: LD_INT 1
64918: PLUS
64919: PPUSH
64920: LD_VAR 0 5
64924: PUSH
64925: LD_VAR 0 6
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PPUSH
64934: CALL_OW 1
64938: ST_TO_ADDR
// end ;
64939: GO 64863
64941: POP
64942: POP
64943: GO 64843
64945: POP
64946: POP
// end ;
64947: LD_VAR 0 4
64951: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64952: LD_INT 0
64954: PPUSH
64955: PPUSH
64956: PPUSH
64957: PPUSH
64958: PPUSH
64959: PPUSH
64960: PPUSH
64961: PPUSH
// if not units then
64962: LD_VAR 0 1
64966: NOT
64967: IFFALSE 64971
// exit ;
64969: GO 65495
// result := UnitFilter ( units , [ f_ok ] ) ;
64971: LD_ADDR_VAR 0 3
64975: PUSH
64976: LD_VAR 0 1
64980: PPUSH
64981: LD_INT 50
64983: PUSH
64984: EMPTY
64985: LIST
64986: PPUSH
64987: CALL_OW 72
64991: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64992: LD_ADDR_VAR 0 8
64996: PUSH
64997: LD_VAR 0 1
65001: PUSH
65002: LD_INT 1
65004: ARRAY
65005: PPUSH
65006: CALL_OW 255
65010: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65011: LD_ADDR_VAR 0 10
65015: PUSH
65016: LD_INT 29
65018: PUSH
65019: LD_INT 91
65021: PUSH
65022: LD_INT 49
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: ST_TO_ADDR
// if not result then
65030: LD_VAR 0 3
65034: NOT
65035: IFFALSE 65039
// exit ;
65037: GO 65495
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65039: LD_ADDR_VAR 0 5
65043: PUSH
65044: LD_INT 81
65046: PUSH
65047: LD_VAR 0 8
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PPUSH
65056: CALL_OW 69
65060: ST_TO_ADDR
// for i in result do
65061: LD_ADDR_VAR 0 4
65065: PUSH
65066: LD_VAR 0 3
65070: PUSH
65071: FOR_IN
65072: IFFALSE 65493
// begin tag := GetTag ( i ) + 1 ;
65074: LD_ADDR_VAR 0 9
65078: PUSH
65079: LD_VAR 0 4
65083: PPUSH
65084: CALL_OW 110
65088: PUSH
65089: LD_INT 1
65091: PLUS
65092: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65093: LD_ADDR_VAR 0 7
65097: PUSH
65098: LD_VAR 0 4
65102: PPUSH
65103: CALL_OW 250
65107: PPUSH
65108: LD_VAR 0 4
65112: PPUSH
65113: CALL_OW 251
65117: PPUSH
65118: LD_INT 6
65120: PPUSH
65121: CALL 64694 0 3
65125: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65126: LD_VAR 0 4
65130: PPUSH
65131: CALL_OW 247
65135: PUSH
65136: LD_INT 2
65138: EQUAL
65139: PUSH
65140: LD_VAR 0 7
65144: AND
65145: PUSH
65146: LD_VAR 0 4
65150: PPUSH
65151: CALL_OW 264
65155: PUSH
65156: LD_VAR 0 10
65160: IN
65161: NOT
65162: AND
65163: IFFALSE 65202
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65165: LD_VAR 0 4
65169: PPUSH
65170: LD_VAR 0 7
65174: PUSH
65175: LD_INT 1
65177: ARRAY
65178: PUSH
65179: LD_INT 1
65181: ARRAY
65182: PPUSH
65183: LD_VAR 0 7
65187: PUSH
65188: LD_INT 1
65190: ARRAY
65191: PUSH
65192: LD_INT 2
65194: ARRAY
65195: PPUSH
65196: CALL_OW 116
65200: GO 65491
// if path > tag then
65202: LD_VAR 0 2
65206: PUSH
65207: LD_VAR 0 9
65211: GREATER
65212: IFFALSE 65420
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65214: LD_ADDR_VAR 0 6
65218: PUSH
65219: LD_VAR 0 5
65223: PPUSH
65224: LD_INT 91
65226: PUSH
65227: LD_VAR 0 4
65231: PUSH
65232: LD_INT 8
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: LIST
65239: PPUSH
65240: CALL_OW 72
65244: ST_TO_ADDR
// if nearEnemy then
65245: LD_VAR 0 6
65249: IFFALSE 65318
// begin if GetWeapon ( i ) = ru_time_lapser then
65251: LD_VAR 0 4
65255: PPUSH
65256: CALL_OW 264
65260: PUSH
65261: LD_INT 49
65263: EQUAL
65264: IFFALSE 65292
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65266: LD_VAR 0 4
65270: PPUSH
65271: LD_VAR 0 6
65275: PPUSH
65276: LD_VAR 0 4
65280: PPUSH
65281: CALL_OW 74
65285: PPUSH
65286: CALL_OW 112
65290: GO 65316
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65292: LD_VAR 0 4
65296: PPUSH
65297: LD_VAR 0 6
65301: PPUSH
65302: LD_VAR 0 4
65306: PPUSH
65307: CALL_OW 74
65311: PPUSH
65312: CALL 66420 0 2
// end else
65316: GO 65418
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65318: LD_VAR 0 4
65322: PPUSH
65323: LD_VAR 0 2
65327: PUSH
65328: LD_VAR 0 9
65332: ARRAY
65333: PUSH
65334: LD_INT 1
65336: ARRAY
65337: PPUSH
65338: LD_VAR 0 2
65342: PUSH
65343: LD_VAR 0 9
65347: ARRAY
65348: PUSH
65349: LD_INT 2
65351: ARRAY
65352: PPUSH
65353: CALL_OW 297
65357: PUSH
65358: LD_INT 6
65360: GREATER
65361: IFFALSE 65404
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65363: LD_VAR 0 4
65367: PPUSH
65368: LD_VAR 0 2
65372: PUSH
65373: LD_VAR 0 9
65377: ARRAY
65378: PUSH
65379: LD_INT 1
65381: ARRAY
65382: PPUSH
65383: LD_VAR 0 2
65387: PUSH
65388: LD_VAR 0 9
65392: ARRAY
65393: PUSH
65394: LD_INT 2
65396: ARRAY
65397: PPUSH
65398: CALL_OW 114
65402: GO 65418
// SetTag ( i , tag ) ;
65404: LD_VAR 0 4
65408: PPUSH
65409: LD_VAR 0 9
65413: PPUSH
65414: CALL_OW 109
// end else
65418: GO 65491
// if enemy then
65420: LD_VAR 0 5
65424: IFFALSE 65491
// begin if GetWeapon ( i ) = ru_time_lapser then
65426: LD_VAR 0 4
65430: PPUSH
65431: CALL_OW 264
65435: PUSH
65436: LD_INT 49
65438: EQUAL
65439: IFFALSE 65467
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65441: LD_VAR 0 4
65445: PPUSH
65446: LD_VAR 0 5
65450: PPUSH
65451: LD_VAR 0 4
65455: PPUSH
65456: CALL_OW 74
65460: PPUSH
65461: CALL_OW 112
65465: GO 65491
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65467: LD_VAR 0 4
65471: PPUSH
65472: LD_VAR 0 5
65476: PPUSH
65477: LD_VAR 0 4
65481: PPUSH
65482: CALL_OW 74
65486: PPUSH
65487: CALL 66420 0 2
// end ; end ;
65491: GO 65071
65493: POP
65494: POP
// end ;
65495: LD_VAR 0 3
65499: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65500: LD_INT 0
65502: PPUSH
65503: PPUSH
65504: PPUSH
// if not unit or IsInUnit ( unit ) then
65505: LD_VAR 0 1
65509: NOT
65510: PUSH
65511: LD_VAR 0 1
65515: PPUSH
65516: CALL_OW 310
65520: OR
65521: IFFALSE 65525
// exit ;
65523: GO 65616
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65525: LD_ADDR_VAR 0 4
65529: PUSH
65530: LD_VAR 0 1
65534: PPUSH
65535: CALL_OW 250
65539: PPUSH
65540: LD_VAR 0 2
65544: PPUSH
65545: LD_INT 1
65547: PPUSH
65548: CALL_OW 272
65552: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65553: LD_ADDR_VAR 0 5
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 251
65567: PPUSH
65568: LD_VAR 0 2
65572: PPUSH
65573: LD_INT 1
65575: PPUSH
65576: CALL_OW 273
65580: ST_TO_ADDR
// if ValidHex ( x , y ) then
65581: LD_VAR 0 4
65585: PPUSH
65586: LD_VAR 0 5
65590: PPUSH
65591: CALL_OW 488
65595: IFFALSE 65616
// ComTurnXY ( unit , x , y ) ;
65597: LD_VAR 0 1
65601: PPUSH
65602: LD_VAR 0 4
65606: PPUSH
65607: LD_VAR 0 5
65611: PPUSH
65612: CALL_OW 118
// end ;
65616: LD_VAR 0 3
65620: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65621: LD_INT 0
65623: PPUSH
65624: PPUSH
// result := false ;
65625: LD_ADDR_VAR 0 3
65629: PUSH
65630: LD_INT 0
65632: ST_TO_ADDR
// if not units then
65633: LD_VAR 0 2
65637: NOT
65638: IFFALSE 65642
// exit ;
65640: GO 65687
// for i in units do
65642: LD_ADDR_VAR 0 4
65646: PUSH
65647: LD_VAR 0 2
65651: PUSH
65652: FOR_IN
65653: IFFALSE 65685
// if See ( side , i ) then
65655: LD_VAR 0 1
65659: PPUSH
65660: LD_VAR 0 4
65664: PPUSH
65665: CALL_OW 292
65669: IFFALSE 65683
// begin result := true ;
65671: LD_ADDR_VAR 0 3
65675: PUSH
65676: LD_INT 1
65678: ST_TO_ADDR
// exit ;
65679: POP
65680: POP
65681: GO 65687
// end ;
65683: GO 65652
65685: POP
65686: POP
// end ;
65687: LD_VAR 0 3
65691: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65692: LD_INT 0
65694: PPUSH
65695: PPUSH
65696: PPUSH
65697: PPUSH
// if not unit or not points then
65698: LD_VAR 0 1
65702: NOT
65703: PUSH
65704: LD_VAR 0 2
65708: NOT
65709: OR
65710: IFFALSE 65714
// exit ;
65712: GO 65804
// dist := 99999 ;
65714: LD_ADDR_VAR 0 5
65718: PUSH
65719: LD_INT 99999
65721: ST_TO_ADDR
// for i in points do
65722: LD_ADDR_VAR 0 4
65726: PUSH
65727: LD_VAR 0 2
65731: PUSH
65732: FOR_IN
65733: IFFALSE 65802
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65735: LD_ADDR_VAR 0 6
65739: PUSH
65740: LD_VAR 0 1
65744: PPUSH
65745: LD_VAR 0 4
65749: PUSH
65750: LD_INT 1
65752: ARRAY
65753: PPUSH
65754: LD_VAR 0 4
65758: PUSH
65759: LD_INT 2
65761: ARRAY
65762: PPUSH
65763: CALL_OW 297
65767: ST_TO_ADDR
// if tmpDist < dist then
65768: LD_VAR 0 6
65772: PUSH
65773: LD_VAR 0 5
65777: LESS
65778: IFFALSE 65800
// begin result := i ;
65780: LD_ADDR_VAR 0 3
65784: PUSH
65785: LD_VAR 0 4
65789: ST_TO_ADDR
// dist := tmpDist ;
65790: LD_ADDR_VAR 0 5
65794: PUSH
65795: LD_VAR 0 6
65799: ST_TO_ADDR
// end ; end ;
65800: GO 65732
65802: POP
65803: POP
// end ;
65804: LD_VAR 0 3
65808: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65809: LD_INT 0
65811: PPUSH
// uc_side := side ;
65812: LD_ADDR_OWVAR 20
65816: PUSH
65817: LD_VAR 0 1
65821: ST_TO_ADDR
// uc_nation := 3 ;
65822: LD_ADDR_OWVAR 21
65826: PUSH
65827: LD_INT 3
65829: ST_TO_ADDR
// vc_chassis := 25 ;
65830: LD_ADDR_OWVAR 37
65834: PUSH
65835: LD_INT 25
65837: ST_TO_ADDR
// vc_engine := engine_siberite ;
65838: LD_ADDR_OWVAR 39
65842: PUSH
65843: LD_INT 3
65845: ST_TO_ADDR
// vc_control := control_computer ;
65846: LD_ADDR_OWVAR 38
65850: PUSH
65851: LD_INT 3
65853: ST_TO_ADDR
// vc_weapon := 59 ;
65854: LD_ADDR_OWVAR 40
65858: PUSH
65859: LD_INT 59
65861: ST_TO_ADDR
// result := CreateVehicle ;
65862: LD_ADDR_VAR 0 5
65866: PUSH
65867: CALL_OW 45
65871: ST_TO_ADDR
// SetDir ( result , d ) ;
65872: LD_VAR 0 5
65876: PPUSH
65877: LD_VAR 0 4
65881: PPUSH
65882: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65886: LD_VAR 0 5
65890: PPUSH
65891: LD_VAR 0 2
65895: PPUSH
65896: LD_VAR 0 3
65900: PPUSH
65901: LD_INT 0
65903: PPUSH
65904: CALL_OW 48
// end ;
65908: LD_VAR 0 5
65912: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65913: LD_INT 0
65915: PPUSH
65916: PPUSH
65917: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65918: LD_ADDR_VAR 0 2
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: LD_INT 0
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65941: LD_VAR 0 1
65945: NOT
65946: PUSH
65947: LD_VAR 0 1
65951: PPUSH
65952: CALL_OW 264
65956: PUSH
65957: LD_INT 12
65959: PUSH
65960: LD_INT 51
65962: PUSH
65963: LD_INT 32
65965: PUSH
65966: LD_INT 89
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: IN
65975: NOT
65976: OR
65977: IFFALSE 65981
// exit ;
65979: GO 66079
// for i := 1 to 3 do
65981: LD_ADDR_VAR 0 3
65985: PUSH
65986: DOUBLE
65987: LD_INT 1
65989: DEC
65990: ST_TO_ADDR
65991: LD_INT 3
65993: PUSH
65994: FOR_TO
65995: IFFALSE 66077
// begin tmp := GetCargo ( cargo , i ) ;
65997: LD_ADDR_VAR 0 4
66001: PUSH
66002: LD_VAR 0 1
66006: PPUSH
66007: LD_VAR 0 3
66011: PPUSH
66012: CALL_OW 289
66016: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66017: LD_ADDR_VAR 0 2
66021: PUSH
66022: LD_VAR 0 2
66026: PPUSH
66027: LD_VAR 0 3
66031: PPUSH
66032: LD_VAR 0 4
66036: PPUSH
66037: CALL_OW 1
66041: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66042: LD_ADDR_VAR 0 2
66046: PUSH
66047: LD_VAR 0 2
66051: PPUSH
66052: LD_INT 4
66054: PPUSH
66055: LD_VAR 0 2
66059: PUSH
66060: LD_INT 4
66062: ARRAY
66063: PUSH
66064: LD_VAR 0 4
66068: PLUS
66069: PPUSH
66070: CALL_OW 1
66074: ST_TO_ADDR
// end ;
66075: GO 65994
66077: POP
66078: POP
// end ;
66079: LD_VAR 0 2
66083: RET
// export function Length ( array ) ; begin
66084: LD_INT 0
66086: PPUSH
// result := array + 0 ;
66087: LD_ADDR_VAR 0 2
66091: PUSH
66092: LD_VAR 0 1
66096: PUSH
66097: LD_INT 0
66099: PLUS
66100: ST_TO_ADDR
// end ;
66101: LD_VAR 0 2
66105: RET
// export function PrepareArray ( array ) ; begin
66106: LD_INT 0
66108: PPUSH
// result := array diff 0 ;
66109: LD_ADDR_VAR 0 2
66113: PUSH
66114: LD_VAR 0 1
66118: PUSH
66119: LD_INT 0
66121: DIFF
66122: ST_TO_ADDR
// if not result [ 1 ] then
66123: LD_VAR 0 2
66127: PUSH
66128: LD_INT 1
66130: ARRAY
66131: NOT
66132: IFFALSE 66152
// result := Delete ( result , 1 ) ;
66134: LD_ADDR_VAR 0 2
66138: PUSH
66139: LD_VAR 0 2
66143: PPUSH
66144: LD_INT 1
66146: PPUSH
66147: CALL_OW 3
66151: ST_TO_ADDR
// end ;
66152: LD_VAR 0 2
66156: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66157: LD_INT 0
66159: PPUSH
66160: PPUSH
66161: PPUSH
66162: PPUSH
// sibRocketRange := 25 ;
66163: LD_ADDR_VAR 0 6
66167: PUSH
66168: LD_INT 25
66170: ST_TO_ADDR
// result := false ;
66171: LD_ADDR_VAR 0 4
66175: PUSH
66176: LD_INT 0
66178: ST_TO_ADDR
// for i := 0 to 5 do
66179: LD_ADDR_VAR 0 5
66183: PUSH
66184: DOUBLE
66185: LD_INT 0
66187: DEC
66188: ST_TO_ADDR
66189: LD_INT 5
66191: PUSH
66192: FOR_TO
66193: IFFALSE 66260
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66195: LD_VAR 0 1
66199: PPUSH
66200: LD_VAR 0 5
66204: PPUSH
66205: LD_VAR 0 6
66209: PPUSH
66210: CALL_OW 272
66214: PPUSH
66215: LD_VAR 0 2
66219: PPUSH
66220: LD_VAR 0 5
66224: PPUSH
66225: LD_VAR 0 6
66229: PPUSH
66230: CALL_OW 273
66234: PPUSH
66235: LD_VAR 0 3
66239: PPUSH
66240: CALL_OW 309
66244: IFFALSE 66258
// begin result := true ;
66246: LD_ADDR_VAR 0 4
66250: PUSH
66251: LD_INT 1
66253: ST_TO_ADDR
// exit ;
66254: POP
66255: POP
66256: GO 66262
// end ;
66258: GO 66192
66260: POP
66261: POP
// end ;
66262: LD_VAR 0 4
66266: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66267: LD_INT 0
66269: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66270: LD_VAR 0 1
66274: PPUSH
66275: LD_VAR 0 2
66279: PPUSH
66280: LD_INT 0
66282: PPUSH
66283: LD_INT 0
66285: PPUSH
66286: LD_INT 1
66288: PPUSH
66289: LD_INT 0
66291: PPUSH
66292: CALL_OW 587
// end ;
66296: LD_VAR 0 3
66300: RET
// export function CenterOnNow ( unit ) ; begin
66301: LD_INT 0
66303: PPUSH
// result := IsInUnit ( unit ) ;
66304: LD_ADDR_VAR 0 2
66308: PUSH
66309: LD_VAR 0 1
66313: PPUSH
66314: CALL_OW 310
66318: ST_TO_ADDR
// if not result then
66319: LD_VAR 0 2
66323: NOT
66324: IFFALSE 66336
// result := unit ;
66326: LD_ADDR_VAR 0 2
66330: PUSH
66331: LD_VAR 0 1
66335: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66336: LD_VAR 0 1
66340: PPUSH
66341: CALL_OW 87
// end ;
66345: LD_VAR 0 2
66349: RET
// export function ComMoveHex ( unit , hex ) ; begin
66350: LD_INT 0
66352: PPUSH
// if not hex then
66353: LD_VAR 0 2
66357: NOT
66358: IFFALSE 66362
// exit ;
66360: GO 66415
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66362: LD_VAR 0 2
66366: PUSH
66367: LD_INT 1
66369: ARRAY
66370: PPUSH
66371: LD_VAR 0 2
66375: PUSH
66376: LD_INT 2
66378: ARRAY
66379: PPUSH
66380: CALL_OW 428
66384: IFFALSE 66388
// exit ;
66386: GO 66415
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66388: LD_VAR 0 1
66392: PPUSH
66393: LD_VAR 0 2
66397: PUSH
66398: LD_INT 1
66400: ARRAY
66401: PPUSH
66402: LD_VAR 0 2
66406: PUSH
66407: LD_INT 2
66409: ARRAY
66410: PPUSH
66411: CALL_OW 111
// end ;
66415: LD_VAR 0 3
66419: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66420: LD_INT 0
66422: PPUSH
66423: PPUSH
66424: PPUSH
// if not unit or not enemy then
66425: LD_VAR 0 1
66429: NOT
66430: PUSH
66431: LD_VAR 0 2
66435: NOT
66436: OR
66437: IFFALSE 66441
// exit ;
66439: GO 66565
// x := GetX ( enemy ) ;
66441: LD_ADDR_VAR 0 4
66445: PUSH
66446: LD_VAR 0 2
66450: PPUSH
66451: CALL_OW 250
66455: ST_TO_ADDR
// y := GetY ( enemy ) ;
66456: LD_ADDR_VAR 0 5
66460: PUSH
66461: LD_VAR 0 2
66465: PPUSH
66466: CALL_OW 251
66470: ST_TO_ADDR
// if ValidHex ( x , y ) then
66471: LD_VAR 0 4
66475: PPUSH
66476: LD_VAR 0 5
66480: PPUSH
66481: CALL_OW 488
66485: IFFALSE 66565
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
66487: LD_VAR 0 2
66491: PPUSH
66492: CALL_OW 247
66496: PUSH
66497: LD_INT 3
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: IN
66507: PUSH
66508: LD_VAR 0 1
66512: PPUSH
66513: CALL_OW 255
66517: PPUSH
66518: LD_VAR 0 2
66522: PPUSH
66523: CALL_OW 292
66527: AND
66528: IFFALSE 66546
// ComAttackUnit ( unit , enemy ) else
66530: LD_VAR 0 1
66534: PPUSH
66535: LD_VAR 0 2
66539: PPUSH
66540: CALL_OW 115
66544: GO 66565
// ComAgressiveMove ( unit , x , y ) ;
66546: LD_VAR 0 1
66550: PPUSH
66551: LD_VAR 0 4
66555: PPUSH
66556: LD_VAR 0 5
66560: PPUSH
66561: CALL_OW 114
// end ; end_of_file
66565: LD_VAR 0 3
66569: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66570: LD_VAR 0 1
66574: PPUSH
66575: LD_VAR 0 2
66579: PPUSH
66580: LD_VAR 0 3
66584: PPUSH
66585: LD_VAR 0 4
66589: PPUSH
66590: LD_VAR 0 5
66594: PPUSH
66595: LD_VAR 0 6
66599: PPUSH
66600: CALL 4271 0 6
// end ;
66604: PPOPN 6
66606: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66607: LD_INT 0
66609: PPUSH
// begin if not units then
66610: LD_VAR 0 1
66614: NOT
66615: IFFALSE 66619
// exit ;
66617: GO 66619
// end ;
66619: PPOPN 7
66621: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66622: CALL 4175 0 0
// end ;
66626: PPOPN 1
66628: END
