// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20022 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 19918 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20038 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 24207 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 24207 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 29047 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 29047 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 29047 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 29047 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 24207 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 24207 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 24207 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 24207 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 24207 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 24207 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 24207 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 24207 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 24207 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 24207 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 24207 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 24207 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 24207 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 24207 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 24207 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 29047 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_INT 89
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: IN
3775: PUSH
3776: LD_EXP 3
3780: PPUSH
3781: CALL_OW 310
3785: PPUSH
3786: CALL_OW 264
3790: PUSH
3791: LD_INT 51
3793: PUSH
3794: LD_INT 12
3796: PUSH
3797: LD_INT 89
3799: PUSH
3800: LD_INT 32
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: IN
3809: OR
3810: AND
3811: IFFALSE 4021
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_EXP 2
3830: PPUSH
3831: CALL_OW 310
3835: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 310
3850: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3851: LD_VAR 0 2
3855: PPUSH
3856: CALL_OW 265
3860: PUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: CALL_OW 262
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_VAR 0 2
3878: PPUSH
3879: CALL_OW 264
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 271
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 248
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_STRING 14a_JMMVeh
3914: PPUSH
3915: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: CALL_OW 265
3928: PUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 262
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 264
3951: PUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 271
3961: PUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 248
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_STRING 14a_BurlakVeh
3982: PPUSH
3983: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3987: LD_EXP 2
3991: PPUSH
3992: LD_STRING 14a_JMM
3994: PPUSH
3995: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3999: LD_EXP 3
4003: PPUSH
4004: LD_STRING 14a_Burlak
4006: PPUSH
4007: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING %_cont
4016: PPUSH
4017: CALL_OW 340
// end ;
4021: PPOPN 3
4023: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4024: LD_INT 22
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 24
4039: PUSH
4040: LD_INT 950
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 69
4059: IFFALSE 4071
4061: GO 4063
4063: DISABLE
// YouLost ( FriendlyFire ) ;
4064: LD_STRING FriendlyFire
4066: PPUSH
4067: CALL_OW 104
4071: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4072: LD_EXP 3
4076: PPUSH
4077: CALL_OW 301
4081: IFFALSE 4093
4083: GO 4085
4085: DISABLE
// YouLost ( Burlak ) ;
4086: LD_STRING Burlak
4088: PPUSH
4089: CALL_OW 104
4093: END
// every 0 0$1 trigger IsDead ( JMM ) do
4094: LD_EXP 2
4098: PPUSH
4099: CALL_OW 301
4103: IFFALSE 4115
4105: GO 4107
4107: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4108: LD_STRING JMM
4110: PPUSH
4111: CALL_OW 104
4115: END
// export globalGameSaveCounter ; every 0 0$1 do
4116: GO 4118
4118: DISABLE
// begin enable ;
4119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4120: LD_STRING updateTimer(
4122: PUSH
4123: LD_OWVAR 1
4127: STR
4128: PUSH
4129: LD_STRING );
4131: STR
4132: PPUSH
4133: CALL_OW 559
// end ;
4137: END
// every 0 0$1 do
4138: GO 4140
4140: DISABLE
// begin globalGameSaveCounter := 0 ;
4141: LD_ADDR_EXP 39
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4149: LD_STRING setGameSaveCounter(0)
4151: PPUSH
4152: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4156: LD_STRING initStreamRollete();
4158: PPUSH
4159: CALL_OW 559
// InitStreamMode ;
4163: CALL 5489 0 0
// DefineStreamItems ( false ) ;
4167: LD_INT 0
4169: PPUSH
4170: CALL 5953 0 1
// end ;
4174: END
// export function SOS_MapStart ( ) ; begin
4175: LD_INT 0
4177: PPUSH
// if streamModeActive then
4178: LD_EXP 40
4182: IFFALSE 4191
// DefineStreamItems ( true ) ;
4184: LD_INT 1
4186: PPUSH
4187: CALL 5953 0 1
// UpdateLuaVariables ( ) ;
4191: CALL 4208 0 0
// UpdateFactoryWaypoints ( ) ;
4195: CALL 18822 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4199: CALL 19079 0 0
// end ;
4203: LD_VAR 0 1
4207: RET
// function UpdateLuaVariables ( ) ; begin
4208: LD_INT 0
4210: PPUSH
// if globalGameSaveCounter then
4211: LD_EXP 39
4215: IFFALSE 4249
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4217: LD_ADDR_EXP 39
4221: PUSH
4222: LD_EXP 39
4226: PPUSH
4227: CALL 62889 0 1
4231: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4232: LD_STRING setGameSaveCounter(
4234: PUSH
4235: LD_EXP 39
4239: STR
4240: PUSH
4241: LD_STRING )
4243: STR
4244: PPUSH
4245: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4249: LD_STRING setGameDifficulty(
4251: PUSH
4252: LD_OWVAR 67
4256: STR
4257: PUSH
4258: LD_STRING )
4260: STR
4261: PPUSH
4262: CALL_OW 559
// end ;
4266: LD_VAR 0 1
4270: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4271: LD_INT 0
4273: PPUSH
// if p2 = stream_mode then
4274: LD_VAR 0 2
4278: PUSH
4279: LD_INT 100
4281: EQUAL
4282: IFFALSE 5285
// begin if not StreamModeActive then
4284: LD_EXP 40
4288: NOT
4289: IFFALSE 4299
// StreamModeActive := true ;
4291: LD_ADDR_EXP 40
4295: PUSH
4296: LD_INT 1
4298: ST_TO_ADDR
// if p3 = 0 then
4299: LD_VAR 0 3
4303: PUSH
4304: LD_INT 0
4306: EQUAL
4307: IFFALSE 4313
// InitStreamMode ;
4309: CALL 5489 0 0
// if p3 = 1 then
4313: LD_VAR 0 3
4317: PUSH
4318: LD_INT 1
4320: EQUAL
4321: IFFALSE 4331
// sRocket := true ;
4323: LD_ADDR_EXP 45
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// if p3 = 2 then
4331: LD_VAR 0 3
4335: PUSH
4336: LD_INT 2
4338: EQUAL
4339: IFFALSE 4349
// sSpeed := true ;
4341: LD_ADDR_EXP 44
4345: PUSH
4346: LD_INT 1
4348: ST_TO_ADDR
// if p3 = 3 then
4349: LD_VAR 0 3
4353: PUSH
4354: LD_INT 3
4356: EQUAL
4357: IFFALSE 4367
// sEngine := true ;
4359: LD_ADDR_EXP 46
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// if p3 = 4 then
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 4
4374: EQUAL
4375: IFFALSE 4385
// sSpec := true ;
4377: LD_ADDR_EXP 43
4381: PUSH
4382: LD_INT 1
4384: ST_TO_ADDR
// if p3 = 5 then
4385: LD_VAR 0 3
4389: PUSH
4390: LD_INT 5
4392: EQUAL
4393: IFFALSE 4403
// sLevel := true ;
4395: LD_ADDR_EXP 47
4399: PUSH
4400: LD_INT 1
4402: ST_TO_ADDR
// if p3 = 6 then
4403: LD_VAR 0 3
4407: PUSH
4408: LD_INT 6
4410: EQUAL
4411: IFFALSE 4421
// sArmoury := true ;
4413: LD_ADDR_EXP 48
4417: PUSH
4418: LD_INT 1
4420: ST_TO_ADDR
// if p3 = 7 then
4421: LD_VAR 0 3
4425: PUSH
4426: LD_INT 7
4428: EQUAL
4429: IFFALSE 4439
// sRadar := true ;
4431: LD_ADDR_EXP 49
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// if p3 = 8 then
4439: LD_VAR 0 3
4443: PUSH
4444: LD_INT 8
4446: EQUAL
4447: IFFALSE 4457
// sBunker := true ;
4449: LD_ADDR_EXP 50
4453: PUSH
4454: LD_INT 1
4456: ST_TO_ADDR
// if p3 = 9 then
4457: LD_VAR 0 3
4461: PUSH
4462: LD_INT 9
4464: EQUAL
4465: IFFALSE 4475
// sHack := true ;
4467: LD_ADDR_EXP 51
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// if p3 = 10 then
4475: LD_VAR 0 3
4479: PUSH
4480: LD_INT 10
4482: EQUAL
4483: IFFALSE 4493
// sFire := true ;
4485: LD_ADDR_EXP 52
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// if p3 = 11 then
4493: LD_VAR 0 3
4497: PUSH
4498: LD_INT 11
4500: EQUAL
4501: IFFALSE 4511
// sRefresh := true ;
4503: LD_ADDR_EXP 53
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// if p3 = 12 then
4511: LD_VAR 0 3
4515: PUSH
4516: LD_INT 12
4518: EQUAL
4519: IFFALSE 4529
// sExp := true ;
4521: LD_ADDR_EXP 54
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if p3 = 13 then
4529: LD_VAR 0 3
4533: PUSH
4534: LD_INT 13
4536: EQUAL
4537: IFFALSE 4547
// sDepot := true ;
4539: LD_ADDR_EXP 55
4543: PUSH
4544: LD_INT 1
4546: ST_TO_ADDR
// if p3 = 14 then
4547: LD_VAR 0 3
4551: PUSH
4552: LD_INT 14
4554: EQUAL
4555: IFFALSE 4565
// sFlag := true ;
4557: LD_ADDR_EXP 56
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if p3 = 15 then
4565: LD_VAR 0 3
4569: PUSH
4570: LD_INT 15
4572: EQUAL
4573: IFFALSE 4583
// sKamikadze := true ;
4575: LD_ADDR_EXP 64
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// if p3 = 16 then
4583: LD_VAR 0 3
4587: PUSH
4588: LD_INT 16
4590: EQUAL
4591: IFFALSE 4601
// sTroll := true ;
4593: LD_ADDR_EXP 65
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// if p3 = 17 then
4601: LD_VAR 0 3
4605: PUSH
4606: LD_INT 17
4608: EQUAL
4609: IFFALSE 4619
// sSlow := true ;
4611: LD_ADDR_EXP 66
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// if p3 = 18 then
4619: LD_VAR 0 3
4623: PUSH
4624: LD_INT 18
4626: EQUAL
4627: IFFALSE 4637
// sLack := true ;
4629: LD_ADDR_EXP 67
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// if p3 = 19 then
4637: LD_VAR 0 3
4641: PUSH
4642: LD_INT 19
4644: EQUAL
4645: IFFALSE 4655
// sTank := true ;
4647: LD_ADDR_EXP 69
4651: PUSH
4652: LD_INT 1
4654: ST_TO_ADDR
// if p3 = 20 then
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 20
4662: EQUAL
4663: IFFALSE 4673
// sRemote := true ;
4665: LD_ADDR_EXP 70
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// if p3 = 21 then
4673: LD_VAR 0 3
4677: PUSH
4678: LD_INT 21
4680: EQUAL
4681: IFFALSE 4691
// sPowell := true ;
4683: LD_ADDR_EXP 71
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// if p3 = 22 then
4691: LD_VAR 0 3
4695: PUSH
4696: LD_INT 22
4698: EQUAL
4699: IFFALSE 4709
// sTeleport := true ;
4701: LD_ADDR_EXP 74
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// if p3 = 23 then
4709: LD_VAR 0 3
4713: PUSH
4714: LD_INT 23
4716: EQUAL
4717: IFFALSE 4727
// sOilTower := true ;
4719: LD_ADDR_EXP 76
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// if p3 = 24 then
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 24
4734: EQUAL
4735: IFFALSE 4745
// sShovel := true ;
4737: LD_ADDR_EXP 77
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// if p3 = 25 then
4745: LD_VAR 0 3
4749: PUSH
4750: LD_INT 25
4752: EQUAL
4753: IFFALSE 4763
// sSheik := true ;
4755: LD_ADDR_EXP 78
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// if p3 = 26 then
4763: LD_VAR 0 3
4767: PUSH
4768: LD_INT 26
4770: EQUAL
4771: IFFALSE 4781
// sEarthquake := true ;
4773: LD_ADDR_EXP 80
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// if p3 = 27 then
4781: LD_VAR 0 3
4785: PUSH
4786: LD_INT 27
4788: EQUAL
4789: IFFALSE 4799
// sAI := true ;
4791: LD_ADDR_EXP 81
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// if p3 = 28 then
4799: LD_VAR 0 3
4803: PUSH
4804: LD_INT 28
4806: EQUAL
4807: IFFALSE 4817
// sCargo := true ;
4809: LD_ADDR_EXP 84
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// if p3 = 29 then
4817: LD_VAR 0 3
4821: PUSH
4822: LD_INT 29
4824: EQUAL
4825: IFFALSE 4835
// sDLaser := true ;
4827: LD_ADDR_EXP 85
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// if p3 = 30 then
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 30
4842: EQUAL
4843: IFFALSE 4853
// sExchange := true ;
4845: LD_ADDR_EXP 86
4849: PUSH
4850: LD_INT 1
4852: ST_TO_ADDR
// if p3 = 31 then
4853: LD_VAR 0 3
4857: PUSH
4858: LD_INT 31
4860: EQUAL
4861: IFFALSE 4871
// sFac := true ;
4863: LD_ADDR_EXP 87
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// if p3 = 32 then
4871: LD_VAR 0 3
4875: PUSH
4876: LD_INT 32
4878: EQUAL
4879: IFFALSE 4889
// sPower := true ;
4881: LD_ADDR_EXP 88
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// if p3 = 33 then
4889: LD_VAR 0 3
4893: PUSH
4894: LD_INT 33
4896: EQUAL
4897: IFFALSE 4907
// sRandom := true ;
4899: LD_ADDR_EXP 89
4903: PUSH
4904: LD_INT 1
4906: ST_TO_ADDR
// if p3 = 34 then
4907: LD_VAR 0 3
4911: PUSH
4912: LD_INT 34
4914: EQUAL
4915: IFFALSE 4925
// sShield := true ;
4917: LD_ADDR_EXP 90
4921: PUSH
4922: LD_INT 1
4924: ST_TO_ADDR
// if p3 = 35 then
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 35
4932: EQUAL
4933: IFFALSE 4943
// sTime := true ;
4935: LD_ADDR_EXP 91
4939: PUSH
4940: LD_INT 1
4942: ST_TO_ADDR
// if p3 = 36 then
4943: LD_VAR 0 3
4947: PUSH
4948: LD_INT 36
4950: EQUAL
4951: IFFALSE 4961
// sTools := true ;
4953: LD_ADDR_EXP 92
4957: PUSH
4958: LD_INT 1
4960: ST_TO_ADDR
// if p3 = 101 then
4961: LD_VAR 0 3
4965: PUSH
4966: LD_INT 101
4968: EQUAL
4969: IFFALSE 4979
// sSold := true ;
4971: LD_ADDR_EXP 57
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if p3 = 102 then
4979: LD_VAR 0 3
4983: PUSH
4984: LD_INT 102
4986: EQUAL
4987: IFFALSE 4997
// sDiff := true ;
4989: LD_ADDR_EXP 58
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if p3 = 103 then
4997: LD_VAR 0 3
5001: PUSH
5002: LD_INT 103
5004: EQUAL
5005: IFFALSE 5015
// sFog := true ;
5007: LD_ADDR_EXP 61
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// if p3 = 104 then
5015: LD_VAR 0 3
5019: PUSH
5020: LD_INT 104
5022: EQUAL
5023: IFFALSE 5033
// sReset := true ;
5025: LD_ADDR_EXP 62
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// if p3 = 105 then
5033: LD_VAR 0 3
5037: PUSH
5038: LD_INT 105
5040: EQUAL
5041: IFFALSE 5051
// sSun := true ;
5043: LD_ADDR_EXP 63
5047: PUSH
5048: LD_INT 1
5050: ST_TO_ADDR
// if p3 = 106 then
5051: LD_VAR 0 3
5055: PUSH
5056: LD_INT 106
5058: EQUAL
5059: IFFALSE 5069
// sTiger := true ;
5061: LD_ADDR_EXP 59
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// if p3 = 107 then
5069: LD_VAR 0 3
5073: PUSH
5074: LD_INT 107
5076: EQUAL
5077: IFFALSE 5087
// sBomb := true ;
5079: LD_ADDR_EXP 60
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// if p3 = 108 then
5087: LD_VAR 0 3
5091: PUSH
5092: LD_INT 108
5094: EQUAL
5095: IFFALSE 5105
// sWound := true ;
5097: LD_ADDR_EXP 68
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// if p3 = 109 then
5105: LD_VAR 0 3
5109: PUSH
5110: LD_INT 109
5112: EQUAL
5113: IFFALSE 5123
// sBetray := true ;
5115: LD_ADDR_EXP 72
5119: PUSH
5120: LD_INT 1
5122: ST_TO_ADDR
// if p3 = 110 then
5123: LD_VAR 0 3
5127: PUSH
5128: LD_INT 110
5130: EQUAL
5131: IFFALSE 5141
// sContamin := true ;
5133: LD_ADDR_EXP 73
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// if p3 = 111 then
5141: LD_VAR 0 3
5145: PUSH
5146: LD_INT 111
5148: EQUAL
5149: IFFALSE 5159
// sOil := true ;
5151: LD_ADDR_EXP 75
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// if p3 = 112 then
5159: LD_VAR 0 3
5163: PUSH
5164: LD_INT 112
5166: EQUAL
5167: IFFALSE 5177
// sStu := true ;
5169: LD_ADDR_EXP 79
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// if p3 = 113 then
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 113
5184: EQUAL
5185: IFFALSE 5195
// sBazooka := true ;
5187: LD_ADDR_EXP 82
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// if p3 = 114 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 114
5202: EQUAL
5203: IFFALSE 5213
// sMortar := true ;
5205: LD_ADDR_EXP 83
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if p3 = 115 then
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 115
5220: EQUAL
5221: IFFALSE 5231
// sRanger := true ;
5223: LD_ADDR_EXP 93
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// if p3 = 116 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 116
5238: EQUAL
5239: IFFALSE 5249
// sComputer := true ;
5241: LD_ADDR_EXP 94
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if p3 = 117 then
5249: LD_VAR 0 3
5253: PUSH
5254: LD_INT 117
5256: EQUAL
5257: IFFALSE 5267
// s30 := true ;
5259: LD_ADDR_EXP 95
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if p3 = 118 then
5267: LD_VAR 0 3
5271: PUSH
5272: LD_INT 118
5274: EQUAL
5275: IFFALSE 5285
// s60 := true ;
5277: LD_ADDR_EXP 96
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// end ; if p2 = hack_mode then
5285: LD_VAR 0 2
5289: PUSH
5290: LD_INT 101
5292: EQUAL
5293: IFFALSE 5421
// begin case p3 of 1 :
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 1
5302: DOUBLE
5303: EQUAL
5304: IFTRUE 5308
5306: GO 5315
5308: POP
// hHackUnlimitedResources ; 2 :
5309: CALL 17568 0 0
5313: GO 5421
5315: LD_INT 2
5317: DOUBLE
5318: EQUAL
5319: IFTRUE 5323
5321: GO 5330
5323: POP
// hHackSetLevel10 ; 3 :
5324: CALL 17701 0 0
5328: GO 5421
5330: LD_INT 3
5332: DOUBLE
5333: EQUAL
5334: IFTRUE 5338
5336: GO 5345
5338: POP
// hHackSetLevel10YourUnits ; 4 :
5339: CALL 17786 0 0
5343: GO 5421
5345: LD_INT 4
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5360
5353: POP
// hHackInvincible ; 5 :
5354: CALL 18234 0 0
5358: GO 5421
5360: LD_INT 5
5362: DOUBLE
5363: EQUAL
5364: IFTRUE 5368
5366: GO 5375
5368: POP
// hHackInvisible ; 6 :
5369: CALL 18345 0 0
5373: GO 5421
5375: LD_INT 6
5377: DOUBLE
5378: EQUAL
5379: IFTRUE 5383
5381: GO 5390
5383: POP
// hHackChangeYourSide ; 7 :
5384: CALL 18402 0 0
5388: GO 5421
5390: LD_INT 7
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5405
5398: POP
// hHackChangeUnitSide ; 8 :
5399: CALL 18444 0 0
5403: GO 5421
5405: LD_INT 8
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5420
5413: POP
// hHackFog ; end ;
5414: CALL 18545 0 0
5418: GO 5421
5420: POP
// end ; if p2 = game_save_mode then
5421: LD_VAR 0 2
5425: PUSH
5426: LD_INT 102
5428: EQUAL
5429: IFFALSE 5484
// begin if p3 = 1 then
5431: LD_VAR 0 3
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5451
// globalGameSaveCounter := p4 ;
5441: LD_ADDR_EXP 39
5445: PUSH
5446: LD_VAR 0 4
5450: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5451: LD_VAR 0 3
5455: PUSH
5456: LD_INT 2
5458: EQUAL
5459: PUSH
5460: LD_EXP 39
5464: AND
5465: IFFALSE 5484
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5467: LD_STRING setGameSaveCounter(
5469: PUSH
5470: LD_EXP 39
5474: STR
5475: PUSH
5476: LD_STRING )
5478: STR
5479: PPUSH
5480: CALL_OW 559
// end ; end ;
5484: LD_VAR 0 7
5488: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5489: LD_INT 0
5491: PPUSH
// streamModeActive := false ;
5492: LD_ADDR_EXP 40
5496: PUSH
5497: LD_INT 0
5499: ST_TO_ADDR
// normalCounter := 36 ;
5500: LD_ADDR_EXP 41
5504: PUSH
5505: LD_INT 36
5507: ST_TO_ADDR
// hardcoreCounter := 18 ;
5508: LD_ADDR_EXP 42
5512: PUSH
5513: LD_INT 18
5515: ST_TO_ADDR
// sRocket := false ;
5516: LD_ADDR_EXP 45
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// sSpeed := false ;
5524: LD_ADDR_EXP 44
5528: PUSH
5529: LD_INT 0
5531: ST_TO_ADDR
// sEngine := false ;
5532: LD_ADDR_EXP 46
5536: PUSH
5537: LD_INT 0
5539: ST_TO_ADDR
// sSpec := false ;
5540: LD_ADDR_EXP 43
5544: PUSH
5545: LD_INT 0
5547: ST_TO_ADDR
// sLevel := false ;
5548: LD_ADDR_EXP 47
5552: PUSH
5553: LD_INT 0
5555: ST_TO_ADDR
// sArmoury := false ;
5556: LD_ADDR_EXP 48
5560: PUSH
5561: LD_INT 0
5563: ST_TO_ADDR
// sRadar := false ;
5564: LD_ADDR_EXP 49
5568: PUSH
5569: LD_INT 0
5571: ST_TO_ADDR
// sBunker := false ;
5572: LD_ADDR_EXP 50
5576: PUSH
5577: LD_INT 0
5579: ST_TO_ADDR
// sHack := false ;
5580: LD_ADDR_EXP 51
5584: PUSH
5585: LD_INT 0
5587: ST_TO_ADDR
// sFire := false ;
5588: LD_ADDR_EXP 52
5592: PUSH
5593: LD_INT 0
5595: ST_TO_ADDR
// sRefresh := false ;
5596: LD_ADDR_EXP 53
5600: PUSH
5601: LD_INT 0
5603: ST_TO_ADDR
// sExp := false ;
5604: LD_ADDR_EXP 54
5608: PUSH
5609: LD_INT 0
5611: ST_TO_ADDR
// sDepot := false ;
5612: LD_ADDR_EXP 55
5616: PUSH
5617: LD_INT 0
5619: ST_TO_ADDR
// sFlag := false ;
5620: LD_ADDR_EXP 56
5624: PUSH
5625: LD_INT 0
5627: ST_TO_ADDR
// sKamikadze := false ;
5628: LD_ADDR_EXP 64
5632: PUSH
5633: LD_INT 0
5635: ST_TO_ADDR
// sTroll := false ;
5636: LD_ADDR_EXP 65
5640: PUSH
5641: LD_INT 0
5643: ST_TO_ADDR
// sSlow := false ;
5644: LD_ADDR_EXP 66
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// sLack := false ;
5652: LD_ADDR_EXP 67
5656: PUSH
5657: LD_INT 0
5659: ST_TO_ADDR
// sTank := false ;
5660: LD_ADDR_EXP 69
5664: PUSH
5665: LD_INT 0
5667: ST_TO_ADDR
// sRemote := false ;
5668: LD_ADDR_EXP 70
5672: PUSH
5673: LD_INT 0
5675: ST_TO_ADDR
// sPowell := false ;
5676: LD_ADDR_EXP 71
5680: PUSH
5681: LD_INT 0
5683: ST_TO_ADDR
// sTeleport := false ;
5684: LD_ADDR_EXP 74
5688: PUSH
5689: LD_INT 0
5691: ST_TO_ADDR
// sOilTower := false ;
5692: LD_ADDR_EXP 76
5696: PUSH
5697: LD_INT 0
5699: ST_TO_ADDR
// sShovel := false ;
5700: LD_ADDR_EXP 77
5704: PUSH
5705: LD_INT 0
5707: ST_TO_ADDR
// sSheik := false ;
5708: LD_ADDR_EXP 78
5712: PUSH
5713: LD_INT 0
5715: ST_TO_ADDR
// sEarthquake := false ;
5716: LD_ADDR_EXP 80
5720: PUSH
5721: LD_INT 0
5723: ST_TO_ADDR
// sAI := false ;
5724: LD_ADDR_EXP 81
5728: PUSH
5729: LD_INT 0
5731: ST_TO_ADDR
// sCargo := false ;
5732: LD_ADDR_EXP 84
5736: PUSH
5737: LD_INT 0
5739: ST_TO_ADDR
// sDLaser := false ;
5740: LD_ADDR_EXP 85
5744: PUSH
5745: LD_INT 0
5747: ST_TO_ADDR
// sExchange := false ;
5748: LD_ADDR_EXP 86
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// sFac := false ;
5756: LD_ADDR_EXP 87
5760: PUSH
5761: LD_INT 0
5763: ST_TO_ADDR
// sPower := false ;
5764: LD_ADDR_EXP 88
5768: PUSH
5769: LD_INT 0
5771: ST_TO_ADDR
// sRandom := false ;
5772: LD_ADDR_EXP 89
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// sShield := false ;
5780: LD_ADDR_EXP 90
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// sTime := false ;
5788: LD_ADDR_EXP 91
5792: PUSH
5793: LD_INT 0
5795: ST_TO_ADDR
// sTools := false ;
5796: LD_ADDR_EXP 92
5800: PUSH
5801: LD_INT 0
5803: ST_TO_ADDR
// sSold := false ;
5804: LD_ADDR_EXP 57
5808: PUSH
5809: LD_INT 0
5811: ST_TO_ADDR
// sDiff := false ;
5812: LD_ADDR_EXP 58
5816: PUSH
5817: LD_INT 0
5819: ST_TO_ADDR
// sFog := false ;
5820: LD_ADDR_EXP 61
5824: PUSH
5825: LD_INT 0
5827: ST_TO_ADDR
// sReset := false ;
5828: LD_ADDR_EXP 62
5832: PUSH
5833: LD_INT 0
5835: ST_TO_ADDR
// sSun := false ;
5836: LD_ADDR_EXP 63
5840: PUSH
5841: LD_INT 0
5843: ST_TO_ADDR
// sTiger := false ;
5844: LD_ADDR_EXP 59
5848: PUSH
5849: LD_INT 0
5851: ST_TO_ADDR
// sBomb := false ;
5852: LD_ADDR_EXP 60
5856: PUSH
5857: LD_INT 0
5859: ST_TO_ADDR
// sWound := false ;
5860: LD_ADDR_EXP 68
5864: PUSH
5865: LD_INT 0
5867: ST_TO_ADDR
// sBetray := false ;
5868: LD_ADDR_EXP 72
5872: PUSH
5873: LD_INT 0
5875: ST_TO_ADDR
// sContamin := false ;
5876: LD_ADDR_EXP 73
5880: PUSH
5881: LD_INT 0
5883: ST_TO_ADDR
// sOil := false ;
5884: LD_ADDR_EXP 75
5888: PUSH
5889: LD_INT 0
5891: ST_TO_ADDR
// sStu := false ;
5892: LD_ADDR_EXP 79
5896: PUSH
5897: LD_INT 0
5899: ST_TO_ADDR
// sBazooka := false ;
5900: LD_ADDR_EXP 82
5904: PUSH
5905: LD_INT 0
5907: ST_TO_ADDR
// sMortar := false ;
5908: LD_ADDR_EXP 83
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// sRanger := false ;
5916: LD_ADDR_EXP 93
5920: PUSH
5921: LD_INT 0
5923: ST_TO_ADDR
// sComputer := false ;
5924: LD_ADDR_EXP 94
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// s30 := false ;
5932: LD_ADDR_EXP 95
5936: PUSH
5937: LD_INT 0
5939: ST_TO_ADDR
// s60 := false ;
5940: LD_ADDR_EXP 96
5944: PUSH
5945: LD_INT 0
5947: ST_TO_ADDR
// end ;
5948: LD_VAR 0 1
5952: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5953: LD_INT 0
5955: PPUSH
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
// result := [ ] ;
5962: LD_ADDR_VAR 0 2
5966: PUSH
5967: EMPTY
5968: ST_TO_ADDR
// if campaign_id = 1 then
5969: LD_OWVAR 69
5973: PUSH
5974: LD_INT 1
5976: EQUAL
5977: IFFALSE 9143
// begin case mission_number of 1 :
5979: LD_OWVAR 70
5983: PUSH
5984: LD_INT 1
5986: DOUBLE
5987: EQUAL
5988: IFTRUE 5992
5990: GO 6068
5992: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: LD_INT 11
6006: PUSH
6007: LD_INT 12
6009: PUSH
6010: LD_INT 15
6012: PUSH
6013: LD_INT 16
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 23
6021: PUSH
6022: LD_INT 26
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 101
6038: PUSH
6039: LD_INT 102
6041: PUSH
6042: LD_INT 106
6044: PUSH
6045: LD_INT 116
6047: PUSH
6048: LD_INT 117
6050: PUSH
6051: LD_INT 118
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: ST_TO_ADDR
6066: GO 9141
6068: LD_INT 2
6070: DOUBLE
6071: EQUAL
6072: IFTRUE 6076
6074: GO 6160
6076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: LD_INT 4
6087: PUSH
6088: LD_INT 11
6090: PUSH
6091: LD_INT 12
6093: PUSH
6094: LD_INT 15
6096: PUSH
6097: LD_INT 16
6099: PUSH
6100: LD_INT 22
6102: PUSH
6103: LD_INT 23
6105: PUSH
6106: LD_INT 26
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 101
6122: PUSH
6123: LD_INT 102
6125: PUSH
6126: LD_INT 105
6128: PUSH
6129: LD_INT 106
6131: PUSH
6132: LD_INT 108
6134: PUSH
6135: LD_INT 116
6137: PUSH
6138: LD_INT 117
6140: PUSH
6141: LD_INT 118
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: ST_TO_ADDR
6158: GO 9141
6160: LD_INT 3
6162: DOUBLE
6163: EQUAL
6164: IFTRUE 6168
6166: GO 6256
6168: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6169: LD_ADDR_VAR 0 2
6173: PUSH
6174: LD_INT 2
6176: PUSH
6177: LD_INT 4
6179: PUSH
6180: LD_INT 5
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 15
6191: PUSH
6192: LD_INT 16
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_INT 26
6200: PUSH
6201: LD_INT 36
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 101
6218: PUSH
6219: LD_INT 102
6221: PUSH
6222: LD_INT 105
6224: PUSH
6225: LD_INT 106
6227: PUSH
6228: LD_INT 108
6230: PUSH
6231: LD_INT 116
6233: PUSH
6234: LD_INT 117
6236: PUSH
6237: LD_INT 118
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: ST_TO_ADDR
6254: GO 9141
6256: LD_INT 4
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6360
6264: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: LD_INT 4
6275: PUSH
6276: LD_INT 5
6278: PUSH
6279: LD_INT 8
6281: PUSH
6282: LD_INT 11
6284: PUSH
6285: LD_INT 12
6287: PUSH
6288: LD_INT 15
6290: PUSH
6291: LD_INT 16
6293: PUSH
6294: LD_INT 22
6296: PUSH
6297: LD_INT 23
6299: PUSH
6300: LD_INT 26
6302: PUSH
6303: LD_INT 36
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 101
6322: PUSH
6323: LD_INT 102
6325: PUSH
6326: LD_INT 105
6328: PUSH
6329: LD_INT 106
6331: PUSH
6332: LD_INT 108
6334: PUSH
6335: LD_INT 116
6337: PUSH
6338: LD_INT 117
6340: PUSH
6341: LD_INT 118
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 9141
6360: LD_INT 5
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6480
6368: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 4
6379: PUSH
6380: LD_INT 5
6382: PUSH
6383: LD_INT 6
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: LD_INT 11
6391: PUSH
6392: LD_INT 12
6394: PUSH
6395: LD_INT 15
6397: PUSH
6398: LD_INT 16
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 23
6406: PUSH
6407: LD_INT 25
6409: PUSH
6410: LD_INT 26
6412: PUSH
6413: LD_INT 36
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 101
6434: PUSH
6435: LD_INT 102
6437: PUSH
6438: LD_INT 105
6440: PUSH
6441: LD_INT 106
6443: PUSH
6444: LD_INT 108
6446: PUSH
6447: LD_INT 109
6449: PUSH
6450: LD_INT 112
6452: PUSH
6453: LD_INT 116
6455: PUSH
6456: LD_INT 117
6458: PUSH
6459: LD_INT 118
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: ST_TO_ADDR
6478: GO 9141
6480: LD_INT 6
6482: DOUBLE
6483: EQUAL
6484: IFTRUE 6488
6486: GO 6620
6488: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_INT 2
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: LD_INT 6
6505: PUSH
6506: LD_INT 8
6508: PUSH
6509: LD_INT 11
6511: PUSH
6512: LD_INT 12
6514: PUSH
6515: LD_INT 15
6517: PUSH
6518: LD_INT 16
6520: PUSH
6521: LD_INT 20
6523: PUSH
6524: LD_INT 21
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 23
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 31
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: LD_INT 36
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 101
6574: PUSH
6575: LD_INT 102
6577: PUSH
6578: LD_INT 105
6580: PUSH
6581: LD_INT 106
6583: PUSH
6584: LD_INT 108
6586: PUSH
6587: LD_INT 109
6589: PUSH
6590: LD_INT 112
6592: PUSH
6593: LD_INT 116
6595: PUSH
6596: LD_INT 117
6598: PUSH
6599: LD_INT 118
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: ST_TO_ADDR
6618: GO 9141
6620: LD_INT 7
6622: DOUBLE
6623: EQUAL
6624: IFTRUE 6628
6626: GO 6740
6628: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6629: LD_ADDR_VAR 0 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 4
6639: PUSH
6640: LD_INT 5
6642: PUSH
6643: LD_INT 7
6645: PUSH
6646: LD_INT 11
6648: PUSH
6649: LD_INT 12
6651: PUSH
6652: LD_INT 15
6654: PUSH
6655: LD_INT 16
6657: PUSH
6658: LD_INT 20
6660: PUSH
6661: LD_INT 21
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_INT 23
6669: PUSH
6670: LD_INT 25
6672: PUSH
6673: LD_INT 26
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 101
6694: PUSH
6695: LD_INT 102
6697: PUSH
6698: LD_INT 103
6700: PUSH
6701: LD_INT 105
6703: PUSH
6704: LD_INT 106
6706: PUSH
6707: LD_INT 108
6709: PUSH
6710: LD_INT 112
6712: PUSH
6713: LD_INT 116
6715: PUSH
6716: LD_INT 117
6718: PUSH
6719: LD_INT 118
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: ST_TO_ADDR
6738: GO 9141
6740: LD_INT 8
6742: DOUBLE
6743: EQUAL
6744: IFTRUE 6748
6746: GO 6888
6748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6749: LD_ADDR_VAR 0 2
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: LD_INT 4
6759: PUSH
6760: LD_INT 5
6762: PUSH
6763: LD_INT 6
6765: PUSH
6766: LD_INT 7
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 15
6780: PUSH
6781: LD_INT 16
6783: PUSH
6784: LD_INT 20
6786: PUSH
6787: LD_INT 21
6789: PUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 23
6795: PUSH
6796: LD_INT 25
6798: PUSH
6799: LD_INT 26
6801: PUSH
6802: LD_INT 30
6804: PUSH
6805: LD_INT 31
6807: PUSH
6808: LD_INT 32
6810: PUSH
6811: LD_INT 36
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 101
6838: PUSH
6839: LD_INT 102
6841: PUSH
6842: LD_INT 103
6844: PUSH
6845: LD_INT 105
6847: PUSH
6848: LD_INT 106
6850: PUSH
6851: LD_INT 108
6853: PUSH
6854: LD_INT 109
6856: PUSH
6857: LD_INT 112
6859: PUSH
6860: LD_INT 116
6862: PUSH
6863: LD_INT 117
6865: PUSH
6866: LD_INT 118
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: ST_TO_ADDR
6886: GO 9141
6888: LD_INT 9
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 7044
6896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6897: LD_ADDR_VAR 0 2
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: LD_INT 4
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 6
6913: PUSH
6914: LD_INT 7
6916: PUSH
6917: LD_INT 8
6919: PUSH
6920: LD_INT 11
6922: PUSH
6923: LD_INT 12
6925: PUSH
6926: LD_INT 15
6928: PUSH
6929: LD_INT 16
6931: PUSH
6932: LD_INT 20
6934: PUSH
6935: LD_INT 21
6937: PUSH
6938: LD_INT 22
6940: PUSH
6941: LD_INT 23
6943: PUSH
6944: LD_INT 25
6946: PUSH
6947: LD_INT 26
6949: PUSH
6950: LD_INT 28
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 31
6958: PUSH
6959: LD_INT 32
6961: PUSH
6962: LD_INT 36
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 101
6990: PUSH
6991: LD_INT 102
6993: PUSH
6994: LD_INT 103
6996: PUSH
6997: LD_INT 105
6999: PUSH
7000: LD_INT 106
7002: PUSH
7003: LD_INT 108
7005: PUSH
7006: LD_INT 109
7008: PUSH
7009: LD_INT 112
7011: PUSH
7012: LD_INT 114
7014: PUSH
7015: LD_INT 116
7017: PUSH
7018: LD_INT 117
7020: PUSH
7021: LD_INT 118
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: ST_TO_ADDR
7042: GO 9141
7044: LD_INT 10
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7248
7052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 4
7063: PUSH
7064: LD_INT 5
7066: PUSH
7067: LD_INT 6
7069: PUSH
7070: LD_INT 7
7072: PUSH
7073: LD_INT 8
7075: PUSH
7076: LD_INT 9
7078: PUSH
7079: LD_INT 10
7081: PUSH
7082: LD_INT 11
7084: PUSH
7085: LD_INT 12
7087: PUSH
7088: LD_INT 13
7090: PUSH
7091: LD_INT 14
7093: PUSH
7094: LD_INT 15
7096: PUSH
7097: LD_INT 16
7099: PUSH
7100: LD_INT 17
7102: PUSH
7103: LD_INT 18
7105: PUSH
7106: LD_INT 19
7108: PUSH
7109: LD_INT 20
7111: PUSH
7112: LD_INT 21
7114: PUSH
7115: LD_INT 22
7117: PUSH
7118: LD_INT 23
7120: PUSH
7121: LD_INT 24
7123: PUSH
7124: LD_INT 25
7126: PUSH
7127: LD_INT 26
7129: PUSH
7130: LD_INT 28
7132: PUSH
7133: LD_INT 30
7135: PUSH
7136: LD_INT 31
7138: PUSH
7139: LD_INT 32
7141: PUSH
7142: LD_INT 36
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 101
7178: PUSH
7179: LD_INT 102
7181: PUSH
7182: LD_INT 103
7184: PUSH
7185: LD_INT 104
7187: PUSH
7188: LD_INT 105
7190: PUSH
7191: LD_INT 106
7193: PUSH
7194: LD_INT 107
7196: PUSH
7197: LD_INT 108
7199: PUSH
7200: LD_INT 109
7202: PUSH
7203: LD_INT 110
7205: PUSH
7206: LD_INT 111
7208: PUSH
7209: LD_INT 112
7211: PUSH
7212: LD_INT 114
7214: PUSH
7215: LD_INT 116
7217: PUSH
7218: LD_INT 117
7220: PUSH
7221: LD_INT 118
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 9141
7248: LD_INT 11
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7460
7256: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: LD_INT 6
7276: PUSH
7277: LD_INT 7
7279: PUSH
7280: LD_INT 8
7282: PUSH
7283: LD_INT 9
7285: PUSH
7286: LD_INT 10
7288: PUSH
7289: LD_INT 11
7291: PUSH
7292: LD_INT 12
7294: PUSH
7295: LD_INT 13
7297: PUSH
7298: LD_INT 14
7300: PUSH
7301: LD_INT 15
7303: PUSH
7304: LD_INT 16
7306: PUSH
7307: LD_INT 17
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 19
7315: PUSH
7316: LD_INT 20
7318: PUSH
7319: LD_INT 21
7321: PUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 23
7327: PUSH
7328: LD_INT 24
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 26
7336: PUSH
7337: LD_INT 28
7339: PUSH
7340: LD_INT 30
7342: PUSH
7343: LD_INT 31
7345: PUSH
7346: LD_INT 32
7348: PUSH
7349: LD_INT 34
7351: PUSH
7352: LD_INT 36
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 101
7390: PUSH
7391: LD_INT 102
7393: PUSH
7394: LD_INT 103
7396: PUSH
7397: LD_INT 104
7399: PUSH
7400: LD_INT 105
7402: PUSH
7403: LD_INT 106
7405: PUSH
7406: LD_INT 107
7408: PUSH
7409: LD_INT 108
7411: PUSH
7412: LD_INT 109
7414: PUSH
7415: LD_INT 110
7417: PUSH
7418: LD_INT 111
7420: PUSH
7421: LD_INT 112
7423: PUSH
7424: LD_INT 114
7426: PUSH
7427: LD_INT 116
7429: PUSH
7430: LD_INT 117
7432: PUSH
7433: LD_INT 118
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: ST_TO_ADDR
7458: GO 9141
7460: LD_INT 12
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7688
7468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7469: LD_ADDR_VAR 0 2
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 4
7485: PUSH
7486: LD_INT 5
7488: PUSH
7489: LD_INT 6
7491: PUSH
7492: LD_INT 7
7494: PUSH
7495: LD_INT 8
7497: PUSH
7498: LD_INT 9
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 11
7506: PUSH
7507: LD_INT 12
7509: PUSH
7510: LD_INT 13
7512: PUSH
7513: LD_INT 14
7515: PUSH
7516: LD_INT 15
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: LD_INT 17
7524: PUSH
7525: LD_INT 18
7527: PUSH
7528: LD_INT 19
7530: PUSH
7531: LD_INT 20
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 23
7542: PUSH
7543: LD_INT 24
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 26
7551: PUSH
7552: LD_INT 27
7554: PUSH
7555: LD_INT 28
7557: PUSH
7558: LD_INT 30
7560: PUSH
7561: LD_INT 31
7563: PUSH
7564: LD_INT 32
7566: PUSH
7567: LD_INT 33
7569: PUSH
7570: LD_INT 34
7572: PUSH
7573: LD_INT 36
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 101
7614: PUSH
7615: LD_INT 102
7617: PUSH
7618: LD_INT 103
7620: PUSH
7621: LD_INT 104
7623: PUSH
7624: LD_INT 105
7626: PUSH
7627: LD_INT 106
7629: PUSH
7630: LD_INT 107
7632: PUSH
7633: LD_INT 108
7635: PUSH
7636: LD_INT 109
7638: PUSH
7639: LD_INT 110
7641: PUSH
7642: LD_INT 111
7644: PUSH
7645: LD_INT 112
7647: PUSH
7648: LD_INT 113
7650: PUSH
7651: LD_INT 114
7653: PUSH
7654: LD_INT 116
7656: PUSH
7657: LD_INT 117
7659: PUSH
7660: LD_INT 118
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 9141
7688: LD_INT 13
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7904
7696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7697: LD_ADDR_VAR 0 2
7701: PUSH
7702: LD_INT 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 8
7719: PUSH
7720: LD_INT 9
7722: PUSH
7723: LD_INT 10
7725: PUSH
7726: LD_INT 11
7728: PUSH
7729: LD_INT 12
7731: PUSH
7732: LD_INT 14
7734: PUSH
7735: LD_INT 15
7737: PUSH
7738: LD_INT 16
7740: PUSH
7741: LD_INT 17
7743: PUSH
7744: LD_INT 18
7746: PUSH
7747: LD_INT 19
7749: PUSH
7750: LD_INT 20
7752: PUSH
7753: LD_INT 21
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 23
7761: PUSH
7762: LD_INT 24
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 26
7770: PUSH
7771: LD_INT 27
7773: PUSH
7774: LD_INT 28
7776: PUSH
7777: LD_INT 30
7779: PUSH
7780: LD_INT 31
7782: PUSH
7783: LD_INT 32
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 34
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 101
7830: PUSH
7831: LD_INT 102
7833: PUSH
7834: LD_INT 103
7836: PUSH
7837: LD_INT 104
7839: PUSH
7840: LD_INT 105
7842: PUSH
7843: LD_INT 106
7845: PUSH
7846: LD_INT 107
7848: PUSH
7849: LD_INT 108
7851: PUSH
7852: LD_INT 109
7854: PUSH
7855: LD_INT 110
7857: PUSH
7858: LD_INT 111
7860: PUSH
7861: LD_INT 112
7863: PUSH
7864: LD_INT 113
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: LD_INT 116
7872: PUSH
7873: LD_INT 117
7875: PUSH
7876: LD_INT 118
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: ST_TO_ADDR
7902: GO 9141
7904: LD_INT 14
7906: DOUBLE
7907: EQUAL
7908: IFTRUE 7912
7910: GO 8136
7912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 4
7929: PUSH
7930: LD_INT 5
7932: PUSH
7933: LD_INT 6
7935: PUSH
7936: LD_INT 7
7938: PUSH
7939: LD_INT 8
7941: PUSH
7942: LD_INT 9
7944: PUSH
7945: LD_INT 10
7947: PUSH
7948: LD_INT 11
7950: PUSH
7951: LD_INT 12
7953: PUSH
7954: LD_INT 13
7956: PUSH
7957: LD_INT 14
7959: PUSH
7960: LD_INT 15
7962: PUSH
7963: LD_INT 16
7965: PUSH
7966: LD_INT 17
7968: PUSH
7969: LD_INT 18
7971: PUSH
7972: LD_INT 19
7974: PUSH
7975: LD_INT 20
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 23
7986: PUSH
7987: LD_INT 24
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 26
7995: PUSH
7996: LD_INT 27
7998: PUSH
7999: LD_INT 28
8001: PUSH
8002: LD_INT 29
8004: PUSH
8005: LD_INT 30
8007: PUSH
8008: LD_INT 31
8010: PUSH
8011: LD_INT 32
8013: PUSH
8014: LD_INT 33
8016: PUSH
8017: LD_INT 34
8019: PUSH
8020: LD_INT 36
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 101
8062: PUSH
8063: LD_INT 102
8065: PUSH
8066: LD_INT 103
8068: PUSH
8069: LD_INT 104
8071: PUSH
8072: LD_INT 105
8074: PUSH
8075: LD_INT 106
8077: PUSH
8078: LD_INT 107
8080: PUSH
8081: LD_INT 108
8083: PUSH
8084: LD_INT 109
8086: PUSH
8087: LD_INT 110
8089: PUSH
8090: LD_INT 111
8092: PUSH
8093: LD_INT 112
8095: PUSH
8096: LD_INT 113
8098: PUSH
8099: LD_INT 114
8101: PUSH
8102: LD_INT 116
8104: PUSH
8105: LD_INT 117
8107: PUSH
8108: LD_INT 118
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: ST_TO_ADDR
8134: GO 9141
8136: LD_INT 15
8138: DOUBLE
8139: EQUAL
8140: IFTRUE 8144
8142: GO 8368
8144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8145: LD_ADDR_VAR 0 2
8149: PUSH
8150: LD_INT 1
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: LD_INT 6
8167: PUSH
8168: LD_INT 7
8170: PUSH
8171: LD_INT 8
8173: PUSH
8174: LD_INT 9
8176: PUSH
8177: LD_INT 10
8179: PUSH
8180: LD_INT 11
8182: PUSH
8183: LD_INT 12
8185: PUSH
8186: LD_INT 13
8188: PUSH
8189: LD_INT 14
8191: PUSH
8192: LD_INT 15
8194: PUSH
8195: LD_INT 16
8197: PUSH
8198: LD_INT 17
8200: PUSH
8201: LD_INT 18
8203: PUSH
8204: LD_INT 19
8206: PUSH
8207: LD_INT 20
8209: PUSH
8210: LD_INT 21
8212: PUSH
8213: LD_INT 22
8215: PUSH
8216: LD_INT 23
8218: PUSH
8219: LD_INT 24
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 26
8227: PUSH
8228: LD_INT 27
8230: PUSH
8231: LD_INT 28
8233: PUSH
8234: LD_INT 29
8236: PUSH
8237: LD_INT 30
8239: PUSH
8240: LD_INT 31
8242: PUSH
8243: LD_INT 32
8245: PUSH
8246: LD_INT 33
8248: PUSH
8249: LD_INT 34
8251: PUSH
8252: LD_INT 36
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 101
8294: PUSH
8295: LD_INT 102
8297: PUSH
8298: LD_INT 103
8300: PUSH
8301: LD_INT 104
8303: PUSH
8304: LD_INT 105
8306: PUSH
8307: LD_INT 106
8309: PUSH
8310: LD_INT 107
8312: PUSH
8313: LD_INT 108
8315: PUSH
8316: LD_INT 109
8318: PUSH
8319: LD_INT 110
8321: PUSH
8322: LD_INT 111
8324: PUSH
8325: LD_INT 112
8327: PUSH
8328: LD_INT 113
8330: PUSH
8331: LD_INT 114
8333: PUSH
8334: LD_INT 116
8336: PUSH
8337: LD_INT 117
8339: PUSH
8340: LD_INT 118
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: ST_TO_ADDR
8366: GO 9141
8368: LD_INT 16
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8512
8376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8377: LD_ADDR_VAR 0 2
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 4
8387: PUSH
8388: LD_INT 5
8390: PUSH
8391: LD_INT 7
8393: PUSH
8394: LD_INT 11
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: LD_INT 15
8402: PUSH
8403: LD_INT 16
8405: PUSH
8406: LD_INT 20
8408: PUSH
8409: LD_INT 21
8411: PUSH
8412: LD_INT 22
8414: PUSH
8415: LD_INT 23
8417: PUSH
8418: LD_INT 25
8420: PUSH
8421: LD_INT 26
8423: PUSH
8424: LD_INT 30
8426: PUSH
8427: LD_INT 31
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: LD_INT 33
8435: PUSH
8436: LD_INT 34
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 101
8462: PUSH
8463: LD_INT 102
8465: PUSH
8466: LD_INT 103
8468: PUSH
8469: LD_INT 106
8471: PUSH
8472: LD_INT 108
8474: PUSH
8475: LD_INT 112
8477: PUSH
8478: LD_INT 113
8480: PUSH
8481: LD_INT 114
8483: PUSH
8484: LD_INT 116
8486: PUSH
8487: LD_INT 117
8489: PUSH
8490: LD_INT 118
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: ST_TO_ADDR
8510: GO 9141
8512: LD_INT 17
8514: DOUBLE
8515: EQUAL
8516: IFTRUE 8520
8518: GO 8744
8520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: LD_INT 4
8537: PUSH
8538: LD_INT 5
8540: PUSH
8541: LD_INT 6
8543: PUSH
8544: LD_INT 7
8546: PUSH
8547: LD_INT 8
8549: PUSH
8550: LD_INT 9
8552: PUSH
8553: LD_INT 10
8555: PUSH
8556: LD_INT 11
8558: PUSH
8559: LD_INT 12
8561: PUSH
8562: LD_INT 13
8564: PUSH
8565: LD_INT 14
8567: PUSH
8568: LD_INT 15
8570: PUSH
8571: LD_INT 16
8573: PUSH
8574: LD_INT 17
8576: PUSH
8577: LD_INT 18
8579: PUSH
8580: LD_INT 19
8582: PUSH
8583: LD_INT 20
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 23
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 26
8603: PUSH
8604: LD_INT 27
8606: PUSH
8607: LD_INT 28
8609: PUSH
8610: LD_INT 29
8612: PUSH
8613: LD_INT 30
8615: PUSH
8616: LD_INT 31
8618: PUSH
8619: LD_INT 32
8621: PUSH
8622: LD_INT 33
8624: PUSH
8625: LD_INT 34
8627: PUSH
8628: LD_INT 36
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 101
8670: PUSH
8671: LD_INT 102
8673: PUSH
8674: LD_INT 103
8676: PUSH
8677: LD_INT 104
8679: PUSH
8680: LD_INT 105
8682: PUSH
8683: LD_INT 106
8685: PUSH
8686: LD_INT 107
8688: PUSH
8689: LD_INT 108
8691: PUSH
8692: LD_INT 109
8694: PUSH
8695: LD_INT 110
8697: PUSH
8698: LD_INT 111
8700: PUSH
8701: LD_INT 112
8703: PUSH
8704: LD_INT 113
8706: PUSH
8707: LD_INT 114
8709: PUSH
8710: LD_INT 116
8712: PUSH
8713: LD_INT 117
8715: PUSH
8716: LD_INT 118
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: ST_TO_ADDR
8742: GO 9141
8744: LD_INT 18
8746: DOUBLE
8747: EQUAL
8748: IFTRUE 8752
8750: GO 8900
8752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8753: LD_ADDR_VAR 0 2
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: LD_INT 4
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 7
8769: PUSH
8770: LD_INT 11
8772: PUSH
8773: LD_INT 12
8775: PUSH
8776: LD_INT 15
8778: PUSH
8779: LD_INT 16
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 26
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 31
8805: PUSH
8806: LD_INT 32
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 34
8814: PUSH
8815: LD_INT 35
8817: PUSH
8818: LD_INT 36
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 101
8846: PUSH
8847: LD_INT 102
8849: PUSH
8850: LD_INT 103
8852: PUSH
8853: LD_INT 106
8855: PUSH
8856: LD_INT 108
8858: PUSH
8859: LD_INT 112
8861: PUSH
8862: LD_INT 113
8864: PUSH
8865: LD_INT 114
8867: PUSH
8868: LD_INT 115
8870: PUSH
8871: LD_INT 116
8873: PUSH
8874: LD_INT 117
8876: PUSH
8877: LD_INT 118
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: ST_TO_ADDR
8898: GO 9141
8900: LD_INT 19
8902: DOUBLE
8903: EQUAL
8904: IFTRUE 8908
8906: GO 9140
8908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: LD_INT 2
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: LD_INT 4
8925: PUSH
8926: LD_INT 5
8928: PUSH
8929: LD_INT 6
8931: PUSH
8932: LD_INT 7
8934: PUSH
8935: LD_INT 8
8937: PUSH
8938: LD_INT 9
8940: PUSH
8941: LD_INT 10
8943: PUSH
8944: LD_INT 11
8946: PUSH
8947: LD_INT 12
8949: PUSH
8950: LD_INT 13
8952: PUSH
8953: LD_INT 14
8955: PUSH
8956: LD_INT 15
8958: PUSH
8959: LD_INT 16
8961: PUSH
8962: LD_INT 17
8964: PUSH
8965: LD_INT 18
8967: PUSH
8968: LD_INT 19
8970: PUSH
8971: LD_INT 20
8973: PUSH
8974: LD_INT 21
8976: PUSH
8977: LD_INT 22
8979: PUSH
8980: LD_INT 23
8982: PUSH
8983: LD_INT 24
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 26
8991: PUSH
8992: LD_INT 27
8994: PUSH
8995: LD_INT 28
8997: PUSH
8998: LD_INT 29
9000: PUSH
9001: LD_INT 30
9003: PUSH
9004: LD_INT 31
9006: PUSH
9007: LD_INT 32
9009: PUSH
9010: LD_INT 33
9012: PUSH
9013: LD_INT 34
9015: PUSH
9016: LD_INT 35
9018: PUSH
9019: LD_INT 36
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 101
9062: PUSH
9063: LD_INT 102
9065: PUSH
9066: LD_INT 103
9068: PUSH
9069: LD_INT 104
9071: PUSH
9072: LD_INT 105
9074: PUSH
9075: LD_INT 106
9077: PUSH
9078: LD_INT 107
9080: PUSH
9081: LD_INT 108
9083: PUSH
9084: LD_INT 109
9086: PUSH
9087: LD_INT 110
9089: PUSH
9090: LD_INT 111
9092: PUSH
9093: LD_INT 112
9095: PUSH
9096: LD_INT 113
9098: PUSH
9099: LD_INT 114
9101: PUSH
9102: LD_INT 115
9104: PUSH
9105: LD_INT 116
9107: PUSH
9108: LD_INT 117
9110: PUSH
9111: LD_INT 118
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: ST_TO_ADDR
9138: GO 9141
9140: POP
// end else
9141: GO 9372
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9143: LD_ADDR_VAR 0 2
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: LD_INT 2
9153: PUSH
9154: LD_INT 3
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: LD_INT 5
9162: PUSH
9163: LD_INT 6
9165: PUSH
9166: LD_INT 7
9168: PUSH
9169: LD_INT 8
9171: PUSH
9172: LD_INT 9
9174: PUSH
9175: LD_INT 10
9177: PUSH
9178: LD_INT 11
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: LD_INT 13
9186: PUSH
9187: LD_INT 14
9189: PUSH
9190: LD_INT 15
9192: PUSH
9193: LD_INT 16
9195: PUSH
9196: LD_INT 17
9198: PUSH
9199: LD_INT 18
9201: PUSH
9202: LD_INT 19
9204: PUSH
9205: LD_INT 20
9207: PUSH
9208: LD_INT 21
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 23
9216: PUSH
9217: LD_INT 24
9219: PUSH
9220: LD_INT 25
9222: PUSH
9223: LD_INT 26
9225: PUSH
9226: LD_INT 27
9228: PUSH
9229: LD_INT 28
9231: PUSH
9232: LD_INT 29
9234: PUSH
9235: LD_INT 30
9237: PUSH
9238: LD_INT 31
9240: PUSH
9241: LD_INT 32
9243: PUSH
9244: LD_INT 33
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 35
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 101
9296: PUSH
9297: LD_INT 102
9299: PUSH
9300: LD_INT 103
9302: PUSH
9303: LD_INT 104
9305: PUSH
9306: LD_INT 105
9308: PUSH
9309: LD_INT 106
9311: PUSH
9312: LD_INT 107
9314: PUSH
9315: LD_INT 108
9317: PUSH
9318: LD_INT 109
9320: PUSH
9321: LD_INT 110
9323: PUSH
9324: LD_INT 111
9326: PUSH
9327: LD_INT 112
9329: PUSH
9330: LD_INT 113
9332: PUSH
9333: LD_INT 114
9335: PUSH
9336: LD_INT 115
9338: PUSH
9339: LD_INT 116
9341: PUSH
9342: LD_INT 117
9344: PUSH
9345: LD_INT 118
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: ST_TO_ADDR
// if result then
9372: LD_VAR 0 2
9376: IFFALSE 10162
// begin normal :=  ;
9378: LD_ADDR_VAR 0 5
9382: PUSH
9383: LD_STRING 
9385: ST_TO_ADDR
// hardcore :=  ;
9386: LD_ADDR_VAR 0 6
9390: PUSH
9391: LD_STRING 
9393: ST_TO_ADDR
// active :=  ;
9394: LD_ADDR_VAR 0 7
9398: PUSH
9399: LD_STRING 
9401: ST_TO_ADDR
// for i = 1 to normalCounter do
9402: LD_ADDR_VAR 0 8
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_EXP 41
9416: PUSH
9417: FOR_TO
9418: IFFALSE 9519
// begin tmp := 0 ;
9420: LD_ADDR_VAR 0 3
9424: PUSH
9425: LD_STRING 0
9427: ST_TO_ADDR
// if result [ 1 ] then
9428: LD_VAR 0 2
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: IFFALSE 9501
// if result [ 1 ] [ 1 ] = i then
9438: LD_VAR 0 2
9442: PUSH
9443: LD_INT 1
9445: ARRAY
9446: PUSH
9447: LD_INT 1
9449: ARRAY
9450: PUSH
9451: LD_VAR 0 8
9455: EQUAL
9456: IFFALSE 9501
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9458: LD_ADDR_VAR 0 2
9462: PUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: CALL_OW 3
9487: PPUSH
9488: CALL_OW 1
9492: ST_TO_ADDR
// tmp := 1 ;
9493: LD_ADDR_VAR 0 3
9497: PUSH
9498: LD_STRING 1
9500: ST_TO_ADDR
// end ; normal := normal & tmp ;
9501: LD_ADDR_VAR 0 5
9505: PUSH
9506: LD_VAR 0 5
9510: PUSH
9511: LD_VAR 0 3
9515: STR
9516: ST_TO_ADDR
// end ;
9517: GO 9417
9519: POP
9520: POP
// for i = 1 to hardcoreCounter do
9521: LD_ADDR_VAR 0 8
9525: PUSH
9526: DOUBLE
9527: LD_INT 1
9529: DEC
9530: ST_TO_ADDR
9531: LD_EXP 42
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9642
// begin tmp := 0 ;
9539: LD_ADDR_VAR 0 3
9543: PUSH
9544: LD_STRING 0
9546: ST_TO_ADDR
// if result [ 2 ] then
9547: LD_VAR 0 2
9551: PUSH
9552: LD_INT 2
9554: ARRAY
9555: IFFALSE 9624
// if result [ 2 ] [ 1 ] = 100 + i then
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 2
9564: ARRAY
9565: PUSH
9566: LD_INT 1
9568: ARRAY
9569: PUSH
9570: LD_INT 100
9572: PUSH
9573: LD_VAR 0 8
9577: PLUS
9578: EQUAL
9579: IFFALSE 9624
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9581: LD_ADDR_VAR 0 2
9585: PUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: LD_INT 2
9593: PPUSH
9594: LD_VAR 0 2
9598: PUSH
9599: LD_INT 2
9601: ARRAY
9602: PPUSH
9603: LD_INT 1
9605: PPUSH
9606: CALL_OW 3
9610: PPUSH
9611: CALL_OW 1
9615: ST_TO_ADDR
// tmp := 1 ;
9616: LD_ADDR_VAR 0 3
9620: PUSH
9621: LD_STRING 1
9623: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9624: LD_ADDR_VAR 0 6
9628: PUSH
9629: LD_VAR 0 6
9633: PUSH
9634: LD_VAR 0 3
9638: STR
9639: ST_TO_ADDR
// end ;
9640: GO 9536
9642: POP
9643: POP
// if isGameLoad then
9644: LD_VAR 0 1
9648: IFFALSE 10123
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9650: LD_ADDR_VAR 0 4
9654: PUSH
9655: LD_EXP 45
9659: PUSH
9660: LD_EXP 44
9664: PUSH
9665: LD_EXP 46
9669: PUSH
9670: LD_EXP 43
9674: PUSH
9675: LD_EXP 47
9679: PUSH
9680: LD_EXP 48
9684: PUSH
9685: LD_EXP 49
9689: PUSH
9690: LD_EXP 50
9694: PUSH
9695: LD_EXP 51
9699: PUSH
9700: LD_EXP 52
9704: PUSH
9705: LD_EXP 53
9709: PUSH
9710: LD_EXP 54
9714: PUSH
9715: LD_EXP 55
9719: PUSH
9720: LD_EXP 56
9724: PUSH
9725: LD_EXP 64
9729: PUSH
9730: LD_EXP 65
9734: PUSH
9735: LD_EXP 66
9739: PUSH
9740: LD_EXP 67
9744: PUSH
9745: LD_EXP 69
9749: PUSH
9750: LD_EXP 70
9754: PUSH
9755: LD_EXP 71
9759: PUSH
9760: LD_EXP 74
9764: PUSH
9765: LD_EXP 76
9769: PUSH
9770: LD_EXP 77
9774: PUSH
9775: LD_EXP 78
9779: PUSH
9780: LD_EXP 80
9784: PUSH
9785: LD_EXP 81
9789: PUSH
9790: LD_EXP 84
9794: PUSH
9795: LD_EXP 85
9799: PUSH
9800: LD_EXP 86
9804: PUSH
9805: LD_EXP 87
9809: PUSH
9810: LD_EXP 88
9814: PUSH
9815: LD_EXP 89
9819: PUSH
9820: LD_EXP 90
9824: PUSH
9825: LD_EXP 91
9829: PUSH
9830: LD_EXP 92
9834: PUSH
9835: LD_EXP 57
9839: PUSH
9840: LD_EXP 58
9844: PUSH
9845: LD_EXP 61
9849: PUSH
9850: LD_EXP 62
9854: PUSH
9855: LD_EXP 63
9859: PUSH
9860: LD_EXP 59
9864: PUSH
9865: LD_EXP 60
9869: PUSH
9870: LD_EXP 68
9874: PUSH
9875: LD_EXP 72
9879: PUSH
9880: LD_EXP 73
9884: PUSH
9885: LD_EXP 75
9889: PUSH
9890: LD_EXP 79
9894: PUSH
9895: LD_EXP 82
9899: PUSH
9900: LD_EXP 83
9904: PUSH
9905: LD_EXP 93
9909: PUSH
9910: LD_EXP 94
9914: PUSH
9915: LD_EXP 95
9919: PUSH
9920: LD_EXP 96
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: ST_TO_ADDR
// tmp :=  ;
9981: LD_ADDR_VAR 0 3
9985: PUSH
9986: LD_STRING 
9988: ST_TO_ADDR
// for i = 1 to normalCounter do
9989: LD_ADDR_VAR 0 8
9993: PUSH
9994: DOUBLE
9995: LD_INT 1
9997: DEC
9998: ST_TO_ADDR
9999: LD_EXP 41
10003: PUSH
10004: FOR_TO
10005: IFFALSE 10041
// begin if flags [ i ] then
10007: LD_VAR 0 4
10011: PUSH
10012: LD_VAR 0 8
10016: ARRAY
10017: IFFALSE 10039
// tmp := tmp & i & ; ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_VAR 0 3
10028: PUSH
10029: LD_VAR 0 8
10033: STR
10034: PUSH
10035: LD_STRING ;
10037: STR
10038: ST_TO_ADDR
// end ;
10039: GO 10004
10041: POP
10042: POP
// for i = 1 to hardcoreCounter do
10043: LD_ADDR_VAR 0 8
10047: PUSH
10048: DOUBLE
10049: LD_INT 1
10051: DEC
10052: ST_TO_ADDR
10053: LD_EXP 42
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10105
// begin if flags [ normalCounter + i ] then
10061: LD_VAR 0 4
10065: PUSH
10066: LD_EXP 41
10070: PUSH
10071: LD_VAR 0 8
10075: PLUS
10076: ARRAY
10077: IFFALSE 10103
// tmp := tmp & ( 100 + i ) & ; ;
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_VAR 0 3
10088: PUSH
10089: LD_INT 100
10091: PUSH
10092: LD_VAR 0 8
10096: PLUS
10097: STR
10098: PUSH
10099: LD_STRING ;
10101: STR
10102: ST_TO_ADDR
// end ;
10103: GO 10058
10105: POP
10106: POP
// if tmp then
10107: LD_VAR 0 3
10111: IFFALSE 10123
// active := tmp ;
10113: LD_ADDR_VAR 0 7
10117: PUSH
10118: LD_VAR 0 3
10122: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10123: LD_STRING getStreamItemsFromMission("
10125: PUSH
10126: LD_VAR 0 5
10130: STR
10131: PUSH
10132: LD_STRING ","
10134: STR
10135: PUSH
10136: LD_VAR 0 6
10140: STR
10141: PUSH
10142: LD_STRING ","
10144: STR
10145: PUSH
10146: LD_VAR 0 7
10150: STR
10151: PUSH
10152: LD_STRING ")
10154: STR
10155: PPUSH
10156: CALL_OW 559
// end else
10160: GO 10169
// ToLua ( getStreamItemsFromMission("","","") ) ;
10162: LD_STRING getStreamItemsFromMission("","","")
10164: PPUSH
10165: CALL_OW 559
// end ;
10169: LD_VAR 0 2
10173: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10174: LD_EXP 40
10178: PUSH
10179: LD_EXP 45
10183: AND
10184: IFFALSE 10308
10186: GO 10188
10188: DISABLE
10189: LD_INT 0
10191: PPUSH
10192: PPUSH
// begin enable ;
10193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10194: LD_ADDR_VAR 0 2
10198: PUSH
10199: LD_INT 22
10201: PUSH
10202: LD_OWVAR 2
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: LD_INT 34
10216: PUSH
10217: LD_INT 7
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 45
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 28
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 47
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: ST_TO_ADDR
// if not tmp then
10270: LD_VAR 0 2
10274: NOT
10275: IFFALSE 10279
// exit ;
10277: GO 10308
// for i in tmp do
10279: LD_ADDR_VAR 0 1
10283: PUSH
10284: LD_VAR 0 2
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10306
// begin SetLives ( i , 0 ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_INT 0
10299: PPUSH
10300: CALL_OW 234
// end ;
10304: GO 10289
10306: POP
10307: POP
// end ;
10308: PPOPN 2
10310: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10311: LD_EXP 40
10315: PUSH
10316: LD_EXP 46
10320: AND
10321: IFFALSE 10405
10323: GO 10325
10325: DISABLE
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// begin enable ;
10330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10331: LD_ADDR_VAR 0 2
10335: PUSH
10336: LD_INT 22
10338: PUSH
10339: LD_OWVAR 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 32
10350: PUSH
10351: LD_INT 3
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 69
10366: ST_TO_ADDR
// if not tmp then
10367: LD_VAR 0 2
10371: NOT
10372: IFFALSE 10376
// exit ;
10374: GO 10405
// for i in tmp do
10376: LD_ADDR_VAR 0 1
10380: PUSH
10381: LD_VAR 0 2
10385: PUSH
10386: FOR_IN
10387: IFFALSE 10403
// begin SetLives ( i , 0 ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_INT 0
10396: PPUSH
10397: CALL_OW 234
// end ;
10401: GO 10386
10403: POP
10404: POP
// end ;
10405: PPOPN 2
10407: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10408: LD_EXP 40
10412: PUSH
10413: LD_EXP 43
10417: AND
10418: IFFALSE 10511
10420: GO 10422
10422: DISABLE
10423: LD_INT 0
10425: PPUSH
// begin enable ;
10426: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10427: LD_ADDR_VAR 0 1
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_OWVAR 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 5
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 25
10459: PUSH
10460: LD_INT 9
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 25
10469: PUSH
10470: LD_INT 8
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: PUSH
10492: FOR_IN
10493: IFFALSE 10509
// begin SetClass ( i , 1 ) ;
10495: LD_VAR 0 1
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 336
// end ;
10507: GO 10492
10509: POP
10510: POP
// end ;
10511: PPOPN 1
10513: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10514: LD_EXP 40
10518: PUSH
10519: LD_EXP 44
10523: AND
10524: PUSH
10525: LD_OWVAR 65
10529: PUSH
10530: LD_INT 7
10532: LESS
10533: AND
10534: IFFALSE 10548
10536: GO 10538
10538: DISABLE
// begin enable ;
10539: ENABLE
// game_speed := 7 ;
10540: LD_ADDR_OWVAR 65
10544: PUSH
10545: LD_INT 7
10547: ST_TO_ADDR
// end ;
10548: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10549: LD_EXP 40
10553: PUSH
10554: LD_EXP 47
10558: AND
10559: IFFALSE 10761
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_INT 81
10576: PUSH
10577: LD_OWVAR 2
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 69
10604: ST_TO_ADDR
// if not tmp then
10605: LD_VAR 0 3
10609: NOT
10610: IFFALSE 10614
// exit ;
10612: GO 10761
// if tmp > 5 then
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 5
10621: GREATER
10622: IFFALSE 10634
// k := 5 else
10624: LD_ADDR_VAR 0 2
10628: PUSH
10629: LD_INT 5
10631: ST_TO_ADDR
10632: GO 10644
// k := tmp ;
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: LD_VAR 0 3
10643: ST_TO_ADDR
// for i := 1 to k do
10644: LD_ADDR_VAR 0 1
10648: PUSH
10649: DOUBLE
10650: LD_INT 1
10652: DEC
10653: ST_TO_ADDR
10654: LD_VAR 0 2
10658: PUSH
10659: FOR_TO
10660: IFFALSE 10759
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10662: LD_VAR 0 3
10666: PUSH
10667: LD_VAR 0 1
10671: ARRAY
10672: PPUSH
10673: LD_VAR 0 1
10677: PUSH
10678: LD_INT 4
10680: MOD
10681: PUSH
10682: LD_INT 1
10684: PLUS
10685: PPUSH
10686: CALL_OW 259
10690: PUSH
10691: LD_INT 10
10693: LESS
10694: IFFALSE 10757
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10696: LD_VAR 0 3
10700: PUSH
10701: LD_VAR 0 1
10705: ARRAY
10706: PPUSH
10707: LD_VAR 0 1
10711: PUSH
10712: LD_INT 4
10714: MOD
10715: PUSH
10716: LD_INT 1
10718: PLUS
10719: PPUSH
10720: LD_VAR 0 3
10724: PUSH
10725: LD_VAR 0 1
10729: ARRAY
10730: PPUSH
10731: LD_VAR 0 1
10735: PUSH
10736: LD_INT 4
10738: MOD
10739: PUSH
10740: LD_INT 1
10742: PLUS
10743: PPUSH
10744: CALL_OW 259
10748: PUSH
10749: LD_INT 1
10751: PLUS
10752: PPUSH
10753: CALL_OW 237
10757: GO 10659
10759: POP
10760: POP
// end ;
10761: PPOPN 3
10763: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10764: LD_EXP 40
10768: PUSH
10769: LD_EXP 48
10773: AND
10774: IFFALSE 10794
10776: GO 10778
10778: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10779: LD_INT 4
10781: PPUSH
10782: LD_OWVAR 2
10786: PPUSH
10787: LD_INT 0
10789: PPUSH
10790: CALL_OW 324
10794: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10795: LD_EXP 40
10799: PUSH
10800: LD_EXP 77
10804: AND
10805: IFFALSE 10825
10807: GO 10809
10809: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10810: LD_INT 19
10812: PPUSH
10813: LD_OWVAR 2
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 324
10825: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10826: LD_EXP 40
10830: PUSH
10831: LD_EXP 49
10835: AND
10836: IFFALSE 10938
10838: GO 10840
10840: DISABLE
10841: LD_INT 0
10843: PPUSH
10844: PPUSH
// begin enable ;
10845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_INT 22
10853: PUSH
10854: LD_OWVAR 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 2
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 11
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 34
10878: PUSH
10879: LD_INT 30
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: ST_TO_ADDR
// if not tmp then
10900: LD_VAR 0 2
10904: NOT
10905: IFFALSE 10909
// exit ;
10907: GO 10938
// for i in tmp do
10909: LD_ADDR_VAR 0 1
10913: PUSH
10914: LD_VAR 0 2
10918: PUSH
10919: FOR_IN
10920: IFFALSE 10936
// begin SetLives ( i , 0 ) ;
10922: LD_VAR 0 1
10926: PPUSH
10927: LD_INT 0
10929: PPUSH
10930: CALL_OW 234
// end ;
10934: GO 10919
10936: POP
10937: POP
// end ;
10938: PPOPN 2
10940: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10941: LD_EXP 40
10945: PUSH
10946: LD_EXP 50
10950: AND
10951: IFFALSE 10971
10953: GO 10955
10955: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10956: LD_INT 32
10958: PPUSH
10959: LD_OWVAR 2
10963: PPUSH
10964: LD_INT 0
10966: PPUSH
10967: CALL_OW 324
10971: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10972: LD_EXP 40
10976: PUSH
10977: LD_EXP 51
10981: AND
10982: IFFALSE 11163
10984: GO 10986
10986: DISABLE
10987: LD_INT 0
10989: PPUSH
10990: PPUSH
10991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: LD_INT 22
10999: PUSH
11000: LD_OWVAR 2
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 33
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: ST_TO_ADDR
// if not tmp then
11028: LD_VAR 0 2
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11163
// side := 0 ;
11037: LD_ADDR_VAR 0 3
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// for i := 1 to 8 do
11045: LD_ADDR_VAR 0 1
11049: PUSH
11050: DOUBLE
11051: LD_INT 1
11053: DEC
11054: ST_TO_ADDR
11055: LD_INT 8
11057: PUSH
11058: FOR_TO
11059: IFFALSE 11107
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11061: LD_OWVAR 2
11065: PUSH
11066: LD_VAR 0 1
11070: NONEQUAL
11071: PUSH
11072: LD_OWVAR 2
11076: PPUSH
11077: LD_VAR 0 1
11081: PPUSH
11082: CALL_OW 81
11086: PUSH
11087: LD_INT 2
11089: EQUAL
11090: AND
11091: IFFALSE 11105
// begin side := i ;
11093: LD_ADDR_VAR 0 3
11097: PUSH
11098: LD_VAR 0 1
11102: ST_TO_ADDR
// break ;
11103: GO 11107
// end ;
11105: GO 11058
11107: POP
11108: POP
// if not side then
11109: LD_VAR 0 3
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11163
// for i := 1 to tmp do
11118: LD_ADDR_VAR 0 1
11122: PUSH
11123: DOUBLE
11124: LD_INT 1
11126: DEC
11127: ST_TO_ADDR
11128: LD_VAR 0 2
11132: PUSH
11133: FOR_TO
11134: IFFALSE 11161
// if Prob ( 60 ) then
11136: LD_INT 60
11138: PPUSH
11139: CALL_OW 13
11143: IFFALSE 11159
// SetSide ( i , side ) ;
11145: LD_VAR 0 1
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: CALL_OW 235
11159: GO 11133
11161: POP
11162: POP
// end ;
11163: PPOPN 3
11165: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11166: LD_EXP 40
11170: PUSH
11171: LD_EXP 53
11175: AND
11176: IFFALSE 11295
11178: GO 11180
11180: DISABLE
11181: LD_INT 0
11183: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11184: LD_ADDR_VAR 0 1
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_OWVAR 2
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 21
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 3
11213: PUSH
11214: LD_INT 23
11216: PUSH
11217: LD_INT 0
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 69
11237: PUSH
11238: FOR_IN
11239: IFFALSE 11293
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11241: LD_VAR 0 1
11245: PPUSH
11246: CALL_OW 257
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: IN
11269: IFFALSE 11291
// SetClass ( un , rand ( 1 , 4 ) ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: LD_INT 4
11281: PPUSH
11282: CALL_OW 12
11286: PPUSH
11287: CALL_OW 336
11291: GO 11238
11293: POP
11294: POP
// end ;
11295: PPOPN 1
11297: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11298: LD_EXP 40
11302: PUSH
11303: LD_EXP 52
11307: AND
11308: IFFALSE 11387
11310: GO 11312
11312: DISABLE
11313: LD_INT 0
11315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11316: LD_ADDR_VAR 0 1
11320: PUSH
11321: LD_INT 22
11323: PUSH
11324: LD_OWVAR 2
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 21
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 69
11351: ST_TO_ADDR
// if not tmp then
11352: LD_VAR 0 1
11356: NOT
11357: IFFALSE 11361
// exit ;
11359: GO 11387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11361: LD_VAR 0 1
11365: PUSH
11366: LD_INT 1
11368: PPUSH
11369: LD_VAR 0 1
11373: PPUSH
11374: CALL_OW 12
11378: ARRAY
11379: PPUSH
11380: LD_INT 100
11382: PPUSH
11383: CALL_OW 234
// end ;
11387: PPOPN 1
11389: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11390: LD_EXP 40
11394: PUSH
11395: LD_EXP 54
11399: AND
11400: IFFALSE 11498
11402: GO 11404
11404: DISABLE
11405: LD_INT 0
11407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11408: LD_ADDR_VAR 0 1
11412: PUSH
11413: LD_INT 22
11415: PUSH
11416: LD_OWVAR 2
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 21
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 69
11443: ST_TO_ADDR
// if not tmp then
11444: LD_VAR 0 1
11448: NOT
11449: IFFALSE 11453
// exit ;
11451: GO 11498
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11453: LD_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 12
11470: ARRAY
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: LD_INT 4
11477: PPUSH
11478: CALL_OW 12
11482: PPUSH
11483: LD_INT 3000
11485: PPUSH
11486: LD_INT 9000
11488: PPUSH
11489: CALL_OW 12
11493: PPUSH
11494: CALL_OW 492
// end ;
11498: PPOPN 1
11500: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11501: LD_EXP 40
11505: PUSH
11506: LD_EXP 55
11510: AND
11511: IFFALSE 11531
11513: GO 11515
11515: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11516: LD_INT 1
11518: PPUSH
11519: LD_OWVAR 2
11523: PPUSH
11524: LD_INT 0
11526: PPUSH
11527: CALL_OW 324
11531: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11532: LD_EXP 40
11536: PUSH
11537: LD_EXP 56
11541: AND
11542: IFFALSE 11625
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11551: LD_ADDR_VAR 0 2
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_OWVAR 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 21
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: ST_TO_ADDR
// if not tmp then
11587: LD_VAR 0 2
11591: NOT
11592: IFFALSE 11596
// exit ;
11594: GO 11625
// for i in tmp do
11596: LD_ADDR_VAR 0 1
11600: PUSH
11601: LD_VAR 0 2
11605: PUSH
11606: FOR_IN
11607: IFFALSE 11623
// SetBLevel ( i , 10 ) ;
11609: LD_VAR 0 1
11613: PPUSH
11614: LD_INT 10
11616: PPUSH
11617: CALL_OW 241
11621: GO 11606
11623: POP
11624: POP
// end ;
11625: PPOPN 2
11627: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11628: LD_EXP 40
11632: PUSH
11633: LD_EXP 57
11637: AND
11638: IFFALSE 11749
11640: GO 11642
11642: DISABLE
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
11647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11648: LD_ADDR_VAR 0 3
11652: PUSH
11653: LD_INT 22
11655: PUSH
11656: LD_OWVAR 2
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 25
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 69
11683: ST_TO_ADDR
// if not tmp then
11684: LD_VAR 0 3
11688: NOT
11689: IFFALSE 11693
// exit ;
11691: GO 11749
// un := tmp [ rand ( 1 , tmp ) ] ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_VAR 0 3
11702: PUSH
11703: LD_INT 1
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: CALL_OW 12
11715: ARRAY
11716: ST_TO_ADDR
// if Crawls ( un ) then
11717: LD_VAR 0 2
11721: PPUSH
11722: CALL_OW 318
11726: IFFALSE 11737
// ComWalk ( un ) ;
11728: LD_VAR 0 2
11732: PPUSH
11733: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_INT 5
11744: PPUSH
11745: CALL_OW 336
// end ;
11749: PPOPN 3
11751: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11752: LD_EXP 40
11756: PUSH
11757: LD_EXP 58
11761: AND
11762: PUSH
11763: LD_OWVAR 67
11767: PUSH
11768: LD_INT 4
11770: LESS
11771: AND
11772: IFFALSE 11791
11774: GO 11776
11776: DISABLE
// begin Difficulty := Difficulty + 1 ;
11777: LD_ADDR_OWVAR 67
11781: PUSH
11782: LD_OWVAR 67
11786: PUSH
11787: LD_INT 1
11789: PLUS
11790: ST_TO_ADDR
// end ;
11791: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11792: LD_EXP 40
11796: PUSH
11797: LD_EXP 59
11801: AND
11802: IFFALSE 11905
11804: GO 11806
11806: DISABLE
11807: LD_INT 0
11809: PPUSH
// begin for i := 1 to 5 do
11810: LD_ADDR_VAR 0 1
11814: PUSH
11815: DOUBLE
11816: LD_INT 1
11818: DEC
11819: ST_TO_ADDR
11820: LD_INT 5
11822: PUSH
11823: FOR_TO
11824: IFFALSE 11903
// begin uc_nation := nation_nature ;
11826: LD_ADDR_OWVAR 21
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// uc_side := 0 ;
11834: LD_ADDR_OWVAR 20
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11842: LD_ADDR_OWVAR 29
11846: PUSH
11847: LD_INT 12
11849: PUSH
11850: LD_INT 12
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: ST_TO_ADDR
// hc_agressivity := 20 ;
11857: LD_ADDR_OWVAR 35
11861: PUSH
11862: LD_INT 20
11864: ST_TO_ADDR
// hc_class := class_tiger ;
11865: LD_ADDR_OWVAR 28
11869: PUSH
11870: LD_INT 14
11872: ST_TO_ADDR
// hc_gallery :=  ;
11873: LD_ADDR_OWVAR 33
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// hc_name :=  ;
11881: LD_ADDR_OWVAR 26
11885: PUSH
11886: LD_STRING 
11888: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11889: CALL_OW 44
11893: PPUSH
11894: LD_INT 0
11896: PPUSH
11897: CALL_OW 51
// end ;
11901: GO 11823
11903: POP
11904: POP
// end ;
11905: PPOPN 1
11907: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11908: LD_EXP 40
11912: PUSH
11913: LD_EXP 60
11917: AND
11918: IFFALSE 11927
11920: GO 11922
11922: DISABLE
// StreamSibBomb ;
11923: CALL 11928 0 0
11927: END
// export function StreamSibBomb ; var i , x , y ; begin
11928: LD_INT 0
11930: PPUSH
11931: PPUSH
11932: PPUSH
11933: PPUSH
// result := false ;
11934: LD_ADDR_VAR 0 1
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// for i := 1 to 16 do
11942: LD_ADDR_VAR 0 2
11946: PUSH
11947: DOUBLE
11948: LD_INT 1
11950: DEC
11951: ST_TO_ADDR
11952: LD_INT 16
11954: PUSH
11955: FOR_TO
11956: IFFALSE 12155
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 10
11965: PUSH
11966: LD_INT 20
11968: PUSH
11969: LD_INT 30
11971: PUSH
11972: LD_INT 40
11974: PUSH
11975: LD_INT 50
11977: PUSH
11978: LD_INT 60
11980: PUSH
11981: LD_INT 70
11983: PUSH
11984: LD_INT 80
11986: PUSH
11987: LD_INT 90
11989: PUSH
11990: LD_INT 100
11992: PUSH
11993: LD_INT 110
11995: PUSH
11996: LD_INT 120
11998: PUSH
11999: LD_INT 130
12001: PUSH
12002: LD_INT 140
12004: PUSH
12005: LD_INT 150
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 1
12027: PPUSH
12028: LD_INT 15
12030: PPUSH
12031: CALL_OW 12
12035: ARRAY
12036: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12037: LD_ADDR_VAR 0 4
12041: PUSH
12042: LD_INT 10
12044: PUSH
12045: LD_INT 20
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 40
12053: PUSH
12054: LD_INT 50
12056: PUSH
12057: LD_INT 60
12059: PUSH
12060: LD_INT 70
12062: PUSH
12063: LD_INT 80
12065: PUSH
12066: LD_INT 90
12068: PUSH
12069: LD_INT 100
12071: PUSH
12072: LD_INT 110
12074: PUSH
12075: LD_INT 120
12077: PUSH
12078: LD_INT 130
12080: PUSH
12081: LD_INT 140
12083: PUSH
12084: LD_INT 150
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 1
12106: PPUSH
12107: LD_INT 15
12109: PPUSH
12110: CALL_OW 12
12114: ARRAY
12115: ST_TO_ADDR
// if ValidHex ( x , y ) then
12116: LD_VAR 0 3
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: CALL_OW 488
12130: IFFALSE 12153
// begin result := [ x , y ] ;
12132: LD_ADDR_VAR 0 1
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: LD_VAR 0 4
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: ST_TO_ADDR
// break ;
12151: GO 12155
// end ; end ;
12153: GO 11955
12155: POP
12156: POP
// if result then
12157: LD_VAR 0 1
12161: IFFALSE 12221
// begin ToLua ( playSibBomb() ) ;
12163: LD_STRING playSibBomb()
12165: PPUSH
12166: CALL_OW 559
// wait ( 0 0$14 ) ;
12170: LD_INT 490
12172: PPUSH
12173: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12177: LD_VAR 0 1
12181: PUSH
12182: LD_INT 1
12184: ARRAY
12185: PPUSH
12186: LD_VAR 0 1
12190: PUSH
12191: LD_INT 2
12193: ARRAY
12194: PPUSH
12195: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12199: LD_VAR 0 1
12203: PUSH
12204: LD_INT 1
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 2
12215: ARRAY
12216: PPUSH
12217: CALL_OW 429
// end ; end ;
12221: LD_VAR 0 1
12225: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12226: LD_EXP 40
12230: PUSH
12231: LD_EXP 62
12235: AND
12236: IFFALSE 12248
12238: GO 12240
12240: DISABLE
// YouLost (  ) ;
12241: LD_STRING 
12243: PPUSH
12244: CALL_OW 104
12248: END
// every 0 0$1 trigger StreamModeActive and sFog do
12249: LD_EXP 40
12253: PUSH
12254: LD_EXP 61
12258: AND
12259: IFFALSE 12273
12261: GO 12263
12263: DISABLE
// FogOff ( your_side ) ;
12264: LD_OWVAR 2
12268: PPUSH
12269: CALL_OW 344
12273: END
// every 0 0$1 trigger StreamModeActive and sSun do
12274: LD_EXP 40
12278: PUSH
12279: LD_EXP 63
12283: AND
12284: IFFALSE 12312
12286: GO 12288
12288: DISABLE
// begin solar_recharge_percent := 0 ;
12289: LD_ADDR_OWVAR 79
12293: PUSH
12294: LD_INT 0
12296: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12297: LD_INT 10500
12299: PPUSH
12300: CALL_OW 67
// solar_recharge_percent := 100 ;
12304: LD_ADDR_OWVAR 79
12308: PUSH
12309: LD_INT 100
12311: ST_TO_ADDR
// end ;
12312: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12313: LD_EXP 40
12317: PUSH
12318: LD_EXP 64
12322: AND
12323: IFFALSE 12562
12325: GO 12327
12327: DISABLE
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
// begin tmp := [ ] ;
12333: LD_ADDR_VAR 0 3
12337: PUSH
12338: EMPTY
12339: ST_TO_ADDR
// for i := 1 to 6 do
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: DOUBLE
12346: LD_INT 1
12348: DEC
12349: ST_TO_ADDR
12350: LD_INT 6
12352: PUSH
12353: FOR_TO
12354: IFFALSE 12459
// begin uc_nation := nation_nature ;
12356: LD_ADDR_OWVAR 21
12360: PUSH
12361: LD_INT 0
12363: ST_TO_ADDR
// uc_side := 0 ;
12364: LD_ADDR_OWVAR 20
12368: PUSH
12369: LD_INT 0
12371: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12372: LD_ADDR_OWVAR 29
12376: PUSH
12377: LD_INT 12
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: ST_TO_ADDR
// hc_agressivity := 20 ;
12387: LD_ADDR_OWVAR 35
12391: PUSH
12392: LD_INT 20
12394: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12395: LD_ADDR_OWVAR 28
12399: PUSH
12400: LD_INT 17
12402: ST_TO_ADDR
// hc_gallery :=  ;
12403: LD_ADDR_OWVAR 33
12407: PUSH
12408: LD_STRING 
12410: ST_TO_ADDR
// hc_name :=  ;
12411: LD_ADDR_OWVAR 26
12415: PUSH
12416: LD_STRING 
12418: ST_TO_ADDR
// un := CreateHuman ;
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: CALL_OW 44
12428: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12429: LD_VAR 0 2
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 51
// tmp := tmp ^ un ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_VAR 0 3
12450: PUSH
12451: LD_VAR 0 2
12455: ADD
12456: ST_TO_ADDR
// end ;
12457: GO 12353
12459: POP
12460: POP
// repeat wait ( 0 0$1 ) ;
12461: LD_INT 35
12463: PPUSH
12464: CALL_OW 67
// for un in tmp do
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_VAR 0 3
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12553
// begin if IsDead ( un ) then
12481: LD_VAR 0 2
12485: PPUSH
12486: CALL_OW 301
12490: IFFALSE 12510
// begin tmp := tmp diff un ;
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_VAR 0 3
12501: PUSH
12502: LD_VAR 0 2
12506: DIFF
12507: ST_TO_ADDR
// continue ;
12508: GO 12478
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12510: LD_VAR 0 2
12514: PPUSH
12515: LD_INT 3
12517: PUSH
12518: LD_INT 22
12520: PUSH
12521: LD_INT 0
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: PPUSH
12537: LD_VAR 0 2
12541: PPUSH
12542: CALL_OW 74
12546: PPUSH
12547: CALL_OW 115
// end ;
12551: GO 12478
12553: POP
12554: POP
// until not tmp ;
12555: LD_VAR 0 3
12559: NOT
12560: IFFALSE 12461
// end ;
12562: PPOPN 3
12564: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12565: LD_EXP 40
12569: PUSH
12570: LD_EXP 65
12574: AND
12575: IFFALSE 12629
12577: GO 12579
12579: DISABLE
// begin ToLua ( displayTroll(); ) ;
12580: LD_STRING displayTroll();
12582: PPUSH
12583: CALL_OW 559
// wait ( 3 3$00 ) ;
12587: LD_INT 6300
12589: PPUSH
12590: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12594: LD_STRING hideTroll();
12596: PPUSH
12597: CALL_OW 559
// wait ( 1 1$00 ) ;
12601: LD_INT 2100
12603: PPUSH
12604: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12608: LD_STRING displayTroll();
12610: PPUSH
12611: CALL_OW 559
// wait ( 1 1$00 ) ;
12615: LD_INT 2100
12617: PPUSH
12618: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12622: LD_STRING hideTroll();
12624: PPUSH
12625: CALL_OW 559
// end ;
12629: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12630: LD_EXP 40
12634: PUSH
12635: LD_EXP 66
12639: AND
12640: IFFALSE 12703
12642: GO 12644
12644: DISABLE
12645: LD_INT 0
12647: PPUSH
// begin p := 0 ;
12648: LD_ADDR_VAR 0 1
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// repeat game_speed := 1 ;
12656: LD_ADDR_OWVAR 65
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12664: LD_INT 35
12666: PPUSH
12667: CALL_OW 67
// p := p + 1 ;
12671: LD_ADDR_VAR 0 1
12675: PUSH
12676: LD_VAR 0 1
12680: PUSH
12681: LD_INT 1
12683: PLUS
12684: ST_TO_ADDR
// until p >= 60 ;
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 60
12692: GREATEREQUAL
12693: IFFALSE 12656
// game_speed := 4 ;
12695: LD_ADDR_OWVAR 65
12699: PUSH
12700: LD_INT 4
12702: ST_TO_ADDR
// end ;
12703: PPOPN 1
12705: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12706: LD_EXP 40
12710: PUSH
12711: LD_EXP 67
12715: AND
12716: IFFALSE 12862
12718: GO 12720
12720: DISABLE
12721: LD_INT 0
12723: PPUSH
12724: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_OWVAR 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 0
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 30
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: ST_TO_ADDR
// if not depot then
12779: LD_VAR 0 1
12783: NOT
12784: IFFALSE 12788
// exit ;
12786: GO 12862
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12788: LD_ADDR_VAR 0 2
12792: PUSH
12793: LD_VAR 0 1
12797: PUSH
12798: LD_INT 1
12800: PPUSH
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 12
12810: ARRAY
12811: PPUSH
12812: CALL_OW 274
12816: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12817: LD_VAR 0 2
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: LD_INT 0
12827: PPUSH
12828: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12832: LD_VAR 0 2
12836: PPUSH
12837: LD_INT 2
12839: PPUSH
12840: LD_INT 0
12842: PPUSH
12843: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12847: LD_VAR 0 2
12851: PPUSH
12852: LD_INT 3
12854: PPUSH
12855: LD_INT 0
12857: PPUSH
12858: CALL_OW 277
// end ;
12862: PPOPN 2
12864: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12865: LD_EXP 40
12869: PUSH
12870: LD_EXP 68
12874: AND
12875: IFFALSE 12972
12877: GO 12879
12879: DISABLE
12880: LD_INT 0
12882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12883: LD_ADDR_VAR 0 1
12887: PUSH
12888: LD_INT 22
12890: PUSH
12891: LD_OWVAR 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 21
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 3
12912: PUSH
12913: LD_INT 23
12915: PUSH
12916: LD_INT 0
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 69
12936: ST_TO_ADDR
// if not tmp then
12937: LD_VAR 0 1
12941: NOT
12942: IFFALSE 12946
// exit ;
12944: GO 12972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_VAR 0 1
12958: PPUSH
12959: CALL_OW 12
12963: ARRAY
12964: PPUSH
12965: LD_INT 200
12967: PPUSH
12968: CALL_OW 234
// end ;
12972: PPOPN 1
12974: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12975: LD_EXP 40
12979: PUSH
12980: LD_EXP 69
12984: AND
12985: IFFALSE 13064
12987: GO 12989
12989: DISABLE
12990: LD_INT 0
12992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_OWVAR 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 21
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: ST_TO_ADDR
// if not tmp then
13029: LD_VAR 0 1
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13038: LD_VAR 0 1
13042: PUSH
13043: LD_INT 1
13045: PPUSH
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 12
13055: ARRAY
13056: PPUSH
13057: LD_INT 60
13059: PPUSH
13060: CALL_OW 234
// end ;
13064: PPOPN 1
13066: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13067: LD_EXP 40
13071: PUSH
13072: LD_EXP 70
13076: AND
13077: IFFALSE 13176
13079: GO 13081
13081: DISABLE
13082: LD_INT 0
13084: PPUSH
13085: PPUSH
// begin enable ;
13086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_OWVAR 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 61
13106: PUSH
13107: EMPTY
13108: LIST
13109: PUSH
13110: LD_INT 33
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: ST_TO_ADDR
// if not tmp then
13130: LD_VAR 0 1
13134: NOT
13135: IFFALSE 13139
// exit ;
13137: GO 13176
// for i in tmp do
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_VAR 0 1
13148: PUSH
13149: FOR_IN
13150: IFFALSE 13174
// if IsControledBy ( i ) then
13152: LD_VAR 0 2
13156: PPUSH
13157: CALL_OW 312
13161: IFFALSE 13172
// ComUnlink ( i ) ;
13163: LD_VAR 0 2
13167: PPUSH
13168: CALL_OW 136
13172: GO 13149
13174: POP
13175: POP
// end ;
13176: PPOPN 2
13178: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13179: LD_EXP 40
13183: PUSH
13184: LD_EXP 71
13188: AND
13189: IFFALSE 13329
13191: GO 13193
13193: DISABLE
13194: LD_INT 0
13196: PPUSH
13197: PPUSH
// begin ToLua ( displayPowell(); ) ;
13198: LD_STRING displayPowell();
13200: PPUSH
13201: CALL_OW 559
// uc_side := 0 ;
13205: LD_ADDR_OWVAR 20
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// uc_nation := 2 ;
13213: LD_ADDR_OWVAR 21
13217: PUSH
13218: LD_INT 2
13220: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13221: LD_ADDR_OWVAR 37
13225: PUSH
13226: LD_INT 14
13228: ST_TO_ADDR
// vc_engine := engine_siberite ;
13229: LD_ADDR_OWVAR 39
13233: PUSH
13234: LD_INT 3
13236: ST_TO_ADDR
// vc_control := control_apeman ;
13237: LD_ADDR_OWVAR 38
13241: PUSH
13242: LD_INT 5
13244: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13245: LD_ADDR_OWVAR 40
13249: PUSH
13250: LD_INT 29
13252: ST_TO_ADDR
// un := CreateVehicle ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: CALL_OW 45
13262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13263: LD_VAR 0 2
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13275: LD_INT 35
13277: PPUSH
13278: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13282: LD_VAR 0 2
13286: PPUSH
13287: LD_INT 22
13289: PUSH
13290: LD_OWVAR 2
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 69
13303: PPUSH
13304: LD_VAR 0 2
13308: PPUSH
13309: CALL_OW 74
13313: PPUSH
13314: CALL_OW 115
// until IsDead ( un ) ;
13318: LD_VAR 0 2
13322: PPUSH
13323: CALL_OW 301
13327: IFFALSE 13275
// end ;
13329: PPOPN 2
13331: END
// every 0 0$1 trigger StreamModeActive and sStu do
13332: LD_EXP 40
13336: PUSH
13337: LD_EXP 79
13341: AND
13342: IFFALSE 13358
13344: GO 13346
13346: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13347: LD_STRING displayStucuk();
13349: PPUSH
13350: CALL_OW 559
// ResetFog ;
13354: CALL_OW 335
// end ;
13358: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13359: LD_EXP 40
13363: PUSH
13364: LD_EXP 72
13368: AND
13369: IFFALSE 13510
13371: GO 13373
13373: DISABLE
13374: LD_INT 0
13376: PPUSH
13377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_OWVAR 2
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 21
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: ST_TO_ADDR
// if not tmp then
13414: LD_VAR 0 2
13418: NOT
13419: IFFALSE 13423
// exit ;
13421: GO 13510
// un := tmp [ rand ( 1 , tmp ) ] ;
13423: LD_ADDR_VAR 0 1
13427: PUSH
13428: LD_VAR 0 2
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_VAR 0 2
13440: PPUSH
13441: CALL_OW 12
13445: ARRAY
13446: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13447: LD_VAR 0 1
13451: PPUSH
13452: LD_INT 0
13454: PPUSH
13455: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13459: LD_VAR 0 1
13463: PPUSH
13464: LD_OWVAR 3
13468: PUSH
13469: LD_VAR 0 1
13473: DIFF
13474: PPUSH
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 74
13484: PPUSH
13485: CALL_OW 115
// wait ( 0 0$20 ) ;
13489: LD_INT 700
13491: PPUSH
13492: CALL_OW 67
// SetSide ( un , your_side ) ;
13496: LD_VAR 0 1
13500: PPUSH
13501: LD_OWVAR 2
13505: PPUSH
13506: CALL_OW 235
// end ;
13510: PPOPN 2
13512: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13513: LD_EXP 40
13517: PUSH
13518: LD_EXP 73
13522: AND
13523: IFFALSE 13629
13525: GO 13527
13527: DISABLE
13528: LD_INT 0
13530: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_OWVAR 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 2
13550: PUSH
13551: LD_INT 30
13553: PUSH
13554: LD_INT 0
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 30
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PPUSH
13580: CALL_OW 69
13584: ST_TO_ADDR
// if not depot then
13585: LD_VAR 0 1
13589: NOT
13590: IFFALSE 13594
// exit ;
13592: GO 13629
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13594: LD_VAR 0 1
13598: PUSH
13599: LD_INT 1
13601: ARRAY
13602: PPUSH
13603: CALL_OW 250
13607: PPUSH
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: CALL_OW 251
13621: PPUSH
13622: LD_INT 70
13624: PPUSH
13625: CALL_OW 495
// end ;
13629: PPOPN 1
13631: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13632: LD_EXP 40
13636: PUSH
13637: LD_EXP 74
13641: AND
13642: IFFALSE 13853
13644: GO 13646
13646: DISABLE
13647: LD_INT 0
13649: PPUSH
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13654: LD_ADDR_VAR 0 5
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 21
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 5
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13853
// for i in tmp do
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_VAR 0 5
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13851
// begin d := rand ( 0 , 5 ) ;
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: LD_INT 0
13719: PPUSH
13720: LD_INT 5
13722: PPUSH
13723: CALL_OW 12
13727: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13728: LD_ADDR_VAR 0 2
13732: PUSH
13733: LD_VAR 0 1
13737: PPUSH
13738: CALL_OW 250
13742: PPUSH
13743: LD_VAR 0 4
13747: PPUSH
13748: LD_INT 3
13750: PPUSH
13751: LD_INT 12
13753: PPUSH
13754: CALL_OW 12
13758: PPUSH
13759: CALL_OW 272
13763: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13764: LD_ADDR_VAR 0 3
13768: PUSH
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 251
13778: PPUSH
13779: LD_VAR 0 4
13783: PPUSH
13784: LD_INT 3
13786: PPUSH
13787: LD_INT 12
13789: PPUSH
13790: CALL_OW 12
13794: PPUSH
13795: CALL_OW 273
13799: ST_TO_ADDR
// if ValidHex ( x , y ) then
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: CALL_OW 488
13814: IFFALSE 13849
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_VAR 0 2
13825: PPUSH
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 3
13833: PPUSH
13834: LD_INT 6
13836: PPUSH
13837: CALL_OW 12
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 483
// end ;
13849: GO 13709
13851: POP
13852: POP
// end ;
13853: PPOPN 5
13855: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13856: LD_EXP 40
13860: PUSH
13861: LD_EXP 75
13865: AND
13866: IFFALSE 13960
13868: GO 13870
13870: DISABLE
13871: LD_INT 0
13873: PPUSH
13874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_INT 22
13882: PUSH
13883: LD_OWVAR 2
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 32
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: ST_TO_ADDR
// if not tmp then
13922: LD_VAR 0 2
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13960
// for i in tmp do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_VAR 0 2
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13958
// SetFuel ( i , 0 ) ;
13944: LD_VAR 0 1
13948: PPUSH
13949: LD_INT 0
13951: PPUSH
13952: CALL_OW 240
13956: GO 13941
13958: POP
13959: POP
// end ;
13960: PPOPN 2
13962: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13963: LD_EXP 40
13967: PUSH
13968: LD_EXP 76
13972: AND
13973: IFFALSE 14039
13975: GO 13977
13977: DISABLE
13978: LD_INT 0
13980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13981: LD_ADDR_VAR 0 1
13985: PUSH
13986: LD_INT 22
13988: PUSH
13989: LD_OWVAR 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 30
14000: PUSH
14001: LD_INT 29
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PPUSH
14012: CALL_OW 69
14016: ST_TO_ADDR
// if not tmp then
14017: LD_VAR 0 1
14021: NOT
14022: IFFALSE 14026
// exit ;
14024: GO 14039
// DestroyUnit ( tmp [ 1 ] ) ;
14026: LD_VAR 0 1
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: CALL_OW 65
// end ;
14039: PPOPN 1
14041: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14042: LD_EXP 40
14046: PUSH
14047: LD_EXP 78
14051: AND
14052: IFFALSE 14181
14054: GO 14056
14056: DISABLE
14057: LD_INT 0
14059: PPUSH
// begin uc_side := 0 ;
14060: LD_ADDR_OWVAR 20
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// uc_nation := nation_arabian ;
14068: LD_ADDR_OWVAR 21
14072: PUSH
14073: LD_INT 2
14075: ST_TO_ADDR
// hc_gallery :=  ;
14076: LD_ADDR_OWVAR 33
14080: PUSH
14081: LD_STRING 
14083: ST_TO_ADDR
// hc_name :=  ;
14084: LD_ADDR_OWVAR 26
14088: PUSH
14089: LD_STRING 
14091: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14092: LD_INT 1
14094: PPUSH
14095: LD_INT 11
14097: PPUSH
14098: LD_INT 10
14100: PPUSH
14101: CALL_OW 380
// un := CreateHuman ;
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: CALL_OW 44
14114: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14115: LD_VAR 0 1
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14127: LD_INT 35
14129: PPUSH
14130: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_INT 22
14141: PUSH
14142: LD_OWVAR 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: PPUSH
14156: LD_VAR 0 1
14160: PPUSH
14161: CALL_OW 74
14165: PPUSH
14166: CALL_OW 115
// until IsDead ( un ) ;
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 301
14179: IFFALSE 14127
// end ;
14181: PPOPN 1
14183: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14184: LD_EXP 40
14188: PUSH
14189: LD_EXP 80
14193: AND
14194: IFFALSE 14206
14196: GO 14198
14198: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14199: LD_STRING earthquake(getX(game), 0, 32)
14201: PPUSH
14202: CALL_OW 559
14206: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14207: LD_EXP 40
14211: PUSH
14212: LD_EXP 81
14216: AND
14217: IFFALSE 14308
14219: GO 14221
14221: DISABLE
14222: LD_INT 0
14224: PPUSH
// begin enable ;
14225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14226: LD_ADDR_VAR 0 1
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_OWVAR 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 2
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 33
14255: PUSH
14256: LD_INT 3
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// if not tmp then
14273: LD_VAR 0 1
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 14308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14282: LD_VAR 0 1
14286: PUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_VAR 0 1
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 234
// end ;
14308: PPOPN 1
14310: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14311: LD_EXP 40
14315: PUSH
14316: LD_EXP 82
14320: AND
14321: IFFALSE 14462
14323: GO 14325
14325: DISABLE
14326: LD_INT 0
14328: PPUSH
14329: PPUSH
14330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_OWVAR 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 25
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: ST_TO_ADDR
// if not tmp then
14367: LD_VAR 0 3
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 14462
// un := tmp [ rand ( 1 , tmp ) ] ;
14376: LD_ADDR_VAR 0 2
14380: PUSH
14381: LD_VAR 0 3
14385: PUSH
14386: LD_INT 1
14388: PPUSH
14389: LD_VAR 0 3
14393: PPUSH
14394: CALL_OW 12
14398: ARRAY
14399: ST_TO_ADDR
// if Crawls ( un ) then
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 318
14409: IFFALSE 14420
// ComWalk ( un ) ;
14411: LD_VAR 0 2
14415: PPUSH
14416: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14420: LD_VAR 0 2
14424: PPUSH
14425: LD_INT 9
14427: PPUSH
14428: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14432: LD_INT 28
14434: PPUSH
14435: LD_OWVAR 2
14439: PPUSH
14440: LD_INT 2
14442: PPUSH
14443: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14447: LD_INT 29
14449: PPUSH
14450: LD_OWVAR 2
14454: PPUSH
14455: LD_INT 2
14457: PPUSH
14458: CALL_OW 322
// end ;
14462: PPOPN 3
14464: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14465: LD_EXP 40
14469: PUSH
14470: LD_EXP 83
14474: AND
14475: IFFALSE 14586
14477: GO 14479
14479: DISABLE
14480: LD_INT 0
14482: PPUSH
14483: PPUSH
14484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_OWVAR 2
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 25
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 69
14520: ST_TO_ADDR
// if not tmp then
14521: LD_VAR 0 3
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 14586
// un := tmp [ rand ( 1 , tmp ) ] ;
14530: LD_ADDR_VAR 0 2
14534: PUSH
14535: LD_VAR 0 3
14539: PUSH
14540: LD_INT 1
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// if Crawls ( un ) then
14554: LD_VAR 0 2
14558: PPUSH
14559: CALL_OW 318
14563: IFFALSE 14574
// ComWalk ( un ) ;
14565: LD_VAR 0 2
14569: PPUSH
14570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14574: LD_VAR 0 2
14578: PPUSH
14579: LD_INT 8
14581: PPUSH
14582: CALL_OW 336
// end ;
14586: PPOPN 3
14588: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14589: LD_EXP 40
14593: PUSH
14594: LD_EXP 84
14598: AND
14599: IFFALSE 14743
14601: GO 14603
14603: DISABLE
14604: LD_INT 0
14606: PPUSH
14607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14608: LD_ADDR_VAR 0 2
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_OWVAR 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 21
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: LD_INT 34
14640: PUSH
14641: LD_INT 12
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 34
14650: PUSH
14651: LD_INT 51
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 32
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: ST_TO_ADDR
// if not tmp then
14684: LD_VAR 0 2
14688: NOT
14689: IFFALSE 14693
// exit ;
14691: GO 14743
// for i in tmp do
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: FOR_IN
14704: IFFALSE 14741
// if GetCargo ( i , mat_artifact ) = 0 then
14706: LD_VAR 0 1
14710: PPUSH
14711: LD_INT 4
14713: PPUSH
14714: CALL_OW 289
14718: PUSH
14719: LD_INT 0
14721: EQUAL
14722: IFFALSE 14739
// SetCargo ( i , mat_siberit , 100 ) ;
14724: LD_VAR 0 1
14728: PPUSH
14729: LD_INT 3
14731: PPUSH
14732: LD_INT 100
14734: PPUSH
14735: CALL_OW 290
14739: GO 14703
14741: POP
14742: POP
// end ;
14743: PPOPN 2
14745: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14746: LD_EXP 40
14750: PUSH
14751: LD_EXP 85
14755: AND
14756: IFFALSE 14939
14758: GO 14760
14760: DISABLE
14761: LD_INT 0
14763: PPUSH
14764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14765: LD_ADDR_VAR 0 2
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_OWVAR 2
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 2
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14939
// for i := 1 to 2 do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: DOUBLE
14802: LD_INT 1
14804: DEC
14805: ST_TO_ADDR
14806: LD_INT 2
14808: PUSH
14809: FOR_TO
14810: IFFALSE 14937
// begin uc_side := your_side ;
14812: LD_ADDR_OWVAR 20
14816: PUSH
14817: LD_OWVAR 2
14821: ST_TO_ADDR
// uc_nation := nation_american ;
14822: LD_ADDR_OWVAR 21
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// vc_chassis := us_morphling ;
14830: LD_ADDR_OWVAR 37
14834: PUSH
14835: LD_INT 5
14837: ST_TO_ADDR
// vc_engine := engine_siberite ;
14838: LD_ADDR_OWVAR 39
14842: PUSH
14843: LD_INT 3
14845: ST_TO_ADDR
// vc_control := control_computer ;
14846: LD_ADDR_OWVAR 38
14850: PUSH
14851: LD_INT 3
14853: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14854: LD_ADDR_OWVAR 40
14858: PUSH
14859: LD_INT 10
14861: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14862: LD_VAR 0 2
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: CALL_OW 310
14875: NOT
14876: IFFALSE 14923
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14878: CALL_OW 45
14882: PPUSH
14883: LD_VAR 0 2
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: CALL_OW 250
14896: PPUSH
14897: LD_VAR 0 2
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: PPUSH
14906: CALL_OW 251
14910: PPUSH
14911: LD_INT 12
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 50
14921: GO 14935
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14923: CALL_OW 45
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 51
// end ;
14935: GO 14809
14937: POP
14938: POP
// end ;
14939: PPOPN 2
14941: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14942: LD_EXP 40
14946: PUSH
14947: LD_EXP 86
14951: AND
14952: IFFALSE 15174
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
14964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14965: LD_ADDR_VAR 0 6
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_OWVAR 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 21
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 3
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 0
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: ST_TO_ADDR
// if not tmp then
15019: LD_VAR 0 6
15023: NOT
15024: IFFALSE 15028
// exit ;
15026: GO 15174
// s1 := rand ( 1 , 4 ) ;
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_INT 1
15035: PPUSH
15036: LD_INT 4
15038: PPUSH
15039: CALL_OW 12
15043: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15044: LD_ADDR_VAR 0 4
15048: PUSH
15049: LD_VAR 0 6
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: PPUSH
15058: LD_VAR 0 2
15062: PPUSH
15063: CALL_OW 259
15067: ST_TO_ADDR
// if s1 = 1 then
15068: LD_VAR 0 2
15072: PUSH
15073: LD_INT 1
15075: EQUAL
15076: IFFALSE 15096
// s2 := rand ( 2 , 4 ) else
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: LD_INT 2
15085: PPUSH
15086: LD_INT 4
15088: PPUSH
15089: CALL_OW 12
15093: ST_TO_ADDR
15094: GO 15104
// s2 := 1 ;
15096: LD_ADDR_VAR 0 3
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15104: LD_ADDR_VAR 0 5
15108: PUSH
15109: LD_VAR 0 6
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: CALL_OW 259
15127: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15128: LD_VAR 0 6
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 2
15141: PPUSH
15142: LD_VAR 0 5
15146: PPUSH
15147: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15151: LD_VAR 0 6
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: LD_VAR 0 3
15164: PPUSH
15165: LD_VAR 0 4
15169: PPUSH
15170: CALL_OW 237
// end ;
15174: PPOPN 6
15176: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15177: LD_EXP 40
15181: PUSH
15182: LD_EXP 87
15186: AND
15187: IFFALSE 15266
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15195: LD_ADDR_VAR 0 1
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 30
15214: PUSH
15215: LD_INT 3
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 1
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15240: LD_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 12
15257: ARRAY
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: CALL_OW 234
// end ;
15266: PPOPN 1
15268: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15269: LD_EXP 40
15273: PUSH
15274: LD_EXP 88
15278: AND
15279: IFFALSE 15391
15281: GO 15283
15283: DISABLE
15284: LD_INT 0
15286: PPUSH
15287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15288: LD_ADDR_VAR 0 2
15292: PUSH
15293: LD_INT 22
15295: PUSH
15296: LD_OWVAR 2
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 30
15310: PUSH
15311: LD_INT 27
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 26
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 28
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: ST_TO_ADDR
// if not tmp then
15353: LD_VAR 0 2
15357: NOT
15358: IFFALSE 15362
// exit ;
15360: GO 15391
// for i in tmp do
15362: LD_ADDR_VAR 0 1
15366: PUSH
15367: LD_VAR 0 2
15371: PUSH
15372: FOR_IN
15373: IFFALSE 15389
// SetLives ( i , 1 ) ;
15375: LD_VAR 0 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 234
15387: GO 15372
15389: POP
15390: POP
// end ;
15391: PPOPN 2
15393: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15394: LD_EXP 40
15398: PUSH
15399: LD_EXP 89
15403: AND
15404: IFFALSE 15691
15406: GO 15408
15408: DISABLE
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// begin i := rand ( 1 , 7 ) ;
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: LD_INT 1
15421: PPUSH
15422: LD_INT 7
15424: PPUSH
15425: CALL_OW 12
15429: ST_TO_ADDR
// case i of 1 :
15430: LD_VAR 0 1
15434: PUSH
15435: LD_INT 1
15437: DOUBLE
15438: EQUAL
15439: IFTRUE 15443
15441: GO 15453
15443: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15444: LD_STRING earthquake(getX(game), 0, 32)
15446: PPUSH
15447: CALL_OW 559
15451: GO 15691
15453: LD_INT 2
15455: DOUBLE
15456: EQUAL
15457: IFTRUE 15461
15459: GO 15475
15461: POP
// begin ToLua ( displayStucuk(); ) ;
15462: LD_STRING displayStucuk();
15464: PPUSH
15465: CALL_OW 559
// ResetFog ;
15469: CALL_OW 335
// end ; 3 :
15473: GO 15691
15475: LD_INT 3
15477: DOUBLE
15478: EQUAL
15479: IFTRUE 15483
15481: GO 15587
15483: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15484: LD_ADDR_VAR 0 2
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_OWVAR 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: ST_TO_ADDR
// if not tmp then
15520: LD_VAR 0 2
15524: NOT
15525: IFFALSE 15529
// exit ;
15527: GO 15691
// un := tmp [ rand ( 1 , tmp ) ] ;
15529: LD_ADDR_VAR 0 3
15533: PUSH
15534: LD_VAR 0 2
15538: PUSH
15539: LD_INT 1
15541: PPUSH
15542: LD_VAR 0 2
15546: PPUSH
15547: CALL_OW 12
15551: ARRAY
15552: ST_TO_ADDR
// if Crawls ( un ) then
15553: LD_VAR 0 3
15557: PPUSH
15558: CALL_OW 318
15562: IFFALSE 15573
// ComWalk ( un ) ;
15564: LD_VAR 0 3
15568: PPUSH
15569: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_INT 8
15580: PPUSH
15581: CALL_OW 336
// end ; 4 :
15585: GO 15691
15587: LD_INT 4
15589: DOUBLE
15590: EQUAL
15591: IFTRUE 15595
15593: GO 15669
15595: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15596: LD_ADDR_VAR 0 2
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_OWVAR 2
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 30
15615: PUSH
15616: LD_INT 29
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 69
15631: ST_TO_ADDR
// if not tmp then
15632: LD_VAR 0 2
15636: NOT
15637: IFFALSE 15641
// exit ;
15639: GO 15691
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15641: LD_VAR 0 2
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15654: LD_VAR 0 2
15658: PUSH
15659: LD_INT 1
15661: ARRAY
15662: PPUSH
15663: CALL_OW 65
// end ; 5 .. 7 :
15667: GO 15691
15669: LD_INT 5
15671: DOUBLE
15672: GREATEREQUAL
15673: IFFALSE 15681
15675: LD_INT 7
15677: DOUBLE
15678: LESSEQUAL
15679: IFTRUE 15683
15681: GO 15690
15683: POP
// StreamSibBomb ; end ;
15684: CALL 11928 0 0
15688: GO 15691
15690: POP
// end ;
15691: PPOPN 3
15693: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15694: LD_EXP 40
15698: PUSH
15699: LD_EXP 90
15703: AND
15704: IFFALSE 15860
15706: GO 15708
15708: DISABLE
15709: LD_INT 0
15711: PPUSH
15712: PPUSH
15713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15714: LD_ADDR_VAR 0 2
15718: PUSH
15719: LD_INT 81
15721: PUSH
15722: LD_OWVAR 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 2
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 21
15746: PUSH
15747: LD_INT 2
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PPUSH
15763: CALL_OW 69
15767: ST_TO_ADDR
// if not tmp then
15768: LD_VAR 0 2
15772: NOT
15773: IFFALSE 15777
// exit ;
15775: GO 15860
// p := 0 ;
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_INT 0
15784: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15785: LD_INT 35
15787: PPUSH
15788: CALL_OW 67
// p := p + 1 ;
15792: LD_ADDR_VAR 0 3
15796: PUSH
15797: LD_VAR 0 3
15801: PUSH
15802: LD_INT 1
15804: PLUS
15805: ST_TO_ADDR
// for i in tmp do
15806: LD_ADDR_VAR 0 1
15810: PUSH
15811: LD_VAR 0 2
15815: PUSH
15816: FOR_IN
15817: IFFALSE 15848
// if GetLives ( i ) < 1000 then
15819: LD_VAR 0 1
15823: PPUSH
15824: CALL_OW 256
15828: PUSH
15829: LD_INT 1000
15831: LESS
15832: IFFALSE 15846
// SetLives ( i , 1000 ) ;
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_INT 1000
15841: PPUSH
15842: CALL_OW 234
15846: GO 15816
15848: POP
15849: POP
// until p > 20 ;
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 20
15857: GREATER
15858: IFFALSE 15785
// end ;
15860: PPOPN 3
15862: END
// every 0 0$1 trigger StreamModeActive and sTime do
15863: LD_EXP 40
15867: PUSH
15868: LD_EXP 91
15872: AND
15873: IFFALSE 15908
15875: GO 15877
15877: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15878: LD_INT 28
15880: PPUSH
15881: LD_OWVAR 2
15885: PPUSH
15886: LD_INT 2
15888: PPUSH
15889: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15893: LD_INT 30
15895: PPUSH
15896: LD_OWVAR 2
15900: PPUSH
15901: LD_INT 2
15903: PPUSH
15904: CALL_OW 322
// end ;
15908: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15909: LD_EXP 40
15913: PUSH
15914: LD_EXP 92
15918: AND
15919: IFFALSE 16040
15921: GO 15923
15923: DISABLE
15924: LD_INT 0
15926: PPUSH
15927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_INT 22
15935: PUSH
15936: LD_OWVAR 2
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 21
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 23
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: PPUSH
15977: CALL_OW 69
15981: ST_TO_ADDR
// if not tmp then
15982: LD_VAR 0 2
15986: NOT
15987: IFFALSE 15991
// exit ;
15989: GO 16040
// for i in tmp do
15991: LD_ADDR_VAR 0 1
15995: PUSH
15996: LD_VAR 0 2
16000: PUSH
16001: FOR_IN
16002: IFFALSE 16038
// begin if Crawls ( i ) then
16004: LD_VAR 0 1
16008: PPUSH
16009: CALL_OW 318
16013: IFFALSE 16024
// ComWalk ( i ) ;
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL_OW 138
// SetClass ( i , 2 ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: LD_INT 2
16031: PPUSH
16032: CALL_OW 336
// end ;
16036: GO 16001
16038: POP
16039: POP
// end ;
16040: PPOPN 2
16042: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16043: LD_EXP 40
16047: PUSH
16048: LD_EXP 93
16052: AND
16053: IFFALSE 16341
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
16062: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16063: LD_OWVAR 2
16067: PPUSH
16068: LD_INT 9
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16081: LD_INT 9
16083: PPUSH
16084: LD_OWVAR 2
16088: PPUSH
16089: CALL_OW 343
// uc_side := 9 ;
16093: LD_ADDR_OWVAR 20
16097: PUSH
16098: LD_INT 9
16100: ST_TO_ADDR
// uc_nation := 2 ;
16101: LD_ADDR_OWVAR 21
16105: PUSH
16106: LD_INT 2
16108: ST_TO_ADDR
// hc_name := Dark Warrior ;
16109: LD_ADDR_OWVAR 26
16113: PUSH
16114: LD_STRING Dark Warrior
16116: ST_TO_ADDR
// hc_gallery :=  ;
16117: LD_ADDR_OWVAR 33
16121: PUSH
16122: LD_STRING 
16124: ST_TO_ADDR
// hc_noskilllimit := true ;
16125: LD_ADDR_OWVAR 76
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16133: LD_ADDR_OWVAR 31
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 30
16143: PUSH
16144: LD_INT 30
16146: PUSH
16147: LD_INT 30
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: ST_TO_ADDR
// un := CreateHuman ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: CALL_OW 44
16165: ST_TO_ADDR
// hc_noskilllimit := false ;
16166: LD_ADDR_OWVAR 76
16170: PUSH
16171: LD_INT 0
16173: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 51
// ToLua ( playRanger() ) ;
16186: LD_STRING playRanger()
16188: PPUSH
16189: CALL_OW 559
// p := 0 ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16201: LD_INT 35
16203: PPUSH
16204: CALL_OW 67
// p := p + 1 ;
16208: LD_ADDR_VAR 0 2
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16222: LD_VAR 0 3
16226: PPUSH
16227: CALL_OW 256
16231: PUSH
16232: LD_INT 1000
16234: LESS
16235: IFFALSE 16249
// SetLives ( un , 1000 ) ;
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_INT 1000
16244: PPUSH
16245: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 81
16256: PUSH
16257: LD_OWVAR 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 91
16268: PUSH
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 30
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PPUSH
16291: LD_VAR 0 3
16295: PPUSH
16296: CALL_OW 74
16300: PPUSH
16301: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16305: LD_VAR 0 2
16309: PUSH
16310: LD_INT 80
16312: GREATER
16313: PUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: CALL_OW 301
16323: OR
16324: IFFALSE 16201
// if un then
16326: LD_VAR 0 3
16330: IFFALSE 16341
// RemoveUnit ( un ) ;
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 64
// end ;
16341: PPOPN 3
16343: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16344: LD_EXP 94
16348: IFFALSE 16464
16350: GO 16352
16352: DISABLE
16353: LD_INT 0
16355: PPUSH
16356: PPUSH
16357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_INT 81
16365: PUSH
16366: LD_OWVAR 2
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 21
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PPUSH
16389: CALL_OW 69
16393: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16394: LD_STRING playComputer()
16396: PPUSH
16397: CALL_OW 559
// if not tmp then
16401: LD_VAR 0 2
16405: NOT
16406: IFFALSE 16410
// exit ;
16408: GO 16464
// for i in tmp do
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: FOR_IN
16421: IFFALSE 16462
// for j := 1 to 4 do
16423: LD_ADDR_VAR 0 3
16427: PUSH
16428: DOUBLE
16429: LD_INT 1
16431: DEC
16432: ST_TO_ADDR
16433: LD_INT 4
16435: PUSH
16436: FOR_TO
16437: IFFALSE 16458
// SetSkill ( i , j , 10 ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 10
16451: PPUSH
16452: CALL_OW 237
16456: GO 16436
16458: POP
16459: POP
16460: GO 16420
16462: POP
16463: POP
// end ;
16464: PPOPN 3
16466: END
// every 0 0$1 trigger s30 do var i , tmp ;
16467: LD_EXP 95
16471: IFFALSE 16540
16473: GO 16475
16475: DISABLE
16476: LD_INT 0
16478: PPUSH
16479: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16480: LD_ADDR_VAR 0 2
16484: PUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: ST_TO_ADDR
// if not tmp then
16502: LD_VAR 0 2
16506: NOT
16507: IFFALSE 16511
// exit ;
16509: GO 16540
// for i in tmp do
16511: LD_ADDR_VAR 0 1
16515: PUSH
16516: LD_VAR 0 2
16520: PUSH
16521: FOR_IN
16522: IFFALSE 16538
// SetLives ( i , 300 ) ;
16524: LD_VAR 0 1
16528: PPUSH
16529: LD_INT 300
16531: PPUSH
16532: CALL_OW 234
16536: GO 16521
16538: POP
16539: POP
// end ;
16540: PPOPN 2
16542: END
// every 0 0$1 trigger s60 do var i , tmp ;
16543: LD_EXP 96
16547: IFFALSE 16616
16549: GO 16551
16551: DISABLE
16552: LD_INT 0
16554: PPUSH
16555: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_OWVAR 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// if not tmp then
16578: LD_VAR 0 2
16582: NOT
16583: IFFALSE 16587
// exit ;
16585: GO 16616
// for i in tmp do
16587: LD_ADDR_VAR 0 1
16591: PUSH
16592: LD_VAR 0 2
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16614
// SetLives ( i , 600 ) ;
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_INT 600
16607: PPUSH
16608: CALL_OW 234
16612: GO 16597
16614: POP
16615: POP
// end ;
16616: PPOPN 2
16618: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16619: LD_INT 0
16621: PPUSH
// case cmd of 301 :
16622: LD_VAR 0 1
16626: PUSH
16627: LD_INT 301
16629: DOUBLE
16630: EQUAL
16631: IFTRUE 16635
16633: GO 16667
16635: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16636: LD_VAR 0 6
16640: PPUSH
16641: LD_VAR 0 7
16645: PPUSH
16646: LD_VAR 0 8
16650: PPUSH
16651: LD_VAR 0 4
16655: PPUSH
16656: LD_VAR 0 5
16660: PPUSH
16661: CALL 17876 0 5
16665: GO 16788
16667: LD_INT 302
16669: DOUBLE
16670: EQUAL
16671: IFTRUE 16675
16673: GO 16712
16675: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16676: LD_VAR 0 6
16680: PPUSH
16681: LD_VAR 0 7
16685: PPUSH
16686: LD_VAR 0 8
16690: PPUSH
16691: LD_VAR 0 9
16695: PPUSH
16696: LD_VAR 0 4
16700: PPUSH
16701: LD_VAR 0 5
16705: PPUSH
16706: CALL 17967 0 6
16710: GO 16788
16712: LD_INT 303
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16757
16720: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16721: LD_VAR 0 6
16725: PPUSH
16726: LD_VAR 0 7
16730: PPUSH
16731: LD_VAR 0 8
16735: PPUSH
16736: LD_VAR 0 9
16740: PPUSH
16741: LD_VAR 0 4
16745: PPUSH
16746: LD_VAR 0 5
16750: PPUSH
16751: CALL 16793 0 6
16755: GO 16788
16757: LD_INT 304
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16787
16765: POP
// hHackTeleport ( unit , x , y ) ; end ;
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_VAR 0 4
16775: PPUSH
16776: LD_VAR 0 5
16780: PPUSH
16781: CALL 18560 0 3
16785: GO 16788
16787: POP
// end ;
16788: LD_VAR 0 12
16792: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16793: LD_INT 0
16795: PPUSH
16796: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16797: LD_VAR 0 1
16801: PUSH
16802: LD_INT 1
16804: LESS
16805: PUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 3
16813: GREATER
16814: OR
16815: PUSH
16816: LD_VAR 0 5
16820: PPUSH
16821: LD_VAR 0 6
16825: PPUSH
16826: CALL_OW 428
16830: OR
16831: IFFALSE 16835
// exit ;
16833: GO 17563
// uc_side := your_side ;
16835: LD_ADDR_OWVAR 20
16839: PUSH
16840: LD_OWVAR 2
16844: ST_TO_ADDR
// uc_nation := nation ;
16845: LD_ADDR_OWVAR 21
16849: PUSH
16850: LD_VAR 0 1
16854: ST_TO_ADDR
// bc_level = 1 ;
16855: LD_ADDR_OWVAR 43
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// case btype of 1 :
16863: LD_VAR 0 2
16867: PUSH
16868: LD_INT 1
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16887
16876: POP
// bc_type := b_depot ; 2 :
16877: LD_ADDR_OWVAR 42
16881: PUSH
16882: LD_INT 0
16884: ST_TO_ADDR
16885: GO 17507
16887: LD_INT 2
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16906
16895: POP
// bc_type := b_warehouse ; 3 :
16896: LD_ADDR_OWVAR 42
16900: PUSH
16901: LD_INT 1
16903: ST_TO_ADDR
16904: GO 17507
16906: LD_INT 3
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 16925
16914: POP
// bc_type := b_lab ; 4 .. 9 :
16915: LD_ADDR_OWVAR 42
16919: PUSH
16920: LD_INT 6
16922: ST_TO_ADDR
16923: GO 17507
16925: LD_INT 4
16927: DOUBLE
16928: GREATEREQUAL
16929: IFFALSE 16937
16931: LD_INT 9
16933: DOUBLE
16934: LESSEQUAL
16935: IFTRUE 16939
16937: GO 16999
16939: POP
// begin bc_type := b_lab_half ;
16940: LD_ADDR_OWVAR 42
16944: PUSH
16945: LD_INT 7
16947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16948: LD_ADDR_OWVAR 44
16952: PUSH
16953: LD_INT 10
16955: PUSH
16956: LD_INT 11
16958: PUSH
16959: LD_INT 12
16961: PUSH
16962: LD_INT 15
16964: PUSH
16965: LD_INT 14
16967: PUSH
16968: LD_INT 13
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PUSH
16979: LD_VAR 0 2
16983: PUSH
16984: LD_INT 3
16986: MINUS
16987: ARRAY
16988: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
16989: LD_ADDR_OWVAR 45
16993: PUSH
16994: LD_INT 9
16996: ST_TO_ADDR
// end ; 10 .. 13 :
16997: GO 17507
16999: LD_INT 10
17001: DOUBLE
17002: GREATEREQUAL
17003: IFFALSE 17011
17005: LD_INT 13
17007: DOUBLE
17008: LESSEQUAL
17009: IFTRUE 17013
17011: GO 17090
17013: POP
// begin bc_type := b_lab_full ;
17014: LD_ADDR_OWVAR 42
17018: PUSH
17019: LD_INT 8
17021: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17022: LD_ADDR_OWVAR 44
17026: PUSH
17027: LD_INT 10
17029: PUSH
17030: LD_INT 12
17032: PUSH
17033: LD_INT 14
17035: PUSH
17036: LD_INT 13
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: PUSH
17045: LD_VAR 0 2
17049: PUSH
17050: LD_INT 9
17052: MINUS
17053: ARRAY
17054: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17055: LD_ADDR_OWVAR 45
17059: PUSH
17060: LD_INT 11
17062: PUSH
17063: LD_INT 15
17065: PUSH
17066: LD_INT 12
17068: PUSH
17069: LD_INT 15
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: LD_VAR 0 2
17082: PUSH
17083: LD_INT 9
17085: MINUS
17086: ARRAY
17087: ST_TO_ADDR
// end ; 14 :
17088: GO 17507
17090: LD_INT 14
17092: DOUBLE
17093: EQUAL
17094: IFTRUE 17098
17096: GO 17109
17098: POP
// bc_type := b_workshop ; 15 :
17099: LD_ADDR_OWVAR 42
17103: PUSH
17104: LD_INT 2
17106: ST_TO_ADDR
17107: GO 17507
17109: LD_INT 15
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17128
17117: POP
// bc_type := b_factory ; 16 :
17118: LD_ADDR_OWVAR 42
17122: PUSH
17123: LD_INT 3
17125: ST_TO_ADDR
17126: GO 17507
17128: LD_INT 16
17130: DOUBLE
17131: EQUAL
17132: IFTRUE 17136
17134: GO 17147
17136: POP
// bc_type := b_ext_gun ; 17 :
17137: LD_ADDR_OWVAR 42
17141: PUSH
17142: LD_INT 17
17144: ST_TO_ADDR
17145: GO 17507
17147: LD_INT 17
17149: DOUBLE
17150: EQUAL
17151: IFTRUE 17155
17153: GO 17183
17155: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17156: LD_ADDR_OWVAR 42
17160: PUSH
17161: LD_INT 19
17163: PUSH
17164: LD_INT 23
17166: PUSH
17167: LD_INT 19
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: LIST
17174: PUSH
17175: LD_VAR 0 1
17179: ARRAY
17180: ST_TO_ADDR
17181: GO 17507
17183: LD_INT 18
17185: DOUBLE
17186: EQUAL
17187: IFTRUE 17191
17189: GO 17202
17191: POP
// bc_type := b_ext_radar ; 19 :
17192: LD_ADDR_OWVAR 42
17196: PUSH
17197: LD_INT 20
17199: ST_TO_ADDR
17200: GO 17507
17202: LD_INT 19
17204: DOUBLE
17205: EQUAL
17206: IFTRUE 17210
17208: GO 17221
17210: POP
// bc_type := b_ext_radio ; 20 :
17211: LD_ADDR_OWVAR 42
17215: PUSH
17216: LD_INT 22
17218: ST_TO_ADDR
17219: GO 17507
17221: LD_INT 20
17223: DOUBLE
17224: EQUAL
17225: IFTRUE 17229
17227: GO 17240
17229: POP
// bc_type := b_ext_siberium ; 21 :
17230: LD_ADDR_OWVAR 42
17234: PUSH
17235: LD_INT 21
17237: ST_TO_ADDR
17238: GO 17507
17240: LD_INT 21
17242: DOUBLE
17243: EQUAL
17244: IFTRUE 17248
17246: GO 17259
17248: POP
// bc_type := b_ext_computer ; 22 :
17249: LD_ADDR_OWVAR 42
17253: PUSH
17254: LD_INT 24
17256: ST_TO_ADDR
17257: GO 17507
17259: LD_INT 22
17261: DOUBLE
17262: EQUAL
17263: IFTRUE 17267
17265: GO 17278
17267: POP
// bc_type := b_ext_track ; 23 :
17268: LD_ADDR_OWVAR 42
17272: PUSH
17273: LD_INT 16
17275: ST_TO_ADDR
17276: GO 17507
17278: LD_INT 23
17280: DOUBLE
17281: EQUAL
17282: IFTRUE 17286
17284: GO 17297
17286: POP
// bc_type := b_ext_laser ; 24 :
17287: LD_ADDR_OWVAR 42
17291: PUSH
17292: LD_INT 25
17294: ST_TO_ADDR
17295: GO 17507
17297: LD_INT 24
17299: DOUBLE
17300: EQUAL
17301: IFTRUE 17305
17303: GO 17316
17305: POP
// bc_type := b_control_tower ; 25 :
17306: LD_ADDR_OWVAR 42
17310: PUSH
17311: LD_INT 36
17313: ST_TO_ADDR
17314: GO 17507
17316: LD_INT 25
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17335
17324: POP
// bc_type := b_breastwork ; 26 :
17325: LD_ADDR_OWVAR 42
17329: PUSH
17330: LD_INT 31
17332: ST_TO_ADDR
17333: GO 17507
17335: LD_INT 26
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17354
17343: POP
// bc_type := b_bunker ; 27 :
17344: LD_ADDR_OWVAR 42
17348: PUSH
17349: LD_INT 32
17351: ST_TO_ADDR
17352: GO 17507
17354: LD_INT 27
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17373
17362: POP
// bc_type := b_turret ; 28 :
17363: LD_ADDR_OWVAR 42
17367: PUSH
17368: LD_INT 33
17370: ST_TO_ADDR
17371: GO 17507
17373: LD_INT 28
17375: DOUBLE
17376: EQUAL
17377: IFTRUE 17381
17379: GO 17392
17381: POP
// bc_type := b_armoury ; 29 :
17382: LD_ADDR_OWVAR 42
17386: PUSH
17387: LD_INT 4
17389: ST_TO_ADDR
17390: GO 17507
17392: LD_INT 29
17394: DOUBLE
17395: EQUAL
17396: IFTRUE 17400
17398: GO 17411
17400: POP
// bc_type := b_barracks ; 30 :
17401: LD_ADDR_OWVAR 42
17405: PUSH
17406: LD_INT 5
17408: ST_TO_ADDR
17409: GO 17507
17411: LD_INT 30
17413: DOUBLE
17414: EQUAL
17415: IFTRUE 17419
17417: GO 17430
17419: POP
// bc_type := b_solar_power ; 31 :
17420: LD_ADDR_OWVAR 42
17424: PUSH
17425: LD_INT 27
17427: ST_TO_ADDR
17428: GO 17507
17430: LD_INT 31
17432: DOUBLE
17433: EQUAL
17434: IFTRUE 17438
17436: GO 17449
17438: POP
// bc_type := b_oil_power ; 32 :
17439: LD_ADDR_OWVAR 42
17443: PUSH
17444: LD_INT 26
17446: ST_TO_ADDR
17447: GO 17507
17449: LD_INT 32
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17468
17457: POP
// bc_type := b_siberite_power ; 33 :
17458: LD_ADDR_OWVAR 42
17462: PUSH
17463: LD_INT 28
17465: ST_TO_ADDR
17466: GO 17507
17468: LD_INT 33
17470: DOUBLE
17471: EQUAL
17472: IFTRUE 17476
17474: GO 17487
17476: POP
// bc_type := b_oil_mine ; 34 :
17477: LD_ADDR_OWVAR 42
17481: PUSH
17482: LD_INT 29
17484: ST_TO_ADDR
17485: GO 17507
17487: LD_INT 34
17489: DOUBLE
17490: EQUAL
17491: IFTRUE 17495
17493: GO 17506
17495: POP
// bc_type := b_siberite_mine ; end ;
17496: LD_ADDR_OWVAR 42
17500: PUSH
17501: LD_INT 30
17503: ST_TO_ADDR
17504: GO 17507
17506: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17507: LD_ADDR_VAR 0 8
17511: PUSH
17512: LD_VAR 0 5
17516: PPUSH
17517: LD_VAR 0 6
17521: PPUSH
17522: LD_VAR 0 3
17526: PPUSH
17527: CALL_OW 47
17531: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17532: LD_OWVAR 42
17536: PUSH
17537: LD_INT 32
17539: PUSH
17540: LD_INT 33
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: IN
17547: IFFALSE 17563
// PlaceWeaponTurret ( b , weapon ) ;
17549: LD_VAR 0 8
17553: PPUSH
17554: LD_VAR 0 4
17558: PPUSH
17559: CALL_OW 431
// end ;
17563: LD_VAR 0 7
17567: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17568: LD_INT 0
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17574: LD_ADDR_VAR 0 4
17578: PUSH
17579: LD_INT 22
17581: PUSH
17582: LD_OWVAR 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: LD_INT 30
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 30
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: ST_TO_ADDR
// if not tmp then
17628: LD_VAR 0 4
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17696
// for i in tmp do
17637: LD_ADDR_VAR 0 2
17641: PUSH
17642: LD_VAR 0 4
17646: PUSH
17647: FOR_IN
17648: IFFALSE 17694
// for j = 1 to 3 do
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: DOUBLE
17656: LD_INT 1
17658: DEC
17659: ST_TO_ADDR
17660: LD_INT 3
17662: PUSH
17663: FOR_TO
17664: IFFALSE 17690
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17666: LD_VAR 0 2
17670: PPUSH
17671: CALL_OW 274
17675: PPUSH
17676: LD_VAR 0 3
17680: PPUSH
17681: LD_INT 99999
17683: PPUSH
17684: CALL_OW 277
17688: GO 17663
17690: POP
17691: POP
17692: GO 17647
17694: POP
17695: POP
// end ;
17696: LD_VAR 0 1
17700: RET
// export function hHackSetLevel10 ; var i , j ; begin
17701: LD_INT 0
17703: PPUSH
17704: PPUSH
17705: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 21
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: PUSH
17726: FOR_IN
17727: IFFALSE 17779
// if IsSelected ( i ) then
17729: LD_VAR 0 2
17733: PPUSH
17734: CALL_OW 306
17738: IFFALSE 17777
// begin for j := 1 to 4 do
17740: LD_ADDR_VAR 0 3
17744: PUSH
17745: DOUBLE
17746: LD_INT 1
17748: DEC
17749: ST_TO_ADDR
17750: LD_INT 4
17752: PUSH
17753: FOR_TO
17754: IFFALSE 17775
// SetSkill ( i , j , 10 ) ;
17756: LD_VAR 0 2
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: LD_INT 10
17768: PPUSH
17769: CALL_OW 237
17773: GO 17753
17775: POP
17776: POP
// end ;
17777: GO 17726
17779: POP
17780: POP
// end ;
17781: LD_VAR 0 1
17785: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17786: LD_INT 0
17788: PPUSH
17789: PPUSH
17790: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17791: LD_ADDR_VAR 0 2
17795: PUSH
17796: LD_INT 22
17798: PUSH
17799: LD_OWVAR 2
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 21
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: PUSH
17827: FOR_IN
17828: IFFALSE 17869
// begin for j := 1 to 4 do
17830: LD_ADDR_VAR 0 3
17834: PUSH
17835: DOUBLE
17836: LD_INT 1
17838: DEC
17839: ST_TO_ADDR
17840: LD_INT 4
17842: PUSH
17843: FOR_TO
17844: IFFALSE 17865
// SetSkill ( i , j , 10 ) ;
17846: LD_VAR 0 2
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_INT 10
17858: PPUSH
17859: CALL_OW 237
17863: GO 17843
17865: POP
17866: POP
// end ;
17867: GO 17827
17869: POP
17870: POP
// end ;
17871: LD_VAR 0 1
17875: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17876: LD_INT 0
17878: PPUSH
// uc_side := your_side ;
17879: LD_ADDR_OWVAR 20
17883: PUSH
17884: LD_OWVAR 2
17888: ST_TO_ADDR
// uc_nation := nation ;
17889: LD_ADDR_OWVAR 21
17893: PUSH
17894: LD_VAR 0 1
17898: ST_TO_ADDR
// InitHc ;
17899: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17903: LD_INT 0
17905: PPUSH
17906: LD_VAR 0 2
17910: PPUSH
17911: LD_VAR 0 3
17915: PPUSH
17916: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17920: LD_VAR 0 4
17924: PPUSH
17925: LD_VAR 0 5
17929: PPUSH
17930: CALL_OW 428
17934: PUSH
17935: LD_INT 0
17937: EQUAL
17938: IFFALSE 17962
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17940: CALL_OW 44
17944: PPUSH
17945: LD_VAR 0 4
17949: PPUSH
17950: LD_VAR 0 5
17954: PPUSH
17955: LD_INT 1
17957: PPUSH
17958: CALL_OW 48
// end ;
17962: LD_VAR 0 6
17966: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
// uc_side := your_side ;
17971: LD_ADDR_OWVAR 20
17975: PUSH
17976: LD_OWVAR 2
17980: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 3
17994: PUSH
17995: LD_INT 4
17997: PUSH
17998: LD_INT 5
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: IN
18008: IFFALSE 18020
// uc_nation := nation_american else
18010: LD_ADDR_OWVAR 21
18014: PUSH
18015: LD_INT 1
18017: ST_TO_ADDR
18018: GO 18063
// if chassis in [ 11 , 12 , 13 , 14 ] then
18020: LD_VAR 0 1
18024: PUSH
18025: LD_INT 11
18027: PUSH
18028: LD_INT 12
18030: PUSH
18031: LD_INT 13
18033: PUSH
18034: LD_INT 14
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: IN
18043: IFFALSE 18055
// uc_nation := nation_arabian else
18045: LD_ADDR_OWVAR 21
18049: PUSH
18050: LD_INT 2
18052: ST_TO_ADDR
18053: GO 18063
// uc_nation := nation_russian ;
18055: LD_ADDR_OWVAR 21
18059: PUSH
18060: LD_INT 3
18062: ST_TO_ADDR
// vc_chassis := chassis ;
18063: LD_ADDR_OWVAR 37
18067: PUSH
18068: LD_VAR 0 1
18072: ST_TO_ADDR
// vc_engine := engine ;
18073: LD_ADDR_OWVAR 39
18077: PUSH
18078: LD_VAR 0 2
18082: ST_TO_ADDR
// vc_control := control ;
18083: LD_ADDR_OWVAR 38
18087: PUSH
18088: LD_VAR 0 3
18092: ST_TO_ADDR
// vc_weapon := weapon ;
18093: LD_ADDR_OWVAR 40
18097: PUSH
18098: LD_VAR 0 4
18102: ST_TO_ADDR
// un := CreateVehicle ;
18103: LD_ADDR_VAR 0 8
18107: PUSH
18108: CALL_OW 45
18112: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18113: LD_VAR 0 8
18117: PPUSH
18118: LD_INT 0
18120: PPUSH
18121: LD_INT 5
18123: PPUSH
18124: CALL_OW 12
18128: PPUSH
18129: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18133: LD_VAR 0 8
18137: PPUSH
18138: LD_VAR 0 5
18142: PPUSH
18143: LD_VAR 0 6
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 48
// end ;
18155: LD_VAR 0 7
18159: RET
// export hInvincible ; every 1 do
18160: GO 18162
18162: DISABLE
// hInvincible := [ ] ;
18163: LD_ADDR_EXP 97
18167: PUSH
18168: EMPTY
18169: ST_TO_ADDR
18170: END
// every 10 do var i ;
18171: GO 18173
18173: DISABLE
18174: LD_INT 0
18176: PPUSH
// begin enable ;
18177: ENABLE
// if not hInvincible then
18178: LD_EXP 97
18182: NOT
18183: IFFALSE 18187
// exit ;
18185: GO 18231
// for i in hInvincible do
18187: LD_ADDR_VAR 0 1
18191: PUSH
18192: LD_EXP 97
18196: PUSH
18197: FOR_IN
18198: IFFALSE 18229
// if GetLives ( i ) < 1000 then
18200: LD_VAR 0 1
18204: PPUSH
18205: CALL_OW 256
18209: PUSH
18210: LD_INT 1000
18212: LESS
18213: IFFALSE 18227
// SetLives ( i , 1000 ) ;
18215: LD_VAR 0 1
18219: PPUSH
18220: LD_INT 1000
18222: PPUSH
18223: CALL_OW 234
18227: GO 18197
18229: POP
18230: POP
// end ;
18231: PPOPN 1
18233: END
// export function hHackInvincible ; var i ; begin
18234: LD_INT 0
18236: PPUSH
18237: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18238: LD_ADDR_VAR 0 2
18242: PUSH
18243: LD_INT 2
18245: PUSH
18246: LD_INT 21
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 21
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18338
// if IsSelected ( i ) then
18279: LD_VAR 0 2
18283: PPUSH
18284: CALL_OW 306
18288: IFFALSE 18336
// begin if i in hInvincible then
18290: LD_VAR 0 2
18294: PUSH
18295: LD_EXP 97
18299: IN
18300: IFFALSE 18320
// hInvincible := hInvincible diff i else
18302: LD_ADDR_EXP 97
18306: PUSH
18307: LD_EXP 97
18311: PUSH
18312: LD_VAR 0 2
18316: DIFF
18317: ST_TO_ADDR
18318: GO 18336
// hInvincible := hInvincible union i ;
18320: LD_ADDR_EXP 97
18324: PUSH
18325: LD_EXP 97
18329: PUSH
18330: LD_VAR 0 2
18334: UNION
18335: ST_TO_ADDR
// end ;
18336: GO 18276
18338: POP
18339: POP
// end ;
18340: LD_VAR 0 1
18344: RET
// export function hHackInvisible ; var i , j ; begin
18345: LD_INT 0
18347: PPUSH
18348: PPUSH
18349: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18350: LD_ADDR_VAR 0 2
18354: PUSH
18355: LD_INT 21
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PPUSH
18365: CALL_OW 69
18369: PUSH
18370: FOR_IN
18371: IFFALSE 18395
// if IsSelected ( i ) then
18373: LD_VAR 0 2
18377: PPUSH
18378: CALL_OW 306
18382: IFFALSE 18393
// ComForceInvisible ( i ) ;
18384: LD_VAR 0 2
18388: PPUSH
18389: CALL_OW 496
18393: GO 18370
18395: POP
18396: POP
// end ;
18397: LD_VAR 0 1
18401: RET
// export function hHackChangeYourSide ; begin
18402: LD_INT 0
18404: PPUSH
// if your_side = 8 then
18405: LD_OWVAR 2
18409: PUSH
18410: LD_INT 8
18412: EQUAL
18413: IFFALSE 18425
// your_side := 0 else
18415: LD_ADDR_OWVAR 2
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
18423: GO 18439
// your_side := your_side + 1 ;
18425: LD_ADDR_OWVAR 2
18429: PUSH
18430: LD_OWVAR 2
18434: PUSH
18435: LD_INT 1
18437: PLUS
18438: ST_TO_ADDR
// end ;
18439: LD_VAR 0 1
18443: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18444: LD_INT 0
18446: PPUSH
18447: PPUSH
18448: PPUSH
// for i in all_units do
18449: LD_ADDR_VAR 0 2
18453: PUSH
18454: LD_OWVAR 3
18458: PUSH
18459: FOR_IN
18460: IFFALSE 18538
// if IsSelected ( i ) then
18462: LD_VAR 0 2
18466: PPUSH
18467: CALL_OW 306
18471: IFFALSE 18536
// begin j := GetSide ( i ) ;
18473: LD_ADDR_VAR 0 3
18477: PUSH
18478: LD_VAR 0 2
18482: PPUSH
18483: CALL_OW 255
18487: ST_TO_ADDR
// if j = 8 then
18488: LD_VAR 0 3
18492: PUSH
18493: LD_INT 8
18495: EQUAL
18496: IFFALSE 18508
// j := 0 else
18498: LD_ADDR_VAR 0 3
18502: PUSH
18503: LD_INT 0
18505: ST_TO_ADDR
18506: GO 18522
// j := j + 1 ;
18508: LD_ADDR_VAR 0 3
18512: PUSH
18513: LD_VAR 0 3
18517: PUSH
18518: LD_INT 1
18520: PLUS
18521: ST_TO_ADDR
// SetSide ( i , j ) ;
18522: LD_VAR 0 2
18526: PPUSH
18527: LD_VAR 0 3
18531: PPUSH
18532: CALL_OW 235
// end ;
18536: GO 18459
18538: POP
18539: POP
// end ;
18540: LD_VAR 0 1
18544: RET
// export function hHackFog ; begin
18545: LD_INT 0
18547: PPUSH
// FogOff ( true ) ;
18548: LD_INT 1
18550: PPUSH
18551: CALL_OW 344
// end ;
18555: LD_VAR 0 1
18559: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18560: LD_INT 0
18562: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18563: LD_VAR 0 1
18567: PPUSH
18568: LD_VAR 0 2
18572: PPUSH
18573: LD_VAR 0 3
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: LD_INT 1
18583: PPUSH
18584: CALL_OW 483
// CenterOnXY ( x , y ) ;
18588: LD_VAR 0 2
18592: PPUSH
18593: LD_VAR 0 3
18597: PPUSH
18598: CALL_OW 84
// end ;
18602: LD_VAR 0 4
18606: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18611: LD_VAR 0 1
18615: NOT
18616: PUSH
18617: LD_VAR 0 2
18621: PPUSH
18622: LD_VAR 0 3
18626: PPUSH
18627: CALL_OW 488
18631: NOT
18632: OR
18633: PUSH
18634: LD_VAR 0 1
18638: PPUSH
18639: CALL_OW 266
18643: PUSH
18644: LD_INT 3
18646: NONEQUAL
18647: PUSH
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 247
18657: PUSH
18658: LD_INT 1
18660: EQUAL
18661: NOT
18662: AND
18663: OR
18664: IFFALSE 18668
// exit ;
18666: GO 18817
// if GetType ( factory ) = unit_human then
18668: LD_VAR 0 1
18672: PPUSH
18673: CALL_OW 247
18677: PUSH
18678: LD_INT 1
18680: EQUAL
18681: IFFALSE 18698
// factory := IsInUnit ( factory ) ;
18683: LD_ADDR_VAR 0 1
18687: PUSH
18688: LD_VAR 0 1
18692: PPUSH
18693: CALL_OW 310
18697: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18698: LD_VAR 0 1
18702: PPUSH
18703: CALL_OW 266
18707: PUSH
18708: LD_INT 3
18710: NONEQUAL
18711: IFFALSE 18715
// exit ;
18713: GO 18817
// if HexInfo ( x , y ) = factory then
18715: LD_VAR 0 2
18719: PPUSH
18720: LD_VAR 0 3
18724: PPUSH
18725: CALL_OW 428
18729: PUSH
18730: LD_VAR 0 1
18734: EQUAL
18735: IFFALSE 18762
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18737: LD_ADDR_EXP 98
18741: PUSH
18742: LD_EXP 98
18746: PPUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: LD_INT 0
18754: PPUSH
18755: CALL_OW 1
18759: ST_TO_ADDR
18760: GO 18813
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18762: LD_ADDR_EXP 98
18766: PUSH
18767: LD_EXP 98
18771: PPUSH
18772: LD_VAR 0 1
18776: PPUSH
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 255
18786: PUSH
18787: LD_VAR 0 1
18791: PUSH
18792: LD_VAR 0 2
18796: PUSH
18797: LD_VAR 0 3
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 1
18812: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18813: CALL 18822 0 0
// end ;
18817: LD_VAR 0 4
18821: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18822: LD_INT 0
18824: PPUSH
18825: PPUSH
18826: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18827: LD_STRING resetFactoryWaypoint();
18829: PPUSH
18830: CALL_OW 559
// if factoryWaypoints then
18834: LD_EXP 98
18838: IFFALSE 18964
// begin list := PrepareArray ( factoryWaypoints ) ;
18840: LD_ADDR_VAR 0 3
18844: PUSH
18845: LD_EXP 98
18849: PPUSH
18850: CALL 65286 0 1
18854: ST_TO_ADDR
// for i := 1 to list do
18855: LD_ADDR_VAR 0 2
18859: PUSH
18860: DOUBLE
18861: LD_INT 1
18863: DEC
18864: ST_TO_ADDR
18865: LD_VAR 0 3
18869: PUSH
18870: FOR_TO
18871: IFFALSE 18962
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18873: LD_STRING setFactoryWaypointXY(
18875: PUSH
18876: LD_VAR 0 3
18880: PUSH
18881: LD_VAR 0 2
18885: ARRAY
18886: PUSH
18887: LD_INT 1
18889: ARRAY
18890: STR
18891: PUSH
18892: LD_STRING ,
18894: STR
18895: PUSH
18896: LD_VAR 0 3
18900: PUSH
18901: LD_VAR 0 2
18905: ARRAY
18906: PUSH
18907: LD_INT 2
18909: ARRAY
18910: STR
18911: PUSH
18912: LD_STRING ,
18914: STR
18915: PUSH
18916: LD_VAR 0 3
18920: PUSH
18921: LD_VAR 0 2
18925: ARRAY
18926: PUSH
18927: LD_INT 3
18929: ARRAY
18930: STR
18931: PUSH
18932: LD_STRING ,
18934: STR
18935: PUSH
18936: LD_VAR 0 3
18940: PUSH
18941: LD_VAR 0 2
18945: ARRAY
18946: PUSH
18947: LD_INT 4
18949: ARRAY
18950: STR
18951: PUSH
18952: LD_STRING )
18954: STR
18955: PPUSH
18956: CALL_OW 559
18960: GO 18870
18962: POP
18963: POP
// end ; end ;
18964: LD_VAR 0 1
18968: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
18969: LD_INT 0
18971: PPUSH
// if HexInfo ( x , y ) = warehouse then
18972: LD_VAR 0 2
18976: PPUSH
18977: LD_VAR 0 3
18981: PPUSH
18982: CALL_OW 428
18986: PUSH
18987: LD_VAR 0 1
18991: EQUAL
18992: IFFALSE 19019
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
18994: LD_ADDR_EXP 99
18998: PUSH
18999: LD_EXP 99
19003: PPUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: LD_INT 0
19011: PPUSH
19012: CALL_OW 1
19016: ST_TO_ADDR
19017: GO 19070
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19019: LD_ADDR_EXP 99
19023: PUSH
19024: LD_EXP 99
19028: PPUSH
19029: LD_VAR 0 1
19033: PPUSH
19034: LD_VAR 0 1
19038: PPUSH
19039: CALL_OW 255
19043: PUSH
19044: LD_VAR 0 1
19048: PUSH
19049: LD_VAR 0 2
19053: PUSH
19054: LD_VAR 0 3
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 1
19069: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19070: CALL 19079 0 0
// end ;
19074: LD_VAR 0 4
19078: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
19083: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19084: LD_STRING resetWarehouseGatheringPoints();
19086: PPUSH
19087: CALL_OW 559
// if warehouseGatheringPoints then
19091: LD_EXP 99
19095: IFFALSE 19221
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19097: LD_ADDR_VAR 0 3
19101: PUSH
19102: LD_EXP 99
19106: PPUSH
19107: CALL 65286 0 1
19111: ST_TO_ADDR
// for i := 1 to list do
19112: LD_ADDR_VAR 0 2
19116: PUSH
19117: DOUBLE
19118: LD_INT 1
19120: DEC
19121: ST_TO_ADDR
19122: LD_VAR 0 3
19126: PUSH
19127: FOR_TO
19128: IFFALSE 19219
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19130: LD_STRING setWarehouseGatheringPointXY(
19132: PUSH
19133: LD_VAR 0 3
19137: PUSH
19138: LD_VAR 0 2
19142: ARRAY
19143: PUSH
19144: LD_INT 1
19146: ARRAY
19147: STR
19148: PUSH
19149: LD_STRING ,
19151: STR
19152: PUSH
19153: LD_VAR 0 3
19157: PUSH
19158: LD_VAR 0 2
19162: ARRAY
19163: PUSH
19164: LD_INT 2
19166: ARRAY
19167: STR
19168: PUSH
19169: LD_STRING ,
19171: STR
19172: PUSH
19173: LD_VAR 0 3
19177: PUSH
19178: LD_VAR 0 2
19182: ARRAY
19183: PUSH
19184: LD_INT 3
19186: ARRAY
19187: STR
19188: PUSH
19189: LD_STRING ,
19191: STR
19192: PUSH
19193: LD_VAR 0 3
19197: PUSH
19198: LD_VAR 0 2
19202: ARRAY
19203: PUSH
19204: LD_INT 4
19206: ARRAY
19207: STR
19208: PUSH
19209: LD_STRING )
19211: STR
19212: PPUSH
19213: CALL_OW 559
19217: GO 19127
19219: POP
19220: POP
// end ; end ;
19221: LD_VAR 0 1
19225: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19226: LD_EXP 99
19230: IFFALSE 19915
19232: GO 19234
19234: DISABLE
19235: LD_INT 0
19237: PPUSH
19238: PPUSH
19239: PPUSH
19240: PPUSH
19241: PPUSH
19242: PPUSH
19243: PPUSH
19244: PPUSH
19245: PPUSH
// begin enable ;
19246: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19247: LD_ADDR_VAR 0 3
19251: PUSH
19252: LD_EXP 99
19256: PPUSH
19257: CALL 65286 0 1
19261: ST_TO_ADDR
// if not list then
19262: LD_VAR 0 3
19266: NOT
19267: IFFALSE 19271
// exit ;
19269: GO 19915
// for i := 1 to list do
19271: LD_ADDR_VAR 0 1
19275: PUSH
19276: DOUBLE
19277: LD_INT 1
19279: DEC
19280: ST_TO_ADDR
19281: LD_VAR 0 3
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19913
// begin depot := list [ i ] [ 2 ] ;
19289: LD_ADDR_VAR 0 8
19293: PUSH
19294: LD_VAR 0 3
19298: PUSH
19299: LD_VAR 0 1
19303: ARRAY
19304: PUSH
19305: LD_INT 2
19307: ARRAY
19308: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19309: LD_ADDR_VAR 0 5
19313: PUSH
19314: LD_VAR 0 3
19318: PUSH
19319: LD_VAR 0 1
19323: ARRAY
19324: PUSH
19325: LD_INT 1
19327: ARRAY
19328: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19329: LD_VAR 0 8
19333: PPUSH
19334: CALL_OW 301
19338: PUSH
19339: LD_VAR 0 5
19343: PUSH
19344: LD_VAR 0 8
19348: PPUSH
19349: CALL_OW 255
19353: NONEQUAL
19354: OR
19355: IFFALSE 19384
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19357: LD_ADDR_EXP 99
19361: PUSH
19362: LD_EXP 99
19366: PPUSH
19367: LD_VAR 0 8
19371: PPUSH
19372: LD_INT 0
19374: PPUSH
19375: CALL_OW 1
19379: ST_TO_ADDR
// exit ;
19380: POP
19381: POP
19382: GO 19915
// end ; x := list [ i ] [ 3 ] ;
19384: LD_ADDR_VAR 0 6
19388: PUSH
19389: LD_VAR 0 3
19393: PUSH
19394: LD_VAR 0 1
19398: ARRAY
19399: PUSH
19400: LD_INT 3
19402: ARRAY
19403: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19404: LD_ADDR_VAR 0 7
19408: PUSH
19409: LD_VAR 0 3
19413: PUSH
19414: LD_VAR 0 1
19418: ARRAY
19419: PUSH
19420: LD_INT 4
19422: ARRAY
19423: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19424: LD_ADDR_VAR 0 9
19428: PUSH
19429: LD_VAR 0 6
19433: PPUSH
19434: LD_VAR 0 7
19438: PPUSH
19439: LD_INT 16
19441: PPUSH
19442: CALL 63874 0 3
19446: ST_TO_ADDR
// if not cratesNearbyPoint then
19447: LD_VAR 0 9
19451: NOT
19452: IFFALSE 19458
// exit ;
19454: POP
19455: POP
19456: GO 19915
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19458: LD_ADDR_VAR 0 4
19462: PUSH
19463: LD_INT 22
19465: PUSH
19466: LD_VAR 0 5
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 3
19477: PUSH
19478: LD_INT 60
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 91
19490: PUSH
19491: LD_VAR 0 8
19495: PUSH
19496: LD_INT 6
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 25
19509: PUSH
19510: LD_INT 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 25
19519: PUSH
19520: LD_INT 16
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: LIST
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: PUSH
19543: LD_VAR 0 8
19547: PPUSH
19548: CALL_OW 313
19552: PPUSH
19553: LD_INT 3
19555: PUSH
19556: LD_INT 60
19558: PUSH
19559: EMPTY
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 25
19571: PUSH
19572: LD_INT 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 25
19581: PUSH
19582: LD_INT 16
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PPUSH
19598: CALL_OW 72
19602: UNION
19603: ST_TO_ADDR
// if tmp then
19604: LD_VAR 0 4
19608: IFFALSE 19688
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19610: LD_ADDR_VAR 0 4
19614: PUSH
19615: LD_VAR 0 4
19619: PPUSH
19620: LD_INT 3
19622: PPUSH
19623: CALL 61843 0 2
19627: ST_TO_ADDR
// for j in tmp do
19628: LD_ADDR_VAR 0 2
19632: PUSH
19633: LD_VAR 0 4
19637: PUSH
19638: FOR_IN
19639: IFFALSE 19682
// begin if IsInUnit ( j ) then
19641: LD_VAR 0 2
19645: PPUSH
19646: CALL_OW 310
19650: IFFALSE 19661
// ComExit ( j ) ;
19652: LD_VAR 0 2
19656: PPUSH
19657: CALL 61926 0 1
// AddComCollect ( j , x , y ) ;
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_VAR 0 6
19670: PPUSH
19671: LD_VAR 0 7
19675: PPUSH
19676: CALL_OW 177
// end ;
19680: GO 19638
19682: POP
19683: POP
// exit ;
19684: POP
19685: POP
19686: GO 19915
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19688: LD_ADDR_VAR 0 4
19692: PUSH
19693: LD_INT 22
19695: PUSH
19696: LD_VAR 0 5
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 91
19707: PUSH
19708: LD_VAR 0 8
19712: PUSH
19713: LD_INT 8
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 34
19726: PUSH
19727: LD_INT 12
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 34
19736: PUSH
19737: LD_INT 51
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 34
19746: PUSH
19747: LD_INT 32
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 34
19756: PUSH
19757: LD_INT 89
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: PPUSH
19776: CALL_OW 69
19780: ST_TO_ADDR
// if tmp then
19781: LD_VAR 0 4
19785: IFFALSE 19911
// begin for j in tmp do
19787: LD_ADDR_VAR 0 2
19791: PUSH
19792: LD_VAR 0 4
19796: PUSH
19797: FOR_IN
19798: IFFALSE 19909
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19800: LD_VAR 0 2
19804: PPUSH
19805: CALL_OW 262
19809: PUSH
19810: LD_INT 3
19812: EQUAL
19813: PUSH
19814: LD_VAR 0 2
19818: PPUSH
19819: CALL_OW 261
19823: PUSH
19824: LD_INT 20
19826: GREATER
19827: OR
19828: PUSH
19829: LD_VAR 0 2
19833: PPUSH
19834: CALL_OW 314
19838: NOT
19839: AND
19840: PUSH
19841: LD_VAR 0 2
19845: PPUSH
19846: CALL_OW 263
19850: PUSH
19851: LD_INT 1
19853: NONEQUAL
19854: PUSH
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 311
19864: OR
19865: AND
19866: IFFALSE 19907
// begin ComCollect ( j , x , y ) ;
19868: LD_VAR 0 2
19872: PPUSH
19873: LD_VAR 0 6
19877: PPUSH
19878: LD_VAR 0 7
19882: PPUSH
19883: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19887: LD_VAR 0 2
19891: PPUSH
19892: LD_VAR 0 8
19896: PPUSH
19897: CALL_OW 172
// exit ;
19901: POP
19902: POP
19903: POP
19904: POP
19905: GO 19915
// end ;
19907: GO 19797
19909: POP
19910: POP
// end ; end ;
19911: GO 19286
19913: POP
19914: POP
// end ; end_of_file
19915: PPOPN 9
19917: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19918: LD_INT 0
19920: PPUSH
19921: PPUSH
19922: PPUSH
19923: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19924: LD_VAR 0 1
19928: PPUSH
19929: CALL_OW 264
19933: PUSH
19934: LD_INT 91
19936: EQUAL
19937: IFFALSE 20009
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19939: LD_INT 68
19941: PPUSH
19942: LD_VAR 0 1
19946: PPUSH
19947: CALL_OW 255
19951: PPUSH
19952: CALL_OW 321
19956: PUSH
19957: LD_INT 2
19959: EQUAL
19960: IFFALSE 19972
// eff := 70 else
19962: LD_ADDR_VAR 0 4
19966: PUSH
19967: LD_INT 70
19969: ST_TO_ADDR
19970: GO 19980
// eff := 30 ;
19972: LD_ADDR_VAR 0 4
19976: PUSH
19977: LD_INT 30
19979: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19980: LD_VAR 0 1
19984: PPUSH
19985: CALL_OW 250
19989: PPUSH
19990: LD_VAR 0 1
19994: PPUSH
19995: CALL_OW 251
19999: PPUSH
20000: LD_VAR 0 4
20004: PPUSH
20005: CALL_OW 495
// end ; end ;
20009: LD_VAR 0 2
20013: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20014: LD_INT 0
20016: PPUSH
// end ;
20017: LD_VAR 0 4
20021: RET
// export function SOS_Command ( cmd ) ; begin
20022: LD_INT 0
20024: PPUSH
// end ;
20025: LD_VAR 0 2
20029: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20030: LD_INT 0
20032: PPUSH
// end ;
20033: LD_VAR 0 6
20037: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20038: LD_INT 0
20040: PPUSH
20041: PPUSH
// if not vehicle or not factory then
20042: LD_VAR 0 1
20046: NOT
20047: PUSH
20048: LD_VAR 0 2
20052: NOT
20053: OR
20054: IFFALSE 20058
// exit ;
20056: GO 20289
// if factoryWaypoints >= factory then
20058: LD_EXP 98
20062: PUSH
20063: LD_VAR 0 2
20067: GREATEREQUAL
20068: IFFALSE 20289
// if factoryWaypoints [ factory ] then
20070: LD_EXP 98
20074: PUSH
20075: LD_VAR 0 2
20079: ARRAY
20080: IFFALSE 20289
// begin if GetControl ( vehicle ) = control_manual then
20082: LD_VAR 0 1
20086: PPUSH
20087: CALL_OW 263
20091: PUSH
20092: LD_INT 1
20094: EQUAL
20095: IFFALSE 20176
// begin driver := IsDrivenBy ( vehicle ) ;
20097: LD_ADDR_VAR 0 4
20101: PUSH
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 311
20111: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20112: LD_VAR 0 4
20116: PPUSH
20117: LD_EXP 98
20121: PUSH
20122: LD_VAR 0 2
20126: ARRAY
20127: PUSH
20128: LD_INT 3
20130: ARRAY
20131: PPUSH
20132: LD_EXP 98
20136: PUSH
20137: LD_VAR 0 2
20141: ARRAY
20142: PUSH
20143: LD_INT 4
20145: ARRAY
20146: PPUSH
20147: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20151: LD_VAR 0 4
20155: PPUSH
20156: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20160: LD_VAR 0 4
20164: PPUSH
20165: LD_VAR 0 2
20169: PPUSH
20170: CALL_OW 180
// end else
20174: GO 20289
// if GetControl ( vehicle ) = control_remote then
20176: LD_VAR 0 1
20180: PPUSH
20181: CALL_OW 263
20185: PUSH
20186: LD_INT 2
20188: EQUAL
20189: IFFALSE 20250
// begin wait ( 0 0$2 ) ;
20191: LD_INT 70
20193: PPUSH
20194: CALL_OW 67
// if Connect ( vehicle ) then
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL 32147 0 1
20207: IFFALSE 20248
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20209: LD_VAR 0 1
20213: PPUSH
20214: LD_EXP 98
20218: PUSH
20219: LD_VAR 0 2
20223: ARRAY
20224: PUSH
20225: LD_INT 3
20227: ARRAY
20228: PPUSH
20229: LD_EXP 98
20233: PUSH
20234: LD_VAR 0 2
20238: ARRAY
20239: PUSH
20240: LD_INT 4
20242: ARRAY
20243: PPUSH
20244: CALL_OW 171
// end else
20248: GO 20289
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: LD_EXP 98
20259: PUSH
20260: LD_VAR 0 2
20264: ARRAY
20265: PUSH
20266: LD_INT 3
20268: ARRAY
20269: PPUSH
20270: LD_EXP 98
20274: PUSH
20275: LD_VAR 0 2
20279: ARRAY
20280: PUSH
20281: LD_INT 4
20283: ARRAY
20284: PPUSH
20285: CALL_OW 171
// end ; end ;
20289: LD_VAR 0 3
20293: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20294: LD_INT 0
20296: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20297: LD_VAR 0 1
20301: PUSH
20302: LD_INT 250
20304: EQUAL
20305: PUSH
20306: LD_VAR 0 2
20310: PPUSH
20311: CALL_OW 264
20315: PUSH
20316: LD_INT 81
20318: EQUAL
20319: AND
20320: IFFALSE 20341
// MinerPlaceMine ( unit , x , y ) ;
20322: LD_VAR 0 2
20326: PPUSH
20327: LD_VAR 0 4
20331: PPUSH
20332: LD_VAR 0 5
20336: PPUSH
20337: CALL 22726 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20341: LD_VAR 0 1
20345: PUSH
20346: LD_INT 251
20348: EQUAL
20349: PUSH
20350: LD_VAR 0 2
20354: PPUSH
20355: CALL_OW 264
20359: PUSH
20360: LD_INT 81
20362: EQUAL
20363: AND
20364: IFFALSE 20385
// MinerDetonateMine ( unit , x , y ) ;
20366: LD_VAR 0 2
20370: PPUSH
20371: LD_VAR 0 4
20375: PPUSH
20376: LD_VAR 0 5
20380: PPUSH
20381: CALL 23001 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20385: LD_VAR 0 1
20389: PUSH
20390: LD_INT 252
20392: EQUAL
20393: PUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: CALL_OW 264
20403: PUSH
20404: LD_INT 81
20406: EQUAL
20407: AND
20408: IFFALSE 20429
// MinerCreateMinefield ( unit , x , y ) ;
20410: LD_VAR 0 2
20414: PPUSH
20415: LD_VAR 0 4
20419: PPUSH
20420: LD_VAR 0 5
20424: PPUSH
20425: CALL 23418 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20429: LD_VAR 0 1
20433: PUSH
20434: LD_INT 253
20436: EQUAL
20437: PUSH
20438: LD_VAR 0 2
20442: PPUSH
20443: CALL_OW 257
20447: PUSH
20448: LD_INT 5
20450: EQUAL
20451: AND
20452: IFFALSE 20473
// ComBinocular ( unit , x , y ) ;
20454: LD_VAR 0 2
20458: PPUSH
20459: LD_VAR 0 4
20463: PPUSH
20464: LD_VAR 0 5
20468: PPUSH
20469: CALL 23787 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20473: LD_VAR 0 1
20477: PUSH
20478: LD_INT 254
20480: EQUAL
20481: PUSH
20482: LD_VAR 0 2
20486: PPUSH
20487: CALL_OW 264
20491: PUSH
20492: LD_INT 99
20494: EQUAL
20495: AND
20496: PUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 263
20506: PUSH
20507: LD_INT 3
20509: EQUAL
20510: AND
20511: IFFALSE 20527
// HackDestroyVehicle ( unit , selectedUnit ) ;
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_VAR 0 3
20522: PPUSH
20523: CALL 22090 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20527: LD_VAR 0 1
20531: PUSH
20532: LD_INT 255
20534: EQUAL
20535: PUSH
20536: LD_VAR 0 2
20540: PPUSH
20541: CALL_OW 264
20545: PUSH
20546: LD_INT 14
20548: PUSH
20549: LD_INT 53
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: IN
20556: AND
20557: PUSH
20558: LD_VAR 0 4
20562: PPUSH
20563: LD_VAR 0 5
20567: PPUSH
20568: CALL_OW 488
20572: AND
20573: IFFALSE 20597
// CutTreeXYR ( unit , x , y , 12 ) ;
20575: LD_VAR 0 2
20579: PPUSH
20580: LD_VAR 0 4
20584: PPUSH
20585: LD_VAR 0 5
20589: PPUSH
20590: LD_INT 12
20592: PPUSH
20593: CALL 20660 0 4
// if cmd = 256 then
20597: LD_VAR 0 1
20601: PUSH
20602: LD_INT 256
20604: EQUAL
20605: IFFALSE 20626
// SetFactoryWaypoint ( unit , x , y ) ;
20607: LD_VAR 0 2
20611: PPUSH
20612: LD_VAR 0 4
20616: PPUSH
20617: LD_VAR 0 5
20621: PPUSH
20622: CALL 18607 0 3
// if cmd = 257 then
20626: LD_VAR 0 1
20630: PUSH
20631: LD_INT 257
20633: EQUAL
20634: IFFALSE 20655
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20636: LD_VAR 0 2
20640: PPUSH
20641: LD_VAR 0 4
20645: PPUSH
20646: LD_VAR 0 5
20650: PPUSH
20651: CALL 18969 0 3
// end ;
20655: LD_VAR 0 6
20659: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20660: LD_INT 0
20662: PPUSH
20663: PPUSH
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
20668: PPUSH
20669: PPUSH
20670: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20671: LD_VAR 0 1
20675: NOT
20676: PUSH
20677: LD_VAR 0 2
20681: PPUSH
20682: LD_VAR 0 3
20686: PPUSH
20687: CALL_OW 488
20691: NOT
20692: OR
20693: PUSH
20694: LD_VAR 0 4
20698: NOT
20699: OR
20700: IFFALSE 20704
// exit ;
20702: GO 21044
// list := [ ] ;
20704: LD_ADDR_VAR 0 13
20708: PUSH
20709: EMPTY
20710: ST_TO_ADDR
// if x - r < 0 then
20711: LD_VAR 0 2
20715: PUSH
20716: LD_VAR 0 4
20720: MINUS
20721: PUSH
20722: LD_INT 0
20724: LESS
20725: IFFALSE 20737
// min_x := 0 else
20727: LD_ADDR_VAR 0 7
20731: PUSH
20732: LD_INT 0
20734: ST_TO_ADDR
20735: GO 20753
// min_x := x - r ;
20737: LD_ADDR_VAR 0 7
20741: PUSH
20742: LD_VAR 0 2
20746: PUSH
20747: LD_VAR 0 4
20751: MINUS
20752: ST_TO_ADDR
// if y - r < 0 then
20753: LD_VAR 0 3
20757: PUSH
20758: LD_VAR 0 4
20762: MINUS
20763: PUSH
20764: LD_INT 0
20766: LESS
20767: IFFALSE 20779
// min_y := 0 else
20769: LD_ADDR_VAR 0 8
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
20777: GO 20795
// min_y := y - r ;
20779: LD_ADDR_VAR 0 8
20783: PUSH
20784: LD_VAR 0 3
20788: PUSH
20789: LD_VAR 0 4
20793: MINUS
20794: ST_TO_ADDR
// max_x := x + r ;
20795: LD_ADDR_VAR 0 9
20799: PUSH
20800: LD_VAR 0 2
20804: PUSH
20805: LD_VAR 0 4
20809: PLUS
20810: ST_TO_ADDR
// max_y := y + r ;
20811: LD_ADDR_VAR 0 10
20815: PUSH
20816: LD_VAR 0 3
20820: PUSH
20821: LD_VAR 0 4
20825: PLUS
20826: ST_TO_ADDR
// for _x = min_x to max_x do
20827: LD_ADDR_VAR 0 11
20831: PUSH
20832: DOUBLE
20833: LD_VAR 0 7
20837: DEC
20838: ST_TO_ADDR
20839: LD_VAR 0 9
20843: PUSH
20844: FOR_TO
20845: IFFALSE 20962
// for _y = min_y to max_y do
20847: LD_ADDR_VAR 0 12
20851: PUSH
20852: DOUBLE
20853: LD_VAR 0 8
20857: DEC
20858: ST_TO_ADDR
20859: LD_VAR 0 10
20863: PUSH
20864: FOR_TO
20865: IFFALSE 20958
// begin if not ValidHex ( _x , _y ) then
20867: LD_VAR 0 11
20871: PPUSH
20872: LD_VAR 0 12
20876: PPUSH
20877: CALL_OW 488
20881: NOT
20882: IFFALSE 20886
// continue ;
20884: GO 20864
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20886: LD_VAR 0 11
20890: PPUSH
20891: LD_VAR 0 12
20895: PPUSH
20896: CALL_OW 351
20900: PUSH
20901: LD_VAR 0 11
20905: PPUSH
20906: LD_VAR 0 12
20910: PPUSH
20911: CALL_OW 554
20915: AND
20916: IFFALSE 20956
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20918: LD_ADDR_VAR 0 13
20922: PUSH
20923: LD_VAR 0 13
20927: PPUSH
20928: LD_VAR 0 13
20932: PUSH
20933: LD_INT 1
20935: PLUS
20936: PPUSH
20937: LD_VAR 0 11
20941: PUSH
20942: LD_VAR 0 12
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PPUSH
20951: CALL_OW 2
20955: ST_TO_ADDR
// end ;
20956: GO 20864
20958: POP
20959: POP
20960: GO 20844
20962: POP
20963: POP
// if not list then
20964: LD_VAR 0 13
20968: NOT
20969: IFFALSE 20973
// exit ;
20971: GO 21044
// for i in list do
20973: LD_ADDR_VAR 0 6
20977: PUSH
20978: LD_VAR 0 13
20982: PUSH
20983: FOR_IN
20984: IFFALSE 21042
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20986: LD_VAR 0 1
20990: PPUSH
20991: LD_STRING M
20993: PUSH
20994: LD_VAR 0 6
20998: PUSH
20999: LD_INT 1
21001: ARRAY
21002: PUSH
21003: LD_VAR 0 6
21007: PUSH
21008: LD_INT 2
21010: ARRAY
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: PUSH
21033: EMPTY
21034: LIST
21035: PPUSH
21036: CALL_OW 447
21040: GO 20983
21042: POP
21043: POP
// end ;
21044: LD_VAR 0 5
21048: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21049: LD_EXP 101
21053: NOT
21054: IFFALSE 21104
21056: GO 21058
21058: DISABLE
// begin initHack := true ;
21059: LD_ADDR_EXP 101
21063: PUSH
21064: LD_INT 1
21066: ST_TO_ADDR
// hackTanks := [ ] ;
21067: LD_ADDR_EXP 102
21071: PUSH
21072: EMPTY
21073: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21074: LD_ADDR_EXP 103
21078: PUSH
21079: EMPTY
21080: ST_TO_ADDR
// hackLimit := 3 ;
21081: LD_ADDR_EXP 104
21085: PUSH
21086: LD_INT 3
21088: ST_TO_ADDR
// hackDist := 12 ;
21089: LD_ADDR_EXP 105
21093: PUSH
21094: LD_INT 12
21096: ST_TO_ADDR
// hackCounter := [ ] ;
21097: LD_ADDR_EXP 106
21101: PUSH
21102: EMPTY
21103: ST_TO_ADDR
// end ;
21104: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21105: LD_EXP 101
21109: PUSH
21110: LD_INT 34
21112: PUSH
21113: LD_INT 99
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PPUSH
21120: CALL_OW 69
21124: AND
21125: IFFALSE 21378
21127: GO 21129
21129: DISABLE
21130: LD_INT 0
21132: PPUSH
21133: PPUSH
// begin enable ;
21134: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21135: LD_ADDR_VAR 0 1
21139: PUSH
21140: LD_INT 34
21142: PUSH
21143: LD_INT 99
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PPUSH
21150: CALL_OW 69
21154: PUSH
21155: FOR_IN
21156: IFFALSE 21376
// begin if not i in hackTanks then
21158: LD_VAR 0 1
21162: PUSH
21163: LD_EXP 102
21167: IN
21168: NOT
21169: IFFALSE 21252
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21171: LD_ADDR_EXP 102
21175: PUSH
21176: LD_EXP 102
21180: PPUSH
21181: LD_EXP 102
21185: PUSH
21186: LD_INT 1
21188: PLUS
21189: PPUSH
21190: LD_VAR 0 1
21194: PPUSH
21195: CALL_OW 1
21199: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21200: LD_ADDR_EXP 103
21204: PUSH
21205: LD_EXP 103
21209: PPUSH
21210: LD_EXP 103
21214: PUSH
21215: LD_INT 1
21217: PLUS
21218: PPUSH
21219: EMPTY
21220: PPUSH
21221: CALL_OW 1
21225: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21226: LD_ADDR_EXP 106
21230: PUSH
21231: LD_EXP 106
21235: PPUSH
21236: LD_EXP 106
21240: PUSH
21241: LD_INT 1
21243: PLUS
21244: PPUSH
21245: EMPTY
21246: PPUSH
21247: CALL_OW 1
21251: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 302
21261: NOT
21262: IFFALSE 21275
// begin HackUnlinkAll ( i ) ;
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL 21381 0 1
// continue ;
21273: GO 21155
// end ; HackCheckCapturedStatus ( i ) ;
21275: LD_VAR 0 1
21279: PPUSH
21280: CALL 21824 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21284: LD_ADDR_VAR 0 2
21288: PUSH
21289: LD_INT 81
21291: PUSH
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 255
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 33
21308: PUSH
21309: LD_INT 3
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 91
21318: PUSH
21319: LD_VAR 0 1
21323: PUSH
21324: LD_EXP 105
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 50
21336: PUSH
21337: EMPTY
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: PPUSH
21346: CALL_OW 69
21350: ST_TO_ADDR
// if not tmp then
21351: LD_VAR 0 2
21355: NOT
21356: IFFALSE 21360
// continue ;
21358: GO 21155
// HackLink ( i , tmp ) ;
21360: LD_VAR 0 1
21364: PPUSH
21365: LD_VAR 0 2
21369: PPUSH
21370: CALL 21517 0 2
// end ;
21374: GO 21155
21376: POP
21377: POP
// end ;
21378: PPOPN 2
21380: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21381: LD_INT 0
21383: PPUSH
21384: PPUSH
21385: PPUSH
// if not hack in hackTanks then
21386: LD_VAR 0 1
21390: PUSH
21391: LD_EXP 102
21395: IN
21396: NOT
21397: IFFALSE 21401
// exit ;
21399: GO 21512
// index := GetElementIndex ( hackTanks , hack ) ;
21401: LD_ADDR_VAR 0 4
21405: PUSH
21406: LD_EXP 102
21410: PPUSH
21411: LD_VAR 0 1
21415: PPUSH
21416: CALL 28954 0 2
21420: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21421: LD_EXP 103
21425: PUSH
21426: LD_VAR 0 4
21430: ARRAY
21431: IFFALSE 21512
// begin for i in hackTanksCaptured [ index ] do
21433: LD_ADDR_VAR 0 3
21437: PUSH
21438: LD_EXP 103
21442: PUSH
21443: LD_VAR 0 4
21447: ARRAY
21448: PUSH
21449: FOR_IN
21450: IFFALSE 21476
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 1
21459: ARRAY
21460: PPUSH
21461: LD_VAR 0 3
21465: PUSH
21466: LD_INT 2
21468: ARRAY
21469: PPUSH
21470: CALL_OW 235
21474: GO 21449
21476: POP
21477: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21478: LD_ADDR_EXP 103
21482: PUSH
21483: LD_EXP 103
21487: PPUSH
21488: LD_VAR 0 4
21492: PPUSH
21493: EMPTY
21494: PPUSH
21495: CALL_OW 1
21499: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21500: LD_VAR 0 1
21504: PPUSH
21505: LD_INT 0
21507: PPUSH
21508: CALL_OW 505
// end ; end ;
21512: LD_VAR 0 2
21516: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21517: LD_INT 0
21519: PPUSH
21520: PPUSH
21521: PPUSH
// if not hack in hackTanks or not vehicles then
21522: LD_VAR 0 1
21526: PUSH
21527: LD_EXP 102
21531: IN
21532: NOT
21533: PUSH
21534: LD_VAR 0 2
21538: NOT
21539: OR
21540: IFFALSE 21544
// exit ;
21542: GO 21819
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21544: LD_ADDR_VAR 0 2
21548: PUSH
21549: LD_VAR 0 1
21553: PPUSH
21554: LD_VAR 0 2
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL 29604 0 4
21569: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21570: LD_ADDR_VAR 0 5
21574: PUSH
21575: LD_EXP 102
21579: PPUSH
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL 28954 0 2
21589: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21590: LD_EXP 103
21594: PUSH
21595: LD_VAR 0 5
21599: ARRAY
21600: PUSH
21601: LD_EXP 104
21605: LESS
21606: IFFALSE 21795
// begin for i := 1 to vehicles do
21608: LD_ADDR_VAR 0 4
21612: PUSH
21613: DOUBLE
21614: LD_INT 1
21616: DEC
21617: ST_TO_ADDR
21618: LD_VAR 0 2
21622: PUSH
21623: FOR_TO
21624: IFFALSE 21793
// begin if hackTanksCaptured [ index ] = hackLimit then
21626: LD_EXP 103
21630: PUSH
21631: LD_VAR 0 5
21635: ARRAY
21636: PUSH
21637: LD_EXP 104
21641: EQUAL
21642: IFFALSE 21646
// break ;
21644: GO 21793
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21646: LD_ADDR_EXP 106
21650: PUSH
21651: LD_EXP 106
21655: PPUSH
21656: LD_VAR 0 5
21660: PPUSH
21661: LD_EXP 106
21665: PUSH
21666: LD_VAR 0 5
21670: ARRAY
21671: PUSH
21672: LD_INT 1
21674: PLUS
21675: PPUSH
21676: CALL_OW 1
21680: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21681: LD_ADDR_EXP 103
21685: PUSH
21686: LD_EXP 103
21690: PPUSH
21691: LD_VAR 0 5
21695: PUSH
21696: LD_EXP 103
21700: PUSH
21701: LD_VAR 0 5
21705: ARRAY
21706: PUSH
21707: LD_INT 1
21709: PLUS
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PPUSH
21715: LD_VAR 0 2
21719: PUSH
21720: LD_VAR 0 4
21724: ARRAY
21725: PUSH
21726: LD_VAR 0 2
21730: PUSH
21731: LD_VAR 0 4
21735: ARRAY
21736: PPUSH
21737: CALL_OW 255
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PPUSH
21746: CALL 29169 0 3
21750: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21751: LD_VAR 0 2
21755: PUSH
21756: LD_VAR 0 4
21760: ARRAY
21761: PPUSH
21762: LD_VAR 0 1
21766: PPUSH
21767: CALL_OW 255
21771: PPUSH
21772: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21776: LD_VAR 0 2
21780: PUSH
21781: LD_VAR 0 4
21785: ARRAY
21786: PPUSH
21787: CALL_OW 141
// end ;
21791: GO 21623
21793: POP
21794: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_EXP 103
21804: PUSH
21805: LD_VAR 0 5
21809: ARRAY
21810: PUSH
21811: LD_INT 0
21813: PLUS
21814: PPUSH
21815: CALL_OW 505
// end ;
21819: LD_VAR 0 3
21823: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21824: LD_INT 0
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
// if not hack in hackTanks then
21830: LD_VAR 0 1
21834: PUSH
21835: LD_EXP 102
21839: IN
21840: NOT
21841: IFFALSE 21845
// exit ;
21843: GO 22085
// index := GetElementIndex ( hackTanks , hack ) ;
21845: LD_ADDR_VAR 0 4
21849: PUSH
21850: LD_EXP 102
21854: PPUSH
21855: LD_VAR 0 1
21859: PPUSH
21860: CALL 28954 0 2
21864: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21865: LD_ADDR_VAR 0 3
21869: PUSH
21870: DOUBLE
21871: LD_EXP 103
21875: PUSH
21876: LD_VAR 0 4
21880: ARRAY
21881: INC
21882: ST_TO_ADDR
21883: LD_INT 1
21885: PUSH
21886: FOR_DOWNTO
21887: IFFALSE 22059
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21889: LD_ADDR_VAR 0 5
21893: PUSH
21894: LD_EXP 103
21898: PUSH
21899: LD_VAR 0 4
21903: ARRAY
21904: PUSH
21905: LD_VAR 0 3
21909: ARRAY
21910: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21911: LD_VAR 0 5
21915: PUSH
21916: LD_INT 1
21918: ARRAY
21919: PPUSH
21920: CALL_OW 302
21924: NOT
21925: PUSH
21926: LD_VAR 0 5
21930: PUSH
21931: LD_INT 1
21933: ARRAY
21934: PPUSH
21935: CALL_OW 255
21939: PUSH
21940: LD_VAR 0 1
21944: PPUSH
21945: CALL_OW 255
21949: NONEQUAL
21950: OR
21951: IFFALSE 22057
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21953: LD_VAR 0 5
21957: PUSH
21958: LD_INT 1
21960: ARRAY
21961: PPUSH
21962: CALL_OW 305
21966: PUSH
21967: LD_VAR 0 5
21971: PUSH
21972: LD_INT 1
21974: ARRAY
21975: PPUSH
21976: CALL_OW 255
21980: PUSH
21981: LD_VAR 0 1
21985: PPUSH
21986: CALL_OW 255
21990: EQUAL
21991: AND
21992: IFFALSE 22016
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21994: LD_VAR 0 5
21998: PUSH
21999: LD_INT 1
22001: ARRAY
22002: PPUSH
22003: LD_VAR 0 5
22007: PUSH
22008: LD_INT 2
22010: ARRAY
22011: PPUSH
22012: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22016: LD_ADDR_EXP 103
22020: PUSH
22021: LD_EXP 103
22025: PPUSH
22026: LD_VAR 0 4
22030: PPUSH
22031: LD_EXP 103
22035: PUSH
22036: LD_VAR 0 4
22040: ARRAY
22041: PPUSH
22042: LD_VAR 0 3
22046: PPUSH
22047: CALL_OW 3
22051: PPUSH
22052: CALL_OW 1
22056: ST_TO_ADDR
// end ; end ;
22057: GO 21886
22059: POP
22060: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22061: LD_VAR 0 1
22065: PPUSH
22066: LD_EXP 103
22070: PUSH
22071: LD_VAR 0 4
22075: ARRAY
22076: PUSH
22077: LD_INT 0
22079: PLUS
22080: PPUSH
22081: CALL_OW 505
// end ;
22085: LD_VAR 0 2
22089: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22090: LD_INT 0
22092: PPUSH
22093: PPUSH
22094: PPUSH
22095: PPUSH
// if not hack in hackTanks then
22096: LD_VAR 0 1
22100: PUSH
22101: LD_EXP 102
22105: IN
22106: NOT
22107: IFFALSE 22111
// exit ;
22109: GO 22196
// index := GetElementIndex ( hackTanks , hack ) ;
22111: LD_ADDR_VAR 0 5
22115: PUSH
22116: LD_EXP 102
22120: PPUSH
22121: LD_VAR 0 1
22125: PPUSH
22126: CALL 28954 0 2
22130: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22131: LD_ADDR_VAR 0 4
22135: PUSH
22136: DOUBLE
22137: LD_INT 1
22139: DEC
22140: ST_TO_ADDR
22141: LD_EXP 103
22145: PUSH
22146: LD_VAR 0 5
22150: ARRAY
22151: PUSH
22152: FOR_TO
22153: IFFALSE 22194
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22155: LD_EXP 103
22159: PUSH
22160: LD_VAR 0 5
22164: ARRAY
22165: PUSH
22166: LD_VAR 0 4
22170: ARRAY
22171: PUSH
22172: LD_INT 1
22174: ARRAY
22175: PUSH
22176: LD_VAR 0 2
22180: EQUAL
22181: IFFALSE 22192
// KillUnit ( vehicle ) ;
22183: LD_VAR 0 2
22187: PPUSH
22188: CALL_OW 66
22192: GO 22152
22194: POP
22195: POP
// end ;
22196: LD_VAR 0 3
22200: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22201: LD_EXP 107
22205: NOT
22206: IFFALSE 22241
22208: GO 22210
22210: DISABLE
// begin initMiner := true ;
22211: LD_ADDR_EXP 107
22215: PUSH
22216: LD_INT 1
22218: ST_TO_ADDR
// minersList := [ ] ;
22219: LD_ADDR_EXP 108
22223: PUSH
22224: EMPTY
22225: ST_TO_ADDR
// minerMinesList := [ ] ;
22226: LD_ADDR_EXP 109
22230: PUSH
22231: EMPTY
22232: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22233: LD_ADDR_EXP 110
22237: PUSH
22238: LD_INT 5
22240: ST_TO_ADDR
// end ;
22241: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22242: LD_EXP 107
22246: PUSH
22247: LD_INT 34
22249: PUSH
22250: LD_INT 81
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PPUSH
22257: CALL_OW 69
22261: AND
22262: IFFALSE 22723
22264: GO 22266
22266: DISABLE
22267: LD_INT 0
22269: PPUSH
22270: PPUSH
22271: PPUSH
22272: PPUSH
// begin enable ;
22273: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22274: LD_ADDR_VAR 0 1
22278: PUSH
22279: LD_INT 34
22281: PUSH
22282: LD_INT 81
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PUSH
22294: FOR_IN
22295: IFFALSE 22367
// begin if not i in minersList then
22297: LD_VAR 0 1
22301: PUSH
22302: LD_EXP 108
22306: IN
22307: NOT
22308: IFFALSE 22365
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22310: LD_ADDR_EXP 108
22314: PUSH
22315: LD_EXP 108
22319: PPUSH
22320: LD_EXP 108
22324: PUSH
22325: LD_INT 1
22327: PLUS
22328: PPUSH
22329: LD_VAR 0 1
22333: PPUSH
22334: CALL_OW 1
22338: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22339: LD_ADDR_EXP 109
22343: PUSH
22344: LD_EXP 109
22348: PPUSH
22349: LD_EXP 109
22353: PUSH
22354: LD_INT 1
22356: PLUS
22357: PPUSH
22358: EMPTY
22359: PPUSH
22360: CALL_OW 1
22364: ST_TO_ADDR
// end end ;
22365: GO 22294
22367: POP
22368: POP
// for i := minerMinesList downto 1 do
22369: LD_ADDR_VAR 0 1
22373: PUSH
22374: DOUBLE
22375: LD_EXP 109
22379: INC
22380: ST_TO_ADDR
22381: LD_INT 1
22383: PUSH
22384: FOR_DOWNTO
22385: IFFALSE 22721
// begin if IsLive ( minersList [ i ] ) then
22387: LD_EXP 108
22391: PUSH
22392: LD_VAR 0 1
22396: ARRAY
22397: PPUSH
22398: CALL_OW 300
22402: IFFALSE 22430
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22404: LD_EXP 108
22408: PUSH
22409: LD_VAR 0 1
22413: ARRAY
22414: PPUSH
22415: LD_EXP 109
22419: PUSH
22420: LD_VAR 0 1
22424: ARRAY
22425: PPUSH
22426: CALL_OW 505
// if not minerMinesList [ i ] then
22430: LD_EXP 109
22434: PUSH
22435: LD_VAR 0 1
22439: ARRAY
22440: NOT
22441: IFFALSE 22445
// continue ;
22443: GO 22384
// for j := minerMinesList [ i ] downto 1 do
22445: LD_ADDR_VAR 0 2
22449: PUSH
22450: DOUBLE
22451: LD_EXP 109
22455: PUSH
22456: LD_VAR 0 1
22460: ARRAY
22461: INC
22462: ST_TO_ADDR
22463: LD_INT 1
22465: PUSH
22466: FOR_DOWNTO
22467: IFFALSE 22717
// begin side := GetSide ( minersList [ i ] ) ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_EXP 108
22478: PUSH
22479: LD_VAR 0 1
22483: ARRAY
22484: PPUSH
22485: CALL_OW 255
22489: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22490: LD_ADDR_VAR 0 4
22494: PUSH
22495: LD_EXP 109
22499: PUSH
22500: LD_VAR 0 1
22504: ARRAY
22505: PUSH
22506: LD_VAR 0 2
22510: ARRAY
22511: PUSH
22512: LD_INT 1
22514: ARRAY
22515: PPUSH
22516: LD_EXP 109
22520: PUSH
22521: LD_VAR 0 1
22525: ARRAY
22526: PUSH
22527: LD_VAR 0 2
22531: ARRAY
22532: PUSH
22533: LD_INT 2
22535: ARRAY
22536: PPUSH
22537: CALL_OW 428
22541: ST_TO_ADDR
// if not tmp then
22542: LD_VAR 0 4
22546: NOT
22547: IFFALSE 22551
// continue ;
22549: GO 22466
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22551: LD_VAR 0 4
22555: PUSH
22556: LD_INT 81
22558: PUSH
22559: LD_VAR 0 3
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: IN
22573: PUSH
22574: LD_EXP 109
22578: PUSH
22579: LD_VAR 0 1
22583: ARRAY
22584: PUSH
22585: LD_VAR 0 2
22589: ARRAY
22590: PUSH
22591: LD_INT 1
22593: ARRAY
22594: PPUSH
22595: LD_EXP 109
22599: PUSH
22600: LD_VAR 0 1
22604: ARRAY
22605: PUSH
22606: LD_VAR 0 2
22610: ARRAY
22611: PUSH
22612: LD_INT 2
22614: ARRAY
22615: PPUSH
22616: CALL_OW 458
22620: AND
22621: IFFALSE 22715
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22623: LD_EXP 109
22627: PUSH
22628: LD_VAR 0 1
22632: ARRAY
22633: PUSH
22634: LD_VAR 0 2
22638: ARRAY
22639: PUSH
22640: LD_INT 1
22642: ARRAY
22643: PPUSH
22644: LD_EXP 109
22648: PUSH
22649: LD_VAR 0 1
22653: ARRAY
22654: PUSH
22655: LD_VAR 0 2
22659: ARRAY
22660: PUSH
22661: LD_INT 2
22663: ARRAY
22664: PPUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22674: LD_ADDR_EXP 109
22678: PUSH
22679: LD_EXP 109
22683: PPUSH
22684: LD_VAR 0 1
22688: PPUSH
22689: LD_EXP 109
22693: PUSH
22694: LD_VAR 0 1
22698: ARRAY
22699: PPUSH
22700: LD_VAR 0 2
22704: PPUSH
22705: CALL_OW 3
22709: PPUSH
22710: CALL_OW 1
22714: ST_TO_ADDR
// end ; end ;
22715: GO 22466
22717: POP
22718: POP
// end ;
22719: GO 22384
22721: POP
22722: POP
// end ;
22723: PPOPN 4
22725: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
// result := false ;
22730: LD_ADDR_VAR 0 4
22734: PUSH
22735: LD_INT 0
22737: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22738: LD_VAR 0 1
22742: PPUSH
22743: CALL_OW 264
22747: PUSH
22748: LD_INT 81
22750: EQUAL
22751: NOT
22752: IFFALSE 22756
// exit ;
22754: GO 22996
// index := GetElementIndex ( minersList , unit ) ;
22756: LD_ADDR_VAR 0 5
22760: PUSH
22761: LD_EXP 108
22765: PPUSH
22766: LD_VAR 0 1
22770: PPUSH
22771: CALL 28954 0 2
22775: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22776: LD_EXP 109
22780: PUSH
22781: LD_VAR 0 5
22785: ARRAY
22786: PUSH
22787: LD_EXP 110
22791: GREATEREQUAL
22792: IFFALSE 22796
// exit ;
22794: GO 22996
// ComMoveXY ( unit , x , y ) ;
22796: LD_VAR 0 1
22800: PPUSH
22801: LD_VAR 0 2
22805: PPUSH
22806: LD_VAR 0 3
22810: PPUSH
22811: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22815: LD_INT 35
22817: PPUSH
22818: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22822: LD_VAR 0 1
22826: PPUSH
22827: LD_VAR 0 2
22831: PPUSH
22832: LD_VAR 0 3
22836: PPUSH
22837: CALL 60338 0 3
22841: NOT
22842: PUSH
22843: LD_VAR 0 1
22847: PPUSH
22848: CALL_OW 314
22852: AND
22853: IFFALSE 22857
// exit ;
22855: GO 22996
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22857: LD_VAR 0 2
22861: PPUSH
22862: LD_VAR 0 3
22866: PPUSH
22867: CALL_OW 428
22871: PUSH
22872: LD_VAR 0 1
22876: EQUAL
22877: PUSH
22878: LD_VAR 0 1
22882: PPUSH
22883: CALL_OW 314
22887: NOT
22888: AND
22889: IFFALSE 22815
// PlaySoundXY ( x , y , PlantMine ) ;
22891: LD_VAR 0 2
22895: PPUSH
22896: LD_VAR 0 3
22900: PPUSH
22901: LD_STRING PlantMine
22903: PPUSH
22904: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22908: LD_VAR 0 2
22912: PPUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_VAR 0 1
22922: PPUSH
22923: CALL_OW 255
22927: PPUSH
22928: LD_INT 0
22930: PPUSH
22931: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22935: LD_ADDR_EXP 109
22939: PUSH
22940: LD_EXP 109
22944: PPUSH
22945: LD_VAR 0 5
22949: PUSH
22950: LD_EXP 109
22954: PUSH
22955: LD_VAR 0 5
22959: ARRAY
22960: PUSH
22961: LD_INT 1
22963: PLUS
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PPUSH
22969: LD_VAR 0 2
22973: PUSH
22974: LD_VAR 0 3
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PPUSH
22983: CALL 29169 0 3
22987: ST_TO_ADDR
// result := true ;
22988: LD_ADDR_VAR 0 4
22992: PUSH
22993: LD_INT 1
22995: ST_TO_ADDR
// end ;
22996: LD_VAR 0 4
23000: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23001: LD_INT 0
23003: PPUSH
23004: PPUSH
23005: PPUSH
// if not unit in minersList then
23006: LD_VAR 0 1
23010: PUSH
23011: LD_EXP 108
23015: IN
23016: NOT
23017: IFFALSE 23021
// exit ;
23019: GO 23413
// index := GetElementIndex ( minersList , unit ) ;
23021: LD_ADDR_VAR 0 6
23025: PUSH
23026: LD_EXP 108
23030: PPUSH
23031: LD_VAR 0 1
23035: PPUSH
23036: CALL 28954 0 2
23040: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23041: LD_ADDR_VAR 0 5
23045: PUSH
23046: DOUBLE
23047: LD_EXP 109
23051: PUSH
23052: LD_VAR 0 6
23056: ARRAY
23057: INC
23058: ST_TO_ADDR
23059: LD_INT 1
23061: PUSH
23062: FOR_DOWNTO
23063: IFFALSE 23224
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23065: LD_EXP 109
23069: PUSH
23070: LD_VAR 0 6
23074: ARRAY
23075: PUSH
23076: LD_VAR 0 5
23080: ARRAY
23081: PUSH
23082: LD_INT 1
23084: ARRAY
23085: PUSH
23086: LD_VAR 0 2
23090: EQUAL
23091: PUSH
23092: LD_EXP 109
23096: PUSH
23097: LD_VAR 0 6
23101: ARRAY
23102: PUSH
23103: LD_VAR 0 5
23107: ARRAY
23108: PUSH
23109: LD_INT 2
23111: ARRAY
23112: PUSH
23113: LD_VAR 0 3
23117: EQUAL
23118: AND
23119: IFFALSE 23222
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23121: LD_EXP 109
23125: PUSH
23126: LD_VAR 0 6
23130: ARRAY
23131: PUSH
23132: LD_VAR 0 5
23136: ARRAY
23137: PUSH
23138: LD_INT 1
23140: ARRAY
23141: PPUSH
23142: LD_EXP 109
23146: PUSH
23147: LD_VAR 0 6
23151: ARRAY
23152: PUSH
23153: LD_VAR 0 5
23157: ARRAY
23158: PUSH
23159: LD_INT 2
23161: ARRAY
23162: PPUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: CALL_OW 255
23172: PPUSH
23173: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23177: LD_ADDR_EXP 109
23181: PUSH
23182: LD_EXP 109
23186: PPUSH
23187: LD_VAR 0 6
23191: PPUSH
23192: LD_EXP 109
23196: PUSH
23197: LD_VAR 0 6
23201: ARRAY
23202: PPUSH
23203: LD_VAR 0 5
23207: PPUSH
23208: CALL_OW 3
23212: PPUSH
23213: CALL_OW 1
23217: ST_TO_ADDR
// exit ;
23218: POP
23219: POP
23220: GO 23413
// end ; end ;
23222: GO 23062
23224: POP
23225: POP
// for i := minerMinesList [ index ] downto 1 do
23226: LD_ADDR_VAR 0 5
23230: PUSH
23231: DOUBLE
23232: LD_EXP 109
23236: PUSH
23237: LD_VAR 0 6
23241: ARRAY
23242: INC
23243: ST_TO_ADDR
23244: LD_INT 1
23246: PUSH
23247: FOR_DOWNTO
23248: IFFALSE 23411
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23250: LD_EXP 109
23254: PUSH
23255: LD_VAR 0 6
23259: ARRAY
23260: PUSH
23261: LD_VAR 0 5
23265: ARRAY
23266: PUSH
23267: LD_INT 1
23269: ARRAY
23270: PPUSH
23271: LD_EXP 109
23275: PUSH
23276: LD_VAR 0 6
23280: ARRAY
23281: PUSH
23282: LD_VAR 0 5
23286: ARRAY
23287: PUSH
23288: LD_INT 2
23290: ARRAY
23291: PPUSH
23292: LD_VAR 0 2
23296: PPUSH
23297: LD_VAR 0 3
23301: PPUSH
23302: CALL_OW 298
23306: PUSH
23307: LD_INT 6
23309: LESS
23310: IFFALSE 23409
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23312: LD_EXP 109
23316: PUSH
23317: LD_VAR 0 6
23321: ARRAY
23322: PUSH
23323: LD_VAR 0 5
23327: ARRAY
23328: PUSH
23329: LD_INT 1
23331: ARRAY
23332: PPUSH
23333: LD_EXP 109
23337: PUSH
23338: LD_VAR 0 6
23342: ARRAY
23343: PUSH
23344: LD_VAR 0 5
23348: ARRAY
23349: PUSH
23350: LD_INT 2
23352: ARRAY
23353: PPUSH
23354: LD_VAR 0 1
23358: PPUSH
23359: CALL_OW 255
23363: PPUSH
23364: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23368: LD_ADDR_EXP 109
23372: PUSH
23373: LD_EXP 109
23377: PPUSH
23378: LD_VAR 0 6
23382: PPUSH
23383: LD_EXP 109
23387: PUSH
23388: LD_VAR 0 6
23392: ARRAY
23393: PPUSH
23394: LD_VAR 0 5
23398: PPUSH
23399: CALL_OW 3
23403: PPUSH
23404: CALL_OW 1
23408: ST_TO_ADDR
// end ; end ;
23409: GO 23247
23411: POP
23412: POP
// end ;
23413: LD_VAR 0 4
23417: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23418: LD_INT 0
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
23425: PPUSH
23426: PPUSH
23427: PPUSH
23428: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 264
23438: PUSH
23439: LD_INT 81
23441: EQUAL
23442: NOT
23443: PUSH
23444: LD_VAR 0 1
23448: PUSH
23449: LD_EXP 108
23453: IN
23454: NOT
23455: OR
23456: IFFALSE 23460
// exit ;
23458: GO 23782
// index := GetElementIndex ( minersList , unit ) ;
23460: LD_ADDR_VAR 0 6
23464: PUSH
23465: LD_EXP 108
23469: PPUSH
23470: LD_VAR 0 1
23474: PPUSH
23475: CALL 28954 0 2
23479: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23480: LD_ADDR_VAR 0 8
23484: PUSH
23485: LD_EXP 110
23489: PUSH
23490: LD_EXP 109
23494: PUSH
23495: LD_VAR 0 6
23499: ARRAY
23500: MINUS
23501: ST_TO_ADDR
// if not minesFreeAmount then
23502: LD_VAR 0 8
23506: NOT
23507: IFFALSE 23511
// exit ;
23509: GO 23782
// tmp := [ ] ;
23511: LD_ADDR_VAR 0 7
23515: PUSH
23516: EMPTY
23517: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23518: LD_ADDR_VAR 0 5
23522: PUSH
23523: DOUBLE
23524: LD_INT 1
23526: DEC
23527: ST_TO_ADDR
23528: LD_VAR 0 8
23532: PUSH
23533: FOR_TO
23534: IFFALSE 23729
// begin _d := rand ( 0 , 5 ) ;
23536: LD_ADDR_VAR 0 11
23540: PUSH
23541: LD_INT 0
23543: PPUSH
23544: LD_INT 5
23546: PPUSH
23547: CALL_OW 12
23551: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23552: LD_ADDR_VAR 0 12
23556: PUSH
23557: LD_INT 2
23559: PPUSH
23560: LD_INT 6
23562: PPUSH
23563: CALL_OW 12
23567: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23568: LD_ADDR_VAR 0 9
23572: PUSH
23573: LD_VAR 0 2
23577: PPUSH
23578: LD_VAR 0 11
23582: PPUSH
23583: LD_VAR 0 12
23587: PPUSH
23588: CALL_OW 272
23592: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23593: LD_ADDR_VAR 0 10
23597: PUSH
23598: LD_VAR 0 3
23602: PPUSH
23603: LD_VAR 0 11
23607: PPUSH
23608: LD_VAR 0 12
23612: PPUSH
23613: CALL_OW 273
23617: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23618: LD_VAR 0 9
23622: PPUSH
23623: LD_VAR 0 10
23627: PPUSH
23628: CALL_OW 488
23632: PUSH
23633: LD_VAR 0 9
23637: PUSH
23638: LD_VAR 0 10
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_VAR 0 7
23651: IN
23652: NOT
23653: AND
23654: PUSH
23655: LD_VAR 0 9
23659: PPUSH
23660: LD_VAR 0 10
23664: PPUSH
23665: CALL_OW 458
23669: NOT
23670: AND
23671: IFFALSE 23713
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23673: LD_ADDR_VAR 0 7
23677: PUSH
23678: LD_VAR 0 7
23682: PPUSH
23683: LD_VAR 0 7
23687: PUSH
23688: LD_INT 1
23690: PLUS
23691: PPUSH
23692: LD_VAR 0 9
23696: PUSH
23697: LD_VAR 0 10
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PPUSH
23706: CALL_OW 1
23710: ST_TO_ADDR
23711: GO 23727
// i := i - 1 ;
23713: LD_ADDR_VAR 0 5
23717: PUSH
23718: LD_VAR 0 5
23722: PUSH
23723: LD_INT 1
23725: MINUS
23726: ST_TO_ADDR
// end ;
23727: GO 23533
23729: POP
23730: POP
// for i in tmp do
23731: LD_ADDR_VAR 0 5
23735: PUSH
23736: LD_VAR 0 7
23740: PUSH
23741: FOR_IN
23742: IFFALSE 23780
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23744: LD_VAR 0 1
23748: PPUSH
23749: LD_VAR 0 5
23753: PUSH
23754: LD_INT 1
23756: ARRAY
23757: PPUSH
23758: LD_VAR 0 5
23762: PUSH
23763: LD_INT 2
23765: ARRAY
23766: PPUSH
23767: CALL 22726 0 3
23771: NOT
23772: IFFALSE 23778
// exit ;
23774: POP
23775: POP
23776: GO 23782
23778: GO 23741
23780: POP
23781: POP
// end ;
23782: LD_VAR 0 4
23786: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23787: LD_INT 0
23789: PPUSH
23790: PPUSH
23791: PPUSH
23792: PPUSH
23793: PPUSH
23794: PPUSH
23795: PPUSH
// if not GetClass ( unit ) = class_sniper then
23796: LD_VAR 0 1
23800: PPUSH
23801: CALL_OW 257
23805: PUSH
23806: LD_INT 5
23808: EQUAL
23809: NOT
23810: IFFALSE 23814
// exit ;
23812: GO 24202
// dist := 8 ;
23814: LD_ADDR_VAR 0 5
23818: PUSH
23819: LD_INT 8
23821: ST_TO_ADDR
// viewRange := 12 ;
23822: LD_ADDR_VAR 0 7
23826: PUSH
23827: LD_INT 12
23829: ST_TO_ADDR
// side := GetSide ( unit ) ;
23830: LD_ADDR_VAR 0 6
23834: PUSH
23835: LD_VAR 0 1
23839: PPUSH
23840: CALL_OW 255
23844: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23845: LD_INT 61
23847: PPUSH
23848: LD_VAR 0 6
23852: PPUSH
23853: CALL_OW 321
23857: PUSH
23858: LD_INT 2
23860: EQUAL
23861: IFFALSE 23871
// viewRange := 16 ;
23863: LD_ADDR_VAR 0 7
23867: PUSH
23868: LD_INT 16
23870: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23871: LD_VAR 0 1
23875: PPUSH
23876: LD_VAR 0 2
23880: PPUSH
23881: LD_VAR 0 3
23885: PPUSH
23886: CALL_OW 297
23890: PUSH
23891: LD_VAR 0 5
23895: GREATER
23896: IFFALSE 23975
// begin ComMoveXY ( unit , x , y ) ;
23898: LD_VAR 0 1
23902: PPUSH
23903: LD_VAR 0 2
23907: PPUSH
23908: LD_VAR 0 3
23912: PPUSH
23913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23917: LD_INT 35
23919: PPUSH
23920: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23924: LD_VAR 0 1
23928: PPUSH
23929: LD_VAR 0 2
23933: PPUSH
23934: LD_VAR 0 3
23938: PPUSH
23939: CALL 60338 0 3
23943: NOT
23944: IFFALSE 23948
// exit ;
23946: GO 24202
// until GetDistUnitXY ( unit , x , y ) < dist ;
23948: LD_VAR 0 1
23952: PPUSH
23953: LD_VAR 0 2
23957: PPUSH
23958: LD_VAR 0 3
23962: PPUSH
23963: CALL_OW 297
23967: PUSH
23968: LD_VAR 0 5
23972: LESS
23973: IFFALSE 23917
// end ; ComTurnXY ( unit , x , y ) ;
23975: LD_VAR 0 1
23979: PPUSH
23980: LD_VAR 0 2
23984: PPUSH
23985: LD_VAR 0 3
23989: PPUSH
23990: CALL_OW 118
// wait ( 5 ) ;
23994: LD_INT 5
23996: PPUSH
23997: CALL_OW 67
// _d := GetDir ( unit ) ;
24001: LD_ADDR_VAR 0 10
24005: PUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 254
24015: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24016: LD_ADDR_VAR 0 8
24020: PUSH
24021: LD_VAR 0 1
24025: PPUSH
24026: CALL_OW 250
24030: PPUSH
24031: LD_VAR 0 10
24035: PPUSH
24036: LD_VAR 0 5
24040: PPUSH
24041: CALL_OW 272
24045: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24046: LD_ADDR_VAR 0 9
24050: PUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 251
24060: PPUSH
24061: LD_VAR 0 10
24065: PPUSH
24066: LD_VAR 0 5
24070: PPUSH
24071: CALL_OW 273
24075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24076: LD_VAR 0 8
24080: PPUSH
24081: LD_VAR 0 9
24085: PPUSH
24086: CALL_OW 488
24090: NOT
24091: IFFALSE 24095
// exit ;
24093: GO 24202
// ComAnimCustom ( unit , 1 ) ;
24095: LD_VAR 0 1
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24107: LD_VAR 0 8
24111: PPUSH
24112: LD_VAR 0 9
24116: PPUSH
24117: LD_VAR 0 6
24121: PPUSH
24122: LD_VAR 0 7
24126: PPUSH
24127: CALL_OW 330
// repeat wait ( 1 ) ;
24131: LD_INT 1
24133: PPUSH
24134: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24138: LD_VAR 0 1
24142: PPUSH
24143: CALL_OW 316
24147: PUSH
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 314
24157: OR
24158: PUSH
24159: LD_VAR 0 1
24163: PPUSH
24164: CALL_OW 302
24168: NOT
24169: OR
24170: PUSH
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 301
24180: OR
24181: IFFALSE 24131
// RemoveSeeing ( _x , _y , side ) ;
24183: LD_VAR 0 8
24187: PPUSH
24188: LD_VAR 0 9
24192: PPUSH
24193: LD_VAR 0 6
24197: PPUSH
24198: CALL_OW 331
// end ; end_of_file
24202: LD_VAR 0 4
24206: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24207: LD_INT 0
24209: PPUSH
24210: PPUSH
// if exist_mode then
24211: LD_VAR 0 2
24215: IFFALSE 24240
// unit := CreateCharacter ( prefix & ident ) else
24217: LD_ADDR_VAR 0 5
24221: PUSH
24222: LD_VAR 0 3
24226: PUSH
24227: LD_VAR 0 1
24231: STR
24232: PPUSH
24233: CALL_OW 34
24237: ST_TO_ADDR
24238: GO 24255
// unit := NewCharacter ( ident ) ;
24240: LD_ADDR_VAR 0 5
24244: PUSH
24245: LD_VAR 0 1
24249: PPUSH
24250: CALL_OW 25
24254: ST_TO_ADDR
// result := unit ;
24255: LD_ADDR_VAR 0 4
24259: PUSH
24260: LD_VAR 0 5
24264: ST_TO_ADDR
// end ;
24265: LD_VAR 0 4
24269: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24270: LD_INT 0
24272: PPUSH
24273: PPUSH
// if not side or not nation then
24274: LD_VAR 0 1
24278: NOT
24279: PUSH
24280: LD_VAR 0 2
24284: NOT
24285: OR
24286: IFFALSE 24290
// exit ;
24288: GO 25058
// case nation of nation_american :
24290: LD_VAR 0 2
24294: PUSH
24295: LD_INT 1
24297: DOUBLE
24298: EQUAL
24299: IFTRUE 24303
24301: GO 24517
24303: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24304: LD_ADDR_VAR 0 4
24308: PUSH
24309: LD_INT 35
24311: PUSH
24312: LD_INT 45
24314: PUSH
24315: LD_INT 46
24317: PUSH
24318: LD_INT 47
24320: PUSH
24321: LD_INT 82
24323: PUSH
24324: LD_INT 83
24326: PUSH
24327: LD_INT 84
24329: PUSH
24330: LD_INT 85
24332: PUSH
24333: LD_INT 86
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: LD_INT 2
24341: PUSH
24342: LD_INT 6
24344: PUSH
24345: LD_INT 15
24347: PUSH
24348: LD_INT 16
24350: PUSH
24351: LD_INT 7
24353: PUSH
24354: LD_INT 12
24356: PUSH
24357: LD_INT 13
24359: PUSH
24360: LD_INT 10
24362: PUSH
24363: LD_INT 14
24365: PUSH
24366: LD_INT 20
24368: PUSH
24369: LD_INT 21
24371: PUSH
24372: LD_INT 22
24374: PUSH
24375: LD_INT 25
24377: PUSH
24378: LD_INT 32
24380: PUSH
24381: LD_INT 27
24383: PUSH
24384: LD_INT 36
24386: PUSH
24387: LD_INT 69
24389: PUSH
24390: LD_INT 39
24392: PUSH
24393: LD_INT 34
24395: PUSH
24396: LD_INT 40
24398: PUSH
24399: LD_INT 48
24401: PUSH
24402: LD_INT 49
24404: PUSH
24405: LD_INT 50
24407: PUSH
24408: LD_INT 51
24410: PUSH
24411: LD_INT 52
24413: PUSH
24414: LD_INT 53
24416: PUSH
24417: LD_INT 54
24419: PUSH
24420: LD_INT 55
24422: PUSH
24423: LD_INT 56
24425: PUSH
24426: LD_INT 57
24428: PUSH
24429: LD_INT 58
24431: PUSH
24432: LD_INT 59
24434: PUSH
24435: LD_INT 60
24437: PUSH
24438: LD_INT 61
24440: PUSH
24441: LD_INT 62
24443: PUSH
24444: LD_INT 80
24446: PUSH
24447: LD_INT 82
24449: PUSH
24450: LD_INT 83
24452: PUSH
24453: LD_INT 84
24455: PUSH
24456: LD_INT 85
24458: PUSH
24459: LD_INT 86
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: ST_TO_ADDR
24515: GO 24982
24517: LD_INT 2
24519: DOUBLE
24520: EQUAL
24521: IFTRUE 24525
24523: GO 24751
24525: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24526: LD_ADDR_VAR 0 4
24530: PUSH
24531: LD_INT 35
24533: PUSH
24534: LD_INT 45
24536: PUSH
24537: LD_INT 46
24539: PUSH
24540: LD_INT 47
24542: PUSH
24543: LD_INT 82
24545: PUSH
24546: LD_INT 83
24548: PUSH
24549: LD_INT 84
24551: PUSH
24552: LD_INT 85
24554: PUSH
24555: LD_INT 87
24557: PUSH
24558: LD_INT 70
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 11
24566: PUSH
24567: LD_INT 3
24569: PUSH
24570: LD_INT 4
24572: PUSH
24573: LD_INT 5
24575: PUSH
24576: LD_INT 6
24578: PUSH
24579: LD_INT 15
24581: PUSH
24582: LD_INT 18
24584: PUSH
24585: LD_INT 7
24587: PUSH
24588: LD_INT 17
24590: PUSH
24591: LD_INT 8
24593: PUSH
24594: LD_INT 20
24596: PUSH
24597: LD_INT 21
24599: PUSH
24600: LD_INT 22
24602: PUSH
24603: LD_INT 72
24605: PUSH
24606: LD_INT 26
24608: PUSH
24609: LD_INT 69
24611: PUSH
24612: LD_INT 39
24614: PUSH
24615: LD_INT 40
24617: PUSH
24618: LD_INT 41
24620: PUSH
24621: LD_INT 42
24623: PUSH
24624: LD_INT 43
24626: PUSH
24627: LD_INT 48
24629: PUSH
24630: LD_INT 49
24632: PUSH
24633: LD_INT 50
24635: PUSH
24636: LD_INT 51
24638: PUSH
24639: LD_INT 52
24641: PUSH
24642: LD_INT 53
24644: PUSH
24645: LD_INT 54
24647: PUSH
24648: LD_INT 55
24650: PUSH
24651: LD_INT 56
24653: PUSH
24654: LD_INT 60
24656: PUSH
24657: LD_INT 61
24659: PUSH
24660: LD_INT 62
24662: PUSH
24663: LD_INT 66
24665: PUSH
24666: LD_INT 67
24668: PUSH
24669: LD_INT 68
24671: PUSH
24672: LD_INT 81
24674: PUSH
24675: LD_INT 82
24677: PUSH
24678: LD_INT 83
24680: PUSH
24681: LD_INT 84
24683: PUSH
24684: LD_INT 85
24686: PUSH
24687: LD_INT 87
24689: PUSH
24690: LD_INT 88
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: ST_TO_ADDR
24749: GO 24982
24751: LD_INT 3
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24981
24759: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24760: LD_ADDR_VAR 0 4
24764: PUSH
24765: LD_INT 46
24767: PUSH
24768: LD_INT 47
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 2
24776: PUSH
24777: LD_INT 82
24779: PUSH
24780: LD_INT 83
24782: PUSH
24783: LD_INT 84
24785: PUSH
24786: LD_INT 85
24788: PUSH
24789: LD_INT 86
24791: PUSH
24792: LD_INT 11
24794: PUSH
24795: LD_INT 9
24797: PUSH
24798: LD_INT 20
24800: PUSH
24801: LD_INT 19
24803: PUSH
24804: LD_INT 21
24806: PUSH
24807: LD_INT 24
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 25
24815: PUSH
24816: LD_INT 28
24818: PUSH
24819: LD_INT 29
24821: PUSH
24822: LD_INT 30
24824: PUSH
24825: LD_INT 31
24827: PUSH
24828: LD_INT 37
24830: PUSH
24831: LD_INT 38
24833: PUSH
24834: LD_INT 32
24836: PUSH
24837: LD_INT 27
24839: PUSH
24840: LD_INT 33
24842: PUSH
24843: LD_INT 69
24845: PUSH
24846: LD_INT 39
24848: PUSH
24849: LD_INT 34
24851: PUSH
24852: LD_INT 40
24854: PUSH
24855: LD_INT 71
24857: PUSH
24858: LD_INT 23
24860: PUSH
24861: LD_INT 44
24863: PUSH
24864: LD_INT 48
24866: PUSH
24867: LD_INT 49
24869: PUSH
24870: LD_INT 50
24872: PUSH
24873: LD_INT 51
24875: PUSH
24876: LD_INT 52
24878: PUSH
24879: LD_INT 53
24881: PUSH
24882: LD_INT 54
24884: PUSH
24885: LD_INT 55
24887: PUSH
24888: LD_INT 56
24890: PUSH
24891: LD_INT 57
24893: PUSH
24894: LD_INT 58
24896: PUSH
24897: LD_INT 59
24899: PUSH
24900: LD_INT 63
24902: PUSH
24903: LD_INT 64
24905: PUSH
24906: LD_INT 65
24908: PUSH
24909: LD_INT 82
24911: PUSH
24912: LD_INT 83
24914: PUSH
24915: LD_INT 84
24917: PUSH
24918: LD_INT 85
24920: PUSH
24921: LD_INT 86
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: ST_TO_ADDR
24979: GO 24982
24981: POP
// if state > - 1 and state < 3 then
24982: LD_VAR 0 3
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: GREATER
24991: PUSH
24992: LD_VAR 0 3
24996: PUSH
24997: LD_INT 3
24999: LESS
25000: AND
25001: IFFALSE 25058
// for i in result do
25003: LD_ADDR_VAR 0 5
25007: PUSH
25008: LD_VAR 0 4
25012: PUSH
25013: FOR_IN
25014: IFFALSE 25056
// if GetTech ( i , side ) <> state then
25016: LD_VAR 0 5
25020: PPUSH
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 321
25030: PUSH
25031: LD_VAR 0 3
25035: NONEQUAL
25036: IFFALSE 25054
// result := result diff i ;
25038: LD_ADDR_VAR 0 4
25042: PUSH
25043: LD_VAR 0 4
25047: PUSH
25048: LD_VAR 0 5
25052: DIFF
25053: ST_TO_ADDR
25054: GO 25013
25056: POP
25057: POP
// end ;
25058: LD_VAR 0 4
25062: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25063: LD_INT 0
25065: PPUSH
25066: PPUSH
25067: PPUSH
// result := true ;
25068: LD_ADDR_VAR 0 3
25072: PUSH
25073: LD_INT 1
25075: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25076: LD_ADDR_VAR 0 5
25080: PUSH
25081: LD_VAR 0 2
25085: PPUSH
25086: CALL_OW 480
25090: ST_TO_ADDR
// if not tmp then
25091: LD_VAR 0 5
25095: NOT
25096: IFFALSE 25100
// exit ;
25098: GO 25149
// for i in tmp do
25100: LD_ADDR_VAR 0 4
25104: PUSH
25105: LD_VAR 0 5
25109: PUSH
25110: FOR_IN
25111: IFFALSE 25147
// if GetTech ( i , side ) <> state_researched then
25113: LD_VAR 0 4
25117: PPUSH
25118: LD_VAR 0 1
25122: PPUSH
25123: CALL_OW 321
25127: PUSH
25128: LD_INT 2
25130: NONEQUAL
25131: IFFALSE 25145
// begin result := false ;
25133: LD_ADDR_VAR 0 3
25137: PUSH
25138: LD_INT 0
25140: ST_TO_ADDR
// exit ;
25141: POP
25142: POP
25143: GO 25149
// end ;
25145: GO 25110
25147: POP
25148: POP
// end ;
25149: LD_VAR 0 3
25153: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25154: LD_INT 0
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
25160: PPUSH
25161: PPUSH
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25169: LD_VAR 0 1
25173: NOT
25174: PUSH
25175: LD_VAR 0 1
25179: PPUSH
25180: CALL_OW 257
25184: PUSH
25185: LD_INT 9
25187: NONEQUAL
25188: OR
25189: IFFALSE 25193
// exit ;
25191: GO 25766
// side := GetSide ( unit ) ;
25193: LD_ADDR_VAR 0 9
25197: PUSH
25198: LD_VAR 0 1
25202: PPUSH
25203: CALL_OW 255
25207: ST_TO_ADDR
// tech_space := tech_spacanom ;
25208: LD_ADDR_VAR 0 12
25212: PUSH
25213: LD_INT 29
25215: ST_TO_ADDR
// tech_time := tech_taurad ;
25216: LD_ADDR_VAR 0 13
25220: PUSH
25221: LD_INT 28
25223: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25224: LD_ADDR_VAR 0 11
25228: PUSH
25229: LD_VAR 0 1
25233: PPUSH
25234: CALL_OW 310
25238: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25239: LD_VAR 0 11
25243: PPUSH
25244: CALL_OW 247
25248: PUSH
25249: LD_INT 2
25251: EQUAL
25252: IFFALSE 25256
// exit ;
25254: GO 25766
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25256: LD_ADDR_VAR 0 8
25260: PUSH
25261: LD_INT 81
25263: PUSH
25264: LD_VAR 0 9
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 3
25275: PUSH
25276: LD_INT 21
25278: PUSH
25279: LD_INT 3
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PPUSH
25294: CALL_OW 69
25298: ST_TO_ADDR
// if not tmp then
25299: LD_VAR 0 8
25303: NOT
25304: IFFALSE 25308
// exit ;
25306: GO 25766
// if in_unit then
25308: LD_VAR 0 11
25312: IFFALSE 25336
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25314: LD_ADDR_VAR 0 10
25318: PUSH
25319: LD_VAR 0 8
25323: PPUSH
25324: LD_VAR 0 11
25328: PPUSH
25329: CALL_OW 74
25333: ST_TO_ADDR
25334: GO 25356
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25336: LD_ADDR_VAR 0 10
25340: PUSH
25341: LD_VAR 0 8
25345: PPUSH
25346: LD_VAR 0 1
25350: PPUSH
25351: CALL_OW 74
25355: ST_TO_ADDR
// if not enemy then
25356: LD_VAR 0 10
25360: NOT
25361: IFFALSE 25365
// exit ;
25363: GO 25766
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25365: LD_VAR 0 11
25369: PUSH
25370: LD_VAR 0 11
25374: PPUSH
25375: LD_VAR 0 10
25379: PPUSH
25380: CALL_OW 296
25384: PUSH
25385: LD_INT 13
25387: GREATER
25388: AND
25389: PUSH
25390: LD_VAR 0 1
25394: PPUSH
25395: LD_VAR 0 10
25399: PPUSH
25400: CALL_OW 296
25404: PUSH
25405: LD_INT 12
25407: GREATER
25408: OR
25409: IFFALSE 25413
// exit ;
25411: GO 25766
// missile := [ 1 ] ;
25413: LD_ADDR_VAR 0 14
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: EMPTY
25422: LIST
25423: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25424: LD_VAR 0 9
25428: PPUSH
25429: LD_VAR 0 12
25433: PPUSH
25434: CALL_OW 325
25438: IFFALSE 25467
// missile := Replace ( missile , missile + 1 , 2 ) ;
25440: LD_ADDR_VAR 0 14
25444: PUSH
25445: LD_VAR 0 14
25449: PPUSH
25450: LD_VAR 0 14
25454: PUSH
25455: LD_INT 1
25457: PLUS
25458: PPUSH
25459: LD_INT 2
25461: PPUSH
25462: CALL_OW 1
25466: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25467: LD_VAR 0 9
25471: PPUSH
25472: LD_VAR 0 13
25476: PPUSH
25477: CALL_OW 325
25481: PUSH
25482: LD_VAR 0 10
25486: PPUSH
25487: CALL_OW 255
25491: PPUSH
25492: LD_VAR 0 13
25496: PPUSH
25497: CALL_OW 325
25501: NOT
25502: AND
25503: IFFALSE 25532
// missile := Replace ( missile , missile + 1 , 3 ) ;
25505: LD_ADDR_VAR 0 14
25509: PUSH
25510: LD_VAR 0 14
25514: PPUSH
25515: LD_VAR 0 14
25519: PUSH
25520: LD_INT 1
25522: PLUS
25523: PPUSH
25524: LD_INT 3
25526: PPUSH
25527: CALL_OW 1
25531: ST_TO_ADDR
// if missile < 2 then
25532: LD_VAR 0 14
25536: PUSH
25537: LD_INT 2
25539: LESS
25540: IFFALSE 25544
// exit ;
25542: GO 25766
// x := GetX ( enemy ) ;
25544: LD_ADDR_VAR 0 4
25548: PUSH
25549: LD_VAR 0 10
25553: PPUSH
25554: CALL_OW 250
25558: ST_TO_ADDR
// y := GetY ( enemy ) ;
25559: LD_ADDR_VAR 0 5
25563: PUSH
25564: LD_VAR 0 10
25568: PPUSH
25569: CALL_OW 251
25573: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25574: LD_ADDR_VAR 0 6
25578: PUSH
25579: LD_VAR 0 4
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PPUSH
25588: LD_INT 1
25590: PPUSH
25591: CALL_OW 12
25595: PLUS
25596: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25597: LD_ADDR_VAR 0 7
25601: PUSH
25602: LD_VAR 0 5
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PPUSH
25611: LD_INT 1
25613: PPUSH
25614: CALL_OW 12
25618: PLUS
25619: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25620: LD_VAR 0 6
25624: PPUSH
25625: LD_VAR 0 7
25629: PPUSH
25630: CALL_OW 488
25634: NOT
25635: IFFALSE 25657
// begin _x := x ;
25637: LD_ADDR_VAR 0 6
25641: PUSH
25642: LD_VAR 0 4
25646: ST_TO_ADDR
// _y := y ;
25647: LD_ADDR_VAR 0 7
25651: PUSH
25652: LD_VAR 0 5
25656: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25657: LD_ADDR_VAR 0 3
25661: PUSH
25662: LD_INT 1
25664: PPUSH
25665: LD_VAR 0 14
25669: PPUSH
25670: CALL_OW 12
25674: ST_TO_ADDR
// case i of 1 :
25675: LD_VAR 0 3
25679: PUSH
25680: LD_INT 1
25682: DOUBLE
25683: EQUAL
25684: IFTRUE 25688
25686: GO 25705
25688: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25689: LD_VAR 0 1
25693: PPUSH
25694: LD_VAR 0 10
25698: PPUSH
25699: CALL_OW 115
25703: GO 25766
25705: LD_INT 2
25707: DOUBLE
25708: EQUAL
25709: IFTRUE 25713
25711: GO 25735
25713: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25714: LD_VAR 0 1
25718: PPUSH
25719: LD_VAR 0 6
25723: PPUSH
25724: LD_VAR 0 7
25728: PPUSH
25729: CALL_OW 153
25733: GO 25766
25735: LD_INT 3
25737: DOUBLE
25738: EQUAL
25739: IFTRUE 25743
25741: GO 25765
25743: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25744: LD_VAR 0 1
25748: PPUSH
25749: LD_VAR 0 6
25753: PPUSH
25754: LD_VAR 0 7
25758: PPUSH
25759: CALL_OW 154
25763: GO 25766
25765: POP
// end ;
25766: LD_VAR 0 2
25770: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25771: LD_INT 0
25773: PPUSH
25774: PPUSH
25775: PPUSH
25776: PPUSH
25777: PPUSH
25778: PPUSH
// if not unit or not building then
25779: LD_VAR 0 1
25783: NOT
25784: PUSH
25785: LD_VAR 0 2
25789: NOT
25790: OR
25791: IFFALSE 25795
// exit ;
25793: GO 25953
// x := GetX ( building ) ;
25795: LD_ADDR_VAR 0 5
25799: PUSH
25800: LD_VAR 0 2
25804: PPUSH
25805: CALL_OW 250
25809: ST_TO_ADDR
// y := GetY ( building ) ;
25810: LD_ADDR_VAR 0 6
25814: PUSH
25815: LD_VAR 0 2
25819: PPUSH
25820: CALL_OW 251
25824: ST_TO_ADDR
// for i = 0 to 5 do
25825: LD_ADDR_VAR 0 4
25829: PUSH
25830: DOUBLE
25831: LD_INT 0
25833: DEC
25834: ST_TO_ADDR
25835: LD_INT 5
25837: PUSH
25838: FOR_TO
25839: IFFALSE 25951
// begin _x := ShiftX ( x , i , 3 ) ;
25841: LD_ADDR_VAR 0 7
25845: PUSH
25846: LD_VAR 0 5
25850: PPUSH
25851: LD_VAR 0 4
25855: PPUSH
25856: LD_INT 3
25858: PPUSH
25859: CALL_OW 272
25863: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25864: LD_ADDR_VAR 0 8
25868: PUSH
25869: LD_VAR 0 6
25873: PPUSH
25874: LD_VAR 0 4
25878: PPUSH
25879: LD_INT 3
25881: PPUSH
25882: CALL_OW 273
25886: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25887: LD_VAR 0 7
25891: PPUSH
25892: LD_VAR 0 8
25896: PPUSH
25897: CALL_OW 488
25901: NOT
25902: IFFALSE 25906
// continue ;
25904: GO 25838
// if HexInfo ( _x , _y ) = 0 then
25906: LD_VAR 0 7
25910: PPUSH
25911: LD_VAR 0 8
25915: PPUSH
25916: CALL_OW 428
25920: PUSH
25921: LD_INT 0
25923: EQUAL
25924: IFFALSE 25949
// begin ComMoveXY ( unit , _x , _y ) ;
25926: LD_VAR 0 1
25930: PPUSH
25931: LD_VAR 0 7
25935: PPUSH
25936: LD_VAR 0 8
25940: PPUSH
25941: CALL_OW 111
// exit ;
25945: POP
25946: POP
25947: GO 25953
// end ; end ;
25949: GO 25838
25951: POP
25952: POP
// end ;
25953: LD_VAR 0 3
25957: RET
// export function ScanBase ( side , base_area ) ; begin
25958: LD_INT 0
25960: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25961: LD_ADDR_VAR 0 3
25965: PUSH
25966: LD_VAR 0 2
25970: PPUSH
25971: LD_INT 81
25973: PUSH
25974: LD_VAR 0 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PPUSH
25983: CALL_OW 70
25987: ST_TO_ADDR
// end ;
25988: LD_VAR 0 3
25992: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25993: LD_INT 0
25995: PPUSH
25996: PPUSH
25997: PPUSH
25998: PPUSH
// result := false ;
25999: LD_ADDR_VAR 0 2
26003: PUSH
26004: LD_INT 0
26006: ST_TO_ADDR
// side := GetSide ( unit ) ;
26007: LD_ADDR_VAR 0 3
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 255
26021: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26022: LD_ADDR_VAR 0 4
26026: PUSH
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 248
26036: ST_TO_ADDR
// case nat of 1 :
26037: LD_VAR 0 4
26041: PUSH
26042: LD_INT 1
26044: DOUBLE
26045: EQUAL
26046: IFTRUE 26050
26048: GO 26061
26050: POP
// tech := tech_lassight ; 2 :
26051: LD_ADDR_VAR 0 5
26055: PUSH
26056: LD_INT 12
26058: ST_TO_ADDR
26059: GO 26100
26061: LD_INT 2
26063: DOUBLE
26064: EQUAL
26065: IFTRUE 26069
26067: GO 26080
26069: POP
// tech := tech_mortar ; 3 :
26070: LD_ADDR_VAR 0 5
26074: PUSH
26075: LD_INT 41
26077: ST_TO_ADDR
26078: GO 26100
26080: LD_INT 3
26082: DOUBLE
26083: EQUAL
26084: IFTRUE 26088
26086: GO 26099
26088: POP
// tech := tech_bazooka ; end ;
26089: LD_ADDR_VAR 0 5
26093: PUSH
26094: LD_INT 44
26096: ST_TO_ADDR
26097: GO 26100
26099: POP
// if Researched ( side , tech ) then
26100: LD_VAR 0 3
26104: PPUSH
26105: LD_VAR 0 5
26109: PPUSH
26110: CALL_OW 325
26114: IFFALSE 26141
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26116: LD_ADDR_VAR 0 2
26120: PUSH
26121: LD_INT 5
26123: PUSH
26124: LD_INT 8
26126: PUSH
26127: LD_INT 9
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: PUSH
26135: LD_VAR 0 4
26139: ARRAY
26140: ST_TO_ADDR
// end ;
26141: LD_VAR 0 2
26145: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26146: LD_INT 0
26148: PPUSH
26149: PPUSH
26150: PPUSH
// if not mines then
26151: LD_VAR 0 2
26155: NOT
26156: IFFALSE 26160
// exit ;
26158: GO 26304
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26160: LD_ADDR_VAR 0 5
26164: PUSH
26165: LD_INT 81
26167: PUSH
26168: LD_VAR 0 1
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 3
26179: PUSH
26180: LD_INT 21
26182: PUSH
26183: LD_INT 3
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PPUSH
26198: CALL_OW 69
26202: ST_TO_ADDR
// for i in mines do
26203: LD_ADDR_VAR 0 4
26207: PUSH
26208: LD_VAR 0 2
26212: PUSH
26213: FOR_IN
26214: IFFALSE 26302
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26216: LD_VAR 0 4
26220: PUSH
26221: LD_INT 1
26223: ARRAY
26224: PPUSH
26225: LD_VAR 0 4
26229: PUSH
26230: LD_INT 2
26232: ARRAY
26233: PPUSH
26234: CALL_OW 458
26238: NOT
26239: IFFALSE 26243
// continue ;
26241: GO 26213
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26243: LD_VAR 0 4
26247: PUSH
26248: LD_INT 1
26250: ARRAY
26251: PPUSH
26252: LD_VAR 0 4
26256: PUSH
26257: LD_INT 2
26259: ARRAY
26260: PPUSH
26261: CALL_OW 428
26265: PUSH
26266: LD_VAR 0 5
26270: IN
26271: IFFALSE 26300
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26273: LD_VAR 0 4
26277: PUSH
26278: LD_INT 1
26280: ARRAY
26281: PPUSH
26282: LD_VAR 0 4
26286: PUSH
26287: LD_INT 2
26289: ARRAY
26290: PPUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 456
// end ;
26300: GO 26213
26302: POP
26303: POP
// end ;
26304: LD_VAR 0 3
26308: RET
// export function Count ( array ) ; begin
26309: LD_INT 0
26311: PPUSH
// result := array + 0 ;
26312: LD_ADDR_VAR 0 2
26316: PUSH
26317: LD_VAR 0 1
26321: PUSH
26322: LD_INT 0
26324: PLUS
26325: ST_TO_ADDR
// end ;
26326: LD_VAR 0 2
26330: RET
// export function IsEmpty ( building ) ; begin
26331: LD_INT 0
26333: PPUSH
// if not building then
26334: LD_VAR 0 1
26338: NOT
26339: IFFALSE 26343
// exit ;
26341: GO 26386
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26343: LD_ADDR_VAR 0 2
26347: PUSH
26348: LD_VAR 0 1
26352: PUSH
26353: LD_INT 22
26355: PUSH
26356: LD_VAR 0 1
26360: PPUSH
26361: CALL_OW 255
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 58
26372: PUSH
26373: EMPTY
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: IN
26385: ST_TO_ADDR
// end ;
26386: LD_VAR 0 2
26390: RET
// export function IsNotFull ( building ) ; var places ; begin
26391: LD_INT 0
26393: PPUSH
26394: PPUSH
// if not building then
26395: LD_VAR 0 1
26399: NOT
26400: IFFALSE 26404
// exit ;
26402: GO 26432
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26404: LD_ADDR_VAR 0 2
26408: PUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: LD_INT 3
26416: PUSH
26417: LD_INT 62
26419: PUSH
26420: EMPTY
26421: LIST
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PPUSH
26427: CALL_OW 72
26431: ST_TO_ADDR
// end ;
26432: LD_VAR 0 2
26436: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
26441: PPUSH
26442: PPUSH
// tmp := [ ] ;
26443: LD_ADDR_VAR 0 3
26447: PUSH
26448: EMPTY
26449: ST_TO_ADDR
// list := [ ] ;
26450: LD_ADDR_VAR 0 5
26454: PUSH
26455: EMPTY
26456: ST_TO_ADDR
// for i = 16 to 25 do
26457: LD_ADDR_VAR 0 4
26461: PUSH
26462: DOUBLE
26463: LD_INT 16
26465: DEC
26466: ST_TO_ADDR
26467: LD_INT 25
26469: PUSH
26470: FOR_TO
26471: IFFALSE 26544
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: LD_VAR 0 3
26482: PUSH
26483: LD_INT 22
26485: PUSH
26486: LD_VAR 0 1
26490: PPUSH
26491: CALL_OW 255
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 91
26502: PUSH
26503: LD_VAR 0 1
26507: PUSH
26508: LD_INT 6
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 30
26518: PUSH
26519: LD_VAR 0 4
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: PUSH
26533: EMPTY
26534: LIST
26535: PPUSH
26536: CALL_OW 69
26540: ADD
26541: ST_TO_ADDR
26542: GO 26470
26544: POP
26545: POP
// for i = 1 to tmp do
26546: LD_ADDR_VAR 0 4
26550: PUSH
26551: DOUBLE
26552: LD_INT 1
26554: DEC
26555: ST_TO_ADDR
26556: LD_VAR 0 3
26560: PUSH
26561: FOR_TO
26562: IFFALSE 26650
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26564: LD_ADDR_VAR 0 5
26568: PUSH
26569: LD_VAR 0 5
26573: PUSH
26574: LD_VAR 0 3
26578: PUSH
26579: LD_VAR 0 4
26583: ARRAY
26584: PPUSH
26585: CALL_OW 266
26589: PUSH
26590: LD_VAR 0 3
26594: PUSH
26595: LD_VAR 0 4
26599: ARRAY
26600: PPUSH
26601: CALL_OW 250
26605: PUSH
26606: LD_VAR 0 3
26610: PUSH
26611: LD_VAR 0 4
26615: ARRAY
26616: PPUSH
26617: CALL_OW 251
26621: PUSH
26622: LD_VAR 0 3
26626: PUSH
26627: LD_VAR 0 4
26631: ARRAY
26632: PPUSH
26633: CALL_OW 254
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: PUSH
26644: EMPTY
26645: LIST
26646: ADD
26647: ST_TO_ADDR
26648: GO 26561
26650: POP
26651: POP
// result := list ;
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_VAR 0 5
26661: ST_TO_ADDR
// end ;
26662: LD_VAR 0 2
26666: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26667: LD_INT 0
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
// if not factory then
26676: LD_VAR 0 1
26680: NOT
26681: IFFALSE 26685
// exit ;
26683: GO 27278
// if control = control_apeman then
26685: LD_VAR 0 4
26689: PUSH
26690: LD_INT 5
26692: EQUAL
26693: IFFALSE 26802
// begin tmp := UnitsInside ( factory ) ;
26695: LD_ADDR_VAR 0 8
26699: PUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: CALL_OW 313
26709: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26710: LD_VAR 0 8
26714: PPUSH
26715: LD_INT 25
26717: PUSH
26718: LD_INT 12
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PPUSH
26725: CALL_OW 72
26729: NOT
26730: IFFALSE 26740
// control := control_manual ;
26732: LD_ADDR_VAR 0 4
26736: PUSH
26737: LD_INT 1
26739: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26740: LD_ADDR_VAR 0 8
26744: PUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL 26437 0 1
26754: ST_TO_ADDR
// if tmp then
26755: LD_VAR 0 8
26759: IFFALSE 26802
// begin for i in tmp do
26761: LD_ADDR_VAR 0 7
26765: PUSH
26766: LD_VAR 0 8
26770: PUSH
26771: FOR_IN
26772: IFFALSE 26800
// if i [ 1 ] = b_ext_radio then
26774: LD_VAR 0 7
26778: PUSH
26779: LD_INT 1
26781: ARRAY
26782: PUSH
26783: LD_INT 22
26785: EQUAL
26786: IFFALSE 26798
// begin control := control_remote ;
26788: LD_ADDR_VAR 0 4
26792: PUSH
26793: LD_INT 2
26795: ST_TO_ADDR
// break ;
26796: GO 26800
// end ;
26798: GO 26771
26800: POP
26801: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26802: LD_VAR 0 1
26806: PPUSH
26807: LD_VAR 0 2
26811: PPUSH
26812: LD_VAR 0 3
26816: PPUSH
26817: LD_VAR 0 4
26821: PPUSH
26822: LD_VAR 0 5
26826: PPUSH
26827: CALL_OW 448
26831: IFFALSE 26866
// begin result := [ chassis , engine , control , weapon ] ;
26833: LD_ADDR_VAR 0 6
26837: PUSH
26838: LD_VAR 0 2
26842: PUSH
26843: LD_VAR 0 3
26847: PUSH
26848: LD_VAR 0 4
26852: PUSH
26853: LD_VAR 0 5
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: ST_TO_ADDR
// exit ;
26864: GO 27278
// end ; _chassis := AvailableChassisList ( factory ) ;
26866: LD_ADDR_VAR 0 9
26870: PUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 475
26880: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26881: LD_ADDR_VAR 0 11
26885: PUSH
26886: LD_VAR 0 1
26890: PPUSH
26891: CALL_OW 476
26895: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26896: LD_ADDR_VAR 0 12
26900: PUSH
26901: LD_VAR 0 1
26905: PPUSH
26906: CALL_OW 477
26910: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26911: LD_ADDR_VAR 0 10
26915: PUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 478
26925: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26926: LD_VAR 0 9
26930: NOT
26931: PUSH
26932: LD_VAR 0 11
26936: NOT
26937: OR
26938: PUSH
26939: LD_VAR 0 12
26943: NOT
26944: OR
26945: PUSH
26946: LD_VAR 0 10
26950: NOT
26951: OR
26952: IFFALSE 26987
// begin result := [ chassis , engine , control , weapon ] ;
26954: LD_ADDR_VAR 0 6
26958: PUSH
26959: LD_VAR 0 2
26963: PUSH
26964: LD_VAR 0 3
26968: PUSH
26969: LD_VAR 0 4
26973: PUSH
26974: LD_VAR 0 5
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: ST_TO_ADDR
// exit ;
26985: GO 27278
// end ; if not chassis in _chassis then
26987: LD_VAR 0 2
26991: PUSH
26992: LD_VAR 0 9
26996: IN
26997: NOT
26998: IFFALSE 27024
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27000: LD_ADDR_VAR 0 2
27004: PUSH
27005: LD_VAR 0 9
27009: PUSH
27010: LD_INT 1
27012: PPUSH
27013: LD_VAR 0 9
27017: PPUSH
27018: CALL_OW 12
27022: ARRAY
27023: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27024: LD_VAR 0 2
27028: PPUSH
27029: LD_VAR 0 3
27033: PPUSH
27034: CALL 27283 0 2
27038: NOT
27039: IFFALSE 27098
// repeat engine := _engine [ 1 ] ;
27041: LD_ADDR_VAR 0 3
27045: PUSH
27046: LD_VAR 0 11
27050: PUSH
27051: LD_INT 1
27053: ARRAY
27054: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27055: LD_ADDR_VAR 0 11
27059: PUSH
27060: LD_VAR 0 11
27064: PPUSH
27065: LD_INT 1
27067: PPUSH
27068: CALL_OW 3
27072: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27073: LD_VAR 0 2
27077: PPUSH
27078: LD_VAR 0 3
27082: PPUSH
27083: CALL 27283 0 2
27087: PUSH
27088: LD_VAR 0 11
27092: PUSH
27093: EMPTY
27094: EQUAL
27095: OR
27096: IFFALSE 27041
// if not control in _control then
27098: LD_VAR 0 4
27102: PUSH
27103: LD_VAR 0 12
27107: IN
27108: NOT
27109: IFFALSE 27135
// control := _control [ rand ( 1 , _control ) ] ;
27111: LD_ADDR_VAR 0 4
27115: PUSH
27116: LD_VAR 0 12
27120: PUSH
27121: LD_INT 1
27123: PPUSH
27124: LD_VAR 0 12
27128: PPUSH
27129: CALL_OW 12
27133: ARRAY
27134: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27135: LD_VAR 0 2
27139: PPUSH
27140: LD_VAR 0 5
27144: PPUSH
27145: CALL 27503 0 2
27149: NOT
27150: IFFALSE 27209
// repeat weapon := _weapon [ 1 ] ;
27152: LD_ADDR_VAR 0 5
27156: PUSH
27157: LD_VAR 0 10
27161: PUSH
27162: LD_INT 1
27164: ARRAY
27165: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27166: LD_ADDR_VAR 0 10
27170: PUSH
27171: LD_VAR 0 10
27175: PPUSH
27176: LD_INT 1
27178: PPUSH
27179: CALL_OW 3
27183: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27184: LD_VAR 0 2
27188: PPUSH
27189: LD_VAR 0 5
27193: PPUSH
27194: CALL 27503 0 2
27198: PUSH
27199: LD_VAR 0 10
27203: PUSH
27204: EMPTY
27205: EQUAL
27206: OR
27207: IFFALSE 27152
// result := [ ] ;
27209: LD_ADDR_VAR 0 6
27213: PUSH
27214: EMPTY
27215: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27216: LD_VAR 0 1
27220: PPUSH
27221: LD_VAR 0 2
27225: PPUSH
27226: LD_VAR 0 3
27230: PPUSH
27231: LD_VAR 0 4
27235: PPUSH
27236: LD_VAR 0 5
27240: PPUSH
27241: CALL_OW 448
27245: IFFALSE 27278
// result := [ chassis , engine , control , weapon ] ;
27247: LD_ADDR_VAR 0 6
27251: PUSH
27252: LD_VAR 0 2
27256: PUSH
27257: LD_VAR 0 3
27261: PUSH
27262: LD_VAR 0 4
27266: PUSH
27267: LD_VAR 0 5
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// end ;
27278: LD_VAR 0 6
27282: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27283: LD_INT 0
27285: PPUSH
// if not chassis or not engine then
27286: LD_VAR 0 1
27290: NOT
27291: PUSH
27292: LD_VAR 0 2
27296: NOT
27297: OR
27298: IFFALSE 27302
// exit ;
27300: GO 27498
// case engine of engine_solar :
27302: LD_VAR 0 2
27306: PUSH
27307: LD_INT 2
27309: DOUBLE
27310: EQUAL
27311: IFTRUE 27315
27313: GO 27353
27315: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: LD_INT 11
27323: PUSH
27324: LD_INT 12
27326: PUSH
27327: LD_INT 13
27329: PUSH
27330: LD_INT 14
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: LD_INT 3
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: ST_TO_ADDR
27351: GO 27482
27353: LD_INT 1
27355: DOUBLE
27356: EQUAL
27357: IFTRUE 27361
27359: GO 27423
27361: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27362: LD_ADDR_VAR 0 3
27366: PUSH
27367: LD_INT 11
27369: PUSH
27370: LD_INT 12
27372: PUSH
27373: LD_INT 13
27375: PUSH
27376: LD_INT 14
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: LD_INT 2
27384: PUSH
27385: LD_INT 3
27387: PUSH
27388: LD_INT 4
27390: PUSH
27391: LD_INT 5
27393: PUSH
27394: LD_INT 21
27396: PUSH
27397: LD_INT 23
27399: PUSH
27400: LD_INT 22
27402: PUSH
27403: LD_INT 24
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
27421: GO 27482
27423: LD_INT 3
27425: DOUBLE
27426: EQUAL
27427: IFTRUE 27431
27429: GO 27481
27431: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27432: LD_ADDR_VAR 0 3
27436: PUSH
27437: LD_INT 13
27439: PUSH
27440: LD_INT 14
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: LD_INT 3
27448: PUSH
27449: LD_INT 4
27451: PUSH
27452: LD_INT 5
27454: PUSH
27455: LD_INT 21
27457: PUSH
27458: LD_INT 22
27460: PUSH
27461: LD_INT 23
27463: PUSH
27464: LD_INT 24
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
27479: GO 27482
27481: POP
// result := ( chassis in result ) ;
27482: LD_ADDR_VAR 0 3
27486: PUSH
27487: LD_VAR 0 1
27491: PUSH
27492: LD_VAR 0 3
27496: IN
27497: ST_TO_ADDR
// end ;
27498: LD_VAR 0 3
27502: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27503: LD_INT 0
27505: PPUSH
// if not chassis or not weapon then
27506: LD_VAR 0 1
27510: NOT
27511: PUSH
27512: LD_VAR 0 2
27516: NOT
27517: OR
27518: IFFALSE 27522
// exit ;
27520: GO 28582
// case weapon of us_machine_gun :
27522: LD_VAR 0 2
27526: PUSH
27527: LD_INT 2
27529: DOUBLE
27530: EQUAL
27531: IFTRUE 27535
27533: GO 27565
27535: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27536: LD_ADDR_VAR 0 3
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: LD_INT 3
27549: PUSH
27550: LD_INT 4
27552: PUSH
27553: LD_INT 5
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: ST_TO_ADDR
27563: GO 28566
27565: LD_INT 3
27567: DOUBLE
27568: EQUAL
27569: IFTRUE 27573
27571: GO 27603
27573: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27574: LD_ADDR_VAR 0 3
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: LD_INT 4
27590: PUSH
27591: LD_INT 5
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: ST_TO_ADDR
27601: GO 28566
27603: LD_INT 11
27605: DOUBLE
27606: EQUAL
27607: IFTRUE 27611
27609: GO 27641
27611: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27612: LD_ADDR_VAR 0 3
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: LD_INT 3
27625: PUSH
27626: LD_INT 4
27628: PUSH
27629: LD_INT 5
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: ST_TO_ADDR
27639: GO 28566
27641: LD_INT 4
27643: DOUBLE
27644: EQUAL
27645: IFTRUE 27649
27647: GO 27675
27649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27650: LD_ADDR_VAR 0 3
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 3
27660: PUSH
27661: LD_INT 4
27663: PUSH
27664: LD_INT 5
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: ST_TO_ADDR
27673: GO 28566
27675: LD_INT 5
27677: DOUBLE
27678: EQUAL
27679: IFTRUE 27683
27681: GO 27709
27683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27684: LD_ADDR_VAR 0 3
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: LD_INT 4
27697: PUSH
27698: LD_INT 5
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: ST_TO_ADDR
27707: GO 28566
27709: LD_INT 9
27711: DOUBLE
27712: EQUAL
27713: IFTRUE 27717
27715: GO 27743
27717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27718: LD_ADDR_VAR 0 3
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 3
27728: PUSH
27729: LD_INT 4
27731: PUSH
27732: LD_INT 5
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: ST_TO_ADDR
27741: GO 28566
27743: LD_INT 7
27745: DOUBLE
27746: EQUAL
27747: IFTRUE 27751
27749: GO 27777
27751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27752: LD_ADDR_VAR 0 3
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: LD_INT 4
27765: PUSH
27766: LD_INT 5
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
27775: GO 28566
27777: LD_INT 12
27779: DOUBLE
27780: EQUAL
27781: IFTRUE 27785
27783: GO 27811
27785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27786: LD_ADDR_VAR 0 3
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: LD_INT 3
27796: PUSH
27797: LD_INT 4
27799: PUSH
27800: LD_INT 5
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
27809: GO 28566
27811: LD_INT 13
27813: DOUBLE
27814: EQUAL
27815: IFTRUE 27819
27817: GO 27845
27819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 4
27833: PUSH
27834: LD_INT 5
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: ST_TO_ADDR
27843: GO 28566
27845: LD_INT 14
27847: DOUBLE
27848: EQUAL
27849: IFTRUE 27853
27851: GO 27871
27853: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27854: LD_ADDR_VAR 0 3
27858: PUSH
27859: LD_INT 4
27861: PUSH
27862: LD_INT 5
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: ST_TO_ADDR
27869: GO 28566
27871: LD_INT 6
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27879
27877: GO 27897
27879: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_INT 4
27887: PUSH
27888: LD_INT 5
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: ST_TO_ADDR
27895: GO 28566
27897: LD_INT 10
27899: DOUBLE
27900: EQUAL
27901: IFTRUE 27905
27903: GO 27923
27905: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27906: LD_ADDR_VAR 0 3
27910: PUSH
27911: LD_INT 4
27913: PUSH
27914: LD_INT 5
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: ST_TO_ADDR
27921: GO 28566
27923: LD_INT 22
27925: DOUBLE
27926: EQUAL
27927: IFTRUE 27931
27929: GO 27957
27931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 11
27939: PUSH
27940: LD_INT 12
27942: PUSH
27943: LD_INT 13
27945: PUSH
27946: LD_INT 14
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
27955: GO 28566
27957: LD_INT 23
27959: DOUBLE
27960: EQUAL
27961: IFTRUE 27965
27963: GO 27991
27965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27966: LD_ADDR_VAR 0 3
27970: PUSH
27971: LD_INT 11
27973: PUSH
27974: LD_INT 12
27976: PUSH
27977: LD_INT 13
27979: PUSH
27980: LD_INT 14
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: ST_TO_ADDR
27989: GO 28566
27991: LD_INT 24
27993: DOUBLE
27994: EQUAL
27995: IFTRUE 27999
27997: GO 28025
27999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28000: LD_ADDR_VAR 0 3
28004: PUSH
28005: LD_INT 11
28007: PUSH
28008: LD_INT 12
28010: PUSH
28011: LD_INT 13
28013: PUSH
28014: LD_INT 14
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
28023: GO 28566
28025: LD_INT 30
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28033
28031: GO 28059
28033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_INT 11
28041: PUSH
28042: LD_INT 12
28044: PUSH
28045: LD_INT 13
28047: PUSH
28048: LD_INT 14
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
28057: GO 28566
28059: LD_INT 25
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28085
28067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_INT 13
28075: PUSH
28076: LD_INT 14
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: ST_TO_ADDR
28083: GO 28566
28085: LD_INT 27
28087: DOUBLE
28088: EQUAL
28089: IFTRUE 28093
28091: GO 28111
28093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28094: LD_ADDR_VAR 0 3
28098: PUSH
28099: LD_INT 13
28101: PUSH
28102: LD_INT 14
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: ST_TO_ADDR
28109: GO 28566
28111: LD_INT 92
28113: DOUBLE
28114: EQUAL
28115: IFTRUE 28119
28117: GO 28145
28119: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28120: LD_ADDR_VAR 0 3
28124: PUSH
28125: LD_INT 11
28127: PUSH
28128: LD_INT 12
28130: PUSH
28131: LD_INT 13
28133: PUSH
28134: LD_INT 14
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: ST_TO_ADDR
28143: GO 28566
28145: LD_INT 28
28147: DOUBLE
28148: EQUAL
28149: IFTRUE 28153
28151: GO 28171
28153: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28154: LD_ADDR_VAR 0 3
28158: PUSH
28159: LD_INT 13
28161: PUSH
28162: LD_INT 14
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: ST_TO_ADDR
28169: GO 28566
28171: LD_INT 29
28173: DOUBLE
28174: EQUAL
28175: IFTRUE 28179
28177: GO 28197
28179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28180: LD_ADDR_VAR 0 3
28184: PUSH
28185: LD_INT 13
28187: PUSH
28188: LD_INT 14
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: ST_TO_ADDR
28195: GO 28566
28197: LD_INT 31
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28223
28205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: LD_INT 13
28213: PUSH
28214: LD_INT 14
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: ST_TO_ADDR
28221: GO 28566
28223: LD_INT 26
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28249
28231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28232: LD_ADDR_VAR 0 3
28236: PUSH
28237: LD_INT 13
28239: PUSH
28240: LD_INT 14
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: ST_TO_ADDR
28247: GO 28566
28249: LD_INT 42
28251: DOUBLE
28252: EQUAL
28253: IFTRUE 28257
28255: GO 28283
28257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_INT 21
28265: PUSH
28266: LD_INT 22
28268: PUSH
28269: LD_INT 23
28271: PUSH
28272: LD_INT 24
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: ST_TO_ADDR
28281: GO 28566
28283: LD_INT 43
28285: DOUBLE
28286: EQUAL
28287: IFTRUE 28291
28289: GO 28317
28291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28292: LD_ADDR_VAR 0 3
28296: PUSH
28297: LD_INT 21
28299: PUSH
28300: LD_INT 22
28302: PUSH
28303: LD_INT 23
28305: PUSH
28306: LD_INT 24
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: ST_TO_ADDR
28315: GO 28566
28317: LD_INT 44
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28351
28325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 21
28333: PUSH
28334: LD_INT 22
28336: PUSH
28337: LD_INT 23
28339: PUSH
28340: LD_INT 24
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: ST_TO_ADDR
28349: GO 28566
28351: LD_INT 45
28353: DOUBLE
28354: EQUAL
28355: IFTRUE 28359
28357: GO 28385
28359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_INT 21
28367: PUSH
28368: LD_INT 22
28370: PUSH
28371: LD_INT 23
28373: PUSH
28374: LD_INT 24
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: ST_TO_ADDR
28383: GO 28566
28385: LD_INT 49
28387: DOUBLE
28388: EQUAL
28389: IFTRUE 28393
28391: GO 28419
28393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_INT 21
28401: PUSH
28402: LD_INT 22
28404: PUSH
28405: LD_INT 23
28407: PUSH
28408: LD_INT 24
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: ST_TO_ADDR
28417: GO 28566
28419: LD_INT 51
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28453
28427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_INT 21
28435: PUSH
28436: LD_INT 22
28438: PUSH
28439: LD_INT 23
28441: PUSH
28442: LD_INT 24
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: ST_TO_ADDR
28451: GO 28566
28453: LD_INT 52
28455: DOUBLE
28456: EQUAL
28457: IFTRUE 28461
28459: GO 28487
28461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28462: LD_ADDR_VAR 0 3
28466: PUSH
28467: LD_INT 21
28469: PUSH
28470: LD_INT 22
28472: PUSH
28473: LD_INT 23
28475: PUSH
28476: LD_INT 24
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: ST_TO_ADDR
28485: GO 28566
28487: LD_INT 53
28489: DOUBLE
28490: EQUAL
28491: IFTRUE 28495
28493: GO 28513
28495: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28496: LD_ADDR_VAR 0 3
28500: PUSH
28501: LD_INT 23
28503: PUSH
28504: LD_INT 24
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: ST_TO_ADDR
28511: GO 28566
28513: LD_INT 46
28515: DOUBLE
28516: EQUAL
28517: IFTRUE 28521
28519: GO 28539
28521: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28522: LD_ADDR_VAR 0 3
28526: PUSH
28527: LD_INT 23
28529: PUSH
28530: LD_INT 24
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: ST_TO_ADDR
28537: GO 28566
28539: LD_INT 47
28541: DOUBLE
28542: EQUAL
28543: IFTRUE 28547
28545: GO 28565
28547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28548: LD_ADDR_VAR 0 3
28552: PUSH
28553: LD_INT 23
28555: PUSH
28556: LD_INT 24
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: ST_TO_ADDR
28563: GO 28566
28565: POP
// result := ( chassis in result ) ;
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_VAR 0 1
28575: PUSH
28576: LD_VAR 0 3
28580: IN
28581: ST_TO_ADDR
// end ;
28582: LD_VAR 0 3
28586: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28587: LD_INT 0
28589: PPUSH
28590: PPUSH
28591: PPUSH
28592: PPUSH
28593: PPUSH
28594: PPUSH
28595: PPUSH
// result := array ;
28596: LD_ADDR_VAR 0 5
28600: PUSH
28601: LD_VAR 0 1
28605: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28606: LD_VAR 0 1
28610: NOT
28611: PUSH
28612: LD_VAR 0 2
28616: NOT
28617: OR
28618: PUSH
28619: LD_VAR 0 3
28623: NOT
28624: OR
28625: PUSH
28626: LD_VAR 0 2
28630: PUSH
28631: LD_VAR 0 1
28635: GREATER
28636: OR
28637: PUSH
28638: LD_VAR 0 3
28642: PUSH
28643: LD_VAR 0 1
28647: GREATER
28648: OR
28649: IFFALSE 28653
// exit ;
28651: GO 28949
// if direction then
28653: LD_VAR 0 4
28657: IFFALSE 28721
// begin d := 1 ;
28659: LD_ADDR_VAR 0 9
28663: PUSH
28664: LD_INT 1
28666: ST_TO_ADDR
// if i_from > i_to then
28667: LD_VAR 0 2
28671: PUSH
28672: LD_VAR 0 3
28676: GREATER
28677: IFFALSE 28703
// length := ( array - i_from ) + i_to else
28679: LD_ADDR_VAR 0 11
28683: PUSH
28684: LD_VAR 0 1
28688: PUSH
28689: LD_VAR 0 2
28693: MINUS
28694: PUSH
28695: LD_VAR 0 3
28699: PLUS
28700: ST_TO_ADDR
28701: GO 28719
// length := i_to - i_from ;
28703: LD_ADDR_VAR 0 11
28707: PUSH
28708: LD_VAR 0 3
28712: PUSH
28713: LD_VAR 0 2
28717: MINUS
28718: ST_TO_ADDR
// end else
28719: GO 28782
// begin d := - 1 ;
28721: LD_ADDR_VAR 0 9
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: ST_TO_ADDR
// if i_from > i_to then
28730: LD_VAR 0 2
28734: PUSH
28735: LD_VAR 0 3
28739: GREATER
28740: IFFALSE 28760
// length := i_from - i_to else
28742: LD_ADDR_VAR 0 11
28746: PUSH
28747: LD_VAR 0 2
28751: PUSH
28752: LD_VAR 0 3
28756: MINUS
28757: ST_TO_ADDR
28758: GO 28782
// length := ( array - i_to ) + i_from ;
28760: LD_ADDR_VAR 0 11
28764: PUSH
28765: LD_VAR 0 1
28769: PUSH
28770: LD_VAR 0 3
28774: MINUS
28775: PUSH
28776: LD_VAR 0 2
28780: PLUS
28781: ST_TO_ADDR
// end ; if not length then
28782: LD_VAR 0 11
28786: NOT
28787: IFFALSE 28791
// exit ;
28789: GO 28949
// tmp := array ;
28791: LD_ADDR_VAR 0 10
28795: PUSH
28796: LD_VAR 0 1
28800: ST_TO_ADDR
// for i = 1 to length do
28801: LD_ADDR_VAR 0 6
28805: PUSH
28806: DOUBLE
28807: LD_INT 1
28809: DEC
28810: ST_TO_ADDR
28811: LD_VAR 0 11
28815: PUSH
28816: FOR_TO
28817: IFFALSE 28937
// begin for j = 1 to array do
28819: LD_ADDR_VAR 0 7
28823: PUSH
28824: DOUBLE
28825: LD_INT 1
28827: DEC
28828: ST_TO_ADDR
28829: LD_VAR 0 1
28833: PUSH
28834: FOR_TO
28835: IFFALSE 28923
// begin k := j + d ;
28837: LD_ADDR_VAR 0 8
28841: PUSH
28842: LD_VAR 0 7
28846: PUSH
28847: LD_VAR 0 9
28851: PLUS
28852: ST_TO_ADDR
// if k > array then
28853: LD_VAR 0 8
28857: PUSH
28858: LD_VAR 0 1
28862: GREATER
28863: IFFALSE 28873
// k := 1 ;
28865: LD_ADDR_VAR 0 8
28869: PUSH
28870: LD_INT 1
28872: ST_TO_ADDR
// if not k then
28873: LD_VAR 0 8
28877: NOT
28878: IFFALSE 28890
// k := array ;
28880: LD_ADDR_VAR 0 8
28884: PUSH
28885: LD_VAR 0 1
28889: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28890: LD_ADDR_VAR 0 10
28894: PUSH
28895: LD_VAR 0 10
28899: PPUSH
28900: LD_VAR 0 8
28904: PPUSH
28905: LD_VAR 0 1
28909: PUSH
28910: LD_VAR 0 7
28914: ARRAY
28915: PPUSH
28916: CALL_OW 1
28920: ST_TO_ADDR
// end ;
28921: GO 28834
28923: POP
28924: POP
// array := tmp ;
28925: LD_ADDR_VAR 0 1
28929: PUSH
28930: LD_VAR 0 10
28934: ST_TO_ADDR
// end ;
28935: GO 28816
28937: POP
28938: POP
// result := array ;
28939: LD_ADDR_VAR 0 5
28943: PUSH
28944: LD_VAR 0 1
28948: ST_TO_ADDR
// end ;
28949: LD_VAR 0 5
28953: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28954: LD_INT 0
28956: PPUSH
28957: PPUSH
// result := 0 ;
28958: LD_ADDR_VAR 0 3
28962: PUSH
28963: LD_INT 0
28965: ST_TO_ADDR
// if not array or not value in array then
28966: LD_VAR 0 1
28970: NOT
28971: PUSH
28972: LD_VAR 0 2
28976: PUSH
28977: LD_VAR 0 1
28981: IN
28982: NOT
28983: OR
28984: IFFALSE 28988
// exit ;
28986: GO 29042
// for i = 1 to array do
28988: LD_ADDR_VAR 0 4
28992: PUSH
28993: DOUBLE
28994: LD_INT 1
28996: DEC
28997: ST_TO_ADDR
28998: LD_VAR 0 1
29002: PUSH
29003: FOR_TO
29004: IFFALSE 29040
// if value = array [ i ] then
29006: LD_VAR 0 2
29010: PUSH
29011: LD_VAR 0 1
29015: PUSH
29016: LD_VAR 0 4
29020: ARRAY
29021: EQUAL
29022: IFFALSE 29038
// begin result := i ;
29024: LD_ADDR_VAR 0 3
29028: PUSH
29029: LD_VAR 0 4
29033: ST_TO_ADDR
// exit ;
29034: POP
29035: POP
29036: GO 29042
// end ;
29038: GO 29003
29040: POP
29041: POP
// end ;
29042: LD_VAR 0 3
29046: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29047: LD_INT 0
29049: PPUSH
// vc_chassis := chassis ;
29050: LD_ADDR_OWVAR 37
29054: PUSH
29055: LD_VAR 0 1
29059: ST_TO_ADDR
// vc_engine := engine ;
29060: LD_ADDR_OWVAR 39
29064: PUSH
29065: LD_VAR 0 2
29069: ST_TO_ADDR
// vc_control := control ;
29070: LD_ADDR_OWVAR 38
29074: PUSH
29075: LD_VAR 0 3
29079: ST_TO_ADDR
// vc_weapon := weapon ;
29080: LD_ADDR_OWVAR 40
29084: PUSH
29085: LD_VAR 0 4
29089: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29090: LD_ADDR_OWVAR 41
29094: PUSH
29095: LD_VAR 0 5
29099: ST_TO_ADDR
// end ;
29100: LD_VAR 0 6
29104: RET
// export function WantPlant ( unit ) ; var task ; begin
29105: LD_INT 0
29107: PPUSH
29108: PPUSH
// result := false ;
29109: LD_ADDR_VAR 0 2
29113: PUSH
29114: LD_INT 0
29116: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29117: LD_ADDR_VAR 0 3
29121: PUSH
29122: LD_VAR 0 1
29126: PPUSH
29127: CALL_OW 437
29131: ST_TO_ADDR
// if task then
29132: LD_VAR 0 3
29136: IFFALSE 29164
// if task [ 1 ] [ 1 ] = p then
29138: LD_VAR 0 3
29142: PUSH
29143: LD_INT 1
29145: ARRAY
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: PUSH
29151: LD_STRING p
29153: EQUAL
29154: IFFALSE 29164
// result := true ;
29156: LD_ADDR_VAR 0 2
29160: PUSH
29161: LD_INT 1
29163: ST_TO_ADDR
// end ;
29164: LD_VAR 0 2
29168: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29169: LD_INT 0
29171: PPUSH
29172: PPUSH
29173: PPUSH
29174: PPUSH
// if pos < 1 then
29175: LD_VAR 0 2
29179: PUSH
29180: LD_INT 1
29182: LESS
29183: IFFALSE 29187
// exit ;
29185: GO 29490
// if pos = 1 then
29187: LD_VAR 0 2
29191: PUSH
29192: LD_INT 1
29194: EQUAL
29195: IFFALSE 29228
// result := Replace ( arr , pos [ 1 ] , value ) else
29197: LD_ADDR_VAR 0 4
29201: PUSH
29202: LD_VAR 0 1
29206: PPUSH
29207: LD_VAR 0 2
29211: PUSH
29212: LD_INT 1
29214: ARRAY
29215: PPUSH
29216: LD_VAR 0 3
29220: PPUSH
29221: CALL_OW 1
29225: ST_TO_ADDR
29226: GO 29490
// begin tmp := arr ;
29228: LD_ADDR_VAR 0 6
29232: PUSH
29233: LD_VAR 0 1
29237: ST_TO_ADDR
// s_arr := [ tmp ] ;
29238: LD_ADDR_VAR 0 7
29242: PUSH
29243: LD_VAR 0 6
29247: PUSH
29248: EMPTY
29249: LIST
29250: ST_TO_ADDR
// for i = 1 to pos - 1 do
29251: LD_ADDR_VAR 0 5
29255: PUSH
29256: DOUBLE
29257: LD_INT 1
29259: DEC
29260: ST_TO_ADDR
29261: LD_VAR 0 2
29265: PUSH
29266: LD_INT 1
29268: MINUS
29269: PUSH
29270: FOR_TO
29271: IFFALSE 29316
// begin tmp := tmp [ pos [ i ] ] ;
29273: LD_ADDR_VAR 0 6
29277: PUSH
29278: LD_VAR 0 6
29282: PUSH
29283: LD_VAR 0 2
29287: PUSH
29288: LD_VAR 0 5
29292: ARRAY
29293: ARRAY
29294: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29295: LD_ADDR_VAR 0 7
29299: PUSH
29300: LD_VAR 0 7
29304: PUSH
29305: LD_VAR 0 6
29309: PUSH
29310: EMPTY
29311: LIST
29312: ADD
29313: ST_TO_ADDR
// end ;
29314: GO 29270
29316: POP
29317: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29318: LD_ADDR_VAR 0 6
29322: PUSH
29323: LD_VAR 0 6
29327: PPUSH
29328: LD_VAR 0 2
29332: PUSH
29333: LD_VAR 0 2
29337: ARRAY
29338: PPUSH
29339: LD_VAR 0 3
29343: PPUSH
29344: CALL_OW 1
29348: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29349: LD_ADDR_VAR 0 7
29353: PUSH
29354: LD_VAR 0 7
29358: PPUSH
29359: LD_VAR 0 7
29363: PPUSH
29364: LD_VAR 0 6
29368: PPUSH
29369: CALL_OW 1
29373: ST_TO_ADDR
// for i = s_arr downto 2 do
29374: LD_ADDR_VAR 0 5
29378: PUSH
29379: DOUBLE
29380: LD_VAR 0 7
29384: INC
29385: ST_TO_ADDR
29386: LD_INT 2
29388: PUSH
29389: FOR_DOWNTO
29390: IFFALSE 29474
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29392: LD_ADDR_VAR 0 6
29396: PUSH
29397: LD_VAR 0 7
29401: PUSH
29402: LD_VAR 0 5
29406: PUSH
29407: LD_INT 1
29409: MINUS
29410: ARRAY
29411: PPUSH
29412: LD_VAR 0 2
29416: PUSH
29417: LD_VAR 0 5
29421: PUSH
29422: LD_INT 1
29424: MINUS
29425: ARRAY
29426: PPUSH
29427: LD_VAR 0 7
29431: PUSH
29432: LD_VAR 0 5
29436: ARRAY
29437: PPUSH
29438: CALL_OW 1
29442: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29443: LD_ADDR_VAR 0 7
29447: PUSH
29448: LD_VAR 0 7
29452: PPUSH
29453: LD_VAR 0 5
29457: PUSH
29458: LD_INT 1
29460: MINUS
29461: PPUSH
29462: LD_VAR 0 6
29466: PPUSH
29467: CALL_OW 1
29471: ST_TO_ADDR
// end ;
29472: GO 29389
29474: POP
29475: POP
// result := s_arr [ 1 ] ;
29476: LD_ADDR_VAR 0 4
29480: PUSH
29481: LD_VAR 0 7
29485: PUSH
29486: LD_INT 1
29488: ARRAY
29489: ST_TO_ADDR
// end ; end ;
29490: LD_VAR 0 4
29494: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29495: LD_INT 0
29497: PPUSH
29498: PPUSH
// if not list then
29499: LD_VAR 0 1
29503: NOT
29504: IFFALSE 29508
// exit ;
29506: GO 29599
// i := list [ pos1 ] ;
29508: LD_ADDR_VAR 0 5
29512: PUSH
29513: LD_VAR 0 1
29517: PUSH
29518: LD_VAR 0 2
29522: ARRAY
29523: ST_TO_ADDR
// if not i then
29524: LD_VAR 0 5
29528: NOT
29529: IFFALSE 29533
// exit ;
29531: GO 29599
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29533: LD_ADDR_VAR 0 1
29537: PUSH
29538: LD_VAR 0 1
29542: PPUSH
29543: LD_VAR 0 2
29547: PPUSH
29548: LD_VAR 0 1
29552: PUSH
29553: LD_VAR 0 3
29557: ARRAY
29558: PPUSH
29559: CALL_OW 1
29563: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29564: LD_ADDR_VAR 0 1
29568: PUSH
29569: LD_VAR 0 1
29573: PPUSH
29574: LD_VAR 0 3
29578: PPUSH
29579: LD_VAR 0 5
29583: PPUSH
29584: CALL_OW 1
29588: ST_TO_ADDR
// result := list ;
29589: LD_ADDR_VAR 0 4
29593: PUSH
29594: LD_VAR 0 1
29598: ST_TO_ADDR
// end ;
29599: LD_VAR 0 4
29603: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29604: LD_INT 0
29606: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29607: LD_ADDR_VAR 0 5
29611: PUSH
29612: LD_VAR 0 1
29616: PPUSH
29617: CALL_OW 250
29621: PPUSH
29622: LD_VAR 0 1
29626: PPUSH
29627: CALL_OW 251
29631: PPUSH
29632: LD_VAR 0 2
29636: PPUSH
29637: LD_VAR 0 3
29641: PPUSH
29642: LD_VAR 0 4
29646: PPUSH
29647: CALL 29657 0 5
29651: ST_TO_ADDR
// end ;
29652: LD_VAR 0 5
29656: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29657: LD_INT 0
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
// if not list then
29663: LD_VAR 0 3
29667: NOT
29668: IFFALSE 29672
// exit ;
29670: GO 30060
// result := [ ] ;
29672: LD_ADDR_VAR 0 6
29676: PUSH
29677: EMPTY
29678: ST_TO_ADDR
// for i in list do
29679: LD_ADDR_VAR 0 7
29683: PUSH
29684: LD_VAR 0 3
29688: PUSH
29689: FOR_IN
29690: IFFALSE 29892
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29692: LD_ADDR_VAR 0 9
29696: PUSH
29697: LD_VAR 0 7
29701: PPUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: LD_VAR 0 2
29711: PPUSH
29712: CALL_OW 297
29716: ST_TO_ADDR
// if not result then
29717: LD_VAR 0 6
29721: NOT
29722: IFFALSE 29748
// result := [ [ i , tmp ] ] else
29724: LD_ADDR_VAR 0 6
29728: PUSH
29729: LD_VAR 0 7
29733: PUSH
29734: LD_VAR 0 9
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: ST_TO_ADDR
29746: GO 29890
// begin if result [ result ] [ 2 ] < tmp then
29748: LD_VAR 0 6
29752: PUSH
29753: LD_VAR 0 6
29757: ARRAY
29758: PUSH
29759: LD_INT 2
29761: ARRAY
29762: PUSH
29763: LD_VAR 0 9
29767: LESS
29768: IFFALSE 29810
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29770: LD_ADDR_VAR 0 6
29774: PUSH
29775: LD_VAR 0 6
29779: PPUSH
29780: LD_VAR 0 6
29784: PUSH
29785: LD_INT 1
29787: PLUS
29788: PPUSH
29789: LD_VAR 0 7
29793: PUSH
29794: LD_VAR 0 9
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PPUSH
29803: CALL_OW 2
29807: ST_TO_ADDR
29808: GO 29890
// for j = 1 to result do
29810: LD_ADDR_VAR 0 8
29814: PUSH
29815: DOUBLE
29816: LD_INT 1
29818: DEC
29819: ST_TO_ADDR
29820: LD_VAR 0 6
29824: PUSH
29825: FOR_TO
29826: IFFALSE 29888
// begin if tmp < result [ j ] [ 2 ] then
29828: LD_VAR 0 9
29832: PUSH
29833: LD_VAR 0 6
29837: PUSH
29838: LD_VAR 0 8
29842: ARRAY
29843: PUSH
29844: LD_INT 2
29846: ARRAY
29847: LESS
29848: IFFALSE 29886
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29850: LD_ADDR_VAR 0 6
29854: PUSH
29855: LD_VAR 0 6
29859: PPUSH
29860: LD_VAR 0 8
29864: PPUSH
29865: LD_VAR 0 7
29869: PUSH
29870: LD_VAR 0 9
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PPUSH
29879: CALL_OW 2
29883: ST_TO_ADDR
// break ;
29884: GO 29888
// end ; end ;
29886: GO 29825
29888: POP
29889: POP
// end ; end ;
29890: GO 29689
29892: POP
29893: POP
// if result and not asc then
29894: LD_VAR 0 6
29898: PUSH
29899: LD_VAR 0 4
29903: NOT
29904: AND
29905: IFFALSE 29980
// begin tmp := result ;
29907: LD_ADDR_VAR 0 9
29911: PUSH
29912: LD_VAR 0 6
29916: ST_TO_ADDR
// for i = tmp downto 1 do
29917: LD_ADDR_VAR 0 7
29921: PUSH
29922: DOUBLE
29923: LD_VAR 0 9
29927: INC
29928: ST_TO_ADDR
29929: LD_INT 1
29931: PUSH
29932: FOR_DOWNTO
29933: IFFALSE 29978
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29935: LD_ADDR_VAR 0 6
29939: PUSH
29940: LD_VAR 0 6
29944: PPUSH
29945: LD_VAR 0 9
29949: PUSH
29950: LD_VAR 0 7
29954: MINUS
29955: PUSH
29956: LD_INT 1
29958: PLUS
29959: PPUSH
29960: LD_VAR 0 9
29964: PUSH
29965: LD_VAR 0 7
29969: ARRAY
29970: PPUSH
29971: CALL_OW 1
29975: ST_TO_ADDR
29976: GO 29932
29978: POP
29979: POP
// end ; tmp := [ ] ;
29980: LD_ADDR_VAR 0 9
29984: PUSH
29985: EMPTY
29986: ST_TO_ADDR
// if mode then
29987: LD_VAR 0 5
29991: IFFALSE 30060
// begin for i = 1 to result do
29993: LD_ADDR_VAR 0 7
29997: PUSH
29998: DOUBLE
29999: LD_INT 1
30001: DEC
30002: ST_TO_ADDR
30003: LD_VAR 0 6
30007: PUSH
30008: FOR_TO
30009: IFFALSE 30048
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30011: LD_ADDR_VAR 0 9
30015: PUSH
30016: LD_VAR 0 9
30020: PPUSH
30021: LD_VAR 0 7
30025: PPUSH
30026: LD_VAR 0 6
30030: PUSH
30031: LD_VAR 0 7
30035: ARRAY
30036: PUSH
30037: LD_INT 1
30039: ARRAY
30040: PPUSH
30041: CALL_OW 1
30045: ST_TO_ADDR
30046: GO 30008
30048: POP
30049: POP
// result := tmp ;
30050: LD_ADDR_VAR 0 6
30054: PUSH
30055: LD_VAR 0 9
30059: ST_TO_ADDR
// end ; end ;
30060: LD_VAR 0 6
30064: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30065: LD_INT 0
30067: PPUSH
30068: PPUSH
30069: PPUSH
30070: PPUSH
30071: PPUSH
30072: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30073: LD_ADDR_VAR 0 5
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: ST_TO_ADDR
// if not x or not y then
30095: LD_VAR 0 2
30099: NOT
30100: PUSH
30101: LD_VAR 0 3
30105: NOT
30106: OR
30107: IFFALSE 30111
// exit ;
30109: GO 31761
// if not range then
30111: LD_VAR 0 4
30115: NOT
30116: IFFALSE 30126
// range := 10 ;
30118: LD_ADDR_VAR 0 4
30122: PUSH
30123: LD_INT 10
30125: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30126: LD_ADDR_VAR 0 8
30130: PUSH
30131: LD_INT 81
30133: PUSH
30134: LD_VAR 0 1
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 92
30145: PUSH
30146: LD_VAR 0 2
30150: PUSH
30151: LD_VAR 0 3
30155: PUSH
30156: LD_VAR 0 4
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: LD_INT 21
30172: PUSH
30173: LD_INT 3
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: PPUSH
30189: CALL_OW 69
30193: ST_TO_ADDR
// if not tmp then
30194: LD_VAR 0 8
30198: NOT
30199: IFFALSE 30203
// exit ;
30201: GO 31761
// for i in tmp do
30203: LD_ADDR_VAR 0 6
30207: PUSH
30208: LD_VAR 0 8
30212: PUSH
30213: FOR_IN
30214: IFFALSE 31736
// begin points := [ 0 , 0 , 0 ] ;
30216: LD_ADDR_VAR 0 9
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// bpoints := 1 ;
30235: LD_ADDR_VAR 0 10
30239: PUSH
30240: LD_INT 1
30242: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30243: LD_VAR 0 6
30247: PPUSH
30248: CALL_OW 247
30252: PUSH
30253: LD_INT 1
30255: DOUBLE
30256: EQUAL
30257: IFTRUE 30261
30259: GO 30839
30261: POP
// begin if GetClass ( i ) = 1 then
30262: LD_VAR 0 6
30266: PPUSH
30267: CALL_OW 257
30271: PUSH
30272: LD_INT 1
30274: EQUAL
30275: IFFALSE 30296
// points := [ 10 , 5 , 3 ] ;
30277: LD_ADDR_VAR 0 9
30281: PUSH
30282: LD_INT 10
30284: PUSH
30285: LD_INT 5
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30296: LD_VAR 0 6
30300: PPUSH
30301: CALL_OW 257
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: LD_INT 4
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: IN
30320: IFFALSE 30341
// points := [ 3 , 2 , 1 ] ;
30322: LD_ADDR_VAR 0 9
30326: PUSH
30327: LD_INT 3
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30341: LD_VAR 0 6
30345: PPUSH
30346: CALL_OW 257
30350: PUSH
30351: LD_INT 5
30353: EQUAL
30354: IFFALSE 30375
// points := [ 130 , 5 , 2 ] ;
30356: LD_ADDR_VAR 0 9
30360: PUSH
30361: LD_INT 130
30363: PUSH
30364: LD_INT 5
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30375: LD_VAR 0 6
30379: PPUSH
30380: CALL_OW 257
30384: PUSH
30385: LD_INT 8
30387: EQUAL
30388: IFFALSE 30409
// points := [ 35 , 35 , 30 ] ;
30390: LD_ADDR_VAR 0 9
30394: PUSH
30395: LD_INT 35
30397: PUSH
30398: LD_INT 35
30400: PUSH
30401: LD_INT 30
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30409: LD_VAR 0 6
30413: PPUSH
30414: CALL_OW 257
30418: PUSH
30419: LD_INT 9
30421: EQUAL
30422: IFFALSE 30443
// points := [ 20 , 55 , 40 ] ;
30424: LD_ADDR_VAR 0 9
30428: PUSH
30429: LD_INT 20
30431: PUSH
30432: LD_INT 55
30434: PUSH
30435: LD_INT 40
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30443: LD_VAR 0 6
30447: PPUSH
30448: CALL_OW 257
30452: PUSH
30453: LD_INT 12
30455: PUSH
30456: LD_INT 16
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: IN
30463: IFFALSE 30484
// points := [ 5 , 3 , 2 ] ;
30465: LD_ADDR_VAR 0 9
30469: PUSH
30470: LD_INT 5
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30484: LD_VAR 0 6
30488: PPUSH
30489: CALL_OW 257
30493: PUSH
30494: LD_INT 17
30496: EQUAL
30497: IFFALSE 30518
// points := [ 100 , 50 , 75 ] ;
30499: LD_ADDR_VAR 0 9
30503: PUSH
30504: LD_INT 100
30506: PUSH
30507: LD_INT 50
30509: PUSH
30510: LD_INT 75
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30518: LD_VAR 0 6
30522: PPUSH
30523: CALL_OW 257
30527: PUSH
30528: LD_INT 15
30530: EQUAL
30531: IFFALSE 30552
// points := [ 10 , 5 , 3 ] ;
30533: LD_ADDR_VAR 0 9
30537: PUSH
30538: LD_INT 10
30540: PUSH
30541: LD_INT 5
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30552: LD_VAR 0 6
30556: PPUSH
30557: CALL_OW 257
30561: PUSH
30562: LD_INT 14
30564: EQUAL
30565: IFFALSE 30586
// points := [ 10 , 0 , 0 ] ;
30567: LD_ADDR_VAR 0 9
30571: PUSH
30572: LD_INT 10
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30586: LD_VAR 0 6
30590: PPUSH
30591: CALL_OW 257
30595: PUSH
30596: LD_INT 11
30598: EQUAL
30599: IFFALSE 30620
// points := [ 30 , 10 , 5 ] ;
30601: LD_ADDR_VAR 0 9
30605: PUSH
30606: LD_INT 30
30608: PUSH
30609: LD_INT 10
30611: PUSH
30612: LD_INT 5
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30620: LD_VAR 0 1
30624: PPUSH
30625: LD_INT 5
30627: PPUSH
30628: CALL_OW 321
30632: PUSH
30633: LD_INT 2
30635: EQUAL
30636: IFFALSE 30653
// bpoints := bpoints * 1.8 ;
30638: LD_ADDR_VAR 0 10
30642: PUSH
30643: LD_VAR 0 10
30647: PUSH
30648: LD_REAL  1.80000000000000E+0000
30651: MUL
30652: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30653: LD_VAR 0 6
30657: PPUSH
30658: CALL_OW 257
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 4
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: IN
30681: PUSH
30682: LD_VAR 0 1
30686: PPUSH
30687: LD_INT 51
30689: PPUSH
30690: CALL_OW 321
30694: PUSH
30695: LD_INT 2
30697: EQUAL
30698: AND
30699: IFFALSE 30716
// bpoints := bpoints * 1.2 ;
30701: LD_ADDR_VAR 0 10
30705: PUSH
30706: LD_VAR 0 10
30710: PUSH
30711: LD_REAL  1.20000000000000E+0000
30714: MUL
30715: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30716: LD_VAR 0 6
30720: PPUSH
30721: CALL_OW 257
30725: PUSH
30726: LD_INT 5
30728: PUSH
30729: LD_INT 7
30731: PUSH
30732: LD_INT 9
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: IN
30740: PUSH
30741: LD_VAR 0 1
30745: PPUSH
30746: LD_INT 52
30748: PPUSH
30749: CALL_OW 321
30753: PUSH
30754: LD_INT 2
30756: EQUAL
30757: AND
30758: IFFALSE 30775
// bpoints := bpoints * 1.5 ;
30760: LD_ADDR_VAR 0 10
30764: PUSH
30765: LD_VAR 0 10
30769: PUSH
30770: LD_REAL  1.50000000000000E+0000
30773: MUL
30774: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_INT 66
30782: PPUSH
30783: CALL_OW 321
30787: PUSH
30788: LD_INT 2
30790: EQUAL
30791: IFFALSE 30808
// bpoints := bpoints * 1.1 ;
30793: LD_ADDR_VAR 0 10
30797: PUSH
30798: LD_VAR 0 10
30802: PUSH
30803: LD_REAL  1.10000000000000E+0000
30806: MUL
30807: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30808: LD_ADDR_VAR 0 10
30812: PUSH
30813: LD_VAR 0 10
30817: PUSH
30818: LD_VAR 0 6
30822: PPUSH
30823: LD_INT 1
30825: PPUSH
30826: CALL_OW 259
30830: PUSH
30831: LD_REAL  1.15000000000000E+0000
30834: MUL
30835: MUL
30836: ST_TO_ADDR
// end ; unit_vehicle :
30837: GO 31665
30839: LD_INT 2
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 31653
30847: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30848: LD_VAR 0 6
30852: PPUSH
30853: CALL_OW 264
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 42
30863: PUSH
30864: LD_INT 24
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: IN
30872: IFFALSE 30893
// points := [ 25 , 5 , 3 ] ;
30874: LD_ADDR_VAR 0 9
30878: PUSH
30879: LD_INT 25
30881: PUSH
30882: LD_INT 5
30884: PUSH
30885: LD_INT 3
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30893: LD_VAR 0 6
30897: PPUSH
30898: CALL_OW 264
30902: PUSH
30903: LD_INT 4
30905: PUSH
30906: LD_INT 43
30908: PUSH
30909: LD_INT 25
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: LIST
30916: IN
30917: IFFALSE 30938
// points := [ 40 , 15 , 5 ] ;
30919: LD_ADDR_VAR 0 9
30923: PUSH
30924: LD_INT 40
30926: PUSH
30927: LD_INT 15
30929: PUSH
30930: LD_INT 5
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30938: LD_VAR 0 6
30942: PPUSH
30943: CALL_OW 264
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: LD_INT 23
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: IN
30958: IFFALSE 30979
// points := [ 7 , 25 , 8 ] ;
30960: LD_ADDR_VAR 0 9
30964: PUSH
30965: LD_INT 7
30967: PUSH
30968: LD_INT 25
30970: PUSH
30971: LD_INT 8
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30979: LD_VAR 0 6
30983: PPUSH
30984: CALL_OW 264
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: LD_INT 27
30994: PUSH
30995: LD_INT 44
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: IN
31003: IFFALSE 31024
// points := [ 14 , 50 , 16 ] ;
31005: LD_ADDR_VAR 0 9
31009: PUSH
31010: LD_INT 14
31012: PUSH
31013: LD_INT 50
31015: PUSH
31016: LD_INT 16
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31024: LD_VAR 0 6
31028: PPUSH
31029: CALL_OW 264
31033: PUSH
31034: LD_INT 6
31036: PUSH
31037: LD_INT 46
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: IN
31044: IFFALSE 31065
// points := [ 32 , 120 , 70 ] ;
31046: LD_ADDR_VAR 0 9
31050: PUSH
31051: LD_INT 32
31053: PUSH
31054: LD_INT 120
31056: PUSH
31057: LD_INT 70
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31065: LD_VAR 0 6
31069: PPUSH
31070: CALL_OW 264
31074: PUSH
31075: LD_INT 7
31077: PUSH
31078: LD_INT 28
31080: PUSH
31081: LD_INT 45
31083: PUSH
31084: LD_INT 92
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: IN
31093: IFFALSE 31114
// points := [ 35 , 20 , 45 ] ;
31095: LD_ADDR_VAR 0 9
31099: PUSH
31100: LD_INT 35
31102: PUSH
31103: LD_INT 20
31105: PUSH
31106: LD_INT 45
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: LIST
31113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31114: LD_VAR 0 6
31118: PPUSH
31119: CALL_OW 264
31123: PUSH
31124: LD_INT 47
31126: PUSH
31127: EMPTY
31128: LIST
31129: IN
31130: IFFALSE 31151
// points := [ 67 , 45 , 75 ] ;
31132: LD_ADDR_VAR 0 9
31136: PUSH
31137: LD_INT 67
31139: PUSH
31140: LD_INT 45
31142: PUSH
31143: LD_INT 75
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31151: LD_VAR 0 6
31155: PPUSH
31156: CALL_OW 264
31160: PUSH
31161: LD_INT 26
31163: PUSH
31164: EMPTY
31165: LIST
31166: IN
31167: IFFALSE 31188
// points := [ 120 , 30 , 80 ] ;
31169: LD_ADDR_VAR 0 9
31173: PUSH
31174: LD_INT 120
31176: PUSH
31177: LD_INT 30
31179: PUSH
31180: LD_INT 80
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31188: LD_VAR 0 6
31192: PPUSH
31193: CALL_OW 264
31197: PUSH
31198: LD_INT 22
31200: PUSH
31201: EMPTY
31202: LIST
31203: IN
31204: IFFALSE 31225
// points := [ 40 , 1 , 1 ] ;
31206: LD_ADDR_VAR 0 9
31210: PUSH
31211: LD_INT 40
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31225: LD_VAR 0 6
31229: PPUSH
31230: CALL_OW 264
31234: PUSH
31235: LD_INT 29
31237: PUSH
31238: EMPTY
31239: LIST
31240: IN
31241: IFFALSE 31262
// points := [ 70 , 200 , 400 ] ;
31243: LD_ADDR_VAR 0 9
31247: PUSH
31248: LD_INT 70
31250: PUSH
31251: LD_INT 200
31253: PUSH
31254: LD_INT 400
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: LIST
31261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31262: LD_VAR 0 6
31266: PPUSH
31267: CALL_OW 264
31271: PUSH
31272: LD_INT 14
31274: PUSH
31275: LD_INT 53
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: IN
31282: IFFALSE 31303
// points := [ 40 , 10 , 20 ] ;
31284: LD_ADDR_VAR 0 9
31288: PUSH
31289: LD_INT 40
31291: PUSH
31292: LD_INT 10
31294: PUSH
31295: LD_INT 20
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31303: LD_VAR 0 6
31307: PPUSH
31308: CALL_OW 264
31312: PUSH
31313: LD_INT 9
31315: PUSH
31316: EMPTY
31317: LIST
31318: IN
31319: IFFALSE 31340
// points := [ 5 , 70 , 20 ] ;
31321: LD_ADDR_VAR 0 9
31325: PUSH
31326: LD_INT 5
31328: PUSH
31329: LD_INT 70
31331: PUSH
31332: LD_INT 20
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31340: LD_VAR 0 6
31344: PPUSH
31345: CALL_OW 264
31349: PUSH
31350: LD_INT 10
31352: PUSH
31353: EMPTY
31354: LIST
31355: IN
31356: IFFALSE 31377
// points := [ 35 , 110 , 70 ] ;
31358: LD_ADDR_VAR 0 9
31362: PUSH
31363: LD_INT 35
31365: PUSH
31366: LD_INT 110
31368: PUSH
31369: LD_INT 70
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31377: LD_VAR 0 6
31381: PPUSH
31382: CALL_OW 265
31386: PUSH
31387: LD_INT 25
31389: EQUAL
31390: IFFALSE 31411
// points := [ 80 , 65 , 100 ] ;
31392: LD_ADDR_VAR 0 9
31396: PUSH
31397: LD_INT 80
31399: PUSH
31400: LD_INT 65
31402: PUSH
31403: LD_INT 100
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: LIST
31410: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31411: LD_VAR 0 6
31415: PPUSH
31416: CALL_OW 263
31420: PUSH
31421: LD_INT 1
31423: EQUAL
31424: IFFALSE 31459
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31426: LD_ADDR_VAR 0 10
31430: PUSH
31431: LD_VAR 0 10
31435: PUSH
31436: LD_VAR 0 6
31440: PPUSH
31441: CALL_OW 311
31445: PPUSH
31446: LD_INT 3
31448: PPUSH
31449: CALL_OW 259
31453: PUSH
31454: LD_INT 4
31456: MUL
31457: MUL
31458: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31459: LD_VAR 0 6
31463: PPUSH
31464: CALL_OW 263
31468: PUSH
31469: LD_INT 2
31471: EQUAL
31472: IFFALSE 31523
// begin j := IsControledBy ( i ) ;
31474: LD_ADDR_VAR 0 7
31478: PUSH
31479: LD_VAR 0 6
31483: PPUSH
31484: CALL_OW 312
31488: ST_TO_ADDR
// if j then
31489: LD_VAR 0 7
31493: IFFALSE 31523
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31495: LD_ADDR_VAR 0 10
31499: PUSH
31500: LD_VAR 0 10
31504: PUSH
31505: LD_VAR 0 7
31509: PPUSH
31510: LD_INT 3
31512: PPUSH
31513: CALL_OW 259
31517: PUSH
31518: LD_INT 3
31520: MUL
31521: MUL
31522: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31523: LD_VAR 0 6
31527: PPUSH
31528: CALL_OW 264
31532: PUSH
31533: LD_INT 5
31535: PUSH
31536: LD_INT 6
31538: PUSH
31539: LD_INT 46
31541: PUSH
31542: LD_INT 44
31544: PUSH
31545: LD_INT 47
31547: PUSH
31548: LD_INT 45
31550: PUSH
31551: LD_INT 28
31553: PUSH
31554: LD_INT 7
31556: PUSH
31557: LD_INT 27
31559: PUSH
31560: LD_INT 29
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: IN
31575: PUSH
31576: LD_VAR 0 1
31580: PPUSH
31581: LD_INT 52
31583: PPUSH
31584: CALL_OW 321
31588: PUSH
31589: LD_INT 2
31591: EQUAL
31592: AND
31593: IFFALSE 31610
// bpoints := bpoints * 1.2 ;
31595: LD_ADDR_VAR 0 10
31599: PUSH
31600: LD_VAR 0 10
31604: PUSH
31605: LD_REAL  1.20000000000000E+0000
31608: MUL
31609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31610: LD_VAR 0 6
31614: PPUSH
31615: CALL_OW 264
31619: PUSH
31620: LD_INT 6
31622: PUSH
31623: LD_INT 46
31625: PUSH
31626: LD_INT 47
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: IN
31634: IFFALSE 31651
// bpoints := bpoints * 1.2 ;
31636: LD_ADDR_VAR 0 10
31640: PUSH
31641: LD_VAR 0 10
31645: PUSH
31646: LD_REAL  1.20000000000000E+0000
31649: MUL
31650: ST_TO_ADDR
// end ; unit_building :
31651: GO 31665
31653: LD_INT 3
31655: DOUBLE
31656: EQUAL
31657: IFTRUE 31661
31659: GO 31664
31661: POP
// ; end ;
31662: GO 31665
31664: POP
// for j = 1 to 3 do
31665: LD_ADDR_VAR 0 7
31669: PUSH
31670: DOUBLE
31671: LD_INT 1
31673: DEC
31674: ST_TO_ADDR
31675: LD_INT 3
31677: PUSH
31678: FOR_TO
31679: IFFALSE 31732
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31681: LD_ADDR_VAR 0 5
31685: PUSH
31686: LD_VAR 0 5
31690: PPUSH
31691: LD_VAR 0 7
31695: PPUSH
31696: LD_VAR 0 5
31700: PUSH
31701: LD_VAR 0 7
31705: ARRAY
31706: PUSH
31707: LD_VAR 0 9
31711: PUSH
31712: LD_VAR 0 7
31716: ARRAY
31717: PUSH
31718: LD_VAR 0 10
31722: MUL
31723: PLUS
31724: PPUSH
31725: CALL_OW 1
31729: ST_TO_ADDR
31730: GO 31678
31732: POP
31733: POP
// end ;
31734: GO 30213
31736: POP
31737: POP
// result := Replace ( result , 4 , tmp ) ;
31738: LD_ADDR_VAR 0 5
31742: PUSH
31743: LD_VAR 0 5
31747: PPUSH
31748: LD_INT 4
31750: PPUSH
31751: LD_VAR 0 8
31755: PPUSH
31756: CALL_OW 1
31760: ST_TO_ADDR
// end ;
31761: LD_VAR 0 5
31765: RET
// export function DangerAtRange ( unit , range ) ; begin
31766: LD_INT 0
31768: PPUSH
// if not unit then
31769: LD_VAR 0 1
31773: NOT
31774: IFFALSE 31778
// exit ;
31776: GO 31823
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31778: LD_ADDR_VAR 0 3
31782: PUSH
31783: LD_VAR 0 1
31787: PPUSH
31788: CALL_OW 255
31792: PPUSH
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 250
31802: PPUSH
31803: LD_VAR 0 1
31807: PPUSH
31808: CALL_OW 251
31812: PPUSH
31813: LD_VAR 0 2
31817: PPUSH
31818: CALL 30065 0 4
31822: ST_TO_ADDR
// end ;
31823: LD_VAR 0 3
31827: RET
// export function DangerInArea ( side , area ) ; begin
31828: LD_INT 0
31830: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31831: LD_ADDR_VAR 0 3
31835: PUSH
31836: LD_VAR 0 2
31840: PPUSH
31841: LD_INT 81
31843: PUSH
31844: LD_VAR 0 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PPUSH
31853: CALL_OW 70
31857: ST_TO_ADDR
// end ;
31858: LD_VAR 0 3
31862: RET
// export function IsExtension ( b ) ; begin
31863: LD_INT 0
31865: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31866: LD_ADDR_VAR 0 2
31870: PUSH
31871: LD_VAR 0 1
31875: PUSH
31876: LD_INT 23
31878: PUSH
31879: LD_INT 20
31881: PUSH
31882: LD_INT 22
31884: PUSH
31885: LD_INT 17
31887: PUSH
31888: LD_INT 24
31890: PUSH
31891: LD_INT 21
31893: PUSH
31894: LD_INT 19
31896: PUSH
31897: LD_INT 16
31899: PUSH
31900: LD_INT 25
31902: PUSH
31903: LD_INT 18
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: IN
31918: ST_TO_ADDR
// end ;
31919: LD_VAR 0 2
31923: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31924: LD_INT 0
31926: PPUSH
31927: PPUSH
31928: PPUSH
// result := [ ] ;
31929: LD_ADDR_VAR 0 4
31933: PUSH
31934: EMPTY
31935: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31936: LD_ADDR_VAR 0 5
31940: PUSH
31941: LD_VAR 0 2
31945: PPUSH
31946: LD_INT 21
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PPUSH
31956: CALL_OW 70
31960: ST_TO_ADDR
// if not tmp then
31961: LD_VAR 0 5
31965: NOT
31966: IFFALSE 31970
// exit ;
31968: GO 32034
// if checkLink then
31970: LD_VAR 0 3
31974: IFFALSE 32024
// begin for i in tmp do
31976: LD_ADDR_VAR 0 6
31980: PUSH
31981: LD_VAR 0 5
31985: PUSH
31986: FOR_IN
31987: IFFALSE 32022
// if GetBase ( i ) <> base then
31989: LD_VAR 0 6
31993: PPUSH
31994: CALL_OW 274
31998: PUSH
31999: LD_VAR 0 1
32003: NONEQUAL
32004: IFFALSE 32020
// ComLinkToBase ( base , i ) ;
32006: LD_VAR 0 1
32010: PPUSH
32011: LD_VAR 0 6
32015: PPUSH
32016: CALL_OW 169
32020: GO 31986
32022: POP
32023: POP
// end ; result := tmp ;
32024: LD_ADDR_VAR 0 4
32028: PUSH
32029: LD_VAR 0 5
32033: ST_TO_ADDR
// end ;
32034: LD_VAR 0 4
32038: RET
// export function ComComplete ( units , b ) ; var i ; begin
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
// if not units then
32043: LD_VAR 0 1
32047: NOT
32048: IFFALSE 32052
// exit ;
32050: GO 32142
// for i in units do
32052: LD_ADDR_VAR 0 4
32056: PUSH
32057: LD_VAR 0 1
32061: PUSH
32062: FOR_IN
32063: IFFALSE 32140
// if BuildingStatus ( b ) = bs_build then
32065: LD_VAR 0 2
32069: PPUSH
32070: CALL_OW 461
32074: PUSH
32075: LD_INT 1
32077: EQUAL
32078: IFFALSE 32138
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32080: LD_VAR 0 4
32084: PPUSH
32085: LD_STRING h
32087: PUSH
32088: LD_VAR 0 2
32092: PPUSH
32093: CALL_OW 250
32097: PUSH
32098: LD_VAR 0 2
32102: PPUSH
32103: CALL_OW 251
32107: PUSH
32108: LD_VAR 0 2
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: PUSH
32131: EMPTY
32132: LIST
32133: PPUSH
32134: CALL_OW 446
32138: GO 32062
32140: POP
32141: POP
// end ;
32142: LD_VAR 0 3
32146: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32147: LD_INT 0
32149: PPUSH
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
32154: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32155: LD_VAR 0 1
32159: NOT
32160: PUSH
32161: LD_VAR 0 1
32165: PPUSH
32166: CALL_OW 263
32170: PUSH
32171: LD_INT 2
32173: NONEQUAL
32174: OR
32175: IFFALSE 32179
// exit ;
32177: GO 32495
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32179: LD_ADDR_VAR 0 6
32183: PUSH
32184: LD_INT 22
32186: PUSH
32187: LD_VAR 0 1
32191: PPUSH
32192: CALL_OW 255
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 30
32206: PUSH
32207: LD_INT 36
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 34
32216: PUSH
32217: LD_INT 31
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PPUSH
32233: CALL_OW 69
32237: ST_TO_ADDR
// if not tmp then
32238: LD_VAR 0 6
32242: NOT
32243: IFFALSE 32247
// exit ;
32245: GO 32495
// result := [ ] ;
32247: LD_ADDR_VAR 0 2
32251: PUSH
32252: EMPTY
32253: ST_TO_ADDR
// for i in tmp do
32254: LD_ADDR_VAR 0 3
32258: PUSH
32259: LD_VAR 0 6
32263: PUSH
32264: FOR_IN
32265: IFFALSE 32336
// begin t := UnitsInside ( i ) ;
32267: LD_ADDR_VAR 0 4
32271: PUSH
32272: LD_VAR 0 3
32276: PPUSH
32277: CALL_OW 313
32281: ST_TO_ADDR
// if t then
32282: LD_VAR 0 4
32286: IFFALSE 32334
// for j in t do
32288: LD_ADDR_VAR 0 7
32292: PUSH
32293: LD_VAR 0 4
32297: PUSH
32298: FOR_IN
32299: IFFALSE 32332
// result := Replace ( result , result + 1 , j ) ;
32301: LD_ADDR_VAR 0 2
32305: PUSH
32306: LD_VAR 0 2
32310: PPUSH
32311: LD_VAR 0 2
32315: PUSH
32316: LD_INT 1
32318: PLUS
32319: PPUSH
32320: LD_VAR 0 7
32324: PPUSH
32325: CALL_OW 1
32329: ST_TO_ADDR
32330: GO 32298
32332: POP
32333: POP
// end ;
32334: GO 32264
32336: POP
32337: POP
// if not result then
32338: LD_VAR 0 2
32342: NOT
32343: IFFALSE 32347
// exit ;
32345: GO 32495
// mech := result [ 1 ] ;
32347: LD_ADDR_VAR 0 5
32351: PUSH
32352: LD_VAR 0 2
32356: PUSH
32357: LD_INT 1
32359: ARRAY
32360: ST_TO_ADDR
// if result > 1 then
32361: LD_VAR 0 2
32365: PUSH
32366: LD_INT 1
32368: GREATER
32369: IFFALSE 32481
// begin for i = 2 to result do
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: DOUBLE
32377: LD_INT 2
32379: DEC
32380: ST_TO_ADDR
32381: LD_VAR 0 2
32385: PUSH
32386: FOR_TO
32387: IFFALSE 32479
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32389: LD_ADDR_VAR 0 4
32393: PUSH
32394: LD_VAR 0 2
32398: PUSH
32399: LD_VAR 0 3
32403: ARRAY
32404: PPUSH
32405: LD_INT 3
32407: PPUSH
32408: CALL_OW 259
32412: PUSH
32413: LD_VAR 0 2
32417: PUSH
32418: LD_VAR 0 3
32422: ARRAY
32423: PPUSH
32424: CALL_OW 432
32428: MINUS
32429: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32430: LD_VAR 0 4
32434: PUSH
32435: LD_VAR 0 5
32439: PPUSH
32440: LD_INT 3
32442: PPUSH
32443: CALL_OW 259
32447: PUSH
32448: LD_VAR 0 5
32452: PPUSH
32453: CALL_OW 432
32457: MINUS
32458: GREATEREQUAL
32459: IFFALSE 32477
// mech := result [ i ] ;
32461: LD_ADDR_VAR 0 5
32465: PUSH
32466: LD_VAR 0 2
32470: PUSH
32471: LD_VAR 0 3
32475: ARRAY
32476: ST_TO_ADDR
// end ;
32477: GO 32386
32479: POP
32480: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32481: LD_VAR 0 1
32485: PPUSH
32486: LD_VAR 0 5
32490: PPUSH
32491: CALL_OW 135
// end ;
32495: LD_VAR 0 2
32499: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32500: LD_INT 0
32502: PPUSH
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
32510: PPUSH
32511: PPUSH
32512: PPUSH
32513: PPUSH
32514: PPUSH
// result := [ ] ;
32515: LD_ADDR_VAR 0 7
32519: PUSH
32520: EMPTY
32521: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32522: LD_VAR 0 1
32526: PPUSH
32527: CALL_OW 266
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: IN
32542: NOT
32543: IFFALSE 32547
// exit ;
32545: GO 34181
// if name then
32547: LD_VAR 0 3
32551: IFFALSE 32567
// SetBName ( base_dep , name ) ;
32553: LD_VAR 0 1
32557: PPUSH
32558: LD_VAR 0 3
32562: PPUSH
32563: CALL_OW 500
// base := GetBase ( base_dep ) ;
32567: LD_ADDR_VAR 0 15
32571: PUSH
32572: LD_VAR 0 1
32576: PPUSH
32577: CALL_OW 274
32581: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32582: LD_ADDR_VAR 0 16
32586: PUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: CALL_OW 255
32596: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32597: LD_ADDR_VAR 0 17
32601: PUSH
32602: LD_VAR 0 1
32606: PPUSH
32607: CALL_OW 248
32611: ST_TO_ADDR
// if sources then
32612: LD_VAR 0 5
32616: IFFALSE 32663
// for i = 1 to 3 do
32618: LD_ADDR_VAR 0 8
32622: PUSH
32623: DOUBLE
32624: LD_INT 1
32626: DEC
32627: ST_TO_ADDR
32628: LD_INT 3
32630: PUSH
32631: FOR_TO
32632: IFFALSE 32661
// AddResourceType ( base , i , sources [ i ] ) ;
32634: LD_VAR 0 15
32638: PPUSH
32639: LD_VAR 0 8
32643: PPUSH
32644: LD_VAR 0 5
32648: PUSH
32649: LD_VAR 0 8
32653: ARRAY
32654: PPUSH
32655: CALL_OW 276
32659: GO 32631
32661: POP
32662: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32663: LD_ADDR_VAR 0 18
32667: PUSH
32668: LD_VAR 0 15
32672: PPUSH
32673: LD_VAR 0 2
32677: PPUSH
32678: LD_INT 1
32680: PPUSH
32681: CALL 31924 0 3
32685: ST_TO_ADDR
// InitHc ;
32686: CALL_OW 19
// InitUc ;
32690: CALL_OW 18
// uc_side := side ;
32694: LD_ADDR_OWVAR 20
32698: PUSH
32699: LD_VAR 0 16
32703: ST_TO_ADDR
// uc_nation := nation ;
32704: LD_ADDR_OWVAR 21
32708: PUSH
32709: LD_VAR 0 17
32713: ST_TO_ADDR
// if buildings then
32714: LD_VAR 0 18
32718: IFFALSE 34040
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32720: LD_ADDR_VAR 0 19
32724: PUSH
32725: LD_VAR 0 18
32729: PPUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 30
32735: PUSH
32736: LD_INT 29
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 30
32745: PUSH
32746: LD_INT 30
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: PPUSH
32758: CALL_OW 72
32762: ST_TO_ADDR
// if tmp then
32763: LD_VAR 0 19
32767: IFFALSE 32815
// for i in tmp do
32769: LD_ADDR_VAR 0 8
32773: PUSH
32774: LD_VAR 0 19
32778: PUSH
32779: FOR_IN
32780: IFFALSE 32813
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32782: LD_VAR 0 8
32786: PPUSH
32787: CALL_OW 250
32791: PPUSH
32792: LD_VAR 0 8
32796: PPUSH
32797: CALL_OW 251
32801: PPUSH
32802: LD_VAR 0 16
32806: PPUSH
32807: CALL_OW 441
32811: GO 32779
32813: POP
32814: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32815: LD_VAR 0 18
32819: PPUSH
32820: LD_INT 2
32822: PUSH
32823: LD_INT 30
32825: PUSH
32826: LD_INT 32
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 30
32835: PUSH
32836: LD_INT 33
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: PPUSH
32848: CALL_OW 72
32852: IFFALSE 32940
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32854: LD_ADDR_VAR 0 8
32858: PUSH
32859: LD_VAR 0 18
32863: PPUSH
32864: LD_INT 2
32866: PUSH
32867: LD_INT 30
32869: PUSH
32870: LD_INT 32
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 30
32879: PUSH
32880: LD_INT 33
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: PPUSH
32892: CALL_OW 72
32896: PUSH
32897: FOR_IN
32898: IFFALSE 32938
// begin if not GetBWeapon ( i ) then
32900: LD_VAR 0 8
32904: PPUSH
32905: CALL_OW 269
32909: NOT
32910: IFFALSE 32936
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32912: LD_VAR 0 8
32916: PPUSH
32917: LD_VAR 0 8
32921: PPUSH
32922: LD_VAR 0 2
32926: PPUSH
32927: CALL 34186 0 2
32931: PPUSH
32932: CALL_OW 431
// end ;
32936: GO 32897
32938: POP
32939: POP
// end ; for i = 1 to personel do
32940: LD_ADDR_VAR 0 8
32944: PUSH
32945: DOUBLE
32946: LD_INT 1
32948: DEC
32949: ST_TO_ADDR
32950: LD_VAR 0 6
32954: PUSH
32955: FOR_TO
32956: IFFALSE 34020
// begin if i > 4 then
32958: LD_VAR 0 8
32962: PUSH
32963: LD_INT 4
32965: GREATER
32966: IFFALSE 32970
// break ;
32968: GO 34020
// case i of 1 :
32970: LD_VAR 0 8
32974: PUSH
32975: LD_INT 1
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 33063
32983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32984: LD_ADDR_VAR 0 12
32988: PUSH
32989: LD_VAR 0 18
32993: PPUSH
32994: LD_INT 22
32996: PUSH
32997: LD_VAR 0 16
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 58
33008: PUSH
33009: EMPTY
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: LD_INT 30
33017: PUSH
33018: LD_INT 32
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 30
33027: PUSH
33028: LD_INT 4
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 30
33037: PUSH
33038: LD_INT 5
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: PPUSH
33056: CALL_OW 72
33060: ST_TO_ADDR
33061: GO 33285
33063: LD_INT 2
33065: DOUBLE
33066: EQUAL
33067: IFTRUE 33071
33069: GO 33133
33071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33072: LD_ADDR_VAR 0 12
33076: PUSH
33077: LD_VAR 0 18
33081: PPUSH
33082: LD_INT 22
33084: PUSH
33085: LD_VAR 0 16
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: LD_INT 30
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 30
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PPUSH
33126: CALL_OW 72
33130: ST_TO_ADDR
33131: GO 33285
33133: LD_INT 3
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33203
33141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33142: LD_ADDR_VAR 0 12
33146: PUSH
33147: LD_VAR 0 18
33151: PPUSH
33152: LD_INT 22
33154: PUSH
33155: LD_VAR 0 16
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 30
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 30
33179: PUSH
33180: LD_INT 3
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PPUSH
33196: CALL_OW 72
33200: ST_TO_ADDR
33201: GO 33285
33203: LD_INT 4
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33284
33211: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33212: LD_ADDR_VAR 0 12
33216: PUSH
33217: LD_VAR 0 18
33221: PPUSH
33222: LD_INT 22
33224: PUSH
33225: LD_VAR 0 16
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 2
33236: PUSH
33237: LD_INT 30
33239: PUSH
33240: LD_INT 6
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 30
33249: PUSH
33250: LD_INT 7
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 30
33259: PUSH
33260: LD_INT 8
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PPUSH
33277: CALL_OW 72
33281: ST_TO_ADDR
33282: GO 33285
33284: POP
// if i = 1 then
33285: LD_VAR 0 8
33289: PUSH
33290: LD_INT 1
33292: EQUAL
33293: IFFALSE 33404
// begin tmp := [ ] ;
33295: LD_ADDR_VAR 0 19
33299: PUSH
33300: EMPTY
33301: ST_TO_ADDR
// for j in f do
33302: LD_ADDR_VAR 0 9
33306: PUSH
33307: LD_VAR 0 12
33311: PUSH
33312: FOR_IN
33313: IFFALSE 33386
// if GetBType ( j ) = b_bunker then
33315: LD_VAR 0 9
33319: PPUSH
33320: CALL_OW 266
33324: PUSH
33325: LD_INT 32
33327: EQUAL
33328: IFFALSE 33355
// tmp := Insert ( tmp , 1 , j ) else
33330: LD_ADDR_VAR 0 19
33334: PUSH
33335: LD_VAR 0 19
33339: PPUSH
33340: LD_INT 1
33342: PPUSH
33343: LD_VAR 0 9
33347: PPUSH
33348: CALL_OW 2
33352: ST_TO_ADDR
33353: GO 33384
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33355: LD_ADDR_VAR 0 19
33359: PUSH
33360: LD_VAR 0 19
33364: PPUSH
33365: LD_VAR 0 19
33369: PUSH
33370: LD_INT 1
33372: PLUS
33373: PPUSH
33374: LD_VAR 0 9
33378: PPUSH
33379: CALL_OW 2
33383: ST_TO_ADDR
33384: GO 33312
33386: POP
33387: POP
// if tmp then
33388: LD_VAR 0 19
33392: IFFALSE 33404
// f := tmp ;
33394: LD_ADDR_VAR 0 12
33398: PUSH
33399: LD_VAR 0 19
33403: ST_TO_ADDR
// end ; x := personel [ i ] ;
33404: LD_ADDR_VAR 0 13
33408: PUSH
33409: LD_VAR 0 6
33413: PUSH
33414: LD_VAR 0 8
33418: ARRAY
33419: ST_TO_ADDR
// if x = - 1 then
33420: LD_VAR 0 13
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: EQUAL
33429: IFFALSE 33638
// begin for j in f do
33431: LD_ADDR_VAR 0 9
33435: PUSH
33436: LD_VAR 0 12
33440: PUSH
33441: FOR_IN
33442: IFFALSE 33634
// repeat InitHc ;
33444: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33448: LD_VAR 0 9
33452: PPUSH
33453: CALL_OW 266
33457: PUSH
33458: LD_INT 5
33460: EQUAL
33461: IFFALSE 33531
// begin if UnitsInside ( j ) < 3 then
33463: LD_VAR 0 9
33467: PPUSH
33468: CALL_OW 313
33472: PUSH
33473: LD_INT 3
33475: LESS
33476: IFFALSE 33512
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33478: LD_INT 0
33480: PPUSH
33481: LD_INT 5
33483: PUSH
33484: LD_INT 8
33486: PUSH
33487: LD_INT 9
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: PUSH
33495: LD_VAR 0 17
33499: ARRAY
33500: PPUSH
33501: LD_VAR 0 4
33505: PPUSH
33506: CALL_OW 380
33510: GO 33529
// PrepareHuman ( false , i , skill ) ;
33512: LD_INT 0
33514: PPUSH
33515: LD_VAR 0 8
33519: PPUSH
33520: LD_VAR 0 4
33524: PPUSH
33525: CALL_OW 380
// end else
33529: GO 33548
// PrepareHuman ( false , i , skill ) ;
33531: LD_INT 0
33533: PPUSH
33534: LD_VAR 0 8
33538: PPUSH
33539: LD_VAR 0 4
33543: PPUSH
33544: CALL_OW 380
// un := CreateHuman ;
33548: LD_ADDR_VAR 0 14
33552: PUSH
33553: CALL_OW 44
33557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33558: LD_ADDR_VAR 0 7
33562: PUSH
33563: LD_VAR 0 7
33567: PPUSH
33568: LD_INT 1
33570: PPUSH
33571: LD_VAR 0 14
33575: PPUSH
33576: CALL_OW 2
33580: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33581: LD_VAR 0 14
33585: PPUSH
33586: LD_VAR 0 9
33590: PPUSH
33591: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33595: LD_VAR 0 9
33599: PPUSH
33600: CALL_OW 313
33604: PUSH
33605: LD_INT 6
33607: EQUAL
33608: PUSH
33609: LD_VAR 0 9
33613: PPUSH
33614: CALL_OW 266
33618: PUSH
33619: LD_INT 32
33621: PUSH
33622: LD_INT 31
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: IN
33629: OR
33630: IFFALSE 33444
33632: GO 33441
33634: POP
33635: POP
// end else
33636: GO 34018
// for j = 1 to x do
33638: LD_ADDR_VAR 0 9
33642: PUSH
33643: DOUBLE
33644: LD_INT 1
33646: DEC
33647: ST_TO_ADDR
33648: LD_VAR 0 13
33652: PUSH
33653: FOR_TO
33654: IFFALSE 34016
// begin InitHc ;
33656: CALL_OW 19
// if not f then
33660: LD_VAR 0 12
33664: NOT
33665: IFFALSE 33754
// begin PrepareHuman ( false , i , skill ) ;
33667: LD_INT 0
33669: PPUSH
33670: LD_VAR 0 8
33674: PPUSH
33675: LD_VAR 0 4
33679: PPUSH
33680: CALL_OW 380
// un := CreateHuman ;
33684: LD_ADDR_VAR 0 14
33688: PUSH
33689: CALL_OW 44
33693: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33694: LD_ADDR_VAR 0 7
33698: PUSH
33699: LD_VAR 0 7
33703: PPUSH
33704: LD_INT 1
33706: PPUSH
33707: LD_VAR 0 14
33711: PPUSH
33712: CALL_OW 2
33716: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33717: LD_VAR 0 14
33721: PPUSH
33722: LD_VAR 0 1
33726: PPUSH
33727: CALL_OW 250
33731: PPUSH
33732: LD_VAR 0 1
33736: PPUSH
33737: CALL_OW 251
33741: PPUSH
33742: LD_INT 10
33744: PPUSH
33745: LD_INT 0
33747: PPUSH
33748: CALL_OW 50
// continue ;
33752: GO 33653
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33754: LD_VAR 0 12
33758: PUSH
33759: LD_INT 1
33761: ARRAY
33762: PPUSH
33763: CALL_OW 313
33767: PUSH
33768: LD_VAR 0 12
33772: PUSH
33773: LD_INT 1
33775: ARRAY
33776: PPUSH
33777: CALL_OW 266
33781: PUSH
33782: LD_INT 32
33784: PUSH
33785: LD_INT 31
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: IN
33792: AND
33793: PUSH
33794: LD_VAR 0 12
33798: PUSH
33799: LD_INT 1
33801: ARRAY
33802: PPUSH
33803: CALL_OW 313
33807: PUSH
33808: LD_INT 6
33810: EQUAL
33811: OR
33812: IFFALSE 33832
// f := Delete ( f , 1 ) ;
33814: LD_ADDR_VAR 0 12
33818: PUSH
33819: LD_VAR 0 12
33823: PPUSH
33824: LD_INT 1
33826: PPUSH
33827: CALL_OW 3
33831: ST_TO_ADDR
// if not f then
33832: LD_VAR 0 12
33836: NOT
33837: IFFALSE 33855
// begin x := x + 2 ;
33839: LD_ADDR_VAR 0 13
33843: PUSH
33844: LD_VAR 0 13
33848: PUSH
33849: LD_INT 2
33851: PLUS
33852: ST_TO_ADDR
// continue ;
33853: GO 33653
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33855: LD_VAR 0 12
33859: PUSH
33860: LD_INT 1
33862: ARRAY
33863: PPUSH
33864: CALL_OW 266
33868: PUSH
33869: LD_INT 5
33871: EQUAL
33872: IFFALSE 33946
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33874: LD_VAR 0 12
33878: PUSH
33879: LD_INT 1
33881: ARRAY
33882: PPUSH
33883: CALL_OW 313
33887: PUSH
33888: LD_INT 3
33890: LESS
33891: IFFALSE 33927
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33893: LD_INT 0
33895: PPUSH
33896: LD_INT 5
33898: PUSH
33899: LD_INT 8
33901: PUSH
33902: LD_INT 9
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: PUSH
33910: LD_VAR 0 17
33914: ARRAY
33915: PPUSH
33916: LD_VAR 0 4
33920: PPUSH
33921: CALL_OW 380
33925: GO 33944
// PrepareHuman ( false , i , skill ) ;
33927: LD_INT 0
33929: PPUSH
33930: LD_VAR 0 8
33934: PPUSH
33935: LD_VAR 0 4
33939: PPUSH
33940: CALL_OW 380
// end else
33944: GO 33963
// PrepareHuman ( false , i , skill ) ;
33946: LD_INT 0
33948: PPUSH
33949: LD_VAR 0 8
33953: PPUSH
33954: LD_VAR 0 4
33958: PPUSH
33959: CALL_OW 380
// un := CreateHuman ;
33963: LD_ADDR_VAR 0 14
33967: PUSH
33968: CALL_OW 44
33972: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33973: LD_ADDR_VAR 0 7
33977: PUSH
33978: LD_VAR 0 7
33982: PPUSH
33983: LD_INT 1
33985: PPUSH
33986: LD_VAR 0 14
33990: PPUSH
33991: CALL_OW 2
33995: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33996: LD_VAR 0 14
34000: PPUSH
34001: LD_VAR 0 12
34005: PUSH
34006: LD_INT 1
34008: ARRAY
34009: PPUSH
34010: CALL_OW 52
// end ;
34014: GO 33653
34016: POP
34017: POP
// end ;
34018: GO 32955
34020: POP
34021: POP
// result := result ^ buildings ;
34022: LD_ADDR_VAR 0 7
34026: PUSH
34027: LD_VAR 0 7
34031: PUSH
34032: LD_VAR 0 18
34036: ADD
34037: ST_TO_ADDR
// end else
34038: GO 34181
// begin for i = 1 to personel do
34040: LD_ADDR_VAR 0 8
34044: PUSH
34045: DOUBLE
34046: LD_INT 1
34048: DEC
34049: ST_TO_ADDR
34050: LD_VAR 0 6
34054: PUSH
34055: FOR_TO
34056: IFFALSE 34179
// begin if i > 4 then
34058: LD_VAR 0 8
34062: PUSH
34063: LD_INT 4
34065: GREATER
34066: IFFALSE 34070
// break ;
34068: GO 34179
// x := personel [ i ] ;
34070: LD_ADDR_VAR 0 13
34074: PUSH
34075: LD_VAR 0 6
34079: PUSH
34080: LD_VAR 0 8
34084: ARRAY
34085: ST_TO_ADDR
// if x = - 1 then
34086: LD_VAR 0 13
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: EQUAL
34095: IFFALSE 34099
// continue ;
34097: GO 34055
// PrepareHuman ( false , i , skill ) ;
34099: LD_INT 0
34101: PPUSH
34102: LD_VAR 0 8
34106: PPUSH
34107: LD_VAR 0 4
34111: PPUSH
34112: CALL_OW 380
// un := CreateHuman ;
34116: LD_ADDR_VAR 0 14
34120: PUSH
34121: CALL_OW 44
34125: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34126: LD_VAR 0 14
34130: PPUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: CALL_OW 250
34140: PPUSH
34141: LD_VAR 0 1
34145: PPUSH
34146: CALL_OW 251
34150: PPUSH
34151: LD_INT 10
34153: PPUSH
34154: LD_INT 0
34156: PPUSH
34157: CALL_OW 50
// result := result ^ un ;
34161: LD_ADDR_VAR 0 7
34165: PUSH
34166: LD_VAR 0 7
34170: PUSH
34171: LD_VAR 0 14
34175: ADD
34176: ST_TO_ADDR
// end ;
34177: GO 34055
34179: POP
34180: POP
// end ; end ;
34181: LD_VAR 0 7
34185: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34186: LD_INT 0
34188: PPUSH
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
// result := false ;
34204: LD_ADDR_VAR 0 3
34208: PUSH
34209: LD_INT 0
34211: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34212: LD_VAR 0 1
34216: NOT
34217: PUSH
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 266
34227: PUSH
34228: LD_INT 32
34230: PUSH
34231: LD_INT 33
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: IN
34238: NOT
34239: OR
34240: IFFALSE 34244
// exit ;
34242: GO 35353
// nat := GetNation ( tower ) ;
34244: LD_ADDR_VAR 0 12
34248: PUSH
34249: LD_VAR 0 1
34253: PPUSH
34254: CALL_OW 248
34258: ST_TO_ADDR
// side := GetSide ( tower ) ;
34259: LD_ADDR_VAR 0 16
34263: PUSH
34264: LD_VAR 0 1
34268: PPUSH
34269: CALL_OW 255
34273: ST_TO_ADDR
// x := GetX ( tower ) ;
34274: LD_ADDR_VAR 0 10
34278: PUSH
34279: LD_VAR 0 1
34283: PPUSH
34284: CALL_OW 250
34288: ST_TO_ADDR
// y := GetY ( tower ) ;
34289: LD_ADDR_VAR 0 11
34293: PUSH
34294: LD_VAR 0 1
34298: PPUSH
34299: CALL_OW 251
34303: ST_TO_ADDR
// if not x or not y then
34304: LD_VAR 0 10
34308: NOT
34309: PUSH
34310: LD_VAR 0 11
34314: NOT
34315: OR
34316: IFFALSE 34320
// exit ;
34318: GO 35353
// weapon := 0 ;
34320: LD_ADDR_VAR 0 18
34324: PUSH
34325: LD_INT 0
34327: ST_TO_ADDR
// fac_list := [ ] ;
34328: LD_ADDR_VAR 0 17
34332: PUSH
34333: EMPTY
34334: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34335: LD_ADDR_VAR 0 6
34339: PUSH
34340: LD_VAR 0 1
34344: PPUSH
34345: CALL_OW 274
34349: PPUSH
34350: LD_VAR 0 2
34354: PPUSH
34355: LD_INT 0
34357: PPUSH
34358: CALL 31924 0 3
34362: PPUSH
34363: LD_INT 30
34365: PUSH
34366: LD_INT 3
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PPUSH
34373: CALL_OW 72
34377: ST_TO_ADDR
// if not factories then
34378: LD_VAR 0 6
34382: NOT
34383: IFFALSE 34387
// exit ;
34385: GO 35353
// for i in factories do
34387: LD_ADDR_VAR 0 8
34391: PUSH
34392: LD_VAR 0 6
34396: PUSH
34397: FOR_IN
34398: IFFALSE 34423
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34400: LD_ADDR_VAR 0 17
34404: PUSH
34405: LD_VAR 0 17
34409: PUSH
34410: LD_VAR 0 8
34414: PPUSH
34415: CALL_OW 478
34419: UNION
34420: ST_TO_ADDR
34421: GO 34397
34423: POP
34424: POP
// if not fac_list then
34425: LD_VAR 0 17
34429: NOT
34430: IFFALSE 34434
// exit ;
34432: GO 35353
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34434: LD_ADDR_VAR 0 5
34438: PUSH
34439: LD_INT 4
34441: PUSH
34442: LD_INT 5
34444: PUSH
34445: LD_INT 9
34447: PUSH
34448: LD_INT 10
34450: PUSH
34451: LD_INT 6
34453: PUSH
34454: LD_INT 7
34456: PUSH
34457: LD_INT 11
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 27
34471: PUSH
34472: LD_INT 28
34474: PUSH
34475: LD_INT 26
34477: PUSH
34478: LD_INT 30
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 43
34489: PUSH
34490: LD_INT 44
34492: PUSH
34493: LD_INT 46
34495: PUSH
34496: LD_INT 45
34498: PUSH
34499: LD_INT 47
34501: PUSH
34502: LD_INT 49
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: PUSH
34518: LD_VAR 0 12
34522: ARRAY
34523: ST_TO_ADDR
// list := list isect fac_list ;
34524: LD_ADDR_VAR 0 5
34528: PUSH
34529: LD_VAR 0 5
34533: PUSH
34534: LD_VAR 0 17
34538: ISECT
34539: ST_TO_ADDR
// if not list then
34540: LD_VAR 0 5
34544: NOT
34545: IFFALSE 34549
// exit ;
34547: GO 35353
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34549: LD_VAR 0 12
34553: PUSH
34554: LD_INT 3
34556: EQUAL
34557: PUSH
34558: LD_INT 49
34560: PUSH
34561: LD_VAR 0 5
34565: IN
34566: AND
34567: PUSH
34568: LD_INT 31
34570: PPUSH
34571: LD_VAR 0 16
34575: PPUSH
34576: CALL_OW 321
34580: PUSH
34581: LD_INT 2
34583: EQUAL
34584: AND
34585: IFFALSE 34645
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34587: LD_INT 22
34589: PUSH
34590: LD_VAR 0 16
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 35
34601: PUSH
34602: LD_INT 49
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 91
34611: PUSH
34612: LD_VAR 0 1
34616: PUSH
34617: LD_INT 10
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: PPUSH
34630: CALL_OW 69
34634: NOT
34635: IFFALSE 34645
// weapon := ru_time_lapser ;
34637: LD_ADDR_VAR 0 18
34641: PUSH
34642: LD_INT 49
34644: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34645: LD_VAR 0 12
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: IN
34660: PUSH
34661: LD_INT 11
34663: PUSH
34664: LD_VAR 0 5
34668: IN
34669: PUSH
34670: LD_INT 30
34672: PUSH
34673: LD_VAR 0 5
34677: IN
34678: OR
34679: AND
34680: PUSH
34681: LD_INT 6
34683: PPUSH
34684: LD_VAR 0 16
34688: PPUSH
34689: CALL_OW 321
34693: PUSH
34694: LD_INT 2
34696: EQUAL
34697: AND
34698: IFFALSE 34863
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34700: LD_INT 22
34702: PUSH
34703: LD_VAR 0 16
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 2
34714: PUSH
34715: LD_INT 35
34717: PUSH
34718: LD_INT 11
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 35
34727: PUSH
34728: LD_INT 30
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 91
34742: PUSH
34743: LD_VAR 0 1
34747: PUSH
34748: LD_INT 18
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: PPUSH
34761: CALL_OW 69
34765: NOT
34766: PUSH
34767: LD_INT 22
34769: PUSH
34770: LD_VAR 0 16
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 30
34784: PUSH
34785: LD_INT 32
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 30
34794: PUSH
34795: LD_INT 33
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 91
34809: PUSH
34810: LD_VAR 0 1
34814: PUSH
34815: LD_INT 12
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: PUSH
34828: EMPTY
34829: LIST
34830: PPUSH
34831: CALL_OW 69
34835: PUSH
34836: LD_INT 2
34838: GREATER
34839: AND
34840: IFFALSE 34863
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34842: LD_ADDR_VAR 0 18
34846: PUSH
34847: LD_INT 11
34849: PUSH
34850: LD_INT 30
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_VAR 0 12
34861: ARRAY
34862: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34863: LD_VAR 0 18
34867: NOT
34868: PUSH
34869: LD_INT 40
34871: PPUSH
34872: LD_VAR 0 16
34876: PPUSH
34877: CALL_OW 321
34881: PUSH
34882: LD_INT 2
34884: EQUAL
34885: AND
34886: PUSH
34887: LD_INT 7
34889: PUSH
34890: LD_VAR 0 5
34894: IN
34895: PUSH
34896: LD_INT 28
34898: PUSH
34899: LD_VAR 0 5
34903: IN
34904: OR
34905: PUSH
34906: LD_INT 45
34908: PUSH
34909: LD_VAR 0 5
34913: IN
34914: OR
34915: AND
34916: IFFALSE 35170
// begin hex := GetHexInfo ( x , y ) ;
34918: LD_ADDR_VAR 0 4
34922: PUSH
34923: LD_VAR 0 10
34927: PPUSH
34928: LD_VAR 0 11
34932: PPUSH
34933: CALL_OW 546
34937: ST_TO_ADDR
// if hex [ 1 ] then
34938: LD_VAR 0 4
34942: PUSH
34943: LD_INT 1
34945: ARRAY
34946: IFFALSE 34950
// exit ;
34948: GO 35353
// height := hex [ 2 ] ;
34950: LD_ADDR_VAR 0 15
34954: PUSH
34955: LD_VAR 0 4
34959: PUSH
34960: LD_INT 2
34962: ARRAY
34963: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34964: LD_ADDR_VAR 0 14
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: LD_INT 3
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: ST_TO_ADDR
// for i in tmp do
34987: LD_ADDR_VAR 0 8
34991: PUSH
34992: LD_VAR 0 14
34996: PUSH
34997: FOR_IN
34998: IFFALSE 35168
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35000: LD_ADDR_VAR 0 9
35004: PUSH
35005: LD_VAR 0 10
35009: PPUSH
35010: LD_VAR 0 8
35014: PPUSH
35015: LD_INT 5
35017: PPUSH
35018: CALL_OW 272
35022: PUSH
35023: LD_VAR 0 11
35027: PPUSH
35028: LD_VAR 0 8
35032: PPUSH
35033: LD_INT 5
35035: PPUSH
35036: CALL_OW 273
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35045: LD_VAR 0 9
35049: PUSH
35050: LD_INT 1
35052: ARRAY
35053: PPUSH
35054: LD_VAR 0 9
35058: PUSH
35059: LD_INT 2
35061: ARRAY
35062: PPUSH
35063: CALL_OW 488
35067: IFFALSE 35166
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35069: LD_ADDR_VAR 0 4
35073: PUSH
35074: LD_VAR 0 9
35078: PUSH
35079: LD_INT 1
35081: ARRAY
35082: PPUSH
35083: LD_VAR 0 9
35087: PUSH
35088: LD_INT 2
35090: ARRAY
35091: PPUSH
35092: CALL_OW 546
35096: ST_TO_ADDR
// if hex [ 1 ] then
35097: LD_VAR 0 4
35101: PUSH
35102: LD_INT 1
35104: ARRAY
35105: IFFALSE 35109
// continue ;
35107: GO 34997
// h := hex [ 2 ] ;
35109: LD_ADDR_VAR 0 13
35113: PUSH
35114: LD_VAR 0 4
35118: PUSH
35119: LD_INT 2
35121: ARRAY
35122: ST_TO_ADDR
// if h + 7 < height then
35123: LD_VAR 0 13
35127: PUSH
35128: LD_INT 7
35130: PLUS
35131: PUSH
35132: LD_VAR 0 15
35136: LESS
35137: IFFALSE 35166
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35139: LD_ADDR_VAR 0 18
35143: PUSH
35144: LD_INT 7
35146: PUSH
35147: LD_INT 28
35149: PUSH
35150: LD_INT 45
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: PUSH
35158: LD_VAR 0 12
35162: ARRAY
35163: ST_TO_ADDR
// break ;
35164: GO 35168
// end ; end ; end ;
35166: GO 34997
35168: POP
35169: POP
// end ; if not weapon then
35170: LD_VAR 0 18
35174: NOT
35175: IFFALSE 35235
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35177: LD_ADDR_VAR 0 5
35181: PUSH
35182: LD_VAR 0 5
35186: PUSH
35187: LD_INT 11
35189: PUSH
35190: LD_INT 30
35192: PUSH
35193: LD_INT 49
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: DIFF
35201: ST_TO_ADDR
// if not list then
35202: LD_VAR 0 5
35206: NOT
35207: IFFALSE 35211
// exit ;
35209: GO 35353
// weapon := list [ rand ( 1 , list ) ] ;
35211: LD_ADDR_VAR 0 18
35215: PUSH
35216: LD_VAR 0 5
35220: PUSH
35221: LD_INT 1
35223: PPUSH
35224: LD_VAR 0 5
35228: PPUSH
35229: CALL_OW 12
35233: ARRAY
35234: ST_TO_ADDR
// end ; if weapon then
35235: LD_VAR 0 18
35239: IFFALSE 35353
// begin tmp := CostOfWeapon ( weapon ) ;
35241: LD_ADDR_VAR 0 14
35245: PUSH
35246: LD_VAR 0 18
35250: PPUSH
35251: CALL_OW 451
35255: ST_TO_ADDR
// j := GetBase ( tower ) ;
35256: LD_ADDR_VAR 0 9
35260: PUSH
35261: LD_VAR 0 1
35265: PPUSH
35266: CALL_OW 274
35270: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35271: LD_VAR 0 9
35275: PPUSH
35276: LD_INT 1
35278: PPUSH
35279: CALL_OW 275
35283: PUSH
35284: LD_VAR 0 14
35288: PUSH
35289: LD_INT 1
35291: ARRAY
35292: GREATEREQUAL
35293: PUSH
35294: LD_VAR 0 9
35298: PPUSH
35299: LD_INT 2
35301: PPUSH
35302: CALL_OW 275
35306: PUSH
35307: LD_VAR 0 14
35311: PUSH
35312: LD_INT 2
35314: ARRAY
35315: GREATEREQUAL
35316: AND
35317: PUSH
35318: LD_VAR 0 9
35322: PPUSH
35323: LD_INT 3
35325: PPUSH
35326: CALL_OW 275
35330: PUSH
35331: LD_VAR 0 14
35335: PUSH
35336: LD_INT 3
35338: ARRAY
35339: GREATEREQUAL
35340: AND
35341: IFFALSE 35353
// result := weapon ;
35343: LD_ADDR_VAR 0 3
35347: PUSH
35348: LD_VAR 0 18
35352: ST_TO_ADDR
// end ; end ;
35353: LD_VAR 0 3
35357: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35358: LD_INT 0
35360: PPUSH
35361: PPUSH
// result := true ;
35362: LD_ADDR_VAR 0 3
35366: PUSH
35367: LD_INT 1
35369: ST_TO_ADDR
// if array1 = array2 then
35370: LD_VAR 0 1
35374: PUSH
35375: LD_VAR 0 2
35379: EQUAL
35380: IFFALSE 35440
// begin for i = 1 to array1 do
35382: LD_ADDR_VAR 0 4
35386: PUSH
35387: DOUBLE
35388: LD_INT 1
35390: DEC
35391: ST_TO_ADDR
35392: LD_VAR 0 1
35396: PUSH
35397: FOR_TO
35398: IFFALSE 35436
// if array1 [ i ] <> array2 [ i ] then
35400: LD_VAR 0 1
35404: PUSH
35405: LD_VAR 0 4
35409: ARRAY
35410: PUSH
35411: LD_VAR 0 2
35415: PUSH
35416: LD_VAR 0 4
35420: ARRAY
35421: NONEQUAL
35422: IFFALSE 35434
// begin result := false ;
35424: LD_ADDR_VAR 0 3
35428: PUSH
35429: LD_INT 0
35431: ST_TO_ADDR
// break ;
35432: GO 35436
// end ;
35434: GO 35397
35436: POP
35437: POP
// end else
35438: GO 35448
// result := false ;
35440: LD_ADDR_VAR 0 3
35444: PUSH
35445: LD_INT 0
35447: ST_TO_ADDR
// end ;
35448: LD_VAR 0 3
35452: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35453: LD_INT 0
35455: PPUSH
35456: PPUSH
// if not array1 or not array2 then
35457: LD_VAR 0 1
35461: NOT
35462: PUSH
35463: LD_VAR 0 2
35467: NOT
35468: OR
35469: IFFALSE 35473
// exit ;
35471: GO 35537
// result := true ;
35473: LD_ADDR_VAR 0 3
35477: PUSH
35478: LD_INT 1
35480: ST_TO_ADDR
// for i = 1 to array1 do
35481: LD_ADDR_VAR 0 4
35485: PUSH
35486: DOUBLE
35487: LD_INT 1
35489: DEC
35490: ST_TO_ADDR
35491: LD_VAR 0 1
35495: PUSH
35496: FOR_TO
35497: IFFALSE 35535
// if array1 [ i ] <> array2 [ i ] then
35499: LD_VAR 0 1
35503: PUSH
35504: LD_VAR 0 4
35508: ARRAY
35509: PUSH
35510: LD_VAR 0 2
35514: PUSH
35515: LD_VAR 0 4
35519: ARRAY
35520: NONEQUAL
35521: IFFALSE 35533
// begin result := false ;
35523: LD_ADDR_VAR 0 3
35527: PUSH
35528: LD_INT 0
35530: ST_TO_ADDR
// break ;
35531: GO 35535
// end ;
35533: GO 35496
35535: POP
35536: POP
// end ;
35537: LD_VAR 0 3
35541: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35542: LD_INT 0
35544: PPUSH
35545: PPUSH
35546: PPUSH
// pom := GetBase ( fac ) ;
35547: LD_ADDR_VAR 0 5
35551: PUSH
35552: LD_VAR 0 1
35556: PPUSH
35557: CALL_OW 274
35561: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35562: LD_ADDR_VAR 0 4
35566: PUSH
35567: LD_VAR 0 2
35571: PUSH
35572: LD_INT 1
35574: ARRAY
35575: PPUSH
35576: LD_VAR 0 2
35580: PUSH
35581: LD_INT 2
35583: ARRAY
35584: PPUSH
35585: LD_VAR 0 2
35589: PUSH
35590: LD_INT 3
35592: ARRAY
35593: PPUSH
35594: LD_VAR 0 2
35598: PUSH
35599: LD_INT 4
35601: ARRAY
35602: PPUSH
35603: CALL_OW 449
35607: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35608: LD_ADDR_VAR 0 3
35612: PUSH
35613: LD_VAR 0 5
35617: PPUSH
35618: LD_INT 1
35620: PPUSH
35621: CALL_OW 275
35625: PUSH
35626: LD_VAR 0 4
35630: PUSH
35631: LD_INT 1
35633: ARRAY
35634: GREATEREQUAL
35635: PUSH
35636: LD_VAR 0 5
35640: PPUSH
35641: LD_INT 2
35643: PPUSH
35644: CALL_OW 275
35648: PUSH
35649: LD_VAR 0 4
35653: PUSH
35654: LD_INT 2
35656: ARRAY
35657: GREATEREQUAL
35658: AND
35659: PUSH
35660: LD_VAR 0 5
35664: PPUSH
35665: LD_INT 3
35667: PPUSH
35668: CALL_OW 275
35672: PUSH
35673: LD_VAR 0 4
35677: PUSH
35678: LD_INT 3
35680: ARRAY
35681: GREATEREQUAL
35682: AND
35683: ST_TO_ADDR
// end ;
35684: LD_VAR 0 3
35688: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35689: LD_INT 0
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
// pom := GetBase ( building ) ;
35695: LD_ADDR_VAR 0 3
35699: PUSH
35700: LD_VAR 0 1
35704: PPUSH
35705: CALL_OW 274
35709: ST_TO_ADDR
// if not pom then
35710: LD_VAR 0 3
35714: NOT
35715: IFFALSE 35719
// exit ;
35717: GO 35889
// btype := GetBType ( building ) ;
35719: LD_ADDR_VAR 0 5
35723: PUSH
35724: LD_VAR 0 1
35728: PPUSH
35729: CALL_OW 266
35733: ST_TO_ADDR
// if btype = b_armoury then
35734: LD_VAR 0 5
35738: PUSH
35739: LD_INT 4
35741: EQUAL
35742: IFFALSE 35752
// btype := b_barracks ;
35744: LD_ADDR_VAR 0 5
35748: PUSH
35749: LD_INT 5
35751: ST_TO_ADDR
// if btype = b_depot then
35752: LD_VAR 0 5
35756: PUSH
35757: LD_INT 0
35759: EQUAL
35760: IFFALSE 35770
// btype := b_warehouse ;
35762: LD_ADDR_VAR 0 5
35766: PUSH
35767: LD_INT 1
35769: ST_TO_ADDR
// if btype = b_workshop then
35770: LD_VAR 0 5
35774: PUSH
35775: LD_INT 2
35777: EQUAL
35778: IFFALSE 35788
// btype := b_factory ;
35780: LD_ADDR_VAR 0 5
35784: PUSH
35785: LD_INT 3
35787: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35788: LD_ADDR_VAR 0 4
35792: PUSH
35793: LD_VAR 0 5
35797: PPUSH
35798: LD_VAR 0 1
35802: PPUSH
35803: CALL_OW 248
35807: PPUSH
35808: CALL_OW 450
35812: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35813: LD_ADDR_VAR 0 2
35817: PUSH
35818: LD_VAR 0 3
35822: PPUSH
35823: LD_INT 1
35825: PPUSH
35826: CALL_OW 275
35830: PUSH
35831: LD_VAR 0 4
35835: PUSH
35836: LD_INT 1
35838: ARRAY
35839: GREATEREQUAL
35840: PUSH
35841: LD_VAR 0 3
35845: PPUSH
35846: LD_INT 2
35848: PPUSH
35849: CALL_OW 275
35853: PUSH
35854: LD_VAR 0 4
35858: PUSH
35859: LD_INT 2
35861: ARRAY
35862: GREATEREQUAL
35863: AND
35864: PUSH
35865: LD_VAR 0 3
35869: PPUSH
35870: LD_INT 3
35872: PPUSH
35873: CALL_OW 275
35877: PUSH
35878: LD_VAR 0 4
35882: PUSH
35883: LD_INT 3
35885: ARRAY
35886: GREATEREQUAL
35887: AND
35888: ST_TO_ADDR
// end ;
35889: LD_VAR 0 2
35893: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35894: LD_INT 0
35896: PPUSH
35897: PPUSH
35898: PPUSH
// pom := GetBase ( building ) ;
35899: LD_ADDR_VAR 0 4
35903: PUSH
35904: LD_VAR 0 1
35908: PPUSH
35909: CALL_OW 274
35913: ST_TO_ADDR
// if not pom then
35914: LD_VAR 0 4
35918: NOT
35919: IFFALSE 35923
// exit ;
35921: GO 36024
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35923: LD_ADDR_VAR 0 5
35927: PUSH
35928: LD_VAR 0 2
35932: PPUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 248
35942: PPUSH
35943: CALL_OW 450
35947: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35948: LD_ADDR_VAR 0 3
35952: PUSH
35953: LD_VAR 0 4
35957: PPUSH
35958: LD_INT 1
35960: PPUSH
35961: CALL_OW 275
35965: PUSH
35966: LD_VAR 0 5
35970: PUSH
35971: LD_INT 1
35973: ARRAY
35974: GREATEREQUAL
35975: PUSH
35976: LD_VAR 0 4
35980: PPUSH
35981: LD_INT 2
35983: PPUSH
35984: CALL_OW 275
35988: PUSH
35989: LD_VAR 0 5
35993: PUSH
35994: LD_INT 2
35996: ARRAY
35997: GREATEREQUAL
35998: AND
35999: PUSH
36000: LD_VAR 0 4
36004: PPUSH
36005: LD_INT 3
36007: PPUSH
36008: CALL_OW 275
36012: PUSH
36013: LD_VAR 0 5
36017: PUSH
36018: LD_INT 3
36020: ARRAY
36021: GREATEREQUAL
36022: AND
36023: ST_TO_ADDR
// end ;
36024: LD_VAR 0 3
36028: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36029: LD_INT 0
36031: PPUSH
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
// result := false ;
36042: LD_ADDR_VAR 0 8
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36050: LD_VAR 0 5
36054: NOT
36055: PUSH
36056: LD_VAR 0 1
36060: NOT
36061: OR
36062: PUSH
36063: LD_VAR 0 2
36067: NOT
36068: OR
36069: PUSH
36070: LD_VAR 0 3
36074: NOT
36075: OR
36076: IFFALSE 36080
// exit ;
36078: GO 36894
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36080: LD_ADDR_VAR 0 14
36084: PUSH
36085: LD_VAR 0 1
36089: PPUSH
36090: LD_VAR 0 2
36094: PPUSH
36095: LD_VAR 0 3
36099: PPUSH
36100: LD_VAR 0 4
36104: PPUSH
36105: LD_VAR 0 5
36109: PUSH
36110: LD_INT 1
36112: ARRAY
36113: PPUSH
36114: CALL_OW 248
36118: PPUSH
36119: LD_INT 0
36121: PPUSH
36122: CALL 38147 0 6
36126: ST_TO_ADDR
// if not hexes then
36127: LD_VAR 0 14
36131: NOT
36132: IFFALSE 36136
// exit ;
36134: GO 36894
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36136: LD_ADDR_VAR 0 17
36140: PUSH
36141: LD_VAR 0 5
36145: PPUSH
36146: LD_INT 22
36148: PUSH
36149: LD_VAR 0 13
36153: PPUSH
36154: CALL_OW 255
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: LD_INT 30
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 30
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PPUSH
36195: CALL_OW 72
36199: ST_TO_ADDR
// for i = 1 to hexes do
36200: LD_ADDR_VAR 0 9
36204: PUSH
36205: DOUBLE
36206: LD_INT 1
36208: DEC
36209: ST_TO_ADDR
36210: LD_VAR 0 14
36214: PUSH
36215: FOR_TO
36216: IFFALSE 36892
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36218: LD_ADDR_VAR 0 13
36222: PUSH
36223: LD_VAR 0 14
36227: PUSH
36228: LD_VAR 0 9
36232: ARRAY
36233: PUSH
36234: LD_INT 1
36236: ARRAY
36237: PPUSH
36238: LD_VAR 0 14
36242: PUSH
36243: LD_VAR 0 9
36247: ARRAY
36248: PUSH
36249: LD_INT 2
36251: ARRAY
36252: PPUSH
36253: CALL_OW 428
36257: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36258: LD_VAR 0 14
36262: PUSH
36263: LD_VAR 0 9
36267: ARRAY
36268: PUSH
36269: LD_INT 1
36271: ARRAY
36272: PPUSH
36273: LD_VAR 0 14
36277: PUSH
36278: LD_VAR 0 9
36282: ARRAY
36283: PUSH
36284: LD_INT 2
36286: ARRAY
36287: PPUSH
36288: CALL_OW 351
36292: PUSH
36293: LD_VAR 0 14
36297: PUSH
36298: LD_VAR 0 9
36302: ARRAY
36303: PUSH
36304: LD_INT 1
36306: ARRAY
36307: PPUSH
36308: LD_VAR 0 14
36312: PUSH
36313: LD_VAR 0 9
36317: ARRAY
36318: PUSH
36319: LD_INT 2
36321: ARRAY
36322: PPUSH
36323: CALL_OW 488
36327: NOT
36328: OR
36329: PUSH
36330: LD_VAR 0 13
36334: PPUSH
36335: CALL_OW 247
36339: PUSH
36340: LD_INT 3
36342: EQUAL
36343: OR
36344: IFFALSE 36350
// exit ;
36346: POP
36347: POP
36348: GO 36894
// if not tmp then
36350: LD_VAR 0 13
36354: NOT
36355: IFFALSE 36359
// continue ;
36357: GO 36215
// result := true ;
36359: LD_ADDR_VAR 0 8
36363: PUSH
36364: LD_INT 1
36366: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36367: LD_VAR 0 6
36371: PUSH
36372: LD_VAR 0 13
36376: PPUSH
36377: CALL_OW 247
36381: PUSH
36382: LD_INT 2
36384: EQUAL
36385: AND
36386: PUSH
36387: LD_VAR 0 13
36391: PPUSH
36392: CALL_OW 263
36396: PUSH
36397: LD_INT 1
36399: EQUAL
36400: AND
36401: IFFALSE 36565
// begin if IsDrivenBy ( tmp ) then
36403: LD_VAR 0 13
36407: PPUSH
36408: CALL_OW 311
36412: IFFALSE 36416
// continue ;
36414: GO 36215
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36416: LD_VAR 0 6
36420: PPUSH
36421: LD_INT 3
36423: PUSH
36424: LD_INT 60
36426: PUSH
36427: EMPTY
36428: LIST
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 3
36436: PUSH
36437: LD_INT 55
36439: PUSH
36440: EMPTY
36441: LIST
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PPUSH
36451: CALL_OW 72
36455: IFFALSE 36563
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36457: LD_ADDR_VAR 0 18
36461: PUSH
36462: LD_VAR 0 6
36466: PPUSH
36467: LD_INT 3
36469: PUSH
36470: LD_INT 60
36472: PUSH
36473: EMPTY
36474: LIST
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 3
36482: PUSH
36483: LD_INT 55
36485: PUSH
36486: EMPTY
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PPUSH
36497: CALL_OW 72
36501: PUSH
36502: LD_INT 1
36504: ARRAY
36505: ST_TO_ADDR
// if IsInUnit ( driver ) then
36506: LD_VAR 0 18
36510: PPUSH
36511: CALL_OW 310
36515: IFFALSE 36526
// ComExit ( driver ) ;
36517: LD_VAR 0 18
36521: PPUSH
36522: CALL 61926 0 1
// AddComEnterUnit ( driver , tmp ) ;
36526: LD_VAR 0 18
36530: PPUSH
36531: LD_VAR 0 13
36535: PPUSH
36536: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36540: LD_VAR 0 18
36544: PPUSH
36545: LD_VAR 0 7
36549: PPUSH
36550: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36554: LD_VAR 0 18
36558: PPUSH
36559: CALL_OW 181
// end ; continue ;
36563: GO 36215
// end ; if not cleaners or not tmp in cleaners then
36565: LD_VAR 0 6
36569: NOT
36570: PUSH
36571: LD_VAR 0 13
36575: PUSH
36576: LD_VAR 0 6
36580: IN
36581: NOT
36582: OR
36583: IFFALSE 36890
// begin if dep then
36585: LD_VAR 0 17
36589: IFFALSE 36725
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36591: LD_ADDR_VAR 0 16
36595: PUSH
36596: LD_VAR 0 17
36600: PUSH
36601: LD_INT 1
36603: ARRAY
36604: PPUSH
36605: CALL_OW 250
36609: PPUSH
36610: LD_VAR 0 17
36614: PUSH
36615: LD_INT 1
36617: ARRAY
36618: PPUSH
36619: CALL_OW 254
36623: PPUSH
36624: LD_INT 5
36626: PPUSH
36627: CALL_OW 272
36631: PUSH
36632: LD_VAR 0 17
36636: PUSH
36637: LD_INT 1
36639: ARRAY
36640: PPUSH
36641: CALL_OW 251
36645: PPUSH
36646: LD_VAR 0 17
36650: PUSH
36651: LD_INT 1
36653: ARRAY
36654: PPUSH
36655: CALL_OW 254
36659: PPUSH
36660: LD_INT 5
36662: PPUSH
36663: CALL_OW 273
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36672: LD_VAR 0 16
36676: PUSH
36677: LD_INT 1
36679: ARRAY
36680: PPUSH
36681: LD_VAR 0 16
36685: PUSH
36686: LD_INT 2
36688: ARRAY
36689: PPUSH
36690: CALL_OW 488
36694: IFFALSE 36725
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36696: LD_VAR 0 13
36700: PPUSH
36701: LD_VAR 0 16
36705: PUSH
36706: LD_INT 1
36708: ARRAY
36709: PPUSH
36710: LD_VAR 0 16
36714: PUSH
36715: LD_INT 2
36717: ARRAY
36718: PPUSH
36719: CALL_OW 111
// continue ;
36723: GO 36215
// end ; end ; r := GetDir ( tmp ) ;
36725: LD_ADDR_VAR 0 15
36729: PUSH
36730: LD_VAR 0 13
36734: PPUSH
36735: CALL_OW 254
36739: ST_TO_ADDR
// if r = 5 then
36740: LD_VAR 0 15
36744: PUSH
36745: LD_INT 5
36747: EQUAL
36748: IFFALSE 36758
// r := 0 ;
36750: LD_ADDR_VAR 0 15
36754: PUSH
36755: LD_INT 0
36757: ST_TO_ADDR
// for j = r to 5 do
36758: LD_ADDR_VAR 0 10
36762: PUSH
36763: DOUBLE
36764: LD_VAR 0 15
36768: DEC
36769: ST_TO_ADDR
36770: LD_INT 5
36772: PUSH
36773: FOR_TO
36774: IFFALSE 36888
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36776: LD_ADDR_VAR 0 11
36780: PUSH
36781: LD_VAR 0 13
36785: PPUSH
36786: CALL_OW 250
36790: PPUSH
36791: LD_VAR 0 10
36795: PPUSH
36796: LD_INT 2
36798: PPUSH
36799: CALL_OW 272
36803: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36804: LD_ADDR_VAR 0 12
36808: PUSH
36809: LD_VAR 0 13
36813: PPUSH
36814: CALL_OW 251
36818: PPUSH
36819: LD_VAR 0 10
36823: PPUSH
36824: LD_INT 2
36826: PPUSH
36827: CALL_OW 273
36831: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36832: LD_VAR 0 11
36836: PPUSH
36837: LD_VAR 0 12
36841: PPUSH
36842: CALL_OW 488
36846: PUSH
36847: LD_VAR 0 11
36851: PPUSH
36852: LD_VAR 0 12
36856: PPUSH
36857: CALL_OW 428
36861: NOT
36862: AND
36863: IFFALSE 36886
// begin ComMoveXY ( tmp , _x , _y ) ;
36865: LD_VAR 0 13
36869: PPUSH
36870: LD_VAR 0 11
36874: PPUSH
36875: LD_VAR 0 12
36879: PPUSH
36880: CALL_OW 111
// break ;
36884: GO 36888
// end ; end ;
36886: GO 36773
36888: POP
36889: POP
// end ; end ;
36890: GO 36215
36892: POP
36893: POP
// end ;
36894: LD_VAR 0 8
36898: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36899: LD_INT 0
36901: PPUSH
// result := true ;
36902: LD_ADDR_VAR 0 3
36906: PUSH
36907: LD_INT 1
36909: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36910: LD_VAR 0 2
36914: PUSH
36915: LD_INT 24
36917: DOUBLE
36918: EQUAL
36919: IFTRUE 36929
36921: LD_INT 33
36923: DOUBLE
36924: EQUAL
36925: IFTRUE 36929
36927: GO 36954
36929: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36930: LD_ADDR_VAR 0 3
36934: PUSH
36935: LD_INT 32
36937: PPUSH
36938: LD_VAR 0 1
36942: PPUSH
36943: CALL_OW 321
36947: PUSH
36948: LD_INT 2
36950: EQUAL
36951: ST_TO_ADDR
36952: GO 37270
36954: LD_INT 20
36956: DOUBLE
36957: EQUAL
36958: IFTRUE 36962
36960: GO 36987
36962: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36963: LD_ADDR_VAR 0 3
36967: PUSH
36968: LD_INT 6
36970: PPUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 321
36980: PUSH
36981: LD_INT 2
36983: EQUAL
36984: ST_TO_ADDR
36985: GO 37270
36987: LD_INT 22
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 37001
36993: LD_INT 36
36995: DOUBLE
36996: EQUAL
36997: IFTRUE 37001
36999: GO 37026
37001: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37002: LD_ADDR_VAR 0 3
37006: PUSH
37007: LD_INT 15
37009: PPUSH
37010: LD_VAR 0 1
37014: PPUSH
37015: CALL_OW 321
37019: PUSH
37020: LD_INT 2
37022: EQUAL
37023: ST_TO_ADDR
37024: GO 37270
37026: LD_INT 30
37028: DOUBLE
37029: EQUAL
37030: IFTRUE 37034
37032: GO 37059
37034: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37035: LD_ADDR_VAR 0 3
37039: PUSH
37040: LD_INT 20
37042: PPUSH
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL_OW 321
37052: PUSH
37053: LD_INT 2
37055: EQUAL
37056: ST_TO_ADDR
37057: GO 37270
37059: LD_INT 28
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37073
37065: LD_INT 21
37067: DOUBLE
37068: EQUAL
37069: IFTRUE 37073
37071: GO 37098
37073: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37074: LD_ADDR_VAR 0 3
37078: PUSH
37079: LD_INT 21
37081: PPUSH
37082: LD_VAR 0 1
37086: PPUSH
37087: CALL_OW 321
37091: PUSH
37092: LD_INT 2
37094: EQUAL
37095: ST_TO_ADDR
37096: GO 37270
37098: LD_INT 16
37100: DOUBLE
37101: EQUAL
37102: IFTRUE 37106
37104: GO 37131
37106: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37107: LD_ADDR_VAR 0 3
37111: PUSH
37112: LD_INT 84
37114: PPUSH
37115: LD_VAR 0 1
37119: PPUSH
37120: CALL_OW 321
37124: PUSH
37125: LD_INT 2
37127: EQUAL
37128: ST_TO_ADDR
37129: GO 37270
37131: LD_INT 19
37133: DOUBLE
37134: EQUAL
37135: IFTRUE 37145
37137: LD_INT 23
37139: DOUBLE
37140: EQUAL
37141: IFTRUE 37145
37143: GO 37170
37145: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37146: LD_ADDR_VAR 0 3
37150: PUSH
37151: LD_INT 83
37153: PPUSH
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL_OW 321
37163: PUSH
37164: LD_INT 2
37166: EQUAL
37167: ST_TO_ADDR
37168: GO 37270
37170: LD_INT 17
37172: DOUBLE
37173: EQUAL
37174: IFTRUE 37178
37176: GO 37203
37178: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37179: LD_ADDR_VAR 0 3
37183: PUSH
37184: LD_INT 39
37186: PPUSH
37187: LD_VAR 0 1
37191: PPUSH
37192: CALL_OW 321
37196: PUSH
37197: LD_INT 2
37199: EQUAL
37200: ST_TO_ADDR
37201: GO 37270
37203: LD_INT 18
37205: DOUBLE
37206: EQUAL
37207: IFTRUE 37211
37209: GO 37236
37211: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37212: LD_ADDR_VAR 0 3
37216: PUSH
37217: LD_INT 40
37219: PPUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 321
37229: PUSH
37230: LD_INT 2
37232: EQUAL
37233: ST_TO_ADDR
37234: GO 37270
37236: LD_INT 27
37238: DOUBLE
37239: EQUAL
37240: IFTRUE 37244
37242: GO 37269
37244: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_INT 35
37252: PPUSH
37253: LD_VAR 0 1
37257: PPUSH
37258: CALL_OW 321
37262: PUSH
37263: LD_INT 2
37265: EQUAL
37266: ST_TO_ADDR
37267: GO 37270
37269: POP
// end ;
37270: LD_VAR 0 3
37274: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37275: LD_INT 0
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
37287: PPUSH
// result := false ;
37288: LD_ADDR_VAR 0 6
37292: PUSH
37293: LD_INT 0
37295: ST_TO_ADDR
// if btype = b_depot then
37296: LD_VAR 0 2
37300: PUSH
37301: LD_INT 0
37303: EQUAL
37304: IFFALSE 37316
// begin result := true ;
37306: LD_ADDR_VAR 0 6
37310: PUSH
37311: LD_INT 1
37313: ST_TO_ADDR
// exit ;
37314: GO 38142
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37316: LD_VAR 0 1
37320: NOT
37321: PUSH
37322: LD_VAR 0 1
37326: PPUSH
37327: CALL_OW 266
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: IN
37342: NOT
37343: OR
37344: PUSH
37345: LD_VAR 0 2
37349: NOT
37350: OR
37351: PUSH
37352: LD_VAR 0 5
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: LD_INT 2
37365: PUSH
37366: LD_INT 3
37368: PUSH
37369: LD_INT 4
37371: PUSH
37372: LD_INT 5
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: IN
37383: NOT
37384: OR
37385: PUSH
37386: LD_VAR 0 3
37390: PPUSH
37391: LD_VAR 0 4
37395: PPUSH
37396: CALL_OW 488
37400: NOT
37401: OR
37402: IFFALSE 37406
// exit ;
37404: GO 38142
// side := GetSide ( depot ) ;
37406: LD_ADDR_VAR 0 9
37410: PUSH
37411: LD_VAR 0 1
37415: PPUSH
37416: CALL_OW 255
37420: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37421: LD_VAR 0 9
37425: PPUSH
37426: LD_VAR 0 2
37430: PPUSH
37431: CALL 36899 0 2
37435: NOT
37436: IFFALSE 37440
// exit ;
37438: GO 38142
// pom := GetBase ( depot ) ;
37440: LD_ADDR_VAR 0 10
37444: PUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 274
37454: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37455: LD_ADDR_VAR 0 11
37459: PUSH
37460: LD_VAR 0 2
37464: PPUSH
37465: LD_VAR 0 1
37469: PPUSH
37470: CALL_OW 248
37474: PPUSH
37475: CALL_OW 450
37479: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37480: LD_VAR 0 10
37484: PPUSH
37485: LD_INT 1
37487: PPUSH
37488: CALL_OW 275
37492: PUSH
37493: LD_VAR 0 11
37497: PUSH
37498: LD_INT 1
37500: ARRAY
37501: GREATEREQUAL
37502: PUSH
37503: LD_VAR 0 10
37507: PPUSH
37508: LD_INT 2
37510: PPUSH
37511: CALL_OW 275
37515: PUSH
37516: LD_VAR 0 11
37520: PUSH
37521: LD_INT 2
37523: ARRAY
37524: GREATEREQUAL
37525: AND
37526: PUSH
37527: LD_VAR 0 10
37531: PPUSH
37532: LD_INT 3
37534: PPUSH
37535: CALL_OW 275
37539: PUSH
37540: LD_VAR 0 11
37544: PUSH
37545: LD_INT 3
37547: ARRAY
37548: GREATEREQUAL
37549: AND
37550: NOT
37551: IFFALSE 37555
// exit ;
37553: GO 38142
// if GetBType ( depot ) = b_depot then
37555: LD_VAR 0 1
37559: PPUSH
37560: CALL_OW 266
37564: PUSH
37565: LD_INT 0
37567: EQUAL
37568: IFFALSE 37580
// dist := 28 else
37570: LD_ADDR_VAR 0 14
37574: PUSH
37575: LD_INT 28
37577: ST_TO_ADDR
37578: GO 37588
// dist := 36 ;
37580: LD_ADDR_VAR 0 14
37584: PUSH
37585: LD_INT 36
37587: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37588: LD_VAR 0 1
37592: PPUSH
37593: LD_VAR 0 3
37597: PPUSH
37598: LD_VAR 0 4
37602: PPUSH
37603: CALL_OW 297
37607: PUSH
37608: LD_VAR 0 14
37612: GREATER
37613: IFFALSE 37617
// exit ;
37615: GO 38142
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37617: LD_ADDR_VAR 0 12
37621: PUSH
37622: LD_VAR 0 2
37626: PPUSH
37627: LD_VAR 0 3
37631: PPUSH
37632: LD_VAR 0 4
37636: PPUSH
37637: LD_VAR 0 5
37641: PPUSH
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 248
37651: PPUSH
37652: LD_INT 0
37654: PPUSH
37655: CALL 38147 0 6
37659: ST_TO_ADDR
// if not hexes then
37660: LD_VAR 0 12
37664: NOT
37665: IFFALSE 37669
// exit ;
37667: GO 38142
// hex := GetHexInfo ( x , y ) ;
37669: LD_ADDR_VAR 0 15
37673: PUSH
37674: LD_VAR 0 3
37678: PPUSH
37679: LD_VAR 0 4
37683: PPUSH
37684: CALL_OW 546
37688: ST_TO_ADDR
// if hex [ 1 ] then
37689: LD_VAR 0 15
37693: PUSH
37694: LD_INT 1
37696: ARRAY
37697: IFFALSE 37701
// exit ;
37699: GO 38142
// height := hex [ 2 ] ;
37701: LD_ADDR_VAR 0 13
37705: PUSH
37706: LD_VAR 0 15
37710: PUSH
37711: LD_INT 2
37713: ARRAY
37714: ST_TO_ADDR
// for i = 1 to hexes do
37715: LD_ADDR_VAR 0 7
37719: PUSH
37720: DOUBLE
37721: LD_INT 1
37723: DEC
37724: ST_TO_ADDR
37725: LD_VAR 0 12
37729: PUSH
37730: FOR_TO
37731: IFFALSE 38061
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37733: LD_VAR 0 12
37737: PUSH
37738: LD_VAR 0 7
37742: ARRAY
37743: PUSH
37744: LD_INT 1
37746: ARRAY
37747: PPUSH
37748: LD_VAR 0 12
37752: PUSH
37753: LD_VAR 0 7
37757: ARRAY
37758: PUSH
37759: LD_INT 2
37761: ARRAY
37762: PPUSH
37763: CALL_OW 488
37767: NOT
37768: PUSH
37769: LD_VAR 0 12
37773: PUSH
37774: LD_VAR 0 7
37778: ARRAY
37779: PUSH
37780: LD_INT 1
37782: ARRAY
37783: PPUSH
37784: LD_VAR 0 12
37788: PUSH
37789: LD_VAR 0 7
37793: ARRAY
37794: PUSH
37795: LD_INT 2
37797: ARRAY
37798: PPUSH
37799: CALL_OW 428
37803: PUSH
37804: LD_INT 0
37806: GREATER
37807: OR
37808: PUSH
37809: LD_VAR 0 12
37813: PUSH
37814: LD_VAR 0 7
37818: ARRAY
37819: PUSH
37820: LD_INT 1
37822: ARRAY
37823: PPUSH
37824: LD_VAR 0 12
37828: PUSH
37829: LD_VAR 0 7
37833: ARRAY
37834: PUSH
37835: LD_INT 2
37837: ARRAY
37838: PPUSH
37839: CALL_OW 351
37843: OR
37844: IFFALSE 37850
// exit ;
37846: POP
37847: POP
37848: GO 38142
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37850: LD_ADDR_VAR 0 8
37854: PUSH
37855: LD_VAR 0 12
37859: PUSH
37860: LD_VAR 0 7
37864: ARRAY
37865: PUSH
37866: LD_INT 1
37868: ARRAY
37869: PPUSH
37870: LD_VAR 0 12
37874: PUSH
37875: LD_VAR 0 7
37879: ARRAY
37880: PUSH
37881: LD_INT 2
37883: ARRAY
37884: PPUSH
37885: CALL_OW 546
37889: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37890: LD_VAR 0 8
37894: PUSH
37895: LD_INT 1
37897: ARRAY
37898: PUSH
37899: LD_VAR 0 8
37903: PUSH
37904: LD_INT 2
37906: ARRAY
37907: PUSH
37908: LD_VAR 0 13
37912: PUSH
37913: LD_INT 2
37915: PLUS
37916: GREATER
37917: OR
37918: PUSH
37919: LD_VAR 0 8
37923: PUSH
37924: LD_INT 2
37926: ARRAY
37927: PUSH
37928: LD_VAR 0 13
37932: PUSH
37933: LD_INT 2
37935: MINUS
37936: LESS
37937: OR
37938: PUSH
37939: LD_VAR 0 8
37943: PUSH
37944: LD_INT 3
37946: ARRAY
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: LD_INT 8
37953: PUSH
37954: LD_INT 9
37956: PUSH
37957: LD_INT 10
37959: PUSH
37960: LD_INT 11
37962: PUSH
37963: LD_INT 12
37965: PUSH
37966: LD_INT 13
37968: PUSH
37969: LD_INT 16
37971: PUSH
37972: LD_INT 17
37974: PUSH
37975: LD_INT 18
37977: PUSH
37978: LD_INT 19
37980: PUSH
37981: LD_INT 20
37983: PUSH
37984: LD_INT 21
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: IN
38002: NOT
38003: OR
38004: PUSH
38005: LD_VAR 0 8
38009: PUSH
38010: LD_INT 5
38012: ARRAY
38013: NOT
38014: OR
38015: PUSH
38016: LD_VAR 0 8
38020: PUSH
38021: LD_INT 6
38023: ARRAY
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: LD_INT 7
38033: PUSH
38034: LD_INT 9
38036: PUSH
38037: LD_INT 10
38039: PUSH
38040: LD_INT 11
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: IN
38051: NOT
38052: OR
38053: IFFALSE 38059
// exit ;
38055: POP
38056: POP
38057: GO 38142
// end ;
38059: GO 37730
38061: POP
38062: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38063: LD_VAR 0 9
38067: PPUSH
38068: LD_VAR 0 3
38072: PPUSH
38073: LD_VAR 0 4
38077: PPUSH
38078: LD_INT 20
38080: PPUSH
38081: CALL 30065 0 4
38085: PUSH
38086: LD_INT 4
38088: ARRAY
38089: IFFALSE 38093
// exit ;
38091: GO 38142
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38093: LD_VAR 0 2
38097: PUSH
38098: LD_INT 29
38100: PUSH
38101: LD_INT 30
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: IN
38108: PUSH
38109: LD_VAR 0 3
38113: PPUSH
38114: LD_VAR 0 4
38118: PPUSH
38119: LD_VAR 0 9
38123: PPUSH
38124: CALL_OW 440
38128: NOT
38129: AND
38130: IFFALSE 38134
// exit ;
38132: GO 38142
// result := true ;
38134: LD_ADDR_VAR 0 6
38138: PUSH
38139: LD_INT 1
38141: ST_TO_ADDR
// end ;
38142: LD_VAR 0 6
38146: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38147: LD_INT 0
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
38157: PPUSH
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
38168: PPUSH
38169: PPUSH
38170: PPUSH
38171: PPUSH
38172: PPUSH
38173: PPUSH
38174: PPUSH
38175: PPUSH
38176: PPUSH
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
38181: PPUSH
38182: PPUSH
38183: PPUSH
38184: PPUSH
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
38203: PPUSH
38204: PPUSH
38205: PPUSH
38206: PPUSH
// result = [ ] ;
38207: LD_ADDR_VAR 0 7
38211: PUSH
38212: EMPTY
38213: ST_TO_ADDR
// temp_list = [ ] ;
38214: LD_ADDR_VAR 0 9
38218: PUSH
38219: EMPTY
38220: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38221: LD_VAR 0 4
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: LD_INT 4
38240: PUSH
38241: LD_INT 5
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: IN
38252: NOT
38253: PUSH
38254: LD_VAR 0 1
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: IN
38269: PUSH
38270: LD_VAR 0 5
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 3
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: IN
38289: NOT
38290: AND
38291: OR
38292: IFFALSE 38296
// exit ;
38294: GO 56687
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38296: LD_VAR 0 1
38300: PUSH
38301: LD_INT 6
38303: PUSH
38304: LD_INT 7
38306: PUSH
38307: LD_INT 8
38309: PUSH
38310: LD_INT 13
38312: PUSH
38313: LD_INT 12
38315: PUSH
38316: LD_INT 15
38318: PUSH
38319: LD_INT 11
38321: PUSH
38322: LD_INT 14
38324: PUSH
38325: LD_INT 10
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: IN
38339: IFFALSE 38349
// btype = b_lab ;
38341: LD_ADDR_VAR 0 1
38345: PUSH
38346: LD_INT 6
38348: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38349: LD_VAR 0 6
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: IN
38368: NOT
38369: PUSH
38370: LD_VAR 0 1
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: LD_INT 6
38389: PUSH
38390: LD_INT 36
38392: PUSH
38393: LD_INT 4
38395: PUSH
38396: LD_INT 5
38398: PUSH
38399: LD_INT 31
38401: PUSH
38402: LD_INT 32
38404: PUSH
38405: LD_INT 33
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: IN
38421: NOT
38422: PUSH
38423: LD_VAR 0 6
38427: PUSH
38428: LD_INT 1
38430: EQUAL
38431: AND
38432: OR
38433: PUSH
38434: LD_VAR 0 1
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: IN
38449: NOT
38450: PUSH
38451: LD_VAR 0 6
38455: PUSH
38456: LD_INT 2
38458: EQUAL
38459: AND
38460: OR
38461: IFFALSE 38471
// mode = 0 ;
38463: LD_ADDR_VAR 0 6
38467: PUSH
38468: LD_INT 0
38470: ST_TO_ADDR
// case mode of 0 :
38471: LD_VAR 0 6
38475: PUSH
38476: LD_INT 0
38478: DOUBLE
38479: EQUAL
38480: IFTRUE 38484
38482: GO 49937
38484: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38485: LD_ADDR_VAR 0 11
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38678: LD_ADDR_VAR 0 12
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: NEG
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 3
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38874: LD_ADDR_VAR 0 13
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: LD_INT 3
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: NEG
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 3
39045: NEG
39046: PUSH
39047: LD_INT 3
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39073: LD_ADDR_VAR 0 14
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 3
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39269: LD_ADDR_VAR 0 15
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39462: LD_ADDR_VAR 0 16
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: NEG
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 3
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 3
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 3
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39655: LD_ADDR_VAR 0 17
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39885: LD_ADDR_VAR 0 18
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40115: LD_ADDR_VAR 0 19
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40345: LD_ADDR_VAR 0 20
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40575: LD_ADDR_VAR 0 21
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 2
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40805: LD_ADDR_VAR 0 22
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 2
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 2
41004: NEG
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41035: LD_ADDR_VAR 0 23
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: LD_INT 3
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 3
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41315: LD_ADDR_VAR 0 24
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 2
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 3
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41591: LD_ADDR_VAR 0 25
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 3
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: LD_INT 3
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41865: LD_ADDR_VAR 0 26
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 2
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 3
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42141: LD_ADDR_VAR 0 27
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 3
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 3
42386: NEG
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42421: LD_ADDR_VAR 0 28
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: LD_INT 3
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 3
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42703: LD_ADDR_VAR 0 29
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 3
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 3
42947: NEG
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42982: LD_ADDR_VAR 0 30
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: LD_INT 3
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43260: LD_ADDR_VAR 0 31
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: LD_INT 3
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 3
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: NEG
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43538: LD_ADDR_VAR 0 32
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 3
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 3
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: LD_INT 3
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 3
43781: NEG
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43816: LD_ADDR_VAR 0 33
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 3
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 3
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 3
44060: NEG
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44095: LD_ADDR_VAR 0 34
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: LD_INT 3
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 3
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 3
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44375: LD_ADDR_VAR 0 35
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44487: LD_ADDR_VAR 0 36
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44599: LD_ADDR_VAR 0 37
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44711: LD_ADDR_VAR 0 38
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44823: LD_ADDR_VAR 0 39
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44935: LD_ADDR_VAR 0 40
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45047: LD_ADDR_VAR 0 41
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 3
45290: PUSH
45291: LD_INT 3
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: LD_INT 3
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 3
45321: NEG
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 3
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 3
45344: NEG
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 3
45356: NEG
45357: PUSH
45358: LD_INT 3
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45397: LD_ADDR_VAR 0 42
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 3
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 3
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 3
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 3
45643: PUSH
45644: LD_INT 3
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 3
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: NEG
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: LD_INT 3
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45747: LD_ADDR_VAR 0 43
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 3
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 3
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 3
46043: NEG
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46095: LD_ADDR_VAR 0 44
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: LD_INT 3
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: LD_INT 3
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: NEG
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 3
46404: NEG
46405: PUSH
46406: LD_INT 3
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46445: LD_ADDR_VAR 0 45
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 3
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: LD_INT 3
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46795: LD_ADDR_VAR 0 46
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 3
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 3
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 3
47091: NEG
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47143: LD_ADDR_VAR 0 47
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47294: LD_ADDR_VAR 0 48
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 2
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47441: LD_ADDR_VAR 0 49
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47585: LD_ADDR_VAR 0 50
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47729: LD_ADDR_VAR 0 51
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47876: LD_ADDR_VAR 0 52
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48027: LD_ADDR_VAR 0 53
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48257: LD_ADDR_VAR 0 54
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48487: LD_ADDR_VAR 0 55
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48717: LD_ADDR_VAR 0 56
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48947: LD_ADDR_VAR 0 57
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49177: LD_ADDR_VAR 0 58
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49407: LD_ADDR_VAR 0 59
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49495: LD_ADDR_VAR 0 60
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49583: LD_ADDR_VAR 0 61
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49671: LD_ADDR_VAR 0 62
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49759: LD_ADDR_VAR 0 63
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49847: LD_ADDR_VAR 0 64
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// end ; 1 :
49935: GO 55832
49937: LD_INT 1
49939: DOUBLE
49940: EQUAL
49941: IFTRUE 49945
49943: GO 52568
49945: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49946: LD_ADDR_VAR 0 11
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 3
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: LIST
49989: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49990: LD_ADDR_VAR 0 12
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 3
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 3
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50031: LD_ADDR_VAR 0 13
50035: PUSH
50036: LD_INT 3
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 3
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50071: LD_ADDR_VAR 0 14
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 3
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 3
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50112: LD_ADDR_VAR 0 15
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 3
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 3
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50156: LD_ADDR_VAR 0 16
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: NEG
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: LD_INT 3
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50202: LD_ADDR_VAR 0 17
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 3
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 3
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50246: LD_ADDR_VAR 0 18
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 3
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 3
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50287: LD_ADDR_VAR 0 19
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: LIST
50326: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50327: LD_ADDR_VAR 0 20
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: LIST
50367: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50368: LD_ADDR_VAR 0 21
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50412: LD_ADDR_VAR 0 22
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 3
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50458: LD_ADDR_VAR 0 23
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: LD_INT 4
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50502: LD_ADDR_VAR 0 24
50506: PUSH
50507: LD_INT 3
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 4
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50543: LD_ADDR_VAR 0 25
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 4
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: LD_INT 4
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50583: LD_ADDR_VAR 0 26
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 4
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50624: LD_ADDR_VAR 0 27
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 4
50653: NEG
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50668: LD_ADDR_VAR 0 28
50672: PUSH
50673: LD_INT 3
50675: NEG
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 3
50687: NEG
50688: PUSH
50689: LD_INT 4
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 4
50699: NEG
50700: PUSH
50701: LD_INT 3
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50714: LD_ADDR_VAR 0 29
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 3
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 4
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 4
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 3
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 5
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 5
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 4
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 6
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 6
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 5
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50869: LD_ADDR_VAR 0 30
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 4
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 4
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 4
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 5
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 5
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 5
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 6
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 6
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51012: LD_ADDR_VAR 0 31
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 4
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 4
51059: PUSH
51060: LD_INT 4
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 3
51069: PUSH
51070: LD_INT 4
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 5
51079: PUSH
51080: LD_INT 4
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 5
51089: PUSH
51090: LD_INT 5
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 4
51099: PUSH
51100: LD_INT 5
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 6
51109: PUSH
51110: LD_INT 5
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 6
51119: PUSH
51120: LD_INT 6
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 5
51129: PUSH
51130: LD_INT 6
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51151: LD_ADDR_VAR 0 32
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 4
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 4
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 5
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 5
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 4
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 6
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 6
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 5
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51294: LD_ADDR_VAR 0 33
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 4
51346: NEG
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 4
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 4
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 5
51380: NEG
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 5
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 5
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 6
51414: NEG
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 6
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51449: LD_ADDR_VAR 0 34
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 3
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: LD_INT 3
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: LD_INT 4
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 4
51504: NEG
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 4
51516: NEG
51517: PUSH
51518: LD_INT 4
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 4
51528: NEG
51529: PUSH
51530: LD_INT 5
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 5
51540: NEG
51541: PUSH
51542: LD_INT 4
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 5
51552: NEG
51553: PUSH
51554: LD_INT 5
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 5
51564: NEG
51565: PUSH
51566: LD_INT 6
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 6
51576: NEG
51577: PUSH
51578: LD_INT 5
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 6
51588: NEG
51589: PUSH
51590: LD_INT 6
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51612: LD_ADDR_VAR 0 41
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51656: LD_ADDR_VAR 0 42
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51697: LD_ADDR_VAR 0 43
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51737: LD_ADDR_VAR 0 44
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 3
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51778: LD_ADDR_VAR 0 45
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51822: LD_ADDR_VAR 0 46
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 3
51853: NEG
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51868: LD_ADDR_VAR 0 47
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: LD_INT 3
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: LD_INT 3
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51901: LD_ADDR_VAR 0 48
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51932: LD_ADDR_VAR 0 49
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51961: LD_ADDR_VAR 0 50
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51990: LD_ADDR_VAR 0 51
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52021: LD_ADDR_VAR 0 52
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52054: LD_ADDR_VAR 0 53
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 3
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52098: LD_ADDR_VAR 0 54
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52139: LD_ADDR_VAR 0 55
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: LD_INT 3
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52179: LD_ADDR_VAR 0 56
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52220: LD_ADDR_VAR 0 57
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52264: LD_ADDR_VAR 0 58
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: LD_INT 2
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52310: LD_ADDR_VAR 0 59
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52354: LD_ADDR_VAR 0 60
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52395: LD_ADDR_VAR 0 61
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52435: LD_ADDR_VAR 0 62
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52476: LD_ADDR_VAR 0 63
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52520: LD_ADDR_VAR 0 64
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: LIST
52565: ST_TO_ADDR
// end ; 2 :
52566: GO 55832
52568: LD_INT 2
52570: DOUBLE
52571: EQUAL
52572: IFTRUE 52576
52574: GO 55831
52576: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52577: LD_ADDR_VAR 0 29
52581: PUSH
52582: LD_INT 4
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 4
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 5
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 5
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 4
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 3
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 5
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 4
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 4
52707: PUSH
52708: LD_INT 4
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 4
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 4
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 4
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 4
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 4
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 5
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 4
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: LD_INT 5
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 3
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 3
52860: NEG
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 3
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 4
52916: NEG
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 4
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 4
52939: NEG
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 4
52962: NEG
52963: PUSH
52964: LD_INT 4
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 4
52974: NEG
52975: PUSH
52976: LD_INT 5
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: LD_INT 4
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 4
53010: NEG
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 5
53022: NEG
53023: PUSH
53024: LD_INT 4
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 5
53034: NEG
53035: PUSH
53036: LD_INT 5
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 3
53046: NEG
53047: PUSH
53048: LD_INT 5
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 5
53058: NEG
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53115: LD_ADDR_VAR 0 30
53119: PUSH
53120: LD_INT 4
53122: PUSH
53123: LD_INT 4
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 4
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 5
53142: PUSH
53143: LD_INT 4
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 5
53152: PUSH
53153: LD_INT 5
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 4
53162: PUSH
53163: LD_INT 5
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 3
53172: PUSH
53173: LD_INT 4
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 3
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 5
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: LD_INT 5
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 3
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 4
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 4
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 4
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 4
53305: NEG
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 4
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: NEG
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 4
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 5
53361: NEG
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 5
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 5
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 3
53419: NEG
53420: PUSH
53421: LD_INT 4
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 4
53467: NEG
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 4
53479: NEG
53480: PUSH
53481: LD_INT 4
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 4
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 4
53503: NEG
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 5
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 4
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 3
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 4
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 5
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 5
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53662: LD_ADDR_VAR 0 31
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 4
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 4
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: LD_INT 5
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 5
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 4
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 5
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 4
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 4
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 4
53841: NEG
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 2
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 4
53864: NEG
53865: PUSH
53866: LD_INT 4
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 4
53876: NEG
53877: PUSH
53878: LD_INT 5
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 3
53888: NEG
53889: PUSH
53890: LD_INT 4
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 3
53900: NEG
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 4
53912: NEG
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 5
53924: NEG
53925: PUSH
53926: LD_INT 4
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 5
53936: NEG
53937: PUSH
53938: LD_INT 5
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 3
53948: NEG
53949: PUSH
53950: LD_INT 5
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 5
53960: NEG
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 4
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 4
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 4
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 4
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 5
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 5
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 4
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 5
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54212: LD_ADDR_VAR 0 32
54216: PUSH
54217: LD_INT 4
54219: NEG
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 4
54230: NEG
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 4
54264: NEG
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 5
54275: NEG
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 5
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 5
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 3
54321: NEG
54322: PUSH
54323: LD_INT 3
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: LD_INT 4
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 3
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 4
54381: NEG
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: LD_INT 4
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: LD_INT 4
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 4
54417: NEG
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 4
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 5
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 4
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 4
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 5
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: LD_INT 5
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 4
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 4
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 4
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: LD_INT 4
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 4
54634: PUSH
54635: LD_INT 3
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 5
54644: PUSH
54645: LD_INT 4
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 5
54654: PUSH
54655: LD_INT 5
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 4
54664: PUSH
54665: LD_INT 5
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: LD_INT 4
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 3
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 5
54694: PUSH
54695: LD_INT 3
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: LD_INT 5
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54759: LD_ADDR_VAR 0 33
54763: PUSH
54764: LD_INT 4
54766: NEG
54767: PUSH
54768: LD_INT 4
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 4
54778: NEG
54779: PUSH
54780: LD_INT 5
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: LD_INT 4
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: NEG
54803: PUSH
54804: LD_INT 3
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 4
54814: NEG
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 5
54826: NEG
54827: PUSH
54828: LD_INT 4
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 5
54838: NEG
54839: PUSH
54840: LD_INT 5
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 3
54850: NEG
54851: PUSH
54852: LD_INT 5
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 5
54862: NEG
54863: PUSH
54864: LD_INT 3
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 3
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 4
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 3
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 4
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: LD_INT 4
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 4
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 4
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 5
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 5
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 4
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 3
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 5
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 4
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 4
55099: PUSH
55100: LD_INT 4
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 4
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 4
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 4
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 4
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 5
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 5
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 4
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 3
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 5
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 3
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55297: LD_ADDR_VAR 0 34
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 4
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 5
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: LD_INT 4
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 3
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 4
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 5
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 3
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: LD_INT 5
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 4
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 4
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 4
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 4
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 4
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 5
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 5
55529: PUSH
55530: LD_INT 5
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 4
55539: PUSH
55540: LD_INT 5
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 3
55549: PUSH
55550: LD_INT 4
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 5
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: LD_INT 5
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 3
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: LD_INT 3
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 4
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 4
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 3
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 4
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 4
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 4
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 3
55705: NEG
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 4
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 5
55738: NEG
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 5
55749: NEG
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 5
55761: NEG
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: ST_TO_ADDR
// end ; end ;
55829: GO 55832
55831: POP
// case btype of b_depot , b_warehouse :
55832: LD_VAR 0 1
55836: PUSH
55837: LD_INT 0
55839: DOUBLE
55840: EQUAL
55841: IFTRUE 55851
55843: LD_INT 1
55845: DOUBLE
55846: EQUAL
55847: IFTRUE 55851
55849: GO 56052
55851: POP
// case nation of nation_american :
55852: LD_VAR 0 5
55856: PUSH
55857: LD_INT 1
55859: DOUBLE
55860: EQUAL
55861: IFTRUE 55865
55863: GO 55921
55865: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55866: LD_ADDR_VAR 0 9
55870: PUSH
55871: LD_VAR 0 11
55875: PUSH
55876: LD_VAR 0 12
55880: PUSH
55881: LD_VAR 0 13
55885: PUSH
55886: LD_VAR 0 14
55890: PUSH
55891: LD_VAR 0 15
55895: PUSH
55896: LD_VAR 0 16
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: PUSH
55909: LD_VAR 0 4
55913: PUSH
55914: LD_INT 1
55916: PLUS
55917: ARRAY
55918: ST_TO_ADDR
55919: GO 56050
55921: LD_INT 2
55923: DOUBLE
55924: EQUAL
55925: IFTRUE 55929
55927: GO 55985
55929: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55930: LD_ADDR_VAR 0 9
55934: PUSH
55935: LD_VAR 0 17
55939: PUSH
55940: LD_VAR 0 18
55944: PUSH
55945: LD_VAR 0 19
55949: PUSH
55950: LD_VAR 0 20
55954: PUSH
55955: LD_VAR 0 21
55959: PUSH
55960: LD_VAR 0 22
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: PUSH
55973: LD_VAR 0 4
55977: PUSH
55978: LD_INT 1
55980: PLUS
55981: ARRAY
55982: ST_TO_ADDR
55983: GO 56050
55985: LD_INT 3
55987: DOUBLE
55988: EQUAL
55989: IFTRUE 55993
55991: GO 56049
55993: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55994: LD_ADDR_VAR 0 9
55998: PUSH
55999: LD_VAR 0 23
56003: PUSH
56004: LD_VAR 0 24
56008: PUSH
56009: LD_VAR 0 25
56013: PUSH
56014: LD_VAR 0 26
56018: PUSH
56019: LD_VAR 0 27
56023: PUSH
56024: LD_VAR 0 28
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: PUSH
56037: LD_VAR 0 4
56041: PUSH
56042: LD_INT 1
56044: PLUS
56045: ARRAY
56046: ST_TO_ADDR
56047: GO 56050
56049: POP
56050: GO 56605
56052: LD_INT 2
56054: DOUBLE
56055: EQUAL
56056: IFTRUE 56066
56058: LD_INT 3
56060: DOUBLE
56061: EQUAL
56062: IFTRUE 56066
56064: GO 56122
56066: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56067: LD_ADDR_VAR 0 9
56071: PUSH
56072: LD_VAR 0 29
56076: PUSH
56077: LD_VAR 0 30
56081: PUSH
56082: LD_VAR 0 31
56086: PUSH
56087: LD_VAR 0 32
56091: PUSH
56092: LD_VAR 0 33
56096: PUSH
56097: LD_VAR 0 34
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: PUSH
56110: LD_VAR 0 4
56114: PUSH
56115: LD_INT 1
56117: PLUS
56118: ARRAY
56119: ST_TO_ADDR
56120: GO 56605
56122: LD_INT 16
56124: DOUBLE
56125: EQUAL
56126: IFTRUE 56184
56128: LD_INT 17
56130: DOUBLE
56131: EQUAL
56132: IFTRUE 56184
56134: LD_INT 18
56136: DOUBLE
56137: EQUAL
56138: IFTRUE 56184
56140: LD_INT 19
56142: DOUBLE
56143: EQUAL
56144: IFTRUE 56184
56146: LD_INT 22
56148: DOUBLE
56149: EQUAL
56150: IFTRUE 56184
56152: LD_INT 20
56154: DOUBLE
56155: EQUAL
56156: IFTRUE 56184
56158: LD_INT 21
56160: DOUBLE
56161: EQUAL
56162: IFTRUE 56184
56164: LD_INT 23
56166: DOUBLE
56167: EQUAL
56168: IFTRUE 56184
56170: LD_INT 24
56172: DOUBLE
56173: EQUAL
56174: IFTRUE 56184
56176: LD_INT 25
56178: DOUBLE
56179: EQUAL
56180: IFTRUE 56184
56182: GO 56240
56184: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56185: LD_ADDR_VAR 0 9
56189: PUSH
56190: LD_VAR 0 35
56194: PUSH
56195: LD_VAR 0 36
56199: PUSH
56200: LD_VAR 0 37
56204: PUSH
56205: LD_VAR 0 38
56209: PUSH
56210: LD_VAR 0 39
56214: PUSH
56215: LD_VAR 0 40
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: PUSH
56228: LD_VAR 0 4
56232: PUSH
56233: LD_INT 1
56235: PLUS
56236: ARRAY
56237: ST_TO_ADDR
56238: GO 56605
56240: LD_INT 6
56242: DOUBLE
56243: EQUAL
56244: IFTRUE 56296
56246: LD_INT 7
56248: DOUBLE
56249: EQUAL
56250: IFTRUE 56296
56252: LD_INT 8
56254: DOUBLE
56255: EQUAL
56256: IFTRUE 56296
56258: LD_INT 13
56260: DOUBLE
56261: EQUAL
56262: IFTRUE 56296
56264: LD_INT 12
56266: DOUBLE
56267: EQUAL
56268: IFTRUE 56296
56270: LD_INT 15
56272: DOUBLE
56273: EQUAL
56274: IFTRUE 56296
56276: LD_INT 11
56278: DOUBLE
56279: EQUAL
56280: IFTRUE 56296
56282: LD_INT 14
56284: DOUBLE
56285: EQUAL
56286: IFTRUE 56296
56288: LD_INT 10
56290: DOUBLE
56291: EQUAL
56292: IFTRUE 56296
56294: GO 56352
56296: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56297: LD_ADDR_VAR 0 9
56301: PUSH
56302: LD_VAR 0 41
56306: PUSH
56307: LD_VAR 0 42
56311: PUSH
56312: LD_VAR 0 43
56316: PUSH
56317: LD_VAR 0 44
56321: PUSH
56322: LD_VAR 0 45
56326: PUSH
56327: LD_VAR 0 46
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: PUSH
56340: LD_VAR 0 4
56344: PUSH
56345: LD_INT 1
56347: PLUS
56348: ARRAY
56349: ST_TO_ADDR
56350: GO 56605
56352: LD_INT 36
56354: DOUBLE
56355: EQUAL
56356: IFTRUE 56360
56358: GO 56416
56360: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56361: LD_ADDR_VAR 0 9
56365: PUSH
56366: LD_VAR 0 47
56370: PUSH
56371: LD_VAR 0 48
56375: PUSH
56376: LD_VAR 0 49
56380: PUSH
56381: LD_VAR 0 50
56385: PUSH
56386: LD_VAR 0 51
56390: PUSH
56391: LD_VAR 0 52
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: PUSH
56404: LD_VAR 0 4
56408: PUSH
56409: LD_INT 1
56411: PLUS
56412: ARRAY
56413: ST_TO_ADDR
56414: GO 56605
56416: LD_INT 4
56418: DOUBLE
56419: EQUAL
56420: IFTRUE 56442
56422: LD_INT 5
56424: DOUBLE
56425: EQUAL
56426: IFTRUE 56442
56428: LD_INT 34
56430: DOUBLE
56431: EQUAL
56432: IFTRUE 56442
56434: LD_INT 37
56436: DOUBLE
56437: EQUAL
56438: IFTRUE 56442
56440: GO 56498
56442: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56443: LD_ADDR_VAR 0 9
56447: PUSH
56448: LD_VAR 0 53
56452: PUSH
56453: LD_VAR 0 54
56457: PUSH
56458: LD_VAR 0 55
56462: PUSH
56463: LD_VAR 0 56
56467: PUSH
56468: LD_VAR 0 57
56472: PUSH
56473: LD_VAR 0 58
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: PUSH
56486: LD_VAR 0 4
56490: PUSH
56491: LD_INT 1
56493: PLUS
56494: ARRAY
56495: ST_TO_ADDR
56496: GO 56605
56498: LD_INT 31
56500: DOUBLE
56501: EQUAL
56502: IFTRUE 56548
56504: LD_INT 32
56506: DOUBLE
56507: EQUAL
56508: IFTRUE 56548
56510: LD_INT 33
56512: DOUBLE
56513: EQUAL
56514: IFTRUE 56548
56516: LD_INT 27
56518: DOUBLE
56519: EQUAL
56520: IFTRUE 56548
56522: LD_INT 26
56524: DOUBLE
56525: EQUAL
56526: IFTRUE 56548
56528: LD_INT 28
56530: DOUBLE
56531: EQUAL
56532: IFTRUE 56548
56534: LD_INT 29
56536: DOUBLE
56537: EQUAL
56538: IFTRUE 56548
56540: LD_INT 30
56542: DOUBLE
56543: EQUAL
56544: IFTRUE 56548
56546: GO 56604
56548: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56549: LD_ADDR_VAR 0 9
56553: PUSH
56554: LD_VAR 0 59
56558: PUSH
56559: LD_VAR 0 60
56563: PUSH
56564: LD_VAR 0 61
56568: PUSH
56569: LD_VAR 0 62
56573: PUSH
56574: LD_VAR 0 63
56578: PUSH
56579: LD_VAR 0 64
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: PUSH
56592: LD_VAR 0 4
56596: PUSH
56597: LD_INT 1
56599: PLUS
56600: ARRAY
56601: ST_TO_ADDR
56602: GO 56605
56604: POP
// temp_list2 = [ ] ;
56605: LD_ADDR_VAR 0 10
56609: PUSH
56610: EMPTY
56611: ST_TO_ADDR
// for i in temp_list do
56612: LD_ADDR_VAR 0 8
56616: PUSH
56617: LD_VAR 0 9
56621: PUSH
56622: FOR_IN
56623: IFFALSE 56675
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56625: LD_ADDR_VAR 0 10
56629: PUSH
56630: LD_VAR 0 10
56634: PUSH
56635: LD_VAR 0 8
56639: PUSH
56640: LD_INT 1
56642: ARRAY
56643: PUSH
56644: LD_VAR 0 2
56648: PLUS
56649: PUSH
56650: LD_VAR 0 8
56654: PUSH
56655: LD_INT 2
56657: ARRAY
56658: PUSH
56659: LD_VAR 0 3
56663: PLUS
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: EMPTY
56670: LIST
56671: ADD
56672: ST_TO_ADDR
56673: GO 56622
56675: POP
56676: POP
// result = temp_list2 ;
56677: LD_ADDR_VAR 0 7
56681: PUSH
56682: LD_VAR 0 10
56686: ST_TO_ADDR
// end ;
56687: LD_VAR 0 7
56691: RET
// export function EnemyInRange ( unit , dist ) ; begin
56692: LD_INT 0
56694: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56695: LD_ADDR_VAR 0 3
56699: PUSH
56700: LD_VAR 0 1
56704: PPUSH
56705: CALL_OW 255
56709: PPUSH
56710: LD_VAR 0 1
56714: PPUSH
56715: CALL_OW 250
56719: PPUSH
56720: LD_VAR 0 1
56724: PPUSH
56725: CALL_OW 251
56729: PPUSH
56730: LD_VAR 0 2
56734: PPUSH
56735: CALL 30065 0 4
56739: PUSH
56740: LD_INT 4
56742: ARRAY
56743: ST_TO_ADDR
// end ;
56744: LD_VAR 0 3
56748: RET
// export function PlayerSeeMe ( unit ) ; begin
56749: LD_INT 0
56751: PPUSH
// result := See ( your_side , unit ) ;
56752: LD_ADDR_VAR 0 2
56756: PUSH
56757: LD_OWVAR 2
56761: PPUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL_OW 292
56771: ST_TO_ADDR
// end ;
56772: LD_VAR 0 2
56776: RET
// export function ReverseDir ( unit ) ; begin
56777: LD_INT 0
56779: PPUSH
// if not unit then
56780: LD_VAR 0 1
56784: NOT
56785: IFFALSE 56789
// exit ;
56787: GO 56812
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56789: LD_ADDR_VAR 0 2
56793: PUSH
56794: LD_VAR 0 1
56798: PPUSH
56799: CALL_OW 254
56803: PUSH
56804: LD_INT 3
56806: PLUS
56807: PUSH
56808: LD_INT 6
56810: MOD
56811: ST_TO_ADDR
// end ;
56812: LD_VAR 0 2
56816: RET
// export function ReverseArray ( array ) ; var i ; begin
56817: LD_INT 0
56819: PPUSH
56820: PPUSH
// if not array then
56821: LD_VAR 0 1
56825: NOT
56826: IFFALSE 56830
// exit ;
56828: GO 56885
// result := [ ] ;
56830: LD_ADDR_VAR 0 2
56834: PUSH
56835: EMPTY
56836: ST_TO_ADDR
// for i := array downto 1 do
56837: LD_ADDR_VAR 0 3
56841: PUSH
56842: DOUBLE
56843: LD_VAR 0 1
56847: INC
56848: ST_TO_ADDR
56849: LD_INT 1
56851: PUSH
56852: FOR_DOWNTO
56853: IFFALSE 56883
// result := Join ( result , array [ i ] ) ;
56855: LD_ADDR_VAR 0 2
56859: PUSH
56860: LD_VAR 0 2
56864: PPUSH
56865: LD_VAR 0 1
56869: PUSH
56870: LD_VAR 0 3
56874: ARRAY
56875: PPUSH
56876: CALL 61528 0 2
56880: ST_TO_ADDR
56881: GO 56852
56883: POP
56884: POP
// end ;
56885: LD_VAR 0 2
56889: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56890: LD_INT 0
56892: PPUSH
56893: PPUSH
56894: PPUSH
56895: PPUSH
56896: PPUSH
56897: PPUSH
// if not unit or not hexes then
56898: LD_VAR 0 1
56902: NOT
56903: PUSH
56904: LD_VAR 0 2
56908: NOT
56909: OR
56910: IFFALSE 56914
// exit ;
56912: GO 57037
// dist := 9999 ;
56914: LD_ADDR_VAR 0 5
56918: PUSH
56919: LD_INT 9999
56921: ST_TO_ADDR
// for i = 1 to hexes do
56922: LD_ADDR_VAR 0 4
56926: PUSH
56927: DOUBLE
56928: LD_INT 1
56930: DEC
56931: ST_TO_ADDR
56932: LD_VAR 0 2
56936: PUSH
56937: FOR_TO
56938: IFFALSE 57025
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56940: LD_ADDR_VAR 0 6
56944: PUSH
56945: LD_VAR 0 1
56949: PPUSH
56950: LD_VAR 0 2
56954: PUSH
56955: LD_VAR 0 4
56959: ARRAY
56960: PUSH
56961: LD_INT 1
56963: ARRAY
56964: PPUSH
56965: LD_VAR 0 2
56969: PUSH
56970: LD_VAR 0 4
56974: ARRAY
56975: PUSH
56976: LD_INT 2
56978: ARRAY
56979: PPUSH
56980: CALL_OW 297
56984: ST_TO_ADDR
// if tdist < dist then
56985: LD_VAR 0 6
56989: PUSH
56990: LD_VAR 0 5
56994: LESS
56995: IFFALSE 57023
// begin hex := hexes [ i ] ;
56997: LD_ADDR_VAR 0 8
57001: PUSH
57002: LD_VAR 0 2
57006: PUSH
57007: LD_VAR 0 4
57011: ARRAY
57012: ST_TO_ADDR
// dist := tdist ;
57013: LD_ADDR_VAR 0 5
57017: PUSH
57018: LD_VAR 0 6
57022: ST_TO_ADDR
// end ; end ;
57023: GO 56937
57025: POP
57026: POP
// result := hex ;
57027: LD_ADDR_VAR 0 3
57031: PUSH
57032: LD_VAR 0 8
57036: ST_TO_ADDR
// end ;
57037: LD_VAR 0 3
57041: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57042: LD_INT 0
57044: PPUSH
57045: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57046: LD_VAR 0 1
57050: NOT
57051: PUSH
57052: LD_VAR 0 1
57056: PUSH
57057: LD_INT 21
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 23
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PPUSH
57081: CALL_OW 69
57085: IN
57086: NOT
57087: OR
57088: IFFALSE 57092
// exit ;
57090: GO 57139
// for i = 1 to 3 do
57092: LD_ADDR_VAR 0 3
57096: PUSH
57097: DOUBLE
57098: LD_INT 1
57100: DEC
57101: ST_TO_ADDR
57102: LD_INT 3
57104: PUSH
57105: FOR_TO
57106: IFFALSE 57137
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57108: LD_VAR 0 1
57112: PPUSH
57113: CALL_OW 250
57117: PPUSH
57118: LD_VAR 0 1
57122: PPUSH
57123: CALL_OW 251
57127: PPUSH
57128: LD_INT 1
57130: PPUSH
57131: CALL_OW 453
57135: GO 57105
57137: POP
57138: POP
// end ;
57139: LD_VAR 0 2
57143: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57144: LD_INT 0
57146: PPUSH
57147: PPUSH
57148: PPUSH
57149: PPUSH
57150: PPUSH
57151: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57152: LD_VAR 0 1
57156: NOT
57157: PUSH
57158: LD_VAR 0 2
57162: NOT
57163: OR
57164: PUSH
57165: LD_VAR 0 1
57169: PPUSH
57170: CALL_OW 314
57174: OR
57175: IFFALSE 57179
// exit ;
57177: GO 57646
// if GetLives ( i ) < 250 then
57179: LD_VAR 0 4
57183: PPUSH
57184: CALL_OW 256
57188: PUSH
57189: LD_INT 250
57191: LESS
57192: IFFALSE 57205
// begin ComAutodestruct ( i ) ;
57194: LD_VAR 0 4
57198: PPUSH
57199: CALL 57042 0 1
// exit ;
57203: GO 57646
// end ; x := GetX ( enemy_unit ) ;
57205: LD_ADDR_VAR 0 7
57209: PUSH
57210: LD_VAR 0 2
57214: PPUSH
57215: CALL_OW 250
57219: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57220: LD_ADDR_VAR 0 8
57224: PUSH
57225: LD_VAR 0 2
57229: PPUSH
57230: CALL_OW 251
57234: ST_TO_ADDR
// if not x or not y then
57235: LD_VAR 0 7
57239: NOT
57240: PUSH
57241: LD_VAR 0 8
57245: NOT
57246: OR
57247: IFFALSE 57251
// exit ;
57249: GO 57646
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57251: LD_ADDR_VAR 0 6
57255: PUSH
57256: LD_VAR 0 7
57260: PPUSH
57261: LD_INT 0
57263: PPUSH
57264: LD_INT 4
57266: PPUSH
57267: CALL_OW 272
57271: PUSH
57272: LD_VAR 0 8
57276: PPUSH
57277: LD_INT 0
57279: PPUSH
57280: LD_INT 4
57282: PPUSH
57283: CALL_OW 273
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_VAR 0 7
57296: PPUSH
57297: LD_INT 1
57299: PPUSH
57300: LD_INT 4
57302: PPUSH
57303: CALL_OW 272
57307: PUSH
57308: LD_VAR 0 8
57312: PPUSH
57313: LD_INT 1
57315: PPUSH
57316: LD_INT 4
57318: PPUSH
57319: CALL_OW 273
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_VAR 0 7
57332: PPUSH
57333: LD_INT 2
57335: PPUSH
57336: LD_INT 4
57338: PPUSH
57339: CALL_OW 272
57343: PUSH
57344: LD_VAR 0 8
57348: PPUSH
57349: LD_INT 2
57351: PPUSH
57352: LD_INT 4
57354: PPUSH
57355: CALL_OW 273
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_VAR 0 7
57368: PPUSH
57369: LD_INT 3
57371: PPUSH
57372: LD_INT 4
57374: PPUSH
57375: CALL_OW 272
57379: PUSH
57380: LD_VAR 0 8
57384: PPUSH
57385: LD_INT 3
57387: PPUSH
57388: LD_INT 4
57390: PPUSH
57391: CALL_OW 273
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_VAR 0 7
57404: PPUSH
57405: LD_INT 4
57407: PPUSH
57408: LD_INT 4
57410: PPUSH
57411: CALL_OW 272
57415: PUSH
57416: LD_VAR 0 8
57420: PPUSH
57421: LD_INT 4
57423: PPUSH
57424: LD_INT 4
57426: PPUSH
57427: CALL_OW 273
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_VAR 0 7
57440: PPUSH
57441: LD_INT 5
57443: PPUSH
57444: LD_INT 4
57446: PPUSH
57447: CALL_OW 272
57451: PUSH
57452: LD_VAR 0 8
57456: PPUSH
57457: LD_INT 5
57459: PPUSH
57460: LD_INT 4
57462: PPUSH
57463: CALL_OW 273
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: ST_TO_ADDR
// for i = tmp downto 1 do
57480: LD_ADDR_VAR 0 4
57484: PUSH
57485: DOUBLE
57486: LD_VAR 0 6
57490: INC
57491: ST_TO_ADDR
57492: LD_INT 1
57494: PUSH
57495: FOR_DOWNTO
57496: IFFALSE 57597
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57498: LD_VAR 0 6
57502: PUSH
57503: LD_VAR 0 4
57507: ARRAY
57508: PUSH
57509: LD_INT 1
57511: ARRAY
57512: PPUSH
57513: LD_VAR 0 6
57517: PUSH
57518: LD_VAR 0 4
57522: ARRAY
57523: PUSH
57524: LD_INT 2
57526: ARRAY
57527: PPUSH
57528: CALL_OW 488
57532: NOT
57533: PUSH
57534: LD_VAR 0 6
57538: PUSH
57539: LD_VAR 0 4
57543: ARRAY
57544: PUSH
57545: LD_INT 1
57547: ARRAY
57548: PPUSH
57549: LD_VAR 0 6
57553: PUSH
57554: LD_VAR 0 4
57558: ARRAY
57559: PUSH
57560: LD_INT 2
57562: ARRAY
57563: PPUSH
57564: CALL_OW 428
57568: PUSH
57569: LD_INT 0
57571: NONEQUAL
57572: OR
57573: IFFALSE 57595
// tmp := Delete ( tmp , i ) ;
57575: LD_ADDR_VAR 0 6
57579: PUSH
57580: LD_VAR 0 6
57584: PPUSH
57585: LD_VAR 0 4
57589: PPUSH
57590: CALL_OW 3
57594: ST_TO_ADDR
57595: GO 57495
57597: POP
57598: POP
// j := GetClosestHex ( unit , tmp ) ;
57599: LD_ADDR_VAR 0 5
57603: PUSH
57604: LD_VAR 0 1
57608: PPUSH
57609: LD_VAR 0 6
57613: PPUSH
57614: CALL 56890 0 2
57618: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57619: LD_VAR 0 1
57623: PPUSH
57624: LD_VAR 0 5
57628: PUSH
57629: LD_INT 1
57631: ARRAY
57632: PPUSH
57633: LD_VAR 0 5
57637: PUSH
57638: LD_INT 2
57640: ARRAY
57641: PPUSH
57642: CALL_OW 111
// end ;
57646: LD_VAR 0 3
57650: RET
// export function PrepareApemanSoldier ( ) ; begin
57651: LD_INT 0
57653: PPUSH
// uc_nation := 0 ;
57654: LD_ADDR_OWVAR 21
57658: PUSH
57659: LD_INT 0
57661: ST_TO_ADDR
// hc_sex := sex_male ;
57662: LD_ADDR_OWVAR 27
57666: PUSH
57667: LD_INT 1
57669: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57670: LD_ADDR_OWVAR 28
57674: PUSH
57675: LD_INT 15
57677: ST_TO_ADDR
// hc_gallery :=  ;
57678: LD_ADDR_OWVAR 33
57682: PUSH
57683: LD_STRING 
57685: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57686: LD_ADDR_OWVAR 31
57690: PUSH
57691: LD_INT 0
57693: PPUSH
57694: LD_INT 3
57696: PPUSH
57697: CALL_OW 12
57701: PUSH
57702: LD_INT 0
57704: PPUSH
57705: LD_INT 3
57707: PPUSH
57708: CALL_OW 12
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: ST_TO_ADDR
// end ;
57725: LD_VAR 0 1
57729: RET
// export function PrepareApemanEngineer ( ) ; begin
57730: LD_INT 0
57732: PPUSH
// uc_nation := 0 ;
57733: LD_ADDR_OWVAR 21
57737: PUSH
57738: LD_INT 0
57740: ST_TO_ADDR
// hc_sex := sex_male ;
57741: LD_ADDR_OWVAR 27
57745: PUSH
57746: LD_INT 1
57748: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57749: LD_ADDR_OWVAR 28
57753: PUSH
57754: LD_INT 16
57756: ST_TO_ADDR
// hc_gallery :=  ;
57757: LD_ADDR_OWVAR 33
57761: PUSH
57762: LD_STRING 
57764: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57765: LD_ADDR_OWVAR 31
57769: PUSH
57770: LD_INT 0
57772: PPUSH
57773: LD_INT 3
57775: PPUSH
57776: CALL_OW 12
57780: PUSH
57781: LD_INT 0
57783: PPUSH
57784: LD_INT 3
57786: PPUSH
57787: CALL_OW 12
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: ST_TO_ADDR
// end ;
57804: LD_VAR 0 1
57808: RET
// export function PrepareApeman ( agressivity ) ; begin
57809: LD_INT 0
57811: PPUSH
// uc_side := 0 ;
57812: LD_ADDR_OWVAR 20
57816: PUSH
57817: LD_INT 0
57819: ST_TO_ADDR
// uc_nation := 0 ;
57820: LD_ADDR_OWVAR 21
57824: PUSH
57825: LD_INT 0
57827: ST_TO_ADDR
// hc_sex := sex_male ;
57828: LD_ADDR_OWVAR 27
57832: PUSH
57833: LD_INT 1
57835: ST_TO_ADDR
// hc_class := class_apeman ;
57836: LD_ADDR_OWVAR 28
57840: PUSH
57841: LD_INT 12
57843: ST_TO_ADDR
// hc_gallery :=  ;
57844: LD_ADDR_OWVAR 33
57848: PUSH
57849: LD_STRING 
57851: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57852: LD_ADDR_OWVAR 35
57856: PUSH
57857: LD_VAR 0 1
57861: NEG
57862: PPUSH
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 12
57872: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57873: LD_ADDR_OWVAR 31
57877: PUSH
57878: LD_INT 0
57880: PPUSH
57881: LD_INT 3
57883: PPUSH
57884: CALL_OW 12
57888: PUSH
57889: LD_INT 0
57891: PPUSH
57892: LD_INT 3
57894: PPUSH
57895: CALL_OW 12
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// end ;
57912: LD_VAR 0 2
57916: RET
// export function PrepareTiger ( agressivity ) ; begin
57917: LD_INT 0
57919: PPUSH
// uc_side := 0 ;
57920: LD_ADDR_OWVAR 20
57924: PUSH
57925: LD_INT 0
57927: ST_TO_ADDR
// uc_nation := 0 ;
57928: LD_ADDR_OWVAR 21
57932: PUSH
57933: LD_INT 0
57935: ST_TO_ADDR
// hc_class := class_tiger ;
57936: LD_ADDR_OWVAR 28
57940: PUSH
57941: LD_INT 14
57943: ST_TO_ADDR
// hc_gallery :=  ;
57944: LD_ADDR_OWVAR 33
57948: PUSH
57949: LD_STRING 
57951: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57952: LD_ADDR_OWVAR 35
57956: PUSH
57957: LD_VAR 0 1
57961: NEG
57962: PPUSH
57963: LD_VAR 0 1
57967: PPUSH
57968: CALL_OW 12
57972: ST_TO_ADDR
// end ;
57973: LD_VAR 0 2
57977: RET
// export function PrepareEnchidna ( ) ; begin
57978: LD_INT 0
57980: PPUSH
// uc_side := 0 ;
57981: LD_ADDR_OWVAR 20
57985: PUSH
57986: LD_INT 0
57988: ST_TO_ADDR
// uc_nation := 0 ;
57989: LD_ADDR_OWVAR 21
57993: PUSH
57994: LD_INT 0
57996: ST_TO_ADDR
// hc_class := class_baggie ;
57997: LD_ADDR_OWVAR 28
58001: PUSH
58002: LD_INT 13
58004: ST_TO_ADDR
// hc_gallery :=  ;
58005: LD_ADDR_OWVAR 33
58009: PUSH
58010: LD_STRING 
58012: ST_TO_ADDR
// end ;
58013: LD_VAR 0 1
58017: RET
// export function PrepareFrog ( ) ; begin
58018: LD_INT 0
58020: PPUSH
// uc_side := 0 ;
58021: LD_ADDR_OWVAR 20
58025: PUSH
58026: LD_INT 0
58028: ST_TO_ADDR
// uc_nation := 0 ;
58029: LD_ADDR_OWVAR 21
58033: PUSH
58034: LD_INT 0
58036: ST_TO_ADDR
// hc_class := class_frog ;
58037: LD_ADDR_OWVAR 28
58041: PUSH
58042: LD_INT 19
58044: ST_TO_ADDR
// hc_gallery :=  ;
58045: LD_ADDR_OWVAR 33
58049: PUSH
58050: LD_STRING 
58052: ST_TO_ADDR
// end ;
58053: LD_VAR 0 1
58057: RET
// export function PrepareFish ( ) ; begin
58058: LD_INT 0
58060: PPUSH
// uc_side := 0 ;
58061: LD_ADDR_OWVAR 20
58065: PUSH
58066: LD_INT 0
58068: ST_TO_ADDR
// uc_nation := 0 ;
58069: LD_ADDR_OWVAR 21
58073: PUSH
58074: LD_INT 0
58076: ST_TO_ADDR
// hc_class := class_fish ;
58077: LD_ADDR_OWVAR 28
58081: PUSH
58082: LD_INT 20
58084: ST_TO_ADDR
// hc_gallery :=  ;
58085: LD_ADDR_OWVAR 33
58089: PUSH
58090: LD_STRING 
58092: ST_TO_ADDR
// end ;
58093: LD_VAR 0 1
58097: RET
// export function PrepareBird ( ) ; begin
58098: LD_INT 0
58100: PPUSH
// uc_side := 0 ;
58101: LD_ADDR_OWVAR 20
58105: PUSH
58106: LD_INT 0
58108: ST_TO_ADDR
// uc_nation := 0 ;
58109: LD_ADDR_OWVAR 21
58113: PUSH
58114: LD_INT 0
58116: ST_TO_ADDR
// hc_class := class_phororhacos ;
58117: LD_ADDR_OWVAR 28
58121: PUSH
58122: LD_INT 18
58124: ST_TO_ADDR
// hc_gallery :=  ;
58125: LD_ADDR_OWVAR 33
58129: PUSH
58130: LD_STRING 
58132: ST_TO_ADDR
// end ;
58133: LD_VAR 0 1
58137: RET
// export function PrepareHorse ( ) ; begin
58138: LD_INT 0
58140: PPUSH
// uc_side := 0 ;
58141: LD_ADDR_OWVAR 20
58145: PUSH
58146: LD_INT 0
58148: ST_TO_ADDR
// uc_nation := 0 ;
58149: LD_ADDR_OWVAR 21
58153: PUSH
58154: LD_INT 0
58156: ST_TO_ADDR
// hc_class := class_horse ;
58157: LD_ADDR_OWVAR 28
58161: PUSH
58162: LD_INT 21
58164: ST_TO_ADDR
// hc_gallery :=  ;
58165: LD_ADDR_OWVAR 33
58169: PUSH
58170: LD_STRING 
58172: ST_TO_ADDR
// end ;
58173: LD_VAR 0 1
58177: RET
// export function PrepareMastodont ( ) ; begin
58178: LD_INT 0
58180: PPUSH
// uc_side := 0 ;
58181: LD_ADDR_OWVAR 20
58185: PUSH
58186: LD_INT 0
58188: ST_TO_ADDR
// uc_nation := 0 ;
58189: LD_ADDR_OWVAR 21
58193: PUSH
58194: LD_INT 0
58196: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58197: LD_ADDR_OWVAR 37
58201: PUSH
58202: LD_INT 31
58204: ST_TO_ADDR
// vc_control := control_rider ;
58205: LD_ADDR_OWVAR 38
58209: PUSH
58210: LD_INT 4
58212: ST_TO_ADDR
// end ;
58213: LD_VAR 0 1
58217: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58218: LD_INT 0
58220: PPUSH
58221: PPUSH
58222: PPUSH
// uc_side = 0 ;
58223: LD_ADDR_OWVAR 20
58227: PUSH
58228: LD_INT 0
58230: ST_TO_ADDR
// uc_nation = 0 ;
58231: LD_ADDR_OWVAR 21
58235: PUSH
58236: LD_INT 0
58238: ST_TO_ADDR
// InitHc_All ( ) ;
58239: CALL_OW 584
// InitVc ;
58243: CALL_OW 20
// if mastodonts then
58247: LD_VAR 0 6
58251: IFFALSE 58318
// for i = 1 to mastodonts do
58253: LD_ADDR_VAR 0 11
58257: PUSH
58258: DOUBLE
58259: LD_INT 1
58261: DEC
58262: ST_TO_ADDR
58263: LD_VAR 0 6
58267: PUSH
58268: FOR_TO
58269: IFFALSE 58316
// begin vc_chassis := 31 ;
58271: LD_ADDR_OWVAR 37
58275: PUSH
58276: LD_INT 31
58278: ST_TO_ADDR
// vc_control := control_rider ;
58279: LD_ADDR_OWVAR 38
58283: PUSH
58284: LD_INT 4
58286: ST_TO_ADDR
// animal := CreateVehicle ;
58287: LD_ADDR_VAR 0 12
58291: PUSH
58292: CALL_OW 45
58296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58297: LD_VAR 0 12
58301: PPUSH
58302: LD_VAR 0 8
58306: PPUSH
58307: LD_INT 0
58309: PPUSH
58310: CALL 60446 0 3
// end ;
58314: GO 58268
58316: POP
58317: POP
// if horses then
58318: LD_VAR 0 5
58322: IFFALSE 58389
// for i = 1 to horses do
58324: LD_ADDR_VAR 0 11
58328: PUSH
58329: DOUBLE
58330: LD_INT 1
58332: DEC
58333: ST_TO_ADDR
58334: LD_VAR 0 5
58338: PUSH
58339: FOR_TO
58340: IFFALSE 58387
// begin hc_class := 21 ;
58342: LD_ADDR_OWVAR 28
58346: PUSH
58347: LD_INT 21
58349: ST_TO_ADDR
// hc_gallery :=  ;
58350: LD_ADDR_OWVAR 33
58354: PUSH
58355: LD_STRING 
58357: ST_TO_ADDR
// animal := CreateHuman ;
58358: LD_ADDR_VAR 0 12
58362: PUSH
58363: CALL_OW 44
58367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58368: LD_VAR 0 12
58372: PPUSH
58373: LD_VAR 0 8
58377: PPUSH
58378: LD_INT 0
58380: PPUSH
58381: CALL 60446 0 3
// end ;
58385: GO 58339
58387: POP
58388: POP
// if birds then
58389: LD_VAR 0 1
58393: IFFALSE 58460
// for i = 1 to birds do
58395: LD_ADDR_VAR 0 11
58399: PUSH
58400: DOUBLE
58401: LD_INT 1
58403: DEC
58404: ST_TO_ADDR
58405: LD_VAR 0 1
58409: PUSH
58410: FOR_TO
58411: IFFALSE 58458
// begin hc_class := 18 ;
58413: LD_ADDR_OWVAR 28
58417: PUSH
58418: LD_INT 18
58420: ST_TO_ADDR
// hc_gallery =  ;
58421: LD_ADDR_OWVAR 33
58425: PUSH
58426: LD_STRING 
58428: ST_TO_ADDR
// animal := CreateHuman ;
58429: LD_ADDR_VAR 0 12
58433: PUSH
58434: CALL_OW 44
58438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58439: LD_VAR 0 12
58443: PPUSH
58444: LD_VAR 0 8
58448: PPUSH
58449: LD_INT 0
58451: PPUSH
58452: CALL 60446 0 3
// end ;
58456: GO 58410
58458: POP
58459: POP
// if tigers then
58460: LD_VAR 0 2
58464: IFFALSE 58548
// for i = 1 to tigers do
58466: LD_ADDR_VAR 0 11
58470: PUSH
58471: DOUBLE
58472: LD_INT 1
58474: DEC
58475: ST_TO_ADDR
58476: LD_VAR 0 2
58480: PUSH
58481: FOR_TO
58482: IFFALSE 58546
// begin hc_class = class_tiger ;
58484: LD_ADDR_OWVAR 28
58488: PUSH
58489: LD_INT 14
58491: ST_TO_ADDR
// hc_gallery =  ;
58492: LD_ADDR_OWVAR 33
58496: PUSH
58497: LD_STRING 
58499: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58500: LD_ADDR_OWVAR 35
58504: PUSH
58505: LD_INT 7
58507: NEG
58508: PPUSH
58509: LD_INT 7
58511: PPUSH
58512: CALL_OW 12
58516: ST_TO_ADDR
// animal := CreateHuman ;
58517: LD_ADDR_VAR 0 12
58521: PUSH
58522: CALL_OW 44
58526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58527: LD_VAR 0 12
58531: PPUSH
58532: LD_VAR 0 8
58536: PPUSH
58537: LD_INT 0
58539: PPUSH
58540: CALL 60446 0 3
// end ;
58544: GO 58481
58546: POP
58547: POP
// if apemans then
58548: LD_VAR 0 3
58552: IFFALSE 58675
// for i = 1 to apemans do
58554: LD_ADDR_VAR 0 11
58558: PUSH
58559: DOUBLE
58560: LD_INT 1
58562: DEC
58563: ST_TO_ADDR
58564: LD_VAR 0 3
58568: PUSH
58569: FOR_TO
58570: IFFALSE 58673
// begin hc_class = class_apeman ;
58572: LD_ADDR_OWVAR 28
58576: PUSH
58577: LD_INT 12
58579: ST_TO_ADDR
// hc_gallery =  ;
58580: LD_ADDR_OWVAR 33
58584: PUSH
58585: LD_STRING 
58587: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58588: LD_ADDR_OWVAR 35
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PPUSH
58597: LD_INT 2
58599: PPUSH
58600: CALL_OW 12
58604: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58605: LD_ADDR_OWVAR 31
58609: PUSH
58610: LD_INT 1
58612: PPUSH
58613: LD_INT 3
58615: PPUSH
58616: CALL_OW 12
58620: PUSH
58621: LD_INT 1
58623: PPUSH
58624: LD_INT 3
58626: PPUSH
58627: CALL_OW 12
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// animal := CreateHuman ;
58644: LD_ADDR_VAR 0 12
58648: PUSH
58649: CALL_OW 44
58653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58654: LD_VAR 0 12
58658: PPUSH
58659: LD_VAR 0 8
58663: PPUSH
58664: LD_INT 0
58666: PPUSH
58667: CALL 60446 0 3
// end ;
58671: GO 58569
58673: POP
58674: POP
// if enchidnas then
58675: LD_VAR 0 4
58679: IFFALSE 58746
// for i = 1 to enchidnas do
58681: LD_ADDR_VAR 0 11
58685: PUSH
58686: DOUBLE
58687: LD_INT 1
58689: DEC
58690: ST_TO_ADDR
58691: LD_VAR 0 4
58695: PUSH
58696: FOR_TO
58697: IFFALSE 58744
// begin hc_class = 13 ;
58699: LD_ADDR_OWVAR 28
58703: PUSH
58704: LD_INT 13
58706: ST_TO_ADDR
// hc_gallery =  ;
58707: LD_ADDR_OWVAR 33
58711: PUSH
58712: LD_STRING 
58714: ST_TO_ADDR
// animal := CreateHuman ;
58715: LD_ADDR_VAR 0 12
58719: PUSH
58720: CALL_OW 44
58724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58725: LD_VAR 0 12
58729: PPUSH
58730: LD_VAR 0 8
58734: PPUSH
58735: LD_INT 0
58737: PPUSH
58738: CALL 60446 0 3
// end ;
58742: GO 58696
58744: POP
58745: POP
// if fishes then
58746: LD_VAR 0 7
58750: IFFALSE 58817
// for i = 1 to fishes do
58752: LD_ADDR_VAR 0 11
58756: PUSH
58757: DOUBLE
58758: LD_INT 1
58760: DEC
58761: ST_TO_ADDR
58762: LD_VAR 0 7
58766: PUSH
58767: FOR_TO
58768: IFFALSE 58815
// begin hc_class = 20 ;
58770: LD_ADDR_OWVAR 28
58774: PUSH
58775: LD_INT 20
58777: ST_TO_ADDR
// hc_gallery =  ;
58778: LD_ADDR_OWVAR 33
58782: PUSH
58783: LD_STRING 
58785: ST_TO_ADDR
// animal := CreateHuman ;
58786: LD_ADDR_VAR 0 12
58790: PUSH
58791: CALL_OW 44
58795: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58796: LD_VAR 0 12
58800: PPUSH
58801: LD_VAR 0 9
58805: PPUSH
58806: LD_INT 0
58808: PPUSH
58809: CALL 60446 0 3
// end ;
58813: GO 58767
58815: POP
58816: POP
// end ;
58817: LD_VAR 0 10
58821: RET
// export function WantHeal ( sci , unit ) ; begin
58822: LD_INT 0
58824: PPUSH
// if GetTaskList ( sci ) > 0 then
58825: LD_VAR 0 1
58829: PPUSH
58830: CALL_OW 437
58834: PUSH
58835: LD_INT 0
58837: GREATER
58838: IFFALSE 58908
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58840: LD_VAR 0 1
58844: PPUSH
58845: CALL_OW 437
58849: PUSH
58850: LD_INT 1
58852: ARRAY
58853: PUSH
58854: LD_INT 1
58856: ARRAY
58857: PUSH
58858: LD_STRING l
58860: EQUAL
58861: PUSH
58862: LD_VAR 0 1
58866: PPUSH
58867: CALL_OW 437
58871: PUSH
58872: LD_INT 1
58874: ARRAY
58875: PUSH
58876: LD_INT 4
58878: ARRAY
58879: PUSH
58880: LD_VAR 0 2
58884: EQUAL
58885: AND
58886: IFFALSE 58898
// result := true else
58888: LD_ADDR_VAR 0 3
58892: PUSH
58893: LD_INT 1
58895: ST_TO_ADDR
58896: GO 58906
// result := false ;
58898: LD_ADDR_VAR 0 3
58902: PUSH
58903: LD_INT 0
58905: ST_TO_ADDR
// end else
58906: GO 58916
// result := false ;
58908: LD_ADDR_VAR 0 3
58912: PUSH
58913: LD_INT 0
58915: ST_TO_ADDR
// end ;
58916: LD_VAR 0 3
58920: RET
// export function HealTarget ( sci ) ; begin
58921: LD_INT 0
58923: PPUSH
// if not sci then
58924: LD_VAR 0 1
58928: NOT
58929: IFFALSE 58933
// exit ;
58931: GO 58998
// result := 0 ;
58933: LD_ADDR_VAR 0 2
58937: PUSH
58938: LD_INT 0
58940: ST_TO_ADDR
// if GetTaskList ( sci ) then
58941: LD_VAR 0 1
58945: PPUSH
58946: CALL_OW 437
58950: IFFALSE 58998
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58952: LD_VAR 0 1
58956: PPUSH
58957: CALL_OW 437
58961: PUSH
58962: LD_INT 1
58964: ARRAY
58965: PUSH
58966: LD_INT 1
58968: ARRAY
58969: PUSH
58970: LD_STRING l
58972: EQUAL
58973: IFFALSE 58998
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58975: LD_ADDR_VAR 0 2
58979: PUSH
58980: LD_VAR 0 1
58984: PPUSH
58985: CALL_OW 437
58989: PUSH
58990: LD_INT 1
58992: ARRAY
58993: PUSH
58994: LD_INT 4
58996: ARRAY
58997: ST_TO_ADDR
// end ;
58998: LD_VAR 0 2
59002: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59003: LD_INT 0
59005: PPUSH
59006: PPUSH
59007: PPUSH
59008: PPUSH
// if not base_units then
59009: LD_VAR 0 1
59013: NOT
59014: IFFALSE 59018
// exit ;
59016: GO 59105
// result := false ;
59018: LD_ADDR_VAR 0 2
59022: PUSH
59023: LD_INT 0
59025: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59026: LD_ADDR_VAR 0 5
59030: PUSH
59031: LD_VAR 0 1
59035: PPUSH
59036: LD_INT 21
59038: PUSH
59039: LD_INT 3
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PPUSH
59046: CALL_OW 72
59050: ST_TO_ADDR
// if not tmp then
59051: LD_VAR 0 5
59055: NOT
59056: IFFALSE 59060
// exit ;
59058: GO 59105
// for i in tmp do
59060: LD_ADDR_VAR 0 3
59064: PUSH
59065: LD_VAR 0 5
59069: PUSH
59070: FOR_IN
59071: IFFALSE 59103
// begin result := EnemyInRange ( i , 22 ) ;
59073: LD_ADDR_VAR 0 2
59077: PUSH
59078: LD_VAR 0 3
59082: PPUSH
59083: LD_INT 22
59085: PPUSH
59086: CALL 56692 0 2
59090: ST_TO_ADDR
// if result then
59091: LD_VAR 0 2
59095: IFFALSE 59101
// exit ;
59097: POP
59098: POP
59099: GO 59105
// end ;
59101: GO 59070
59103: POP
59104: POP
// end ;
59105: LD_VAR 0 2
59109: RET
// export function FilterByTag ( units , tag ) ; begin
59110: LD_INT 0
59112: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59113: LD_ADDR_VAR 0 3
59117: PUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: LD_INT 120
59125: PUSH
59126: LD_VAR 0 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PPUSH
59135: CALL_OW 72
59139: ST_TO_ADDR
// end ;
59140: LD_VAR 0 3
59144: RET
// export function IsDriver ( un ) ; begin
59145: LD_INT 0
59147: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59148: LD_ADDR_VAR 0 2
59152: PUSH
59153: LD_VAR 0 1
59157: PUSH
59158: LD_INT 55
59160: PUSH
59161: EMPTY
59162: LIST
59163: PPUSH
59164: CALL_OW 69
59168: IN
59169: ST_TO_ADDR
// end ;
59170: LD_VAR 0 2
59174: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59175: LD_INT 0
59177: PPUSH
59178: PPUSH
// list := [ ] ;
59179: LD_ADDR_VAR 0 5
59183: PUSH
59184: EMPTY
59185: ST_TO_ADDR
// case d of 0 :
59186: LD_VAR 0 3
59190: PUSH
59191: LD_INT 0
59193: DOUBLE
59194: EQUAL
59195: IFTRUE 59199
59197: GO 59332
59199: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59200: LD_ADDR_VAR 0 5
59204: PUSH
59205: LD_VAR 0 1
59209: PUSH
59210: LD_INT 4
59212: MINUS
59213: PUSH
59214: LD_VAR 0 2
59218: PUSH
59219: LD_INT 4
59221: MINUS
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: PUSH
59231: LD_VAR 0 1
59235: PUSH
59236: LD_INT 3
59238: MINUS
59239: PUSH
59240: LD_VAR 0 2
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: PUSH
59253: LD_VAR 0 1
59257: PUSH
59258: LD_INT 4
59260: PLUS
59261: PUSH
59262: LD_VAR 0 2
59266: PUSH
59267: LD_INT 4
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: PUSH
59275: LD_VAR 0 1
59279: PUSH
59280: LD_INT 3
59282: PLUS
59283: PUSH
59284: LD_VAR 0 2
59288: PUSH
59289: LD_INT 3
59291: PLUS
59292: PUSH
59293: LD_INT 5
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: PUSH
59301: LD_VAR 0 1
59305: PUSH
59306: LD_VAR 0 2
59310: PUSH
59311: LD_INT 4
59313: PLUS
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: ST_TO_ADDR
// end ; 1 :
59330: GO 60030
59332: LD_INT 1
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59340
59338: GO 59473
59340: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59341: LD_ADDR_VAR 0 5
59345: PUSH
59346: LD_VAR 0 1
59350: PUSH
59351: LD_VAR 0 2
59355: PUSH
59356: LD_INT 4
59358: MINUS
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: LIST
59367: PUSH
59368: LD_VAR 0 1
59372: PUSH
59373: LD_INT 3
59375: MINUS
59376: PUSH
59377: LD_VAR 0 2
59381: PUSH
59382: LD_INT 3
59384: MINUS
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: LIST
59393: PUSH
59394: LD_VAR 0 1
59398: PUSH
59399: LD_INT 4
59401: MINUS
59402: PUSH
59403: LD_VAR 0 2
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: LIST
59415: PUSH
59416: LD_VAR 0 1
59420: PUSH
59421: LD_VAR 0 2
59425: PUSH
59426: LD_INT 3
59428: PLUS
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: LIST
59437: PUSH
59438: LD_VAR 0 1
59442: PUSH
59443: LD_INT 4
59445: PLUS
59446: PUSH
59447: LD_VAR 0 2
59451: PUSH
59452: LD_INT 4
59454: PLUS
59455: PUSH
59456: LD_INT 5
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: ST_TO_ADDR
// end ; 2 :
59471: GO 60030
59473: LD_INT 2
59475: DOUBLE
59476: EQUAL
59477: IFTRUE 59481
59479: GO 59610
59481: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59482: LD_ADDR_VAR 0 5
59486: PUSH
59487: LD_VAR 0 1
59491: PUSH
59492: LD_VAR 0 2
59496: PUSH
59497: LD_INT 3
59499: MINUS
59500: PUSH
59501: LD_INT 3
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: LIST
59508: PUSH
59509: LD_VAR 0 1
59513: PUSH
59514: LD_INT 4
59516: PLUS
59517: PUSH
59518: LD_VAR 0 2
59522: PUSH
59523: LD_INT 4
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: PUSH
59531: LD_VAR 0 1
59535: PUSH
59536: LD_VAR 0 2
59540: PUSH
59541: LD_INT 4
59543: PLUS
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: PUSH
59553: LD_VAR 0 1
59557: PUSH
59558: LD_INT 3
59560: MINUS
59561: PUSH
59562: LD_VAR 0 2
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: LIST
59574: PUSH
59575: LD_VAR 0 1
59579: PUSH
59580: LD_INT 4
59582: MINUS
59583: PUSH
59584: LD_VAR 0 2
59588: PUSH
59589: LD_INT 4
59591: MINUS
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: ST_TO_ADDR
// end ; 3 :
59608: GO 60030
59610: LD_INT 3
59612: DOUBLE
59613: EQUAL
59614: IFTRUE 59618
59616: GO 59751
59618: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59619: LD_ADDR_VAR 0 5
59623: PUSH
59624: LD_VAR 0 1
59628: PUSH
59629: LD_INT 3
59631: PLUS
59632: PUSH
59633: LD_VAR 0 2
59637: PUSH
59638: LD_INT 4
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: LD_VAR 0 1
59650: PUSH
59651: LD_INT 4
59653: PLUS
59654: PUSH
59655: LD_VAR 0 2
59659: PUSH
59660: LD_INT 4
59662: PLUS
59663: PUSH
59664: LD_INT 5
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: LIST
59671: PUSH
59672: LD_VAR 0 1
59676: PUSH
59677: LD_INT 4
59679: MINUS
59680: PUSH
59681: LD_VAR 0 2
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: LIST
59693: PUSH
59694: LD_VAR 0 1
59698: PUSH
59699: LD_VAR 0 2
59703: PUSH
59704: LD_INT 4
59706: MINUS
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: LIST
59715: PUSH
59716: LD_VAR 0 1
59720: PUSH
59721: LD_INT 3
59723: MINUS
59724: PUSH
59725: LD_VAR 0 2
59729: PUSH
59730: LD_INT 3
59732: MINUS
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// end ; 4 :
59749: GO 60030
59751: LD_INT 4
59753: DOUBLE
59754: EQUAL
59755: IFTRUE 59759
59757: GO 59892
59759: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59760: LD_ADDR_VAR 0 5
59764: PUSH
59765: LD_VAR 0 1
59769: PUSH
59770: LD_VAR 0 2
59774: PUSH
59775: LD_INT 4
59777: PLUS
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: PUSH
59787: LD_VAR 0 1
59791: PUSH
59792: LD_INT 3
59794: PLUS
59795: PUSH
59796: LD_VAR 0 2
59800: PUSH
59801: LD_INT 3
59803: PLUS
59804: PUSH
59805: LD_INT 5
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: PUSH
59813: LD_VAR 0 1
59817: PUSH
59818: LD_INT 4
59820: PLUS
59821: PUSH
59822: LD_VAR 0 2
59826: PUSH
59827: LD_INT 4
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: PUSH
59835: LD_VAR 0 1
59839: PUSH
59840: LD_VAR 0 2
59844: PUSH
59845: LD_INT 3
59847: MINUS
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: LIST
59856: PUSH
59857: LD_VAR 0 1
59861: PUSH
59862: LD_INT 4
59864: MINUS
59865: PUSH
59866: LD_VAR 0 2
59870: PUSH
59871: LD_INT 4
59873: MINUS
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: ST_TO_ADDR
// end ; 5 :
59890: GO 60030
59892: LD_INT 5
59894: DOUBLE
59895: EQUAL
59896: IFTRUE 59900
59898: GO 60029
59900: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59901: LD_ADDR_VAR 0 5
59905: PUSH
59906: LD_VAR 0 1
59910: PUSH
59911: LD_INT 4
59913: MINUS
59914: PUSH
59915: LD_VAR 0 2
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: LIST
59927: PUSH
59928: LD_VAR 0 1
59932: PUSH
59933: LD_VAR 0 2
59937: PUSH
59938: LD_INT 4
59940: MINUS
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: LIST
59949: PUSH
59950: LD_VAR 0 1
59954: PUSH
59955: LD_INT 4
59957: PLUS
59958: PUSH
59959: LD_VAR 0 2
59963: PUSH
59964: LD_INT 4
59966: PLUS
59967: PUSH
59968: LD_INT 5
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: LIST
59975: PUSH
59976: LD_VAR 0 1
59980: PUSH
59981: LD_INT 3
59983: PLUS
59984: PUSH
59985: LD_VAR 0 2
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: PUSH
59998: LD_VAR 0 1
60002: PUSH
60003: LD_VAR 0 2
60007: PUSH
60008: LD_INT 3
60010: PLUS
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: ST_TO_ADDR
// end ; end ;
60027: GO 60030
60029: POP
// result := list ;
60030: LD_ADDR_VAR 0 4
60034: PUSH
60035: LD_VAR 0 5
60039: ST_TO_ADDR
// end ;
60040: LD_VAR 0 4
60044: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60045: LD_INT 0
60047: PPUSH
60048: PPUSH
60049: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60050: LD_VAR 0 1
60054: NOT
60055: PUSH
60056: LD_VAR 0 2
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: LD_INT 4
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: IN
60079: NOT
60080: OR
60081: IFFALSE 60085
// exit ;
60083: GO 60168
// tmp := [ ] ;
60085: LD_ADDR_VAR 0 5
60089: PUSH
60090: EMPTY
60091: ST_TO_ADDR
// for i in units do
60092: LD_ADDR_VAR 0 4
60096: PUSH
60097: LD_VAR 0 1
60101: PUSH
60102: FOR_IN
60103: IFFALSE 60137
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60105: LD_ADDR_VAR 0 5
60109: PUSH
60110: LD_VAR 0 5
60114: PPUSH
60115: LD_VAR 0 4
60119: PPUSH
60120: LD_VAR 0 2
60124: PPUSH
60125: CALL_OW 259
60129: PPUSH
60130: CALL 61528 0 2
60134: ST_TO_ADDR
60135: GO 60102
60137: POP
60138: POP
// if not tmp then
60139: LD_VAR 0 5
60143: NOT
60144: IFFALSE 60148
// exit ;
60146: GO 60168
// result := SortListByListDesc ( units , tmp ) ;
60148: LD_ADDR_VAR 0 3
60152: PUSH
60153: LD_VAR 0 1
60157: PPUSH
60158: LD_VAR 0 5
60162: PPUSH
60163: CALL_OW 77
60167: ST_TO_ADDR
// end ;
60168: LD_VAR 0 3
60172: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60173: LD_INT 0
60175: PPUSH
60176: PPUSH
60177: PPUSH
// result := false ;
60178: LD_ADDR_VAR 0 3
60182: PUSH
60183: LD_INT 0
60185: ST_TO_ADDR
// if not building then
60186: LD_VAR 0 2
60190: NOT
60191: IFFALSE 60195
// exit ;
60193: GO 60333
// x := GetX ( building ) ;
60195: LD_ADDR_VAR 0 4
60199: PUSH
60200: LD_VAR 0 2
60204: PPUSH
60205: CALL_OW 250
60209: ST_TO_ADDR
// y := GetY ( building ) ;
60210: LD_ADDR_VAR 0 5
60214: PUSH
60215: LD_VAR 0 2
60219: PPUSH
60220: CALL_OW 251
60224: ST_TO_ADDR
// if not x or not y then
60225: LD_VAR 0 4
60229: NOT
60230: PUSH
60231: LD_VAR 0 5
60235: NOT
60236: OR
60237: IFFALSE 60241
// exit ;
60239: GO 60333
// if GetTaskList ( unit ) then
60241: LD_VAR 0 1
60245: PPUSH
60246: CALL_OW 437
60250: IFFALSE 60333
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60252: LD_STRING e
60254: PUSH
60255: LD_VAR 0 1
60259: PPUSH
60260: CALL_OW 437
60264: PUSH
60265: LD_INT 1
60267: ARRAY
60268: PUSH
60269: LD_INT 1
60271: ARRAY
60272: EQUAL
60273: PUSH
60274: LD_VAR 0 4
60278: PUSH
60279: LD_VAR 0 1
60283: PPUSH
60284: CALL_OW 437
60288: PUSH
60289: LD_INT 1
60291: ARRAY
60292: PUSH
60293: LD_INT 2
60295: ARRAY
60296: EQUAL
60297: AND
60298: PUSH
60299: LD_VAR 0 5
60303: PUSH
60304: LD_VAR 0 1
60308: PPUSH
60309: CALL_OW 437
60313: PUSH
60314: LD_INT 1
60316: ARRAY
60317: PUSH
60318: LD_INT 3
60320: ARRAY
60321: EQUAL
60322: AND
60323: IFFALSE 60333
// result := true end ;
60325: LD_ADDR_VAR 0 3
60329: PUSH
60330: LD_INT 1
60332: ST_TO_ADDR
// end ;
60333: LD_VAR 0 3
60337: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60338: LD_INT 0
60340: PPUSH
// result := false ;
60341: LD_ADDR_VAR 0 4
60345: PUSH
60346: LD_INT 0
60348: ST_TO_ADDR
// if GetTaskList ( unit ) then
60349: LD_VAR 0 1
60353: PPUSH
60354: CALL_OW 437
60358: IFFALSE 60441
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60360: LD_STRING M
60362: PUSH
60363: LD_VAR 0 1
60367: PPUSH
60368: CALL_OW 437
60372: PUSH
60373: LD_INT 1
60375: ARRAY
60376: PUSH
60377: LD_INT 1
60379: ARRAY
60380: EQUAL
60381: PUSH
60382: LD_VAR 0 2
60386: PUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 437
60396: PUSH
60397: LD_INT 1
60399: ARRAY
60400: PUSH
60401: LD_INT 2
60403: ARRAY
60404: EQUAL
60405: AND
60406: PUSH
60407: LD_VAR 0 3
60411: PUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 437
60421: PUSH
60422: LD_INT 1
60424: ARRAY
60425: PUSH
60426: LD_INT 3
60428: ARRAY
60429: EQUAL
60430: AND
60431: IFFALSE 60441
// result := true ;
60433: LD_ADDR_VAR 0 4
60437: PUSH
60438: LD_INT 1
60440: ST_TO_ADDR
// end ; end ;
60441: LD_VAR 0 4
60445: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60446: LD_INT 0
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
// if not unit or not area then
60452: LD_VAR 0 1
60456: NOT
60457: PUSH
60458: LD_VAR 0 2
60462: NOT
60463: OR
60464: IFFALSE 60468
// exit ;
60466: GO 60631
// tmp := AreaToList ( area , i ) ;
60468: LD_ADDR_VAR 0 6
60472: PUSH
60473: LD_VAR 0 2
60477: PPUSH
60478: LD_VAR 0 5
60482: PPUSH
60483: CALL_OW 517
60487: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60488: LD_ADDR_VAR 0 5
60492: PUSH
60493: DOUBLE
60494: LD_INT 1
60496: DEC
60497: ST_TO_ADDR
60498: LD_VAR 0 6
60502: PUSH
60503: LD_INT 1
60505: ARRAY
60506: PUSH
60507: FOR_TO
60508: IFFALSE 60629
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60510: LD_ADDR_VAR 0 7
60514: PUSH
60515: LD_VAR 0 6
60519: PUSH
60520: LD_INT 1
60522: ARRAY
60523: PUSH
60524: LD_VAR 0 5
60528: ARRAY
60529: PUSH
60530: LD_VAR 0 6
60534: PUSH
60535: LD_INT 2
60537: ARRAY
60538: PUSH
60539: LD_VAR 0 5
60543: ARRAY
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
60549: LD_INT 92
60551: PUSH
60552: LD_VAR 0 7
60556: PUSH
60557: LD_INT 1
60559: ARRAY
60560: PUSH
60561: LD_VAR 0 7
60565: PUSH
60566: LD_INT 2
60568: ARRAY
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: PPUSH
60579: CALL_OW 69
60583: PUSH
60584: LD_INT 0
60586: EQUAL
60587: IFFALSE 60627
// begin PlaceUnitArea ( unit , area , mode ) ;
60589: LD_VAR 0 1
60593: PPUSH
60594: LD_VAR 0 2
60598: PPUSH
60599: LD_VAR 0 3
60603: PPUSH
60604: CALL_OW 49
// result := IsPlaced ( unit ) ;
60608: LD_ADDR_VAR 0 4
60612: PUSH
60613: LD_VAR 0 1
60617: PPUSH
60618: CALL_OW 305
60622: ST_TO_ADDR
// exit ;
60623: POP
60624: POP
60625: GO 60631
// end ; end ;
60627: GO 60507
60629: POP
60630: POP
// end ;
60631: LD_VAR 0 4
60635: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60636: LD_INT 0
60638: PPUSH
60639: PPUSH
60640: PPUSH
// if not side or side > 8 then
60641: LD_VAR 0 1
60645: NOT
60646: PUSH
60647: LD_VAR 0 1
60651: PUSH
60652: LD_INT 8
60654: GREATER
60655: OR
60656: IFFALSE 60660
// exit ;
60658: GO 60847
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60660: LD_ADDR_VAR 0 4
60664: PUSH
60665: LD_INT 22
60667: PUSH
60668: LD_VAR 0 1
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 21
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PPUSH
60691: CALL_OW 69
60695: ST_TO_ADDR
// if not tmp then
60696: LD_VAR 0 4
60700: NOT
60701: IFFALSE 60705
// exit ;
60703: GO 60847
// enable_addtolog := true ;
60705: LD_ADDR_OWVAR 81
60709: PUSH
60710: LD_INT 1
60712: ST_TO_ADDR
// AddToLog ( [ ) ;
60713: LD_STRING [
60715: PPUSH
60716: CALL_OW 561
// for i in tmp do
60720: LD_ADDR_VAR 0 3
60724: PUSH
60725: LD_VAR 0 4
60729: PUSH
60730: FOR_IN
60731: IFFALSE 60838
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60733: LD_STRING [
60735: PUSH
60736: LD_VAR 0 3
60740: PPUSH
60741: CALL_OW 266
60745: STR
60746: PUSH
60747: LD_STRING , 
60749: STR
60750: PUSH
60751: LD_VAR 0 3
60755: PPUSH
60756: CALL_OW 250
60760: STR
60761: PUSH
60762: LD_STRING , 
60764: STR
60765: PUSH
60766: LD_VAR 0 3
60770: PPUSH
60771: CALL_OW 251
60775: STR
60776: PUSH
60777: LD_STRING , 
60779: STR
60780: PUSH
60781: LD_VAR 0 3
60785: PPUSH
60786: CALL_OW 254
60790: STR
60791: PUSH
60792: LD_STRING , 
60794: STR
60795: PUSH
60796: LD_VAR 0 3
60800: PPUSH
60801: LD_INT 1
60803: PPUSH
60804: CALL_OW 268
60808: STR
60809: PUSH
60810: LD_STRING , 
60812: STR
60813: PUSH
60814: LD_VAR 0 3
60818: PPUSH
60819: LD_INT 2
60821: PPUSH
60822: CALL_OW 268
60826: STR
60827: PUSH
60828: LD_STRING ],
60830: STR
60831: PPUSH
60832: CALL_OW 561
// end ;
60836: GO 60730
60838: POP
60839: POP
// AddToLog ( ]; ) ;
60840: LD_STRING ];
60842: PPUSH
60843: CALL_OW 561
// end ;
60847: LD_VAR 0 2
60851: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60852: LD_INT 0
60854: PPUSH
60855: PPUSH
60856: PPUSH
60857: PPUSH
60858: PPUSH
// if not area or not rate or not max then
60859: LD_VAR 0 1
60863: NOT
60864: PUSH
60865: LD_VAR 0 2
60869: NOT
60870: OR
60871: PUSH
60872: LD_VAR 0 4
60876: NOT
60877: OR
60878: IFFALSE 60882
// exit ;
60880: GO 61071
// while 1 do
60882: LD_INT 1
60884: IFFALSE 61071
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60886: LD_ADDR_VAR 0 9
60890: PUSH
60891: LD_VAR 0 1
60895: PPUSH
60896: LD_INT 1
60898: PPUSH
60899: CALL_OW 287
60903: PUSH
60904: LD_INT 10
60906: MUL
60907: ST_TO_ADDR
// r := rate / 10 ;
60908: LD_ADDR_VAR 0 7
60912: PUSH
60913: LD_VAR 0 2
60917: PUSH
60918: LD_INT 10
60920: DIVREAL
60921: ST_TO_ADDR
// time := 1 1$00 ;
60922: LD_ADDR_VAR 0 8
60926: PUSH
60927: LD_INT 2100
60929: ST_TO_ADDR
// if amount < min then
60930: LD_VAR 0 9
60934: PUSH
60935: LD_VAR 0 3
60939: LESS
60940: IFFALSE 60958
// r := r * 2 else
60942: LD_ADDR_VAR 0 7
60946: PUSH
60947: LD_VAR 0 7
60951: PUSH
60952: LD_INT 2
60954: MUL
60955: ST_TO_ADDR
60956: GO 60984
// if amount > max then
60958: LD_VAR 0 9
60962: PUSH
60963: LD_VAR 0 4
60967: GREATER
60968: IFFALSE 60984
// r := r / 2 ;
60970: LD_ADDR_VAR 0 7
60974: PUSH
60975: LD_VAR 0 7
60979: PUSH
60980: LD_INT 2
60982: DIVREAL
60983: ST_TO_ADDR
// time := time / r ;
60984: LD_ADDR_VAR 0 8
60988: PUSH
60989: LD_VAR 0 8
60993: PUSH
60994: LD_VAR 0 7
60998: DIVREAL
60999: ST_TO_ADDR
// if time < 0 then
61000: LD_VAR 0 8
61004: PUSH
61005: LD_INT 0
61007: LESS
61008: IFFALSE 61025
// time := time * - 1 ;
61010: LD_ADDR_VAR 0 8
61014: PUSH
61015: LD_VAR 0 8
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: MUL
61024: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61025: LD_VAR 0 8
61029: PUSH
61030: LD_INT 35
61032: PPUSH
61033: LD_INT 875
61035: PPUSH
61036: CALL_OW 12
61040: PLUS
61041: PPUSH
61042: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61046: LD_INT 1
61048: PPUSH
61049: LD_INT 5
61051: PPUSH
61052: CALL_OW 12
61056: PPUSH
61057: LD_VAR 0 1
61061: PPUSH
61062: LD_INT 1
61064: PPUSH
61065: CALL_OW 55
// end ;
61069: GO 60882
// end ;
61071: LD_VAR 0 5
61075: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61076: LD_INT 0
61078: PPUSH
61079: PPUSH
61080: PPUSH
61081: PPUSH
61082: PPUSH
61083: PPUSH
61084: PPUSH
61085: PPUSH
// if not turrets or not factories then
61086: LD_VAR 0 1
61090: NOT
61091: PUSH
61092: LD_VAR 0 2
61096: NOT
61097: OR
61098: IFFALSE 61102
// exit ;
61100: GO 61409
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61102: LD_ADDR_VAR 0 10
61106: PUSH
61107: LD_INT 5
61109: PUSH
61110: LD_INT 6
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 4
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 5
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 24
61144: PUSH
61145: LD_INT 25
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 23
61154: PUSH
61155: LD_INT 27
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 42
61168: PUSH
61169: LD_INT 43
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 44
61178: PUSH
61179: LD_INT 46
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 45
61188: PUSH
61189: LD_INT 47
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// result := [ ] ;
61206: LD_ADDR_VAR 0 3
61210: PUSH
61211: EMPTY
61212: ST_TO_ADDR
// for i in turrets do
61213: LD_ADDR_VAR 0 4
61217: PUSH
61218: LD_VAR 0 1
61222: PUSH
61223: FOR_IN
61224: IFFALSE 61407
// begin nat := GetNation ( i ) ;
61226: LD_ADDR_VAR 0 7
61230: PUSH
61231: LD_VAR 0 4
61235: PPUSH
61236: CALL_OW 248
61240: ST_TO_ADDR
// weapon := 0 ;
61241: LD_ADDR_VAR 0 8
61245: PUSH
61246: LD_INT 0
61248: ST_TO_ADDR
// if not nat then
61249: LD_VAR 0 7
61253: NOT
61254: IFFALSE 61258
// continue ;
61256: GO 61223
// for j in list [ nat ] do
61258: LD_ADDR_VAR 0 5
61262: PUSH
61263: LD_VAR 0 10
61267: PUSH
61268: LD_VAR 0 7
61272: ARRAY
61273: PUSH
61274: FOR_IN
61275: IFFALSE 61316
// if GetBWeapon ( i ) = j [ 1 ] then
61277: LD_VAR 0 4
61281: PPUSH
61282: CALL_OW 269
61286: PUSH
61287: LD_VAR 0 5
61291: PUSH
61292: LD_INT 1
61294: ARRAY
61295: EQUAL
61296: IFFALSE 61314
// begin weapon := j [ 2 ] ;
61298: LD_ADDR_VAR 0 8
61302: PUSH
61303: LD_VAR 0 5
61307: PUSH
61308: LD_INT 2
61310: ARRAY
61311: ST_TO_ADDR
// break ;
61312: GO 61316
// end ;
61314: GO 61274
61316: POP
61317: POP
// if not weapon then
61318: LD_VAR 0 8
61322: NOT
61323: IFFALSE 61327
// continue ;
61325: GO 61223
// for k in factories do
61327: LD_ADDR_VAR 0 6
61331: PUSH
61332: LD_VAR 0 2
61336: PUSH
61337: FOR_IN
61338: IFFALSE 61403
// begin weapons := AvailableWeaponList ( k ) ;
61340: LD_ADDR_VAR 0 9
61344: PUSH
61345: LD_VAR 0 6
61349: PPUSH
61350: CALL_OW 478
61354: ST_TO_ADDR
// if not weapons then
61355: LD_VAR 0 9
61359: NOT
61360: IFFALSE 61364
// continue ;
61362: GO 61337
// if weapon in weapons then
61364: LD_VAR 0 8
61368: PUSH
61369: LD_VAR 0 9
61373: IN
61374: IFFALSE 61401
// begin result := [ i , weapon ] ;
61376: LD_ADDR_VAR 0 3
61380: PUSH
61381: LD_VAR 0 4
61385: PUSH
61386: LD_VAR 0 8
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// exit ;
61395: POP
61396: POP
61397: POP
61398: POP
61399: GO 61409
// end ; end ;
61401: GO 61337
61403: POP
61404: POP
// end ;
61405: GO 61223
61407: POP
61408: POP
// end ;
61409: LD_VAR 0 3
61413: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61414: LD_INT 0
61416: PPUSH
// if not side or side > 8 then
61417: LD_VAR 0 3
61421: NOT
61422: PUSH
61423: LD_VAR 0 3
61427: PUSH
61428: LD_INT 8
61430: GREATER
61431: OR
61432: IFFALSE 61436
// exit ;
61434: GO 61495
// if not range then
61436: LD_VAR 0 4
61440: NOT
61441: IFFALSE 61452
// range := - 12 ;
61443: LD_ADDR_VAR 0 4
61447: PUSH
61448: LD_INT 12
61450: NEG
61451: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61452: LD_VAR 0 1
61456: PPUSH
61457: LD_VAR 0 2
61461: PPUSH
61462: LD_VAR 0 3
61466: PPUSH
61467: LD_VAR 0 4
61471: PPUSH
61472: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61476: LD_VAR 0 1
61480: PPUSH
61481: LD_VAR 0 2
61485: PPUSH
61486: LD_VAR 0 3
61490: PPUSH
61491: CALL_OW 331
// end ;
61495: LD_VAR 0 5
61499: RET
// export function Video ( mode ) ; begin
61500: LD_INT 0
61502: PPUSH
// ingame_video = mode ;
61503: LD_ADDR_OWVAR 52
61507: PUSH
61508: LD_VAR 0 1
61512: ST_TO_ADDR
// interface_hidden = mode ;
61513: LD_ADDR_OWVAR 54
61517: PUSH
61518: LD_VAR 0 1
61522: ST_TO_ADDR
// end ;
61523: LD_VAR 0 2
61527: RET
// export function Join ( array , element ) ; begin
61528: LD_INT 0
61530: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61531: LD_ADDR_VAR 0 3
61535: PUSH
61536: LD_VAR 0 1
61540: PPUSH
61541: LD_VAR 0 1
61545: PUSH
61546: LD_INT 1
61548: PLUS
61549: PPUSH
61550: LD_VAR 0 2
61554: PPUSH
61555: CALL_OW 1
61559: ST_TO_ADDR
// end ;
61560: LD_VAR 0 3
61564: RET
// export function JoinUnion ( array , element ) ; begin
61565: LD_INT 0
61567: PPUSH
// result := array union element ;
61568: LD_ADDR_VAR 0 3
61572: PUSH
61573: LD_VAR 0 1
61577: PUSH
61578: LD_VAR 0 2
61582: UNION
61583: ST_TO_ADDR
// end ;
61584: LD_VAR 0 3
61588: RET
// export function GetBehemoths ( side ) ; begin
61589: LD_INT 0
61591: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61592: LD_ADDR_VAR 0 2
61596: PUSH
61597: LD_INT 22
61599: PUSH
61600: LD_VAR 0 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 31
61611: PUSH
61612: LD_INT 25
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PPUSH
61623: CALL_OW 69
61627: ST_TO_ADDR
// end ;
61628: LD_VAR 0 2
61632: RET
// export function Shuffle ( array ) ; var i , index ; begin
61633: LD_INT 0
61635: PPUSH
61636: PPUSH
61637: PPUSH
// result := [ ] ;
61638: LD_ADDR_VAR 0 2
61642: PUSH
61643: EMPTY
61644: ST_TO_ADDR
// if not array then
61645: LD_VAR 0 1
61649: NOT
61650: IFFALSE 61654
// exit ;
61652: GO 61753
// Randomize ;
61654: CALL_OW 10
// for i = array downto 1 do
61658: LD_ADDR_VAR 0 3
61662: PUSH
61663: DOUBLE
61664: LD_VAR 0 1
61668: INC
61669: ST_TO_ADDR
61670: LD_INT 1
61672: PUSH
61673: FOR_DOWNTO
61674: IFFALSE 61751
// begin index := rand ( 1 , array ) ;
61676: LD_ADDR_VAR 0 4
61680: PUSH
61681: LD_INT 1
61683: PPUSH
61684: LD_VAR 0 1
61688: PPUSH
61689: CALL_OW 12
61693: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61694: LD_ADDR_VAR 0 2
61698: PUSH
61699: LD_VAR 0 2
61703: PPUSH
61704: LD_VAR 0 2
61708: PUSH
61709: LD_INT 1
61711: PLUS
61712: PPUSH
61713: LD_VAR 0 1
61717: PUSH
61718: LD_VAR 0 4
61722: ARRAY
61723: PPUSH
61724: CALL_OW 2
61728: ST_TO_ADDR
// array := Delete ( array , index ) ;
61729: LD_ADDR_VAR 0 1
61733: PUSH
61734: LD_VAR 0 1
61738: PPUSH
61739: LD_VAR 0 4
61743: PPUSH
61744: CALL_OW 3
61748: ST_TO_ADDR
// end ;
61749: GO 61673
61751: POP
61752: POP
// end ;
61753: LD_VAR 0 2
61757: RET
// export function GetBaseMaterials ( base ) ; begin
61758: LD_INT 0
61760: PPUSH
// result := [ 0 , 0 , 0 ] ;
61761: LD_ADDR_VAR 0 2
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: ST_TO_ADDR
// if not base then
61780: LD_VAR 0 1
61784: NOT
61785: IFFALSE 61789
// exit ;
61787: GO 61838
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61789: LD_ADDR_VAR 0 2
61793: PUSH
61794: LD_VAR 0 1
61798: PPUSH
61799: LD_INT 1
61801: PPUSH
61802: CALL_OW 275
61806: PUSH
61807: LD_VAR 0 1
61811: PPUSH
61812: LD_INT 2
61814: PPUSH
61815: CALL_OW 275
61819: PUSH
61820: LD_VAR 0 1
61824: PPUSH
61825: LD_INT 3
61827: PPUSH
61828: CALL_OW 275
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: ST_TO_ADDR
// end ;
61838: LD_VAR 0 2
61842: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61843: LD_INT 0
61845: PPUSH
61846: PPUSH
// result := array ;
61847: LD_ADDR_VAR 0 3
61851: PUSH
61852: LD_VAR 0 1
61856: ST_TO_ADDR
// if size >= result then
61857: LD_VAR 0 2
61861: PUSH
61862: LD_VAR 0 3
61866: GREATEREQUAL
61867: IFFALSE 61871
// exit ;
61869: GO 61921
// if size then
61871: LD_VAR 0 2
61875: IFFALSE 61921
// for i := array downto size do
61877: LD_ADDR_VAR 0 4
61881: PUSH
61882: DOUBLE
61883: LD_VAR 0 1
61887: INC
61888: ST_TO_ADDR
61889: LD_VAR 0 2
61893: PUSH
61894: FOR_DOWNTO
61895: IFFALSE 61919
// result := Delete ( result , result ) ;
61897: LD_ADDR_VAR 0 3
61901: PUSH
61902: LD_VAR 0 3
61906: PPUSH
61907: LD_VAR 0 3
61911: PPUSH
61912: CALL_OW 3
61916: ST_TO_ADDR
61917: GO 61894
61919: POP
61920: POP
// end ;
61921: LD_VAR 0 3
61925: RET
// export function ComExit ( unit ) ; var tmp ; begin
61926: LD_INT 0
61928: PPUSH
61929: PPUSH
// if not IsInUnit ( unit ) then
61930: LD_VAR 0 1
61934: PPUSH
61935: CALL_OW 310
61939: NOT
61940: IFFALSE 61944
// exit ;
61942: GO 62004
// tmp := IsInUnit ( unit ) ;
61944: LD_ADDR_VAR 0 3
61948: PUSH
61949: LD_VAR 0 1
61953: PPUSH
61954: CALL_OW 310
61958: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61959: LD_VAR 0 3
61963: PPUSH
61964: CALL_OW 247
61968: PUSH
61969: LD_INT 2
61971: EQUAL
61972: IFFALSE 61985
// ComExitVehicle ( unit ) else
61974: LD_VAR 0 1
61978: PPUSH
61979: CALL_OW 121
61983: GO 61994
// ComExitBuilding ( unit ) ;
61985: LD_VAR 0 1
61989: PPUSH
61990: CALL_OW 122
// result := tmp ;
61994: LD_ADDR_VAR 0 2
61998: PUSH
61999: LD_VAR 0 3
62003: ST_TO_ADDR
// end ;
62004: LD_VAR 0 2
62008: RET
// export function ComExitAll ( units ) ; var i ; begin
62009: LD_INT 0
62011: PPUSH
62012: PPUSH
// if not units then
62013: LD_VAR 0 1
62017: NOT
62018: IFFALSE 62022
// exit ;
62020: GO 62048
// for i in units do
62022: LD_ADDR_VAR 0 3
62026: PUSH
62027: LD_VAR 0 1
62031: PUSH
62032: FOR_IN
62033: IFFALSE 62046
// ComExit ( i ) ;
62035: LD_VAR 0 3
62039: PPUSH
62040: CALL 61926 0 1
62044: GO 62032
62046: POP
62047: POP
// end ;
62048: LD_VAR 0 2
62052: RET
// export function ResetHc ; begin
62053: LD_INT 0
62055: PPUSH
// InitHc ;
62056: CALL_OW 19
// hc_importance := 0 ;
62060: LD_ADDR_OWVAR 32
62064: PUSH
62065: LD_INT 0
62067: ST_TO_ADDR
// end ;
62068: LD_VAR 0 1
62072: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62073: LD_INT 0
62075: PPUSH
62076: PPUSH
62077: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62078: LD_ADDR_VAR 0 6
62082: PUSH
62083: LD_VAR 0 1
62087: PUSH
62088: LD_VAR 0 3
62092: PLUS
62093: PUSH
62094: LD_INT 2
62096: DIV
62097: ST_TO_ADDR
// if _x < 0 then
62098: LD_VAR 0 6
62102: PUSH
62103: LD_INT 0
62105: LESS
62106: IFFALSE 62123
// _x := _x * - 1 ;
62108: LD_ADDR_VAR 0 6
62112: PUSH
62113: LD_VAR 0 6
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: MUL
62122: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62123: LD_ADDR_VAR 0 7
62127: PUSH
62128: LD_VAR 0 2
62132: PUSH
62133: LD_VAR 0 4
62137: PLUS
62138: PUSH
62139: LD_INT 2
62141: DIV
62142: ST_TO_ADDR
// if _y < 0 then
62143: LD_VAR 0 7
62147: PUSH
62148: LD_INT 0
62150: LESS
62151: IFFALSE 62168
// _y := _y * - 1 ;
62153: LD_ADDR_VAR 0 7
62157: PUSH
62158: LD_VAR 0 7
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: MUL
62167: ST_TO_ADDR
// result := [ _x , _y ] ;
62168: LD_ADDR_VAR 0 5
62172: PUSH
62173: LD_VAR 0 6
62177: PUSH
62178: LD_VAR 0 7
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: ST_TO_ADDR
// end ;
62187: LD_VAR 0 5
62191: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62192: LD_INT 0
62194: PPUSH
62195: PPUSH
62196: PPUSH
62197: PPUSH
// task := GetTaskList ( unit ) ;
62198: LD_ADDR_VAR 0 7
62202: PUSH
62203: LD_VAR 0 1
62207: PPUSH
62208: CALL_OW 437
62212: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62213: LD_VAR 0 7
62217: NOT
62218: PUSH
62219: LD_VAR 0 1
62223: PPUSH
62224: LD_VAR 0 2
62228: PPUSH
62229: CALL_OW 308
62233: NOT
62234: AND
62235: IFFALSE 62239
// exit ;
62237: GO 62357
// if IsInArea ( unit , area ) then
62239: LD_VAR 0 1
62243: PPUSH
62244: LD_VAR 0 2
62248: PPUSH
62249: CALL_OW 308
62253: IFFALSE 62271
// begin ComMoveToArea ( unit , goAway ) ;
62255: LD_VAR 0 1
62259: PPUSH
62260: LD_VAR 0 3
62264: PPUSH
62265: CALL_OW 113
// exit ;
62269: GO 62357
// end ; if task [ 1 ] [ 1 ] <> M then
62271: LD_VAR 0 7
62275: PUSH
62276: LD_INT 1
62278: ARRAY
62279: PUSH
62280: LD_INT 1
62282: ARRAY
62283: PUSH
62284: LD_STRING M
62286: NONEQUAL
62287: IFFALSE 62291
// exit ;
62289: GO 62357
// x := task [ 1 ] [ 2 ] ;
62291: LD_ADDR_VAR 0 5
62295: PUSH
62296: LD_VAR 0 7
62300: PUSH
62301: LD_INT 1
62303: ARRAY
62304: PUSH
62305: LD_INT 2
62307: ARRAY
62308: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62309: LD_ADDR_VAR 0 6
62313: PUSH
62314: LD_VAR 0 7
62318: PUSH
62319: LD_INT 1
62321: ARRAY
62322: PUSH
62323: LD_INT 3
62325: ARRAY
62326: ST_TO_ADDR
// if InArea ( x , y , area ) then
62327: LD_VAR 0 5
62331: PPUSH
62332: LD_VAR 0 6
62336: PPUSH
62337: LD_VAR 0 2
62341: PPUSH
62342: CALL_OW 309
62346: IFFALSE 62357
// ComStop ( unit ) ;
62348: LD_VAR 0 1
62352: PPUSH
62353: CALL_OW 141
// end ;
62357: LD_VAR 0 4
62361: RET
// export function Abs ( value ) ; begin
62362: LD_INT 0
62364: PPUSH
// result := value ;
62365: LD_ADDR_VAR 0 2
62369: PUSH
62370: LD_VAR 0 1
62374: ST_TO_ADDR
// if value < 0 then
62375: LD_VAR 0 1
62379: PUSH
62380: LD_INT 0
62382: LESS
62383: IFFALSE 62400
// result := value * - 1 ;
62385: LD_ADDR_VAR 0 2
62389: PUSH
62390: LD_VAR 0 1
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: MUL
62399: ST_TO_ADDR
// end ;
62400: LD_VAR 0 2
62404: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62405: LD_INT 0
62407: PPUSH
62408: PPUSH
62409: PPUSH
62410: PPUSH
62411: PPUSH
62412: PPUSH
62413: PPUSH
62414: PPUSH
// if not unit or not building then
62415: LD_VAR 0 1
62419: NOT
62420: PUSH
62421: LD_VAR 0 2
62425: NOT
62426: OR
62427: IFFALSE 62431
// exit ;
62429: GO 62657
// x := GetX ( building ) ;
62431: LD_ADDR_VAR 0 4
62435: PUSH
62436: LD_VAR 0 2
62440: PPUSH
62441: CALL_OW 250
62445: ST_TO_ADDR
// y := GetY ( building ) ;
62446: LD_ADDR_VAR 0 6
62450: PUSH
62451: LD_VAR 0 2
62455: PPUSH
62456: CALL_OW 251
62460: ST_TO_ADDR
// d := GetDir ( building ) ;
62461: LD_ADDR_VAR 0 8
62465: PUSH
62466: LD_VAR 0 2
62470: PPUSH
62471: CALL_OW 254
62475: ST_TO_ADDR
// r := 4 ;
62476: LD_ADDR_VAR 0 9
62480: PUSH
62481: LD_INT 4
62483: ST_TO_ADDR
// for i := 1 to 5 do
62484: LD_ADDR_VAR 0 10
62488: PUSH
62489: DOUBLE
62490: LD_INT 1
62492: DEC
62493: ST_TO_ADDR
62494: LD_INT 5
62496: PUSH
62497: FOR_TO
62498: IFFALSE 62655
// begin _x := ShiftX ( x , d , r + i ) ;
62500: LD_ADDR_VAR 0 5
62504: PUSH
62505: LD_VAR 0 4
62509: PPUSH
62510: LD_VAR 0 8
62514: PPUSH
62515: LD_VAR 0 9
62519: PUSH
62520: LD_VAR 0 10
62524: PLUS
62525: PPUSH
62526: CALL_OW 272
62530: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62531: LD_ADDR_VAR 0 7
62535: PUSH
62536: LD_VAR 0 6
62540: PPUSH
62541: LD_VAR 0 8
62545: PPUSH
62546: LD_VAR 0 9
62550: PUSH
62551: LD_VAR 0 10
62555: PLUS
62556: PPUSH
62557: CALL_OW 273
62561: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62562: LD_VAR 0 5
62566: PPUSH
62567: LD_VAR 0 7
62571: PPUSH
62572: CALL_OW 488
62576: PUSH
62577: LD_VAR 0 5
62581: PPUSH
62582: LD_VAR 0 7
62586: PPUSH
62587: CALL_OW 428
62591: PPUSH
62592: CALL_OW 247
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: IN
62607: NOT
62608: AND
62609: IFFALSE 62653
// begin ComMoveXY ( unit , _x , _y ) ;
62611: LD_VAR 0 1
62615: PPUSH
62616: LD_VAR 0 5
62620: PPUSH
62621: LD_VAR 0 7
62625: PPUSH
62626: CALL_OW 111
// result := [ _x , _y ] ;
62630: LD_ADDR_VAR 0 3
62634: PUSH
62635: LD_VAR 0 5
62639: PUSH
62640: LD_VAR 0 7
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// exit ;
62649: POP
62650: POP
62651: GO 62657
// end ; end ;
62653: GO 62497
62655: POP
62656: POP
// end ;
62657: LD_VAR 0 3
62661: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62662: LD_INT 0
62664: PPUSH
62665: PPUSH
62666: PPUSH
// result := 0 ;
62667: LD_ADDR_VAR 0 3
62671: PUSH
62672: LD_INT 0
62674: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62675: LD_VAR 0 1
62679: PUSH
62680: LD_INT 0
62682: LESS
62683: PUSH
62684: LD_VAR 0 1
62688: PUSH
62689: LD_INT 8
62691: GREATER
62692: OR
62693: PUSH
62694: LD_VAR 0 2
62698: PUSH
62699: LD_INT 0
62701: LESS
62702: OR
62703: PUSH
62704: LD_VAR 0 2
62708: PUSH
62709: LD_INT 8
62711: GREATER
62712: OR
62713: IFFALSE 62717
// exit ;
62715: GO 62792
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62717: LD_ADDR_VAR 0 4
62721: PUSH
62722: LD_INT 22
62724: PUSH
62725: LD_VAR 0 2
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PPUSH
62734: CALL_OW 69
62738: PUSH
62739: FOR_IN
62740: IFFALSE 62790
// begin un := UnitShoot ( i ) ;
62742: LD_ADDR_VAR 0 5
62746: PUSH
62747: LD_VAR 0 4
62751: PPUSH
62752: CALL_OW 504
62756: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62757: LD_VAR 0 5
62761: PPUSH
62762: CALL_OW 255
62766: PUSH
62767: LD_VAR 0 1
62771: EQUAL
62772: IFFALSE 62788
// begin result := un ;
62774: LD_ADDR_VAR 0 3
62778: PUSH
62779: LD_VAR 0 5
62783: ST_TO_ADDR
// exit ;
62784: POP
62785: POP
62786: GO 62792
// end ; end ;
62788: GO 62739
62790: POP
62791: POP
// end ;
62792: LD_VAR 0 3
62796: RET
// export function GetCargoBay ( units ) ; begin
62797: LD_INT 0
62799: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62800: LD_ADDR_VAR 0 2
62804: PUSH
62805: LD_VAR 0 1
62809: PPUSH
62810: LD_INT 2
62812: PUSH
62813: LD_INT 34
62815: PUSH
62816: LD_INT 12
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 34
62825: PUSH
62826: LD_INT 51
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 34
62835: PUSH
62836: LD_INT 32
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 34
62845: PUSH
62846: LD_INT 89
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: PPUSH
62860: CALL_OW 72
62864: ST_TO_ADDR
// end ;
62865: LD_VAR 0 2
62869: RET
// export function Negate ( value ) ; begin
62870: LD_INT 0
62872: PPUSH
// result := not value ;
62873: LD_ADDR_VAR 0 2
62877: PUSH
62878: LD_VAR 0 1
62882: NOT
62883: ST_TO_ADDR
// end ;
62884: LD_VAR 0 2
62888: RET
// export function Inc ( value ) ; begin
62889: LD_INT 0
62891: PPUSH
// result := value + 1 ;
62892: LD_ADDR_VAR 0 2
62896: PUSH
62897: LD_VAR 0 1
62901: PUSH
62902: LD_INT 1
62904: PLUS
62905: ST_TO_ADDR
// end ;
62906: LD_VAR 0 2
62910: RET
// export function Dec ( value ) ; begin
62911: LD_INT 0
62913: PPUSH
// result := value - 1 ;
62914: LD_ADDR_VAR 0 2
62918: PUSH
62919: LD_VAR 0 1
62923: PUSH
62924: LD_INT 1
62926: MINUS
62927: ST_TO_ADDR
// end ;
62928: LD_VAR 0 2
62932: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62933: LD_INT 0
62935: PPUSH
62936: PPUSH
62937: PPUSH
62938: PPUSH
62939: PPUSH
62940: PPUSH
62941: PPUSH
62942: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62943: LD_VAR 0 1
62947: PPUSH
62948: LD_VAR 0 2
62952: PPUSH
62953: CALL_OW 488
62957: NOT
62958: PUSH
62959: LD_VAR 0 3
62963: PPUSH
62964: LD_VAR 0 4
62968: PPUSH
62969: CALL_OW 488
62973: NOT
62974: OR
62975: IFFALSE 62988
// begin result := - 1 ;
62977: LD_ADDR_VAR 0 5
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: ST_TO_ADDR
// exit ;
62986: GO 63223
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62988: LD_ADDR_VAR 0 12
62992: PUSH
62993: LD_VAR 0 1
62997: PPUSH
62998: LD_VAR 0 2
63002: PPUSH
63003: LD_VAR 0 3
63007: PPUSH
63008: LD_VAR 0 4
63012: PPUSH
63013: CALL 62073 0 4
63017: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63018: LD_ADDR_VAR 0 11
63022: PUSH
63023: LD_VAR 0 1
63027: PPUSH
63028: LD_VAR 0 2
63032: PPUSH
63033: LD_VAR 0 12
63037: PUSH
63038: LD_INT 1
63040: ARRAY
63041: PPUSH
63042: LD_VAR 0 12
63046: PUSH
63047: LD_INT 2
63049: ARRAY
63050: PPUSH
63051: CALL_OW 298
63055: ST_TO_ADDR
// distance := 9999 ;
63056: LD_ADDR_VAR 0 10
63060: PUSH
63061: LD_INT 9999
63063: ST_TO_ADDR
// for i := 0 to 5 do
63064: LD_ADDR_VAR 0 6
63068: PUSH
63069: DOUBLE
63070: LD_INT 0
63072: DEC
63073: ST_TO_ADDR
63074: LD_INT 5
63076: PUSH
63077: FOR_TO
63078: IFFALSE 63221
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63080: LD_ADDR_VAR 0 7
63084: PUSH
63085: LD_VAR 0 1
63089: PPUSH
63090: LD_VAR 0 6
63094: PPUSH
63095: LD_VAR 0 11
63099: PPUSH
63100: CALL_OW 272
63104: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63105: LD_ADDR_VAR 0 8
63109: PUSH
63110: LD_VAR 0 2
63114: PPUSH
63115: LD_VAR 0 6
63119: PPUSH
63120: LD_VAR 0 11
63124: PPUSH
63125: CALL_OW 273
63129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63130: LD_VAR 0 7
63134: PPUSH
63135: LD_VAR 0 8
63139: PPUSH
63140: CALL_OW 488
63144: NOT
63145: IFFALSE 63149
// continue ;
63147: GO 63077
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63149: LD_ADDR_VAR 0 9
63153: PUSH
63154: LD_VAR 0 12
63158: PUSH
63159: LD_INT 1
63161: ARRAY
63162: PPUSH
63163: LD_VAR 0 12
63167: PUSH
63168: LD_INT 2
63170: ARRAY
63171: PPUSH
63172: LD_VAR 0 7
63176: PPUSH
63177: LD_VAR 0 8
63181: PPUSH
63182: CALL_OW 298
63186: ST_TO_ADDR
// if tmp < distance then
63187: LD_VAR 0 9
63191: PUSH
63192: LD_VAR 0 10
63196: LESS
63197: IFFALSE 63219
// begin result := i ;
63199: LD_ADDR_VAR 0 5
63203: PUSH
63204: LD_VAR 0 6
63208: ST_TO_ADDR
// distance := tmp ;
63209: LD_ADDR_VAR 0 10
63213: PUSH
63214: LD_VAR 0 9
63218: ST_TO_ADDR
// end ; end ;
63219: GO 63077
63221: POP
63222: POP
// end ;
63223: LD_VAR 0 5
63227: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63228: LD_INT 0
63230: PPUSH
63231: PPUSH
// if not driver or not IsInUnit ( driver ) then
63232: LD_VAR 0 1
63236: NOT
63237: PUSH
63238: LD_VAR 0 1
63242: PPUSH
63243: CALL_OW 310
63247: NOT
63248: OR
63249: IFFALSE 63253
// exit ;
63251: GO 63343
// vehicle := IsInUnit ( driver ) ;
63253: LD_ADDR_VAR 0 3
63257: PUSH
63258: LD_VAR 0 1
63262: PPUSH
63263: CALL_OW 310
63267: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63268: LD_VAR 0 1
63272: PPUSH
63273: LD_STRING \
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: PUSH
63303: LD_STRING E
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: LD_VAR 0 3
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PPUSH
63339: CALL_OW 446
// end ;
63343: LD_VAR 0 2
63347: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63348: LD_INT 0
63350: PPUSH
63351: PPUSH
// if not driver or not IsInUnit ( driver ) then
63352: LD_VAR 0 1
63356: NOT
63357: PUSH
63358: LD_VAR 0 1
63362: PPUSH
63363: CALL_OW 310
63367: NOT
63368: OR
63369: IFFALSE 63373
// exit ;
63371: GO 63463
// vehicle := IsInUnit ( driver ) ;
63373: LD_ADDR_VAR 0 3
63377: PUSH
63378: LD_VAR 0 1
63382: PPUSH
63383: CALL_OW 310
63387: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63388: LD_VAR 0 1
63392: PPUSH
63393: LD_STRING \
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: PUSH
63423: LD_STRING E
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_VAR 0 3
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PPUSH
63459: CALL_OW 447
// end ;
63463: LD_VAR 0 2
63467: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63468: LD_INT 0
63470: PPUSH
63471: PPUSH
63472: PPUSH
// tmp := [ ] ;
63473: LD_ADDR_VAR 0 5
63477: PUSH
63478: EMPTY
63479: ST_TO_ADDR
// for i in units do
63480: LD_ADDR_VAR 0 4
63484: PUSH
63485: LD_VAR 0 1
63489: PUSH
63490: FOR_IN
63491: IFFALSE 63529
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63493: LD_ADDR_VAR 0 5
63497: PUSH
63498: LD_VAR 0 5
63502: PPUSH
63503: LD_VAR 0 5
63507: PUSH
63508: LD_INT 1
63510: PLUS
63511: PPUSH
63512: LD_VAR 0 4
63516: PPUSH
63517: CALL_OW 256
63521: PPUSH
63522: CALL_OW 2
63526: ST_TO_ADDR
63527: GO 63490
63529: POP
63530: POP
// if not tmp then
63531: LD_VAR 0 5
63535: NOT
63536: IFFALSE 63540
// exit ;
63538: GO 63588
// if asc then
63540: LD_VAR 0 2
63544: IFFALSE 63568
// result := SortListByListAsc ( units , tmp ) else
63546: LD_ADDR_VAR 0 3
63550: PUSH
63551: LD_VAR 0 1
63555: PPUSH
63556: LD_VAR 0 5
63560: PPUSH
63561: CALL_OW 76
63565: ST_TO_ADDR
63566: GO 63588
// result := SortListByListDesc ( units , tmp ) ;
63568: LD_ADDR_VAR 0 3
63572: PUSH
63573: LD_VAR 0 1
63577: PPUSH
63578: LD_VAR 0 5
63582: PPUSH
63583: CALL_OW 77
63587: ST_TO_ADDR
// end ;
63588: LD_VAR 0 3
63592: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63593: LD_INT 0
63595: PPUSH
63596: PPUSH
// task := GetTaskList ( mech ) ;
63597: LD_ADDR_VAR 0 4
63601: PUSH
63602: LD_VAR 0 1
63606: PPUSH
63607: CALL_OW 437
63611: ST_TO_ADDR
// if not task then
63612: LD_VAR 0 4
63616: NOT
63617: IFFALSE 63621
// exit ;
63619: GO 63663
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63621: LD_ADDR_VAR 0 3
63625: PUSH
63626: LD_VAR 0 4
63630: PUSH
63631: LD_INT 1
63633: ARRAY
63634: PUSH
63635: LD_INT 1
63637: ARRAY
63638: PUSH
63639: LD_STRING r
63641: EQUAL
63642: PUSH
63643: LD_VAR 0 4
63647: PUSH
63648: LD_INT 1
63650: ARRAY
63651: PUSH
63652: LD_INT 4
63654: ARRAY
63655: PUSH
63656: LD_VAR 0 2
63660: EQUAL
63661: AND
63662: ST_TO_ADDR
// end ;
63663: LD_VAR 0 3
63667: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63668: LD_INT 0
63670: PPUSH
// SetDir ( unit , d ) ;
63671: LD_VAR 0 1
63675: PPUSH
63676: LD_VAR 0 4
63680: PPUSH
63681: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63685: LD_VAR 0 1
63689: PPUSH
63690: LD_VAR 0 2
63694: PPUSH
63695: LD_VAR 0 3
63699: PPUSH
63700: LD_VAR 0 5
63704: PPUSH
63705: CALL_OW 48
// end ;
63709: LD_VAR 0 6
63713: RET
// export function ToNaturalNumber ( number ) ; begin
63714: LD_INT 0
63716: PPUSH
// result := number div 1 ;
63717: LD_ADDR_VAR 0 2
63721: PUSH
63722: LD_VAR 0 1
63726: PUSH
63727: LD_INT 1
63729: DIV
63730: ST_TO_ADDR
// if number < 0 then
63731: LD_VAR 0 1
63735: PUSH
63736: LD_INT 0
63738: LESS
63739: IFFALSE 63749
// result := 0 ;
63741: LD_ADDR_VAR 0 2
63745: PUSH
63746: LD_INT 0
63748: ST_TO_ADDR
// end ;
63749: LD_VAR 0 2
63753: RET
// export function SortByClass ( units , class ) ; var un ; begin
63754: LD_INT 0
63756: PPUSH
63757: PPUSH
// if not units or not class then
63758: LD_VAR 0 1
63762: NOT
63763: PUSH
63764: LD_VAR 0 2
63768: NOT
63769: OR
63770: IFFALSE 63774
// exit ;
63772: GO 63869
// result := [ ] ;
63774: LD_ADDR_VAR 0 3
63778: PUSH
63779: EMPTY
63780: ST_TO_ADDR
// for un in units do
63781: LD_ADDR_VAR 0 4
63785: PUSH
63786: LD_VAR 0 1
63790: PUSH
63791: FOR_IN
63792: IFFALSE 63867
// if GetClass ( un ) = class then
63794: LD_VAR 0 4
63798: PPUSH
63799: CALL_OW 257
63803: PUSH
63804: LD_VAR 0 2
63808: EQUAL
63809: IFFALSE 63836
// result := Insert ( result , 1 , un ) else
63811: LD_ADDR_VAR 0 3
63815: PUSH
63816: LD_VAR 0 3
63820: PPUSH
63821: LD_INT 1
63823: PPUSH
63824: LD_VAR 0 4
63828: PPUSH
63829: CALL_OW 2
63833: ST_TO_ADDR
63834: GO 63865
// result := Replace ( result , result + 1 , un ) ;
63836: LD_ADDR_VAR 0 3
63840: PUSH
63841: LD_VAR 0 3
63845: PPUSH
63846: LD_VAR 0 3
63850: PUSH
63851: LD_INT 1
63853: PLUS
63854: PPUSH
63855: LD_VAR 0 4
63859: PPUSH
63860: CALL_OW 1
63864: ST_TO_ADDR
63865: GO 63791
63867: POP
63868: POP
// end ;
63869: LD_VAR 0 3
63873: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63874: LD_INT 0
63876: PPUSH
63877: PPUSH
63878: PPUSH
63879: PPUSH
63880: PPUSH
63881: PPUSH
63882: PPUSH
// result := [ ] ;
63883: LD_ADDR_VAR 0 4
63887: PUSH
63888: EMPTY
63889: ST_TO_ADDR
// if x - r < 0 then
63890: LD_VAR 0 1
63894: PUSH
63895: LD_VAR 0 3
63899: MINUS
63900: PUSH
63901: LD_INT 0
63903: LESS
63904: IFFALSE 63916
// min_x := 0 else
63906: LD_ADDR_VAR 0 8
63910: PUSH
63911: LD_INT 0
63913: ST_TO_ADDR
63914: GO 63932
// min_x := x - r ;
63916: LD_ADDR_VAR 0 8
63920: PUSH
63921: LD_VAR 0 1
63925: PUSH
63926: LD_VAR 0 3
63930: MINUS
63931: ST_TO_ADDR
// if y - r < 0 then
63932: LD_VAR 0 2
63936: PUSH
63937: LD_VAR 0 3
63941: MINUS
63942: PUSH
63943: LD_INT 0
63945: LESS
63946: IFFALSE 63958
// min_y := 0 else
63948: LD_ADDR_VAR 0 7
63952: PUSH
63953: LD_INT 0
63955: ST_TO_ADDR
63956: GO 63974
// min_y := y - r ;
63958: LD_ADDR_VAR 0 7
63962: PUSH
63963: LD_VAR 0 2
63967: PUSH
63968: LD_VAR 0 3
63972: MINUS
63973: ST_TO_ADDR
// max_x := x + r ;
63974: LD_ADDR_VAR 0 9
63978: PUSH
63979: LD_VAR 0 1
63983: PUSH
63984: LD_VAR 0 3
63988: PLUS
63989: ST_TO_ADDR
// max_y := y + r ;
63990: LD_ADDR_VAR 0 10
63994: PUSH
63995: LD_VAR 0 2
63999: PUSH
64000: LD_VAR 0 3
64004: PLUS
64005: ST_TO_ADDR
// for _x = min_x to max_x do
64006: LD_ADDR_VAR 0 5
64010: PUSH
64011: DOUBLE
64012: LD_VAR 0 8
64016: DEC
64017: ST_TO_ADDR
64018: LD_VAR 0 9
64022: PUSH
64023: FOR_TO
64024: IFFALSE 64125
// for _y = min_y to max_y do
64026: LD_ADDR_VAR 0 6
64030: PUSH
64031: DOUBLE
64032: LD_VAR 0 7
64036: DEC
64037: ST_TO_ADDR
64038: LD_VAR 0 10
64042: PUSH
64043: FOR_TO
64044: IFFALSE 64121
// begin if not ValidHex ( _x , _y ) then
64046: LD_VAR 0 5
64050: PPUSH
64051: LD_VAR 0 6
64055: PPUSH
64056: CALL_OW 488
64060: NOT
64061: IFFALSE 64065
// continue ;
64063: GO 64043
// if GetResourceTypeXY ( _x , _y ) then
64065: LD_VAR 0 5
64069: PPUSH
64070: LD_VAR 0 6
64074: PPUSH
64075: CALL_OW 283
64079: IFFALSE 64119
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64081: LD_ADDR_VAR 0 4
64085: PUSH
64086: LD_VAR 0 4
64090: PPUSH
64091: LD_VAR 0 4
64095: PUSH
64096: LD_INT 1
64098: PLUS
64099: PPUSH
64100: LD_VAR 0 5
64104: PUSH
64105: LD_VAR 0 6
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PPUSH
64114: CALL_OW 1
64118: ST_TO_ADDR
// end ;
64119: GO 64043
64121: POP
64122: POP
64123: GO 64023
64125: POP
64126: POP
// end ;
64127: LD_VAR 0 4
64131: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64132: LD_INT 0
64134: PPUSH
64135: PPUSH
64136: PPUSH
64137: PPUSH
64138: PPUSH
64139: PPUSH
64140: PPUSH
64141: PPUSH
// if not units then
64142: LD_VAR 0 1
64146: NOT
64147: IFFALSE 64151
// exit ;
64149: GO 64675
// result := UnitFilter ( units , [ f_ok ] ) ;
64151: LD_ADDR_VAR 0 3
64155: PUSH
64156: LD_VAR 0 1
64160: PPUSH
64161: LD_INT 50
64163: PUSH
64164: EMPTY
64165: LIST
64166: PPUSH
64167: CALL_OW 72
64171: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64172: LD_ADDR_VAR 0 8
64176: PUSH
64177: LD_VAR 0 1
64181: PUSH
64182: LD_INT 1
64184: ARRAY
64185: PPUSH
64186: CALL_OW 255
64190: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64191: LD_ADDR_VAR 0 10
64195: PUSH
64196: LD_INT 29
64198: PUSH
64199: LD_INT 91
64201: PUSH
64202: LD_INT 49
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: LIST
64209: ST_TO_ADDR
// if not result then
64210: LD_VAR 0 3
64214: NOT
64215: IFFALSE 64219
// exit ;
64217: GO 64675
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64219: LD_ADDR_VAR 0 5
64223: PUSH
64224: LD_INT 81
64226: PUSH
64227: LD_VAR 0 8
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PPUSH
64236: CALL_OW 69
64240: ST_TO_ADDR
// for i in result do
64241: LD_ADDR_VAR 0 4
64245: PUSH
64246: LD_VAR 0 3
64250: PUSH
64251: FOR_IN
64252: IFFALSE 64673
// begin tag := GetTag ( i ) + 1 ;
64254: LD_ADDR_VAR 0 9
64258: PUSH
64259: LD_VAR 0 4
64263: PPUSH
64264: CALL_OW 110
64268: PUSH
64269: LD_INT 1
64271: PLUS
64272: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64273: LD_ADDR_VAR 0 7
64277: PUSH
64278: LD_VAR 0 4
64282: PPUSH
64283: CALL_OW 250
64287: PPUSH
64288: LD_VAR 0 4
64292: PPUSH
64293: CALL_OW 251
64297: PPUSH
64298: LD_INT 6
64300: PPUSH
64301: CALL 63874 0 3
64305: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64306: LD_VAR 0 4
64310: PPUSH
64311: CALL_OW 247
64315: PUSH
64316: LD_INT 2
64318: EQUAL
64319: PUSH
64320: LD_VAR 0 7
64324: AND
64325: PUSH
64326: LD_VAR 0 4
64330: PPUSH
64331: CALL_OW 264
64335: PUSH
64336: LD_VAR 0 10
64340: IN
64341: NOT
64342: AND
64343: IFFALSE 64382
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64345: LD_VAR 0 4
64349: PPUSH
64350: LD_VAR 0 7
64354: PUSH
64355: LD_INT 1
64357: ARRAY
64358: PUSH
64359: LD_INT 1
64361: ARRAY
64362: PPUSH
64363: LD_VAR 0 7
64367: PUSH
64368: LD_INT 1
64370: ARRAY
64371: PUSH
64372: LD_INT 2
64374: ARRAY
64375: PPUSH
64376: CALL_OW 116
64380: GO 64671
// if path > tag then
64382: LD_VAR 0 2
64386: PUSH
64387: LD_VAR 0 9
64391: GREATER
64392: IFFALSE 64600
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64394: LD_ADDR_VAR 0 6
64398: PUSH
64399: LD_VAR 0 5
64403: PPUSH
64404: LD_INT 91
64406: PUSH
64407: LD_VAR 0 4
64411: PUSH
64412: LD_INT 8
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: PPUSH
64420: CALL_OW 72
64424: ST_TO_ADDR
// if nearEnemy then
64425: LD_VAR 0 6
64429: IFFALSE 64498
// begin if GetWeapon ( i ) = ru_time_lapser then
64431: LD_VAR 0 4
64435: PPUSH
64436: CALL_OW 264
64440: PUSH
64441: LD_INT 49
64443: EQUAL
64444: IFFALSE 64472
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64446: LD_VAR 0 4
64450: PPUSH
64451: LD_VAR 0 6
64455: PPUSH
64456: LD_VAR 0 4
64460: PPUSH
64461: CALL_OW 74
64465: PPUSH
64466: CALL_OW 112
64470: GO 64496
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64472: LD_VAR 0 4
64476: PPUSH
64477: LD_VAR 0 6
64481: PPUSH
64482: LD_VAR 0 4
64486: PPUSH
64487: CALL_OW 74
64491: PPUSH
64492: CALL 65600 0 2
// end else
64496: GO 64598
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64498: LD_VAR 0 4
64502: PPUSH
64503: LD_VAR 0 2
64507: PUSH
64508: LD_VAR 0 9
64512: ARRAY
64513: PUSH
64514: LD_INT 1
64516: ARRAY
64517: PPUSH
64518: LD_VAR 0 2
64522: PUSH
64523: LD_VAR 0 9
64527: ARRAY
64528: PUSH
64529: LD_INT 2
64531: ARRAY
64532: PPUSH
64533: CALL_OW 297
64537: PUSH
64538: LD_INT 6
64540: GREATER
64541: IFFALSE 64584
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64543: LD_VAR 0 4
64547: PPUSH
64548: LD_VAR 0 2
64552: PUSH
64553: LD_VAR 0 9
64557: ARRAY
64558: PUSH
64559: LD_INT 1
64561: ARRAY
64562: PPUSH
64563: LD_VAR 0 2
64567: PUSH
64568: LD_VAR 0 9
64572: ARRAY
64573: PUSH
64574: LD_INT 2
64576: ARRAY
64577: PPUSH
64578: CALL_OW 114
64582: GO 64598
// SetTag ( i , tag ) ;
64584: LD_VAR 0 4
64588: PPUSH
64589: LD_VAR 0 9
64593: PPUSH
64594: CALL_OW 109
// end else
64598: GO 64671
// if enemy then
64600: LD_VAR 0 5
64604: IFFALSE 64671
// begin if GetWeapon ( i ) = ru_time_lapser then
64606: LD_VAR 0 4
64610: PPUSH
64611: CALL_OW 264
64615: PUSH
64616: LD_INT 49
64618: EQUAL
64619: IFFALSE 64647
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64621: LD_VAR 0 4
64625: PPUSH
64626: LD_VAR 0 5
64630: PPUSH
64631: LD_VAR 0 4
64635: PPUSH
64636: CALL_OW 74
64640: PPUSH
64641: CALL_OW 112
64645: GO 64671
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64647: LD_VAR 0 4
64651: PPUSH
64652: LD_VAR 0 5
64656: PPUSH
64657: LD_VAR 0 4
64661: PPUSH
64662: CALL_OW 74
64666: PPUSH
64667: CALL 65600 0 2
// end ; end ;
64671: GO 64251
64673: POP
64674: POP
// end ;
64675: LD_VAR 0 3
64679: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64680: LD_INT 0
64682: PPUSH
64683: PPUSH
64684: PPUSH
// if not unit or IsInUnit ( unit ) then
64685: LD_VAR 0 1
64689: NOT
64690: PUSH
64691: LD_VAR 0 1
64695: PPUSH
64696: CALL_OW 310
64700: OR
64701: IFFALSE 64705
// exit ;
64703: GO 64796
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64705: LD_ADDR_VAR 0 4
64709: PUSH
64710: LD_VAR 0 1
64714: PPUSH
64715: CALL_OW 250
64719: PPUSH
64720: LD_VAR 0 2
64724: PPUSH
64725: LD_INT 1
64727: PPUSH
64728: CALL_OW 272
64732: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64733: LD_ADDR_VAR 0 5
64737: PUSH
64738: LD_VAR 0 1
64742: PPUSH
64743: CALL_OW 251
64747: PPUSH
64748: LD_VAR 0 2
64752: PPUSH
64753: LD_INT 1
64755: PPUSH
64756: CALL_OW 273
64760: ST_TO_ADDR
// if ValidHex ( x , y ) then
64761: LD_VAR 0 4
64765: PPUSH
64766: LD_VAR 0 5
64770: PPUSH
64771: CALL_OW 488
64775: IFFALSE 64796
// ComTurnXY ( unit , x , y ) ;
64777: LD_VAR 0 1
64781: PPUSH
64782: LD_VAR 0 4
64786: PPUSH
64787: LD_VAR 0 5
64791: PPUSH
64792: CALL_OW 118
// end ;
64796: LD_VAR 0 3
64800: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64801: LD_INT 0
64803: PPUSH
64804: PPUSH
// result := false ;
64805: LD_ADDR_VAR 0 3
64809: PUSH
64810: LD_INT 0
64812: ST_TO_ADDR
// if not units then
64813: LD_VAR 0 2
64817: NOT
64818: IFFALSE 64822
// exit ;
64820: GO 64867
// for i in units do
64822: LD_ADDR_VAR 0 4
64826: PUSH
64827: LD_VAR 0 2
64831: PUSH
64832: FOR_IN
64833: IFFALSE 64865
// if See ( side , i ) then
64835: LD_VAR 0 1
64839: PPUSH
64840: LD_VAR 0 4
64844: PPUSH
64845: CALL_OW 292
64849: IFFALSE 64863
// begin result := true ;
64851: LD_ADDR_VAR 0 3
64855: PUSH
64856: LD_INT 1
64858: ST_TO_ADDR
// exit ;
64859: POP
64860: POP
64861: GO 64867
// end ;
64863: GO 64832
64865: POP
64866: POP
// end ;
64867: LD_VAR 0 3
64871: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64872: LD_INT 0
64874: PPUSH
64875: PPUSH
64876: PPUSH
64877: PPUSH
// if not unit or not points then
64878: LD_VAR 0 1
64882: NOT
64883: PUSH
64884: LD_VAR 0 2
64888: NOT
64889: OR
64890: IFFALSE 64894
// exit ;
64892: GO 64984
// dist := 99999 ;
64894: LD_ADDR_VAR 0 5
64898: PUSH
64899: LD_INT 99999
64901: ST_TO_ADDR
// for i in points do
64902: LD_ADDR_VAR 0 4
64906: PUSH
64907: LD_VAR 0 2
64911: PUSH
64912: FOR_IN
64913: IFFALSE 64982
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64915: LD_ADDR_VAR 0 6
64919: PUSH
64920: LD_VAR 0 1
64924: PPUSH
64925: LD_VAR 0 4
64929: PUSH
64930: LD_INT 1
64932: ARRAY
64933: PPUSH
64934: LD_VAR 0 4
64938: PUSH
64939: LD_INT 2
64941: ARRAY
64942: PPUSH
64943: CALL_OW 297
64947: ST_TO_ADDR
// if tmpDist < dist then
64948: LD_VAR 0 6
64952: PUSH
64953: LD_VAR 0 5
64957: LESS
64958: IFFALSE 64980
// begin result := i ;
64960: LD_ADDR_VAR 0 3
64964: PUSH
64965: LD_VAR 0 4
64969: ST_TO_ADDR
// dist := tmpDist ;
64970: LD_ADDR_VAR 0 5
64974: PUSH
64975: LD_VAR 0 6
64979: ST_TO_ADDR
// end ; end ;
64980: GO 64912
64982: POP
64983: POP
// end ;
64984: LD_VAR 0 3
64988: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64989: LD_INT 0
64991: PPUSH
// uc_side := side ;
64992: LD_ADDR_OWVAR 20
64996: PUSH
64997: LD_VAR 0 1
65001: ST_TO_ADDR
// uc_nation := 3 ;
65002: LD_ADDR_OWVAR 21
65006: PUSH
65007: LD_INT 3
65009: ST_TO_ADDR
// vc_chassis := 25 ;
65010: LD_ADDR_OWVAR 37
65014: PUSH
65015: LD_INT 25
65017: ST_TO_ADDR
// vc_engine := engine_siberite ;
65018: LD_ADDR_OWVAR 39
65022: PUSH
65023: LD_INT 3
65025: ST_TO_ADDR
// vc_control := control_computer ;
65026: LD_ADDR_OWVAR 38
65030: PUSH
65031: LD_INT 3
65033: ST_TO_ADDR
// vc_weapon := 59 ;
65034: LD_ADDR_OWVAR 40
65038: PUSH
65039: LD_INT 59
65041: ST_TO_ADDR
// result := CreateVehicle ;
65042: LD_ADDR_VAR 0 5
65046: PUSH
65047: CALL_OW 45
65051: ST_TO_ADDR
// SetDir ( result , d ) ;
65052: LD_VAR 0 5
65056: PPUSH
65057: LD_VAR 0 4
65061: PPUSH
65062: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65066: LD_VAR 0 5
65070: PPUSH
65071: LD_VAR 0 2
65075: PPUSH
65076: LD_VAR 0 3
65080: PPUSH
65081: LD_INT 0
65083: PPUSH
65084: CALL_OW 48
// end ;
65088: LD_VAR 0 5
65092: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65093: LD_INT 0
65095: PPUSH
65096: PPUSH
65097: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65098: LD_ADDR_VAR 0 2
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65121: LD_VAR 0 1
65125: NOT
65126: PUSH
65127: LD_VAR 0 1
65131: PPUSH
65132: CALL_OW 264
65136: PUSH
65137: LD_INT 12
65139: PUSH
65140: LD_INT 51
65142: PUSH
65143: LD_INT 32
65145: PUSH
65146: LD_INT 89
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: IN
65155: NOT
65156: OR
65157: IFFALSE 65161
// exit ;
65159: GO 65259
// for i := 1 to 3 do
65161: LD_ADDR_VAR 0 3
65165: PUSH
65166: DOUBLE
65167: LD_INT 1
65169: DEC
65170: ST_TO_ADDR
65171: LD_INT 3
65173: PUSH
65174: FOR_TO
65175: IFFALSE 65257
// begin tmp := GetCargo ( cargo , i ) ;
65177: LD_ADDR_VAR 0 4
65181: PUSH
65182: LD_VAR 0 1
65186: PPUSH
65187: LD_VAR 0 3
65191: PPUSH
65192: CALL_OW 289
65196: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65197: LD_ADDR_VAR 0 2
65201: PUSH
65202: LD_VAR 0 2
65206: PPUSH
65207: LD_VAR 0 3
65211: PPUSH
65212: LD_VAR 0 4
65216: PPUSH
65217: CALL_OW 1
65221: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65222: LD_ADDR_VAR 0 2
65226: PUSH
65227: LD_VAR 0 2
65231: PPUSH
65232: LD_INT 4
65234: PPUSH
65235: LD_VAR 0 2
65239: PUSH
65240: LD_INT 4
65242: ARRAY
65243: PUSH
65244: LD_VAR 0 4
65248: PLUS
65249: PPUSH
65250: CALL_OW 1
65254: ST_TO_ADDR
// end ;
65255: GO 65174
65257: POP
65258: POP
// end ;
65259: LD_VAR 0 2
65263: RET
// export function Length ( array ) ; begin
65264: LD_INT 0
65266: PPUSH
// result := array + 0 ;
65267: LD_ADDR_VAR 0 2
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_INT 0
65279: PLUS
65280: ST_TO_ADDR
// end ;
65281: LD_VAR 0 2
65285: RET
// export function PrepareArray ( array ) ; begin
65286: LD_INT 0
65288: PPUSH
// result := array diff 0 ;
65289: LD_ADDR_VAR 0 2
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: LD_INT 0
65301: DIFF
65302: ST_TO_ADDR
// if not result [ 1 ] then
65303: LD_VAR 0 2
65307: PUSH
65308: LD_INT 1
65310: ARRAY
65311: NOT
65312: IFFALSE 65332
// result := Delete ( result , 1 ) ;
65314: LD_ADDR_VAR 0 2
65318: PUSH
65319: LD_VAR 0 2
65323: PPUSH
65324: LD_INT 1
65326: PPUSH
65327: CALL_OW 3
65331: ST_TO_ADDR
// end ;
65332: LD_VAR 0 2
65336: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65337: LD_INT 0
65339: PPUSH
65340: PPUSH
65341: PPUSH
65342: PPUSH
// sibRocketRange := 25 ;
65343: LD_ADDR_VAR 0 6
65347: PUSH
65348: LD_INT 25
65350: ST_TO_ADDR
// result := false ;
65351: LD_ADDR_VAR 0 4
65355: PUSH
65356: LD_INT 0
65358: ST_TO_ADDR
// for i := 0 to 5 do
65359: LD_ADDR_VAR 0 5
65363: PUSH
65364: DOUBLE
65365: LD_INT 0
65367: DEC
65368: ST_TO_ADDR
65369: LD_INT 5
65371: PUSH
65372: FOR_TO
65373: IFFALSE 65440
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65375: LD_VAR 0 1
65379: PPUSH
65380: LD_VAR 0 5
65384: PPUSH
65385: LD_VAR 0 6
65389: PPUSH
65390: CALL_OW 272
65394: PPUSH
65395: LD_VAR 0 2
65399: PPUSH
65400: LD_VAR 0 5
65404: PPUSH
65405: LD_VAR 0 6
65409: PPUSH
65410: CALL_OW 273
65414: PPUSH
65415: LD_VAR 0 3
65419: PPUSH
65420: CALL_OW 309
65424: IFFALSE 65438
// begin result := true ;
65426: LD_ADDR_VAR 0 4
65430: PUSH
65431: LD_INT 1
65433: ST_TO_ADDR
// exit ;
65434: POP
65435: POP
65436: GO 65442
// end ;
65438: GO 65372
65440: POP
65441: POP
// end ;
65442: LD_VAR 0 4
65446: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65447: LD_INT 0
65449: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65450: LD_VAR 0 1
65454: PPUSH
65455: LD_VAR 0 2
65459: PPUSH
65460: LD_INT 0
65462: PPUSH
65463: LD_INT 0
65465: PPUSH
65466: LD_INT 1
65468: PPUSH
65469: LD_INT 0
65471: PPUSH
65472: CALL_OW 587
// end ;
65476: LD_VAR 0 3
65480: RET
// export function CenterOnNow ( unit ) ; begin
65481: LD_INT 0
65483: PPUSH
// result := IsInUnit ( unit ) ;
65484: LD_ADDR_VAR 0 2
65488: PUSH
65489: LD_VAR 0 1
65493: PPUSH
65494: CALL_OW 310
65498: ST_TO_ADDR
// if not result then
65499: LD_VAR 0 2
65503: NOT
65504: IFFALSE 65516
// result := unit ;
65506: LD_ADDR_VAR 0 2
65510: PUSH
65511: LD_VAR 0 1
65515: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65516: LD_VAR 0 1
65520: PPUSH
65521: CALL_OW 87
// end ;
65525: LD_VAR 0 2
65529: RET
// export function ComMoveHex ( unit , hex ) ; begin
65530: LD_INT 0
65532: PPUSH
// if not hex then
65533: LD_VAR 0 2
65537: NOT
65538: IFFALSE 65542
// exit ;
65540: GO 65595
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65542: LD_VAR 0 2
65546: PUSH
65547: LD_INT 1
65549: ARRAY
65550: PPUSH
65551: LD_VAR 0 2
65555: PUSH
65556: LD_INT 2
65558: ARRAY
65559: PPUSH
65560: CALL_OW 428
65564: IFFALSE 65568
// exit ;
65566: GO 65595
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65568: LD_VAR 0 1
65572: PPUSH
65573: LD_VAR 0 2
65577: PUSH
65578: LD_INT 1
65580: ARRAY
65581: PPUSH
65582: LD_VAR 0 2
65586: PUSH
65587: LD_INT 2
65589: ARRAY
65590: PPUSH
65591: CALL_OW 111
// end ;
65595: LD_VAR 0 3
65599: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65600: LD_INT 0
65602: PPUSH
65603: PPUSH
65604: PPUSH
// if not unit or not enemy then
65605: LD_VAR 0 1
65609: NOT
65610: PUSH
65611: LD_VAR 0 2
65615: NOT
65616: OR
65617: IFFALSE 65621
// exit ;
65619: GO 65745
// x := GetX ( enemy ) ;
65621: LD_ADDR_VAR 0 4
65625: PUSH
65626: LD_VAR 0 2
65630: PPUSH
65631: CALL_OW 250
65635: ST_TO_ADDR
// y := GetY ( enemy ) ;
65636: LD_ADDR_VAR 0 5
65640: PUSH
65641: LD_VAR 0 2
65645: PPUSH
65646: CALL_OW 251
65650: ST_TO_ADDR
// if ValidHex ( x , y ) then
65651: LD_VAR 0 4
65655: PPUSH
65656: LD_VAR 0 5
65660: PPUSH
65661: CALL_OW 488
65665: IFFALSE 65745
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
65667: LD_VAR 0 2
65671: PPUSH
65672: CALL_OW 247
65676: PUSH
65677: LD_INT 3
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: IN
65687: PUSH
65688: LD_VAR 0 1
65692: PPUSH
65693: CALL_OW 255
65697: PPUSH
65698: LD_VAR 0 2
65702: PPUSH
65703: CALL_OW 292
65707: AND
65708: IFFALSE 65726
// ComAttackUnit ( unit , enemy ) else
65710: LD_VAR 0 1
65714: PPUSH
65715: LD_VAR 0 2
65719: PPUSH
65720: CALL_OW 115
65724: GO 65745
// ComAgressiveMove ( unit , x , y ) ;
65726: LD_VAR 0 1
65730: PPUSH
65731: LD_VAR 0 4
65735: PPUSH
65736: LD_VAR 0 5
65740: PPUSH
65741: CALL_OW 114
// end ; end_of_file
65745: LD_VAR 0 3
65749: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65750: LD_VAR 0 1
65754: PPUSH
65755: LD_VAR 0 2
65759: PPUSH
65760: LD_VAR 0 3
65764: PPUSH
65765: LD_VAR 0 4
65769: PPUSH
65770: LD_VAR 0 5
65774: PPUSH
65775: LD_VAR 0 6
65779: PPUSH
65780: CALL 4271 0 6
// end ;
65784: PPOPN 6
65786: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65787: LD_INT 0
65789: PPUSH
// begin if not units then
65790: LD_VAR 0 1
65794: NOT
65795: IFFALSE 65799
// exit ;
65797: GO 65799
// end ;
65799: PPOPN 7
65801: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65802: CALL 4175 0 0
// end ;
65806: PPOPN 1
65808: END
