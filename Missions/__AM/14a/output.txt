// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3462 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20256 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 20214 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20272 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 26688 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 26688 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 31708 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 31708 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 31708 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 31708 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnitForce ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 26772 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnitForce ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 26772 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnitForce ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 26772 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnitForce ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 26772 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnitForce ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 26772 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnitForce ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 26772 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnitForce ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 26772 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnitForce ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 26772 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnitForce ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 26772 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnitForce ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 26772 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnitForce ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 26772 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnitForce ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 26772 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnitForce ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 26772 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnitForce ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 26772 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnitForce ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 26772 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 31708 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3459
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3459
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: IFTRUE 3284
3259: PUSH
3260: LD_VAR 0 2
3264: PUSH
3265: LD_INT 1
3267: ARRAY
3268: PPUSH
3269: LD_VAR 0 2
3273: PUSH
3274: LD_INT 2
3276: ARRAY
3277: PPUSH
3278: CALL_OW 488
3282: NOT
3283: OR
3284: IFFALSE 3288
// exit ;
3286: GO 3459
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3288: LD_VAR 0 1
3292: PPUSH
3293: LD_VAR 0 2
3297: PUSH
3298: LD_INT 1
3300: ARRAY
3301: PPUSH
3302: LD_VAR 0 2
3306: PUSH
3307: LD_INT 2
3309: ARRAY
3310: PPUSH
3311: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3315: LD_VAR 0 1
3319: PPUSH
3320: LD_INT 350
3322: PPUSH
3323: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3327: LD_INT 60
3329: PPUSH
3330: CALL_OW 13
3334: IFFALSE 3366
3336: PUSH
3337: LD_INT 22
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 21
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 69
3365: AND
3366: IFFALSE 3450
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3368: LD_VAR 0 1
3372: PPUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 4
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: PPUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 74
3411: PPUSH
3412: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3416: LD_INT 1050
3418: PPUSH
3419: CALL_OW 67
// until IsInUnit ( i ) ;
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 310
3432: IFFALSE 3416
// wait ( 0 0$30 ) ;
3434: LD_INT 1050
3436: PPUSH
3437: CALL_OW 67
// AddComExitBuilding ( i ) ;
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 182
// end ; AddComReturn ( i ) ;
3450: LD_VAR 0 1
3454: PPUSH
3455: CALL_OW 204
// end ; end_of_file
3459: PPOPN 2
3461: END
// export function Action ; begin
3462: LD_INT 0
3464: PPUSH
// InGameOn ;
3465: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3469: LD_EXP 2
3473: PPUSH
3474: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3478: LD_EXP 2
3482: PPUSH
3483: LD_STRING D1-JMM-1
3485: PPUSH
3486: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3490: LD_EXP 3
3494: PPUSH
3495: LD_STRING D1-Bur-1
3497: PPUSH
3498: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3502: LD_EXP 2
3506: PPUSH
3507: LD_STRING D1-JMM-2
3509: PPUSH
3510: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3514: LD_EXP 3
3518: PPUSH
3519: LD_STRING D1-Bur-2
3521: PPUSH
3522: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3526: LD_EXP 2
3530: PPUSH
3531: LD_STRING D1-JMM-3
3533: PPUSH
3534: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3538: LD_EXP 3
3542: PPUSH
3543: LD_STRING D1-Bur-3
3545: PPUSH
3546: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3550: LD_EXP 2
3554: PPUSH
3555: LD_STRING D1-JMM-4
3557: PPUSH
3558: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3562: LD_EXP 3
3566: PPUSH
3567: LD_STRING D1-Bur-4
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3574: LD_EXP 2
3578: PPUSH
3579: LD_STRING D1-JMM-5
3581: PPUSH
3582: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3586: LD_EXP 3
3590: PPUSH
3591: LD_STRING D1-Bur-5
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3598: LD_EXP 2
3602: PPUSH
3603: LD_STRING D1-JMM-6
3605: PPUSH
3606: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3610: LD_EXP 3
3614: PPUSH
3615: LD_STRING D1-Bur-6
3617: PPUSH
3618: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3622: LD_EXP 2
3626: PPUSH
3627: LD_STRING D1-JMM-7
3629: PPUSH
3630: CALL_OW 88
// wait ( 20 ) ;
3634: LD_INT 20
3636: PPUSH
3637: CALL_OW 67
// Query ( QTruck ) ;
3641: LD_STRING QTruck
3643: PPUSH
3644: CALL_OW 97
// InGameOff ;
3648: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3652: LD_STRING MArtPickup
3654: PPUSH
3655: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3659: LD_INT 2
3661: PPUSH
3662: LD_INT 1
3664: PPUSH
3665: CALL_OW 424
// end ;
3669: LD_VAR 0 1
3673: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3674: LD_INT 2
3676: PPUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 2
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 33
3689: PUSH
3690: LD_INT 1
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 3
3699: PUSH
3700: LD_INT 58
3702: PUSH
3703: EMPTY
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 70
3719: PUSH
3720: LD_INT 2
3722: EQUAL
3723: IFFALSE 3736
3725: PUSH
3726: LD_EXP 2
3730: PPUSH
3731: CALL_OW 310
3735: AND
3736: IFFALSE 3749
3738: PUSH
3739: LD_EXP 3
3743: PPUSH
3744: CALL_OW 310
3748: AND
3749: IFFALSE 3823
3751: PUSH
3752: LD_EXP 2
3756: PPUSH
3757: CALL_OW 310
3761: PPUSH
3762: CALL_OW 264
3766: PUSH
3767: LD_INT 51
3769: PUSH
3770: LD_INT 12
3772: PUSH
3773: LD_INT 89
3775: PUSH
3776: LD_INT 32
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: IN
3785: IFTRUE 3822
3787: PUSH
3788: LD_EXP 3
3792: PPUSH
3793: CALL_OW 310
3797: PPUSH
3798: CALL_OW 264
3802: PUSH
3803: LD_INT 51
3805: PUSH
3806: LD_INT 12
3808: PUSH
3809: LD_INT 89
3811: PUSH
3812: LD_INT 32
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: IN
3821: OR
3822: AND
3823: IFFALSE 4033
3825: GO 3827
3827: DISABLE
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
3832: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_EXP 2
3842: PPUSH
3843: CALL_OW 310
3847: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3848: LD_ADDR_VAR 0 3
3852: PUSH
3853: LD_EXP 3
3857: PPUSH
3858: CALL_OW 310
3862: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3863: LD_VAR 0 2
3867: PPUSH
3868: CALL_OW 265
3872: PUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: CALL_OW 262
3882: PUSH
3883: LD_INT 1
3885: PUSH
3886: LD_VAR 0 2
3890: PPUSH
3891: CALL_OW 264
3895: PUSH
3896: LD_VAR 0 2
3900: PPUSH
3901: CALL_OW 271
3905: PUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 248
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: PPUSH
3924: LD_STRING 14a_JMMVeh
3926: PPUSH
3927: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3931: LD_VAR 0 3
3935: PPUSH
3936: CALL_OW 265
3940: PUSH
3941: LD_VAR 0 3
3945: PPUSH
3946: CALL_OW 262
3950: PUSH
3951: LD_INT 1
3953: PUSH
3954: LD_VAR 0 3
3958: PPUSH
3959: CALL_OW 264
3963: PUSH
3964: LD_VAR 0 3
3968: PPUSH
3969: CALL_OW 271
3973: PUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL_OW 248
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: PPUSH
3992: LD_STRING 14a_BurlakVeh
3994: PPUSH
3995: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3999: LD_EXP 2
4003: PPUSH
4004: LD_STRING 14a_JMM
4006: PPUSH
4007: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4011: LD_EXP 3
4015: PPUSH
4016: LD_STRING 14a_Burlak
4018: PPUSH
4019: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4023: LD_INT 1
4025: PPUSH
4026: LD_STRING %_cont
4028: PPUSH
4029: CALL_OW 340
// end ;
4033: PPOPN 3
4035: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4036: LD_INT 22
4038: PUSH
4039: LD_INT 4
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: LD_INT 24
4051: PUSH
4052: LD_INT 950
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PPUSH
4067: CALL_OW 69
4071: IFFALSE 4083
4073: GO 4075
4075: DISABLE
// YouLost ( FriendlyFire ) ;
4076: LD_STRING FriendlyFire
4078: PPUSH
4079: CALL_OW 104
4083: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4084: LD_EXP 3
4088: PPUSH
4089: CALL_OW 301
4093: IFFALSE 4105
4095: GO 4097
4097: DISABLE
// YouLost ( Burlak ) ;
4098: LD_STRING Burlak
4100: PPUSH
4101: CALL_OW 104
4105: END
// every 0 0$1 trigger IsDead ( JMM ) do
4106: LD_EXP 2
4110: PPUSH
4111: CALL_OW 301
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4120: LD_STRING JMM
4122: PPUSH
4123: CALL_OW 104
4127: END
// export globalGameSaveCounter ; every 0 0$1 do
4128: GO 4130
4130: DISABLE
// begin enable ;
4131: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4132: LD_STRING updateTimer(
4134: PUSH
4135: LD_OWVAR 1
4139: STR
4140: PUSH
4141: LD_STRING );
4143: STR
4144: PPUSH
4145: CALL_OW 559
// end ;
4149: END
// every 0 0$1 do
4150: GO 4152
4152: DISABLE
// begin globalGameSaveCounter := 0 ;
4153: LD_ADDR_EXP 39
4157: PUSH
4158: LD_INT 0
4160: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4161: LD_STRING setGameSaveCounter(0)
4163: PPUSH
4164: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4168: LD_STRING initStreamRollete();
4170: PPUSH
4171: CALL_OW 559
// InitStreamMode ;
4175: CALL 5527 0 0
// DefineStreamItems ( false ) ;
4179: LD_INT 0
4181: PPUSH
4182: CALL 5991 0 1
// end ;
4186: END
// export function SOS_MapStart ( ) ; begin
4187: LD_INT 0
4189: PPUSH
// if streamModeActive then
4190: LD_EXP 40
4194: IFFALSE 4203
// DefineStreamItems ( true ) ;
4196: LD_INT 1
4198: PPUSH
4199: CALL 5991 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
4203: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
4205: PPUSH
4206: CALL_OW 559
// UpdateLuaVariables ( ) ;
4210: CALL 4227 0 0
// UpdateFactoryWaypoints ( ) ;
4214: CALL 19113 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4218: CALL 19365 0 0
// end ;
4222: LD_VAR 0 1
4226: RET
// function UpdateLuaVariables ( ) ; begin
4227: LD_INT 0
4229: PPUSH
// if globalGameSaveCounter then
4230: LD_EXP 39
4234: IFFALSE 4268
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4236: LD_ADDR_EXP 39
4240: PUSH
4241: LD_EXP 39
4245: PPUSH
4246: CALL 66261 0 1
4250: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4251: LD_STRING setGameSaveCounter(
4253: PUSH
4254: LD_EXP 39
4258: STR
4259: PUSH
4260: LD_STRING )
4262: STR
4263: PPUSH
4264: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4268: LD_STRING setGameDifficulty(
4270: PUSH
4271: LD_OWVAR 67
4275: STR
4276: PUSH
4277: LD_STRING )
4279: STR
4280: PPUSH
4281: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4285: LD_STRING displayDifficulty(
4287: PUSH
4288: LD_OWVAR 67
4292: STR
4293: PUSH
4294: LD_STRING )
4296: STR
4297: PPUSH
4298: CALL_OW 559
// end ;
4302: LD_VAR 0 1
4306: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4307: LD_INT 0
4309: PPUSH
// if p2 = stream_mode then
4310: LD_VAR 0 2
4314: PUSH
4315: LD_INT 100
4317: EQUAL
4318: IFFALSE 5321
// begin if not StreamModeActive then
4320: LD_EXP 40
4324: NOT
4325: IFFALSE 4335
// StreamModeActive := true ;
4327: LD_ADDR_EXP 40
4331: PUSH
4332: LD_INT 1
4334: ST_TO_ADDR
// if p3 = 0 then
4335: LD_VAR 0 3
4339: PUSH
4340: LD_INT 0
4342: EQUAL
4343: IFFALSE 4349
// InitStreamMode ;
4345: CALL 5527 0 0
// if p3 = 1 then
4349: LD_VAR 0 3
4353: PUSH
4354: LD_INT 1
4356: EQUAL
4357: IFFALSE 4367
// sRocket := true ;
4359: LD_ADDR_EXP 45
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// if p3 = 2 then
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 2
4374: EQUAL
4375: IFFALSE 4385
// sSpeed := true ;
4377: LD_ADDR_EXP 44
4381: PUSH
4382: LD_INT 1
4384: ST_TO_ADDR
// if p3 = 3 then
4385: LD_VAR 0 3
4389: PUSH
4390: LD_INT 3
4392: EQUAL
4393: IFFALSE 4403
// sEngine := true ;
4395: LD_ADDR_EXP 46
4399: PUSH
4400: LD_INT 1
4402: ST_TO_ADDR
// if p3 = 4 then
4403: LD_VAR 0 3
4407: PUSH
4408: LD_INT 4
4410: EQUAL
4411: IFFALSE 4421
// sSpec := true ;
4413: LD_ADDR_EXP 43
4417: PUSH
4418: LD_INT 1
4420: ST_TO_ADDR
// if p3 = 5 then
4421: LD_VAR 0 3
4425: PUSH
4426: LD_INT 5
4428: EQUAL
4429: IFFALSE 4439
// sLevel := true ;
4431: LD_ADDR_EXP 47
4435: PUSH
4436: LD_INT 1
4438: ST_TO_ADDR
// if p3 = 6 then
4439: LD_VAR 0 3
4443: PUSH
4444: LD_INT 6
4446: EQUAL
4447: IFFALSE 4457
// sArmoury := true ;
4449: LD_ADDR_EXP 48
4453: PUSH
4454: LD_INT 1
4456: ST_TO_ADDR
// if p3 = 7 then
4457: LD_VAR 0 3
4461: PUSH
4462: LD_INT 7
4464: EQUAL
4465: IFFALSE 4475
// sRadar := true ;
4467: LD_ADDR_EXP 49
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// if p3 = 8 then
4475: LD_VAR 0 3
4479: PUSH
4480: LD_INT 8
4482: EQUAL
4483: IFFALSE 4493
// sBunker := true ;
4485: LD_ADDR_EXP 50
4489: PUSH
4490: LD_INT 1
4492: ST_TO_ADDR
// if p3 = 9 then
4493: LD_VAR 0 3
4497: PUSH
4498: LD_INT 9
4500: EQUAL
4501: IFFALSE 4511
// sHack := true ;
4503: LD_ADDR_EXP 51
4507: PUSH
4508: LD_INT 1
4510: ST_TO_ADDR
// if p3 = 10 then
4511: LD_VAR 0 3
4515: PUSH
4516: LD_INT 10
4518: EQUAL
4519: IFFALSE 4529
// sFire := true ;
4521: LD_ADDR_EXP 52
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// if p3 = 11 then
4529: LD_VAR 0 3
4533: PUSH
4534: LD_INT 11
4536: EQUAL
4537: IFFALSE 4547
// sRefresh := true ;
4539: LD_ADDR_EXP 53
4543: PUSH
4544: LD_INT 1
4546: ST_TO_ADDR
// if p3 = 12 then
4547: LD_VAR 0 3
4551: PUSH
4552: LD_INT 12
4554: EQUAL
4555: IFFALSE 4565
// sExp := true ;
4557: LD_ADDR_EXP 54
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if p3 = 13 then
4565: LD_VAR 0 3
4569: PUSH
4570: LD_INT 13
4572: EQUAL
4573: IFFALSE 4583
// sDepot := true ;
4575: LD_ADDR_EXP 55
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// if p3 = 14 then
4583: LD_VAR 0 3
4587: PUSH
4588: LD_INT 14
4590: EQUAL
4591: IFFALSE 4601
// sFlag := true ;
4593: LD_ADDR_EXP 56
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// if p3 = 15 then
4601: LD_VAR 0 3
4605: PUSH
4606: LD_INT 15
4608: EQUAL
4609: IFFALSE 4619
// sKamikadze := true ;
4611: LD_ADDR_EXP 64
4615: PUSH
4616: LD_INT 1
4618: ST_TO_ADDR
// if p3 = 16 then
4619: LD_VAR 0 3
4623: PUSH
4624: LD_INT 16
4626: EQUAL
4627: IFFALSE 4637
// sTroll := true ;
4629: LD_ADDR_EXP 65
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
// if p3 = 17 then
4637: LD_VAR 0 3
4641: PUSH
4642: LD_INT 17
4644: EQUAL
4645: IFFALSE 4655
// sSlow := true ;
4647: LD_ADDR_EXP 66
4651: PUSH
4652: LD_INT 1
4654: ST_TO_ADDR
// if p3 = 18 then
4655: LD_VAR 0 3
4659: PUSH
4660: LD_INT 18
4662: EQUAL
4663: IFFALSE 4673
// sLack := true ;
4665: LD_ADDR_EXP 67
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// if p3 = 19 then
4673: LD_VAR 0 3
4677: PUSH
4678: LD_INT 19
4680: EQUAL
4681: IFFALSE 4691
// sTank := true ;
4683: LD_ADDR_EXP 69
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// if p3 = 20 then
4691: LD_VAR 0 3
4695: PUSH
4696: LD_INT 20
4698: EQUAL
4699: IFFALSE 4709
// sRemote := true ;
4701: LD_ADDR_EXP 70
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// if p3 = 21 then
4709: LD_VAR 0 3
4713: PUSH
4714: LD_INT 21
4716: EQUAL
4717: IFFALSE 4727
// sPowell := true ;
4719: LD_ADDR_EXP 71
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// if p3 = 22 then
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 22
4734: EQUAL
4735: IFFALSE 4745
// sTeleport := true ;
4737: LD_ADDR_EXP 74
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// if p3 = 23 then
4745: LD_VAR 0 3
4749: PUSH
4750: LD_INT 23
4752: EQUAL
4753: IFFALSE 4763
// sOilTower := true ;
4755: LD_ADDR_EXP 76
4759: PUSH
4760: LD_INT 1
4762: ST_TO_ADDR
// if p3 = 24 then
4763: LD_VAR 0 3
4767: PUSH
4768: LD_INT 24
4770: EQUAL
4771: IFFALSE 4781
// sShovel := true ;
4773: LD_ADDR_EXP 77
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// if p3 = 25 then
4781: LD_VAR 0 3
4785: PUSH
4786: LD_INT 25
4788: EQUAL
4789: IFFALSE 4799
// sSheik := true ;
4791: LD_ADDR_EXP 78
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// if p3 = 26 then
4799: LD_VAR 0 3
4803: PUSH
4804: LD_INT 26
4806: EQUAL
4807: IFFALSE 4817
// sEarthquake := true ;
4809: LD_ADDR_EXP 80
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// if p3 = 27 then
4817: LD_VAR 0 3
4821: PUSH
4822: LD_INT 27
4824: EQUAL
4825: IFFALSE 4835
// sAI := true ;
4827: LD_ADDR_EXP 81
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// if p3 = 28 then
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 28
4842: EQUAL
4843: IFFALSE 4853
// sCargo := true ;
4845: LD_ADDR_EXP 84
4849: PUSH
4850: LD_INT 1
4852: ST_TO_ADDR
// if p3 = 29 then
4853: LD_VAR 0 3
4857: PUSH
4858: LD_INT 29
4860: EQUAL
4861: IFFALSE 4871
// sDLaser := true ;
4863: LD_ADDR_EXP 85
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// if p3 = 30 then
4871: LD_VAR 0 3
4875: PUSH
4876: LD_INT 30
4878: EQUAL
4879: IFFALSE 4889
// sExchange := true ;
4881: LD_ADDR_EXP 86
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// if p3 = 31 then
4889: LD_VAR 0 3
4893: PUSH
4894: LD_INT 31
4896: EQUAL
4897: IFFALSE 4907
// sFac := true ;
4899: LD_ADDR_EXP 87
4903: PUSH
4904: LD_INT 1
4906: ST_TO_ADDR
// if p3 = 32 then
4907: LD_VAR 0 3
4911: PUSH
4912: LD_INT 32
4914: EQUAL
4915: IFFALSE 4925
// sPower := true ;
4917: LD_ADDR_EXP 88
4921: PUSH
4922: LD_INT 1
4924: ST_TO_ADDR
// if p3 = 33 then
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 33
4932: EQUAL
4933: IFFALSE 4943
// sRandom := true ;
4935: LD_ADDR_EXP 89
4939: PUSH
4940: LD_INT 1
4942: ST_TO_ADDR
// if p3 = 34 then
4943: LD_VAR 0 3
4947: PUSH
4948: LD_INT 34
4950: EQUAL
4951: IFFALSE 4961
// sShield := true ;
4953: LD_ADDR_EXP 90
4957: PUSH
4958: LD_INT 1
4960: ST_TO_ADDR
// if p3 = 35 then
4961: LD_VAR 0 3
4965: PUSH
4966: LD_INT 35
4968: EQUAL
4969: IFFALSE 4979
// sTime := true ;
4971: LD_ADDR_EXP 91
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
// if p3 = 36 then
4979: LD_VAR 0 3
4983: PUSH
4984: LD_INT 36
4986: EQUAL
4987: IFFALSE 4997
// sTools := true ;
4989: LD_ADDR_EXP 92
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if p3 = 101 then
4997: LD_VAR 0 3
5001: PUSH
5002: LD_INT 101
5004: EQUAL
5005: IFFALSE 5015
// sSold := true ;
5007: LD_ADDR_EXP 57
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// if p3 = 102 then
5015: LD_VAR 0 3
5019: PUSH
5020: LD_INT 102
5022: EQUAL
5023: IFFALSE 5033
// sDiff := true ;
5025: LD_ADDR_EXP 58
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// if p3 = 103 then
5033: LD_VAR 0 3
5037: PUSH
5038: LD_INT 103
5040: EQUAL
5041: IFFALSE 5051
// sFog := true ;
5043: LD_ADDR_EXP 61
5047: PUSH
5048: LD_INT 1
5050: ST_TO_ADDR
// if p3 = 104 then
5051: LD_VAR 0 3
5055: PUSH
5056: LD_INT 104
5058: EQUAL
5059: IFFALSE 5069
// sReset := true ;
5061: LD_ADDR_EXP 62
5065: PUSH
5066: LD_INT 1
5068: ST_TO_ADDR
// if p3 = 105 then
5069: LD_VAR 0 3
5073: PUSH
5074: LD_INT 105
5076: EQUAL
5077: IFFALSE 5087
// sSun := true ;
5079: LD_ADDR_EXP 63
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// if p3 = 106 then
5087: LD_VAR 0 3
5091: PUSH
5092: LD_INT 106
5094: EQUAL
5095: IFFALSE 5105
// sTiger := true ;
5097: LD_ADDR_EXP 59
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// if p3 = 107 then
5105: LD_VAR 0 3
5109: PUSH
5110: LD_INT 107
5112: EQUAL
5113: IFFALSE 5123
// sBomb := true ;
5115: LD_ADDR_EXP 60
5119: PUSH
5120: LD_INT 1
5122: ST_TO_ADDR
// if p3 = 108 then
5123: LD_VAR 0 3
5127: PUSH
5128: LD_INT 108
5130: EQUAL
5131: IFFALSE 5141
// sWound := true ;
5133: LD_ADDR_EXP 68
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// if p3 = 109 then
5141: LD_VAR 0 3
5145: PUSH
5146: LD_INT 109
5148: EQUAL
5149: IFFALSE 5159
// sBetray := true ;
5151: LD_ADDR_EXP 72
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// if p3 = 110 then
5159: LD_VAR 0 3
5163: PUSH
5164: LD_INT 110
5166: EQUAL
5167: IFFALSE 5177
// sContamin := true ;
5169: LD_ADDR_EXP 73
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// if p3 = 111 then
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 111
5184: EQUAL
5185: IFFALSE 5195
// sOil := true ;
5187: LD_ADDR_EXP 75
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// if p3 = 112 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 112
5202: EQUAL
5203: IFFALSE 5213
// sStu := true ;
5205: LD_ADDR_EXP 79
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if p3 = 113 then
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 113
5220: EQUAL
5221: IFFALSE 5231
// sBazooka := true ;
5223: LD_ADDR_EXP 82
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// if p3 = 114 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 114
5238: EQUAL
5239: IFFALSE 5249
// sMortar := true ;
5241: LD_ADDR_EXP 83
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if p3 = 115 then
5249: LD_VAR 0 3
5253: PUSH
5254: LD_INT 115
5256: EQUAL
5257: IFFALSE 5267
// sRanger := true ;
5259: LD_ADDR_EXP 93
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if p3 = 116 then
5267: LD_VAR 0 3
5271: PUSH
5272: LD_INT 116
5274: EQUAL
5275: IFFALSE 5285
// sComputer := true ;
5277: LD_ADDR_EXP 94
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// if p3 = 117 then
5285: LD_VAR 0 3
5289: PUSH
5290: LD_INT 117
5292: EQUAL
5293: IFFALSE 5303
// s30 := true ;
5295: LD_ADDR_EXP 95
5299: PUSH
5300: LD_INT 1
5302: ST_TO_ADDR
// if p3 = 118 then
5303: LD_VAR 0 3
5307: PUSH
5308: LD_INT 118
5310: EQUAL
5311: IFFALSE 5321
// s60 := true ;
5313: LD_ADDR_EXP 96
5317: PUSH
5318: LD_INT 1
5320: ST_TO_ADDR
// end ; if p2 = hack_mode then
5321: LD_VAR 0 2
5325: PUSH
5326: LD_INT 101
5328: EQUAL
5329: IFFALSE 5457
// begin case p3 of 1 :
5331: LD_VAR 0 3
5335: PUSH
5336: LD_INT 1
5338: DOUBLE
5339: EQUAL
5340: IFTRUE 5344
5342: GO 5351
5344: POP
// hHackUnlimitedResources ; 2 :
5345: CALL 17720 0 0
5349: GO 5457
5351: LD_INT 2
5353: DOUBLE
5354: EQUAL
5355: IFTRUE 5359
5357: GO 5366
5359: POP
// hHackSetLevel10 ; 3 :
5360: CALL 17853 0 0
5364: GO 5457
5366: LD_INT 3
5368: DOUBLE
5369: EQUAL
5370: IFTRUE 5374
5372: GO 5381
5374: POP
// hHackSetLevel10YourUnits ; 4 :
5375: CALL 17938 0 0
5379: GO 5457
5381: LD_INT 4
5383: DOUBLE
5384: EQUAL
5385: IFTRUE 5389
5387: GO 5396
5389: POP
// hHackInvincible ; 5 :
5390: CALL 18386 0 0
5394: GO 5457
5396: LD_INT 5
5398: DOUBLE
5399: EQUAL
5400: IFTRUE 5404
5402: GO 5411
5404: POP
// hHackInvisible ; 6 :
5405: CALL 18497 0 0
5409: GO 5457
5411: LD_INT 6
5413: DOUBLE
5414: EQUAL
5415: IFTRUE 5419
5417: GO 5426
5419: POP
// hHackChangeYourSide ; 7 :
5420: CALL 18554 0 0
5424: GO 5457
5426: LD_INT 7
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5441
5434: POP
// hHackChangeUnitSide ; 8 :
5435: CALL 18596 0 0
5439: GO 5457
5441: LD_INT 8
5443: DOUBLE
5444: EQUAL
5445: IFTRUE 5449
5447: GO 5456
5449: POP
// hHackFog ; end ;
5450: CALL 18697 0 0
5454: GO 5457
5456: POP
// end ; if p2 = game_save_mode then
5457: LD_VAR 0 2
5461: PUSH
5462: LD_INT 102
5464: EQUAL
5465: IFFALSE 5522
// begin if p3 = 1 then
5467: LD_VAR 0 3
5471: PUSH
5472: LD_INT 1
5474: EQUAL
5475: IFFALSE 5487
// globalGameSaveCounter := p4 ;
5477: LD_ADDR_EXP 39
5481: PUSH
5482: LD_VAR 0 4
5486: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5487: LD_VAR 0 3
5491: PUSH
5492: LD_INT 2
5494: EQUAL
5495: IFFALSE 5503
5497: PUSH
5498: LD_EXP 39
5502: AND
5503: IFFALSE 5522
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5505: LD_STRING setGameSaveCounter(
5507: PUSH
5508: LD_EXP 39
5512: STR
5513: PUSH
5514: LD_STRING )
5516: STR
5517: PPUSH
5518: CALL_OW 559
// end ; end ;
5522: LD_VAR 0 7
5526: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5527: LD_INT 0
5529: PPUSH
// streamModeActive := false ;
5530: LD_ADDR_EXP 40
5534: PUSH
5535: LD_INT 0
5537: ST_TO_ADDR
// normalCounter := 36 ;
5538: LD_ADDR_EXP 41
5542: PUSH
5543: LD_INT 36
5545: ST_TO_ADDR
// hardcoreCounter := 18 ;
5546: LD_ADDR_EXP 42
5550: PUSH
5551: LD_INT 18
5553: ST_TO_ADDR
// sRocket := false ;
5554: LD_ADDR_EXP 45
5558: PUSH
5559: LD_INT 0
5561: ST_TO_ADDR
// sSpeed := false ;
5562: LD_ADDR_EXP 44
5566: PUSH
5567: LD_INT 0
5569: ST_TO_ADDR
// sEngine := false ;
5570: LD_ADDR_EXP 46
5574: PUSH
5575: LD_INT 0
5577: ST_TO_ADDR
// sSpec := false ;
5578: LD_ADDR_EXP 43
5582: PUSH
5583: LD_INT 0
5585: ST_TO_ADDR
// sLevel := false ;
5586: LD_ADDR_EXP 47
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// sArmoury := false ;
5594: LD_ADDR_EXP 48
5598: PUSH
5599: LD_INT 0
5601: ST_TO_ADDR
// sRadar := false ;
5602: LD_ADDR_EXP 49
5606: PUSH
5607: LD_INT 0
5609: ST_TO_ADDR
// sBunker := false ;
5610: LD_ADDR_EXP 50
5614: PUSH
5615: LD_INT 0
5617: ST_TO_ADDR
// sHack := false ;
5618: LD_ADDR_EXP 51
5622: PUSH
5623: LD_INT 0
5625: ST_TO_ADDR
// sFire := false ;
5626: LD_ADDR_EXP 52
5630: PUSH
5631: LD_INT 0
5633: ST_TO_ADDR
// sRefresh := false ;
5634: LD_ADDR_EXP 53
5638: PUSH
5639: LD_INT 0
5641: ST_TO_ADDR
// sExp := false ;
5642: LD_ADDR_EXP 54
5646: PUSH
5647: LD_INT 0
5649: ST_TO_ADDR
// sDepot := false ;
5650: LD_ADDR_EXP 55
5654: PUSH
5655: LD_INT 0
5657: ST_TO_ADDR
// sFlag := false ;
5658: LD_ADDR_EXP 56
5662: PUSH
5663: LD_INT 0
5665: ST_TO_ADDR
// sKamikadze := false ;
5666: LD_ADDR_EXP 64
5670: PUSH
5671: LD_INT 0
5673: ST_TO_ADDR
// sTroll := false ;
5674: LD_ADDR_EXP 65
5678: PUSH
5679: LD_INT 0
5681: ST_TO_ADDR
// sSlow := false ;
5682: LD_ADDR_EXP 66
5686: PUSH
5687: LD_INT 0
5689: ST_TO_ADDR
// sLack := false ;
5690: LD_ADDR_EXP 67
5694: PUSH
5695: LD_INT 0
5697: ST_TO_ADDR
// sTank := false ;
5698: LD_ADDR_EXP 69
5702: PUSH
5703: LD_INT 0
5705: ST_TO_ADDR
// sRemote := false ;
5706: LD_ADDR_EXP 70
5710: PUSH
5711: LD_INT 0
5713: ST_TO_ADDR
// sPowell := false ;
5714: LD_ADDR_EXP 71
5718: PUSH
5719: LD_INT 0
5721: ST_TO_ADDR
// sTeleport := false ;
5722: LD_ADDR_EXP 74
5726: PUSH
5727: LD_INT 0
5729: ST_TO_ADDR
// sOilTower := false ;
5730: LD_ADDR_EXP 76
5734: PUSH
5735: LD_INT 0
5737: ST_TO_ADDR
// sShovel := false ;
5738: LD_ADDR_EXP 77
5742: PUSH
5743: LD_INT 0
5745: ST_TO_ADDR
// sSheik := false ;
5746: LD_ADDR_EXP 78
5750: PUSH
5751: LD_INT 0
5753: ST_TO_ADDR
// sEarthquake := false ;
5754: LD_ADDR_EXP 80
5758: PUSH
5759: LD_INT 0
5761: ST_TO_ADDR
// sAI := false ;
5762: LD_ADDR_EXP 81
5766: PUSH
5767: LD_INT 0
5769: ST_TO_ADDR
// sCargo := false ;
5770: LD_ADDR_EXP 84
5774: PUSH
5775: LD_INT 0
5777: ST_TO_ADDR
// sDLaser := false ;
5778: LD_ADDR_EXP 85
5782: PUSH
5783: LD_INT 0
5785: ST_TO_ADDR
// sExchange := false ;
5786: LD_ADDR_EXP 86
5790: PUSH
5791: LD_INT 0
5793: ST_TO_ADDR
// sFac := false ;
5794: LD_ADDR_EXP 87
5798: PUSH
5799: LD_INT 0
5801: ST_TO_ADDR
// sPower := false ;
5802: LD_ADDR_EXP 88
5806: PUSH
5807: LD_INT 0
5809: ST_TO_ADDR
// sRandom := false ;
5810: LD_ADDR_EXP 89
5814: PUSH
5815: LD_INT 0
5817: ST_TO_ADDR
// sShield := false ;
5818: LD_ADDR_EXP 90
5822: PUSH
5823: LD_INT 0
5825: ST_TO_ADDR
// sTime := false ;
5826: LD_ADDR_EXP 91
5830: PUSH
5831: LD_INT 0
5833: ST_TO_ADDR
// sTools := false ;
5834: LD_ADDR_EXP 92
5838: PUSH
5839: LD_INT 0
5841: ST_TO_ADDR
// sSold := false ;
5842: LD_ADDR_EXP 57
5846: PUSH
5847: LD_INT 0
5849: ST_TO_ADDR
// sDiff := false ;
5850: LD_ADDR_EXP 58
5854: PUSH
5855: LD_INT 0
5857: ST_TO_ADDR
// sFog := false ;
5858: LD_ADDR_EXP 61
5862: PUSH
5863: LD_INT 0
5865: ST_TO_ADDR
// sReset := false ;
5866: LD_ADDR_EXP 62
5870: PUSH
5871: LD_INT 0
5873: ST_TO_ADDR
// sSun := false ;
5874: LD_ADDR_EXP 63
5878: PUSH
5879: LD_INT 0
5881: ST_TO_ADDR
// sTiger := false ;
5882: LD_ADDR_EXP 59
5886: PUSH
5887: LD_INT 0
5889: ST_TO_ADDR
// sBomb := false ;
5890: LD_ADDR_EXP 60
5894: PUSH
5895: LD_INT 0
5897: ST_TO_ADDR
// sWound := false ;
5898: LD_ADDR_EXP 68
5902: PUSH
5903: LD_INT 0
5905: ST_TO_ADDR
// sBetray := false ;
5906: LD_ADDR_EXP 72
5910: PUSH
5911: LD_INT 0
5913: ST_TO_ADDR
// sContamin := false ;
5914: LD_ADDR_EXP 73
5918: PUSH
5919: LD_INT 0
5921: ST_TO_ADDR
// sOil := false ;
5922: LD_ADDR_EXP 75
5926: PUSH
5927: LD_INT 0
5929: ST_TO_ADDR
// sStu := false ;
5930: LD_ADDR_EXP 79
5934: PUSH
5935: LD_INT 0
5937: ST_TO_ADDR
// sBazooka := false ;
5938: LD_ADDR_EXP 82
5942: PUSH
5943: LD_INT 0
5945: ST_TO_ADDR
// sMortar := false ;
5946: LD_ADDR_EXP 83
5950: PUSH
5951: LD_INT 0
5953: ST_TO_ADDR
// sRanger := false ;
5954: LD_ADDR_EXP 93
5958: PUSH
5959: LD_INT 0
5961: ST_TO_ADDR
// sComputer := false ;
5962: LD_ADDR_EXP 94
5966: PUSH
5967: LD_INT 0
5969: ST_TO_ADDR
// s30 := false ;
5970: LD_ADDR_EXP 95
5974: PUSH
5975: LD_INT 0
5977: ST_TO_ADDR
// s60 := false ;
5978: LD_ADDR_EXP 96
5982: PUSH
5983: LD_INT 0
5985: ST_TO_ADDR
// end ;
5986: LD_VAR 0 1
5990: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5991: LD_INT 0
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
5999: PPUSH
// result := [ ] ;
6000: LD_ADDR_VAR 0 2
6004: PUSH
6005: EMPTY
6006: ST_TO_ADDR
// if campaign_id = 1 then
6007: LD_OWVAR 69
6011: PUSH
6012: LD_INT 1
6014: EQUAL
6015: IFFALSE 9181
// begin case mission_number of 1 :
6017: LD_OWVAR 70
6021: PUSH
6022: LD_INT 1
6024: DOUBLE
6025: EQUAL
6026: IFTRUE 6030
6028: GO 6106
6030: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6031: LD_ADDR_VAR 0 2
6035: PUSH
6036: LD_INT 2
6038: PUSH
6039: LD_INT 4
6041: PUSH
6042: LD_INT 11
6044: PUSH
6045: LD_INT 12
6047: PUSH
6048: LD_INT 15
6050: PUSH
6051: LD_INT 16
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_INT 23
6059: PUSH
6060: LD_INT 26
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 101
6076: PUSH
6077: LD_INT 102
6079: PUSH
6080: LD_INT 106
6082: PUSH
6083: LD_INT 116
6085: PUSH
6086: LD_INT 117
6088: PUSH
6089: LD_INT 118
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: ST_TO_ADDR
6104: GO 9179
6106: LD_INT 2
6108: DOUBLE
6109: EQUAL
6110: IFTRUE 6114
6112: GO 6198
6114: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6115: LD_ADDR_VAR 0 2
6119: PUSH
6120: LD_INT 2
6122: PUSH
6123: LD_INT 4
6125: PUSH
6126: LD_INT 11
6128: PUSH
6129: LD_INT 12
6131: PUSH
6132: LD_INT 15
6134: PUSH
6135: LD_INT 16
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_INT 23
6143: PUSH
6144: LD_INT 26
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 101
6160: PUSH
6161: LD_INT 102
6163: PUSH
6164: LD_INT 105
6166: PUSH
6167: LD_INT 106
6169: PUSH
6170: LD_INT 108
6172: PUSH
6173: LD_INT 116
6175: PUSH
6176: LD_INT 117
6178: PUSH
6179: LD_INT 118
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: ST_TO_ADDR
6196: GO 9179
6198: LD_INT 3
6200: DOUBLE
6201: EQUAL
6202: IFTRUE 6206
6204: GO 6294
6206: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6207: LD_ADDR_VAR 0 2
6211: PUSH
6212: LD_INT 2
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: LD_INT 11
6223: PUSH
6224: LD_INT 12
6226: PUSH
6227: LD_INT 15
6229: PUSH
6230: LD_INT 16
6232: PUSH
6233: LD_INT 22
6235: PUSH
6236: LD_INT 26
6238: PUSH
6239: LD_INT 36
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 101
6256: PUSH
6257: LD_INT 102
6259: PUSH
6260: LD_INT 105
6262: PUSH
6263: LD_INT 106
6265: PUSH
6266: LD_INT 108
6268: PUSH
6269: LD_INT 116
6271: PUSH
6272: LD_INT 117
6274: PUSH
6275: LD_INT 118
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: ST_TO_ADDR
6292: GO 9179
6294: LD_INT 4
6296: DOUBLE
6297: EQUAL
6298: IFTRUE 6302
6300: GO 6398
6302: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6303: LD_ADDR_VAR 0 2
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: LD_INT 4
6313: PUSH
6314: LD_INT 5
6316: PUSH
6317: LD_INT 8
6319: PUSH
6320: LD_INT 11
6322: PUSH
6323: LD_INT 12
6325: PUSH
6326: LD_INT 15
6328: PUSH
6329: LD_INT 16
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_INT 23
6337: PUSH
6338: LD_INT 26
6340: PUSH
6341: LD_INT 36
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 101
6360: PUSH
6361: LD_INT 102
6363: PUSH
6364: LD_INT 105
6366: PUSH
6367: LD_INT 106
6369: PUSH
6370: LD_INT 108
6372: PUSH
6373: LD_INT 116
6375: PUSH
6376: LD_INT 117
6378: PUSH
6379: LD_INT 118
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: ST_TO_ADDR
6396: GO 9179
6398: LD_INT 5
6400: DOUBLE
6401: EQUAL
6402: IFTRUE 6406
6404: GO 6518
6406: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6407: LD_ADDR_VAR 0 2
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: LD_INT 4
6417: PUSH
6418: LD_INT 5
6420: PUSH
6421: LD_INT 6
6423: PUSH
6424: LD_INT 8
6426: PUSH
6427: LD_INT 11
6429: PUSH
6430: LD_INT 12
6432: PUSH
6433: LD_INT 15
6435: PUSH
6436: LD_INT 16
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 23
6444: PUSH
6445: LD_INT 25
6447: PUSH
6448: LD_INT 26
6450: PUSH
6451: LD_INT 36
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 101
6472: PUSH
6473: LD_INT 102
6475: PUSH
6476: LD_INT 105
6478: PUSH
6479: LD_INT 106
6481: PUSH
6482: LD_INT 108
6484: PUSH
6485: LD_INT 109
6487: PUSH
6488: LD_INT 112
6490: PUSH
6491: LD_INT 116
6493: PUSH
6494: LD_INT 117
6496: PUSH
6497: LD_INT 118
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: ST_TO_ADDR
6516: GO 9179
6518: LD_INT 6
6520: DOUBLE
6521: EQUAL
6522: IFTRUE 6526
6524: GO 6658
6526: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6527: LD_ADDR_VAR 0 2
6531: PUSH
6532: LD_INT 2
6534: PUSH
6535: LD_INT 4
6537: PUSH
6538: LD_INT 5
6540: PUSH
6541: LD_INT 6
6543: PUSH
6544: LD_INT 8
6546: PUSH
6547: LD_INT 11
6549: PUSH
6550: LD_INT 12
6552: PUSH
6553: LD_INT 15
6555: PUSH
6556: LD_INT 16
6558: PUSH
6559: LD_INT 20
6561: PUSH
6562: LD_INT 21
6564: PUSH
6565: LD_INT 22
6567: PUSH
6568: LD_INT 23
6570: PUSH
6571: LD_INT 25
6573: PUSH
6574: LD_INT 26
6576: PUSH
6577: LD_INT 30
6579: PUSH
6580: LD_INT 31
6582: PUSH
6583: LD_INT 32
6585: PUSH
6586: LD_INT 36
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 101
6612: PUSH
6613: LD_INT 102
6615: PUSH
6616: LD_INT 105
6618: PUSH
6619: LD_INT 106
6621: PUSH
6622: LD_INT 108
6624: PUSH
6625: LD_INT 109
6627: PUSH
6628: LD_INT 112
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 117
6636: PUSH
6637: LD_INT 118
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 9179
6658: LD_INT 7
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6778
6666: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: LD_INT 2
6674: PUSH
6675: LD_INT 4
6677: PUSH
6678: LD_INT 5
6680: PUSH
6681: LD_INT 7
6683: PUSH
6684: LD_INT 11
6686: PUSH
6687: LD_INT 12
6689: PUSH
6690: LD_INT 15
6692: PUSH
6693: LD_INT 16
6695: PUSH
6696: LD_INT 20
6698: PUSH
6699: LD_INT 21
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_INT 23
6707: PUSH
6708: LD_INT 25
6710: PUSH
6711: LD_INT 26
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 101
6732: PUSH
6733: LD_INT 102
6735: PUSH
6736: LD_INT 103
6738: PUSH
6739: LD_INT 105
6741: PUSH
6742: LD_INT 106
6744: PUSH
6745: LD_INT 108
6747: PUSH
6748: LD_INT 112
6750: PUSH
6751: LD_INT 116
6753: PUSH
6754: LD_INT 117
6756: PUSH
6757: LD_INT 118
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: ST_TO_ADDR
6776: GO 9179
6778: LD_INT 8
6780: DOUBLE
6781: EQUAL
6782: IFTRUE 6786
6784: GO 6926
6786: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_INT 2
6794: PUSH
6795: LD_INT 4
6797: PUSH
6798: LD_INT 5
6800: PUSH
6801: LD_INT 6
6803: PUSH
6804: LD_INT 7
6806: PUSH
6807: LD_INT 8
6809: PUSH
6810: LD_INT 11
6812: PUSH
6813: LD_INT 12
6815: PUSH
6816: LD_INT 15
6818: PUSH
6819: LD_INT 16
6821: PUSH
6822: LD_INT 20
6824: PUSH
6825: LD_INT 21
6827: PUSH
6828: LD_INT 22
6830: PUSH
6831: LD_INT 23
6833: PUSH
6834: LD_INT 25
6836: PUSH
6837: LD_INT 26
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 31
6845: PUSH
6846: LD_INT 32
6848: PUSH
6849: LD_INT 36
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 101
6876: PUSH
6877: LD_INT 102
6879: PUSH
6880: LD_INT 103
6882: PUSH
6883: LD_INT 105
6885: PUSH
6886: LD_INT 106
6888: PUSH
6889: LD_INT 108
6891: PUSH
6892: LD_INT 109
6894: PUSH
6895: LD_INT 112
6897: PUSH
6898: LD_INT 116
6900: PUSH
6901: LD_INT 117
6903: PUSH
6904: LD_INT 118
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: ST_TO_ADDR
6924: GO 9179
6926: LD_INT 9
6928: DOUBLE
6929: EQUAL
6930: IFTRUE 6934
6932: GO 7082
6934: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6935: LD_ADDR_VAR 0 2
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_INT 4
6945: PUSH
6946: LD_INT 5
6948: PUSH
6949: LD_INT 6
6951: PUSH
6952: LD_INT 7
6954: PUSH
6955: LD_INT 8
6957: PUSH
6958: LD_INT 11
6960: PUSH
6961: LD_INT 12
6963: PUSH
6964: LD_INT 15
6966: PUSH
6967: LD_INT 16
6969: PUSH
6970: LD_INT 20
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 22
6978: PUSH
6979: LD_INT 23
6981: PUSH
6982: LD_INT 25
6984: PUSH
6985: LD_INT 26
6987: PUSH
6988: LD_INT 28
6990: PUSH
6991: LD_INT 30
6993: PUSH
6994: LD_INT 31
6996: PUSH
6997: LD_INT 32
6999: PUSH
7000: LD_INT 36
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 101
7028: PUSH
7029: LD_INT 102
7031: PUSH
7032: LD_INT 103
7034: PUSH
7035: LD_INT 105
7037: PUSH
7038: LD_INT 106
7040: PUSH
7041: LD_INT 108
7043: PUSH
7044: LD_INT 109
7046: PUSH
7047: LD_INT 112
7049: PUSH
7050: LD_INT 114
7052: PUSH
7053: LD_INT 116
7055: PUSH
7056: LD_INT 117
7058: PUSH
7059: LD_INT 118
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: ST_TO_ADDR
7080: GO 9179
7082: LD_INT 10
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7286
7090: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7091: LD_ADDR_VAR 0 2
7095: PUSH
7096: LD_INT 2
7098: PUSH
7099: LD_INT 4
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: LD_INT 7
7110: PUSH
7111: LD_INT 8
7113: PUSH
7114: LD_INT 9
7116: PUSH
7117: LD_INT 10
7119: PUSH
7120: LD_INT 11
7122: PUSH
7123: LD_INT 12
7125: PUSH
7126: LD_INT 13
7128: PUSH
7129: LD_INT 14
7131: PUSH
7132: LD_INT 15
7134: PUSH
7135: LD_INT 16
7137: PUSH
7138: LD_INT 17
7140: PUSH
7141: LD_INT 18
7143: PUSH
7144: LD_INT 19
7146: PUSH
7147: LD_INT 20
7149: PUSH
7150: LD_INT 21
7152: PUSH
7153: LD_INT 22
7155: PUSH
7156: LD_INT 23
7158: PUSH
7159: LD_INT 24
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: LD_INT 26
7167: PUSH
7168: LD_INT 28
7170: PUSH
7171: LD_INT 30
7173: PUSH
7174: LD_INT 31
7176: PUSH
7177: LD_INT 32
7179: PUSH
7180: LD_INT 36
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 101
7216: PUSH
7217: LD_INT 102
7219: PUSH
7220: LD_INT 103
7222: PUSH
7223: LD_INT 104
7225: PUSH
7226: LD_INT 105
7228: PUSH
7229: LD_INT 106
7231: PUSH
7232: LD_INT 107
7234: PUSH
7235: LD_INT 108
7237: PUSH
7238: LD_INT 109
7240: PUSH
7241: LD_INT 110
7243: PUSH
7244: LD_INT 111
7246: PUSH
7247: LD_INT 112
7249: PUSH
7250: LD_INT 114
7252: PUSH
7253: LD_INT 116
7255: PUSH
7256: LD_INT 117
7258: PUSH
7259: LD_INT 118
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: ST_TO_ADDR
7284: GO 9179
7286: LD_INT 11
7288: DOUBLE
7289: EQUAL
7290: IFTRUE 7294
7292: GO 7498
7294: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7295: LD_ADDR_VAR 0 2
7299: PUSH
7300: LD_INT 2
7302: PUSH
7303: LD_INT 3
7305: PUSH
7306: LD_INT 4
7308: PUSH
7309: LD_INT 5
7311: PUSH
7312: LD_INT 6
7314: PUSH
7315: LD_INT 7
7317: PUSH
7318: LD_INT 8
7320: PUSH
7321: LD_INT 9
7323: PUSH
7324: LD_INT 10
7326: PUSH
7327: LD_INT 11
7329: PUSH
7330: LD_INT 12
7332: PUSH
7333: LD_INT 13
7335: PUSH
7336: LD_INT 14
7338: PUSH
7339: LD_INT 15
7341: PUSH
7342: LD_INT 16
7344: PUSH
7345: LD_INT 17
7347: PUSH
7348: LD_INT 18
7350: PUSH
7351: LD_INT 19
7353: PUSH
7354: LD_INT 20
7356: PUSH
7357: LD_INT 21
7359: PUSH
7360: LD_INT 22
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 24
7368: PUSH
7369: LD_INT 25
7371: PUSH
7372: LD_INT 26
7374: PUSH
7375: LD_INT 28
7377: PUSH
7378: LD_INT 30
7380: PUSH
7381: LD_INT 31
7383: PUSH
7384: LD_INT 32
7386: PUSH
7387: LD_INT 34
7389: PUSH
7390: LD_INT 36
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 101
7428: PUSH
7429: LD_INT 102
7431: PUSH
7432: LD_INT 103
7434: PUSH
7435: LD_INT 104
7437: PUSH
7438: LD_INT 105
7440: PUSH
7441: LD_INT 106
7443: PUSH
7444: LD_INT 107
7446: PUSH
7447: LD_INT 108
7449: PUSH
7450: LD_INT 109
7452: PUSH
7453: LD_INT 110
7455: PUSH
7456: LD_INT 111
7458: PUSH
7459: LD_INT 112
7461: PUSH
7462: LD_INT 114
7464: PUSH
7465: LD_INT 116
7467: PUSH
7468: LD_INT 117
7470: PUSH
7471: LD_INT 118
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: ST_TO_ADDR
7496: GO 9179
7498: LD_INT 12
7500: DOUBLE
7501: EQUAL
7502: IFTRUE 7506
7504: GO 7726
7506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7507: LD_ADDR_VAR 0 2
7511: PUSH
7512: LD_INT 1
7514: PUSH
7515: LD_INT 2
7517: PUSH
7518: LD_INT 3
7520: PUSH
7521: LD_INT 4
7523: PUSH
7524: LD_INT 5
7526: PUSH
7527: LD_INT 6
7529: PUSH
7530: LD_INT 7
7532: PUSH
7533: LD_INT 8
7535: PUSH
7536: LD_INT 9
7538: PUSH
7539: LD_INT 10
7541: PUSH
7542: LD_INT 11
7544: PUSH
7545: LD_INT 12
7547: PUSH
7548: LD_INT 13
7550: PUSH
7551: LD_INT 14
7553: PUSH
7554: LD_INT 15
7556: PUSH
7557: LD_INT 16
7559: PUSH
7560: LD_INT 17
7562: PUSH
7563: LD_INT 18
7565: PUSH
7566: LD_INT 19
7568: PUSH
7569: LD_INT 20
7571: PUSH
7572: LD_INT 21
7574: PUSH
7575: LD_INT 22
7577: PUSH
7578: LD_INT 23
7580: PUSH
7581: LD_INT 24
7583: PUSH
7584: LD_INT 25
7586: PUSH
7587: LD_INT 26
7589: PUSH
7590: LD_INT 27
7592: PUSH
7593: LD_INT 28
7595: PUSH
7596: LD_INT 30
7598: PUSH
7599: LD_INT 31
7601: PUSH
7602: LD_INT 32
7604: PUSH
7605: LD_INT 33
7607: PUSH
7608: LD_INT 34
7610: PUSH
7611: LD_INT 36
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 101
7652: PUSH
7653: LD_INT 102
7655: PUSH
7656: LD_INT 103
7658: PUSH
7659: LD_INT 104
7661: PUSH
7662: LD_INT 105
7664: PUSH
7665: LD_INT 106
7667: PUSH
7668: LD_INT 107
7670: PUSH
7671: LD_INT 108
7673: PUSH
7674: LD_INT 109
7676: PUSH
7677: LD_INT 110
7679: PUSH
7680: LD_INT 111
7682: PUSH
7683: LD_INT 112
7685: PUSH
7686: LD_INT 113
7688: PUSH
7689: LD_INT 114
7691: PUSH
7692: LD_INT 116
7694: PUSH
7695: LD_INT 117
7697: PUSH
7698: LD_INT 118
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: ST_TO_ADDR
7724: GO 9179
7726: LD_INT 13
7728: DOUBLE
7729: EQUAL
7730: IFTRUE 7734
7732: GO 7942
7734: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7735: LD_ADDR_VAR 0 2
7739: PUSH
7740: LD_INT 1
7742: PUSH
7743: LD_INT 2
7745: PUSH
7746: LD_INT 3
7748: PUSH
7749: LD_INT 4
7751: PUSH
7752: LD_INT 5
7754: PUSH
7755: LD_INT 8
7757: PUSH
7758: LD_INT 9
7760: PUSH
7761: LD_INT 10
7763: PUSH
7764: LD_INT 11
7766: PUSH
7767: LD_INT 12
7769: PUSH
7770: LD_INT 14
7772: PUSH
7773: LD_INT 15
7775: PUSH
7776: LD_INT 16
7778: PUSH
7779: LD_INT 17
7781: PUSH
7782: LD_INT 18
7784: PUSH
7785: LD_INT 19
7787: PUSH
7788: LD_INT 20
7790: PUSH
7791: LD_INT 21
7793: PUSH
7794: LD_INT 22
7796: PUSH
7797: LD_INT 23
7799: PUSH
7800: LD_INT 24
7802: PUSH
7803: LD_INT 25
7805: PUSH
7806: LD_INT 26
7808: PUSH
7809: LD_INT 27
7811: PUSH
7812: LD_INT 28
7814: PUSH
7815: LD_INT 30
7817: PUSH
7818: LD_INT 31
7820: PUSH
7821: LD_INT 32
7823: PUSH
7824: LD_INT 33
7826: PUSH
7827: LD_INT 34
7829: PUSH
7830: LD_INT 36
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 101
7868: PUSH
7869: LD_INT 102
7871: PUSH
7872: LD_INT 103
7874: PUSH
7875: LD_INT 104
7877: PUSH
7878: LD_INT 105
7880: PUSH
7881: LD_INT 106
7883: PUSH
7884: LD_INT 107
7886: PUSH
7887: LD_INT 108
7889: PUSH
7890: LD_INT 109
7892: PUSH
7893: LD_INT 110
7895: PUSH
7896: LD_INT 111
7898: PUSH
7899: LD_INT 112
7901: PUSH
7902: LD_INT 113
7904: PUSH
7905: LD_INT 114
7907: PUSH
7908: LD_INT 116
7910: PUSH
7911: LD_INT 117
7913: PUSH
7914: LD_INT 118
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: ST_TO_ADDR
7940: GO 9179
7942: LD_INT 14
7944: DOUBLE
7945: EQUAL
7946: IFTRUE 7950
7948: GO 8174
7950: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7951: LD_ADDR_VAR 0 2
7955: PUSH
7956: LD_INT 1
7958: PUSH
7959: LD_INT 2
7961: PUSH
7962: LD_INT 3
7964: PUSH
7965: LD_INT 4
7967: PUSH
7968: LD_INT 5
7970: PUSH
7971: LD_INT 6
7973: PUSH
7974: LD_INT 7
7976: PUSH
7977: LD_INT 8
7979: PUSH
7980: LD_INT 9
7982: PUSH
7983: LD_INT 10
7985: PUSH
7986: LD_INT 11
7988: PUSH
7989: LD_INT 12
7991: PUSH
7992: LD_INT 13
7994: PUSH
7995: LD_INT 14
7997: PUSH
7998: LD_INT 15
8000: PUSH
8001: LD_INT 16
8003: PUSH
8004: LD_INT 17
8006: PUSH
8007: LD_INT 18
8009: PUSH
8010: LD_INT 19
8012: PUSH
8013: LD_INT 20
8015: PUSH
8016: LD_INT 21
8018: PUSH
8019: LD_INT 22
8021: PUSH
8022: LD_INT 23
8024: PUSH
8025: LD_INT 24
8027: PUSH
8028: LD_INT 25
8030: PUSH
8031: LD_INT 26
8033: PUSH
8034: LD_INT 27
8036: PUSH
8037: LD_INT 28
8039: PUSH
8040: LD_INT 29
8042: PUSH
8043: LD_INT 30
8045: PUSH
8046: LD_INT 31
8048: PUSH
8049: LD_INT 32
8051: PUSH
8052: LD_INT 33
8054: PUSH
8055: LD_INT 34
8057: PUSH
8058: LD_INT 36
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 101
8100: PUSH
8101: LD_INT 102
8103: PUSH
8104: LD_INT 103
8106: PUSH
8107: LD_INT 104
8109: PUSH
8110: LD_INT 105
8112: PUSH
8113: LD_INT 106
8115: PUSH
8116: LD_INT 107
8118: PUSH
8119: LD_INT 108
8121: PUSH
8122: LD_INT 109
8124: PUSH
8125: LD_INT 110
8127: PUSH
8128: LD_INT 111
8130: PUSH
8131: LD_INT 112
8133: PUSH
8134: LD_INT 113
8136: PUSH
8137: LD_INT 114
8139: PUSH
8140: LD_INT 116
8142: PUSH
8143: LD_INT 117
8145: PUSH
8146: LD_INT 118
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: ST_TO_ADDR
8172: GO 9179
8174: LD_INT 15
8176: DOUBLE
8177: EQUAL
8178: IFTRUE 8182
8180: GO 8406
8182: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8183: LD_ADDR_VAR 0 2
8187: PUSH
8188: LD_INT 1
8190: PUSH
8191: LD_INT 2
8193: PUSH
8194: LD_INT 3
8196: PUSH
8197: LD_INT 4
8199: PUSH
8200: LD_INT 5
8202: PUSH
8203: LD_INT 6
8205: PUSH
8206: LD_INT 7
8208: PUSH
8209: LD_INT 8
8211: PUSH
8212: LD_INT 9
8214: PUSH
8215: LD_INT 10
8217: PUSH
8218: LD_INT 11
8220: PUSH
8221: LD_INT 12
8223: PUSH
8224: LD_INT 13
8226: PUSH
8227: LD_INT 14
8229: PUSH
8230: LD_INT 15
8232: PUSH
8233: LD_INT 16
8235: PUSH
8236: LD_INT 17
8238: PUSH
8239: LD_INT 18
8241: PUSH
8242: LD_INT 19
8244: PUSH
8245: LD_INT 20
8247: PUSH
8248: LD_INT 21
8250: PUSH
8251: LD_INT 22
8253: PUSH
8254: LD_INT 23
8256: PUSH
8257: LD_INT 24
8259: PUSH
8260: LD_INT 25
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: LD_INT 27
8268: PUSH
8269: LD_INT 28
8271: PUSH
8272: LD_INT 29
8274: PUSH
8275: LD_INT 30
8277: PUSH
8278: LD_INT 31
8280: PUSH
8281: LD_INT 32
8283: PUSH
8284: LD_INT 33
8286: PUSH
8287: LD_INT 34
8289: PUSH
8290: LD_INT 36
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 101
8332: PUSH
8333: LD_INT 102
8335: PUSH
8336: LD_INT 103
8338: PUSH
8339: LD_INT 104
8341: PUSH
8342: LD_INT 105
8344: PUSH
8345: LD_INT 106
8347: PUSH
8348: LD_INT 107
8350: PUSH
8351: LD_INT 108
8353: PUSH
8354: LD_INT 109
8356: PUSH
8357: LD_INT 110
8359: PUSH
8360: LD_INT 111
8362: PUSH
8363: LD_INT 112
8365: PUSH
8366: LD_INT 113
8368: PUSH
8369: LD_INT 114
8371: PUSH
8372: LD_INT 116
8374: PUSH
8375: LD_INT 117
8377: PUSH
8378: LD_INT 118
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: ST_TO_ADDR
8404: GO 9179
8406: LD_INT 16
8408: DOUBLE
8409: EQUAL
8410: IFTRUE 8414
8412: GO 8550
8414: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8415: LD_ADDR_VAR 0 2
8419: PUSH
8420: LD_INT 2
8422: PUSH
8423: LD_INT 4
8425: PUSH
8426: LD_INT 5
8428: PUSH
8429: LD_INT 7
8431: PUSH
8432: LD_INT 11
8434: PUSH
8435: LD_INT 12
8437: PUSH
8438: LD_INT 15
8440: PUSH
8441: LD_INT 16
8443: PUSH
8444: LD_INT 20
8446: PUSH
8447: LD_INT 21
8449: PUSH
8450: LD_INT 22
8452: PUSH
8453: LD_INT 23
8455: PUSH
8456: LD_INT 25
8458: PUSH
8459: LD_INT 26
8461: PUSH
8462: LD_INT 30
8464: PUSH
8465: LD_INT 31
8467: PUSH
8468: LD_INT 32
8470: PUSH
8471: LD_INT 33
8473: PUSH
8474: LD_INT 34
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 101
8500: PUSH
8501: LD_INT 102
8503: PUSH
8504: LD_INT 103
8506: PUSH
8507: LD_INT 106
8509: PUSH
8510: LD_INT 108
8512: PUSH
8513: LD_INT 112
8515: PUSH
8516: LD_INT 113
8518: PUSH
8519: LD_INT 114
8521: PUSH
8522: LD_INT 116
8524: PUSH
8525: LD_INT 117
8527: PUSH
8528: LD_INT 118
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: ST_TO_ADDR
8548: GO 9179
8550: LD_INT 17
8552: DOUBLE
8553: EQUAL
8554: IFTRUE 8558
8556: GO 8782
8558: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8559: LD_ADDR_VAR 0 2
8563: PUSH
8564: LD_INT 1
8566: PUSH
8567: LD_INT 2
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: LD_INT 4
8575: PUSH
8576: LD_INT 5
8578: PUSH
8579: LD_INT 6
8581: PUSH
8582: LD_INT 7
8584: PUSH
8585: LD_INT 8
8587: PUSH
8588: LD_INT 9
8590: PUSH
8591: LD_INT 10
8593: PUSH
8594: LD_INT 11
8596: PUSH
8597: LD_INT 12
8599: PUSH
8600: LD_INT 13
8602: PUSH
8603: LD_INT 14
8605: PUSH
8606: LD_INT 15
8608: PUSH
8609: LD_INT 16
8611: PUSH
8612: LD_INT 17
8614: PUSH
8615: LD_INT 18
8617: PUSH
8618: LD_INT 19
8620: PUSH
8621: LD_INT 20
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_INT 23
8632: PUSH
8633: LD_INT 24
8635: PUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 26
8641: PUSH
8642: LD_INT 27
8644: PUSH
8645: LD_INT 28
8647: PUSH
8648: LD_INT 29
8650: PUSH
8651: LD_INT 30
8653: PUSH
8654: LD_INT 31
8656: PUSH
8657: LD_INT 32
8659: PUSH
8660: LD_INT 33
8662: PUSH
8663: LD_INT 34
8665: PUSH
8666: LD_INT 36
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 101
8708: PUSH
8709: LD_INT 102
8711: PUSH
8712: LD_INT 103
8714: PUSH
8715: LD_INT 104
8717: PUSH
8718: LD_INT 105
8720: PUSH
8721: LD_INT 106
8723: PUSH
8724: LD_INT 107
8726: PUSH
8727: LD_INT 108
8729: PUSH
8730: LD_INT 109
8732: PUSH
8733: LD_INT 110
8735: PUSH
8736: LD_INT 111
8738: PUSH
8739: LD_INT 112
8741: PUSH
8742: LD_INT 113
8744: PUSH
8745: LD_INT 114
8747: PUSH
8748: LD_INT 116
8750: PUSH
8751: LD_INT 117
8753: PUSH
8754: LD_INT 118
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: ST_TO_ADDR
8780: GO 9179
8782: LD_INT 18
8784: DOUBLE
8785: EQUAL
8786: IFTRUE 8790
8788: GO 8938
8790: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8791: LD_ADDR_VAR 0 2
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: LD_INT 4
8801: PUSH
8802: LD_INT 5
8804: PUSH
8805: LD_INT 7
8807: PUSH
8808: LD_INT 11
8810: PUSH
8811: LD_INT 12
8813: PUSH
8814: LD_INT 15
8816: PUSH
8817: LD_INT 16
8819: PUSH
8820: LD_INT 20
8822: PUSH
8823: LD_INT 21
8825: PUSH
8826: LD_INT 22
8828: PUSH
8829: LD_INT 23
8831: PUSH
8832: LD_INT 25
8834: PUSH
8835: LD_INT 26
8837: PUSH
8838: LD_INT 30
8840: PUSH
8841: LD_INT 31
8843: PUSH
8844: LD_INT 32
8846: PUSH
8847: LD_INT 33
8849: PUSH
8850: LD_INT 34
8852: PUSH
8853: LD_INT 35
8855: PUSH
8856: LD_INT 36
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 101
8884: PUSH
8885: LD_INT 102
8887: PUSH
8888: LD_INT 103
8890: PUSH
8891: LD_INT 106
8893: PUSH
8894: LD_INT 108
8896: PUSH
8897: LD_INT 112
8899: PUSH
8900: LD_INT 113
8902: PUSH
8903: LD_INT 114
8905: PUSH
8906: LD_INT 115
8908: PUSH
8909: LD_INT 116
8911: PUSH
8912: LD_INT 117
8914: PUSH
8915: LD_INT 118
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: ST_TO_ADDR
8936: GO 9179
8938: LD_INT 19
8940: DOUBLE
8941: EQUAL
8942: IFTRUE 8946
8944: GO 9178
8946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8947: LD_ADDR_VAR 0 2
8951: PUSH
8952: LD_INT 1
8954: PUSH
8955: LD_INT 2
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: LD_INT 4
8963: PUSH
8964: LD_INT 5
8966: PUSH
8967: LD_INT 6
8969: PUSH
8970: LD_INT 7
8972: PUSH
8973: LD_INT 8
8975: PUSH
8976: LD_INT 9
8978: PUSH
8979: LD_INT 10
8981: PUSH
8982: LD_INT 11
8984: PUSH
8985: LD_INT 12
8987: PUSH
8988: LD_INT 13
8990: PUSH
8991: LD_INT 14
8993: PUSH
8994: LD_INT 15
8996: PUSH
8997: LD_INT 16
8999: PUSH
9000: LD_INT 17
9002: PUSH
9003: LD_INT 18
9005: PUSH
9006: LD_INT 19
9008: PUSH
9009: LD_INT 20
9011: PUSH
9012: LD_INT 21
9014: PUSH
9015: LD_INT 22
9017: PUSH
9018: LD_INT 23
9020: PUSH
9021: LD_INT 24
9023: PUSH
9024: LD_INT 25
9026: PUSH
9027: LD_INT 26
9029: PUSH
9030: LD_INT 27
9032: PUSH
9033: LD_INT 28
9035: PUSH
9036: LD_INT 29
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 31
9044: PUSH
9045: LD_INT 32
9047: PUSH
9048: LD_INT 33
9050: PUSH
9051: LD_INT 34
9053: PUSH
9054: LD_INT 35
9056: PUSH
9057: LD_INT 36
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 101
9100: PUSH
9101: LD_INT 102
9103: PUSH
9104: LD_INT 103
9106: PUSH
9107: LD_INT 104
9109: PUSH
9110: LD_INT 105
9112: PUSH
9113: LD_INT 106
9115: PUSH
9116: LD_INT 107
9118: PUSH
9119: LD_INT 108
9121: PUSH
9122: LD_INT 109
9124: PUSH
9125: LD_INT 110
9127: PUSH
9128: LD_INT 111
9130: PUSH
9131: LD_INT 112
9133: PUSH
9134: LD_INT 113
9136: PUSH
9137: LD_INT 114
9139: PUSH
9140: LD_INT 115
9142: PUSH
9143: LD_INT 116
9145: PUSH
9146: LD_INT 117
9148: PUSH
9149: LD_INT 118
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ST_TO_ADDR
9176: GO 9179
9178: POP
// end else
9179: GO 9410
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9181: LD_ADDR_VAR 0 2
9185: PUSH
9186: LD_INT 1
9188: PUSH
9189: LD_INT 2
9191: PUSH
9192: LD_INT 3
9194: PUSH
9195: LD_INT 4
9197: PUSH
9198: LD_INT 5
9200: PUSH
9201: LD_INT 6
9203: PUSH
9204: LD_INT 7
9206: PUSH
9207: LD_INT 8
9209: PUSH
9210: LD_INT 9
9212: PUSH
9213: LD_INT 10
9215: PUSH
9216: LD_INT 11
9218: PUSH
9219: LD_INT 12
9221: PUSH
9222: LD_INT 13
9224: PUSH
9225: LD_INT 14
9227: PUSH
9228: LD_INT 15
9230: PUSH
9231: LD_INT 16
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: LD_INT 18
9239: PUSH
9240: LD_INT 19
9242: PUSH
9243: LD_INT 20
9245: PUSH
9246: LD_INT 21
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 23
9254: PUSH
9255: LD_INT 24
9257: PUSH
9258: LD_INT 25
9260: PUSH
9261: LD_INT 26
9263: PUSH
9264: LD_INT 27
9266: PUSH
9267: LD_INT 28
9269: PUSH
9270: LD_INT 29
9272: PUSH
9273: LD_INT 30
9275: PUSH
9276: LD_INT 31
9278: PUSH
9279: LD_INT 32
9281: PUSH
9282: LD_INT 33
9284: PUSH
9285: LD_INT 34
9287: PUSH
9288: LD_INT 35
9290: PUSH
9291: LD_INT 36
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 101
9334: PUSH
9335: LD_INT 102
9337: PUSH
9338: LD_INT 103
9340: PUSH
9341: LD_INT 104
9343: PUSH
9344: LD_INT 105
9346: PUSH
9347: LD_INT 106
9349: PUSH
9350: LD_INT 107
9352: PUSH
9353: LD_INT 108
9355: PUSH
9356: LD_INT 109
9358: PUSH
9359: LD_INT 110
9361: PUSH
9362: LD_INT 111
9364: PUSH
9365: LD_INT 112
9367: PUSH
9368: LD_INT 113
9370: PUSH
9371: LD_INT 114
9373: PUSH
9374: LD_INT 115
9376: PUSH
9377: LD_INT 116
9379: PUSH
9380: LD_INT 117
9382: PUSH
9383: LD_INT 118
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: ST_TO_ADDR
// if result then
9410: LD_VAR 0 2
9414: IFFALSE 10200
// begin normal :=  ;
9416: LD_ADDR_VAR 0 5
9420: PUSH
9421: LD_STRING 
9423: ST_TO_ADDR
// hardcore :=  ;
9424: LD_ADDR_VAR 0 6
9428: PUSH
9429: LD_STRING 
9431: ST_TO_ADDR
// active :=  ;
9432: LD_ADDR_VAR 0 7
9436: PUSH
9437: LD_STRING 
9439: ST_TO_ADDR
// for i = 1 to normalCounter do
9440: LD_ADDR_VAR 0 8
9444: PUSH
9445: DOUBLE
9446: LD_INT 1
9448: DEC
9449: ST_TO_ADDR
9450: LD_EXP 41
9454: PUSH
9455: FOR_TO
9456: IFFALSE 9557
// begin tmp := 0 ;
9458: LD_ADDR_VAR 0 3
9462: PUSH
9463: LD_STRING 0
9465: ST_TO_ADDR
// if result [ 1 ] then
9466: LD_VAR 0 2
9470: PUSH
9471: LD_INT 1
9473: ARRAY
9474: IFFALSE 9539
// if result [ 1 ] [ 1 ] = i then
9476: LD_VAR 0 2
9480: PUSH
9481: LD_INT 1
9483: ARRAY
9484: PUSH
9485: LD_INT 1
9487: ARRAY
9488: PUSH
9489: LD_VAR 0 8
9493: EQUAL
9494: IFFALSE 9539
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9496: LD_ADDR_VAR 0 2
9500: PUSH
9501: LD_VAR 0 2
9505: PPUSH
9506: LD_INT 1
9508: PPUSH
9509: LD_VAR 0 2
9513: PUSH
9514: LD_INT 1
9516: ARRAY
9517: PPUSH
9518: LD_INT 1
9520: PPUSH
9521: CALL_OW 3
9525: PPUSH
9526: CALL_OW 1
9530: ST_TO_ADDR
// tmp := 1 ;
9531: LD_ADDR_VAR 0 3
9535: PUSH
9536: LD_STRING 1
9538: ST_TO_ADDR
// end ; normal := normal & tmp ;
9539: LD_ADDR_VAR 0 5
9543: PUSH
9544: LD_VAR 0 5
9548: PUSH
9549: LD_VAR 0 3
9553: STR
9554: ST_TO_ADDR
// end ;
9555: GO 9455
9557: POP
9558: POP
// for i = 1 to hardcoreCounter do
9559: LD_ADDR_VAR 0 8
9563: PUSH
9564: DOUBLE
9565: LD_INT 1
9567: DEC
9568: ST_TO_ADDR
9569: LD_EXP 42
9573: PUSH
9574: FOR_TO
9575: IFFALSE 9680
// begin tmp := 0 ;
9577: LD_ADDR_VAR 0 3
9581: PUSH
9582: LD_STRING 0
9584: ST_TO_ADDR
// if result [ 2 ] then
9585: LD_VAR 0 2
9589: PUSH
9590: LD_INT 2
9592: ARRAY
9593: IFFALSE 9662
// if result [ 2 ] [ 1 ] = 100 + i then
9595: LD_VAR 0 2
9599: PUSH
9600: LD_INT 2
9602: ARRAY
9603: PUSH
9604: LD_INT 1
9606: ARRAY
9607: PUSH
9608: LD_INT 100
9610: PUSH
9611: LD_VAR 0 8
9615: PLUS
9616: EQUAL
9617: IFFALSE 9662
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9619: LD_ADDR_VAR 0 2
9623: PUSH
9624: LD_VAR 0 2
9628: PPUSH
9629: LD_INT 2
9631: PPUSH
9632: LD_VAR 0 2
9636: PUSH
9637: LD_INT 2
9639: ARRAY
9640: PPUSH
9641: LD_INT 1
9643: PPUSH
9644: CALL_OW 3
9648: PPUSH
9649: CALL_OW 1
9653: ST_TO_ADDR
// tmp := 1 ;
9654: LD_ADDR_VAR 0 3
9658: PUSH
9659: LD_STRING 1
9661: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9662: LD_ADDR_VAR 0 6
9666: PUSH
9667: LD_VAR 0 6
9671: PUSH
9672: LD_VAR 0 3
9676: STR
9677: ST_TO_ADDR
// end ;
9678: GO 9574
9680: POP
9681: POP
// if isGameLoad then
9682: LD_VAR 0 1
9686: IFFALSE 10161
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9688: LD_ADDR_VAR 0 4
9692: PUSH
9693: LD_EXP 45
9697: PUSH
9698: LD_EXP 44
9702: PUSH
9703: LD_EXP 46
9707: PUSH
9708: LD_EXP 43
9712: PUSH
9713: LD_EXP 47
9717: PUSH
9718: LD_EXP 48
9722: PUSH
9723: LD_EXP 49
9727: PUSH
9728: LD_EXP 50
9732: PUSH
9733: LD_EXP 51
9737: PUSH
9738: LD_EXP 52
9742: PUSH
9743: LD_EXP 53
9747: PUSH
9748: LD_EXP 54
9752: PUSH
9753: LD_EXP 55
9757: PUSH
9758: LD_EXP 56
9762: PUSH
9763: LD_EXP 64
9767: PUSH
9768: LD_EXP 65
9772: PUSH
9773: LD_EXP 66
9777: PUSH
9778: LD_EXP 67
9782: PUSH
9783: LD_EXP 69
9787: PUSH
9788: LD_EXP 70
9792: PUSH
9793: LD_EXP 71
9797: PUSH
9798: LD_EXP 74
9802: PUSH
9803: LD_EXP 76
9807: PUSH
9808: LD_EXP 77
9812: PUSH
9813: LD_EXP 78
9817: PUSH
9818: LD_EXP 80
9822: PUSH
9823: LD_EXP 81
9827: PUSH
9828: LD_EXP 84
9832: PUSH
9833: LD_EXP 85
9837: PUSH
9838: LD_EXP 86
9842: PUSH
9843: LD_EXP 87
9847: PUSH
9848: LD_EXP 88
9852: PUSH
9853: LD_EXP 89
9857: PUSH
9858: LD_EXP 90
9862: PUSH
9863: LD_EXP 91
9867: PUSH
9868: LD_EXP 92
9872: PUSH
9873: LD_EXP 57
9877: PUSH
9878: LD_EXP 58
9882: PUSH
9883: LD_EXP 61
9887: PUSH
9888: LD_EXP 62
9892: PUSH
9893: LD_EXP 63
9897: PUSH
9898: LD_EXP 59
9902: PUSH
9903: LD_EXP 60
9907: PUSH
9908: LD_EXP 68
9912: PUSH
9913: LD_EXP 72
9917: PUSH
9918: LD_EXP 73
9922: PUSH
9923: LD_EXP 75
9927: PUSH
9928: LD_EXP 79
9932: PUSH
9933: LD_EXP 82
9937: PUSH
9938: LD_EXP 83
9942: PUSH
9943: LD_EXP 93
9947: PUSH
9948: LD_EXP 94
9952: PUSH
9953: LD_EXP 95
9957: PUSH
9958: LD_EXP 96
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: ST_TO_ADDR
// tmp :=  ;
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: LD_STRING 
10026: ST_TO_ADDR
// for i = 1 to normalCounter do
10027: LD_ADDR_VAR 0 8
10031: PUSH
10032: DOUBLE
10033: LD_INT 1
10035: DEC
10036: ST_TO_ADDR
10037: LD_EXP 41
10041: PUSH
10042: FOR_TO
10043: IFFALSE 10079
// begin if flags [ i ] then
10045: LD_VAR 0 4
10049: PUSH
10050: LD_VAR 0 8
10054: ARRAY
10055: IFFALSE 10077
// tmp := tmp & i & ; ;
10057: LD_ADDR_VAR 0 3
10061: PUSH
10062: LD_VAR 0 3
10066: PUSH
10067: LD_VAR 0 8
10071: STR
10072: PUSH
10073: LD_STRING ;
10075: STR
10076: ST_TO_ADDR
// end ;
10077: GO 10042
10079: POP
10080: POP
// for i = 1 to hardcoreCounter do
10081: LD_ADDR_VAR 0 8
10085: PUSH
10086: DOUBLE
10087: LD_INT 1
10089: DEC
10090: ST_TO_ADDR
10091: LD_EXP 42
10095: PUSH
10096: FOR_TO
10097: IFFALSE 10143
// begin if flags [ normalCounter + i ] then
10099: LD_VAR 0 4
10103: PUSH
10104: LD_EXP 41
10108: PUSH
10109: LD_VAR 0 8
10113: PLUS
10114: ARRAY
10115: IFFALSE 10141
// tmp := tmp & ( 100 + i ) & ; ;
10117: LD_ADDR_VAR 0 3
10121: PUSH
10122: LD_VAR 0 3
10126: PUSH
10127: LD_INT 100
10129: PUSH
10130: LD_VAR 0 8
10134: PLUS
10135: STR
10136: PUSH
10137: LD_STRING ;
10139: STR
10140: ST_TO_ADDR
// end ;
10141: GO 10096
10143: POP
10144: POP
// if tmp then
10145: LD_VAR 0 3
10149: IFFALSE 10161
// active := tmp ;
10151: LD_ADDR_VAR 0 7
10155: PUSH
10156: LD_VAR 0 3
10160: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10161: LD_STRING getStreamItemsFromMission("
10163: PUSH
10164: LD_VAR 0 5
10168: STR
10169: PUSH
10170: LD_STRING ","
10172: STR
10173: PUSH
10174: LD_VAR 0 6
10178: STR
10179: PUSH
10180: LD_STRING ","
10182: STR
10183: PUSH
10184: LD_VAR 0 7
10188: STR
10189: PUSH
10190: LD_STRING ")
10192: STR
10193: PPUSH
10194: CALL_OW 559
// end else
10198: GO 10207
// ToLua ( getStreamItemsFromMission("","","") ) ;
10200: LD_STRING getStreamItemsFromMission("","","")
10202: PPUSH
10203: CALL_OW 559
// end ;
10207: LD_VAR 0 2
10211: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10212: LD_EXP 40
10216: IFFALSE 10224
10218: PUSH
10219: LD_EXP 45
10223: AND
10224: IFFALSE 10348
10226: GO 10228
10228: DISABLE
10229: LD_INT 0
10231: PPUSH
10232: PPUSH
// begin enable ;
10233: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10234: LD_ADDR_VAR 0 2
10238: PUSH
10239: LD_INT 22
10241: PUSH
10242: LD_OWVAR 2
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: LD_INT 34
10256: PUSH
10257: LD_INT 7
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 34
10266: PUSH
10267: LD_INT 45
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 34
10276: PUSH
10277: LD_INT 28
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 34
10286: PUSH
10287: LD_INT 47
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PPUSH
10305: CALL_OW 69
10309: ST_TO_ADDR
// if not tmp then
10310: LD_VAR 0 2
10314: NOT
10315: IFFALSE 10319
// exit ;
10317: GO 10348
// for i in tmp do
10319: LD_ADDR_VAR 0 1
10323: PUSH
10324: LD_VAR 0 2
10328: PUSH
10329: FOR_IN
10330: IFFALSE 10346
// begin SetLives ( i , 0 ) ;
10332: LD_VAR 0 1
10336: PPUSH
10337: LD_INT 0
10339: PPUSH
10340: CALL_OW 234
// end ;
10344: GO 10329
10346: POP
10347: POP
// end ;
10348: PPOPN 2
10350: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10351: LD_EXP 40
10355: IFFALSE 10363
10357: PUSH
10358: LD_EXP 46
10362: AND
10363: IFFALSE 10447
10365: GO 10367
10367: DISABLE
10368: LD_INT 0
10370: PPUSH
10371: PPUSH
// begin enable ;
10372: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_OWVAR 2
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 32
10392: PUSH
10393: LD_INT 3
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: ST_TO_ADDR
// if not tmp then
10409: LD_VAR 0 2
10413: NOT
10414: IFFALSE 10418
// exit ;
10416: GO 10447
// for i in tmp do
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_VAR 0 2
10427: PUSH
10428: FOR_IN
10429: IFFALSE 10445
// begin SetLives ( i , 0 ) ;
10431: LD_VAR 0 1
10435: PPUSH
10436: LD_INT 0
10438: PPUSH
10439: CALL_OW 234
// end ;
10443: GO 10428
10445: POP
10446: POP
// end ;
10447: PPOPN 2
10449: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10450: LD_EXP 40
10454: IFFALSE 10462
10456: PUSH
10457: LD_EXP 43
10461: AND
10462: IFFALSE 10555
10464: GO 10466
10466: DISABLE
10467: LD_INT 0
10469: PPUSH
// begin enable ;
10470: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10471: LD_ADDR_VAR 0 1
10475: PUSH
10476: LD_INT 22
10478: PUSH
10479: LD_OWVAR 2
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 2
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 9
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 8
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PPUSH
10531: CALL_OW 69
10535: PUSH
10536: FOR_IN
10537: IFFALSE 10553
// begin SetClass ( i , 1 ) ;
10539: LD_VAR 0 1
10543: PPUSH
10544: LD_INT 1
10546: PPUSH
10547: CALL_OW 336
// end ;
10551: GO 10536
10553: POP
10554: POP
// end ;
10555: PPOPN 1
10557: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10558: LD_EXP 40
10562: IFFALSE 10570
10564: PUSH
10565: LD_EXP 44
10569: AND
10570: IFFALSE 10582
10572: PUSH
10573: LD_OWVAR 65
10577: PUSH
10578: LD_INT 7
10580: LESS
10581: AND
10582: IFFALSE 10596
10584: GO 10586
10586: DISABLE
// begin enable ;
10587: ENABLE
// game_speed := 7 ;
10588: LD_ADDR_OWVAR 65
10592: PUSH
10593: LD_INT 7
10595: ST_TO_ADDR
// end ;
10596: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10597: LD_EXP 40
10601: IFFALSE 10609
10603: PUSH
10604: LD_EXP 47
10608: AND
10609: IFFALSE 10811
10611: GO 10613
10613: DISABLE
10614: LD_INT 0
10616: PPUSH
10617: PPUSH
10618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10619: LD_ADDR_VAR 0 3
10623: PUSH
10624: LD_INT 81
10626: PUSH
10627: LD_OWVAR 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 21
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PPUSH
10650: CALL_OW 69
10654: ST_TO_ADDR
// if not tmp then
10655: LD_VAR 0 3
10659: NOT
10660: IFFALSE 10664
// exit ;
10662: GO 10811
// if tmp > 5 then
10664: LD_VAR 0 3
10668: PUSH
10669: LD_INT 5
10671: GREATER
10672: IFFALSE 10684
// k := 5 else
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_INT 5
10681: ST_TO_ADDR
10682: GO 10694
// k := tmp ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_VAR 0 3
10693: ST_TO_ADDR
// for i := 1 to k do
10694: LD_ADDR_VAR 0 1
10698: PUSH
10699: DOUBLE
10700: LD_INT 1
10702: DEC
10703: ST_TO_ADDR
10704: LD_VAR 0 2
10708: PUSH
10709: FOR_TO
10710: IFFALSE 10809
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10712: LD_VAR 0 3
10716: PUSH
10717: LD_VAR 0 1
10721: ARRAY
10722: PPUSH
10723: LD_VAR 0 1
10727: PUSH
10728: LD_INT 4
10730: MOD
10731: PUSH
10732: LD_INT 1
10734: PLUS
10735: PPUSH
10736: CALL_OW 259
10740: PUSH
10741: LD_INT 10
10743: LESS
10744: IFFALSE 10807
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10746: LD_VAR 0 3
10750: PUSH
10751: LD_VAR 0 1
10755: ARRAY
10756: PPUSH
10757: LD_VAR 0 1
10761: PUSH
10762: LD_INT 4
10764: MOD
10765: PUSH
10766: LD_INT 1
10768: PLUS
10769: PPUSH
10770: LD_VAR 0 3
10774: PUSH
10775: LD_VAR 0 1
10779: ARRAY
10780: PPUSH
10781: LD_VAR 0 1
10785: PUSH
10786: LD_INT 4
10788: MOD
10789: PUSH
10790: LD_INT 1
10792: PLUS
10793: PPUSH
10794: CALL_OW 259
10798: PUSH
10799: LD_INT 1
10801: PLUS
10802: PPUSH
10803: CALL_OW 237
10807: GO 10709
10809: POP
10810: POP
// end ;
10811: PPOPN 3
10813: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10814: LD_EXP 40
10818: IFFALSE 10826
10820: PUSH
10821: LD_EXP 48
10825: AND
10826: IFFALSE 10846
10828: GO 10830
10830: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10831: LD_INT 4
10833: PPUSH
10834: LD_OWVAR 2
10838: PPUSH
10839: LD_INT 0
10841: PPUSH
10842: CALL_OW 324
10846: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10847: LD_EXP 40
10851: IFFALSE 10859
10853: PUSH
10854: LD_EXP 77
10858: AND
10859: IFFALSE 10879
10861: GO 10863
10863: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10864: LD_INT 19
10866: PPUSH
10867: LD_OWVAR 2
10871: PPUSH
10872: LD_INT 0
10874: PPUSH
10875: CALL_OW 324
10879: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10880: LD_EXP 40
10884: IFFALSE 10892
10886: PUSH
10887: LD_EXP 49
10891: AND
10892: IFFALSE 10994
10894: GO 10896
10896: DISABLE
10897: LD_INT 0
10899: PPUSH
10900: PPUSH
// begin enable ;
10901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10902: LD_ADDR_VAR 0 2
10906: PUSH
10907: LD_INT 22
10909: PUSH
10910: LD_OWVAR 2
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: LD_INT 2
10921: PUSH
10922: LD_INT 34
10924: PUSH
10925: LD_INT 11
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 34
10934: PUSH
10935: LD_INT 30
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PPUSH
10951: CALL_OW 69
10955: ST_TO_ADDR
// if not tmp then
10956: LD_VAR 0 2
10960: NOT
10961: IFFALSE 10965
// exit ;
10963: GO 10994
// for i in tmp do
10965: LD_ADDR_VAR 0 1
10969: PUSH
10970: LD_VAR 0 2
10974: PUSH
10975: FOR_IN
10976: IFFALSE 10992
// begin SetLives ( i , 0 ) ;
10978: LD_VAR 0 1
10982: PPUSH
10983: LD_INT 0
10985: PPUSH
10986: CALL_OW 234
// end ;
10990: GO 10975
10992: POP
10993: POP
// end ;
10994: PPOPN 2
10996: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10997: LD_EXP 40
11001: IFFALSE 11009
11003: PUSH
11004: LD_EXP 50
11008: AND
11009: IFFALSE 11029
11011: GO 11013
11013: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11014: LD_INT 32
11016: PPUSH
11017: LD_OWVAR 2
11021: PPUSH
11022: LD_INT 0
11024: PPUSH
11025: CALL_OW 324
11029: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11030: LD_EXP 40
11034: IFFALSE 11042
11036: PUSH
11037: LD_EXP 51
11041: AND
11042: IFFALSE 11225
11044: GO 11046
11046: DISABLE
11047: LD_INT 0
11049: PPUSH
11050: PPUSH
11051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11052: LD_ADDR_VAR 0 2
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_OWVAR 2
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 33
11071: PUSH
11072: LD_INT 3
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PPUSH
11083: CALL_OW 69
11087: ST_TO_ADDR
// if not tmp then
11088: LD_VAR 0 2
11092: NOT
11093: IFFALSE 11097
// exit ;
11095: GO 11225
// side := 0 ;
11097: LD_ADDR_VAR 0 3
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// for i := 1 to 8 do
11105: LD_ADDR_VAR 0 1
11109: PUSH
11110: DOUBLE
11111: LD_INT 1
11113: DEC
11114: ST_TO_ADDR
11115: LD_INT 8
11117: PUSH
11118: FOR_TO
11119: IFFALSE 11169
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11121: LD_OWVAR 2
11125: PUSH
11126: LD_VAR 0 1
11130: NONEQUAL
11131: IFFALSE 11153
11133: PUSH
11134: LD_OWVAR 2
11138: PPUSH
11139: LD_VAR 0 1
11143: PPUSH
11144: CALL_OW 81
11148: PUSH
11149: LD_INT 2
11151: EQUAL
11152: AND
11153: IFFALSE 11167
// begin side := i ;
11155: LD_ADDR_VAR 0 3
11159: PUSH
11160: LD_VAR 0 1
11164: ST_TO_ADDR
// break ;
11165: GO 11169
// end ;
11167: GO 11118
11169: POP
11170: POP
// if not side then
11171: LD_VAR 0 3
11175: NOT
11176: IFFALSE 11180
// exit ;
11178: GO 11225
// for i := 1 to tmp do
11180: LD_ADDR_VAR 0 1
11184: PUSH
11185: DOUBLE
11186: LD_INT 1
11188: DEC
11189: ST_TO_ADDR
11190: LD_VAR 0 2
11194: PUSH
11195: FOR_TO
11196: IFFALSE 11223
// if Prob ( 60 ) then
11198: LD_INT 60
11200: PPUSH
11201: CALL_OW 13
11205: IFFALSE 11221
// SetSide ( i , side ) ;
11207: LD_VAR 0 1
11211: PPUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: CALL_OW 235
11221: GO 11195
11223: POP
11224: POP
// end ;
11225: PPOPN 3
11227: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11228: LD_EXP 40
11232: IFFALSE 11240
11234: PUSH
11235: LD_EXP 53
11239: AND
11240: IFFALSE 11359
11242: GO 11244
11244: DISABLE
11245: LD_INT 0
11247: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11248: LD_ADDR_VAR 0 1
11252: PUSH
11253: LD_INT 22
11255: PUSH
11256: LD_OWVAR 2
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 21
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 3
11277: PUSH
11278: LD_INT 23
11280: PUSH
11281: LD_INT 0
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: PPUSH
11297: CALL_OW 69
11301: PUSH
11302: FOR_IN
11303: IFFALSE 11357
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11305: LD_VAR 0 1
11309: PPUSH
11310: CALL_OW 257
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: LD_INT 2
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: LD_INT 4
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: IN
11333: IFFALSE 11355
// SetClass ( un , rand ( 1 , 4 ) ) ;
11335: LD_VAR 0 1
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: LD_INT 4
11345: PPUSH
11346: CALL_OW 12
11350: PPUSH
11351: CALL_OW 336
11355: GO 11302
11357: POP
11358: POP
// end ;
11359: PPOPN 1
11361: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11362: LD_EXP 40
11366: IFFALSE 11374
11368: PUSH
11369: LD_EXP 52
11373: AND
11374: IFFALSE 11453
11376: GO 11378
11378: DISABLE
11379: LD_INT 0
11381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11382: LD_ADDR_VAR 0 1
11386: PUSH
11387: LD_INT 22
11389: PUSH
11390: LD_OWVAR 2
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 21
11401: PUSH
11402: LD_INT 3
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 69
11417: ST_TO_ADDR
// if not tmp then
11418: LD_VAR 0 1
11422: NOT
11423: IFFALSE 11427
// exit ;
11425: GO 11453
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11427: LD_VAR 0 1
11431: PUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_VAR 0 1
11439: PPUSH
11440: CALL_OW 12
11444: ARRAY
11445: PPUSH
11446: LD_INT 100
11448: PPUSH
11449: CALL_OW 234
// end ;
11453: PPOPN 1
11455: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11456: LD_EXP 40
11460: IFFALSE 11468
11462: PUSH
11463: LD_EXP 54
11467: AND
11468: IFFALSE 11566
11470: GO 11472
11472: DISABLE
11473: LD_INT 0
11475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11476: LD_ADDR_VAR 0 1
11480: PUSH
11481: LD_INT 22
11483: PUSH
11484: LD_OWVAR 2
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 21
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PPUSH
11507: CALL_OW 69
11511: ST_TO_ADDR
// if not tmp then
11512: LD_VAR 0 1
11516: NOT
11517: IFFALSE 11521
// exit ;
11519: GO 11566
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11521: LD_VAR 0 1
11525: PUSH
11526: LD_INT 1
11528: PPUSH
11529: LD_VAR 0 1
11533: PPUSH
11534: CALL_OW 12
11538: ARRAY
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: LD_INT 4
11545: PPUSH
11546: CALL_OW 12
11550: PPUSH
11551: LD_INT 3000
11553: PPUSH
11554: LD_INT 9000
11556: PPUSH
11557: CALL_OW 12
11561: PPUSH
11562: CALL_OW 492
// end ;
11566: PPOPN 1
11568: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11569: LD_EXP 40
11573: IFFALSE 11581
11575: PUSH
11576: LD_EXP 55
11580: AND
11581: IFFALSE 11601
11583: GO 11585
11585: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11586: LD_INT 1
11588: PPUSH
11589: LD_OWVAR 2
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 324
11601: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11602: LD_EXP 40
11606: IFFALSE 11614
11608: PUSH
11609: LD_EXP 56
11613: AND
11614: IFFALSE 11697
11616: GO 11618
11618: DISABLE
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11623: LD_ADDR_VAR 0 2
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_OWVAR 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 3
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 69
11658: ST_TO_ADDR
// if not tmp then
11659: LD_VAR 0 2
11663: NOT
11664: IFFALSE 11668
// exit ;
11666: GO 11697
// for i in tmp do
11668: LD_ADDR_VAR 0 1
11672: PUSH
11673: LD_VAR 0 2
11677: PUSH
11678: FOR_IN
11679: IFFALSE 11695
// SetBLevel ( i , 10 ) ;
11681: LD_VAR 0 1
11685: PPUSH
11686: LD_INT 10
11688: PPUSH
11689: CALL_OW 241
11693: GO 11678
11695: POP
11696: POP
// end ;
11697: PPOPN 2
11699: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11700: LD_EXP 40
11704: IFFALSE 11712
11706: PUSH
11707: LD_EXP 57
11711: AND
11712: IFFALSE 11823
11714: GO 11716
11716: DISABLE
11717: LD_INT 0
11719: PPUSH
11720: PPUSH
11721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11722: LD_ADDR_VAR 0 3
11726: PUSH
11727: LD_INT 22
11729: PUSH
11730: LD_OWVAR 2
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 25
11741: PUSH
11742: LD_INT 1
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL_OW 69
11757: ST_TO_ADDR
// if not tmp then
11758: LD_VAR 0 3
11762: NOT
11763: IFFALSE 11767
// exit ;
11765: GO 11823
// un := tmp [ rand ( 1 , tmp ) ] ;
11767: LD_ADDR_VAR 0 2
11771: PUSH
11772: LD_VAR 0 3
11776: PUSH
11777: LD_INT 1
11779: PPUSH
11780: LD_VAR 0 3
11784: PPUSH
11785: CALL_OW 12
11789: ARRAY
11790: ST_TO_ADDR
// if Crawls ( un ) then
11791: LD_VAR 0 2
11795: PPUSH
11796: CALL_OW 318
11800: IFFALSE 11811
// ComWalk ( un ) ;
11802: LD_VAR 0 2
11806: PPUSH
11807: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11811: LD_VAR 0 2
11815: PPUSH
11816: LD_INT 5
11818: PPUSH
11819: CALL_OW 336
// end ;
11823: PPOPN 3
11825: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11826: LD_EXP 40
11830: IFFALSE 11838
11832: PUSH
11833: LD_EXP 58
11837: AND
11838: IFFALSE 11850
11840: PUSH
11841: LD_OWVAR 67
11845: PUSH
11846: LD_INT 4
11848: LESS
11849: AND
11850: IFFALSE 11869
11852: GO 11854
11854: DISABLE
// begin Difficulty := Difficulty + 1 ;
11855: LD_ADDR_OWVAR 67
11859: PUSH
11860: LD_OWVAR 67
11864: PUSH
11865: LD_INT 1
11867: PLUS
11868: ST_TO_ADDR
// end ;
11869: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11870: LD_EXP 40
11874: IFFALSE 11882
11876: PUSH
11877: LD_EXP 59
11881: AND
11882: IFFALSE 11985
11884: GO 11886
11886: DISABLE
11887: LD_INT 0
11889: PPUSH
// begin for i := 1 to 5 do
11890: LD_ADDR_VAR 0 1
11894: PUSH
11895: DOUBLE
11896: LD_INT 1
11898: DEC
11899: ST_TO_ADDR
11900: LD_INT 5
11902: PUSH
11903: FOR_TO
11904: IFFALSE 11983
// begin uc_nation := nation_nature ;
11906: LD_ADDR_OWVAR 21
11910: PUSH
11911: LD_INT 0
11913: ST_TO_ADDR
// uc_side := 0 ;
11914: LD_ADDR_OWVAR 20
11918: PUSH
11919: LD_INT 0
11921: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11922: LD_ADDR_OWVAR 29
11926: PUSH
11927: LD_INT 12
11929: PUSH
11930: LD_INT 12
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: ST_TO_ADDR
// hc_agressivity := 20 ;
11937: LD_ADDR_OWVAR 35
11941: PUSH
11942: LD_INT 20
11944: ST_TO_ADDR
// hc_class := class_tiger ;
11945: LD_ADDR_OWVAR 28
11949: PUSH
11950: LD_INT 14
11952: ST_TO_ADDR
// hc_gallery :=  ;
11953: LD_ADDR_OWVAR 33
11957: PUSH
11958: LD_STRING 
11960: ST_TO_ADDR
// hc_name :=  ;
11961: LD_ADDR_OWVAR 26
11965: PUSH
11966: LD_STRING 
11968: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11969: CALL_OW 44
11973: PPUSH
11974: LD_INT 0
11976: PPUSH
11977: CALL_OW 51
// end ;
11981: GO 11903
11983: POP
11984: POP
// end ;
11985: PPOPN 1
11987: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11988: LD_EXP 40
11992: IFFALSE 12000
11994: PUSH
11995: LD_EXP 60
11999: AND
12000: IFFALSE 12009
12002: GO 12004
12004: DISABLE
// StreamSibBomb ;
12005: CALL 12010 0 0
12009: END
// export function StreamSibBomb ; var i , x , y ; begin
12010: LD_INT 0
12012: PPUSH
12013: PPUSH
12014: PPUSH
12015: PPUSH
// result := false ;
12016: LD_ADDR_VAR 0 1
12020: PUSH
12021: LD_INT 0
12023: ST_TO_ADDR
// for i := 1 to 16 do
12024: LD_ADDR_VAR 0 2
12028: PUSH
12029: DOUBLE
12030: LD_INT 1
12032: DEC
12033: ST_TO_ADDR
12034: LD_INT 16
12036: PUSH
12037: FOR_TO
12038: IFFALSE 12237
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12040: LD_ADDR_VAR 0 3
12044: PUSH
12045: LD_INT 10
12047: PUSH
12048: LD_INT 20
12050: PUSH
12051: LD_INT 30
12053: PUSH
12054: LD_INT 40
12056: PUSH
12057: LD_INT 50
12059: PUSH
12060: LD_INT 60
12062: PUSH
12063: LD_INT 70
12065: PUSH
12066: LD_INT 80
12068: PUSH
12069: LD_INT 90
12071: PUSH
12072: LD_INT 100
12074: PUSH
12075: LD_INT 110
12077: PUSH
12078: LD_INT 120
12080: PUSH
12081: LD_INT 130
12083: PUSH
12084: LD_INT 140
12086: PUSH
12087: LD_INT 150
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 1
12109: PPUSH
12110: LD_INT 15
12112: PPUSH
12113: CALL_OW 12
12117: ARRAY
12118: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12119: LD_ADDR_VAR 0 4
12123: PUSH
12124: LD_INT 10
12126: PUSH
12127: LD_INT 20
12129: PUSH
12130: LD_INT 30
12132: PUSH
12133: LD_INT 40
12135: PUSH
12136: LD_INT 50
12138: PUSH
12139: LD_INT 60
12141: PUSH
12142: LD_INT 70
12144: PUSH
12145: LD_INT 80
12147: PUSH
12148: LD_INT 90
12150: PUSH
12151: LD_INT 100
12153: PUSH
12154: LD_INT 110
12156: PUSH
12157: LD_INT 120
12159: PUSH
12160: LD_INT 130
12162: PUSH
12163: LD_INT 140
12165: PUSH
12166: LD_INT 150
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 1
12188: PPUSH
12189: LD_INT 15
12191: PPUSH
12192: CALL_OW 12
12196: ARRAY
12197: ST_TO_ADDR
// if ValidHex ( x , y ) then
12198: LD_VAR 0 3
12202: PPUSH
12203: LD_VAR 0 4
12207: PPUSH
12208: CALL_OW 488
12212: IFFALSE 12235
// begin result := [ x , y ] ;
12214: LD_ADDR_VAR 0 1
12218: PUSH
12219: LD_VAR 0 3
12223: PUSH
12224: LD_VAR 0 4
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: ST_TO_ADDR
// break ;
12233: GO 12237
// end ; end ;
12235: GO 12037
12237: POP
12238: POP
// if result then
12239: LD_VAR 0 1
12243: IFFALSE 12303
// begin ToLua ( playSibBomb() ) ;
12245: LD_STRING playSibBomb()
12247: PPUSH
12248: CALL_OW 559
// wait ( 0 0$14 ) ;
12252: LD_INT 490
12254: PPUSH
12255: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12259: LD_VAR 0 1
12263: PUSH
12264: LD_INT 1
12266: ARRAY
12267: PPUSH
12268: LD_VAR 0 1
12272: PUSH
12273: LD_INT 2
12275: ARRAY
12276: PPUSH
12277: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12281: LD_VAR 0 1
12285: PUSH
12286: LD_INT 1
12288: ARRAY
12289: PPUSH
12290: LD_VAR 0 1
12294: PUSH
12295: LD_INT 2
12297: ARRAY
12298: PPUSH
12299: CALL_OW 429
// end ; end ;
12303: LD_VAR 0 1
12307: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12308: LD_EXP 40
12312: IFFALSE 12320
12314: PUSH
12315: LD_EXP 62
12319: AND
12320: IFFALSE 12332
12322: GO 12324
12324: DISABLE
// YouLost (  ) ;
12325: LD_STRING 
12327: PPUSH
12328: CALL_OW 104
12332: END
// every 0 0$1 trigger StreamModeActive and sFog do
12333: LD_EXP 40
12337: IFFALSE 12345
12339: PUSH
12340: LD_EXP 61
12344: AND
12345: IFFALSE 12359
12347: GO 12349
12349: DISABLE
// FogOff ( your_side ) ;
12350: LD_OWVAR 2
12354: PPUSH
12355: CALL_OW 344
12359: END
// every 0 0$1 trigger StreamModeActive and sSun do
12360: LD_EXP 40
12364: IFFALSE 12372
12366: PUSH
12367: LD_EXP 63
12371: AND
12372: IFFALSE 12400
12374: GO 12376
12376: DISABLE
// begin solar_recharge_percent := 0 ;
12377: LD_ADDR_OWVAR 79
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12385: LD_INT 10500
12387: PPUSH
12388: CALL_OW 67
// solar_recharge_percent := 100 ;
12392: LD_ADDR_OWVAR 79
12396: PUSH
12397: LD_INT 100
12399: ST_TO_ADDR
// end ;
12400: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12401: LD_EXP 40
12405: IFFALSE 12413
12407: PUSH
12408: LD_EXP 64
12412: AND
12413: IFFALSE 12652
12415: GO 12417
12417: DISABLE
12418: LD_INT 0
12420: PPUSH
12421: PPUSH
12422: PPUSH
// begin tmp := [ ] ;
12423: LD_ADDR_VAR 0 3
12427: PUSH
12428: EMPTY
12429: ST_TO_ADDR
// for i := 1 to 6 do
12430: LD_ADDR_VAR 0 1
12434: PUSH
12435: DOUBLE
12436: LD_INT 1
12438: DEC
12439: ST_TO_ADDR
12440: LD_INT 6
12442: PUSH
12443: FOR_TO
12444: IFFALSE 12549
// begin uc_nation := nation_nature ;
12446: LD_ADDR_OWVAR 21
12450: PUSH
12451: LD_INT 0
12453: ST_TO_ADDR
// uc_side := 0 ;
12454: LD_ADDR_OWVAR 20
12458: PUSH
12459: LD_INT 0
12461: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12462: LD_ADDR_OWVAR 29
12466: PUSH
12467: LD_INT 12
12469: PUSH
12470: LD_INT 12
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: ST_TO_ADDR
// hc_agressivity := 20 ;
12477: LD_ADDR_OWVAR 35
12481: PUSH
12482: LD_INT 20
12484: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12485: LD_ADDR_OWVAR 28
12489: PUSH
12490: LD_INT 17
12492: ST_TO_ADDR
// hc_gallery :=  ;
12493: LD_ADDR_OWVAR 33
12497: PUSH
12498: LD_STRING 
12500: ST_TO_ADDR
// hc_name :=  ;
12501: LD_ADDR_OWVAR 26
12505: PUSH
12506: LD_STRING 
12508: ST_TO_ADDR
// un := CreateHuman ;
12509: LD_ADDR_VAR 0 2
12513: PUSH
12514: CALL_OW 44
12518: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12519: LD_VAR 0 2
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 51
// tmp := tmp ^ un ;
12531: LD_ADDR_VAR 0 3
12535: PUSH
12536: LD_VAR 0 3
12540: PUSH
12541: LD_VAR 0 2
12545: ADD
12546: ST_TO_ADDR
// end ;
12547: GO 12443
12549: POP
12550: POP
// repeat wait ( 0 0$1 ) ;
12551: LD_INT 35
12553: PPUSH
12554: CALL_OW 67
// for un in tmp do
12558: LD_ADDR_VAR 0 2
12562: PUSH
12563: LD_VAR 0 3
12567: PUSH
12568: FOR_IN
12569: IFFALSE 12643
// begin if IsDead ( un ) then
12571: LD_VAR 0 2
12575: PPUSH
12576: CALL_OW 301
12580: IFFALSE 12600
// begin tmp := tmp diff un ;
12582: LD_ADDR_VAR 0 3
12586: PUSH
12587: LD_VAR 0 3
12591: PUSH
12592: LD_VAR 0 2
12596: DIFF
12597: ST_TO_ADDR
// continue ;
12598: GO 12568
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12600: LD_VAR 0 2
12604: PPUSH
12605: LD_INT 3
12607: PUSH
12608: LD_INT 22
12610: PUSH
12611: LD_INT 0
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 69
12626: PPUSH
12627: LD_VAR 0 2
12631: PPUSH
12632: CALL_OW 74
12636: PPUSH
12637: CALL_OW 115
// end ;
12641: GO 12568
12643: POP
12644: POP
// until not tmp ;
12645: LD_VAR 0 3
12649: NOT
12650: IFFALSE 12551
// end ;
12652: PPOPN 3
12654: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12655: LD_EXP 40
12659: IFFALSE 12667
12661: PUSH
12662: LD_EXP 65
12666: AND
12667: IFFALSE 12721
12669: GO 12671
12671: DISABLE
// begin ToLua ( displayTroll(); ) ;
12672: LD_STRING displayTroll();
12674: PPUSH
12675: CALL_OW 559
// wait ( 3 3$00 ) ;
12679: LD_INT 6300
12681: PPUSH
12682: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12686: LD_STRING hideTroll();
12688: PPUSH
12689: CALL_OW 559
// wait ( 1 1$00 ) ;
12693: LD_INT 2100
12695: PPUSH
12696: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12700: LD_STRING displayTroll();
12702: PPUSH
12703: CALL_OW 559
// wait ( 1 1$00 ) ;
12707: LD_INT 2100
12709: PPUSH
12710: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12714: LD_STRING hideTroll();
12716: PPUSH
12717: CALL_OW 559
// end ;
12721: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12722: LD_EXP 40
12726: IFFALSE 12734
12728: PUSH
12729: LD_EXP 66
12733: AND
12734: IFFALSE 12797
12736: GO 12738
12738: DISABLE
12739: LD_INT 0
12741: PPUSH
// begin p := 0 ;
12742: LD_ADDR_VAR 0 1
12746: PUSH
12747: LD_INT 0
12749: ST_TO_ADDR
// repeat game_speed := 1 ;
12750: LD_ADDR_OWVAR 65
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12758: LD_INT 35
12760: PPUSH
12761: CALL_OW 67
// p := p + 1 ;
12765: LD_ADDR_VAR 0 1
12769: PUSH
12770: LD_VAR 0 1
12774: PUSH
12775: LD_INT 1
12777: PLUS
12778: ST_TO_ADDR
// until p >= 60 ;
12779: LD_VAR 0 1
12783: PUSH
12784: LD_INT 60
12786: GREATEREQUAL
12787: IFFALSE 12750
// game_speed := 4 ;
12789: LD_ADDR_OWVAR 65
12793: PUSH
12794: LD_INT 4
12796: ST_TO_ADDR
// end ;
12797: PPOPN 1
12799: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12800: LD_EXP 40
12804: IFFALSE 12812
12806: PUSH
12807: LD_EXP 67
12811: AND
12812: IFFALSE 12958
12814: GO 12816
12816: DISABLE
12817: LD_INT 0
12819: PPUSH
12820: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: LD_INT 22
12828: PUSH
12829: LD_OWVAR 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: LD_INT 30
12843: PUSH
12844: LD_INT 0
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 30
12853: PUSH
12854: LD_INT 1
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PPUSH
12870: CALL_OW 69
12874: ST_TO_ADDR
// if not depot then
12875: LD_VAR 0 1
12879: NOT
12880: IFFALSE 12884
// exit ;
12882: GO 12958
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: LD_VAR 0 1
12893: PUSH
12894: LD_INT 1
12896: PPUSH
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 12
12906: ARRAY
12907: PPUSH
12908: CALL_OW 274
12912: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12913: LD_VAR 0 2
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: LD_INT 0
12923: PPUSH
12924: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12928: LD_VAR 0 2
12932: PPUSH
12933: LD_INT 2
12935: PPUSH
12936: LD_INT 0
12938: PPUSH
12939: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12943: LD_VAR 0 2
12947: PPUSH
12948: LD_INT 3
12950: PPUSH
12951: LD_INT 0
12953: PPUSH
12954: CALL_OW 277
// end ;
12958: PPOPN 2
12960: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12961: LD_EXP 40
12965: IFFALSE 12973
12967: PUSH
12968: LD_EXP 68
12972: AND
12973: IFFALSE 13070
12975: GO 12977
12977: DISABLE
12978: LD_INT 0
12980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12981: LD_ADDR_VAR 0 1
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_OWVAR 2
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 21
13000: PUSH
13001: LD_INT 1
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 3
13010: PUSH
13011: LD_INT 23
13013: PUSH
13014: LD_INT 0
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: ST_TO_ADDR
// if not tmp then
13035: LD_VAR 0 1
13039: NOT
13040: IFFALSE 13044
// exit ;
13042: GO 13070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13044: LD_VAR 0 1
13048: PUSH
13049: LD_INT 1
13051: PPUSH
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 12
13061: ARRAY
13062: PPUSH
13063: LD_INT 200
13065: PPUSH
13066: CALL_OW 234
// end ;
13070: PPOPN 1
13072: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13073: LD_EXP 40
13077: IFFALSE 13085
13079: PUSH
13080: LD_EXP 69
13084: AND
13085: IFFALSE 13164
13087: GO 13089
13089: DISABLE
13090: LD_INT 0
13092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13093: LD_ADDR_VAR 0 1
13097: PUSH
13098: LD_INT 22
13100: PUSH
13101: LD_OWVAR 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 21
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PPUSH
13124: CALL_OW 69
13128: ST_TO_ADDR
// if not tmp then
13129: LD_VAR 0 1
13133: NOT
13134: IFFALSE 13138
// exit ;
13136: GO 13164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13138: LD_VAR 0 1
13142: PUSH
13143: LD_INT 1
13145: PPUSH
13146: LD_VAR 0 1
13150: PPUSH
13151: CALL_OW 12
13155: ARRAY
13156: PPUSH
13157: LD_INT 60
13159: PPUSH
13160: CALL_OW 234
// end ;
13164: PPOPN 1
13166: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13167: LD_EXP 40
13171: IFFALSE 13179
13173: PUSH
13174: LD_EXP 70
13178: AND
13179: IFFALSE 13278
13181: GO 13183
13183: DISABLE
13184: LD_INT 0
13186: PPUSH
13187: PPUSH
// begin enable ;
13188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13189: LD_ADDR_VAR 0 1
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_OWVAR 2
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 61
13208: PUSH
13209: EMPTY
13210: LIST
13211: PUSH
13212: LD_INT 33
13214: PUSH
13215: LD_INT 2
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: ST_TO_ADDR
// if not tmp then
13232: LD_VAR 0 1
13236: NOT
13237: IFFALSE 13241
// exit ;
13239: GO 13278
// for i in tmp do
13241: LD_ADDR_VAR 0 2
13245: PUSH
13246: LD_VAR 0 1
13250: PUSH
13251: FOR_IN
13252: IFFALSE 13276
// if IsControledBy ( i ) then
13254: LD_VAR 0 2
13258: PPUSH
13259: CALL_OW 312
13263: IFFALSE 13274
// ComUnlink ( i ) ;
13265: LD_VAR 0 2
13269: PPUSH
13270: CALL_OW 136
13274: GO 13251
13276: POP
13277: POP
// end ;
13278: PPOPN 2
13280: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13281: LD_EXP 40
13285: IFFALSE 13293
13287: PUSH
13288: LD_EXP 71
13292: AND
13293: IFFALSE 13433
13295: GO 13297
13297: DISABLE
13298: LD_INT 0
13300: PPUSH
13301: PPUSH
// begin ToLua ( displayPowell(); ) ;
13302: LD_STRING displayPowell();
13304: PPUSH
13305: CALL_OW 559
// uc_side := 0 ;
13309: LD_ADDR_OWVAR 20
13313: PUSH
13314: LD_INT 0
13316: ST_TO_ADDR
// uc_nation := 2 ;
13317: LD_ADDR_OWVAR 21
13321: PUSH
13322: LD_INT 2
13324: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13325: LD_ADDR_OWVAR 37
13329: PUSH
13330: LD_INT 14
13332: ST_TO_ADDR
// vc_engine := engine_siberite ;
13333: LD_ADDR_OWVAR 39
13337: PUSH
13338: LD_INT 3
13340: ST_TO_ADDR
// vc_control := control_apeman ;
13341: LD_ADDR_OWVAR 38
13345: PUSH
13346: LD_INT 5
13348: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13349: LD_ADDR_OWVAR 40
13353: PUSH
13354: LD_INT 29
13356: ST_TO_ADDR
// un := CreateVehicle ;
13357: LD_ADDR_VAR 0 2
13361: PUSH
13362: CALL_OW 45
13366: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13367: LD_VAR 0 2
13371: PPUSH
13372: LD_INT 1
13374: PPUSH
13375: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13379: LD_INT 35
13381: PPUSH
13382: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13386: LD_VAR 0 2
13390: PPUSH
13391: LD_INT 22
13393: PUSH
13394: LD_OWVAR 2
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: PPUSH
13408: LD_VAR 0 2
13412: PPUSH
13413: CALL_OW 74
13417: PPUSH
13418: CALL_OW 115
// until IsDead ( un ) ;
13422: LD_VAR 0 2
13426: PPUSH
13427: CALL_OW 301
13431: IFFALSE 13379
// end ;
13433: PPOPN 2
13435: END
// every 0 0$1 trigger StreamModeActive and sStu do
13436: LD_EXP 40
13440: IFFALSE 13448
13442: PUSH
13443: LD_EXP 79
13447: AND
13448: IFFALSE 13464
13450: GO 13452
13452: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13453: LD_STRING displayStucuk();
13455: PPUSH
13456: CALL_OW 559
// ResetFog ;
13460: CALL_OW 335
// end ;
13464: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13465: LD_EXP 40
13469: IFFALSE 13477
13471: PUSH
13472: LD_EXP 72
13476: AND
13477: IFFALSE 13618
13479: GO 13481
13481: DISABLE
13482: LD_INT 0
13484: PPUSH
13485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13486: LD_ADDR_VAR 0 2
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_OWVAR 2
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 21
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 69
13521: ST_TO_ADDR
// if not tmp then
13522: LD_VAR 0 2
13526: NOT
13527: IFFALSE 13531
// exit ;
13529: GO 13618
// un := tmp [ rand ( 1 , tmp ) ] ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_VAR 0 2
13540: PUSH
13541: LD_INT 1
13543: PPUSH
13544: LD_VAR 0 2
13548: PPUSH
13549: CALL_OW 12
13553: ARRAY
13554: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13555: LD_VAR 0 1
13559: PPUSH
13560: LD_INT 0
13562: PPUSH
13563: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13567: LD_VAR 0 1
13571: PPUSH
13572: LD_OWVAR 3
13576: PUSH
13577: LD_VAR 0 1
13581: DIFF
13582: PPUSH
13583: LD_VAR 0 1
13587: PPUSH
13588: CALL_OW 74
13592: PPUSH
13593: CALL_OW 115
// wait ( 0 0$20 ) ;
13597: LD_INT 700
13599: PPUSH
13600: CALL_OW 67
// SetSide ( un , your_side ) ;
13604: LD_VAR 0 1
13608: PPUSH
13609: LD_OWVAR 2
13613: PPUSH
13614: CALL_OW 235
// end ;
13618: PPOPN 2
13620: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13621: LD_EXP 40
13625: IFFALSE 13633
13627: PUSH
13628: LD_EXP 73
13632: AND
13633: IFFALSE 13739
13635: GO 13637
13637: DISABLE
13638: LD_INT 0
13640: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13641: LD_ADDR_VAR 0 1
13645: PUSH
13646: LD_INT 22
13648: PUSH
13649: LD_OWVAR 2
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 2
13660: PUSH
13661: LD_INT 30
13663: PUSH
13664: LD_INT 0
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 30
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: ST_TO_ADDR
// if not depot then
13695: LD_VAR 0 1
13699: NOT
13700: IFFALSE 13704
// exit ;
13702: GO 13739
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13704: LD_VAR 0 1
13708: PUSH
13709: LD_INT 1
13711: ARRAY
13712: PPUSH
13713: CALL_OW 250
13717: PPUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 251
13731: PPUSH
13732: LD_INT 70
13734: PPUSH
13735: CALL_OW 495
// end ;
13739: PPOPN 1
13741: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13742: LD_EXP 40
13746: IFFALSE 13754
13748: PUSH
13749: LD_EXP 74
13753: AND
13754: IFFALSE 13965
13756: GO 13758
13758: DISABLE
13759: LD_INT 0
13761: PPUSH
13762: PPUSH
13763: PPUSH
13764: PPUSH
13765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13766: LD_ADDR_VAR 0 5
13770: PUSH
13771: LD_INT 22
13773: PUSH
13774: LD_OWVAR 2
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 21
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PPUSH
13797: CALL_OW 69
13801: ST_TO_ADDR
// if not tmp then
13802: LD_VAR 0 5
13806: NOT
13807: IFFALSE 13811
// exit ;
13809: GO 13965
// for i in tmp do
13811: LD_ADDR_VAR 0 1
13815: PUSH
13816: LD_VAR 0 5
13820: PUSH
13821: FOR_IN
13822: IFFALSE 13963
// begin d := rand ( 0 , 5 ) ;
13824: LD_ADDR_VAR 0 4
13828: PUSH
13829: LD_INT 0
13831: PPUSH
13832: LD_INT 5
13834: PPUSH
13835: CALL_OW 12
13839: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13840: LD_ADDR_VAR 0 2
13844: PUSH
13845: LD_VAR 0 1
13849: PPUSH
13850: CALL_OW 250
13854: PPUSH
13855: LD_VAR 0 4
13859: PPUSH
13860: LD_INT 3
13862: PPUSH
13863: LD_INT 12
13865: PPUSH
13866: CALL_OW 12
13870: PPUSH
13871: CALL_OW 272
13875: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13876: LD_ADDR_VAR 0 3
13880: PUSH
13881: LD_VAR 0 1
13885: PPUSH
13886: CALL_OW 251
13890: PPUSH
13891: LD_VAR 0 4
13895: PPUSH
13896: LD_INT 3
13898: PPUSH
13899: LD_INT 12
13901: PPUSH
13902: CALL_OW 12
13906: PPUSH
13907: CALL_OW 273
13911: ST_TO_ADDR
// if ValidHex ( x , y ) then
13912: LD_VAR 0 2
13916: PPUSH
13917: LD_VAR 0 3
13921: PPUSH
13922: CALL_OW 488
13926: IFFALSE 13961
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13928: LD_VAR 0 1
13932: PPUSH
13933: LD_VAR 0 2
13937: PPUSH
13938: LD_VAR 0 3
13942: PPUSH
13943: LD_INT 3
13945: PPUSH
13946: LD_INT 6
13948: PPUSH
13949: CALL_OW 12
13953: PPUSH
13954: LD_INT 1
13956: PPUSH
13957: CALL_OW 483
// end ;
13961: GO 13821
13963: POP
13964: POP
// end ;
13965: PPOPN 5
13967: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13968: LD_EXP 40
13972: IFFALSE 13980
13974: PUSH
13975: LD_EXP 75
13979: AND
13980: IFFALSE 14074
13982: GO 13984
13984: DISABLE
13985: LD_INT 0
13987: PPUSH
13988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13989: LD_ADDR_VAR 0 2
13993: PUSH
13994: LD_INT 22
13996: PUSH
13997: LD_OWVAR 2
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: LD_INT 32
14008: PUSH
14009: LD_INT 1
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 2
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 69
14035: ST_TO_ADDR
// if not tmp then
14036: LD_VAR 0 2
14040: NOT
14041: IFFALSE 14045
// exit ;
14043: GO 14074
// for i in tmp do
14045: LD_ADDR_VAR 0 1
14049: PUSH
14050: LD_VAR 0 2
14054: PUSH
14055: FOR_IN
14056: IFFALSE 14072
// SetFuel ( i , 0 ) ;
14058: LD_VAR 0 1
14062: PPUSH
14063: LD_INT 0
14065: PPUSH
14066: CALL_OW 240
14070: GO 14055
14072: POP
14073: POP
// end ;
14074: PPOPN 2
14076: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14077: LD_EXP 40
14081: IFFALSE 14089
14083: PUSH
14084: LD_EXP 76
14088: AND
14089: IFFALSE 14155
14091: GO 14093
14093: DISABLE
14094: LD_INT 0
14096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14097: LD_ADDR_VAR 0 1
14101: PUSH
14102: LD_INT 22
14104: PUSH
14105: LD_OWVAR 2
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 30
14116: PUSH
14117: LD_INT 29
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 69
14132: ST_TO_ADDR
// if not tmp then
14133: LD_VAR 0 1
14137: NOT
14138: IFFALSE 14142
// exit ;
14140: GO 14155
// DestroyUnit ( tmp [ 1 ] ) ;
14142: LD_VAR 0 1
14146: PUSH
14147: LD_INT 1
14149: ARRAY
14150: PPUSH
14151: CALL_OW 65
// end ;
14155: PPOPN 1
14157: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14158: LD_EXP 40
14162: IFFALSE 14170
14164: PUSH
14165: LD_EXP 78
14169: AND
14170: IFFALSE 14299
14172: GO 14174
14174: DISABLE
14175: LD_INT 0
14177: PPUSH
// begin uc_side := 0 ;
14178: LD_ADDR_OWVAR 20
14182: PUSH
14183: LD_INT 0
14185: ST_TO_ADDR
// uc_nation := nation_arabian ;
14186: LD_ADDR_OWVAR 21
14190: PUSH
14191: LD_INT 2
14193: ST_TO_ADDR
// hc_gallery :=  ;
14194: LD_ADDR_OWVAR 33
14198: PUSH
14199: LD_STRING 
14201: ST_TO_ADDR
// hc_name :=  ;
14202: LD_ADDR_OWVAR 26
14206: PUSH
14207: LD_STRING 
14209: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14210: LD_INT 1
14212: PPUSH
14213: LD_INT 11
14215: PPUSH
14216: LD_INT 10
14218: PPUSH
14219: CALL_OW 380
// un := CreateHuman ;
14223: LD_ADDR_VAR 0 1
14227: PUSH
14228: CALL_OW 44
14232: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14233: LD_VAR 0 1
14237: PPUSH
14238: LD_INT 1
14240: PPUSH
14241: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14245: LD_INT 35
14247: PPUSH
14248: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14252: LD_VAR 0 1
14256: PPUSH
14257: LD_INT 22
14259: PUSH
14260: LD_OWVAR 2
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 69
14273: PPUSH
14274: LD_VAR 0 1
14278: PPUSH
14279: CALL_OW 74
14283: PPUSH
14284: CALL_OW 115
// until IsDead ( un ) ;
14288: LD_VAR 0 1
14292: PPUSH
14293: CALL_OW 301
14297: IFFALSE 14245
// end ;
14299: PPOPN 1
14301: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14302: LD_EXP 40
14306: IFFALSE 14314
14308: PUSH
14309: LD_EXP 80
14313: AND
14314: IFFALSE 14326
14316: GO 14318
14318: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14319: LD_STRING earthquake(getX(game), 0, 32)
14321: PPUSH
14322: CALL_OW 559
14326: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14327: LD_EXP 40
14331: IFFALSE 14339
14333: PUSH
14334: LD_EXP 81
14338: AND
14339: IFFALSE 14430
14341: GO 14343
14343: DISABLE
14344: LD_INT 0
14346: PPUSH
// begin enable ;
14347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14348: LD_ADDR_VAR 0 1
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_OWVAR 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 33
14377: PUSH
14378: LD_INT 3
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: PPUSH
14390: CALL_OW 69
14394: ST_TO_ADDR
// if not tmp then
14395: LD_VAR 0 1
14399: NOT
14400: IFFALSE 14404
// exit ;
14402: GO 14430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14404: LD_VAR 0 1
14408: PUSH
14409: LD_INT 1
14411: PPUSH
14412: LD_VAR 0 1
14416: PPUSH
14417: CALL_OW 12
14421: ARRAY
14422: PPUSH
14423: LD_INT 1
14425: PPUSH
14426: CALL_OW 234
// end ;
14430: PPOPN 1
14432: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14433: LD_EXP 40
14437: IFFALSE 14445
14439: PUSH
14440: LD_EXP 82
14444: AND
14445: IFFALSE 14586
14447: GO 14449
14449: DISABLE
14450: LD_INT 0
14452: PPUSH
14453: PPUSH
14454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14455: LD_ADDR_VAR 0 3
14459: PUSH
14460: LD_INT 22
14462: PUSH
14463: LD_OWVAR 2
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 25
14474: PUSH
14475: LD_INT 1
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 69
14490: ST_TO_ADDR
// if not tmp then
14491: LD_VAR 0 3
14495: NOT
14496: IFFALSE 14500
// exit ;
14498: GO 14586
// un := tmp [ rand ( 1 , tmp ) ] ;
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_VAR 0 3
14509: PUSH
14510: LD_INT 1
14512: PPUSH
14513: LD_VAR 0 3
14517: PPUSH
14518: CALL_OW 12
14522: ARRAY
14523: ST_TO_ADDR
// if Crawls ( un ) then
14524: LD_VAR 0 2
14528: PPUSH
14529: CALL_OW 318
14533: IFFALSE 14544
// ComWalk ( un ) ;
14535: LD_VAR 0 2
14539: PPUSH
14540: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14544: LD_VAR 0 2
14548: PPUSH
14549: LD_INT 9
14551: PPUSH
14552: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14556: LD_INT 28
14558: PPUSH
14559: LD_OWVAR 2
14563: PPUSH
14564: LD_INT 2
14566: PPUSH
14567: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14571: LD_INT 29
14573: PPUSH
14574: LD_OWVAR 2
14578: PPUSH
14579: LD_INT 2
14581: PPUSH
14582: CALL_OW 322
// end ;
14586: PPOPN 3
14588: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14589: LD_EXP 40
14593: IFFALSE 14601
14595: PUSH
14596: LD_EXP 83
14600: AND
14601: IFFALSE 14712
14603: GO 14605
14605: DISABLE
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
14610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_OWVAR 2
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 25
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PPUSH
14642: CALL_OW 69
14646: ST_TO_ADDR
// if not tmp then
14647: LD_VAR 0 3
14651: NOT
14652: IFFALSE 14656
// exit ;
14654: GO 14712
// un := tmp [ rand ( 1 , tmp ) ] ;
14656: LD_ADDR_VAR 0 2
14660: PUSH
14661: LD_VAR 0 3
14665: PUSH
14666: LD_INT 1
14668: PPUSH
14669: LD_VAR 0 3
14673: PPUSH
14674: CALL_OW 12
14678: ARRAY
14679: ST_TO_ADDR
// if Crawls ( un ) then
14680: LD_VAR 0 2
14684: PPUSH
14685: CALL_OW 318
14689: IFFALSE 14700
// ComWalk ( un ) ;
14691: LD_VAR 0 2
14695: PPUSH
14696: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14700: LD_VAR 0 2
14704: PPUSH
14705: LD_INT 8
14707: PPUSH
14708: CALL_OW 336
// end ;
14712: PPOPN 3
14714: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14715: LD_EXP 40
14719: IFFALSE 14727
14721: PUSH
14722: LD_EXP 84
14726: AND
14727: IFFALSE 14871
14729: GO 14731
14731: DISABLE
14732: LD_INT 0
14734: PPUSH
14735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14736: LD_ADDR_VAR 0 2
14740: PUSH
14741: LD_INT 22
14743: PUSH
14744: LD_OWVAR 2
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 21
14755: PUSH
14756: LD_INT 2
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 34
14768: PUSH
14769: LD_INT 12
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 34
14778: PUSH
14779: LD_INT 51
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 34
14788: PUSH
14789: LD_INT 32
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 69
14811: ST_TO_ADDR
// if not tmp then
14812: LD_VAR 0 2
14816: NOT
14817: IFFALSE 14821
// exit ;
14819: GO 14871
// for i in tmp do
14821: LD_ADDR_VAR 0 1
14825: PUSH
14826: LD_VAR 0 2
14830: PUSH
14831: FOR_IN
14832: IFFALSE 14869
// if GetCargo ( i , mat_artifact ) = 0 then
14834: LD_VAR 0 1
14838: PPUSH
14839: LD_INT 4
14841: PPUSH
14842: CALL_OW 289
14846: PUSH
14847: LD_INT 0
14849: EQUAL
14850: IFFALSE 14867
// SetCargo ( i , mat_siberit , 100 ) ;
14852: LD_VAR 0 1
14856: PPUSH
14857: LD_INT 3
14859: PPUSH
14860: LD_INT 100
14862: PPUSH
14863: CALL_OW 290
14867: GO 14831
14869: POP
14870: POP
// end ;
14871: PPOPN 2
14873: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14874: LD_EXP 40
14878: IFFALSE 14886
14880: PUSH
14881: LD_EXP 85
14885: AND
14886: IFFALSE 15069
14888: GO 14890
14890: DISABLE
14891: LD_INT 0
14893: PPUSH
14894: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_INT 22
14902: PUSH
14903: LD_OWVAR 2
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PPUSH
14912: CALL_OW 69
14916: ST_TO_ADDR
// if not tmp then
14917: LD_VAR 0 2
14921: NOT
14922: IFFALSE 14926
// exit ;
14924: GO 15069
// for i := 1 to 2 do
14926: LD_ADDR_VAR 0 1
14930: PUSH
14931: DOUBLE
14932: LD_INT 1
14934: DEC
14935: ST_TO_ADDR
14936: LD_INT 2
14938: PUSH
14939: FOR_TO
14940: IFFALSE 15067
// begin uc_side := your_side ;
14942: LD_ADDR_OWVAR 20
14946: PUSH
14947: LD_OWVAR 2
14951: ST_TO_ADDR
// uc_nation := nation_american ;
14952: LD_ADDR_OWVAR 21
14956: PUSH
14957: LD_INT 1
14959: ST_TO_ADDR
// vc_chassis := us_morphling ;
14960: LD_ADDR_OWVAR 37
14964: PUSH
14965: LD_INT 5
14967: ST_TO_ADDR
// vc_engine := engine_siberite ;
14968: LD_ADDR_OWVAR 39
14972: PUSH
14973: LD_INT 3
14975: ST_TO_ADDR
// vc_control := control_computer ;
14976: LD_ADDR_OWVAR 38
14980: PUSH
14981: LD_INT 3
14983: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14984: LD_ADDR_OWVAR 40
14988: PUSH
14989: LD_INT 10
14991: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14992: LD_VAR 0 2
14996: PUSH
14997: LD_INT 1
14999: ARRAY
15000: PPUSH
15001: CALL_OW 310
15005: NOT
15006: IFFALSE 15053
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15008: CALL_OW 45
15012: PPUSH
15013: LD_VAR 0 2
15017: PUSH
15018: LD_INT 1
15020: ARRAY
15021: PPUSH
15022: CALL_OW 250
15026: PPUSH
15027: LD_VAR 0 2
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PPUSH
15036: CALL_OW 251
15040: PPUSH
15041: LD_INT 12
15043: PPUSH
15044: LD_INT 1
15046: PPUSH
15047: CALL_OW 50
15051: GO 15065
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15053: CALL_OW 45
15057: PPUSH
15058: LD_INT 1
15060: PPUSH
15061: CALL_OW 51
// end ;
15065: GO 14939
15067: POP
15068: POP
// end ;
15069: PPOPN 2
15071: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15072: LD_EXP 40
15076: IFFALSE 15084
15078: PUSH
15079: LD_EXP 86
15083: AND
15084: IFFALSE 15306
15086: GO 15088
15088: DISABLE
15089: LD_INT 0
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15097: LD_ADDR_VAR 0 6
15101: PUSH
15102: LD_INT 22
15104: PUSH
15105: LD_OWVAR 2
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 21
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 3
15126: PUSH
15127: LD_INT 23
15129: PUSH
15130: LD_INT 0
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 69
15150: ST_TO_ADDR
// if not tmp then
15151: LD_VAR 0 6
15155: NOT
15156: IFFALSE 15160
// exit ;
15158: GO 15306
// s1 := rand ( 1 , 4 ) ;
15160: LD_ADDR_VAR 0 2
15164: PUSH
15165: LD_INT 1
15167: PPUSH
15168: LD_INT 4
15170: PPUSH
15171: CALL_OW 12
15175: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15176: LD_ADDR_VAR 0 4
15180: PUSH
15181: LD_VAR 0 6
15185: PUSH
15186: LD_INT 1
15188: ARRAY
15189: PPUSH
15190: LD_VAR 0 2
15194: PPUSH
15195: CALL_OW 259
15199: ST_TO_ADDR
// if s1 = 1 then
15200: LD_VAR 0 2
15204: PUSH
15205: LD_INT 1
15207: EQUAL
15208: IFFALSE 15228
// s2 := rand ( 2 , 4 ) else
15210: LD_ADDR_VAR 0 3
15214: PUSH
15215: LD_INT 2
15217: PPUSH
15218: LD_INT 4
15220: PPUSH
15221: CALL_OW 12
15225: ST_TO_ADDR
15226: GO 15236
// s2 := 1 ;
15228: LD_ADDR_VAR 0 3
15232: PUSH
15233: LD_INT 1
15235: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15236: LD_ADDR_VAR 0 5
15240: PUSH
15241: LD_VAR 0 6
15245: PUSH
15246: LD_INT 1
15248: ARRAY
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: CALL_OW 259
15259: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15260: LD_VAR 0 6
15264: PUSH
15265: LD_INT 1
15267: ARRAY
15268: PPUSH
15269: LD_VAR 0 2
15273: PPUSH
15274: LD_VAR 0 5
15278: PPUSH
15279: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15283: LD_VAR 0 6
15287: PUSH
15288: LD_INT 1
15290: ARRAY
15291: PPUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: LD_VAR 0 4
15301: PPUSH
15302: CALL_OW 237
// end ;
15306: PPOPN 6
15308: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15309: LD_EXP 40
15313: IFFALSE 15321
15315: PUSH
15316: LD_EXP 87
15320: AND
15321: IFFALSE 15400
15323: GO 15325
15325: DISABLE
15326: LD_INT 0
15328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15329: LD_ADDR_VAR 0 1
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_OWVAR 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 30
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PPUSH
15360: CALL_OW 69
15364: ST_TO_ADDR
// if not tmp then
15365: LD_VAR 0 1
15369: NOT
15370: IFFALSE 15374
// exit ;
15372: GO 15400
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15374: LD_VAR 0 1
15378: PUSH
15379: LD_INT 1
15381: PPUSH
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 12
15391: ARRAY
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: CALL_OW 234
// end ;
15400: PPOPN 1
15402: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15403: LD_EXP 40
15407: IFFALSE 15415
15409: PUSH
15410: LD_EXP 88
15414: AND
15415: IFFALSE 15527
15417: GO 15419
15419: DISABLE
15420: LD_INT 0
15422: PPUSH
15423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15424: LD_ADDR_VAR 0 2
15428: PUSH
15429: LD_INT 22
15431: PUSH
15432: LD_OWVAR 2
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 30
15446: PUSH
15447: LD_INT 27
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 30
15456: PUSH
15457: LD_INT 26
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 30
15466: PUSH
15467: LD_INT 28
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 69
15488: ST_TO_ADDR
// if not tmp then
15489: LD_VAR 0 2
15493: NOT
15494: IFFALSE 15498
// exit ;
15496: GO 15527
// for i in tmp do
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: LD_VAR 0 2
15507: PUSH
15508: FOR_IN
15509: IFFALSE 15525
// SetLives ( i , 1 ) ;
15511: LD_VAR 0 1
15515: PPUSH
15516: LD_INT 1
15518: PPUSH
15519: CALL_OW 234
15523: GO 15508
15525: POP
15526: POP
// end ;
15527: PPOPN 2
15529: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15530: LD_EXP 40
15534: IFFALSE 15542
15536: PUSH
15537: LD_EXP 89
15541: AND
15542: IFFALSE 15829
15544: GO 15546
15546: DISABLE
15547: LD_INT 0
15549: PPUSH
15550: PPUSH
15551: PPUSH
// begin i := rand ( 1 , 7 ) ;
15552: LD_ADDR_VAR 0 1
15556: PUSH
15557: LD_INT 1
15559: PPUSH
15560: LD_INT 7
15562: PPUSH
15563: CALL_OW 12
15567: ST_TO_ADDR
// case i of 1 :
15568: LD_VAR 0 1
15572: PUSH
15573: LD_INT 1
15575: DOUBLE
15576: EQUAL
15577: IFTRUE 15581
15579: GO 15591
15581: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15582: LD_STRING earthquake(getX(game), 0, 32)
15584: PPUSH
15585: CALL_OW 559
15589: GO 15829
15591: LD_INT 2
15593: DOUBLE
15594: EQUAL
15595: IFTRUE 15599
15597: GO 15613
15599: POP
// begin ToLua ( displayStucuk(); ) ;
15600: LD_STRING displayStucuk();
15602: PPUSH
15603: CALL_OW 559
// ResetFog ;
15607: CALL_OW 335
// end ; 3 :
15611: GO 15829
15613: LD_INT 3
15615: DOUBLE
15616: EQUAL
15617: IFTRUE 15621
15619: GO 15725
15621: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15622: LD_ADDR_VAR 0 2
15626: PUSH
15627: LD_INT 22
15629: PUSH
15630: LD_OWVAR 2
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 25
15641: PUSH
15642: LD_INT 1
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: ST_TO_ADDR
// if not tmp then
15658: LD_VAR 0 2
15662: NOT
15663: IFFALSE 15667
// exit ;
15665: GO 15829
// un := tmp [ rand ( 1 , tmp ) ] ;
15667: LD_ADDR_VAR 0 3
15671: PUSH
15672: LD_VAR 0 2
15676: PUSH
15677: LD_INT 1
15679: PPUSH
15680: LD_VAR 0 2
15684: PPUSH
15685: CALL_OW 12
15689: ARRAY
15690: ST_TO_ADDR
// if Crawls ( un ) then
15691: LD_VAR 0 3
15695: PPUSH
15696: CALL_OW 318
15700: IFFALSE 15711
// ComWalk ( un ) ;
15702: LD_VAR 0 3
15706: PPUSH
15707: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15711: LD_VAR 0 3
15715: PPUSH
15716: LD_INT 8
15718: PPUSH
15719: CALL_OW 336
// end ; 4 :
15723: GO 15829
15725: LD_INT 4
15727: DOUBLE
15728: EQUAL
15729: IFTRUE 15733
15731: GO 15807
15733: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15734: LD_ADDR_VAR 0 2
15738: PUSH
15739: LD_INT 22
15741: PUSH
15742: LD_OWVAR 2
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 30
15753: PUSH
15754: LD_INT 29
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PPUSH
15765: CALL_OW 69
15769: ST_TO_ADDR
// if not tmp then
15770: LD_VAR 0 2
15774: NOT
15775: IFFALSE 15779
// exit ;
15777: GO 15829
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15779: LD_VAR 0 2
15783: PUSH
15784: LD_INT 1
15786: ARRAY
15787: PPUSH
15788: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15792: LD_VAR 0 2
15796: PUSH
15797: LD_INT 1
15799: ARRAY
15800: PPUSH
15801: CALL_OW 65
// end ; 5 .. 7 :
15805: GO 15829
15807: LD_INT 5
15809: DOUBLE
15810: GREATEREQUAL
15811: IFFALSE 15819
15813: LD_INT 7
15815: DOUBLE
15816: LESSEQUAL
15817: IFTRUE 15821
15819: GO 15828
15821: POP
// StreamSibBomb ; end ;
15822: CALL 12010 0 0
15826: GO 15829
15828: POP
// end ;
15829: PPOPN 3
15831: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15832: LD_EXP 40
15836: IFFALSE 15844
15838: PUSH
15839: LD_EXP 90
15843: AND
15844: IFFALSE 16000
15846: GO 15848
15848: DISABLE
15849: LD_INT 0
15851: PPUSH
15852: PPUSH
15853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15854: LD_ADDR_VAR 0 2
15858: PUSH
15859: LD_INT 81
15861: PUSH
15862: LD_OWVAR 2
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 2
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 1
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 21
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PPUSH
15903: CALL_OW 69
15907: ST_TO_ADDR
// if not tmp then
15908: LD_VAR 0 2
15912: NOT
15913: IFFALSE 15917
// exit ;
15915: GO 16000
// p := 0 ;
15917: LD_ADDR_VAR 0 3
15921: PUSH
15922: LD_INT 0
15924: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15925: LD_INT 35
15927: PPUSH
15928: CALL_OW 67
// p := p + 1 ;
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 1
15944: PLUS
15945: ST_TO_ADDR
// for i in tmp do
15946: LD_ADDR_VAR 0 1
15950: PUSH
15951: LD_VAR 0 2
15955: PUSH
15956: FOR_IN
15957: IFFALSE 15988
// if GetLives ( i ) < 1000 then
15959: LD_VAR 0 1
15963: PPUSH
15964: CALL_OW 256
15968: PUSH
15969: LD_INT 1000
15971: LESS
15972: IFFALSE 15986
// SetLives ( i , 1000 ) ;
15974: LD_VAR 0 1
15978: PPUSH
15979: LD_INT 1000
15981: PPUSH
15982: CALL_OW 234
15986: GO 15956
15988: POP
15989: POP
// until p > 20 ;
15990: LD_VAR 0 3
15994: PUSH
15995: LD_INT 20
15997: GREATER
15998: IFFALSE 15925
// end ;
16000: PPOPN 3
16002: END
// every 0 0$1 trigger StreamModeActive and sTime do
16003: LD_EXP 40
16007: IFFALSE 16015
16009: PUSH
16010: LD_EXP 91
16014: AND
16015: IFFALSE 16050
16017: GO 16019
16019: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16020: LD_INT 28
16022: PPUSH
16023: LD_OWVAR 2
16027: PPUSH
16028: LD_INT 2
16030: PPUSH
16031: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16035: LD_INT 30
16037: PPUSH
16038: LD_OWVAR 2
16042: PPUSH
16043: LD_INT 2
16045: PPUSH
16046: CALL_OW 322
// end ;
16050: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16051: LD_EXP 40
16055: IFFALSE 16063
16057: PUSH
16058: LD_EXP 92
16062: AND
16063: IFFALSE 16184
16065: GO 16067
16067: DISABLE
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16072: LD_ADDR_VAR 0 2
16076: PUSH
16077: LD_INT 22
16079: PUSH
16080: LD_OWVAR 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 21
16091: PUSH
16092: LD_INT 1
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 3
16101: PUSH
16102: LD_INT 23
16104: PUSH
16105: LD_INT 0
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 69
16125: ST_TO_ADDR
// if not tmp then
16126: LD_VAR 0 2
16130: NOT
16131: IFFALSE 16135
// exit ;
16133: GO 16184
// for i in tmp do
16135: LD_ADDR_VAR 0 1
16139: PUSH
16140: LD_VAR 0 2
16144: PUSH
16145: FOR_IN
16146: IFFALSE 16182
// begin if Crawls ( i ) then
16148: LD_VAR 0 1
16152: PPUSH
16153: CALL_OW 318
16157: IFFALSE 16168
// ComWalk ( i ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: CALL_OW 138
// SetClass ( i , 2 ) ;
16168: LD_VAR 0 1
16172: PPUSH
16173: LD_INT 2
16175: PPUSH
16176: CALL_OW 336
// end ;
16180: GO 16145
16182: POP
16183: POP
// end ;
16184: PPOPN 2
16186: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16187: LD_EXP 40
16191: IFFALSE 16199
16193: PUSH
16194: LD_EXP 93
16198: AND
16199: IFFALSE 16489
16201: GO 16203
16203: DISABLE
16204: LD_INT 0
16206: PPUSH
16207: PPUSH
16208: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16209: LD_OWVAR 2
16213: PPUSH
16214: LD_INT 9
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: LD_INT 1
16222: PPUSH
16223: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16227: LD_INT 9
16229: PPUSH
16230: LD_OWVAR 2
16234: PPUSH
16235: CALL_OW 343
// uc_side := 9 ;
16239: LD_ADDR_OWVAR 20
16243: PUSH
16244: LD_INT 9
16246: ST_TO_ADDR
// uc_nation := 2 ;
16247: LD_ADDR_OWVAR 21
16251: PUSH
16252: LD_INT 2
16254: ST_TO_ADDR
// hc_name := Dark Warrior ;
16255: LD_ADDR_OWVAR 26
16259: PUSH
16260: LD_STRING Dark Warrior
16262: ST_TO_ADDR
// hc_gallery :=  ;
16263: LD_ADDR_OWVAR 33
16267: PUSH
16268: LD_STRING 
16270: ST_TO_ADDR
// hc_noskilllimit := true ;
16271: LD_ADDR_OWVAR 76
16275: PUSH
16276: LD_INT 1
16278: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16279: LD_ADDR_OWVAR 31
16283: PUSH
16284: LD_INT 30
16286: PUSH
16287: LD_INT 30
16289: PUSH
16290: LD_INT 30
16292: PUSH
16293: LD_INT 30
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: ST_TO_ADDR
// un := CreateHuman ;
16302: LD_ADDR_VAR 0 3
16306: PUSH
16307: CALL_OW 44
16311: ST_TO_ADDR
// hc_noskilllimit := false ;
16312: LD_ADDR_OWVAR 76
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16320: LD_VAR 0 3
16324: PPUSH
16325: LD_INT 1
16327: PPUSH
16328: CALL_OW 51
// ToLua ( playRanger() ) ;
16332: LD_STRING playRanger()
16334: PPUSH
16335: CALL_OW 559
// p := 0 ;
16339: LD_ADDR_VAR 0 2
16343: PUSH
16344: LD_INT 0
16346: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16347: LD_INT 35
16349: PPUSH
16350: CALL_OW 67
// p := p + 1 ;
16354: LD_ADDR_VAR 0 2
16358: PUSH
16359: LD_VAR 0 2
16363: PUSH
16364: LD_INT 1
16366: PLUS
16367: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16368: LD_VAR 0 3
16372: PPUSH
16373: CALL_OW 256
16377: PUSH
16378: LD_INT 1000
16380: LESS
16381: IFFALSE 16395
// SetLives ( un , 1000 ) ;
16383: LD_VAR 0 3
16387: PPUSH
16388: LD_INT 1000
16390: PPUSH
16391: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16395: LD_VAR 0 3
16399: PPUSH
16400: LD_INT 81
16402: PUSH
16403: LD_OWVAR 2
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 91
16414: PUSH
16415: LD_VAR 0 3
16419: PUSH
16420: LD_INT 30
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PPUSH
16432: CALL_OW 69
16436: PPUSH
16437: LD_VAR 0 3
16441: PPUSH
16442: CALL_OW 74
16446: PPUSH
16447: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16451: LD_VAR 0 2
16455: PUSH
16456: LD_INT 80
16458: GREATER
16459: IFTRUE 16472
16461: PUSH
16462: LD_VAR 0 3
16466: PPUSH
16467: CALL_OW 301
16471: OR
16472: IFFALSE 16347
// if un then
16474: LD_VAR 0 3
16478: IFFALSE 16489
// RemoveUnit ( un ) ;
16480: LD_VAR 0 3
16484: PPUSH
16485: CALL_OW 64
// end ;
16489: PPOPN 3
16491: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16492: LD_EXP 94
16496: IFFALSE 16612
16498: GO 16500
16500: DISABLE
16501: LD_INT 0
16503: PPUSH
16504: PPUSH
16505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16506: LD_ADDR_VAR 0 2
16510: PUSH
16511: LD_INT 81
16513: PUSH
16514: LD_OWVAR 2
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 21
16525: PUSH
16526: LD_INT 1
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 69
16541: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16542: LD_STRING playComputer()
16544: PPUSH
16545: CALL_OW 559
// if not tmp then
16549: LD_VAR 0 2
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16612
// for i in tmp do
16558: LD_ADDR_VAR 0 1
16562: PUSH
16563: LD_VAR 0 2
16567: PUSH
16568: FOR_IN
16569: IFFALSE 16610
// for j := 1 to 4 do
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_INT 4
16583: PUSH
16584: FOR_TO
16585: IFFALSE 16606
// SetSkill ( i , j , 10 ) ;
16587: LD_VAR 0 1
16591: PPUSH
16592: LD_VAR 0 3
16596: PPUSH
16597: LD_INT 10
16599: PPUSH
16600: CALL_OW 237
16604: GO 16584
16606: POP
16607: POP
16608: GO 16568
16610: POP
16611: POP
// end ;
16612: PPOPN 3
16614: END
// every 0 0$1 trigger s30 do var i , tmp ;
16615: LD_EXP 95
16619: IFFALSE 16688
16621: GO 16623
16623: DISABLE
16624: LD_INT 0
16626: PPUSH
16627: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16628: LD_ADDR_VAR 0 2
16632: PUSH
16633: LD_INT 22
16635: PUSH
16636: LD_OWVAR 2
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL_OW 69
16649: ST_TO_ADDR
// if not tmp then
16650: LD_VAR 0 2
16654: NOT
16655: IFFALSE 16659
// exit ;
16657: GO 16688
// for i in tmp do
16659: LD_ADDR_VAR 0 1
16663: PUSH
16664: LD_VAR 0 2
16668: PUSH
16669: FOR_IN
16670: IFFALSE 16686
// SetLives ( i , 300 ) ;
16672: LD_VAR 0 1
16676: PPUSH
16677: LD_INT 300
16679: PPUSH
16680: CALL_OW 234
16684: GO 16669
16686: POP
16687: POP
// end ;
16688: PPOPN 2
16690: END
// every 0 0$1 trigger s60 do var i , tmp ;
16691: LD_EXP 96
16695: IFFALSE 16764
16697: GO 16699
16699: DISABLE
16700: LD_INT 0
16702: PPUSH
16703: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16704: LD_ADDR_VAR 0 2
16708: PUSH
16709: LD_INT 22
16711: PUSH
16712: LD_OWVAR 2
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PPUSH
16721: CALL_OW 69
16725: ST_TO_ADDR
// if not tmp then
16726: LD_VAR 0 2
16730: NOT
16731: IFFALSE 16735
// exit ;
16733: GO 16764
// for i in tmp do
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: LD_VAR 0 2
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16762
// SetLives ( i , 600 ) ;
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_INT 600
16755: PPUSH
16756: CALL_OW 234
16760: GO 16745
16762: POP
16763: POP
// end ;
16764: PPOPN 2
16766: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16767: LD_INT 0
16769: PPUSH
// case cmd of 301 :
16770: LD_VAR 0 1
16774: PUSH
16775: LD_INT 301
16777: DOUBLE
16778: EQUAL
16779: IFTRUE 16783
16781: GO 16815
16783: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16784: LD_VAR 0 6
16788: PPUSH
16789: LD_VAR 0 7
16793: PPUSH
16794: LD_VAR 0 8
16798: PPUSH
16799: LD_VAR 0 4
16803: PPUSH
16804: LD_VAR 0 5
16808: PPUSH
16809: CALL 18028 0 5
16813: GO 16936
16815: LD_INT 302
16817: DOUBLE
16818: EQUAL
16819: IFTRUE 16823
16821: GO 16860
16823: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16824: LD_VAR 0 6
16828: PPUSH
16829: LD_VAR 0 7
16833: PPUSH
16834: LD_VAR 0 8
16838: PPUSH
16839: LD_VAR 0 9
16843: PPUSH
16844: LD_VAR 0 4
16848: PPUSH
16849: LD_VAR 0 5
16853: PPUSH
16854: CALL 18119 0 6
16858: GO 16936
16860: LD_INT 303
16862: DOUBLE
16863: EQUAL
16864: IFTRUE 16868
16866: GO 16905
16868: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16869: LD_VAR 0 6
16873: PPUSH
16874: LD_VAR 0 7
16878: PPUSH
16879: LD_VAR 0 8
16883: PPUSH
16884: LD_VAR 0 9
16888: PPUSH
16889: LD_VAR 0 4
16893: PPUSH
16894: LD_VAR 0 5
16898: PPUSH
16899: CALL 16941 0 6
16903: GO 16936
16905: LD_INT 304
16907: DOUBLE
16908: EQUAL
16909: IFTRUE 16913
16911: GO 16935
16913: POP
// hHackTeleport ( unit , x , y ) ; end ;
16914: LD_VAR 0 2
16918: PPUSH
16919: LD_VAR 0 4
16923: PPUSH
16924: LD_VAR 0 5
16928: PPUSH
16929: CALL 18712 0 3
16933: GO 16936
16935: POP
// end ;
16936: LD_VAR 0 12
16940: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16941: LD_INT 0
16943: PPUSH
16944: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16945: LD_VAR 0 1
16949: PUSH
16950: LD_INT 1
16952: LESS
16953: IFTRUE 16965
16955: PUSH
16956: LD_VAR 0 1
16960: PUSH
16961: LD_INT 3
16963: GREATER
16964: OR
16965: IFTRUE 16983
16967: PUSH
16968: LD_VAR 0 5
16972: PPUSH
16973: LD_VAR 0 6
16977: PPUSH
16978: CALL_OW 428
16982: OR
16983: IFFALSE 16987
// exit ;
16985: GO 17715
// uc_side := your_side ;
16987: LD_ADDR_OWVAR 20
16991: PUSH
16992: LD_OWVAR 2
16996: ST_TO_ADDR
// uc_nation := nation ;
16997: LD_ADDR_OWVAR 21
17001: PUSH
17002: LD_VAR 0 1
17006: ST_TO_ADDR
// bc_level = 1 ;
17007: LD_ADDR_OWVAR 43
17011: PUSH
17012: LD_INT 1
17014: ST_TO_ADDR
// case btype of 1 :
17015: LD_VAR 0 2
17019: PUSH
17020: LD_INT 1
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17039
17028: POP
// bc_type := b_depot ; 2 :
17029: LD_ADDR_OWVAR 42
17033: PUSH
17034: LD_INT 0
17036: ST_TO_ADDR
17037: GO 17659
17039: LD_INT 2
17041: DOUBLE
17042: EQUAL
17043: IFTRUE 17047
17045: GO 17058
17047: POP
// bc_type := b_warehouse ; 3 :
17048: LD_ADDR_OWVAR 42
17052: PUSH
17053: LD_INT 1
17055: ST_TO_ADDR
17056: GO 17659
17058: LD_INT 3
17060: DOUBLE
17061: EQUAL
17062: IFTRUE 17066
17064: GO 17077
17066: POP
// bc_type := b_lab ; 4 .. 9 :
17067: LD_ADDR_OWVAR 42
17071: PUSH
17072: LD_INT 6
17074: ST_TO_ADDR
17075: GO 17659
17077: LD_INT 4
17079: DOUBLE
17080: GREATEREQUAL
17081: IFFALSE 17089
17083: LD_INT 9
17085: DOUBLE
17086: LESSEQUAL
17087: IFTRUE 17091
17089: GO 17151
17091: POP
// begin bc_type := b_lab_half ;
17092: LD_ADDR_OWVAR 42
17096: PUSH
17097: LD_INT 7
17099: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17100: LD_ADDR_OWVAR 44
17104: PUSH
17105: LD_INT 10
17107: PUSH
17108: LD_INT 11
17110: PUSH
17111: LD_INT 12
17113: PUSH
17114: LD_INT 15
17116: PUSH
17117: LD_INT 14
17119: PUSH
17120: LD_INT 13
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: PUSH
17131: LD_VAR 0 2
17135: PUSH
17136: LD_INT 3
17138: MINUS
17139: ARRAY
17140: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17141: LD_ADDR_OWVAR 45
17145: PUSH
17146: LD_INT 9
17148: ST_TO_ADDR
// end ; 10 .. 13 :
17149: GO 17659
17151: LD_INT 10
17153: DOUBLE
17154: GREATEREQUAL
17155: IFFALSE 17163
17157: LD_INT 13
17159: DOUBLE
17160: LESSEQUAL
17161: IFTRUE 17165
17163: GO 17242
17165: POP
// begin bc_type := b_lab_full ;
17166: LD_ADDR_OWVAR 42
17170: PUSH
17171: LD_INT 8
17173: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17174: LD_ADDR_OWVAR 44
17178: PUSH
17179: LD_INT 10
17181: PUSH
17182: LD_INT 12
17184: PUSH
17185: LD_INT 14
17187: PUSH
17188: LD_INT 13
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: PUSH
17197: LD_VAR 0 2
17201: PUSH
17202: LD_INT 9
17204: MINUS
17205: ARRAY
17206: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17207: LD_ADDR_OWVAR 45
17211: PUSH
17212: LD_INT 11
17214: PUSH
17215: LD_INT 15
17217: PUSH
17218: LD_INT 12
17220: PUSH
17221: LD_INT 15
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: PUSH
17230: LD_VAR 0 2
17234: PUSH
17235: LD_INT 9
17237: MINUS
17238: ARRAY
17239: ST_TO_ADDR
// end ; 14 :
17240: GO 17659
17242: LD_INT 14
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17261
17250: POP
// bc_type := b_workshop ; 15 :
17251: LD_ADDR_OWVAR 42
17255: PUSH
17256: LD_INT 2
17258: ST_TO_ADDR
17259: GO 17659
17261: LD_INT 15
17263: DOUBLE
17264: EQUAL
17265: IFTRUE 17269
17267: GO 17280
17269: POP
// bc_type := b_factory ; 16 :
17270: LD_ADDR_OWVAR 42
17274: PUSH
17275: LD_INT 3
17277: ST_TO_ADDR
17278: GO 17659
17280: LD_INT 16
17282: DOUBLE
17283: EQUAL
17284: IFTRUE 17288
17286: GO 17299
17288: POP
// bc_type := b_ext_gun ; 17 :
17289: LD_ADDR_OWVAR 42
17293: PUSH
17294: LD_INT 17
17296: ST_TO_ADDR
17297: GO 17659
17299: LD_INT 17
17301: DOUBLE
17302: EQUAL
17303: IFTRUE 17307
17305: GO 17335
17307: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17308: LD_ADDR_OWVAR 42
17312: PUSH
17313: LD_INT 19
17315: PUSH
17316: LD_INT 23
17318: PUSH
17319: LD_INT 19
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: PUSH
17327: LD_VAR 0 1
17331: ARRAY
17332: ST_TO_ADDR
17333: GO 17659
17335: LD_INT 18
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17354
17343: POP
// bc_type := b_ext_radar ; 19 :
17344: LD_ADDR_OWVAR 42
17348: PUSH
17349: LD_INT 20
17351: ST_TO_ADDR
17352: GO 17659
17354: LD_INT 19
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17373
17362: POP
// bc_type := b_ext_radio ; 20 :
17363: LD_ADDR_OWVAR 42
17367: PUSH
17368: LD_INT 22
17370: ST_TO_ADDR
17371: GO 17659
17373: LD_INT 20
17375: DOUBLE
17376: EQUAL
17377: IFTRUE 17381
17379: GO 17392
17381: POP
// bc_type := b_ext_siberium ; 21 :
17382: LD_ADDR_OWVAR 42
17386: PUSH
17387: LD_INT 21
17389: ST_TO_ADDR
17390: GO 17659
17392: LD_INT 21
17394: DOUBLE
17395: EQUAL
17396: IFTRUE 17400
17398: GO 17411
17400: POP
// bc_type := b_ext_computer ; 22 :
17401: LD_ADDR_OWVAR 42
17405: PUSH
17406: LD_INT 24
17408: ST_TO_ADDR
17409: GO 17659
17411: LD_INT 22
17413: DOUBLE
17414: EQUAL
17415: IFTRUE 17419
17417: GO 17430
17419: POP
// bc_type := b_ext_track ; 23 :
17420: LD_ADDR_OWVAR 42
17424: PUSH
17425: LD_INT 16
17427: ST_TO_ADDR
17428: GO 17659
17430: LD_INT 23
17432: DOUBLE
17433: EQUAL
17434: IFTRUE 17438
17436: GO 17449
17438: POP
// bc_type := b_ext_laser ; 24 :
17439: LD_ADDR_OWVAR 42
17443: PUSH
17444: LD_INT 25
17446: ST_TO_ADDR
17447: GO 17659
17449: LD_INT 24
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17468
17457: POP
// bc_type := b_control_tower ; 25 :
17458: LD_ADDR_OWVAR 42
17462: PUSH
17463: LD_INT 36
17465: ST_TO_ADDR
17466: GO 17659
17468: LD_INT 25
17470: DOUBLE
17471: EQUAL
17472: IFTRUE 17476
17474: GO 17487
17476: POP
// bc_type := b_breastwork ; 26 :
17477: LD_ADDR_OWVAR 42
17481: PUSH
17482: LD_INT 31
17484: ST_TO_ADDR
17485: GO 17659
17487: LD_INT 26
17489: DOUBLE
17490: EQUAL
17491: IFTRUE 17495
17493: GO 17506
17495: POP
// bc_type := b_bunker ; 27 :
17496: LD_ADDR_OWVAR 42
17500: PUSH
17501: LD_INT 32
17503: ST_TO_ADDR
17504: GO 17659
17506: LD_INT 27
17508: DOUBLE
17509: EQUAL
17510: IFTRUE 17514
17512: GO 17525
17514: POP
// bc_type := b_turret ; 28 :
17515: LD_ADDR_OWVAR 42
17519: PUSH
17520: LD_INT 33
17522: ST_TO_ADDR
17523: GO 17659
17525: LD_INT 28
17527: DOUBLE
17528: EQUAL
17529: IFTRUE 17533
17531: GO 17544
17533: POP
// bc_type := b_armoury ; 29 :
17534: LD_ADDR_OWVAR 42
17538: PUSH
17539: LD_INT 4
17541: ST_TO_ADDR
17542: GO 17659
17544: LD_INT 29
17546: DOUBLE
17547: EQUAL
17548: IFTRUE 17552
17550: GO 17563
17552: POP
// bc_type := b_barracks ; 30 :
17553: LD_ADDR_OWVAR 42
17557: PUSH
17558: LD_INT 5
17560: ST_TO_ADDR
17561: GO 17659
17563: LD_INT 30
17565: DOUBLE
17566: EQUAL
17567: IFTRUE 17571
17569: GO 17582
17571: POP
// bc_type := b_solar_power ; 31 :
17572: LD_ADDR_OWVAR 42
17576: PUSH
17577: LD_INT 27
17579: ST_TO_ADDR
17580: GO 17659
17582: LD_INT 31
17584: DOUBLE
17585: EQUAL
17586: IFTRUE 17590
17588: GO 17601
17590: POP
// bc_type := b_oil_power ; 32 :
17591: LD_ADDR_OWVAR 42
17595: PUSH
17596: LD_INT 26
17598: ST_TO_ADDR
17599: GO 17659
17601: LD_INT 32
17603: DOUBLE
17604: EQUAL
17605: IFTRUE 17609
17607: GO 17620
17609: POP
// bc_type := b_siberite_power ; 33 :
17610: LD_ADDR_OWVAR 42
17614: PUSH
17615: LD_INT 28
17617: ST_TO_ADDR
17618: GO 17659
17620: LD_INT 33
17622: DOUBLE
17623: EQUAL
17624: IFTRUE 17628
17626: GO 17639
17628: POP
// bc_type := b_oil_mine ; 34 :
17629: LD_ADDR_OWVAR 42
17633: PUSH
17634: LD_INT 29
17636: ST_TO_ADDR
17637: GO 17659
17639: LD_INT 34
17641: DOUBLE
17642: EQUAL
17643: IFTRUE 17647
17645: GO 17658
17647: POP
// bc_type := b_siberite_mine ; end ;
17648: LD_ADDR_OWVAR 42
17652: PUSH
17653: LD_INT 30
17655: ST_TO_ADDR
17656: GO 17659
17658: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17659: LD_ADDR_VAR 0 8
17663: PUSH
17664: LD_VAR 0 5
17668: PPUSH
17669: LD_VAR 0 6
17673: PPUSH
17674: LD_VAR 0 3
17678: PPUSH
17679: CALL_OW 47
17683: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17684: LD_OWVAR 42
17688: PUSH
17689: LD_INT 32
17691: PUSH
17692: LD_INT 33
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: IN
17699: IFFALSE 17715
// PlaceWeaponTurret ( b , weapon ) ;
17701: LD_VAR 0 8
17705: PPUSH
17706: LD_VAR 0 4
17710: PPUSH
17711: CALL_OW 431
// end ;
17715: LD_VAR 0 7
17719: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17720: LD_INT 0
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17726: LD_ADDR_VAR 0 4
17730: PUSH
17731: LD_INT 22
17733: PUSH
17734: LD_OWVAR 2
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 2
17745: PUSH
17746: LD_INT 30
17748: PUSH
17749: LD_INT 0
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 30
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PPUSH
17775: CALL_OW 69
17779: ST_TO_ADDR
// if not tmp then
17780: LD_VAR 0 4
17784: NOT
17785: IFFALSE 17789
// exit ;
17787: GO 17848
// for i in tmp do
17789: LD_ADDR_VAR 0 2
17793: PUSH
17794: LD_VAR 0 4
17798: PUSH
17799: FOR_IN
17800: IFFALSE 17846
// for j = 1 to 3 do
17802: LD_ADDR_VAR 0 3
17806: PUSH
17807: DOUBLE
17808: LD_INT 1
17810: DEC
17811: ST_TO_ADDR
17812: LD_INT 3
17814: PUSH
17815: FOR_TO
17816: IFFALSE 17842
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17818: LD_VAR 0 2
17822: PPUSH
17823: CALL_OW 274
17827: PPUSH
17828: LD_VAR 0 3
17832: PPUSH
17833: LD_INT 99999
17835: PPUSH
17836: CALL_OW 277
17840: GO 17815
17842: POP
17843: POP
17844: GO 17799
17846: POP
17847: POP
// end ;
17848: LD_VAR 0 1
17852: RET
// export function hHackSetLevel10 ; var i , j ; begin
17853: LD_INT 0
17855: PPUSH
17856: PPUSH
17857: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17858: LD_ADDR_VAR 0 2
17862: PUSH
17863: LD_INT 21
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PPUSH
17873: CALL_OW 69
17877: PUSH
17878: FOR_IN
17879: IFFALSE 17931
// if IsSelected ( i ) then
17881: LD_VAR 0 2
17885: PPUSH
17886: CALL_OW 306
17890: IFFALSE 17929
// begin for j := 1 to 4 do
17892: LD_ADDR_VAR 0 3
17896: PUSH
17897: DOUBLE
17898: LD_INT 1
17900: DEC
17901: ST_TO_ADDR
17902: LD_INT 4
17904: PUSH
17905: FOR_TO
17906: IFFALSE 17927
// SetSkill ( i , j , 10 ) ;
17908: LD_VAR 0 2
17912: PPUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 10
17920: PPUSH
17921: CALL_OW 237
17925: GO 17905
17927: POP
17928: POP
// end ;
17929: GO 17878
17931: POP
17932: POP
// end ;
17933: LD_VAR 0 1
17937: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
17942: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17943: LD_ADDR_VAR 0 2
17947: PUSH
17948: LD_INT 22
17950: PUSH
17951: LD_OWVAR 2
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 21
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: PUSH
17979: FOR_IN
17980: IFFALSE 18021
// begin for j := 1 to 4 do
17982: LD_ADDR_VAR 0 3
17986: PUSH
17987: DOUBLE
17988: LD_INT 1
17990: DEC
17991: ST_TO_ADDR
17992: LD_INT 4
17994: PUSH
17995: FOR_TO
17996: IFFALSE 18017
// SetSkill ( i , j , 10 ) ;
17998: LD_VAR 0 2
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: LD_INT 10
18010: PPUSH
18011: CALL_OW 237
18015: GO 17995
18017: POP
18018: POP
// end ;
18019: GO 17979
18021: POP
18022: POP
// end ;
18023: LD_VAR 0 1
18027: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18028: LD_INT 0
18030: PPUSH
// uc_side := your_side ;
18031: LD_ADDR_OWVAR 20
18035: PUSH
18036: LD_OWVAR 2
18040: ST_TO_ADDR
// uc_nation := nation ;
18041: LD_ADDR_OWVAR 21
18045: PUSH
18046: LD_VAR 0 1
18050: ST_TO_ADDR
// InitHc ;
18051: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18055: LD_INT 0
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: LD_VAR 0 3
18067: PPUSH
18068: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18072: LD_VAR 0 4
18076: PPUSH
18077: LD_VAR 0 5
18081: PPUSH
18082: CALL_OW 428
18086: PUSH
18087: LD_INT 0
18089: EQUAL
18090: IFFALSE 18114
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18092: CALL_OW 44
18096: PPUSH
18097: LD_VAR 0 4
18101: PPUSH
18102: LD_VAR 0 5
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: CALL_OW 48
// end ;
18114: LD_VAR 0 6
18118: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18119: LD_INT 0
18121: PPUSH
18122: PPUSH
// uc_side := your_side ;
18123: LD_ADDR_OWVAR 20
18127: PUSH
18128: LD_OWVAR 2
18132: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18133: LD_VAR 0 1
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: LD_INT 2
18143: PUSH
18144: LD_INT 3
18146: PUSH
18147: LD_INT 4
18149: PUSH
18150: LD_INT 5
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: IN
18160: IFFALSE 18172
// uc_nation := nation_american else
18162: LD_ADDR_OWVAR 21
18166: PUSH
18167: LD_INT 1
18169: ST_TO_ADDR
18170: GO 18215
// if chassis in [ 11 , 12 , 13 , 14 ] then
18172: LD_VAR 0 1
18176: PUSH
18177: LD_INT 11
18179: PUSH
18180: LD_INT 12
18182: PUSH
18183: LD_INT 13
18185: PUSH
18186: LD_INT 14
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: IN
18195: IFFALSE 18207
// uc_nation := nation_arabian else
18197: LD_ADDR_OWVAR 21
18201: PUSH
18202: LD_INT 2
18204: ST_TO_ADDR
18205: GO 18215
// uc_nation := nation_russian ;
18207: LD_ADDR_OWVAR 21
18211: PUSH
18212: LD_INT 3
18214: ST_TO_ADDR
// vc_chassis := chassis ;
18215: LD_ADDR_OWVAR 37
18219: PUSH
18220: LD_VAR 0 1
18224: ST_TO_ADDR
// vc_engine := engine ;
18225: LD_ADDR_OWVAR 39
18229: PUSH
18230: LD_VAR 0 2
18234: ST_TO_ADDR
// vc_control := control ;
18235: LD_ADDR_OWVAR 38
18239: PUSH
18240: LD_VAR 0 3
18244: ST_TO_ADDR
// vc_weapon := weapon ;
18245: LD_ADDR_OWVAR 40
18249: PUSH
18250: LD_VAR 0 4
18254: ST_TO_ADDR
// un := CreateVehicle ;
18255: LD_ADDR_VAR 0 8
18259: PUSH
18260: CALL_OW 45
18264: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18265: LD_VAR 0 8
18269: PPUSH
18270: LD_INT 0
18272: PPUSH
18273: LD_INT 5
18275: PPUSH
18276: CALL_OW 12
18280: PPUSH
18281: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18285: LD_VAR 0 8
18289: PPUSH
18290: LD_VAR 0 5
18294: PPUSH
18295: LD_VAR 0 6
18299: PPUSH
18300: LD_INT 1
18302: PPUSH
18303: CALL_OW 48
// end ;
18307: LD_VAR 0 7
18311: RET
// export hInvincible ; every 1 do
18312: GO 18314
18314: DISABLE
// hInvincible := [ ] ;
18315: LD_ADDR_EXP 97
18319: PUSH
18320: EMPTY
18321: ST_TO_ADDR
18322: END
// every 10 do var i ;
18323: GO 18325
18325: DISABLE
18326: LD_INT 0
18328: PPUSH
// begin enable ;
18329: ENABLE
// if not hInvincible then
18330: LD_EXP 97
18334: NOT
18335: IFFALSE 18339
// exit ;
18337: GO 18383
// for i in hInvincible do
18339: LD_ADDR_VAR 0 1
18343: PUSH
18344: LD_EXP 97
18348: PUSH
18349: FOR_IN
18350: IFFALSE 18381
// if GetLives ( i ) < 1000 then
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 256
18361: PUSH
18362: LD_INT 1000
18364: LESS
18365: IFFALSE 18379
// SetLives ( i , 1000 ) ;
18367: LD_VAR 0 1
18371: PPUSH
18372: LD_INT 1000
18374: PPUSH
18375: CALL_OW 234
18379: GO 18349
18381: POP
18382: POP
// end ;
18383: PPOPN 1
18385: END
// export function hHackInvincible ; var i ; begin
18386: LD_INT 0
18388: PPUSH
18389: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18390: LD_ADDR_VAR 0 2
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: LD_INT 21
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 21
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: PPUSH
18423: CALL_OW 69
18427: PUSH
18428: FOR_IN
18429: IFFALSE 18490
// if IsSelected ( i ) then
18431: LD_VAR 0 2
18435: PPUSH
18436: CALL_OW 306
18440: IFFALSE 18488
// begin if i in hInvincible then
18442: LD_VAR 0 2
18446: PUSH
18447: LD_EXP 97
18451: IN
18452: IFFALSE 18472
// hInvincible := hInvincible diff i else
18454: LD_ADDR_EXP 97
18458: PUSH
18459: LD_EXP 97
18463: PUSH
18464: LD_VAR 0 2
18468: DIFF
18469: ST_TO_ADDR
18470: GO 18488
// hInvincible := hInvincible union i ;
18472: LD_ADDR_EXP 97
18476: PUSH
18477: LD_EXP 97
18481: PUSH
18482: LD_VAR 0 2
18486: UNION
18487: ST_TO_ADDR
// end ;
18488: GO 18428
18490: POP
18491: POP
// end ;
18492: LD_VAR 0 1
18496: RET
// export function hHackInvisible ; var i , j ; begin
18497: LD_INT 0
18499: PPUSH
18500: PPUSH
18501: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18502: LD_ADDR_VAR 0 2
18506: PUSH
18507: LD_INT 21
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 69
18521: PUSH
18522: FOR_IN
18523: IFFALSE 18547
// if IsSelected ( i ) then
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 306
18534: IFFALSE 18545
// ComForceInvisible ( i ) ;
18536: LD_VAR 0 2
18540: PPUSH
18541: CALL_OW 496
18545: GO 18522
18547: POP
18548: POP
// end ;
18549: LD_VAR 0 1
18553: RET
// export function hHackChangeYourSide ; begin
18554: LD_INT 0
18556: PPUSH
// if your_side = 8 then
18557: LD_OWVAR 2
18561: PUSH
18562: LD_INT 8
18564: EQUAL
18565: IFFALSE 18577
// your_side := 0 else
18567: LD_ADDR_OWVAR 2
18571: PUSH
18572: LD_INT 0
18574: ST_TO_ADDR
18575: GO 18591
// your_side := your_side + 1 ;
18577: LD_ADDR_OWVAR 2
18581: PUSH
18582: LD_OWVAR 2
18586: PUSH
18587: LD_INT 1
18589: PLUS
18590: ST_TO_ADDR
// end ;
18591: LD_VAR 0 1
18595: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18596: LD_INT 0
18598: PPUSH
18599: PPUSH
18600: PPUSH
// for i in all_units do
18601: LD_ADDR_VAR 0 2
18605: PUSH
18606: LD_OWVAR 3
18610: PUSH
18611: FOR_IN
18612: IFFALSE 18690
// if IsSelected ( i ) then
18614: LD_VAR 0 2
18618: PPUSH
18619: CALL_OW 306
18623: IFFALSE 18688
// begin j := GetSide ( i ) ;
18625: LD_ADDR_VAR 0 3
18629: PUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: CALL_OW 255
18639: ST_TO_ADDR
// if j = 8 then
18640: LD_VAR 0 3
18644: PUSH
18645: LD_INT 8
18647: EQUAL
18648: IFFALSE 18660
// j := 0 else
18650: LD_ADDR_VAR 0 3
18654: PUSH
18655: LD_INT 0
18657: ST_TO_ADDR
18658: GO 18674
// j := j + 1 ;
18660: LD_ADDR_VAR 0 3
18664: PUSH
18665: LD_VAR 0 3
18669: PUSH
18670: LD_INT 1
18672: PLUS
18673: ST_TO_ADDR
// SetSide ( i , j ) ;
18674: LD_VAR 0 2
18678: PPUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: CALL_OW 235
// end ;
18688: GO 18611
18690: POP
18691: POP
// end ;
18692: LD_VAR 0 1
18696: RET
// export function hHackFog ; begin
18697: LD_INT 0
18699: PPUSH
// FogOff ( true ) ;
18700: LD_INT 1
18702: PPUSH
18703: CALL_OW 344
// end ;
18707: LD_VAR 0 1
18711: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18712: LD_INT 0
18714: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18715: LD_VAR 0 1
18719: PPUSH
18720: LD_VAR 0 2
18724: PPUSH
18725: LD_VAR 0 3
18729: PPUSH
18730: LD_INT 1
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: CALL_OW 483
// CenterOnXY ( x , y ) ;
18740: LD_VAR 0 2
18744: PPUSH
18745: LD_VAR 0 3
18749: PPUSH
18750: CALL_OW 84
// end ;
18754: LD_VAR 0 4
18758: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18759: LD_INT 0
18761: PPUSH
18762: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18763: LD_VAR 0 1
18767: NOT
18768: IFTRUE 18787
18770: PUSH
18771: LD_VAR 0 2
18775: PPUSH
18776: LD_VAR 0 3
18780: PPUSH
18781: CALL_OW 488
18785: NOT
18786: OR
18787: IFTRUE 18822
18789: PUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 266
18799: PUSH
18800: LD_INT 3
18802: NONEQUAL
18803: IFFALSE 18821
18805: PUSH
18806: LD_VAR 0 1
18810: PPUSH
18811: CALL_OW 247
18815: PUSH
18816: LD_INT 1
18818: EQUAL
18819: NOT
18820: AND
18821: OR
18822: IFFALSE 18826
// exit ;
18824: GO 19108
// if GetType ( factory ) = unit_human then
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 247
18835: PUSH
18836: LD_INT 1
18838: EQUAL
18839: IFFALSE 18856
// factory := IsInUnit ( factory ) ;
18841: LD_ADDR_VAR 0 1
18845: PUSH
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 310
18855: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 266
18865: PUSH
18866: LD_INT 3
18868: NONEQUAL
18869: IFFALSE 18873
// exit ;
18871: GO 19108
// for i := 1 to Count ( factoryWaypoints ) do
18873: LD_ADDR_VAR 0 5
18877: PUSH
18878: DOUBLE
18879: LD_INT 1
18881: DEC
18882: ST_TO_ADDR
18883: LD_EXP 98
18887: PPUSH
18888: CALL 28912 0 1
18892: PUSH
18893: FOR_TO
18894: IFFALSE 19056
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
18896: LD_VAR 0 2
18900: PPUSH
18901: LD_VAR 0 3
18905: PPUSH
18906: CALL_OW 428
18910: PUSH
18911: LD_EXP 98
18915: PUSH
18916: LD_VAR 0 5
18920: ARRAY
18921: PUSH
18922: LD_INT 2
18924: ARRAY
18925: EQUAL
18926: IFFALSE 18958
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
18928: LD_ADDR_EXP 98
18932: PUSH
18933: LD_EXP 98
18937: PPUSH
18938: LD_VAR 0 5
18942: PPUSH
18943: CALL_OW 3
18947: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18948: CALL 19113 0 0
// exit ;
18952: POP
18953: POP
18954: GO 19108
// end else
18956: GO 19054
// if factory = factoryWaypoints [ i ] [ 2 ] then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_EXP 98
18967: PUSH
18968: LD_VAR 0 5
18972: ARRAY
18973: PUSH
18974: LD_INT 2
18976: ARRAY
18977: EQUAL
18978: IFFALSE 19054
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
18980: LD_ADDR_EXP 98
18984: PUSH
18985: LD_EXP 98
18989: PPUSH
18990: LD_VAR 0 5
18994: PPUSH
18995: CALL_OW 3
18999: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19000: LD_ADDR_EXP 98
19004: PUSH
19005: LD_EXP 98
19009: PPUSH
19010: LD_VAR 0 1
19014: PPUSH
19015: CALL_OW 255
19019: PUSH
19020: LD_VAR 0 1
19024: PUSH
19025: LD_VAR 0 2
19029: PUSH
19030: LD_VAR 0 3
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: PPUSH
19041: CALL 64888 0 2
19045: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19046: CALL 19113 0 0
// exit ;
19050: POP
19051: POP
19052: GO 19108
// end ; end ;
19054: GO 18893
19056: POP
19057: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19058: LD_ADDR_EXP 98
19062: PUSH
19063: LD_EXP 98
19067: PPUSH
19068: LD_VAR 0 1
19072: PPUSH
19073: CALL_OW 255
19077: PUSH
19078: LD_VAR 0 1
19082: PUSH
19083: LD_VAR 0 2
19087: PUSH
19088: LD_VAR 0 3
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: PPUSH
19099: CALL 64888 0 2
19103: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19104: CALL 19113 0 0
// end ;
19108: LD_VAR 0 4
19112: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19113: LD_INT 0
19115: PPUSH
19116: PPUSH
19117: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19118: LD_STRING resetFactoryWaypoint();
19120: PPUSH
19121: CALL_OW 559
// if factoryWaypoints then
19125: LD_EXP 98
19129: IFFALSE 19250
// begin list := factoryWaypoints ;
19131: LD_ADDR_VAR 0 3
19135: PUSH
19136: LD_EXP 98
19140: ST_TO_ADDR
// for i := 1 to list do
19141: LD_ADDR_VAR 0 2
19145: PUSH
19146: DOUBLE
19147: LD_INT 1
19149: DEC
19150: ST_TO_ADDR
19151: LD_VAR 0 3
19155: PUSH
19156: FOR_TO
19157: IFFALSE 19248
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19159: LD_STRING setFactoryWaypointXY(
19161: PUSH
19162: LD_VAR 0 3
19166: PUSH
19167: LD_VAR 0 2
19171: ARRAY
19172: PUSH
19173: LD_INT 1
19175: ARRAY
19176: STR
19177: PUSH
19178: LD_STRING ,
19180: STR
19181: PUSH
19182: LD_VAR 0 3
19186: PUSH
19187: LD_VAR 0 2
19191: ARRAY
19192: PUSH
19193: LD_INT 2
19195: ARRAY
19196: STR
19197: PUSH
19198: LD_STRING ,
19200: STR
19201: PUSH
19202: LD_VAR 0 3
19206: PUSH
19207: LD_VAR 0 2
19211: ARRAY
19212: PUSH
19213: LD_INT 3
19215: ARRAY
19216: STR
19217: PUSH
19218: LD_STRING ,
19220: STR
19221: PUSH
19222: LD_VAR 0 3
19226: PUSH
19227: LD_VAR 0 2
19231: ARRAY
19232: PUSH
19233: LD_INT 4
19235: ARRAY
19236: STR
19237: PUSH
19238: LD_STRING )
19240: STR
19241: PPUSH
19242: CALL_OW 559
19246: GO 19156
19248: POP
19249: POP
// end ; end ;
19250: LD_VAR 0 1
19254: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19255: LD_INT 0
19257: PPUSH
// if HexInfo ( x , y ) = warehouse then
19258: LD_VAR 0 2
19262: PPUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 428
19272: PUSH
19273: LD_VAR 0 1
19277: EQUAL
19278: IFFALSE 19305
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19280: LD_ADDR_EXP 100
19284: PUSH
19285: LD_EXP 100
19289: PPUSH
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_INT 0
19297: PPUSH
19298: CALL_OW 1
19302: ST_TO_ADDR
19303: GO 19356
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19305: LD_ADDR_EXP 100
19309: PUSH
19310: LD_EXP 100
19314: PPUSH
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_VAR 0 1
19324: PPUSH
19325: CALL_OW 255
19329: PUSH
19330: LD_VAR 0 1
19334: PUSH
19335: LD_VAR 0 2
19339: PUSH
19340: LD_VAR 0 3
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: PPUSH
19351: CALL_OW 1
19355: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19356: CALL 19365 0 0
// end ;
19360: LD_VAR 0 4
19364: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19365: LD_INT 0
19367: PPUSH
19368: PPUSH
19369: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19370: LD_STRING resetWarehouseGatheringPoints();
19372: PPUSH
19373: CALL_OW 559
// if warehouseGatheringPoints then
19377: LD_EXP 100
19381: IFFALSE 19507
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19383: LD_ADDR_VAR 0 3
19387: PUSH
19388: LD_EXP 100
19392: PPUSH
19393: CALL 68822 0 1
19397: ST_TO_ADDR
// for i := 1 to list do
19398: LD_ADDR_VAR 0 2
19402: PUSH
19403: DOUBLE
19404: LD_INT 1
19406: DEC
19407: ST_TO_ADDR
19408: LD_VAR 0 3
19412: PUSH
19413: FOR_TO
19414: IFFALSE 19505
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19416: LD_STRING setWarehouseGatheringPointXY(
19418: PUSH
19419: LD_VAR 0 3
19423: PUSH
19424: LD_VAR 0 2
19428: ARRAY
19429: PUSH
19430: LD_INT 1
19432: ARRAY
19433: STR
19434: PUSH
19435: LD_STRING ,
19437: STR
19438: PUSH
19439: LD_VAR 0 3
19443: PUSH
19444: LD_VAR 0 2
19448: ARRAY
19449: PUSH
19450: LD_INT 2
19452: ARRAY
19453: STR
19454: PUSH
19455: LD_STRING ,
19457: STR
19458: PUSH
19459: LD_VAR 0 3
19463: PUSH
19464: LD_VAR 0 2
19468: ARRAY
19469: PUSH
19470: LD_INT 3
19472: ARRAY
19473: STR
19474: PUSH
19475: LD_STRING ,
19477: STR
19478: PUSH
19479: LD_VAR 0 3
19483: PUSH
19484: LD_VAR 0 2
19488: ARRAY
19489: PUSH
19490: LD_INT 4
19492: ARRAY
19493: STR
19494: PUSH
19495: LD_STRING )
19497: STR
19498: PPUSH
19499: CALL_OW 559
19503: GO 19413
19505: POP
19506: POP
// end ; end ;
19507: LD_VAR 0 1
19511: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19512: LD_EXP 100
19516: IFFALSE 20211
19518: GO 19520
19520: DISABLE
19521: LD_INT 0
19523: PPUSH
19524: PPUSH
19525: PPUSH
19526: PPUSH
19527: PPUSH
19528: PPUSH
19529: PPUSH
19530: PPUSH
19531: PPUSH
// begin enable ;
19532: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_EXP 100
19542: PPUSH
19543: CALL 68822 0 1
19547: ST_TO_ADDR
// if not list then
19548: LD_VAR 0 3
19552: NOT
19553: IFFALSE 19557
// exit ;
19555: GO 20211
// for i := 1 to list do
19557: LD_ADDR_VAR 0 1
19561: PUSH
19562: DOUBLE
19563: LD_INT 1
19565: DEC
19566: ST_TO_ADDR
19567: LD_VAR 0 3
19571: PUSH
19572: FOR_TO
19573: IFFALSE 20209
// begin depot := list [ i ] [ 2 ] ;
19575: LD_ADDR_VAR 0 8
19579: PUSH
19580: LD_VAR 0 3
19584: PUSH
19585: LD_VAR 0 1
19589: ARRAY
19590: PUSH
19591: LD_INT 2
19593: ARRAY
19594: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19595: LD_ADDR_VAR 0 5
19599: PUSH
19600: LD_VAR 0 3
19604: PUSH
19605: LD_VAR 0 1
19609: ARRAY
19610: PUSH
19611: LD_INT 1
19613: ARRAY
19614: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19615: LD_VAR 0 8
19619: PPUSH
19620: CALL_OW 301
19624: IFTRUE 19643
19626: PUSH
19627: LD_VAR 0 5
19631: PUSH
19632: LD_VAR 0 8
19636: PPUSH
19637: CALL_OW 255
19641: NONEQUAL
19642: OR
19643: IFFALSE 19672
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19645: LD_ADDR_EXP 100
19649: PUSH
19650: LD_EXP 100
19654: PPUSH
19655: LD_VAR 0 8
19659: PPUSH
19660: LD_INT 0
19662: PPUSH
19663: CALL_OW 1
19667: ST_TO_ADDR
// exit ;
19668: POP
19669: POP
19670: GO 20211
// end ; x := list [ i ] [ 3 ] ;
19672: LD_ADDR_VAR 0 6
19676: PUSH
19677: LD_VAR 0 3
19681: PUSH
19682: LD_VAR 0 1
19686: ARRAY
19687: PUSH
19688: LD_INT 3
19690: ARRAY
19691: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19692: LD_ADDR_VAR 0 7
19696: PUSH
19697: LD_VAR 0 3
19701: PUSH
19702: LD_VAR 0 1
19706: ARRAY
19707: PUSH
19708: LD_INT 4
19710: ARRAY
19711: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19712: LD_ADDR_VAR 0 9
19716: PUSH
19717: LD_VAR 0 6
19721: PPUSH
19722: LD_VAR 0 7
19726: PPUSH
19727: LD_INT 16
19729: PPUSH
19730: CALL 67396 0 3
19734: ST_TO_ADDR
// if not cratesNearbyPoint then
19735: LD_VAR 0 9
19739: NOT
19740: IFFALSE 19746
// exit ;
19742: POP
19743: POP
19744: GO 20211
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19746: LD_ADDR_VAR 0 4
19750: PUSH
19751: LD_INT 22
19753: PUSH
19754: LD_VAR 0 5
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: LD_INT 60
19768: PUSH
19769: EMPTY
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 91
19778: PUSH
19779: LD_VAR 0 8
19783: PUSH
19784: LD_INT 6
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 25
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 25
19807: PUSH
19808: LD_INT 16
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: PPUSH
19826: CALL_OW 69
19830: PUSH
19831: LD_VAR 0 8
19835: PPUSH
19836: CALL_OW 313
19840: PPUSH
19841: LD_INT 3
19843: PUSH
19844: LD_INT 60
19846: PUSH
19847: EMPTY
19848: LIST
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: LD_INT 25
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 25
19869: PUSH
19870: LD_INT 16
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PPUSH
19886: CALL_OW 72
19890: UNION
19891: ST_TO_ADDR
// if tmp then
19892: LD_VAR 0 4
19896: IFFALSE 19976
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19898: LD_ADDR_VAR 0 4
19902: PUSH
19903: LD_VAR 0 4
19907: PPUSH
19908: LD_INT 3
19910: PPUSH
19911: CALL 65203 0 2
19915: ST_TO_ADDR
// for j in tmp do
19916: LD_ADDR_VAR 0 2
19920: PUSH
19921: LD_VAR 0 4
19925: PUSH
19926: FOR_IN
19927: IFFALSE 19970
// begin if IsInUnit ( j ) then
19929: LD_VAR 0 2
19933: PPUSH
19934: CALL_OW 310
19938: IFFALSE 19949
// ComExit ( j ) ;
19940: LD_VAR 0 2
19944: PPUSH
19945: CALL 65286 0 1
// AddComCollect ( j , x , y ) ;
19949: LD_VAR 0 2
19953: PPUSH
19954: LD_VAR 0 6
19958: PPUSH
19959: LD_VAR 0 7
19963: PPUSH
19964: CALL_OW 177
// end ;
19968: GO 19926
19970: POP
19971: POP
// exit ;
19972: POP
19973: POP
19974: GO 20211
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19976: LD_ADDR_VAR 0 4
19980: PUSH
19981: LD_INT 22
19983: PUSH
19984: LD_VAR 0 5
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 91
19995: PUSH
19996: LD_VAR 0 8
20000: PUSH
20001: LD_INT 8
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 2
20011: PUSH
20012: LD_INT 34
20014: PUSH
20015: LD_INT 12
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 34
20024: PUSH
20025: LD_INT 51
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 34
20034: PUSH
20035: LD_INT 32
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 34
20044: PUSH
20045: LD_INT 89
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: LIST
20063: PPUSH
20064: CALL_OW 69
20068: ST_TO_ADDR
// if tmp then
20069: LD_VAR 0 4
20073: IFFALSE 20207
// begin for j in tmp do
20075: LD_ADDR_VAR 0 2
20079: PUSH
20080: LD_VAR 0 4
20084: PUSH
20085: FOR_IN
20086: IFFALSE 20205
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20088: LD_VAR 0 2
20092: PPUSH
20093: CALL_OW 262
20097: PUSH
20098: LD_INT 3
20100: EQUAL
20101: IFTRUE 20118
20103: PUSH
20104: LD_VAR 0 2
20108: PPUSH
20109: CALL_OW 261
20113: PUSH
20114: LD_INT 20
20116: GREATER
20117: OR
20118: IFFALSE 20132
20120: PUSH
20121: LD_VAR 0 2
20125: PPUSH
20126: CALL_OW 314
20130: NOT
20131: AND
20132: IFFALSE 20162
20134: PUSH
20135: LD_VAR 0 2
20139: PPUSH
20140: CALL_OW 263
20144: PUSH
20145: LD_INT 1
20147: NONEQUAL
20148: IFTRUE 20161
20150: PUSH
20151: LD_VAR 0 2
20155: PPUSH
20156: CALL_OW 311
20160: OR
20161: AND
20162: IFFALSE 20203
// begin ComCollect ( j , x , y ) ;
20164: LD_VAR 0 2
20168: PPUSH
20169: LD_VAR 0 6
20173: PPUSH
20174: LD_VAR 0 7
20178: PPUSH
20179: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20183: LD_VAR 0 2
20187: PPUSH
20188: LD_VAR 0 8
20192: PPUSH
20193: CALL_OW 172
// exit ;
20197: POP
20198: POP
20199: POP
20200: POP
20201: GO 20211
// end ;
20203: GO 20085
20205: POP
20206: POP
// end ; end ;
20207: GO 19572
20209: POP
20210: POP
// end ; end_of_file
20211: PPOPN 9
20213: END
// export function SOS_UnitDestroyed ( un ) ; begin
20214: LD_INT 0
20216: PPUSH
// ComRadiation ( un ) ;
20217: LD_VAR 0 1
20221: PPUSH
20222: CALL 21384 0 1
// end ;
20226: LD_VAR 0 2
20230: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20231: LD_INT 0
20233: PPUSH
// ComRadiation ( un ) ;
20234: LD_VAR 0 1
20238: PPUSH
20239: CALL 21384 0 1
// end ;
20243: LD_VAR 0 2
20247: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20248: LD_INT 0
20250: PPUSH
// end ;
20251: LD_VAR 0 4
20255: RET
// export function SOS_Command ( cmd ) ; begin
20256: LD_INT 0
20258: PPUSH
// end ;
20259: LD_VAR 0 2
20263: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20264: LD_INT 0
20266: PPUSH
// end ;
20267: LD_VAR 0 6
20271: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
20272: LD_INT 0
20274: PPUSH
20275: PPUSH
20276: PPUSH
20277: PPUSH
20278: PPUSH
// if not vehicle or not factory then
20279: LD_VAR 0 1
20283: NOT
20284: IFTRUE 20293
20286: PUSH
20287: LD_VAR 0 2
20291: NOT
20292: OR
20293: IFFALSE 20297
// exit ;
20295: GO 20959
// weapon := GetWeapon ( vehicle ) ;
20297: LD_ADDR_VAR 0 7
20301: PUSH
20302: LD_VAR 0 1
20306: PPUSH
20307: CALL_OW 264
20311: ST_TO_ADDR
// if weapon = ar_miner then
20312: LD_VAR 0 7
20316: PUSH
20317: LD_INT 81
20319: EQUAL
20320: IFFALSE 20377
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
20322: LD_ADDR_EXP 109
20326: PUSH
20327: LD_EXP 109
20331: PPUSH
20332: LD_EXP 109
20336: PUSH
20337: LD_INT 1
20339: PLUS
20340: PPUSH
20341: LD_VAR 0 1
20345: PPUSH
20346: CALL_OW 1
20350: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20351: LD_ADDR_EXP 110
20355: PUSH
20356: LD_EXP 110
20360: PPUSH
20361: LD_EXP 110
20365: PUSH
20366: LD_INT 1
20368: PLUS
20369: PPUSH
20370: EMPTY
20371: PPUSH
20372: CALL_OW 1
20376: ST_TO_ADDR
// end ; if not factoryWaypoints then
20377: LD_EXP 98
20381: NOT
20382: IFFALSE 20386
// exit ;
20384: GO 20959
// for i := 1 to Count ( factoryWaypoints ) do
20386: LD_ADDR_VAR 0 4
20390: PUSH
20391: DOUBLE
20392: LD_INT 1
20394: DEC
20395: ST_TO_ADDR
20396: LD_EXP 98
20400: PPUSH
20401: CALL 28912 0 1
20405: PUSH
20406: FOR_TO
20407: IFFALSE 20957
// if factoryWaypoints [ i ] [ 2 ] = factory then
20409: LD_EXP 98
20413: PUSH
20414: LD_VAR 0 4
20418: ARRAY
20419: PUSH
20420: LD_INT 2
20422: ARRAY
20423: PUSH
20424: LD_VAR 0 2
20428: EQUAL
20429: IFFALSE 20955
// begin if GetControl ( vehicle ) = control_manual then
20431: LD_VAR 0 1
20435: PPUSH
20436: CALL_OW 263
20440: PUSH
20441: LD_INT 1
20443: EQUAL
20444: IFFALSE 20808
// begin driver := IsDrivenBy ( vehicle ) ;
20446: LD_ADDR_VAR 0 5
20450: PUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: CALL_OW 311
20460: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
20461: LD_VAR 0 5
20465: PUSH
20466: LD_EXP 99
20470: IN
20471: IFTRUE 20485
20473: PUSH
20474: LD_VAR 0 1
20478: PUSH
20479: LD_EXP 99
20483: IN
20484: OR
20485: IFFALSE 20491
// exit ;
20487: POP
20488: POP
20489: GO 20959
// if not HasTask ( driver ) then
20491: LD_VAR 0 5
20495: PPUSH
20496: CALL_OW 314
20500: NOT
20501: IFFALSE 20806
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
20503: LD_ADDR_EXP 99
20507: PUSH
20508: LD_EXP 99
20512: PPUSH
20513: LD_VAR 0 5
20517: PPUSH
20518: CALL 64888 0 2
20522: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
20523: LD_ADDR_EXP 99
20527: PUSH
20528: LD_EXP 99
20532: PPUSH
20533: LD_VAR 0 1
20537: PPUSH
20538: CALL 64888 0 2
20542: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20543: LD_ADDR_VAR 0 6
20547: PUSH
20548: LD_EXP 98
20552: PUSH
20553: LD_VAR 0 4
20557: ARRAY
20558: PUSH
20559: LD_INT 3
20561: ARRAY
20562: PPUSH
20563: LD_EXP 98
20567: PUSH
20568: LD_VAR 0 4
20572: ARRAY
20573: PUSH
20574: LD_INT 4
20576: ARRAY
20577: PPUSH
20578: CALL_OW 428
20582: ST_TO_ADDR
// if hex then
20583: LD_VAR 0 6
20587: IFFALSE 20605
// ComMoveUnit ( driver , hex ) else
20589: LD_VAR 0 5
20593: PPUSH
20594: LD_VAR 0 6
20598: PPUSH
20599: CALL_OW 112
20603: GO 20689
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
20605: LD_VAR 0 1
20609: PPUSH
20610: LD_EXP 98
20614: PUSH
20615: LD_VAR 0 4
20619: ARRAY
20620: PUSH
20621: LD_INT 3
20623: ARRAY
20624: PPUSH
20625: LD_EXP 98
20629: PUSH
20630: LD_VAR 0 4
20634: ARRAY
20635: PUSH
20636: LD_INT 4
20638: ARRAY
20639: PPUSH
20640: CALL_OW 297
20644: PUSH
20645: LD_INT 0
20647: GREATER
20648: IFFALSE 20689
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20650: LD_VAR 0 5
20654: PPUSH
20655: LD_EXP 98
20659: PUSH
20660: LD_VAR 0 4
20664: ARRAY
20665: PUSH
20666: LD_INT 3
20668: ARRAY
20669: PPUSH
20670: LD_EXP 98
20674: PUSH
20675: LD_VAR 0 4
20679: ARRAY
20680: PUSH
20681: LD_INT 4
20683: ARRAY
20684: PPUSH
20685: CALL_OW 111
// AddComExitVehicle ( driver ) ;
20689: LD_VAR 0 5
20693: PPUSH
20694: CALL_OW 181
// if Multiplayer then
20698: LD_OWVAR 4
20702: IFFALSE 20751
// begin repeat wait ( 10 ) ;
20704: LD_INT 10
20706: PPUSH
20707: CALL_OW 67
// until not IsInUnit ( driver ) ;
20711: LD_VAR 0 5
20715: PPUSH
20716: CALL_OW 310
20720: NOT
20721: IFFALSE 20704
// if not HasTask ( driver ) then
20723: LD_VAR 0 5
20727: PPUSH
20728: CALL_OW 314
20732: NOT
20733: IFFALSE 20749
// ComEnterUnit ( driver , factory ) ;
20735: LD_VAR 0 5
20739: PPUSH
20740: LD_VAR 0 2
20744: PPUSH
20745: CALL_OW 120
// end else
20749: GO 20765
// AddComEnterUnit ( driver , factory ) ;
20751: LD_VAR 0 5
20755: PPUSH
20756: LD_VAR 0 2
20760: PPUSH
20761: CALL_OW 180
// wait ( 0 0$1 ) ;
20765: LD_INT 35
20767: PPUSH
20768: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
20772: LD_ADDR_EXP 99
20776: PUSH
20777: LD_EXP 99
20781: PUSH
20782: LD_VAR 0 5
20786: DIFF
20787: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
20788: LD_ADDR_EXP 99
20792: PUSH
20793: LD_EXP 99
20797: PUSH
20798: LD_VAR 0 1
20802: DIFF
20803: ST_TO_ADDR
// break ;
20804: GO 20957
// end ; end else
20806: GO 20955
// if GetControl ( vehicle ) = control_remote then
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 263
20817: PUSH
20818: LD_INT 2
20820: EQUAL
20821: IFFALSE 20907
// begin wait ( 0 0$2 ) ;
20823: LD_INT 70
20825: PPUSH
20826: CALL_OW 67
// repeat wait ( 10 ) ;
20830: LD_INT 10
20832: PPUSH
20833: CALL_OW 67
// Connect ( vehicle ) ;
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL 35190 0 1
// until IsControledBy ( vehicle ) ;
20846: LD_VAR 0 1
20850: PPUSH
20851: CALL_OW 312
20855: IFFALSE 20830
// wait ( 10 ) ;
20857: LD_INT 10
20859: PPUSH
20860: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20864: LD_VAR 0 1
20868: PPUSH
20869: LD_EXP 98
20873: PUSH
20874: LD_VAR 0 4
20878: ARRAY
20879: PUSH
20880: LD_INT 3
20882: ARRAY
20883: PPUSH
20884: LD_EXP 98
20888: PUSH
20889: LD_VAR 0 4
20893: ARRAY
20894: PUSH
20895: LD_INT 4
20897: ARRAY
20898: PPUSH
20899: CALL_OW 111
// break ;
20903: GO 20957
// end else
20905: GO 20955
// begin wait ( 0 0$3 ) ;
20907: LD_INT 105
20909: PPUSH
20910: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20914: LD_VAR 0 1
20918: PPUSH
20919: LD_EXP 98
20923: PUSH
20924: LD_VAR 0 4
20928: ARRAY
20929: PUSH
20930: LD_INT 3
20932: ARRAY
20933: PPUSH
20934: LD_EXP 98
20938: PUSH
20939: LD_VAR 0 4
20943: ARRAY
20944: PUSH
20945: LD_INT 4
20947: ARRAY
20948: PPUSH
20949: CALL_OW 111
// break ;
20953: GO 20957
// end ; end ;
20955: GO 20406
20957: POP
20958: POP
// end ;
20959: LD_VAR 0 3
20963: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20964: LD_INT 0
20966: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20967: LD_VAR 0 1
20971: PUSH
20972: LD_INT 250
20974: EQUAL
20975: IFFALSE 20992
20977: PUSH
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 264
20987: PUSH
20988: LD_INT 81
20990: EQUAL
20991: AND
20992: IFFALSE 21013
// MinerPlaceMine ( unit , x , y ) ;
20994: LD_VAR 0 2
20998: PPUSH
20999: LD_VAR 0 4
21003: PPUSH
21004: LD_VAR 0 5
21008: PPUSH
21009: CALL 24359 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21013: LD_VAR 0 1
21017: PUSH
21018: LD_INT 251
21020: EQUAL
21021: IFFALSE 21038
21023: PUSH
21024: LD_VAR 0 2
21028: PPUSH
21029: CALL_OW 264
21033: PUSH
21034: LD_INT 81
21036: EQUAL
21037: AND
21038: IFFALSE 21059
// MinerDetonateMine ( unit , x , y ) ;
21040: LD_VAR 0 2
21044: PPUSH
21045: LD_VAR 0 4
21049: PPUSH
21050: LD_VAR 0 5
21054: PPUSH
21055: CALL 24766 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21059: LD_VAR 0 1
21063: PUSH
21064: LD_INT 252
21066: EQUAL
21067: IFFALSE 21084
21069: PUSH
21070: LD_VAR 0 2
21074: PPUSH
21075: CALL_OW 264
21079: PUSH
21080: LD_INT 81
21082: EQUAL
21083: AND
21084: IFFALSE 21105
// MinerCreateMinefield ( unit , x , y ) ;
21086: LD_VAR 0 2
21090: PPUSH
21091: LD_VAR 0 4
21095: PPUSH
21096: LD_VAR 0 5
21100: PPUSH
21101: CALL 24998 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21105: LD_VAR 0 1
21109: PUSH
21110: LD_INT 253
21112: EQUAL
21113: IFFALSE 21130
21115: PUSH
21116: LD_VAR 0 2
21120: PPUSH
21121: CALL_OW 257
21125: PUSH
21126: LD_INT 5
21128: EQUAL
21129: AND
21130: IFFALSE 21151
// ComBinocular ( unit , x , y ) ;
21132: LD_VAR 0 2
21136: PPUSH
21137: LD_VAR 0 4
21141: PPUSH
21142: LD_VAR 0 5
21146: PPUSH
21147: CALL 25373 0 3
// if selectedUnit then
21151: LD_VAR 0 3
21155: IFFALSE 21215
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21157: LD_VAR 0 1
21161: PUSH
21162: LD_INT 254
21164: EQUAL
21165: IFFALSE 21182
21167: PUSH
21168: LD_VAR 0 2
21172: PPUSH
21173: CALL_OW 264
21177: PUSH
21178: LD_INT 99
21180: EQUAL
21181: AND
21182: IFFALSE 21199
21184: PUSH
21185: LD_VAR 0 3
21189: PPUSH
21190: CALL_OW 263
21194: PUSH
21195: LD_INT 3
21197: EQUAL
21198: AND
21199: IFFALSE 21215
// HackDestroyVehicle ( unit , selectedUnit ) ;
21201: LD_VAR 0 2
21205: PPUSH
21206: LD_VAR 0 3
21210: PPUSH
21211: CALL 23549 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21215: LD_VAR 0 1
21219: PUSH
21220: LD_INT 255
21222: EQUAL
21223: IFFALSE 21247
21225: PUSH
21226: LD_VAR 0 2
21230: PPUSH
21231: CALL_OW 264
21235: PUSH
21236: LD_INT 14
21238: PUSH
21239: LD_INT 53
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: IN
21246: AND
21247: IFFALSE 21265
21249: PUSH
21250: LD_VAR 0 4
21254: PPUSH
21255: LD_VAR 0 5
21259: PPUSH
21260: CALL_OW 488
21264: AND
21265: IFFALSE 21289
// CutTreeXYR ( unit , x , y , 12 ) ;
21267: LD_VAR 0 2
21271: PPUSH
21272: LD_VAR 0 4
21276: PPUSH
21277: LD_VAR 0 5
21281: PPUSH
21282: LD_INT 12
21284: PPUSH
21285: CALL 21480 0 4
// if cmd = 256 then
21289: LD_VAR 0 1
21293: PUSH
21294: LD_INT 256
21296: EQUAL
21297: IFFALSE 21318
// SetFactoryWaypoint ( unit , x , y ) ;
21299: LD_VAR 0 2
21303: PPUSH
21304: LD_VAR 0 4
21308: PPUSH
21309: LD_VAR 0 5
21313: PPUSH
21314: CALL 18759 0 3
// if cmd = 257 then
21318: LD_VAR 0 1
21322: PUSH
21323: LD_INT 257
21325: EQUAL
21326: IFFALSE 21347
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21328: LD_VAR 0 2
21332: PPUSH
21333: LD_VAR 0 4
21337: PPUSH
21338: LD_VAR 0 5
21342: PPUSH
21343: CALL 19255 0 3
// if cmd = 258 then
21347: LD_VAR 0 1
21351: PUSH
21352: LD_INT 258
21354: EQUAL
21355: IFFALSE 21379
// BurnTreeXYR ( unit , x , y , 8 ) ;
21357: LD_VAR 0 2
21361: PPUSH
21362: LD_VAR 0 4
21366: PPUSH
21367: LD_VAR 0 5
21371: PPUSH
21372: LD_INT 8
21374: PPUSH
21375: CALL 21902 0 4
// end ;
21379: LD_VAR 0 6
21383: RET
// export function ComRadiation ( un ) ; var eff ; begin
21384: LD_INT 0
21386: PPUSH
21387: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
21388: LD_VAR 0 1
21392: PPUSH
21393: CALL_OW 264
21397: PUSH
21398: LD_INT 91
21400: NONEQUAL
21401: IFFALSE 21405
// exit ;
21403: GO 21475
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21405: LD_INT 68
21407: PPUSH
21408: LD_VAR 0 1
21412: PPUSH
21413: CALL_OW 255
21417: PPUSH
21418: CALL_OW 321
21422: PUSH
21423: LD_INT 2
21425: EQUAL
21426: IFFALSE 21438
// eff := 50 else
21428: LD_ADDR_VAR 0 3
21432: PUSH
21433: LD_INT 50
21435: ST_TO_ADDR
21436: GO 21446
// eff := 25 ;
21438: LD_ADDR_VAR 0 3
21442: PUSH
21443: LD_INT 25
21445: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21446: LD_VAR 0 1
21450: PPUSH
21451: CALL_OW 250
21455: PPUSH
21456: LD_VAR 0 1
21460: PPUSH
21461: CALL_OW 251
21465: PPUSH
21466: LD_VAR 0 3
21470: PPUSH
21471: CALL_OW 495
// end ;
21475: LD_VAR 0 2
21479: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21480: LD_INT 0
21482: PPUSH
21483: PPUSH
21484: PPUSH
21485: PPUSH
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
21490: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21491: LD_VAR 0 1
21495: PPUSH
21496: CALL_OW 302
21500: NOT
21501: IFTRUE 21520
21503: PUSH
21504: LD_VAR 0 2
21508: PPUSH
21509: LD_VAR 0 3
21513: PPUSH
21514: CALL_OW 488
21518: NOT
21519: OR
21520: IFTRUE 21529
21522: PUSH
21523: LD_VAR 0 4
21527: NOT
21528: OR
21529: IFFALSE 21533
// exit ;
21531: GO 21897
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 437
21542: PPUSH
21543: CALL 28912 0 1
21547: PUSH
21548: LD_INT 10
21550: GREATER
21551: IFFALSE 21555
// exit ;
21553: GO 21897
// list := [ ] ;
21555: LD_ADDR_VAR 0 13
21559: PUSH
21560: EMPTY
21561: ST_TO_ADDR
// if x - r < 0 then
21562: LD_VAR 0 2
21566: PUSH
21567: LD_VAR 0 4
21571: MINUS
21572: PUSH
21573: LD_INT 0
21575: LESS
21576: IFFALSE 21588
// min_x := 0 else
21578: LD_ADDR_VAR 0 7
21582: PUSH
21583: LD_INT 0
21585: ST_TO_ADDR
21586: GO 21604
// min_x := x - r ;
21588: LD_ADDR_VAR 0 7
21592: PUSH
21593: LD_VAR 0 2
21597: PUSH
21598: LD_VAR 0 4
21602: MINUS
21603: ST_TO_ADDR
// if y - r < 0 then
21604: LD_VAR 0 3
21608: PUSH
21609: LD_VAR 0 4
21613: MINUS
21614: PUSH
21615: LD_INT 0
21617: LESS
21618: IFFALSE 21630
// min_y := 0 else
21620: LD_ADDR_VAR 0 8
21624: PUSH
21625: LD_INT 0
21627: ST_TO_ADDR
21628: GO 21646
// min_y := y - r ;
21630: LD_ADDR_VAR 0 8
21634: PUSH
21635: LD_VAR 0 3
21639: PUSH
21640: LD_VAR 0 4
21644: MINUS
21645: ST_TO_ADDR
// max_x := x + r ;
21646: LD_ADDR_VAR 0 9
21650: PUSH
21651: LD_VAR 0 2
21655: PUSH
21656: LD_VAR 0 4
21660: PLUS
21661: ST_TO_ADDR
// max_y := y + r ;
21662: LD_ADDR_VAR 0 10
21666: PUSH
21667: LD_VAR 0 3
21671: PUSH
21672: LD_VAR 0 4
21676: PLUS
21677: ST_TO_ADDR
// for _x = min_x to max_x do
21678: LD_ADDR_VAR 0 11
21682: PUSH
21683: DOUBLE
21684: LD_VAR 0 7
21688: DEC
21689: ST_TO_ADDR
21690: LD_VAR 0 9
21694: PUSH
21695: FOR_TO
21696: IFFALSE 21815
// for _y = min_y to max_y do
21698: LD_ADDR_VAR 0 12
21702: PUSH
21703: DOUBLE
21704: LD_VAR 0 8
21708: DEC
21709: ST_TO_ADDR
21710: LD_VAR 0 10
21714: PUSH
21715: FOR_TO
21716: IFFALSE 21811
// begin if not ValidHex ( _x , _y ) then
21718: LD_VAR 0 11
21722: PPUSH
21723: LD_VAR 0 12
21727: PPUSH
21728: CALL_OW 488
21732: NOT
21733: IFFALSE 21737
// continue ;
21735: GO 21715
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21737: LD_VAR 0 11
21741: PPUSH
21742: LD_VAR 0 12
21746: PPUSH
21747: CALL_OW 351
21751: IFFALSE 21769
21753: PUSH
21754: LD_VAR 0 11
21758: PPUSH
21759: LD_VAR 0 12
21763: PPUSH
21764: CALL_OW 554
21768: AND
21769: IFFALSE 21809
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21771: LD_ADDR_VAR 0 13
21775: PUSH
21776: LD_VAR 0 13
21780: PPUSH
21781: LD_VAR 0 13
21785: PUSH
21786: LD_INT 1
21788: PLUS
21789: PPUSH
21790: LD_VAR 0 11
21794: PUSH
21795: LD_VAR 0 12
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PPUSH
21804: CALL_OW 2
21808: ST_TO_ADDR
// end ;
21809: GO 21715
21811: POP
21812: POP
21813: GO 21695
21815: POP
21816: POP
// if not list then
21817: LD_VAR 0 13
21821: NOT
21822: IFFALSE 21826
// exit ;
21824: GO 21897
// for i in list do
21826: LD_ADDR_VAR 0 6
21830: PUSH
21831: LD_VAR 0 13
21835: PUSH
21836: FOR_IN
21837: IFFALSE 21895
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21839: LD_VAR 0 1
21843: PPUSH
21844: LD_STRING M
21846: PUSH
21847: LD_VAR 0 6
21851: PUSH
21852: LD_INT 1
21854: ARRAY
21855: PUSH
21856: LD_VAR 0 6
21860: PUSH
21861: LD_INT 2
21863: ARRAY
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: PUSH
21886: EMPTY
21887: LIST
21888: PPUSH
21889: CALL_OW 447
21893: GO 21836
21895: POP
21896: POP
// end ;
21897: LD_VAR 0 5
21901: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
21902: LD_INT 0
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 302
21923: NOT
21924: IFTRUE 21943
21926: PUSH
21927: LD_VAR 0 2
21931: PPUSH
21932: LD_VAR 0 3
21936: PPUSH
21937: CALL_OW 488
21941: NOT
21942: OR
21943: IFTRUE 21952
21945: PUSH
21946: LD_VAR 0 4
21950: NOT
21951: OR
21952: IFFALSE 21956
// exit ;
21954: GO 22495
// if Count ( GetTaskList ( flame ) ) > 10 then
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 437
21965: PPUSH
21966: CALL 28912 0 1
21970: PUSH
21971: LD_INT 10
21973: GREATER
21974: IFFALSE 21978
// exit ;
21976: GO 22495
// list := [ ] ;
21978: LD_ADDR_VAR 0 13
21982: PUSH
21983: EMPTY
21984: ST_TO_ADDR
// if x - r < 0 then
21985: LD_VAR 0 2
21989: PUSH
21990: LD_VAR 0 4
21994: MINUS
21995: PUSH
21996: LD_INT 0
21998: LESS
21999: IFFALSE 22011
// min_x := 0 else
22001: LD_ADDR_VAR 0 7
22005: PUSH
22006: LD_INT 0
22008: ST_TO_ADDR
22009: GO 22027
// min_x := x - r ;
22011: LD_ADDR_VAR 0 7
22015: PUSH
22016: LD_VAR 0 2
22020: PUSH
22021: LD_VAR 0 4
22025: MINUS
22026: ST_TO_ADDR
// if y - r < 0 then
22027: LD_VAR 0 3
22031: PUSH
22032: LD_VAR 0 4
22036: MINUS
22037: PUSH
22038: LD_INT 0
22040: LESS
22041: IFFALSE 22053
// min_y := 0 else
22043: LD_ADDR_VAR 0 8
22047: PUSH
22048: LD_INT 0
22050: ST_TO_ADDR
22051: GO 22069
// min_y := y - r ;
22053: LD_ADDR_VAR 0 8
22057: PUSH
22058: LD_VAR 0 3
22062: PUSH
22063: LD_VAR 0 4
22067: MINUS
22068: ST_TO_ADDR
// max_x := x + r ;
22069: LD_ADDR_VAR 0 9
22073: PUSH
22074: LD_VAR 0 2
22078: PUSH
22079: LD_VAR 0 4
22083: PLUS
22084: ST_TO_ADDR
// max_y := y + r ;
22085: LD_ADDR_VAR 0 10
22089: PUSH
22090: LD_VAR 0 3
22094: PUSH
22095: LD_VAR 0 4
22099: PLUS
22100: ST_TO_ADDR
// for _x = min_x to max_x do
22101: LD_ADDR_VAR 0 11
22105: PUSH
22106: DOUBLE
22107: LD_VAR 0 7
22111: DEC
22112: ST_TO_ADDR
22113: LD_VAR 0 9
22117: PUSH
22118: FOR_TO
22119: IFFALSE 22238
// for _y = min_y to max_y do
22121: LD_ADDR_VAR 0 12
22125: PUSH
22126: DOUBLE
22127: LD_VAR 0 8
22131: DEC
22132: ST_TO_ADDR
22133: LD_VAR 0 10
22137: PUSH
22138: FOR_TO
22139: IFFALSE 22234
// begin if not ValidHex ( _x , _y ) then
22141: LD_VAR 0 11
22145: PPUSH
22146: LD_VAR 0 12
22150: PPUSH
22151: CALL_OW 488
22155: NOT
22156: IFFALSE 22160
// continue ;
22158: GO 22138
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22160: LD_VAR 0 11
22164: PPUSH
22165: LD_VAR 0 12
22169: PPUSH
22170: CALL_OW 351
22174: IFFALSE 22192
22176: PUSH
22177: LD_VAR 0 11
22181: PPUSH
22182: LD_VAR 0 12
22186: PPUSH
22187: CALL_OW 554
22191: AND
22192: IFFALSE 22232
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22194: LD_ADDR_VAR 0 13
22198: PUSH
22199: LD_VAR 0 13
22203: PPUSH
22204: LD_VAR 0 13
22208: PUSH
22209: LD_INT 1
22211: PLUS
22212: PPUSH
22213: LD_VAR 0 11
22217: PUSH
22218: LD_VAR 0 12
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PPUSH
22227: CALL_OW 2
22231: ST_TO_ADDR
// end ;
22232: GO 22138
22234: POP
22235: POP
22236: GO 22118
22238: POP
22239: POP
// if not list then
22240: LD_VAR 0 13
22244: NOT
22245: IFFALSE 22249
// exit ;
22247: GO 22495
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22249: LD_ADDR_VAR 0 13
22253: PUSH
22254: LD_VAR 0 1
22258: PPUSH
22259: LD_VAR 0 13
22263: PPUSH
22264: LD_INT 1
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL 32318 0 4
22274: ST_TO_ADDR
// ComStop ( flame ) ;
22275: LD_VAR 0 1
22279: PPUSH
22280: CALL_OW 141
// for i in list do
22284: LD_ADDR_VAR 0 6
22288: PUSH
22289: LD_VAR 0 13
22293: PUSH
22294: FOR_IN
22295: IFFALSE 22326
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22297: LD_VAR 0 1
22301: PPUSH
22302: LD_VAR 0 6
22306: PUSH
22307: LD_INT 1
22309: ARRAY
22310: PPUSH
22311: LD_VAR 0 6
22315: PUSH
22316: LD_INT 2
22318: ARRAY
22319: PPUSH
22320: CALL_OW 176
22324: GO 22294
22326: POP
22327: POP
// repeat wait ( 0 0$1 ) ;
22328: LD_INT 35
22330: PPUSH
22331: CALL_OW 67
// task := GetTaskList ( flame ) ;
22335: LD_ADDR_VAR 0 14
22339: PUSH
22340: LD_VAR 0 1
22344: PPUSH
22345: CALL_OW 437
22349: ST_TO_ADDR
// if not task then
22350: LD_VAR 0 14
22354: NOT
22355: IFFALSE 22359
// exit ;
22357: GO 22495
// if task [ 1 ] [ 1 ] <> | then
22359: LD_VAR 0 14
22363: PUSH
22364: LD_INT 1
22366: ARRAY
22367: PUSH
22368: LD_INT 1
22370: ARRAY
22371: PUSH
22372: LD_STRING |
22374: NONEQUAL
22375: IFFALSE 22379
// exit ;
22377: GO 22495
// _x := task [ 1 ] [ 2 ] ;
22379: LD_ADDR_VAR 0 11
22383: PUSH
22384: LD_VAR 0 14
22388: PUSH
22389: LD_INT 1
22391: ARRAY
22392: PUSH
22393: LD_INT 2
22395: ARRAY
22396: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22397: LD_ADDR_VAR 0 12
22401: PUSH
22402: LD_VAR 0 14
22406: PUSH
22407: LD_INT 1
22409: ARRAY
22410: PUSH
22411: LD_INT 3
22413: ARRAY
22414: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22415: LD_VAR 0 11
22419: PPUSH
22420: LD_VAR 0 12
22424: PPUSH
22425: CALL_OW 351
22429: NOT
22430: IFTRUE 22449
22432: PUSH
22433: LD_VAR 0 11
22437: PPUSH
22438: LD_VAR 0 12
22442: PPUSH
22443: CALL_OW 554
22447: NOT
22448: OR
22449: IFFALSE 22483
// begin task := Delete ( task , 1 ) ;
22451: LD_ADDR_VAR 0 14
22455: PUSH
22456: LD_VAR 0 14
22460: PPUSH
22461: LD_INT 1
22463: PPUSH
22464: CALL_OW 3
22468: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22469: LD_VAR 0 1
22473: PPUSH
22474: LD_VAR 0 14
22478: PPUSH
22479: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22483: LD_VAR 0 1
22487: PPUSH
22488: CALL_OW 314
22492: NOT
22493: IFFALSE 22328
// end ;
22495: LD_VAR 0 5
22499: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22500: LD_EXP 102
22504: NOT
22505: IFFALSE 22555
22507: GO 22509
22509: DISABLE
// begin initHack := true ;
22510: LD_ADDR_EXP 102
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
// hackTanks := [ ] ;
22518: LD_ADDR_EXP 103
22522: PUSH
22523: EMPTY
22524: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22525: LD_ADDR_EXP 104
22529: PUSH
22530: EMPTY
22531: ST_TO_ADDR
// hackLimit := 3 ;
22532: LD_ADDR_EXP 105
22536: PUSH
22537: LD_INT 3
22539: ST_TO_ADDR
// hackDist := 12 ;
22540: LD_ADDR_EXP 106
22544: PUSH
22545: LD_INT 12
22547: ST_TO_ADDR
// hackCounter := [ ] ;
22548: LD_ADDR_EXP 107
22552: PUSH
22553: EMPTY
22554: ST_TO_ADDR
// end ;
22555: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22556: LD_EXP 102
22560: IFFALSE 22578
22562: PUSH
22563: LD_INT 34
22565: PUSH
22566: LD_INT 99
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PPUSH
22573: CALL_OW 69
22577: AND
22578: IFFALSE 22831
22580: GO 22582
22582: DISABLE
22583: LD_INT 0
22585: PPUSH
22586: PPUSH
// begin enable ;
22587: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22588: LD_ADDR_VAR 0 1
22592: PUSH
22593: LD_INT 34
22595: PUSH
22596: LD_INT 99
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PPUSH
22603: CALL_OW 69
22607: PUSH
22608: FOR_IN
22609: IFFALSE 22829
// begin if not i in hackTanks then
22611: LD_VAR 0 1
22615: PUSH
22616: LD_EXP 103
22620: IN
22621: NOT
22622: IFFALSE 22705
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22624: LD_ADDR_EXP 103
22628: PUSH
22629: LD_EXP 103
22633: PPUSH
22634: LD_EXP 103
22638: PUSH
22639: LD_INT 1
22641: PLUS
22642: PPUSH
22643: LD_VAR 0 1
22647: PPUSH
22648: CALL_OW 1
22652: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22653: LD_ADDR_EXP 104
22657: PUSH
22658: LD_EXP 104
22662: PPUSH
22663: LD_EXP 104
22667: PUSH
22668: LD_INT 1
22670: PLUS
22671: PPUSH
22672: EMPTY
22673: PPUSH
22674: CALL_OW 1
22678: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22679: LD_ADDR_EXP 107
22683: PUSH
22684: LD_EXP 107
22688: PPUSH
22689: LD_EXP 107
22693: PUSH
22694: LD_INT 1
22696: PLUS
22697: PPUSH
22698: EMPTY
22699: PPUSH
22700: CALL_OW 1
22704: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22705: LD_VAR 0 1
22709: PPUSH
22710: CALL_OW 302
22714: NOT
22715: IFFALSE 22728
// begin HackUnlinkAll ( i ) ;
22717: LD_VAR 0 1
22721: PPUSH
22722: CALL 22834 0 1
// continue ;
22726: GO 22608
// end ; HackCheckCapturedStatus ( i ) ;
22728: LD_VAR 0 1
22732: PPUSH
22733: CALL 23279 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22737: LD_ADDR_VAR 0 2
22741: PUSH
22742: LD_INT 81
22744: PUSH
22745: LD_VAR 0 1
22749: PPUSH
22750: CALL_OW 255
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 33
22761: PUSH
22762: LD_INT 3
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 91
22771: PUSH
22772: LD_VAR 0 1
22776: PUSH
22777: LD_EXP 106
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 50
22789: PUSH
22790: EMPTY
22791: LIST
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: PPUSH
22799: CALL_OW 69
22803: ST_TO_ADDR
// if not tmp then
22804: LD_VAR 0 2
22808: NOT
22809: IFFALSE 22813
// continue ;
22811: GO 22608
// HackLink ( i , tmp ) ;
22813: LD_VAR 0 1
22817: PPUSH
22818: LD_VAR 0 2
22822: PPUSH
22823: CALL 22970 0 2
// end ;
22827: GO 22608
22829: POP
22830: POP
// end ;
22831: PPOPN 2
22833: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22834: LD_INT 0
22836: PPUSH
22837: PPUSH
22838: PPUSH
// if not hack in hackTanks then
22839: LD_VAR 0 1
22843: PUSH
22844: LD_EXP 103
22848: IN
22849: NOT
22850: IFFALSE 22854
// exit ;
22852: GO 22965
// index := GetElementIndex ( hackTanks , hack ) ;
22854: LD_ADDR_VAR 0 4
22858: PUSH
22859: LD_EXP 103
22863: PPUSH
22864: LD_VAR 0 1
22868: PPUSH
22869: CALL 31613 0 2
22873: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22874: LD_EXP 104
22878: PUSH
22879: LD_VAR 0 4
22883: ARRAY
22884: IFFALSE 22965
// begin for i in hackTanksCaptured [ index ] do
22886: LD_ADDR_VAR 0 3
22890: PUSH
22891: LD_EXP 104
22895: PUSH
22896: LD_VAR 0 4
22900: ARRAY
22901: PUSH
22902: FOR_IN
22903: IFFALSE 22929
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22905: LD_VAR 0 3
22909: PUSH
22910: LD_INT 1
22912: ARRAY
22913: PPUSH
22914: LD_VAR 0 3
22918: PUSH
22919: LD_INT 2
22921: ARRAY
22922: PPUSH
22923: CALL_OW 235
22927: GO 22902
22929: POP
22930: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22931: LD_ADDR_EXP 104
22935: PUSH
22936: LD_EXP 104
22940: PPUSH
22941: LD_VAR 0 4
22945: PPUSH
22946: EMPTY
22947: PPUSH
22948: CALL_OW 1
22952: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22953: LD_VAR 0 1
22957: PPUSH
22958: LD_INT 0
22960: PPUSH
22961: CALL_OW 505
// end ; end ;
22965: LD_VAR 0 2
22969: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
22974: PPUSH
// if not hack in hackTanks or not vehicles then
22975: LD_VAR 0 1
22979: PUSH
22980: LD_EXP 103
22984: IN
22985: NOT
22986: IFTRUE 22995
22988: PUSH
22989: LD_VAR 0 2
22993: NOT
22994: OR
22995: IFFALSE 22999
// exit ;
22997: GO 23274
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22999: LD_ADDR_VAR 0 2
23003: PUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: LD_VAR 0 2
23013: PPUSH
23014: LD_INT 1
23016: PPUSH
23017: LD_INT 1
23019: PPUSH
23020: CALL 32265 0 4
23024: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23025: LD_ADDR_VAR 0 5
23029: PUSH
23030: LD_EXP 103
23034: PPUSH
23035: LD_VAR 0 1
23039: PPUSH
23040: CALL 31613 0 2
23044: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23045: LD_EXP 104
23049: PUSH
23050: LD_VAR 0 5
23054: ARRAY
23055: PUSH
23056: LD_EXP 105
23060: LESS
23061: IFFALSE 23250
// begin for i := 1 to vehicles do
23063: LD_ADDR_VAR 0 4
23067: PUSH
23068: DOUBLE
23069: LD_INT 1
23071: DEC
23072: ST_TO_ADDR
23073: LD_VAR 0 2
23077: PUSH
23078: FOR_TO
23079: IFFALSE 23248
// begin if hackTanksCaptured [ index ] = hackLimit then
23081: LD_EXP 104
23085: PUSH
23086: LD_VAR 0 5
23090: ARRAY
23091: PUSH
23092: LD_EXP 105
23096: EQUAL
23097: IFFALSE 23101
// break ;
23099: GO 23248
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23101: LD_ADDR_EXP 107
23105: PUSH
23106: LD_EXP 107
23110: PPUSH
23111: LD_VAR 0 5
23115: PPUSH
23116: LD_EXP 107
23120: PUSH
23121: LD_VAR 0 5
23125: ARRAY
23126: PUSH
23127: LD_INT 1
23129: PLUS
23130: PPUSH
23131: CALL_OW 1
23135: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23136: LD_ADDR_EXP 104
23140: PUSH
23141: LD_EXP 104
23145: PPUSH
23146: LD_VAR 0 5
23150: PUSH
23151: LD_EXP 104
23155: PUSH
23156: LD_VAR 0 5
23160: ARRAY
23161: PUSH
23162: LD_INT 1
23164: PLUS
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PPUSH
23170: LD_VAR 0 2
23174: PUSH
23175: LD_VAR 0 4
23179: ARRAY
23180: PUSH
23181: LD_VAR 0 2
23185: PUSH
23186: LD_VAR 0 4
23190: ARRAY
23191: PPUSH
23192: CALL_OW 255
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PPUSH
23201: CALL 31830 0 3
23205: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23206: LD_VAR 0 2
23210: PUSH
23211: LD_VAR 0 4
23215: ARRAY
23216: PPUSH
23217: LD_VAR 0 1
23221: PPUSH
23222: CALL_OW 255
23226: PPUSH
23227: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23231: LD_VAR 0 2
23235: PUSH
23236: LD_VAR 0 4
23240: ARRAY
23241: PPUSH
23242: CALL_OW 141
// end ;
23246: GO 23078
23248: POP
23249: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23250: LD_VAR 0 1
23254: PPUSH
23255: LD_EXP 104
23259: PUSH
23260: LD_VAR 0 5
23264: ARRAY
23265: PUSH
23266: LD_INT 0
23268: PLUS
23269: PPUSH
23270: CALL_OW 505
// end ;
23274: LD_VAR 0 3
23278: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23279: LD_INT 0
23281: PPUSH
23282: PPUSH
23283: PPUSH
23284: PPUSH
// if not hack in hackTanks then
23285: LD_VAR 0 1
23289: PUSH
23290: LD_EXP 103
23294: IN
23295: NOT
23296: IFFALSE 23300
// exit ;
23298: GO 23544
// index := GetElementIndex ( hackTanks , hack ) ;
23300: LD_ADDR_VAR 0 4
23304: PUSH
23305: LD_EXP 103
23309: PPUSH
23310: LD_VAR 0 1
23314: PPUSH
23315: CALL 31613 0 2
23319: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23320: LD_ADDR_VAR 0 3
23324: PUSH
23325: DOUBLE
23326: LD_EXP 104
23330: PUSH
23331: LD_VAR 0 4
23335: ARRAY
23336: INC
23337: ST_TO_ADDR
23338: LD_INT 1
23340: PUSH
23341: FOR_DOWNTO
23342: IFFALSE 23518
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23344: LD_ADDR_VAR 0 5
23348: PUSH
23349: LD_EXP 104
23353: PUSH
23354: LD_VAR 0 4
23358: ARRAY
23359: PUSH
23360: LD_VAR 0 3
23364: ARRAY
23365: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23366: LD_VAR 0 5
23370: PUSH
23371: LD_INT 1
23373: ARRAY
23374: PPUSH
23375: CALL_OW 302
23379: NOT
23380: IFTRUE 23408
23382: PUSH
23383: LD_VAR 0 5
23387: PUSH
23388: LD_INT 1
23390: ARRAY
23391: PPUSH
23392: CALL_OW 255
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 255
23406: NONEQUAL
23407: OR
23408: IFFALSE 23516
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23410: LD_VAR 0 5
23414: PUSH
23415: LD_INT 1
23417: ARRAY
23418: PPUSH
23419: CALL_OW 305
23423: IFFALSE 23451
23425: PUSH
23426: LD_VAR 0 5
23430: PUSH
23431: LD_INT 1
23433: ARRAY
23434: PPUSH
23435: CALL_OW 255
23439: PUSH
23440: LD_VAR 0 1
23444: PPUSH
23445: CALL_OW 255
23449: EQUAL
23450: AND
23451: IFFALSE 23475
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23453: LD_VAR 0 5
23457: PUSH
23458: LD_INT 1
23460: ARRAY
23461: PPUSH
23462: LD_VAR 0 5
23466: PUSH
23467: LD_INT 2
23469: ARRAY
23470: PPUSH
23471: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23475: LD_ADDR_EXP 104
23479: PUSH
23480: LD_EXP 104
23484: PPUSH
23485: LD_VAR 0 4
23489: PPUSH
23490: LD_EXP 104
23494: PUSH
23495: LD_VAR 0 4
23499: ARRAY
23500: PPUSH
23501: LD_VAR 0 3
23505: PPUSH
23506: CALL_OW 3
23510: PPUSH
23511: CALL_OW 1
23515: ST_TO_ADDR
// end ; end ;
23516: GO 23341
23518: POP
23519: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_EXP 104
23529: PUSH
23530: LD_VAR 0 4
23534: ARRAY
23535: PUSH
23536: LD_INT 0
23538: PLUS
23539: PPUSH
23540: CALL_OW 505
// end ;
23544: LD_VAR 0 2
23548: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23549: LD_INT 0
23551: PPUSH
23552: PPUSH
23553: PPUSH
23554: PPUSH
// if not hack in hackTanks then
23555: LD_VAR 0 1
23559: PUSH
23560: LD_EXP 103
23564: IN
23565: NOT
23566: IFFALSE 23570
// exit ;
23568: GO 23655
// index := GetElementIndex ( hackTanks , hack ) ;
23570: LD_ADDR_VAR 0 5
23574: PUSH
23575: LD_EXP 103
23579: PPUSH
23580: LD_VAR 0 1
23584: PPUSH
23585: CALL 31613 0 2
23589: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23590: LD_ADDR_VAR 0 4
23594: PUSH
23595: DOUBLE
23596: LD_INT 1
23598: DEC
23599: ST_TO_ADDR
23600: LD_EXP 104
23604: PUSH
23605: LD_VAR 0 5
23609: ARRAY
23610: PUSH
23611: FOR_TO
23612: IFFALSE 23653
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23614: LD_EXP 104
23618: PUSH
23619: LD_VAR 0 5
23623: ARRAY
23624: PUSH
23625: LD_VAR 0 4
23629: ARRAY
23630: PUSH
23631: LD_INT 1
23633: ARRAY
23634: PUSH
23635: LD_VAR 0 2
23639: EQUAL
23640: IFFALSE 23651
// KillUnit ( vehicle ) ;
23642: LD_VAR 0 2
23646: PPUSH
23647: CALL_OW 66
23651: GO 23611
23653: POP
23654: POP
// end ;
23655: LD_VAR 0 3
23659: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
23660: LD_EXP 108
23664: NOT
23665: IFFALSE 23798
23667: GO 23669
23669: DISABLE
23670: LD_INT 0
23672: PPUSH
// begin initMiner := true ;
23673: LD_ADDR_EXP 108
23677: PUSH
23678: LD_INT 1
23680: ST_TO_ADDR
// minersList := [ ] ;
23681: LD_ADDR_EXP 109
23685: PUSH
23686: EMPTY
23687: ST_TO_ADDR
// minerMinesList := [ ] ;
23688: LD_ADDR_EXP 110
23692: PUSH
23693: EMPTY
23694: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
23695: LD_ADDR_EXP 111
23699: PUSH
23700: LD_INT 10
23702: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23703: LD_ADDR_VAR 0 1
23707: PUSH
23708: LD_INT 34
23710: PUSH
23711: LD_INT 81
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PPUSH
23718: CALL_OW 69
23722: PUSH
23723: FOR_IN
23724: IFFALSE 23796
// begin if not i in minersList then
23726: LD_VAR 0 1
23730: PUSH
23731: LD_EXP 109
23735: IN
23736: NOT
23737: IFFALSE 23794
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23739: LD_ADDR_EXP 109
23743: PUSH
23744: LD_EXP 109
23748: PPUSH
23749: LD_EXP 109
23753: PUSH
23754: LD_INT 1
23756: PLUS
23757: PPUSH
23758: LD_VAR 0 1
23762: PPUSH
23763: CALL_OW 1
23767: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23768: LD_ADDR_EXP 110
23772: PUSH
23773: LD_EXP 110
23777: PPUSH
23778: LD_EXP 110
23782: PUSH
23783: LD_INT 1
23785: PLUS
23786: PPUSH
23787: EMPTY
23788: PPUSH
23789: CALL_OW 1
23793: ST_TO_ADDR
// end end ;
23794: GO 23723
23796: POP
23797: POP
// end ;
23798: PPOPN 1
23800: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
23801: LD_EXP 108
23805: IFFALSE 23836
23807: PUSH
23808: LD_EXP 110
23812: PPUSH
23813: CALL 28912 0 1
23817: IFTRUE 23835
23819: PUSH
23820: LD_INT 34
23822: PUSH
23823: LD_INT 81
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PPUSH
23830: CALL_OW 69
23834: OR
23835: AND
23836: IFFALSE 24356
23838: GO 23840
23840: DISABLE
23841: LD_INT 0
23843: PPUSH
23844: PPUSH
23845: PPUSH
23846: PPUSH
// begin enable ;
23847: ENABLE
// for i := minerMinesList downto 1 do
23848: LD_ADDR_VAR 0 1
23852: PUSH
23853: DOUBLE
23854: LD_EXP 110
23858: INC
23859: ST_TO_ADDR
23860: LD_INT 1
23862: PUSH
23863: FOR_DOWNTO
23864: IFFALSE 24354
// begin side := GetSide ( minersList [ i ] ) ;
23866: LD_ADDR_VAR 0 3
23870: PUSH
23871: LD_EXP 109
23875: PUSH
23876: LD_VAR 0 1
23880: ARRAY
23881: PPUSH
23882: CALL_OW 255
23886: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
23887: LD_EXP 109
23891: PUSH
23892: LD_VAR 0 1
23896: ARRAY
23897: PPUSH
23898: CALL_OW 300
23902: IFFALSE 23923
23904: PUSH
23905: LD_VAR 0 3
23909: PUSH
23910: LD_OWVAR 2
23914: PUSH
23915: LD_INT 9
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: IN
23922: AND
23923: IFFALSE 23956
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
23925: LD_EXP 109
23929: PUSH
23930: LD_VAR 0 1
23934: ARRAY
23935: PPUSH
23936: LD_EXP 110
23940: PUSH
23941: LD_VAR 0 1
23945: ARRAY
23946: PPUSH
23947: CALL 28912 0 1
23951: PPUSH
23952: CALL_OW 505
// if not minerMinesList [ i ] then
23956: LD_EXP 110
23960: PUSH
23961: LD_VAR 0 1
23965: ARRAY
23966: NOT
23967: IFFALSE 23971
// continue ;
23969: GO 23863
// for j := minerMinesList [ i ] downto 1 do
23971: LD_ADDR_VAR 0 2
23975: PUSH
23976: DOUBLE
23977: LD_EXP 110
23981: PUSH
23982: LD_VAR 0 1
23986: ARRAY
23987: INC
23988: ST_TO_ADDR
23989: LD_INT 1
23991: PUSH
23992: FOR_DOWNTO
23993: IFFALSE 24350
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
23995: LD_EXP 109
23999: PUSH
24000: LD_VAR 0 1
24004: ARRAY
24005: PPUSH
24006: CALL_OW 301
24010: IFTRUE 24030
24012: PUSH
24013: LD_EXP 109
24017: PUSH
24018: LD_VAR 0 1
24022: ARRAY
24023: PPUSH
24024: CALL_OW 305
24028: NOT
24029: OR
24030: IFFALSE 24121
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24032: LD_EXP 110
24036: PUSH
24037: LD_VAR 0 1
24041: ARRAY
24042: PUSH
24043: LD_VAR 0 2
24047: ARRAY
24048: PUSH
24049: LD_INT 1
24051: ARRAY
24052: PPUSH
24053: LD_EXP 110
24057: PUSH
24058: LD_VAR 0 1
24062: ARRAY
24063: PUSH
24064: LD_VAR 0 2
24068: ARRAY
24069: PUSH
24070: LD_INT 2
24072: ARRAY
24073: PPUSH
24074: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24078: LD_ADDR_EXP 110
24082: PUSH
24083: LD_EXP 110
24087: PPUSH
24088: LD_VAR 0 1
24092: PPUSH
24093: LD_EXP 110
24097: PUSH
24098: LD_VAR 0 1
24102: ARRAY
24103: PPUSH
24104: LD_VAR 0 2
24108: PPUSH
24109: CALL_OW 3
24113: PPUSH
24114: CALL_OW 1
24118: ST_TO_ADDR
// continue ;
24119: GO 23992
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24121: LD_ADDR_VAR 0 4
24125: PUSH
24126: LD_EXP 110
24130: PUSH
24131: LD_VAR 0 1
24135: ARRAY
24136: PUSH
24137: LD_VAR 0 2
24141: ARRAY
24142: PUSH
24143: LD_INT 1
24145: ARRAY
24146: PPUSH
24147: LD_EXP 110
24151: PUSH
24152: LD_VAR 0 1
24156: ARRAY
24157: PUSH
24158: LD_VAR 0 2
24162: ARRAY
24163: PUSH
24164: LD_INT 2
24166: ARRAY
24167: PPUSH
24168: CALL_OW 428
24172: ST_TO_ADDR
// if not tmp then
24173: LD_VAR 0 4
24177: NOT
24178: IFFALSE 24182
// continue ;
24180: GO 23992
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24182: LD_VAR 0 4
24186: PUSH
24187: LD_INT 81
24189: PUSH
24190: LD_VAR 0 3
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PPUSH
24199: CALL_OW 69
24203: IN
24204: IFFALSE 24254
24206: PUSH
24207: LD_EXP 110
24211: PUSH
24212: LD_VAR 0 1
24216: ARRAY
24217: PUSH
24218: LD_VAR 0 2
24222: ARRAY
24223: PUSH
24224: LD_INT 1
24226: ARRAY
24227: PPUSH
24228: LD_EXP 110
24232: PUSH
24233: LD_VAR 0 1
24237: ARRAY
24238: PUSH
24239: LD_VAR 0 2
24243: ARRAY
24244: PUSH
24245: LD_INT 2
24247: ARRAY
24248: PPUSH
24249: CALL_OW 458
24253: AND
24254: IFFALSE 24348
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24256: LD_EXP 110
24260: PUSH
24261: LD_VAR 0 1
24265: ARRAY
24266: PUSH
24267: LD_VAR 0 2
24271: ARRAY
24272: PUSH
24273: LD_INT 1
24275: ARRAY
24276: PPUSH
24277: LD_EXP 110
24281: PUSH
24282: LD_VAR 0 1
24286: ARRAY
24287: PUSH
24288: LD_VAR 0 2
24292: ARRAY
24293: PUSH
24294: LD_INT 2
24296: ARRAY
24297: PPUSH
24298: LD_VAR 0 3
24302: PPUSH
24303: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24307: LD_ADDR_EXP 110
24311: PUSH
24312: LD_EXP 110
24316: PPUSH
24317: LD_VAR 0 1
24321: PPUSH
24322: LD_EXP 110
24326: PUSH
24327: LD_VAR 0 1
24331: ARRAY
24332: PPUSH
24333: LD_VAR 0 2
24337: PPUSH
24338: CALL_OW 3
24342: PPUSH
24343: CALL_OW 1
24347: ST_TO_ADDR
// end ; end ;
24348: GO 23992
24350: POP
24351: POP
// end ;
24352: GO 23863
24354: POP
24355: POP
// end ;
24356: PPOPN 4
24358: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
24359: LD_INT 0
24361: PPUSH
24362: PPUSH
24363: PPUSH
24364: PPUSH
// result := false ;
24365: LD_ADDR_VAR 0 4
24369: PUSH
24370: LD_INT 0
24372: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24373: LD_VAR 0 1
24377: PPUSH
24378: CALL_OW 264
24382: PUSH
24383: LD_INT 81
24385: EQUAL
24386: NOT
24387: IFFALSE 24391
// exit ;
24389: GO 24761
// side := GetSide ( unit ) ;
24391: LD_ADDR_VAR 0 6
24395: PUSH
24396: LD_VAR 0 1
24400: PPUSH
24401: CALL_OW 255
24405: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
24406: LD_ADDR_VAR 0 5
24410: PUSH
24411: LD_EXP 109
24415: PPUSH
24416: LD_VAR 0 1
24420: PPUSH
24421: CALL 31613 0 2
24425: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24426: LD_EXP 110
24430: PUSH
24431: LD_VAR 0 5
24435: ARRAY
24436: PUSH
24437: LD_EXP 111
24441: GREATEREQUAL
24442: IFFALSE 24446
// exit ;
24444: GO 24761
// ComMoveXY ( unit , x , y ) ;
24446: LD_VAR 0 1
24450: PPUSH
24451: LD_VAR 0 2
24455: PPUSH
24456: LD_VAR 0 3
24460: PPUSH
24461: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24465: LD_INT 35
24467: PPUSH
24468: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24472: LD_VAR 0 1
24476: PPUSH
24477: LD_VAR 0 2
24481: PPUSH
24482: LD_VAR 0 3
24486: PPUSH
24487: CALL 63669 0 3
24491: NOT
24492: IFFALSE 24505
24494: PUSH
24495: LD_VAR 0 1
24499: PPUSH
24500: CALL_OW 314
24504: AND
24505: IFFALSE 24509
// exit ;
24507: GO 24761
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24509: LD_VAR 0 2
24513: PPUSH
24514: LD_VAR 0 3
24518: PPUSH
24519: CALL_OW 428
24523: PUSH
24524: LD_VAR 0 1
24528: EQUAL
24529: IFFALSE 24543
24531: PUSH
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 314
24541: NOT
24542: AND
24543: IFFALSE 24465
// if MineAtPos ( x , y ) then
24545: LD_VAR 0 2
24549: PPUSH
24550: LD_VAR 0 3
24554: PPUSH
24555: CALL_OW 458
24559: IFFALSE 24563
// exit ;
24561: GO 24761
// if your_side = side then
24563: LD_OWVAR 2
24567: PUSH
24568: LD_VAR 0 6
24572: EQUAL
24573: IFFALSE 24592
// PlaySoundXY ( x , y , PlantMine ) ;
24575: LD_VAR 0 2
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: LD_STRING PlantMine
24587: PPUSH
24588: CALL_OW 366
// repeat wait ( 1 ) ;
24592: LD_INT 1
24594: PPUSH
24595: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
24599: LD_VAR 0 2
24603: PPUSH
24604: LD_VAR 0 3
24608: PPUSH
24609: LD_VAR 0 6
24613: PPUSH
24614: LD_INT 0
24616: PPUSH
24617: CALL_OW 454
24621: IFFALSE 24592
// if MineAtPos ( x , y ) then
24623: LD_VAR 0 2
24627: PPUSH
24628: LD_VAR 0 3
24632: PPUSH
24633: CALL_OW 458
24637: IFFALSE 24753
// begin for i in minerMinesList [ index ] do
24639: LD_ADDR_VAR 0 7
24643: PUSH
24644: LD_EXP 110
24648: PUSH
24649: LD_VAR 0 5
24653: ARRAY
24654: PUSH
24655: FOR_IN
24656: IFFALSE 24698
// if i [ 1 ] = x and i [ 2 ] = y then
24658: LD_VAR 0 7
24662: PUSH
24663: LD_INT 1
24665: ARRAY
24666: PUSH
24667: LD_VAR 0 2
24671: EQUAL
24672: IFFALSE 24690
24674: PUSH
24675: LD_VAR 0 7
24679: PUSH
24680: LD_INT 2
24682: ARRAY
24683: PUSH
24684: LD_VAR 0 3
24688: EQUAL
24689: AND
24690: IFFALSE 24696
// exit ;
24692: POP
24693: POP
24694: GO 24761
24696: GO 24655
24698: POP
24699: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24700: LD_ADDR_EXP 110
24704: PUSH
24705: LD_EXP 110
24709: PPUSH
24710: LD_VAR 0 5
24714: PUSH
24715: LD_EXP 110
24719: PUSH
24720: LD_VAR 0 5
24724: ARRAY
24725: PUSH
24726: LD_INT 1
24728: PLUS
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PPUSH
24734: LD_VAR 0 2
24738: PUSH
24739: LD_VAR 0 3
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PPUSH
24748: CALL 31830 0 3
24752: ST_TO_ADDR
// end ; result := true ;
24753: LD_ADDR_VAR 0 4
24757: PUSH
24758: LD_INT 1
24760: ST_TO_ADDR
// end ;
24761: LD_VAR 0 4
24765: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24766: LD_INT 0
24768: PPUSH
24769: PPUSH
24770: PPUSH
// if not unit in minersList then
24771: LD_VAR 0 1
24775: PUSH
24776: LD_EXP 109
24780: IN
24781: NOT
24782: IFFALSE 24786
// exit ;
24784: GO 24993
// index := GetElementIndex ( minersList , unit ) ;
24786: LD_ADDR_VAR 0 6
24790: PUSH
24791: LD_EXP 109
24795: PPUSH
24796: LD_VAR 0 1
24800: PPUSH
24801: CALL 31613 0 2
24805: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24806: LD_ADDR_VAR 0 5
24810: PUSH
24811: DOUBLE
24812: LD_EXP 110
24816: PUSH
24817: LD_VAR 0 6
24821: ARRAY
24822: INC
24823: ST_TO_ADDR
24824: LD_INT 1
24826: PUSH
24827: FOR_DOWNTO
24828: IFFALSE 24991
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24830: LD_EXP 110
24834: PUSH
24835: LD_VAR 0 6
24839: ARRAY
24840: PUSH
24841: LD_VAR 0 5
24845: ARRAY
24846: PUSH
24847: LD_INT 1
24849: ARRAY
24850: PPUSH
24851: LD_EXP 110
24855: PUSH
24856: LD_VAR 0 6
24860: ARRAY
24861: PUSH
24862: LD_VAR 0 5
24866: ARRAY
24867: PUSH
24868: LD_INT 2
24870: ARRAY
24871: PPUSH
24872: LD_VAR 0 2
24876: PPUSH
24877: LD_VAR 0 3
24881: PPUSH
24882: CALL_OW 298
24886: PUSH
24887: LD_INT 6
24889: LESS
24890: IFFALSE 24989
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24892: LD_EXP 110
24896: PUSH
24897: LD_VAR 0 6
24901: ARRAY
24902: PUSH
24903: LD_VAR 0 5
24907: ARRAY
24908: PUSH
24909: LD_INT 1
24911: ARRAY
24912: PPUSH
24913: LD_EXP 110
24917: PUSH
24918: LD_VAR 0 6
24922: ARRAY
24923: PUSH
24924: LD_VAR 0 5
24928: ARRAY
24929: PUSH
24930: LD_INT 2
24932: ARRAY
24933: PPUSH
24934: LD_VAR 0 1
24938: PPUSH
24939: CALL_OW 255
24943: PPUSH
24944: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24948: LD_ADDR_EXP 110
24952: PUSH
24953: LD_EXP 110
24957: PPUSH
24958: LD_VAR 0 6
24962: PPUSH
24963: LD_EXP 110
24967: PUSH
24968: LD_VAR 0 6
24972: ARRAY
24973: PPUSH
24974: LD_VAR 0 5
24978: PPUSH
24979: CALL_OW 3
24983: PPUSH
24984: CALL_OW 1
24988: ST_TO_ADDR
// end ; end ;
24989: GO 24827
24991: POP
24992: POP
// end ;
24993: LD_VAR 0 4
24997: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24998: LD_INT 0
25000: PPUSH
25001: PPUSH
25002: PPUSH
25003: PPUSH
25004: PPUSH
25005: PPUSH
25006: PPUSH
25007: PPUSH
25008: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25009: LD_VAR 0 1
25013: PPUSH
25014: CALL_OW 264
25018: PUSH
25019: LD_INT 81
25021: EQUAL
25022: NOT
25023: IFTRUE 25038
25025: PUSH
25026: LD_VAR 0 1
25030: PUSH
25031: LD_EXP 109
25035: IN
25036: NOT
25037: OR
25038: IFFALSE 25042
// exit ;
25040: GO 25368
// index := GetElementIndex ( minersList , unit ) ;
25042: LD_ADDR_VAR 0 6
25046: PUSH
25047: LD_EXP 109
25051: PPUSH
25052: LD_VAR 0 1
25056: PPUSH
25057: CALL 31613 0 2
25061: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25062: LD_ADDR_VAR 0 8
25066: PUSH
25067: LD_EXP 111
25071: PUSH
25072: LD_EXP 110
25076: PUSH
25077: LD_VAR 0 6
25081: ARRAY
25082: MINUS
25083: ST_TO_ADDR
// if not minesFreeAmount then
25084: LD_VAR 0 8
25088: NOT
25089: IFFALSE 25093
// exit ;
25091: GO 25368
// tmp := [ ] ;
25093: LD_ADDR_VAR 0 7
25097: PUSH
25098: EMPTY
25099: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25100: LD_ADDR_VAR 0 5
25104: PUSH
25105: DOUBLE
25106: LD_INT 1
25108: DEC
25109: ST_TO_ADDR
25110: LD_VAR 0 8
25114: PUSH
25115: FOR_TO
25116: IFFALSE 25315
// begin _d := rand ( 0 , 5 ) ;
25118: LD_ADDR_VAR 0 11
25122: PUSH
25123: LD_INT 0
25125: PPUSH
25126: LD_INT 5
25128: PPUSH
25129: CALL_OW 12
25133: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25134: LD_ADDR_VAR 0 12
25138: PUSH
25139: LD_INT 2
25141: PPUSH
25142: LD_INT 6
25144: PPUSH
25145: CALL_OW 12
25149: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25150: LD_ADDR_VAR 0 9
25154: PUSH
25155: LD_VAR 0 2
25159: PPUSH
25160: LD_VAR 0 11
25164: PPUSH
25165: LD_VAR 0 12
25169: PPUSH
25170: CALL_OW 272
25174: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25175: LD_ADDR_VAR 0 10
25179: PUSH
25180: LD_VAR 0 3
25184: PPUSH
25185: LD_VAR 0 11
25189: PPUSH
25190: LD_VAR 0 12
25194: PPUSH
25195: CALL_OW 273
25199: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25200: LD_VAR 0 9
25204: PPUSH
25205: LD_VAR 0 10
25209: PPUSH
25210: CALL_OW 488
25214: IFFALSE 25238
25216: PUSH
25217: LD_VAR 0 9
25221: PUSH
25222: LD_VAR 0 10
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_VAR 0 7
25235: IN
25236: NOT
25237: AND
25238: IFFALSE 25257
25240: PUSH
25241: LD_VAR 0 9
25245: PPUSH
25246: LD_VAR 0 10
25250: PPUSH
25251: CALL_OW 458
25255: NOT
25256: AND
25257: IFFALSE 25299
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25259: LD_ADDR_VAR 0 7
25263: PUSH
25264: LD_VAR 0 7
25268: PPUSH
25269: LD_VAR 0 7
25273: PUSH
25274: LD_INT 1
25276: PLUS
25277: PPUSH
25278: LD_VAR 0 9
25282: PUSH
25283: LD_VAR 0 10
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 1
25296: ST_TO_ADDR
25297: GO 25313
// i := i - 1 ;
25299: LD_ADDR_VAR 0 5
25303: PUSH
25304: LD_VAR 0 5
25308: PUSH
25309: LD_INT 1
25311: MINUS
25312: ST_TO_ADDR
// end ;
25313: GO 25115
25315: POP
25316: POP
// for i in tmp do
25317: LD_ADDR_VAR 0 5
25321: PUSH
25322: LD_VAR 0 7
25326: PUSH
25327: FOR_IN
25328: IFFALSE 25366
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25330: LD_VAR 0 1
25334: PPUSH
25335: LD_VAR 0 5
25339: PUSH
25340: LD_INT 1
25342: ARRAY
25343: PPUSH
25344: LD_VAR 0 5
25348: PUSH
25349: LD_INT 2
25351: ARRAY
25352: PPUSH
25353: CALL 24359 0 3
25357: NOT
25358: IFFALSE 25364
// exit ;
25360: POP
25361: POP
25362: GO 25368
25364: GO 25327
25366: POP
25367: POP
// end ;
25368: LD_VAR 0 4
25372: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
// if GetClass ( unit ) <> class_sniper then
25384: LD_VAR 0 1
25388: PPUSH
25389: CALL_OW 257
25393: PUSH
25394: LD_INT 5
25396: NONEQUAL
25397: IFFALSE 25401
// exit ;
25399: GO 25871
// dist := 8 ;
25401: LD_ADDR_VAR 0 5
25405: PUSH
25406: LD_INT 8
25408: ST_TO_ADDR
// viewRange := 12 ;
25409: LD_ADDR_VAR 0 8
25413: PUSH
25414: LD_INT 12
25416: ST_TO_ADDR
// side := GetSide ( unit ) ;
25417: LD_ADDR_VAR 0 6
25421: PUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 255
25431: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25432: LD_INT 61
25434: PPUSH
25435: LD_VAR 0 6
25439: PPUSH
25440: CALL_OW 321
25444: PUSH
25445: LD_INT 2
25447: EQUAL
25448: IFFALSE 25458
// viewRange := 16 ;
25450: LD_ADDR_VAR 0 8
25454: PUSH
25455: LD_INT 16
25457: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25458: LD_VAR 0 1
25462: PPUSH
25463: LD_VAR 0 2
25467: PPUSH
25468: LD_VAR 0 3
25472: PPUSH
25473: CALL_OW 297
25477: PUSH
25478: LD_VAR 0 5
25482: GREATER
25483: IFFALSE 25562
// begin ComMoveXY ( unit , x , y ) ;
25485: LD_VAR 0 1
25489: PPUSH
25490: LD_VAR 0 2
25494: PPUSH
25495: LD_VAR 0 3
25499: PPUSH
25500: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25504: LD_INT 35
25506: PPUSH
25507: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25511: LD_VAR 0 1
25515: PPUSH
25516: LD_VAR 0 2
25520: PPUSH
25521: LD_VAR 0 3
25525: PPUSH
25526: CALL 63669 0 3
25530: NOT
25531: IFFALSE 25535
// exit ;
25533: GO 25871
// until GetDistUnitXY ( unit , x , y ) < dist ;
25535: LD_VAR 0 1
25539: PPUSH
25540: LD_VAR 0 2
25544: PPUSH
25545: LD_VAR 0 3
25549: PPUSH
25550: CALL_OW 297
25554: PUSH
25555: LD_VAR 0 5
25559: LESS
25560: IFFALSE 25504
// end ; ComTurnXY ( unit , x , y ) ;
25562: LD_VAR 0 1
25566: PPUSH
25567: LD_VAR 0 2
25571: PPUSH
25572: LD_VAR 0 3
25576: PPUSH
25577: CALL_OW 118
// repeat if Multiplayer then
25581: LD_OWVAR 4
25585: IFFALSE 25596
// wait ( 35 ) else
25587: LD_INT 35
25589: PPUSH
25590: CALL_OW 67
25594: GO 25603
// wait ( 5 ) ;
25596: LD_INT 5
25598: PPUSH
25599: CALL_OW 67
// _d := GetDir ( unit ) ;
25603: LD_ADDR_VAR 0 11
25607: PUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 254
25617: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
25618: LD_ADDR_VAR 0 7
25622: PUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 250
25632: PPUSH
25633: LD_VAR 0 1
25637: PPUSH
25638: CALL_OW 251
25642: PPUSH
25643: LD_VAR 0 2
25647: PPUSH
25648: LD_VAR 0 3
25652: PPUSH
25653: CALL 66305 0 4
25657: ST_TO_ADDR
// until dir = _d ;
25658: LD_VAR 0 7
25662: PUSH
25663: LD_VAR 0 11
25667: EQUAL
25668: IFFALSE 25581
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
25670: LD_ADDR_VAR 0 9
25674: PUSH
25675: LD_VAR 0 1
25679: PPUSH
25680: CALL_OW 250
25684: PPUSH
25685: LD_VAR 0 7
25689: PPUSH
25690: LD_VAR 0 5
25694: PPUSH
25695: CALL_OW 272
25699: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
25700: LD_ADDR_VAR 0 10
25704: PUSH
25705: LD_VAR 0 1
25709: PPUSH
25710: CALL_OW 251
25714: PPUSH
25715: LD_VAR 0 7
25719: PPUSH
25720: LD_VAR 0 5
25724: PPUSH
25725: CALL_OW 273
25729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25730: LD_VAR 0 9
25734: PPUSH
25735: LD_VAR 0 10
25739: PPUSH
25740: CALL_OW 488
25744: NOT
25745: IFFALSE 25749
// exit ;
25747: GO 25871
// ComAnimCustom ( unit , 1 ) ;
25749: LD_VAR 0 1
25753: PPUSH
25754: LD_INT 1
25756: PPUSH
25757: CALL_OW 592
// p := 0 ;
25761: LD_ADDR_VAR 0 12
25765: PUSH
25766: LD_INT 0
25768: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25769: LD_VAR 0 9
25773: PPUSH
25774: LD_VAR 0 10
25778: PPUSH
25779: LD_VAR 0 6
25783: PPUSH
25784: LD_VAR 0 8
25788: PPUSH
25789: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
25793: LD_INT 35
25795: PPUSH
25796: CALL_OW 67
// p := Inc ( p ) ;
25800: LD_ADDR_VAR 0 12
25804: PUSH
25805: LD_VAR 0 12
25809: PPUSH
25810: CALL 66261 0 1
25814: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
25815: LD_VAR 0 12
25819: PUSH
25820: LD_INT 3
25822: EQUAL
25823: IFTRUE 25837
25825: PUSH
25826: LD_VAR 0 1
25830: PPUSH
25831: CALL_OW 302
25835: NOT
25836: OR
25837: IFTRUE 25850
25839: PUSH
25840: LD_VAR 0 1
25844: PPUSH
25845: CALL_OW 301
25849: OR
25850: IFFALSE 25793
// RemoveSeeing ( _x , _y , side ) ;
25852: LD_VAR 0 9
25856: PPUSH
25857: LD_VAR 0 10
25861: PPUSH
25862: LD_VAR 0 6
25866: PPUSH
25867: CALL_OW 331
// end ;
25871: LD_VAR 0 4
25875: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
25876: LD_INT 0
25878: PPUSH
25879: PPUSH
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
25885: PPUSH
25886: PPUSH
25887: PPUSH
25888: PPUSH
// if not unit then
25889: LD_VAR 0 1
25893: NOT
25894: IFFALSE 25898
// exit ;
25896: GO 26169
// side := GetSide ( unit ) ;
25898: LD_ADDR_VAR 0 3
25902: PUSH
25903: LD_VAR 0 1
25907: PPUSH
25908: CALL_OW 255
25912: ST_TO_ADDR
// x := GetX ( unit ) ;
25913: LD_ADDR_VAR 0 5
25917: PUSH
25918: LD_VAR 0 1
25922: PPUSH
25923: CALL_OW 250
25927: ST_TO_ADDR
// y := GetY ( unit ) ;
25928: LD_ADDR_VAR 0 6
25932: PUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL_OW 251
25942: ST_TO_ADDR
// r := 8 ;
25943: LD_ADDR_VAR 0 4
25947: PUSH
25948: LD_INT 8
25950: ST_TO_ADDR
// if x - r < 0 then
25951: LD_VAR 0 5
25955: PUSH
25956: LD_VAR 0 4
25960: MINUS
25961: PUSH
25962: LD_INT 0
25964: LESS
25965: IFFALSE 25977
// min_x := 0 else
25967: LD_ADDR_VAR 0 7
25971: PUSH
25972: LD_INT 0
25974: ST_TO_ADDR
25975: GO 25993
// min_x := x - r ;
25977: LD_ADDR_VAR 0 7
25981: PUSH
25982: LD_VAR 0 5
25986: PUSH
25987: LD_VAR 0 4
25991: MINUS
25992: ST_TO_ADDR
// if y - r < 0 then
25993: LD_VAR 0 6
25997: PUSH
25998: LD_VAR 0 4
26002: MINUS
26003: PUSH
26004: LD_INT 0
26006: LESS
26007: IFFALSE 26019
// min_y := 0 else
26009: LD_ADDR_VAR 0 8
26013: PUSH
26014: LD_INT 0
26016: ST_TO_ADDR
26017: GO 26035
// min_y := y - r ;
26019: LD_ADDR_VAR 0 8
26023: PUSH
26024: LD_VAR 0 6
26028: PUSH
26029: LD_VAR 0 4
26033: MINUS
26034: ST_TO_ADDR
// max_x := x + r ;
26035: LD_ADDR_VAR 0 9
26039: PUSH
26040: LD_VAR 0 5
26044: PUSH
26045: LD_VAR 0 4
26049: PLUS
26050: ST_TO_ADDR
// max_y := y + r ;
26051: LD_ADDR_VAR 0 10
26055: PUSH
26056: LD_VAR 0 6
26060: PUSH
26061: LD_VAR 0 4
26065: PLUS
26066: ST_TO_ADDR
// for _x = min_x to max_x do
26067: LD_ADDR_VAR 0 11
26071: PUSH
26072: DOUBLE
26073: LD_VAR 0 7
26077: DEC
26078: ST_TO_ADDR
26079: LD_VAR 0 9
26083: PUSH
26084: FOR_TO
26085: IFFALSE 26167
// for _y = min_y to max_y do
26087: LD_ADDR_VAR 0 12
26091: PUSH
26092: DOUBLE
26093: LD_VAR 0 8
26097: DEC
26098: ST_TO_ADDR
26099: LD_VAR 0 10
26103: PUSH
26104: FOR_TO
26105: IFFALSE 26163
// begin if not ValidHex ( _x , _y ) then
26107: LD_VAR 0 11
26111: PPUSH
26112: LD_VAR 0 12
26116: PPUSH
26117: CALL_OW 488
26121: NOT
26122: IFFALSE 26126
// continue ;
26124: GO 26104
// if MineAtPos ( _x , _y ) then
26126: LD_VAR 0 11
26130: PPUSH
26131: LD_VAR 0 12
26135: PPUSH
26136: CALL_OW 458
26140: IFFALSE 26161
// ViewMineAtPos ( _x , _y , side ) ;
26142: LD_VAR 0 11
26146: PPUSH
26147: LD_VAR 0 12
26151: PPUSH
26152: LD_VAR 0 3
26156: PPUSH
26157: CALL_OW 457
// end ;
26161: GO 26104
26163: POP
26164: POP
26165: GO 26084
26167: POP
26168: POP
// end ;
26169: LD_VAR 0 2
26173: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
26174: LD_INT 0
26176: PPUSH
26177: PPUSH
26178: PPUSH
26179: PPUSH
26180: PPUSH
26181: PPUSH
26182: PPUSH
// if not units then
26183: LD_VAR 0 1
26187: NOT
26188: IFFALSE 26192
// exit ;
26190: GO 26656
// scaners := [ ] ;
26192: LD_ADDR_VAR 0 6
26196: PUSH
26197: EMPTY
26198: ST_TO_ADDR
// for i in units do
26199: LD_ADDR_VAR 0 3
26203: PUSH
26204: LD_VAR 0 1
26208: PUSH
26209: FOR_IN
26210: IFFALSE 26367
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
26212: LD_VAR 0 3
26216: PPUSH
26217: CALL_OW 264
26221: PUSH
26222: LD_INT 11
26224: NONEQUAL
26225: IFTRUE 26239
26227: PUSH
26228: LD_VAR 0 3
26232: PPUSH
26233: CALL_OW 302
26237: NOT
26238: OR
26239: IFTRUE 26256
26241: PUSH
26242: LD_VAR 0 3
26246: PPUSH
26247: CALL_OW 110
26251: PUSH
26252: LD_INT 502
26254: EQUAL
26255: OR
26256: IFFALSE 26260
// continue ;
26258: GO 26209
// ComStop ( i ) ;
26260: LD_VAR 0 3
26264: PPUSH
26265: CALL_OW 141
// x := GetX ( i ) ;
26269: LD_ADDR_VAR 0 4
26273: PUSH
26274: LD_VAR 0 3
26278: PPUSH
26279: CALL_OW 250
26283: ST_TO_ADDR
// y := GetY ( i ) ;
26284: LD_ADDR_VAR 0 5
26288: PUSH
26289: LD_VAR 0 3
26293: PPUSH
26294: CALL_OW 251
26298: ST_TO_ADDR
// if GetSide ( i ) = your_side then
26299: LD_VAR 0 3
26303: PPUSH
26304: CALL_OW 255
26308: PUSH
26309: LD_OWVAR 2
26313: EQUAL
26314: IFFALSE 26333
// PlaySoundXY ( x , y , mineDetector ) ;
26316: LD_VAR 0 4
26320: PPUSH
26321: LD_VAR 0 5
26325: PPUSH
26326: LD_STRING mineDetector
26328: PPUSH
26329: CALL_OW 366
// scaners := Join ( scaners , i ) ;
26333: LD_ADDR_VAR 0 6
26337: PUSH
26338: LD_VAR 0 6
26342: PPUSH
26343: LD_VAR 0 3
26347: PPUSH
26348: CALL 64888 0 2
26352: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
26353: LD_VAR 0 3
26357: PPUSH
26358: LD_INT 502
26360: PPUSH
26361: CALL_OW 109
// end ;
26365: GO 26209
26367: POP
26368: POP
// if not scaners then
26369: LD_VAR 0 6
26373: NOT
26374: IFFALSE 26378
// exit ;
26376: GO 26656
// wait ( 3 ) ;
26378: LD_INT 3
26380: PPUSH
26381: CALL_OW 67
// timer := 6 ;
26385: LD_ADDR_VAR 0 7
26389: PUSH
26390: LD_INT 6
26392: ST_TO_ADDR
// repeat for i in scaners do
26393: LD_ADDR_VAR 0 3
26397: PUSH
26398: LD_VAR 0 6
26402: PUSH
26403: FOR_IN
26404: IFFALSE 26554
// begin side := GetSide ( i ) ;
26406: LD_ADDR_VAR 0 8
26410: PUSH
26411: LD_VAR 0 3
26415: PPUSH
26416: CALL_OW 255
26420: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
26421: LD_VAR 0 3
26425: PPUSH
26426: CALL_OW 302
26430: NOT
26431: IFTRUE 26444
26433: PUSH
26434: LD_VAR 0 3
26438: PPUSH
26439: CALL_OW 314
26443: OR
26444: IFTRUE 26475
26446: PUSH
26447: LD_VAR 0 3
26451: PPUSH
26452: CALL_OW 263
26456: PUSH
26457: LD_INT 1
26459: EQUAL
26460: IFFALSE 26474
26462: PUSH
26463: LD_VAR 0 3
26467: PPUSH
26468: CALL_OW 311
26472: NOT
26473: AND
26474: OR
26475: IFFALSE 26519
// begin SetUnitDisplayNumber ( i , 0 ) ;
26477: LD_VAR 0 3
26481: PPUSH
26482: LD_INT 0
26484: PPUSH
26485: CALL_OW 505
// SetTag ( i , 0 ) ;
26489: LD_VAR 0 3
26493: PPUSH
26494: LD_INT 0
26496: PPUSH
26497: CALL_OW 109
// scaners := scaners diff i ;
26501: LD_ADDR_VAR 0 6
26505: PUSH
26506: LD_VAR 0 6
26510: PUSH
26511: LD_VAR 0 3
26515: DIFF
26516: ST_TO_ADDR
// continue ;
26517: GO 26403
// end ; if side in [ your_side , 9 ] then
26519: LD_VAR 0 8
26523: PUSH
26524: LD_OWVAR 2
26528: PUSH
26529: LD_INT 9
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: IN
26536: IFFALSE 26552
// SetUnitDisplayNumber ( i , timer ) ;
26538: LD_VAR 0 3
26542: PPUSH
26543: LD_VAR 0 7
26547: PPUSH
26548: CALL_OW 505
// end ;
26552: GO 26403
26554: POP
26555: POP
// if not scaners then
26556: LD_VAR 0 6
26560: NOT
26561: IFFALSE 26565
// exit ;
26563: GO 26656
// timer := Dec ( timer ) ;
26565: LD_ADDR_VAR 0 7
26569: PUSH
26570: LD_VAR 0 7
26574: PPUSH
26575: CALL 66283 0 1
26579: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26580: LD_INT 35
26582: PPUSH
26583: CALL_OW 67
// until timer = 0 ;
26587: LD_VAR 0 7
26591: PUSH
26592: LD_INT 0
26594: EQUAL
26595: IFFALSE 26393
// if not scaners then
26597: LD_VAR 0 6
26601: NOT
26602: IFFALSE 26606
// exit ;
26604: GO 26656
// for i in scaners do
26606: LD_ADDR_VAR 0 3
26610: PUSH
26611: LD_VAR 0 6
26615: PUSH
26616: FOR_IN
26617: IFFALSE 26654
// begin SetUnitDisplayNumber ( i , 0 ) ;
26619: LD_VAR 0 3
26623: PPUSH
26624: LD_INT 0
26626: PPUSH
26627: CALL_OW 505
// SetTag ( i , 0 ) ;
26631: LD_VAR 0 3
26635: PPUSH
26636: LD_INT 0
26638: PPUSH
26639: CALL_OW 109
// RevealDetectorMine ( i ) ;
26643: LD_VAR 0 3
26647: PPUSH
26648: CALL 25876 0 1
// end ;
26652: GO 26616
26654: POP
26655: POP
// end ;
26656: LD_VAR 0 2
26660: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
26661: LD_INT 0
26663: PPUSH
// if p1 = mine_detector_mode then
26664: LD_VAR 0 2
26668: PUSH
26669: LD_INT 103
26671: EQUAL
26672: IFFALSE 26683
// DetectMine ( units ) ;
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL 26174 0 1
// end ; end_of_file
26683: LD_VAR 0 7
26687: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26688: LD_INT 0
26690: PPUSH
26691: PPUSH
// if exist_mode then
26692: LD_VAR 0 2
26696: IFFALSE 26742
// begin unit := CreateCharacter ( prefix & ident ) ;
26698: LD_ADDR_VAR 0 5
26702: PUSH
26703: LD_VAR 0 3
26707: PUSH
26708: LD_VAR 0 1
26712: STR
26713: PPUSH
26714: CALL_OW 34
26718: ST_TO_ADDR
// if unit then
26719: LD_VAR 0 5
26723: IFFALSE 26740
// DeleteCharacters ( prefix & ident ) ;
26725: LD_VAR 0 3
26729: PUSH
26730: LD_VAR 0 1
26734: STR
26735: PPUSH
26736: CALL_OW 40
// end else
26740: GO 26757
// unit := NewCharacter ( ident ) ;
26742: LD_ADDR_VAR 0 5
26746: PUSH
26747: LD_VAR 0 1
26751: PPUSH
26752: CALL_OW 25
26756: ST_TO_ADDR
// result := unit ;
26757: LD_ADDR_VAR 0 4
26761: PUSH
26762: LD_VAR 0 5
26766: ST_TO_ADDR
// end ;
26767: LD_VAR 0 4
26771: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
26772: LD_INT 0
26774: PPUSH
26775: PPUSH
// if exist_mode then
26776: LD_VAR 0 2
26780: IFFALSE 26805
// unit := CreateCharacter ( prefix & ident ) else
26782: LD_ADDR_VAR 0 5
26786: PUSH
26787: LD_VAR 0 3
26791: PUSH
26792: LD_VAR 0 1
26796: STR
26797: PPUSH
26798: CALL_OW 34
26802: ST_TO_ADDR
26803: GO 26820
// unit := NewCharacter ( ident ) ;
26805: LD_ADDR_VAR 0 5
26809: PUSH
26810: LD_VAR 0 1
26814: PPUSH
26815: CALL_OW 25
26819: ST_TO_ADDR
// result := unit ;
26820: LD_ADDR_VAR 0 4
26824: PUSH
26825: LD_VAR 0 5
26829: ST_TO_ADDR
// end ;
26830: LD_VAR 0 4
26834: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26835: LD_INT 0
26837: PPUSH
26838: PPUSH
// if not side or not nation then
26839: LD_VAR 0 1
26843: NOT
26844: IFTRUE 26853
26846: PUSH
26847: LD_VAR 0 2
26851: NOT
26852: OR
26853: IFFALSE 26857
// exit ;
26855: GO 27651
// case nation of nation_american :
26857: LD_VAR 0 2
26861: PUSH
26862: LD_INT 1
26864: DOUBLE
26865: EQUAL
26866: IFTRUE 26870
26868: GO 27092
26870: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
26871: LD_ADDR_VAR 0 4
26875: PUSH
26876: LD_INT 35
26878: PUSH
26879: LD_INT 45
26881: PUSH
26882: LD_INT 46
26884: PUSH
26885: LD_INT 47
26887: PUSH
26888: LD_INT 82
26890: PUSH
26891: LD_INT 83
26893: PUSH
26894: LD_INT 84
26896: PUSH
26897: LD_INT 85
26899: PUSH
26900: LD_INT 86
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: LD_INT 6
26911: PUSH
26912: LD_INT 15
26914: PUSH
26915: LD_INT 16
26917: PUSH
26918: LD_INT 7
26920: PUSH
26921: LD_INT 12
26923: PUSH
26924: LD_INT 13
26926: PUSH
26927: LD_INT 10
26929: PUSH
26930: LD_INT 14
26932: PUSH
26933: LD_INT 20
26935: PUSH
26936: LD_INT 21
26938: PUSH
26939: LD_INT 22
26941: PUSH
26942: LD_INT 25
26944: PUSH
26945: LD_INT 32
26947: PUSH
26948: LD_INT 27
26950: PUSH
26951: LD_INT 36
26953: PUSH
26954: LD_INT 69
26956: PUSH
26957: LD_INT 39
26959: PUSH
26960: LD_INT 34
26962: PUSH
26963: LD_INT 40
26965: PUSH
26966: LD_INT 48
26968: PUSH
26969: LD_INT 49
26971: PUSH
26972: LD_INT 50
26974: PUSH
26975: LD_INT 51
26977: PUSH
26978: LD_INT 52
26980: PUSH
26981: LD_INT 53
26983: PUSH
26984: LD_INT 54
26986: PUSH
26987: LD_INT 55
26989: PUSH
26990: LD_INT 56
26992: PUSH
26993: LD_INT 57
26995: PUSH
26996: LD_INT 58
26998: PUSH
26999: LD_INT 59
27001: PUSH
27002: LD_INT 60
27004: PUSH
27005: LD_INT 61
27007: PUSH
27008: LD_INT 62
27010: PUSH
27011: LD_INT 80
27013: PUSH
27014: LD_INT 82
27016: PUSH
27017: LD_INT 83
27019: PUSH
27020: LD_INT 84
27022: PUSH
27023: LD_INT 85
27025: PUSH
27026: LD_INT 86
27028: PUSH
27029: LD_INT 90
27031: PUSH
27032: LD_INT 93
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: ST_TO_ADDR
27090: GO 27573
27092: LD_INT 2
27094: DOUBLE
27095: EQUAL
27096: IFTRUE 27100
27098: GO 27334
27100: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
27101: LD_ADDR_VAR 0 4
27105: PUSH
27106: LD_INT 35
27108: PUSH
27109: LD_INT 45
27111: PUSH
27112: LD_INT 46
27114: PUSH
27115: LD_INT 47
27117: PUSH
27118: LD_INT 82
27120: PUSH
27121: LD_INT 83
27123: PUSH
27124: LD_INT 84
27126: PUSH
27127: LD_INT 85
27129: PUSH
27130: LD_INT 87
27132: PUSH
27133: LD_INT 70
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: LD_INT 11
27141: PUSH
27142: LD_INT 3
27144: PUSH
27145: LD_INT 4
27147: PUSH
27148: LD_INT 5
27150: PUSH
27151: LD_INT 6
27153: PUSH
27154: LD_INT 15
27156: PUSH
27157: LD_INT 18
27159: PUSH
27160: LD_INT 7
27162: PUSH
27163: LD_INT 17
27165: PUSH
27166: LD_INT 8
27168: PUSH
27169: LD_INT 20
27171: PUSH
27172: LD_INT 21
27174: PUSH
27175: LD_INT 22
27177: PUSH
27178: LD_INT 72
27180: PUSH
27181: LD_INT 26
27183: PUSH
27184: LD_INT 69
27186: PUSH
27187: LD_INT 39
27189: PUSH
27190: LD_INT 40
27192: PUSH
27193: LD_INT 41
27195: PUSH
27196: LD_INT 42
27198: PUSH
27199: LD_INT 43
27201: PUSH
27202: LD_INT 48
27204: PUSH
27205: LD_INT 49
27207: PUSH
27208: LD_INT 50
27210: PUSH
27211: LD_INT 51
27213: PUSH
27214: LD_INT 52
27216: PUSH
27217: LD_INT 53
27219: PUSH
27220: LD_INT 54
27222: PUSH
27223: LD_INT 55
27225: PUSH
27226: LD_INT 56
27228: PUSH
27229: LD_INT 60
27231: PUSH
27232: LD_INT 61
27234: PUSH
27235: LD_INT 62
27237: PUSH
27238: LD_INT 66
27240: PUSH
27241: LD_INT 67
27243: PUSH
27244: LD_INT 68
27246: PUSH
27247: LD_INT 81
27249: PUSH
27250: LD_INT 82
27252: PUSH
27253: LD_INT 83
27255: PUSH
27256: LD_INT 84
27258: PUSH
27259: LD_INT 85
27261: PUSH
27262: LD_INT 87
27264: PUSH
27265: LD_INT 88
27267: PUSH
27268: LD_INT 92
27270: PUSH
27271: LD_INT 94
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: ST_TO_ADDR
27332: GO 27573
27334: LD_INT 3
27336: DOUBLE
27337: EQUAL
27338: IFTRUE 27342
27340: GO 27572
27342: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
27343: LD_ADDR_VAR 0 4
27347: PUSH
27348: LD_INT 46
27350: PUSH
27351: LD_INT 47
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: LD_INT 82
27362: PUSH
27363: LD_INT 83
27365: PUSH
27366: LD_INT 84
27368: PUSH
27369: LD_INT 85
27371: PUSH
27372: LD_INT 86
27374: PUSH
27375: LD_INT 11
27377: PUSH
27378: LD_INT 9
27380: PUSH
27381: LD_INT 20
27383: PUSH
27384: LD_INT 19
27386: PUSH
27387: LD_INT 21
27389: PUSH
27390: LD_INT 24
27392: PUSH
27393: LD_INT 22
27395: PUSH
27396: LD_INT 25
27398: PUSH
27399: LD_INT 28
27401: PUSH
27402: LD_INT 29
27404: PUSH
27405: LD_INT 30
27407: PUSH
27408: LD_INT 31
27410: PUSH
27411: LD_INT 37
27413: PUSH
27414: LD_INT 38
27416: PUSH
27417: LD_INT 32
27419: PUSH
27420: LD_INT 27
27422: PUSH
27423: LD_INT 33
27425: PUSH
27426: LD_INT 69
27428: PUSH
27429: LD_INT 39
27431: PUSH
27432: LD_INT 34
27434: PUSH
27435: LD_INT 40
27437: PUSH
27438: LD_INT 71
27440: PUSH
27441: LD_INT 23
27443: PUSH
27444: LD_INT 44
27446: PUSH
27447: LD_INT 48
27449: PUSH
27450: LD_INT 49
27452: PUSH
27453: LD_INT 50
27455: PUSH
27456: LD_INT 51
27458: PUSH
27459: LD_INT 52
27461: PUSH
27462: LD_INT 53
27464: PUSH
27465: LD_INT 54
27467: PUSH
27468: LD_INT 55
27470: PUSH
27471: LD_INT 56
27473: PUSH
27474: LD_INT 57
27476: PUSH
27477: LD_INT 58
27479: PUSH
27480: LD_INT 59
27482: PUSH
27483: LD_INT 63
27485: PUSH
27486: LD_INT 64
27488: PUSH
27489: LD_INT 65
27491: PUSH
27492: LD_INT 82
27494: PUSH
27495: LD_INT 83
27497: PUSH
27498: LD_INT 84
27500: PUSH
27501: LD_INT 85
27503: PUSH
27504: LD_INT 86
27506: PUSH
27507: LD_INT 89
27509: PUSH
27510: LD_INT 91
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
27570: GO 27573
27572: POP
// if state > - 1 and state < 3 then
27573: LD_VAR 0 3
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: GREATER
27582: IFFALSE 27594
27584: PUSH
27585: LD_VAR 0 3
27589: PUSH
27590: LD_INT 3
27592: LESS
27593: AND
27594: IFFALSE 27651
// for i in result do
27596: LD_ADDR_VAR 0 5
27600: PUSH
27601: LD_VAR 0 4
27605: PUSH
27606: FOR_IN
27607: IFFALSE 27649
// if GetTech ( i , side ) <> state then
27609: LD_VAR 0 5
27613: PPUSH
27614: LD_VAR 0 1
27618: PPUSH
27619: CALL_OW 321
27623: PUSH
27624: LD_VAR 0 3
27628: NONEQUAL
27629: IFFALSE 27647
// result := result diff i ;
27631: LD_ADDR_VAR 0 4
27635: PUSH
27636: LD_VAR 0 4
27640: PUSH
27641: LD_VAR 0 5
27645: DIFF
27646: ST_TO_ADDR
27647: GO 27606
27649: POP
27650: POP
// end ;
27651: LD_VAR 0 4
27655: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27656: LD_INT 0
27658: PPUSH
27659: PPUSH
27660: PPUSH
// result := true ;
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_INT 1
27668: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27669: LD_ADDR_VAR 0 5
27673: PUSH
27674: LD_VAR 0 2
27678: PPUSH
27679: CALL_OW 480
27683: ST_TO_ADDR
// if not tmp then
27684: LD_VAR 0 5
27688: NOT
27689: IFFALSE 27693
// exit ;
27691: GO 27742
// for i in tmp do
27693: LD_ADDR_VAR 0 4
27697: PUSH
27698: LD_VAR 0 5
27702: PUSH
27703: FOR_IN
27704: IFFALSE 27740
// if GetTech ( i , side ) <> state_researched then
27706: LD_VAR 0 4
27710: PPUSH
27711: LD_VAR 0 1
27715: PPUSH
27716: CALL_OW 321
27720: PUSH
27721: LD_INT 2
27723: NONEQUAL
27724: IFFALSE 27738
// begin result := false ;
27726: LD_ADDR_VAR 0 3
27730: PUSH
27731: LD_INT 0
27733: ST_TO_ADDR
// exit ;
27734: POP
27735: POP
27736: GO 27742
// end ;
27738: GO 27703
27740: POP
27741: POP
// end ;
27742: LD_VAR 0 3
27746: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
27751: PPUSH
27752: PPUSH
27753: PPUSH
27754: PPUSH
27755: PPUSH
27756: PPUSH
27757: PPUSH
27758: PPUSH
27759: PPUSH
27760: PPUSH
27761: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27762: LD_VAR 0 1
27766: NOT
27767: IFTRUE 27784
27769: PUSH
27770: LD_VAR 0 1
27774: PPUSH
27775: CALL_OW 257
27779: PUSH
27780: LD_INT 9
27782: NONEQUAL
27783: OR
27784: IFFALSE 27788
// exit ;
27786: GO 28367
// side := GetSide ( unit ) ;
27788: LD_ADDR_VAR 0 9
27792: PUSH
27793: LD_VAR 0 1
27797: PPUSH
27798: CALL_OW 255
27802: ST_TO_ADDR
// tech_space := tech_spacanom ;
27803: LD_ADDR_VAR 0 12
27807: PUSH
27808: LD_INT 29
27810: ST_TO_ADDR
// tech_time := tech_taurad ;
27811: LD_ADDR_VAR 0 13
27815: PUSH
27816: LD_INT 28
27818: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27819: LD_ADDR_VAR 0 11
27823: PUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: CALL_OW 310
27833: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27834: LD_VAR 0 11
27838: PPUSH
27839: CALL_OW 247
27843: PUSH
27844: LD_INT 2
27846: EQUAL
27847: IFFALSE 27851
// exit ;
27849: GO 28367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27851: LD_ADDR_VAR 0 8
27855: PUSH
27856: LD_INT 81
27858: PUSH
27859: LD_VAR 0 9
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 3
27870: PUSH
27871: LD_INT 21
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PPUSH
27889: CALL_OW 69
27893: ST_TO_ADDR
// if not tmp then
27894: LD_VAR 0 8
27898: NOT
27899: IFFALSE 27903
// exit ;
27901: GO 28367
// if in_unit then
27903: LD_VAR 0 11
27907: IFFALSE 27931
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27909: LD_ADDR_VAR 0 10
27913: PUSH
27914: LD_VAR 0 8
27918: PPUSH
27919: LD_VAR 0 11
27923: PPUSH
27924: CALL_OW 74
27928: ST_TO_ADDR
27929: GO 27951
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27931: LD_ADDR_VAR 0 10
27935: PUSH
27936: LD_VAR 0 8
27940: PPUSH
27941: LD_VAR 0 1
27945: PPUSH
27946: CALL_OW 74
27950: ST_TO_ADDR
// if not enemy then
27951: LD_VAR 0 10
27955: NOT
27956: IFFALSE 27960
// exit ;
27958: GO 28367
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27960: LD_VAR 0 11
27964: IFFALSE 27986
27966: PUSH
27967: LD_VAR 0 11
27971: PPUSH
27972: LD_VAR 0 10
27976: PPUSH
27977: CALL_OW 296
27981: PUSH
27982: LD_INT 13
27984: GREATER
27985: AND
27986: IFTRUE 28008
27988: PUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: LD_VAR 0 10
27998: PPUSH
27999: CALL_OW 296
28003: PUSH
28004: LD_INT 12
28006: GREATER
28007: OR
28008: IFFALSE 28012
// exit ;
28010: GO 28367
// missile := [ 1 ] ;
28012: LD_ADDR_VAR 0 14
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: EMPTY
28021: LIST
28022: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28023: LD_VAR 0 9
28027: PPUSH
28028: LD_VAR 0 12
28032: PPUSH
28033: CALL_OW 325
28037: IFFALSE 28066
// missile := Replace ( missile , missile + 1 , 2 ) ;
28039: LD_ADDR_VAR 0 14
28043: PUSH
28044: LD_VAR 0 14
28048: PPUSH
28049: LD_VAR 0 14
28053: PUSH
28054: LD_INT 1
28056: PLUS
28057: PPUSH
28058: LD_INT 2
28060: PPUSH
28061: CALL_OW 1
28065: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28066: LD_VAR 0 9
28070: PPUSH
28071: LD_VAR 0 13
28075: PPUSH
28076: CALL_OW 325
28080: IFFALSE 28104
28082: PUSH
28083: LD_VAR 0 10
28087: PPUSH
28088: CALL_OW 255
28092: PPUSH
28093: LD_VAR 0 13
28097: PPUSH
28098: CALL_OW 325
28102: NOT
28103: AND
28104: IFFALSE 28133
// missile := Replace ( missile , missile + 1 , 3 ) ;
28106: LD_ADDR_VAR 0 14
28110: PUSH
28111: LD_VAR 0 14
28115: PPUSH
28116: LD_VAR 0 14
28120: PUSH
28121: LD_INT 1
28123: PLUS
28124: PPUSH
28125: LD_INT 3
28127: PPUSH
28128: CALL_OW 1
28132: ST_TO_ADDR
// if missile < 2 then
28133: LD_VAR 0 14
28137: PUSH
28138: LD_INT 2
28140: LESS
28141: IFFALSE 28145
// exit ;
28143: GO 28367
// x := GetX ( enemy ) ;
28145: LD_ADDR_VAR 0 4
28149: PUSH
28150: LD_VAR 0 10
28154: PPUSH
28155: CALL_OW 250
28159: ST_TO_ADDR
// y := GetY ( enemy ) ;
28160: LD_ADDR_VAR 0 5
28164: PUSH
28165: LD_VAR 0 10
28169: PPUSH
28170: CALL_OW 251
28174: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28175: LD_ADDR_VAR 0 6
28179: PUSH
28180: LD_VAR 0 4
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PPUSH
28189: LD_INT 1
28191: PPUSH
28192: CALL_OW 12
28196: PLUS
28197: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28198: LD_ADDR_VAR 0 7
28202: PUSH
28203: LD_VAR 0 5
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PPUSH
28212: LD_INT 1
28214: PPUSH
28215: CALL_OW 12
28219: PLUS
28220: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28221: LD_VAR 0 6
28225: PPUSH
28226: LD_VAR 0 7
28230: PPUSH
28231: CALL_OW 488
28235: NOT
28236: IFFALSE 28258
// begin _x := x ;
28238: LD_ADDR_VAR 0 6
28242: PUSH
28243: LD_VAR 0 4
28247: ST_TO_ADDR
// _y := y ;
28248: LD_ADDR_VAR 0 7
28252: PUSH
28253: LD_VAR 0 5
28257: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_INT 1
28265: PPUSH
28266: LD_VAR 0 14
28270: PPUSH
28271: CALL_OW 12
28275: ST_TO_ADDR
// case i of 1 :
28276: LD_VAR 0 3
28280: PUSH
28281: LD_INT 1
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28306
28289: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28290: LD_VAR 0 1
28294: PPUSH
28295: LD_VAR 0 10
28299: PPUSH
28300: CALL_OW 115
28304: GO 28367
28306: LD_INT 2
28308: DOUBLE
28309: EQUAL
28310: IFTRUE 28314
28312: GO 28336
28314: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28315: LD_VAR 0 1
28319: PPUSH
28320: LD_VAR 0 6
28324: PPUSH
28325: LD_VAR 0 7
28329: PPUSH
28330: CALL_OW 153
28334: GO 28367
28336: LD_INT 3
28338: DOUBLE
28339: EQUAL
28340: IFTRUE 28344
28342: GO 28366
28344: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28345: LD_VAR 0 1
28349: PPUSH
28350: LD_VAR 0 6
28354: PPUSH
28355: LD_VAR 0 7
28359: PPUSH
28360: CALL_OW 154
28364: GO 28367
28366: POP
// end ;
28367: LD_VAR 0 2
28371: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28372: LD_INT 0
28374: PPUSH
28375: PPUSH
28376: PPUSH
28377: PPUSH
28378: PPUSH
28379: PPUSH
// if not unit or not building then
28380: LD_VAR 0 1
28384: NOT
28385: IFTRUE 28394
28387: PUSH
28388: LD_VAR 0 2
28392: NOT
28393: OR
28394: IFFALSE 28398
// exit ;
28396: GO 28556
// x := GetX ( building ) ;
28398: LD_ADDR_VAR 0 5
28402: PUSH
28403: LD_VAR 0 2
28407: PPUSH
28408: CALL_OW 250
28412: ST_TO_ADDR
// y := GetY ( building ) ;
28413: LD_ADDR_VAR 0 6
28417: PUSH
28418: LD_VAR 0 2
28422: PPUSH
28423: CALL_OW 251
28427: ST_TO_ADDR
// for i := 0 to 5 do
28428: LD_ADDR_VAR 0 4
28432: PUSH
28433: DOUBLE
28434: LD_INT 0
28436: DEC
28437: ST_TO_ADDR
28438: LD_INT 5
28440: PUSH
28441: FOR_TO
28442: IFFALSE 28554
// begin _x := ShiftX ( x , i , 3 ) ;
28444: LD_ADDR_VAR 0 7
28448: PUSH
28449: LD_VAR 0 5
28453: PPUSH
28454: LD_VAR 0 4
28458: PPUSH
28459: LD_INT 3
28461: PPUSH
28462: CALL_OW 272
28466: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28467: LD_ADDR_VAR 0 8
28471: PUSH
28472: LD_VAR 0 6
28476: PPUSH
28477: LD_VAR 0 4
28481: PPUSH
28482: LD_INT 3
28484: PPUSH
28485: CALL_OW 273
28489: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28490: LD_VAR 0 7
28494: PPUSH
28495: LD_VAR 0 8
28499: PPUSH
28500: CALL_OW 488
28504: NOT
28505: IFFALSE 28509
// continue ;
28507: GO 28441
// if HexInfo ( _x , _y ) = 0 then
28509: LD_VAR 0 7
28513: PPUSH
28514: LD_VAR 0 8
28518: PPUSH
28519: CALL_OW 428
28523: PUSH
28524: LD_INT 0
28526: EQUAL
28527: IFFALSE 28552
// begin ComMoveXY ( unit , _x , _y ) ;
28529: LD_VAR 0 1
28533: PPUSH
28534: LD_VAR 0 7
28538: PPUSH
28539: LD_VAR 0 8
28543: PPUSH
28544: CALL_OW 111
// exit ;
28548: POP
28549: POP
28550: GO 28556
// end ; end ;
28552: GO 28441
28554: POP
28555: POP
// end ;
28556: LD_VAR 0 3
28560: RET
// export function ScanBase ( side , base_area ) ; begin
28561: LD_INT 0
28563: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_VAR 0 2
28573: PPUSH
28574: LD_INT 81
28576: PUSH
28577: LD_VAR 0 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PPUSH
28586: CALL_OW 70
28590: ST_TO_ADDR
// end ;
28591: LD_VAR 0 3
28595: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
// result := false ;
28602: LD_ADDR_VAR 0 2
28606: PUSH
28607: LD_INT 0
28609: ST_TO_ADDR
// side := GetSide ( unit ) ;
28610: LD_ADDR_VAR 0 3
28614: PUSH
28615: LD_VAR 0 1
28619: PPUSH
28620: CALL_OW 255
28624: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28625: LD_ADDR_VAR 0 4
28629: PUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: CALL_OW 248
28639: ST_TO_ADDR
// case nat of 1 :
28640: LD_VAR 0 4
28644: PUSH
28645: LD_INT 1
28647: DOUBLE
28648: EQUAL
28649: IFTRUE 28653
28651: GO 28664
28653: POP
// tech := tech_lassight ; 2 :
28654: LD_ADDR_VAR 0 5
28658: PUSH
28659: LD_INT 12
28661: ST_TO_ADDR
28662: GO 28703
28664: LD_INT 2
28666: DOUBLE
28667: EQUAL
28668: IFTRUE 28672
28670: GO 28683
28672: POP
// tech := tech_mortar ; 3 :
28673: LD_ADDR_VAR 0 5
28677: PUSH
28678: LD_INT 41
28680: ST_TO_ADDR
28681: GO 28703
28683: LD_INT 3
28685: DOUBLE
28686: EQUAL
28687: IFTRUE 28691
28689: GO 28702
28691: POP
// tech := tech_bazooka ; end ;
28692: LD_ADDR_VAR 0 5
28696: PUSH
28697: LD_INT 44
28699: ST_TO_ADDR
28700: GO 28703
28702: POP
// if Researched ( side , tech ) then
28703: LD_VAR 0 3
28707: PPUSH
28708: LD_VAR 0 5
28712: PPUSH
28713: CALL_OW 325
28717: IFFALSE 28744
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28719: LD_ADDR_VAR 0 2
28723: PUSH
28724: LD_INT 5
28726: PUSH
28727: LD_INT 8
28729: PUSH
28730: LD_INT 9
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: PUSH
28738: LD_VAR 0 4
28742: ARRAY
28743: ST_TO_ADDR
// end ;
28744: LD_VAR 0 2
28748: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28749: LD_INT 0
28751: PPUSH
28752: PPUSH
28753: PPUSH
// if not mines then
28754: LD_VAR 0 2
28758: NOT
28759: IFFALSE 28763
// exit ;
28761: GO 28907
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28763: LD_ADDR_VAR 0 5
28767: PUSH
28768: LD_INT 81
28770: PUSH
28771: LD_VAR 0 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 3
28782: PUSH
28783: LD_INT 21
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: ST_TO_ADDR
// for i in mines do
28806: LD_ADDR_VAR 0 4
28810: PUSH
28811: LD_VAR 0 2
28815: PUSH
28816: FOR_IN
28817: IFFALSE 28905
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28819: LD_VAR 0 4
28823: PUSH
28824: LD_INT 1
28826: ARRAY
28827: PPUSH
28828: LD_VAR 0 4
28832: PUSH
28833: LD_INT 2
28835: ARRAY
28836: PPUSH
28837: CALL_OW 458
28841: NOT
28842: IFFALSE 28846
// continue ;
28844: GO 28816
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28846: LD_VAR 0 4
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: LD_VAR 0 4
28859: PUSH
28860: LD_INT 2
28862: ARRAY
28863: PPUSH
28864: CALL_OW 428
28868: PUSH
28869: LD_VAR 0 5
28873: IN
28874: IFFALSE 28903
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28876: LD_VAR 0 4
28880: PUSH
28881: LD_INT 1
28883: ARRAY
28884: PPUSH
28885: LD_VAR 0 4
28889: PUSH
28890: LD_INT 2
28892: ARRAY
28893: PPUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: CALL_OW 456
// end ;
28903: GO 28816
28905: POP
28906: POP
// end ;
28907: LD_VAR 0 3
28911: RET
// export function Count ( array ) ; begin
28912: LD_INT 0
28914: PPUSH
// result := array + 0 ;
28915: LD_ADDR_VAR 0 2
28919: PUSH
28920: LD_VAR 0 1
28924: PUSH
28925: LD_INT 0
28927: PLUS
28928: ST_TO_ADDR
// end ;
28929: LD_VAR 0 2
28933: RET
// export function IsEmpty ( building ) ; begin
28934: LD_INT 0
28936: PPUSH
// if not building then
28937: LD_VAR 0 1
28941: NOT
28942: IFFALSE 28946
// exit ;
28944: GO 28989
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28946: LD_ADDR_VAR 0 2
28950: PUSH
28951: LD_VAR 0 1
28955: PUSH
28956: LD_INT 22
28958: PUSH
28959: LD_VAR 0 1
28963: PPUSH
28964: CALL_OW 255
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 58
28975: PUSH
28976: EMPTY
28977: LIST
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PPUSH
28983: CALL_OW 69
28987: IN
28988: ST_TO_ADDR
// end ;
28989: LD_VAR 0 2
28993: RET
// export function IsNotFull ( building ) ; var places ; begin
28994: LD_INT 0
28996: PPUSH
28997: PPUSH
// if not building then
28998: LD_VAR 0 1
29002: NOT
29003: IFFALSE 29007
// exit ;
29005: GO 29035
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29007: LD_ADDR_VAR 0 2
29011: PUSH
29012: LD_VAR 0 1
29016: PPUSH
29017: LD_INT 3
29019: PUSH
29020: LD_INT 62
29022: PUSH
29023: EMPTY
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PPUSH
29030: CALL_OW 72
29034: ST_TO_ADDR
// end ;
29035: LD_VAR 0 2
29039: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29040: LD_INT 0
29042: PPUSH
29043: PPUSH
29044: PPUSH
29045: PPUSH
// tmp := [ ] ;
29046: LD_ADDR_VAR 0 3
29050: PUSH
29051: EMPTY
29052: ST_TO_ADDR
// list := [ ] ;
29053: LD_ADDR_VAR 0 5
29057: PUSH
29058: EMPTY
29059: ST_TO_ADDR
// for i = 16 to 25 do
29060: LD_ADDR_VAR 0 4
29064: PUSH
29065: DOUBLE
29066: LD_INT 16
29068: DEC
29069: ST_TO_ADDR
29070: LD_INT 25
29072: PUSH
29073: FOR_TO
29074: IFFALSE 29147
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29076: LD_ADDR_VAR 0 3
29080: PUSH
29081: LD_VAR 0 3
29085: PUSH
29086: LD_INT 22
29088: PUSH
29089: LD_VAR 0 1
29093: PPUSH
29094: CALL_OW 255
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 91
29105: PUSH
29106: LD_VAR 0 1
29110: PUSH
29111: LD_INT 6
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 30
29121: PUSH
29122: LD_VAR 0 4
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: PPUSH
29139: CALL_OW 69
29143: ADD
29144: ST_TO_ADDR
29145: GO 29073
29147: POP
29148: POP
// for i = 1 to tmp do
29149: LD_ADDR_VAR 0 4
29153: PUSH
29154: DOUBLE
29155: LD_INT 1
29157: DEC
29158: ST_TO_ADDR
29159: LD_VAR 0 3
29163: PUSH
29164: FOR_TO
29165: IFFALSE 29253
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29167: LD_ADDR_VAR 0 5
29171: PUSH
29172: LD_VAR 0 5
29176: PUSH
29177: LD_VAR 0 3
29181: PUSH
29182: LD_VAR 0 4
29186: ARRAY
29187: PPUSH
29188: CALL_OW 266
29192: PUSH
29193: LD_VAR 0 3
29197: PUSH
29198: LD_VAR 0 4
29202: ARRAY
29203: PPUSH
29204: CALL_OW 250
29208: PUSH
29209: LD_VAR 0 3
29213: PUSH
29214: LD_VAR 0 4
29218: ARRAY
29219: PPUSH
29220: CALL_OW 251
29224: PUSH
29225: LD_VAR 0 3
29229: PUSH
29230: LD_VAR 0 4
29234: ARRAY
29235: PPUSH
29236: CALL_OW 254
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: ADD
29250: ST_TO_ADDR
29251: GO 29164
29253: POP
29254: POP
// result := list ;
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: LD_VAR 0 5
29264: ST_TO_ADDR
// end ;
29265: LD_VAR 0 2
29269: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29270: LD_INT 0
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
// if not factory then
29279: LD_VAR 0 1
29283: NOT
29284: IFFALSE 29288
// exit ;
29286: GO 29891
// if control = control_apeman then
29288: LD_VAR 0 4
29292: PUSH
29293: LD_INT 5
29295: EQUAL
29296: IFFALSE 29405
// begin tmp := UnitsInside ( factory ) ;
29298: LD_ADDR_VAR 0 8
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 313
29312: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29313: LD_VAR 0 8
29317: PPUSH
29318: LD_INT 25
29320: PUSH
29321: LD_INT 12
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL_OW 72
29332: NOT
29333: IFFALSE 29343
// control := control_manual ;
29335: LD_ADDR_VAR 0 4
29339: PUSH
29340: LD_INT 1
29342: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29343: LD_ADDR_VAR 0 8
29347: PUSH
29348: LD_VAR 0 1
29352: PPUSH
29353: CALL 29040 0 1
29357: ST_TO_ADDR
// if tmp then
29358: LD_VAR 0 8
29362: IFFALSE 29405
// begin for i in tmp do
29364: LD_ADDR_VAR 0 7
29368: PUSH
29369: LD_VAR 0 8
29373: PUSH
29374: FOR_IN
29375: IFFALSE 29403
// if i [ 1 ] = b_ext_radio then
29377: LD_VAR 0 7
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PUSH
29386: LD_INT 22
29388: EQUAL
29389: IFFALSE 29401
// begin control := control_remote ;
29391: LD_ADDR_VAR 0 4
29395: PUSH
29396: LD_INT 2
29398: ST_TO_ADDR
// break ;
29399: GO 29403
// end ;
29401: GO 29374
29403: POP
29404: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29405: LD_VAR 0 1
29409: PPUSH
29410: LD_VAR 0 2
29414: PPUSH
29415: LD_VAR 0 3
29419: PPUSH
29420: LD_VAR 0 4
29424: PPUSH
29425: LD_VAR 0 5
29429: PPUSH
29430: CALL_OW 448
29434: IFFALSE 29469
// begin result := [ chassis , engine , control , weapon ] ;
29436: LD_ADDR_VAR 0 6
29440: PUSH
29441: LD_VAR 0 2
29445: PUSH
29446: LD_VAR 0 3
29450: PUSH
29451: LD_VAR 0 4
29455: PUSH
29456: LD_VAR 0 5
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: ST_TO_ADDR
// exit ;
29467: GO 29891
// end ; _chassis := AvailableChassisList ( factory ) ;
29469: LD_ADDR_VAR 0 9
29473: PUSH
29474: LD_VAR 0 1
29478: PPUSH
29479: CALL_OW 475
29483: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29484: LD_ADDR_VAR 0 11
29488: PUSH
29489: LD_VAR 0 1
29493: PPUSH
29494: CALL_OW 476
29498: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29499: LD_ADDR_VAR 0 12
29503: PUSH
29504: LD_VAR 0 1
29508: PPUSH
29509: CALL_OW 477
29513: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29514: LD_ADDR_VAR 0 10
29518: PUSH
29519: LD_VAR 0 1
29523: PPUSH
29524: CALL_OW 478
29528: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29529: LD_VAR 0 9
29533: NOT
29534: IFTRUE 29543
29536: PUSH
29537: LD_VAR 0 11
29541: NOT
29542: OR
29543: IFTRUE 29552
29545: PUSH
29546: LD_VAR 0 12
29550: NOT
29551: OR
29552: IFTRUE 29561
29554: PUSH
29555: LD_VAR 0 10
29559: NOT
29560: OR
29561: IFFALSE 29596
// begin result := [ chassis , engine , control , weapon ] ;
29563: LD_ADDR_VAR 0 6
29567: PUSH
29568: LD_VAR 0 2
29572: PUSH
29573: LD_VAR 0 3
29577: PUSH
29578: LD_VAR 0 4
29582: PUSH
29583: LD_VAR 0 5
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: ST_TO_ADDR
// exit ;
29594: GO 29891
// end ; if not chassis in _chassis then
29596: LD_VAR 0 2
29600: PUSH
29601: LD_VAR 0 9
29605: IN
29606: NOT
29607: IFFALSE 29633
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29609: LD_ADDR_VAR 0 2
29613: PUSH
29614: LD_VAR 0 9
29618: PUSH
29619: LD_INT 1
29621: PPUSH
29622: LD_VAR 0 9
29626: PPUSH
29627: CALL_OW 12
29631: ARRAY
29632: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29633: LD_VAR 0 2
29637: PPUSH
29638: LD_VAR 0 3
29642: PPUSH
29643: CALL 29896 0 2
29647: NOT
29648: IFFALSE 29709
// repeat engine := _engine [ 1 ] ;
29650: LD_ADDR_VAR 0 3
29654: PUSH
29655: LD_VAR 0 11
29659: PUSH
29660: LD_INT 1
29662: ARRAY
29663: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29664: LD_ADDR_VAR 0 11
29668: PUSH
29669: LD_VAR 0 11
29673: PPUSH
29674: LD_INT 1
29676: PPUSH
29677: CALL_OW 3
29681: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29682: LD_VAR 0 2
29686: PPUSH
29687: LD_VAR 0 3
29691: PPUSH
29692: CALL 29896 0 2
29696: IFTRUE 29707
29698: PUSH
29699: LD_VAR 0 11
29703: PUSH
29704: EMPTY
29705: EQUAL
29706: OR
29707: IFFALSE 29650
// if not control in _control then
29709: LD_VAR 0 4
29713: PUSH
29714: LD_VAR 0 12
29718: IN
29719: NOT
29720: IFFALSE 29746
// control := _control [ rand ( 1 , _control ) ] ;
29722: LD_ADDR_VAR 0 4
29726: PUSH
29727: LD_VAR 0 12
29731: PUSH
29732: LD_INT 1
29734: PPUSH
29735: LD_VAR 0 12
29739: PPUSH
29740: CALL_OW 12
29744: ARRAY
29745: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29746: LD_VAR 0 2
29750: PPUSH
29751: LD_VAR 0 5
29755: PPUSH
29756: CALL 30118 0 2
29760: NOT
29761: IFFALSE 29822
// repeat weapon := _weapon [ 1 ] ;
29763: LD_ADDR_VAR 0 5
29767: PUSH
29768: LD_VAR 0 10
29772: PUSH
29773: LD_INT 1
29775: ARRAY
29776: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29777: LD_ADDR_VAR 0 10
29781: PUSH
29782: LD_VAR 0 10
29786: PPUSH
29787: LD_INT 1
29789: PPUSH
29790: CALL_OW 3
29794: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29795: LD_VAR 0 2
29799: PPUSH
29800: LD_VAR 0 5
29804: PPUSH
29805: CALL 30118 0 2
29809: IFTRUE 29820
29811: PUSH
29812: LD_VAR 0 10
29816: PUSH
29817: EMPTY
29818: EQUAL
29819: OR
29820: IFFALSE 29763
// result := [ ] ;
29822: LD_ADDR_VAR 0 6
29826: PUSH
29827: EMPTY
29828: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29829: LD_VAR 0 1
29833: PPUSH
29834: LD_VAR 0 2
29838: PPUSH
29839: LD_VAR 0 3
29843: PPUSH
29844: LD_VAR 0 4
29848: PPUSH
29849: LD_VAR 0 5
29853: PPUSH
29854: CALL_OW 448
29858: IFFALSE 29891
// result := [ chassis , engine , control , weapon ] ;
29860: LD_ADDR_VAR 0 6
29864: PUSH
29865: LD_VAR 0 2
29869: PUSH
29870: LD_VAR 0 3
29874: PUSH
29875: LD_VAR 0 4
29879: PUSH
29880: LD_VAR 0 5
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// end ;
29891: LD_VAR 0 6
29895: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29896: LD_INT 0
29898: PPUSH
// if not chassis or not engine then
29899: LD_VAR 0 1
29903: NOT
29904: IFTRUE 29913
29906: PUSH
29907: LD_VAR 0 2
29911: NOT
29912: OR
29913: IFFALSE 29917
// exit ;
29915: GO 30113
// case engine of engine_solar :
29917: LD_VAR 0 2
29921: PUSH
29922: LD_INT 2
29924: DOUBLE
29925: EQUAL
29926: IFTRUE 29930
29928: GO 29968
29930: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29931: LD_ADDR_VAR 0 3
29935: PUSH
29936: LD_INT 11
29938: PUSH
29939: LD_INT 12
29941: PUSH
29942: LD_INT 13
29944: PUSH
29945: LD_INT 14
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 3
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
29966: GO 30097
29968: LD_INT 1
29970: DOUBLE
29971: EQUAL
29972: IFTRUE 29976
29974: GO 30038
29976: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29977: LD_ADDR_VAR 0 3
29981: PUSH
29982: LD_INT 11
29984: PUSH
29985: LD_INT 12
29987: PUSH
29988: LD_INT 13
29990: PUSH
29991: LD_INT 14
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: LD_INT 2
29999: PUSH
30000: LD_INT 3
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: LD_INT 5
30008: PUSH
30009: LD_INT 21
30011: PUSH
30012: LD_INT 23
30014: PUSH
30015: LD_INT 22
30017: PUSH
30018: LD_INT 24
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: ST_TO_ADDR
30036: GO 30097
30038: LD_INT 3
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30096
30046: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30047: LD_ADDR_VAR 0 3
30051: PUSH
30052: LD_INT 13
30054: PUSH
30055: LD_INT 14
30057: PUSH
30058: LD_INT 2
30060: PUSH
30061: LD_INT 3
30063: PUSH
30064: LD_INT 4
30066: PUSH
30067: LD_INT 5
30069: PUSH
30070: LD_INT 21
30072: PUSH
30073: LD_INT 22
30075: PUSH
30076: LD_INT 23
30078: PUSH
30079: LD_INT 24
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: ST_TO_ADDR
30094: GO 30097
30096: POP
// result := ( chassis in result ) ;
30097: LD_ADDR_VAR 0 3
30101: PUSH
30102: LD_VAR 0 1
30106: PUSH
30107: LD_VAR 0 3
30111: IN
30112: ST_TO_ADDR
// end ;
30113: LD_VAR 0 3
30117: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30118: LD_INT 0
30120: PPUSH
// if not chassis or not weapon then
30121: LD_VAR 0 1
30125: NOT
30126: IFTRUE 30135
30128: PUSH
30129: LD_VAR 0 2
30133: NOT
30134: OR
30135: IFFALSE 30139
// exit ;
30137: GO 31233
// case weapon of us_machine_gun :
30139: LD_VAR 0 2
30143: PUSH
30144: LD_INT 2
30146: DOUBLE
30147: EQUAL
30148: IFTRUE 30152
30150: GO 30182
30152: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30153: LD_ADDR_VAR 0 3
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: LD_INT 3
30166: PUSH
30167: LD_INT 4
30169: PUSH
30170: LD_INT 5
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: ST_TO_ADDR
30180: GO 31217
30182: LD_INT 3
30184: DOUBLE
30185: EQUAL
30186: IFTRUE 30190
30188: GO 30220
30190: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30191: LD_ADDR_VAR 0 3
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: LD_INT 2
30201: PUSH
30202: LD_INT 3
30204: PUSH
30205: LD_INT 4
30207: PUSH
30208: LD_INT 5
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: ST_TO_ADDR
30218: GO 31217
30220: LD_INT 11
30222: DOUBLE
30223: EQUAL
30224: IFTRUE 30228
30226: GO 30258
30228: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: LD_INT 5
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: ST_TO_ADDR
30256: GO 31217
30258: LD_INT 4
30260: DOUBLE
30261: EQUAL
30262: IFTRUE 30266
30264: GO 30292
30266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30267: LD_ADDR_VAR 0 3
30271: PUSH
30272: LD_INT 2
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: LD_INT 4
30280: PUSH
30281: LD_INT 5
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
30290: GO 31217
30292: LD_INT 5
30294: DOUBLE
30295: EQUAL
30296: IFTRUE 30300
30298: GO 30326
30300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30301: LD_ADDR_VAR 0 3
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: LD_INT 4
30314: PUSH
30315: LD_INT 5
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: ST_TO_ADDR
30324: GO 31217
30326: LD_INT 9
30328: DOUBLE
30329: EQUAL
30330: IFTRUE 30334
30332: GO 30360
30334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30335: LD_ADDR_VAR 0 3
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: LD_INT 4
30348: PUSH
30349: LD_INT 5
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
30358: GO 31217
30360: LD_INT 7
30362: DOUBLE
30363: EQUAL
30364: IFTRUE 30368
30366: GO 30394
30368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30369: LD_ADDR_VAR 0 3
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: LD_INT 4
30382: PUSH
30383: LD_INT 5
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: ST_TO_ADDR
30392: GO 31217
30394: LD_INT 12
30396: DOUBLE
30397: EQUAL
30398: IFTRUE 30402
30400: GO 30428
30402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30403: LD_ADDR_VAR 0 3
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: LD_INT 4
30416: PUSH
30417: LD_INT 5
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
30426: GO 31217
30428: LD_INT 13
30430: DOUBLE
30431: EQUAL
30432: IFTRUE 30436
30434: GO 30462
30436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30437: LD_ADDR_VAR 0 3
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: LD_INT 4
30450: PUSH
30451: LD_INT 5
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: ST_TO_ADDR
30460: GO 31217
30462: LD_INT 14
30464: DOUBLE
30465: EQUAL
30466: IFTRUE 30470
30468: GO 30488
30470: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30471: LD_ADDR_VAR 0 3
30475: PUSH
30476: LD_INT 4
30478: PUSH
30479: LD_INT 5
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: ST_TO_ADDR
30486: GO 31217
30488: LD_INT 6
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30514
30496: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30497: LD_ADDR_VAR 0 3
30501: PUSH
30502: LD_INT 4
30504: PUSH
30505: LD_INT 5
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: ST_TO_ADDR
30512: GO 31217
30514: LD_INT 10
30516: DOUBLE
30517: EQUAL
30518: IFTRUE 30522
30520: GO 30540
30522: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30523: LD_ADDR_VAR 0 3
30527: PUSH
30528: LD_INT 4
30530: PUSH
30531: LD_INT 5
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: ST_TO_ADDR
30538: GO 31217
30540: LD_INT 22
30542: DOUBLE
30543: EQUAL
30544: IFTRUE 30548
30546: GO 30574
30548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_INT 11
30556: PUSH
30557: LD_INT 12
30559: PUSH
30560: LD_INT 13
30562: PUSH
30563: LD_INT 14
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: ST_TO_ADDR
30572: GO 31217
30574: LD_INT 23
30576: DOUBLE
30577: EQUAL
30578: IFTRUE 30582
30580: GO 30608
30582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 11
30590: PUSH
30591: LD_INT 12
30593: PUSH
30594: LD_INT 13
30596: PUSH
30597: LD_INT 14
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
30606: GO 31217
30608: LD_INT 24
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30642
30616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_INT 11
30624: PUSH
30625: LD_INT 12
30627: PUSH
30628: LD_INT 13
30630: PUSH
30631: LD_INT 14
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: ST_TO_ADDR
30640: GO 31217
30642: LD_INT 30
30644: DOUBLE
30645: EQUAL
30646: IFTRUE 30650
30648: GO 30676
30650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: LD_INT 11
30658: PUSH
30659: LD_INT 12
30661: PUSH
30662: LD_INT 13
30664: PUSH
30665: LD_INT 14
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: ST_TO_ADDR
30674: GO 31217
30676: LD_INT 25
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30702
30684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30685: LD_ADDR_VAR 0 3
30689: PUSH
30690: LD_INT 13
30692: PUSH
30693: LD_INT 14
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: ST_TO_ADDR
30700: GO 31217
30702: LD_INT 27
30704: DOUBLE
30705: EQUAL
30706: IFTRUE 30710
30708: GO 30728
30710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_INT 13
30718: PUSH
30719: LD_INT 14
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: ST_TO_ADDR
30726: GO 31217
30728: LD_INT 92
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30762
30736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_INT 11
30744: PUSH
30745: LD_INT 12
30747: PUSH
30748: LD_INT 13
30750: PUSH
30751: LD_INT 14
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: ST_TO_ADDR
30760: GO 31217
30762: LD_INT 28
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30788
30770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_INT 13
30778: PUSH
30779: LD_INT 14
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: ST_TO_ADDR
30786: GO 31217
30788: LD_INT 29
30790: DOUBLE
30791: EQUAL
30792: IFTRUE 30796
30794: GO 30814
30796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30797: LD_ADDR_VAR 0 3
30801: PUSH
30802: LD_INT 13
30804: PUSH
30805: LD_INT 14
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: ST_TO_ADDR
30812: GO 31217
30814: LD_INT 31
30816: DOUBLE
30817: EQUAL
30818: IFTRUE 30822
30820: GO 30840
30822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30823: LD_ADDR_VAR 0 3
30827: PUSH
30828: LD_INT 13
30830: PUSH
30831: LD_INT 14
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: ST_TO_ADDR
30838: GO 31217
30840: LD_INT 26
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30866
30848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30849: LD_ADDR_VAR 0 3
30853: PUSH
30854: LD_INT 13
30856: PUSH
30857: LD_INT 14
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: ST_TO_ADDR
30864: GO 31217
30866: LD_INT 42
30868: DOUBLE
30869: EQUAL
30870: IFTRUE 30874
30872: GO 30900
30874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30875: LD_ADDR_VAR 0 3
30879: PUSH
30880: LD_INT 21
30882: PUSH
30883: LD_INT 22
30885: PUSH
30886: LD_INT 23
30888: PUSH
30889: LD_INT 24
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
30898: GO 31217
30900: LD_INT 43
30902: DOUBLE
30903: EQUAL
30904: IFTRUE 30908
30906: GO 30934
30908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30909: LD_ADDR_VAR 0 3
30913: PUSH
30914: LD_INT 21
30916: PUSH
30917: LD_INT 22
30919: PUSH
30920: LD_INT 23
30922: PUSH
30923: LD_INT 24
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: ST_TO_ADDR
30932: GO 31217
30934: LD_INT 44
30936: DOUBLE
30937: EQUAL
30938: IFTRUE 30942
30940: GO 30968
30942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_INT 21
30950: PUSH
30951: LD_INT 22
30953: PUSH
30954: LD_INT 23
30956: PUSH
30957: LD_INT 24
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
30966: GO 31217
30968: LD_INT 45
30970: DOUBLE
30971: EQUAL
30972: IFTRUE 30976
30974: GO 31002
30976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_INT 21
30984: PUSH
30985: LD_INT 22
30987: PUSH
30988: LD_INT 23
30990: PUSH
30991: LD_INT 24
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
31000: GO 31217
31002: LD_INT 49
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31036
31010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31011: LD_ADDR_VAR 0 3
31015: PUSH
31016: LD_INT 21
31018: PUSH
31019: LD_INT 22
31021: PUSH
31022: LD_INT 23
31024: PUSH
31025: LD_INT 24
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
31034: GO 31217
31036: LD_INT 51
31038: DOUBLE
31039: EQUAL
31040: IFTRUE 31044
31042: GO 31070
31044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31045: LD_ADDR_VAR 0 3
31049: PUSH
31050: LD_INT 21
31052: PUSH
31053: LD_INT 22
31055: PUSH
31056: LD_INT 23
31058: PUSH
31059: LD_INT 24
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
31068: GO 31217
31070: LD_INT 52
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31104
31078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31079: LD_ADDR_VAR 0 3
31083: PUSH
31084: LD_INT 21
31086: PUSH
31087: LD_INT 22
31089: PUSH
31090: LD_INT 23
31092: PUSH
31093: LD_INT 24
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: ST_TO_ADDR
31102: GO 31217
31104: LD_INT 53
31106: DOUBLE
31107: EQUAL
31108: IFTRUE 31112
31110: GO 31130
31112: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31113: LD_ADDR_VAR 0 3
31117: PUSH
31118: LD_INT 23
31120: PUSH
31121: LD_INT 24
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: ST_TO_ADDR
31128: GO 31217
31130: LD_INT 46
31132: DOUBLE
31133: EQUAL
31134: IFTRUE 31138
31136: GO 31156
31138: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31139: LD_ADDR_VAR 0 3
31143: PUSH
31144: LD_INT 23
31146: PUSH
31147: LD_INT 24
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: ST_TO_ADDR
31154: GO 31217
31156: LD_INT 47
31158: DOUBLE
31159: EQUAL
31160: IFTRUE 31164
31162: GO 31182
31164: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
31165: LD_ADDR_VAR 0 3
31169: PUSH
31170: LD_INT 23
31172: PUSH
31173: LD_INT 24
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: ST_TO_ADDR
31180: GO 31217
31182: LD_INT 98
31184: DOUBLE
31185: EQUAL
31186: IFTRUE 31190
31188: GO 31216
31190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_INT 21
31198: PUSH
31199: LD_INT 22
31201: PUSH
31202: LD_INT 23
31204: PUSH
31205: LD_INT 24
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: ST_TO_ADDR
31214: GO 31217
31216: POP
// result := ( chassis in result ) ;
31217: LD_ADDR_VAR 0 3
31221: PUSH
31222: LD_VAR 0 1
31226: PUSH
31227: LD_VAR 0 3
31231: IN
31232: ST_TO_ADDR
// end ;
31233: LD_VAR 0 3
31237: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31238: LD_INT 0
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
// result := array ;
31247: LD_ADDR_VAR 0 5
31251: PUSH
31252: LD_VAR 0 1
31256: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31257: LD_VAR 0 1
31261: NOT
31262: IFTRUE 31271
31264: PUSH
31265: LD_VAR 0 2
31269: NOT
31270: OR
31271: IFTRUE 31280
31273: PUSH
31274: LD_VAR 0 3
31278: NOT
31279: OR
31280: IFTRUE 31294
31282: PUSH
31283: LD_VAR 0 2
31287: PUSH
31288: LD_VAR 0 1
31292: GREATER
31293: OR
31294: IFTRUE 31308
31296: PUSH
31297: LD_VAR 0 3
31301: PUSH
31302: LD_VAR 0 1
31306: GREATER
31307: OR
31308: IFFALSE 31312
// exit ;
31310: GO 31608
// if direction then
31312: LD_VAR 0 4
31316: IFFALSE 31380
// begin d := 1 ;
31318: LD_ADDR_VAR 0 9
31322: PUSH
31323: LD_INT 1
31325: ST_TO_ADDR
// if i_from > i_to then
31326: LD_VAR 0 2
31330: PUSH
31331: LD_VAR 0 3
31335: GREATER
31336: IFFALSE 31362
// length := ( array - i_from ) + i_to else
31338: LD_ADDR_VAR 0 11
31342: PUSH
31343: LD_VAR 0 1
31347: PUSH
31348: LD_VAR 0 2
31352: MINUS
31353: PUSH
31354: LD_VAR 0 3
31358: PLUS
31359: ST_TO_ADDR
31360: GO 31378
// length := i_to - i_from ;
31362: LD_ADDR_VAR 0 11
31366: PUSH
31367: LD_VAR 0 3
31371: PUSH
31372: LD_VAR 0 2
31376: MINUS
31377: ST_TO_ADDR
// end else
31378: GO 31441
// begin d := - 1 ;
31380: LD_ADDR_VAR 0 9
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: ST_TO_ADDR
// if i_from > i_to then
31389: LD_VAR 0 2
31393: PUSH
31394: LD_VAR 0 3
31398: GREATER
31399: IFFALSE 31419
// length := i_from - i_to else
31401: LD_ADDR_VAR 0 11
31405: PUSH
31406: LD_VAR 0 2
31410: PUSH
31411: LD_VAR 0 3
31415: MINUS
31416: ST_TO_ADDR
31417: GO 31441
// length := ( array - i_to ) + i_from ;
31419: LD_ADDR_VAR 0 11
31423: PUSH
31424: LD_VAR 0 1
31428: PUSH
31429: LD_VAR 0 3
31433: MINUS
31434: PUSH
31435: LD_VAR 0 2
31439: PLUS
31440: ST_TO_ADDR
// end ; if not length then
31441: LD_VAR 0 11
31445: NOT
31446: IFFALSE 31450
// exit ;
31448: GO 31608
// tmp := array ;
31450: LD_ADDR_VAR 0 10
31454: PUSH
31455: LD_VAR 0 1
31459: ST_TO_ADDR
// for i = 1 to length do
31460: LD_ADDR_VAR 0 6
31464: PUSH
31465: DOUBLE
31466: LD_INT 1
31468: DEC
31469: ST_TO_ADDR
31470: LD_VAR 0 11
31474: PUSH
31475: FOR_TO
31476: IFFALSE 31596
// begin for j = 1 to array do
31478: LD_ADDR_VAR 0 7
31482: PUSH
31483: DOUBLE
31484: LD_INT 1
31486: DEC
31487: ST_TO_ADDR
31488: LD_VAR 0 1
31492: PUSH
31493: FOR_TO
31494: IFFALSE 31582
// begin k := j + d ;
31496: LD_ADDR_VAR 0 8
31500: PUSH
31501: LD_VAR 0 7
31505: PUSH
31506: LD_VAR 0 9
31510: PLUS
31511: ST_TO_ADDR
// if k > array then
31512: LD_VAR 0 8
31516: PUSH
31517: LD_VAR 0 1
31521: GREATER
31522: IFFALSE 31532
// k := 1 ;
31524: LD_ADDR_VAR 0 8
31528: PUSH
31529: LD_INT 1
31531: ST_TO_ADDR
// if not k then
31532: LD_VAR 0 8
31536: NOT
31537: IFFALSE 31549
// k := array ;
31539: LD_ADDR_VAR 0 8
31543: PUSH
31544: LD_VAR 0 1
31548: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31549: LD_ADDR_VAR 0 10
31553: PUSH
31554: LD_VAR 0 10
31558: PPUSH
31559: LD_VAR 0 8
31563: PPUSH
31564: LD_VAR 0 1
31568: PUSH
31569: LD_VAR 0 7
31573: ARRAY
31574: PPUSH
31575: CALL_OW 1
31579: ST_TO_ADDR
// end ;
31580: GO 31493
31582: POP
31583: POP
// array := tmp ;
31584: LD_ADDR_VAR 0 1
31588: PUSH
31589: LD_VAR 0 10
31593: ST_TO_ADDR
// end ;
31594: GO 31475
31596: POP
31597: POP
// result := array ;
31598: LD_ADDR_VAR 0 5
31602: PUSH
31603: LD_VAR 0 1
31607: ST_TO_ADDR
// end ;
31608: LD_VAR 0 5
31612: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31613: LD_INT 0
31615: PPUSH
31616: PPUSH
// result := 0 ;
31617: LD_ADDR_VAR 0 3
31621: PUSH
31622: LD_INT 0
31624: ST_TO_ADDR
// if not array or not value in array then
31625: LD_VAR 0 1
31629: NOT
31630: IFTRUE 31645
31632: PUSH
31633: LD_VAR 0 2
31637: PUSH
31638: LD_VAR 0 1
31642: IN
31643: NOT
31644: OR
31645: IFFALSE 31649
// exit ;
31647: GO 31703
// for i = 1 to array do
31649: LD_ADDR_VAR 0 4
31653: PUSH
31654: DOUBLE
31655: LD_INT 1
31657: DEC
31658: ST_TO_ADDR
31659: LD_VAR 0 1
31663: PUSH
31664: FOR_TO
31665: IFFALSE 31701
// if value = array [ i ] then
31667: LD_VAR 0 2
31671: PUSH
31672: LD_VAR 0 1
31676: PUSH
31677: LD_VAR 0 4
31681: ARRAY
31682: EQUAL
31683: IFFALSE 31699
// begin result := i ;
31685: LD_ADDR_VAR 0 3
31689: PUSH
31690: LD_VAR 0 4
31694: ST_TO_ADDR
// exit ;
31695: POP
31696: POP
31697: GO 31703
// end ;
31699: GO 31664
31701: POP
31702: POP
// end ;
31703: LD_VAR 0 3
31707: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31708: LD_INT 0
31710: PPUSH
// vc_chassis := chassis ;
31711: LD_ADDR_OWVAR 37
31715: PUSH
31716: LD_VAR 0 1
31720: ST_TO_ADDR
// vc_engine := engine ;
31721: LD_ADDR_OWVAR 39
31725: PUSH
31726: LD_VAR 0 2
31730: ST_TO_ADDR
// vc_control := control ;
31731: LD_ADDR_OWVAR 38
31735: PUSH
31736: LD_VAR 0 3
31740: ST_TO_ADDR
// vc_weapon := weapon ;
31741: LD_ADDR_OWVAR 40
31745: PUSH
31746: LD_VAR 0 4
31750: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31751: LD_ADDR_OWVAR 41
31755: PUSH
31756: LD_VAR 0 5
31760: ST_TO_ADDR
// end ;
31761: LD_VAR 0 6
31765: RET
// export function WantPlant ( unit ) ; var task ; begin
31766: LD_INT 0
31768: PPUSH
31769: PPUSH
// result := false ;
31770: LD_ADDR_VAR 0 2
31774: PUSH
31775: LD_INT 0
31777: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31778: LD_ADDR_VAR 0 3
31782: PUSH
31783: LD_VAR 0 1
31787: PPUSH
31788: CALL_OW 437
31792: ST_TO_ADDR
// if task then
31793: LD_VAR 0 3
31797: IFFALSE 31825
// if task [ 1 ] [ 1 ] = p then
31799: LD_VAR 0 3
31803: PUSH
31804: LD_INT 1
31806: ARRAY
31807: PUSH
31808: LD_INT 1
31810: ARRAY
31811: PUSH
31812: LD_STRING p
31814: EQUAL
31815: IFFALSE 31825
// result := true ;
31817: LD_ADDR_VAR 0 2
31821: PUSH
31822: LD_INT 1
31824: ST_TO_ADDR
// end ;
31825: LD_VAR 0 2
31829: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31830: LD_INT 0
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
// if pos < 1 then
31836: LD_VAR 0 2
31840: PUSH
31841: LD_INT 1
31843: LESS
31844: IFFALSE 31848
// exit ;
31846: GO 32151
// if pos = 1 then
31848: LD_VAR 0 2
31852: PUSH
31853: LD_INT 1
31855: EQUAL
31856: IFFALSE 31889
// result := Replace ( arr , pos [ 1 ] , value ) else
31858: LD_ADDR_VAR 0 4
31862: PUSH
31863: LD_VAR 0 1
31867: PPUSH
31868: LD_VAR 0 2
31872: PUSH
31873: LD_INT 1
31875: ARRAY
31876: PPUSH
31877: LD_VAR 0 3
31881: PPUSH
31882: CALL_OW 1
31886: ST_TO_ADDR
31887: GO 32151
// begin tmp := arr ;
31889: LD_ADDR_VAR 0 6
31893: PUSH
31894: LD_VAR 0 1
31898: ST_TO_ADDR
// s_arr := [ tmp ] ;
31899: LD_ADDR_VAR 0 7
31903: PUSH
31904: LD_VAR 0 6
31908: PUSH
31909: EMPTY
31910: LIST
31911: ST_TO_ADDR
// for i = 1 to pos - 1 do
31912: LD_ADDR_VAR 0 5
31916: PUSH
31917: DOUBLE
31918: LD_INT 1
31920: DEC
31921: ST_TO_ADDR
31922: LD_VAR 0 2
31926: PUSH
31927: LD_INT 1
31929: MINUS
31930: PUSH
31931: FOR_TO
31932: IFFALSE 31977
// begin tmp := tmp [ pos [ i ] ] ;
31934: LD_ADDR_VAR 0 6
31938: PUSH
31939: LD_VAR 0 6
31943: PUSH
31944: LD_VAR 0 2
31948: PUSH
31949: LD_VAR 0 5
31953: ARRAY
31954: ARRAY
31955: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31956: LD_ADDR_VAR 0 7
31960: PUSH
31961: LD_VAR 0 7
31965: PUSH
31966: LD_VAR 0 6
31970: PUSH
31971: EMPTY
31972: LIST
31973: ADD
31974: ST_TO_ADDR
// end ;
31975: GO 31931
31977: POP
31978: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31979: LD_ADDR_VAR 0 6
31983: PUSH
31984: LD_VAR 0 6
31988: PPUSH
31989: LD_VAR 0 2
31993: PUSH
31994: LD_VAR 0 2
31998: ARRAY
31999: PPUSH
32000: LD_VAR 0 3
32004: PPUSH
32005: CALL_OW 1
32009: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32010: LD_ADDR_VAR 0 7
32014: PUSH
32015: LD_VAR 0 7
32019: PPUSH
32020: LD_VAR 0 7
32024: PPUSH
32025: LD_VAR 0 6
32029: PPUSH
32030: CALL_OW 1
32034: ST_TO_ADDR
// for i = s_arr downto 2 do
32035: LD_ADDR_VAR 0 5
32039: PUSH
32040: DOUBLE
32041: LD_VAR 0 7
32045: INC
32046: ST_TO_ADDR
32047: LD_INT 2
32049: PUSH
32050: FOR_DOWNTO
32051: IFFALSE 32135
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32053: LD_ADDR_VAR 0 6
32057: PUSH
32058: LD_VAR 0 7
32062: PUSH
32063: LD_VAR 0 5
32067: PUSH
32068: LD_INT 1
32070: MINUS
32071: ARRAY
32072: PPUSH
32073: LD_VAR 0 2
32077: PUSH
32078: LD_VAR 0 5
32082: PUSH
32083: LD_INT 1
32085: MINUS
32086: ARRAY
32087: PPUSH
32088: LD_VAR 0 7
32092: PUSH
32093: LD_VAR 0 5
32097: ARRAY
32098: PPUSH
32099: CALL_OW 1
32103: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32104: LD_ADDR_VAR 0 7
32108: PUSH
32109: LD_VAR 0 7
32113: PPUSH
32114: LD_VAR 0 5
32118: PUSH
32119: LD_INT 1
32121: MINUS
32122: PPUSH
32123: LD_VAR 0 6
32127: PPUSH
32128: CALL_OW 1
32132: ST_TO_ADDR
// end ;
32133: GO 32050
32135: POP
32136: POP
// result := s_arr [ 1 ] ;
32137: LD_ADDR_VAR 0 4
32141: PUSH
32142: LD_VAR 0 7
32146: PUSH
32147: LD_INT 1
32149: ARRAY
32150: ST_TO_ADDR
// end ; end ;
32151: LD_VAR 0 4
32155: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32156: LD_INT 0
32158: PPUSH
32159: PPUSH
// if not list then
32160: LD_VAR 0 1
32164: NOT
32165: IFFALSE 32169
// exit ;
32167: GO 32260
// i := list [ pos1 ] ;
32169: LD_ADDR_VAR 0 5
32173: PUSH
32174: LD_VAR 0 1
32178: PUSH
32179: LD_VAR 0 2
32183: ARRAY
32184: ST_TO_ADDR
// if not i then
32185: LD_VAR 0 5
32189: NOT
32190: IFFALSE 32194
// exit ;
32192: GO 32260
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32194: LD_ADDR_VAR 0 1
32198: PUSH
32199: LD_VAR 0 1
32203: PPUSH
32204: LD_VAR 0 2
32208: PPUSH
32209: LD_VAR 0 1
32213: PUSH
32214: LD_VAR 0 3
32218: ARRAY
32219: PPUSH
32220: CALL_OW 1
32224: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32225: LD_ADDR_VAR 0 1
32229: PUSH
32230: LD_VAR 0 1
32234: PPUSH
32235: LD_VAR 0 3
32239: PPUSH
32240: LD_VAR 0 5
32244: PPUSH
32245: CALL_OW 1
32249: ST_TO_ADDR
// result := list ;
32250: LD_ADDR_VAR 0 4
32254: PUSH
32255: LD_VAR 0 1
32259: ST_TO_ADDR
// end ;
32260: LD_VAR 0 4
32264: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32265: LD_INT 0
32267: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32268: LD_ADDR_VAR 0 5
32272: PUSH
32273: LD_VAR 0 1
32277: PPUSH
32278: CALL_OW 250
32282: PPUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: CALL_OW 251
32292: PPUSH
32293: LD_VAR 0 2
32297: PPUSH
32298: LD_VAR 0 3
32302: PPUSH
32303: LD_VAR 0 4
32307: PPUSH
32308: CALL 32690 0 5
32312: ST_TO_ADDR
// end ;
32313: LD_VAR 0 5
32317: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32318: LD_INT 0
32320: PPUSH
32321: PPUSH
32322: PPUSH
32323: PPUSH
// if not list or not unit then
32324: LD_VAR 0 2
32328: NOT
32329: IFTRUE 32338
32331: PUSH
32332: LD_VAR 0 1
32336: NOT
32337: OR
32338: IFFALSE 32342
// exit ;
32340: GO 32685
// result := [ ] ;
32342: LD_ADDR_VAR 0 5
32346: PUSH
32347: EMPTY
32348: ST_TO_ADDR
// for i in list do
32349: LD_ADDR_VAR 0 6
32353: PUSH
32354: LD_VAR 0 2
32358: PUSH
32359: FOR_IN
32360: IFFALSE 32578
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32362: LD_ADDR_VAR 0 8
32366: PUSH
32367: LD_VAR 0 1
32371: PPUSH
32372: LD_VAR 0 6
32376: PUSH
32377: LD_INT 1
32379: ARRAY
32380: PPUSH
32381: LD_VAR 0 6
32385: PUSH
32386: LD_INT 2
32388: ARRAY
32389: PPUSH
32390: CALL_OW 297
32394: ST_TO_ADDR
// if not Count ( result ) then
32395: LD_VAR 0 5
32399: PPUSH
32400: CALL 28912 0 1
32404: NOT
32405: IFFALSE 32438
// begin result := Join ( result , [ i , tmp ] ) ;
32407: LD_ADDR_VAR 0 5
32411: PUSH
32412: LD_VAR 0 5
32416: PPUSH
32417: LD_VAR 0 6
32421: PUSH
32422: LD_VAR 0 8
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PPUSH
32431: CALL 64888 0 2
32435: ST_TO_ADDR
// continue ;
32436: GO 32359
// end ; if result [ result ] [ 2 ] <= tmp then
32438: LD_VAR 0 5
32442: PUSH
32443: LD_VAR 0 5
32447: ARRAY
32448: PUSH
32449: LD_INT 2
32451: ARRAY
32452: PUSH
32453: LD_VAR 0 8
32457: LESSEQUAL
32458: IFFALSE 32491
// result := Join ( result , [ i , tmp ] ) else
32460: LD_ADDR_VAR 0 5
32464: PUSH
32465: LD_VAR 0 5
32469: PPUSH
32470: LD_VAR 0 6
32474: PUSH
32475: LD_VAR 0 8
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PPUSH
32484: CALL 64888 0 2
32488: ST_TO_ADDR
32489: GO 32576
// begin for j := 1 to Count ( result ) do
32491: LD_ADDR_VAR 0 7
32495: PUSH
32496: DOUBLE
32497: LD_INT 1
32499: DEC
32500: ST_TO_ADDR
32501: LD_VAR 0 5
32505: PPUSH
32506: CALL 28912 0 1
32510: PUSH
32511: FOR_TO
32512: IFFALSE 32574
// begin if tmp < result [ j ] [ 2 ] then
32514: LD_VAR 0 8
32518: PUSH
32519: LD_VAR 0 5
32523: PUSH
32524: LD_VAR 0 7
32528: ARRAY
32529: PUSH
32530: LD_INT 2
32532: ARRAY
32533: LESS
32534: IFFALSE 32572
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32536: LD_ADDR_VAR 0 5
32540: PUSH
32541: LD_VAR 0 5
32545: PPUSH
32546: LD_VAR 0 7
32550: PPUSH
32551: LD_VAR 0 6
32555: PUSH
32556: LD_VAR 0 8
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PPUSH
32565: CALL_OW 2
32569: ST_TO_ADDR
// break ;
32570: GO 32574
// end ; end ;
32572: GO 32511
32574: POP
32575: POP
// end ; end ;
32576: GO 32359
32578: POP
32579: POP
// if result and not asc then
32580: LD_VAR 0 5
32584: IFFALSE 32593
32586: PUSH
32587: LD_VAR 0 3
32591: NOT
32592: AND
32593: IFFALSE 32610
// result := ReverseArray ( result ) ;
32595: LD_ADDR_VAR 0 5
32599: PUSH
32600: LD_VAR 0 5
32604: PPUSH
32605: CALL 59968 0 1
32609: ST_TO_ADDR
// tmp := [ ] ;
32610: LD_ADDR_VAR 0 8
32614: PUSH
32615: EMPTY
32616: ST_TO_ADDR
// if mode then
32617: LD_VAR 0 4
32621: IFFALSE 32685
// begin for i := 1 to result do
32623: LD_ADDR_VAR 0 6
32627: PUSH
32628: DOUBLE
32629: LD_INT 1
32631: DEC
32632: ST_TO_ADDR
32633: LD_VAR 0 5
32637: PUSH
32638: FOR_TO
32639: IFFALSE 32673
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32641: LD_ADDR_VAR 0 8
32645: PUSH
32646: LD_VAR 0 8
32650: PPUSH
32651: LD_VAR 0 5
32655: PUSH
32656: LD_VAR 0 6
32660: ARRAY
32661: PUSH
32662: LD_INT 1
32664: ARRAY
32665: PPUSH
32666: CALL 64888 0 2
32670: ST_TO_ADDR
32671: GO 32638
32673: POP
32674: POP
// result := tmp ;
32675: LD_ADDR_VAR 0 5
32679: PUSH
32680: LD_VAR 0 8
32684: ST_TO_ADDR
// end ; end ;
32685: LD_VAR 0 5
32689: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32690: LD_INT 0
32692: PPUSH
32693: PPUSH
32694: PPUSH
32695: PPUSH
// if not list then
32696: LD_VAR 0 3
32700: NOT
32701: IFFALSE 32705
// exit ;
32703: GO 33095
// result := [ ] ;
32705: LD_ADDR_VAR 0 6
32709: PUSH
32710: EMPTY
32711: ST_TO_ADDR
// for i in list do
32712: LD_ADDR_VAR 0 7
32716: PUSH
32717: LD_VAR 0 3
32721: PUSH
32722: FOR_IN
32723: IFFALSE 32925
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32725: LD_ADDR_VAR 0 9
32729: PUSH
32730: LD_VAR 0 7
32734: PPUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: LD_VAR 0 2
32744: PPUSH
32745: CALL_OW 297
32749: ST_TO_ADDR
// if not result then
32750: LD_VAR 0 6
32754: NOT
32755: IFFALSE 32781
// result := [ [ i , tmp ] ] else
32757: LD_ADDR_VAR 0 6
32761: PUSH
32762: LD_VAR 0 7
32766: PUSH
32767: LD_VAR 0 9
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: ST_TO_ADDR
32779: GO 32923
// begin if result [ result ] [ 2 ] <= tmp then
32781: LD_VAR 0 6
32785: PUSH
32786: LD_VAR 0 6
32790: ARRAY
32791: PUSH
32792: LD_INT 2
32794: ARRAY
32795: PUSH
32796: LD_VAR 0 9
32800: LESSEQUAL
32801: IFFALSE 32843
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32803: LD_ADDR_VAR 0 6
32807: PUSH
32808: LD_VAR 0 6
32812: PPUSH
32813: LD_VAR 0 6
32817: PUSH
32818: LD_INT 1
32820: PLUS
32821: PPUSH
32822: LD_VAR 0 7
32826: PUSH
32827: LD_VAR 0 9
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PPUSH
32836: CALL_OW 2
32840: ST_TO_ADDR
32841: GO 32923
// for j := 1 to result do
32843: LD_ADDR_VAR 0 8
32847: PUSH
32848: DOUBLE
32849: LD_INT 1
32851: DEC
32852: ST_TO_ADDR
32853: LD_VAR 0 6
32857: PUSH
32858: FOR_TO
32859: IFFALSE 32921
// begin if tmp < result [ j ] [ 2 ] then
32861: LD_VAR 0 9
32865: PUSH
32866: LD_VAR 0 6
32870: PUSH
32871: LD_VAR 0 8
32875: ARRAY
32876: PUSH
32877: LD_INT 2
32879: ARRAY
32880: LESS
32881: IFFALSE 32919
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32883: LD_ADDR_VAR 0 6
32887: PUSH
32888: LD_VAR 0 6
32892: PPUSH
32893: LD_VAR 0 8
32897: PPUSH
32898: LD_VAR 0 7
32902: PUSH
32903: LD_VAR 0 9
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PPUSH
32912: CALL_OW 2
32916: ST_TO_ADDR
// break ;
32917: GO 32921
// end ; end ;
32919: GO 32858
32921: POP
32922: POP
// end ; end ;
32923: GO 32722
32925: POP
32926: POP
// if result and not asc then
32927: LD_VAR 0 6
32931: IFFALSE 32940
32933: PUSH
32934: LD_VAR 0 4
32938: NOT
32939: AND
32940: IFFALSE 33015
// begin tmp := result ;
32942: LD_ADDR_VAR 0 9
32946: PUSH
32947: LD_VAR 0 6
32951: ST_TO_ADDR
// for i = tmp downto 1 do
32952: LD_ADDR_VAR 0 7
32956: PUSH
32957: DOUBLE
32958: LD_VAR 0 9
32962: INC
32963: ST_TO_ADDR
32964: LD_INT 1
32966: PUSH
32967: FOR_DOWNTO
32968: IFFALSE 33013
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32970: LD_ADDR_VAR 0 6
32974: PUSH
32975: LD_VAR 0 6
32979: PPUSH
32980: LD_VAR 0 9
32984: PUSH
32985: LD_VAR 0 7
32989: MINUS
32990: PUSH
32991: LD_INT 1
32993: PLUS
32994: PPUSH
32995: LD_VAR 0 9
32999: PUSH
33000: LD_VAR 0 7
33004: ARRAY
33005: PPUSH
33006: CALL_OW 1
33010: ST_TO_ADDR
33011: GO 32967
33013: POP
33014: POP
// end ; tmp := [ ] ;
33015: LD_ADDR_VAR 0 9
33019: PUSH
33020: EMPTY
33021: ST_TO_ADDR
// if mode then
33022: LD_VAR 0 5
33026: IFFALSE 33095
// begin for i = 1 to result do
33028: LD_ADDR_VAR 0 7
33032: PUSH
33033: DOUBLE
33034: LD_INT 1
33036: DEC
33037: ST_TO_ADDR
33038: LD_VAR 0 6
33042: PUSH
33043: FOR_TO
33044: IFFALSE 33083
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33046: LD_ADDR_VAR 0 9
33050: PUSH
33051: LD_VAR 0 9
33055: PPUSH
33056: LD_VAR 0 7
33060: PPUSH
33061: LD_VAR 0 6
33065: PUSH
33066: LD_VAR 0 7
33070: ARRAY
33071: PUSH
33072: LD_INT 1
33074: ARRAY
33075: PPUSH
33076: CALL_OW 1
33080: ST_TO_ADDR
33081: GO 33043
33083: POP
33084: POP
// result := tmp ;
33085: LD_ADDR_VAR 0 6
33089: PUSH
33090: LD_VAR 0 9
33094: ST_TO_ADDR
// end ; end ;
33095: LD_VAR 0 6
33099: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33100: LD_INT 0
33102: PPUSH
33103: PPUSH
33104: PPUSH
33105: PPUSH
33106: PPUSH
33107: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33108: LD_ADDR_VAR 0 5
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: ST_TO_ADDR
// if not x or not y then
33130: LD_VAR 0 2
33134: NOT
33135: IFTRUE 33144
33137: PUSH
33138: LD_VAR 0 3
33142: NOT
33143: OR
33144: IFFALSE 33148
// exit ;
33146: GO 34804
// if not range then
33148: LD_VAR 0 4
33152: NOT
33153: IFFALSE 33163
// range := 10 ;
33155: LD_ADDR_VAR 0 4
33159: PUSH
33160: LD_INT 10
33162: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33163: LD_ADDR_VAR 0 8
33167: PUSH
33168: LD_INT 81
33170: PUSH
33171: LD_VAR 0 1
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 92
33182: PUSH
33183: LD_VAR 0 2
33187: PUSH
33188: LD_VAR 0 3
33192: PUSH
33193: LD_VAR 0 4
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: LD_INT 21
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: PPUSH
33226: CALL_OW 69
33230: ST_TO_ADDR
// if not tmp then
33231: LD_VAR 0 8
33235: NOT
33236: IFFALSE 33240
// exit ;
33238: GO 34804
// for i in tmp do
33240: LD_ADDR_VAR 0 6
33244: PUSH
33245: LD_VAR 0 8
33249: PUSH
33250: FOR_IN
33251: IFFALSE 34779
// begin points := [ 0 , 0 , 0 ] ;
33253: LD_ADDR_VAR 0 9
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: LIST
33271: ST_TO_ADDR
// bpoints := 1 ;
33272: LD_ADDR_VAR 0 10
33276: PUSH
33277: LD_INT 1
33279: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33280: LD_VAR 0 6
33284: PPUSH
33285: CALL_OW 247
33289: PUSH
33290: LD_INT 1
33292: DOUBLE
33293: EQUAL
33294: IFTRUE 33298
33296: GO 33880
33298: POP
// begin if GetClass ( i ) = 1 then
33299: LD_VAR 0 6
33303: PPUSH
33304: CALL_OW 257
33308: PUSH
33309: LD_INT 1
33311: EQUAL
33312: IFFALSE 33333
// points := [ 10 , 5 , 3 ] ;
33314: LD_ADDR_VAR 0 9
33318: PUSH
33319: LD_INT 10
33321: PUSH
33322: LD_INT 5
33324: PUSH
33325: LD_INT 3
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33333: LD_VAR 0 6
33337: PPUSH
33338: CALL_OW 257
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: LD_INT 4
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: IN
33357: IFFALSE 33378
// points := [ 3 , 2 , 1 ] ;
33359: LD_ADDR_VAR 0 9
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33378: LD_VAR 0 6
33382: PPUSH
33383: CALL_OW 257
33387: PUSH
33388: LD_INT 5
33390: EQUAL
33391: IFFALSE 33412
// points := [ 130 , 5 , 2 ] ;
33393: LD_ADDR_VAR 0 9
33397: PUSH
33398: LD_INT 130
33400: PUSH
33401: LD_INT 5
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33412: LD_VAR 0 6
33416: PPUSH
33417: CALL_OW 257
33421: PUSH
33422: LD_INT 8
33424: EQUAL
33425: IFFALSE 33446
// points := [ 35 , 35 , 30 ] ;
33427: LD_ADDR_VAR 0 9
33431: PUSH
33432: LD_INT 35
33434: PUSH
33435: LD_INT 35
33437: PUSH
33438: LD_INT 30
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33446: LD_VAR 0 6
33450: PPUSH
33451: CALL_OW 257
33455: PUSH
33456: LD_INT 9
33458: EQUAL
33459: IFFALSE 33480
// points := [ 20 , 55 , 40 ] ;
33461: LD_ADDR_VAR 0 9
33465: PUSH
33466: LD_INT 20
33468: PUSH
33469: LD_INT 55
33471: PUSH
33472: LD_INT 40
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33480: LD_VAR 0 6
33484: PPUSH
33485: CALL_OW 257
33489: PUSH
33490: LD_INT 12
33492: PUSH
33493: LD_INT 16
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: IN
33500: IFFALSE 33521
// points := [ 5 , 3 , 2 ] ;
33502: LD_ADDR_VAR 0 9
33506: PUSH
33507: LD_INT 5
33509: PUSH
33510: LD_INT 3
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33521: LD_VAR 0 6
33525: PPUSH
33526: CALL_OW 257
33530: PUSH
33531: LD_INT 17
33533: EQUAL
33534: IFFALSE 33555
// points := [ 100 , 50 , 75 ] ;
33536: LD_ADDR_VAR 0 9
33540: PUSH
33541: LD_INT 100
33543: PUSH
33544: LD_INT 50
33546: PUSH
33547: LD_INT 75
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33555: LD_VAR 0 6
33559: PPUSH
33560: CALL_OW 257
33564: PUSH
33565: LD_INT 15
33567: EQUAL
33568: IFFALSE 33589
// points := [ 10 , 5 , 3 ] ;
33570: LD_ADDR_VAR 0 9
33574: PUSH
33575: LD_INT 10
33577: PUSH
33578: LD_INT 5
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33589: LD_VAR 0 6
33593: PPUSH
33594: CALL_OW 257
33598: PUSH
33599: LD_INT 14
33601: EQUAL
33602: IFFALSE 33623
// points := [ 10 , 0 , 0 ] ;
33604: LD_ADDR_VAR 0 9
33608: PUSH
33609: LD_INT 10
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33623: LD_VAR 0 6
33627: PPUSH
33628: CALL_OW 257
33632: PUSH
33633: LD_INT 11
33635: EQUAL
33636: IFFALSE 33657
// points := [ 30 , 10 , 5 ] ;
33638: LD_ADDR_VAR 0 9
33642: PUSH
33643: LD_INT 30
33645: PUSH
33646: LD_INT 10
33648: PUSH
33649: LD_INT 5
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33657: LD_VAR 0 1
33661: PPUSH
33662: LD_INT 5
33664: PPUSH
33665: CALL_OW 321
33669: PUSH
33670: LD_INT 2
33672: EQUAL
33673: IFFALSE 33690
// bpoints := bpoints * 1.8 ;
33675: LD_ADDR_VAR 0 10
33679: PUSH
33680: LD_VAR 0 10
33684: PUSH
33685: LD_REAL  1.80000000000000E+0000
33688: MUL
33689: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33690: LD_VAR 0 6
33694: PPUSH
33695: CALL_OW 257
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: LD_INT 3
33708: PUSH
33709: LD_INT 4
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: IN
33718: IFFALSE 33738
33720: PUSH
33721: LD_VAR 0 1
33725: PPUSH
33726: LD_INT 51
33728: PPUSH
33729: CALL_OW 321
33733: PUSH
33734: LD_INT 2
33736: EQUAL
33737: AND
33738: IFFALSE 33755
// bpoints := bpoints * 1.2 ;
33740: LD_ADDR_VAR 0 10
33744: PUSH
33745: LD_VAR 0 10
33749: PUSH
33750: LD_REAL  1.20000000000000E+0000
33753: MUL
33754: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33755: LD_VAR 0 6
33759: PPUSH
33760: CALL_OW 257
33764: PUSH
33765: LD_INT 5
33767: PUSH
33768: LD_INT 7
33770: PUSH
33771: LD_INT 9
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: IN
33779: IFFALSE 33799
33781: PUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: LD_INT 52
33789: PPUSH
33790: CALL_OW 321
33794: PUSH
33795: LD_INT 2
33797: EQUAL
33798: AND
33799: IFFALSE 33816
// bpoints := bpoints * 1.5 ;
33801: LD_ADDR_VAR 0 10
33805: PUSH
33806: LD_VAR 0 10
33810: PUSH
33811: LD_REAL  1.50000000000000E+0000
33814: MUL
33815: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33816: LD_VAR 0 1
33820: PPUSH
33821: LD_INT 66
33823: PPUSH
33824: CALL_OW 321
33828: PUSH
33829: LD_INT 2
33831: EQUAL
33832: IFFALSE 33849
// bpoints := bpoints * 1.1 ;
33834: LD_ADDR_VAR 0 10
33838: PUSH
33839: LD_VAR 0 10
33843: PUSH
33844: LD_REAL  1.10000000000000E+0000
33847: MUL
33848: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33849: LD_ADDR_VAR 0 10
33853: PUSH
33854: LD_VAR 0 10
33858: PUSH
33859: LD_VAR 0 6
33863: PPUSH
33864: LD_INT 1
33866: PPUSH
33867: CALL_OW 259
33871: PUSH
33872: LD_REAL  1.15000000000000E+0000
33875: MUL
33876: MUL
33877: ST_TO_ADDR
// end ; unit_vehicle :
33878: GO 34708
33880: LD_INT 2
33882: DOUBLE
33883: EQUAL
33884: IFTRUE 33888
33886: GO 34696
33888: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33889: LD_VAR 0 6
33893: PPUSH
33894: CALL_OW 264
33898: PUSH
33899: LD_INT 2
33901: PUSH
33902: LD_INT 42
33904: PUSH
33905: LD_INT 24
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: IN
33913: IFFALSE 33934
// points := [ 25 , 5 , 3 ] ;
33915: LD_ADDR_VAR 0 9
33919: PUSH
33920: LD_INT 25
33922: PUSH
33923: LD_INT 5
33925: PUSH
33926: LD_INT 3
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33934: LD_VAR 0 6
33938: PPUSH
33939: CALL_OW 264
33943: PUSH
33944: LD_INT 4
33946: PUSH
33947: LD_INT 43
33949: PUSH
33950: LD_INT 25
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: IN
33958: IFFALSE 33979
// points := [ 40 , 15 , 5 ] ;
33960: LD_ADDR_VAR 0 9
33964: PUSH
33965: LD_INT 40
33967: PUSH
33968: LD_INT 15
33970: PUSH
33971: LD_INT 5
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: LIST
33978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33979: LD_VAR 0 6
33983: PPUSH
33984: CALL_OW 264
33988: PUSH
33989: LD_INT 3
33991: PUSH
33992: LD_INT 23
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: IN
33999: IFFALSE 34020
// points := [ 7 , 25 , 8 ] ;
34001: LD_ADDR_VAR 0 9
34005: PUSH
34006: LD_INT 7
34008: PUSH
34009: LD_INT 25
34011: PUSH
34012: LD_INT 8
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34020: LD_VAR 0 6
34024: PPUSH
34025: CALL_OW 264
34029: PUSH
34030: LD_INT 5
34032: PUSH
34033: LD_INT 27
34035: PUSH
34036: LD_INT 44
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: IN
34044: IFFALSE 34065
// points := [ 14 , 50 , 16 ] ;
34046: LD_ADDR_VAR 0 9
34050: PUSH
34051: LD_INT 14
34053: PUSH
34054: LD_INT 50
34056: PUSH
34057: LD_INT 16
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34065: LD_VAR 0 6
34069: PPUSH
34070: CALL_OW 264
34074: PUSH
34075: LD_INT 6
34077: PUSH
34078: LD_INT 46
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: IN
34085: IFFALSE 34106
// points := [ 32 , 120 , 70 ] ;
34087: LD_ADDR_VAR 0 9
34091: PUSH
34092: LD_INT 32
34094: PUSH
34095: LD_INT 120
34097: PUSH
34098: LD_INT 70
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: LIST
34105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34106: LD_VAR 0 6
34110: PPUSH
34111: CALL_OW 264
34115: PUSH
34116: LD_INT 7
34118: PUSH
34119: LD_INT 28
34121: PUSH
34122: LD_INT 45
34124: PUSH
34125: LD_INT 92
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: IN
34134: IFFALSE 34155
// points := [ 35 , 20 , 45 ] ;
34136: LD_ADDR_VAR 0 9
34140: PUSH
34141: LD_INT 35
34143: PUSH
34144: LD_INT 20
34146: PUSH
34147: LD_INT 45
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34155: LD_VAR 0 6
34159: PPUSH
34160: CALL_OW 264
34164: PUSH
34165: LD_INT 47
34167: PUSH
34168: EMPTY
34169: LIST
34170: IN
34171: IFFALSE 34192
// points := [ 67 , 45 , 75 ] ;
34173: LD_ADDR_VAR 0 9
34177: PUSH
34178: LD_INT 67
34180: PUSH
34181: LD_INT 45
34183: PUSH
34184: LD_INT 75
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34192: LD_VAR 0 6
34196: PPUSH
34197: CALL_OW 264
34201: PUSH
34202: LD_INT 26
34204: PUSH
34205: EMPTY
34206: LIST
34207: IN
34208: IFFALSE 34229
// points := [ 120 , 30 , 80 ] ;
34210: LD_ADDR_VAR 0 9
34214: PUSH
34215: LD_INT 120
34217: PUSH
34218: LD_INT 30
34220: PUSH
34221: LD_INT 80
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34229: LD_VAR 0 6
34233: PPUSH
34234: CALL_OW 264
34238: PUSH
34239: LD_INT 22
34241: PUSH
34242: EMPTY
34243: LIST
34244: IN
34245: IFFALSE 34266
// points := [ 40 , 1 , 1 ] ;
34247: LD_ADDR_VAR 0 9
34251: PUSH
34252: LD_INT 40
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34266: LD_VAR 0 6
34270: PPUSH
34271: CALL_OW 264
34275: PUSH
34276: LD_INT 29
34278: PUSH
34279: EMPTY
34280: LIST
34281: IN
34282: IFFALSE 34303
// points := [ 70 , 200 , 400 ] ;
34284: LD_ADDR_VAR 0 9
34288: PUSH
34289: LD_INT 70
34291: PUSH
34292: LD_INT 200
34294: PUSH
34295: LD_INT 400
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34303: LD_VAR 0 6
34307: PPUSH
34308: CALL_OW 264
34312: PUSH
34313: LD_INT 14
34315: PUSH
34316: LD_INT 53
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: IN
34323: IFFALSE 34344
// points := [ 40 , 10 , 20 ] ;
34325: LD_ADDR_VAR 0 9
34329: PUSH
34330: LD_INT 40
34332: PUSH
34333: LD_INT 10
34335: PUSH
34336: LD_INT 20
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34344: LD_VAR 0 6
34348: PPUSH
34349: CALL_OW 264
34353: PUSH
34354: LD_INT 9
34356: PUSH
34357: EMPTY
34358: LIST
34359: IN
34360: IFFALSE 34381
// points := [ 5 , 70 , 20 ] ;
34362: LD_ADDR_VAR 0 9
34366: PUSH
34367: LD_INT 5
34369: PUSH
34370: LD_INT 70
34372: PUSH
34373: LD_INT 20
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34381: LD_VAR 0 6
34385: PPUSH
34386: CALL_OW 264
34390: PUSH
34391: LD_INT 10
34393: PUSH
34394: EMPTY
34395: LIST
34396: IN
34397: IFFALSE 34418
// points := [ 35 , 110 , 70 ] ;
34399: LD_ADDR_VAR 0 9
34403: PUSH
34404: LD_INT 35
34406: PUSH
34407: LD_INT 110
34409: PUSH
34410: LD_INT 70
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34418: LD_VAR 0 6
34422: PPUSH
34423: CALL_OW 265
34427: PUSH
34428: LD_INT 25
34430: EQUAL
34431: IFFALSE 34452
// points := [ 80 , 65 , 100 ] ;
34433: LD_ADDR_VAR 0 9
34437: PUSH
34438: LD_INT 80
34440: PUSH
34441: LD_INT 65
34443: PUSH
34444: LD_INT 100
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34452: LD_VAR 0 6
34456: PPUSH
34457: CALL_OW 263
34461: PUSH
34462: LD_INT 1
34464: EQUAL
34465: IFFALSE 34500
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34467: LD_ADDR_VAR 0 10
34471: PUSH
34472: LD_VAR 0 10
34476: PUSH
34477: LD_VAR 0 6
34481: PPUSH
34482: CALL_OW 311
34486: PPUSH
34487: LD_INT 3
34489: PPUSH
34490: CALL_OW 259
34494: PUSH
34495: LD_INT 4
34497: MUL
34498: MUL
34499: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34500: LD_VAR 0 6
34504: PPUSH
34505: CALL_OW 263
34509: PUSH
34510: LD_INT 2
34512: EQUAL
34513: IFFALSE 34564
// begin j := IsControledBy ( i ) ;
34515: LD_ADDR_VAR 0 7
34519: PUSH
34520: LD_VAR 0 6
34524: PPUSH
34525: CALL_OW 312
34529: ST_TO_ADDR
// if j then
34530: LD_VAR 0 7
34534: IFFALSE 34564
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34536: LD_ADDR_VAR 0 10
34540: PUSH
34541: LD_VAR 0 10
34545: PUSH
34546: LD_VAR 0 7
34550: PPUSH
34551: LD_INT 3
34553: PPUSH
34554: CALL_OW 259
34558: PUSH
34559: LD_INT 3
34561: MUL
34562: MUL
34563: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34564: LD_VAR 0 6
34568: PPUSH
34569: CALL_OW 264
34573: PUSH
34574: LD_INT 5
34576: PUSH
34577: LD_INT 6
34579: PUSH
34580: LD_INT 46
34582: PUSH
34583: LD_INT 44
34585: PUSH
34586: LD_INT 47
34588: PUSH
34589: LD_INT 45
34591: PUSH
34592: LD_INT 28
34594: PUSH
34595: LD_INT 7
34597: PUSH
34598: LD_INT 27
34600: PUSH
34601: LD_INT 29
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: IN
34616: IFFALSE 34636
34618: PUSH
34619: LD_VAR 0 1
34623: PPUSH
34624: LD_INT 52
34626: PPUSH
34627: CALL_OW 321
34631: PUSH
34632: LD_INT 2
34634: EQUAL
34635: AND
34636: IFFALSE 34653
// bpoints := bpoints * 1.2 ;
34638: LD_ADDR_VAR 0 10
34642: PUSH
34643: LD_VAR 0 10
34647: PUSH
34648: LD_REAL  1.20000000000000E+0000
34651: MUL
34652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34653: LD_VAR 0 6
34657: PPUSH
34658: CALL_OW 264
34662: PUSH
34663: LD_INT 6
34665: PUSH
34666: LD_INT 46
34668: PUSH
34669: LD_INT 47
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: IN
34677: IFFALSE 34694
// bpoints := bpoints * 1.2 ;
34679: LD_ADDR_VAR 0 10
34683: PUSH
34684: LD_VAR 0 10
34688: PUSH
34689: LD_REAL  1.20000000000000E+0000
34692: MUL
34693: ST_TO_ADDR
// end ; unit_building :
34694: GO 34708
34696: LD_INT 3
34698: DOUBLE
34699: EQUAL
34700: IFTRUE 34704
34702: GO 34707
34704: POP
// ; end ;
34705: GO 34708
34707: POP
// for j = 1 to 3 do
34708: LD_ADDR_VAR 0 7
34712: PUSH
34713: DOUBLE
34714: LD_INT 1
34716: DEC
34717: ST_TO_ADDR
34718: LD_INT 3
34720: PUSH
34721: FOR_TO
34722: IFFALSE 34775
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34724: LD_ADDR_VAR 0 5
34728: PUSH
34729: LD_VAR 0 5
34733: PPUSH
34734: LD_VAR 0 7
34738: PPUSH
34739: LD_VAR 0 5
34743: PUSH
34744: LD_VAR 0 7
34748: ARRAY
34749: PUSH
34750: LD_VAR 0 9
34754: PUSH
34755: LD_VAR 0 7
34759: ARRAY
34760: PUSH
34761: LD_VAR 0 10
34765: MUL
34766: PLUS
34767: PPUSH
34768: CALL_OW 1
34772: ST_TO_ADDR
34773: GO 34721
34775: POP
34776: POP
// end ;
34777: GO 33250
34779: POP
34780: POP
// result := Replace ( result , 4 , tmp ) ;
34781: LD_ADDR_VAR 0 5
34785: PUSH
34786: LD_VAR 0 5
34790: PPUSH
34791: LD_INT 4
34793: PPUSH
34794: LD_VAR 0 8
34798: PPUSH
34799: CALL_OW 1
34803: ST_TO_ADDR
// end ;
34804: LD_VAR 0 5
34808: RET
// export function DangerAtRange ( unit , range ) ; begin
34809: LD_INT 0
34811: PPUSH
// if not unit then
34812: LD_VAR 0 1
34816: NOT
34817: IFFALSE 34821
// exit ;
34819: GO 34866
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34821: LD_ADDR_VAR 0 3
34825: PUSH
34826: LD_VAR 0 1
34830: PPUSH
34831: CALL_OW 255
34835: PPUSH
34836: LD_VAR 0 1
34840: PPUSH
34841: CALL_OW 250
34845: PPUSH
34846: LD_VAR 0 1
34850: PPUSH
34851: CALL_OW 251
34855: PPUSH
34856: LD_VAR 0 2
34860: PPUSH
34861: CALL 33100 0 4
34865: ST_TO_ADDR
// end ;
34866: LD_VAR 0 3
34870: RET
// export function DangerInArea ( side , area ) ; begin
34871: LD_INT 0
34873: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34874: LD_ADDR_VAR 0 3
34878: PUSH
34879: LD_VAR 0 2
34883: PPUSH
34884: LD_INT 81
34886: PUSH
34887: LD_VAR 0 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PPUSH
34896: CALL_OW 70
34900: ST_TO_ADDR
// end ;
34901: LD_VAR 0 3
34905: RET
// export function IsExtension ( b ) ; begin
34906: LD_INT 0
34908: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34909: LD_ADDR_VAR 0 2
34913: PUSH
34914: LD_VAR 0 1
34918: PUSH
34919: LD_INT 23
34921: PUSH
34922: LD_INT 20
34924: PUSH
34925: LD_INT 22
34927: PUSH
34928: LD_INT 17
34930: PUSH
34931: LD_INT 24
34933: PUSH
34934: LD_INT 21
34936: PUSH
34937: LD_INT 19
34939: PUSH
34940: LD_INT 16
34942: PUSH
34943: LD_INT 25
34945: PUSH
34946: LD_INT 18
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: IN
34961: ST_TO_ADDR
// end ;
34962: LD_VAR 0 2
34966: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34967: LD_INT 0
34969: PPUSH
34970: PPUSH
34971: PPUSH
// result := [ ] ;
34972: LD_ADDR_VAR 0 4
34976: PUSH
34977: EMPTY
34978: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34979: LD_ADDR_VAR 0 5
34983: PUSH
34984: LD_VAR 0 2
34988: PPUSH
34989: LD_INT 21
34991: PUSH
34992: LD_INT 3
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PPUSH
34999: CALL_OW 70
35003: ST_TO_ADDR
// if not tmp then
35004: LD_VAR 0 5
35008: NOT
35009: IFFALSE 35013
// exit ;
35011: GO 35077
// if checkLink then
35013: LD_VAR 0 3
35017: IFFALSE 35067
// begin for i in tmp do
35019: LD_ADDR_VAR 0 6
35023: PUSH
35024: LD_VAR 0 5
35028: PUSH
35029: FOR_IN
35030: IFFALSE 35065
// if GetBase ( i ) <> base then
35032: LD_VAR 0 6
35036: PPUSH
35037: CALL_OW 274
35041: PUSH
35042: LD_VAR 0 1
35046: NONEQUAL
35047: IFFALSE 35063
// ComLinkToBase ( base , i ) ;
35049: LD_VAR 0 1
35053: PPUSH
35054: LD_VAR 0 6
35058: PPUSH
35059: CALL_OW 169
35063: GO 35029
35065: POP
35066: POP
// end ; result := tmp ;
35067: LD_ADDR_VAR 0 4
35071: PUSH
35072: LD_VAR 0 5
35076: ST_TO_ADDR
// end ;
35077: LD_VAR 0 4
35081: RET
// export function ComComplete ( units , b ) ; var i ; begin
35082: LD_INT 0
35084: PPUSH
35085: PPUSH
// if not units then
35086: LD_VAR 0 1
35090: NOT
35091: IFFALSE 35095
// exit ;
35093: GO 35185
// for i in units do
35095: LD_ADDR_VAR 0 4
35099: PUSH
35100: LD_VAR 0 1
35104: PUSH
35105: FOR_IN
35106: IFFALSE 35183
// if BuildingStatus ( b ) = bs_build then
35108: LD_VAR 0 2
35112: PPUSH
35113: CALL_OW 461
35117: PUSH
35118: LD_INT 1
35120: EQUAL
35121: IFFALSE 35181
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35123: LD_VAR 0 4
35127: PPUSH
35128: LD_STRING h
35130: PUSH
35131: LD_VAR 0 2
35135: PPUSH
35136: CALL_OW 250
35140: PUSH
35141: LD_VAR 0 2
35145: PPUSH
35146: CALL_OW 251
35150: PUSH
35151: LD_VAR 0 2
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: PUSH
35174: EMPTY
35175: LIST
35176: PPUSH
35177: CALL_OW 446
35181: GO 35105
35183: POP
35184: POP
// end ;
35185: LD_VAR 0 3
35189: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35190: LD_INT 0
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35198: LD_VAR 0 1
35202: NOT
35203: IFTRUE 35220
35205: PUSH
35206: LD_VAR 0 1
35210: PPUSH
35211: CALL_OW 263
35215: PUSH
35216: LD_INT 2
35218: NONEQUAL
35219: OR
35220: IFFALSE 35224
// exit ;
35222: GO 35540
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35224: LD_ADDR_VAR 0 6
35228: PUSH
35229: LD_INT 22
35231: PUSH
35232: LD_VAR 0 1
35236: PPUSH
35237: CALL_OW 255
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: LD_INT 30
35251: PUSH
35252: LD_INT 36
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 34
35261: PUSH
35262: LD_INT 31
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PPUSH
35278: CALL_OW 69
35282: ST_TO_ADDR
// if not tmp then
35283: LD_VAR 0 6
35287: NOT
35288: IFFALSE 35292
// exit ;
35290: GO 35540
// result := [ ] ;
35292: LD_ADDR_VAR 0 2
35296: PUSH
35297: EMPTY
35298: ST_TO_ADDR
// for i in tmp do
35299: LD_ADDR_VAR 0 3
35303: PUSH
35304: LD_VAR 0 6
35308: PUSH
35309: FOR_IN
35310: IFFALSE 35381
// begin t := UnitsInside ( i ) ;
35312: LD_ADDR_VAR 0 4
35316: PUSH
35317: LD_VAR 0 3
35321: PPUSH
35322: CALL_OW 313
35326: ST_TO_ADDR
// if t then
35327: LD_VAR 0 4
35331: IFFALSE 35379
// for j in t do
35333: LD_ADDR_VAR 0 7
35337: PUSH
35338: LD_VAR 0 4
35342: PUSH
35343: FOR_IN
35344: IFFALSE 35377
// result := Replace ( result , result + 1 , j ) ;
35346: LD_ADDR_VAR 0 2
35350: PUSH
35351: LD_VAR 0 2
35355: PPUSH
35356: LD_VAR 0 2
35360: PUSH
35361: LD_INT 1
35363: PLUS
35364: PPUSH
35365: LD_VAR 0 7
35369: PPUSH
35370: CALL_OW 1
35374: ST_TO_ADDR
35375: GO 35343
35377: POP
35378: POP
// end ;
35379: GO 35309
35381: POP
35382: POP
// if not result then
35383: LD_VAR 0 2
35387: NOT
35388: IFFALSE 35392
// exit ;
35390: GO 35540
// mech := result [ 1 ] ;
35392: LD_ADDR_VAR 0 5
35396: PUSH
35397: LD_VAR 0 2
35401: PUSH
35402: LD_INT 1
35404: ARRAY
35405: ST_TO_ADDR
// if result > 1 then
35406: LD_VAR 0 2
35410: PUSH
35411: LD_INT 1
35413: GREATER
35414: IFFALSE 35526
// begin for i = 2 to result do
35416: LD_ADDR_VAR 0 3
35420: PUSH
35421: DOUBLE
35422: LD_INT 2
35424: DEC
35425: ST_TO_ADDR
35426: LD_VAR 0 2
35430: PUSH
35431: FOR_TO
35432: IFFALSE 35524
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35434: LD_ADDR_VAR 0 4
35438: PUSH
35439: LD_VAR 0 2
35443: PUSH
35444: LD_VAR 0 3
35448: ARRAY
35449: PPUSH
35450: LD_INT 3
35452: PPUSH
35453: CALL_OW 259
35457: PUSH
35458: LD_VAR 0 2
35462: PUSH
35463: LD_VAR 0 3
35467: ARRAY
35468: PPUSH
35469: CALL_OW 432
35473: MINUS
35474: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35475: LD_VAR 0 4
35479: PUSH
35480: LD_VAR 0 5
35484: PPUSH
35485: LD_INT 3
35487: PPUSH
35488: CALL_OW 259
35492: PUSH
35493: LD_VAR 0 5
35497: PPUSH
35498: CALL_OW 432
35502: MINUS
35503: GREATEREQUAL
35504: IFFALSE 35522
// mech := result [ i ] ;
35506: LD_ADDR_VAR 0 5
35510: PUSH
35511: LD_VAR 0 2
35515: PUSH
35516: LD_VAR 0 3
35520: ARRAY
35521: ST_TO_ADDR
// end ;
35522: GO 35431
35524: POP
35525: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35526: LD_VAR 0 1
35530: PPUSH
35531: LD_VAR 0 5
35535: PPUSH
35536: CALL_OW 135
// end ;
35540: LD_VAR 0 2
35544: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35545: LD_INT 0
35547: PPUSH
35548: PPUSH
35549: PPUSH
35550: PPUSH
35551: PPUSH
35552: PPUSH
35553: PPUSH
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
// result := [ ] ;
35560: LD_ADDR_VAR 0 7
35564: PUSH
35565: EMPTY
35566: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35567: LD_VAR 0 1
35571: PPUSH
35572: CALL_OW 266
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: IN
35587: NOT
35588: IFFALSE 35592
// exit ;
35590: GO 37232
// if name then
35592: LD_VAR 0 3
35596: IFFALSE 35612
// SetBName ( base_dep , name ) ;
35598: LD_VAR 0 1
35602: PPUSH
35603: LD_VAR 0 3
35607: PPUSH
35608: CALL_OW 500
// base := GetBase ( base_dep ) ;
35612: LD_ADDR_VAR 0 15
35616: PUSH
35617: LD_VAR 0 1
35621: PPUSH
35622: CALL_OW 274
35626: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35627: LD_ADDR_VAR 0 16
35631: PUSH
35632: LD_VAR 0 1
35636: PPUSH
35637: CALL_OW 255
35641: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35642: LD_ADDR_VAR 0 17
35646: PUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 248
35656: ST_TO_ADDR
// if sources then
35657: LD_VAR 0 5
35661: IFFALSE 35708
// for i = 1 to 3 do
35663: LD_ADDR_VAR 0 8
35667: PUSH
35668: DOUBLE
35669: LD_INT 1
35671: DEC
35672: ST_TO_ADDR
35673: LD_INT 3
35675: PUSH
35676: FOR_TO
35677: IFFALSE 35706
// AddResourceType ( base , i , sources [ i ] ) ;
35679: LD_VAR 0 15
35683: PPUSH
35684: LD_VAR 0 8
35688: PPUSH
35689: LD_VAR 0 5
35693: PUSH
35694: LD_VAR 0 8
35698: ARRAY
35699: PPUSH
35700: CALL_OW 276
35704: GO 35676
35706: POP
35707: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35708: LD_ADDR_VAR 0 18
35712: PUSH
35713: LD_VAR 0 15
35717: PPUSH
35718: LD_VAR 0 2
35722: PPUSH
35723: LD_INT 1
35725: PPUSH
35726: CALL 34967 0 3
35730: ST_TO_ADDR
// InitHc ;
35731: CALL_OW 19
// InitUc ;
35735: CALL_OW 18
// uc_side := side ;
35739: LD_ADDR_OWVAR 20
35743: PUSH
35744: LD_VAR 0 16
35748: ST_TO_ADDR
// uc_nation := nation ;
35749: LD_ADDR_OWVAR 21
35753: PUSH
35754: LD_VAR 0 17
35758: ST_TO_ADDR
// if buildings then
35759: LD_VAR 0 18
35763: IFFALSE 37091
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35765: LD_ADDR_VAR 0 19
35769: PUSH
35770: LD_VAR 0 18
35774: PPUSH
35775: LD_INT 2
35777: PUSH
35778: LD_INT 30
35780: PUSH
35781: LD_INT 29
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 30
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: PPUSH
35803: CALL_OW 72
35807: ST_TO_ADDR
// if tmp then
35808: LD_VAR 0 19
35812: IFFALSE 35860
// for i in tmp do
35814: LD_ADDR_VAR 0 8
35818: PUSH
35819: LD_VAR 0 19
35823: PUSH
35824: FOR_IN
35825: IFFALSE 35858
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35827: LD_VAR 0 8
35831: PPUSH
35832: CALL_OW 250
35836: PPUSH
35837: LD_VAR 0 8
35841: PPUSH
35842: CALL_OW 251
35846: PPUSH
35847: LD_VAR 0 16
35851: PPUSH
35852: CALL_OW 441
35856: GO 35824
35858: POP
35859: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35860: LD_VAR 0 18
35864: PPUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 30
35870: PUSH
35871: LD_INT 32
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 30
35880: PUSH
35881: LD_INT 33
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: PPUSH
35893: CALL_OW 72
35897: IFFALSE 35985
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35899: LD_ADDR_VAR 0 8
35903: PUSH
35904: LD_VAR 0 18
35908: PPUSH
35909: LD_INT 2
35911: PUSH
35912: LD_INT 30
35914: PUSH
35915: LD_INT 32
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 30
35924: PUSH
35925: LD_INT 33
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: PPUSH
35937: CALL_OW 72
35941: PUSH
35942: FOR_IN
35943: IFFALSE 35983
// begin if not GetBWeapon ( i ) then
35945: LD_VAR 0 8
35949: PPUSH
35950: CALL_OW 269
35954: NOT
35955: IFFALSE 35981
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35957: LD_VAR 0 8
35961: PPUSH
35962: LD_VAR 0 8
35966: PPUSH
35967: LD_VAR 0 2
35971: PPUSH
35972: CALL 37237 0 2
35976: PPUSH
35977: CALL_OW 431
// end ;
35981: GO 35942
35983: POP
35984: POP
// end ; for i = 1 to personel do
35985: LD_ADDR_VAR 0 8
35989: PUSH
35990: DOUBLE
35991: LD_INT 1
35993: DEC
35994: ST_TO_ADDR
35995: LD_VAR 0 6
35999: PUSH
36000: FOR_TO
36001: IFFALSE 37071
// begin if i > 4 then
36003: LD_VAR 0 8
36007: PUSH
36008: LD_INT 4
36010: GREATER
36011: IFFALSE 36015
// break ;
36013: GO 37071
// case i of 1 :
36015: LD_VAR 0 8
36019: PUSH
36020: LD_INT 1
36022: DOUBLE
36023: EQUAL
36024: IFTRUE 36028
36026: GO 36108
36028: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36029: LD_ADDR_VAR 0 12
36033: PUSH
36034: LD_VAR 0 18
36038: PPUSH
36039: LD_INT 22
36041: PUSH
36042: LD_VAR 0 16
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 58
36053: PUSH
36054: EMPTY
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: LD_INT 30
36062: PUSH
36063: LD_INT 32
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 30
36072: PUSH
36073: LD_INT 4
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 30
36082: PUSH
36083: LD_INT 5
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: PPUSH
36101: CALL_OW 72
36105: ST_TO_ADDR
36106: GO 36330
36108: LD_INT 2
36110: DOUBLE
36111: EQUAL
36112: IFTRUE 36116
36114: GO 36178
36116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36117: LD_ADDR_VAR 0 12
36121: PUSH
36122: LD_VAR 0 18
36126: PPUSH
36127: LD_INT 22
36129: PUSH
36130: LD_VAR 0 16
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 30
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 30
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PPUSH
36171: CALL_OW 72
36175: ST_TO_ADDR
36176: GO 36330
36178: LD_INT 3
36180: DOUBLE
36181: EQUAL
36182: IFTRUE 36186
36184: GO 36248
36186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36187: LD_ADDR_VAR 0 12
36191: PUSH
36192: LD_VAR 0 18
36196: PPUSH
36197: LD_INT 22
36199: PUSH
36200: LD_VAR 0 16
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: LD_INT 30
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 30
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PPUSH
36241: CALL_OW 72
36245: ST_TO_ADDR
36246: GO 36330
36248: LD_INT 4
36250: DOUBLE
36251: EQUAL
36252: IFTRUE 36256
36254: GO 36329
36256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36257: LD_ADDR_VAR 0 12
36261: PUSH
36262: LD_VAR 0 18
36266: PPUSH
36267: LD_INT 22
36269: PUSH
36270: LD_VAR 0 16
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: LD_INT 30
36284: PUSH
36285: LD_INT 6
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 30
36294: PUSH
36295: LD_INT 7
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 30
36304: PUSH
36305: LD_INT 8
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PPUSH
36322: CALL_OW 72
36326: ST_TO_ADDR
36327: GO 36330
36329: POP
// if i = 1 then
36330: LD_VAR 0 8
36334: PUSH
36335: LD_INT 1
36337: EQUAL
36338: IFFALSE 36449
// begin tmp := [ ] ;
36340: LD_ADDR_VAR 0 19
36344: PUSH
36345: EMPTY
36346: ST_TO_ADDR
// for j in f do
36347: LD_ADDR_VAR 0 9
36351: PUSH
36352: LD_VAR 0 12
36356: PUSH
36357: FOR_IN
36358: IFFALSE 36431
// if GetBType ( j ) = b_bunker then
36360: LD_VAR 0 9
36364: PPUSH
36365: CALL_OW 266
36369: PUSH
36370: LD_INT 32
36372: EQUAL
36373: IFFALSE 36400
// tmp := Insert ( tmp , 1 , j ) else
36375: LD_ADDR_VAR 0 19
36379: PUSH
36380: LD_VAR 0 19
36384: PPUSH
36385: LD_INT 1
36387: PPUSH
36388: LD_VAR 0 9
36392: PPUSH
36393: CALL_OW 2
36397: ST_TO_ADDR
36398: GO 36429
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36400: LD_ADDR_VAR 0 19
36404: PUSH
36405: LD_VAR 0 19
36409: PPUSH
36410: LD_VAR 0 19
36414: PUSH
36415: LD_INT 1
36417: PLUS
36418: PPUSH
36419: LD_VAR 0 9
36423: PPUSH
36424: CALL_OW 2
36428: ST_TO_ADDR
36429: GO 36357
36431: POP
36432: POP
// if tmp then
36433: LD_VAR 0 19
36437: IFFALSE 36449
// f := tmp ;
36439: LD_ADDR_VAR 0 12
36443: PUSH
36444: LD_VAR 0 19
36448: ST_TO_ADDR
// end ; x := personel [ i ] ;
36449: LD_ADDR_VAR 0 13
36453: PUSH
36454: LD_VAR 0 6
36458: PUSH
36459: LD_VAR 0 8
36463: ARRAY
36464: ST_TO_ADDR
// if x = - 1 then
36465: LD_VAR 0 13
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: EQUAL
36474: IFFALSE 36685
// begin for j in f do
36476: LD_ADDR_VAR 0 9
36480: PUSH
36481: LD_VAR 0 12
36485: PUSH
36486: FOR_IN
36487: IFFALSE 36681
// repeat InitHc ;
36489: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36493: LD_VAR 0 9
36497: PPUSH
36498: CALL_OW 266
36502: PUSH
36503: LD_INT 5
36505: EQUAL
36506: IFFALSE 36576
// begin if UnitsInside ( j ) < 3 then
36508: LD_VAR 0 9
36512: PPUSH
36513: CALL_OW 313
36517: PUSH
36518: LD_INT 3
36520: LESS
36521: IFFALSE 36557
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36523: LD_INT 0
36525: PPUSH
36526: LD_INT 5
36528: PUSH
36529: LD_INT 8
36531: PUSH
36532: LD_INT 9
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: PUSH
36540: LD_VAR 0 17
36544: ARRAY
36545: PPUSH
36546: LD_VAR 0 4
36550: PPUSH
36551: CALL_OW 380
36555: GO 36574
// PrepareHuman ( false , i , skill ) ;
36557: LD_INT 0
36559: PPUSH
36560: LD_VAR 0 8
36564: PPUSH
36565: LD_VAR 0 4
36569: PPUSH
36570: CALL_OW 380
// end else
36574: GO 36593
// PrepareHuman ( false , i , skill ) ;
36576: LD_INT 0
36578: PPUSH
36579: LD_VAR 0 8
36583: PPUSH
36584: LD_VAR 0 4
36588: PPUSH
36589: CALL_OW 380
// un := CreateHuman ;
36593: LD_ADDR_VAR 0 14
36597: PUSH
36598: CALL_OW 44
36602: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36603: LD_ADDR_VAR 0 7
36607: PUSH
36608: LD_VAR 0 7
36612: PPUSH
36613: LD_INT 1
36615: PPUSH
36616: LD_VAR 0 14
36620: PPUSH
36621: CALL_OW 2
36625: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36626: LD_VAR 0 14
36630: PPUSH
36631: LD_VAR 0 9
36635: PPUSH
36636: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36640: LD_VAR 0 9
36644: PPUSH
36645: CALL_OW 313
36649: PUSH
36650: LD_INT 6
36652: EQUAL
36653: IFTRUE 36677
36655: PUSH
36656: LD_VAR 0 9
36660: PPUSH
36661: CALL_OW 266
36665: PUSH
36666: LD_INT 32
36668: PUSH
36669: LD_INT 31
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: IN
36676: OR
36677: IFFALSE 36489
36679: GO 36486
36681: POP
36682: POP
// end else
36683: GO 37069
// for j = 1 to x do
36685: LD_ADDR_VAR 0 9
36689: PUSH
36690: DOUBLE
36691: LD_INT 1
36693: DEC
36694: ST_TO_ADDR
36695: LD_VAR 0 13
36699: PUSH
36700: FOR_TO
36701: IFFALSE 37067
// begin InitHc ;
36703: CALL_OW 19
// if not f then
36707: LD_VAR 0 12
36711: NOT
36712: IFFALSE 36801
// begin PrepareHuman ( false , i , skill ) ;
36714: LD_INT 0
36716: PPUSH
36717: LD_VAR 0 8
36721: PPUSH
36722: LD_VAR 0 4
36726: PPUSH
36727: CALL_OW 380
// un := CreateHuman ;
36731: LD_ADDR_VAR 0 14
36735: PUSH
36736: CALL_OW 44
36740: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36741: LD_ADDR_VAR 0 7
36745: PUSH
36746: LD_VAR 0 7
36750: PPUSH
36751: LD_INT 1
36753: PPUSH
36754: LD_VAR 0 14
36758: PPUSH
36759: CALL_OW 2
36763: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36764: LD_VAR 0 14
36768: PPUSH
36769: LD_VAR 0 1
36773: PPUSH
36774: CALL_OW 250
36778: PPUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 251
36788: PPUSH
36789: LD_INT 10
36791: PPUSH
36792: LD_INT 0
36794: PPUSH
36795: CALL_OW 50
// continue ;
36799: GO 36700
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36801: LD_VAR 0 12
36805: PUSH
36806: LD_INT 1
36808: ARRAY
36809: PPUSH
36810: CALL_OW 313
36814: IFFALSE 36842
36816: PUSH
36817: LD_VAR 0 12
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: PPUSH
36826: CALL_OW 266
36830: PUSH
36831: LD_INT 32
36833: PUSH
36834: LD_INT 31
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: IN
36841: AND
36842: IFTRUE 36863
36844: PUSH
36845: LD_VAR 0 12
36849: PUSH
36850: LD_INT 1
36852: ARRAY
36853: PPUSH
36854: CALL_OW 313
36858: PUSH
36859: LD_INT 6
36861: EQUAL
36862: OR
36863: IFFALSE 36883
// f := Delete ( f , 1 ) ;
36865: LD_ADDR_VAR 0 12
36869: PUSH
36870: LD_VAR 0 12
36874: PPUSH
36875: LD_INT 1
36877: PPUSH
36878: CALL_OW 3
36882: ST_TO_ADDR
// if not f then
36883: LD_VAR 0 12
36887: NOT
36888: IFFALSE 36906
// begin x := x + 2 ;
36890: LD_ADDR_VAR 0 13
36894: PUSH
36895: LD_VAR 0 13
36899: PUSH
36900: LD_INT 2
36902: PLUS
36903: ST_TO_ADDR
// continue ;
36904: GO 36700
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36906: LD_VAR 0 12
36910: PUSH
36911: LD_INT 1
36913: ARRAY
36914: PPUSH
36915: CALL_OW 266
36919: PUSH
36920: LD_INT 5
36922: EQUAL
36923: IFFALSE 36997
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36925: LD_VAR 0 12
36929: PUSH
36930: LD_INT 1
36932: ARRAY
36933: PPUSH
36934: CALL_OW 313
36938: PUSH
36939: LD_INT 3
36941: LESS
36942: IFFALSE 36978
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36944: LD_INT 0
36946: PPUSH
36947: LD_INT 5
36949: PUSH
36950: LD_INT 8
36952: PUSH
36953: LD_INT 9
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: PUSH
36961: LD_VAR 0 17
36965: ARRAY
36966: PPUSH
36967: LD_VAR 0 4
36971: PPUSH
36972: CALL_OW 380
36976: GO 36995
// PrepareHuman ( false , i , skill ) ;
36978: LD_INT 0
36980: PPUSH
36981: LD_VAR 0 8
36985: PPUSH
36986: LD_VAR 0 4
36990: PPUSH
36991: CALL_OW 380
// end else
36995: GO 37014
// PrepareHuman ( false , i , skill ) ;
36997: LD_INT 0
36999: PPUSH
37000: LD_VAR 0 8
37004: PPUSH
37005: LD_VAR 0 4
37009: PPUSH
37010: CALL_OW 380
// un := CreateHuman ;
37014: LD_ADDR_VAR 0 14
37018: PUSH
37019: CALL_OW 44
37023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37024: LD_ADDR_VAR 0 7
37028: PUSH
37029: LD_VAR 0 7
37033: PPUSH
37034: LD_INT 1
37036: PPUSH
37037: LD_VAR 0 14
37041: PPUSH
37042: CALL_OW 2
37046: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37047: LD_VAR 0 14
37051: PPUSH
37052: LD_VAR 0 12
37056: PUSH
37057: LD_INT 1
37059: ARRAY
37060: PPUSH
37061: CALL_OW 52
// end ;
37065: GO 36700
37067: POP
37068: POP
// end ;
37069: GO 36000
37071: POP
37072: POP
// result := result ^ buildings ;
37073: LD_ADDR_VAR 0 7
37077: PUSH
37078: LD_VAR 0 7
37082: PUSH
37083: LD_VAR 0 18
37087: ADD
37088: ST_TO_ADDR
// end else
37089: GO 37232
// begin for i = 1 to personel do
37091: LD_ADDR_VAR 0 8
37095: PUSH
37096: DOUBLE
37097: LD_INT 1
37099: DEC
37100: ST_TO_ADDR
37101: LD_VAR 0 6
37105: PUSH
37106: FOR_TO
37107: IFFALSE 37230
// begin if i > 4 then
37109: LD_VAR 0 8
37113: PUSH
37114: LD_INT 4
37116: GREATER
37117: IFFALSE 37121
// break ;
37119: GO 37230
// x := personel [ i ] ;
37121: LD_ADDR_VAR 0 13
37125: PUSH
37126: LD_VAR 0 6
37130: PUSH
37131: LD_VAR 0 8
37135: ARRAY
37136: ST_TO_ADDR
// if x = - 1 then
37137: LD_VAR 0 13
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: EQUAL
37146: IFFALSE 37150
// continue ;
37148: GO 37106
// PrepareHuman ( false , i , skill ) ;
37150: LD_INT 0
37152: PPUSH
37153: LD_VAR 0 8
37157: PPUSH
37158: LD_VAR 0 4
37162: PPUSH
37163: CALL_OW 380
// un := CreateHuman ;
37167: LD_ADDR_VAR 0 14
37171: PUSH
37172: CALL_OW 44
37176: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37177: LD_VAR 0 14
37181: PPUSH
37182: LD_VAR 0 1
37186: PPUSH
37187: CALL_OW 250
37191: PPUSH
37192: LD_VAR 0 1
37196: PPUSH
37197: CALL_OW 251
37201: PPUSH
37202: LD_INT 10
37204: PPUSH
37205: LD_INT 0
37207: PPUSH
37208: CALL_OW 50
// result := result ^ un ;
37212: LD_ADDR_VAR 0 7
37216: PUSH
37217: LD_VAR 0 7
37221: PUSH
37222: LD_VAR 0 14
37226: ADD
37227: ST_TO_ADDR
// end ;
37228: GO 37106
37230: POP
37231: POP
// end ; end ;
37232: LD_VAR 0 7
37236: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37237: LD_INT 0
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
// result := false ;
37255: LD_ADDR_VAR 0 3
37259: PUSH
37260: LD_INT 0
37262: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37263: LD_VAR 0 1
37267: NOT
37268: IFTRUE 37293
37270: PUSH
37271: LD_VAR 0 1
37275: PPUSH
37276: CALL_OW 266
37280: PUSH
37281: LD_INT 32
37283: PUSH
37284: LD_INT 33
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: IN
37291: NOT
37292: OR
37293: IFFALSE 37297
// exit ;
37295: GO 38432
// nat := GetNation ( tower ) ;
37297: LD_ADDR_VAR 0 12
37301: PUSH
37302: LD_VAR 0 1
37306: PPUSH
37307: CALL_OW 248
37311: ST_TO_ADDR
// side := GetSide ( tower ) ;
37312: LD_ADDR_VAR 0 16
37316: PUSH
37317: LD_VAR 0 1
37321: PPUSH
37322: CALL_OW 255
37326: ST_TO_ADDR
// x := GetX ( tower ) ;
37327: LD_ADDR_VAR 0 10
37331: PUSH
37332: LD_VAR 0 1
37336: PPUSH
37337: CALL_OW 250
37341: ST_TO_ADDR
// y := GetY ( tower ) ;
37342: LD_ADDR_VAR 0 11
37346: PUSH
37347: LD_VAR 0 1
37351: PPUSH
37352: CALL_OW 251
37356: ST_TO_ADDR
// if not x or not y then
37357: LD_VAR 0 10
37361: NOT
37362: IFTRUE 37371
37364: PUSH
37365: LD_VAR 0 11
37369: NOT
37370: OR
37371: IFFALSE 37375
// exit ;
37373: GO 38432
// weapon := 0 ;
37375: LD_ADDR_VAR 0 18
37379: PUSH
37380: LD_INT 0
37382: ST_TO_ADDR
// fac_list := [ ] ;
37383: LD_ADDR_VAR 0 17
37387: PUSH
37388: EMPTY
37389: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37390: LD_ADDR_VAR 0 6
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 274
37404: PPUSH
37405: LD_VAR 0 2
37409: PPUSH
37410: LD_INT 0
37412: PPUSH
37413: CALL 34967 0 3
37417: PPUSH
37418: LD_INT 30
37420: PUSH
37421: LD_INT 3
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PPUSH
37428: CALL_OW 72
37432: ST_TO_ADDR
// if not factories then
37433: LD_VAR 0 6
37437: NOT
37438: IFFALSE 37442
// exit ;
37440: GO 38432
// for i in factories do
37442: LD_ADDR_VAR 0 8
37446: PUSH
37447: LD_VAR 0 6
37451: PUSH
37452: FOR_IN
37453: IFFALSE 37478
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37455: LD_ADDR_VAR 0 17
37459: PUSH
37460: LD_VAR 0 17
37464: PUSH
37465: LD_VAR 0 8
37469: PPUSH
37470: CALL_OW 478
37474: UNION
37475: ST_TO_ADDR
37476: GO 37452
37478: POP
37479: POP
// if not fac_list then
37480: LD_VAR 0 17
37484: NOT
37485: IFFALSE 37489
// exit ;
37487: GO 38432
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37489: LD_ADDR_VAR 0 5
37493: PUSH
37494: LD_INT 4
37496: PUSH
37497: LD_INT 5
37499: PUSH
37500: LD_INT 9
37502: PUSH
37503: LD_INT 10
37505: PUSH
37506: LD_INT 6
37508: PUSH
37509: LD_INT 7
37511: PUSH
37512: LD_INT 11
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 27
37526: PUSH
37527: LD_INT 28
37529: PUSH
37530: LD_INT 26
37532: PUSH
37533: LD_INT 30
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 43
37544: PUSH
37545: LD_INT 44
37547: PUSH
37548: LD_INT 46
37550: PUSH
37551: LD_INT 45
37553: PUSH
37554: LD_INT 47
37556: PUSH
37557: LD_INT 49
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: PUSH
37573: LD_VAR 0 12
37577: ARRAY
37578: ST_TO_ADDR
// list := list isect fac_list ;
37579: LD_ADDR_VAR 0 5
37583: PUSH
37584: LD_VAR 0 5
37588: PUSH
37589: LD_VAR 0 17
37593: ISECT
37594: ST_TO_ADDR
// if not list then
37595: LD_VAR 0 5
37599: NOT
37600: IFFALSE 37604
// exit ;
37602: GO 38432
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37604: LD_VAR 0 12
37608: PUSH
37609: LD_INT 3
37611: EQUAL
37612: IFFALSE 37624
37614: PUSH
37615: LD_INT 49
37617: PUSH
37618: LD_VAR 0 5
37622: IN
37623: AND
37624: IFFALSE 37644
37626: PUSH
37627: LD_INT 31
37629: PPUSH
37630: LD_VAR 0 16
37634: PPUSH
37635: CALL_OW 321
37639: PUSH
37640: LD_INT 2
37642: EQUAL
37643: AND
37644: IFFALSE 37704
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37646: LD_INT 22
37648: PUSH
37649: LD_VAR 0 16
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 35
37660: PUSH
37661: LD_INT 49
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 91
37670: PUSH
37671: LD_VAR 0 1
37675: PUSH
37676: LD_INT 10
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: PPUSH
37689: CALL_OW 69
37693: NOT
37694: IFFALSE 37704
// weapon := ru_time_lapser ;
37696: LD_ADDR_VAR 0 18
37700: PUSH
37701: LD_INT 49
37703: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37704: LD_VAR 0 12
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: IN
37719: IFFALSE 37743
37721: PUSH
37722: LD_INT 11
37724: PUSH
37725: LD_VAR 0 5
37729: IN
37730: IFTRUE 37742
37732: PUSH
37733: LD_INT 30
37735: PUSH
37736: LD_VAR 0 5
37740: IN
37741: OR
37742: AND
37743: IFFALSE 37763
37745: PUSH
37746: LD_INT 6
37748: PPUSH
37749: LD_VAR 0 16
37753: PPUSH
37754: CALL_OW 321
37758: PUSH
37759: LD_INT 2
37761: EQUAL
37762: AND
37763: IFFALSE 37930
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37765: LD_INT 22
37767: PUSH
37768: LD_VAR 0 16
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 35
37782: PUSH
37783: LD_INT 11
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 35
37792: PUSH
37793: LD_INT 30
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 91
37807: PUSH
37808: LD_VAR 0 1
37812: PUSH
37813: LD_INT 18
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: PPUSH
37826: CALL_OW 69
37830: NOT
37831: IFFALSE 37907
37833: PUSH
37834: LD_INT 22
37836: PUSH
37837: LD_VAR 0 16
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 30
37851: PUSH
37852: LD_INT 32
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 30
37861: PUSH
37862: LD_INT 33
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 91
37876: PUSH
37877: LD_VAR 0 1
37881: PUSH
37882: LD_INT 12
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: LIST
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: PPUSH
37898: CALL_OW 69
37902: PUSH
37903: LD_INT 2
37905: GREATER
37906: AND
37907: IFFALSE 37930
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37909: LD_ADDR_VAR 0 18
37913: PUSH
37914: LD_INT 11
37916: PUSH
37917: LD_INT 30
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_VAR 0 12
37928: ARRAY
37929: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37930: LD_VAR 0 18
37934: NOT
37935: IFFALSE 37955
37937: PUSH
37938: LD_INT 40
37940: PPUSH
37941: LD_VAR 0 16
37945: PPUSH
37946: CALL_OW 321
37950: PUSH
37951: LD_INT 2
37953: EQUAL
37954: AND
37955: IFFALSE 37991
37957: PUSH
37958: LD_INT 7
37960: PUSH
37961: LD_VAR 0 5
37965: IN
37966: IFTRUE 37978
37968: PUSH
37969: LD_INT 28
37971: PUSH
37972: LD_VAR 0 5
37976: IN
37977: OR
37978: IFTRUE 37990
37980: PUSH
37981: LD_INT 45
37983: PUSH
37984: LD_VAR 0 5
37988: IN
37989: OR
37990: AND
37991: IFFALSE 38245
// begin hex := GetHexInfo ( x , y ) ;
37993: LD_ADDR_VAR 0 4
37997: PUSH
37998: LD_VAR 0 10
38002: PPUSH
38003: LD_VAR 0 11
38007: PPUSH
38008: CALL_OW 546
38012: ST_TO_ADDR
// if hex [ 1 ] then
38013: LD_VAR 0 4
38017: PUSH
38018: LD_INT 1
38020: ARRAY
38021: IFFALSE 38025
// exit ;
38023: GO 38432
// height := hex [ 2 ] ;
38025: LD_ADDR_VAR 0 15
38029: PUSH
38030: LD_VAR 0 4
38034: PUSH
38035: LD_INT 2
38037: ARRAY
38038: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38039: LD_ADDR_VAR 0 14
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: LD_INT 3
38052: PUSH
38053: LD_INT 5
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: ST_TO_ADDR
// for i in tmp do
38062: LD_ADDR_VAR 0 8
38066: PUSH
38067: LD_VAR 0 14
38071: PUSH
38072: FOR_IN
38073: IFFALSE 38243
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38075: LD_ADDR_VAR 0 9
38079: PUSH
38080: LD_VAR 0 10
38084: PPUSH
38085: LD_VAR 0 8
38089: PPUSH
38090: LD_INT 5
38092: PPUSH
38093: CALL_OW 272
38097: PUSH
38098: LD_VAR 0 11
38102: PPUSH
38103: LD_VAR 0 8
38107: PPUSH
38108: LD_INT 5
38110: PPUSH
38111: CALL_OW 273
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38120: LD_VAR 0 9
38124: PUSH
38125: LD_INT 1
38127: ARRAY
38128: PPUSH
38129: LD_VAR 0 9
38133: PUSH
38134: LD_INT 2
38136: ARRAY
38137: PPUSH
38138: CALL_OW 488
38142: IFFALSE 38241
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38144: LD_ADDR_VAR 0 4
38148: PUSH
38149: LD_VAR 0 9
38153: PUSH
38154: LD_INT 1
38156: ARRAY
38157: PPUSH
38158: LD_VAR 0 9
38162: PUSH
38163: LD_INT 2
38165: ARRAY
38166: PPUSH
38167: CALL_OW 546
38171: ST_TO_ADDR
// if hex [ 1 ] then
38172: LD_VAR 0 4
38176: PUSH
38177: LD_INT 1
38179: ARRAY
38180: IFFALSE 38184
// continue ;
38182: GO 38072
// h := hex [ 2 ] ;
38184: LD_ADDR_VAR 0 13
38188: PUSH
38189: LD_VAR 0 4
38193: PUSH
38194: LD_INT 2
38196: ARRAY
38197: ST_TO_ADDR
// if h + 7 < height then
38198: LD_VAR 0 13
38202: PUSH
38203: LD_INT 7
38205: PLUS
38206: PUSH
38207: LD_VAR 0 15
38211: LESS
38212: IFFALSE 38241
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38214: LD_ADDR_VAR 0 18
38218: PUSH
38219: LD_INT 7
38221: PUSH
38222: LD_INT 28
38224: PUSH
38225: LD_INT 45
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: LD_VAR 0 12
38237: ARRAY
38238: ST_TO_ADDR
// break ;
38239: GO 38243
// end ; end ; end ;
38241: GO 38072
38243: POP
38244: POP
// end ; if not weapon then
38245: LD_VAR 0 18
38249: NOT
38250: IFFALSE 38310
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38252: LD_ADDR_VAR 0 5
38256: PUSH
38257: LD_VAR 0 5
38261: PUSH
38262: LD_INT 11
38264: PUSH
38265: LD_INT 30
38267: PUSH
38268: LD_INT 49
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: LIST
38275: DIFF
38276: ST_TO_ADDR
// if not list then
38277: LD_VAR 0 5
38281: NOT
38282: IFFALSE 38286
// exit ;
38284: GO 38432
// weapon := list [ rand ( 1 , list ) ] ;
38286: LD_ADDR_VAR 0 18
38290: PUSH
38291: LD_VAR 0 5
38295: PUSH
38296: LD_INT 1
38298: PPUSH
38299: LD_VAR 0 5
38303: PPUSH
38304: CALL_OW 12
38308: ARRAY
38309: ST_TO_ADDR
// end ; if weapon then
38310: LD_VAR 0 18
38314: IFFALSE 38432
// begin tmp := CostOfWeapon ( weapon ) ;
38316: LD_ADDR_VAR 0 14
38320: PUSH
38321: LD_VAR 0 18
38325: PPUSH
38326: CALL_OW 451
38330: ST_TO_ADDR
// j := GetBase ( tower ) ;
38331: LD_ADDR_VAR 0 9
38335: PUSH
38336: LD_VAR 0 1
38340: PPUSH
38341: CALL_OW 274
38345: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38346: LD_VAR 0 9
38350: PPUSH
38351: LD_INT 1
38353: PPUSH
38354: CALL_OW 275
38358: PUSH
38359: LD_VAR 0 14
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: GREATEREQUAL
38368: IFFALSE 38394
38370: PUSH
38371: LD_VAR 0 9
38375: PPUSH
38376: LD_INT 2
38378: PPUSH
38379: CALL_OW 275
38383: PUSH
38384: LD_VAR 0 14
38388: PUSH
38389: LD_INT 2
38391: ARRAY
38392: GREATEREQUAL
38393: AND
38394: IFFALSE 38420
38396: PUSH
38397: LD_VAR 0 9
38401: PPUSH
38402: LD_INT 3
38404: PPUSH
38405: CALL_OW 275
38409: PUSH
38410: LD_VAR 0 14
38414: PUSH
38415: LD_INT 3
38417: ARRAY
38418: GREATEREQUAL
38419: AND
38420: IFFALSE 38432
// result := weapon ;
38422: LD_ADDR_VAR 0 3
38426: PUSH
38427: LD_VAR 0 18
38431: ST_TO_ADDR
// end ; end ;
38432: LD_VAR 0 3
38436: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38437: LD_INT 0
38439: PPUSH
38440: PPUSH
// result := true ;
38441: LD_ADDR_VAR 0 3
38445: PUSH
38446: LD_INT 1
38448: ST_TO_ADDR
// if array1 = array2 then
38449: LD_VAR 0 1
38453: PUSH
38454: LD_VAR 0 2
38458: EQUAL
38459: IFFALSE 38519
// begin for i = 1 to array1 do
38461: LD_ADDR_VAR 0 4
38465: PUSH
38466: DOUBLE
38467: LD_INT 1
38469: DEC
38470: ST_TO_ADDR
38471: LD_VAR 0 1
38475: PUSH
38476: FOR_TO
38477: IFFALSE 38515
// if array1 [ i ] <> array2 [ i ] then
38479: LD_VAR 0 1
38483: PUSH
38484: LD_VAR 0 4
38488: ARRAY
38489: PUSH
38490: LD_VAR 0 2
38494: PUSH
38495: LD_VAR 0 4
38499: ARRAY
38500: NONEQUAL
38501: IFFALSE 38513
// begin result := false ;
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: LD_INT 0
38510: ST_TO_ADDR
// break ;
38511: GO 38515
// end ;
38513: GO 38476
38515: POP
38516: POP
// end else
38517: GO 38527
// result := false ;
38519: LD_ADDR_VAR 0 3
38523: PUSH
38524: LD_INT 0
38526: ST_TO_ADDR
// end ;
38527: LD_VAR 0 3
38531: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38532: LD_INT 0
38534: PPUSH
38535: PPUSH
// if not array1 or not array2 then
38536: LD_VAR 0 1
38540: NOT
38541: IFTRUE 38550
38543: PUSH
38544: LD_VAR 0 2
38548: NOT
38549: OR
38550: IFFALSE 38554
// exit ;
38552: GO 38618
// result := true ;
38554: LD_ADDR_VAR 0 3
38558: PUSH
38559: LD_INT 1
38561: ST_TO_ADDR
// for i = 1 to array1 do
38562: LD_ADDR_VAR 0 4
38566: PUSH
38567: DOUBLE
38568: LD_INT 1
38570: DEC
38571: ST_TO_ADDR
38572: LD_VAR 0 1
38576: PUSH
38577: FOR_TO
38578: IFFALSE 38616
// if array1 [ i ] <> array2 [ i ] then
38580: LD_VAR 0 1
38584: PUSH
38585: LD_VAR 0 4
38589: ARRAY
38590: PUSH
38591: LD_VAR 0 2
38595: PUSH
38596: LD_VAR 0 4
38600: ARRAY
38601: NONEQUAL
38602: IFFALSE 38614
// begin result := false ;
38604: LD_ADDR_VAR 0 3
38608: PUSH
38609: LD_INT 0
38611: ST_TO_ADDR
// break ;
38612: GO 38616
// end ;
38614: GO 38577
38616: POP
38617: POP
// end ;
38618: LD_VAR 0 3
38622: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38623: LD_INT 0
38625: PPUSH
38626: PPUSH
38627: PPUSH
// pom := GetBase ( fac ) ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 274
38642: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38643: LD_ADDR_VAR 0 4
38647: PUSH
38648: LD_VAR 0 2
38652: PUSH
38653: LD_INT 1
38655: ARRAY
38656: PPUSH
38657: LD_VAR 0 2
38661: PUSH
38662: LD_INT 2
38664: ARRAY
38665: PPUSH
38666: LD_VAR 0 2
38670: PUSH
38671: LD_INT 3
38673: ARRAY
38674: PPUSH
38675: LD_VAR 0 2
38679: PUSH
38680: LD_INT 4
38682: ARRAY
38683: PPUSH
38684: CALL_OW 449
38688: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38689: LD_ADDR_VAR 0 3
38693: PUSH
38694: LD_VAR 0 5
38698: PPUSH
38699: LD_INT 1
38701: PPUSH
38702: CALL_OW 275
38706: PUSH
38707: LD_VAR 0 4
38711: PUSH
38712: LD_INT 1
38714: ARRAY
38715: GREATEREQUAL
38716: IFFALSE 38742
38718: PUSH
38719: LD_VAR 0 5
38723: PPUSH
38724: LD_INT 2
38726: PPUSH
38727: CALL_OW 275
38731: PUSH
38732: LD_VAR 0 4
38736: PUSH
38737: LD_INT 2
38739: ARRAY
38740: GREATEREQUAL
38741: AND
38742: IFFALSE 38768
38744: PUSH
38745: LD_VAR 0 5
38749: PPUSH
38750: LD_INT 3
38752: PPUSH
38753: CALL_OW 275
38757: PUSH
38758: LD_VAR 0 4
38762: PUSH
38763: LD_INT 3
38765: ARRAY
38766: GREATEREQUAL
38767: AND
38768: ST_TO_ADDR
// end ;
38769: LD_VAR 0 3
38773: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38774: LD_INT 0
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
// pom := GetBase ( building ) ;
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: LD_VAR 0 1
38789: PPUSH
38790: CALL_OW 274
38794: ST_TO_ADDR
// if not pom then
38795: LD_VAR 0 3
38799: NOT
38800: IFFALSE 38804
// exit ;
38802: GO 38978
// btype := GetBType ( building ) ;
38804: LD_ADDR_VAR 0 5
38808: PUSH
38809: LD_VAR 0 1
38813: PPUSH
38814: CALL_OW 266
38818: ST_TO_ADDR
// if btype = b_armoury then
38819: LD_VAR 0 5
38823: PUSH
38824: LD_INT 4
38826: EQUAL
38827: IFFALSE 38837
// btype := b_barracks ;
38829: LD_ADDR_VAR 0 5
38833: PUSH
38834: LD_INT 5
38836: ST_TO_ADDR
// if btype = b_depot then
38837: LD_VAR 0 5
38841: PUSH
38842: LD_INT 0
38844: EQUAL
38845: IFFALSE 38855
// btype := b_warehouse ;
38847: LD_ADDR_VAR 0 5
38851: PUSH
38852: LD_INT 1
38854: ST_TO_ADDR
// if btype = b_workshop then
38855: LD_VAR 0 5
38859: PUSH
38860: LD_INT 2
38862: EQUAL
38863: IFFALSE 38873
// btype := b_factory ;
38865: LD_ADDR_VAR 0 5
38869: PUSH
38870: LD_INT 3
38872: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38873: LD_ADDR_VAR 0 4
38877: PUSH
38878: LD_VAR 0 5
38882: PPUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: CALL_OW 248
38892: PPUSH
38893: CALL_OW 450
38897: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38898: LD_ADDR_VAR 0 2
38902: PUSH
38903: LD_VAR 0 3
38907: PPUSH
38908: LD_INT 1
38910: PPUSH
38911: CALL_OW 275
38915: PUSH
38916: LD_VAR 0 4
38920: PUSH
38921: LD_INT 1
38923: ARRAY
38924: GREATEREQUAL
38925: IFFALSE 38951
38927: PUSH
38928: LD_VAR 0 3
38932: PPUSH
38933: LD_INT 2
38935: PPUSH
38936: CALL_OW 275
38940: PUSH
38941: LD_VAR 0 4
38945: PUSH
38946: LD_INT 2
38948: ARRAY
38949: GREATEREQUAL
38950: AND
38951: IFFALSE 38977
38953: PUSH
38954: LD_VAR 0 3
38958: PPUSH
38959: LD_INT 3
38961: PPUSH
38962: CALL_OW 275
38966: PUSH
38967: LD_VAR 0 4
38971: PUSH
38972: LD_INT 3
38974: ARRAY
38975: GREATEREQUAL
38976: AND
38977: ST_TO_ADDR
// end ;
38978: LD_VAR 0 2
38982: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38983: LD_INT 0
38985: PPUSH
38986: PPUSH
38987: PPUSH
// pom := GetBase ( building ) ;
38988: LD_ADDR_VAR 0 4
38992: PUSH
38993: LD_VAR 0 1
38997: PPUSH
38998: CALL_OW 274
39002: ST_TO_ADDR
// if not pom then
39003: LD_VAR 0 4
39007: NOT
39008: IFFALSE 39012
// exit ;
39010: GO 39117
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39012: LD_ADDR_VAR 0 5
39016: PUSH
39017: LD_VAR 0 2
39021: PPUSH
39022: LD_VAR 0 1
39026: PPUSH
39027: CALL_OW 248
39031: PPUSH
39032: CALL_OW 450
39036: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39037: LD_ADDR_VAR 0 3
39041: PUSH
39042: LD_VAR 0 4
39046: PPUSH
39047: LD_INT 1
39049: PPUSH
39050: CALL_OW 275
39054: PUSH
39055: LD_VAR 0 5
39059: PUSH
39060: LD_INT 1
39062: ARRAY
39063: GREATEREQUAL
39064: IFFALSE 39090
39066: PUSH
39067: LD_VAR 0 4
39071: PPUSH
39072: LD_INT 2
39074: PPUSH
39075: CALL_OW 275
39079: PUSH
39080: LD_VAR 0 5
39084: PUSH
39085: LD_INT 2
39087: ARRAY
39088: GREATEREQUAL
39089: AND
39090: IFFALSE 39116
39092: PUSH
39093: LD_VAR 0 4
39097: PPUSH
39098: LD_INT 3
39100: PPUSH
39101: CALL_OW 275
39105: PUSH
39106: LD_VAR 0 5
39110: PUSH
39111: LD_INT 3
39113: ARRAY
39114: GREATEREQUAL
39115: AND
39116: ST_TO_ADDR
// end ;
39117: LD_VAR 0 3
39121: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39122: LD_INT 0
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
39132: PPUSH
39133: PPUSH
39134: PPUSH
// result := false ;
39135: LD_ADDR_VAR 0 8
39139: PUSH
39140: LD_INT 0
39142: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39143: LD_VAR 0 5
39147: NOT
39148: IFTRUE 39157
39150: PUSH
39151: LD_VAR 0 1
39155: NOT
39156: OR
39157: IFTRUE 39166
39159: PUSH
39160: LD_VAR 0 2
39164: NOT
39165: OR
39166: IFTRUE 39175
39168: PUSH
39169: LD_VAR 0 3
39173: NOT
39174: OR
39175: IFFALSE 39179
// exit ;
39177: GO 40005
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39179: LD_ADDR_VAR 0 14
39183: PUSH
39184: LD_VAR 0 1
39188: PPUSH
39189: LD_VAR 0 2
39193: PPUSH
39194: LD_VAR 0 3
39198: PPUSH
39199: LD_VAR 0 4
39203: PPUSH
39204: LD_VAR 0 5
39208: PUSH
39209: LD_INT 1
39211: ARRAY
39212: PPUSH
39213: CALL_OW 248
39217: PPUSH
39218: LD_INT 0
39220: PPUSH
39221: CALL 41286 0 6
39225: ST_TO_ADDR
// if not hexes then
39226: LD_VAR 0 14
39230: NOT
39231: IFFALSE 39235
// exit ;
39233: GO 40005
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39235: LD_ADDR_VAR 0 17
39239: PUSH
39240: LD_VAR 0 5
39244: PPUSH
39245: LD_INT 22
39247: PUSH
39248: LD_VAR 0 13
39252: PPUSH
39253: CALL_OW 255
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 30
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 30
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PPUSH
39294: CALL_OW 72
39298: ST_TO_ADDR
// for i = 1 to hexes do
39299: LD_ADDR_VAR 0 9
39303: PUSH
39304: DOUBLE
39305: LD_INT 1
39307: DEC
39308: ST_TO_ADDR
39309: LD_VAR 0 14
39313: PUSH
39314: FOR_TO
39315: IFFALSE 40003
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39317: LD_ADDR_VAR 0 13
39321: PUSH
39322: LD_VAR 0 14
39326: PUSH
39327: LD_VAR 0 9
39331: ARRAY
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PPUSH
39337: LD_VAR 0 14
39341: PUSH
39342: LD_VAR 0 9
39346: ARRAY
39347: PUSH
39348: LD_INT 2
39350: ARRAY
39351: PPUSH
39352: CALL_OW 428
39356: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39357: LD_VAR 0 14
39361: PUSH
39362: LD_VAR 0 9
39366: ARRAY
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: LD_VAR 0 14
39376: PUSH
39377: LD_VAR 0 9
39381: ARRAY
39382: PUSH
39383: LD_INT 2
39385: ARRAY
39386: PPUSH
39387: CALL_OW 351
39391: IFTRUE 39430
39393: PUSH
39394: LD_VAR 0 14
39398: PUSH
39399: LD_VAR 0 9
39403: ARRAY
39404: PUSH
39405: LD_INT 1
39407: ARRAY
39408: PPUSH
39409: LD_VAR 0 14
39413: PUSH
39414: LD_VAR 0 9
39418: ARRAY
39419: PUSH
39420: LD_INT 2
39422: ARRAY
39423: PPUSH
39424: CALL_OW 488
39428: NOT
39429: OR
39430: IFTRUE 39447
39432: PUSH
39433: LD_VAR 0 13
39437: PPUSH
39438: CALL_OW 247
39442: PUSH
39443: LD_INT 3
39445: EQUAL
39446: OR
39447: IFFALSE 39453
// exit ;
39449: POP
39450: POP
39451: GO 40005
// if not tmp then
39453: LD_VAR 0 13
39457: NOT
39458: IFFALSE 39462
// continue ;
39460: GO 39314
// result := true ;
39462: LD_ADDR_VAR 0 8
39466: PUSH
39467: LD_INT 1
39469: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39470: LD_VAR 0 6
39474: IFFALSE 39491
39476: PUSH
39477: LD_VAR 0 13
39481: PPUSH
39482: CALL_OW 247
39486: PUSH
39487: LD_INT 2
39489: EQUAL
39490: AND
39491: IFFALSE 39508
39493: PUSH
39494: LD_VAR 0 13
39498: PPUSH
39499: CALL_OW 263
39503: PUSH
39504: LD_INT 1
39506: EQUAL
39507: AND
39508: IFFALSE 39672
// begin if IsDrivenBy ( tmp ) then
39510: LD_VAR 0 13
39514: PPUSH
39515: CALL_OW 311
39519: IFFALSE 39523
// continue ;
39521: GO 39314
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39523: LD_VAR 0 6
39527: PPUSH
39528: LD_INT 3
39530: PUSH
39531: LD_INT 60
39533: PUSH
39534: EMPTY
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 3
39543: PUSH
39544: LD_INT 55
39546: PUSH
39547: EMPTY
39548: LIST
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PPUSH
39558: CALL_OW 72
39562: IFFALSE 39670
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39564: LD_ADDR_VAR 0 18
39568: PUSH
39569: LD_VAR 0 6
39573: PPUSH
39574: LD_INT 3
39576: PUSH
39577: LD_INT 60
39579: PUSH
39580: EMPTY
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: PUSH
39590: LD_INT 55
39592: PUSH
39593: EMPTY
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PPUSH
39604: CALL_OW 72
39608: PUSH
39609: LD_INT 1
39611: ARRAY
39612: ST_TO_ADDR
// if IsInUnit ( driver ) then
39613: LD_VAR 0 18
39617: PPUSH
39618: CALL_OW 310
39622: IFFALSE 39633
// ComExit ( driver ) ;
39624: LD_VAR 0 18
39628: PPUSH
39629: CALL 65286 0 1
// AddComEnterUnit ( driver , tmp ) ;
39633: LD_VAR 0 18
39637: PPUSH
39638: LD_VAR 0 13
39642: PPUSH
39643: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39647: LD_VAR 0 18
39651: PPUSH
39652: LD_VAR 0 7
39656: PPUSH
39657: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39661: LD_VAR 0 18
39665: PPUSH
39666: CALL_OW 181
// end ; continue ;
39670: GO 39314
// end ; if not cleaners or not tmp in cleaners then
39672: LD_VAR 0 6
39676: NOT
39677: IFTRUE 39692
39679: PUSH
39680: LD_VAR 0 13
39684: PUSH
39685: LD_VAR 0 6
39689: IN
39690: NOT
39691: OR
39692: IFFALSE 40001
// begin if dep then
39694: LD_VAR 0 17
39698: IFFALSE 39834
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39700: LD_ADDR_VAR 0 16
39704: PUSH
39705: LD_VAR 0 17
39709: PUSH
39710: LD_INT 1
39712: ARRAY
39713: PPUSH
39714: CALL_OW 250
39718: PPUSH
39719: LD_VAR 0 17
39723: PUSH
39724: LD_INT 1
39726: ARRAY
39727: PPUSH
39728: CALL_OW 254
39732: PPUSH
39733: LD_INT 5
39735: PPUSH
39736: CALL_OW 272
39740: PUSH
39741: LD_VAR 0 17
39745: PUSH
39746: LD_INT 1
39748: ARRAY
39749: PPUSH
39750: CALL_OW 251
39754: PPUSH
39755: LD_VAR 0 17
39759: PUSH
39760: LD_INT 1
39762: ARRAY
39763: PPUSH
39764: CALL_OW 254
39768: PPUSH
39769: LD_INT 5
39771: PPUSH
39772: CALL_OW 273
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39781: LD_VAR 0 16
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: LD_VAR 0 16
39794: PUSH
39795: LD_INT 2
39797: ARRAY
39798: PPUSH
39799: CALL_OW 488
39803: IFFALSE 39834
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39805: LD_VAR 0 13
39809: PPUSH
39810: LD_VAR 0 16
39814: PUSH
39815: LD_INT 1
39817: ARRAY
39818: PPUSH
39819: LD_VAR 0 16
39823: PUSH
39824: LD_INT 2
39826: ARRAY
39827: PPUSH
39828: CALL_OW 111
// continue ;
39832: GO 39314
// end ; end ; r := GetDir ( tmp ) ;
39834: LD_ADDR_VAR 0 15
39838: PUSH
39839: LD_VAR 0 13
39843: PPUSH
39844: CALL_OW 254
39848: ST_TO_ADDR
// if r = 5 then
39849: LD_VAR 0 15
39853: PUSH
39854: LD_INT 5
39856: EQUAL
39857: IFFALSE 39867
// r := 0 ;
39859: LD_ADDR_VAR 0 15
39863: PUSH
39864: LD_INT 0
39866: ST_TO_ADDR
// for j = r to 5 do
39867: LD_ADDR_VAR 0 10
39871: PUSH
39872: DOUBLE
39873: LD_VAR 0 15
39877: DEC
39878: ST_TO_ADDR
39879: LD_INT 5
39881: PUSH
39882: FOR_TO
39883: IFFALSE 39999
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39885: LD_ADDR_VAR 0 11
39889: PUSH
39890: LD_VAR 0 13
39894: PPUSH
39895: CALL_OW 250
39899: PPUSH
39900: LD_VAR 0 10
39904: PPUSH
39905: LD_INT 2
39907: PPUSH
39908: CALL_OW 272
39912: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39913: LD_ADDR_VAR 0 12
39917: PUSH
39918: LD_VAR 0 13
39922: PPUSH
39923: CALL_OW 251
39927: PPUSH
39928: LD_VAR 0 10
39932: PPUSH
39933: LD_INT 2
39935: PPUSH
39936: CALL_OW 273
39940: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39941: LD_VAR 0 11
39945: PPUSH
39946: LD_VAR 0 12
39950: PPUSH
39951: CALL_OW 488
39955: IFFALSE 39974
39957: PUSH
39958: LD_VAR 0 11
39962: PPUSH
39963: LD_VAR 0 12
39967: PPUSH
39968: CALL_OW 428
39972: NOT
39973: AND
39974: IFFALSE 39997
// begin ComMoveXY ( tmp , _x , _y ) ;
39976: LD_VAR 0 13
39980: PPUSH
39981: LD_VAR 0 11
39985: PPUSH
39986: LD_VAR 0 12
39990: PPUSH
39991: CALL_OW 111
// break ;
39995: GO 39999
// end ; end ;
39997: GO 39882
39999: POP
40000: POP
// end ; end ;
40001: GO 39314
40003: POP
40004: POP
// end ;
40005: LD_VAR 0 8
40009: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40010: LD_INT 0
40012: PPUSH
// result := true ;
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: LD_INT 1
40020: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40021: LD_VAR 0 2
40025: PUSH
40026: LD_INT 24
40028: DOUBLE
40029: EQUAL
40030: IFTRUE 40040
40032: LD_INT 33
40034: DOUBLE
40035: EQUAL
40036: IFTRUE 40040
40038: GO 40065
40040: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40041: LD_ADDR_VAR 0 3
40045: PUSH
40046: LD_INT 32
40048: PPUSH
40049: LD_VAR 0 1
40053: PPUSH
40054: CALL_OW 321
40058: PUSH
40059: LD_INT 2
40061: EQUAL
40062: ST_TO_ADDR
40063: GO 40381
40065: LD_INT 20
40067: DOUBLE
40068: EQUAL
40069: IFTRUE 40073
40071: GO 40098
40073: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40074: LD_ADDR_VAR 0 3
40078: PUSH
40079: LD_INT 6
40081: PPUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 321
40091: PUSH
40092: LD_INT 2
40094: EQUAL
40095: ST_TO_ADDR
40096: GO 40381
40098: LD_INT 22
40100: DOUBLE
40101: EQUAL
40102: IFTRUE 40112
40104: LD_INT 36
40106: DOUBLE
40107: EQUAL
40108: IFTRUE 40112
40110: GO 40137
40112: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40113: LD_ADDR_VAR 0 3
40117: PUSH
40118: LD_INT 15
40120: PPUSH
40121: LD_VAR 0 1
40125: PPUSH
40126: CALL_OW 321
40130: PUSH
40131: LD_INT 2
40133: EQUAL
40134: ST_TO_ADDR
40135: GO 40381
40137: LD_INT 30
40139: DOUBLE
40140: EQUAL
40141: IFTRUE 40145
40143: GO 40170
40145: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40146: LD_ADDR_VAR 0 3
40150: PUSH
40151: LD_INT 20
40153: PPUSH
40154: LD_VAR 0 1
40158: PPUSH
40159: CALL_OW 321
40163: PUSH
40164: LD_INT 2
40166: EQUAL
40167: ST_TO_ADDR
40168: GO 40381
40170: LD_INT 28
40172: DOUBLE
40173: EQUAL
40174: IFTRUE 40184
40176: LD_INT 21
40178: DOUBLE
40179: EQUAL
40180: IFTRUE 40184
40182: GO 40209
40184: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40185: LD_ADDR_VAR 0 3
40189: PUSH
40190: LD_INT 21
40192: PPUSH
40193: LD_VAR 0 1
40197: PPUSH
40198: CALL_OW 321
40202: PUSH
40203: LD_INT 2
40205: EQUAL
40206: ST_TO_ADDR
40207: GO 40381
40209: LD_INT 16
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40242
40217: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_INT 84
40225: PPUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 321
40235: PUSH
40236: LD_INT 2
40238: EQUAL
40239: ST_TO_ADDR
40240: GO 40381
40242: LD_INT 19
40244: DOUBLE
40245: EQUAL
40246: IFTRUE 40256
40248: LD_INT 23
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40256
40254: GO 40281
40256: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_INT 83
40264: PPUSH
40265: LD_VAR 0 1
40269: PPUSH
40270: CALL_OW 321
40274: PUSH
40275: LD_INT 2
40277: EQUAL
40278: ST_TO_ADDR
40279: GO 40381
40281: LD_INT 17
40283: DOUBLE
40284: EQUAL
40285: IFTRUE 40289
40287: GO 40314
40289: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40290: LD_ADDR_VAR 0 3
40294: PUSH
40295: LD_INT 39
40297: PPUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL_OW 321
40307: PUSH
40308: LD_INT 2
40310: EQUAL
40311: ST_TO_ADDR
40312: GO 40381
40314: LD_INT 18
40316: DOUBLE
40317: EQUAL
40318: IFTRUE 40322
40320: GO 40347
40322: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40323: LD_ADDR_VAR 0 3
40327: PUSH
40328: LD_INT 40
40330: PPUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 321
40340: PUSH
40341: LD_INT 2
40343: EQUAL
40344: ST_TO_ADDR
40345: GO 40381
40347: LD_INT 27
40349: DOUBLE
40350: EQUAL
40351: IFTRUE 40355
40353: GO 40380
40355: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40356: LD_ADDR_VAR 0 3
40360: PUSH
40361: LD_INT 35
40363: PPUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: CALL_OW 321
40373: PUSH
40374: LD_INT 2
40376: EQUAL
40377: ST_TO_ADDR
40378: GO 40381
40380: POP
// end ;
40381: LD_VAR 0 3
40385: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40386: LD_INT 0
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
// result := false ;
40399: LD_ADDR_VAR 0 6
40403: PUSH
40404: LD_INT 0
40406: ST_TO_ADDR
// if btype = b_depot then
40407: LD_VAR 0 2
40411: PUSH
40412: LD_INT 0
40414: EQUAL
40415: IFFALSE 40427
// begin result := true ;
40417: LD_ADDR_VAR 0 6
40421: PUSH
40422: LD_INT 1
40424: ST_TO_ADDR
// exit ;
40425: GO 41281
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40427: LD_VAR 0 1
40431: NOT
40432: IFTRUE 40457
40434: PUSH
40435: LD_VAR 0 1
40439: PPUSH
40440: CALL_OW 266
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: IN
40455: NOT
40456: OR
40457: IFTRUE 40466
40459: PUSH
40460: LD_VAR 0 2
40464: NOT
40465: OR
40466: IFTRUE 40502
40468: PUSH
40469: LD_VAR 0 5
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: LD_INT 3
40485: PUSH
40486: LD_INT 4
40488: PUSH
40489: LD_INT 5
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: IN
40500: NOT
40501: OR
40502: IFTRUE 40521
40504: PUSH
40505: LD_VAR 0 3
40509: PPUSH
40510: LD_VAR 0 4
40514: PPUSH
40515: CALL_OW 488
40519: NOT
40520: OR
40521: IFFALSE 40525
// exit ;
40523: GO 41281
// side := GetSide ( depot ) ;
40525: LD_ADDR_VAR 0 9
40529: PUSH
40530: LD_VAR 0 1
40534: PPUSH
40535: CALL_OW 255
40539: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40540: LD_VAR 0 9
40544: PPUSH
40545: LD_VAR 0 2
40549: PPUSH
40550: CALL 40010 0 2
40554: NOT
40555: IFFALSE 40559
// exit ;
40557: GO 41281
// pom := GetBase ( depot ) ;
40559: LD_ADDR_VAR 0 10
40563: PUSH
40564: LD_VAR 0 1
40568: PPUSH
40569: CALL_OW 274
40573: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40574: LD_ADDR_VAR 0 11
40578: PUSH
40579: LD_VAR 0 2
40583: PPUSH
40584: LD_VAR 0 1
40588: PPUSH
40589: CALL_OW 248
40593: PPUSH
40594: CALL_OW 450
40598: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40599: LD_VAR 0 10
40603: PPUSH
40604: LD_INT 1
40606: PPUSH
40607: CALL_OW 275
40611: PUSH
40612: LD_VAR 0 11
40616: PUSH
40617: LD_INT 1
40619: ARRAY
40620: GREATEREQUAL
40621: IFFALSE 40647
40623: PUSH
40624: LD_VAR 0 10
40628: PPUSH
40629: LD_INT 2
40631: PPUSH
40632: CALL_OW 275
40636: PUSH
40637: LD_VAR 0 11
40641: PUSH
40642: LD_INT 2
40644: ARRAY
40645: GREATEREQUAL
40646: AND
40647: IFFALSE 40673
40649: PUSH
40650: LD_VAR 0 10
40654: PPUSH
40655: LD_INT 3
40657: PPUSH
40658: CALL_OW 275
40662: PUSH
40663: LD_VAR 0 11
40667: PUSH
40668: LD_INT 3
40670: ARRAY
40671: GREATEREQUAL
40672: AND
40673: NOT
40674: IFFALSE 40678
// exit ;
40676: GO 41281
// if GetBType ( depot ) = b_depot then
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 266
40687: PUSH
40688: LD_INT 0
40690: EQUAL
40691: IFFALSE 40703
// dist := 28 else
40693: LD_ADDR_VAR 0 14
40697: PUSH
40698: LD_INT 28
40700: ST_TO_ADDR
40701: GO 40711
// dist := 36 ;
40703: LD_ADDR_VAR 0 14
40707: PUSH
40708: LD_INT 36
40710: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40711: LD_VAR 0 1
40715: PPUSH
40716: LD_VAR 0 3
40720: PPUSH
40721: LD_VAR 0 4
40725: PPUSH
40726: CALL_OW 297
40730: PUSH
40731: LD_VAR 0 14
40735: GREATER
40736: IFFALSE 40740
// exit ;
40738: GO 41281
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40740: LD_ADDR_VAR 0 12
40744: PUSH
40745: LD_VAR 0 2
40749: PPUSH
40750: LD_VAR 0 3
40754: PPUSH
40755: LD_VAR 0 4
40759: PPUSH
40760: LD_VAR 0 5
40764: PPUSH
40765: LD_VAR 0 1
40769: PPUSH
40770: CALL_OW 248
40774: PPUSH
40775: LD_INT 0
40777: PPUSH
40778: CALL 41286 0 6
40782: ST_TO_ADDR
// if not hexes then
40783: LD_VAR 0 12
40787: NOT
40788: IFFALSE 40792
// exit ;
40790: GO 41281
// hex := GetHexInfo ( x , y ) ;
40792: LD_ADDR_VAR 0 15
40796: PUSH
40797: LD_VAR 0 3
40801: PPUSH
40802: LD_VAR 0 4
40806: PPUSH
40807: CALL_OW 546
40811: ST_TO_ADDR
// if hex [ 1 ] then
40812: LD_VAR 0 15
40816: PUSH
40817: LD_INT 1
40819: ARRAY
40820: IFFALSE 40824
// exit ;
40822: GO 41281
// height := hex [ 2 ] ;
40824: LD_ADDR_VAR 0 13
40828: PUSH
40829: LD_VAR 0 15
40833: PUSH
40834: LD_INT 2
40836: ARRAY
40837: ST_TO_ADDR
// for i = 1 to hexes do
40838: LD_ADDR_VAR 0 7
40842: PUSH
40843: DOUBLE
40844: LD_INT 1
40846: DEC
40847: ST_TO_ADDR
40848: LD_VAR 0 12
40852: PUSH
40853: FOR_TO
40854: IFFALSE 41198
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40856: LD_VAR 0 12
40860: PUSH
40861: LD_VAR 0 7
40865: ARRAY
40866: PUSH
40867: LD_INT 1
40869: ARRAY
40870: PPUSH
40871: LD_VAR 0 12
40875: PUSH
40876: LD_VAR 0 7
40880: ARRAY
40881: PUSH
40882: LD_INT 2
40884: ARRAY
40885: PPUSH
40886: CALL_OW 488
40890: NOT
40891: IFTRUE 40933
40893: PUSH
40894: LD_VAR 0 12
40898: PUSH
40899: LD_VAR 0 7
40903: ARRAY
40904: PUSH
40905: LD_INT 1
40907: ARRAY
40908: PPUSH
40909: LD_VAR 0 12
40913: PUSH
40914: LD_VAR 0 7
40918: ARRAY
40919: PUSH
40920: LD_INT 2
40922: ARRAY
40923: PPUSH
40924: CALL_OW 428
40928: PUSH
40929: LD_INT 0
40931: GREATER
40932: OR
40933: IFTRUE 40971
40935: PUSH
40936: LD_VAR 0 12
40940: PUSH
40941: LD_VAR 0 7
40945: ARRAY
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PPUSH
40951: LD_VAR 0 12
40955: PUSH
40956: LD_VAR 0 7
40960: ARRAY
40961: PUSH
40962: LD_INT 2
40964: ARRAY
40965: PPUSH
40966: CALL_OW 351
40970: OR
40971: IFFALSE 40977
// exit ;
40973: POP
40974: POP
40975: GO 41281
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40977: LD_ADDR_VAR 0 8
40981: PUSH
40982: LD_VAR 0 12
40986: PUSH
40987: LD_VAR 0 7
40991: ARRAY
40992: PUSH
40993: LD_INT 1
40995: ARRAY
40996: PPUSH
40997: LD_VAR 0 12
41001: PUSH
41002: LD_VAR 0 7
41006: ARRAY
41007: PUSH
41008: LD_INT 2
41010: ARRAY
41011: PPUSH
41012: CALL_OW 546
41016: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41017: LD_VAR 0 8
41021: PUSH
41022: LD_INT 1
41024: ARRAY
41025: IFTRUE 41047
41027: PUSH
41028: LD_VAR 0 8
41032: PUSH
41033: LD_INT 2
41035: ARRAY
41036: PUSH
41037: LD_VAR 0 13
41041: PUSH
41042: LD_INT 2
41044: PLUS
41045: GREATER
41046: OR
41047: IFTRUE 41069
41049: PUSH
41050: LD_VAR 0 8
41054: PUSH
41055: LD_INT 2
41057: ARRAY
41058: PUSH
41059: LD_VAR 0 13
41063: PUSH
41064: LD_INT 2
41066: MINUS
41067: LESS
41068: OR
41069: IFTRUE 41137
41071: PUSH
41072: LD_VAR 0 8
41076: PUSH
41077: LD_INT 3
41079: ARRAY
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 8
41086: PUSH
41087: LD_INT 9
41089: PUSH
41090: LD_INT 10
41092: PUSH
41093: LD_INT 11
41095: PUSH
41096: LD_INT 12
41098: PUSH
41099: LD_INT 13
41101: PUSH
41102: LD_INT 16
41104: PUSH
41105: LD_INT 17
41107: PUSH
41108: LD_INT 18
41110: PUSH
41111: LD_INT 19
41113: PUSH
41114: LD_INT 20
41116: PUSH
41117: LD_INT 21
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: IN
41135: NOT
41136: OR
41137: IFTRUE 41150
41139: PUSH
41140: LD_VAR 0 8
41144: PUSH
41145: LD_INT 5
41147: ARRAY
41148: NOT
41149: OR
41150: IFTRUE 41190
41152: PUSH
41153: LD_VAR 0 8
41157: PUSH
41158: LD_INT 6
41160: ARRAY
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: LD_INT 7
41170: PUSH
41171: LD_INT 9
41173: PUSH
41174: LD_INT 10
41176: PUSH
41177: LD_INT 11
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: IN
41188: NOT
41189: OR
41190: IFFALSE 41196
// exit ;
41192: POP
41193: POP
41194: GO 41281
// end ;
41196: GO 40853
41198: POP
41199: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41200: LD_VAR 0 9
41204: PPUSH
41205: LD_VAR 0 3
41209: PPUSH
41210: LD_VAR 0 4
41214: PPUSH
41215: LD_INT 20
41217: PPUSH
41218: CALL 33100 0 4
41222: PUSH
41223: LD_INT 4
41225: ARRAY
41226: IFFALSE 41230
// exit ;
41228: GO 41281
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41230: LD_VAR 0 2
41234: PUSH
41235: LD_INT 29
41237: PUSH
41238: LD_INT 30
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: IN
41245: IFFALSE 41269
41247: PUSH
41248: LD_VAR 0 3
41252: PPUSH
41253: LD_VAR 0 4
41257: PPUSH
41258: LD_VAR 0 9
41262: PPUSH
41263: CALL_OW 440
41267: NOT
41268: AND
41269: IFFALSE 41273
// exit ;
41271: GO 41281
// result := true ;
41273: LD_ADDR_VAR 0 6
41277: PUSH
41278: LD_INT 1
41280: ST_TO_ADDR
// end ;
41281: LD_VAR 0 6
41285: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41286: LD_INT 0
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
// result = [ ] ;
41346: LD_ADDR_VAR 0 7
41350: PUSH
41351: EMPTY
41352: ST_TO_ADDR
// temp_list = [ ] ;
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: EMPTY
41359: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41360: LD_VAR 0 4
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: LD_INT 4
41379: PUSH
41380: LD_INT 5
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: IN
41391: NOT
41392: IFTRUE 41435
41394: PUSH
41395: LD_VAR 0 1
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: IN
41410: IFFALSE 41434
41412: PUSH
41413: LD_VAR 0 5
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: IN
41432: NOT
41433: AND
41434: OR
41435: IFFALSE 41439
// exit ;
41437: GO 59838
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41439: LD_VAR 0 1
41443: PUSH
41444: LD_INT 6
41446: PUSH
41447: LD_INT 7
41449: PUSH
41450: LD_INT 8
41452: PUSH
41453: LD_INT 13
41455: PUSH
41456: LD_INT 12
41458: PUSH
41459: LD_INT 15
41461: PUSH
41462: LD_INT 11
41464: PUSH
41465: LD_INT 14
41467: PUSH
41468: LD_INT 10
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: IN
41482: IFFALSE 41492
// btype = b_lab ;
41484: LD_ADDR_VAR 0 1
41488: PUSH
41489: LD_INT 6
41491: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41492: LD_VAR 0 6
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: IN
41511: NOT
41512: IFTRUE 41580
41514: PUSH
41515: LD_VAR 0 1
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 3
41531: PUSH
41532: LD_INT 6
41534: PUSH
41535: LD_INT 36
41537: PUSH
41538: LD_INT 4
41540: PUSH
41541: LD_INT 5
41543: PUSH
41544: LD_INT 31
41546: PUSH
41547: LD_INT 32
41549: PUSH
41550: LD_INT 33
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: IN
41566: NOT
41567: IFFALSE 41579
41569: PUSH
41570: LD_VAR 0 6
41574: PUSH
41575: LD_INT 1
41577: EQUAL
41578: AND
41579: OR
41580: IFTRUE 41612
41582: PUSH
41583: LD_VAR 0 1
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: IN
41598: NOT
41599: IFFALSE 41611
41601: PUSH
41602: LD_VAR 0 6
41606: PUSH
41607: LD_INT 2
41609: EQUAL
41610: AND
41611: OR
41612: IFFALSE 41622
// mode = 0 ;
41614: LD_ADDR_VAR 0 6
41618: PUSH
41619: LD_INT 0
41621: ST_TO_ADDR
// case mode of 0 :
41622: LD_VAR 0 6
41626: PUSH
41627: LD_INT 0
41629: DOUBLE
41630: EQUAL
41631: IFTRUE 41635
41633: GO 53088
41635: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41636: LD_ADDR_VAR 0 11
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 2
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 3
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41829: LD_ADDR_VAR 0 12
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: NEG
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 3
41997: NEG
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42025: LD_ADDR_VAR 0 13
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: LD_INT 3
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 3
42184: NEG
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 3
42196: NEG
42197: PUSH
42198: LD_INT 3
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42224: LD_ADDR_VAR 0 14
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 3
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 3
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42420: LD_ADDR_VAR 0 15
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 3
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 3
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42613: LD_ADDR_VAR 0 16
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 3
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 3
42770: PUSH
42771: LD_INT 3
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 3
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42806: LD_ADDR_VAR 0 17
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 2
43005: NEG
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43036: LD_ADDR_VAR 0 18
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43266: LD_ADDR_VAR 0 19
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43496: LD_ADDR_VAR 0 20
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43726: LD_ADDR_VAR 0 21
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43956: LD_ADDR_VAR 0 22
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44186: LD_ADDR_VAR 0 23
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 3
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 3
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44466: LD_ADDR_VAR 0 24
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 3
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44742: LD_ADDR_VAR 0 25
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45016: LD_ADDR_VAR 0 26
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 3
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45292: LD_ADDR_VAR 0 27
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45572: LD_ADDR_VAR 0 28
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 3
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 3
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45854: LD_ADDR_VAR 0 29
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 3
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 3
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46133: LD_ADDR_VAR 0 30
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 3
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 3
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 3
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46411: LD_ADDR_VAR 0 31
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 3
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 3
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46689: LD_ADDR_VAR 0 32
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46967: LD_ADDR_VAR 0 33
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: NEG
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47246: LD_ADDR_VAR 0 34
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 2
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 3
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47526: LD_ADDR_VAR 0 35
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47638: LD_ADDR_VAR 0 36
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47750: LD_ADDR_VAR 0 37
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47862: LD_ADDR_VAR 0 38
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47974: LD_ADDR_VAR 0 39
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48086: LD_ADDR_VAR 0 40
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48198: LD_ADDR_VAR 0 41
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 3
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 3
48507: NEG
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48548: LD_ADDR_VAR 0 42
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: NEG
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 3
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: LD_INT 3
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: NEG
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 3
48857: NEG
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48898: LD_ADDR_VAR 0 43
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 3
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 3
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 3
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 3
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49246: LD_ADDR_VAR 0 44
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 3
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 3
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: NEG
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49596: LD_ADDR_VAR 0 45
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: LD_INT 3
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 3
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 3
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 3
49905: NEG
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49946: LD_ADDR_VAR 0 46
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 3
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 3
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 3
50242: NEG
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: LD_INT 1
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50294: LD_ADDR_VAR 0 47
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50445: LD_ADDR_VAR 0 48
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50592: LD_ADDR_VAR 0 49
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50736: LD_ADDR_VAR 0 50
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50880: LD_ADDR_VAR 0 51
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51027: LD_ADDR_VAR 0 52
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51178: LD_ADDR_VAR 0 53
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51408: LD_ADDR_VAR 0 54
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51638: LD_ADDR_VAR 0 55
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51868: LD_ADDR_VAR 0 56
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52098: LD_ADDR_VAR 0 57
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52328: LD_ADDR_VAR 0 58
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52558: LD_ADDR_VAR 0 59
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52646: LD_ADDR_VAR 0 60
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52734: LD_ADDR_VAR 0 61
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52822: LD_ADDR_VAR 0 62
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52910: LD_ADDR_VAR 0 63
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52998: LD_ADDR_VAR 0 64
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: ST_TO_ADDR
// end ; 1 :
53086: GO 58983
53088: LD_INT 1
53090: DOUBLE
53091: EQUAL
53092: IFTRUE 53096
53094: GO 55719
53096: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53097: LD_ADDR_VAR 0 11
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53141: LD_ADDR_VAR 0 12
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53182: LD_ADDR_VAR 0 13
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53222: LD_ADDR_VAR 0 14
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 3
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 3
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53263: LD_ADDR_VAR 0 15
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53307: LD_ADDR_VAR 0 16
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 3
53338: NEG
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53353: LD_ADDR_VAR 0 17
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 3
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 3
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53397: LD_ADDR_VAR 0 18
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53438: LD_ADDR_VAR 0 19
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53478: LD_ADDR_VAR 0 20
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 3
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: LIST
53518: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53519: LD_ADDR_VAR 0 21
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 3
53537: NEG
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53563: LD_ADDR_VAR 0 22
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 3
53582: NEG
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 3
53594: NEG
53595: PUSH
53596: LD_INT 3
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53609: LD_ADDR_VAR 0 23
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 4
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53653: LD_ADDR_VAR 0 24
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 4
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53694: LD_ADDR_VAR 0 25
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 4
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: LD_INT 4
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53734: LD_ADDR_VAR 0 26
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 4
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 3
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53775: LD_ADDR_VAR 0 27
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 4
53804: NEG
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53819: LD_ADDR_VAR 0 28
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: NEG
53839: PUSH
53840: LD_INT 4
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 4
53850: NEG
53851: PUSH
53852: LD_INT 3
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53865: LD_ADDR_VAR 0 29
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 3
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 4
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 4
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 5
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 5
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 4
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: LD_INT 6
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 6
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 5
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54020: LD_ADDR_VAR 0 30
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 3
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 4
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 4
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 4
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 5
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 5
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 5
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 6
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 6
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54163: LD_ADDR_VAR 0 31
54167: PUSH
54168: LD_INT 3
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: LD_INT 3
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 4
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 4
54210: PUSH
54211: LD_INT 4
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 3
54220: PUSH
54221: LD_INT 4
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 5
54230: PUSH
54231: LD_INT 4
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 5
54240: PUSH
54241: LD_INT 5
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 4
54250: PUSH
54251: LD_INT 5
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 6
54260: PUSH
54261: LD_INT 5
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 6
54270: PUSH
54271: LD_INT 6
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 5
54280: PUSH
54281: LD_INT 6
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54302: LD_ADDR_VAR 0 32
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 4
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 5
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 5
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 4
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 6
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 6
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 5
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54445: LD_ADDR_VAR 0 33
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 3
54463: NEG
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 3
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 4
54497: NEG
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 4
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 4
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 5
54531: NEG
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 5
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 5
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 6
54565: NEG
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 6
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54600: LD_ADDR_VAR 0 34
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: LD_INT 3
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: LD_INT 3
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: LD_INT 4
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 4
54655: NEG
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 4
54667: NEG
54668: PUSH
54669: LD_INT 4
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 4
54679: NEG
54680: PUSH
54681: LD_INT 5
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 5
54691: NEG
54692: PUSH
54693: LD_INT 4
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 5
54703: NEG
54704: PUSH
54705: LD_INT 5
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 5
54715: NEG
54716: PUSH
54717: LD_INT 6
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 6
54727: NEG
54728: PUSH
54729: LD_INT 5
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 6
54739: NEG
54740: PUSH
54741: LD_INT 6
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54763: LD_ADDR_VAR 0 41
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 3
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54807: LD_ADDR_VAR 0 42
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 3
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54848: LD_ADDR_VAR 0 43
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54888: LD_ADDR_VAR 0 44
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54929: LD_ADDR_VAR 0 45
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: NEG
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54973: LD_ADDR_VAR 0 46
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 3
55004: NEG
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55019: LD_ADDR_VAR 0 47
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 3
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55052: LD_ADDR_VAR 0 48
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55083: LD_ADDR_VAR 0 49
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55112: LD_ADDR_VAR 0 50
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 3
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55141: LD_ADDR_VAR 0 51
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55172: LD_ADDR_VAR 0 52
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55205: LD_ADDR_VAR 0 53
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55249: LD_ADDR_VAR 0 54
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: LIST
55289: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55290: LD_ADDR_VAR 0 55
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55330: LD_ADDR_VAR 0 56
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 3
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55371: LD_ADDR_VAR 0 57
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55415: LD_ADDR_VAR 0 58
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 3
55434: NEG
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 3
55446: NEG
55447: PUSH
55448: LD_INT 3
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55461: LD_ADDR_VAR 0 59
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 2
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55505: LD_ADDR_VAR 0 60
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55546: LD_ADDR_VAR 0 61
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55586: LD_ADDR_VAR 0 62
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55627: LD_ADDR_VAR 0 63
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55671: LD_ADDR_VAR 0 64
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: ST_TO_ADDR
// end ; 2 :
55717: GO 58983
55719: LD_INT 2
55721: DOUBLE
55722: EQUAL
55723: IFTRUE 55727
55725: GO 58982
55727: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55728: LD_ADDR_VAR 0 29
55732: PUSH
55733: LD_INT 4
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 4
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 5
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 5
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 4
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 5
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 4
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: LD_INT 4
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 4
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 4
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: LD_INT 4
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 4
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 4
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 5
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 5
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 4
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 3
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: LD_INT 5
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 4
56067: NEG
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 4
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 4
56090: NEG
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 4
56125: NEG
56126: PUSH
56127: LD_INT 5
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: LD_INT 4
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 4
56161: NEG
56162: PUSH
56163: LD_INT 3
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 5
56173: NEG
56174: PUSH
56175: LD_INT 4
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 5
56185: NEG
56186: PUSH
56187: LD_INT 5
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: LD_INT 5
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 5
56209: NEG
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56266: LD_ADDR_VAR 0 30
56270: PUSH
56271: LD_INT 4
56273: PUSH
56274: LD_INT 4
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 4
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 5
56293: PUSH
56294: LD_INT 4
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 5
56303: PUSH
56304: LD_INT 5
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 4
56313: PUSH
56314: LD_INT 5
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 3
56323: PUSH
56324: LD_INT 4
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 5
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: LD_INT 5
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 4
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 4
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 4
56456: NEG
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 3
56490: NEG
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 4
56501: NEG
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 5
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 5
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 5
56535: NEG
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 4
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 4
56618: NEG
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 4
56630: NEG
56631: PUSH
56632: LD_INT 4
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: LD_INT 4
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 4
56654: NEG
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: LD_INT 4
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 5
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: LD_INT 4
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 3
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 4
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 5
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 5
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56813: LD_ADDR_VAR 0 31
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 4
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 5
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 4
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: LD_INT 5
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 4
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 4
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 4
56992: NEG
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: LD_INT 4
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: LD_INT 5
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: LD_INT 4
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 4
57063: NEG
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 5
57075: NEG
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 5
57087: NEG
57088: PUSH
57089: LD_INT 5
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 3
57099: NEG
57100: PUSH
57101: LD_INT 5
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 5
57111: NEG
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 4
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 4
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: LD_INT 4
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 4
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 4
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 5
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 5
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 4
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 5
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57363: LD_ADDR_VAR 0 32
57367: PUSH
57368: LD_INT 4
57370: NEG
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 4
57381: NEG
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 4
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 5
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 5
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 5
57449: NEG
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 3
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 4
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 4
57532: NEG
57533: PUSH
57534: LD_INT 3
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 4
57544: NEG
57545: PUSH
57546: LD_INT 4
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: LD_INT 4
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 4
57568: NEG
57569: PUSH
57570: LD_INT 2
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 4
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 5
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 4
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 3
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 4
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: LD_INT 5
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 5
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 4
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 4
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 4
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: LD_INT 4
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 4
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 5
57795: PUSH
57796: LD_INT 4
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 5
57805: PUSH
57806: LD_INT 5
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 4
57815: PUSH
57816: LD_INT 5
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: LD_INT 4
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 5
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: LD_INT 5
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57910: LD_ADDR_VAR 0 33
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: LD_INT 4
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: LD_INT 5
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 4
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 4
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 5
57977: NEG
57978: PUSH
57979: LD_INT 4
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 5
57989: NEG
57990: PUSH
57991: LD_INT 5
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: LD_INT 5
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 5
58013: NEG
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 4
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 4
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 4
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 5
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 5
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 4
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 5
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 4
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: LD_INT 4
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 4
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: LD_INT 4
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 4
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: LD_INT 4
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 5
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 5
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 4
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 5
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58448: LD_ADDR_VAR 0 34
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 4
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 5
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 4
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 4
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 5
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 5
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 4
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 4
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 4
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 4
58650: PUSH
58651: LD_INT 4
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 4
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 5
58670: PUSH
58671: LD_INT 4
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 5
58680: PUSH
58681: LD_INT 5
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 4
58690: PUSH
58691: LD_INT 5
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: PUSH
58701: LD_INT 4
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 5
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 3
58730: PUSH
58731: LD_INT 5
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 4
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 4
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 4
58833: NEG
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 4
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 4
58878: NEG
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 5
58889: NEG
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 5
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 5
58912: NEG
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: ST_TO_ADDR
// end ; end ;
58980: GO 58983
58982: POP
// case btype of b_depot , b_warehouse :
58983: LD_VAR 0 1
58987: PUSH
58988: LD_INT 0
58990: DOUBLE
58991: EQUAL
58992: IFTRUE 59002
58994: LD_INT 1
58996: DOUBLE
58997: EQUAL
58998: IFTRUE 59002
59000: GO 59203
59002: POP
// case nation of nation_american :
59003: LD_VAR 0 5
59007: PUSH
59008: LD_INT 1
59010: DOUBLE
59011: EQUAL
59012: IFTRUE 59016
59014: GO 59072
59016: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59017: LD_ADDR_VAR 0 9
59021: PUSH
59022: LD_VAR 0 11
59026: PUSH
59027: LD_VAR 0 12
59031: PUSH
59032: LD_VAR 0 13
59036: PUSH
59037: LD_VAR 0 14
59041: PUSH
59042: LD_VAR 0 15
59046: PUSH
59047: LD_VAR 0 16
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: LD_VAR 0 4
59064: PUSH
59065: LD_INT 1
59067: PLUS
59068: ARRAY
59069: ST_TO_ADDR
59070: GO 59201
59072: LD_INT 2
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59080
59078: GO 59136
59080: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59081: LD_ADDR_VAR 0 9
59085: PUSH
59086: LD_VAR 0 17
59090: PUSH
59091: LD_VAR 0 18
59095: PUSH
59096: LD_VAR 0 19
59100: PUSH
59101: LD_VAR 0 20
59105: PUSH
59106: LD_VAR 0 21
59110: PUSH
59111: LD_VAR 0 22
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: PUSH
59124: LD_VAR 0 4
59128: PUSH
59129: LD_INT 1
59131: PLUS
59132: ARRAY
59133: ST_TO_ADDR
59134: GO 59201
59136: LD_INT 3
59138: DOUBLE
59139: EQUAL
59140: IFTRUE 59144
59142: GO 59200
59144: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59145: LD_ADDR_VAR 0 9
59149: PUSH
59150: LD_VAR 0 23
59154: PUSH
59155: LD_VAR 0 24
59159: PUSH
59160: LD_VAR 0 25
59164: PUSH
59165: LD_VAR 0 26
59169: PUSH
59170: LD_VAR 0 27
59174: PUSH
59175: LD_VAR 0 28
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: PUSH
59188: LD_VAR 0 4
59192: PUSH
59193: LD_INT 1
59195: PLUS
59196: ARRAY
59197: ST_TO_ADDR
59198: GO 59201
59200: POP
59201: GO 59756
59203: LD_INT 2
59205: DOUBLE
59206: EQUAL
59207: IFTRUE 59217
59209: LD_INT 3
59211: DOUBLE
59212: EQUAL
59213: IFTRUE 59217
59215: GO 59273
59217: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59218: LD_ADDR_VAR 0 9
59222: PUSH
59223: LD_VAR 0 29
59227: PUSH
59228: LD_VAR 0 30
59232: PUSH
59233: LD_VAR 0 31
59237: PUSH
59238: LD_VAR 0 32
59242: PUSH
59243: LD_VAR 0 33
59247: PUSH
59248: LD_VAR 0 34
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: PUSH
59261: LD_VAR 0 4
59265: PUSH
59266: LD_INT 1
59268: PLUS
59269: ARRAY
59270: ST_TO_ADDR
59271: GO 59756
59273: LD_INT 16
59275: DOUBLE
59276: EQUAL
59277: IFTRUE 59335
59279: LD_INT 17
59281: DOUBLE
59282: EQUAL
59283: IFTRUE 59335
59285: LD_INT 18
59287: DOUBLE
59288: EQUAL
59289: IFTRUE 59335
59291: LD_INT 19
59293: DOUBLE
59294: EQUAL
59295: IFTRUE 59335
59297: LD_INT 22
59299: DOUBLE
59300: EQUAL
59301: IFTRUE 59335
59303: LD_INT 20
59305: DOUBLE
59306: EQUAL
59307: IFTRUE 59335
59309: LD_INT 21
59311: DOUBLE
59312: EQUAL
59313: IFTRUE 59335
59315: LD_INT 23
59317: DOUBLE
59318: EQUAL
59319: IFTRUE 59335
59321: LD_INT 24
59323: DOUBLE
59324: EQUAL
59325: IFTRUE 59335
59327: LD_INT 25
59329: DOUBLE
59330: EQUAL
59331: IFTRUE 59335
59333: GO 59391
59335: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59336: LD_ADDR_VAR 0 9
59340: PUSH
59341: LD_VAR 0 35
59345: PUSH
59346: LD_VAR 0 36
59350: PUSH
59351: LD_VAR 0 37
59355: PUSH
59356: LD_VAR 0 38
59360: PUSH
59361: LD_VAR 0 39
59365: PUSH
59366: LD_VAR 0 40
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: PUSH
59379: LD_VAR 0 4
59383: PUSH
59384: LD_INT 1
59386: PLUS
59387: ARRAY
59388: ST_TO_ADDR
59389: GO 59756
59391: LD_INT 6
59393: DOUBLE
59394: EQUAL
59395: IFTRUE 59447
59397: LD_INT 7
59399: DOUBLE
59400: EQUAL
59401: IFTRUE 59447
59403: LD_INT 8
59405: DOUBLE
59406: EQUAL
59407: IFTRUE 59447
59409: LD_INT 13
59411: DOUBLE
59412: EQUAL
59413: IFTRUE 59447
59415: LD_INT 12
59417: DOUBLE
59418: EQUAL
59419: IFTRUE 59447
59421: LD_INT 15
59423: DOUBLE
59424: EQUAL
59425: IFTRUE 59447
59427: LD_INT 11
59429: DOUBLE
59430: EQUAL
59431: IFTRUE 59447
59433: LD_INT 14
59435: DOUBLE
59436: EQUAL
59437: IFTRUE 59447
59439: LD_INT 10
59441: DOUBLE
59442: EQUAL
59443: IFTRUE 59447
59445: GO 59503
59447: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59448: LD_ADDR_VAR 0 9
59452: PUSH
59453: LD_VAR 0 41
59457: PUSH
59458: LD_VAR 0 42
59462: PUSH
59463: LD_VAR 0 43
59467: PUSH
59468: LD_VAR 0 44
59472: PUSH
59473: LD_VAR 0 45
59477: PUSH
59478: LD_VAR 0 46
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: PUSH
59491: LD_VAR 0 4
59495: PUSH
59496: LD_INT 1
59498: PLUS
59499: ARRAY
59500: ST_TO_ADDR
59501: GO 59756
59503: LD_INT 36
59505: DOUBLE
59506: EQUAL
59507: IFTRUE 59511
59509: GO 59567
59511: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59512: LD_ADDR_VAR 0 9
59516: PUSH
59517: LD_VAR 0 47
59521: PUSH
59522: LD_VAR 0 48
59526: PUSH
59527: LD_VAR 0 49
59531: PUSH
59532: LD_VAR 0 50
59536: PUSH
59537: LD_VAR 0 51
59541: PUSH
59542: LD_VAR 0 52
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: PUSH
59555: LD_VAR 0 4
59559: PUSH
59560: LD_INT 1
59562: PLUS
59563: ARRAY
59564: ST_TO_ADDR
59565: GO 59756
59567: LD_INT 4
59569: DOUBLE
59570: EQUAL
59571: IFTRUE 59593
59573: LD_INT 5
59575: DOUBLE
59576: EQUAL
59577: IFTRUE 59593
59579: LD_INT 34
59581: DOUBLE
59582: EQUAL
59583: IFTRUE 59593
59585: LD_INT 37
59587: DOUBLE
59588: EQUAL
59589: IFTRUE 59593
59591: GO 59649
59593: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59594: LD_ADDR_VAR 0 9
59598: PUSH
59599: LD_VAR 0 53
59603: PUSH
59604: LD_VAR 0 54
59608: PUSH
59609: LD_VAR 0 55
59613: PUSH
59614: LD_VAR 0 56
59618: PUSH
59619: LD_VAR 0 57
59623: PUSH
59624: LD_VAR 0 58
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: PUSH
59637: LD_VAR 0 4
59641: PUSH
59642: LD_INT 1
59644: PLUS
59645: ARRAY
59646: ST_TO_ADDR
59647: GO 59756
59649: LD_INT 31
59651: DOUBLE
59652: EQUAL
59653: IFTRUE 59699
59655: LD_INT 32
59657: DOUBLE
59658: EQUAL
59659: IFTRUE 59699
59661: LD_INT 33
59663: DOUBLE
59664: EQUAL
59665: IFTRUE 59699
59667: LD_INT 27
59669: DOUBLE
59670: EQUAL
59671: IFTRUE 59699
59673: LD_INT 26
59675: DOUBLE
59676: EQUAL
59677: IFTRUE 59699
59679: LD_INT 28
59681: DOUBLE
59682: EQUAL
59683: IFTRUE 59699
59685: LD_INT 29
59687: DOUBLE
59688: EQUAL
59689: IFTRUE 59699
59691: LD_INT 30
59693: DOUBLE
59694: EQUAL
59695: IFTRUE 59699
59697: GO 59755
59699: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59700: LD_ADDR_VAR 0 9
59704: PUSH
59705: LD_VAR 0 59
59709: PUSH
59710: LD_VAR 0 60
59714: PUSH
59715: LD_VAR 0 61
59719: PUSH
59720: LD_VAR 0 62
59724: PUSH
59725: LD_VAR 0 63
59729: PUSH
59730: LD_VAR 0 64
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: PUSH
59743: LD_VAR 0 4
59747: PUSH
59748: LD_INT 1
59750: PLUS
59751: ARRAY
59752: ST_TO_ADDR
59753: GO 59756
59755: POP
// temp_list2 = [ ] ;
59756: LD_ADDR_VAR 0 10
59760: PUSH
59761: EMPTY
59762: ST_TO_ADDR
// for i in temp_list do
59763: LD_ADDR_VAR 0 8
59767: PUSH
59768: LD_VAR 0 9
59772: PUSH
59773: FOR_IN
59774: IFFALSE 59826
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59776: LD_ADDR_VAR 0 10
59780: PUSH
59781: LD_VAR 0 10
59785: PUSH
59786: LD_VAR 0 8
59790: PUSH
59791: LD_INT 1
59793: ARRAY
59794: PUSH
59795: LD_VAR 0 2
59799: PLUS
59800: PUSH
59801: LD_VAR 0 8
59805: PUSH
59806: LD_INT 2
59808: ARRAY
59809: PUSH
59810: LD_VAR 0 3
59814: PLUS
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: EMPTY
59821: LIST
59822: ADD
59823: ST_TO_ADDR
59824: GO 59773
59826: POP
59827: POP
// result = temp_list2 ;
59828: LD_ADDR_VAR 0 7
59832: PUSH
59833: LD_VAR 0 10
59837: ST_TO_ADDR
// end ;
59838: LD_VAR 0 7
59842: RET
// export function EnemyInRange ( unit , dist ) ; begin
59843: LD_INT 0
59845: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59846: LD_ADDR_VAR 0 3
59850: PUSH
59851: LD_VAR 0 1
59855: PPUSH
59856: CALL_OW 255
59860: PPUSH
59861: LD_VAR 0 1
59865: PPUSH
59866: CALL_OW 250
59870: PPUSH
59871: LD_VAR 0 1
59875: PPUSH
59876: CALL_OW 251
59880: PPUSH
59881: LD_VAR 0 2
59885: PPUSH
59886: CALL 33100 0 4
59890: PUSH
59891: LD_INT 4
59893: ARRAY
59894: ST_TO_ADDR
// end ;
59895: LD_VAR 0 3
59899: RET
// export function PlayerSeeMe ( unit ) ; begin
59900: LD_INT 0
59902: PPUSH
// result := See ( your_side , unit ) ;
59903: LD_ADDR_VAR 0 2
59907: PUSH
59908: LD_OWVAR 2
59912: PPUSH
59913: LD_VAR 0 1
59917: PPUSH
59918: CALL_OW 292
59922: ST_TO_ADDR
// end ;
59923: LD_VAR 0 2
59927: RET
// export function ReverseDir ( unit ) ; begin
59928: LD_INT 0
59930: PPUSH
// if not unit then
59931: LD_VAR 0 1
59935: NOT
59936: IFFALSE 59940
// exit ;
59938: GO 59963
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59940: LD_ADDR_VAR 0 2
59944: PUSH
59945: LD_VAR 0 1
59949: PPUSH
59950: CALL_OW 254
59954: PUSH
59955: LD_INT 3
59957: PLUS
59958: PUSH
59959: LD_INT 6
59961: MOD
59962: ST_TO_ADDR
// end ;
59963: LD_VAR 0 2
59967: RET
// export function ReverseArray ( array ) ; var i ; begin
59968: LD_INT 0
59970: PPUSH
59971: PPUSH
// if not array then
59972: LD_VAR 0 1
59976: NOT
59977: IFFALSE 59981
// exit ;
59979: GO 60036
// result := [ ] ;
59981: LD_ADDR_VAR 0 2
59985: PUSH
59986: EMPTY
59987: ST_TO_ADDR
// for i := array downto 1 do
59988: LD_ADDR_VAR 0 3
59992: PUSH
59993: DOUBLE
59994: LD_VAR 0 1
59998: INC
59999: ST_TO_ADDR
60000: LD_INT 1
60002: PUSH
60003: FOR_DOWNTO
60004: IFFALSE 60034
// result := Join ( result , array [ i ] ) ;
60006: LD_ADDR_VAR 0 2
60010: PUSH
60011: LD_VAR 0 2
60015: PPUSH
60016: LD_VAR 0 1
60020: PUSH
60021: LD_VAR 0 3
60025: ARRAY
60026: PPUSH
60027: CALL 64888 0 2
60031: ST_TO_ADDR
60032: GO 60003
60034: POP
60035: POP
// end ;
60036: LD_VAR 0 2
60040: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60041: LD_INT 0
60043: PPUSH
60044: PPUSH
60045: PPUSH
60046: PPUSH
60047: PPUSH
60048: PPUSH
// if not unit or not hexes then
60049: LD_VAR 0 1
60053: NOT
60054: IFTRUE 60063
60056: PUSH
60057: LD_VAR 0 2
60061: NOT
60062: OR
60063: IFFALSE 60067
// exit ;
60065: GO 60190
// dist := 9999 ;
60067: LD_ADDR_VAR 0 5
60071: PUSH
60072: LD_INT 9999
60074: ST_TO_ADDR
// for i = 1 to hexes do
60075: LD_ADDR_VAR 0 4
60079: PUSH
60080: DOUBLE
60081: LD_INT 1
60083: DEC
60084: ST_TO_ADDR
60085: LD_VAR 0 2
60089: PUSH
60090: FOR_TO
60091: IFFALSE 60178
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60093: LD_ADDR_VAR 0 6
60097: PUSH
60098: LD_VAR 0 1
60102: PPUSH
60103: LD_VAR 0 2
60107: PUSH
60108: LD_VAR 0 4
60112: ARRAY
60113: PUSH
60114: LD_INT 1
60116: ARRAY
60117: PPUSH
60118: LD_VAR 0 2
60122: PUSH
60123: LD_VAR 0 4
60127: ARRAY
60128: PUSH
60129: LD_INT 2
60131: ARRAY
60132: PPUSH
60133: CALL_OW 297
60137: ST_TO_ADDR
// if tdist < dist then
60138: LD_VAR 0 6
60142: PUSH
60143: LD_VAR 0 5
60147: LESS
60148: IFFALSE 60176
// begin hex := hexes [ i ] ;
60150: LD_ADDR_VAR 0 8
60154: PUSH
60155: LD_VAR 0 2
60159: PUSH
60160: LD_VAR 0 4
60164: ARRAY
60165: ST_TO_ADDR
// dist := tdist ;
60166: LD_ADDR_VAR 0 5
60170: PUSH
60171: LD_VAR 0 6
60175: ST_TO_ADDR
// end ; end ;
60176: GO 60090
60178: POP
60179: POP
// result := hex ;
60180: LD_ADDR_VAR 0 3
60184: PUSH
60185: LD_VAR 0 8
60189: ST_TO_ADDR
// end ;
60190: LD_VAR 0 3
60194: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60199: LD_VAR 0 1
60203: NOT
60204: IFTRUE 60243
60206: PUSH
60207: LD_VAR 0 1
60211: PUSH
60212: LD_INT 21
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 23
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PPUSH
60236: CALL_OW 69
60240: IN
60241: NOT
60242: OR
60243: IFFALSE 60247
// exit ;
60245: GO 60294
// for i = 1 to 3 do
60247: LD_ADDR_VAR 0 3
60251: PUSH
60252: DOUBLE
60253: LD_INT 1
60255: DEC
60256: ST_TO_ADDR
60257: LD_INT 3
60259: PUSH
60260: FOR_TO
60261: IFFALSE 60292
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60263: LD_VAR 0 1
60267: PPUSH
60268: CALL_OW 250
60272: PPUSH
60273: LD_VAR 0 1
60277: PPUSH
60278: CALL_OW 251
60282: PPUSH
60283: LD_INT 1
60285: PPUSH
60286: CALL_OW 453
60290: GO 60260
60292: POP
60293: POP
// end ;
60294: LD_VAR 0 2
60298: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60299: LD_INT 0
60301: PPUSH
60302: PPUSH
60303: PPUSH
60304: PPUSH
60305: PPUSH
60306: PPUSH
// if not unit or not enemy_unit then
60307: LD_VAR 0 1
60311: NOT
60312: IFTRUE 60321
60314: PUSH
60315: LD_VAR 0 2
60319: NOT
60320: OR
60321: IFFALSE 60325
// exit ;
60323: GO 60806
// if GetLives ( i ) < 250 then
60325: LD_VAR 0 4
60329: PPUSH
60330: CALL_OW 256
60334: PUSH
60335: LD_INT 250
60337: LESS
60338: IFFALSE 60351
// begin ComAutodestruct ( i ) ;
60340: LD_VAR 0 4
60344: PPUSH
60345: CALL 60195 0 1
// exit ;
60349: GO 60806
// end ; x := GetX ( enemy_unit ) ;
60351: LD_ADDR_VAR 0 7
60355: PUSH
60356: LD_VAR 0 2
60360: PPUSH
60361: CALL_OW 250
60365: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60366: LD_ADDR_VAR 0 8
60370: PUSH
60371: LD_VAR 0 2
60375: PPUSH
60376: CALL_OW 251
60380: ST_TO_ADDR
// if not x or not y then
60381: LD_VAR 0 7
60385: NOT
60386: IFTRUE 60395
60388: PUSH
60389: LD_VAR 0 8
60393: NOT
60394: OR
60395: IFFALSE 60399
// exit ;
60397: GO 60806
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60399: LD_ADDR_VAR 0 6
60403: PUSH
60404: LD_VAR 0 7
60408: PPUSH
60409: LD_INT 0
60411: PPUSH
60412: LD_INT 4
60414: PPUSH
60415: CALL_OW 272
60419: PUSH
60420: LD_VAR 0 8
60424: PPUSH
60425: LD_INT 0
60427: PPUSH
60428: LD_INT 4
60430: PPUSH
60431: CALL_OW 273
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_VAR 0 7
60444: PPUSH
60445: LD_INT 1
60447: PPUSH
60448: LD_INT 4
60450: PPUSH
60451: CALL_OW 272
60455: PUSH
60456: LD_VAR 0 8
60460: PPUSH
60461: LD_INT 1
60463: PPUSH
60464: LD_INT 4
60466: PPUSH
60467: CALL_OW 273
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_VAR 0 7
60480: PPUSH
60481: LD_INT 2
60483: PPUSH
60484: LD_INT 4
60486: PPUSH
60487: CALL_OW 272
60491: PUSH
60492: LD_VAR 0 8
60496: PPUSH
60497: LD_INT 2
60499: PPUSH
60500: LD_INT 4
60502: PPUSH
60503: CALL_OW 273
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_VAR 0 7
60516: PPUSH
60517: LD_INT 3
60519: PPUSH
60520: LD_INT 4
60522: PPUSH
60523: CALL_OW 272
60527: PUSH
60528: LD_VAR 0 8
60532: PPUSH
60533: LD_INT 3
60535: PPUSH
60536: LD_INT 4
60538: PPUSH
60539: CALL_OW 273
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_VAR 0 7
60552: PPUSH
60553: LD_INT 4
60555: PPUSH
60556: LD_INT 4
60558: PPUSH
60559: CALL_OW 272
60563: PUSH
60564: LD_VAR 0 8
60568: PPUSH
60569: LD_INT 4
60571: PPUSH
60572: LD_INT 4
60574: PPUSH
60575: CALL_OW 273
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_VAR 0 7
60588: PPUSH
60589: LD_INT 5
60591: PPUSH
60592: LD_INT 4
60594: PPUSH
60595: CALL_OW 272
60599: PUSH
60600: LD_VAR 0 8
60604: PPUSH
60605: LD_INT 5
60607: PPUSH
60608: LD_INT 4
60610: PPUSH
60611: CALL_OW 273
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: ST_TO_ADDR
// for i = tmp downto 1 do
60628: LD_ADDR_VAR 0 4
60632: PUSH
60633: DOUBLE
60634: LD_VAR 0 6
60638: INC
60639: ST_TO_ADDR
60640: LD_INT 1
60642: PUSH
60643: FOR_DOWNTO
60644: IFFALSE 60747
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60646: LD_VAR 0 6
60650: PUSH
60651: LD_VAR 0 4
60655: ARRAY
60656: PUSH
60657: LD_INT 1
60659: ARRAY
60660: PPUSH
60661: LD_VAR 0 6
60665: PUSH
60666: LD_VAR 0 4
60670: ARRAY
60671: PUSH
60672: LD_INT 2
60674: ARRAY
60675: PPUSH
60676: CALL_OW 488
60680: NOT
60681: IFTRUE 60723
60683: PUSH
60684: LD_VAR 0 6
60688: PUSH
60689: LD_VAR 0 4
60693: ARRAY
60694: PUSH
60695: LD_INT 1
60697: ARRAY
60698: PPUSH
60699: LD_VAR 0 6
60703: PUSH
60704: LD_VAR 0 4
60708: ARRAY
60709: PUSH
60710: LD_INT 2
60712: ARRAY
60713: PPUSH
60714: CALL_OW 428
60718: PUSH
60719: LD_INT 0
60721: NONEQUAL
60722: OR
60723: IFFALSE 60745
// tmp := Delete ( tmp , i ) ;
60725: LD_ADDR_VAR 0 6
60729: PUSH
60730: LD_VAR 0 6
60734: PPUSH
60735: LD_VAR 0 4
60739: PPUSH
60740: CALL_OW 3
60744: ST_TO_ADDR
60745: GO 60643
60747: POP
60748: POP
// j := GetClosestHex ( unit , tmp ) ;
60749: LD_ADDR_VAR 0 5
60753: PUSH
60754: LD_VAR 0 1
60758: PPUSH
60759: LD_VAR 0 6
60763: PPUSH
60764: CALL 60041 0 2
60768: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60769: LD_VAR 0 1
60773: PPUSH
60774: LD_VAR 0 5
60778: PUSH
60779: LD_INT 1
60781: ARRAY
60782: PPUSH
60783: LD_VAR 0 5
60787: PUSH
60788: LD_INT 2
60790: ARRAY
60791: PPUSH
60792: CALL_OW 111
// result := j ;
60796: LD_ADDR_VAR 0 3
60800: PUSH
60801: LD_VAR 0 5
60805: ST_TO_ADDR
// end ;
60806: LD_VAR 0 3
60810: RET
// export function PrepareApemanSoldier ( ) ; begin
60811: LD_INT 0
60813: PPUSH
// uc_nation := 0 ;
60814: LD_ADDR_OWVAR 21
60818: PUSH
60819: LD_INT 0
60821: ST_TO_ADDR
// hc_sex := sex_male ;
60822: LD_ADDR_OWVAR 27
60826: PUSH
60827: LD_INT 1
60829: ST_TO_ADDR
// hc_name :=  ;
60830: LD_ADDR_OWVAR 26
60834: PUSH
60835: LD_STRING 
60837: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60838: LD_ADDR_OWVAR 28
60842: PUSH
60843: LD_INT 15
60845: ST_TO_ADDR
// hc_gallery :=  ;
60846: LD_ADDR_OWVAR 33
60850: PUSH
60851: LD_STRING 
60853: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60854: LD_ADDR_OWVAR 31
60858: PUSH
60859: LD_INT 0
60861: PPUSH
60862: LD_INT 3
60864: PPUSH
60865: CALL_OW 12
60869: PUSH
60870: LD_INT 0
60872: PPUSH
60873: LD_INT 3
60875: PPUSH
60876: CALL_OW 12
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
60893: LD_ADDR_OWVAR 29
60897: PUSH
60898: LD_INT 10
60900: PUSH
60901: LD_INT 12
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: ST_TO_ADDR
// end ;
60908: LD_VAR 0 1
60912: RET
// export function PrepareApemanEngineer ( ) ; begin
60913: LD_INT 0
60915: PPUSH
// uc_nation := 0 ;
60916: LD_ADDR_OWVAR 21
60920: PUSH
60921: LD_INT 0
60923: ST_TO_ADDR
// hc_sex := sex_male ;
60924: LD_ADDR_OWVAR 27
60928: PUSH
60929: LD_INT 1
60931: ST_TO_ADDR
// hc_name :=  ;
60932: LD_ADDR_OWVAR 26
60936: PUSH
60937: LD_STRING 
60939: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60940: LD_ADDR_OWVAR 28
60944: PUSH
60945: LD_INT 16
60947: ST_TO_ADDR
// hc_gallery :=  ;
60948: LD_ADDR_OWVAR 33
60952: PUSH
60953: LD_STRING 
60955: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60956: LD_ADDR_OWVAR 31
60960: PUSH
60961: LD_INT 0
60963: PPUSH
60964: LD_INT 3
60966: PPUSH
60967: CALL_OW 12
60971: PUSH
60972: LD_INT 0
60974: PPUSH
60975: LD_INT 3
60977: PPUSH
60978: CALL_OW 12
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
60995: LD_ADDR_OWVAR 29
60999: PUSH
61000: LD_INT 10
61002: PUSH
61003: LD_INT 12
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: ST_TO_ADDR
// end ;
61010: LD_VAR 0 1
61014: RET
// export function PrepareApeman ( agressivity ) ; begin
61015: LD_INT 0
61017: PPUSH
// uc_side := 0 ;
61018: LD_ADDR_OWVAR 20
61022: PUSH
61023: LD_INT 0
61025: ST_TO_ADDR
// uc_nation := 0 ;
61026: LD_ADDR_OWVAR 21
61030: PUSH
61031: LD_INT 0
61033: ST_TO_ADDR
// hc_sex := sex_male ;
61034: LD_ADDR_OWVAR 27
61038: PUSH
61039: LD_INT 1
61041: ST_TO_ADDR
// hc_class := class_apeman ;
61042: LD_ADDR_OWVAR 28
61046: PUSH
61047: LD_INT 12
61049: ST_TO_ADDR
// hc_gallery :=  ;
61050: LD_ADDR_OWVAR 33
61054: PUSH
61055: LD_STRING 
61057: ST_TO_ADDR
// hc_name :=  ;
61058: LD_ADDR_OWVAR 26
61062: PUSH
61063: LD_STRING 
61065: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
61066: LD_ADDR_OWVAR 29
61070: PUSH
61071: LD_INT 10
61073: PUSH
61074: LD_INT 12
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// if agressivity = 0 then
61081: LD_VAR 0 1
61085: PUSH
61086: LD_INT 0
61088: EQUAL
61089: IFFALSE 61101
// hc_agressivity := 0 else
61091: LD_ADDR_OWVAR 35
61095: PUSH
61096: LD_INT 0
61098: ST_TO_ADDR
61099: GO 61122
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61101: LD_ADDR_OWVAR 35
61105: PUSH
61106: LD_VAR 0 1
61110: NEG
61111: PPUSH
61112: LD_VAR 0 1
61116: PPUSH
61117: CALL_OW 12
61121: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61122: LD_ADDR_OWVAR 31
61126: PUSH
61127: LD_INT 0
61129: PPUSH
61130: LD_INT 3
61132: PPUSH
61133: CALL_OW 12
61137: PUSH
61138: LD_INT 0
61140: PPUSH
61141: LD_INT 3
61143: PPUSH
61144: CALL_OW 12
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: ST_TO_ADDR
// end ;
61161: LD_VAR 0 2
61165: RET
// export function PrepareTiger ( agressivity ) ; begin
61166: LD_INT 0
61168: PPUSH
// uc_side := 0 ;
61169: LD_ADDR_OWVAR 20
61173: PUSH
61174: LD_INT 0
61176: ST_TO_ADDR
// uc_nation := 0 ;
61177: LD_ADDR_OWVAR 21
61181: PUSH
61182: LD_INT 0
61184: ST_TO_ADDR
// InitHc ;
61185: CALL_OW 19
// hc_class := class_tiger ;
61189: LD_ADDR_OWVAR 28
61193: PUSH
61194: LD_INT 14
61196: ST_TO_ADDR
// hc_gallery :=  ;
61197: LD_ADDR_OWVAR 33
61201: PUSH
61202: LD_STRING 
61204: ST_TO_ADDR
// hc_name :=  ;
61205: LD_ADDR_OWVAR 26
61209: PUSH
61210: LD_STRING 
61212: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61213: LD_ADDR_OWVAR 35
61217: PUSH
61218: LD_VAR 0 1
61222: NEG
61223: PPUSH
61224: LD_VAR 0 1
61228: PPUSH
61229: CALL_OW 12
61233: ST_TO_ADDR
// end ;
61234: LD_VAR 0 2
61238: RET
// export function PrepareEnchidna ( ) ; begin
61239: LD_INT 0
61241: PPUSH
// uc_side := 0 ;
61242: LD_ADDR_OWVAR 20
61246: PUSH
61247: LD_INT 0
61249: ST_TO_ADDR
// uc_nation := 0 ;
61250: LD_ADDR_OWVAR 21
61254: PUSH
61255: LD_INT 0
61257: ST_TO_ADDR
// InitHc ;
61258: CALL_OW 19
// hc_class := class_baggie ;
61262: LD_ADDR_OWVAR 28
61266: PUSH
61267: LD_INT 13
61269: ST_TO_ADDR
// hc_gallery :=  ;
61270: LD_ADDR_OWVAR 33
61274: PUSH
61275: LD_STRING 
61277: ST_TO_ADDR
// hc_name :=  ;
61278: LD_ADDR_OWVAR 26
61282: PUSH
61283: LD_STRING 
61285: ST_TO_ADDR
// end ;
61286: LD_VAR 0 1
61290: RET
// export function PrepareFrog ( ) ; begin
61291: LD_INT 0
61293: PPUSH
// uc_side := 0 ;
61294: LD_ADDR_OWVAR 20
61298: PUSH
61299: LD_INT 0
61301: ST_TO_ADDR
// uc_nation := 0 ;
61302: LD_ADDR_OWVAR 21
61306: PUSH
61307: LD_INT 0
61309: ST_TO_ADDR
// InitHc ;
61310: CALL_OW 19
// hc_class := class_frog ;
61314: LD_ADDR_OWVAR 28
61318: PUSH
61319: LD_INT 19
61321: ST_TO_ADDR
// hc_gallery :=  ;
61322: LD_ADDR_OWVAR 33
61326: PUSH
61327: LD_STRING 
61329: ST_TO_ADDR
// hc_name :=  ;
61330: LD_ADDR_OWVAR 26
61334: PUSH
61335: LD_STRING 
61337: ST_TO_ADDR
// end ;
61338: LD_VAR 0 1
61342: RET
// export function PrepareFish ( ) ; begin
61343: LD_INT 0
61345: PPUSH
// uc_side := 0 ;
61346: LD_ADDR_OWVAR 20
61350: PUSH
61351: LD_INT 0
61353: ST_TO_ADDR
// uc_nation := 0 ;
61354: LD_ADDR_OWVAR 21
61358: PUSH
61359: LD_INT 0
61361: ST_TO_ADDR
// InitHc ;
61362: CALL_OW 19
// hc_class := class_fish ;
61366: LD_ADDR_OWVAR 28
61370: PUSH
61371: LD_INT 20
61373: ST_TO_ADDR
// hc_gallery :=  ;
61374: LD_ADDR_OWVAR 33
61378: PUSH
61379: LD_STRING 
61381: ST_TO_ADDR
// hc_name :=  ;
61382: LD_ADDR_OWVAR 26
61386: PUSH
61387: LD_STRING 
61389: ST_TO_ADDR
// end ;
61390: LD_VAR 0 1
61394: RET
// export function PrepareBird ( ) ; begin
61395: LD_INT 0
61397: PPUSH
// uc_side := 0 ;
61398: LD_ADDR_OWVAR 20
61402: PUSH
61403: LD_INT 0
61405: ST_TO_ADDR
// uc_nation := 0 ;
61406: LD_ADDR_OWVAR 21
61410: PUSH
61411: LD_INT 0
61413: ST_TO_ADDR
// InitHc ;
61414: CALL_OW 19
// hc_class := class_phororhacos ;
61418: LD_ADDR_OWVAR 28
61422: PUSH
61423: LD_INT 18
61425: ST_TO_ADDR
// hc_gallery :=  ;
61426: LD_ADDR_OWVAR 33
61430: PUSH
61431: LD_STRING 
61433: ST_TO_ADDR
// hc_name :=  ;
61434: LD_ADDR_OWVAR 26
61438: PUSH
61439: LD_STRING 
61441: ST_TO_ADDR
// end ;
61442: LD_VAR 0 1
61446: RET
// export function PrepareHorse ( ) ; begin
61447: LD_INT 0
61449: PPUSH
// uc_side := 0 ;
61450: LD_ADDR_OWVAR 20
61454: PUSH
61455: LD_INT 0
61457: ST_TO_ADDR
// uc_nation := 0 ;
61458: LD_ADDR_OWVAR 21
61462: PUSH
61463: LD_INT 0
61465: ST_TO_ADDR
// InitHc ;
61466: CALL_OW 19
// hc_class := class_horse ;
61470: LD_ADDR_OWVAR 28
61474: PUSH
61475: LD_INT 21
61477: ST_TO_ADDR
// hc_gallery :=  ;
61478: LD_ADDR_OWVAR 33
61482: PUSH
61483: LD_STRING 
61485: ST_TO_ADDR
// hc_name :=  ;
61486: LD_ADDR_OWVAR 26
61490: PUSH
61491: LD_STRING 
61493: ST_TO_ADDR
// end ;
61494: LD_VAR 0 1
61498: RET
// export function PrepareMastodont ( ) ; begin
61499: LD_INT 0
61501: PPUSH
// uc_side := 0 ;
61502: LD_ADDR_OWVAR 20
61506: PUSH
61507: LD_INT 0
61509: ST_TO_ADDR
// uc_nation := 0 ;
61510: LD_ADDR_OWVAR 21
61514: PUSH
61515: LD_INT 0
61517: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61518: LD_ADDR_OWVAR 37
61522: PUSH
61523: LD_INT 31
61525: ST_TO_ADDR
// vc_control := control_rider ;
61526: LD_ADDR_OWVAR 38
61530: PUSH
61531: LD_INT 4
61533: ST_TO_ADDR
// end ;
61534: LD_VAR 0 1
61538: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61539: LD_INT 0
61541: PPUSH
61542: PPUSH
61543: PPUSH
// uc_side = 0 ;
61544: LD_ADDR_OWVAR 20
61548: PUSH
61549: LD_INT 0
61551: ST_TO_ADDR
// uc_nation = 0 ;
61552: LD_ADDR_OWVAR 21
61556: PUSH
61557: LD_INT 0
61559: ST_TO_ADDR
// InitHc_All ( ) ;
61560: CALL_OW 584
// InitVc ;
61564: CALL_OW 20
// if mastodonts then
61568: LD_VAR 0 6
61572: IFFALSE 61639
// for i = 1 to mastodonts do
61574: LD_ADDR_VAR 0 11
61578: PUSH
61579: DOUBLE
61580: LD_INT 1
61582: DEC
61583: ST_TO_ADDR
61584: LD_VAR 0 6
61588: PUSH
61589: FOR_TO
61590: IFFALSE 61637
// begin vc_chassis := 31 ;
61592: LD_ADDR_OWVAR 37
61596: PUSH
61597: LD_INT 31
61599: ST_TO_ADDR
// vc_control := control_rider ;
61600: LD_ADDR_OWVAR 38
61604: PUSH
61605: LD_INT 4
61607: ST_TO_ADDR
// animal := CreateVehicle ;
61608: LD_ADDR_VAR 0 12
61612: PUSH
61613: CALL_OW 45
61617: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61618: LD_VAR 0 12
61622: PPUSH
61623: LD_VAR 0 8
61627: PPUSH
61628: LD_INT 0
61630: PPUSH
61631: CALL 63781 0 3
// end ;
61635: GO 61589
61637: POP
61638: POP
// if horses then
61639: LD_VAR 0 5
61643: IFFALSE 61710
// for i = 1 to horses do
61645: LD_ADDR_VAR 0 11
61649: PUSH
61650: DOUBLE
61651: LD_INT 1
61653: DEC
61654: ST_TO_ADDR
61655: LD_VAR 0 5
61659: PUSH
61660: FOR_TO
61661: IFFALSE 61708
// begin hc_class := 21 ;
61663: LD_ADDR_OWVAR 28
61667: PUSH
61668: LD_INT 21
61670: ST_TO_ADDR
// hc_gallery :=  ;
61671: LD_ADDR_OWVAR 33
61675: PUSH
61676: LD_STRING 
61678: ST_TO_ADDR
// animal := CreateHuman ;
61679: LD_ADDR_VAR 0 12
61683: PUSH
61684: CALL_OW 44
61688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61689: LD_VAR 0 12
61693: PPUSH
61694: LD_VAR 0 8
61698: PPUSH
61699: LD_INT 0
61701: PPUSH
61702: CALL 63781 0 3
// end ;
61706: GO 61660
61708: POP
61709: POP
// if birds then
61710: LD_VAR 0 1
61714: IFFALSE 61781
// for i = 1 to birds do
61716: LD_ADDR_VAR 0 11
61720: PUSH
61721: DOUBLE
61722: LD_INT 1
61724: DEC
61725: ST_TO_ADDR
61726: LD_VAR 0 1
61730: PUSH
61731: FOR_TO
61732: IFFALSE 61779
// begin hc_class := 18 ;
61734: LD_ADDR_OWVAR 28
61738: PUSH
61739: LD_INT 18
61741: ST_TO_ADDR
// hc_gallery =  ;
61742: LD_ADDR_OWVAR 33
61746: PUSH
61747: LD_STRING 
61749: ST_TO_ADDR
// animal := CreateHuman ;
61750: LD_ADDR_VAR 0 12
61754: PUSH
61755: CALL_OW 44
61759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61760: LD_VAR 0 12
61764: PPUSH
61765: LD_VAR 0 8
61769: PPUSH
61770: LD_INT 0
61772: PPUSH
61773: CALL 63781 0 3
// end ;
61777: GO 61731
61779: POP
61780: POP
// if tigers then
61781: LD_VAR 0 2
61785: IFFALSE 61869
// for i = 1 to tigers do
61787: LD_ADDR_VAR 0 11
61791: PUSH
61792: DOUBLE
61793: LD_INT 1
61795: DEC
61796: ST_TO_ADDR
61797: LD_VAR 0 2
61801: PUSH
61802: FOR_TO
61803: IFFALSE 61867
// begin hc_class = class_tiger ;
61805: LD_ADDR_OWVAR 28
61809: PUSH
61810: LD_INT 14
61812: ST_TO_ADDR
// hc_gallery =  ;
61813: LD_ADDR_OWVAR 33
61817: PUSH
61818: LD_STRING 
61820: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61821: LD_ADDR_OWVAR 35
61825: PUSH
61826: LD_INT 7
61828: NEG
61829: PPUSH
61830: LD_INT 7
61832: PPUSH
61833: CALL_OW 12
61837: ST_TO_ADDR
// animal := CreateHuman ;
61838: LD_ADDR_VAR 0 12
61842: PUSH
61843: CALL_OW 44
61847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61848: LD_VAR 0 12
61852: PPUSH
61853: LD_VAR 0 8
61857: PPUSH
61858: LD_INT 0
61860: PPUSH
61861: CALL 63781 0 3
// end ;
61865: GO 61802
61867: POP
61868: POP
// if apemans then
61869: LD_VAR 0 3
61873: IFFALSE 61996
// for i = 1 to apemans do
61875: LD_ADDR_VAR 0 11
61879: PUSH
61880: DOUBLE
61881: LD_INT 1
61883: DEC
61884: ST_TO_ADDR
61885: LD_VAR 0 3
61889: PUSH
61890: FOR_TO
61891: IFFALSE 61994
// begin hc_class = class_apeman ;
61893: LD_ADDR_OWVAR 28
61897: PUSH
61898: LD_INT 12
61900: ST_TO_ADDR
// hc_gallery =  ;
61901: LD_ADDR_OWVAR 33
61905: PUSH
61906: LD_STRING 
61908: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61909: LD_ADDR_OWVAR 35
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PPUSH
61918: LD_INT 2
61920: PPUSH
61921: CALL_OW 12
61925: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61926: LD_ADDR_OWVAR 31
61930: PUSH
61931: LD_INT 1
61933: PPUSH
61934: LD_INT 3
61936: PPUSH
61937: CALL_OW 12
61941: PUSH
61942: LD_INT 1
61944: PPUSH
61945: LD_INT 3
61947: PPUSH
61948: CALL_OW 12
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: ST_TO_ADDR
// animal := CreateHuman ;
61965: LD_ADDR_VAR 0 12
61969: PUSH
61970: CALL_OW 44
61974: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61975: LD_VAR 0 12
61979: PPUSH
61980: LD_VAR 0 8
61984: PPUSH
61985: LD_INT 0
61987: PPUSH
61988: CALL 63781 0 3
// end ;
61992: GO 61890
61994: POP
61995: POP
// if enchidnas then
61996: LD_VAR 0 4
62000: IFFALSE 62067
// for i = 1 to enchidnas do
62002: LD_ADDR_VAR 0 11
62006: PUSH
62007: DOUBLE
62008: LD_INT 1
62010: DEC
62011: ST_TO_ADDR
62012: LD_VAR 0 4
62016: PUSH
62017: FOR_TO
62018: IFFALSE 62065
// begin hc_class = 13 ;
62020: LD_ADDR_OWVAR 28
62024: PUSH
62025: LD_INT 13
62027: ST_TO_ADDR
// hc_gallery =  ;
62028: LD_ADDR_OWVAR 33
62032: PUSH
62033: LD_STRING 
62035: ST_TO_ADDR
// animal := CreateHuman ;
62036: LD_ADDR_VAR 0 12
62040: PUSH
62041: CALL_OW 44
62045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62046: LD_VAR 0 12
62050: PPUSH
62051: LD_VAR 0 8
62055: PPUSH
62056: LD_INT 0
62058: PPUSH
62059: CALL 63781 0 3
// end ;
62063: GO 62017
62065: POP
62066: POP
// if fishes then
62067: LD_VAR 0 7
62071: IFFALSE 62138
// for i = 1 to fishes do
62073: LD_ADDR_VAR 0 11
62077: PUSH
62078: DOUBLE
62079: LD_INT 1
62081: DEC
62082: ST_TO_ADDR
62083: LD_VAR 0 7
62087: PUSH
62088: FOR_TO
62089: IFFALSE 62136
// begin hc_class = 20 ;
62091: LD_ADDR_OWVAR 28
62095: PUSH
62096: LD_INT 20
62098: ST_TO_ADDR
// hc_gallery =  ;
62099: LD_ADDR_OWVAR 33
62103: PUSH
62104: LD_STRING 
62106: ST_TO_ADDR
// animal := CreateHuman ;
62107: LD_ADDR_VAR 0 12
62111: PUSH
62112: CALL_OW 44
62116: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62117: LD_VAR 0 12
62121: PPUSH
62122: LD_VAR 0 9
62126: PPUSH
62127: LD_INT 0
62129: PPUSH
62130: CALL 63781 0 3
// end ;
62134: GO 62088
62136: POP
62137: POP
// end ;
62138: LD_VAR 0 10
62142: RET
// export function WantHeal ( sci , unit ) ; begin
62143: LD_INT 0
62145: PPUSH
// if GetTaskList ( sci ) > 0 then
62146: LD_VAR 0 1
62150: PPUSH
62151: CALL_OW 437
62155: PUSH
62156: LD_INT 0
62158: GREATER
62159: IFFALSE 62231
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62161: LD_VAR 0 1
62165: PPUSH
62166: CALL_OW 437
62170: PUSH
62171: LD_INT 1
62173: ARRAY
62174: PUSH
62175: LD_INT 1
62177: ARRAY
62178: PUSH
62179: LD_STRING l
62181: EQUAL
62182: IFFALSE 62209
62184: PUSH
62185: LD_VAR 0 1
62189: PPUSH
62190: CALL_OW 437
62194: PUSH
62195: LD_INT 1
62197: ARRAY
62198: PUSH
62199: LD_INT 4
62201: ARRAY
62202: PUSH
62203: LD_VAR 0 2
62207: EQUAL
62208: AND
62209: IFFALSE 62221
// result := true else
62211: LD_ADDR_VAR 0 3
62215: PUSH
62216: LD_INT 1
62218: ST_TO_ADDR
62219: GO 62229
// result := false ;
62221: LD_ADDR_VAR 0 3
62225: PUSH
62226: LD_INT 0
62228: ST_TO_ADDR
// end else
62229: GO 62239
// result := false ;
62231: LD_ADDR_VAR 0 3
62235: PUSH
62236: LD_INT 0
62238: ST_TO_ADDR
// end ;
62239: LD_VAR 0 3
62243: RET
// export function HealTarget ( sci ) ; begin
62244: LD_INT 0
62246: PPUSH
// if not sci then
62247: LD_VAR 0 1
62251: NOT
62252: IFFALSE 62256
// exit ;
62254: GO 62321
// result := 0 ;
62256: LD_ADDR_VAR 0 2
62260: PUSH
62261: LD_INT 0
62263: ST_TO_ADDR
// if GetTaskList ( sci ) then
62264: LD_VAR 0 1
62268: PPUSH
62269: CALL_OW 437
62273: IFFALSE 62321
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62275: LD_VAR 0 1
62279: PPUSH
62280: CALL_OW 437
62284: PUSH
62285: LD_INT 1
62287: ARRAY
62288: PUSH
62289: LD_INT 1
62291: ARRAY
62292: PUSH
62293: LD_STRING l
62295: EQUAL
62296: IFFALSE 62321
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62298: LD_ADDR_VAR 0 2
62302: PUSH
62303: LD_VAR 0 1
62307: PPUSH
62308: CALL_OW 437
62312: PUSH
62313: LD_INT 1
62315: ARRAY
62316: PUSH
62317: LD_INT 4
62319: ARRAY
62320: ST_TO_ADDR
// end ;
62321: LD_VAR 0 2
62325: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62326: LD_INT 0
62328: PPUSH
62329: PPUSH
62330: PPUSH
62331: PPUSH
// if not base_units then
62332: LD_VAR 0 1
62336: NOT
62337: IFFALSE 62341
// exit ;
62339: GO 62428
// result := false ;
62341: LD_ADDR_VAR 0 2
62345: PUSH
62346: LD_INT 0
62348: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62349: LD_ADDR_VAR 0 5
62353: PUSH
62354: LD_VAR 0 1
62358: PPUSH
62359: LD_INT 21
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PPUSH
62369: CALL_OW 72
62373: ST_TO_ADDR
// if not tmp then
62374: LD_VAR 0 5
62378: NOT
62379: IFFALSE 62383
// exit ;
62381: GO 62428
// for i in tmp do
62383: LD_ADDR_VAR 0 3
62387: PUSH
62388: LD_VAR 0 5
62392: PUSH
62393: FOR_IN
62394: IFFALSE 62426
// begin result := EnemyInRange ( i , 22 ) ;
62396: LD_ADDR_VAR 0 2
62400: PUSH
62401: LD_VAR 0 3
62405: PPUSH
62406: LD_INT 22
62408: PPUSH
62409: CALL 59843 0 2
62413: ST_TO_ADDR
// if result then
62414: LD_VAR 0 2
62418: IFFALSE 62424
// exit ;
62420: POP
62421: POP
62422: GO 62428
// end ;
62424: GO 62393
62426: POP
62427: POP
// end ;
62428: LD_VAR 0 2
62432: RET
// export function FilterByTag ( units , tag ) ; begin
62433: LD_INT 0
62435: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62436: LD_ADDR_VAR 0 3
62440: PUSH
62441: LD_VAR 0 1
62445: PPUSH
62446: LD_INT 120
62448: PUSH
62449: LD_VAR 0 2
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PPUSH
62458: CALL_OW 72
62462: ST_TO_ADDR
// end ;
62463: LD_VAR 0 3
62467: RET
// export function IsDriver ( un ) ; begin
62468: LD_INT 0
62470: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62471: LD_ADDR_VAR 0 2
62475: PUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_INT 55
62483: PUSH
62484: EMPTY
62485: LIST
62486: PPUSH
62487: CALL_OW 69
62491: IN
62492: ST_TO_ADDR
// end ;
62493: LD_VAR 0 2
62497: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62498: LD_INT 0
62500: PPUSH
62501: PPUSH
// list := [ ] ;
62502: LD_ADDR_VAR 0 5
62506: PUSH
62507: EMPTY
62508: ST_TO_ADDR
// case d of 0 :
62509: LD_VAR 0 3
62513: PUSH
62514: LD_INT 0
62516: DOUBLE
62517: EQUAL
62518: IFTRUE 62522
62520: GO 62655
62522: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62523: LD_ADDR_VAR 0 5
62527: PUSH
62528: LD_VAR 0 1
62532: PUSH
62533: LD_INT 4
62535: MINUS
62536: PUSH
62537: LD_VAR 0 2
62541: PUSH
62542: LD_INT 4
62544: MINUS
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: PUSH
62554: LD_VAR 0 1
62558: PUSH
62559: LD_INT 3
62561: MINUS
62562: PUSH
62563: LD_VAR 0 2
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: LIST
62575: PUSH
62576: LD_VAR 0 1
62580: PUSH
62581: LD_INT 4
62583: PLUS
62584: PUSH
62585: LD_VAR 0 2
62589: PUSH
62590: LD_INT 4
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: PUSH
62598: LD_VAR 0 1
62602: PUSH
62603: LD_INT 3
62605: PLUS
62606: PUSH
62607: LD_VAR 0 2
62611: PUSH
62612: LD_INT 3
62614: PLUS
62615: PUSH
62616: LD_INT 5
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: LIST
62623: PUSH
62624: LD_VAR 0 1
62628: PUSH
62629: LD_VAR 0 2
62633: PUSH
62634: LD_INT 4
62636: PLUS
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// end ; 1 :
62653: GO 63353
62655: LD_INT 1
62657: DOUBLE
62658: EQUAL
62659: IFTRUE 62663
62661: GO 62796
62663: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62664: LD_ADDR_VAR 0 5
62668: PUSH
62669: LD_VAR 0 1
62673: PUSH
62674: LD_VAR 0 2
62678: PUSH
62679: LD_INT 4
62681: MINUS
62682: PUSH
62683: LD_INT 3
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: PUSH
62691: LD_VAR 0 1
62695: PUSH
62696: LD_INT 3
62698: MINUS
62699: PUSH
62700: LD_VAR 0 2
62704: PUSH
62705: LD_INT 3
62707: MINUS
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: LIST
62716: PUSH
62717: LD_VAR 0 1
62721: PUSH
62722: LD_INT 4
62724: MINUS
62725: PUSH
62726: LD_VAR 0 2
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: LIST
62738: PUSH
62739: LD_VAR 0 1
62743: PUSH
62744: LD_VAR 0 2
62748: PUSH
62749: LD_INT 3
62751: PLUS
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: LIST
62760: PUSH
62761: LD_VAR 0 1
62765: PUSH
62766: LD_INT 4
62768: PLUS
62769: PUSH
62770: LD_VAR 0 2
62774: PUSH
62775: LD_INT 4
62777: PLUS
62778: PUSH
62779: LD_INT 5
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: ST_TO_ADDR
// end ; 2 :
62794: GO 63353
62796: LD_INT 2
62798: DOUBLE
62799: EQUAL
62800: IFTRUE 62804
62802: GO 62933
62804: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62805: LD_ADDR_VAR 0 5
62809: PUSH
62810: LD_VAR 0 1
62814: PUSH
62815: LD_VAR 0 2
62819: PUSH
62820: LD_INT 3
62822: MINUS
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: PUSH
62832: LD_VAR 0 1
62836: PUSH
62837: LD_INT 4
62839: PLUS
62840: PUSH
62841: LD_VAR 0 2
62845: PUSH
62846: LD_INT 4
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: LIST
62853: PUSH
62854: LD_VAR 0 1
62858: PUSH
62859: LD_VAR 0 2
62863: PUSH
62864: LD_INT 4
62866: PLUS
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: LIST
62875: PUSH
62876: LD_VAR 0 1
62880: PUSH
62881: LD_INT 3
62883: MINUS
62884: PUSH
62885: LD_VAR 0 2
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: PUSH
62898: LD_VAR 0 1
62902: PUSH
62903: LD_INT 4
62905: MINUS
62906: PUSH
62907: LD_VAR 0 2
62911: PUSH
62912: LD_INT 4
62914: MINUS
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: ST_TO_ADDR
// end ; 3 :
62931: GO 63353
62933: LD_INT 3
62935: DOUBLE
62936: EQUAL
62937: IFTRUE 62941
62939: GO 63074
62941: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62942: LD_ADDR_VAR 0 5
62946: PUSH
62947: LD_VAR 0 1
62951: PUSH
62952: LD_INT 3
62954: PLUS
62955: PUSH
62956: LD_VAR 0 2
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: PUSH
62969: LD_VAR 0 1
62973: PUSH
62974: LD_INT 4
62976: PLUS
62977: PUSH
62978: LD_VAR 0 2
62982: PUSH
62983: LD_INT 4
62985: PLUS
62986: PUSH
62987: LD_INT 5
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: PUSH
62995: LD_VAR 0 1
62999: PUSH
63000: LD_INT 4
63002: MINUS
63003: PUSH
63004: LD_VAR 0 2
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: LIST
63016: PUSH
63017: LD_VAR 0 1
63021: PUSH
63022: LD_VAR 0 2
63026: PUSH
63027: LD_INT 4
63029: MINUS
63030: PUSH
63031: LD_INT 3
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: PUSH
63039: LD_VAR 0 1
63043: PUSH
63044: LD_INT 3
63046: MINUS
63047: PUSH
63048: LD_VAR 0 2
63052: PUSH
63053: LD_INT 3
63055: MINUS
63056: PUSH
63057: LD_INT 2
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: ST_TO_ADDR
// end ; 4 :
63072: GO 63353
63074: LD_INT 4
63076: DOUBLE
63077: EQUAL
63078: IFTRUE 63082
63080: GO 63215
63082: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63083: LD_ADDR_VAR 0 5
63087: PUSH
63088: LD_VAR 0 1
63092: PUSH
63093: LD_VAR 0 2
63097: PUSH
63098: LD_INT 4
63100: PLUS
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: PUSH
63110: LD_VAR 0 1
63114: PUSH
63115: LD_INT 3
63117: PLUS
63118: PUSH
63119: LD_VAR 0 2
63123: PUSH
63124: LD_INT 3
63126: PLUS
63127: PUSH
63128: LD_INT 5
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: PUSH
63136: LD_VAR 0 1
63140: PUSH
63141: LD_INT 4
63143: PLUS
63144: PUSH
63145: LD_VAR 0 2
63149: PUSH
63150: LD_INT 4
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: LIST
63157: PUSH
63158: LD_VAR 0 1
63162: PUSH
63163: LD_VAR 0 2
63167: PUSH
63168: LD_INT 3
63170: MINUS
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: PUSH
63180: LD_VAR 0 1
63184: PUSH
63185: LD_INT 4
63187: MINUS
63188: PUSH
63189: LD_VAR 0 2
63193: PUSH
63194: LD_INT 4
63196: MINUS
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: ST_TO_ADDR
// end ; 5 :
63213: GO 63353
63215: LD_INT 5
63217: DOUBLE
63218: EQUAL
63219: IFTRUE 63223
63221: GO 63352
63223: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63224: LD_ADDR_VAR 0 5
63228: PUSH
63229: LD_VAR 0 1
63233: PUSH
63234: LD_INT 4
63236: MINUS
63237: PUSH
63238: LD_VAR 0 2
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: LIST
63250: PUSH
63251: LD_VAR 0 1
63255: PUSH
63256: LD_VAR 0 2
63260: PUSH
63261: LD_INT 4
63263: MINUS
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: PUSH
63273: LD_VAR 0 1
63277: PUSH
63278: LD_INT 4
63280: PLUS
63281: PUSH
63282: LD_VAR 0 2
63286: PUSH
63287: LD_INT 4
63289: PLUS
63290: PUSH
63291: LD_INT 5
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: PUSH
63299: LD_VAR 0 1
63303: PUSH
63304: LD_INT 3
63306: PLUS
63307: PUSH
63308: LD_VAR 0 2
63312: PUSH
63313: LD_INT 4
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: PUSH
63321: LD_VAR 0 1
63325: PUSH
63326: LD_VAR 0 2
63330: PUSH
63331: LD_INT 3
63333: PLUS
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: ST_TO_ADDR
// end ; end ;
63350: GO 63353
63352: POP
// result := list ;
63353: LD_ADDR_VAR 0 4
63357: PUSH
63358: LD_VAR 0 5
63362: ST_TO_ADDR
// end ;
63363: LD_VAR 0 4
63367: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63368: LD_INT 0
63370: PPUSH
63371: PPUSH
63372: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63373: LD_VAR 0 1
63377: NOT
63378: IFTRUE 63406
63380: PUSH
63381: LD_VAR 0 2
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 2
63391: PUSH
63392: LD_INT 3
63394: PUSH
63395: LD_INT 4
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: IN
63404: NOT
63405: OR
63406: IFFALSE 63410
// exit ;
63408: GO 63493
// tmp := [ ] ;
63410: LD_ADDR_VAR 0 5
63414: PUSH
63415: EMPTY
63416: ST_TO_ADDR
// for i in units do
63417: LD_ADDR_VAR 0 4
63421: PUSH
63422: LD_VAR 0 1
63426: PUSH
63427: FOR_IN
63428: IFFALSE 63462
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63430: LD_ADDR_VAR 0 5
63434: PUSH
63435: LD_VAR 0 5
63439: PPUSH
63440: LD_VAR 0 4
63444: PPUSH
63445: LD_VAR 0 2
63449: PPUSH
63450: CALL_OW 259
63454: PPUSH
63455: CALL 64888 0 2
63459: ST_TO_ADDR
63460: GO 63427
63462: POP
63463: POP
// if not tmp then
63464: LD_VAR 0 5
63468: NOT
63469: IFFALSE 63473
// exit ;
63471: GO 63493
// result := SortListByListDesc ( units , tmp ) ;
63473: LD_ADDR_VAR 0 3
63477: PUSH
63478: LD_VAR 0 1
63482: PPUSH
63483: LD_VAR 0 5
63487: PPUSH
63488: CALL_OW 77
63492: ST_TO_ADDR
// end ;
63493: LD_VAR 0 3
63497: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63498: LD_INT 0
63500: PPUSH
63501: PPUSH
63502: PPUSH
// result := false ;
63503: LD_ADDR_VAR 0 3
63507: PUSH
63508: LD_INT 0
63510: ST_TO_ADDR
// if not building then
63511: LD_VAR 0 2
63515: NOT
63516: IFFALSE 63520
// exit ;
63518: GO 63664
// x := GetX ( building ) ;
63520: LD_ADDR_VAR 0 4
63524: PUSH
63525: LD_VAR 0 2
63529: PPUSH
63530: CALL_OW 250
63534: ST_TO_ADDR
// y := GetY ( building ) ;
63535: LD_ADDR_VAR 0 5
63539: PUSH
63540: LD_VAR 0 2
63544: PPUSH
63545: CALL_OW 251
63549: ST_TO_ADDR
// if not x or not y then
63550: LD_VAR 0 4
63554: NOT
63555: IFTRUE 63564
63557: PUSH
63558: LD_VAR 0 5
63562: NOT
63563: OR
63564: IFFALSE 63568
// exit ;
63566: GO 63664
// if GetTaskList ( unit ) then
63568: LD_VAR 0 1
63572: PPUSH
63573: CALL_OW 437
63577: IFFALSE 63664
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63579: LD_STRING e
63581: PUSH
63582: LD_VAR 0 1
63586: PPUSH
63587: CALL_OW 437
63591: PUSH
63592: LD_INT 1
63594: ARRAY
63595: PUSH
63596: LD_INT 1
63598: ARRAY
63599: EQUAL
63600: IFFALSE 63627
63602: PUSH
63603: LD_VAR 0 4
63607: PUSH
63608: LD_VAR 0 1
63612: PPUSH
63613: CALL_OW 437
63617: PUSH
63618: LD_INT 1
63620: ARRAY
63621: PUSH
63622: LD_INT 2
63624: ARRAY
63625: EQUAL
63626: AND
63627: IFFALSE 63654
63629: PUSH
63630: LD_VAR 0 5
63634: PUSH
63635: LD_VAR 0 1
63639: PPUSH
63640: CALL_OW 437
63644: PUSH
63645: LD_INT 1
63647: ARRAY
63648: PUSH
63649: LD_INT 3
63651: ARRAY
63652: EQUAL
63653: AND
63654: IFFALSE 63664
// result := true end ;
63656: LD_ADDR_VAR 0 3
63660: PUSH
63661: LD_INT 1
63663: ST_TO_ADDR
// end ;
63664: LD_VAR 0 3
63668: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63669: LD_INT 0
63671: PPUSH
// result := false ;
63672: LD_ADDR_VAR 0 4
63676: PUSH
63677: LD_INT 0
63679: ST_TO_ADDR
// if GetTaskList ( unit ) then
63680: LD_VAR 0 1
63684: PPUSH
63685: CALL_OW 437
63689: IFFALSE 63776
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63691: LD_STRING M
63693: PUSH
63694: LD_VAR 0 1
63698: PPUSH
63699: CALL_OW 437
63703: PUSH
63704: LD_INT 1
63706: ARRAY
63707: PUSH
63708: LD_INT 1
63710: ARRAY
63711: EQUAL
63712: IFFALSE 63739
63714: PUSH
63715: LD_VAR 0 2
63719: PUSH
63720: LD_VAR 0 1
63724: PPUSH
63725: CALL_OW 437
63729: PUSH
63730: LD_INT 1
63732: ARRAY
63733: PUSH
63734: LD_INT 2
63736: ARRAY
63737: EQUAL
63738: AND
63739: IFFALSE 63766
63741: PUSH
63742: LD_VAR 0 3
63746: PUSH
63747: LD_VAR 0 1
63751: PPUSH
63752: CALL_OW 437
63756: PUSH
63757: LD_INT 1
63759: ARRAY
63760: PUSH
63761: LD_INT 3
63763: ARRAY
63764: EQUAL
63765: AND
63766: IFFALSE 63776
// result := true ;
63768: LD_ADDR_VAR 0 4
63772: PUSH
63773: LD_INT 1
63775: ST_TO_ADDR
// end ; end ;
63776: LD_VAR 0 4
63780: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63781: LD_INT 0
63783: PPUSH
63784: PPUSH
63785: PPUSH
63786: PPUSH
// if not unit or not area then
63787: LD_VAR 0 1
63791: NOT
63792: IFTRUE 63801
63794: PUSH
63795: LD_VAR 0 2
63799: NOT
63800: OR
63801: IFFALSE 63805
// exit ;
63803: GO 63981
// tmp := AreaToList ( area , i ) ;
63805: LD_ADDR_VAR 0 6
63809: PUSH
63810: LD_VAR 0 2
63814: PPUSH
63815: LD_VAR 0 5
63819: PPUSH
63820: CALL_OW 517
63824: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63825: LD_ADDR_VAR 0 5
63829: PUSH
63830: DOUBLE
63831: LD_INT 1
63833: DEC
63834: ST_TO_ADDR
63835: LD_VAR 0 6
63839: PUSH
63840: LD_INT 1
63842: ARRAY
63843: PUSH
63844: FOR_TO
63845: IFFALSE 63979
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63847: LD_ADDR_VAR 0 7
63851: PUSH
63852: LD_VAR 0 6
63856: PUSH
63857: LD_INT 1
63859: ARRAY
63860: PUSH
63861: LD_VAR 0 5
63865: ARRAY
63866: PUSH
63867: LD_VAR 0 6
63871: PUSH
63872: LD_INT 2
63874: ARRAY
63875: PUSH
63876: LD_VAR 0 5
63880: ARRAY
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63886: LD_INT 92
63888: PUSH
63889: LD_VAR 0 7
63893: PUSH
63894: LD_INT 1
63896: ARRAY
63897: PUSH
63898: LD_VAR 0 7
63902: PUSH
63903: LD_INT 2
63905: ARRAY
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: PPUSH
63916: CALL_OW 69
63920: PUSH
63921: LD_INT 0
63923: EQUAL
63924: IFFALSE 63977
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63926: LD_VAR 0 1
63930: PPUSH
63931: LD_VAR 0 7
63935: PUSH
63936: LD_INT 1
63938: ARRAY
63939: PPUSH
63940: LD_VAR 0 7
63944: PUSH
63945: LD_INT 2
63947: ARRAY
63948: PPUSH
63949: LD_VAR 0 3
63953: PPUSH
63954: CALL_OW 48
// result := IsPlaced ( unit ) ;
63958: LD_ADDR_VAR 0 4
63962: PUSH
63963: LD_VAR 0 1
63967: PPUSH
63968: CALL_OW 305
63972: ST_TO_ADDR
// exit ;
63973: POP
63974: POP
63975: GO 63981
// end ; end ;
63977: GO 63844
63979: POP
63980: POP
// end ;
63981: LD_VAR 0 4
63985: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63986: LD_INT 0
63988: PPUSH
63989: PPUSH
63990: PPUSH
// if not side or side > 8 then
63991: LD_VAR 0 1
63995: NOT
63996: IFTRUE 64008
63998: PUSH
63999: LD_VAR 0 1
64003: PUSH
64004: LD_INT 8
64006: GREATER
64007: OR
64008: IFFALSE 64012
// exit ;
64010: GO 64199
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64012: LD_ADDR_VAR 0 4
64016: PUSH
64017: LD_INT 22
64019: PUSH
64020: LD_VAR 0 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 21
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PPUSH
64043: CALL_OW 69
64047: ST_TO_ADDR
// if not tmp then
64048: LD_VAR 0 4
64052: NOT
64053: IFFALSE 64057
// exit ;
64055: GO 64199
// enable_addtolog := true ;
64057: LD_ADDR_OWVAR 81
64061: PUSH
64062: LD_INT 1
64064: ST_TO_ADDR
// AddToLog ( [ ) ;
64065: LD_STRING [
64067: PPUSH
64068: CALL_OW 561
// for i in tmp do
64072: LD_ADDR_VAR 0 3
64076: PUSH
64077: LD_VAR 0 4
64081: PUSH
64082: FOR_IN
64083: IFFALSE 64190
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64085: LD_STRING [
64087: PUSH
64088: LD_VAR 0 3
64092: PPUSH
64093: CALL_OW 266
64097: STR
64098: PUSH
64099: LD_STRING , 
64101: STR
64102: PUSH
64103: LD_VAR 0 3
64107: PPUSH
64108: CALL_OW 250
64112: STR
64113: PUSH
64114: LD_STRING , 
64116: STR
64117: PUSH
64118: LD_VAR 0 3
64122: PPUSH
64123: CALL_OW 251
64127: STR
64128: PUSH
64129: LD_STRING , 
64131: STR
64132: PUSH
64133: LD_VAR 0 3
64137: PPUSH
64138: CALL_OW 254
64142: STR
64143: PUSH
64144: LD_STRING , 
64146: STR
64147: PUSH
64148: LD_VAR 0 3
64152: PPUSH
64153: LD_INT 1
64155: PPUSH
64156: CALL_OW 268
64160: STR
64161: PUSH
64162: LD_STRING , 
64164: STR
64165: PUSH
64166: LD_VAR 0 3
64170: PPUSH
64171: LD_INT 2
64173: PPUSH
64174: CALL_OW 268
64178: STR
64179: PUSH
64180: LD_STRING ],
64182: STR
64183: PPUSH
64184: CALL_OW 561
// end ;
64188: GO 64082
64190: POP
64191: POP
// AddToLog ( ]; ) ;
64192: LD_STRING ];
64194: PPUSH
64195: CALL_OW 561
// end ;
64199: LD_VAR 0 2
64203: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64204: LD_INT 0
64206: PPUSH
64207: PPUSH
64208: PPUSH
64209: PPUSH
64210: PPUSH
// if not area or not rate or not max then
64211: LD_VAR 0 1
64215: NOT
64216: IFTRUE 64225
64218: PUSH
64219: LD_VAR 0 2
64223: NOT
64224: OR
64225: IFTRUE 64234
64227: PUSH
64228: LD_VAR 0 4
64232: NOT
64233: OR
64234: IFFALSE 64238
// exit ;
64236: GO 64427
// while 1 do
64238: LD_INT 1
64240: IFFALSE 64427
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64242: LD_ADDR_VAR 0 9
64246: PUSH
64247: LD_VAR 0 1
64251: PPUSH
64252: LD_INT 1
64254: PPUSH
64255: CALL_OW 287
64259: PUSH
64260: LD_INT 10
64262: MUL
64263: ST_TO_ADDR
// r := rate / 10 ;
64264: LD_ADDR_VAR 0 7
64268: PUSH
64269: LD_VAR 0 2
64273: PUSH
64274: LD_INT 10
64276: DIVREAL
64277: ST_TO_ADDR
// time := 1 1$00 ;
64278: LD_ADDR_VAR 0 8
64282: PUSH
64283: LD_INT 2100
64285: ST_TO_ADDR
// if amount < min then
64286: LD_VAR 0 9
64290: PUSH
64291: LD_VAR 0 3
64295: LESS
64296: IFFALSE 64314
// r := r * 2 else
64298: LD_ADDR_VAR 0 7
64302: PUSH
64303: LD_VAR 0 7
64307: PUSH
64308: LD_INT 2
64310: MUL
64311: ST_TO_ADDR
64312: GO 64340
// if amount > max then
64314: LD_VAR 0 9
64318: PUSH
64319: LD_VAR 0 4
64323: GREATER
64324: IFFALSE 64340
// r := r / 2 ;
64326: LD_ADDR_VAR 0 7
64330: PUSH
64331: LD_VAR 0 7
64335: PUSH
64336: LD_INT 2
64338: DIVREAL
64339: ST_TO_ADDR
// time := time / r ;
64340: LD_ADDR_VAR 0 8
64344: PUSH
64345: LD_VAR 0 8
64349: PUSH
64350: LD_VAR 0 7
64354: DIVREAL
64355: ST_TO_ADDR
// if time < 0 then
64356: LD_VAR 0 8
64360: PUSH
64361: LD_INT 0
64363: LESS
64364: IFFALSE 64381
// time := time * - 1 ;
64366: LD_ADDR_VAR 0 8
64370: PUSH
64371: LD_VAR 0 8
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: MUL
64380: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64381: LD_VAR 0 8
64385: PUSH
64386: LD_INT 35
64388: PPUSH
64389: LD_INT 875
64391: PPUSH
64392: CALL_OW 12
64396: PLUS
64397: PPUSH
64398: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64402: LD_INT 1
64404: PPUSH
64405: LD_INT 5
64407: PPUSH
64408: CALL_OW 12
64412: PPUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: LD_INT 1
64420: PPUSH
64421: CALL_OW 55
// end ;
64425: GO 64238
// end ;
64427: LD_VAR 0 5
64431: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64432: LD_INT 0
64434: PPUSH
64435: PPUSH
64436: PPUSH
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
64441: PPUSH
// if not turrets or not factories then
64442: LD_VAR 0 1
64446: NOT
64447: IFTRUE 64456
64449: PUSH
64450: LD_VAR 0 2
64454: NOT
64455: OR
64456: IFFALSE 64460
// exit ;
64458: GO 64767
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64460: LD_ADDR_VAR 0 10
64464: PUSH
64465: LD_INT 5
64467: PUSH
64468: LD_INT 6
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 4
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 3
64487: PUSH
64488: LD_INT 5
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 24
64502: PUSH
64503: LD_INT 25
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 23
64512: PUSH
64513: LD_INT 27
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 42
64526: PUSH
64527: LD_INT 43
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 44
64536: PUSH
64537: LD_INT 46
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 45
64546: PUSH
64547: LD_INT 47
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// result := [ ] ;
64564: LD_ADDR_VAR 0 3
64568: PUSH
64569: EMPTY
64570: ST_TO_ADDR
// for i in turrets do
64571: LD_ADDR_VAR 0 4
64575: PUSH
64576: LD_VAR 0 1
64580: PUSH
64581: FOR_IN
64582: IFFALSE 64765
// begin nat := GetNation ( i ) ;
64584: LD_ADDR_VAR 0 7
64588: PUSH
64589: LD_VAR 0 4
64593: PPUSH
64594: CALL_OW 248
64598: ST_TO_ADDR
// weapon := 0 ;
64599: LD_ADDR_VAR 0 8
64603: PUSH
64604: LD_INT 0
64606: ST_TO_ADDR
// if not nat then
64607: LD_VAR 0 7
64611: NOT
64612: IFFALSE 64616
// continue ;
64614: GO 64581
// for j in list [ nat ] do
64616: LD_ADDR_VAR 0 5
64620: PUSH
64621: LD_VAR 0 10
64625: PUSH
64626: LD_VAR 0 7
64630: ARRAY
64631: PUSH
64632: FOR_IN
64633: IFFALSE 64674
// if GetBWeapon ( i ) = j [ 1 ] then
64635: LD_VAR 0 4
64639: PPUSH
64640: CALL_OW 269
64644: PUSH
64645: LD_VAR 0 5
64649: PUSH
64650: LD_INT 1
64652: ARRAY
64653: EQUAL
64654: IFFALSE 64672
// begin weapon := j [ 2 ] ;
64656: LD_ADDR_VAR 0 8
64660: PUSH
64661: LD_VAR 0 5
64665: PUSH
64666: LD_INT 2
64668: ARRAY
64669: ST_TO_ADDR
// break ;
64670: GO 64674
// end ;
64672: GO 64632
64674: POP
64675: POP
// if not weapon then
64676: LD_VAR 0 8
64680: NOT
64681: IFFALSE 64685
// continue ;
64683: GO 64581
// for k in factories do
64685: LD_ADDR_VAR 0 6
64689: PUSH
64690: LD_VAR 0 2
64694: PUSH
64695: FOR_IN
64696: IFFALSE 64761
// begin weapons := AvailableWeaponList ( k ) ;
64698: LD_ADDR_VAR 0 9
64702: PUSH
64703: LD_VAR 0 6
64707: PPUSH
64708: CALL_OW 478
64712: ST_TO_ADDR
// if not weapons then
64713: LD_VAR 0 9
64717: NOT
64718: IFFALSE 64722
// continue ;
64720: GO 64695
// if weapon in weapons then
64722: LD_VAR 0 8
64726: PUSH
64727: LD_VAR 0 9
64731: IN
64732: IFFALSE 64759
// begin result := [ i , weapon ] ;
64734: LD_ADDR_VAR 0 3
64738: PUSH
64739: LD_VAR 0 4
64743: PUSH
64744: LD_VAR 0 8
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: ST_TO_ADDR
// exit ;
64753: POP
64754: POP
64755: POP
64756: POP
64757: GO 64767
// end ; end ;
64759: GO 64695
64761: POP
64762: POP
// end ;
64763: GO 64581
64765: POP
64766: POP
// end ;
64767: LD_VAR 0 3
64771: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64772: LD_INT 0
64774: PPUSH
// if not side or side > 8 then
64775: LD_VAR 0 3
64779: NOT
64780: IFTRUE 64792
64782: PUSH
64783: LD_VAR 0 3
64787: PUSH
64788: LD_INT 8
64790: GREATER
64791: OR
64792: IFFALSE 64796
// exit ;
64794: GO 64855
// if not range then
64796: LD_VAR 0 4
64800: NOT
64801: IFFALSE 64812
// range := - 12 ;
64803: LD_ADDR_VAR 0 4
64807: PUSH
64808: LD_INT 12
64810: NEG
64811: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64812: LD_VAR 0 1
64816: PPUSH
64817: LD_VAR 0 2
64821: PPUSH
64822: LD_VAR 0 3
64826: PPUSH
64827: LD_VAR 0 4
64831: PPUSH
64832: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64836: LD_VAR 0 1
64840: PPUSH
64841: LD_VAR 0 2
64845: PPUSH
64846: LD_VAR 0 3
64850: PPUSH
64851: CALL_OW 331
// end ;
64855: LD_VAR 0 5
64859: RET
// export function Video ( mode ) ; begin
64860: LD_INT 0
64862: PPUSH
// ingame_video = mode ;
64863: LD_ADDR_OWVAR 52
64867: PUSH
64868: LD_VAR 0 1
64872: ST_TO_ADDR
// interface_hidden = mode ;
64873: LD_ADDR_OWVAR 54
64877: PUSH
64878: LD_VAR 0 1
64882: ST_TO_ADDR
// end ;
64883: LD_VAR 0 2
64887: RET
// export function Join ( array , element ) ; begin
64888: LD_INT 0
64890: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64891: LD_ADDR_VAR 0 3
64895: PUSH
64896: LD_VAR 0 1
64900: PPUSH
64901: LD_VAR 0 1
64905: PUSH
64906: LD_INT 1
64908: PLUS
64909: PPUSH
64910: LD_VAR 0 2
64914: PPUSH
64915: CALL_OW 1
64919: ST_TO_ADDR
// end ;
64920: LD_VAR 0 3
64924: RET
// export function JoinUnion ( array , element ) ; begin
64925: LD_INT 0
64927: PPUSH
// result := array union element ;
64928: LD_ADDR_VAR 0 3
64932: PUSH
64933: LD_VAR 0 1
64937: PUSH
64938: LD_VAR 0 2
64942: UNION
64943: ST_TO_ADDR
// end ;
64944: LD_VAR 0 3
64948: RET
// export function GetBehemoths ( side ) ; begin
64949: LD_INT 0
64951: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64952: LD_ADDR_VAR 0 2
64956: PUSH
64957: LD_INT 22
64959: PUSH
64960: LD_VAR 0 1
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 31
64971: PUSH
64972: LD_INT 25
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PPUSH
64983: CALL_OW 69
64987: ST_TO_ADDR
// end ;
64988: LD_VAR 0 2
64992: RET
// export function Shuffle ( array ) ; var i , index ; begin
64993: LD_INT 0
64995: PPUSH
64996: PPUSH
64997: PPUSH
// result := [ ] ;
64998: LD_ADDR_VAR 0 2
65002: PUSH
65003: EMPTY
65004: ST_TO_ADDR
// if not array then
65005: LD_VAR 0 1
65009: NOT
65010: IFFALSE 65014
// exit ;
65012: GO 65113
// Randomize ;
65014: CALL_OW 10
// for i = array downto 1 do
65018: LD_ADDR_VAR 0 3
65022: PUSH
65023: DOUBLE
65024: LD_VAR 0 1
65028: INC
65029: ST_TO_ADDR
65030: LD_INT 1
65032: PUSH
65033: FOR_DOWNTO
65034: IFFALSE 65111
// begin index := rand ( 1 , array ) ;
65036: LD_ADDR_VAR 0 4
65040: PUSH
65041: LD_INT 1
65043: PPUSH
65044: LD_VAR 0 1
65048: PPUSH
65049: CALL_OW 12
65053: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65054: LD_ADDR_VAR 0 2
65058: PUSH
65059: LD_VAR 0 2
65063: PPUSH
65064: LD_VAR 0 2
65068: PUSH
65069: LD_INT 1
65071: PLUS
65072: PPUSH
65073: LD_VAR 0 1
65077: PUSH
65078: LD_VAR 0 4
65082: ARRAY
65083: PPUSH
65084: CALL_OW 2
65088: ST_TO_ADDR
// array := Delete ( array , index ) ;
65089: LD_ADDR_VAR 0 1
65093: PUSH
65094: LD_VAR 0 1
65098: PPUSH
65099: LD_VAR 0 4
65103: PPUSH
65104: CALL_OW 3
65108: ST_TO_ADDR
// end ;
65109: GO 65033
65111: POP
65112: POP
// end ;
65113: LD_VAR 0 2
65117: RET
// export function GetBaseMaterials ( base ) ; begin
65118: LD_INT 0
65120: PPUSH
// result := [ 0 , 0 , 0 ] ;
65121: LD_ADDR_VAR 0 2
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: ST_TO_ADDR
// if not base then
65140: LD_VAR 0 1
65144: NOT
65145: IFFALSE 65149
// exit ;
65147: GO 65198
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65149: LD_ADDR_VAR 0 2
65153: PUSH
65154: LD_VAR 0 1
65158: PPUSH
65159: LD_INT 1
65161: PPUSH
65162: CALL_OW 275
65166: PUSH
65167: LD_VAR 0 1
65171: PPUSH
65172: LD_INT 2
65174: PPUSH
65175: CALL_OW 275
65179: PUSH
65180: LD_VAR 0 1
65184: PPUSH
65185: LD_INT 3
65187: PPUSH
65188: CALL_OW 275
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: ST_TO_ADDR
// end ;
65198: LD_VAR 0 2
65202: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65203: LD_INT 0
65205: PPUSH
65206: PPUSH
// result := array ;
65207: LD_ADDR_VAR 0 3
65211: PUSH
65212: LD_VAR 0 1
65216: ST_TO_ADDR
// if size >= result then
65217: LD_VAR 0 2
65221: PUSH
65222: LD_VAR 0 3
65226: GREATEREQUAL
65227: IFFALSE 65231
// exit ;
65229: GO 65281
// if size then
65231: LD_VAR 0 2
65235: IFFALSE 65281
// for i := array downto size do
65237: LD_ADDR_VAR 0 4
65241: PUSH
65242: DOUBLE
65243: LD_VAR 0 1
65247: INC
65248: ST_TO_ADDR
65249: LD_VAR 0 2
65253: PUSH
65254: FOR_DOWNTO
65255: IFFALSE 65279
// result := Delete ( result , result ) ;
65257: LD_ADDR_VAR 0 3
65261: PUSH
65262: LD_VAR 0 3
65266: PPUSH
65267: LD_VAR 0 3
65271: PPUSH
65272: CALL_OW 3
65276: ST_TO_ADDR
65277: GO 65254
65279: POP
65280: POP
// end ;
65281: LD_VAR 0 3
65285: RET
// export function ComExit ( unit ) ; var tmp ; begin
65286: LD_INT 0
65288: PPUSH
65289: PPUSH
// if not IsInUnit ( unit ) then
65290: LD_VAR 0 1
65294: PPUSH
65295: CALL_OW 310
65299: NOT
65300: IFFALSE 65304
// exit ;
65302: GO 65364
// tmp := IsInUnit ( unit ) ;
65304: LD_ADDR_VAR 0 3
65308: PUSH
65309: LD_VAR 0 1
65313: PPUSH
65314: CALL_OW 310
65318: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65319: LD_VAR 0 3
65323: PPUSH
65324: CALL_OW 247
65328: PUSH
65329: LD_INT 2
65331: EQUAL
65332: IFFALSE 65345
// ComExitVehicle ( unit ) else
65334: LD_VAR 0 1
65338: PPUSH
65339: CALL_OW 121
65343: GO 65354
// ComExitBuilding ( unit ) ;
65345: LD_VAR 0 1
65349: PPUSH
65350: CALL_OW 122
// result := tmp ;
65354: LD_ADDR_VAR 0 2
65358: PUSH
65359: LD_VAR 0 3
65363: ST_TO_ADDR
// end ;
65364: LD_VAR 0 2
65368: RET
// export function ComExitAll ( units ) ; var i ; begin
65369: LD_INT 0
65371: PPUSH
65372: PPUSH
// if not units then
65373: LD_VAR 0 1
65377: NOT
65378: IFFALSE 65382
// exit ;
65380: GO 65408
// for i in units do
65382: LD_ADDR_VAR 0 3
65386: PUSH
65387: LD_VAR 0 1
65391: PUSH
65392: FOR_IN
65393: IFFALSE 65406
// ComExit ( i ) ;
65395: LD_VAR 0 3
65399: PPUSH
65400: CALL 65286 0 1
65404: GO 65392
65406: POP
65407: POP
// end ;
65408: LD_VAR 0 2
65412: RET
// export function ResetHc ; begin
65413: LD_INT 0
65415: PPUSH
// InitHc ;
65416: CALL_OW 19
// hc_importance := 0 ;
65420: LD_ADDR_OWVAR 32
65424: PUSH
65425: LD_INT 0
65427: ST_TO_ADDR
// end ;
65428: LD_VAR 0 1
65432: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65433: LD_INT 0
65435: PPUSH
65436: PPUSH
65437: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65438: LD_ADDR_VAR 0 6
65442: PUSH
65443: LD_VAR 0 1
65447: PUSH
65448: LD_VAR 0 3
65452: PLUS
65453: PUSH
65454: LD_INT 2
65456: DIV
65457: ST_TO_ADDR
// if _x < 0 then
65458: LD_VAR 0 6
65462: PUSH
65463: LD_INT 0
65465: LESS
65466: IFFALSE 65483
// _x := _x * - 1 ;
65468: LD_ADDR_VAR 0 6
65472: PUSH
65473: LD_VAR 0 6
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: MUL
65482: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65483: LD_ADDR_VAR 0 7
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_VAR 0 4
65497: PLUS
65498: PUSH
65499: LD_INT 2
65501: DIV
65502: ST_TO_ADDR
// if _y < 0 then
65503: LD_VAR 0 7
65507: PUSH
65508: LD_INT 0
65510: LESS
65511: IFFALSE 65528
// _y := _y * - 1 ;
65513: LD_ADDR_VAR 0 7
65517: PUSH
65518: LD_VAR 0 7
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: MUL
65527: ST_TO_ADDR
// result := [ _x , _y ] ;
65528: LD_ADDR_VAR 0 5
65532: PUSH
65533: LD_VAR 0 6
65537: PUSH
65538: LD_VAR 0 7
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: ST_TO_ADDR
// end ;
65547: LD_VAR 0 5
65551: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65552: LD_INT 0
65554: PPUSH
65555: PPUSH
65556: PPUSH
65557: PPUSH
// task := GetTaskList ( unit ) ;
65558: LD_ADDR_VAR 0 7
65562: PUSH
65563: LD_VAR 0 1
65567: PPUSH
65568: CALL_OW 437
65572: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65573: LD_VAR 0 7
65577: NOT
65578: IFFALSE 65597
65580: PUSH
65581: LD_VAR 0 1
65585: PPUSH
65586: LD_VAR 0 2
65590: PPUSH
65591: CALL_OW 308
65595: NOT
65596: AND
65597: IFFALSE 65601
// exit ;
65599: GO 65719
// if IsInArea ( unit , area ) then
65601: LD_VAR 0 1
65605: PPUSH
65606: LD_VAR 0 2
65610: PPUSH
65611: CALL_OW 308
65615: IFFALSE 65633
// begin ComMoveToArea ( unit , goAway ) ;
65617: LD_VAR 0 1
65621: PPUSH
65622: LD_VAR 0 3
65626: PPUSH
65627: CALL_OW 113
// exit ;
65631: GO 65719
// end ; if task [ 1 ] [ 1 ] <> M then
65633: LD_VAR 0 7
65637: PUSH
65638: LD_INT 1
65640: ARRAY
65641: PUSH
65642: LD_INT 1
65644: ARRAY
65645: PUSH
65646: LD_STRING M
65648: NONEQUAL
65649: IFFALSE 65653
// exit ;
65651: GO 65719
// x := task [ 1 ] [ 2 ] ;
65653: LD_ADDR_VAR 0 5
65657: PUSH
65658: LD_VAR 0 7
65662: PUSH
65663: LD_INT 1
65665: ARRAY
65666: PUSH
65667: LD_INT 2
65669: ARRAY
65670: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65671: LD_ADDR_VAR 0 6
65675: PUSH
65676: LD_VAR 0 7
65680: PUSH
65681: LD_INT 1
65683: ARRAY
65684: PUSH
65685: LD_INT 3
65687: ARRAY
65688: ST_TO_ADDR
// if InArea ( x , y , area ) then
65689: LD_VAR 0 5
65693: PPUSH
65694: LD_VAR 0 6
65698: PPUSH
65699: LD_VAR 0 2
65703: PPUSH
65704: CALL_OW 309
65708: IFFALSE 65719
// ComStop ( unit ) ;
65710: LD_VAR 0 1
65714: PPUSH
65715: CALL_OW 141
// end ;
65719: LD_VAR 0 4
65723: RET
// export function Abs ( value ) ; begin
65724: LD_INT 0
65726: PPUSH
// result := value ;
65727: LD_ADDR_VAR 0 2
65731: PUSH
65732: LD_VAR 0 1
65736: ST_TO_ADDR
// if value < 0 then
65737: LD_VAR 0 1
65741: PUSH
65742: LD_INT 0
65744: LESS
65745: IFFALSE 65762
// result := value * - 1 ;
65747: LD_ADDR_VAR 0 2
65751: PUSH
65752: LD_VAR 0 1
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: MUL
65761: ST_TO_ADDR
// end ;
65762: LD_VAR 0 2
65766: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65767: LD_INT 0
65769: PPUSH
65770: PPUSH
65771: PPUSH
65772: PPUSH
65773: PPUSH
65774: PPUSH
65775: PPUSH
65776: PPUSH
// if not unit or not building then
65777: LD_VAR 0 1
65781: NOT
65782: IFTRUE 65791
65784: PUSH
65785: LD_VAR 0 2
65789: NOT
65790: OR
65791: IFFALSE 65795
// exit ;
65793: GO 66023
// x := GetX ( building ) ;
65795: LD_ADDR_VAR 0 4
65799: PUSH
65800: LD_VAR 0 2
65804: PPUSH
65805: CALL_OW 250
65809: ST_TO_ADDR
// y := GetY ( building ) ;
65810: LD_ADDR_VAR 0 6
65814: PUSH
65815: LD_VAR 0 2
65819: PPUSH
65820: CALL_OW 251
65824: ST_TO_ADDR
// d := GetDir ( building ) ;
65825: LD_ADDR_VAR 0 8
65829: PUSH
65830: LD_VAR 0 2
65834: PPUSH
65835: CALL_OW 254
65839: ST_TO_ADDR
// r := 4 ;
65840: LD_ADDR_VAR 0 9
65844: PUSH
65845: LD_INT 4
65847: ST_TO_ADDR
// for i := 1 to 5 do
65848: LD_ADDR_VAR 0 10
65852: PUSH
65853: DOUBLE
65854: LD_INT 1
65856: DEC
65857: ST_TO_ADDR
65858: LD_INT 5
65860: PUSH
65861: FOR_TO
65862: IFFALSE 66021
// begin _x := ShiftX ( x , d , r + i ) ;
65864: LD_ADDR_VAR 0 5
65868: PUSH
65869: LD_VAR 0 4
65873: PPUSH
65874: LD_VAR 0 8
65878: PPUSH
65879: LD_VAR 0 9
65883: PUSH
65884: LD_VAR 0 10
65888: PLUS
65889: PPUSH
65890: CALL_OW 272
65894: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65895: LD_ADDR_VAR 0 7
65899: PUSH
65900: LD_VAR 0 6
65904: PPUSH
65905: LD_VAR 0 8
65909: PPUSH
65910: LD_VAR 0 9
65914: PUSH
65915: LD_VAR 0 10
65919: PLUS
65920: PPUSH
65921: CALL_OW 273
65925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65926: LD_VAR 0 5
65930: PPUSH
65931: LD_VAR 0 7
65935: PPUSH
65936: CALL_OW 488
65940: IFFALSE 65975
65942: PUSH
65943: LD_VAR 0 5
65947: PPUSH
65948: LD_VAR 0 7
65952: PPUSH
65953: CALL_OW 428
65957: PPUSH
65958: CALL_OW 247
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: IN
65973: NOT
65974: AND
65975: IFFALSE 66019
// begin ComMoveXY ( unit , _x , _y ) ;
65977: LD_VAR 0 1
65981: PPUSH
65982: LD_VAR 0 5
65986: PPUSH
65987: LD_VAR 0 7
65991: PPUSH
65992: CALL_OW 111
// result := [ _x , _y ] ;
65996: LD_ADDR_VAR 0 3
66000: PUSH
66001: LD_VAR 0 5
66005: PUSH
66006: LD_VAR 0 7
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: ST_TO_ADDR
// exit ;
66015: POP
66016: POP
66017: GO 66023
// end ; end ;
66019: GO 65861
66021: POP
66022: POP
// end ;
66023: LD_VAR 0 3
66027: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66028: LD_INT 0
66030: PPUSH
66031: PPUSH
66032: PPUSH
// result := 0 ;
66033: LD_ADDR_VAR 0 3
66037: PUSH
66038: LD_INT 0
66040: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66041: LD_VAR 0 1
66045: PUSH
66046: LD_INT 0
66048: LESS
66049: IFTRUE 66061
66051: PUSH
66052: LD_VAR 0 1
66056: PUSH
66057: LD_INT 8
66059: GREATER
66060: OR
66061: IFTRUE 66073
66063: PUSH
66064: LD_VAR 0 2
66068: PUSH
66069: LD_INT 0
66071: LESS
66072: OR
66073: IFTRUE 66085
66075: PUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_INT 8
66083: GREATER
66084: OR
66085: IFFALSE 66089
// exit ;
66087: GO 66164
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66089: LD_ADDR_VAR 0 4
66093: PUSH
66094: LD_INT 22
66096: PUSH
66097: LD_VAR 0 2
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PPUSH
66106: CALL_OW 69
66110: PUSH
66111: FOR_IN
66112: IFFALSE 66162
// begin un := UnitShoot ( i ) ;
66114: LD_ADDR_VAR 0 5
66118: PUSH
66119: LD_VAR 0 4
66123: PPUSH
66124: CALL_OW 504
66128: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66129: LD_VAR 0 5
66133: PPUSH
66134: CALL_OW 255
66138: PUSH
66139: LD_VAR 0 1
66143: EQUAL
66144: IFFALSE 66160
// begin result := un ;
66146: LD_ADDR_VAR 0 3
66150: PUSH
66151: LD_VAR 0 5
66155: ST_TO_ADDR
// exit ;
66156: POP
66157: POP
66158: GO 66164
// end ; end ;
66160: GO 66111
66162: POP
66163: POP
// end ;
66164: LD_VAR 0 3
66168: RET
// export function GetCargoBay ( units ) ; begin
66169: LD_INT 0
66171: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66172: LD_ADDR_VAR 0 2
66176: PUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: LD_INT 2
66184: PUSH
66185: LD_INT 34
66187: PUSH
66188: LD_INT 12
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 34
66197: PUSH
66198: LD_INT 51
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 34
66207: PUSH
66208: LD_INT 32
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 34
66217: PUSH
66218: LD_INT 89
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: PPUSH
66232: CALL_OW 72
66236: ST_TO_ADDR
// end ;
66237: LD_VAR 0 2
66241: RET
// export function Negate ( value ) ; begin
66242: LD_INT 0
66244: PPUSH
// result := not value ;
66245: LD_ADDR_VAR 0 2
66249: PUSH
66250: LD_VAR 0 1
66254: NOT
66255: ST_TO_ADDR
// end ;
66256: LD_VAR 0 2
66260: RET
// export function Inc ( value ) ; begin
66261: LD_INT 0
66263: PPUSH
// result := value + 1 ;
66264: LD_ADDR_VAR 0 2
66268: PUSH
66269: LD_VAR 0 1
66273: PUSH
66274: LD_INT 1
66276: PLUS
66277: ST_TO_ADDR
// end ;
66278: LD_VAR 0 2
66282: RET
// export function Dec ( value ) ; begin
66283: LD_INT 0
66285: PPUSH
// result := value - 1 ;
66286: LD_ADDR_VAR 0 2
66290: PUSH
66291: LD_VAR 0 1
66295: PUSH
66296: LD_INT 1
66298: MINUS
66299: ST_TO_ADDR
// end ;
66300: LD_VAR 0 2
66304: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66305: LD_INT 0
66307: PPUSH
66308: PPUSH
66309: PPUSH
66310: PPUSH
66311: PPUSH
66312: PPUSH
66313: PPUSH
66314: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66315: LD_VAR 0 1
66319: PPUSH
66320: LD_VAR 0 2
66324: PPUSH
66325: CALL_OW 488
66329: NOT
66330: IFTRUE 66349
66332: PUSH
66333: LD_VAR 0 3
66337: PPUSH
66338: LD_VAR 0 4
66342: PPUSH
66343: CALL_OW 488
66347: NOT
66348: OR
66349: IFFALSE 66362
// begin result := - 1 ;
66351: LD_ADDR_VAR 0 5
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: ST_TO_ADDR
// exit ;
66360: GO 66597
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66362: LD_ADDR_VAR 0 12
66366: PUSH
66367: LD_VAR 0 1
66371: PPUSH
66372: LD_VAR 0 2
66376: PPUSH
66377: LD_VAR 0 3
66381: PPUSH
66382: LD_VAR 0 4
66386: PPUSH
66387: CALL 65433 0 4
66391: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66392: LD_ADDR_VAR 0 11
66396: PUSH
66397: LD_VAR 0 1
66401: PPUSH
66402: LD_VAR 0 2
66406: PPUSH
66407: LD_VAR 0 12
66411: PUSH
66412: LD_INT 1
66414: ARRAY
66415: PPUSH
66416: LD_VAR 0 12
66420: PUSH
66421: LD_INT 2
66423: ARRAY
66424: PPUSH
66425: CALL_OW 298
66429: ST_TO_ADDR
// distance := 9999 ;
66430: LD_ADDR_VAR 0 10
66434: PUSH
66435: LD_INT 9999
66437: ST_TO_ADDR
// for i := 0 to 5 do
66438: LD_ADDR_VAR 0 6
66442: PUSH
66443: DOUBLE
66444: LD_INT 0
66446: DEC
66447: ST_TO_ADDR
66448: LD_INT 5
66450: PUSH
66451: FOR_TO
66452: IFFALSE 66595
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66454: LD_ADDR_VAR 0 7
66458: PUSH
66459: LD_VAR 0 1
66463: PPUSH
66464: LD_VAR 0 6
66468: PPUSH
66469: LD_VAR 0 11
66473: PPUSH
66474: CALL_OW 272
66478: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66479: LD_ADDR_VAR 0 8
66483: PUSH
66484: LD_VAR 0 2
66488: PPUSH
66489: LD_VAR 0 6
66493: PPUSH
66494: LD_VAR 0 11
66498: PPUSH
66499: CALL_OW 273
66503: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66504: LD_VAR 0 7
66508: PPUSH
66509: LD_VAR 0 8
66513: PPUSH
66514: CALL_OW 488
66518: NOT
66519: IFFALSE 66523
// continue ;
66521: GO 66451
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66523: LD_ADDR_VAR 0 9
66527: PUSH
66528: LD_VAR 0 12
66532: PUSH
66533: LD_INT 1
66535: ARRAY
66536: PPUSH
66537: LD_VAR 0 12
66541: PUSH
66542: LD_INT 2
66544: ARRAY
66545: PPUSH
66546: LD_VAR 0 7
66550: PPUSH
66551: LD_VAR 0 8
66555: PPUSH
66556: CALL_OW 298
66560: ST_TO_ADDR
// if tmp < distance then
66561: LD_VAR 0 9
66565: PUSH
66566: LD_VAR 0 10
66570: LESS
66571: IFFALSE 66593
// begin result := i ;
66573: LD_ADDR_VAR 0 5
66577: PUSH
66578: LD_VAR 0 6
66582: ST_TO_ADDR
// distance := tmp ;
66583: LD_ADDR_VAR 0 10
66587: PUSH
66588: LD_VAR 0 9
66592: ST_TO_ADDR
// end ; end ;
66593: GO 66451
66595: POP
66596: POP
// end ;
66597: LD_VAR 0 5
66601: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66602: LD_INT 0
66604: PPUSH
66605: PPUSH
// if not driver or not IsInUnit ( driver ) then
66606: LD_VAR 0 1
66610: NOT
66611: IFTRUE 66625
66613: PUSH
66614: LD_VAR 0 1
66618: PPUSH
66619: CALL_OW 310
66623: NOT
66624: OR
66625: IFFALSE 66629
// exit ;
66627: GO 66719
// vehicle := IsInUnit ( driver ) ;
66629: LD_ADDR_VAR 0 3
66633: PUSH
66634: LD_VAR 0 1
66638: PPUSH
66639: CALL_OW 310
66643: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66644: LD_VAR 0 1
66648: PPUSH
66649: LD_STRING \
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: PUSH
66679: LD_STRING E
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: LD_VAR 0 3
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PPUSH
66715: CALL_OW 446
// end ;
66719: LD_VAR 0 2
66723: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66724: LD_INT 0
66726: PPUSH
66727: PPUSH
// if not driver or not IsInUnit ( driver ) then
66728: LD_VAR 0 1
66732: NOT
66733: IFTRUE 66747
66735: PUSH
66736: LD_VAR 0 1
66740: PPUSH
66741: CALL_OW 310
66745: NOT
66746: OR
66747: IFFALSE 66751
// exit ;
66749: GO 66841
// vehicle := IsInUnit ( driver ) ;
66751: LD_ADDR_VAR 0 3
66755: PUSH
66756: LD_VAR 0 1
66760: PPUSH
66761: CALL_OW 310
66765: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66766: LD_VAR 0 1
66770: PPUSH
66771: LD_STRING \
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: PUSH
66801: LD_STRING E
66803: PUSH
66804: LD_INT 0
66806: PUSH
66807: LD_INT 0
66809: PUSH
66810: LD_VAR 0 3
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 0
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PPUSH
66837: CALL_OW 447
// end ;
66841: LD_VAR 0 2
66845: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66846: LD_INT 0
66848: PPUSH
66849: PPUSH
66850: PPUSH
// tmp := [ ] ;
66851: LD_ADDR_VAR 0 5
66855: PUSH
66856: EMPTY
66857: ST_TO_ADDR
// for i in units do
66858: LD_ADDR_VAR 0 4
66862: PUSH
66863: LD_VAR 0 1
66867: PUSH
66868: FOR_IN
66869: IFFALSE 66907
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66871: LD_ADDR_VAR 0 5
66875: PUSH
66876: LD_VAR 0 5
66880: PPUSH
66881: LD_VAR 0 5
66885: PUSH
66886: LD_INT 1
66888: PLUS
66889: PPUSH
66890: LD_VAR 0 4
66894: PPUSH
66895: CALL_OW 256
66899: PPUSH
66900: CALL_OW 2
66904: ST_TO_ADDR
66905: GO 66868
66907: POP
66908: POP
// if not tmp then
66909: LD_VAR 0 5
66913: NOT
66914: IFFALSE 66918
// exit ;
66916: GO 66966
// if asc then
66918: LD_VAR 0 2
66922: IFFALSE 66946
// result := SortListByListAsc ( units , tmp ) else
66924: LD_ADDR_VAR 0 3
66928: PUSH
66929: LD_VAR 0 1
66933: PPUSH
66934: LD_VAR 0 5
66938: PPUSH
66939: CALL_OW 76
66943: ST_TO_ADDR
66944: GO 66966
// result := SortListByListDesc ( units , tmp ) ;
66946: LD_ADDR_VAR 0 3
66950: PUSH
66951: LD_VAR 0 1
66955: PPUSH
66956: LD_VAR 0 5
66960: PPUSH
66961: CALL_OW 77
66965: ST_TO_ADDR
// end ;
66966: LD_VAR 0 3
66970: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66971: LD_INT 0
66973: PPUSH
66974: PPUSH
// task := GetTaskList ( mech ) ;
66975: LD_ADDR_VAR 0 4
66979: PUSH
66980: LD_VAR 0 1
66984: PPUSH
66985: CALL_OW 437
66989: ST_TO_ADDR
// if not task then
66990: LD_VAR 0 4
66994: NOT
66995: IFFALSE 66999
// exit ;
66997: GO 67043
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66999: LD_ADDR_VAR 0 3
67003: PUSH
67004: LD_VAR 0 4
67008: PUSH
67009: LD_INT 1
67011: ARRAY
67012: PUSH
67013: LD_INT 1
67015: ARRAY
67016: PUSH
67017: LD_STRING r
67019: EQUAL
67020: IFFALSE 67042
67022: PUSH
67023: LD_VAR 0 4
67027: PUSH
67028: LD_INT 1
67030: ARRAY
67031: PUSH
67032: LD_INT 4
67034: ARRAY
67035: PUSH
67036: LD_VAR 0 2
67040: EQUAL
67041: AND
67042: ST_TO_ADDR
// end ;
67043: LD_VAR 0 3
67047: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67048: LD_INT 0
67050: PPUSH
// SetDir ( unit , d ) ;
67051: LD_VAR 0 1
67055: PPUSH
67056: LD_VAR 0 4
67060: PPUSH
67061: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67065: LD_ADDR_VAR 0 6
67069: PUSH
67070: LD_VAR 0 1
67074: PPUSH
67075: LD_VAR 0 2
67079: PPUSH
67080: LD_VAR 0 3
67084: PPUSH
67085: LD_VAR 0 5
67089: PPUSH
67090: CALL_OW 48
67094: ST_TO_ADDR
// end ;
67095: LD_VAR 0 6
67099: RET
// export function ToNaturalNumber ( number ) ; begin
67100: LD_INT 0
67102: PPUSH
// result := number div 1 ;
67103: LD_ADDR_VAR 0 2
67107: PUSH
67108: LD_VAR 0 1
67112: PUSH
67113: LD_INT 1
67115: DIV
67116: ST_TO_ADDR
// if number < 0 then
67117: LD_VAR 0 1
67121: PUSH
67122: LD_INT 0
67124: LESS
67125: IFFALSE 67135
// result := 0 ;
67127: LD_ADDR_VAR 0 2
67131: PUSH
67132: LD_INT 0
67134: ST_TO_ADDR
// end ;
67135: LD_VAR 0 2
67139: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67140: LD_INT 0
67142: PPUSH
67143: PPUSH
67144: PPUSH
// if not buildings then
67145: LD_VAR 0 1
67149: NOT
67150: IFFALSE 67154
// exit ;
67152: GO 67269
// tmp := [ ] ;
67154: LD_ADDR_VAR 0 5
67158: PUSH
67159: EMPTY
67160: ST_TO_ADDR
// for b in buildings do
67161: LD_ADDR_VAR 0 4
67165: PUSH
67166: LD_VAR 0 1
67170: PUSH
67171: FOR_IN
67172: IFFALSE 67210
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67174: LD_ADDR_VAR 0 5
67178: PUSH
67179: LD_VAR 0 5
67183: PPUSH
67184: LD_VAR 0 5
67188: PUSH
67189: LD_INT 1
67191: PLUS
67192: PPUSH
67193: LD_VAR 0 4
67197: PPUSH
67198: CALL_OW 266
67202: PPUSH
67203: CALL_OW 1
67207: ST_TO_ADDR
67208: GO 67171
67210: POP
67211: POP
// if not tmp then
67212: LD_VAR 0 5
67216: NOT
67217: IFFALSE 67221
// exit ;
67219: GO 67269
// if asc then
67221: LD_VAR 0 2
67225: IFFALSE 67249
// result := SortListByListAsc ( buildings , tmp ) else
67227: LD_ADDR_VAR 0 3
67231: PUSH
67232: LD_VAR 0 1
67236: PPUSH
67237: LD_VAR 0 5
67241: PPUSH
67242: CALL_OW 76
67246: ST_TO_ADDR
67247: GO 67269
// result := SortListByListDesc ( buildings , tmp ) ;
67249: LD_ADDR_VAR 0 3
67253: PUSH
67254: LD_VAR 0 1
67258: PPUSH
67259: LD_VAR 0 5
67263: PPUSH
67264: CALL_OW 77
67268: ST_TO_ADDR
// end ;
67269: LD_VAR 0 3
67273: RET
// export function SortByClass ( units , class ) ; var un ; begin
67274: LD_INT 0
67276: PPUSH
67277: PPUSH
// if not units or not class then
67278: LD_VAR 0 1
67282: NOT
67283: IFTRUE 67292
67285: PUSH
67286: LD_VAR 0 2
67290: NOT
67291: OR
67292: IFFALSE 67296
// exit ;
67294: GO 67391
// result := [ ] ;
67296: LD_ADDR_VAR 0 3
67300: PUSH
67301: EMPTY
67302: ST_TO_ADDR
// for un in units do
67303: LD_ADDR_VAR 0 4
67307: PUSH
67308: LD_VAR 0 1
67312: PUSH
67313: FOR_IN
67314: IFFALSE 67389
// if GetClass ( un ) = class then
67316: LD_VAR 0 4
67320: PPUSH
67321: CALL_OW 257
67325: PUSH
67326: LD_VAR 0 2
67330: EQUAL
67331: IFFALSE 67358
// result := Insert ( result , 1 , un ) else
67333: LD_ADDR_VAR 0 3
67337: PUSH
67338: LD_VAR 0 3
67342: PPUSH
67343: LD_INT 1
67345: PPUSH
67346: LD_VAR 0 4
67350: PPUSH
67351: CALL_OW 2
67355: ST_TO_ADDR
67356: GO 67387
// result := Replace ( result , result + 1 , un ) ;
67358: LD_ADDR_VAR 0 3
67362: PUSH
67363: LD_VAR 0 3
67367: PPUSH
67368: LD_VAR 0 3
67372: PUSH
67373: LD_INT 1
67375: PLUS
67376: PPUSH
67377: LD_VAR 0 4
67381: PPUSH
67382: CALL_OW 1
67386: ST_TO_ADDR
67387: GO 67313
67389: POP
67390: POP
// end ;
67391: LD_VAR 0 3
67395: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67396: LD_INT 0
67398: PPUSH
67399: PPUSH
67400: PPUSH
67401: PPUSH
67402: PPUSH
67403: PPUSH
67404: PPUSH
// result := [ ] ;
67405: LD_ADDR_VAR 0 4
67409: PUSH
67410: EMPTY
67411: ST_TO_ADDR
// if x - r < 0 then
67412: LD_VAR 0 1
67416: PUSH
67417: LD_VAR 0 3
67421: MINUS
67422: PUSH
67423: LD_INT 0
67425: LESS
67426: IFFALSE 67438
// min_x := 0 else
67428: LD_ADDR_VAR 0 8
67432: PUSH
67433: LD_INT 0
67435: ST_TO_ADDR
67436: GO 67454
// min_x := x - r ;
67438: LD_ADDR_VAR 0 8
67442: PUSH
67443: LD_VAR 0 1
67447: PUSH
67448: LD_VAR 0 3
67452: MINUS
67453: ST_TO_ADDR
// if y - r < 0 then
67454: LD_VAR 0 2
67458: PUSH
67459: LD_VAR 0 3
67463: MINUS
67464: PUSH
67465: LD_INT 0
67467: LESS
67468: IFFALSE 67480
// min_y := 0 else
67470: LD_ADDR_VAR 0 7
67474: PUSH
67475: LD_INT 0
67477: ST_TO_ADDR
67478: GO 67496
// min_y := y - r ;
67480: LD_ADDR_VAR 0 7
67484: PUSH
67485: LD_VAR 0 2
67489: PUSH
67490: LD_VAR 0 3
67494: MINUS
67495: ST_TO_ADDR
// max_x := x + r ;
67496: LD_ADDR_VAR 0 9
67500: PUSH
67501: LD_VAR 0 1
67505: PUSH
67506: LD_VAR 0 3
67510: PLUS
67511: ST_TO_ADDR
// max_y := y + r ;
67512: LD_ADDR_VAR 0 10
67516: PUSH
67517: LD_VAR 0 2
67521: PUSH
67522: LD_VAR 0 3
67526: PLUS
67527: ST_TO_ADDR
// for _x = min_x to max_x do
67528: LD_ADDR_VAR 0 5
67532: PUSH
67533: DOUBLE
67534: LD_VAR 0 8
67538: DEC
67539: ST_TO_ADDR
67540: LD_VAR 0 9
67544: PUSH
67545: FOR_TO
67546: IFFALSE 67647
// for _y = min_y to max_y do
67548: LD_ADDR_VAR 0 6
67552: PUSH
67553: DOUBLE
67554: LD_VAR 0 7
67558: DEC
67559: ST_TO_ADDR
67560: LD_VAR 0 10
67564: PUSH
67565: FOR_TO
67566: IFFALSE 67643
// begin if not ValidHex ( _x , _y ) then
67568: LD_VAR 0 5
67572: PPUSH
67573: LD_VAR 0 6
67577: PPUSH
67578: CALL_OW 488
67582: NOT
67583: IFFALSE 67587
// continue ;
67585: GO 67565
// if GetResourceTypeXY ( _x , _y ) then
67587: LD_VAR 0 5
67591: PPUSH
67592: LD_VAR 0 6
67596: PPUSH
67597: CALL_OW 283
67601: IFFALSE 67641
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67603: LD_ADDR_VAR 0 4
67607: PUSH
67608: LD_VAR 0 4
67612: PPUSH
67613: LD_VAR 0 4
67617: PUSH
67618: LD_INT 1
67620: PLUS
67621: PPUSH
67622: LD_VAR 0 5
67626: PUSH
67627: LD_VAR 0 6
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PPUSH
67636: CALL_OW 1
67640: ST_TO_ADDR
// end ;
67641: GO 67565
67643: POP
67644: POP
67645: GO 67545
67647: POP
67648: POP
// end ;
67649: LD_VAR 0 4
67653: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67654: LD_INT 0
67656: PPUSH
67657: PPUSH
67658: PPUSH
67659: PPUSH
67660: PPUSH
67661: PPUSH
67662: PPUSH
67663: PPUSH
// if not units then
67664: LD_VAR 0 1
67668: NOT
67669: IFFALSE 67673
// exit ;
67671: GO 68205
// result := UnitFilter ( units , [ f_ok ] ) ;
67673: LD_ADDR_VAR 0 3
67677: PUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: LD_INT 50
67685: PUSH
67686: EMPTY
67687: LIST
67688: PPUSH
67689: CALL_OW 72
67693: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67694: LD_ADDR_VAR 0 8
67698: PUSH
67699: LD_VAR 0 1
67703: PUSH
67704: LD_INT 1
67706: ARRAY
67707: PPUSH
67708: CALL_OW 255
67712: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67713: LD_ADDR_VAR 0 10
67717: PUSH
67718: LD_INT 29
67720: PUSH
67721: LD_INT 91
67723: PUSH
67724: LD_INT 49
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: LIST
67731: ST_TO_ADDR
// if not result then
67732: LD_VAR 0 3
67736: NOT
67737: IFFALSE 67741
// exit ;
67739: GO 68205
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67741: LD_ADDR_VAR 0 5
67745: PUSH
67746: LD_INT 81
67748: PUSH
67749: LD_VAR 0 8
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PPUSH
67758: CALL_OW 69
67762: ST_TO_ADDR
// for i in result do
67763: LD_ADDR_VAR 0 4
67767: PUSH
67768: LD_VAR 0 3
67772: PUSH
67773: FOR_IN
67774: IFFALSE 68203
// begin tag := GetTag ( i ) + 1 ;
67776: LD_ADDR_VAR 0 9
67780: PUSH
67781: LD_VAR 0 4
67785: PPUSH
67786: CALL_OW 110
67790: PUSH
67791: LD_INT 1
67793: PLUS
67794: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67795: LD_ADDR_VAR 0 7
67799: PUSH
67800: LD_VAR 0 4
67804: PPUSH
67805: CALL_OW 250
67809: PPUSH
67810: LD_VAR 0 4
67814: PPUSH
67815: CALL_OW 251
67819: PPUSH
67820: LD_INT 4
67822: PPUSH
67823: CALL 67396 0 3
67827: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67828: LD_VAR 0 4
67832: PPUSH
67833: CALL_OW 247
67837: PUSH
67838: LD_INT 2
67840: EQUAL
67841: IFFALSE 67853
67843: PUSH
67844: LD_VAR 0 7
67848: PUSH
67849: LD_INT 2
67851: GREATER
67852: AND
67853: IFFALSE 67873
67855: PUSH
67856: LD_VAR 0 4
67860: PPUSH
67861: CALL_OW 264
67865: PUSH
67866: LD_VAR 0 10
67870: IN
67871: NOT
67872: AND
67873: IFFALSE 67912
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67875: LD_VAR 0 4
67879: PPUSH
67880: LD_VAR 0 7
67884: PUSH
67885: LD_INT 1
67887: ARRAY
67888: PUSH
67889: LD_INT 1
67891: ARRAY
67892: PPUSH
67893: LD_VAR 0 7
67897: PUSH
67898: LD_INT 1
67900: ARRAY
67901: PUSH
67902: LD_INT 2
67904: ARRAY
67905: PPUSH
67906: CALL_OW 116
67910: GO 68201
// if path > tag then
67912: LD_VAR 0 2
67916: PUSH
67917: LD_VAR 0 9
67921: GREATER
67922: IFFALSE 68130
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67924: LD_ADDR_VAR 0 6
67928: PUSH
67929: LD_VAR 0 5
67933: PPUSH
67934: LD_INT 91
67936: PUSH
67937: LD_VAR 0 4
67941: PUSH
67942: LD_INT 8
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: LIST
67949: PPUSH
67950: CALL_OW 72
67954: ST_TO_ADDR
// if nearEnemy then
67955: LD_VAR 0 6
67959: IFFALSE 68028
// begin if GetWeapon ( i ) = ru_time_lapser then
67961: LD_VAR 0 4
67965: PPUSH
67966: CALL_OW 264
67970: PUSH
67971: LD_INT 49
67973: EQUAL
67974: IFFALSE 68002
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67976: LD_VAR 0 4
67980: PPUSH
67981: LD_VAR 0 6
67985: PPUSH
67986: LD_VAR 0 4
67990: PPUSH
67991: CALL_OW 74
67995: PPUSH
67996: CALL_OW 112
68000: GO 68026
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68002: LD_VAR 0 4
68006: PPUSH
68007: LD_VAR 0 6
68011: PPUSH
68012: LD_VAR 0 4
68016: PPUSH
68017: CALL_OW 74
68021: PPUSH
68022: CALL 69286 0 2
// end else
68026: GO 68128
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68028: LD_VAR 0 4
68032: PPUSH
68033: LD_VAR 0 2
68037: PUSH
68038: LD_VAR 0 9
68042: ARRAY
68043: PUSH
68044: LD_INT 1
68046: ARRAY
68047: PPUSH
68048: LD_VAR 0 2
68052: PUSH
68053: LD_VAR 0 9
68057: ARRAY
68058: PUSH
68059: LD_INT 2
68061: ARRAY
68062: PPUSH
68063: CALL_OW 297
68067: PUSH
68068: LD_INT 6
68070: GREATER
68071: IFFALSE 68114
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68073: LD_VAR 0 4
68077: PPUSH
68078: LD_VAR 0 2
68082: PUSH
68083: LD_VAR 0 9
68087: ARRAY
68088: PUSH
68089: LD_INT 1
68091: ARRAY
68092: PPUSH
68093: LD_VAR 0 2
68097: PUSH
68098: LD_VAR 0 9
68102: ARRAY
68103: PUSH
68104: LD_INT 2
68106: ARRAY
68107: PPUSH
68108: CALL_OW 114
68112: GO 68128
// SetTag ( i , tag ) ;
68114: LD_VAR 0 4
68118: PPUSH
68119: LD_VAR 0 9
68123: PPUSH
68124: CALL_OW 109
// end else
68128: GO 68201
// if enemy then
68130: LD_VAR 0 5
68134: IFFALSE 68201
// begin if GetWeapon ( i ) = ru_time_lapser then
68136: LD_VAR 0 4
68140: PPUSH
68141: CALL_OW 264
68145: PUSH
68146: LD_INT 49
68148: EQUAL
68149: IFFALSE 68177
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68151: LD_VAR 0 4
68155: PPUSH
68156: LD_VAR 0 5
68160: PPUSH
68161: LD_VAR 0 4
68165: PPUSH
68166: CALL_OW 74
68170: PPUSH
68171: CALL_OW 112
68175: GO 68201
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68177: LD_VAR 0 4
68181: PPUSH
68182: LD_VAR 0 5
68186: PPUSH
68187: LD_VAR 0 4
68191: PPUSH
68192: CALL_OW 74
68196: PPUSH
68197: CALL 69286 0 2
// end ; end ;
68201: GO 67773
68203: POP
68204: POP
// end ;
68205: LD_VAR 0 3
68209: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68210: LD_INT 0
68212: PPUSH
68213: PPUSH
68214: PPUSH
// if not unit or IsInUnit ( unit ) then
68215: LD_VAR 0 1
68219: NOT
68220: IFTRUE 68233
68222: PUSH
68223: LD_VAR 0 1
68227: PPUSH
68228: CALL_OW 310
68232: OR
68233: IFFALSE 68237
// exit ;
68235: GO 68328
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68237: LD_ADDR_VAR 0 4
68241: PUSH
68242: LD_VAR 0 1
68246: PPUSH
68247: CALL_OW 250
68251: PPUSH
68252: LD_VAR 0 2
68256: PPUSH
68257: LD_INT 1
68259: PPUSH
68260: CALL_OW 272
68264: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68265: LD_ADDR_VAR 0 5
68269: PUSH
68270: LD_VAR 0 1
68274: PPUSH
68275: CALL_OW 251
68279: PPUSH
68280: LD_VAR 0 2
68284: PPUSH
68285: LD_INT 1
68287: PPUSH
68288: CALL_OW 273
68292: ST_TO_ADDR
// if ValidHex ( x , y ) then
68293: LD_VAR 0 4
68297: PPUSH
68298: LD_VAR 0 5
68302: PPUSH
68303: CALL_OW 488
68307: IFFALSE 68328
// ComTurnXY ( unit , x , y ) ;
68309: LD_VAR 0 1
68313: PPUSH
68314: LD_VAR 0 4
68318: PPUSH
68319: LD_VAR 0 5
68323: PPUSH
68324: CALL_OW 118
// end ;
68328: LD_VAR 0 3
68332: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68333: LD_INT 0
68335: PPUSH
68336: PPUSH
// result := false ;
68337: LD_ADDR_VAR 0 3
68341: PUSH
68342: LD_INT 0
68344: ST_TO_ADDR
// if not units then
68345: LD_VAR 0 2
68349: NOT
68350: IFFALSE 68354
// exit ;
68352: GO 68399
// for i in units do
68354: LD_ADDR_VAR 0 4
68358: PUSH
68359: LD_VAR 0 2
68363: PUSH
68364: FOR_IN
68365: IFFALSE 68397
// if See ( side , i ) then
68367: LD_VAR 0 1
68371: PPUSH
68372: LD_VAR 0 4
68376: PPUSH
68377: CALL_OW 292
68381: IFFALSE 68395
// begin result := true ;
68383: LD_ADDR_VAR 0 3
68387: PUSH
68388: LD_INT 1
68390: ST_TO_ADDR
// exit ;
68391: POP
68392: POP
68393: GO 68399
// end ;
68395: GO 68364
68397: POP
68398: POP
// end ;
68399: LD_VAR 0 3
68403: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68404: LD_INT 0
68406: PPUSH
68407: PPUSH
68408: PPUSH
68409: PPUSH
// if not unit or not points then
68410: LD_VAR 0 1
68414: NOT
68415: IFTRUE 68424
68417: PUSH
68418: LD_VAR 0 2
68422: NOT
68423: OR
68424: IFFALSE 68428
// exit ;
68426: GO 68518
// dist := 99999 ;
68428: LD_ADDR_VAR 0 5
68432: PUSH
68433: LD_INT 99999
68435: ST_TO_ADDR
// for i in points do
68436: LD_ADDR_VAR 0 4
68440: PUSH
68441: LD_VAR 0 2
68445: PUSH
68446: FOR_IN
68447: IFFALSE 68516
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68449: LD_ADDR_VAR 0 6
68453: PUSH
68454: LD_VAR 0 1
68458: PPUSH
68459: LD_VAR 0 4
68463: PUSH
68464: LD_INT 1
68466: ARRAY
68467: PPUSH
68468: LD_VAR 0 4
68472: PUSH
68473: LD_INT 2
68475: ARRAY
68476: PPUSH
68477: CALL_OW 297
68481: ST_TO_ADDR
// if tmpDist < dist then
68482: LD_VAR 0 6
68486: PUSH
68487: LD_VAR 0 5
68491: LESS
68492: IFFALSE 68514
// begin result := i ;
68494: LD_ADDR_VAR 0 3
68498: PUSH
68499: LD_VAR 0 4
68503: ST_TO_ADDR
// dist := tmpDist ;
68504: LD_ADDR_VAR 0 5
68508: PUSH
68509: LD_VAR 0 6
68513: ST_TO_ADDR
// end ; end ;
68514: GO 68446
68516: POP
68517: POP
// end ;
68518: LD_VAR 0 3
68522: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68523: LD_INT 0
68525: PPUSH
// uc_side := side ;
68526: LD_ADDR_OWVAR 20
68530: PUSH
68531: LD_VAR 0 1
68535: ST_TO_ADDR
// uc_nation := 3 ;
68536: LD_ADDR_OWVAR 21
68540: PUSH
68541: LD_INT 3
68543: ST_TO_ADDR
// vc_chassis := 25 ;
68544: LD_ADDR_OWVAR 37
68548: PUSH
68549: LD_INT 25
68551: ST_TO_ADDR
// vc_engine := engine_siberite ;
68552: LD_ADDR_OWVAR 39
68556: PUSH
68557: LD_INT 3
68559: ST_TO_ADDR
// vc_control := control_computer ;
68560: LD_ADDR_OWVAR 38
68564: PUSH
68565: LD_INT 3
68567: ST_TO_ADDR
// vc_weapon := 59 ;
68568: LD_ADDR_OWVAR 40
68572: PUSH
68573: LD_INT 59
68575: ST_TO_ADDR
// result := CreateVehicle ;
68576: LD_ADDR_VAR 0 5
68580: PUSH
68581: CALL_OW 45
68585: ST_TO_ADDR
// SetDir ( result , d ) ;
68586: LD_VAR 0 5
68590: PPUSH
68591: LD_VAR 0 4
68595: PPUSH
68596: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68600: LD_VAR 0 5
68604: PPUSH
68605: LD_VAR 0 2
68609: PPUSH
68610: LD_VAR 0 3
68614: PPUSH
68615: LD_INT 0
68617: PPUSH
68618: CALL_OW 48
// end ;
68622: LD_VAR 0 5
68626: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68627: LD_INT 0
68629: PPUSH
68630: PPUSH
68631: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68632: LD_ADDR_VAR 0 2
68636: PUSH
68637: LD_INT 0
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68655: LD_VAR 0 1
68659: NOT
68660: IFTRUE 68693
68662: PUSH
68663: LD_VAR 0 1
68667: PPUSH
68668: CALL_OW 264
68672: PUSH
68673: LD_INT 12
68675: PUSH
68676: LD_INT 51
68678: PUSH
68679: LD_INT 32
68681: PUSH
68682: LD_INT 89
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: IN
68691: NOT
68692: OR
68693: IFFALSE 68697
// exit ;
68695: GO 68795
// for i := 1 to 3 do
68697: LD_ADDR_VAR 0 3
68701: PUSH
68702: DOUBLE
68703: LD_INT 1
68705: DEC
68706: ST_TO_ADDR
68707: LD_INT 3
68709: PUSH
68710: FOR_TO
68711: IFFALSE 68793
// begin tmp := GetCargo ( cargo , i ) ;
68713: LD_ADDR_VAR 0 4
68717: PUSH
68718: LD_VAR 0 1
68722: PPUSH
68723: LD_VAR 0 3
68727: PPUSH
68728: CALL_OW 289
68732: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68733: LD_ADDR_VAR 0 2
68737: PUSH
68738: LD_VAR 0 2
68742: PPUSH
68743: LD_VAR 0 3
68747: PPUSH
68748: LD_VAR 0 4
68752: PPUSH
68753: CALL_OW 1
68757: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68758: LD_ADDR_VAR 0 2
68762: PUSH
68763: LD_VAR 0 2
68767: PPUSH
68768: LD_INT 4
68770: PPUSH
68771: LD_VAR 0 2
68775: PUSH
68776: LD_INT 4
68778: ARRAY
68779: PUSH
68780: LD_VAR 0 4
68784: PLUS
68785: PPUSH
68786: CALL_OW 1
68790: ST_TO_ADDR
// end ;
68791: GO 68710
68793: POP
68794: POP
// end ;
68795: LD_VAR 0 2
68799: RET
// export function Length ( array ) ; begin
68800: LD_INT 0
68802: PPUSH
// result := array + 0 ;
68803: LD_ADDR_VAR 0 2
68807: PUSH
68808: LD_VAR 0 1
68812: PUSH
68813: LD_INT 0
68815: PLUS
68816: ST_TO_ADDR
// end ;
68817: LD_VAR 0 2
68821: RET
// export function PrepareArray ( array ) ; begin
68822: LD_INT 0
68824: PPUSH
// result := array diff 0 ;
68825: LD_ADDR_VAR 0 2
68829: PUSH
68830: LD_VAR 0 1
68834: PUSH
68835: LD_INT 0
68837: DIFF
68838: ST_TO_ADDR
// if not result [ 1 ] then
68839: LD_VAR 0 2
68843: PUSH
68844: LD_INT 1
68846: ARRAY
68847: NOT
68848: IFFALSE 68868
// result := Delete ( result , 1 ) ;
68850: LD_ADDR_VAR 0 2
68854: PUSH
68855: LD_VAR 0 2
68859: PPUSH
68860: LD_INT 1
68862: PPUSH
68863: CALL_OW 3
68867: ST_TO_ADDR
// end ;
68868: LD_VAR 0 2
68872: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68873: LD_INT 0
68875: PPUSH
68876: PPUSH
68877: PPUSH
68878: PPUSH
// sibRocketRange := 25 ;
68879: LD_ADDR_VAR 0 6
68883: PUSH
68884: LD_INT 25
68886: ST_TO_ADDR
// result := false ;
68887: LD_ADDR_VAR 0 4
68891: PUSH
68892: LD_INT 0
68894: ST_TO_ADDR
// for i := 0 to 5 do
68895: LD_ADDR_VAR 0 5
68899: PUSH
68900: DOUBLE
68901: LD_INT 0
68903: DEC
68904: ST_TO_ADDR
68905: LD_INT 5
68907: PUSH
68908: FOR_TO
68909: IFFALSE 68976
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68911: LD_VAR 0 1
68915: PPUSH
68916: LD_VAR 0 5
68920: PPUSH
68921: LD_VAR 0 6
68925: PPUSH
68926: CALL_OW 272
68930: PPUSH
68931: LD_VAR 0 2
68935: PPUSH
68936: LD_VAR 0 5
68940: PPUSH
68941: LD_VAR 0 6
68945: PPUSH
68946: CALL_OW 273
68950: PPUSH
68951: LD_VAR 0 3
68955: PPUSH
68956: CALL_OW 309
68960: IFFALSE 68974
// begin result := true ;
68962: LD_ADDR_VAR 0 4
68966: PUSH
68967: LD_INT 1
68969: ST_TO_ADDR
// exit ;
68970: POP
68971: POP
68972: GO 68978
// end ;
68974: GO 68908
68976: POP
68977: POP
// end ;
68978: LD_VAR 0 4
68982: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68983: LD_INT 0
68985: PPUSH
68986: PPUSH
68987: PPUSH
// if btype = b_depot then
68988: LD_VAR 0 2
68992: PUSH
68993: LD_INT 0
68995: EQUAL
68996: IFFALSE 69008
// begin result := true ;
68998: LD_ADDR_VAR 0 3
69002: PUSH
69003: LD_INT 1
69005: ST_TO_ADDR
// exit ;
69006: GO 69128
// end ; pom := GetBase ( depot ) ;
69008: LD_ADDR_VAR 0 4
69012: PUSH
69013: LD_VAR 0 1
69017: PPUSH
69018: CALL_OW 274
69022: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69023: LD_ADDR_VAR 0 5
69027: PUSH
69028: LD_VAR 0 2
69032: PPUSH
69033: LD_VAR 0 1
69037: PPUSH
69038: CALL_OW 248
69042: PPUSH
69043: CALL_OW 450
69047: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: LD_VAR 0 4
69057: PPUSH
69058: LD_INT 1
69060: PPUSH
69061: CALL_OW 275
69065: PUSH
69066: LD_VAR 0 5
69070: PUSH
69071: LD_INT 1
69073: ARRAY
69074: GREATEREQUAL
69075: IFFALSE 69101
69077: PUSH
69078: LD_VAR 0 4
69082: PPUSH
69083: LD_INT 2
69085: PPUSH
69086: CALL_OW 275
69090: PUSH
69091: LD_VAR 0 5
69095: PUSH
69096: LD_INT 2
69098: ARRAY
69099: GREATEREQUAL
69100: AND
69101: IFFALSE 69127
69103: PUSH
69104: LD_VAR 0 4
69108: PPUSH
69109: LD_INT 3
69111: PPUSH
69112: CALL_OW 275
69116: PUSH
69117: LD_VAR 0 5
69121: PUSH
69122: LD_INT 3
69124: ARRAY
69125: GREATEREQUAL
69126: AND
69127: ST_TO_ADDR
// end ;
69128: LD_VAR 0 3
69132: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69133: LD_INT 0
69135: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69136: LD_VAR 0 1
69140: PPUSH
69141: LD_VAR 0 2
69145: PPUSH
69146: LD_INT 0
69148: PPUSH
69149: LD_INT 0
69151: PPUSH
69152: LD_INT 1
69154: PPUSH
69155: LD_INT 0
69157: PPUSH
69158: CALL_OW 587
// end ;
69162: LD_VAR 0 3
69166: RET
// export function CenterOnNow ( unit ) ; begin
69167: LD_INT 0
69169: PPUSH
// result := IsInUnit ( unit ) ;
69170: LD_ADDR_VAR 0 2
69174: PUSH
69175: LD_VAR 0 1
69179: PPUSH
69180: CALL_OW 310
69184: ST_TO_ADDR
// if not result then
69185: LD_VAR 0 2
69189: NOT
69190: IFFALSE 69202
// result := unit ;
69192: LD_ADDR_VAR 0 2
69196: PUSH
69197: LD_VAR 0 1
69201: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69202: LD_VAR 0 1
69206: PPUSH
69207: CALL_OW 87
// end ;
69211: LD_VAR 0 2
69215: RET
// export function ComMoveHex ( unit , hex ) ; begin
69216: LD_INT 0
69218: PPUSH
// if not hex then
69219: LD_VAR 0 2
69223: NOT
69224: IFFALSE 69228
// exit ;
69226: GO 69281
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69228: LD_VAR 0 2
69232: PUSH
69233: LD_INT 1
69235: ARRAY
69236: PPUSH
69237: LD_VAR 0 2
69241: PUSH
69242: LD_INT 2
69244: ARRAY
69245: PPUSH
69246: CALL_OW 428
69250: IFFALSE 69254
// exit ;
69252: GO 69281
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69254: LD_VAR 0 1
69258: PPUSH
69259: LD_VAR 0 2
69263: PUSH
69264: LD_INT 1
69266: ARRAY
69267: PPUSH
69268: LD_VAR 0 2
69272: PUSH
69273: LD_INT 2
69275: ARRAY
69276: PPUSH
69277: CALL_OW 111
// end ;
69281: LD_VAR 0 3
69285: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69286: LD_INT 0
69288: PPUSH
69289: PPUSH
69290: PPUSH
// if not unit or not enemy then
69291: LD_VAR 0 1
69295: NOT
69296: IFTRUE 69305
69298: PUSH
69299: LD_VAR 0 2
69303: NOT
69304: OR
69305: IFFALSE 69309
// exit ;
69307: GO 69435
// x := GetX ( enemy ) ;
69309: LD_ADDR_VAR 0 4
69313: PUSH
69314: LD_VAR 0 2
69318: PPUSH
69319: CALL_OW 250
69323: ST_TO_ADDR
// y := GetY ( enemy ) ;
69324: LD_ADDR_VAR 0 5
69328: PUSH
69329: LD_VAR 0 2
69333: PPUSH
69334: CALL_OW 251
69338: ST_TO_ADDR
// if ValidHex ( x , y ) then
69339: LD_VAR 0 4
69343: PPUSH
69344: LD_VAR 0 5
69348: PPUSH
69349: CALL_OW 488
69353: IFFALSE 69435
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69355: LD_VAR 0 2
69359: PPUSH
69360: CALL_OW 247
69364: PUSH
69365: LD_INT 3
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: IN
69375: IFTRUE 69398
69377: PUSH
69378: LD_VAR 0 1
69382: PPUSH
69383: CALL_OW 255
69387: PPUSH
69388: LD_VAR 0 2
69392: PPUSH
69393: CALL_OW 292
69397: OR
69398: IFFALSE 69416
// ComAttackUnit ( unit , enemy ) else
69400: LD_VAR 0 1
69404: PPUSH
69405: LD_VAR 0 2
69409: PPUSH
69410: CALL_OW 115
69414: GO 69435
// ComAgressiveMove ( unit , x , y ) ;
69416: LD_VAR 0 1
69420: PPUSH
69421: LD_VAR 0 4
69425: PPUSH
69426: LD_VAR 0 5
69430: PPUSH
69431: CALL_OW 114
// end ;
69435: LD_VAR 0 3
69439: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69440: LD_INT 0
69442: PPUSH
69443: PPUSH
69444: PPUSH
// list := AreaToList ( area , 0 ) ;
69445: LD_ADDR_VAR 0 5
69449: PUSH
69450: LD_VAR 0 1
69454: PPUSH
69455: LD_INT 0
69457: PPUSH
69458: CALL_OW 517
69462: ST_TO_ADDR
// if not list then
69463: LD_VAR 0 5
69467: NOT
69468: IFFALSE 69472
// exit ;
69470: GO 69602
// if all then
69472: LD_VAR 0 2
69476: IFFALSE 69564
// begin for i := 1 to list [ 1 ] do
69478: LD_ADDR_VAR 0 4
69482: PUSH
69483: DOUBLE
69484: LD_INT 1
69486: DEC
69487: ST_TO_ADDR
69488: LD_VAR 0 5
69492: PUSH
69493: LD_INT 1
69495: ARRAY
69496: PUSH
69497: FOR_TO
69498: IFFALSE 69560
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69500: LD_ADDR_VAR 0 3
69504: PUSH
69505: LD_VAR 0 3
69509: PPUSH
69510: LD_VAR 0 3
69514: PUSH
69515: LD_INT 1
69517: PLUS
69518: PPUSH
69519: LD_VAR 0 5
69523: PUSH
69524: LD_INT 1
69526: ARRAY
69527: PUSH
69528: LD_VAR 0 4
69532: ARRAY
69533: PUSH
69534: LD_VAR 0 5
69538: PUSH
69539: LD_INT 2
69541: ARRAY
69542: PUSH
69543: LD_VAR 0 4
69547: ARRAY
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PPUSH
69553: CALL_OW 1
69557: ST_TO_ADDR
69558: GO 69497
69560: POP
69561: POP
// exit ;
69562: GO 69602
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69564: LD_ADDR_VAR 0 3
69568: PUSH
69569: LD_VAR 0 5
69573: PUSH
69574: LD_INT 1
69576: ARRAY
69577: PUSH
69578: LD_INT 1
69580: ARRAY
69581: PUSH
69582: LD_VAR 0 5
69586: PUSH
69587: LD_INT 2
69589: ARRAY
69590: PUSH
69591: LD_INT 1
69593: ARRAY
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: EMPTY
69600: LIST
69601: ST_TO_ADDR
// end ;
69602: LD_VAR 0 3
69606: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69607: LD_INT 0
69609: PPUSH
69610: PPUSH
// list := AreaToList ( area , 0 ) ;
69611: LD_ADDR_VAR 0 4
69615: PUSH
69616: LD_VAR 0 1
69620: PPUSH
69621: LD_INT 0
69623: PPUSH
69624: CALL_OW 517
69628: ST_TO_ADDR
// if not list then
69629: LD_VAR 0 4
69633: NOT
69634: IFFALSE 69638
// exit ;
69636: GO 69679
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69638: LD_ADDR_VAR 0 3
69642: PUSH
69643: LD_VAR 0 4
69647: PUSH
69648: LD_INT 1
69650: ARRAY
69651: PUSH
69652: LD_INT 1
69654: ARRAY
69655: PUSH
69656: LD_VAR 0 4
69660: PUSH
69661: LD_INT 2
69663: ARRAY
69664: PUSH
69665: LD_INT 1
69667: ARRAY
69668: PUSH
69669: LD_VAR 0 2
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: LIST
69678: ST_TO_ADDR
// end ;
69679: LD_VAR 0 3
69683: RET
// export function First ( array ) ; begin
69684: LD_INT 0
69686: PPUSH
// if not array then
69687: LD_VAR 0 1
69691: NOT
69692: IFFALSE 69696
// exit ;
69694: GO 69710
// result := array [ 1 ] ;
69696: LD_ADDR_VAR 0 2
69700: PUSH
69701: LD_VAR 0 1
69705: PUSH
69706: LD_INT 1
69708: ARRAY
69709: ST_TO_ADDR
// end ;
69710: LD_VAR 0 2
69714: RET
// export function Last ( array ) ; begin
69715: LD_INT 0
69717: PPUSH
// if not array then
69718: LD_VAR 0 1
69722: NOT
69723: IFFALSE 69727
// exit ;
69725: GO 69743
// result := array [ array ] ;
69727: LD_ADDR_VAR 0 2
69731: PUSH
69732: LD_VAR 0 1
69736: PUSH
69737: LD_VAR 0 1
69741: ARRAY
69742: ST_TO_ADDR
// end ;
69743: LD_VAR 0 2
69747: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69748: LD_INT 0
69750: PPUSH
69751: PPUSH
// result := [ ] ;
69752: LD_ADDR_VAR 0 5
69756: PUSH
69757: EMPTY
69758: ST_TO_ADDR
// if not array then
69759: LD_VAR 0 1
69763: NOT
69764: IFFALSE 69768
// exit ;
69766: GO 69880
// for i := 1 to array do
69768: LD_ADDR_VAR 0 6
69772: PUSH
69773: DOUBLE
69774: LD_INT 1
69776: DEC
69777: ST_TO_ADDR
69778: LD_VAR 0 1
69782: PUSH
69783: FOR_TO
69784: IFFALSE 69878
// if array [ i ] [ index ] = value then
69786: LD_VAR 0 1
69790: PUSH
69791: LD_VAR 0 6
69795: ARRAY
69796: PUSH
69797: LD_VAR 0 2
69801: ARRAY
69802: PUSH
69803: LD_VAR 0 3
69807: EQUAL
69808: IFFALSE 69876
// begin if indexColumn then
69810: LD_VAR 0 4
69814: IFFALSE 69850
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69816: LD_ADDR_VAR 0 5
69820: PUSH
69821: LD_VAR 0 5
69825: PPUSH
69826: LD_VAR 0 1
69830: PUSH
69831: LD_VAR 0 6
69835: ARRAY
69836: PUSH
69837: LD_VAR 0 4
69841: ARRAY
69842: PPUSH
69843: CALL 64888 0 2
69847: ST_TO_ADDR
69848: GO 69876
// result := Join ( result , array [ i ] ) ;
69850: LD_ADDR_VAR 0 5
69854: PUSH
69855: LD_VAR 0 5
69859: PPUSH
69860: LD_VAR 0 1
69864: PUSH
69865: LD_VAR 0 6
69869: ARRAY
69870: PPUSH
69871: CALL 64888 0 2
69875: ST_TO_ADDR
// end ;
69876: GO 69783
69878: POP
69879: POP
// end ;
69880: LD_VAR 0 5
69884: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69885: LD_INT 0
69887: PPUSH
// if not vehicles or not parkingPoint then
69888: LD_VAR 0 1
69892: NOT
69893: IFTRUE 69902
69895: PUSH
69896: LD_VAR 0 2
69900: NOT
69901: OR
69902: IFFALSE 69906
// exit ;
69904: GO 70004
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69906: LD_ADDR_VAR 0 1
69910: PUSH
69911: LD_VAR 0 1
69915: PPUSH
69916: LD_INT 50
69918: PUSH
69919: EMPTY
69920: LIST
69921: PUSH
69922: LD_INT 3
69924: PUSH
69925: LD_INT 92
69927: PUSH
69928: LD_VAR 0 2
69932: PUSH
69933: LD_INT 1
69935: ARRAY
69936: PUSH
69937: LD_VAR 0 2
69941: PUSH
69942: LD_INT 2
69944: ARRAY
69945: PUSH
69946: LD_INT 8
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PPUSH
69963: CALL_OW 72
69967: ST_TO_ADDR
// if not vehicles then
69968: LD_VAR 0 1
69972: NOT
69973: IFFALSE 69977
// exit ;
69975: GO 70004
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69977: LD_VAR 0 1
69981: PPUSH
69982: LD_VAR 0 2
69986: PUSH
69987: LD_INT 1
69989: ARRAY
69990: PPUSH
69991: LD_VAR 0 2
69995: PUSH
69996: LD_INT 2
69998: ARRAY
69999: PPUSH
70000: CALL_OW 111
// end ;
70004: LD_VAR 0 3
70008: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70009: LD_INT 0
70011: PPUSH
70012: PPUSH
70013: PPUSH
// if not side or not area then
70014: LD_VAR 0 1
70018: NOT
70019: IFTRUE 70028
70021: PUSH
70022: LD_VAR 0 2
70026: NOT
70027: OR
70028: IFFALSE 70032
// exit ;
70030: GO 70151
// tmp := AreaToList ( area , 0 ) ;
70032: LD_ADDR_VAR 0 5
70036: PUSH
70037: LD_VAR 0 2
70041: PPUSH
70042: LD_INT 0
70044: PPUSH
70045: CALL_OW 517
70049: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70050: LD_ADDR_VAR 0 4
70054: PUSH
70055: DOUBLE
70056: LD_INT 1
70058: DEC
70059: ST_TO_ADDR
70060: LD_VAR 0 5
70064: PUSH
70065: LD_INT 1
70067: ARRAY
70068: PUSH
70069: FOR_TO
70070: IFFALSE 70149
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70072: LD_VAR 0 5
70076: PUSH
70077: LD_INT 1
70079: ARRAY
70080: PUSH
70081: LD_VAR 0 4
70085: ARRAY
70086: PPUSH
70087: LD_VAR 0 5
70091: PUSH
70092: LD_INT 2
70094: ARRAY
70095: PUSH
70096: LD_VAR 0 4
70100: ARRAY
70101: PPUSH
70102: CALL_OW 351
70106: IFFALSE 70147
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70108: LD_VAR 0 5
70112: PUSH
70113: LD_INT 1
70115: ARRAY
70116: PUSH
70117: LD_VAR 0 4
70121: ARRAY
70122: PPUSH
70123: LD_VAR 0 5
70127: PUSH
70128: LD_INT 2
70130: ARRAY
70131: PUSH
70132: LD_VAR 0 4
70136: ARRAY
70137: PPUSH
70138: LD_VAR 0 1
70142: PPUSH
70143: CALL_OW 244
// end ;
70147: GO 70069
70149: POP
70150: POP
// end ;
70151: LD_VAR 0 3
70155: RET
// export function UniqueArray ( array ) ; var i ; begin
70156: LD_INT 0
70158: PPUSH
70159: PPUSH
// result := [ ] ;
70160: LD_ADDR_VAR 0 2
70164: PUSH
70165: EMPTY
70166: ST_TO_ADDR
// if not array then
70167: LD_VAR 0 1
70171: NOT
70172: IFFALSE 70176
// exit ;
70174: GO 70237
// for i := 1 to array do
70176: LD_ADDR_VAR 0 3
70180: PUSH
70181: DOUBLE
70182: LD_INT 1
70184: DEC
70185: ST_TO_ADDR
70186: LD_VAR 0 1
70190: PUSH
70191: FOR_TO
70192: IFFALSE 70235
// if not array [ i ] in result then
70194: LD_VAR 0 1
70198: PUSH
70199: LD_VAR 0 3
70203: ARRAY
70204: PUSH
70205: LD_VAR 0 2
70209: IN
70210: NOT
70211: IFFALSE 70233
// result := Join ( result , i ) ;
70213: LD_ADDR_VAR 0 2
70217: PUSH
70218: LD_VAR 0 2
70222: PPUSH
70223: LD_VAR 0 3
70227: PPUSH
70228: CALL 64888 0 2
70232: ST_TO_ADDR
70233: GO 70191
70235: POP
70236: POP
// end ; end_of_file
70237: LD_VAR 0 2
70241: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70242: LD_VAR 0 1
70246: PPUSH
70247: LD_VAR 0 2
70251: PPUSH
70252: LD_VAR 0 3
70256: PPUSH
70257: LD_VAR 0 4
70261: PPUSH
70262: LD_VAR 0 5
70266: PPUSH
70267: LD_VAR 0 6
70271: PPUSH
70272: CALL 4307 0 6
// end ;
70276: PPOPN 6
70278: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70279: LD_INT 0
70281: PPUSH
// begin if not units then
70282: LD_VAR 0 1
70286: NOT
70287: IFFALSE 70291
// exit ;
70289: GO 70325
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
70291: LD_VAR 0 1
70295: PPUSH
70296: LD_VAR 0 2
70300: PPUSH
70301: LD_VAR 0 3
70305: PPUSH
70306: LD_VAR 0 4
70310: PPUSH
70311: LD_VAR 0 5
70315: PPUSH
70316: LD_VAR 0 6
70320: PPUSH
70321: CALL 26661 0 6
// end ;
70325: PPOPN 7
70327: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70328: CALL 4187 0 0
// end ;
70332: PPOPN 1
70334: END
