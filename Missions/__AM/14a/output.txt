// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 94 0 0
// PrepareAlliance ;
  30: CALL 637 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3429 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 17537 0 1
// end ; end_of_file
  91: PPOPN 1
  93: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 101: LD_ADDR_VAR 0 3
 105: PUSH
 106: LD_STRING 13a_buildings
 108: PPUSH
 109: LD_INT 7
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: LD_INT 1
 117: PUSH
 118: LD_INT 70
 120: PUSH
 121: LD_INT 46
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 10
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: PPUSH
 154: CALL_OW 30
 158: ST_TO_ADDR
// bc_kind1 := - 1 ;
 159: LD_ADDR_OWVAR 44
 163: PUSH
 164: LD_INT 1
 166: NEG
 167: ST_TO_ADDR
// bc_kind2 := - 1 ;
 168: LD_ADDR_OWVAR 45
 172: PUSH
 173: LD_INT 1
 175: NEG
 176: ST_TO_ADDR
// for i in tmp do
 177: LD_ADDR_VAR 0 2
 181: PUSH
 182: LD_VAR 0 3
 186: PUSH
 187: FOR_IN
 188: IFFALSE 433
// begin uc_side := 7 ;
 190: LD_ADDR_OWVAR 20
 194: PUSH
 195: LD_INT 7
 197: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 198: LD_ADDR_OWVAR 21
 202: PUSH
 203: LD_VAR 0 2
 207: PUSH
 208: LD_INT 2
 210: ARRAY
 211: ST_TO_ADDR
// if i [ 2 ] = 2 then
 212: LD_VAR 0 2
 216: PUSH
 217: LD_INT 2
 219: ARRAY
 220: PUSH
 221: LD_INT 2
 223: EQUAL
 224: IFFALSE 234
// uc_side := 4 ;
 226: LD_ADDR_OWVAR 20
 230: PUSH
 231: LD_INT 4
 233: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 234: LD_ADDR_OWVAR 42
 238: PUSH
 239: LD_VAR 0 2
 243: PUSH
 244: LD_INT 3
 246: ARRAY
 247: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 248: LD_VAR 0 2
 252: PUSH
 253: LD_INT 3
 255: ARRAY
 256: PUSH
 257: LD_INT 29
 259: PUSH
 260: LD_INT 30
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: IN
 267: IFFALSE 300
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 269: LD_VAR 0 2
 273: PUSH
 274: LD_INT 4
 276: ARRAY
 277: PPUSH
 278: LD_VAR 0 2
 282: PUSH
 283: LD_INT 5
 285: ARRAY
 286: PPUSH
 287: LD_VAR 0 2
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PPUSH
 296: CALL_OW 441
// if i [ 8 ] then
 300: LD_VAR 0 2
 304: PUSH
 305: LD_INT 8
 307: ARRAY
 308: IFFALSE 324
// bc_kind1 := i [ 8 ] ;
 310: LD_ADDR_OWVAR 44
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_INT 8
 322: ARRAY
 323: ST_TO_ADDR
// if i [ 9 ] then
 324: LD_VAR 0 2
 328: PUSH
 329: LD_INT 9
 331: ARRAY
 332: IFFALSE 348
// bc_kind2 := i [ 9 ] ;
 334: LD_ADDR_OWVAR 45
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 9
 346: ARRAY
 347: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 348: LD_ADDR_VAR 0 4
 352: PUSH
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 4
 360: ARRAY
 361: PPUSH
 362: LD_VAR 0 2
 366: PUSH
 367: LD_INT 5
 369: ARRAY
 370: PPUSH
 371: LD_VAR 0 2
 375: PUSH
 376: LD_INT 6
 378: ARRAY
 379: PPUSH
 380: CALL_OW 47
 384: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_VAR 0 2
 394: PUSH
 395: LD_INT 7
 397: ARRAY
 398: PPUSH
 399: CALL_OW 241
// if i [ 10 ] then
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 10
 410: ARRAY
 411: IFFALSE 431
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 413: LD_VAR 0 4
 417: PPUSH
 418: LD_VAR 0 2
 422: PUSH
 423: LD_INT 10
 425: ARRAY
 426: PPUSH
 427: CALL_OW 431
// end ;
 431: GO 187
 433: POP
 434: POP
// if HexInfo ( 144 , 65 ) = 0 then
 435: LD_INT 144
 437: PPUSH
 438: LD_INT 65
 440: PPUSH
 441: CALL_OW 428
 445: PUSH
 446: LD_INT 0
 448: EQUAL
 449: IFFALSE 486
// begin uc_side := 4 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 4
 458: ST_TO_ADDR
// bc_type := b_warehouse ;
 459: LD_ADDR_OWVAR 42
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: LD_INT 144
 474: PPUSH
 475: LD_INT 65
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 47
 485: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 486: LD_ADDR_VAR 0 2
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 2
 503: PUSH
 504: LD_INT 30
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 30
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PPUSH
 533: CALL_OW 69
 537: PUSH
 538: FOR_IN
 539: IFFALSE 591
// for j = 1 to 3 do
 541: LD_ADDR_VAR 0 5
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 587
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 557: LD_VAR 0 2
 561: PPUSH
 562: CALL_OW 274
 566: PPUSH
 567: LD_VAR 0 5
 571: PPUSH
 572: LD_INT 3000
 574: PUSH
 575: LD_VAR 0 5
 579: DIVREAL
 580: PPUSH
 581: CALL_OW 277
 585: GO 554
 587: POP
 588: POP
 589: GO 538
 591: POP
 592: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_INT 3
 600: PPUSH
 601: LD_INT 22
 603: PUSH
 604: LD_INT 7
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PPUSH
 611: CALL_OW 70
 615: PUSH
 616: FOR_IN
 617: IFFALSE 630
// RemoveUnit ( i ) ;
 619: LD_VAR 0 2
 623: PPUSH
 624: CALL_OW 64
 628: GO 616
 630: POP
 631: POP
// end ; end_of_file
 632: LD_VAR 0 1
 636: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
 641: PPUSH
 642: PPUSH
// uc_side := 7 ;
 643: LD_ADDR_OWVAR 20
 647: PUSH
 648: LD_INT 7
 650: ST_TO_ADDR
// uc_nation := 1 ;
 651: LD_ADDR_OWVAR 21
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 659: LD_ADDR_EXP 2
 663: PUSH
 664: LD_STRING JMM
 666: PPUSH
 667: LD_EXP 1
 671: NOT
 672: PPUSH
 673: LD_STRING 13a_
 675: PPUSH
 676: CALL 21446 0 3
 680: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 681: LD_ADDR_EXP 3
 685: PUSH
 686: LD_STRING Burlak
 688: PPUSH
 689: LD_EXP 1
 693: NOT
 694: PPUSH
 695: LD_STRING 13a_
 697: PPUSH
 698: CALL 21446 0 3
 702: ST_TO_ADDR
// if debug then
 703: LD_EXP 1
 707: IFFALSE 742
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 709: LD_INT 1
 711: PPUSH
 712: LD_INT 4
 714: PPUSH
 715: LD_INT 10
 717: PPUSH
 718: CALL_OW 380
// JMM := CreateHuman ;
 722: LD_ADDR_EXP 2
 726: PUSH
 727: CALL_OW 44
 731: ST_TO_ADDR
// Burlak := CreateHuman ;
 732: LD_ADDR_EXP 3
 736: PUSH
 737: CALL_OW 44
 741: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 742: LD_ADDR_EXP 4
 746: PUSH
 747: LD_INT 1
 749: PPUSH
 750: LD_INT 22
 752: PUSH
 753: LD_INT 7
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 23
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 30
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 70
 807: ST_TO_ADDR
// if freedom then
 808: LD_EXP 4
 812: IFFALSE 939
// begin freedom := freedom [ 1 ] ;
 814: LD_ADDR_EXP 4
 818: PUSH
 819: LD_EXP 4
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 828: LD_EXP 4
 832: PPUSH
 833: LD_STRING freedom
 835: PPUSH
 836: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 840: LD_EXP 4
 844: PPUSH
 845: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 849: LD_EXP 2
 853: PPUSH
 854: LD_EXP 4
 858: PPUSH
 859: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 863: LD_EXP 3
 867: PPUSH
 868: LD_EXP 4
 872: PPUSH
 873: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 877: LD_EXP 4
 881: PPUSH
 882: CALL_OW 274
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_INT 1000
 892: PPUSH
 893: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 274
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 400
 912: PPUSH
 913: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 917: LD_EXP 4
 921: PPUSH
 922: CALL_OW 274
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_INT 30
 932: PPUSH
 933: CALL_OW 277
// end else
 937: GO 1026
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 954: LD_EXP 3
 958: PPUSH
 959: LD_EXP 2
 963: PPUSH
 964: CALL_OW 250
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL_OW 251
 978: PPUSH
 979: LD_INT 8
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
 989: LD_EXP 2
 993: PPUSH
 994: LD_EXP 3
 998: PPUSH
 999: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1003: LD_EXP 3
1007: PPUSH
1008: LD_EXP 2
1012: PPUSH
1013: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1017: LD_EXP 2
1021: PPUSH
1022: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1038: LD_ADDR_VAR 0 2
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: LD_INT 4
1051: PUSH
1052: LD_INT 5
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 9
1066: PUSH
1067: LD_INT 7
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: LD_INT 12
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// for i = 1 to 5 do
1087: LD_ADDR_VAR 0 3
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_INT 5
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1285
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 4
1119: MOD
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: ARRAY
1125: PPUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_VAR 0 3
1164: PUSH
1165: LD_INT 5
1167: MOD
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: PPUSH
1174: LD_INT 100
1176: PPUSH
1177: CALL 26270 0 5
// veh := CreateVehicle ;
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: CALL_OW 45
1190: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 12
1206: PPUSH
1207: CALL_OW 233
// if freedom then
1211: LD_EXP 4
1215: IFFALSE 1248
// begin if IsInArea ( freedom , freedom_base ) then
1217: LD_EXP 4
1221: PPUSH
1222: LD_INT 1
1224: PPUSH
1225: CALL_OW 308
1229: IFFALSE 1246
// PlaceUnitArea ( veh , freedom_base , false ) end else
1231: LD_VAR 0 4
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
1246: GO 1283
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1248: LD_VAR 0 4
1252: PPUSH
1253: LD_EXP 2
1257: PPUSH
1258: CALL_OW 250
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL_OW 251
1272: PPUSH
1273: LD_INT 14
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ;
1283: GO 1100
1285: POP
1286: POP
// uc_nation := 3 ;
1287: LD_ADDR_OWVAR 21
1291: PUSH
1292: LD_INT 3
1294: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1295: LD_ADDR_VAR 0 2
1299: PUSH
1300: LD_INT 21
1302: PUSH
1303: LD_INT 22
1305: PUSH
1306: LD_INT 23
1308: PUSH
1309: LD_INT 24
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 43
1320: PUSH
1321: LD_INT 44
1323: PUSH
1324: LD_INT 45
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: ST_TO_ADDR
// for i = 1 to 5 do
1336: LD_ADDR_VAR 0 3
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_INT 5
1348: PUSH
1349: FOR_TO
1350: IFFALSE 1477
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 1
1359: ARRAY
1360: PUSH
1361: LD_VAR 0 3
1365: PUSH
1366: LD_INT 4
1368: MOD
1369: PUSH
1370: LD_INT 1
1372: PLUS
1373: ARRAY
1374: PPUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 3
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PUSH
1385: LD_INT 1
1387: PPUSH
1388: LD_INT 2
1390: PPUSH
1391: CALL_OW 12
1395: ARRAY
1396: PPUSH
1397: LD_INT 1
1399: PPUSH
1400: LD_VAR 0 2
1404: PUSH
1405: LD_INT 2
1407: ARRAY
1408: PUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 3
1416: MOD
1417: PUSH
1418: LD_INT 1
1420: PLUS
1421: ARRAY
1422: PPUSH
1423: LD_INT 100
1425: PPUSH
1426: CALL 26270 0 5
// veh := CreateVehicle ;
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: CALL_OW 45
1439: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1440: LD_VAR 0 4
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL_OW 12
1455: PPUSH
1456: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1460: LD_VAR 0 4
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL_OW 49
// end ;
1475: GO 1349
1477: POP
1478: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1479: LD_INT 2
1481: PUSH
1482: LD_INT 34
1484: PUSH
1485: LD_INT 12
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 34
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 69
1511: NOT
1512: IFFALSE 1578
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1514: LD_INT 22
1516: PPUSH
1517: LD_INT 3
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 51
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL 26270 0 5
// veh := CreateVehicle ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: CALL_OW 45
1542: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1543: LD_VAR 0 4
1547: PPUSH
1548: LD_INT 0
1550: PPUSH
1551: LD_INT 5
1553: PPUSH
1554: CALL_OW 12
1558: PPUSH
1559: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1578: LD_ADDR_VAR 0 2
1582: PUSH
1583: LD_STRING 13a_Masha
1585: PPUSH
1586: EMPTY
1587: PPUSH
1588: CALL_OW 30
1592: ST_TO_ADDR
// if tmp then
1593: LD_VAR 0 2
1597: IFFALSE 1680
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1599: LD_VAR 0 2
1603: PUSH
1604: LD_INT 1
1606: ARRAY
1607: PPUSH
1608: LD_VAR 0 2
1612: PUSH
1613: LD_INT 2
1615: ARRAY
1616: PPUSH
1617: LD_VAR 0 2
1621: PUSH
1622: LD_INT 3
1624: ARRAY
1625: PPUSH
1626: LD_VAR 0 2
1630: PUSH
1631: LD_INT 4
1633: ARRAY
1634: PPUSH
1635: LD_INT 100
1637: PPUSH
1638: CALL 26270 0 5
// Masha := CreateVehicle ;
1642: LD_ADDR_EXP 36
1646: PUSH
1647: CALL_OW 45
1651: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1652: LD_EXP 36
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1667: LD_EXP 36
1671: PPUSH
1672: LD_INT 7
1674: NEG
1675: PPUSH
1676: CALL_OW 242
// end ; uc_side := 4 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 4
1687: ST_TO_ADDR
// tmp := [ ] ;
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: EMPTY
1694: ST_TO_ADDR
// squad1 := [ ] ;
1695: LD_ADDR_EXP 37
1699: PUSH
1700: EMPTY
1701: ST_TO_ADDR
// squad2 := [ ] ;
1702: LD_ADDR_EXP 38
1706: PUSH
1707: EMPTY
1708: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1709: LD_ADDR_EXP 19
1713: PUSH
1714: LD_STRING Joan
1716: PPUSH
1717: LD_EXP 1
1721: NOT
1722: PPUSH
1723: LD_STRING 13a_
1725: PPUSH
1726: CALL 21446 0 3
1730: ST_TO_ADDR
// if Joan then
1731: LD_EXP 19
1735: IFFALSE 1753
// tmp := tmp ^ Joan ;
1737: LD_ADDR_VAR 0 2
1741: PUSH
1742: LD_VAR 0 2
1746: PUSH
1747: LD_EXP 19
1751: ADD
1752: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1753: LD_ADDR_EXP 5
1757: PUSH
1758: LD_STRING Roth
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_STRING 13a_
1769: PPUSH
1770: CALL 21446 0 3
1774: ST_TO_ADDR
// if Roth then
1775: LD_EXP 5
1779: IFFALSE 1797
// tmp := tmp ^ Roth ;
1781: LD_ADDR_VAR 0 2
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_EXP 5
1795: ADD
1796: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1797: LD_ADDR_EXP 10
1801: PUSH
1802: LD_STRING Denis
1804: PPUSH
1805: LD_EXP 1
1809: NOT
1810: PPUSH
1811: LD_STRING 13a_
1813: PPUSH
1814: CALL 21446 0 3
1818: ST_TO_ADDR
// if Denis then
1819: LD_EXP 10
1823: IFFALSE 1841
// tmp := tmp ^ Denis ;
1825: LD_ADDR_VAR 0 2
1829: PUSH
1830: LD_VAR 0 2
1834: PUSH
1835: LD_EXP 10
1839: ADD
1840: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1841: LD_ADDR_EXP 20
1845: PUSH
1846: LD_STRING DeltaDoctor
1848: PPUSH
1849: LD_EXP 1
1853: NOT
1854: PPUSH
1855: LD_STRING 13a_
1857: PPUSH
1858: CALL 21446 0 3
1862: ST_TO_ADDR
// if DeltaDoctor then
1863: LD_EXP 20
1867: IFFALSE 1885
// tmp := tmp ^ DeltaDoctor ;
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 20
1883: ADD
1884: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1885: LD_ADDR_EXP 18
1889: PUSH
1890: LD_STRING Simms
1892: PPUSH
1893: LD_EXP 1
1897: NOT
1898: PPUSH
1899: LD_STRING 13a_
1901: PPUSH
1902: CALL 21446 0 3
1906: ST_TO_ADDR
// if Simms then
1907: LD_EXP 18
1911: IFFALSE 1929
// tmp := tmp ^ Simms ;
1913: LD_ADDR_VAR 0 2
1917: PUSH
1918: LD_VAR 0 2
1922: PUSH
1923: LD_EXP 18
1927: ADD
1928: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1929: LD_ADDR_EXP 21
1933: PUSH
1934: LD_STRING Gossudarov
1936: PPUSH
1937: LD_EXP 1
1941: NOT
1942: PPUSH
1943: LD_STRING 13a_
1945: PPUSH
1946: CALL 21446 0 3
1950: ST_TO_ADDR
// if Gossudarov then
1951: LD_EXP 21
1955: IFFALSE 1973
// tmp := tmp ^ Gossudarov ;
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_EXP 21
1971: ADD
1972: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1973: LD_ADDR_EXP 22
1977: PUSH
1978: LD_STRING Kirilenkova
1980: PPUSH
1981: LD_EXP 1
1985: NOT
1986: PPUSH
1987: LD_STRING 13a_
1989: PPUSH
1990: CALL 21446 0 3
1994: ST_TO_ADDR
// if Kirilenkova then
1995: LD_EXP 22
1999: IFFALSE 2017
// tmp := tmp ^ Kirilenkova ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: LD_VAR 0 2
2010: PUSH
2011: LD_EXP 22
2015: ADD
2016: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2017: LD_ADDR_EXP 25
2021: PUSH
2022: LD_STRING Petrosyan
2024: PPUSH
2025: LD_EXP 1
2029: NOT
2030: PPUSH
2031: LD_STRING 13a_
2033: PPUSH
2034: CALL 21446 0 3
2038: ST_TO_ADDR
// if Petrosyan then
2039: LD_EXP 25
2043: IFFALSE 2061
// tmp := tmp ^ Petrosyan ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_EXP 25
2059: ADD
2060: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2061: LD_ADDR_EXP 26
2065: PUSH
2066: LD_STRING Petrosyan
2068: PPUSH
2069: LD_EXP 1
2073: NOT
2074: PPUSH
2075: LD_STRING 13a_
2077: PPUSH
2078: CALL 21446 0 3
2082: ST_TO_ADDR
// if Scholtze then
2083: LD_EXP 26
2087: IFFALSE 2105
// tmp := tmp ^ Scholtze ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_EXP 26
2103: ADD
2104: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2105: LD_ADDR_EXP 24
2109: PUSH
2110: LD_STRING Dolgov
2112: PPUSH
2113: LD_EXP 1
2117: NOT
2118: PPUSH
2119: LD_STRING 13a_
2121: PPUSH
2122: CALL 21446 0 3
2126: ST_TO_ADDR
// if Dolgov then
2127: LD_EXP 24
2131: IFFALSE 2149
// tmp := tmp ^ Dolgov ;
2133: LD_ADDR_VAR 0 2
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_EXP 24
2147: ADD
2148: ST_TO_ADDR
// for i in tmp do
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_VAR 0 2
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2185
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_INT 160
2169: PPUSH
2170: LD_INT 78
2172: PPUSH
2173: LD_INT 22
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
2183: GO 2159
2185: POP
2186: POP
// squad1 := tmp ;
2187: LD_ADDR_EXP 37
2191: PUSH
2192: LD_VAR 0 2
2196: ST_TO_ADDR
// tmp := [ ] ;
2197: LD_ADDR_VAR 0 2
2201: PUSH
2202: EMPTY
2203: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2204: LD_ADDR_EXP 30
2208: PUSH
2209: LD_STRING Petrova
2211: PPUSH
2212: LD_EXP 1
2216: NOT
2217: PPUSH
2218: LD_STRING 13a_
2220: PPUSH
2221: CALL 21446 0 3
2225: ST_TO_ADDR
// if Petrovova then
2226: LD_EXP 30
2230: IFFALSE 2248
// tmp := tmp ^ Petrovova ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_VAR 0 2
2241: PUSH
2242: LD_EXP 30
2246: ADD
2247: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2248: LD_ADDR_EXP 23
2252: PUSH
2253: LD_STRING Titov
2255: PPUSH
2256: LD_EXP 1
2260: NOT
2261: PPUSH
2262: LD_STRING 13a_
2264: PPUSH
2265: CALL 21446 0 3
2269: ST_TO_ADDR
// if Titov then
2270: LD_EXP 23
2274: IFFALSE 2292
// tmp := tmp ^ Titov ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_VAR 0 2
2285: PUSH
2286: LD_EXP 23
2290: ADD
2291: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2292: LD_ADDR_EXP 33
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_STRING 13a_
2308: PPUSH
2309: CALL 21446 0 3
2313: ST_TO_ADDR
// if Karamazov then
2314: LD_EXP 33
2318: IFFALSE 2336
// tmp := tmp ^ Karamazov ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_EXP 33
2334: ADD
2335: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2336: LD_ADDR_EXP 16
2340: PUSH
2341: LD_STRING Frank
2343: PPUSH
2344: LD_EXP 1
2348: NOT
2349: PPUSH
2350: LD_STRING 13a_
2352: PPUSH
2353: CALL 21446 0 3
2357: ST_TO_ADDR
// if Frank then
2358: LD_EXP 16
2362: IFFALSE 2380
// tmp := tmp ^ Frank ;
2364: LD_ADDR_VAR 0 2
2368: PUSH
2369: LD_VAR 0 2
2373: PUSH
2374: LD_EXP 16
2378: ADD
2379: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2380: LD_ADDR_EXP 7
2384: PUSH
2385: LD_STRING Donaldson
2387: PPUSH
2388: LD_EXP 1
2392: NOT
2393: PPUSH
2394: LD_STRING 13a_
2396: PPUSH
2397: CALL 21446 0 3
2401: ST_TO_ADDR
// if Donaldson then
2402: LD_EXP 7
2406: IFFALSE 2424
// tmp := tmp ^ Donaldson ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_EXP 7
2422: ADD
2423: ST_TO_ADDR
// for i in tmp do
2424: LD_ADDR_VAR 0 3
2428: PUSH
2429: LD_VAR 0 2
2433: PUSH
2434: FOR_IN
2435: IFFALSE 2475
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2437: LD_VAR 0 3
2441: PPUSH
2442: LD_INT 117
2444: PPUSH
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: LD_INT 0
2453: PPUSH
2454: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2458: LD_VAR 0 3
2462: PPUSH
2463: LD_INT 117
2465: PPUSH
2466: LD_INT 8
2468: PPUSH
2469: CALL_OW 118
// end ;
2473: GO 2434
2475: POP
2476: POP
// squad2 := tmp ;
2477: LD_ADDR_EXP 38
2481: PUSH
2482: LD_VAR 0 2
2486: ST_TO_ADDR
// uc_side := 0 ;
2487: LD_ADDR_OWVAR 20
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// uc_nation := 0 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// InitHc ;
2503: CALL_OW 19
// hc_importance := 0 ;
2507: LD_ADDR_OWVAR 32
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// hc_name := Find some goods! ;
2515: LD_ADDR_OWVAR 26
2519: PUSH
2520: LD_STRING Find some goods!
2522: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2523: LD_INT 0
2525: PPUSH
2526: LD_INT 12
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2536: CALL_OW 44
2540: PPUSH
2541: LD_INT 96
2543: PPUSH
2544: LD_INT 108
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 48
// InitHc ;
2554: CALL_OW 19
// end ;
2558: LD_VAR 0 1
2562: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2563: LD_INT 22
2565: PUSH
2566: LD_INT 7
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 23
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PPUSH
2587: CALL_OW 69
2591: IFFALSE 3056
2593: GO 2595
2595: DISABLE
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
// begin InGameOn ;
2600: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2604: LD_INT 22
2606: PUSH
2607: LD_INT 7
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 23
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: CALL_OW 64
// game_speed := 4 ;
2641: LD_ADDR_OWVAR 65
2645: PUSH
2646: LD_INT 4
2648: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_INT 93
2656: PPUSH
2657: LD_INT 100
2659: PPUSH
2660: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2664: LD_EXP 3
2668: PPUSH
2669: LD_INT 93
2671: PPUSH
2672: LD_INT 99
2674: PPUSH
2675: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2679: LD_EXP 2
2683: PUSH
2684: LD_EXP 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PPUSH
2693: LD_INT 81
2695: PPUSH
2696: LD_INT 112
2698: PPUSH
2699: CALL_OW 178
// wait ( 0 0$5 ) ;
2703: LD_INT 175
2705: PPUSH
2706: CALL_OW 67
// music_nat := 2 ;
2710: LD_ADDR_OWVAR 71
2714: PUSH
2715: LD_INT 2
2717: ST_TO_ADDR
// music_class := 4 ;
2718: LD_ADDR_OWVAR 72
2722: PUSH
2723: LD_INT 4
2725: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2726: LD_INT 80
2728: PPUSH
2729: LD_INT 130
2731: PPUSH
2732: CALL_OW 86
// uc_nation := 2 ;
2736: LD_ADDR_OWVAR 21
2740: PUSH
2741: LD_INT 2
2743: ST_TO_ADDR
// uc_side := 2 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// hc_gallery = sandar ;
2752: LD_ADDR_OWVAR 33
2756: PUSH
2757: LD_STRING sandar
2759: ST_TO_ADDR
// hc_face_number = 1 ;
2760: LD_ADDR_OWVAR 34
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// hc_name = Louis Schulz ;
2768: LD_ADDR_OWVAR 26
2772: PUSH
2773: LD_STRING Louis Schulz
2775: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2776: LD_ADDR_OWVAR 29
2780: PUSH
2781: LD_INT 13
2783: PUSH
2784: LD_INT 11
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2791: LD_ADDR_OWVAR 30
2795: PUSH
2796: LD_INT 0
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2814: LD_ADDR_OWVAR 31
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: LD_INT 7
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// hc_sex = sex_male ;
2837: LD_ADDR_OWVAR 27
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// hc_class = 1 ;
2845: LD_ADDR_OWVAR 28
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// hc_importance = 100 ;
2853: LD_ADDR_OWVAR 32
2857: PUSH
2858: LD_INT 100
2860: ST_TO_ADDR
// Louis = CreateHuman ;
2861: LD_ADDR_VAR 0 1
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2871: LD_INT 14
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 26
2882: PPUSH
2883: LD_INT 100
2885: PPUSH
2886: CALL 26270 0 5
// veh := CreateVehicle ;
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: CALL_OW 45
2899: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2900: LD_VAR 0 2
2904: PPUSH
2905: LD_INT 2
2907: NEG
2908: PPUSH
2909: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2913: LD_VAR 0 2
2917: PPUSH
2918: LD_INT 80
2920: PPUSH
2921: LD_INT 130
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2931: LD_VAR 0 1
2935: PPUSH
2936: LD_VAR 0 2
2940: PPUSH
2941: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2945: LD_VAR 0 1
2949: PPUSH
2950: LD_INT 80
2952: PPUSH
2953: LD_INT 109
2955: PPUSH
2956: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2969: LD_VAR 0 1
2973: PPUSH
2974: LD_INT 80
2976: PPUSH
2977: LD_INT 131
2979: PPUSH
2980: CALL_OW 171
// wait ( 0 0$06 ) ;
2984: LD_INT 210
2986: PPUSH
2987: CALL_OW 67
// InGameOff ;
2991: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
2995: LD_INT 35
2997: PPUSH
2998: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3002: LD_VAR 0 1
3006: PPUSH
3007: LD_INT 80
3009: PPUSH
3010: LD_INT 131
3012: PPUSH
3013: CALL_OW 307
3017: IFFALSE 2995
// SetSide ( veh , 7 ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 7
3026: PPUSH
3027: CALL_OW 235
// RemoveUnit ( Louis ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 64
// music_nat := 3 ;
3040: LD_ADDR_OWVAR 71
3044: PUSH
3045: LD_INT 3
3047: ST_TO_ADDR
// music_class := 0 ;
3048: LD_ADDR_OWVAR 72
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// end ;
3056: PPOPN 2
3058: END
// every 0 0$10 trigger squad1 do var i , xy ;
3059: LD_EXP 37
3063: IFFALSE 3426
3065: GO 3067
3067: DISABLE
3068: LD_INT 0
3070: PPUSH
3071: PPUSH
// begin enable ;
3072: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3073: LD_ADDR_VAR 0 1
3077: PUSH
3078: LD_EXP 37
3082: PUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_EXP 37
3090: PPUSH
3091: CALL_OW 12
3095: ARRAY
3096: ST_TO_ADDR
// if IsInUnit ( i ) then
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 310
3106: IFFALSE 3110
// exit ;
3108: GO 3426
// ComRemember ( i ) ;
3110: LD_VAR 0 1
3114: PPUSH
3115: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3119: LD_ADDR_VAR 0 2
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 250
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: LD_INT 5
3139: PPUSH
3140: CALL_OW 12
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 7
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: CALL_OW 272
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 251
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: LD_INT 5
3176: PPUSH
3177: CALL_OW 12
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: LD_INT 7
3187: PPUSH
3188: CALL_OW 12
3192: PPUSH
3193: CALL_OW 273
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3202: LD_VAR 0 2
3206: PUSH
3207: LD_INT 1
3209: ARRAY
3210: PPUSH
3211: LD_VAR 0 2
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PPUSH
3220: CALL_OW 428
3224: PUSH
3225: LD_INT 0
3227: NONEQUAL
3228: PUSH
3229: LD_VAR 0 2
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: LD_VAR 0 2
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 488
3251: NOT
3252: OR
3253: IFFALSE 3257
// exit ;
3255: GO 3426
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3257: LD_VAR 0 1
3261: PPUSH
3262: LD_VAR 0 2
3266: PUSH
3267: LD_INT 1
3269: ARRAY
3270: PPUSH
3271: LD_VAR 0 2
3275: PUSH
3276: LD_INT 2
3278: ARRAY
3279: PPUSH
3280: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_INT 350
3291: PPUSH
3292: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3296: LD_INT 60
3298: PPUSH
3299: CALL_OW 13
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: AND
3333: IFFALSE 3417
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3335: LD_VAR 0 1
3339: PPUSH
3340: LD_INT 22
3342: PUSH
3343: LD_INT 4
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: LD_INT 21
3352: PUSH
3353: LD_INT 3
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PPUSH
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 74
3378: PPUSH
3379: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3383: LD_INT 1050
3385: PPUSH
3386: CALL_OW 67
// until IsInUnit ( i ) ;
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 310
3399: IFFALSE 3383
// wait ( 0 0$30 ) ;
3401: LD_INT 1050
3403: PPUSH
3404: CALL_OW 67
// AddComExitBuilding ( i ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: CALL_OW 182
// end ; AddComReturn ( i ) ;
3417: LD_VAR 0 1
3421: PPUSH
3422: CALL_OW 204
// end ; end_of_file
3426: PPOPN 2
3428: END
// export function Action ; begin
3429: LD_INT 0
3431: PPUSH
// InGameOn ;
3432: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3436: LD_EXP 2
3440: PPUSH
3441: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3445: LD_EXP 2
3449: PPUSH
3450: LD_STRING D1-JMM-1
3452: PPUSH
3453: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3457: LD_EXP 3
3461: PPUSH
3462: LD_STRING D1-Bur-1
3464: PPUSH
3465: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3469: LD_EXP 2
3473: PPUSH
3474: LD_STRING D1-JMM-2
3476: PPUSH
3477: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3481: LD_EXP 3
3485: PPUSH
3486: LD_STRING D1-Bur-2
3488: PPUSH
3489: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3493: LD_EXP 2
3497: PPUSH
3498: LD_STRING D1-JMM-3
3500: PPUSH
3501: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3505: LD_EXP 3
3509: PPUSH
3510: LD_STRING D1-Bur-3
3512: PPUSH
3513: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3517: LD_EXP 2
3521: PPUSH
3522: LD_STRING D1-JMM-4
3524: PPUSH
3525: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3529: LD_EXP 3
3533: PPUSH
3534: LD_STRING D1-Bur-4
3536: PPUSH
3537: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3541: LD_EXP 2
3545: PPUSH
3546: LD_STRING D1-JMM-5
3548: PPUSH
3549: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3553: LD_EXP 3
3557: PPUSH
3558: LD_STRING D1-Bur-5
3560: PPUSH
3561: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3565: LD_EXP 2
3569: PPUSH
3570: LD_STRING D1-JMM-6
3572: PPUSH
3573: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3577: LD_EXP 3
3581: PPUSH
3582: LD_STRING D1-Bur-6
3584: PPUSH
3585: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3589: LD_EXP 2
3593: PPUSH
3594: LD_STRING D1-JMM-7
3596: PPUSH
3597: CALL_OW 88
// wait ( 20 ) ;
3601: LD_INT 20
3603: PPUSH
3604: CALL_OW 67
// Query ( QTruck ) ;
3608: LD_STRING QTruck
3610: PPUSH
3611: CALL_OW 97
// InGameOff ;
3615: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3619: LD_STRING MArtPickup
3621: PPUSH
3622: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: CALL_OW 424
// end ;
3636: LD_VAR 0 1
3640: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3641: LD_INT 2
3643: PPUSH
3644: LD_INT 21
3646: PUSH
3647: LD_INT 2
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 33
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: LD_INT 58
3669: PUSH
3670: EMPTY
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PPUSH
3682: CALL_OW 70
3686: PUSH
3687: LD_INT 2
3689: EQUAL
3690: PUSH
3691: LD_EXP 2
3695: PPUSH
3696: CALL_OW 310
3700: AND
3701: PUSH
3702: LD_EXP 3
3706: PPUSH
3707: CALL_OW 310
3711: AND
3712: PUSH
3713: LD_EXP 2
3717: PPUSH
3718: CALL_OW 310
3722: PPUSH
3723: CALL_OW 264
3727: PUSH
3728: LD_INT 51
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: LD_EXP 40
3738: PUSH
3739: LD_INT 32
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: IN
3748: PUSH
3749: LD_EXP 3
3753: PPUSH
3754: CALL_OW 310
3758: PPUSH
3759: CALL_OW 264
3763: PUSH
3764: LD_INT 51
3766: PUSH
3767: LD_INT 12
3769: PUSH
3770: LD_EXP 40
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: IN
3784: OR
3785: AND
3786: IFFALSE 3996
3788: GO 3790
3790: DISABLE
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: LD_EXP 2
3805: PPUSH
3806: CALL_OW 310
3810: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_EXP 3
3820: PPUSH
3821: CALL_OW 310
3825: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3826: LD_VAR 0 2
3830: PPUSH
3831: CALL_OW 265
3835: PUSH
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 262
3845: PUSH
3846: LD_INT 1
3848: PUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: CALL_OW 264
3858: PUSH
3859: LD_VAR 0 2
3863: PPUSH
3864: CALL_OW 271
3868: PUSH
3869: LD_VAR 0 2
3873: PPUSH
3874: CALL_OW 248
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: PPUSH
3887: LD_STRING 14a_JMMVeh
3889: PPUSH
3890: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: CALL_OW 265
3903: PUSH
3904: LD_VAR 0 3
3908: PPUSH
3909: CALL_OW 262
3913: PUSH
3914: LD_INT 1
3916: PUSH
3917: LD_VAR 0 3
3921: PPUSH
3922: CALL_OW 264
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: CALL_OW 271
3936: PUSH
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 248
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PPUSH
3955: LD_STRING 14a_BurlakVeh
3957: PPUSH
3958: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3962: LD_EXP 2
3966: PPUSH
3967: LD_STRING 14a_JMM
3969: PPUSH
3970: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3974: LD_EXP 3
3978: PPUSH
3979: LD_STRING 14a_Burlak
3981: PPUSH
3982: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
3986: LD_INT 1
3988: PPUSH
3989: LD_STRING %_cont
3991: PPUSH
3992: CALL_OW 340
// end ;
3996: PPOPN 3
3998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
3999: LD_INT 22
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 24
4014: PUSH
4015: LD_INT 950
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: IFFALSE 4046
4036: GO 4038
4038: DISABLE
// YouLost ( FriendlyFire ) ;
4039: LD_STRING FriendlyFire
4041: PPUSH
4042: CALL_OW 104
4046: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4047: LD_EXP 3
4051: PPUSH
4052: CALL_OW 301
4056: IFFALSE 4068
4058: GO 4060
4060: DISABLE
// YouLost ( Burlak ) ;
4061: LD_STRING Burlak
4063: PPUSH
4064: CALL_OW 104
4068: END
// every 0 0$1 trigger IsDead ( JMM ) do
4069: LD_EXP 2
4073: PPUSH
4074: CALL_OW 301
4078: IFFALSE 4090
4080: GO 4082
4082: DISABLE
// YouLost ( JMM ) ; end_of_file
4083: LD_STRING JMM
4085: PPUSH
4086: CALL_OW 104
4090: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4091: LD_INT 0
4093: PPUSH
// ar_miner := 81 ;
4094: LD_ADDR_EXP 46
4098: PUSH
4099: LD_INT 81
4101: ST_TO_ADDR
// ar_crane := 88 ;
4102: LD_ADDR_EXP 45
4106: PUSH
4107: LD_INT 88
4109: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4110: LD_ADDR_EXP 40
4114: PUSH
4115: LD_INT 89
4117: ST_TO_ADDR
// us_hack := 99 ;
4118: LD_ADDR_EXP 41
4122: PUSH
4123: LD_INT 99
4125: ST_TO_ADDR
// us_artillery := 97 ;
4126: LD_ADDR_EXP 42
4130: PUSH
4131: LD_INT 97
4133: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4134: LD_ADDR_EXP 43
4138: PUSH
4139: LD_INT 91
4141: ST_TO_ADDR
// ar_mortar := 92 ;
4142: LD_ADDR_EXP 44
4146: PUSH
4147: LD_INT 92
4149: ST_TO_ADDR
// ru_radar := 98 ;
4150: LD_ADDR_EXP 39
4154: PUSH
4155: LD_INT 98
4157: ST_TO_ADDR
// tech_Artillery := 80 ;
4158: LD_ADDR_EXP 47
4162: PUSH
4163: LD_INT 80
4165: ST_TO_ADDR
// tech_RadMat := 81 ;
4166: LD_ADDR_EXP 48
4170: PUSH
4171: LD_INT 81
4173: ST_TO_ADDR
// tech_BasicTools := 82 ;
4174: LD_ADDR_EXP 49
4178: PUSH
4179: LD_INT 82
4181: ST_TO_ADDR
// tech_Cargo := 83 ;
4182: LD_ADDR_EXP 50
4186: PUSH
4187: LD_INT 83
4189: ST_TO_ADDR
// tech_Track := 84 ;
4190: LD_ADDR_EXP 51
4194: PUSH
4195: LD_INT 84
4197: ST_TO_ADDR
// tech_Crane := 85 ;
4198: LD_ADDR_EXP 52
4202: PUSH
4203: LD_INT 85
4205: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4206: LD_ADDR_EXP 53
4210: PUSH
4211: LD_INT 86
4213: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4214: LD_ADDR_EXP 54
4218: PUSH
4219: LD_INT 87
4221: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4222: LD_ADDR_EXP 55
4226: PUSH
4227: LD_INT 88
4229: ST_TO_ADDR
// class_mastodont := 31 ;
4230: LD_ADDR_EXP 56
4234: PUSH
4235: LD_INT 31
4237: ST_TO_ADDR
// class_horse := 21 ;
4238: LD_ADDR_EXP 57
4242: PUSH
4243: LD_INT 21
4245: ST_TO_ADDR
// end ;
4246: LD_VAR 0 1
4250: RET
// every 1 do
4251: GO 4253
4253: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4254: CALL 4091 0 0
4258: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4259: LD_INT 0
4261: PPUSH
// if p2 = 100 then
4262: LD_VAR 0 2
4266: PUSH
4267: LD_INT 100
4269: EQUAL
4270: IFFALSE 5219
// begin if not StreamModeActive then
4272: LD_EXP 58
4276: NOT
4277: IFFALSE 4287
// StreamModeActive := true ;
4279: LD_ADDR_EXP 58
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// if p3 = 0 then
4287: LD_VAR 0 3
4291: PUSH
4292: LD_INT 0
4294: EQUAL
4295: IFFALSE 4301
// InitStreamMode ;
4297: CALL 5379 0 0
// if p3 = 1 then
4301: LD_VAR 0 3
4305: PUSH
4306: LD_INT 1
4308: EQUAL
4309: IFFALSE 4319
// sRocket := true ;
4311: LD_ADDR_EXP 63
4315: PUSH
4316: LD_INT 1
4318: ST_TO_ADDR
// if p3 = 2 then
4319: LD_VAR 0 3
4323: PUSH
4324: LD_INT 2
4326: EQUAL
4327: IFFALSE 4337
// sSpeed := true ;
4329: LD_ADDR_EXP 62
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// if p3 = 3 then
4337: LD_VAR 0 3
4341: PUSH
4342: LD_INT 3
4344: EQUAL
4345: IFFALSE 4355
// sEngine := true ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_INT 1
4354: ST_TO_ADDR
// if p3 = 4 then
4355: LD_VAR 0 3
4359: PUSH
4360: LD_INT 4
4362: EQUAL
4363: IFFALSE 4373
// sSpec := true ;
4365: LD_ADDR_EXP 61
4369: PUSH
4370: LD_INT 1
4372: ST_TO_ADDR
// if p3 = 5 then
4373: LD_VAR 0 3
4377: PUSH
4378: LD_INT 5
4380: EQUAL
4381: IFFALSE 4391
// sLevel := true ;
4383: LD_ADDR_EXP 65
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// if p3 = 6 then
4391: LD_VAR 0 3
4395: PUSH
4396: LD_INT 6
4398: EQUAL
4399: IFFALSE 4409
// sArmoury := true ;
4401: LD_ADDR_EXP 66
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// if p3 = 7 then
4409: LD_VAR 0 3
4413: PUSH
4414: LD_INT 7
4416: EQUAL
4417: IFFALSE 4427
// sRadar := true ;
4419: LD_ADDR_EXP 67
4423: PUSH
4424: LD_INT 1
4426: ST_TO_ADDR
// if p3 = 8 then
4427: LD_VAR 0 3
4431: PUSH
4432: LD_INT 8
4434: EQUAL
4435: IFFALSE 4445
// sBunker := true ;
4437: LD_ADDR_EXP 68
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// if p3 = 9 then
4445: LD_VAR 0 3
4449: PUSH
4450: LD_INT 9
4452: EQUAL
4453: IFFALSE 4463
// sHack := true ;
4455: LD_ADDR_EXP 69
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// if p3 = 10 then
4463: LD_VAR 0 3
4467: PUSH
4468: LD_INT 10
4470: EQUAL
4471: IFFALSE 4481
// sFire := true ;
4473: LD_ADDR_EXP 70
4477: PUSH
4478: LD_INT 1
4480: ST_TO_ADDR
// if p3 = 11 then
4481: LD_VAR 0 3
4485: PUSH
4486: LD_INT 11
4488: EQUAL
4489: IFFALSE 4499
// sRefresh := true ;
4491: LD_ADDR_EXP 71
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// if p3 = 12 then
4499: LD_VAR 0 3
4503: PUSH
4504: LD_INT 12
4506: EQUAL
4507: IFFALSE 4517
// sExp := true ;
4509: LD_ADDR_EXP 72
4513: PUSH
4514: LD_INT 1
4516: ST_TO_ADDR
// if p3 = 13 then
4517: LD_VAR 0 3
4521: PUSH
4522: LD_INT 13
4524: EQUAL
4525: IFFALSE 4535
// sDepot := true ;
4527: LD_ADDR_EXP 73
4531: PUSH
4532: LD_INT 1
4534: ST_TO_ADDR
// if p3 = 14 then
4535: LD_VAR 0 3
4539: PUSH
4540: LD_INT 14
4542: EQUAL
4543: IFFALSE 4553
// sFlag := true ;
4545: LD_ADDR_EXP 74
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// if p3 = 15 then
4553: LD_VAR 0 3
4557: PUSH
4558: LD_INT 15
4560: EQUAL
4561: IFFALSE 4571
// sKamikadze := true ;
4563: LD_ADDR_EXP 82
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// if p3 = 16 then
4571: LD_VAR 0 3
4575: PUSH
4576: LD_INT 16
4578: EQUAL
4579: IFFALSE 4589
// sTroll := true ;
4581: LD_ADDR_EXP 83
4585: PUSH
4586: LD_INT 1
4588: ST_TO_ADDR
// if p3 = 17 then
4589: LD_VAR 0 3
4593: PUSH
4594: LD_INT 17
4596: EQUAL
4597: IFFALSE 4607
// sSlow := true ;
4599: LD_ADDR_EXP 84
4603: PUSH
4604: LD_INT 1
4606: ST_TO_ADDR
// if p3 = 18 then
4607: LD_VAR 0 3
4611: PUSH
4612: LD_INT 18
4614: EQUAL
4615: IFFALSE 4625
// sLack := true ;
4617: LD_ADDR_EXP 85
4621: PUSH
4622: LD_INT 1
4624: ST_TO_ADDR
// if p3 = 19 then
4625: LD_VAR 0 3
4629: PUSH
4630: LD_INT 19
4632: EQUAL
4633: IFFALSE 4643
// sTank := true ;
4635: LD_ADDR_EXP 87
4639: PUSH
4640: LD_INT 1
4642: ST_TO_ADDR
// if p3 = 20 then
4643: LD_VAR 0 3
4647: PUSH
4648: LD_INT 20
4650: EQUAL
4651: IFFALSE 4661
// sRemote := true ;
4653: LD_ADDR_EXP 88
4657: PUSH
4658: LD_INT 1
4660: ST_TO_ADDR
// if p3 = 21 then
4661: LD_VAR 0 3
4665: PUSH
4666: LD_INT 21
4668: EQUAL
4669: IFFALSE 4679
// sPowell := true ;
4671: LD_ADDR_EXP 89
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// if p3 = 22 then
4679: LD_VAR 0 3
4683: PUSH
4684: LD_INT 22
4686: EQUAL
4687: IFFALSE 4697
// sTeleport := true ;
4689: LD_ADDR_EXP 92
4693: PUSH
4694: LD_INT 1
4696: ST_TO_ADDR
// if p3 = 23 then
4697: LD_VAR 0 3
4701: PUSH
4702: LD_INT 23
4704: EQUAL
4705: IFFALSE 4715
// sOilTower := true ;
4707: LD_ADDR_EXP 94
4711: PUSH
4712: LD_INT 1
4714: ST_TO_ADDR
// if p3 = 24 then
4715: LD_VAR 0 3
4719: PUSH
4720: LD_INT 24
4722: EQUAL
4723: IFFALSE 4733
// sShovel := true ;
4725: LD_ADDR_EXP 95
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
// if p3 = 25 then
4733: LD_VAR 0 3
4737: PUSH
4738: LD_INT 25
4740: EQUAL
4741: IFFALSE 4751
// sSheik := true ;
4743: LD_ADDR_EXP 96
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// if p3 = 26 then
4751: LD_VAR 0 3
4755: PUSH
4756: LD_INT 26
4758: EQUAL
4759: IFFALSE 4769
// sEarthquake := true ;
4761: LD_ADDR_EXP 98
4765: PUSH
4766: LD_INT 1
4768: ST_TO_ADDR
// if p3 = 27 then
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 27
4776: EQUAL
4777: IFFALSE 4787
// sAI := true ;
4779: LD_ADDR_EXP 99
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// if p3 = 28 then
4787: LD_VAR 0 3
4791: PUSH
4792: LD_INT 28
4794: EQUAL
4795: IFFALSE 4805
// sCargo := true ;
4797: LD_ADDR_EXP 102
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// if p3 = 29 then
4805: LD_VAR 0 3
4809: PUSH
4810: LD_INT 29
4812: EQUAL
4813: IFFALSE 4823
// sDLaser := true ;
4815: LD_ADDR_EXP 103
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// if p3 = 30 then
4823: LD_VAR 0 3
4827: PUSH
4828: LD_INT 30
4830: EQUAL
4831: IFFALSE 4841
// sExchange := true ;
4833: LD_ADDR_EXP 104
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// if p3 = 31 then
4841: LD_VAR 0 3
4845: PUSH
4846: LD_INT 31
4848: EQUAL
4849: IFFALSE 4859
// sFac := true ;
4851: LD_ADDR_EXP 105
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// if p3 = 32 then
4859: LD_VAR 0 3
4863: PUSH
4864: LD_INT 32
4866: EQUAL
4867: IFFALSE 4877
// sPower := true ;
4869: LD_ADDR_EXP 106
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// if p3 = 33 then
4877: LD_VAR 0 3
4881: PUSH
4882: LD_INT 33
4884: EQUAL
4885: IFFALSE 4895
// sRandom := true ;
4887: LD_ADDR_EXP 107
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// if p3 = 34 then
4895: LD_VAR 0 3
4899: PUSH
4900: LD_INT 34
4902: EQUAL
4903: IFFALSE 4913
// sShield := true ;
4905: LD_ADDR_EXP 108
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// if p3 = 35 then
4913: LD_VAR 0 3
4917: PUSH
4918: LD_INT 35
4920: EQUAL
4921: IFFALSE 4931
// sTime := true ;
4923: LD_ADDR_EXP 109
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// if p3 = 36 then
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 36
4938: EQUAL
4939: IFFALSE 4949
// sTools := true ;
4941: LD_ADDR_EXP 110
4945: PUSH
4946: LD_INT 1
4948: ST_TO_ADDR
// if p3 = 101 then
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 101
4956: EQUAL
4957: IFFALSE 4967
// sSold := true ;
4959: LD_ADDR_EXP 75
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// if p3 = 102 then
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 102
4974: EQUAL
4975: IFFALSE 4985
// sDiff := true ;
4977: LD_ADDR_EXP 76
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// if p3 = 103 then
4985: LD_VAR 0 3
4989: PUSH
4990: LD_INT 103
4992: EQUAL
4993: IFFALSE 5003
// sFog := true ;
4995: LD_ADDR_EXP 79
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// if p3 = 104 then
5003: LD_VAR 0 3
5007: PUSH
5008: LD_INT 104
5010: EQUAL
5011: IFFALSE 5021
// sReset := true ;
5013: LD_ADDR_EXP 80
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// if p3 = 105 then
5021: LD_VAR 0 3
5025: PUSH
5026: LD_INT 105
5028: EQUAL
5029: IFFALSE 5039
// sSun := true ;
5031: LD_ADDR_EXP 81
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// if p3 = 106 then
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 106
5046: EQUAL
5047: IFFALSE 5057
// sTiger := true ;
5049: LD_ADDR_EXP 77
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// if p3 = 107 then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 107
5064: EQUAL
5065: IFFALSE 5075
// sBomb := true ;
5067: LD_ADDR_EXP 78
5071: PUSH
5072: LD_INT 1
5074: ST_TO_ADDR
// if p3 = 108 then
5075: LD_VAR 0 3
5079: PUSH
5080: LD_INT 108
5082: EQUAL
5083: IFFALSE 5093
// sWound := true ;
5085: LD_ADDR_EXP 86
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// if p3 = 109 then
5093: LD_VAR 0 3
5097: PUSH
5098: LD_INT 109
5100: EQUAL
5101: IFFALSE 5111
// sBetray := true ;
5103: LD_ADDR_EXP 90
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// if p3 = 110 then
5111: LD_VAR 0 3
5115: PUSH
5116: LD_INT 110
5118: EQUAL
5119: IFFALSE 5129
// sContamin := true ;
5121: LD_ADDR_EXP 91
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// if p3 = 111 then
5129: LD_VAR 0 3
5133: PUSH
5134: LD_INT 111
5136: EQUAL
5137: IFFALSE 5147
// sOil := true ;
5139: LD_ADDR_EXP 93
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// if p3 = 112 then
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 112
5154: EQUAL
5155: IFFALSE 5165
// sStu := true ;
5157: LD_ADDR_EXP 97
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// if p3 = 113 then
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 113
5172: EQUAL
5173: IFFALSE 5183
// sBazooka := true ;
5175: LD_ADDR_EXP 100
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// if p3 = 114 then
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 114
5190: EQUAL
5191: IFFALSE 5201
// sMortar := true ;
5193: LD_ADDR_EXP 101
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// if p3 = 115 then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 115
5208: EQUAL
5209: IFFALSE 5219
// sRanger := true ;
5211: LD_ADDR_EXP 111
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// end ; if p2 = 101 then
5219: LD_VAR 0 2
5223: PUSH
5224: LD_INT 101
5226: EQUAL
5227: IFFALSE 5355
// begin case p3 of 1 :
5229: LD_VAR 0 3
5233: PUSH
5234: LD_INT 1
5236: DOUBLE
5237: EQUAL
5238: IFTRUE 5242
5240: GO 5249
5242: POP
// hHackUnlimitedResources ; 2 :
5243: CALL 16392 0 0
5247: GO 5355
5249: LD_INT 2
5251: DOUBLE
5252: EQUAL
5253: IFTRUE 5257
5255: GO 5264
5257: POP
// hHackSetLevel10 ; 3 :
5258: CALL 16525 0 0
5262: GO 5355
5264: LD_INT 3
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5279
5272: POP
// hHackSetLevel10YourUnits ; 4 :
5273: CALL 16610 0 0
5277: GO 5355
5279: LD_INT 4
5281: DOUBLE
5282: EQUAL
5283: IFTRUE 5287
5285: GO 5294
5287: POP
// hHackInvincible ; 5 :
5288: CALL 17058 0 0
5292: GO 5355
5294: LD_INT 5
5296: DOUBLE
5297: EQUAL
5298: IFTRUE 5302
5300: GO 5309
5302: POP
// hHackInvisible ; 6 :
5303: CALL 17169 0 0
5307: GO 5355
5309: LD_INT 6
5311: DOUBLE
5312: EQUAL
5313: IFTRUE 5317
5315: GO 5324
5317: POP
// hHackChangeYourSide ; 7 :
5318: CALL 17226 0 0
5322: GO 5355
5324: LD_INT 7
5326: DOUBLE
5327: EQUAL
5328: IFTRUE 5332
5330: GO 5339
5332: POP
// hHackChangeUnitSide ; 8 :
5333: CALL 17268 0 0
5337: GO 5355
5339: LD_INT 8
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5354
5347: POP
// hHackFog ; end ;
5348: CALL 17369 0 0
5352: GO 5355
5354: POP
// end ; end ;
5355: LD_VAR 0 7
5359: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5360: GO 5362
5362: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5363: LD_STRING initStreamRollete();
5365: PPUSH
5366: CALL_OW 559
// InitStreamMode ;
5370: CALL 5379 0 0
// DefineStreamItems ( ) ;
5374: CALL 5819 0 0
// end ;
5378: END
// function InitStreamMode ; begin
5379: LD_INT 0
5381: PPUSH
// streamModeActive := false ;
5382: LD_ADDR_EXP 58
5386: PUSH
5387: LD_INT 0
5389: ST_TO_ADDR
// normalCounter := 36 ;
5390: LD_ADDR_EXP 59
5394: PUSH
5395: LD_INT 36
5397: ST_TO_ADDR
// hardcoreCounter := 16 ;
5398: LD_ADDR_EXP 60
5402: PUSH
5403: LD_INT 16
5405: ST_TO_ADDR
// sRocket := false ;
5406: LD_ADDR_EXP 63
5410: PUSH
5411: LD_INT 0
5413: ST_TO_ADDR
// sSpeed := false ;
5414: LD_ADDR_EXP 62
5418: PUSH
5419: LD_INT 0
5421: ST_TO_ADDR
// sEngine := false ;
5422: LD_ADDR_EXP 64
5426: PUSH
5427: LD_INT 0
5429: ST_TO_ADDR
// sSpec := false ;
5430: LD_ADDR_EXP 61
5434: PUSH
5435: LD_INT 0
5437: ST_TO_ADDR
// sLevel := false ;
5438: LD_ADDR_EXP 65
5442: PUSH
5443: LD_INT 0
5445: ST_TO_ADDR
// sArmoury := false ;
5446: LD_ADDR_EXP 66
5450: PUSH
5451: LD_INT 0
5453: ST_TO_ADDR
// sRadar := false ;
5454: LD_ADDR_EXP 67
5458: PUSH
5459: LD_INT 0
5461: ST_TO_ADDR
// sBunker := false ;
5462: LD_ADDR_EXP 68
5466: PUSH
5467: LD_INT 0
5469: ST_TO_ADDR
// sHack := false ;
5470: LD_ADDR_EXP 69
5474: PUSH
5475: LD_INT 0
5477: ST_TO_ADDR
// sFire := false ;
5478: LD_ADDR_EXP 70
5482: PUSH
5483: LD_INT 0
5485: ST_TO_ADDR
// sRefresh := false ;
5486: LD_ADDR_EXP 71
5490: PUSH
5491: LD_INT 0
5493: ST_TO_ADDR
// sExp := false ;
5494: LD_ADDR_EXP 72
5498: PUSH
5499: LD_INT 0
5501: ST_TO_ADDR
// sDepot := false ;
5502: LD_ADDR_EXP 73
5506: PUSH
5507: LD_INT 0
5509: ST_TO_ADDR
// sFlag := false ;
5510: LD_ADDR_EXP 74
5514: PUSH
5515: LD_INT 0
5517: ST_TO_ADDR
// sKamikadze := false ;
5518: LD_ADDR_EXP 82
5522: PUSH
5523: LD_INT 0
5525: ST_TO_ADDR
// sTroll := false ;
5526: LD_ADDR_EXP 83
5530: PUSH
5531: LD_INT 0
5533: ST_TO_ADDR
// sSlow := false ;
5534: LD_ADDR_EXP 84
5538: PUSH
5539: LD_INT 0
5541: ST_TO_ADDR
// sLack := false ;
5542: LD_ADDR_EXP 85
5546: PUSH
5547: LD_INT 0
5549: ST_TO_ADDR
// sTank := false ;
5550: LD_ADDR_EXP 87
5554: PUSH
5555: LD_INT 0
5557: ST_TO_ADDR
// sRemote := false ;
5558: LD_ADDR_EXP 88
5562: PUSH
5563: LD_INT 0
5565: ST_TO_ADDR
// sPowell := false ;
5566: LD_ADDR_EXP 89
5570: PUSH
5571: LD_INT 0
5573: ST_TO_ADDR
// sTeleport := false ;
5574: LD_ADDR_EXP 92
5578: PUSH
5579: LD_INT 0
5581: ST_TO_ADDR
// sOilTower := false ;
5582: LD_ADDR_EXP 94
5586: PUSH
5587: LD_INT 0
5589: ST_TO_ADDR
// sShovel := false ;
5590: LD_ADDR_EXP 95
5594: PUSH
5595: LD_INT 0
5597: ST_TO_ADDR
// sSheik := false ;
5598: LD_ADDR_EXP 96
5602: PUSH
5603: LD_INT 0
5605: ST_TO_ADDR
// sEarthquake := false ;
5606: LD_ADDR_EXP 98
5610: PUSH
5611: LD_INT 0
5613: ST_TO_ADDR
// sAI := false ;
5614: LD_ADDR_EXP 99
5618: PUSH
5619: LD_INT 0
5621: ST_TO_ADDR
// sCargo := false ;
5622: LD_ADDR_EXP 102
5626: PUSH
5627: LD_INT 0
5629: ST_TO_ADDR
// sDLaser := false ;
5630: LD_ADDR_EXP 103
5634: PUSH
5635: LD_INT 0
5637: ST_TO_ADDR
// sExchange := false ;
5638: LD_ADDR_EXP 104
5642: PUSH
5643: LD_INT 0
5645: ST_TO_ADDR
// sFac := false ;
5646: LD_ADDR_EXP 105
5650: PUSH
5651: LD_INT 0
5653: ST_TO_ADDR
// sPower := false ;
5654: LD_ADDR_EXP 106
5658: PUSH
5659: LD_INT 0
5661: ST_TO_ADDR
// sRandom := false ;
5662: LD_ADDR_EXP 107
5666: PUSH
5667: LD_INT 0
5669: ST_TO_ADDR
// sShield := false ;
5670: LD_ADDR_EXP 108
5674: PUSH
5675: LD_INT 0
5677: ST_TO_ADDR
// sTime := false ;
5678: LD_ADDR_EXP 109
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// sTools := false ;
5686: LD_ADDR_EXP 110
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
// sSold := false ;
5694: LD_ADDR_EXP 75
5698: PUSH
5699: LD_INT 0
5701: ST_TO_ADDR
// sDiff := false ;
5702: LD_ADDR_EXP 76
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// sFog := false ;
5710: LD_ADDR_EXP 79
5714: PUSH
5715: LD_INT 0
5717: ST_TO_ADDR
// sReset := false ;
5718: LD_ADDR_EXP 80
5722: PUSH
5723: LD_INT 0
5725: ST_TO_ADDR
// sSun := false ;
5726: LD_ADDR_EXP 81
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// sTiger := false ;
5734: LD_ADDR_EXP 77
5738: PUSH
5739: LD_INT 0
5741: ST_TO_ADDR
// sBomb := false ;
5742: LD_ADDR_EXP 78
5746: PUSH
5747: LD_INT 0
5749: ST_TO_ADDR
// sWound := false ;
5750: LD_ADDR_EXP 86
5754: PUSH
5755: LD_INT 0
5757: ST_TO_ADDR
// sBetray := false ;
5758: LD_ADDR_EXP 90
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
// sContamin := false ;
5766: LD_ADDR_EXP 91
5770: PUSH
5771: LD_INT 0
5773: ST_TO_ADDR
// sOil := false ;
5774: LD_ADDR_EXP 93
5778: PUSH
5779: LD_INT 0
5781: ST_TO_ADDR
// sStu := false ;
5782: LD_ADDR_EXP 97
5786: PUSH
5787: LD_INT 0
5789: ST_TO_ADDR
// sBazooka := false ;
5790: LD_ADDR_EXP 100
5794: PUSH
5795: LD_INT 0
5797: ST_TO_ADDR
// sMortar := false ;
5798: LD_ADDR_EXP 101
5802: PUSH
5803: LD_INT 0
5805: ST_TO_ADDR
// sRanger := false ;
5806: LD_ADDR_EXP 111
5810: PUSH
5811: LD_INT 0
5813: ST_TO_ADDR
// end ;
5814: LD_VAR 0 1
5818: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5819: LD_INT 0
5821: PPUSH
5822: PPUSH
5823: PPUSH
5824: PPUSH
5825: PPUSH
// result := [ ] ;
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: EMPTY
5832: ST_TO_ADDR
// if campaign_id = 1 then
5833: LD_OWVAR 69
5837: PUSH
5838: LD_INT 1
5840: EQUAL
5841: IFFALSE 8779
// begin case mission_number of 1 :
5843: LD_OWVAR 70
5847: PUSH
5848: LD_INT 1
5850: DOUBLE
5851: EQUAL
5852: IFTRUE 5856
5854: GO 5920
5856: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5857: LD_ADDR_VAR 0 1
5861: PUSH
5862: LD_INT 2
5864: PUSH
5865: LD_INT 4
5867: PUSH
5868: LD_INT 11
5870: PUSH
5871: LD_INT 12
5873: PUSH
5874: LD_INT 15
5876: PUSH
5877: LD_INT 16
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 23
5885: PUSH
5886: LD_INT 26
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 101
5902: PUSH
5903: LD_INT 102
5905: PUSH
5906: LD_INT 106
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: ST_TO_ADDR
5918: GO 8777
5920: LD_INT 2
5922: DOUBLE
5923: EQUAL
5924: IFTRUE 5928
5926: GO 6000
5928: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5929: LD_ADDR_VAR 0 1
5933: PUSH
5934: LD_INT 2
5936: PUSH
5937: LD_INT 4
5939: PUSH
5940: LD_INT 11
5942: PUSH
5943: LD_INT 12
5945: PUSH
5946: LD_INT 15
5948: PUSH
5949: LD_INT 16
5951: PUSH
5952: LD_INT 22
5954: PUSH
5955: LD_INT 23
5957: PUSH
5958: LD_INT 26
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: PUSH
5972: LD_INT 101
5974: PUSH
5975: LD_INT 102
5977: PUSH
5978: LD_INT 105
5980: PUSH
5981: LD_INT 106
5983: PUSH
5984: LD_INT 108
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: ST_TO_ADDR
5998: GO 8777
6000: LD_INT 3
6002: DOUBLE
6003: EQUAL
6004: IFTRUE 6008
6006: GO 6084
6008: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6009: LD_ADDR_VAR 0 1
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: LD_INT 4
6019: PUSH
6020: LD_INT 5
6022: PUSH
6023: LD_INT 11
6025: PUSH
6026: LD_INT 12
6028: PUSH
6029: LD_INT 15
6031: PUSH
6032: LD_INT 16
6034: PUSH
6035: LD_INT 22
6037: PUSH
6038: LD_INT 26
6040: PUSH
6041: LD_INT 36
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 101
6058: PUSH
6059: LD_INT 102
6061: PUSH
6062: LD_INT 105
6064: PUSH
6065: LD_INT 106
6067: PUSH
6068: LD_INT 108
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: ST_TO_ADDR
6082: GO 8777
6084: LD_INT 4
6086: DOUBLE
6087: EQUAL
6088: IFTRUE 6092
6090: GO 6176
6092: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6093: LD_ADDR_VAR 0 1
6097: PUSH
6098: LD_INT 2
6100: PUSH
6101: LD_INT 4
6103: PUSH
6104: LD_INT 5
6106: PUSH
6107: LD_INT 8
6109: PUSH
6110: LD_INT 11
6112: PUSH
6113: LD_INT 12
6115: PUSH
6116: LD_INT 15
6118: PUSH
6119: LD_INT 16
6121: PUSH
6122: LD_INT 22
6124: PUSH
6125: LD_INT 23
6127: PUSH
6128: LD_INT 26
6130: PUSH
6131: LD_INT 36
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 101
6150: PUSH
6151: LD_INT 102
6153: PUSH
6154: LD_INT 105
6156: PUSH
6157: LD_INT 106
6159: PUSH
6160: LD_INT 108
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: ST_TO_ADDR
6174: GO 8777
6176: LD_INT 5
6178: DOUBLE
6179: EQUAL
6180: IFTRUE 6184
6182: GO 6284
6184: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6185: LD_ADDR_VAR 0 1
6189: PUSH
6190: LD_INT 2
6192: PUSH
6193: LD_INT 4
6195: PUSH
6196: LD_INT 5
6198: PUSH
6199: LD_INT 6
6201: PUSH
6202: LD_INT 8
6204: PUSH
6205: LD_INT 11
6207: PUSH
6208: LD_INT 12
6210: PUSH
6211: LD_INT 15
6213: PUSH
6214: LD_INT 16
6216: PUSH
6217: LD_INT 22
6219: PUSH
6220: LD_INT 23
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 26
6228: PUSH
6229: LD_INT 36
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 101
6250: PUSH
6251: LD_INT 102
6253: PUSH
6254: LD_INT 105
6256: PUSH
6257: LD_INT 106
6259: PUSH
6260: LD_INT 108
6262: PUSH
6263: LD_INT 109
6265: PUSH
6266: LD_INT 112
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: ST_TO_ADDR
6282: GO 8777
6284: LD_INT 6
6286: DOUBLE
6287: EQUAL
6288: IFTRUE 6292
6290: GO 6412
6292: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6293: LD_ADDR_VAR 0 1
6297: PUSH
6298: LD_INT 2
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: LD_INT 5
6306: PUSH
6307: LD_INT 6
6309: PUSH
6310: LD_INT 8
6312: PUSH
6313: LD_INT 11
6315: PUSH
6316: LD_INT 12
6318: PUSH
6319: LD_INT 15
6321: PUSH
6322: LD_INT 16
6324: PUSH
6325: LD_INT 20
6327: PUSH
6328: LD_INT 21
6330: PUSH
6331: LD_INT 22
6333: PUSH
6334: LD_INT 23
6336: PUSH
6337: LD_INT 25
6339: PUSH
6340: LD_INT 26
6342: PUSH
6343: LD_INT 30
6345: PUSH
6346: LD_INT 31
6348: PUSH
6349: LD_INT 32
6351: PUSH
6352: LD_INT 36
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 101
6378: PUSH
6379: LD_INT 102
6381: PUSH
6382: LD_INT 105
6384: PUSH
6385: LD_INT 106
6387: PUSH
6388: LD_INT 108
6390: PUSH
6391: LD_INT 109
6393: PUSH
6394: LD_INT 112
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
6410: GO 8777
6412: LD_INT 7
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6520
6420: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6421: LD_ADDR_VAR 0 1
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: LD_INT 4
6431: PUSH
6432: LD_INT 5
6434: PUSH
6435: LD_INT 7
6437: PUSH
6438: LD_INT 11
6440: PUSH
6441: LD_INT 12
6443: PUSH
6444: LD_INT 15
6446: PUSH
6447: LD_INT 16
6449: PUSH
6450: LD_INT 20
6452: PUSH
6453: LD_INT 21
6455: PUSH
6456: LD_INT 22
6458: PUSH
6459: LD_INT 23
6461: PUSH
6462: LD_INT 25
6464: PUSH
6465: LD_INT 26
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 101
6486: PUSH
6487: LD_INT 102
6489: PUSH
6490: LD_INT 103
6492: PUSH
6493: LD_INT 105
6495: PUSH
6496: LD_INT 106
6498: PUSH
6499: LD_INT 108
6501: PUSH
6502: LD_INT 112
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: ST_TO_ADDR
6518: GO 8777
6520: LD_INT 8
6522: DOUBLE
6523: EQUAL
6524: IFTRUE 6528
6526: GO 6656
6528: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6529: LD_ADDR_VAR 0 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 4
6539: PUSH
6540: LD_INT 5
6542: PUSH
6543: LD_INT 6
6545: PUSH
6546: LD_INT 7
6548: PUSH
6549: LD_INT 8
6551: PUSH
6552: LD_INT 11
6554: PUSH
6555: LD_INT 12
6557: PUSH
6558: LD_INT 15
6560: PUSH
6561: LD_INT 16
6563: PUSH
6564: LD_INT 20
6566: PUSH
6567: LD_INT 21
6569: PUSH
6570: LD_INT 22
6572: PUSH
6573: LD_INT 23
6575: PUSH
6576: LD_INT 25
6578: PUSH
6579: LD_INT 26
6581: PUSH
6582: LD_INT 30
6584: PUSH
6585: LD_INT 31
6587: PUSH
6588: LD_INT 32
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 101
6618: PUSH
6619: LD_INT 102
6621: PUSH
6622: LD_INT 103
6624: PUSH
6625: LD_INT 105
6627: PUSH
6628: LD_INT 106
6630: PUSH
6631: LD_INT 108
6633: PUSH
6634: LD_INT 109
6636: PUSH
6637: LD_INT 112
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: ST_TO_ADDR
6654: GO 8777
6656: LD_INT 9
6658: DOUBLE
6659: EQUAL
6660: IFTRUE 6664
6662: GO 6800
6664: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6665: LD_ADDR_VAR 0 1
6669: PUSH
6670: LD_INT 2
6672: PUSH
6673: LD_INT 4
6675: PUSH
6676: LD_INT 5
6678: PUSH
6679: LD_INT 6
6681: PUSH
6682: LD_INT 7
6684: PUSH
6685: LD_INT 8
6687: PUSH
6688: LD_INT 11
6690: PUSH
6691: LD_INT 12
6693: PUSH
6694: LD_INT 15
6696: PUSH
6697: LD_INT 16
6699: PUSH
6700: LD_INT 20
6702: PUSH
6703: LD_INT 21
6705: PUSH
6706: LD_INT 22
6708: PUSH
6709: LD_INT 23
6711: PUSH
6712: LD_INT 25
6714: PUSH
6715: LD_INT 26
6717: PUSH
6718: LD_INT 28
6720: PUSH
6721: LD_INT 30
6723: PUSH
6724: LD_INT 31
6726: PUSH
6727: LD_INT 32
6729: PUSH
6730: LD_INT 36
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 101
6758: PUSH
6759: LD_INT 102
6761: PUSH
6762: LD_INT 103
6764: PUSH
6765: LD_INT 105
6767: PUSH
6768: LD_INT 106
6770: PUSH
6771: LD_INT 108
6773: PUSH
6774: LD_INT 109
6776: PUSH
6777: LD_INT 112
6779: PUSH
6780: LD_INT 114
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: ST_TO_ADDR
6798: GO 8777
6800: LD_INT 10
6802: DOUBLE
6803: EQUAL
6804: IFTRUE 6808
6806: GO 6992
6808: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_INT 2
6816: PUSH
6817: LD_INT 4
6819: PUSH
6820: LD_INT 5
6822: PUSH
6823: LD_INT 6
6825: PUSH
6826: LD_INT 7
6828: PUSH
6829: LD_INT 8
6831: PUSH
6832: LD_INT 9
6834: PUSH
6835: LD_INT 10
6837: PUSH
6838: LD_INT 11
6840: PUSH
6841: LD_INT 12
6843: PUSH
6844: LD_INT 13
6846: PUSH
6847: LD_INT 14
6849: PUSH
6850: LD_INT 15
6852: PUSH
6853: LD_INT 16
6855: PUSH
6856: LD_INT 17
6858: PUSH
6859: LD_INT 18
6861: PUSH
6862: LD_INT 19
6864: PUSH
6865: LD_INT 20
6867: PUSH
6868: LD_INT 21
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 23
6876: PUSH
6877: LD_INT 24
6879: PUSH
6880: LD_INT 25
6882: PUSH
6883: LD_INT 26
6885: PUSH
6886: LD_INT 28
6888: PUSH
6889: LD_INT 30
6891: PUSH
6892: LD_INT 31
6894: PUSH
6895: LD_INT 32
6897: PUSH
6898: LD_INT 36
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 101
6934: PUSH
6935: LD_INT 102
6937: PUSH
6938: LD_INT 103
6940: PUSH
6941: LD_INT 104
6943: PUSH
6944: LD_INT 105
6946: PUSH
6947: LD_INT 106
6949: PUSH
6950: LD_INT 107
6952: PUSH
6953: LD_INT 108
6955: PUSH
6956: LD_INT 109
6958: PUSH
6959: LD_INT 110
6961: PUSH
6962: LD_INT 111
6964: PUSH
6965: LD_INT 112
6967: PUSH
6968: LD_INT 114
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: ST_TO_ADDR
6990: GO 8777
6992: LD_INT 11
6994: DOUBLE
6995: EQUAL
6996: IFTRUE 7000
6998: GO 7192
7000: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7001: LD_ADDR_VAR 0 1
7005: PUSH
7006: LD_INT 2
7008: PUSH
7009: LD_INT 3
7011: PUSH
7012: LD_INT 4
7014: PUSH
7015: LD_INT 5
7017: PUSH
7018: LD_INT 6
7020: PUSH
7021: LD_INT 7
7023: PUSH
7024: LD_INT 8
7026: PUSH
7027: LD_INT 9
7029: PUSH
7030: LD_INT 10
7032: PUSH
7033: LD_INT 11
7035: PUSH
7036: LD_INT 12
7038: PUSH
7039: LD_INT 13
7041: PUSH
7042: LD_INT 14
7044: PUSH
7045: LD_INT 15
7047: PUSH
7048: LD_INT 16
7050: PUSH
7051: LD_INT 17
7053: PUSH
7054: LD_INT 18
7056: PUSH
7057: LD_INT 19
7059: PUSH
7060: LD_INT 20
7062: PUSH
7063: LD_INT 21
7065: PUSH
7066: LD_INT 22
7068: PUSH
7069: LD_INT 23
7071: PUSH
7072: LD_INT 24
7074: PUSH
7075: LD_INT 25
7077: PUSH
7078: LD_INT 26
7080: PUSH
7081: LD_INT 28
7083: PUSH
7084: LD_INT 30
7086: PUSH
7087: LD_INT 31
7089: PUSH
7090: LD_INT 32
7092: PUSH
7093: LD_INT 34
7095: PUSH
7096: LD_INT 36
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 101
7134: PUSH
7135: LD_INT 102
7137: PUSH
7138: LD_INT 103
7140: PUSH
7141: LD_INT 104
7143: PUSH
7144: LD_INT 105
7146: PUSH
7147: LD_INT 106
7149: PUSH
7150: LD_INT 107
7152: PUSH
7153: LD_INT 108
7155: PUSH
7156: LD_INT 109
7158: PUSH
7159: LD_INT 110
7161: PUSH
7162: LD_INT 111
7164: PUSH
7165: LD_INT 112
7167: PUSH
7168: LD_INT 114
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: ST_TO_ADDR
7190: GO 8777
7192: LD_INT 12
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7408
7200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7201: LD_ADDR_VAR 0 1
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: LD_INT 6
7223: PUSH
7224: LD_INT 7
7226: PUSH
7227: LD_INT 8
7229: PUSH
7230: LD_INT 9
7232: PUSH
7233: LD_INT 10
7235: PUSH
7236: LD_INT 11
7238: PUSH
7239: LD_INT 12
7241: PUSH
7242: LD_INT 13
7244: PUSH
7245: LD_INT 14
7247: PUSH
7248: LD_INT 15
7250: PUSH
7251: LD_INT 16
7253: PUSH
7254: LD_INT 17
7256: PUSH
7257: LD_INT 18
7259: PUSH
7260: LD_INT 19
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 22
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 24
7277: PUSH
7278: LD_INT 25
7280: PUSH
7281: LD_INT 26
7283: PUSH
7284: LD_INT 27
7286: PUSH
7287: LD_INT 28
7289: PUSH
7290: LD_INT 30
7292: PUSH
7293: LD_INT 31
7295: PUSH
7296: LD_INT 32
7298: PUSH
7299: LD_INT 33
7301: PUSH
7302: LD_INT 34
7304: PUSH
7305: LD_INT 36
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 101
7346: PUSH
7347: LD_INT 102
7349: PUSH
7350: LD_INT 103
7352: PUSH
7353: LD_INT 104
7355: PUSH
7356: LD_INT 105
7358: PUSH
7359: LD_INT 106
7361: PUSH
7362: LD_INT 107
7364: PUSH
7365: LD_INT 108
7367: PUSH
7368: LD_INT 109
7370: PUSH
7371: LD_INT 110
7373: PUSH
7374: LD_INT 111
7376: PUSH
7377: LD_INT 112
7379: PUSH
7380: LD_INT 113
7382: PUSH
7383: LD_INT 114
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: ST_TO_ADDR
7406: GO 8777
7408: LD_INT 13
7410: DOUBLE
7411: EQUAL
7412: IFTRUE 7416
7414: GO 7612
7416: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: LD_INT 1
7424: PUSH
7425: LD_INT 2
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: LD_INT 5
7436: PUSH
7437: LD_INT 8
7439: PUSH
7440: LD_INT 9
7442: PUSH
7443: LD_INT 10
7445: PUSH
7446: LD_INT 11
7448: PUSH
7449: LD_INT 12
7451: PUSH
7452: LD_INT 14
7454: PUSH
7455: LD_INT 15
7457: PUSH
7458: LD_INT 16
7460: PUSH
7461: LD_INT 17
7463: PUSH
7464: LD_INT 18
7466: PUSH
7467: LD_INT 19
7469: PUSH
7470: LD_INT 20
7472: PUSH
7473: LD_INT 21
7475: PUSH
7476: LD_INT 22
7478: PUSH
7479: LD_INT 23
7481: PUSH
7482: LD_INT 24
7484: PUSH
7485: LD_INT 25
7487: PUSH
7488: LD_INT 26
7490: PUSH
7491: LD_INT 27
7493: PUSH
7494: LD_INT 28
7496: PUSH
7497: LD_INT 30
7499: PUSH
7500: LD_INT 31
7502: PUSH
7503: LD_INT 32
7505: PUSH
7506: LD_INT 33
7508: PUSH
7509: LD_INT 34
7511: PUSH
7512: LD_INT 36
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 101
7550: PUSH
7551: LD_INT 102
7553: PUSH
7554: LD_INT 103
7556: PUSH
7557: LD_INT 104
7559: PUSH
7560: LD_INT 105
7562: PUSH
7563: LD_INT 106
7565: PUSH
7566: LD_INT 107
7568: PUSH
7569: LD_INT 108
7571: PUSH
7572: LD_INT 109
7574: PUSH
7575: LD_INT 110
7577: PUSH
7578: LD_INT 111
7580: PUSH
7581: LD_INT 112
7583: PUSH
7584: LD_INT 113
7586: PUSH
7587: LD_INT 114
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: ST_TO_ADDR
7610: GO 8777
7612: LD_INT 14
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7832
7620: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7621: LD_ADDR_VAR 0 1
7625: PUSH
7626: LD_INT 1
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 4
7637: PUSH
7638: LD_INT 5
7640: PUSH
7641: LD_INT 6
7643: PUSH
7644: LD_INT 7
7646: PUSH
7647: LD_INT 8
7649: PUSH
7650: LD_INT 9
7652: PUSH
7653: LD_INT 10
7655: PUSH
7656: LD_INT 11
7658: PUSH
7659: LD_INT 12
7661: PUSH
7662: LD_INT 13
7664: PUSH
7665: LD_INT 14
7667: PUSH
7668: LD_INT 15
7670: PUSH
7671: LD_INT 16
7673: PUSH
7674: LD_INT 17
7676: PUSH
7677: LD_INT 18
7679: PUSH
7680: LD_INT 19
7682: PUSH
7683: LD_INT 20
7685: PUSH
7686: LD_INT 21
7688: PUSH
7689: LD_INT 22
7691: PUSH
7692: LD_INT 23
7694: PUSH
7695: LD_INT 24
7697: PUSH
7698: LD_INT 25
7700: PUSH
7701: LD_INT 26
7703: PUSH
7704: LD_INT 27
7706: PUSH
7707: LD_INT 28
7709: PUSH
7710: LD_INT 29
7712: PUSH
7713: LD_INT 30
7715: PUSH
7716: LD_INT 31
7718: PUSH
7719: LD_INT 32
7721: PUSH
7722: LD_INT 33
7724: PUSH
7725: LD_INT 34
7727: PUSH
7728: LD_INT 36
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 101
7770: PUSH
7771: LD_INT 102
7773: PUSH
7774: LD_INT 103
7776: PUSH
7777: LD_INT 104
7779: PUSH
7780: LD_INT 105
7782: PUSH
7783: LD_INT 106
7785: PUSH
7786: LD_INT 107
7788: PUSH
7789: LD_INT 108
7791: PUSH
7792: LD_INT 109
7794: PUSH
7795: LD_INT 110
7797: PUSH
7798: LD_INT 111
7800: PUSH
7801: LD_INT 112
7803: PUSH
7804: LD_INT 113
7806: PUSH
7807: LD_INT 114
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: ST_TO_ADDR
7830: GO 8777
7832: LD_INT 15
7834: DOUBLE
7835: EQUAL
7836: IFTRUE 7840
7838: GO 8052
7840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7841: LD_ADDR_VAR 0 1
7845: PUSH
7846: LD_INT 1
7848: PUSH
7849: LD_INT 2
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: LD_INT 4
7857: PUSH
7858: LD_INT 5
7860: PUSH
7861: LD_INT 6
7863: PUSH
7864: LD_INT 7
7866: PUSH
7867: LD_INT 8
7869: PUSH
7870: LD_INT 9
7872: PUSH
7873: LD_INT 10
7875: PUSH
7876: LD_INT 11
7878: PUSH
7879: LD_INT 12
7881: PUSH
7882: LD_INT 13
7884: PUSH
7885: LD_INT 14
7887: PUSH
7888: LD_INT 15
7890: PUSH
7891: LD_INT 16
7893: PUSH
7894: LD_INT 17
7896: PUSH
7897: LD_INT 18
7899: PUSH
7900: LD_INT 19
7902: PUSH
7903: LD_INT 20
7905: PUSH
7906: LD_INT 21
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_INT 23
7914: PUSH
7915: LD_INT 24
7917: PUSH
7918: LD_INT 25
7920: PUSH
7921: LD_INT 26
7923: PUSH
7924: LD_INT 27
7926: PUSH
7927: LD_INT 28
7929: PUSH
7930: LD_INT 29
7932: PUSH
7933: LD_INT 30
7935: PUSH
7936: LD_INT 31
7938: PUSH
7939: LD_INT 32
7941: PUSH
7942: LD_INT 33
7944: PUSH
7945: LD_INT 34
7947: PUSH
7948: LD_INT 36
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 101
7990: PUSH
7991: LD_INT 102
7993: PUSH
7994: LD_INT 103
7996: PUSH
7997: LD_INT 104
7999: PUSH
8000: LD_INT 105
8002: PUSH
8003: LD_INT 106
8005: PUSH
8006: LD_INT 107
8008: PUSH
8009: LD_INT 108
8011: PUSH
8012: LD_INT 109
8014: PUSH
8015: LD_INT 110
8017: PUSH
8018: LD_INT 111
8020: PUSH
8021: LD_INT 112
8023: PUSH
8024: LD_INT 113
8026: PUSH
8027: LD_INT 114
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: ST_TO_ADDR
8050: GO 8777
8052: LD_INT 16
8054: DOUBLE
8055: EQUAL
8056: IFTRUE 8060
8058: GO 8184
8060: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8061: LD_ADDR_VAR 0 1
8065: PUSH
8066: LD_INT 2
8068: PUSH
8069: LD_INT 4
8071: PUSH
8072: LD_INT 5
8074: PUSH
8075: LD_INT 7
8077: PUSH
8078: LD_INT 11
8080: PUSH
8081: LD_INT 12
8083: PUSH
8084: LD_INT 15
8086: PUSH
8087: LD_INT 16
8089: PUSH
8090: LD_INT 20
8092: PUSH
8093: LD_INT 21
8095: PUSH
8096: LD_INT 22
8098: PUSH
8099: LD_INT 23
8101: PUSH
8102: LD_INT 25
8104: PUSH
8105: LD_INT 26
8107: PUSH
8108: LD_INT 30
8110: PUSH
8111: LD_INT 31
8113: PUSH
8114: LD_INT 32
8116: PUSH
8117: LD_INT 33
8119: PUSH
8120: LD_INT 34
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 101
8146: PUSH
8147: LD_INT 102
8149: PUSH
8150: LD_INT 103
8152: PUSH
8153: LD_INT 106
8155: PUSH
8156: LD_INT 108
8158: PUSH
8159: LD_INT 112
8161: PUSH
8162: LD_INT 113
8164: PUSH
8165: LD_INT 114
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: ST_TO_ADDR
8182: GO 8777
8184: LD_INT 17
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8192
8190: GO 8404
8192: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8193: LD_ADDR_VAR 0 1
8197: PUSH
8198: LD_INT 1
8200: PUSH
8201: LD_INT 2
8203: PUSH
8204: LD_INT 3
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: LD_INT 5
8212: PUSH
8213: LD_INT 6
8215: PUSH
8216: LD_INT 7
8218: PUSH
8219: LD_INT 8
8221: PUSH
8222: LD_INT 9
8224: PUSH
8225: LD_INT 10
8227: PUSH
8228: LD_INT 11
8230: PUSH
8231: LD_INT 12
8233: PUSH
8234: LD_INT 13
8236: PUSH
8237: LD_INT 14
8239: PUSH
8240: LD_INT 15
8242: PUSH
8243: LD_INT 16
8245: PUSH
8246: LD_INT 17
8248: PUSH
8249: LD_INT 18
8251: PUSH
8252: LD_INT 19
8254: PUSH
8255: LD_INT 20
8257: PUSH
8258: LD_INT 21
8260: PUSH
8261: LD_INT 22
8263: PUSH
8264: LD_INT 23
8266: PUSH
8267: LD_INT 24
8269: PUSH
8270: LD_INT 25
8272: PUSH
8273: LD_INT 26
8275: PUSH
8276: LD_INT 27
8278: PUSH
8279: LD_INT 28
8281: PUSH
8282: LD_INT 29
8284: PUSH
8285: LD_INT 30
8287: PUSH
8288: LD_INT 31
8290: PUSH
8291: LD_INT 32
8293: PUSH
8294: LD_INT 33
8296: PUSH
8297: LD_INT 34
8299: PUSH
8300: LD_INT 36
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 101
8342: PUSH
8343: LD_INT 102
8345: PUSH
8346: LD_INT 103
8348: PUSH
8349: LD_INT 104
8351: PUSH
8352: LD_INT 105
8354: PUSH
8355: LD_INT 106
8357: PUSH
8358: LD_INT 107
8360: PUSH
8361: LD_INT 108
8363: PUSH
8364: LD_INT 109
8366: PUSH
8367: LD_INT 110
8369: PUSH
8370: LD_INT 111
8372: PUSH
8373: LD_INT 112
8375: PUSH
8376: LD_INT 113
8378: PUSH
8379: LD_INT 114
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: ST_TO_ADDR
8402: GO 8777
8404: LD_INT 18
8406: DOUBLE
8407: EQUAL
8408: IFTRUE 8412
8410: GO 8548
8412: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8413: LD_ADDR_VAR 0 1
8417: PUSH
8418: LD_INT 2
8420: PUSH
8421: LD_INT 4
8423: PUSH
8424: LD_INT 5
8426: PUSH
8427: LD_INT 7
8429: PUSH
8430: LD_INT 11
8432: PUSH
8433: LD_INT 12
8435: PUSH
8436: LD_INT 15
8438: PUSH
8439: LD_INT 16
8441: PUSH
8442: LD_INT 20
8444: PUSH
8445: LD_INT 21
8447: PUSH
8448: LD_INT 22
8450: PUSH
8451: LD_INT 23
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 26
8459: PUSH
8460: LD_INT 30
8462: PUSH
8463: LD_INT 31
8465: PUSH
8466: LD_INT 32
8468: PUSH
8469: LD_INT 33
8471: PUSH
8472: LD_INT 34
8474: PUSH
8475: LD_INT 35
8477: PUSH
8478: LD_INT 36
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 101
8506: PUSH
8507: LD_INT 102
8509: PUSH
8510: LD_INT 103
8512: PUSH
8513: LD_INT 106
8515: PUSH
8516: LD_INT 108
8518: PUSH
8519: LD_INT 112
8521: PUSH
8522: LD_INT 113
8524: PUSH
8525: LD_INT 114
8527: PUSH
8528: LD_INT 115
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: ST_TO_ADDR
8546: GO 8777
8548: LD_INT 19
8550: DOUBLE
8551: EQUAL
8552: IFTRUE 8556
8554: GO 8776
8556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8557: LD_ADDR_VAR 0 1
8561: PUSH
8562: LD_INT 1
8564: PUSH
8565: LD_INT 2
8567: PUSH
8568: LD_INT 3
8570: PUSH
8571: LD_INT 4
8573: PUSH
8574: LD_INT 5
8576: PUSH
8577: LD_INT 6
8579: PUSH
8580: LD_INT 7
8582: PUSH
8583: LD_INT 8
8585: PUSH
8586: LD_INT 9
8588: PUSH
8589: LD_INT 10
8591: PUSH
8592: LD_INT 11
8594: PUSH
8595: LD_INT 12
8597: PUSH
8598: LD_INT 13
8600: PUSH
8601: LD_INT 14
8603: PUSH
8604: LD_INT 15
8606: PUSH
8607: LD_INT 16
8609: PUSH
8610: LD_INT 17
8612: PUSH
8613: LD_INT 18
8615: PUSH
8616: LD_INT 19
8618: PUSH
8619: LD_INT 20
8621: PUSH
8622: LD_INT 21
8624: PUSH
8625: LD_INT 22
8627: PUSH
8628: LD_INT 23
8630: PUSH
8631: LD_INT 24
8633: PUSH
8634: LD_INT 25
8636: PUSH
8637: LD_INT 26
8639: PUSH
8640: LD_INT 27
8642: PUSH
8643: LD_INT 28
8645: PUSH
8646: LD_INT 29
8648: PUSH
8649: LD_INT 30
8651: PUSH
8652: LD_INT 31
8654: PUSH
8655: LD_INT 32
8657: PUSH
8658: LD_INT 33
8660: PUSH
8661: LD_INT 34
8663: PUSH
8664: LD_INT 35
8666: PUSH
8667: LD_INT 36
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 101
8710: PUSH
8711: LD_INT 102
8713: PUSH
8714: LD_INT 103
8716: PUSH
8717: LD_INT 104
8719: PUSH
8720: LD_INT 105
8722: PUSH
8723: LD_INT 106
8725: PUSH
8726: LD_INT 107
8728: PUSH
8729: LD_INT 108
8731: PUSH
8732: LD_INT 109
8734: PUSH
8735: LD_INT 110
8737: PUSH
8738: LD_INT 111
8740: PUSH
8741: LD_INT 112
8743: PUSH
8744: LD_INT 113
8746: PUSH
8747: LD_INT 114
8749: PUSH
8750: LD_INT 115
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: ST_TO_ADDR
8774: GO 8777
8776: POP
// end else
8777: GO 8996
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8779: LD_ADDR_VAR 0 1
8783: PUSH
8784: LD_INT 1
8786: PUSH
8787: LD_INT 2
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 4
8795: PUSH
8796: LD_INT 5
8798: PUSH
8799: LD_INT 6
8801: PUSH
8802: LD_INT 7
8804: PUSH
8805: LD_INT 8
8807: PUSH
8808: LD_INT 9
8810: PUSH
8811: LD_INT 10
8813: PUSH
8814: LD_INT 11
8816: PUSH
8817: LD_INT 12
8819: PUSH
8820: LD_INT 13
8822: PUSH
8823: LD_INT 14
8825: PUSH
8826: LD_INT 15
8828: PUSH
8829: LD_INT 16
8831: PUSH
8832: LD_INT 17
8834: PUSH
8835: LD_INT 18
8837: PUSH
8838: LD_INT 19
8840: PUSH
8841: LD_INT 20
8843: PUSH
8844: LD_INT 21
8846: PUSH
8847: LD_INT 22
8849: PUSH
8850: LD_INT 23
8852: PUSH
8853: LD_INT 24
8855: PUSH
8856: LD_INT 25
8858: PUSH
8859: LD_INT 26
8861: PUSH
8862: LD_INT 27
8864: PUSH
8865: LD_INT 28
8867: PUSH
8868: LD_INT 29
8870: PUSH
8871: LD_INT 30
8873: PUSH
8874: LD_INT 31
8876: PUSH
8877: LD_INT 32
8879: PUSH
8880: LD_INT 33
8882: PUSH
8883: LD_INT 34
8885: PUSH
8886: LD_INT 35
8888: PUSH
8889: LD_INT 36
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 101
8932: PUSH
8933: LD_INT 102
8935: PUSH
8936: LD_INT 103
8938: PUSH
8939: LD_INT 104
8941: PUSH
8942: LD_INT 105
8944: PUSH
8945: LD_INT 106
8947: PUSH
8948: LD_INT 107
8950: PUSH
8951: LD_INT 108
8953: PUSH
8954: LD_INT 109
8956: PUSH
8957: LD_INT 110
8959: PUSH
8960: LD_INT 111
8962: PUSH
8963: LD_INT 112
8965: PUSH
8966: LD_INT 113
8968: PUSH
8969: LD_INT 114
8971: PUSH
8972: LD_INT 115
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: ST_TO_ADDR
// if result then
8996: LD_VAR 0 1
9000: IFFALSE 9289
// begin normal :=  ;
9002: LD_ADDR_VAR 0 3
9006: PUSH
9007: LD_STRING 
9009: ST_TO_ADDR
// hardcore :=  ;
9010: LD_ADDR_VAR 0 4
9014: PUSH
9015: LD_STRING 
9017: ST_TO_ADDR
// for i = 1 to normalCounter do
9018: LD_ADDR_VAR 0 5
9022: PUSH
9023: DOUBLE
9024: LD_INT 1
9026: DEC
9027: ST_TO_ADDR
9028: LD_EXP 59
9032: PUSH
9033: FOR_TO
9034: IFFALSE 9135
// begin tmp := 0 ;
9036: LD_ADDR_VAR 0 2
9040: PUSH
9041: LD_STRING 0
9043: ST_TO_ADDR
// if result [ 1 ] then
9044: LD_VAR 0 1
9048: PUSH
9049: LD_INT 1
9051: ARRAY
9052: IFFALSE 9117
// if result [ 1 ] [ 1 ] = i then
9054: LD_VAR 0 1
9058: PUSH
9059: LD_INT 1
9061: ARRAY
9062: PUSH
9063: LD_INT 1
9065: ARRAY
9066: PUSH
9067: LD_VAR 0 5
9071: EQUAL
9072: IFFALSE 9117
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9074: LD_ADDR_VAR 0 1
9078: PUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: LD_INT 1
9086: PPUSH
9087: LD_VAR 0 1
9091: PUSH
9092: LD_INT 1
9094: ARRAY
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 3
9103: PPUSH
9104: CALL_OW 1
9108: ST_TO_ADDR
// tmp := 1 ;
9109: LD_ADDR_VAR 0 2
9113: PUSH
9114: LD_STRING 1
9116: ST_TO_ADDR
// end ; normal := normal & tmp ;
9117: LD_ADDR_VAR 0 3
9121: PUSH
9122: LD_VAR 0 3
9126: PUSH
9127: LD_VAR 0 2
9131: STR
9132: ST_TO_ADDR
// end ;
9133: GO 9033
9135: POP
9136: POP
// for i = 1 to hardcoreCounter do
9137: LD_ADDR_VAR 0 5
9141: PUSH
9142: DOUBLE
9143: LD_INT 1
9145: DEC
9146: ST_TO_ADDR
9147: LD_EXP 60
9151: PUSH
9152: FOR_TO
9153: IFFALSE 9258
// begin tmp := 0 ;
9155: LD_ADDR_VAR 0 2
9159: PUSH
9160: LD_STRING 0
9162: ST_TO_ADDR
// if result [ 2 ] then
9163: LD_VAR 0 1
9167: PUSH
9168: LD_INT 2
9170: ARRAY
9171: IFFALSE 9240
// if result [ 2 ] [ 1 ] = 100 + i then
9173: LD_VAR 0 1
9177: PUSH
9178: LD_INT 2
9180: ARRAY
9181: PUSH
9182: LD_INT 1
9184: ARRAY
9185: PUSH
9186: LD_INT 100
9188: PUSH
9189: LD_VAR 0 5
9193: PLUS
9194: EQUAL
9195: IFFALSE 9240
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9197: LD_ADDR_VAR 0 1
9201: PUSH
9202: LD_VAR 0 1
9206: PPUSH
9207: LD_INT 2
9209: PPUSH
9210: LD_VAR 0 1
9214: PUSH
9215: LD_INT 2
9217: ARRAY
9218: PPUSH
9219: LD_INT 1
9221: PPUSH
9222: CALL_OW 3
9226: PPUSH
9227: CALL_OW 1
9231: ST_TO_ADDR
// tmp := 1 ;
9232: LD_ADDR_VAR 0 2
9236: PUSH
9237: LD_STRING 1
9239: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9240: LD_ADDR_VAR 0 4
9244: PUSH
9245: LD_VAR 0 4
9249: PUSH
9250: LD_VAR 0 2
9254: STR
9255: ST_TO_ADDR
// end ;
9256: GO 9152
9258: POP
9259: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9260: LD_STRING getStreamItemsFromMission("
9262: PUSH
9263: LD_VAR 0 3
9267: STR
9268: PUSH
9269: LD_STRING ","
9271: STR
9272: PUSH
9273: LD_VAR 0 4
9277: STR
9278: PUSH
9279: LD_STRING ")
9281: STR
9282: PPUSH
9283: CALL_OW 559
// end else
9287: GO 9296
// ToLua ( getStreamItemsFromMission("","") ) ;
9289: LD_STRING getStreamItemsFromMission("","")
9291: PPUSH
9292: CALL_OW 559
// end ;
9296: LD_VAR 0 1
9300: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9301: LD_EXP 58
9305: PUSH
9306: LD_EXP 63
9310: AND
9311: IFFALSE 9435
9313: GO 9315
9315: DISABLE
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
// begin enable ;
9320: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_OWVAR 2
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 2
9340: PUSH
9341: LD_INT 34
9343: PUSH
9344: LD_INT 7
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: LD_INT 34
9353: PUSH
9354: LD_INT 45
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 34
9363: PUSH
9364: LD_INT 28
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 34
9373: PUSH
9374: LD_INT 47
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PPUSH
9392: CALL_OW 69
9396: ST_TO_ADDR
// if not tmp then
9397: LD_VAR 0 2
9401: NOT
9402: IFFALSE 9406
// exit ;
9404: GO 9435
// for i in tmp do
9406: LD_ADDR_VAR 0 1
9410: PUSH
9411: LD_VAR 0 2
9415: PUSH
9416: FOR_IN
9417: IFFALSE 9433
// begin SetLives ( i , 0 ) ;
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_INT 0
9426: PPUSH
9427: CALL_OW 234
// end ;
9431: GO 9416
9433: POP
9434: POP
// end ;
9435: PPOPN 2
9437: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9438: LD_EXP 58
9442: PUSH
9443: LD_EXP 64
9447: AND
9448: IFFALSE 9532
9450: GO 9452
9452: DISABLE
9453: LD_INT 0
9455: PPUSH
9456: PPUSH
// begin enable ;
9457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9458: LD_ADDR_VAR 0 2
9462: PUSH
9463: LD_INT 22
9465: PUSH
9466: LD_OWVAR 2
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 32
9477: PUSH
9478: LD_INT 3
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PPUSH
9489: CALL_OW 69
9493: ST_TO_ADDR
// if not tmp then
9494: LD_VAR 0 2
9498: NOT
9499: IFFALSE 9503
// exit ;
9501: GO 9532
// for i in tmp do
9503: LD_ADDR_VAR 0 1
9507: PUSH
9508: LD_VAR 0 2
9512: PUSH
9513: FOR_IN
9514: IFFALSE 9530
// begin SetLives ( i , 0 ) ;
9516: LD_VAR 0 1
9520: PPUSH
9521: LD_INT 0
9523: PPUSH
9524: CALL_OW 234
// end ;
9528: GO 9513
9530: POP
9531: POP
// end ;
9532: PPOPN 2
9534: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9535: LD_EXP 58
9539: PUSH
9540: LD_EXP 61
9544: AND
9545: IFFALSE 9638
9547: GO 9549
9549: DISABLE
9550: LD_INT 0
9552: PPUSH
// begin enable ;
9553: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9554: LD_ADDR_VAR 0 1
9558: PUSH
9559: LD_INT 22
9561: PUSH
9562: LD_OWVAR 2
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: PUSH
9571: LD_INT 2
9573: PUSH
9574: LD_INT 25
9576: PUSH
9577: LD_INT 5
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 25
9586: PUSH
9587: LD_INT 9
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 25
9596: PUSH
9597: LD_INT 8
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PPUSH
9614: CALL_OW 69
9618: PUSH
9619: FOR_IN
9620: IFFALSE 9636
// begin SetClass ( i , 1 ) ;
9622: LD_VAR 0 1
9626: PPUSH
9627: LD_INT 1
9629: PPUSH
9630: CALL_OW 336
// end ;
9634: GO 9619
9636: POP
9637: POP
// end ;
9638: PPOPN 1
9640: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9641: LD_EXP 58
9645: PUSH
9646: LD_EXP 62
9650: AND
9651: PUSH
9652: LD_OWVAR 65
9656: PUSH
9657: LD_INT 7
9659: LESS
9660: AND
9661: IFFALSE 9675
9663: GO 9665
9665: DISABLE
// begin enable ;
9666: ENABLE
// game_speed := 7 ;
9667: LD_ADDR_OWVAR 65
9671: PUSH
9672: LD_INT 7
9674: ST_TO_ADDR
// end ;
9675: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9676: LD_EXP 58
9680: PUSH
9681: LD_EXP 65
9685: AND
9686: IFFALSE 9888
9688: GO 9690
9690: DISABLE
9691: LD_INT 0
9693: PPUSH
9694: PPUSH
9695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9696: LD_ADDR_VAR 0 3
9700: PUSH
9701: LD_INT 81
9703: PUSH
9704: LD_OWVAR 2
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 21
9715: PUSH
9716: LD_INT 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PPUSH
9727: CALL_OW 69
9731: ST_TO_ADDR
// if not tmp then
9732: LD_VAR 0 3
9736: NOT
9737: IFFALSE 9741
// exit ;
9739: GO 9888
// if tmp > 5 then
9741: LD_VAR 0 3
9745: PUSH
9746: LD_INT 5
9748: GREATER
9749: IFFALSE 9761
// k := 5 else
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: LD_INT 5
9758: ST_TO_ADDR
9759: GO 9771
// k := tmp ;
9761: LD_ADDR_VAR 0 2
9765: PUSH
9766: LD_VAR 0 3
9770: ST_TO_ADDR
// for i := 1 to k do
9771: LD_ADDR_VAR 0 1
9775: PUSH
9776: DOUBLE
9777: LD_INT 1
9779: DEC
9780: ST_TO_ADDR
9781: LD_VAR 0 2
9785: PUSH
9786: FOR_TO
9787: IFFALSE 9886
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9789: LD_VAR 0 3
9793: PUSH
9794: LD_VAR 0 1
9798: ARRAY
9799: PPUSH
9800: LD_VAR 0 1
9804: PUSH
9805: LD_INT 4
9807: MOD
9808: PUSH
9809: LD_INT 1
9811: PLUS
9812: PPUSH
9813: CALL_OW 259
9817: PUSH
9818: LD_INT 10
9820: LESS
9821: IFFALSE 9884
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9823: LD_VAR 0 3
9827: PUSH
9828: LD_VAR 0 1
9832: ARRAY
9833: PPUSH
9834: LD_VAR 0 1
9838: PUSH
9839: LD_INT 4
9841: MOD
9842: PUSH
9843: LD_INT 1
9845: PLUS
9846: PPUSH
9847: LD_VAR 0 3
9851: PUSH
9852: LD_VAR 0 1
9856: ARRAY
9857: PPUSH
9858: LD_VAR 0 1
9862: PUSH
9863: LD_INT 4
9865: MOD
9866: PUSH
9867: LD_INT 1
9869: PLUS
9870: PPUSH
9871: CALL_OW 259
9875: PUSH
9876: LD_INT 1
9878: PLUS
9879: PPUSH
9880: CALL_OW 237
9884: GO 9786
9886: POP
9887: POP
// end ;
9888: PPOPN 3
9890: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9891: LD_EXP 58
9895: PUSH
9896: LD_EXP 66
9900: AND
9901: IFFALSE 9921
9903: GO 9905
9905: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9906: LD_INT 4
9908: PPUSH
9909: LD_OWVAR 2
9913: PPUSH
9914: LD_INT 0
9916: PPUSH
9917: CALL_OW 324
9921: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9922: LD_EXP 58
9926: PUSH
9927: LD_EXP 95
9931: AND
9932: IFFALSE 9952
9934: GO 9936
9936: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9937: LD_INT 19
9939: PPUSH
9940: LD_OWVAR 2
9944: PPUSH
9945: LD_INT 0
9947: PPUSH
9948: CALL_OW 324
9952: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9953: LD_EXP 58
9957: PUSH
9958: LD_EXP 67
9962: AND
9963: IFFALSE 10065
9965: GO 9967
9967: DISABLE
9968: LD_INT 0
9970: PPUSH
9971: PPUSH
// begin enable ;
9972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9973: LD_ADDR_VAR 0 2
9977: PUSH
9978: LD_INT 22
9980: PUSH
9981: LD_OWVAR 2
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 2
9992: PUSH
9993: LD_INT 34
9995: PUSH
9996: LD_INT 11
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 34
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 69
10026: ST_TO_ADDR
// if not tmp then
10027: LD_VAR 0 2
10031: NOT
10032: IFFALSE 10036
// exit ;
10034: GO 10065
// for i in tmp do
10036: LD_ADDR_VAR 0 1
10040: PUSH
10041: LD_VAR 0 2
10045: PUSH
10046: FOR_IN
10047: IFFALSE 10063
// begin SetLives ( i , 0 ) ;
10049: LD_VAR 0 1
10053: PPUSH
10054: LD_INT 0
10056: PPUSH
10057: CALL_OW 234
// end ;
10061: GO 10046
10063: POP
10064: POP
// end ;
10065: PPOPN 2
10067: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10068: LD_EXP 58
10072: PUSH
10073: LD_EXP 68
10077: AND
10078: IFFALSE 10098
10080: GO 10082
10082: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10083: LD_INT 32
10085: PPUSH
10086: LD_OWVAR 2
10090: PPUSH
10091: LD_INT 0
10093: PPUSH
10094: CALL_OW 324
10098: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10099: LD_EXP 58
10103: PUSH
10104: LD_EXP 69
10108: AND
10109: IFFALSE 10290
10111: GO 10113
10113: DISABLE
10114: LD_INT 0
10116: PPUSH
10117: PPUSH
10118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: LD_INT 22
10126: PUSH
10127: LD_OWVAR 2
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 33
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PPUSH
10150: CALL_OW 69
10154: ST_TO_ADDR
// if not tmp then
10155: LD_VAR 0 2
10159: NOT
10160: IFFALSE 10164
// exit ;
10162: GO 10290
// side := 0 ;
10164: LD_ADDR_VAR 0 3
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// for i := 1 to 8 do
10172: LD_ADDR_VAR 0 1
10176: PUSH
10177: DOUBLE
10178: LD_INT 1
10180: DEC
10181: ST_TO_ADDR
10182: LD_INT 8
10184: PUSH
10185: FOR_TO
10186: IFFALSE 10234
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10188: LD_OWVAR 2
10192: PUSH
10193: LD_VAR 0 1
10197: NONEQUAL
10198: PUSH
10199: LD_OWVAR 2
10203: PPUSH
10204: LD_VAR 0 1
10208: PPUSH
10209: CALL_OW 81
10213: PUSH
10214: LD_INT 2
10216: EQUAL
10217: AND
10218: IFFALSE 10232
// begin side := i ;
10220: LD_ADDR_VAR 0 3
10224: PUSH
10225: LD_VAR 0 1
10229: ST_TO_ADDR
// break ;
10230: GO 10234
// end ;
10232: GO 10185
10234: POP
10235: POP
// if not side then
10236: LD_VAR 0 3
10240: NOT
10241: IFFALSE 10245
// exit ;
10243: GO 10290
// for i := 1 to tmp do
10245: LD_ADDR_VAR 0 1
10249: PUSH
10250: DOUBLE
10251: LD_INT 1
10253: DEC
10254: ST_TO_ADDR
10255: LD_VAR 0 2
10259: PUSH
10260: FOR_TO
10261: IFFALSE 10288
// if Prob ( 60 ) then
10263: LD_INT 60
10265: PPUSH
10266: CALL_OW 13
10270: IFFALSE 10286
// SetSide ( i , side ) ;
10272: LD_VAR 0 1
10276: PPUSH
10277: LD_VAR 0 3
10281: PPUSH
10282: CALL_OW 235
10286: GO 10260
10288: POP
10289: POP
// end ;
10290: PPOPN 3
10292: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10293: LD_EXP 58
10297: PUSH
10298: LD_EXP 71
10302: AND
10303: IFFALSE 10422
10305: GO 10307
10307: DISABLE
10308: LD_INT 0
10310: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10311: LD_ADDR_VAR 0 1
10315: PUSH
10316: LD_INT 22
10318: PUSH
10319: LD_OWVAR 2
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 21
10330: PUSH
10331: LD_INT 1
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 3
10340: PUSH
10341: LD_INT 23
10343: PUSH
10344: LD_INT 0
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 69
10364: PUSH
10365: FOR_IN
10366: IFFALSE 10420
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10368: LD_VAR 0 1
10372: PPUSH
10373: CALL_OW 257
10377: PUSH
10378: LD_INT 1
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 3
10386: PUSH
10387: LD_INT 4
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: IN
10396: IFFALSE 10418
// SetClass ( un , rand ( 1 , 4 ) ) ;
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_INT 1
10405: PPUSH
10406: LD_INT 4
10408: PPUSH
10409: CALL_OW 12
10413: PPUSH
10414: CALL_OW 336
10418: GO 10365
10420: POP
10421: POP
// end ;
10422: PPOPN 1
10424: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10425: LD_EXP 58
10429: PUSH
10430: LD_EXP 70
10434: AND
10435: IFFALSE 10514
10437: GO 10439
10439: DISABLE
10440: LD_INT 0
10442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10443: LD_ADDR_VAR 0 1
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_OWVAR 2
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 21
10462: PUSH
10463: LD_INT 3
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PPUSH
10474: CALL_OW 69
10478: ST_TO_ADDR
// if not tmp then
10479: LD_VAR 0 1
10483: NOT
10484: IFFALSE 10488
// exit ;
10486: GO 10514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10488: LD_VAR 0 1
10492: PUSH
10493: LD_INT 1
10495: PPUSH
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 12
10505: ARRAY
10506: PPUSH
10507: LD_INT 100
10509: PPUSH
10510: CALL_OW 234
// end ;
10514: PPOPN 1
10516: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10517: LD_EXP 58
10521: PUSH
10522: LD_EXP 72
10526: AND
10527: IFFALSE 10625
10529: GO 10531
10531: DISABLE
10532: LD_INT 0
10534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10535: LD_ADDR_VAR 0 1
10539: PUSH
10540: LD_INT 22
10542: PUSH
10543: LD_OWVAR 2
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 21
10554: PUSH
10555: LD_INT 1
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PPUSH
10566: CALL_OW 69
10570: ST_TO_ADDR
// if not tmp then
10571: LD_VAR 0 1
10575: NOT
10576: IFFALSE 10580
// exit ;
10578: GO 10625
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10580: LD_VAR 0 1
10584: PUSH
10585: LD_INT 1
10587: PPUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: CALL_OW 12
10597: ARRAY
10598: PPUSH
10599: LD_INT 1
10601: PPUSH
10602: LD_INT 4
10604: PPUSH
10605: CALL_OW 12
10609: PPUSH
10610: LD_INT 3000
10612: PPUSH
10613: LD_INT 9000
10615: PPUSH
10616: CALL_OW 12
10620: PPUSH
10621: CALL_OW 492
// end ;
10625: PPOPN 1
10627: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10628: LD_EXP 58
10632: PUSH
10633: LD_EXP 73
10637: AND
10638: IFFALSE 10658
10640: GO 10642
10642: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10643: LD_INT 1
10645: PPUSH
10646: LD_OWVAR 2
10650: PPUSH
10651: LD_INT 0
10653: PPUSH
10654: CALL_OW 324
10658: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10659: LD_EXP 58
10663: PUSH
10664: LD_EXP 74
10668: AND
10669: IFFALSE 10752
10671: GO 10673
10673: DISABLE
10674: LD_INT 0
10676: PPUSH
10677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10678: LD_ADDR_VAR 0 2
10682: PUSH
10683: LD_INT 22
10685: PUSH
10686: LD_OWVAR 2
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 21
10697: PUSH
10698: LD_INT 3
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PPUSH
10709: CALL_OW 69
10713: ST_TO_ADDR
// if not tmp then
10714: LD_VAR 0 2
10718: NOT
10719: IFFALSE 10723
// exit ;
10721: GO 10752
// for i in tmp do
10723: LD_ADDR_VAR 0 1
10727: PUSH
10728: LD_VAR 0 2
10732: PUSH
10733: FOR_IN
10734: IFFALSE 10750
// SetBLevel ( i , 10 ) ;
10736: LD_VAR 0 1
10740: PPUSH
10741: LD_INT 10
10743: PPUSH
10744: CALL_OW 241
10748: GO 10733
10750: POP
10751: POP
// end ;
10752: PPOPN 2
10754: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10755: LD_EXP 58
10759: PUSH
10760: LD_EXP 75
10764: AND
10765: IFFALSE 10876
10767: GO 10769
10769: DISABLE
10770: LD_INT 0
10772: PPUSH
10773: PPUSH
10774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10775: LD_ADDR_VAR 0 3
10779: PUSH
10780: LD_INT 22
10782: PUSH
10783: LD_OWVAR 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PPUSH
10806: CALL_OW 69
10810: ST_TO_ADDR
// if not tmp then
10811: LD_VAR 0 3
10815: NOT
10816: IFFALSE 10820
// exit ;
10818: GO 10876
// un := tmp [ rand ( 1 , tmp ) ] ;
10820: LD_ADDR_VAR 0 2
10824: PUSH
10825: LD_VAR 0 3
10829: PUSH
10830: LD_INT 1
10832: PPUSH
10833: LD_VAR 0 3
10837: PPUSH
10838: CALL_OW 12
10842: ARRAY
10843: ST_TO_ADDR
// if Crawls ( un ) then
10844: LD_VAR 0 2
10848: PPUSH
10849: CALL_OW 318
10853: IFFALSE 10864
// ComWalk ( un ) ;
10855: LD_VAR 0 2
10859: PPUSH
10860: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10864: LD_VAR 0 2
10868: PPUSH
10869: LD_INT 5
10871: PPUSH
10872: CALL_OW 336
// end ;
10876: PPOPN 3
10878: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10879: LD_EXP 58
10883: PUSH
10884: LD_EXP 76
10888: AND
10889: PUSH
10890: LD_OWVAR 67
10894: PUSH
10895: LD_INT 3
10897: LESS
10898: AND
10899: IFFALSE 10918
10901: GO 10903
10903: DISABLE
// Difficulty := Difficulty + 1 ;
10904: LD_ADDR_OWVAR 67
10908: PUSH
10909: LD_OWVAR 67
10913: PUSH
10914: LD_INT 1
10916: PLUS
10917: ST_TO_ADDR
10918: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10919: LD_EXP 58
10923: PUSH
10924: LD_EXP 77
10928: AND
10929: IFFALSE 11032
10931: GO 10933
10933: DISABLE
10934: LD_INT 0
10936: PPUSH
// begin for i := 1 to 5 do
10937: LD_ADDR_VAR 0 1
10941: PUSH
10942: DOUBLE
10943: LD_INT 1
10945: DEC
10946: ST_TO_ADDR
10947: LD_INT 5
10949: PUSH
10950: FOR_TO
10951: IFFALSE 11030
// begin uc_nation := nation_nature ;
10953: LD_ADDR_OWVAR 21
10957: PUSH
10958: LD_INT 0
10960: ST_TO_ADDR
// uc_side := 0 ;
10961: LD_ADDR_OWVAR 20
10965: PUSH
10966: LD_INT 0
10968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10969: LD_ADDR_OWVAR 29
10973: PUSH
10974: LD_INT 12
10976: PUSH
10977: LD_INT 12
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: ST_TO_ADDR
// hc_agressivity := 20 ;
10984: LD_ADDR_OWVAR 35
10988: PUSH
10989: LD_INT 20
10991: ST_TO_ADDR
// hc_class := class_tiger ;
10992: LD_ADDR_OWVAR 28
10996: PUSH
10997: LD_INT 14
10999: ST_TO_ADDR
// hc_gallery :=  ;
11000: LD_ADDR_OWVAR 33
11004: PUSH
11005: LD_STRING 
11007: ST_TO_ADDR
// hc_name :=  ;
11008: LD_ADDR_OWVAR 26
11012: PUSH
11013: LD_STRING 
11015: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11016: CALL_OW 44
11020: PPUSH
11021: LD_INT 0
11023: PPUSH
11024: CALL_OW 51
// end ;
11028: GO 10950
11030: POP
11031: POP
// end ;
11032: PPOPN 1
11034: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11035: LD_EXP 58
11039: PUSH
11040: LD_EXP 78
11044: AND
11045: IFFALSE 11054
11047: GO 11049
11049: DISABLE
// StreamSibBomb ;
11050: CALL 11055 0 0
11054: END
// export function StreamSibBomb ; var i , x , y ; begin
11055: LD_INT 0
11057: PPUSH
11058: PPUSH
11059: PPUSH
11060: PPUSH
// result := false ;
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// for i := 1 to 16 do
11069: LD_ADDR_VAR 0 2
11073: PUSH
11074: DOUBLE
11075: LD_INT 1
11077: DEC
11078: ST_TO_ADDR
11079: LD_INT 16
11081: PUSH
11082: FOR_TO
11083: IFFALSE 11282
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11085: LD_ADDR_VAR 0 3
11089: PUSH
11090: LD_INT 10
11092: PUSH
11093: LD_INT 20
11095: PUSH
11096: LD_INT 30
11098: PUSH
11099: LD_INT 40
11101: PUSH
11102: LD_INT 50
11104: PUSH
11105: LD_INT 60
11107: PUSH
11108: LD_INT 70
11110: PUSH
11111: LD_INT 80
11113: PUSH
11114: LD_INT 90
11116: PUSH
11117: LD_INT 100
11119: PUSH
11120: LD_INT 110
11122: PUSH
11123: LD_INT 120
11125: PUSH
11126: LD_INT 130
11128: PUSH
11129: LD_INT 140
11131: PUSH
11132: LD_INT 150
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: PUSH
11152: LD_INT 1
11154: PPUSH
11155: LD_INT 15
11157: PPUSH
11158: CALL_OW 12
11162: ARRAY
11163: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11164: LD_ADDR_VAR 0 4
11168: PUSH
11169: LD_INT 10
11171: PUSH
11172: LD_INT 20
11174: PUSH
11175: LD_INT 30
11177: PUSH
11178: LD_INT 40
11180: PUSH
11181: LD_INT 50
11183: PUSH
11184: LD_INT 60
11186: PUSH
11187: LD_INT 70
11189: PUSH
11190: LD_INT 80
11192: PUSH
11193: LD_INT 90
11195: PUSH
11196: LD_INT 100
11198: PUSH
11199: LD_INT 110
11201: PUSH
11202: LD_INT 120
11204: PUSH
11205: LD_INT 130
11207: PUSH
11208: LD_INT 140
11210: PUSH
11211: LD_INT 150
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 1
11233: PPUSH
11234: LD_INT 15
11236: PPUSH
11237: CALL_OW 12
11241: ARRAY
11242: ST_TO_ADDR
// if ValidHex ( x , y ) then
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_VAR 0 4
11252: PPUSH
11253: CALL_OW 488
11257: IFFALSE 11280
// begin result := [ x , y ] ;
11259: LD_ADDR_VAR 0 1
11263: PUSH
11264: LD_VAR 0 3
11268: PUSH
11269: LD_VAR 0 4
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: ST_TO_ADDR
// break ;
11278: GO 11282
// end ; end ;
11280: GO 11082
11282: POP
11283: POP
// if result then
11284: LD_VAR 0 1
11288: IFFALSE 11348
// begin ToLua ( playSibBomb() ) ;
11290: LD_STRING playSibBomb()
11292: PPUSH
11293: CALL_OW 559
// wait ( 0 0$14 ) ;
11297: LD_INT 490
11299: PPUSH
11300: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11304: LD_VAR 0 1
11308: PUSH
11309: LD_INT 1
11311: ARRAY
11312: PPUSH
11313: LD_VAR 0 1
11317: PUSH
11318: LD_INT 2
11320: ARRAY
11321: PPUSH
11322: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11326: LD_VAR 0 1
11330: PUSH
11331: LD_INT 1
11333: ARRAY
11334: PPUSH
11335: LD_VAR 0 1
11339: PUSH
11340: LD_INT 2
11342: ARRAY
11343: PPUSH
11344: CALL_OW 429
// end ; end ;
11348: LD_VAR 0 1
11352: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11353: LD_EXP 58
11357: PUSH
11358: LD_EXP 80
11362: AND
11363: IFFALSE 11375
11365: GO 11367
11367: DISABLE
// YouLost (  ) ;
11368: LD_STRING 
11370: PPUSH
11371: CALL_OW 104
11375: END
// every 0 0$1 trigger StreamModeActive and sFog do
11376: LD_EXP 58
11380: PUSH
11381: LD_EXP 79
11385: AND
11386: IFFALSE 11400
11388: GO 11390
11390: DISABLE
// FogOff ( your_side ) ;
11391: LD_OWVAR 2
11395: PPUSH
11396: CALL_OW 344
11400: END
// every 0 0$1 trigger StreamModeActive and sSun do
11401: LD_EXP 58
11405: PUSH
11406: LD_EXP 81
11410: AND
11411: IFFALSE 11439
11413: GO 11415
11415: DISABLE
// begin solar_recharge_percent := 0 ;
11416: LD_ADDR_OWVAR 79
11420: PUSH
11421: LD_INT 0
11423: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11424: LD_INT 10500
11426: PPUSH
11427: CALL_OW 67
// solar_recharge_percent := 100 ;
11431: LD_ADDR_OWVAR 79
11435: PUSH
11436: LD_INT 100
11438: ST_TO_ADDR
// end ;
11439: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11440: LD_EXP 58
11444: PUSH
11445: LD_EXP 82
11449: AND
11450: IFFALSE 11689
11452: GO 11454
11454: DISABLE
11455: LD_INT 0
11457: PPUSH
11458: PPUSH
11459: PPUSH
// begin tmp := [ ] ;
11460: LD_ADDR_VAR 0 3
11464: PUSH
11465: EMPTY
11466: ST_TO_ADDR
// for i := 1 to 6 do
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: DOUBLE
11473: LD_INT 1
11475: DEC
11476: ST_TO_ADDR
11477: LD_INT 6
11479: PUSH
11480: FOR_TO
11481: IFFALSE 11586
// begin uc_nation := nation_nature ;
11483: LD_ADDR_OWVAR 21
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// uc_side := 0 ;
11491: LD_ADDR_OWVAR 20
11495: PUSH
11496: LD_INT 0
11498: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11499: LD_ADDR_OWVAR 29
11503: PUSH
11504: LD_INT 12
11506: PUSH
11507: LD_INT 12
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: ST_TO_ADDR
// hc_agressivity := 20 ;
11514: LD_ADDR_OWVAR 35
11518: PUSH
11519: LD_INT 20
11521: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11522: LD_ADDR_OWVAR 28
11526: PUSH
11527: LD_INT 17
11529: ST_TO_ADDR
// hc_gallery :=  ;
11530: LD_ADDR_OWVAR 33
11534: PUSH
11535: LD_STRING 
11537: ST_TO_ADDR
// hc_name :=  ;
11538: LD_ADDR_OWVAR 26
11542: PUSH
11543: LD_STRING 
11545: ST_TO_ADDR
// un := CreateHuman ;
11546: LD_ADDR_VAR 0 2
11550: PUSH
11551: CALL_OW 44
11555: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11556: LD_VAR 0 2
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: CALL_OW 51
// tmp := tmp ^ un ;
11568: LD_ADDR_VAR 0 3
11572: PUSH
11573: LD_VAR 0 3
11577: PUSH
11578: LD_VAR 0 2
11582: ADD
11583: ST_TO_ADDR
// end ;
11584: GO 11480
11586: POP
11587: POP
// repeat wait ( 0 0$1 ) ;
11588: LD_INT 35
11590: PPUSH
11591: CALL_OW 67
// for un in tmp do
11595: LD_ADDR_VAR 0 2
11599: PUSH
11600: LD_VAR 0 3
11604: PUSH
11605: FOR_IN
11606: IFFALSE 11680
// begin if IsDead ( un ) then
11608: LD_VAR 0 2
11612: PPUSH
11613: CALL_OW 301
11617: IFFALSE 11637
// begin tmp := tmp diff un ;
11619: LD_ADDR_VAR 0 3
11623: PUSH
11624: LD_VAR 0 3
11628: PUSH
11629: LD_VAR 0 2
11633: DIFF
11634: ST_TO_ADDR
// continue ;
11635: GO 11605
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11637: LD_VAR 0 2
11641: PPUSH
11642: LD_INT 3
11644: PUSH
11645: LD_INT 22
11647: PUSH
11648: LD_INT 0
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PPUSH
11659: CALL_OW 69
11663: PPUSH
11664: LD_VAR 0 2
11668: PPUSH
11669: CALL_OW 74
11673: PPUSH
11674: CALL_OW 115
// end ;
11678: GO 11605
11680: POP
11681: POP
// until not tmp ;
11682: LD_VAR 0 3
11686: NOT
11687: IFFALSE 11588
// end ;
11689: PPOPN 3
11691: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11692: LD_EXP 58
11696: PUSH
11697: LD_EXP 83
11701: AND
11702: IFFALSE 11756
11704: GO 11706
11706: DISABLE
// begin ToLua ( displayTroll(); ) ;
11707: LD_STRING displayTroll();
11709: PPUSH
11710: CALL_OW 559
// wait ( 3 3$00 ) ;
11714: LD_INT 6300
11716: PPUSH
11717: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11721: LD_STRING hideTroll();
11723: PPUSH
11724: CALL_OW 559
// wait ( 1 1$00 ) ;
11728: LD_INT 2100
11730: PPUSH
11731: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11735: LD_STRING displayTroll();
11737: PPUSH
11738: CALL_OW 559
// wait ( 1 1$00 ) ;
11742: LD_INT 2100
11744: PPUSH
11745: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11749: LD_STRING hideTroll();
11751: PPUSH
11752: CALL_OW 559
// end ;
11756: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11757: LD_EXP 58
11761: PUSH
11762: LD_EXP 84
11766: AND
11767: IFFALSE 11830
11769: GO 11771
11771: DISABLE
11772: LD_INT 0
11774: PPUSH
// begin p := 0 ;
11775: LD_ADDR_VAR 0 1
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// repeat game_speed := 1 ;
11783: LD_ADDR_OWVAR 65
11787: PUSH
11788: LD_INT 1
11790: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11791: LD_INT 35
11793: PPUSH
11794: CALL_OW 67
// p := p + 1 ;
11798: LD_ADDR_VAR 0 1
11802: PUSH
11803: LD_VAR 0 1
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: ST_TO_ADDR
// until p >= 60 ;
11812: LD_VAR 0 1
11816: PUSH
11817: LD_INT 60
11819: GREATEREQUAL
11820: IFFALSE 11783
// game_speed := 4 ;
11822: LD_ADDR_OWVAR 65
11826: PUSH
11827: LD_INT 4
11829: ST_TO_ADDR
// end ;
11830: PPOPN 1
11832: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11833: LD_EXP 58
11837: PUSH
11838: LD_EXP 85
11842: AND
11843: IFFALSE 11989
11845: GO 11847
11847: DISABLE
11848: LD_INT 0
11850: PPUSH
11851: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11852: LD_ADDR_VAR 0 1
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_OWVAR 2
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 2
11871: PUSH
11872: LD_INT 30
11874: PUSH
11875: LD_INT 0
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 30
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: ST_TO_ADDR
// if not depot then
11906: LD_VAR 0 1
11910: NOT
11911: IFFALSE 11915
// exit ;
11913: GO 11989
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11915: LD_ADDR_VAR 0 2
11919: PUSH
11920: LD_VAR 0 1
11924: PUSH
11925: LD_INT 1
11927: PPUSH
11928: LD_VAR 0 1
11932: PPUSH
11933: CALL_OW 12
11937: ARRAY
11938: PPUSH
11939: CALL_OW 274
11943: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11944: LD_VAR 0 2
11948: PPUSH
11949: LD_INT 1
11951: PPUSH
11952: LD_INT 0
11954: PPUSH
11955: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11959: LD_VAR 0 2
11963: PPUSH
11964: LD_INT 2
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11974: LD_VAR 0 2
11978: PPUSH
11979: LD_INT 3
11981: PPUSH
11982: LD_INT 0
11984: PPUSH
11985: CALL_OW 277
// end ;
11989: PPOPN 2
11991: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11992: LD_EXP 58
11996: PUSH
11997: LD_EXP 86
12001: AND
12002: IFFALSE 12099
12004: GO 12006
12006: DISABLE
12007: LD_INT 0
12009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12010: LD_ADDR_VAR 0 1
12014: PUSH
12015: LD_INT 22
12017: PUSH
12018: LD_OWVAR 2
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 21
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 3
12039: PUSH
12040: LD_INT 23
12042: PUSH
12043: LD_INT 0
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: PPUSH
12059: CALL_OW 69
12063: ST_TO_ADDR
// if not tmp then
12064: LD_VAR 0 1
12068: NOT
12069: IFFALSE 12073
// exit ;
12071: GO 12099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12073: LD_VAR 0 1
12077: PUSH
12078: LD_INT 1
12080: PPUSH
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL_OW 12
12090: ARRAY
12091: PPUSH
12092: LD_INT 200
12094: PPUSH
12095: CALL_OW 234
// end ;
12099: PPOPN 1
12101: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12102: LD_EXP 58
12106: PUSH
12107: LD_EXP 87
12111: AND
12112: IFFALSE 12191
12114: GO 12116
12116: DISABLE
12117: LD_INT 0
12119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12120: LD_ADDR_VAR 0 1
12124: PUSH
12125: LD_INT 22
12127: PUSH
12128: LD_OWVAR 2
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 21
12139: PUSH
12140: LD_INT 2
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PPUSH
12151: CALL_OW 69
12155: ST_TO_ADDR
// if not tmp then
12156: LD_VAR 0 1
12160: NOT
12161: IFFALSE 12165
// exit ;
12163: GO 12191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12165: LD_VAR 0 1
12169: PUSH
12170: LD_INT 1
12172: PPUSH
12173: LD_VAR 0 1
12177: PPUSH
12178: CALL_OW 12
12182: ARRAY
12183: PPUSH
12184: LD_INT 60
12186: PPUSH
12187: CALL_OW 234
// end ;
12191: PPOPN 1
12193: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12194: LD_EXP 58
12198: PUSH
12199: LD_EXP 88
12203: AND
12204: IFFALSE 12303
12206: GO 12208
12208: DISABLE
12209: LD_INT 0
12211: PPUSH
12212: PPUSH
// begin enable ;
12213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12214: LD_ADDR_VAR 0 1
12218: PUSH
12219: LD_INT 22
12221: PUSH
12222: LD_OWVAR 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 61
12233: PUSH
12234: EMPTY
12235: LIST
12236: PUSH
12237: LD_INT 33
12239: PUSH
12240: LD_INT 2
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: ST_TO_ADDR
// if not tmp then
12257: LD_VAR 0 1
12261: NOT
12262: IFFALSE 12266
// exit ;
12264: GO 12303
// for i in tmp do
12266: LD_ADDR_VAR 0 2
12270: PUSH
12271: LD_VAR 0 1
12275: PUSH
12276: FOR_IN
12277: IFFALSE 12301
// if IsControledBy ( i ) then
12279: LD_VAR 0 2
12283: PPUSH
12284: CALL_OW 312
12288: IFFALSE 12299
// ComUnlink ( i ) ;
12290: LD_VAR 0 2
12294: PPUSH
12295: CALL_OW 136
12299: GO 12276
12301: POP
12302: POP
// end ;
12303: PPOPN 2
12305: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12306: LD_EXP 58
12310: PUSH
12311: LD_EXP 89
12315: AND
12316: IFFALSE 12456
12318: GO 12320
12320: DISABLE
12321: LD_INT 0
12323: PPUSH
12324: PPUSH
// begin ToLua ( displayPowell(); ) ;
12325: LD_STRING displayPowell();
12327: PPUSH
12328: CALL_OW 559
// uc_side := 0 ;
12332: LD_ADDR_OWVAR 20
12336: PUSH
12337: LD_INT 0
12339: ST_TO_ADDR
// uc_nation := 2 ;
12340: LD_ADDR_OWVAR 21
12344: PUSH
12345: LD_INT 2
12347: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12348: LD_ADDR_OWVAR 37
12352: PUSH
12353: LD_INT 14
12355: ST_TO_ADDR
// vc_engine := engine_siberite ;
12356: LD_ADDR_OWVAR 39
12360: PUSH
12361: LD_INT 3
12363: ST_TO_ADDR
// vc_control := control_apeman ;
12364: LD_ADDR_OWVAR 38
12368: PUSH
12369: LD_INT 5
12371: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12372: LD_ADDR_OWVAR 40
12376: PUSH
12377: LD_INT 29
12379: ST_TO_ADDR
// un := CreateVehicle ;
12380: LD_ADDR_VAR 0 2
12384: PUSH
12385: CALL_OW 45
12389: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12390: LD_VAR 0 2
12394: PPUSH
12395: LD_INT 1
12397: PPUSH
12398: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12402: LD_INT 35
12404: PPUSH
12405: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12409: LD_VAR 0 2
12413: PPUSH
12414: LD_INT 22
12416: PUSH
12417: LD_OWVAR 2
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PPUSH
12426: CALL_OW 69
12430: PPUSH
12431: LD_VAR 0 2
12435: PPUSH
12436: CALL_OW 74
12440: PPUSH
12441: CALL_OW 115
// until IsDead ( un ) ;
12445: LD_VAR 0 2
12449: PPUSH
12450: CALL_OW 301
12454: IFFALSE 12402
// end ;
12456: PPOPN 2
12458: END
// every 0 0$1 trigger StreamModeActive and sStu do
12459: LD_EXP 58
12463: PUSH
12464: LD_EXP 97
12468: AND
12469: IFFALSE 12485
12471: GO 12473
12473: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12474: LD_STRING displayStucuk();
12476: PPUSH
12477: CALL_OW 559
// ResetFog ;
12481: CALL_OW 335
// end ;
12485: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12486: LD_EXP 58
12490: PUSH
12491: LD_EXP 90
12495: AND
12496: IFFALSE 12637
12498: GO 12500
12500: DISABLE
12501: LD_INT 0
12503: PPUSH
12504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12505: LD_ADDR_VAR 0 2
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_OWVAR 2
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if not tmp then
12541: LD_VAR 0 2
12545: NOT
12546: IFFALSE 12550
// exit ;
12548: GO 12637
// un := tmp [ rand ( 1 , tmp ) ] ;
12550: LD_ADDR_VAR 0 1
12554: PUSH
12555: LD_VAR 0 2
12559: PUSH
12560: LD_INT 1
12562: PPUSH
12563: LD_VAR 0 2
12567: PPUSH
12568: CALL_OW 12
12572: ARRAY
12573: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12574: LD_VAR 0 1
12578: PPUSH
12579: LD_INT 0
12581: PPUSH
12582: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12586: LD_VAR 0 1
12590: PPUSH
12591: LD_OWVAR 3
12595: PUSH
12596: LD_VAR 0 1
12600: DIFF
12601: PPUSH
12602: LD_VAR 0 1
12606: PPUSH
12607: CALL_OW 74
12611: PPUSH
12612: CALL_OW 115
// wait ( 0 0$20 ) ;
12616: LD_INT 700
12618: PPUSH
12619: CALL_OW 67
// SetSide ( un , your_side ) ;
12623: LD_VAR 0 1
12627: PPUSH
12628: LD_OWVAR 2
12632: PPUSH
12633: CALL_OW 235
// end ;
12637: PPOPN 2
12639: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12640: LD_EXP 58
12644: PUSH
12645: LD_EXP 91
12649: AND
12650: IFFALSE 12756
12652: GO 12654
12654: DISABLE
12655: LD_INT 0
12657: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12658: LD_ADDR_VAR 0 1
12662: PUSH
12663: LD_INT 22
12665: PUSH
12666: LD_OWVAR 2
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 2
12677: PUSH
12678: LD_INT 30
12680: PUSH
12681: LD_INT 0
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 30
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 69
12711: ST_TO_ADDR
// if not depot then
12712: LD_VAR 0 1
12716: NOT
12717: IFFALSE 12721
// exit ;
12719: GO 12756
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12721: LD_VAR 0 1
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PPUSH
12730: CALL_OW 250
12734: PPUSH
12735: LD_VAR 0 1
12739: PUSH
12740: LD_INT 1
12742: ARRAY
12743: PPUSH
12744: CALL_OW 251
12748: PPUSH
12749: LD_INT 70
12751: PPUSH
12752: CALL_OW 495
// end ;
12756: PPOPN 1
12758: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12759: LD_EXP 58
12763: PUSH
12764: LD_EXP 92
12768: AND
12769: IFFALSE 12980
12771: GO 12773
12773: DISABLE
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12781: LD_ADDR_VAR 0 5
12785: PUSH
12786: LD_INT 22
12788: PUSH
12789: LD_OWVAR 2
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 21
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PPUSH
12812: CALL_OW 69
12816: ST_TO_ADDR
// if not tmp then
12817: LD_VAR 0 5
12821: NOT
12822: IFFALSE 12826
// exit ;
12824: GO 12980
// for i in tmp do
12826: LD_ADDR_VAR 0 1
12830: PUSH
12831: LD_VAR 0 5
12835: PUSH
12836: FOR_IN
12837: IFFALSE 12978
// begin d := rand ( 0 , 5 ) ;
12839: LD_ADDR_VAR 0 4
12843: PUSH
12844: LD_INT 0
12846: PPUSH
12847: LD_INT 5
12849: PPUSH
12850: CALL_OW 12
12854: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12855: LD_ADDR_VAR 0 2
12859: PUSH
12860: LD_VAR 0 1
12864: PPUSH
12865: CALL_OW 250
12869: PPUSH
12870: LD_VAR 0 4
12874: PPUSH
12875: LD_INT 3
12877: PPUSH
12878: LD_INT 12
12880: PPUSH
12881: CALL_OW 12
12885: PPUSH
12886: CALL_OW 272
12890: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12891: LD_ADDR_VAR 0 3
12895: PUSH
12896: LD_VAR 0 1
12900: PPUSH
12901: CALL_OW 251
12905: PPUSH
12906: LD_VAR 0 4
12910: PPUSH
12911: LD_INT 3
12913: PPUSH
12914: LD_INT 12
12916: PPUSH
12917: CALL_OW 12
12921: PPUSH
12922: CALL_OW 273
12926: ST_TO_ADDR
// if ValidHex ( x , y ) then
12927: LD_VAR 0 2
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: CALL_OW 488
12941: IFFALSE 12976
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12943: LD_VAR 0 1
12947: PPUSH
12948: LD_VAR 0 2
12952: PPUSH
12953: LD_VAR 0 3
12957: PPUSH
12958: LD_INT 3
12960: PPUSH
12961: LD_INT 6
12963: PPUSH
12964: CALL_OW 12
12968: PPUSH
12969: LD_INT 1
12971: PPUSH
12972: CALL_OW 483
// end ;
12976: GO 12836
12978: POP
12979: POP
// end ;
12980: PPOPN 5
12982: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12983: LD_EXP 58
12987: PUSH
12988: LD_EXP 93
12992: AND
12993: IFFALSE 13087
12995: GO 12997
12997: DISABLE
12998: LD_INT 0
13000: PPUSH
13001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13002: LD_ADDR_VAR 0 2
13006: PUSH
13007: LD_INT 22
13009: PUSH
13010: LD_OWVAR 2
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 32
13021: PUSH
13022: LD_INT 1
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 21
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: LIST
13043: PPUSH
13044: CALL_OW 69
13048: ST_TO_ADDR
// if not tmp then
13049: LD_VAR 0 2
13053: NOT
13054: IFFALSE 13058
// exit ;
13056: GO 13087
// for i in tmp do
13058: LD_ADDR_VAR 0 1
13062: PUSH
13063: LD_VAR 0 2
13067: PUSH
13068: FOR_IN
13069: IFFALSE 13085
// SetFuel ( i , 0 ) ;
13071: LD_VAR 0 1
13075: PPUSH
13076: LD_INT 0
13078: PPUSH
13079: CALL_OW 240
13083: GO 13068
13085: POP
13086: POP
// end ;
13087: PPOPN 2
13089: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13090: LD_EXP 58
13094: PUSH
13095: LD_EXP 94
13099: AND
13100: IFFALSE 13166
13102: GO 13104
13104: DISABLE
13105: LD_INT 0
13107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_INT 22
13115: PUSH
13116: LD_OWVAR 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 30
13127: PUSH
13128: LD_INT 29
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 69
13143: ST_TO_ADDR
// if not tmp then
13144: LD_VAR 0 1
13148: NOT
13149: IFFALSE 13153
// exit ;
13151: GO 13166
// DestroyUnit ( tmp [ 1 ] ) ;
13153: LD_VAR 0 1
13157: PUSH
13158: LD_INT 1
13160: ARRAY
13161: PPUSH
13162: CALL_OW 65
// end ;
13166: PPOPN 1
13168: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13169: LD_EXP 58
13173: PUSH
13174: LD_EXP 96
13178: AND
13179: IFFALSE 13308
13181: GO 13183
13183: DISABLE
13184: LD_INT 0
13186: PPUSH
// begin uc_side := 0 ;
13187: LD_ADDR_OWVAR 20
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// uc_nation := nation_arabian ;
13195: LD_ADDR_OWVAR 21
13199: PUSH
13200: LD_INT 2
13202: ST_TO_ADDR
// hc_gallery :=  ;
13203: LD_ADDR_OWVAR 33
13207: PUSH
13208: LD_STRING 
13210: ST_TO_ADDR
// hc_name :=  ;
13211: LD_ADDR_OWVAR 26
13215: PUSH
13216: LD_STRING 
13218: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13219: LD_INT 1
13221: PPUSH
13222: LD_INT 11
13224: PPUSH
13225: LD_INT 10
13227: PPUSH
13228: CALL_OW 380
// un := CreateHuman ;
13232: LD_ADDR_VAR 0 1
13236: PUSH
13237: CALL_OW 44
13241: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13242: LD_VAR 0 1
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13254: LD_INT 35
13256: PPUSH
13257: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13261: LD_VAR 0 1
13265: PPUSH
13266: LD_INT 22
13268: PUSH
13269: LD_OWVAR 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PPUSH
13278: CALL_OW 69
13282: PPUSH
13283: LD_VAR 0 1
13287: PPUSH
13288: CALL_OW 74
13292: PPUSH
13293: CALL_OW 115
// until IsDead ( un ) ;
13297: LD_VAR 0 1
13301: PPUSH
13302: CALL_OW 301
13306: IFFALSE 13254
// end ;
13308: PPOPN 1
13310: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13311: LD_EXP 58
13315: PUSH
13316: LD_EXP 98
13320: AND
13321: IFFALSE 13333
13323: GO 13325
13325: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13326: LD_STRING earthquake(getX(game), 0, 32)
13328: PPUSH
13329: CALL_OW 559
13333: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13334: LD_EXP 58
13338: PUSH
13339: LD_EXP 99
13343: AND
13344: IFFALSE 13435
13346: GO 13348
13348: DISABLE
13349: LD_INT 0
13351: PPUSH
// begin enable ;
13352: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13353: LD_ADDR_VAR 0 1
13357: PUSH
13358: LD_INT 22
13360: PUSH
13361: LD_OWVAR 2
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 21
13372: PUSH
13373: LD_INT 2
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 33
13382: PUSH
13383: LD_INT 3
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: PPUSH
13395: CALL_OW 69
13399: ST_TO_ADDR
// if not tmp then
13400: LD_VAR 0 1
13404: NOT
13405: IFFALSE 13409
// exit ;
13407: GO 13435
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13409: LD_VAR 0 1
13413: PUSH
13414: LD_INT 1
13416: PPUSH
13417: LD_VAR 0 1
13421: PPUSH
13422: CALL_OW 12
13426: ARRAY
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 234
// end ;
13435: PPOPN 1
13437: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13438: LD_EXP 58
13442: PUSH
13443: LD_EXP 100
13447: AND
13448: IFFALSE 13589
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
13456: PPUSH
13457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13458: LD_ADDR_VAR 0 3
13462: PUSH
13463: LD_INT 22
13465: PUSH
13466: LD_OWVAR 2
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 25
13477: PUSH
13478: LD_INT 1
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: ST_TO_ADDR
// if not tmp then
13494: LD_VAR 0 3
13498: NOT
13499: IFFALSE 13503
// exit ;
13501: GO 13589
// un := tmp [ rand ( 1 , tmp ) ] ;
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 3
13512: PUSH
13513: LD_INT 1
13515: PPUSH
13516: LD_VAR 0 3
13520: PPUSH
13521: CALL_OW 12
13525: ARRAY
13526: ST_TO_ADDR
// if Crawls ( un ) then
13527: LD_VAR 0 2
13531: PPUSH
13532: CALL_OW 318
13536: IFFALSE 13547
// ComWalk ( un ) ;
13538: LD_VAR 0 2
13542: PPUSH
13543: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13547: LD_VAR 0 2
13551: PPUSH
13552: LD_INT 9
13554: PPUSH
13555: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13559: LD_INT 28
13561: PPUSH
13562: LD_OWVAR 2
13566: PPUSH
13567: LD_INT 2
13569: PPUSH
13570: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13574: LD_INT 29
13576: PPUSH
13577: LD_OWVAR 2
13581: PPUSH
13582: LD_INT 2
13584: PPUSH
13585: CALL_OW 322
// end ;
13589: PPOPN 3
13591: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13592: LD_EXP 58
13596: PUSH
13597: LD_EXP 101
13601: AND
13602: IFFALSE 13713
13604: GO 13606
13606: DISABLE
13607: LD_INT 0
13609: PPUSH
13610: PPUSH
13611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13612: LD_ADDR_VAR 0 3
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_OWVAR 2
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 25
13631: PUSH
13632: LD_INT 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: ST_TO_ADDR
// if not tmp then
13648: LD_VAR 0 3
13652: NOT
13653: IFFALSE 13657
// exit ;
13655: GO 13713
// un := tmp [ rand ( 1 , tmp ) ] ;
13657: LD_ADDR_VAR 0 2
13661: PUSH
13662: LD_VAR 0 3
13666: PUSH
13667: LD_INT 1
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: CALL_OW 12
13679: ARRAY
13680: ST_TO_ADDR
// if Crawls ( un ) then
13681: LD_VAR 0 2
13685: PPUSH
13686: CALL_OW 318
13690: IFFALSE 13701
// ComWalk ( un ) ;
13692: LD_VAR 0 2
13696: PPUSH
13697: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13701: LD_VAR 0 2
13705: PPUSH
13706: LD_INT 8
13708: PPUSH
13709: CALL_OW 336
// end ;
13713: PPOPN 3
13715: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13716: LD_EXP 58
13720: PUSH
13721: LD_EXP 102
13725: AND
13726: IFFALSE 13870
13728: GO 13730
13730: DISABLE
13731: LD_INT 0
13733: PPUSH
13734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13735: LD_ADDR_VAR 0 2
13739: PUSH
13740: LD_INT 22
13742: PUSH
13743: LD_OWVAR 2
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 21
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 2
13764: PUSH
13765: LD_INT 34
13767: PUSH
13768: LD_INT 12
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 34
13777: PUSH
13778: LD_INT 51
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 34
13787: PUSH
13788: LD_INT 32
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: ST_TO_ADDR
// if not tmp then
13811: LD_VAR 0 2
13815: NOT
13816: IFFALSE 13820
// exit ;
13818: GO 13870
// for i in tmp do
13820: LD_ADDR_VAR 0 1
13824: PUSH
13825: LD_VAR 0 2
13829: PUSH
13830: FOR_IN
13831: IFFALSE 13868
// if GetCargo ( i , mat_artifact ) = 0 then
13833: LD_VAR 0 1
13837: PPUSH
13838: LD_INT 4
13840: PPUSH
13841: CALL_OW 289
13845: PUSH
13846: LD_INT 0
13848: EQUAL
13849: IFFALSE 13866
// SetCargo ( i , mat_siberit , 100 ) ;
13851: LD_VAR 0 1
13855: PPUSH
13856: LD_INT 3
13858: PPUSH
13859: LD_INT 100
13861: PPUSH
13862: CALL_OW 290
13866: GO 13830
13868: POP
13869: POP
// end ;
13870: PPOPN 2
13872: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13873: LD_EXP 58
13877: PUSH
13878: LD_EXP 103
13882: AND
13883: IFFALSE 14066
13885: GO 13887
13887: DISABLE
13888: LD_INT 0
13890: PPUSH
13891: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13892: LD_ADDR_VAR 0 2
13896: PUSH
13897: LD_INT 22
13899: PUSH
13900: LD_OWVAR 2
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: ST_TO_ADDR
// if not tmp then
13914: LD_VAR 0 2
13918: NOT
13919: IFFALSE 13923
// exit ;
13921: GO 14066
// for i := 1 to 2 do
13923: LD_ADDR_VAR 0 1
13927: PUSH
13928: DOUBLE
13929: LD_INT 1
13931: DEC
13932: ST_TO_ADDR
13933: LD_INT 2
13935: PUSH
13936: FOR_TO
13937: IFFALSE 14064
// begin uc_side := your_side ;
13939: LD_ADDR_OWVAR 20
13943: PUSH
13944: LD_OWVAR 2
13948: ST_TO_ADDR
// uc_nation := nation_american ;
13949: LD_ADDR_OWVAR 21
13953: PUSH
13954: LD_INT 1
13956: ST_TO_ADDR
// vc_chassis := us_morphling ;
13957: LD_ADDR_OWVAR 37
13961: PUSH
13962: LD_INT 5
13964: ST_TO_ADDR
// vc_engine := engine_siberite ;
13965: LD_ADDR_OWVAR 39
13969: PUSH
13970: LD_INT 3
13972: ST_TO_ADDR
// vc_control := control_computer ;
13973: LD_ADDR_OWVAR 38
13977: PUSH
13978: LD_INT 3
13980: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13981: LD_ADDR_OWVAR 40
13985: PUSH
13986: LD_INT 10
13988: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13989: LD_VAR 0 2
13993: PUSH
13994: LD_INT 1
13996: ARRAY
13997: PPUSH
13998: CALL_OW 310
14002: NOT
14003: IFFALSE 14050
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14005: CALL_OW 45
14009: PPUSH
14010: LD_VAR 0 2
14014: PUSH
14015: LD_INT 1
14017: ARRAY
14018: PPUSH
14019: CALL_OW 250
14023: PPUSH
14024: LD_VAR 0 2
14028: PUSH
14029: LD_INT 1
14031: ARRAY
14032: PPUSH
14033: CALL_OW 251
14037: PPUSH
14038: LD_INT 12
14040: PPUSH
14041: LD_INT 1
14043: PPUSH
14044: CALL_OW 50
14048: GO 14062
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14050: CALL_OW 45
14054: PPUSH
14055: LD_INT 1
14057: PPUSH
14058: CALL_OW 51
// end ;
14062: GO 13936
14064: POP
14065: POP
// end ;
14066: PPOPN 2
14068: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14069: LD_EXP 58
14073: PUSH
14074: LD_EXP 104
14078: AND
14079: IFFALSE 14301
14081: GO 14083
14083: DISABLE
14084: LD_INT 0
14086: PPUSH
14087: PPUSH
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14092: LD_ADDR_VAR 0 6
14096: PUSH
14097: LD_INT 22
14099: PUSH
14100: LD_OWVAR 2
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 21
14111: PUSH
14112: LD_INT 1
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 3
14121: PUSH
14122: LD_INT 23
14124: PUSH
14125: LD_INT 0
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: ST_TO_ADDR
// if not tmp then
14146: LD_VAR 0 6
14150: NOT
14151: IFFALSE 14155
// exit ;
14153: GO 14301
// s1 := rand ( 1 , 4 ) ;
14155: LD_ADDR_VAR 0 2
14159: PUSH
14160: LD_INT 1
14162: PPUSH
14163: LD_INT 4
14165: PPUSH
14166: CALL_OW 12
14170: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14171: LD_ADDR_VAR 0 4
14175: PUSH
14176: LD_VAR 0 6
14180: PUSH
14181: LD_INT 1
14183: ARRAY
14184: PPUSH
14185: LD_VAR 0 2
14189: PPUSH
14190: CALL_OW 259
14194: ST_TO_ADDR
// if s1 = 1 then
14195: LD_VAR 0 2
14199: PUSH
14200: LD_INT 1
14202: EQUAL
14203: IFFALSE 14223
// s2 := rand ( 2 , 4 ) else
14205: LD_ADDR_VAR 0 3
14209: PUSH
14210: LD_INT 2
14212: PPUSH
14213: LD_INT 4
14215: PPUSH
14216: CALL_OW 12
14220: ST_TO_ADDR
14221: GO 14231
// s2 := 1 ;
14223: LD_ADDR_VAR 0 3
14227: PUSH
14228: LD_INT 1
14230: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14231: LD_ADDR_VAR 0 5
14235: PUSH
14236: LD_VAR 0 6
14240: PUSH
14241: LD_INT 1
14243: ARRAY
14244: PPUSH
14245: LD_VAR 0 3
14249: PPUSH
14250: CALL_OW 259
14254: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14255: LD_VAR 0 6
14259: PUSH
14260: LD_INT 1
14262: ARRAY
14263: PPUSH
14264: LD_VAR 0 2
14268: PPUSH
14269: LD_VAR 0 5
14273: PPUSH
14274: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14278: LD_VAR 0 6
14282: PUSH
14283: LD_INT 1
14285: ARRAY
14286: PPUSH
14287: LD_VAR 0 3
14291: PPUSH
14292: LD_VAR 0 4
14296: PPUSH
14297: CALL_OW 237
// end ;
14301: PPOPN 6
14303: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14304: LD_EXP 58
14308: PUSH
14309: LD_EXP 105
14313: AND
14314: IFFALSE 14393
14316: GO 14318
14318: DISABLE
14319: LD_INT 0
14321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14322: LD_ADDR_VAR 0 1
14326: PUSH
14327: LD_INT 22
14329: PUSH
14330: LD_OWVAR 2
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 30
14341: PUSH
14342: LD_INT 3
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PPUSH
14353: CALL_OW 69
14357: ST_TO_ADDR
// if not tmp then
14358: LD_VAR 0 1
14362: NOT
14363: IFFALSE 14367
// exit ;
14365: GO 14393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14367: LD_VAR 0 1
14371: PUSH
14372: LD_INT 1
14374: PPUSH
14375: LD_VAR 0 1
14379: PPUSH
14380: CALL_OW 12
14384: ARRAY
14385: PPUSH
14386: LD_INT 1
14388: PPUSH
14389: CALL_OW 234
// end ;
14393: PPOPN 1
14395: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14396: LD_EXP 58
14400: PUSH
14401: LD_EXP 106
14405: AND
14406: IFFALSE 14518
14408: GO 14410
14410: DISABLE
14411: LD_INT 0
14413: PPUSH
14414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14415: LD_ADDR_VAR 0 2
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_OWVAR 2
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 2
14434: PUSH
14435: LD_INT 30
14437: PUSH
14438: LD_INT 27
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 30
14447: PUSH
14448: LD_INT 26
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 30
14457: PUSH
14458: LD_INT 28
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 69
14479: ST_TO_ADDR
// if not tmp then
14480: LD_VAR 0 2
14484: NOT
14485: IFFALSE 14489
// exit ;
14487: GO 14518
// for i in tmp do
14489: LD_ADDR_VAR 0 1
14493: PUSH
14494: LD_VAR 0 2
14498: PUSH
14499: FOR_IN
14500: IFFALSE 14516
// SetLives ( i , 1 ) ;
14502: LD_VAR 0 1
14506: PPUSH
14507: LD_INT 1
14509: PPUSH
14510: CALL_OW 234
14514: GO 14499
14516: POP
14517: POP
// end ;
14518: PPOPN 2
14520: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14521: LD_EXP 58
14525: PUSH
14526: LD_EXP 107
14530: AND
14531: IFFALSE 14805
14533: GO 14535
14535: DISABLE
14536: LD_INT 0
14538: PPUSH
14539: PPUSH
14540: PPUSH
// begin i := rand ( 1 , 7 ) ;
14541: LD_ADDR_VAR 0 1
14545: PUSH
14546: LD_INT 1
14548: PPUSH
14549: LD_INT 7
14551: PPUSH
14552: CALL_OW 12
14556: ST_TO_ADDR
// case i of 1 :
14557: LD_VAR 0 1
14561: PUSH
14562: LD_INT 1
14564: DOUBLE
14565: EQUAL
14566: IFTRUE 14570
14568: GO 14580
14570: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14571: LD_STRING earthquake(getX(game), 0, 32)
14573: PPUSH
14574: CALL_OW 559
14578: GO 14805
14580: LD_INT 2
14582: DOUBLE
14583: EQUAL
14584: IFTRUE 14588
14586: GO 14602
14588: POP
// begin ToLua ( displayStucuk(); ) ;
14589: LD_STRING displayStucuk();
14591: PPUSH
14592: CALL_OW 559
// ResetFog ;
14596: CALL_OW 335
// end ; 3 :
14600: GO 14805
14602: LD_INT 3
14604: DOUBLE
14605: EQUAL
14606: IFTRUE 14610
14608: GO 14714
14610: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14611: LD_ADDR_VAR 0 2
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_OWVAR 2
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 25
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PPUSH
14642: CALL_OW 69
14646: ST_TO_ADDR
// if not tmp then
14647: LD_VAR 0 2
14651: NOT
14652: IFFALSE 14656
// exit ;
14654: GO 14805
// un := tmp [ rand ( 1 , tmp ) ] ;
14656: LD_ADDR_VAR 0 3
14660: PUSH
14661: LD_VAR 0 2
14665: PUSH
14666: LD_INT 1
14668: PPUSH
14669: LD_VAR 0 2
14673: PPUSH
14674: CALL_OW 12
14678: ARRAY
14679: ST_TO_ADDR
// if Crawls ( un ) then
14680: LD_VAR 0 3
14684: PPUSH
14685: CALL_OW 318
14689: IFFALSE 14700
// ComWalk ( un ) ;
14691: LD_VAR 0 3
14695: PPUSH
14696: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14700: LD_VAR 0 3
14704: PPUSH
14705: LD_INT 8
14707: PPUSH
14708: CALL_OW 336
// end ; 4 :
14712: GO 14805
14714: LD_INT 4
14716: DOUBLE
14717: EQUAL
14718: IFTRUE 14722
14720: GO 14783
14722: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_OWVAR 2
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 30
14742: PUSH
14743: LD_INT 29
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: ST_TO_ADDR
// if not tmp then
14759: LD_VAR 0 2
14763: NOT
14764: IFFALSE 14768
// exit ;
14766: GO 14805
// DestroyUnit ( tmp [ 1 ] ) ;
14768: LD_VAR 0 2
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: CALL_OW 65
// end ; 5 .. 7 :
14781: GO 14805
14783: LD_INT 5
14785: DOUBLE
14786: GREATEREQUAL
14787: IFFALSE 14795
14789: LD_INT 7
14791: DOUBLE
14792: LESSEQUAL
14793: IFTRUE 14797
14795: GO 14804
14797: POP
// StreamSibBomb ; end ;
14798: CALL 11055 0 0
14802: GO 14805
14804: POP
// end ;
14805: PPOPN 3
14807: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14808: LD_EXP 58
14812: PUSH
14813: LD_EXP 108
14817: AND
14818: IFFALSE 14974
14820: GO 14822
14822: DISABLE
14823: LD_INT 0
14825: PPUSH
14826: PPUSH
14827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14828: LD_ADDR_VAR 0 2
14832: PUSH
14833: LD_INT 81
14835: PUSH
14836: LD_OWVAR 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 2
14847: PUSH
14848: LD_INT 21
14850: PUSH
14851: LD_INT 1
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 21
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PPUSH
14877: CALL_OW 69
14881: ST_TO_ADDR
// if not tmp then
14882: LD_VAR 0 2
14886: NOT
14887: IFFALSE 14891
// exit ;
14889: GO 14974
// p := 0 ;
14891: LD_ADDR_VAR 0 3
14895: PUSH
14896: LD_INT 0
14898: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14899: LD_INT 35
14901: PPUSH
14902: CALL_OW 67
// p := p + 1 ;
14906: LD_ADDR_VAR 0 3
14910: PUSH
14911: LD_VAR 0 3
14915: PUSH
14916: LD_INT 1
14918: PLUS
14919: ST_TO_ADDR
// for i in tmp do
14920: LD_ADDR_VAR 0 1
14924: PUSH
14925: LD_VAR 0 2
14929: PUSH
14930: FOR_IN
14931: IFFALSE 14962
// if GetLives ( i ) < 1000 then
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 256
14942: PUSH
14943: LD_INT 1000
14945: LESS
14946: IFFALSE 14960
// SetLives ( i , 1000 ) ;
14948: LD_VAR 0 1
14952: PPUSH
14953: LD_INT 1000
14955: PPUSH
14956: CALL_OW 234
14960: GO 14930
14962: POP
14963: POP
// until p > 20 ;
14964: LD_VAR 0 3
14968: PUSH
14969: LD_INT 20
14971: GREATER
14972: IFFALSE 14899
// end ;
14974: PPOPN 3
14976: END
// every 0 0$1 trigger StreamModeActive and sTime do
14977: LD_EXP 58
14981: PUSH
14982: LD_EXP 109
14986: AND
14987: IFFALSE 15022
14989: GO 14991
14991: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14992: LD_INT 28
14994: PPUSH
14995: LD_OWVAR 2
14999: PPUSH
15000: LD_INT 2
15002: PPUSH
15003: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15007: LD_INT 30
15009: PPUSH
15010: LD_OWVAR 2
15014: PPUSH
15015: LD_INT 2
15017: PPUSH
15018: CALL_OW 322
// end ;
15022: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15023: LD_EXP 58
15027: PUSH
15028: LD_EXP 110
15032: AND
15033: IFFALSE 15154
15035: GO 15037
15037: DISABLE
15038: LD_INT 0
15040: PPUSH
15041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: LD_INT 22
15049: PUSH
15050: LD_OWVAR 2
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 3
15071: PUSH
15072: LD_INT 23
15074: PUSH
15075: LD_INT 0
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: ST_TO_ADDR
// if not tmp then
15096: LD_VAR 0 2
15100: NOT
15101: IFFALSE 15105
// exit ;
15103: GO 15154
// for i in tmp do
15105: LD_ADDR_VAR 0 1
15109: PUSH
15110: LD_VAR 0 2
15114: PUSH
15115: FOR_IN
15116: IFFALSE 15152
// begin if Crawls ( i ) then
15118: LD_VAR 0 1
15122: PPUSH
15123: CALL_OW 318
15127: IFFALSE 15138
// ComWalk ( i ) ;
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 138
// SetClass ( i , 2 ) ;
15138: LD_VAR 0 1
15142: PPUSH
15143: LD_INT 2
15145: PPUSH
15146: CALL_OW 336
// end ;
15150: GO 15115
15152: POP
15153: POP
// end ;
15154: PPOPN 2
15156: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15157: LD_EXP 58
15161: PUSH
15162: LD_EXP 111
15166: AND
15167: IFFALSE 15448
15169: GO 15171
15171: DISABLE
15172: LD_INT 0
15174: PPUSH
15175: PPUSH
15176: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15177: LD_OWVAR 2
15181: PPUSH
15182: LD_INT 9
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: LD_INT 1
15190: PPUSH
15191: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15195: LD_INT 9
15197: PPUSH
15198: LD_OWVAR 2
15202: PPUSH
15203: CALL_OW 343
// uc_side := 9 ;
15207: LD_ADDR_OWVAR 20
15211: PUSH
15212: LD_INT 9
15214: ST_TO_ADDR
// uc_nation := 2 ;
15215: LD_ADDR_OWVAR 21
15219: PUSH
15220: LD_INT 2
15222: ST_TO_ADDR
// hc_name := Dark Warrior ;
15223: LD_ADDR_OWVAR 26
15227: PUSH
15228: LD_STRING Dark Warrior
15230: ST_TO_ADDR
// hc_gallery :=  ;
15231: LD_ADDR_OWVAR 33
15235: PUSH
15236: LD_STRING 
15238: ST_TO_ADDR
// hc_noskilllimit := true ;
15239: LD_ADDR_OWVAR 76
15243: PUSH
15244: LD_INT 1
15246: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15247: LD_ADDR_OWVAR 31
15251: PUSH
15252: LD_INT 30
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 30
15260: PUSH
15261: LD_INT 30
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: ST_TO_ADDR
// un := CreateHuman ;
15270: LD_ADDR_VAR 0 3
15274: PUSH
15275: CALL_OW 44
15279: ST_TO_ADDR
// hc_noskilllimit := false ;
15280: LD_ADDR_OWVAR 76
15284: PUSH
15285: LD_INT 0
15287: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15288: LD_VAR 0 3
15292: PPUSH
15293: LD_INT 1
15295: PPUSH
15296: CALL_OW 51
// p := 0 ;
15300: LD_ADDR_VAR 0 2
15304: PUSH
15305: LD_INT 0
15307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15308: LD_INT 35
15310: PPUSH
15311: CALL_OW 67
// p := p + 1 ;
15315: LD_ADDR_VAR 0 2
15319: PUSH
15320: LD_VAR 0 2
15324: PUSH
15325: LD_INT 1
15327: PLUS
15328: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15329: LD_VAR 0 3
15333: PPUSH
15334: CALL_OW 256
15338: PUSH
15339: LD_INT 1000
15341: LESS
15342: IFFALSE 15356
// SetLives ( un , 1000 ) ;
15344: LD_VAR 0 3
15348: PPUSH
15349: LD_INT 1000
15351: PPUSH
15352: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15356: LD_VAR 0 3
15360: PPUSH
15361: LD_INT 81
15363: PUSH
15364: LD_OWVAR 2
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 91
15375: PUSH
15376: LD_VAR 0 3
15380: PUSH
15381: LD_INT 30
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PPUSH
15393: CALL_OW 69
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: CALL_OW 74
15407: PPUSH
15408: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15412: LD_VAR 0 2
15416: PUSH
15417: LD_INT 60
15419: GREATER
15420: PUSH
15421: LD_VAR 0 3
15425: PPUSH
15426: CALL_OW 301
15430: OR
15431: IFFALSE 15308
// if un then
15433: LD_VAR 0 3
15437: IFFALSE 15448
// RemoveUnit ( un ) ;
15439: LD_VAR 0 3
15443: PPUSH
15444: CALL_OW 64
// end ;
15448: PPOPN 3
15450: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15451: LD_INT 0
15453: PPUSH
// case cmd of 301 :
15454: LD_VAR 0 1
15458: PUSH
15459: LD_INT 301
15461: DOUBLE
15462: EQUAL
15463: IFTRUE 15467
15465: GO 15499
15467: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15468: LD_VAR 0 6
15472: PPUSH
15473: LD_VAR 0 7
15477: PPUSH
15478: LD_VAR 0 8
15482: PPUSH
15483: LD_VAR 0 4
15487: PPUSH
15488: LD_VAR 0 5
15492: PPUSH
15493: CALL 16700 0 5
15497: GO 15620
15499: LD_INT 302
15501: DOUBLE
15502: EQUAL
15503: IFTRUE 15507
15505: GO 15544
15507: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15508: LD_VAR 0 6
15512: PPUSH
15513: LD_VAR 0 7
15517: PPUSH
15518: LD_VAR 0 8
15522: PPUSH
15523: LD_VAR 0 9
15527: PPUSH
15528: LD_VAR 0 4
15532: PPUSH
15533: LD_VAR 0 5
15537: PPUSH
15538: CALL 16791 0 6
15542: GO 15620
15544: LD_INT 303
15546: DOUBLE
15547: EQUAL
15548: IFTRUE 15552
15550: GO 15589
15552: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15553: LD_VAR 0 6
15557: PPUSH
15558: LD_VAR 0 7
15562: PPUSH
15563: LD_VAR 0 8
15567: PPUSH
15568: LD_VAR 0 9
15572: PPUSH
15573: LD_VAR 0 4
15577: PPUSH
15578: LD_VAR 0 5
15582: PPUSH
15583: CALL 15625 0 6
15587: GO 15620
15589: LD_INT 304
15591: DOUBLE
15592: EQUAL
15593: IFTRUE 15597
15595: GO 15619
15597: POP
// hHackTeleport ( unit , x , y ) ; end ;
15598: LD_VAR 0 2
15602: PPUSH
15603: LD_VAR 0 4
15607: PPUSH
15608: LD_VAR 0 5
15612: PPUSH
15613: CALL 17384 0 3
15617: GO 15620
15619: POP
// end ;
15620: LD_VAR 0 12
15624: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15629: LD_VAR 0 1
15633: PUSH
15634: LD_INT 1
15636: LESS
15637: PUSH
15638: LD_VAR 0 1
15642: PUSH
15643: LD_INT 3
15645: GREATER
15646: OR
15647: PUSH
15648: LD_VAR 0 5
15652: PPUSH
15653: LD_VAR 0 6
15657: PPUSH
15658: CALL_OW 428
15662: OR
15663: IFFALSE 15667
// exit ;
15665: GO 16387
// uc_side := your_side ;
15667: LD_ADDR_OWVAR 20
15671: PUSH
15672: LD_OWVAR 2
15676: ST_TO_ADDR
// uc_nation := nation ;
15677: LD_ADDR_OWVAR 21
15681: PUSH
15682: LD_VAR 0 1
15686: ST_TO_ADDR
// bc_level = 1 ;
15687: LD_ADDR_OWVAR 43
15691: PUSH
15692: LD_INT 1
15694: ST_TO_ADDR
// case btype of 1 :
15695: LD_VAR 0 2
15699: PUSH
15700: LD_INT 1
15702: DOUBLE
15703: EQUAL
15704: IFTRUE 15708
15706: GO 15719
15708: POP
// bc_type := b_depot ; 2 :
15709: LD_ADDR_OWVAR 42
15713: PUSH
15714: LD_INT 0
15716: ST_TO_ADDR
15717: GO 16331
15719: LD_INT 2
15721: DOUBLE
15722: EQUAL
15723: IFTRUE 15727
15725: GO 15738
15727: POP
// bc_type := b_warehouse ; 3 :
15728: LD_ADDR_OWVAR 42
15732: PUSH
15733: LD_INT 1
15735: ST_TO_ADDR
15736: GO 16331
15738: LD_INT 3
15740: DOUBLE
15741: EQUAL
15742: IFTRUE 15746
15744: GO 15757
15746: POP
// bc_type := b_lab ; 4 .. 9 :
15747: LD_ADDR_OWVAR 42
15751: PUSH
15752: LD_INT 6
15754: ST_TO_ADDR
15755: GO 16331
15757: LD_INT 4
15759: DOUBLE
15760: GREATEREQUAL
15761: IFFALSE 15769
15763: LD_INT 9
15765: DOUBLE
15766: LESSEQUAL
15767: IFTRUE 15771
15769: GO 15823
15771: POP
// begin bc_type := b_lab_half ;
15772: LD_ADDR_OWVAR 42
15776: PUSH
15777: LD_INT 7
15779: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15780: LD_ADDR_OWVAR 44
15784: PUSH
15785: LD_INT 10
15787: PUSH
15788: LD_INT 11
15790: PUSH
15791: LD_INT 12
15793: PUSH
15794: LD_INT 15
15796: PUSH
15797: LD_INT 14
15799: PUSH
15800: LD_INT 13
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: PUSH
15811: LD_VAR 0 2
15815: PUSH
15816: LD_INT 3
15818: MINUS
15819: ARRAY
15820: ST_TO_ADDR
// end ; 10 .. 13 :
15821: GO 16331
15823: LD_INT 10
15825: DOUBLE
15826: GREATEREQUAL
15827: IFFALSE 15835
15829: LD_INT 13
15831: DOUBLE
15832: LESSEQUAL
15833: IFTRUE 15837
15835: GO 15914
15837: POP
// begin bc_type := b_lab_full ;
15838: LD_ADDR_OWVAR 42
15842: PUSH
15843: LD_INT 8
15845: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15846: LD_ADDR_OWVAR 44
15850: PUSH
15851: LD_INT 10
15853: PUSH
15854: LD_INT 12
15856: PUSH
15857: LD_INT 14
15859: PUSH
15860: LD_INT 13
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: PUSH
15869: LD_VAR 0 2
15873: PUSH
15874: LD_INT 9
15876: MINUS
15877: ARRAY
15878: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15879: LD_ADDR_OWVAR 45
15883: PUSH
15884: LD_INT 11
15886: PUSH
15887: LD_INT 15
15889: PUSH
15890: LD_INT 12
15892: PUSH
15893: LD_INT 15
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: PUSH
15902: LD_VAR 0 2
15906: PUSH
15907: LD_INT 9
15909: MINUS
15910: ARRAY
15911: ST_TO_ADDR
// end ; 14 :
15912: GO 16331
15914: LD_INT 14
15916: DOUBLE
15917: EQUAL
15918: IFTRUE 15922
15920: GO 15933
15922: POP
// bc_type := b_workshop ; 15 :
15923: LD_ADDR_OWVAR 42
15927: PUSH
15928: LD_INT 2
15930: ST_TO_ADDR
15931: GO 16331
15933: LD_INT 15
15935: DOUBLE
15936: EQUAL
15937: IFTRUE 15941
15939: GO 15952
15941: POP
// bc_type := b_factory ; 16 :
15942: LD_ADDR_OWVAR 42
15946: PUSH
15947: LD_INT 3
15949: ST_TO_ADDR
15950: GO 16331
15952: LD_INT 16
15954: DOUBLE
15955: EQUAL
15956: IFTRUE 15960
15958: GO 15971
15960: POP
// bc_type := b_ext_gun ; 17 :
15961: LD_ADDR_OWVAR 42
15965: PUSH
15966: LD_INT 17
15968: ST_TO_ADDR
15969: GO 16331
15971: LD_INT 17
15973: DOUBLE
15974: EQUAL
15975: IFTRUE 15979
15977: GO 16007
15979: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15980: LD_ADDR_OWVAR 42
15984: PUSH
15985: LD_INT 19
15987: PUSH
15988: LD_INT 23
15990: PUSH
15991: LD_INT 19
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: LD_VAR 0 1
16003: ARRAY
16004: ST_TO_ADDR
16005: GO 16331
16007: LD_INT 18
16009: DOUBLE
16010: EQUAL
16011: IFTRUE 16015
16013: GO 16026
16015: POP
// bc_type := b_ext_radar ; 19 :
16016: LD_ADDR_OWVAR 42
16020: PUSH
16021: LD_INT 20
16023: ST_TO_ADDR
16024: GO 16331
16026: LD_INT 19
16028: DOUBLE
16029: EQUAL
16030: IFTRUE 16034
16032: GO 16045
16034: POP
// bc_type := b_ext_radio ; 20 :
16035: LD_ADDR_OWVAR 42
16039: PUSH
16040: LD_INT 22
16042: ST_TO_ADDR
16043: GO 16331
16045: LD_INT 20
16047: DOUBLE
16048: EQUAL
16049: IFTRUE 16053
16051: GO 16064
16053: POP
// bc_type := b_ext_siberium ; 21 :
16054: LD_ADDR_OWVAR 42
16058: PUSH
16059: LD_INT 21
16061: ST_TO_ADDR
16062: GO 16331
16064: LD_INT 21
16066: DOUBLE
16067: EQUAL
16068: IFTRUE 16072
16070: GO 16083
16072: POP
// bc_type := b_ext_computer ; 22 :
16073: LD_ADDR_OWVAR 42
16077: PUSH
16078: LD_INT 24
16080: ST_TO_ADDR
16081: GO 16331
16083: LD_INT 22
16085: DOUBLE
16086: EQUAL
16087: IFTRUE 16091
16089: GO 16102
16091: POP
// bc_type := b_ext_track ; 23 :
16092: LD_ADDR_OWVAR 42
16096: PUSH
16097: LD_INT 16
16099: ST_TO_ADDR
16100: GO 16331
16102: LD_INT 23
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16110
16108: GO 16121
16110: POP
// bc_type := b_ext_laser ; 24 :
16111: LD_ADDR_OWVAR 42
16115: PUSH
16116: LD_INT 25
16118: ST_TO_ADDR
16119: GO 16331
16121: LD_INT 24
16123: DOUBLE
16124: EQUAL
16125: IFTRUE 16129
16127: GO 16140
16129: POP
// bc_type := b_control_tower ; 25 :
16130: LD_ADDR_OWVAR 42
16134: PUSH
16135: LD_INT 36
16137: ST_TO_ADDR
16138: GO 16331
16140: LD_INT 25
16142: DOUBLE
16143: EQUAL
16144: IFTRUE 16148
16146: GO 16159
16148: POP
// bc_type := b_breastwork ; 26 :
16149: LD_ADDR_OWVAR 42
16153: PUSH
16154: LD_INT 31
16156: ST_TO_ADDR
16157: GO 16331
16159: LD_INT 26
16161: DOUBLE
16162: EQUAL
16163: IFTRUE 16167
16165: GO 16178
16167: POP
// bc_type := b_bunker ; 27 :
16168: LD_ADDR_OWVAR 42
16172: PUSH
16173: LD_INT 32
16175: ST_TO_ADDR
16176: GO 16331
16178: LD_INT 27
16180: DOUBLE
16181: EQUAL
16182: IFTRUE 16186
16184: GO 16197
16186: POP
// bc_type := b_turret ; 28 :
16187: LD_ADDR_OWVAR 42
16191: PUSH
16192: LD_INT 33
16194: ST_TO_ADDR
16195: GO 16331
16197: LD_INT 28
16199: DOUBLE
16200: EQUAL
16201: IFTRUE 16205
16203: GO 16216
16205: POP
// bc_type := b_armoury ; 29 :
16206: LD_ADDR_OWVAR 42
16210: PUSH
16211: LD_INT 4
16213: ST_TO_ADDR
16214: GO 16331
16216: LD_INT 29
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16235
16224: POP
// bc_type := b_barracks ; 30 :
16225: LD_ADDR_OWVAR 42
16229: PUSH
16230: LD_INT 5
16232: ST_TO_ADDR
16233: GO 16331
16235: LD_INT 30
16237: DOUBLE
16238: EQUAL
16239: IFTRUE 16243
16241: GO 16254
16243: POP
// bc_type := b_solar_power ; 31 :
16244: LD_ADDR_OWVAR 42
16248: PUSH
16249: LD_INT 27
16251: ST_TO_ADDR
16252: GO 16331
16254: LD_INT 31
16256: DOUBLE
16257: EQUAL
16258: IFTRUE 16262
16260: GO 16273
16262: POP
// bc_type := b_oil_power ; 32 :
16263: LD_ADDR_OWVAR 42
16267: PUSH
16268: LD_INT 26
16270: ST_TO_ADDR
16271: GO 16331
16273: LD_INT 32
16275: DOUBLE
16276: EQUAL
16277: IFTRUE 16281
16279: GO 16292
16281: POP
// bc_type := b_siberite_power ; 33 :
16282: LD_ADDR_OWVAR 42
16286: PUSH
16287: LD_INT 28
16289: ST_TO_ADDR
16290: GO 16331
16292: LD_INT 33
16294: DOUBLE
16295: EQUAL
16296: IFTRUE 16300
16298: GO 16311
16300: POP
// bc_type := b_oil_mine ; 34 :
16301: LD_ADDR_OWVAR 42
16305: PUSH
16306: LD_INT 29
16308: ST_TO_ADDR
16309: GO 16331
16311: LD_INT 34
16313: DOUBLE
16314: EQUAL
16315: IFTRUE 16319
16317: GO 16330
16319: POP
// bc_type := b_siberite_mine ; end ;
16320: LD_ADDR_OWVAR 42
16324: PUSH
16325: LD_INT 30
16327: ST_TO_ADDR
16328: GO 16331
16330: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16331: LD_ADDR_VAR 0 8
16335: PUSH
16336: LD_VAR 0 5
16340: PPUSH
16341: LD_VAR 0 6
16345: PPUSH
16346: LD_VAR 0 3
16350: PPUSH
16351: CALL_OW 47
16355: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16356: LD_OWVAR 42
16360: PUSH
16361: LD_INT 32
16363: PUSH
16364: LD_INT 33
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: IN
16371: IFFALSE 16387
// PlaceWeaponTurret ( b , weapon ) ;
16373: LD_VAR 0 8
16377: PPUSH
16378: LD_VAR 0 4
16382: PPUSH
16383: CALL_OW 431
// end ;
16387: LD_VAR 0 7
16391: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16392: LD_INT 0
16394: PPUSH
16395: PPUSH
16396: PPUSH
16397: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16398: LD_ADDR_VAR 0 4
16402: PUSH
16403: LD_INT 22
16405: PUSH
16406: LD_OWVAR 2
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: LD_INT 30
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 30
16430: PUSH
16431: LD_INT 1
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PPUSH
16447: CALL_OW 69
16451: ST_TO_ADDR
// if not tmp then
16452: LD_VAR 0 4
16456: NOT
16457: IFFALSE 16461
// exit ;
16459: GO 16520
// for i in tmp do
16461: LD_ADDR_VAR 0 2
16465: PUSH
16466: LD_VAR 0 4
16470: PUSH
16471: FOR_IN
16472: IFFALSE 16518
// for j = 1 to 3 do
16474: LD_ADDR_VAR 0 3
16478: PUSH
16479: DOUBLE
16480: LD_INT 1
16482: DEC
16483: ST_TO_ADDR
16484: LD_INT 3
16486: PUSH
16487: FOR_TO
16488: IFFALSE 16514
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16490: LD_VAR 0 2
16494: PPUSH
16495: CALL_OW 274
16499: PPUSH
16500: LD_VAR 0 3
16504: PPUSH
16505: LD_INT 99999
16507: PPUSH
16508: CALL_OW 277
16512: GO 16487
16514: POP
16515: POP
16516: GO 16471
16518: POP
16519: POP
// end ;
16520: LD_VAR 0 1
16524: RET
// export function hHackSetLevel10 ; var i , j ; begin
16525: LD_INT 0
16527: PPUSH
16528: PPUSH
16529: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16530: LD_ADDR_VAR 0 2
16534: PUSH
16535: LD_INT 21
16537: PUSH
16538: LD_INT 1
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: PUSH
16550: FOR_IN
16551: IFFALSE 16603
// if IsSelected ( i ) then
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 306
16562: IFFALSE 16601
// begin for j := 1 to 4 do
16564: LD_ADDR_VAR 0 3
16568: PUSH
16569: DOUBLE
16570: LD_INT 1
16572: DEC
16573: ST_TO_ADDR
16574: LD_INT 4
16576: PUSH
16577: FOR_TO
16578: IFFALSE 16599
// SetSkill ( i , j , 10 ) ;
16580: LD_VAR 0 2
16584: PPUSH
16585: LD_VAR 0 3
16589: PPUSH
16590: LD_INT 10
16592: PPUSH
16593: CALL_OW 237
16597: GO 16577
16599: POP
16600: POP
// end ;
16601: GO 16550
16603: POP
16604: POP
// end ;
16605: LD_VAR 0 1
16609: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16610: LD_INT 0
16612: PPUSH
16613: PPUSH
16614: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16615: LD_ADDR_VAR 0 2
16619: PUSH
16620: LD_INT 22
16622: PUSH
16623: LD_OWVAR 2
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 21
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PPUSH
16646: CALL_OW 69
16650: PUSH
16651: FOR_IN
16652: IFFALSE 16693
// begin for j := 1 to 4 do
16654: LD_ADDR_VAR 0 3
16658: PUSH
16659: DOUBLE
16660: LD_INT 1
16662: DEC
16663: ST_TO_ADDR
16664: LD_INT 4
16666: PUSH
16667: FOR_TO
16668: IFFALSE 16689
// SetSkill ( i , j , 10 ) ;
16670: LD_VAR 0 2
16674: PPUSH
16675: LD_VAR 0 3
16679: PPUSH
16680: LD_INT 10
16682: PPUSH
16683: CALL_OW 237
16687: GO 16667
16689: POP
16690: POP
// end ;
16691: GO 16651
16693: POP
16694: POP
// end ;
16695: LD_VAR 0 1
16699: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16700: LD_INT 0
16702: PPUSH
// uc_side := your_side ;
16703: LD_ADDR_OWVAR 20
16707: PUSH
16708: LD_OWVAR 2
16712: ST_TO_ADDR
// uc_nation := nation ;
16713: LD_ADDR_OWVAR 21
16717: PUSH
16718: LD_VAR 0 1
16722: ST_TO_ADDR
// InitHc ;
16723: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16727: LD_INT 0
16729: PPUSH
16730: LD_VAR 0 2
16734: PPUSH
16735: LD_VAR 0 3
16739: PPUSH
16740: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16744: LD_VAR 0 4
16748: PPUSH
16749: LD_VAR 0 5
16753: PPUSH
16754: CALL_OW 428
16758: PUSH
16759: LD_INT 0
16761: EQUAL
16762: IFFALSE 16786
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16764: CALL_OW 44
16768: PPUSH
16769: LD_VAR 0 4
16773: PPUSH
16774: LD_VAR 0 5
16778: PPUSH
16779: LD_INT 1
16781: PPUSH
16782: CALL_OW 48
// end ;
16786: LD_VAR 0 6
16790: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16791: LD_INT 0
16793: PPUSH
16794: PPUSH
// uc_side := your_side ;
16795: LD_ADDR_OWVAR 20
16799: PUSH
16800: LD_OWVAR 2
16804: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16805: LD_VAR 0 1
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: LD_INT 2
16815: PUSH
16816: LD_INT 3
16818: PUSH
16819: LD_INT 4
16821: PUSH
16822: LD_INT 5
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: IN
16832: IFFALSE 16844
// uc_nation := nation_american else
16834: LD_ADDR_OWVAR 21
16838: PUSH
16839: LD_INT 1
16841: ST_TO_ADDR
16842: GO 16887
// if chassis in [ 11 , 12 , 13 , 14 ] then
16844: LD_VAR 0 1
16848: PUSH
16849: LD_INT 11
16851: PUSH
16852: LD_INT 12
16854: PUSH
16855: LD_INT 13
16857: PUSH
16858: LD_INT 14
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: IN
16867: IFFALSE 16879
// uc_nation := nation_arabian else
16869: LD_ADDR_OWVAR 21
16873: PUSH
16874: LD_INT 2
16876: ST_TO_ADDR
16877: GO 16887
// uc_nation := nation_russian ;
16879: LD_ADDR_OWVAR 21
16883: PUSH
16884: LD_INT 3
16886: ST_TO_ADDR
// vc_chassis := chassis ;
16887: LD_ADDR_OWVAR 37
16891: PUSH
16892: LD_VAR 0 1
16896: ST_TO_ADDR
// vc_engine := engine ;
16897: LD_ADDR_OWVAR 39
16901: PUSH
16902: LD_VAR 0 2
16906: ST_TO_ADDR
// vc_control := control ;
16907: LD_ADDR_OWVAR 38
16911: PUSH
16912: LD_VAR 0 3
16916: ST_TO_ADDR
// vc_weapon := weapon ;
16917: LD_ADDR_OWVAR 40
16921: PUSH
16922: LD_VAR 0 4
16926: ST_TO_ADDR
// un := CreateVehicle ;
16927: LD_ADDR_VAR 0 8
16931: PUSH
16932: CALL_OW 45
16936: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16937: LD_VAR 0 8
16941: PPUSH
16942: LD_INT 0
16944: PPUSH
16945: LD_INT 5
16947: PPUSH
16948: CALL_OW 12
16952: PPUSH
16953: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16957: LD_VAR 0 8
16961: PPUSH
16962: LD_VAR 0 5
16966: PPUSH
16967: LD_VAR 0 6
16971: PPUSH
16972: LD_INT 1
16974: PPUSH
16975: CALL_OW 48
// end ;
16979: LD_VAR 0 7
16983: RET
// export hInvincible ; every 1 do
16984: GO 16986
16986: DISABLE
// hInvincible := [ ] ;
16987: LD_ADDR_EXP 112
16991: PUSH
16992: EMPTY
16993: ST_TO_ADDR
16994: END
// every 10 do var i ;
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
// begin enable ;
17001: ENABLE
// if not hInvincible then
17002: LD_EXP 112
17006: NOT
17007: IFFALSE 17011
// exit ;
17009: GO 17055
// for i in hInvincible do
17011: LD_ADDR_VAR 0 1
17015: PUSH
17016: LD_EXP 112
17020: PUSH
17021: FOR_IN
17022: IFFALSE 17053
// if GetLives ( i ) < 1000 then
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 256
17033: PUSH
17034: LD_INT 1000
17036: LESS
17037: IFFALSE 17051
// SetLives ( i , 1000 ) ;
17039: LD_VAR 0 1
17043: PPUSH
17044: LD_INT 1000
17046: PPUSH
17047: CALL_OW 234
17051: GO 17021
17053: POP
17054: POP
// end ;
17055: PPOPN 1
17057: END
// export function hHackInvincible ; var i ; begin
17058: LD_INT 0
17060: PPUSH
17061: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17062: LD_ADDR_VAR 0 2
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 21
17072: PUSH
17073: LD_INT 1
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 21
17082: PUSH
17083: LD_INT 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: PPUSH
17095: CALL_OW 69
17099: PUSH
17100: FOR_IN
17101: IFFALSE 17162
// if IsSelected ( i ) then
17103: LD_VAR 0 2
17107: PPUSH
17108: CALL_OW 306
17112: IFFALSE 17160
// begin if i in hInvincible then
17114: LD_VAR 0 2
17118: PUSH
17119: LD_EXP 112
17123: IN
17124: IFFALSE 17144
// hInvincible := hInvincible diff i else
17126: LD_ADDR_EXP 112
17130: PUSH
17131: LD_EXP 112
17135: PUSH
17136: LD_VAR 0 2
17140: DIFF
17141: ST_TO_ADDR
17142: GO 17160
// hInvincible := hInvincible union i ;
17144: LD_ADDR_EXP 112
17148: PUSH
17149: LD_EXP 112
17153: PUSH
17154: LD_VAR 0 2
17158: UNION
17159: ST_TO_ADDR
// end ;
17160: GO 17100
17162: POP
17163: POP
// end ;
17164: LD_VAR 0 1
17168: RET
// export function hHackInvisible ; var i , j ; begin
17169: LD_INT 0
17171: PPUSH
17172: PPUSH
17173: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17174: LD_ADDR_VAR 0 2
17178: PUSH
17179: LD_INT 21
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PPUSH
17189: CALL_OW 69
17193: PUSH
17194: FOR_IN
17195: IFFALSE 17219
// if IsSelected ( i ) then
17197: LD_VAR 0 2
17201: PPUSH
17202: CALL_OW 306
17206: IFFALSE 17217
// ComForceInvisible ( i ) ;
17208: LD_VAR 0 2
17212: PPUSH
17213: CALL_OW 496
17217: GO 17194
17219: POP
17220: POP
// end ;
17221: LD_VAR 0 1
17225: RET
// export function hHackChangeYourSide ; begin
17226: LD_INT 0
17228: PPUSH
// if your_side = 8 then
17229: LD_OWVAR 2
17233: PUSH
17234: LD_INT 8
17236: EQUAL
17237: IFFALSE 17249
// your_side := 0 else
17239: LD_ADDR_OWVAR 2
17243: PUSH
17244: LD_INT 0
17246: ST_TO_ADDR
17247: GO 17263
// your_side := your_side + 1 ;
17249: LD_ADDR_OWVAR 2
17253: PUSH
17254: LD_OWVAR 2
17258: PUSH
17259: LD_INT 1
17261: PLUS
17262: ST_TO_ADDR
// end ;
17263: LD_VAR 0 1
17267: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17268: LD_INT 0
17270: PPUSH
17271: PPUSH
17272: PPUSH
// for i in all_units do
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_OWVAR 3
17282: PUSH
17283: FOR_IN
17284: IFFALSE 17362
// if IsSelected ( i ) then
17286: LD_VAR 0 2
17290: PPUSH
17291: CALL_OW 306
17295: IFFALSE 17360
// begin j := GetSide ( i ) ;
17297: LD_ADDR_VAR 0 3
17301: PUSH
17302: LD_VAR 0 2
17306: PPUSH
17307: CALL_OW 255
17311: ST_TO_ADDR
// if j = 8 then
17312: LD_VAR 0 3
17316: PUSH
17317: LD_INT 8
17319: EQUAL
17320: IFFALSE 17332
// j := 0 else
17322: LD_ADDR_VAR 0 3
17326: PUSH
17327: LD_INT 0
17329: ST_TO_ADDR
17330: GO 17346
// j := j + 1 ;
17332: LD_ADDR_VAR 0 3
17336: PUSH
17337: LD_VAR 0 3
17341: PUSH
17342: LD_INT 1
17344: PLUS
17345: ST_TO_ADDR
// SetSide ( i , j ) ;
17346: LD_VAR 0 2
17350: PPUSH
17351: LD_VAR 0 3
17355: PPUSH
17356: CALL_OW 235
// end ;
17360: GO 17283
17362: POP
17363: POP
// end ;
17364: LD_VAR 0 1
17368: RET
// export function hHackFog ; begin
17369: LD_INT 0
17371: PPUSH
// FogOff ( true ) ;
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 344
// end ;
17379: LD_VAR 0 1
17383: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17384: LD_INT 0
17386: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17387: LD_VAR 0 1
17391: PPUSH
17392: LD_VAR 0 2
17396: PPUSH
17397: LD_VAR 0 3
17401: PPUSH
17402: LD_INT 1
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 483
// CenterOnXY ( x , y ) ;
17412: LD_VAR 0 2
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: CALL_OW 84
// end ; end_of_file
17426: LD_VAR 0 4
17430: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17431: LD_INT 0
17433: PPUSH
17434: PPUSH
17435: PPUSH
17436: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17437: LD_VAR 0 1
17441: PPUSH
17442: CALL_OW 264
17446: PUSH
17447: LD_EXP 43
17451: EQUAL
17452: IFFALSE 17524
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17454: LD_INT 68
17456: PPUSH
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL_OW 255
17466: PPUSH
17467: CALL_OW 321
17471: PUSH
17472: LD_INT 2
17474: EQUAL
17475: IFFALSE 17487
// eff := 70 else
17477: LD_ADDR_VAR 0 4
17481: PUSH
17482: LD_INT 70
17484: ST_TO_ADDR
17485: GO 17495
// eff := 30 ;
17487: LD_ADDR_VAR 0 4
17491: PUSH
17492: LD_INT 30
17494: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17495: LD_VAR 0 1
17499: PPUSH
17500: CALL_OW 250
17504: PPUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 251
17514: PPUSH
17515: LD_VAR 0 4
17519: PPUSH
17520: CALL_OW 495
// end ; end ;
17524: LD_VAR 0 2
17528: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17529: LD_INT 0
17531: PPUSH
// end ;
17532: LD_VAR 0 4
17536: RET
// export function SOS_Command ( cmd ) ; begin
17537: LD_INT 0
17539: PPUSH
// end ;
17540: LD_VAR 0 2
17544: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17545: LD_INT 0
17547: PPUSH
// if cmd = 121 then
17548: LD_VAR 0 1
17552: PUSH
17553: LD_INT 121
17555: EQUAL
17556: IFFALSE 17558
// end ;
17558: LD_VAR 0 6
17562: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17563: LD_INT 0
17565: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17566: LD_VAR 0 1
17570: PUSH
17571: LD_INT 250
17573: EQUAL
17574: PUSH
17575: LD_VAR 0 2
17579: PPUSH
17580: CALL_OW 264
17584: PUSH
17585: LD_EXP 46
17589: EQUAL
17590: AND
17591: IFFALSE 17612
// MinerPlaceMine ( unit , x , y ) ;
17593: LD_VAR 0 2
17597: PPUSH
17598: LD_VAR 0 4
17602: PPUSH
17603: LD_VAR 0 5
17607: PPUSH
17608: CALL 19961 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17612: LD_VAR 0 1
17616: PUSH
17617: LD_INT 251
17619: EQUAL
17620: PUSH
17621: LD_VAR 0 2
17625: PPUSH
17626: CALL_OW 264
17630: PUSH
17631: LD_EXP 46
17635: EQUAL
17636: AND
17637: IFFALSE 17658
// MinerDetonateMine ( unit , x , y ) ;
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_VAR 0 4
17648: PPUSH
17649: LD_VAR 0 5
17653: PPUSH
17654: CALL 20238 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17658: LD_VAR 0 1
17662: PUSH
17663: LD_INT 252
17665: EQUAL
17666: PUSH
17667: LD_VAR 0 2
17671: PPUSH
17672: CALL_OW 264
17676: PUSH
17677: LD_EXP 46
17681: EQUAL
17682: AND
17683: IFFALSE 17704
// MinerCreateMinefield ( unit , x , y ) ;
17685: LD_VAR 0 2
17689: PPUSH
17690: LD_VAR 0 4
17694: PPUSH
17695: LD_VAR 0 5
17699: PPUSH
17700: CALL 20655 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17704: LD_VAR 0 1
17708: PUSH
17709: LD_INT 253
17711: EQUAL
17712: PUSH
17713: LD_VAR 0 2
17717: PPUSH
17718: CALL_OW 257
17722: PUSH
17723: LD_INT 5
17725: EQUAL
17726: AND
17727: IFFALSE 17748
// ComBinocular ( unit , x , y ) ;
17729: LD_VAR 0 2
17733: PPUSH
17734: LD_VAR 0 4
17738: PPUSH
17739: LD_VAR 0 5
17743: PPUSH
17744: CALL 21026 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17748: LD_VAR 0 1
17752: PUSH
17753: LD_INT 254
17755: EQUAL
17756: PUSH
17757: LD_VAR 0 2
17761: PPUSH
17762: CALL_OW 264
17766: PUSH
17767: LD_EXP 41
17771: EQUAL
17772: AND
17773: PUSH
17774: LD_VAR 0 3
17778: PPUSH
17779: CALL_OW 263
17783: PUSH
17784: LD_INT 3
17786: EQUAL
17787: AND
17788: IFFALSE 17804
// HackDestroyVehicle ( unit , selectedUnit ) ;
17790: LD_VAR 0 2
17794: PPUSH
17795: LD_VAR 0 3
17799: PPUSH
17800: CALL 19321 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17804: LD_VAR 0 1
17808: PUSH
17809: LD_INT 255
17811: EQUAL
17812: PUSH
17813: LD_VAR 0 2
17817: PPUSH
17818: CALL_OW 264
17822: PUSH
17823: LD_INT 14
17825: PUSH
17826: LD_INT 53
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: IN
17833: AND
17834: PUSH
17835: LD_VAR 0 4
17839: PPUSH
17840: LD_VAR 0 5
17844: PPUSH
17845: CALL_OW 488
17849: AND
17850: IFFALSE 17874
// CutTreeXYR ( unit , x , y , 12 ) ;
17852: LD_VAR 0 2
17856: PPUSH
17857: LD_VAR 0 4
17861: PPUSH
17862: LD_VAR 0 5
17866: PPUSH
17867: LD_INT 12
17869: PPUSH
17870: CALL 17887 0 4
// end ;
17874: LD_VAR 0 6
17878: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
17879: LD_INT 0
17881: PPUSH
// end ;
17882: LD_VAR 0 4
17886: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17887: LD_INT 0
17889: PPUSH
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
17894: PPUSH
17895: PPUSH
17896: PPUSH
17897: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17898: LD_VAR 0 1
17902: NOT
17903: PUSH
17904: LD_VAR 0 2
17908: PPUSH
17909: LD_VAR 0 3
17913: PPUSH
17914: CALL_OW 488
17918: NOT
17919: OR
17920: PUSH
17921: LD_VAR 0 4
17925: NOT
17926: OR
17927: IFFALSE 17931
// exit ;
17929: GO 18271
// list := [ ] ;
17931: LD_ADDR_VAR 0 13
17935: PUSH
17936: EMPTY
17937: ST_TO_ADDR
// if x - r < 0 then
17938: LD_VAR 0 2
17942: PUSH
17943: LD_VAR 0 4
17947: MINUS
17948: PUSH
17949: LD_INT 0
17951: LESS
17952: IFFALSE 17964
// min_x := 0 else
17954: LD_ADDR_VAR 0 7
17958: PUSH
17959: LD_INT 0
17961: ST_TO_ADDR
17962: GO 17980
// min_x := x - r ;
17964: LD_ADDR_VAR 0 7
17968: PUSH
17969: LD_VAR 0 2
17973: PUSH
17974: LD_VAR 0 4
17978: MINUS
17979: ST_TO_ADDR
// if y - r < 0 then
17980: LD_VAR 0 3
17984: PUSH
17985: LD_VAR 0 4
17989: MINUS
17990: PUSH
17991: LD_INT 0
17993: LESS
17994: IFFALSE 18006
// min_y := 0 else
17996: LD_ADDR_VAR 0 8
18000: PUSH
18001: LD_INT 0
18003: ST_TO_ADDR
18004: GO 18022
// min_y := y - r ;
18006: LD_ADDR_VAR 0 8
18010: PUSH
18011: LD_VAR 0 3
18015: PUSH
18016: LD_VAR 0 4
18020: MINUS
18021: ST_TO_ADDR
// max_x := x + r ;
18022: LD_ADDR_VAR 0 9
18026: PUSH
18027: LD_VAR 0 2
18031: PUSH
18032: LD_VAR 0 4
18036: PLUS
18037: ST_TO_ADDR
// max_y := y + r ;
18038: LD_ADDR_VAR 0 10
18042: PUSH
18043: LD_VAR 0 3
18047: PUSH
18048: LD_VAR 0 4
18052: PLUS
18053: ST_TO_ADDR
// for _x = min_x to max_x do
18054: LD_ADDR_VAR 0 11
18058: PUSH
18059: DOUBLE
18060: LD_VAR 0 7
18064: DEC
18065: ST_TO_ADDR
18066: LD_VAR 0 9
18070: PUSH
18071: FOR_TO
18072: IFFALSE 18189
// for _y = min_y to max_y do
18074: LD_ADDR_VAR 0 12
18078: PUSH
18079: DOUBLE
18080: LD_VAR 0 8
18084: DEC
18085: ST_TO_ADDR
18086: LD_VAR 0 10
18090: PUSH
18091: FOR_TO
18092: IFFALSE 18185
// begin if not ValidHex ( _x , _y ) then
18094: LD_VAR 0 11
18098: PPUSH
18099: LD_VAR 0 12
18103: PPUSH
18104: CALL_OW 488
18108: NOT
18109: IFFALSE 18113
// continue ;
18111: GO 18091
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18113: LD_VAR 0 11
18117: PPUSH
18118: LD_VAR 0 12
18122: PPUSH
18123: CALL_OW 351
18127: PUSH
18128: LD_VAR 0 11
18132: PPUSH
18133: LD_VAR 0 12
18137: PPUSH
18138: CALL_OW 554
18142: AND
18143: IFFALSE 18183
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18145: LD_ADDR_VAR 0 13
18149: PUSH
18150: LD_VAR 0 13
18154: PPUSH
18155: LD_VAR 0 13
18159: PUSH
18160: LD_INT 1
18162: PLUS
18163: PPUSH
18164: LD_VAR 0 11
18168: PUSH
18169: LD_VAR 0 12
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PPUSH
18178: CALL_OW 2
18182: ST_TO_ADDR
// end ;
18183: GO 18091
18185: POP
18186: POP
18187: GO 18071
18189: POP
18190: POP
// if not list then
18191: LD_VAR 0 13
18195: NOT
18196: IFFALSE 18200
// exit ;
18198: GO 18271
// for i in list do
18200: LD_ADDR_VAR 0 6
18204: PUSH
18205: LD_VAR 0 13
18209: PUSH
18210: FOR_IN
18211: IFFALSE 18269
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18213: LD_VAR 0 1
18217: PPUSH
18218: LD_STRING M
18220: PUSH
18221: LD_VAR 0 6
18225: PUSH
18226: LD_INT 1
18228: ARRAY
18229: PUSH
18230: LD_VAR 0 6
18234: PUSH
18235: LD_INT 2
18237: ARRAY
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 0
18244: PUSH
18245: LD_INT 0
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: PPUSH
18263: CALL_OW 447
18267: GO 18210
18269: POP
18270: POP
// end ;
18271: LD_VAR 0 5
18275: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18276: LD_EXP 115
18280: NOT
18281: IFFALSE 18331
18283: GO 18285
18285: DISABLE
// begin initHack := true ;
18286: LD_ADDR_EXP 115
18290: PUSH
18291: LD_INT 1
18293: ST_TO_ADDR
// hackTanks := [ ] ;
18294: LD_ADDR_EXP 116
18298: PUSH
18299: EMPTY
18300: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18301: LD_ADDR_EXP 117
18305: PUSH
18306: EMPTY
18307: ST_TO_ADDR
// hackLimit := 3 ;
18308: LD_ADDR_EXP 118
18312: PUSH
18313: LD_INT 3
18315: ST_TO_ADDR
// hackDist := 12 ;
18316: LD_ADDR_EXP 119
18320: PUSH
18321: LD_INT 12
18323: ST_TO_ADDR
// hackCounter := [ ] ;
18324: LD_ADDR_EXP 120
18328: PUSH
18329: EMPTY
18330: ST_TO_ADDR
// end ;
18331: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18332: LD_EXP 115
18336: PUSH
18337: LD_INT 34
18339: PUSH
18340: LD_EXP 41
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PPUSH
18349: CALL_OW 69
18353: AND
18354: IFFALSE 18609
18356: GO 18358
18358: DISABLE
18359: LD_INT 0
18361: PPUSH
18362: PPUSH
// begin enable ;
18363: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18364: LD_ADDR_VAR 0 1
18368: PUSH
18369: LD_INT 34
18371: PUSH
18372: LD_EXP 41
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: PUSH
18386: FOR_IN
18387: IFFALSE 18607
// begin if not i in hackTanks then
18389: LD_VAR 0 1
18393: PUSH
18394: LD_EXP 116
18398: IN
18399: NOT
18400: IFFALSE 18483
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18402: LD_ADDR_EXP 116
18406: PUSH
18407: LD_EXP 116
18411: PPUSH
18412: LD_EXP 116
18416: PUSH
18417: LD_INT 1
18419: PLUS
18420: PPUSH
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 1
18430: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18431: LD_ADDR_EXP 117
18435: PUSH
18436: LD_EXP 117
18440: PPUSH
18441: LD_EXP 117
18445: PUSH
18446: LD_INT 1
18448: PLUS
18449: PPUSH
18450: EMPTY
18451: PPUSH
18452: CALL_OW 1
18456: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18457: LD_ADDR_EXP 120
18461: PUSH
18462: LD_EXP 120
18466: PPUSH
18467: LD_EXP 120
18471: PUSH
18472: LD_INT 1
18474: PLUS
18475: PPUSH
18476: EMPTY
18477: PPUSH
18478: CALL_OW 1
18482: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18483: LD_VAR 0 1
18487: PPUSH
18488: CALL_OW 302
18492: NOT
18493: IFFALSE 18506
// begin HackUnlinkAll ( i ) ;
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL 18612 0 1
// continue ;
18504: GO 18386
// end ; HackCheckCapturedStatus ( i ) ;
18506: LD_VAR 0 1
18510: PPUSH
18511: CALL 19055 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18515: LD_ADDR_VAR 0 2
18519: PUSH
18520: LD_INT 81
18522: PUSH
18523: LD_VAR 0 1
18527: PPUSH
18528: CALL_OW 255
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 33
18539: PUSH
18540: LD_INT 3
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 91
18549: PUSH
18550: LD_VAR 0 1
18554: PUSH
18555: LD_EXP 119
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 50
18567: PUSH
18568: EMPTY
18569: LIST
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: PPUSH
18577: CALL_OW 69
18581: ST_TO_ADDR
// if not tmp then
18582: LD_VAR 0 2
18586: NOT
18587: IFFALSE 18591
// continue ;
18589: GO 18386
// HackLink ( i , tmp ) ;
18591: LD_VAR 0 1
18595: PPUSH
18596: LD_VAR 0 2
18600: PPUSH
18601: CALL 18748 0 2
// end ;
18605: GO 18386
18607: POP
18608: POP
// end ;
18609: PPOPN 2
18611: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18612: LD_INT 0
18614: PPUSH
18615: PPUSH
18616: PPUSH
// if not hack in hackTanks then
18617: LD_VAR 0 1
18621: PUSH
18622: LD_EXP 116
18626: IN
18627: NOT
18628: IFFALSE 18632
// exit ;
18630: GO 18743
// index := GetElementIndex ( hackTanks , hack ) ;
18632: LD_ADDR_VAR 0 4
18636: PUSH
18637: LD_EXP 116
18641: PPUSH
18642: LD_VAR 0 1
18646: PPUSH
18647: CALL 26177 0 2
18651: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18652: LD_EXP 117
18656: PUSH
18657: LD_VAR 0 4
18661: ARRAY
18662: IFFALSE 18743
// begin for i in hackTanksCaptured [ index ] do
18664: LD_ADDR_VAR 0 3
18668: PUSH
18669: LD_EXP 117
18673: PUSH
18674: LD_VAR 0 4
18678: ARRAY
18679: PUSH
18680: FOR_IN
18681: IFFALSE 18707
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18683: LD_VAR 0 3
18687: PUSH
18688: LD_INT 1
18690: ARRAY
18691: PPUSH
18692: LD_VAR 0 3
18696: PUSH
18697: LD_INT 2
18699: ARRAY
18700: PPUSH
18701: CALL_OW 235
18705: GO 18680
18707: POP
18708: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18709: LD_ADDR_EXP 117
18713: PUSH
18714: LD_EXP 117
18718: PPUSH
18719: LD_VAR 0 4
18723: PPUSH
18724: EMPTY
18725: PPUSH
18726: CALL_OW 1
18730: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18731: LD_VAR 0 1
18735: PPUSH
18736: LD_INT 0
18738: PPUSH
18739: CALL_OW 505
// end ; end ;
18743: LD_VAR 0 2
18747: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18748: LD_INT 0
18750: PPUSH
18751: PPUSH
18752: PPUSH
// if not hack in hackTanks or not vehicles then
18753: LD_VAR 0 1
18757: PUSH
18758: LD_EXP 116
18762: IN
18763: NOT
18764: PUSH
18765: LD_VAR 0 2
18769: NOT
18770: OR
18771: IFFALSE 18775
// exit ;
18773: GO 19050
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18775: LD_ADDR_VAR 0 2
18779: PUSH
18780: LD_VAR 0 1
18784: PPUSH
18785: LD_VAR 0 2
18789: PPUSH
18790: LD_INT 1
18792: PPUSH
18793: LD_INT 1
18795: PPUSH
18796: CALL 26827 0 4
18800: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18801: LD_ADDR_VAR 0 5
18805: PUSH
18806: LD_EXP 116
18810: PPUSH
18811: LD_VAR 0 1
18815: PPUSH
18816: CALL 26177 0 2
18820: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18821: LD_EXP 117
18825: PUSH
18826: LD_VAR 0 5
18830: ARRAY
18831: PUSH
18832: LD_EXP 118
18836: LESS
18837: IFFALSE 19026
// begin for i := 1 to vehicles do
18839: LD_ADDR_VAR 0 4
18843: PUSH
18844: DOUBLE
18845: LD_INT 1
18847: DEC
18848: ST_TO_ADDR
18849: LD_VAR 0 2
18853: PUSH
18854: FOR_TO
18855: IFFALSE 19024
// begin if hackTanksCaptured [ index ] = hackLimit then
18857: LD_EXP 117
18861: PUSH
18862: LD_VAR 0 5
18866: ARRAY
18867: PUSH
18868: LD_EXP 118
18872: EQUAL
18873: IFFALSE 18877
// break ;
18875: GO 19024
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18877: LD_ADDR_EXP 120
18881: PUSH
18882: LD_EXP 120
18886: PPUSH
18887: LD_VAR 0 5
18891: PPUSH
18892: LD_EXP 120
18896: PUSH
18897: LD_VAR 0 5
18901: ARRAY
18902: PUSH
18903: LD_INT 1
18905: PLUS
18906: PPUSH
18907: CALL_OW 1
18911: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18912: LD_ADDR_EXP 117
18916: PUSH
18917: LD_EXP 117
18921: PPUSH
18922: LD_VAR 0 5
18926: PUSH
18927: LD_EXP 117
18931: PUSH
18932: LD_VAR 0 5
18936: ARRAY
18937: PUSH
18938: LD_INT 1
18940: PLUS
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PPUSH
18946: LD_VAR 0 2
18950: PUSH
18951: LD_VAR 0 4
18955: ARRAY
18956: PUSH
18957: LD_VAR 0 2
18961: PUSH
18962: LD_VAR 0 4
18966: ARRAY
18967: PPUSH
18968: CALL_OW 255
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PPUSH
18977: CALL 26392 0 3
18981: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18982: LD_VAR 0 2
18986: PUSH
18987: LD_VAR 0 4
18991: ARRAY
18992: PPUSH
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 255
19002: PPUSH
19003: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19007: LD_VAR 0 2
19011: PUSH
19012: LD_VAR 0 4
19016: ARRAY
19017: PPUSH
19018: CALL_OW 141
// end ;
19022: GO 18854
19024: POP
19025: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19026: LD_VAR 0 1
19030: PPUSH
19031: LD_EXP 117
19035: PUSH
19036: LD_VAR 0 5
19040: ARRAY
19041: PUSH
19042: LD_INT 0
19044: PLUS
19045: PPUSH
19046: CALL_OW 505
// end ;
19050: LD_VAR 0 3
19054: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19055: LD_INT 0
19057: PPUSH
19058: PPUSH
19059: PPUSH
19060: PPUSH
// if not hack in hackTanks then
19061: LD_VAR 0 1
19065: PUSH
19066: LD_EXP 116
19070: IN
19071: NOT
19072: IFFALSE 19076
// exit ;
19074: GO 19316
// index := GetElementIndex ( hackTanks , hack ) ;
19076: LD_ADDR_VAR 0 4
19080: PUSH
19081: LD_EXP 116
19085: PPUSH
19086: LD_VAR 0 1
19090: PPUSH
19091: CALL 26177 0 2
19095: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19096: LD_ADDR_VAR 0 3
19100: PUSH
19101: DOUBLE
19102: LD_EXP 117
19106: PUSH
19107: LD_VAR 0 4
19111: ARRAY
19112: INC
19113: ST_TO_ADDR
19114: LD_INT 1
19116: PUSH
19117: FOR_DOWNTO
19118: IFFALSE 19290
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19120: LD_ADDR_VAR 0 5
19124: PUSH
19125: LD_EXP 117
19129: PUSH
19130: LD_VAR 0 4
19134: ARRAY
19135: PUSH
19136: LD_VAR 0 3
19140: ARRAY
19141: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19142: LD_VAR 0 5
19146: PUSH
19147: LD_INT 1
19149: ARRAY
19150: PPUSH
19151: CALL_OW 302
19155: NOT
19156: PUSH
19157: LD_VAR 0 5
19161: PUSH
19162: LD_INT 1
19164: ARRAY
19165: PPUSH
19166: CALL_OW 255
19170: PUSH
19171: LD_VAR 0 1
19175: PPUSH
19176: CALL_OW 255
19180: NONEQUAL
19181: OR
19182: IFFALSE 19288
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19184: LD_VAR 0 5
19188: PUSH
19189: LD_INT 1
19191: ARRAY
19192: PPUSH
19193: CALL_OW 305
19197: PUSH
19198: LD_VAR 0 5
19202: PUSH
19203: LD_INT 1
19205: ARRAY
19206: PPUSH
19207: CALL_OW 255
19211: PUSH
19212: LD_VAR 0 1
19216: PPUSH
19217: CALL_OW 255
19221: EQUAL
19222: AND
19223: IFFALSE 19247
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19225: LD_VAR 0 5
19229: PUSH
19230: LD_INT 1
19232: ARRAY
19233: PPUSH
19234: LD_VAR 0 5
19238: PUSH
19239: LD_INT 2
19241: ARRAY
19242: PPUSH
19243: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19247: LD_ADDR_EXP 117
19251: PUSH
19252: LD_EXP 117
19256: PPUSH
19257: LD_VAR 0 4
19261: PPUSH
19262: LD_EXP 117
19266: PUSH
19267: LD_VAR 0 4
19271: ARRAY
19272: PPUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 3
19282: PPUSH
19283: CALL_OW 1
19287: ST_TO_ADDR
// end ; end ;
19288: GO 19117
19290: POP
19291: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19292: LD_VAR 0 1
19296: PPUSH
19297: LD_EXP 117
19301: PUSH
19302: LD_VAR 0 4
19306: ARRAY
19307: PUSH
19308: LD_INT 0
19310: PLUS
19311: PPUSH
19312: CALL_OW 505
// end ;
19316: LD_VAR 0 2
19320: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19321: LD_INT 0
19323: PPUSH
19324: PPUSH
19325: PPUSH
19326: PPUSH
// if not hack in hackTanks then
19327: LD_VAR 0 1
19331: PUSH
19332: LD_EXP 116
19336: IN
19337: NOT
19338: IFFALSE 19342
// exit ;
19340: GO 19427
// index := GetElementIndex ( hackTanks , hack ) ;
19342: LD_ADDR_VAR 0 5
19346: PUSH
19347: LD_EXP 116
19351: PPUSH
19352: LD_VAR 0 1
19356: PPUSH
19357: CALL 26177 0 2
19361: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19362: LD_ADDR_VAR 0 4
19366: PUSH
19367: DOUBLE
19368: LD_INT 1
19370: DEC
19371: ST_TO_ADDR
19372: LD_EXP 117
19376: PUSH
19377: LD_VAR 0 5
19381: ARRAY
19382: PUSH
19383: FOR_TO
19384: IFFALSE 19425
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19386: LD_EXP 117
19390: PUSH
19391: LD_VAR 0 5
19395: ARRAY
19396: PUSH
19397: LD_VAR 0 4
19401: ARRAY
19402: PUSH
19403: LD_INT 1
19405: ARRAY
19406: PUSH
19407: LD_VAR 0 2
19411: EQUAL
19412: IFFALSE 19423
// KillUnit ( vehicle ) ;
19414: LD_VAR 0 2
19418: PPUSH
19419: CALL_OW 66
19423: GO 19383
19425: POP
19426: POP
// end ;
19427: LD_VAR 0 3
19431: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19432: LD_EXP 121
19436: NOT
19437: IFFALSE 19472
19439: GO 19441
19441: DISABLE
// begin initMiner := true ;
19442: LD_ADDR_EXP 121
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// minersList := [ ] ;
19450: LD_ADDR_EXP 122
19454: PUSH
19455: EMPTY
19456: ST_TO_ADDR
// minerMinesList := [ ] ;
19457: LD_ADDR_EXP 123
19461: PUSH
19462: EMPTY
19463: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19464: LD_ADDR_EXP 124
19468: PUSH
19469: LD_INT 5
19471: ST_TO_ADDR
// end ;
19472: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19473: LD_EXP 121
19477: PUSH
19478: LD_INT 34
19480: PUSH
19481: LD_EXP 46
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PPUSH
19490: CALL_OW 69
19494: AND
19495: IFFALSE 19958
19497: GO 19499
19499: DISABLE
19500: LD_INT 0
19502: PPUSH
19503: PPUSH
19504: PPUSH
19505: PPUSH
// begin enable ;
19506: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19507: LD_ADDR_VAR 0 1
19511: PUSH
19512: LD_INT 34
19514: PUSH
19515: LD_EXP 46
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PPUSH
19524: CALL_OW 69
19528: PUSH
19529: FOR_IN
19530: IFFALSE 19602
// begin if not i in minersList then
19532: LD_VAR 0 1
19536: PUSH
19537: LD_EXP 122
19541: IN
19542: NOT
19543: IFFALSE 19600
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19545: LD_ADDR_EXP 122
19549: PUSH
19550: LD_EXP 122
19554: PPUSH
19555: LD_EXP 122
19559: PUSH
19560: LD_INT 1
19562: PLUS
19563: PPUSH
19564: LD_VAR 0 1
19568: PPUSH
19569: CALL_OW 1
19573: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19574: LD_ADDR_EXP 123
19578: PUSH
19579: LD_EXP 123
19583: PPUSH
19584: LD_EXP 123
19588: PUSH
19589: LD_INT 1
19591: PLUS
19592: PPUSH
19593: EMPTY
19594: PPUSH
19595: CALL_OW 1
19599: ST_TO_ADDR
// end end ;
19600: GO 19529
19602: POP
19603: POP
// for i := minerMinesList downto 1 do
19604: LD_ADDR_VAR 0 1
19608: PUSH
19609: DOUBLE
19610: LD_EXP 123
19614: INC
19615: ST_TO_ADDR
19616: LD_INT 1
19618: PUSH
19619: FOR_DOWNTO
19620: IFFALSE 19956
// begin if IsLive ( minersList [ i ] ) then
19622: LD_EXP 122
19626: PUSH
19627: LD_VAR 0 1
19631: ARRAY
19632: PPUSH
19633: CALL_OW 300
19637: IFFALSE 19665
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19639: LD_EXP 122
19643: PUSH
19644: LD_VAR 0 1
19648: ARRAY
19649: PPUSH
19650: LD_EXP 123
19654: PUSH
19655: LD_VAR 0 1
19659: ARRAY
19660: PPUSH
19661: CALL_OW 505
// if not minerMinesList [ i ] then
19665: LD_EXP 123
19669: PUSH
19670: LD_VAR 0 1
19674: ARRAY
19675: NOT
19676: IFFALSE 19680
// continue ;
19678: GO 19619
// for j := minerMinesList [ i ] downto 1 do
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: DOUBLE
19686: LD_EXP 123
19690: PUSH
19691: LD_VAR 0 1
19695: ARRAY
19696: INC
19697: ST_TO_ADDR
19698: LD_INT 1
19700: PUSH
19701: FOR_DOWNTO
19702: IFFALSE 19952
// begin side := GetSide ( minersList [ i ] ) ;
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_EXP 122
19713: PUSH
19714: LD_VAR 0 1
19718: ARRAY
19719: PPUSH
19720: CALL_OW 255
19724: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19725: LD_ADDR_VAR 0 4
19729: PUSH
19730: LD_EXP 123
19734: PUSH
19735: LD_VAR 0 1
19739: ARRAY
19740: PUSH
19741: LD_VAR 0 2
19745: ARRAY
19746: PUSH
19747: LD_INT 1
19749: ARRAY
19750: PPUSH
19751: LD_EXP 123
19755: PUSH
19756: LD_VAR 0 1
19760: ARRAY
19761: PUSH
19762: LD_VAR 0 2
19766: ARRAY
19767: PUSH
19768: LD_INT 2
19770: ARRAY
19771: PPUSH
19772: CALL_OW 428
19776: ST_TO_ADDR
// if not tmp then
19777: LD_VAR 0 4
19781: NOT
19782: IFFALSE 19786
// continue ;
19784: GO 19701
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19786: LD_VAR 0 4
19790: PUSH
19791: LD_INT 81
19793: PUSH
19794: LD_VAR 0 3
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL_OW 69
19807: IN
19808: PUSH
19809: LD_EXP 123
19813: PUSH
19814: LD_VAR 0 1
19818: ARRAY
19819: PUSH
19820: LD_VAR 0 2
19824: ARRAY
19825: PUSH
19826: LD_INT 1
19828: ARRAY
19829: PPUSH
19830: LD_EXP 123
19834: PUSH
19835: LD_VAR 0 1
19839: ARRAY
19840: PUSH
19841: LD_VAR 0 2
19845: ARRAY
19846: PUSH
19847: LD_INT 2
19849: ARRAY
19850: PPUSH
19851: CALL_OW 458
19855: AND
19856: IFFALSE 19950
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19858: LD_EXP 123
19862: PUSH
19863: LD_VAR 0 1
19867: ARRAY
19868: PUSH
19869: LD_VAR 0 2
19873: ARRAY
19874: PUSH
19875: LD_INT 1
19877: ARRAY
19878: PPUSH
19879: LD_EXP 123
19883: PUSH
19884: LD_VAR 0 1
19888: ARRAY
19889: PUSH
19890: LD_VAR 0 2
19894: ARRAY
19895: PUSH
19896: LD_INT 2
19898: ARRAY
19899: PPUSH
19900: LD_VAR 0 3
19904: PPUSH
19905: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19909: LD_ADDR_EXP 123
19913: PUSH
19914: LD_EXP 123
19918: PPUSH
19919: LD_VAR 0 1
19923: PPUSH
19924: LD_EXP 123
19928: PUSH
19929: LD_VAR 0 1
19933: ARRAY
19934: PPUSH
19935: LD_VAR 0 2
19939: PPUSH
19940: CALL_OW 3
19944: PPUSH
19945: CALL_OW 1
19949: ST_TO_ADDR
// end ; end ;
19950: GO 19701
19952: POP
19953: POP
// end ;
19954: GO 19619
19956: POP
19957: POP
// end ;
19958: PPOPN 4
19960: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19961: LD_INT 0
19963: PPUSH
19964: PPUSH
// result := false ;
19965: LD_ADDR_VAR 0 4
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19973: LD_VAR 0 1
19977: PPUSH
19978: CALL_OW 264
19982: PUSH
19983: LD_EXP 46
19987: EQUAL
19988: NOT
19989: IFFALSE 19993
// exit ;
19991: GO 20233
// index := GetElementIndex ( minersList , unit ) ;
19993: LD_ADDR_VAR 0 5
19997: PUSH
19998: LD_EXP 122
20002: PPUSH
20003: LD_VAR 0 1
20007: PPUSH
20008: CALL 26177 0 2
20012: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20013: LD_EXP 123
20017: PUSH
20018: LD_VAR 0 5
20022: ARRAY
20023: PUSH
20024: LD_EXP 124
20028: GREATEREQUAL
20029: IFFALSE 20033
// exit ;
20031: GO 20233
// ComMoveXY ( unit , x , y ) ;
20033: LD_VAR 0 1
20037: PPUSH
20038: LD_VAR 0 2
20042: PPUSH
20043: LD_VAR 0 3
20047: PPUSH
20048: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20052: LD_INT 35
20054: PPUSH
20055: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20059: LD_VAR 0 1
20063: PPUSH
20064: LD_VAR 0 2
20068: PPUSH
20069: LD_VAR 0 3
20073: PPUSH
20074: CALL 56544 0 3
20078: NOT
20079: PUSH
20080: LD_VAR 0 1
20084: PPUSH
20085: CALL_OW 314
20089: AND
20090: IFFALSE 20094
// exit ;
20092: GO 20233
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20094: LD_VAR 0 2
20098: PPUSH
20099: LD_VAR 0 3
20103: PPUSH
20104: CALL_OW 428
20108: PUSH
20109: LD_VAR 0 1
20113: EQUAL
20114: PUSH
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: AND
20126: IFFALSE 20052
// PlaySoundXY ( x , y , PlantMine ) ;
20128: LD_VAR 0 2
20132: PPUSH
20133: LD_VAR 0 3
20137: PPUSH
20138: LD_STRING PlantMine
20140: PPUSH
20141: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20145: LD_VAR 0 2
20149: PPUSH
20150: LD_VAR 0 3
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 255
20164: PPUSH
20165: LD_INT 0
20167: PPUSH
20168: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20172: LD_ADDR_EXP 123
20176: PUSH
20177: LD_EXP 123
20181: PPUSH
20182: LD_VAR 0 5
20186: PUSH
20187: LD_EXP 123
20191: PUSH
20192: LD_VAR 0 5
20196: ARRAY
20197: PUSH
20198: LD_INT 1
20200: PLUS
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PPUSH
20206: LD_VAR 0 2
20210: PUSH
20211: LD_VAR 0 3
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PPUSH
20220: CALL 26392 0 3
20224: ST_TO_ADDR
// result := true ;
20225: LD_ADDR_VAR 0 4
20229: PUSH
20230: LD_INT 1
20232: ST_TO_ADDR
// end ;
20233: LD_VAR 0 4
20237: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20238: LD_INT 0
20240: PPUSH
20241: PPUSH
20242: PPUSH
// if not unit in minersList then
20243: LD_VAR 0 1
20247: PUSH
20248: LD_EXP 122
20252: IN
20253: NOT
20254: IFFALSE 20258
// exit ;
20256: GO 20650
// index := GetElementIndex ( minersList , unit ) ;
20258: LD_ADDR_VAR 0 6
20262: PUSH
20263: LD_EXP 122
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL 26177 0 2
20277: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20278: LD_ADDR_VAR 0 5
20282: PUSH
20283: DOUBLE
20284: LD_EXP 123
20288: PUSH
20289: LD_VAR 0 6
20293: ARRAY
20294: INC
20295: ST_TO_ADDR
20296: LD_INT 1
20298: PUSH
20299: FOR_DOWNTO
20300: IFFALSE 20461
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20302: LD_EXP 123
20306: PUSH
20307: LD_VAR 0 6
20311: ARRAY
20312: PUSH
20313: LD_VAR 0 5
20317: ARRAY
20318: PUSH
20319: LD_INT 1
20321: ARRAY
20322: PUSH
20323: LD_VAR 0 2
20327: EQUAL
20328: PUSH
20329: LD_EXP 123
20333: PUSH
20334: LD_VAR 0 6
20338: ARRAY
20339: PUSH
20340: LD_VAR 0 5
20344: ARRAY
20345: PUSH
20346: LD_INT 2
20348: ARRAY
20349: PUSH
20350: LD_VAR 0 3
20354: EQUAL
20355: AND
20356: IFFALSE 20459
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20358: LD_EXP 123
20362: PUSH
20363: LD_VAR 0 6
20367: ARRAY
20368: PUSH
20369: LD_VAR 0 5
20373: ARRAY
20374: PUSH
20375: LD_INT 1
20377: ARRAY
20378: PPUSH
20379: LD_EXP 123
20383: PUSH
20384: LD_VAR 0 6
20388: ARRAY
20389: PUSH
20390: LD_VAR 0 5
20394: ARRAY
20395: PUSH
20396: LD_INT 2
20398: ARRAY
20399: PPUSH
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL_OW 255
20409: PPUSH
20410: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20414: LD_ADDR_EXP 123
20418: PUSH
20419: LD_EXP 123
20423: PPUSH
20424: LD_VAR 0 6
20428: PPUSH
20429: LD_EXP 123
20433: PUSH
20434: LD_VAR 0 6
20438: ARRAY
20439: PPUSH
20440: LD_VAR 0 5
20444: PPUSH
20445: CALL_OW 3
20449: PPUSH
20450: CALL_OW 1
20454: ST_TO_ADDR
// exit ;
20455: POP
20456: POP
20457: GO 20650
// end ; end ;
20459: GO 20299
20461: POP
20462: POP
// for i := minerMinesList [ index ] downto 1 do
20463: LD_ADDR_VAR 0 5
20467: PUSH
20468: DOUBLE
20469: LD_EXP 123
20473: PUSH
20474: LD_VAR 0 6
20478: ARRAY
20479: INC
20480: ST_TO_ADDR
20481: LD_INT 1
20483: PUSH
20484: FOR_DOWNTO
20485: IFFALSE 20648
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20487: LD_EXP 123
20491: PUSH
20492: LD_VAR 0 6
20496: ARRAY
20497: PUSH
20498: LD_VAR 0 5
20502: ARRAY
20503: PUSH
20504: LD_INT 1
20506: ARRAY
20507: PPUSH
20508: LD_EXP 123
20512: PUSH
20513: LD_VAR 0 6
20517: ARRAY
20518: PUSH
20519: LD_VAR 0 5
20523: ARRAY
20524: PUSH
20525: LD_INT 2
20527: ARRAY
20528: PPUSH
20529: LD_VAR 0 2
20533: PPUSH
20534: LD_VAR 0 3
20538: PPUSH
20539: CALL_OW 298
20543: PUSH
20544: LD_INT 6
20546: LESS
20547: IFFALSE 20646
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20549: LD_EXP 123
20553: PUSH
20554: LD_VAR 0 6
20558: ARRAY
20559: PUSH
20560: LD_VAR 0 5
20564: ARRAY
20565: PUSH
20566: LD_INT 1
20568: ARRAY
20569: PPUSH
20570: LD_EXP 123
20574: PUSH
20575: LD_VAR 0 6
20579: ARRAY
20580: PUSH
20581: LD_VAR 0 5
20585: ARRAY
20586: PUSH
20587: LD_INT 2
20589: ARRAY
20590: PPUSH
20591: LD_VAR 0 1
20595: PPUSH
20596: CALL_OW 255
20600: PPUSH
20601: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20605: LD_ADDR_EXP 123
20609: PUSH
20610: LD_EXP 123
20614: PPUSH
20615: LD_VAR 0 6
20619: PPUSH
20620: LD_EXP 123
20624: PUSH
20625: LD_VAR 0 6
20629: ARRAY
20630: PPUSH
20631: LD_VAR 0 5
20635: PPUSH
20636: CALL_OW 3
20640: PPUSH
20641: CALL_OW 1
20645: ST_TO_ADDR
// end ; end ;
20646: GO 20484
20648: POP
20649: POP
// end ;
20650: LD_VAR 0 4
20654: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20655: LD_INT 0
20657: PPUSH
20658: PPUSH
20659: PPUSH
20660: PPUSH
20661: PPUSH
20662: PPUSH
20663: PPUSH
20664: PPUSH
20665: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20666: LD_VAR 0 1
20670: PPUSH
20671: CALL_OW 264
20675: PUSH
20676: LD_EXP 46
20680: EQUAL
20681: NOT
20682: PUSH
20683: LD_VAR 0 1
20687: PUSH
20688: LD_EXP 122
20692: IN
20693: NOT
20694: OR
20695: IFFALSE 20699
// exit ;
20697: GO 21021
// index := GetElementIndex ( minersList , unit ) ;
20699: LD_ADDR_VAR 0 6
20703: PUSH
20704: LD_EXP 122
20708: PPUSH
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL 26177 0 2
20718: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20719: LD_ADDR_VAR 0 8
20723: PUSH
20724: LD_EXP 124
20728: PUSH
20729: LD_EXP 123
20733: PUSH
20734: LD_VAR 0 6
20738: ARRAY
20739: MINUS
20740: ST_TO_ADDR
// if not minesFreeAmount then
20741: LD_VAR 0 8
20745: NOT
20746: IFFALSE 20750
// exit ;
20748: GO 21021
// tmp := [ ] ;
20750: LD_ADDR_VAR 0 7
20754: PUSH
20755: EMPTY
20756: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20757: LD_ADDR_VAR 0 5
20761: PUSH
20762: DOUBLE
20763: LD_INT 1
20765: DEC
20766: ST_TO_ADDR
20767: LD_VAR 0 8
20771: PUSH
20772: FOR_TO
20773: IFFALSE 20968
// begin _d := rand ( 0 , 5 ) ;
20775: LD_ADDR_VAR 0 11
20779: PUSH
20780: LD_INT 0
20782: PPUSH
20783: LD_INT 5
20785: PPUSH
20786: CALL_OW 12
20790: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20791: LD_ADDR_VAR 0 12
20795: PUSH
20796: LD_INT 2
20798: PPUSH
20799: LD_INT 6
20801: PPUSH
20802: CALL_OW 12
20806: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20807: LD_ADDR_VAR 0 9
20811: PUSH
20812: LD_VAR 0 2
20816: PPUSH
20817: LD_VAR 0 11
20821: PPUSH
20822: LD_VAR 0 12
20826: PPUSH
20827: CALL_OW 272
20831: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20832: LD_ADDR_VAR 0 10
20836: PUSH
20837: LD_VAR 0 3
20841: PPUSH
20842: LD_VAR 0 11
20846: PPUSH
20847: LD_VAR 0 12
20851: PPUSH
20852: CALL_OW 273
20856: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20857: LD_VAR 0 9
20861: PPUSH
20862: LD_VAR 0 10
20866: PPUSH
20867: CALL_OW 488
20871: PUSH
20872: LD_VAR 0 9
20876: PUSH
20877: LD_VAR 0 10
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_VAR 0 7
20890: IN
20891: NOT
20892: AND
20893: PUSH
20894: LD_VAR 0 9
20898: PPUSH
20899: LD_VAR 0 10
20903: PPUSH
20904: CALL_OW 458
20908: NOT
20909: AND
20910: IFFALSE 20952
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20912: LD_ADDR_VAR 0 7
20916: PUSH
20917: LD_VAR 0 7
20921: PPUSH
20922: LD_VAR 0 7
20926: PUSH
20927: LD_INT 1
20929: PLUS
20930: PPUSH
20931: LD_VAR 0 9
20935: PUSH
20936: LD_VAR 0 10
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PPUSH
20945: CALL_OW 1
20949: ST_TO_ADDR
20950: GO 20966
// i := i - 1 ;
20952: LD_ADDR_VAR 0 5
20956: PUSH
20957: LD_VAR 0 5
20961: PUSH
20962: LD_INT 1
20964: MINUS
20965: ST_TO_ADDR
// end ;
20966: GO 20772
20968: POP
20969: POP
// for i in tmp do
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_VAR 0 7
20979: PUSH
20980: FOR_IN
20981: IFFALSE 21019
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20983: LD_VAR 0 1
20987: PPUSH
20988: LD_VAR 0 5
20992: PUSH
20993: LD_INT 1
20995: ARRAY
20996: PPUSH
20997: LD_VAR 0 5
21001: PUSH
21002: LD_INT 2
21004: ARRAY
21005: PPUSH
21006: CALL 19961 0 3
21010: NOT
21011: IFFALSE 21017
// exit ;
21013: POP
21014: POP
21015: GO 21021
21017: GO 20980
21019: POP
21020: POP
// end ;
21021: LD_VAR 0 4
21025: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21026: LD_INT 0
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
// if not GetClass ( unit ) = class_sniper then
21035: LD_VAR 0 1
21039: PPUSH
21040: CALL_OW 257
21044: PUSH
21045: LD_INT 5
21047: EQUAL
21048: NOT
21049: IFFALSE 21053
// exit ;
21051: GO 21441
// dist := 8 ;
21053: LD_ADDR_VAR 0 5
21057: PUSH
21058: LD_INT 8
21060: ST_TO_ADDR
// viewRange := 12 ;
21061: LD_ADDR_VAR 0 7
21065: PUSH
21066: LD_INT 12
21068: ST_TO_ADDR
// side := GetSide ( unit ) ;
21069: LD_ADDR_VAR 0 6
21073: PUSH
21074: LD_VAR 0 1
21078: PPUSH
21079: CALL_OW 255
21083: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21084: LD_INT 61
21086: PPUSH
21087: LD_VAR 0 6
21091: PPUSH
21092: CALL_OW 321
21096: PUSH
21097: LD_INT 2
21099: EQUAL
21100: IFFALSE 21110
// viewRange := 16 ;
21102: LD_ADDR_VAR 0 7
21106: PUSH
21107: LD_INT 16
21109: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21110: LD_VAR 0 1
21114: PPUSH
21115: LD_VAR 0 2
21119: PPUSH
21120: LD_VAR 0 3
21124: PPUSH
21125: CALL_OW 297
21129: PUSH
21130: LD_VAR 0 5
21134: GREATER
21135: IFFALSE 21214
// begin ComMoveXY ( unit , x , y ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: LD_VAR 0 3
21151: PPUSH
21152: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21156: LD_INT 35
21158: PPUSH
21159: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21163: LD_VAR 0 1
21167: PPUSH
21168: LD_VAR 0 2
21172: PPUSH
21173: LD_VAR 0 3
21177: PPUSH
21178: CALL 56544 0 3
21182: NOT
21183: IFFALSE 21187
// exit ;
21185: GO 21441
// until GetDistUnitXY ( unit , x , y ) < dist ;
21187: LD_VAR 0 1
21191: PPUSH
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_VAR 0 3
21201: PPUSH
21202: CALL_OW 297
21206: PUSH
21207: LD_VAR 0 5
21211: LESS
21212: IFFALSE 21156
// end ; ComTurnXY ( unit , x , y ) ;
21214: LD_VAR 0 1
21218: PPUSH
21219: LD_VAR 0 2
21223: PPUSH
21224: LD_VAR 0 3
21228: PPUSH
21229: CALL_OW 118
// wait ( 5 ) ;
21233: LD_INT 5
21235: PPUSH
21236: CALL_OW 67
// _d := GetDir ( unit ) ;
21240: LD_ADDR_VAR 0 10
21244: PUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: CALL_OW 254
21254: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21255: LD_ADDR_VAR 0 8
21259: PUSH
21260: LD_VAR 0 1
21264: PPUSH
21265: CALL_OW 250
21269: PPUSH
21270: LD_VAR 0 10
21274: PPUSH
21275: LD_VAR 0 5
21279: PPUSH
21280: CALL_OW 272
21284: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21285: LD_ADDR_VAR 0 9
21289: PUSH
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 251
21299: PPUSH
21300: LD_VAR 0 10
21304: PPUSH
21305: LD_VAR 0 5
21309: PPUSH
21310: CALL_OW 273
21314: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21315: LD_VAR 0 8
21319: PPUSH
21320: LD_VAR 0 9
21324: PPUSH
21325: CALL_OW 488
21329: NOT
21330: IFFALSE 21334
// exit ;
21332: GO 21441
// ComAnimCustom ( unit , 1 ) ;
21334: LD_VAR 0 1
21338: PPUSH
21339: LD_INT 1
21341: PPUSH
21342: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21346: LD_VAR 0 8
21350: PPUSH
21351: LD_VAR 0 9
21355: PPUSH
21356: LD_VAR 0 6
21360: PPUSH
21361: LD_VAR 0 7
21365: PPUSH
21366: CALL_OW 330
// repeat wait ( 1 ) ;
21370: LD_INT 1
21372: PPUSH
21373: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21377: LD_VAR 0 1
21381: PPUSH
21382: CALL_OW 316
21386: PUSH
21387: LD_VAR 0 1
21391: PPUSH
21392: CALL_OW 314
21396: OR
21397: PUSH
21398: LD_VAR 0 1
21402: PPUSH
21403: CALL_OW 302
21407: NOT
21408: OR
21409: PUSH
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 301
21419: OR
21420: IFFALSE 21370
// RemoveSeeing ( _x , _y , side ) ;
21422: LD_VAR 0 8
21426: PPUSH
21427: LD_VAR 0 9
21431: PPUSH
21432: LD_VAR 0 6
21436: PPUSH
21437: CALL_OW 331
// end ; end_of_file
21441: LD_VAR 0 4
21445: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21446: LD_INT 0
21448: PPUSH
21449: PPUSH
// if exist_mode then
21450: LD_VAR 0 2
21454: IFFALSE 21479
// unit := CreateCharacter ( prefix & ident ) else
21456: LD_ADDR_VAR 0 5
21460: PUSH
21461: LD_VAR 0 3
21465: PUSH
21466: LD_VAR 0 1
21470: STR
21471: PPUSH
21472: CALL_OW 34
21476: ST_TO_ADDR
21477: GO 21494
// unit := NewCharacter ( ident ) ;
21479: LD_ADDR_VAR 0 5
21483: PUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 25
21493: ST_TO_ADDR
// result := unit ;
21494: LD_ADDR_VAR 0 4
21498: PUSH
21499: LD_VAR 0 5
21503: ST_TO_ADDR
// end ;
21504: LD_VAR 0 4
21508: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21509: LD_INT 0
21511: PPUSH
21512: PPUSH
// if not side or not nation then
21513: LD_VAR 0 1
21517: NOT
21518: PUSH
21519: LD_VAR 0 2
21523: NOT
21524: OR
21525: IFFALSE 21529
// exit ;
21527: GO 22293
// case nation of nation_american :
21529: LD_VAR 0 2
21533: PUSH
21534: LD_INT 1
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21756
21542: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21543: LD_ADDR_VAR 0 4
21547: PUSH
21548: LD_INT 35
21550: PUSH
21551: LD_INT 45
21553: PUSH
21554: LD_INT 46
21556: PUSH
21557: LD_INT 47
21559: PUSH
21560: LD_INT 82
21562: PUSH
21563: LD_INT 83
21565: PUSH
21566: LD_INT 84
21568: PUSH
21569: LD_INT 85
21571: PUSH
21572: LD_INT 86
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: LD_INT 2
21580: PUSH
21581: LD_INT 6
21583: PUSH
21584: LD_INT 15
21586: PUSH
21587: LD_INT 16
21589: PUSH
21590: LD_INT 7
21592: PUSH
21593: LD_INT 12
21595: PUSH
21596: LD_INT 13
21598: PUSH
21599: LD_INT 10
21601: PUSH
21602: LD_INT 14
21604: PUSH
21605: LD_INT 20
21607: PUSH
21608: LD_INT 21
21610: PUSH
21611: LD_INT 22
21613: PUSH
21614: LD_INT 25
21616: PUSH
21617: LD_INT 32
21619: PUSH
21620: LD_INT 27
21622: PUSH
21623: LD_INT 36
21625: PUSH
21626: LD_INT 69
21628: PUSH
21629: LD_INT 39
21631: PUSH
21632: LD_INT 34
21634: PUSH
21635: LD_INT 40
21637: PUSH
21638: LD_INT 48
21640: PUSH
21641: LD_INT 49
21643: PUSH
21644: LD_INT 50
21646: PUSH
21647: LD_INT 51
21649: PUSH
21650: LD_INT 52
21652: PUSH
21653: LD_INT 53
21655: PUSH
21656: LD_INT 54
21658: PUSH
21659: LD_INT 55
21661: PUSH
21662: LD_INT 56
21664: PUSH
21665: LD_INT 57
21667: PUSH
21668: LD_INT 58
21670: PUSH
21671: LD_INT 59
21673: PUSH
21674: LD_INT 60
21676: PUSH
21677: LD_INT 61
21679: PUSH
21680: LD_INT 62
21682: PUSH
21683: LD_INT 80
21685: PUSH
21686: LD_INT 82
21688: PUSH
21689: LD_INT 83
21691: PUSH
21692: LD_INT 84
21694: PUSH
21695: LD_INT 85
21697: PUSH
21698: LD_INT 86
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: ST_TO_ADDR
21754: GO 22217
21756: LD_INT 2
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 21986
21764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21765: LD_ADDR_VAR 0 4
21769: PUSH
21770: LD_INT 35
21772: PUSH
21773: LD_INT 45
21775: PUSH
21776: LD_INT 46
21778: PUSH
21779: LD_INT 47
21781: PUSH
21782: LD_INT 82
21784: PUSH
21785: LD_INT 83
21787: PUSH
21788: LD_INT 84
21790: PUSH
21791: LD_INT 85
21793: PUSH
21794: LD_INT 87
21796: PUSH
21797: LD_INT 70
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: LD_INT 11
21805: PUSH
21806: LD_INT 3
21808: PUSH
21809: LD_INT 4
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: LD_INT 15
21820: PUSH
21821: LD_INT 18
21823: PUSH
21824: LD_INT 7
21826: PUSH
21827: LD_INT 17
21829: PUSH
21830: LD_INT 8
21832: PUSH
21833: LD_INT 20
21835: PUSH
21836: LD_INT 21
21838: PUSH
21839: LD_INT 22
21841: PUSH
21842: LD_INT 72
21844: PUSH
21845: LD_INT 26
21847: PUSH
21848: LD_INT 69
21850: PUSH
21851: LD_INT 39
21853: PUSH
21854: LD_INT 40
21856: PUSH
21857: LD_INT 41
21859: PUSH
21860: LD_INT 42
21862: PUSH
21863: LD_INT 43
21865: PUSH
21866: LD_INT 48
21868: PUSH
21869: LD_INT 49
21871: PUSH
21872: LD_INT 50
21874: PUSH
21875: LD_INT 51
21877: PUSH
21878: LD_INT 52
21880: PUSH
21881: LD_INT 53
21883: PUSH
21884: LD_INT 54
21886: PUSH
21887: LD_INT 55
21889: PUSH
21890: LD_INT 56
21892: PUSH
21893: LD_INT 60
21895: PUSH
21896: LD_INT 61
21898: PUSH
21899: LD_INT 62
21901: PUSH
21902: LD_INT 66
21904: PUSH
21905: LD_INT 67
21907: PUSH
21908: LD_INT 68
21910: PUSH
21911: LD_INT 81
21913: PUSH
21914: LD_INT 82
21916: PUSH
21917: LD_INT 83
21919: PUSH
21920: LD_INT 84
21922: PUSH
21923: LD_INT 85
21925: PUSH
21926: LD_INT 87
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: ST_TO_ADDR
21984: GO 22217
21986: LD_INT 3
21988: DOUBLE
21989: EQUAL
21990: IFTRUE 21994
21992: GO 22216
21994: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21995: LD_ADDR_VAR 0 4
21999: PUSH
22000: LD_INT 46
22002: PUSH
22003: LD_INT 47
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: LD_INT 2
22011: PUSH
22012: LD_INT 82
22014: PUSH
22015: LD_INT 83
22017: PUSH
22018: LD_INT 84
22020: PUSH
22021: LD_INT 85
22023: PUSH
22024: LD_INT 86
22026: PUSH
22027: LD_INT 11
22029: PUSH
22030: LD_INT 9
22032: PUSH
22033: LD_INT 20
22035: PUSH
22036: LD_INT 19
22038: PUSH
22039: LD_INT 21
22041: PUSH
22042: LD_INT 24
22044: PUSH
22045: LD_INT 22
22047: PUSH
22048: LD_INT 25
22050: PUSH
22051: LD_INT 28
22053: PUSH
22054: LD_INT 29
22056: PUSH
22057: LD_INT 30
22059: PUSH
22060: LD_INT 31
22062: PUSH
22063: LD_INT 37
22065: PUSH
22066: LD_INT 38
22068: PUSH
22069: LD_INT 32
22071: PUSH
22072: LD_INT 27
22074: PUSH
22075: LD_INT 33
22077: PUSH
22078: LD_INT 69
22080: PUSH
22081: LD_INT 39
22083: PUSH
22084: LD_INT 34
22086: PUSH
22087: LD_INT 40
22089: PUSH
22090: LD_INT 71
22092: PUSH
22093: LD_INT 23
22095: PUSH
22096: LD_INT 44
22098: PUSH
22099: LD_INT 48
22101: PUSH
22102: LD_INT 49
22104: PUSH
22105: LD_INT 50
22107: PUSH
22108: LD_INT 51
22110: PUSH
22111: LD_INT 52
22113: PUSH
22114: LD_INT 53
22116: PUSH
22117: LD_INT 54
22119: PUSH
22120: LD_INT 55
22122: PUSH
22123: LD_INT 56
22125: PUSH
22126: LD_INT 57
22128: PUSH
22129: LD_INT 58
22131: PUSH
22132: LD_INT 59
22134: PUSH
22135: LD_INT 63
22137: PUSH
22138: LD_INT 64
22140: PUSH
22141: LD_INT 65
22143: PUSH
22144: LD_INT 82
22146: PUSH
22147: LD_INT 83
22149: PUSH
22150: LD_INT 84
22152: PUSH
22153: LD_INT 85
22155: PUSH
22156: LD_INT 86
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: ST_TO_ADDR
22214: GO 22217
22216: POP
// if state > - 1 and state < 3 then
22217: LD_VAR 0 3
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: GREATER
22226: PUSH
22227: LD_VAR 0 3
22231: PUSH
22232: LD_INT 3
22234: LESS
22235: AND
22236: IFFALSE 22293
// for i in result do
22238: LD_ADDR_VAR 0 5
22242: PUSH
22243: LD_VAR 0 4
22247: PUSH
22248: FOR_IN
22249: IFFALSE 22291
// if GetTech ( i , side ) <> state then
22251: LD_VAR 0 5
22255: PPUSH
22256: LD_VAR 0 1
22260: PPUSH
22261: CALL_OW 321
22265: PUSH
22266: LD_VAR 0 3
22270: NONEQUAL
22271: IFFALSE 22289
// result := result diff i ;
22273: LD_ADDR_VAR 0 4
22277: PUSH
22278: LD_VAR 0 4
22282: PUSH
22283: LD_VAR 0 5
22287: DIFF
22288: ST_TO_ADDR
22289: GO 22248
22291: POP
22292: POP
// end ;
22293: LD_VAR 0 4
22297: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22298: LD_INT 0
22300: PPUSH
22301: PPUSH
22302: PPUSH
// result := true ;
22303: LD_ADDR_VAR 0 3
22307: PUSH
22308: LD_INT 1
22310: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22311: LD_ADDR_VAR 0 5
22315: PUSH
22316: LD_VAR 0 2
22320: PPUSH
22321: CALL_OW 480
22325: ST_TO_ADDR
// if not tmp then
22326: LD_VAR 0 5
22330: NOT
22331: IFFALSE 22335
// exit ;
22333: GO 22384
// for i in tmp do
22335: LD_ADDR_VAR 0 4
22339: PUSH
22340: LD_VAR 0 5
22344: PUSH
22345: FOR_IN
22346: IFFALSE 22382
// if GetTech ( i , side ) <> state_researched then
22348: LD_VAR 0 4
22352: PPUSH
22353: LD_VAR 0 1
22357: PPUSH
22358: CALL_OW 321
22362: PUSH
22363: LD_INT 2
22365: NONEQUAL
22366: IFFALSE 22380
// begin result := false ;
22368: LD_ADDR_VAR 0 3
22372: PUSH
22373: LD_INT 0
22375: ST_TO_ADDR
// exit ;
22376: POP
22377: POP
22378: GO 22384
// end ;
22380: GO 22345
22382: POP
22383: POP
// end ;
22384: LD_VAR 0 3
22388: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
22399: PPUSH
22400: PPUSH
22401: PPUSH
22402: PPUSH
22403: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22404: LD_VAR 0 1
22408: NOT
22409: PUSH
22410: LD_VAR 0 1
22414: PPUSH
22415: CALL_OW 257
22419: PUSH
22420: LD_INT 9
22422: NONEQUAL
22423: OR
22424: IFFALSE 22428
// exit ;
22426: GO 23001
// side := GetSide ( unit ) ;
22428: LD_ADDR_VAR 0 9
22432: PUSH
22433: LD_VAR 0 1
22437: PPUSH
22438: CALL_OW 255
22442: ST_TO_ADDR
// tech_space := tech_spacanom ;
22443: LD_ADDR_VAR 0 12
22447: PUSH
22448: LD_INT 29
22450: ST_TO_ADDR
// tech_time := tech_taurad ;
22451: LD_ADDR_VAR 0 13
22455: PUSH
22456: LD_INT 28
22458: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22459: LD_ADDR_VAR 0 11
22463: PUSH
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 310
22473: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22474: LD_VAR 0 11
22478: PPUSH
22479: CALL_OW 247
22483: PUSH
22484: LD_INT 2
22486: EQUAL
22487: IFFALSE 22491
// exit ;
22489: GO 23001
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22491: LD_ADDR_VAR 0 8
22495: PUSH
22496: LD_INT 81
22498: PUSH
22499: LD_VAR 0 9
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 3
22510: PUSH
22511: LD_INT 21
22513: PUSH
22514: LD_INT 3
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PPUSH
22529: CALL_OW 69
22533: ST_TO_ADDR
// if not tmp then
22534: LD_VAR 0 8
22538: NOT
22539: IFFALSE 22543
// exit ;
22541: GO 23001
// if in_unit then
22543: LD_VAR 0 11
22547: IFFALSE 22571
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22549: LD_ADDR_VAR 0 10
22553: PUSH
22554: LD_VAR 0 8
22558: PPUSH
22559: LD_VAR 0 11
22563: PPUSH
22564: CALL_OW 74
22568: ST_TO_ADDR
22569: GO 22591
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22571: LD_ADDR_VAR 0 10
22575: PUSH
22576: LD_VAR 0 8
22580: PPUSH
22581: LD_VAR 0 1
22585: PPUSH
22586: CALL_OW 74
22590: ST_TO_ADDR
// if not enemy then
22591: LD_VAR 0 10
22595: NOT
22596: IFFALSE 22600
// exit ;
22598: GO 23001
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22600: LD_VAR 0 11
22604: PUSH
22605: LD_VAR 0 11
22609: PPUSH
22610: LD_VAR 0 10
22614: PPUSH
22615: CALL_OW 296
22619: PUSH
22620: LD_INT 13
22622: GREATER
22623: AND
22624: PUSH
22625: LD_VAR 0 1
22629: PPUSH
22630: LD_VAR 0 10
22634: PPUSH
22635: CALL_OW 296
22639: PUSH
22640: LD_INT 12
22642: GREATER
22643: OR
22644: IFFALSE 22648
// exit ;
22646: GO 23001
// missile := [ 1 ] ;
22648: LD_ADDR_VAR 0 14
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: EMPTY
22657: LIST
22658: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22659: LD_VAR 0 9
22663: PPUSH
22664: LD_VAR 0 12
22668: PPUSH
22669: CALL_OW 325
22673: IFFALSE 22702
// missile := Insert ( missile , missile + 1 , 2 ) ;
22675: LD_ADDR_VAR 0 14
22679: PUSH
22680: LD_VAR 0 14
22684: PPUSH
22685: LD_VAR 0 14
22689: PUSH
22690: LD_INT 1
22692: PLUS
22693: PPUSH
22694: LD_INT 2
22696: PPUSH
22697: CALL_OW 2
22701: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22702: LD_VAR 0 9
22706: PPUSH
22707: LD_VAR 0 13
22711: PPUSH
22712: CALL_OW 325
22716: PUSH
22717: LD_VAR 0 10
22721: PPUSH
22722: CALL_OW 255
22726: PPUSH
22727: LD_VAR 0 13
22731: PPUSH
22732: CALL_OW 325
22736: NOT
22737: AND
22738: IFFALSE 22767
// missile := Insert ( missile , missile + 1 , 3 ) ;
22740: LD_ADDR_VAR 0 14
22744: PUSH
22745: LD_VAR 0 14
22749: PPUSH
22750: LD_VAR 0 14
22754: PUSH
22755: LD_INT 1
22757: PLUS
22758: PPUSH
22759: LD_INT 3
22761: PPUSH
22762: CALL_OW 2
22766: ST_TO_ADDR
// if missile < 2 then
22767: LD_VAR 0 14
22771: PUSH
22772: LD_INT 2
22774: LESS
22775: IFFALSE 22779
// exit ;
22777: GO 23001
// x := GetX ( enemy ) ;
22779: LD_ADDR_VAR 0 4
22783: PUSH
22784: LD_VAR 0 10
22788: PPUSH
22789: CALL_OW 250
22793: ST_TO_ADDR
// y := GetY ( enemy ) ;
22794: LD_ADDR_VAR 0 5
22798: PUSH
22799: LD_VAR 0 10
22803: PPUSH
22804: CALL_OW 251
22808: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22809: LD_ADDR_VAR 0 6
22813: PUSH
22814: LD_VAR 0 4
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PPUSH
22823: LD_INT 1
22825: PPUSH
22826: CALL_OW 12
22830: PLUS
22831: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22832: LD_ADDR_VAR 0 7
22836: PUSH
22837: LD_VAR 0 5
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PPUSH
22846: LD_INT 1
22848: PPUSH
22849: CALL_OW 12
22853: PLUS
22854: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22855: LD_VAR 0 6
22859: PPUSH
22860: LD_VAR 0 7
22864: PPUSH
22865: CALL_OW 488
22869: NOT
22870: IFFALSE 22892
// begin _x := x ;
22872: LD_ADDR_VAR 0 6
22876: PUSH
22877: LD_VAR 0 4
22881: ST_TO_ADDR
// _y := y ;
22882: LD_ADDR_VAR 0 7
22886: PUSH
22887: LD_VAR 0 5
22891: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22892: LD_ADDR_VAR 0 3
22896: PUSH
22897: LD_INT 1
22899: PPUSH
22900: LD_VAR 0 14
22904: PPUSH
22905: CALL_OW 12
22909: ST_TO_ADDR
// case i of 1 :
22910: LD_VAR 0 3
22914: PUSH
22915: LD_INT 1
22917: DOUBLE
22918: EQUAL
22919: IFTRUE 22923
22921: GO 22940
22923: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22924: LD_VAR 0 1
22928: PPUSH
22929: LD_VAR 0 10
22933: PPUSH
22934: CALL_OW 115
22938: GO 23001
22940: LD_INT 2
22942: DOUBLE
22943: EQUAL
22944: IFTRUE 22948
22946: GO 22970
22948: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22949: LD_VAR 0 1
22953: PPUSH
22954: LD_VAR 0 6
22958: PPUSH
22959: LD_VAR 0 7
22963: PPUSH
22964: CALL_OW 153
22968: GO 23001
22970: LD_INT 3
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 23000
22978: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22979: LD_VAR 0 1
22983: PPUSH
22984: LD_VAR 0 6
22988: PPUSH
22989: LD_VAR 0 7
22993: PPUSH
22994: CALL_OW 154
22998: GO 23001
23000: POP
// end ;
23001: LD_VAR 0 2
23005: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23006: LD_INT 0
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
23012: PPUSH
23013: PPUSH
// if not unit or not building then
23014: LD_VAR 0 1
23018: NOT
23019: PUSH
23020: LD_VAR 0 2
23024: NOT
23025: OR
23026: IFFALSE 23030
// exit ;
23028: GO 23188
// x := GetX ( building ) ;
23030: LD_ADDR_VAR 0 5
23034: PUSH
23035: LD_VAR 0 2
23039: PPUSH
23040: CALL_OW 250
23044: ST_TO_ADDR
// y := GetY ( building ) ;
23045: LD_ADDR_VAR 0 6
23049: PUSH
23050: LD_VAR 0 2
23054: PPUSH
23055: CALL_OW 251
23059: ST_TO_ADDR
// for i = 0 to 5 do
23060: LD_ADDR_VAR 0 4
23064: PUSH
23065: DOUBLE
23066: LD_INT 0
23068: DEC
23069: ST_TO_ADDR
23070: LD_INT 5
23072: PUSH
23073: FOR_TO
23074: IFFALSE 23186
// begin _x := ShiftX ( x , i , 3 ) ;
23076: LD_ADDR_VAR 0 7
23080: PUSH
23081: LD_VAR 0 5
23085: PPUSH
23086: LD_VAR 0 4
23090: PPUSH
23091: LD_INT 3
23093: PPUSH
23094: CALL_OW 272
23098: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23099: LD_ADDR_VAR 0 8
23103: PUSH
23104: LD_VAR 0 6
23108: PPUSH
23109: LD_VAR 0 4
23113: PPUSH
23114: LD_INT 3
23116: PPUSH
23117: CALL_OW 273
23121: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23122: LD_VAR 0 7
23126: PPUSH
23127: LD_VAR 0 8
23131: PPUSH
23132: CALL_OW 488
23136: NOT
23137: IFFALSE 23141
// continue ;
23139: GO 23073
// if HexInfo ( _x , _y ) = 0 then
23141: LD_VAR 0 7
23145: PPUSH
23146: LD_VAR 0 8
23150: PPUSH
23151: CALL_OW 428
23155: PUSH
23156: LD_INT 0
23158: EQUAL
23159: IFFALSE 23184
// begin ComMoveXY ( unit , _x , _y ) ;
23161: LD_VAR 0 1
23165: PPUSH
23166: LD_VAR 0 7
23170: PPUSH
23171: LD_VAR 0 8
23175: PPUSH
23176: CALL_OW 111
// exit ;
23180: POP
23181: POP
23182: GO 23188
// end ; end ;
23184: GO 23073
23186: POP
23187: POP
// end ;
23188: LD_VAR 0 3
23192: RET
// export function ScanBase ( side , base_area ) ; begin
23193: LD_INT 0
23195: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23196: LD_ADDR_VAR 0 3
23200: PUSH
23201: LD_VAR 0 2
23205: PPUSH
23206: LD_INT 81
23208: PUSH
23209: LD_VAR 0 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PPUSH
23218: CALL_OW 70
23222: ST_TO_ADDR
// end ;
23223: LD_VAR 0 3
23227: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23228: LD_INT 0
23230: PPUSH
23231: PPUSH
23232: PPUSH
23233: PPUSH
// result := false ;
23234: LD_ADDR_VAR 0 2
23238: PUSH
23239: LD_INT 0
23241: ST_TO_ADDR
// side := GetSide ( unit ) ;
23242: LD_ADDR_VAR 0 3
23246: PUSH
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL_OW 255
23256: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23257: LD_ADDR_VAR 0 4
23261: PUSH
23262: LD_VAR 0 1
23266: PPUSH
23267: CALL_OW 248
23271: ST_TO_ADDR
// case nat of 1 :
23272: LD_VAR 0 4
23276: PUSH
23277: LD_INT 1
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23296
23285: POP
// tech := tech_lassight ; 2 :
23286: LD_ADDR_VAR 0 5
23290: PUSH
23291: LD_INT 12
23293: ST_TO_ADDR
23294: GO 23335
23296: LD_INT 2
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23315
23304: POP
// tech := tech_mortar ; 3 :
23305: LD_ADDR_VAR 0 5
23309: PUSH
23310: LD_INT 41
23312: ST_TO_ADDR
23313: GO 23335
23315: LD_INT 3
23317: DOUBLE
23318: EQUAL
23319: IFTRUE 23323
23321: GO 23334
23323: POP
// tech := tech_bazooka ; end ;
23324: LD_ADDR_VAR 0 5
23328: PUSH
23329: LD_INT 44
23331: ST_TO_ADDR
23332: GO 23335
23334: POP
// if Researched ( side , tech ) then
23335: LD_VAR 0 3
23339: PPUSH
23340: LD_VAR 0 5
23344: PPUSH
23345: CALL_OW 325
23349: IFFALSE 23376
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23351: LD_ADDR_VAR 0 2
23355: PUSH
23356: LD_INT 5
23358: PUSH
23359: LD_INT 8
23361: PUSH
23362: LD_INT 9
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: PUSH
23370: LD_VAR 0 4
23374: ARRAY
23375: ST_TO_ADDR
// end ;
23376: LD_VAR 0 2
23380: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23381: LD_INT 0
23383: PPUSH
23384: PPUSH
23385: PPUSH
// if not mines then
23386: LD_VAR 0 2
23390: NOT
23391: IFFALSE 23395
// exit ;
23393: GO 23539
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23395: LD_ADDR_VAR 0 5
23399: PUSH
23400: LD_INT 81
23402: PUSH
23403: LD_VAR 0 1
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 3
23414: PUSH
23415: LD_INT 21
23417: PUSH
23418: LD_INT 3
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PPUSH
23433: CALL_OW 69
23437: ST_TO_ADDR
// for i in mines do
23438: LD_ADDR_VAR 0 4
23442: PUSH
23443: LD_VAR 0 2
23447: PUSH
23448: FOR_IN
23449: IFFALSE 23537
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23451: LD_VAR 0 4
23455: PUSH
23456: LD_INT 1
23458: ARRAY
23459: PPUSH
23460: LD_VAR 0 4
23464: PUSH
23465: LD_INT 2
23467: ARRAY
23468: PPUSH
23469: CALL_OW 458
23473: NOT
23474: IFFALSE 23478
// continue ;
23476: GO 23448
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23478: LD_VAR 0 4
23482: PUSH
23483: LD_INT 1
23485: ARRAY
23486: PPUSH
23487: LD_VAR 0 4
23491: PUSH
23492: LD_INT 2
23494: ARRAY
23495: PPUSH
23496: CALL_OW 428
23500: PUSH
23501: LD_VAR 0 5
23505: IN
23506: IFFALSE 23535
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23508: LD_VAR 0 4
23512: PUSH
23513: LD_INT 1
23515: ARRAY
23516: PPUSH
23517: LD_VAR 0 4
23521: PUSH
23522: LD_INT 2
23524: ARRAY
23525: PPUSH
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 456
// end ;
23535: GO 23448
23537: POP
23538: POP
// end ;
23539: LD_VAR 0 3
23543: RET
// export function Count ( array ) ; var i ; begin
23544: LD_INT 0
23546: PPUSH
23547: PPUSH
// result := 0 ;
23548: LD_ADDR_VAR 0 2
23552: PUSH
23553: LD_INT 0
23555: ST_TO_ADDR
// for i in array do
23556: LD_ADDR_VAR 0 3
23560: PUSH
23561: LD_VAR 0 1
23565: PUSH
23566: FOR_IN
23567: IFFALSE 23591
// if i then
23569: LD_VAR 0 3
23573: IFFALSE 23589
// result := result + 1 ;
23575: LD_ADDR_VAR 0 2
23579: PUSH
23580: LD_VAR 0 2
23584: PUSH
23585: LD_INT 1
23587: PLUS
23588: ST_TO_ADDR
23589: GO 23566
23591: POP
23592: POP
// end ;
23593: LD_VAR 0 2
23597: RET
// export function IsEmpty ( building ) ; begin
23598: LD_INT 0
23600: PPUSH
// if not building then
23601: LD_VAR 0 1
23605: NOT
23606: IFFALSE 23610
// exit ;
23608: GO 23653
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23610: LD_ADDR_VAR 0 2
23614: PUSH
23615: LD_VAR 0 1
23619: PUSH
23620: LD_INT 22
23622: PUSH
23623: LD_VAR 0 1
23627: PPUSH
23628: CALL_OW 255
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 58
23639: PUSH
23640: EMPTY
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PPUSH
23647: CALL_OW 69
23651: IN
23652: ST_TO_ADDR
// end ;
23653: LD_VAR 0 2
23657: RET
// export function IsNotFull ( building ) ; begin
23658: LD_INT 0
23660: PPUSH
// if not building then
23661: LD_VAR 0 1
23665: NOT
23666: IFFALSE 23670
// exit ;
23668: GO 23689
// result := UnitsInside ( building ) < 6 ;
23670: LD_ADDR_VAR 0 2
23674: PUSH
23675: LD_VAR 0 1
23679: PPUSH
23680: CALL_OW 313
23684: PUSH
23685: LD_INT 6
23687: LESS
23688: ST_TO_ADDR
// end ;
23689: LD_VAR 0 2
23693: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23694: LD_INT 0
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
// tmp := [ ] ;
23700: LD_ADDR_VAR 0 3
23704: PUSH
23705: EMPTY
23706: ST_TO_ADDR
// list := [ ] ;
23707: LD_ADDR_VAR 0 5
23711: PUSH
23712: EMPTY
23713: ST_TO_ADDR
// for i = 16 to 25 do
23714: LD_ADDR_VAR 0 4
23718: PUSH
23719: DOUBLE
23720: LD_INT 16
23722: DEC
23723: ST_TO_ADDR
23724: LD_INT 25
23726: PUSH
23727: FOR_TO
23728: IFFALSE 23801
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23730: LD_ADDR_VAR 0 3
23734: PUSH
23735: LD_VAR 0 3
23739: PUSH
23740: LD_INT 22
23742: PUSH
23743: LD_VAR 0 1
23747: PPUSH
23748: CALL_OW 255
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 91
23759: PUSH
23760: LD_VAR 0 1
23764: PUSH
23765: LD_INT 6
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 30
23775: PUSH
23776: LD_VAR 0 4
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: PPUSH
23793: CALL_OW 69
23797: ADD
23798: ST_TO_ADDR
23799: GO 23727
23801: POP
23802: POP
// for i = 1 to tmp do
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: DOUBLE
23809: LD_INT 1
23811: DEC
23812: ST_TO_ADDR
23813: LD_VAR 0 3
23817: PUSH
23818: FOR_TO
23819: IFFALSE 23907
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23821: LD_ADDR_VAR 0 5
23825: PUSH
23826: LD_VAR 0 5
23830: PUSH
23831: LD_VAR 0 3
23835: PUSH
23836: LD_VAR 0 4
23840: ARRAY
23841: PPUSH
23842: CALL_OW 266
23846: PUSH
23847: LD_VAR 0 3
23851: PUSH
23852: LD_VAR 0 4
23856: ARRAY
23857: PPUSH
23858: CALL_OW 250
23862: PUSH
23863: LD_VAR 0 3
23867: PUSH
23868: LD_VAR 0 4
23872: ARRAY
23873: PPUSH
23874: CALL_OW 251
23878: PUSH
23879: LD_VAR 0 3
23883: PUSH
23884: LD_VAR 0 4
23888: ARRAY
23889: PPUSH
23890: CALL_OW 254
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: ADD
23904: ST_TO_ADDR
23905: GO 23818
23907: POP
23908: POP
// result := list ;
23909: LD_ADDR_VAR 0 2
23913: PUSH
23914: LD_VAR 0 5
23918: ST_TO_ADDR
// end ;
23919: LD_VAR 0 2
23923: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23924: LD_INT 0
23926: PPUSH
23927: PPUSH
23928: PPUSH
23929: PPUSH
23930: PPUSH
23931: PPUSH
23932: PPUSH
// if not factory then
23933: LD_VAR 0 1
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 24535
// if control = control_apeman then
23942: LD_VAR 0 4
23946: PUSH
23947: LD_INT 5
23949: EQUAL
23950: IFFALSE 24059
// begin tmp := UnitsInside ( factory ) ;
23952: LD_ADDR_VAR 0 8
23956: PUSH
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL_OW 313
23966: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23967: LD_VAR 0 8
23971: PPUSH
23972: LD_INT 25
23974: PUSH
23975: LD_INT 12
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PPUSH
23982: CALL_OW 72
23986: NOT
23987: IFFALSE 23997
// control := control_manual ;
23989: LD_ADDR_VAR 0 4
23993: PUSH
23994: LD_INT 1
23996: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23997: LD_ADDR_VAR 0 8
24001: PUSH
24002: LD_VAR 0 1
24006: PPUSH
24007: CALL 23694 0 1
24011: ST_TO_ADDR
// if tmp then
24012: LD_VAR 0 8
24016: IFFALSE 24059
// begin for i in tmp do
24018: LD_ADDR_VAR 0 7
24022: PUSH
24023: LD_VAR 0 8
24027: PUSH
24028: FOR_IN
24029: IFFALSE 24057
// if i [ 1 ] = b_ext_radio then
24031: LD_VAR 0 7
24035: PUSH
24036: LD_INT 1
24038: ARRAY
24039: PUSH
24040: LD_INT 22
24042: EQUAL
24043: IFFALSE 24055
// begin control := control_remote ;
24045: LD_ADDR_VAR 0 4
24049: PUSH
24050: LD_INT 2
24052: ST_TO_ADDR
// break ;
24053: GO 24057
// end ;
24055: GO 24028
24057: POP
24058: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24059: LD_VAR 0 1
24063: PPUSH
24064: LD_VAR 0 2
24068: PPUSH
24069: LD_VAR 0 3
24073: PPUSH
24074: LD_VAR 0 4
24078: PPUSH
24079: LD_VAR 0 5
24083: PPUSH
24084: CALL_OW 448
24088: IFFALSE 24123
// begin result := [ chassis , engine , control , weapon ] ;
24090: LD_ADDR_VAR 0 6
24094: PUSH
24095: LD_VAR 0 2
24099: PUSH
24100: LD_VAR 0 3
24104: PUSH
24105: LD_VAR 0 4
24109: PUSH
24110: LD_VAR 0 5
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: ST_TO_ADDR
// exit ;
24121: GO 24535
// end ; _chassis := AvailableChassisList ( factory ) ;
24123: LD_ADDR_VAR 0 9
24127: PUSH
24128: LD_VAR 0 1
24132: PPUSH
24133: CALL_OW 475
24137: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24138: LD_ADDR_VAR 0 11
24142: PUSH
24143: LD_VAR 0 1
24147: PPUSH
24148: CALL_OW 476
24152: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24153: LD_ADDR_VAR 0 12
24157: PUSH
24158: LD_VAR 0 1
24162: PPUSH
24163: CALL_OW 477
24167: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24168: LD_ADDR_VAR 0 10
24172: PUSH
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL_OW 478
24182: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24183: LD_VAR 0 9
24187: NOT
24188: PUSH
24189: LD_VAR 0 11
24193: NOT
24194: OR
24195: PUSH
24196: LD_VAR 0 12
24200: NOT
24201: OR
24202: PUSH
24203: LD_VAR 0 10
24207: NOT
24208: OR
24209: IFFALSE 24244
// begin result := [ chassis , engine , control , weapon ] ;
24211: LD_ADDR_VAR 0 6
24215: PUSH
24216: LD_VAR 0 2
24220: PUSH
24221: LD_VAR 0 3
24225: PUSH
24226: LD_VAR 0 4
24230: PUSH
24231: LD_VAR 0 5
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: ST_TO_ADDR
// exit ;
24242: GO 24535
// end ; if not chassis in _chassis then
24244: LD_VAR 0 2
24248: PUSH
24249: LD_VAR 0 9
24253: IN
24254: NOT
24255: IFFALSE 24281
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24257: LD_ADDR_VAR 0 2
24261: PUSH
24262: LD_VAR 0 9
24266: PUSH
24267: LD_INT 1
24269: PPUSH
24270: LD_VAR 0 9
24274: PPUSH
24275: CALL_OW 12
24279: ARRAY
24280: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24281: LD_VAR 0 2
24285: PPUSH
24286: LD_VAR 0 3
24290: PPUSH
24291: CALL 24540 0 2
24295: NOT
24296: IFFALSE 24355
// repeat engine := _engine [ 1 ] ;
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: LD_VAR 0 11
24307: PUSH
24308: LD_INT 1
24310: ARRAY
24311: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24312: LD_ADDR_VAR 0 11
24316: PUSH
24317: LD_VAR 0 11
24321: PPUSH
24322: LD_INT 1
24324: PPUSH
24325: CALL_OW 3
24329: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24330: LD_VAR 0 2
24334: PPUSH
24335: LD_VAR 0 3
24339: PPUSH
24340: CALL 24540 0 2
24344: PUSH
24345: LD_VAR 0 11
24349: PUSH
24350: EMPTY
24351: EQUAL
24352: OR
24353: IFFALSE 24298
// if not control in _control then
24355: LD_VAR 0 4
24359: PUSH
24360: LD_VAR 0 12
24364: IN
24365: NOT
24366: IFFALSE 24392
// control := _control [ rand ( 1 , _control ) ] ;
24368: LD_ADDR_VAR 0 4
24372: PUSH
24373: LD_VAR 0 12
24377: PUSH
24378: LD_INT 1
24380: PPUSH
24381: LD_VAR 0 12
24385: PPUSH
24386: CALL_OW 12
24390: ARRAY
24391: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24392: LD_VAR 0 2
24396: PPUSH
24397: LD_VAR 0 5
24401: PPUSH
24402: CALL 24760 0 2
24406: NOT
24407: IFFALSE 24466
// repeat weapon := _weapon [ 1 ] ;
24409: LD_ADDR_VAR 0 5
24413: PUSH
24414: LD_VAR 0 10
24418: PUSH
24419: LD_INT 1
24421: ARRAY
24422: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24423: LD_ADDR_VAR 0 10
24427: PUSH
24428: LD_VAR 0 10
24432: PPUSH
24433: LD_INT 1
24435: PPUSH
24436: CALL_OW 3
24440: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24441: LD_VAR 0 2
24445: PPUSH
24446: LD_VAR 0 5
24450: PPUSH
24451: CALL 24760 0 2
24455: PUSH
24456: LD_VAR 0 10
24460: PUSH
24461: EMPTY
24462: EQUAL
24463: OR
24464: IFFALSE 24409
// result := [ ] ;
24466: LD_ADDR_VAR 0 6
24470: PUSH
24471: EMPTY
24472: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24473: LD_VAR 0 1
24477: PPUSH
24478: LD_VAR 0 2
24482: PPUSH
24483: LD_VAR 0 3
24487: PPUSH
24488: LD_VAR 0 4
24492: PPUSH
24493: LD_VAR 0 5
24497: PPUSH
24498: CALL_OW 448
24502: IFFALSE 24535
// result := [ chassis , engine , control , weapon ] ;
24504: LD_ADDR_VAR 0 6
24508: PUSH
24509: LD_VAR 0 2
24513: PUSH
24514: LD_VAR 0 3
24518: PUSH
24519: LD_VAR 0 4
24523: PUSH
24524: LD_VAR 0 5
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: ST_TO_ADDR
// end ;
24535: LD_VAR 0 6
24539: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24540: LD_INT 0
24542: PPUSH
// if not chassis or not engine then
24543: LD_VAR 0 1
24547: NOT
24548: PUSH
24549: LD_VAR 0 2
24553: NOT
24554: OR
24555: IFFALSE 24559
// exit ;
24557: GO 24755
// case engine of engine_solar :
24559: LD_VAR 0 2
24563: PUSH
24564: LD_INT 2
24566: DOUBLE
24567: EQUAL
24568: IFTRUE 24572
24570: GO 24610
24572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_INT 11
24580: PUSH
24581: LD_INT 12
24583: PUSH
24584: LD_INT 13
24586: PUSH
24587: LD_INT 14
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: LD_INT 2
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: ST_TO_ADDR
24608: GO 24739
24610: LD_INT 1
24612: DOUBLE
24613: EQUAL
24614: IFTRUE 24618
24616: GO 24680
24618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24619: LD_ADDR_VAR 0 3
24623: PUSH
24624: LD_INT 11
24626: PUSH
24627: LD_INT 12
24629: PUSH
24630: LD_INT 13
24632: PUSH
24633: LD_INT 14
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: LD_INT 3
24644: PUSH
24645: LD_INT 4
24647: PUSH
24648: LD_INT 5
24650: PUSH
24651: LD_INT 21
24653: PUSH
24654: LD_INT 23
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_INT 24
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: ST_TO_ADDR
24678: GO 24739
24680: LD_INT 3
24682: DOUBLE
24683: EQUAL
24684: IFTRUE 24688
24686: GO 24738
24688: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24689: LD_ADDR_VAR 0 3
24693: PUSH
24694: LD_INT 13
24696: PUSH
24697: LD_INT 14
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: LD_INT 3
24705: PUSH
24706: LD_INT 4
24708: PUSH
24709: LD_INT 5
24711: PUSH
24712: LD_INT 21
24714: PUSH
24715: LD_INT 22
24717: PUSH
24718: LD_INT 23
24720: PUSH
24721: LD_INT 24
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: ST_TO_ADDR
24736: GO 24739
24738: POP
// result := ( chassis in result ) ;
24739: LD_ADDR_VAR 0 3
24743: PUSH
24744: LD_VAR 0 1
24748: PUSH
24749: LD_VAR 0 3
24753: IN
24754: ST_TO_ADDR
// end ;
24755: LD_VAR 0 3
24759: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24760: LD_INT 0
24762: PPUSH
// if not chassis or not weapon then
24763: LD_VAR 0 1
24767: NOT
24768: PUSH
24769: LD_VAR 0 2
24773: NOT
24774: OR
24775: IFFALSE 24779
// exit ;
24777: GO 25805
// case weapon of us_machine_gun :
24779: LD_VAR 0 2
24783: PUSH
24784: LD_INT 2
24786: DOUBLE
24787: EQUAL
24788: IFTRUE 24792
24790: GO 24822
24792: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24793: LD_ADDR_VAR 0 3
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: LD_INT 2
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: LD_INT 4
24809: PUSH
24810: LD_INT 5
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 25789
24822: LD_INT 3
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 24860
24830: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24831: LD_ADDR_VAR 0 3
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 3
24844: PUSH
24845: LD_INT 4
24847: PUSH
24848: LD_INT 5
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: ST_TO_ADDR
24858: GO 25789
24860: LD_INT 11
24862: DOUBLE
24863: EQUAL
24864: IFTRUE 24868
24866: GO 24898
24868: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24869: LD_ADDR_VAR 0 3
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 3
24882: PUSH
24883: LD_INT 4
24885: PUSH
24886: LD_INT 5
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: ST_TO_ADDR
24896: GO 25789
24898: LD_INT 4
24900: DOUBLE
24901: EQUAL
24902: IFTRUE 24906
24904: GO 24932
24906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24907: LD_ADDR_VAR 0 3
24911: PUSH
24912: LD_INT 2
24914: PUSH
24915: LD_INT 3
24917: PUSH
24918: LD_INT 4
24920: PUSH
24921: LD_INT 5
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
24930: GO 25789
24932: LD_INT 5
24934: DOUBLE
24935: EQUAL
24936: IFTRUE 24940
24938: GO 24966
24940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: LD_INT 3
24951: PUSH
24952: LD_INT 4
24954: PUSH
24955: LD_INT 5
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: ST_TO_ADDR
24964: GO 25789
24966: LD_INT 9
24968: DOUBLE
24969: EQUAL
24970: IFTRUE 24974
24972: GO 25000
24974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24975: LD_ADDR_VAR 0 3
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: LD_INT 3
24985: PUSH
24986: LD_INT 4
24988: PUSH
24989: LD_INT 5
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: ST_TO_ADDR
24998: GO 25789
25000: LD_INT 7
25002: DOUBLE
25003: EQUAL
25004: IFTRUE 25008
25006: GO 25034
25008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: LD_INT 3
25019: PUSH
25020: LD_INT 4
25022: PUSH
25023: LD_INT 5
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: ST_TO_ADDR
25032: GO 25789
25034: LD_INT 12
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25068
25042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: LD_INT 4
25056: PUSH
25057: LD_INT 5
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: ST_TO_ADDR
25066: GO 25789
25068: LD_INT 13
25070: DOUBLE
25071: EQUAL
25072: IFTRUE 25076
25074: GO 25102
25076: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_INT 2
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: LD_INT 4
25090: PUSH
25091: LD_INT 5
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: ST_TO_ADDR
25100: GO 25789
25102: LD_INT 14
25104: DOUBLE
25105: EQUAL
25106: IFTRUE 25110
25108: GO 25128
25110: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_INT 4
25118: PUSH
25119: LD_INT 5
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: ST_TO_ADDR
25126: GO 25789
25128: LD_INT 6
25130: DOUBLE
25131: EQUAL
25132: IFTRUE 25136
25134: GO 25154
25136: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25137: LD_ADDR_VAR 0 3
25141: PUSH
25142: LD_INT 4
25144: PUSH
25145: LD_INT 5
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: ST_TO_ADDR
25152: GO 25789
25154: LD_INT 10
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25180
25162: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25163: LD_ADDR_VAR 0 3
25167: PUSH
25168: LD_INT 4
25170: PUSH
25171: LD_INT 5
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: ST_TO_ADDR
25178: GO 25789
25180: LD_INT 22
25182: DOUBLE
25183: EQUAL
25184: IFTRUE 25188
25186: GO 25214
25188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25189: LD_ADDR_VAR 0 3
25193: PUSH
25194: LD_INT 11
25196: PUSH
25197: LD_INT 12
25199: PUSH
25200: LD_INT 13
25202: PUSH
25203: LD_INT 14
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: ST_TO_ADDR
25212: GO 25789
25214: LD_INT 23
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25248
25222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25223: LD_ADDR_VAR 0 3
25227: PUSH
25228: LD_INT 11
25230: PUSH
25231: LD_INT 12
25233: PUSH
25234: LD_INT 13
25236: PUSH
25237: LD_INT 14
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: ST_TO_ADDR
25246: GO 25789
25248: LD_INT 24
25250: DOUBLE
25251: EQUAL
25252: IFTRUE 25256
25254: GO 25282
25256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_INT 11
25264: PUSH
25265: LD_INT 12
25267: PUSH
25268: LD_INT 13
25270: PUSH
25271: LD_INT 14
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: ST_TO_ADDR
25280: GO 25789
25282: LD_INT 30
25284: DOUBLE
25285: EQUAL
25286: IFTRUE 25290
25288: GO 25316
25290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25291: LD_ADDR_VAR 0 3
25295: PUSH
25296: LD_INT 11
25298: PUSH
25299: LD_INT 12
25301: PUSH
25302: LD_INT 13
25304: PUSH
25305: LD_INT 14
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
25314: GO 25789
25316: LD_INT 25
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25342
25324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 13
25332: PUSH
25333: LD_INT 14
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: ST_TO_ADDR
25340: GO 25789
25342: LD_INT 27
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25368
25350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_INT 13
25358: PUSH
25359: LD_INT 14
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: ST_TO_ADDR
25366: GO 25789
25368: LD_INT 28
25370: DOUBLE
25371: EQUAL
25372: IFTRUE 25376
25374: GO 25394
25376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25377: LD_ADDR_VAR 0 3
25381: PUSH
25382: LD_INT 13
25384: PUSH
25385: LD_INT 14
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: ST_TO_ADDR
25392: GO 25789
25394: LD_INT 29
25396: DOUBLE
25397: EQUAL
25398: IFTRUE 25402
25400: GO 25420
25402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_INT 13
25410: PUSH
25411: LD_INT 14
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: ST_TO_ADDR
25418: GO 25789
25420: LD_INT 31
25422: DOUBLE
25423: EQUAL
25424: IFTRUE 25428
25426: GO 25446
25428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25429: LD_ADDR_VAR 0 3
25433: PUSH
25434: LD_INT 13
25436: PUSH
25437: LD_INT 14
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: ST_TO_ADDR
25444: GO 25789
25446: LD_INT 26
25448: DOUBLE
25449: EQUAL
25450: IFTRUE 25454
25452: GO 25472
25454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25455: LD_ADDR_VAR 0 3
25459: PUSH
25460: LD_INT 13
25462: PUSH
25463: LD_INT 14
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: ST_TO_ADDR
25470: GO 25789
25472: LD_INT 42
25474: DOUBLE
25475: EQUAL
25476: IFTRUE 25480
25478: GO 25506
25480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25481: LD_ADDR_VAR 0 3
25485: PUSH
25486: LD_INT 21
25488: PUSH
25489: LD_INT 22
25491: PUSH
25492: LD_INT 23
25494: PUSH
25495: LD_INT 24
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: ST_TO_ADDR
25504: GO 25789
25506: LD_INT 43
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25540
25514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_INT 21
25522: PUSH
25523: LD_INT 22
25525: PUSH
25526: LD_INT 23
25528: PUSH
25529: LD_INT 24
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: ST_TO_ADDR
25538: GO 25789
25540: LD_INT 44
25542: DOUBLE
25543: EQUAL
25544: IFTRUE 25548
25546: GO 25574
25548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25549: LD_ADDR_VAR 0 3
25553: PUSH
25554: LD_INT 21
25556: PUSH
25557: LD_INT 22
25559: PUSH
25560: LD_INT 23
25562: PUSH
25563: LD_INT 24
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: ST_TO_ADDR
25572: GO 25789
25574: LD_INT 45
25576: DOUBLE
25577: EQUAL
25578: IFTRUE 25582
25580: GO 25608
25582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25583: LD_ADDR_VAR 0 3
25587: PUSH
25588: LD_INT 21
25590: PUSH
25591: LD_INT 22
25593: PUSH
25594: LD_INT 23
25596: PUSH
25597: LD_INT 24
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: ST_TO_ADDR
25606: GO 25789
25608: LD_INT 49
25610: DOUBLE
25611: EQUAL
25612: IFTRUE 25616
25614: GO 25642
25616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25617: LD_ADDR_VAR 0 3
25621: PUSH
25622: LD_INT 21
25624: PUSH
25625: LD_INT 22
25627: PUSH
25628: LD_INT 23
25630: PUSH
25631: LD_INT 24
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: ST_TO_ADDR
25640: GO 25789
25642: LD_INT 51
25644: DOUBLE
25645: EQUAL
25646: IFTRUE 25650
25648: GO 25676
25650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25651: LD_ADDR_VAR 0 3
25655: PUSH
25656: LD_INT 21
25658: PUSH
25659: LD_INT 22
25661: PUSH
25662: LD_INT 23
25664: PUSH
25665: LD_INT 24
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: ST_TO_ADDR
25674: GO 25789
25676: LD_INT 52
25678: DOUBLE
25679: EQUAL
25680: IFTRUE 25684
25682: GO 25710
25684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25685: LD_ADDR_VAR 0 3
25689: PUSH
25690: LD_INT 21
25692: PUSH
25693: LD_INT 22
25695: PUSH
25696: LD_INT 23
25698: PUSH
25699: LD_INT 24
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: ST_TO_ADDR
25708: GO 25789
25710: LD_INT 53
25712: DOUBLE
25713: EQUAL
25714: IFTRUE 25718
25716: GO 25736
25718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 23
25726: PUSH
25727: LD_INT 24
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: ST_TO_ADDR
25734: GO 25789
25736: LD_INT 46
25738: DOUBLE
25739: EQUAL
25740: IFTRUE 25744
25742: GO 25762
25744: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25745: LD_ADDR_VAR 0 3
25749: PUSH
25750: LD_INT 23
25752: PUSH
25753: LD_INT 24
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: ST_TO_ADDR
25760: GO 25789
25762: LD_INT 47
25764: DOUBLE
25765: EQUAL
25766: IFTRUE 25770
25768: GO 25788
25770: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25771: LD_ADDR_VAR 0 3
25775: PUSH
25776: LD_INT 23
25778: PUSH
25779: LD_INT 24
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: ST_TO_ADDR
25786: GO 25789
25788: POP
// result := ( chassis in result ) ;
25789: LD_ADDR_VAR 0 3
25793: PUSH
25794: LD_VAR 0 1
25798: PUSH
25799: LD_VAR 0 3
25803: IN
25804: ST_TO_ADDR
// end ;
25805: LD_VAR 0 3
25809: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25810: LD_INT 0
25812: PPUSH
25813: PPUSH
25814: PPUSH
25815: PPUSH
25816: PPUSH
25817: PPUSH
25818: PPUSH
// result := array ;
25819: LD_ADDR_VAR 0 5
25823: PUSH
25824: LD_VAR 0 1
25828: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25829: LD_VAR 0 1
25833: NOT
25834: PUSH
25835: LD_VAR 0 2
25839: NOT
25840: OR
25841: PUSH
25842: LD_VAR 0 3
25846: NOT
25847: OR
25848: PUSH
25849: LD_VAR 0 2
25853: PUSH
25854: LD_VAR 0 1
25858: GREATER
25859: OR
25860: PUSH
25861: LD_VAR 0 3
25865: PUSH
25866: LD_VAR 0 1
25870: GREATER
25871: OR
25872: IFFALSE 25876
// exit ;
25874: GO 26172
// if direction then
25876: LD_VAR 0 4
25880: IFFALSE 25944
// begin d := 1 ;
25882: LD_ADDR_VAR 0 9
25886: PUSH
25887: LD_INT 1
25889: ST_TO_ADDR
// if i_from > i_to then
25890: LD_VAR 0 2
25894: PUSH
25895: LD_VAR 0 3
25899: GREATER
25900: IFFALSE 25926
// length := ( array - i_from ) + i_to else
25902: LD_ADDR_VAR 0 11
25906: PUSH
25907: LD_VAR 0 1
25911: PUSH
25912: LD_VAR 0 2
25916: MINUS
25917: PUSH
25918: LD_VAR 0 3
25922: PLUS
25923: ST_TO_ADDR
25924: GO 25942
// length := i_to - i_from ;
25926: LD_ADDR_VAR 0 11
25930: PUSH
25931: LD_VAR 0 3
25935: PUSH
25936: LD_VAR 0 2
25940: MINUS
25941: ST_TO_ADDR
// end else
25942: GO 26005
// begin d := - 1 ;
25944: LD_ADDR_VAR 0 9
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: ST_TO_ADDR
// if i_from > i_to then
25953: LD_VAR 0 2
25957: PUSH
25958: LD_VAR 0 3
25962: GREATER
25963: IFFALSE 25983
// length := i_from - i_to else
25965: LD_ADDR_VAR 0 11
25969: PUSH
25970: LD_VAR 0 2
25974: PUSH
25975: LD_VAR 0 3
25979: MINUS
25980: ST_TO_ADDR
25981: GO 26005
// length := ( array - i_to ) + i_from ;
25983: LD_ADDR_VAR 0 11
25987: PUSH
25988: LD_VAR 0 1
25992: PUSH
25993: LD_VAR 0 3
25997: MINUS
25998: PUSH
25999: LD_VAR 0 2
26003: PLUS
26004: ST_TO_ADDR
// end ; if not length then
26005: LD_VAR 0 11
26009: NOT
26010: IFFALSE 26014
// exit ;
26012: GO 26172
// tmp := array ;
26014: LD_ADDR_VAR 0 10
26018: PUSH
26019: LD_VAR 0 1
26023: ST_TO_ADDR
// for i = 1 to length do
26024: LD_ADDR_VAR 0 6
26028: PUSH
26029: DOUBLE
26030: LD_INT 1
26032: DEC
26033: ST_TO_ADDR
26034: LD_VAR 0 11
26038: PUSH
26039: FOR_TO
26040: IFFALSE 26160
// begin for j = 1 to array do
26042: LD_ADDR_VAR 0 7
26046: PUSH
26047: DOUBLE
26048: LD_INT 1
26050: DEC
26051: ST_TO_ADDR
26052: LD_VAR 0 1
26056: PUSH
26057: FOR_TO
26058: IFFALSE 26146
// begin k := j + d ;
26060: LD_ADDR_VAR 0 8
26064: PUSH
26065: LD_VAR 0 7
26069: PUSH
26070: LD_VAR 0 9
26074: PLUS
26075: ST_TO_ADDR
// if k > array then
26076: LD_VAR 0 8
26080: PUSH
26081: LD_VAR 0 1
26085: GREATER
26086: IFFALSE 26096
// k := 1 ;
26088: LD_ADDR_VAR 0 8
26092: PUSH
26093: LD_INT 1
26095: ST_TO_ADDR
// if not k then
26096: LD_VAR 0 8
26100: NOT
26101: IFFALSE 26113
// k := array ;
26103: LD_ADDR_VAR 0 8
26107: PUSH
26108: LD_VAR 0 1
26112: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26113: LD_ADDR_VAR 0 10
26117: PUSH
26118: LD_VAR 0 10
26122: PPUSH
26123: LD_VAR 0 8
26127: PPUSH
26128: LD_VAR 0 1
26132: PUSH
26133: LD_VAR 0 7
26137: ARRAY
26138: PPUSH
26139: CALL_OW 1
26143: ST_TO_ADDR
// end ;
26144: GO 26057
26146: POP
26147: POP
// array := tmp ;
26148: LD_ADDR_VAR 0 1
26152: PUSH
26153: LD_VAR 0 10
26157: ST_TO_ADDR
// end ;
26158: GO 26039
26160: POP
26161: POP
// result := array ;
26162: LD_ADDR_VAR 0 5
26166: PUSH
26167: LD_VAR 0 1
26171: ST_TO_ADDR
// end ;
26172: LD_VAR 0 5
26176: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26177: LD_INT 0
26179: PPUSH
26180: PPUSH
// result := 0 ;
26181: LD_ADDR_VAR 0 3
26185: PUSH
26186: LD_INT 0
26188: ST_TO_ADDR
// if not array or not value in array then
26189: LD_VAR 0 1
26193: NOT
26194: PUSH
26195: LD_VAR 0 2
26199: PUSH
26200: LD_VAR 0 1
26204: IN
26205: NOT
26206: OR
26207: IFFALSE 26211
// exit ;
26209: GO 26265
// for i = 1 to array do
26211: LD_ADDR_VAR 0 4
26215: PUSH
26216: DOUBLE
26217: LD_INT 1
26219: DEC
26220: ST_TO_ADDR
26221: LD_VAR 0 1
26225: PUSH
26226: FOR_TO
26227: IFFALSE 26263
// if value = array [ i ] then
26229: LD_VAR 0 2
26233: PUSH
26234: LD_VAR 0 1
26238: PUSH
26239: LD_VAR 0 4
26243: ARRAY
26244: EQUAL
26245: IFFALSE 26261
// begin result := i ;
26247: LD_ADDR_VAR 0 3
26251: PUSH
26252: LD_VAR 0 4
26256: ST_TO_ADDR
// exit ;
26257: POP
26258: POP
26259: GO 26265
// end ;
26261: GO 26226
26263: POP
26264: POP
// end ;
26265: LD_VAR 0 3
26269: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26270: LD_INT 0
26272: PPUSH
// vc_chassis := chassis ;
26273: LD_ADDR_OWVAR 37
26277: PUSH
26278: LD_VAR 0 1
26282: ST_TO_ADDR
// vc_engine := engine ;
26283: LD_ADDR_OWVAR 39
26287: PUSH
26288: LD_VAR 0 2
26292: ST_TO_ADDR
// vc_control := control ;
26293: LD_ADDR_OWVAR 38
26297: PUSH
26298: LD_VAR 0 3
26302: ST_TO_ADDR
// vc_weapon := weapon ;
26303: LD_ADDR_OWVAR 40
26307: PUSH
26308: LD_VAR 0 4
26312: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26313: LD_ADDR_OWVAR 41
26317: PUSH
26318: LD_VAR 0 5
26322: ST_TO_ADDR
// end ;
26323: LD_VAR 0 6
26327: RET
// export function WantPlant ( unit ) ; var task ; begin
26328: LD_INT 0
26330: PPUSH
26331: PPUSH
// result := false ;
26332: LD_ADDR_VAR 0 2
26336: PUSH
26337: LD_INT 0
26339: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26340: LD_ADDR_VAR 0 3
26344: PUSH
26345: LD_VAR 0 1
26349: PPUSH
26350: CALL_OW 437
26354: ST_TO_ADDR
// if task then
26355: LD_VAR 0 3
26359: IFFALSE 26387
// if task [ 1 ] [ 1 ] = p then
26361: LD_VAR 0 3
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: PUSH
26370: LD_INT 1
26372: ARRAY
26373: PUSH
26374: LD_STRING p
26376: EQUAL
26377: IFFALSE 26387
// result := true ;
26379: LD_ADDR_VAR 0 2
26383: PUSH
26384: LD_INT 1
26386: ST_TO_ADDR
// end ;
26387: LD_VAR 0 2
26391: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26392: LD_INT 0
26394: PPUSH
26395: PPUSH
26396: PPUSH
26397: PPUSH
// if pos < 1 then
26398: LD_VAR 0 2
26402: PUSH
26403: LD_INT 1
26405: LESS
26406: IFFALSE 26410
// exit ;
26408: GO 26713
// if pos = 1 then
26410: LD_VAR 0 2
26414: PUSH
26415: LD_INT 1
26417: EQUAL
26418: IFFALSE 26451
// result := Replace ( arr , pos [ 1 ] , value ) else
26420: LD_ADDR_VAR 0 4
26424: PUSH
26425: LD_VAR 0 1
26429: PPUSH
26430: LD_VAR 0 2
26434: PUSH
26435: LD_INT 1
26437: ARRAY
26438: PPUSH
26439: LD_VAR 0 3
26443: PPUSH
26444: CALL_OW 1
26448: ST_TO_ADDR
26449: GO 26713
// begin tmp := arr ;
26451: LD_ADDR_VAR 0 6
26455: PUSH
26456: LD_VAR 0 1
26460: ST_TO_ADDR
// s_arr := [ tmp ] ;
26461: LD_ADDR_VAR 0 7
26465: PUSH
26466: LD_VAR 0 6
26470: PUSH
26471: EMPTY
26472: LIST
26473: ST_TO_ADDR
// for i = 1 to pos - 1 do
26474: LD_ADDR_VAR 0 5
26478: PUSH
26479: DOUBLE
26480: LD_INT 1
26482: DEC
26483: ST_TO_ADDR
26484: LD_VAR 0 2
26488: PUSH
26489: LD_INT 1
26491: MINUS
26492: PUSH
26493: FOR_TO
26494: IFFALSE 26539
// begin tmp := tmp [ pos [ i ] ] ;
26496: LD_ADDR_VAR 0 6
26500: PUSH
26501: LD_VAR 0 6
26505: PUSH
26506: LD_VAR 0 2
26510: PUSH
26511: LD_VAR 0 5
26515: ARRAY
26516: ARRAY
26517: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26518: LD_ADDR_VAR 0 7
26522: PUSH
26523: LD_VAR 0 7
26527: PUSH
26528: LD_VAR 0 6
26532: PUSH
26533: EMPTY
26534: LIST
26535: ADD
26536: ST_TO_ADDR
// end ;
26537: GO 26493
26539: POP
26540: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26541: LD_ADDR_VAR 0 6
26545: PUSH
26546: LD_VAR 0 6
26550: PPUSH
26551: LD_VAR 0 2
26555: PUSH
26556: LD_VAR 0 2
26560: ARRAY
26561: PPUSH
26562: LD_VAR 0 3
26566: PPUSH
26567: CALL_OW 1
26571: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26572: LD_ADDR_VAR 0 7
26576: PUSH
26577: LD_VAR 0 7
26581: PPUSH
26582: LD_VAR 0 7
26586: PPUSH
26587: LD_VAR 0 6
26591: PPUSH
26592: CALL_OW 1
26596: ST_TO_ADDR
// for i = s_arr downto 2 do
26597: LD_ADDR_VAR 0 5
26601: PUSH
26602: DOUBLE
26603: LD_VAR 0 7
26607: INC
26608: ST_TO_ADDR
26609: LD_INT 2
26611: PUSH
26612: FOR_DOWNTO
26613: IFFALSE 26697
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26615: LD_ADDR_VAR 0 6
26619: PUSH
26620: LD_VAR 0 7
26624: PUSH
26625: LD_VAR 0 5
26629: PUSH
26630: LD_INT 1
26632: MINUS
26633: ARRAY
26634: PPUSH
26635: LD_VAR 0 2
26639: PUSH
26640: LD_VAR 0 5
26644: PUSH
26645: LD_INT 1
26647: MINUS
26648: ARRAY
26649: PPUSH
26650: LD_VAR 0 7
26654: PUSH
26655: LD_VAR 0 5
26659: ARRAY
26660: PPUSH
26661: CALL_OW 1
26665: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26666: LD_ADDR_VAR 0 7
26670: PUSH
26671: LD_VAR 0 7
26675: PPUSH
26676: LD_VAR 0 5
26680: PUSH
26681: LD_INT 1
26683: MINUS
26684: PPUSH
26685: LD_VAR 0 6
26689: PPUSH
26690: CALL_OW 1
26694: ST_TO_ADDR
// end ;
26695: GO 26612
26697: POP
26698: POP
// result := s_arr [ 1 ] ;
26699: LD_ADDR_VAR 0 4
26703: PUSH
26704: LD_VAR 0 7
26708: PUSH
26709: LD_INT 1
26711: ARRAY
26712: ST_TO_ADDR
// end ; end ;
26713: LD_VAR 0 4
26717: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26718: LD_INT 0
26720: PPUSH
26721: PPUSH
// if not list then
26722: LD_VAR 0 1
26726: NOT
26727: IFFALSE 26731
// exit ;
26729: GO 26822
// i := list [ pos1 ] ;
26731: LD_ADDR_VAR 0 5
26735: PUSH
26736: LD_VAR 0 1
26740: PUSH
26741: LD_VAR 0 2
26745: ARRAY
26746: ST_TO_ADDR
// if not i then
26747: LD_VAR 0 5
26751: NOT
26752: IFFALSE 26756
// exit ;
26754: GO 26822
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26756: LD_ADDR_VAR 0 1
26760: PUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: LD_VAR 0 2
26770: PPUSH
26771: LD_VAR 0 1
26775: PUSH
26776: LD_VAR 0 3
26780: ARRAY
26781: PPUSH
26782: CALL_OW 1
26786: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26787: LD_ADDR_VAR 0 1
26791: PUSH
26792: LD_VAR 0 1
26796: PPUSH
26797: LD_VAR 0 3
26801: PPUSH
26802: LD_VAR 0 5
26806: PPUSH
26807: CALL_OW 1
26811: ST_TO_ADDR
// result := list ;
26812: LD_ADDR_VAR 0 4
26816: PUSH
26817: LD_VAR 0 1
26821: ST_TO_ADDR
// end ;
26822: LD_VAR 0 4
26826: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26827: LD_INT 0
26829: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26830: LD_ADDR_VAR 0 5
26834: PUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 250
26844: PPUSH
26845: LD_VAR 0 1
26849: PPUSH
26850: CALL_OW 251
26854: PPUSH
26855: LD_VAR 0 2
26859: PPUSH
26860: LD_VAR 0 3
26864: PPUSH
26865: LD_VAR 0 4
26869: PPUSH
26870: CALL 26880 0 5
26874: ST_TO_ADDR
// end ;
26875: LD_VAR 0 5
26879: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26880: LD_INT 0
26882: PPUSH
26883: PPUSH
26884: PPUSH
26885: PPUSH
// if not list then
26886: LD_VAR 0 3
26890: NOT
26891: IFFALSE 26895
// exit ;
26893: GO 27283
// result := [ ] ;
26895: LD_ADDR_VAR 0 6
26899: PUSH
26900: EMPTY
26901: ST_TO_ADDR
// for i in list do
26902: LD_ADDR_VAR 0 7
26906: PUSH
26907: LD_VAR 0 3
26911: PUSH
26912: FOR_IN
26913: IFFALSE 27115
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26915: LD_ADDR_VAR 0 9
26919: PUSH
26920: LD_VAR 0 7
26924: PPUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: LD_VAR 0 2
26934: PPUSH
26935: CALL_OW 297
26939: ST_TO_ADDR
// if not result then
26940: LD_VAR 0 6
26944: NOT
26945: IFFALSE 26971
// result := [ [ i , tmp ] ] else
26947: LD_ADDR_VAR 0 6
26951: PUSH
26952: LD_VAR 0 7
26956: PUSH
26957: LD_VAR 0 9
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: EMPTY
26967: LIST
26968: ST_TO_ADDR
26969: GO 27113
// begin if result [ result ] [ 2 ] < tmp then
26971: LD_VAR 0 6
26975: PUSH
26976: LD_VAR 0 6
26980: ARRAY
26981: PUSH
26982: LD_INT 2
26984: ARRAY
26985: PUSH
26986: LD_VAR 0 9
26990: LESS
26991: IFFALSE 27033
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26993: LD_ADDR_VAR 0 6
26997: PUSH
26998: LD_VAR 0 6
27002: PPUSH
27003: LD_VAR 0 6
27007: PUSH
27008: LD_INT 1
27010: PLUS
27011: PPUSH
27012: LD_VAR 0 7
27016: PUSH
27017: LD_VAR 0 9
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PPUSH
27026: CALL_OW 2
27030: ST_TO_ADDR
27031: GO 27113
// for j = 1 to result do
27033: LD_ADDR_VAR 0 8
27037: PUSH
27038: DOUBLE
27039: LD_INT 1
27041: DEC
27042: ST_TO_ADDR
27043: LD_VAR 0 6
27047: PUSH
27048: FOR_TO
27049: IFFALSE 27111
// begin if tmp < result [ j ] [ 2 ] then
27051: LD_VAR 0 9
27055: PUSH
27056: LD_VAR 0 6
27060: PUSH
27061: LD_VAR 0 8
27065: ARRAY
27066: PUSH
27067: LD_INT 2
27069: ARRAY
27070: LESS
27071: IFFALSE 27109
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27073: LD_ADDR_VAR 0 6
27077: PUSH
27078: LD_VAR 0 6
27082: PPUSH
27083: LD_VAR 0 8
27087: PPUSH
27088: LD_VAR 0 7
27092: PUSH
27093: LD_VAR 0 9
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PPUSH
27102: CALL_OW 2
27106: ST_TO_ADDR
// break ;
27107: GO 27111
// end ; end ;
27109: GO 27048
27111: POP
27112: POP
// end ; end ;
27113: GO 26912
27115: POP
27116: POP
// if result and not asc then
27117: LD_VAR 0 6
27121: PUSH
27122: LD_VAR 0 4
27126: NOT
27127: AND
27128: IFFALSE 27203
// begin tmp := result ;
27130: LD_ADDR_VAR 0 9
27134: PUSH
27135: LD_VAR 0 6
27139: ST_TO_ADDR
// for i = tmp downto 1 do
27140: LD_ADDR_VAR 0 7
27144: PUSH
27145: DOUBLE
27146: LD_VAR 0 9
27150: INC
27151: ST_TO_ADDR
27152: LD_INT 1
27154: PUSH
27155: FOR_DOWNTO
27156: IFFALSE 27201
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27158: LD_ADDR_VAR 0 6
27162: PUSH
27163: LD_VAR 0 6
27167: PPUSH
27168: LD_VAR 0 9
27172: PUSH
27173: LD_VAR 0 7
27177: MINUS
27178: PUSH
27179: LD_INT 1
27181: PLUS
27182: PPUSH
27183: LD_VAR 0 9
27187: PUSH
27188: LD_VAR 0 7
27192: ARRAY
27193: PPUSH
27194: CALL_OW 1
27198: ST_TO_ADDR
27199: GO 27155
27201: POP
27202: POP
// end ; tmp := [ ] ;
27203: LD_ADDR_VAR 0 9
27207: PUSH
27208: EMPTY
27209: ST_TO_ADDR
// if mode then
27210: LD_VAR 0 5
27214: IFFALSE 27283
// begin for i = 1 to result do
27216: LD_ADDR_VAR 0 7
27220: PUSH
27221: DOUBLE
27222: LD_INT 1
27224: DEC
27225: ST_TO_ADDR
27226: LD_VAR 0 6
27230: PUSH
27231: FOR_TO
27232: IFFALSE 27271
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27234: LD_ADDR_VAR 0 9
27238: PUSH
27239: LD_VAR 0 9
27243: PPUSH
27244: LD_VAR 0 7
27248: PPUSH
27249: LD_VAR 0 6
27253: PUSH
27254: LD_VAR 0 7
27258: ARRAY
27259: PUSH
27260: LD_INT 1
27262: ARRAY
27263: PPUSH
27264: CALL_OW 1
27268: ST_TO_ADDR
27269: GO 27231
27271: POP
27272: POP
// result := tmp ;
27273: LD_ADDR_VAR 0 6
27277: PUSH
27278: LD_VAR 0 9
27282: ST_TO_ADDR
// end ; end ;
27283: LD_VAR 0 6
27287: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27288: LD_INT 0
27290: PPUSH
27291: PPUSH
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27296: LD_ADDR_VAR 0 5
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
// if not x or not y then
27318: LD_VAR 0 2
27322: NOT
27323: PUSH
27324: LD_VAR 0 3
27328: NOT
27329: OR
27330: IFFALSE 27334
// exit ;
27332: GO 28980
// if not range then
27334: LD_VAR 0 4
27338: NOT
27339: IFFALSE 27349
// range := 10 ;
27341: LD_ADDR_VAR 0 4
27345: PUSH
27346: LD_INT 10
27348: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27349: LD_ADDR_VAR 0 8
27353: PUSH
27354: LD_INT 81
27356: PUSH
27357: LD_VAR 0 1
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 92
27368: PUSH
27369: LD_VAR 0 2
27373: PUSH
27374: LD_VAR 0 3
27378: PUSH
27379: LD_VAR 0 4
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 3
27392: PUSH
27393: LD_INT 21
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: PPUSH
27412: CALL_OW 69
27416: ST_TO_ADDR
// if not tmp then
27417: LD_VAR 0 8
27421: NOT
27422: IFFALSE 27426
// exit ;
27424: GO 28980
// for i in tmp do
27426: LD_ADDR_VAR 0 6
27430: PUSH
27431: LD_VAR 0 8
27435: PUSH
27436: FOR_IN
27437: IFFALSE 28955
// begin points := [ 0 , 0 , 0 ] ;
27439: LD_ADDR_VAR 0 9
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// bpoints := 1 ;
27458: LD_ADDR_VAR 0 10
27462: PUSH
27463: LD_INT 1
27465: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27466: LD_VAR 0 6
27470: PPUSH
27471: CALL_OW 247
27475: PUSH
27476: LD_INT 1
27478: DOUBLE
27479: EQUAL
27480: IFTRUE 27484
27482: GO 28062
27484: POP
// begin if GetClass ( i ) = 1 then
27485: LD_VAR 0 6
27489: PPUSH
27490: CALL_OW 257
27494: PUSH
27495: LD_INT 1
27497: EQUAL
27498: IFFALSE 27519
// points := [ 10 , 5 , 3 ] ;
27500: LD_ADDR_VAR 0 9
27504: PUSH
27505: LD_INT 10
27507: PUSH
27508: LD_INT 5
27510: PUSH
27511: LD_INT 3
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27519: LD_VAR 0 6
27523: PPUSH
27524: CALL_OW 257
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: LD_INT 3
27534: PUSH
27535: LD_INT 4
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: IN
27543: IFFALSE 27564
// points := [ 3 , 2 , 1 ] ;
27545: LD_ADDR_VAR 0 9
27549: PUSH
27550: LD_INT 3
27552: PUSH
27553: LD_INT 2
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: LIST
27563: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27564: LD_VAR 0 6
27568: PPUSH
27569: CALL_OW 257
27573: PUSH
27574: LD_INT 5
27576: EQUAL
27577: IFFALSE 27598
// points := [ 130 , 5 , 2 ] ;
27579: LD_ADDR_VAR 0 9
27583: PUSH
27584: LD_INT 130
27586: PUSH
27587: LD_INT 5
27589: PUSH
27590: LD_INT 2
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27598: LD_VAR 0 6
27602: PPUSH
27603: CALL_OW 257
27607: PUSH
27608: LD_INT 8
27610: EQUAL
27611: IFFALSE 27632
// points := [ 35 , 35 , 30 ] ;
27613: LD_ADDR_VAR 0 9
27617: PUSH
27618: LD_INT 35
27620: PUSH
27621: LD_INT 35
27623: PUSH
27624: LD_INT 30
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27632: LD_VAR 0 6
27636: PPUSH
27637: CALL_OW 257
27641: PUSH
27642: LD_INT 9
27644: EQUAL
27645: IFFALSE 27666
// points := [ 20 , 55 , 40 ] ;
27647: LD_ADDR_VAR 0 9
27651: PUSH
27652: LD_INT 20
27654: PUSH
27655: LD_INT 55
27657: PUSH
27658: LD_INT 40
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27666: LD_VAR 0 6
27670: PPUSH
27671: CALL_OW 257
27675: PUSH
27676: LD_INT 12
27678: PUSH
27679: LD_INT 16
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: IN
27686: IFFALSE 27707
// points := [ 5 , 3 , 2 ] ;
27688: LD_ADDR_VAR 0 9
27692: PUSH
27693: LD_INT 5
27695: PUSH
27696: LD_INT 3
27698: PUSH
27699: LD_INT 2
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27707: LD_VAR 0 6
27711: PPUSH
27712: CALL_OW 257
27716: PUSH
27717: LD_INT 17
27719: EQUAL
27720: IFFALSE 27741
// points := [ 100 , 50 , 75 ] ;
27722: LD_ADDR_VAR 0 9
27726: PUSH
27727: LD_INT 100
27729: PUSH
27730: LD_INT 50
27732: PUSH
27733: LD_INT 75
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27741: LD_VAR 0 6
27745: PPUSH
27746: CALL_OW 257
27750: PUSH
27751: LD_INT 15
27753: EQUAL
27754: IFFALSE 27775
// points := [ 10 , 5 , 3 ] ;
27756: LD_ADDR_VAR 0 9
27760: PUSH
27761: LD_INT 10
27763: PUSH
27764: LD_INT 5
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27775: LD_VAR 0 6
27779: PPUSH
27780: CALL_OW 257
27784: PUSH
27785: LD_INT 14
27787: EQUAL
27788: IFFALSE 27809
// points := [ 10 , 0 , 0 ] ;
27790: LD_ADDR_VAR 0 9
27794: PUSH
27795: LD_INT 10
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27809: LD_VAR 0 6
27813: PPUSH
27814: CALL_OW 257
27818: PUSH
27819: LD_INT 11
27821: EQUAL
27822: IFFALSE 27843
// points := [ 30 , 10 , 5 ] ;
27824: LD_ADDR_VAR 0 9
27828: PUSH
27829: LD_INT 30
27831: PUSH
27832: LD_INT 10
27834: PUSH
27835: LD_INT 5
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27843: LD_VAR 0 1
27847: PPUSH
27848: LD_INT 5
27850: PPUSH
27851: CALL_OW 321
27855: PUSH
27856: LD_INT 2
27858: EQUAL
27859: IFFALSE 27876
// bpoints := bpoints * 1.8 ;
27861: LD_ADDR_VAR 0 10
27865: PUSH
27866: LD_VAR 0 10
27870: PUSH
27871: LD_REAL  1.80000000000000E+0000
27874: MUL
27875: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27876: LD_VAR 0 6
27880: PPUSH
27881: CALL_OW 257
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: LD_INT 4
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: IN
27904: PUSH
27905: LD_VAR 0 1
27909: PPUSH
27910: LD_INT 51
27912: PPUSH
27913: CALL_OW 321
27917: PUSH
27918: LD_INT 2
27920: EQUAL
27921: AND
27922: IFFALSE 27939
// bpoints := bpoints * 1.2 ;
27924: LD_ADDR_VAR 0 10
27928: PUSH
27929: LD_VAR 0 10
27933: PUSH
27934: LD_REAL  1.20000000000000E+0000
27937: MUL
27938: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27939: LD_VAR 0 6
27943: PPUSH
27944: CALL_OW 257
27948: PUSH
27949: LD_INT 5
27951: PUSH
27952: LD_INT 7
27954: PUSH
27955: LD_INT 9
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: IN
27963: PUSH
27964: LD_VAR 0 1
27968: PPUSH
27969: LD_INT 52
27971: PPUSH
27972: CALL_OW 321
27976: PUSH
27977: LD_INT 2
27979: EQUAL
27980: AND
27981: IFFALSE 27998
// bpoints := bpoints * 1.5 ;
27983: LD_ADDR_VAR 0 10
27987: PUSH
27988: LD_VAR 0 10
27992: PUSH
27993: LD_REAL  1.50000000000000E+0000
27996: MUL
27997: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27998: LD_VAR 0 1
28002: PPUSH
28003: LD_INT 66
28005: PPUSH
28006: CALL_OW 321
28010: PUSH
28011: LD_INT 2
28013: EQUAL
28014: IFFALSE 28031
// bpoints := bpoints * 1.1 ;
28016: LD_ADDR_VAR 0 10
28020: PUSH
28021: LD_VAR 0 10
28025: PUSH
28026: LD_REAL  1.10000000000000E+0000
28029: MUL
28030: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28031: LD_ADDR_VAR 0 10
28035: PUSH
28036: LD_VAR 0 10
28040: PUSH
28041: LD_VAR 0 6
28045: PPUSH
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 259
28053: PUSH
28054: LD_REAL  1.15000000000000E+0000
28057: MUL
28058: MUL
28059: ST_TO_ADDR
// end ; unit_vehicle :
28060: GO 28884
28062: LD_INT 2
28064: DOUBLE
28065: EQUAL
28066: IFTRUE 28070
28068: GO 28872
28070: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28071: LD_VAR 0 6
28075: PPUSH
28076: CALL_OW 264
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: LD_INT 42
28086: PUSH
28087: LD_INT 24
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: IN
28095: IFFALSE 28116
// points := [ 25 , 5 , 3 ] ;
28097: LD_ADDR_VAR 0 9
28101: PUSH
28102: LD_INT 25
28104: PUSH
28105: LD_INT 5
28107: PUSH
28108: LD_INT 3
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28116: LD_VAR 0 6
28120: PPUSH
28121: CALL_OW 264
28125: PUSH
28126: LD_INT 4
28128: PUSH
28129: LD_INT 43
28131: PUSH
28132: LD_INT 25
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: IN
28140: IFFALSE 28161
// points := [ 40 , 15 , 5 ] ;
28142: LD_ADDR_VAR 0 9
28146: PUSH
28147: LD_INT 40
28149: PUSH
28150: LD_INT 15
28152: PUSH
28153: LD_INT 5
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28161: LD_VAR 0 6
28165: PPUSH
28166: CALL_OW 264
28170: PUSH
28171: LD_INT 3
28173: PUSH
28174: LD_INT 23
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: IN
28181: IFFALSE 28202
// points := [ 7 , 25 , 8 ] ;
28183: LD_ADDR_VAR 0 9
28187: PUSH
28188: LD_INT 7
28190: PUSH
28191: LD_INT 25
28193: PUSH
28194: LD_INT 8
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28202: LD_VAR 0 6
28206: PPUSH
28207: CALL_OW 264
28211: PUSH
28212: LD_INT 5
28214: PUSH
28215: LD_INT 27
28217: PUSH
28218: LD_INT 44
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: IN
28226: IFFALSE 28247
// points := [ 14 , 50 , 16 ] ;
28228: LD_ADDR_VAR 0 9
28232: PUSH
28233: LD_INT 14
28235: PUSH
28236: LD_INT 50
28238: PUSH
28239: LD_INT 16
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: LIST
28246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28247: LD_VAR 0 6
28251: PPUSH
28252: CALL_OW 264
28256: PUSH
28257: LD_INT 6
28259: PUSH
28260: LD_INT 46
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: IN
28267: IFFALSE 28288
// points := [ 32 , 120 , 70 ] ;
28269: LD_ADDR_VAR 0 9
28273: PUSH
28274: LD_INT 32
28276: PUSH
28277: LD_INT 120
28279: PUSH
28280: LD_INT 70
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28288: LD_VAR 0 6
28292: PPUSH
28293: CALL_OW 264
28297: PUSH
28298: LD_INT 7
28300: PUSH
28301: LD_INT 28
28303: PUSH
28304: LD_INT 45
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: IN
28312: IFFALSE 28333
// points := [ 35 , 20 , 45 ] ;
28314: LD_ADDR_VAR 0 9
28318: PUSH
28319: LD_INT 35
28321: PUSH
28322: LD_INT 20
28324: PUSH
28325: LD_INT 45
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28333: LD_VAR 0 6
28337: PPUSH
28338: CALL_OW 264
28342: PUSH
28343: LD_INT 47
28345: PUSH
28346: EMPTY
28347: LIST
28348: IN
28349: IFFALSE 28370
// points := [ 67 , 45 , 75 ] ;
28351: LD_ADDR_VAR 0 9
28355: PUSH
28356: LD_INT 67
28358: PUSH
28359: LD_INT 45
28361: PUSH
28362: LD_INT 75
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28370: LD_VAR 0 6
28374: PPUSH
28375: CALL_OW 264
28379: PUSH
28380: LD_INT 26
28382: PUSH
28383: EMPTY
28384: LIST
28385: IN
28386: IFFALSE 28407
// points := [ 120 , 30 , 80 ] ;
28388: LD_ADDR_VAR 0 9
28392: PUSH
28393: LD_INT 120
28395: PUSH
28396: LD_INT 30
28398: PUSH
28399: LD_INT 80
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28407: LD_VAR 0 6
28411: PPUSH
28412: CALL_OW 264
28416: PUSH
28417: LD_INT 22
28419: PUSH
28420: EMPTY
28421: LIST
28422: IN
28423: IFFALSE 28444
// points := [ 40 , 1 , 1 ] ;
28425: LD_ADDR_VAR 0 9
28429: PUSH
28430: LD_INT 40
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28444: LD_VAR 0 6
28448: PPUSH
28449: CALL_OW 264
28453: PUSH
28454: LD_INT 29
28456: PUSH
28457: EMPTY
28458: LIST
28459: IN
28460: IFFALSE 28481
// points := [ 70 , 200 , 400 ] ;
28462: LD_ADDR_VAR 0 9
28466: PUSH
28467: LD_INT 70
28469: PUSH
28470: LD_INT 200
28472: PUSH
28473: LD_INT 400
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: LIST
28480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28481: LD_VAR 0 6
28485: PPUSH
28486: CALL_OW 264
28490: PUSH
28491: LD_INT 14
28493: PUSH
28494: LD_INT 53
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: IN
28501: IFFALSE 28522
// points := [ 40 , 10 , 20 ] ;
28503: LD_ADDR_VAR 0 9
28507: PUSH
28508: LD_INT 40
28510: PUSH
28511: LD_INT 10
28513: PUSH
28514: LD_INT 20
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28522: LD_VAR 0 6
28526: PPUSH
28527: CALL_OW 264
28531: PUSH
28532: LD_INT 9
28534: PUSH
28535: EMPTY
28536: LIST
28537: IN
28538: IFFALSE 28559
// points := [ 5 , 70 , 20 ] ;
28540: LD_ADDR_VAR 0 9
28544: PUSH
28545: LD_INT 5
28547: PUSH
28548: LD_INT 70
28550: PUSH
28551: LD_INT 20
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28559: LD_VAR 0 6
28563: PPUSH
28564: CALL_OW 264
28568: PUSH
28569: LD_INT 10
28571: PUSH
28572: EMPTY
28573: LIST
28574: IN
28575: IFFALSE 28596
// points := [ 35 , 110 , 70 ] ;
28577: LD_ADDR_VAR 0 9
28581: PUSH
28582: LD_INT 35
28584: PUSH
28585: LD_INT 110
28587: PUSH
28588: LD_INT 70
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28596: LD_VAR 0 6
28600: PPUSH
28601: CALL_OW 265
28605: PUSH
28606: LD_INT 25
28608: EQUAL
28609: IFFALSE 28630
// points := [ 80 , 65 , 100 ] ;
28611: LD_ADDR_VAR 0 9
28615: PUSH
28616: LD_INT 80
28618: PUSH
28619: LD_INT 65
28621: PUSH
28622: LD_INT 100
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28630: LD_VAR 0 6
28634: PPUSH
28635: CALL_OW 263
28639: PUSH
28640: LD_INT 1
28642: EQUAL
28643: IFFALSE 28678
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28645: LD_ADDR_VAR 0 10
28649: PUSH
28650: LD_VAR 0 10
28654: PUSH
28655: LD_VAR 0 6
28659: PPUSH
28660: CALL_OW 311
28664: PPUSH
28665: LD_INT 3
28667: PPUSH
28668: CALL_OW 259
28672: PUSH
28673: LD_INT 4
28675: MUL
28676: MUL
28677: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28678: LD_VAR 0 6
28682: PPUSH
28683: CALL_OW 263
28687: PUSH
28688: LD_INT 2
28690: EQUAL
28691: IFFALSE 28742
// begin j := IsControledBy ( i ) ;
28693: LD_ADDR_VAR 0 7
28697: PUSH
28698: LD_VAR 0 6
28702: PPUSH
28703: CALL_OW 312
28707: ST_TO_ADDR
// if j then
28708: LD_VAR 0 7
28712: IFFALSE 28742
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28714: LD_ADDR_VAR 0 10
28718: PUSH
28719: LD_VAR 0 10
28723: PUSH
28724: LD_VAR 0 7
28728: PPUSH
28729: LD_INT 3
28731: PPUSH
28732: CALL_OW 259
28736: PUSH
28737: LD_INT 3
28739: MUL
28740: MUL
28741: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28742: LD_VAR 0 6
28746: PPUSH
28747: CALL_OW 264
28751: PUSH
28752: LD_INT 5
28754: PUSH
28755: LD_INT 6
28757: PUSH
28758: LD_INT 46
28760: PUSH
28761: LD_INT 44
28763: PUSH
28764: LD_INT 47
28766: PUSH
28767: LD_INT 45
28769: PUSH
28770: LD_INT 28
28772: PUSH
28773: LD_INT 7
28775: PUSH
28776: LD_INT 27
28778: PUSH
28779: LD_INT 29
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: IN
28794: PUSH
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_INT 52
28802: PPUSH
28803: CALL_OW 321
28807: PUSH
28808: LD_INT 2
28810: EQUAL
28811: AND
28812: IFFALSE 28829
// bpoints := bpoints * 1.2 ;
28814: LD_ADDR_VAR 0 10
28818: PUSH
28819: LD_VAR 0 10
28823: PUSH
28824: LD_REAL  1.20000000000000E+0000
28827: MUL
28828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28829: LD_VAR 0 6
28833: PPUSH
28834: CALL_OW 264
28838: PUSH
28839: LD_INT 6
28841: PUSH
28842: LD_INT 46
28844: PUSH
28845: LD_INT 47
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: IN
28853: IFFALSE 28870
// bpoints := bpoints * 1.2 ;
28855: LD_ADDR_VAR 0 10
28859: PUSH
28860: LD_VAR 0 10
28864: PUSH
28865: LD_REAL  1.20000000000000E+0000
28868: MUL
28869: ST_TO_ADDR
// end ; unit_building :
28870: GO 28884
28872: LD_INT 3
28874: DOUBLE
28875: EQUAL
28876: IFTRUE 28880
28878: GO 28883
28880: POP
// ; end ;
28881: GO 28884
28883: POP
// for j = 1 to 3 do
28884: LD_ADDR_VAR 0 7
28888: PUSH
28889: DOUBLE
28890: LD_INT 1
28892: DEC
28893: ST_TO_ADDR
28894: LD_INT 3
28896: PUSH
28897: FOR_TO
28898: IFFALSE 28951
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28900: LD_ADDR_VAR 0 5
28904: PUSH
28905: LD_VAR 0 5
28909: PPUSH
28910: LD_VAR 0 7
28914: PPUSH
28915: LD_VAR 0 5
28919: PUSH
28920: LD_VAR 0 7
28924: ARRAY
28925: PUSH
28926: LD_VAR 0 9
28930: PUSH
28931: LD_VAR 0 7
28935: ARRAY
28936: PUSH
28937: LD_VAR 0 10
28941: MUL
28942: PLUS
28943: PPUSH
28944: CALL_OW 1
28948: ST_TO_ADDR
28949: GO 28897
28951: POP
28952: POP
// end ;
28953: GO 27436
28955: POP
28956: POP
// result := Replace ( result , 4 , tmp ) ;
28957: LD_ADDR_VAR 0 5
28961: PUSH
28962: LD_VAR 0 5
28966: PPUSH
28967: LD_INT 4
28969: PPUSH
28970: LD_VAR 0 8
28974: PPUSH
28975: CALL_OW 1
28979: ST_TO_ADDR
// end ;
28980: LD_VAR 0 5
28984: RET
// export function DangerAtRange ( unit , range ) ; begin
28985: LD_INT 0
28987: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28988: LD_ADDR_VAR 0 3
28992: PUSH
28993: LD_VAR 0 1
28997: PPUSH
28998: CALL_OW 255
29002: PPUSH
29003: LD_VAR 0 1
29007: PPUSH
29008: CALL_OW 250
29012: PPUSH
29013: LD_VAR 0 1
29017: PPUSH
29018: CALL_OW 251
29022: PPUSH
29023: LD_VAR 0 2
29027: PPUSH
29028: CALL 27288 0 4
29032: ST_TO_ADDR
// end ;
29033: LD_VAR 0 3
29037: RET
// export function DangerInArea ( side , area ) ; begin
29038: LD_INT 0
29040: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_VAR 0 2
29050: PPUSH
29051: LD_INT 81
29053: PUSH
29054: LD_VAR 0 1
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PPUSH
29063: CALL_OW 70
29067: ST_TO_ADDR
// end ;
29068: LD_VAR 0 3
29072: RET
// export function IsExtension ( b ) ; begin
29073: LD_INT 0
29075: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29076: LD_ADDR_VAR 0 2
29080: PUSH
29081: LD_VAR 0 1
29085: PUSH
29086: LD_INT 23
29088: PUSH
29089: LD_INT 20
29091: PUSH
29092: LD_INT 22
29094: PUSH
29095: LD_INT 17
29097: PUSH
29098: LD_INT 24
29100: PUSH
29101: LD_INT 21
29103: PUSH
29104: LD_INT 19
29106: PUSH
29107: LD_INT 16
29109: PUSH
29110: LD_INT 25
29112: PUSH
29113: LD_INT 18
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: IN
29128: ST_TO_ADDR
// end ;
29129: LD_VAR 0 2
29133: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29134: LD_INT 0
29136: PPUSH
29137: PPUSH
29138: PPUSH
// result := [ ] ;
29139: LD_ADDR_VAR 0 4
29143: PUSH
29144: EMPTY
29145: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29146: LD_ADDR_VAR 0 5
29150: PUSH
29151: LD_VAR 0 2
29155: PPUSH
29156: LD_INT 21
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PPUSH
29166: CALL_OW 70
29170: ST_TO_ADDR
// if not tmp then
29171: LD_VAR 0 5
29175: NOT
29176: IFFALSE 29180
// exit ;
29178: GO 29244
// if checkLink then
29180: LD_VAR 0 3
29184: IFFALSE 29234
// begin for i in tmp do
29186: LD_ADDR_VAR 0 6
29190: PUSH
29191: LD_VAR 0 5
29195: PUSH
29196: FOR_IN
29197: IFFALSE 29232
// if GetBase ( i ) <> base then
29199: LD_VAR 0 6
29203: PPUSH
29204: CALL_OW 274
29208: PUSH
29209: LD_VAR 0 1
29213: NONEQUAL
29214: IFFALSE 29230
// ComLinkToBase ( base , i ) ;
29216: LD_VAR 0 1
29220: PPUSH
29221: LD_VAR 0 6
29225: PPUSH
29226: CALL_OW 169
29230: GO 29196
29232: POP
29233: POP
// end ; result := tmp ;
29234: LD_ADDR_VAR 0 4
29238: PUSH
29239: LD_VAR 0 5
29243: ST_TO_ADDR
// end ;
29244: LD_VAR 0 4
29248: RET
// export function ComComplete ( units , b ) ; var i ; begin
29249: LD_INT 0
29251: PPUSH
29252: PPUSH
// if not units then
29253: LD_VAR 0 1
29257: NOT
29258: IFFALSE 29262
// exit ;
29260: GO 29352
// for i in units do
29262: LD_ADDR_VAR 0 4
29266: PUSH
29267: LD_VAR 0 1
29271: PUSH
29272: FOR_IN
29273: IFFALSE 29350
// if BuildingStatus ( b ) = bs_build then
29275: LD_VAR 0 2
29279: PPUSH
29280: CALL_OW 461
29284: PUSH
29285: LD_INT 1
29287: EQUAL
29288: IFFALSE 29348
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29290: LD_VAR 0 4
29294: PPUSH
29295: LD_STRING h
29297: PUSH
29298: LD_VAR 0 2
29302: PPUSH
29303: CALL_OW 250
29307: PUSH
29308: LD_VAR 0 2
29312: PPUSH
29313: CALL_OW 251
29317: PUSH
29318: LD_VAR 0 2
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: PUSH
29341: EMPTY
29342: LIST
29343: PPUSH
29344: CALL_OW 446
29348: GO 29272
29350: POP
29351: POP
// end ;
29352: LD_VAR 0 3
29356: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29357: LD_INT 0
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29365: LD_VAR 0 1
29369: NOT
29370: PUSH
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 263
29380: PUSH
29381: LD_INT 2
29383: EQUAL
29384: NOT
29385: OR
29386: IFFALSE 29390
// exit ;
29388: GO 29706
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29390: LD_ADDR_VAR 0 6
29394: PUSH
29395: LD_INT 22
29397: PUSH
29398: LD_VAR 0 1
29402: PPUSH
29403: CALL_OW 255
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: LD_INT 30
29417: PUSH
29418: LD_INT 36
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 34
29427: PUSH
29428: LD_INT 31
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PPUSH
29444: CALL_OW 69
29448: ST_TO_ADDR
// if not tmp then
29449: LD_VAR 0 6
29453: NOT
29454: IFFALSE 29458
// exit ;
29456: GO 29706
// result := [ ] ;
29458: LD_ADDR_VAR 0 2
29462: PUSH
29463: EMPTY
29464: ST_TO_ADDR
// for i in tmp do
29465: LD_ADDR_VAR 0 3
29469: PUSH
29470: LD_VAR 0 6
29474: PUSH
29475: FOR_IN
29476: IFFALSE 29547
// begin t := UnitsInside ( i ) ;
29478: LD_ADDR_VAR 0 4
29482: PUSH
29483: LD_VAR 0 3
29487: PPUSH
29488: CALL_OW 313
29492: ST_TO_ADDR
// if t then
29493: LD_VAR 0 4
29497: IFFALSE 29545
// for j in t do
29499: LD_ADDR_VAR 0 7
29503: PUSH
29504: LD_VAR 0 4
29508: PUSH
29509: FOR_IN
29510: IFFALSE 29543
// result := Insert ( result , result + 1 , j ) ;
29512: LD_ADDR_VAR 0 2
29516: PUSH
29517: LD_VAR 0 2
29521: PPUSH
29522: LD_VAR 0 2
29526: PUSH
29527: LD_INT 1
29529: PLUS
29530: PPUSH
29531: LD_VAR 0 7
29535: PPUSH
29536: CALL_OW 2
29540: ST_TO_ADDR
29541: GO 29509
29543: POP
29544: POP
// end ;
29545: GO 29475
29547: POP
29548: POP
// if not result then
29549: LD_VAR 0 2
29553: NOT
29554: IFFALSE 29558
// exit ;
29556: GO 29706
// mech := result [ 1 ] ;
29558: LD_ADDR_VAR 0 5
29562: PUSH
29563: LD_VAR 0 2
29567: PUSH
29568: LD_INT 1
29570: ARRAY
29571: ST_TO_ADDR
// if result > 1 then
29572: LD_VAR 0 2
29576: PUSH
29577: LD_INT 1
29579: GREATER
29580: IFFALSE 29692
// for i = 2 to result do
29582: LD_ADDR_VAR 0 3
29586: PUSH
29587: DOUBLE
29588: LD_INT 2
29590: DEC
29591: ST_TO_ADDR
29592: LD_VAR 0 2
29596: PUSH
29597: FOR_TO
29598: IFFALSE 29690
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29600: LD_ADDR_VAR 0 4
29604: PUSH
29605: LD_VAR 0 2
29609: PUSH
29610: LD_VAR 0 3
29614: ARRAY
29615: PPUSH
29616: LD_INT 3
29618: PPUSH
29619: CALL_OW 259
29623: PUSH
29624: LD_VAR 0 2
29628: PUSH
29629: LD_VAR 0 3
29633: ARRAY
29634: PPUSH
29635: CALL_OW 432
29639: MINUS
29640: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29641: LD_VAR 0 4
29645: PUSH
29646: LD_VAR 0 5
29650: PPUSH
29651: LD_INT 3
29653: PPUSH
29654: CALL_OW 259
29658: PUSH
29659: LD_VAR 0 5
29663: PPUSH
29664: CALL_OW 432
29668: MINUS
29669: GREATEREQUAL
29670: IFFALSE 29688
// mech := result [ i ] ;
29672: LD_ADDR_VAR 0 5
29676: PUSH
29677: LD_VAR 0 2
29681: PUSH
29682: LD_VAR 0 3
29686: ARRAY
29687: ST_TO_ADDR
// end ;
29688: GO 29597
29690: POP
29691: POP
// ComLinkTo ( vehicle , mech ) ;
29692: LD_VAR 0 1
29696: PPUSH
29697: LD_VAR 0 5
29701: PPUSH
29702: CALL_OW 135
// end ;
29706: LD_VAR 0 2
29710: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29711: LD_INT 0
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
// result := [ ] ;
29726: LD_ADDR_VAR 0 7
29730: PUSH
29731: EMPTY
29732: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29733: LD_VAR 0 1
29737: PPUSH
29738: CALL_OW 266
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: IN
29753: NOT
29754: IFFALSE 29758
// exit ;
29756: GO 31392
// if name then
29758: LD_VAR 0 3
29762: IFFALSE 29778
// SetBName ( base_dep , name ) ;
29764: LD_VAR 0 1
29768: PPUSH
29769: LD_VAR 0 3
29773: PPUSH
29774: CALL_OW 500
// base := GetBase ( base_dep ) ;
29778: LD_ADDR_VAR 0 15
29782: PUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 274
29792: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29793: LD_ADDR_VAR 0 16
29797: PUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 255
29807: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29808: LD_ADDR_VAR 0 17
29812: PUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 248
29822: ST_TO_ADDR
// if sources then
29823: LD_VAR 0 5
29827: IFFALSE 29874
// for i = 1 to 3 do
29829: LD_ADDR_VAR 0 8
29833: PUSH
29834: DOUBLE
29835: LD_INT 1
29837: DEC
29838: ST_TO_ADDR
29839: LD_INT 3
29841: PUSH
29842: FOR_TO
29843: IFFALSE 29872
// AddResourceType ( base , i , sources [ i ] ) ;
29845: LD_VAR 0 15
29849: PPUSH
29850: LD_VAR 0 8
29854: PPUSH
29855: LD_VAR 0 5
29859: PUSH
29860: LD_VAR 0 8
29864: ARRAY
29865: PPUSH
29866: CALL_OW 276
29870: GO 29842
29872: POP
29873: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29874: LD_ADDR_VAR 0 18
29878: PUSH
29879: LD_VAR 0 15
29883: PPUSH
29884: LD_VAR 0 2
29888: PPUSH
29889: LD_INT 1
29891: PPUSH
29892: CALL 29134 0 3
29896: ST_TO_ADDR
// InitHc ;
29897: CALL_OW 19
// InitUc ;
29901: CALL_OW 18
// uc_side := side ;
29905: LD_ADDR_OWVAR 20
29909: PUSH
29910: LD_VAR 0 16
29914: ST_TO_ADDR
// uc_nation := nation ;
29915: LD_ADDR_OWVAR 21
29919: PUSH
29920: LD_VAR 0 17
29924: ST_TO_ADDR
// if buildings then
29925: LD_VAR 0 18
29929: IFFALSE 31251
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29931: LD_ADDR_VAR 0 19
29935: PUSH
29936: LD_VAR 0 18
29940: PPUSH
29941: LD_INT 2
29943: PUSH
29944: LD_INT 30
29946: PUSH
29947: LD_INT 29
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 30
29956: PUSH
29957: LD_INT 30
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 72
29973: ST_TO_ADDR
// if tmp then
29974: LD_VAR 0 19
29978: IFFALSE 30026
// for i in tmp do
29980: LD_ADDR_VAR 0 8
29984: PUSH
29985: LD_VAR 0 19
29989: PUSH
29990: FOR_IN
29991: IFFALSE 30024
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29993: LD_VAR 0 8
29997: PPUSH
29998: CALL_OW 250
30002: PPUSH
30003: LD_VAR 0 8
30007: PPUSH
30008: CALL_OW 251
30012: PPUSH
30013: LD_VAR 0 16
30017: PPUSH
30018: CALL_OW 441
30022: GO 29990
30024: POP
30025: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30026: LD_VAR 0 18
30030: PPUSH
30031: LD_INT 2
30033: PUSH
30034: LD_INT 30
30036: PUSH
30037: LD_INT 32
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 30
30046: PUSH
30047: LD_INT 33
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: PPUSH
30059: CALL_OW 72
30063: IFFALSE 30151
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30065: LD_ADDR_VAR 0 8
30069: PUSH
30070: LD_VAR 0 18
30074: PPUSH
30075: LD_INT 2
30077: PUSH
30078: LD_INT 30
30080: PUSH
30081: LD_INT 32
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 30
30090: PUSH
30091: LD_INT 33
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: LIST
30102: PPUSH
30103: CALL_OW 72
30107: PUSH
30108: FOR_IN
30109: IFFALSE 30149
// begin if not GetBWeapon ( i ) then
30111: LD_VAR 0 8
30115: PPUSH
30116: CALL_OW 269
30120: NOT
30121: IFFALSE 30147
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30123: LD_VAR 0 8
30127: PPUSH
30128: LD_VAR 0 8
30132: PPUSH
30133: LD_VAR 0 2
30137: PPUSH
30138: CALL 31397 0 2
30142: PPUSH
30143: CALL_OW 431
// end ;
30147: GO 30108
30149: POP
30150: POP
// end ; for i = 1 to personel do
30151: LD_ADDR_VAR 0 8
30155: PUSH
30156: DOUBLE
30157: LD_INT 1
30159: DEC
30160: ST_TO_ADDR
30161: LD_VAR 0 6
30165: PUSH
30166: FOR_TO
30167: IFFALSE 31231
// begin if i > 4 then
30169: LD_VAR 0 8
30173: PUSH
30174: LD_INT 4
30176: GREATER
30177: IFFALSE 30181
// break ;
30179: GO 31231
// case i of 1 :
30181: LD_VAR 0 8
30185: PUSH
30186: LD_INT 1
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30274
30194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30195: LD_ADDR_VAR 0 12
30199: PUSH
30200: LD_VAR 0 18
30204: PPUSH
30205: LD_INT 22
30207: PUSH
30208: LD_VAR 0 16
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 58
30219: PUSH
30220: EMPTY
30221: LIST
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: LD_INT 30
30228: PUSH
30229: LD_INT 32
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 30
30238: PUSH
30239: LD_INT 4
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 30
30248: PUSH
30249: LD_INT 5
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: LIST
30266: PPUSH
30267: CALL_OW 72
30271: ST_TO_ADDR
30272: GO 30496
30274: LD_INT 2
30276: DOUBLE
30277: EQUAL
30278: IFTRUE 30282
30280: GO 30344
30282: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30283: LD_ADDR_VAR 0 12
30287: PUSH
30288: LD_VAR 0 18
30292: PPUSH
30293: LD_INT 22
30295: PUSH
30296: LD_VAR 0 16
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: LD_INT 30
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 30
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PPUSH
30337: CALL_OW 72
30341: ST_TO_ADDR
30342: GO 30496
30344: LD_INT 3
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30414
30352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30353: LD_ADDR_VAR 0 12
30357: PUSH
30358: LD_VAR 0 18
30362: PPUSH
30363: LD_INT 22
30365: PUSH
30366: LD_VAR 0 16
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 30
30380: PUSH
30381: LD_INT 2
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 30
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PPUSH
30407: CALL_OW 72
30411: ST_TO_ADDR
30412: GO 30496
30414: LD_INT 4
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30495
30422: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30423: LD_ADDR_VAR 0 12
30427: PUSH
30428: LD_VAR 0 18
30432: PPUSH
30433: LD_INT 22
30435: PUSH
30436: LD_VAR 0 16
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 2
30447: PUSH
30448: LD_INT 30
30450: PUSH
30451: LD_INT 6
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 30
30460: PUSH
30461: LD_INT 7
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 30
30470: PUSH
30471: LD_INT 8
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PPUSH
30488: CALL_OW 72
30492: ST_TO_ADDR
30493: GO 30496
30495: POP
// if i = 1 then
30496: LD_VAR 0 8
30500: PUSH
30501: LD_INT 1
30503: EQUAL
30504: IFFALSE 30615
// begin tmp := [ ] ;
30506: LD_ADDR_VAR 0 19
30510: PUSH
30511: EMPTY
30512: ST_TO_ADDR
// for j in f do
30513: LD_ADDR_VAR 0 9
30517: PUSH
30518: LD_VAR 0 12
30522: PUSH
30523: FOR_IN
30524: IFFALSE 30597
// if GetBType ( j ) = b_bunker then
30526: LD_VAR 0 9
30530: PPUSH
30531: CALL_OW 266
30535: PUSH
30536: LD_INT 32
30538: EQUAL
30539: IFFALSE 30566
// tmp := Insert ( tmp , 1 , j ) else
30541: LD_ADDR_VAR 0 19
30545: PUSH
30546: LD_VAR 0 19
30550: PPUSH
30551: LD_INT 1
30553: PPUSH
30554: LD_VAR 0 9
30558: PPUSH
30559: CALL_OW 2
30563: ST_TO_ADDR
30564: GO 30595
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30566: LD_ADDR_VAR 0 19
30570: PUSH
30571: LD_VAR 0 19
30575: PPUSH
30576: LD_VAR 0 19
30580: PUSH
30581: LD_INT 1
30583: PLUS
30584: PPUSH
30585: LD_VAR 0 9
30589: PPUSH
30590: CALL_OW 2
30594: ST_TO_ADDR
30595: GO 30523
30597: POP
30598: POP
// if tmp then
30599: LD_VAR 0 19
30603: IFFALSE 30615
// f := tmp ;
30605: LD_ADDR_VAR 0 12
30609: PUSH
30610: LD_VAR 0 19
30614: ST_TO_ADDR
// end ; x := personel [ i ] ;
30615: LD_ADDR_VAR 0 13
30619: PUSH
30620: LD_VAR 0 6
30624: PUSH
30625: LD_VAR 0 8
30629: ARRAY
30630: ST_TO_ADDR
// if x = - 1 then
30631: LD_VAR 0 13
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: EQUAL
30640: IFFALSE 30849
// begin for j in f do
30642: LD_ADDR_VAR 0 9
30646: PUSH
30647: LD_VAR 0 12
30651: PUSH
30652: FOR_IN
30653: IFFALSE 30845
// repeat InitHc ;
30655: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30659: LD_VAR 0 9
30663: PPUSH
30664: CALL_OW 266
30668: PUSH
30669: LD_INT 5
30671: EQUAL
30672: IFFALSE 30742
// begin if UnitsInside ( j ) < 3 then
30674: LD_VAR 0 9
30678: PPUSH
30679: CALL_OW 313
30683: PUSH
30684: LD_INT 3
30686: LESS
30687: IFFALSE 30723
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30689: LD_INT 0
30691: PPUSH
30692: LD_INT 5
30694: PUSH
30695: LD_INT 8
30697: PUSH
30698: LD_INT 9
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: PUSH
30706: LD_VAR 0 17
30710: ARRAY
30711: PPUSH
30712: LD_VAR 0 4
30716: PPUSH
30717: CALL_OW 380
30721: GO 30740
// PrepareHuman ( false , i , skill ) ;
30723: LD_INT 0
30725: PPUSH
30726: LD_VAR 0 8
30730: PPUSH
30731: LD_VAR 0 4
30735: PPUSH
30736: CALL_OW 380
// end else
30740: GO 30759
// PrepareHuman ( false , i , skill ) ;
30742: LD_INT 0
30744: PPUSH
30745: LD_VAR 0 8
30749: PPUSH
30750: LD_VAR 0 4
30754: PPUSH
30755: CALL_OW 380
// un := CreateHuman ;
30759: LD_ADDR_VAR 0 14
30763: PUSH
30764: CALL_OW 44
30768: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30769: LD_ADDR_VAR 0 7
30773: PUSH
30774: LD_VAR 0 7
30778: PPUSH
30779: LD_INT 1
30781: PPUSH
30782: LD_VAR 0 14
30786: PPUSH
30787: CALL_OW 2
30791: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30792: LD_VAR 0 14
30796: PPUSH
30797: LD_VAR 0 9
30801: PPUSH
30802: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30806: LD_VAR 0 9
30810: PPUSH
30811: CALL_OW 313
30815: PUSH
30816: LD_INT 6
30818: EQUAL
30819: PUSH
30820: LD_VAR 0 9
30824: PPUSH
30825: CALL_OW 266
30829: PUSH
30830: LD_INT 32
30832: PUSH
30833: LD_INT 31
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: IN
30840: OR
30841: IFFALSE 30655
30843: GO 30652
30845: POP
30846: POP
// end else
30847: GO 31229
// for j = 1 to x do
30849: LD_ADDR_VAR 0 9
30853: PUSH
30854: DOUBLE
30855: LD_INT 1
30857: DEC
30858: ST_TO_ADDR
30859: LD_VAR 0 13
30863: PUSH
30864: FOR_TO
30865: IFFALSE 31227
// begin InitHc ;
30867: CALL_OW 19
// if not f then
30871: LD_VAR 0 12
30875: NOT
30876: IFFALSE 30965
// begin PrepareHuman ( false , i , skill ) ;
30878: LD_INT 0
30880: PPUSH
30881: LD_VAR 0 8
30885: PPUSH
30886: LD_VAR 0 4
30890: PPUSH
30891: CALL_OW 380
// un := CreateHuman ;
30895: LD_ADDR_VAR 0 14
30899: PUSH
30900: CALL_OW 44
30904: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30905: LD_ADDR_VAR 0 7
30909: PUSH
30910: LD_VAR 0 7
30914: PPUSH
30915: LD_INT 1
30917: PPUSH
30918: LD_VAR 0 14
30922: PPUSH
30923: CALL_OW 2
30927: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30928: LD_VAR 0 14
30932: PPUSH
30933: LD_VAR 0 1
30937: PPUSH
30938: CALL_OW 250
30942: PPUSH
30943: LD_VAR 0 1
30947: PPUSH
30948: CALL_OW 251
30952: PPUSH
30953: LD_INT 10
30955: PPUSH
30956: LD_INT 0
30958: PPUSH
30959: CALL_OW 50
// continue ;
30963: GO 30864
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30965: LD_VAR 0 12
30969: PUSH
30970: LD_INT 1
30972: ARRAY
30973: PPUSH
30974: CALL_OW 313
30978: PUSH
30979: LD_VAR 0 12
30983: PUSH
30984: LD_INT 1
30986: ARRAY
30987: PPUSH
30988: CALL_OW 266
30992: PUSH
30993: LD_INT 32
30995: PUSH
30996: LD_INT 31
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: IN
31003: AND
31004: PUSH
31005: LD_VAR 0 12
31009: PUSH
31010: LD_INT 1
31012: ARRAY
31013: PPUSH
31014: CALL_OW 313
31018: PUSH
31019: LD_INT 6
31021: EQUAL
31022: OR
31023: IFFALSE 31043
// f := Delete ( f , 1 ) ;
31025: LD_ADDR_VAR 0 12
31029: PUSH
31030: LD_VAR 0 12
31034: PPUSH
31035: LD_INT 1
31037: PPUSH
31038: CALL_OW 3
31042: ST_TO_ADDR
// if not f then
31043: LD_VAR 0 12
31047: NOT
31048: IFFALSE 31066
// begin x := x + 2 ;
31050: LD_ADDR_VAR 0 13
31054: PUSH
31055: LD_VAR 0 13
31059: PUSH
31060: LD_INT 2
31062: PLUS
31063: ST_TO_ADDR
// continue ;
31064: GO 30864
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31066: LD_VAR 0 12
31070: PUSH
31071: LD_INT 1
31073: ARRAY
31074: PPUSH
31075: CALL_OW 266
31079: PUSH
31080: LD_INT 5
31082: EQUAL
31083: IFFALSE 31157
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31085: LD_VAR 0 12
31089: PUSH
31090: LD_INT 1
31092: ARRAY
31093: PPUSH
31094: CALL_OW 313
31098: PUSH
31099: LD_INT 3
31101: LESS
31102: IFFALSE 31138
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31104: LD_INT 0
31106: PPUSH
31107: LD_INT 5
31109: PUSH
31110: LD_INT 8
31112: PUSH
31113: LD_INT 9
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: PUSH
31121: LD_VAR 0 17
31125: ARRAY
31126: PPUSH
31127: LD_VAR 0 4
31131: PPUSH
31132: CALL_OW 380
31136: GO 31155
// PrepareHuman ( false , i , skill ) ;
31138: LD_INT 0
31140: PPUSH
31141: LD_VAR 0 8
31145: PPUSH
31146: LD_VAR 0 4
31150: PPUSH
31151: CALL_OW 380
// end else
31155: GO 31174
// PrepareHuman ( false , i , skill ) ;
31157: LD_INT 0
31159: PPUSH
31160: LD_VAR 0 8
31164: PPUSH
31165: LD_VAR 0 4
31169: PPUSH
31170: CALL_OW 380
// un := CreateHuman ;
31174: LD_ADDR_VAR 0 14
31178: PUSH
31179: CALL_OW 44
31183: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31184: LD_ADDR_VAR 0 7
31188: PUSH
31189: LD_VAR 0 7
31193: PPUSH
31194: LD_INT 1
31196: PPUSH
31197: LD_VAR 0 14
31201: PPUSH
31202: CALL_OW 2
31206: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31207: LD_VAR 0 14
31211: PPUSH
31212: LD_VAR 0 12
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: CALL_OW 52
// end ;
31225: GO 30864
31227: POP
31228: POP
// end ;
31229: GO 30166
31231: POP
31232: POP
// result := result ^ buildings ;
31233: LD_ADDR_VAR 0 7
31237: PUSH
31238: LD_VAR 0 7
31242: PUSH
31243: LD_VAR 0 18
31247: ADD
31248: ST_TO_ADDR
// end else
31249: GO 31392
// begin for i = 1 to personel do
31251: LD_ADDR_VAR 0 8
31255: PUSH
31256: DOUBLE
31257: LD_INT 1
31259: DEC
31260: ST_TO_ADDR
31261: LD_VAR 0 6
31265: PUSH
31266: FOR_TO
31267: IFFALSE 31390
// begin if i > 4 then
31269: LD_VAR 0 8
31273: PUSH
31274: LD_INT 4
31276: GREATER
31277: IFFALSE 31281
// break ;
31279: GO 31390
// x := personel [ i ] ;
31281: LD_ADDR_VAR 0 13
31285: PUSH
31286: LD_VAR 0 6
31290: PUSH
31291: LD_VAR 0 8
31295: ARRAY
31296: ST_TO_ADDR
// if x = - 1 then
31297: LD_VAR 0 13
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: EQUAL
31306: IFFALSE 31310
// continue ;
31308: GO 31266
// PrepareHuman ( false , i , skill ) ;
31310: LD_INT 0
31312: PPUSH
31313: LD_VAR 0 8
31317: PPUSH
31318: LD_VAR 0 4
31322: PPUSH
31323: CALL_OW 380
// un := CreateHuman ;
31327: LD_ADDR_VAR 0 14
31331: PUSH
31332: CALL_OW 44
31336: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31337: LD_VAR 0 14
31341: PPUSH
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 250
31351: PPUSH
31352: LD_VAR 0 1
31356: PPUSH
31357: CALL_OW 251
31361: PPUSH
31362: LD_INT 10
31364: PPUSH
31365: LD_INT 0
31367: PPUSH
31368: CALL_OW 50
// result := result ^ un ;
31372: LD_ADDR_VAR 0 7
31376: PUSH
31377: LD_VAR 0 7
31381: PUSH
31382: LD_VAR 0 14
31386: ADD
31387: ST_TO_ADDR
// end ;
31388: GO 31266
31390: POP
31391: POP
// end ; end ;
31392: LD_VAR 0 7
31396: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31397: LD_INT 0
31399: PPUSH
31400: PPUSH
31401: PPUSH
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
31412: PPUSH
31413: PPUSH
31414: PPUSH
// result := false ;
31415: LD_ADDR_VAR 0 3
31419: PUSH
31420: LD_INT 0
31422: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31423: LD_VAR 0 1
31427: NOT
31428: PUSH
31429: LD_VAR 0 1
31433: PPUSH
31434: CALL_OW 266
31438: PUSH
31439: LD_INT 32
31441: PUSH
31442: LD_INT 33
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: IN
31449: NOT
31450: OR
31451: IFFALSE 31455
// exit ;
31453: GO 32564
// nat := GetNation ( tower ) ;
31455: LD_ADDR_VAR 0 12
31459: PUSH
31460: LD_VAR 0 1
31464: PPUSH
31465: CALL_OW 248
31469: ST_TO_ADDR
// side := GetSide ( tower ) ;
31470: LD_ADDR_VAR 0 16
31474: PUSH
31475: LD_VAR 0 1
31479: PPUSH
31480: CALL_OW 255
31484: ST_TO_ADDR
// x := GetX ( tower ) ;
31485: LD_ADDR_VAR 0 10
31489: PUSH
31490: LD_VAR 0 1
31494: PPUSH
31495: CALL_OW 250
31499: ST_TO_ADDR
// y := GetY ( tower ) ;
31500: LD_ADDR_VAR 0 11
31504: PUSH
31505: LD_VAR 0 1
31509: PPUSH
31510: CALL_OW 251
31514: ST_TO_ADDR
// if not x or not y then
31515: LD_VAR 0 10
31519: NOT
31520: PUSH
31521: LD_VAR 0 11
31525: NOT
31526: OR
31527: IFFALSE 31531
// exit ;
31529: GO 32564
// weapon := 0 ;
31531: LD_ADDR_VAR 0 18
31535: PUSH
31536: LD_INT 0
31538: ST_TO_ADDR
// fac_list := [ ] ;
31539: LD_ADDR_VAR 0 17
31543: PUSH
31544: EMPTY
31545: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31546: LD_ADDR_VAR 0 6
31550: PUSH
31551: LD_VAR 0 1
31555: PPUSH
31556: CALL_OW 274
31560: PPUSH
31561: LD_VAR 0 2
31565: PPUSH
31566: LD_INT 0
31568: PPUSH
31569: CALL 29134 0 3
31573: PPUSH
31574: LD_INT 30
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PPUSH
31584: CALL_OW 72
31588: ST_TO_ADDR
// if not factories then
31589: LD_VAR 0 6
31593: NOT
31594: IFFALSE 31598
// exit ;
31596: GO 32564
// for i in factories do
31598: LD_ADDR_VAR 0 8
31602: PUSH
31603: LD_VAR 0 6
31607: PUSH
31608: FOR_IN
31609: IFFALSE 31634
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31611: LD_ADDR_VAR 0 17
31615: PUSH
31616: LD_VAR 0 17
31620: PUSH
31621: LD_VAR 0 8
31625: PPUSH
31626: CALL_OW 478
31630: UNION
31631: ST_TO_ADDR
31632: GO 31608
31634: POP
31635: POP
// if not fac_list then
31636: LD_VAR 0 17
31640: NOT
31641: IFFALSE 31645
// exit ;
31643: GO 32564
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31645: LD_ADDR_VAR 0 5
31649: PUSH
31650: LD_INT 4
31652: PUSH
31653: LD_INT 5
31655: PUSH
31656: LD_INT 9
31658: PUSH
31659: LD_INT 10
31661: PUSH
31662: LD_INT 6
31664: PUSH
31665: LD_INT 7
31667: PUSH
31668: LD_INT 11
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 27
31682: PUSH
31683: LD_INT 28
31685: PUSH
31686: LD_INT 26
31688: PUSH
31689: LD_INT 30
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 43
31700: PUSH
31701: LD_INT 44
31703: PUSH
31704: LD_INT 46
31706: PUSH
31707: LD_INT 45
31709: PUSH
31710: LD_INT 47
31712: PUSH
31713: LD_INT 49
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: PUSH
31729: LD_VAR 0 12
31733: ARRAY
31734: ST_TO_ADDR
// list := list isect fac_list ;
31735: LD_ADDR_VAR 0 5
31739: PUSH
31740: LD_VAR 0 5
31744: PUSH
31745: LD_VAR 0 17
31749: ISECT
31750: ST_TO_ADDR
// if not list then
31751: LD_VAR 0 5
31755: NOT
31756: IFFALSE 31760
// exit ;
31758: GO 32564
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31760: LD_VAR 0 12
31764: PUSH
31765: LD_INT 3
31767: EQUAL
31768: PUSH
31769: LD_INT 49
31771: PUSH
31772: LD_VAR 0 5
31776: IN
31777: AND
31778: PUSH
31779: LD_INT 31
31781: PPUSH
31782: LD_VAR 0 16
31786: PPUSH
31787: CALL_OW 321
31791: PUSH
31792: LD_INT 2
31794: EQUAL
31795: AND
31796: IFFALSE 31856
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31798: LD_INT 22
31800: PUSH
31801: LD_VAR 0 16
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 35
31812: PUSH
31813: LD_INT 49
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 91
31822: PUSH
31823: LD_VAR 0 1
31827: PUSH
31828: LD_INT 10
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: PPUSH
31841: CALL_OW 69
31845: NOT
31846: IFFALSE 31856
// weapon := ru_time_lapser ;
31848: LD_ADDR_VAR 0 18
31852: PUSH
31853: LD_INT 49
31855: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31856: LD_VAR 0 12
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: IN
31871: PUSH
31872: LD_INT 11
31874: PUSH
31875: LD_VAR 0 5
31879: IN
31880: PUSH
31881: LD_INT 30
31883: PUSH
31884: LD_VAR 0 5
31888: IN
31889: OR
31890: AND
31891: PUSH
31892: LD_INT 6
31894: PPUSH
31895: LD_VAR 0 16
31899: PPUSH
31900: CALL_OW 321
31904: PUSH
31905: LD_INT 2
31907: EQUAL
31908: AND
31909: IFFALSE 32074
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31911: LD_INT 22
31913: PUSH
31914: LD_VAR 0 16
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: LD_INT 35
31928: PUSH
31929: LD_INT 11
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 35
31938: PUSH
31939: LD_INT 30
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 91
31953: PUSH
31954: LD_VAR 0 1
31958: PUSH
31959: LD_INT 18
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: PPUSH
31972: CALL_OW 69
31976: NOT
31977: PUSH
31978: LD_INT 22
31980: PUSH
31981: LD_VAR 0 16
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: LD_INT 30
31995: PUSH
31996: LD_INT 32
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 30
32005: PUSH
32006: LD_INT 33
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 91
32020: PUSH
32021: LD_VAR 0 1
32025: PUSH
32026: LD_INT 12
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: PPUSH
32042: CALL_OW 69
32046: PUSH
32047: LD_INT 2
32049: GREATER
32050: AND
32051: IFFALSE 32074
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32053: LD_ADDR_VAR 0 18
32057: PUSH
32058: LD_INT 11
32060: PUSH
32061: LD_INT 30
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_VAR 0 12
32072: ARRAY
32073: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32074: LD_VAR 0 18
32078: NOT
32079: PUSH
32080: LD_INT 40
32082: PPUSH
32083: LD_VAR 0 16
32087: PPUSH
32088: CALL_OW 321
32092: PUSH
32093: LD_INT 2
32095: EQUAL
32096: AND
32097: PUSH
32098: LD_INT 7
32100: PUSH
32101: LD_VAR 0 5
32105: IN
32106: PUSH
32107: LD_INT 28
32109: PUSH
32110: LD_VAR 0 5
32114: IN
32115: OR
32116: PUSH
32117: LD_INT 45
32119: PUSH
32120: LD_VAR 0 5
32124: IN
32125: OR
32126: AND
32127: IFFALSE 32381
// begin hex := GetHexInfo ( x , y ) ;
32129: LD_ADDR_VAR 0 4
32133: PUSH
32134: LD_VAR 0 10
32138: PPUSH
32139: LD_VAR 0 11
32143: PPUSH
32144: CALL_OW 546
32148: ST_TO_ADDR
// if hex [ 1 ] then
32149: LD_VAR 0 4
32153: PUSH
32154: LD_INT 1
32156: ARRAY
32157: IFFALSE 32161
// exit ;
32159: GO 32564
// height := hex [ 2 ] ;
32161: LD_ADDR_VAR 0 15
32165: PUSH
32166: LD_VAR 0 4
32170: PUSH
32171: LD_INT 2
32173: ARRAY
32174: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32175: LD_ADDR_VAR 0 14
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 5
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: ST_TO_ADDR
// for i in tmp do
32198: LD_ADDR_VAR 0 8
32202: PUSH
32203: LD_VAR 0 14
32207: PUSH
32208: FOR_IN
32209: IFFALSE 32379
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32211: LD_ADDR_VAR 0 9
32215: PUSH
32216: LD_VAR 0 10
32220: PPUSH
32221: LD_VAR 0 8
32225: PPUSH
32226: LD_INT 5
32228: PPUSH
32229: CALL_OW 272
32233: PUSH
32234: LD_VAR 0 11
32238: PPUSH
32239: LD_VAR 0 8
32243: PPUSH
32244: LD_INT 5
32246: PPUSH
32247: CALL_OW 273
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32256: LD_VAR 0 9
32260: PUSH
32261: LD_INT 1
32263: ARRAY
32264: PPUSH
32265: LD_VAR 0 9
32269: PUSH
32270: LD_INT 2
32272: ARRAY
32273: PPUSH
32274: CALL_OW 488
32278: IFFALSE 32377
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32280: LD_ADDR_VAR 0 4
32284: PUSH
32285: LD_VAR 0 9
32289: PUSH
32290: LD_INT 1
32292: ARRAY
32293: PPUSH
32294: LD_VAR 0 9
32298: PUSH
32299: LD_INT 2
32301: ARRAY
32302: PPUSH
32303: CALL_OW 546
32307: ST_TO_ADDR
// if hex [ 1 ] then
32308: LD_VAR 0 4
32312: PUSH
32313: LD_INT 1
32315: ARRAY
32316: IFFALSE 32320
// continue ;
32318: GO 32208
// h := hex [ 2 ] ;
32320: LD_ADDR_VAR 0 13
32324: PUSH
32325: LD_VAR 0 4
32329: PUSH
32330: LD_INT 2
32332: ARRAY
32333: ST_TO_ADDR
// if h + 7 < height then
32334: LD_VAR 0 13
32338: PUSH
32339: LD_INT 7
32341: PLUS
32342: PUSH
32343: LD_VAR 0 15
32347: LESS
32348: IFFALSE 32377
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32350: LD_ADDR_VAR 0 18
32354: PUSH
32355: LD_INT 7
32357: PUSH
32358: LD_INT 28
32360: PUSH
32361: LD_INT 45
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: PUSH
32369: LD_VAR 0 12
32373: ARRAY
32374: ST_TO_ADDR
// break ;
32375: GO 32379
// end ; end ; end ;
32377: GO 32208
32379: POP
32380: POP
// end ; if not weapon then
32381: LD_VAR 0 18
32385: NOT
32386: IFFALSE 32446
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32388: LD_ADDR_VAR 0 5
32392: PUSH
32393: LD_VAR 0 5
32397: PUSH
32398: LD_INT 11
32400: PUSH
32401: LD_INT 30
32403: PUSH
32404: LD_INT 49
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: DIFF
32412: ST_TO_ADDR
// if not list then
32413: LD_VAR 0 5
32417: NOT
32418: IFFALSE 32422
// exit ;
32420: GO 32564
// weapon := list [ rand ( 1 , list ) ] ;
32422: LD_ADDR_VAR 0 18
32426: PUSH
32427: LD_VAR 0 5
32431: PUSH
32432: LD_INT 1
32434: PPUSH
32435: LD_VAR 0 5
32439: PPUSH
32440: CALL_OW 12
32444: ARRAY
32445: ST_TO_ADDR
// end ; if weapon then
32446: LD_VAR 0 18
32450: IFFALSE 32564
// begin tmp := CostOfWeapon ( weapon ) ;
32452: LD_ADDR_VAR 0 14
32456: PUSH
32457: LD_VAR 0 18
32461: PPUSH
32462: CALL_OW 451
32466: ST_TO_ADDR
// j := GetBase ( tower ) ;
32467: LD_ADDR_VAR 0 9
32471: PUSH
32472: LD_VAR 0 1
32476: PPUSH
32477: CALL_OW 274
32481: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32482: LD_VAR 0 9
32486: PPUSH
32487: LD_INT 1
32489: PPUSH
32490: CALL_OW 275
32494: PUSH
32495: LD_VAR 0 14
32499: PUSH
32500: LD_INT 1
32502: ARRAY
32503: GREATEREQUAL
32504: PUSH
32505: LD_VAR 0 9
32509: PPUSH
32510: LD_INT 2
32512: PPUSH
32513: CALL_OW 275
32517: PUSH
32518: LD_VAR 0 14
32522: PUSH
32523: LD_INT 2
32525: ARRAY
32526: GREATEREQUAL
32527: AND
32528: PUSH
32529: LD_VAR 0 9
32533: PPUSH
32534: LD_INT 3
32536: PPUSH
32537: CALL_OW 275
32541: PUSH
32542: LD_VAR 0 14
32546: PUSH
32547: LD_INT 3
32549: ARRAY
32550: GREATEREQUAL
32551: AND
32552: IFFALSE 32564
// result := weapon ;
32554: LD_ADDR_VAR 0 3
32558: PUSH
32559: LD_VAR 0 18
32563: ST_TO_ADDR
// end ; end ;
32564: LD_VAR 0 3
32568: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32569: LD_INT 0
32571: PPUSH
32572: PPUSH
// result := true ;
32573: LD_ADDR_VAR 0 3
32577: PUSH
32578: LD_INT 1
32580: ST_TO_ADDR
// if array1 = array2 then
32581: LD_VAR 0 1
32585: PUSH
32586: LD_VAR 0 2
32590: EQUAL
32591: IFFALSE 32651
// begin for i = 1 to array1 do
32593: LD_ADDR_VAR 0 4
32597: PUSH
32598: DOUBLE
32599: LD_INT 1
32601: DEC
32602: ST_TO_ADDR
32603: LD_VAR 0 1
32607: PUSH
32608: FOR_TO
32609: IFFALSE 32647
// if array1 [ i ] <> array2 [ i ] then
32611: LD_VAR 0 1
32615: PUSH
32616: LD_VAR 0 4
32620: ARRAY
32621: PUSH
32622: LD_VAR 0 2
32626: PUSH
32627: LD_VAR 0 4
32631: ARRAY
32632: NONEQUAL
32633: IFFALSE 32645
// begin result := false ;
32635: LD_ADDR_VAR 0 3
32639: PUSH
32640: LD_INT 0
32642: ST_TO_ADDR
// break ;
32643: GO 32647
// end ;
32645: GO 32608
32647: POP
32648: POP
// end else
32649: GO 32659
// result := false ;
32651: LD_ADDR_VAR 0 3
32655: PUSH
32656: LD_INT 0
32658: ST_TO_ADDR
// end ;
32659: LD_VAR 0 3
32663: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32664: LD_INT 0
32666: PPUSH
32667: PPUSH
// if not array1 or not array2 then
32668: LD_VAR 0 1
32672: NOT
32673: PUSH
32674: LD_VAR 0 2
32678: NOT
32679: OR
32680: IFFALSE 32684
// exit ;
32682: GO 32748
// result := true ;
32684: LD_ADDR_VAR 0 3
32688: PUSH
32689: LD_INT 1
32691: ST_TO_ADDR
// for i = 1 to array1 do
32692: LD_ADDR_VAR 0 4
32696: PUSH
32697: DOUBLE
32698: LD_INT 1
32700: DEC
32701: ST_TO_ADDR
32702: LD_VAR 0 1
32706: PUSH
32707: FOR_TO
32708: IFFALSE 32746
// if array1 [ i ] <> array2 [ i ] then
32710: LD_VAR 0 1
32714: PUSH
32715: LD_VAR 0 4
32719: ARRAY
32720: PUSH
32721: LD_VAR 0 2
32725: PUSH
32726: LD_VAR 0 4
32730: ARRAY
32731: NONEQUAL
32732: IFFALSE 32744
// begin result := false ;
32734: LD_ADDR_VAR 0 3
32738: PUSH
32739: LD_INT 0
32741: ST_TO_ADDR
// break ;
32742: GO 32746
// end ;
32744: GO 32707
32746: POP
32747: POP
// end ;
32748: LD_VAR 0 3
32752: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32753: LD_INT 0
32755: PPUSH
32756: PPUSH
32757: PPUSH
// pom := GetBase ( fac ) ;
32758: LD_ADDR_VAR 0 5
32762: PUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 274
32772: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32773: LD_ADDR_VAR 0 4
32777: PUSH
32778: LD_VAR 0 2
32782: PUSH
32783: LD_INT 1
32785: ARRAY
32786: PPUSH
32787: LD_VAR 0 2
32791: PUSH
32792: LD_INT 2
32794: ARRAY
32795: PPUSH
32796: LD_VAR 0 2
32800: PUSH
32801: LD_INT 3
32803: ARRAY
32804: PPUSH
32805: LD_VAR 0 2
32809: PUSH
32810: LD_INT 4
32812: ARRAY
32813: PPUSH
32814: CALL_OW 449
32818: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32819: LD_ADDR_VAR 0 3
32823: PUSH
32824: LD_VAR 0 5
32828: PPUSH
32829: LD_INT 1
32831: PPUSH
32832: CALL_OW 275
32836: PUSH
32837: LD_VAR 0 4
32841: PUSH
32842: LD_INT 1
32844: ARRAY
32845: GREATEREQUAL
32846: PUSH
32847: LD_VAR 0 5
32851: PPUSH
32852: LD_INT 2
32854: PPUSH
32855: CALL_OW 275
32859: PUSH
32860: LD_VAR 0 4
32864: PUSH
32865: LD_INT 2
32867: ARRAY
32868: GREATEREQUAL
32869: AND
32870: PUSH
32871: LD_VAR 0 5
32875: PPUSH
32876: LD_INT 3
32878: PPUSH
32879: CALL_OW 275
32883: PUSH
32884: LD_VAR 0 4
32888: PUSH
32889: LD_INT 3
32891: ARRAY
32892: GREATEREQUAL
32893: AND
32894: ST_TO_ADDR
// end ;
32895: LD_VAR 0 3
32899: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32900: LD_INT 0
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
// pom := GetBase ( building ) ;
32906: LD_ADDR_VAR 0 3
32910: PUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 274
32920: ST_TO_ADDR
// if not pom then
32921: LD_VAR 0 3
32925: NOT
32926: IFFALSE 32930
// exit ;
32928: GO 33100
// btype := GetBType ( building ) ;
32930: LD_ADDR_VAR 0 5
32934: PUSH
32935: LD_VAR 0 1
32939: PPUSH
32940: CALL_OW 266
32944: ST_TO_ADDR
// if btype = b_armoury then
32945: LD_VAR 0 5
32949: PUSH
32950: LD_INT 4
32952: EQUAL
32953: IFFALSE 32963
// btype := b_barracks ;
32955: LD_ADDR_VAR 0 5
32959: PUSH
32960: LD_INT 5
32962: ST_TO_ADDR
// if btype = b_depot then
32963: LD_VAR 0 5
32967: PUSH
32968: LD_INT 0
32970: EQUAL
32971: IFFALSE 32981
// btype := b_warehouse ;
32973: LD_ADDR_VAR 0 5
32977: PUSH
32978: LD_INT 1
32980: ST_TO_ADDR
// if btype = b_workshop then
32981: LD_VAR 0 5
32985: PUSH
32986: LD_INT 2
32988: EQUAL
32989: IFFALSE 32999
// btype := b_factory ;
32991: LD_ADDR_VAR 0 5
32995: PUSH
32996: LD_INT 3
32998: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32999: LD_ADDR_VAR 0 4
33003: PUSH
33004: LD_VAR 0 5
33008: PPUSH
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 248
33018: PPUSH
33019: CALL_OW 450
33023: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33024: LD_ADDR_VAR 0 2
33028: PUSH
33029: LD_VAR 0 3
33033: PPUSH
33034: LD_INT 1
33036: PPUSH
33037: CALL_OW 275
33041: PUSH
33042: LD_VAR 0 4
33046: PUSH
33047: LD_INT 1
33049: ARRAY
33050: GREATEREQUAL
33051: PUSH
33052: LD_VAR 0 3
33056: PPUSH
33057: LD_INT 2
33059: PPUSH
33060: CALL_OW 275
33064: PUSH
33065: LD_VAR 0 4
33069: PUSH
33070: LD_INT 2
33072: ARRAY
33073: GREATEREQUAL
33074: AND
33075: PUSH
33076: LD_VAR 0 3
33080: PPUSH
33081: LD_INT 3
33083: PPUSH
33084: CALL_OW 275
33088: PUSH
33089: LD_VAR 0 4
33093: PUSH
33094: LD_INT 3
33096: ARRAY
33097: GREATEREQUAL
33098: AND
33099: ST_TO_ADDR
// end ;
33100: LD_VAR 0 2
33104: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33105: LD_INT 0
33107: PPUSH
33108: PPUSH
33109: PPUSH
// pom := GetBase ( building ) ;
33110: LD_ADDR_VAR 0 4
33114: PUSH
33115: LD_VAR 0 1
33119: PPUSH
33120: CALL_OW 274
33124: ST_TO_ADDR
// if not pom then
33125: LD_VAR 0 4
33129: NOT
33130: IFFALSE 33134
// exit ;
33132: GO 33235
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33134: LD_ADDR_VAR 0 5
33138: PUSH
33139: LD_VAR 0 2
33143: PPUSH
33144: LD_VAR 0 1
33148: PPUSH
33149: CALL_OW 248
33153: PPUSH
33154: CALL_OW 450
33158: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_VAR 0 4
33168: PPUSH
33169: LD_INT 1
33171: PPUSH
33172: CALL_OW 275
33176: PUSH
33177: LD_VAR 0 5
33181: PUSH
33182: LD_INT 1
33184: ARRAY
33185: GREATEREQUAL
33186: PUSH
33187: LD_VAR 0 4
33191: PPUSH
33192: LD_INT 2
33194: PPUSH
33195: CALL_OW 275
33199: PUSH
33200: LD_VAR 0 5
33204: PUSH
33205: LD_INT 2
33207: ARRAY
33208: GREATEREQUAL
33209: AND
33210: PUSH
33211: LD_VAR 0 4
33215: PPUSH
33216: LD_INT 3
33218: PPUSH
33219: CALL_OW 275
33223: PUSH
33224: LD_VAR 0 5
33228: PUSH
33229: LD_INT 3
33231: ARRAY
33232: GREATEREQUAL
33233: AND
33234: ST_TO_ADDR
// end ;
33235: LD_VAR 0 3
33239: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33240: LD_INT 0
33242: PPUSH
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
// result := false ;
33253: LD_ADDR_VAR 0 8
33257: PUSH
33258: LD_INT 0
33260: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33261: LD_VAR 0 5
33265: NOT
33266: PUSH
33267: LD_VAR 0 1
33271: NOT
33272: OR
33273: PUSH
33274: LD_VAR 0 2
33278: NOT
33279: OR
33280: PUSH
33281: LD_VAR 0 3
33285: NOT
33286: OR
33287: IFFALSE 33291
// exit ;
33289: GO 34105
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33291: LD_ADDR_VAR 0 14
33295: PUSH
33296: LD_VAR 0 1
33300: PPUSH
33301: LD_VAR 0 2
33305: PPUSH
33306: LD_VAR 0 3
33310: PPUSH
33311: LD_VAR 0 4
33315: PPUSH
33316: LD_VAR 0 5
33320: PUSH
33321: LD_INT 1
33323: ARRAY
33324: PPUSH
33325: CALL_OW 248
33329: PPUSH
33330: LD_INT 0
33332: PPUSH
33333: CALL 34942 0 6
33337: ST_TO_ADDR
// if not hexes then
33338: LD_VAR 0 14
33342: NOT
33343: IFFALSE 33347
// exit ;
33345: GO 34105
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33347: LD_ADDR_VAR 0 17
33351: PUSH
33352: LD_VAR 0 5
33356: PPUSH
33357: LD_INT 22
33359: PUSH
33360: LD_VAR 0 13
33364: PPUSH
33365: CALL_OW 255
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 30
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 30
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PPUSH
33406: CALL_OW 72
33410: ST_TO_ADDR
// for i = 1 to hexes do
33411: LD_ADDR_VAR 0 9
33415: PUSH
33416: DOUBLE
33417: LD_INT 1
33419: DEC
33420: ST_TO_ADDR
33421: LD_VAR 0 14
33425: PUSH
33426: FOR_TO
33427: IFFALSE 34103
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33429: LD_ADDR_VAR 0 13
33433: PUSH
33434: LD_VAR 0 14
33438: PUSH
33439: LD_VAR 0 9
33443: ARRAY
33444: PUSH
33445: LD_INT 1
33447: ARRAY
33448: PPUSH
33449: LD_VAR 0 14
33453: PUSH
33454: LD_VAR 0 9
33458: ARRAY
33459: PUSH
33460: LD_INT 2
33462: ARRAY
33463: PPUSH
33464: CALL_OW 428
33468: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33469: LD_VAR 0 14
33473: PUSH
33474: LD_VAR 0 9
33478: ARRAY
33479: PUSH
33480: LD_INT 1
33482: ARRAY
33483: PPUSH
33484: LD_VAR 0 14
33488: PUSH
33489: LD_VAR 0 9
33493: ARRAY
33494: PUSH
33495: LD_INT 2
33497: ARRAY
33498: PPUSH
33499: CALL_OW 351
33503: PUSH
33504: LD_VAR 0 14
33508: PUSH
33509: LD_VAR 0 9
33513: ARRAY
33514: PUSH
33515: LD_INT 1
33517: ARRAY
33518: PPUSH
33519: LD_VAR 0 14
33523: PUSH
33524: LD_VAR 0 9
33528: ARRAY
33529: PUSH
33530: LD_INT 2
33532: ARRAY
33533: PPUSH
33534: CALL_OW 488
33538: NOT
33539: OR
33540: PUSH
33541: LD_VAR 0 13
33545: PPUSH
33546: CALL_OW 247
33550: PUSH
33551: LD_INT 3
33553: EQUAL
33554: OR
33555: IFFALSE 33561
// exit ;
33557: POP
33558: POP
33559: GO 34105
// if not tmp then
33561: LD_VAR 0 13
33565: NOT
33566: IFFALSE 33570
// continue ;
33568: GO 33426
// result := true ;
33570: LD_ADDR_VAR 0 8
33574: PUSH
33575: LD_INT 1
33577: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33578: LD_VAR 0 6
33582: PUSH
33583: LD_VAR 0 13
33587: PPUSH
33588: CALL_OW 247
33592: PUSH
33593: LD_INT 2
33595: EQUAL
33596: AND
33597: PUSH
33598: LD_VAR 0 13
33602: PPUSH
33603: CALL_OW 263
33607: PUSH
33608: LD_INT 1
33610: EQUAL
33611: AND
33612: IFFALSE 33776
// begin if IsDrivenBy ( tmp ) then
33614: LD_VAR 0 13
33618: PPUSH
33619: CALL_OW 311
33623: IFFALSE 33627
// continue ;
33625: GO 33426
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33627: LD_VAR 0 6
33631: PPUSH
33632: LD_INT 3
33634: PUSH
33635: LD_INT 60
33637: PUSH
33638: EMPTY
33639: LIST
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: LD_INT 55
33650: PUSH
33651: EMPTY
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PPUSH
33662: CALL_OW 72
33666: IFFALSE 33774
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33668: LD_ADDR_VAR 0 18
33672: PUSH
33673: LD_VAR 0 6
33677: PPUSH
33678: LD_INT 3
33680: PUSH
33681: LD_INT 60
33683: PUSH
33684: EMPTY
33685: LIST
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: LD_INT 55
33696: PUSH
33697: EMPTY
33698: LIST
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PPUSH
33708: CALL_OW 72
33712: PUSH
33713: LD_INT 1
33715: ARRAY
33716: ST_TO_ADDR
// if IsInUnit ( driver ) then
33717: LD_VAR 0 18
33721: PPUSH
33722: CALL_OW 310
33726: IFFALSE 33737
// ComExit ( driver ) ;
33728: LD_VAR 0 18
33732: PPUSH
33733: CALL 58126 0 1
// AddComEnterUnit ( driver , tmp ) ;
33737: LD_VAR 0 18
33741: PPUSH
33742: LD_VAR 0 13
33746: PPUSH
33747: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33751: LD_VAR 0 18
33755: PPUSH
33756: LD_VAR 0 7
33760: PPUSH
33761: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33765: LD_VAR 0 18
33769: PPUSH
33770: CALL_OW 181
// end ; continue ;
33774: GO 33426
// end ; if not cleaners or not tmp in cleaners then
33776: LD_VAR 0 6
33780: NOT
33781: PUSH
33782: LD_VAR 0 13
33786: PUSH
33787: LD_VAR 0 6
33791: IN
33792: NOT
33793: OR
33794: IFFALSE 34101
// begin if dep then
33796: LD_VAR 0 17
33800: IFFALSE 33936
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33802: LD_ADDR_VAR 0 16
33806: PUSH
33807: LD_VAR 0 17
33811: PUSH
33812: LD_INT 1
33814: ARRAY
33815: PPUSH
33816: CALL_OW 250
33820: PPUSH
33821: LD_VAR 0 17
33825: PUSH
33826: LD_INT 1
33828: ARRAY
33829: PPUSH
33830: CALL_OW 254
33834: PPUSH
33835: LD_INT 5
33837: PPUSH
33838: CALL_OW 272
33842: PUSH
33843: LD_VAR 0 17
33847: PUSH
33848: LD_INT 1
33850: ARRAY
33851: PPUSH
33852: CALL_OW 251
33856: PPUSH
33857: LD_VAR 0 17
33861: PUSH
33862: LD_INT 1
33864: ARRAY
33865: PPUSH
33866: CALL_OW 254
33870: PPUSH
33871: LD_INT 5
33873: PPUSH
33874: CALL_OW 273
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33883: LD_VAR 0 16
33887: PUSH
33888: LD_INT 1
33890: ARRAY
33891: PPUSH
33892: LD_VAR 0 16
33896: PUSH
33897: LD_INT 2
33899: ARRAY
33900: PPUSH
33901: CALL_OW 488
33905: IFFALSE 33936
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33907: LD_VAR 0 13
33911: PPUSH
33912: LD_VAR 0 16
33916: PUSH
33917: LD_INT 1
33919: ARRAY
33920: PPUSH
33921: LD_VAR 0 16
33925: PUSH
33926: LD_INT 2
33928: ARRAY
33929: PPUSH
33930: CALL_OW 111
// continue ;
33934: GO 33426
// end ; end ; r := GetDir ( tmp ) ;
33936: LD_ADDR_VAR 0 15
33940: PUSH
33941: LD_VAR 0 13
33945: PPUSH
33946: CALL_OW 254
33950: ST_TO_ADDR
// if r = 5 then
33951: LD_VAR 0 15
33955: PUSH
33956: LD_INT 5
33958: EQUAL
33959: IFFALSE 33969
// r := 0 ;
33961: LD_ADDR_VAR 0 15
33965: PUSH
33966: LD_INT 0
33968: ST_TO_ADDR
// for j = r to 5 do
33969: LD_ADDR_VAR 0 10
33973: PUSH
33974: DOUBLE
33975: LD_VAR 0 15
33979: DEC
33980: ST_TO_ADDR
33981: LD_INT 5
33983: PUSH
33984: FOR_TO
33985: IFFALSE 34099
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33987: LD_ADDR_VAR 0 11
33991: PUSH
33992: LD_VAR 0 13
33996: PPUSH
33997: CALL_OW 250
34001: PPUSH
34002: LD_VAR 0 10
34006: PPUSH
34007: LD_INT 2
34009: PPUSH
34010: CALL_OW 272
34014: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34015: LD_ADDR_VAR 0 12
34019: PUSH
34020: LD_VAR 0 13
34024: PPUSH
34025: CALL_OW 251
34029: PPUSH
34030: LD_VAR 0 10
34034: PPUSH
34035: LD_INT 2
34037: PPUSH
34038: CALL_OW 273
34042: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34043: LD_VAR 0 11
34047: PPUSH
34048: LD_VAR 0 12
34052: PPUSH
34053: CALL_OW 488
34057: PUSH
34058: LD_VAR 0 11
34062: PPUSH
34063: LD_VAR 0 12
34067: PPUSH
34068: CALL_OW 428
34072: NOT
34073: AND
34074: IFFALSE 34097
// begin ComMoveXY ( tmp , _x , _y ) ;
34076: LD_VAR 0 13
34080: PPUSH
34081: LD_VAR 0 11
34085: PPUSH
34086: LD_VAR 0 12
34090: PPUSH
34091: CALL_OW 111
// break ;
34095: GO 34099
// end ; end ;
34097: GO 33984
34099: POP
34100: POP
// end ; end ;
34101: GO 33426
34103: POP
34104: POP
// end ;
34105: LD_VAR 0 8
34109: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34110: LD_INT 0
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
// result := false ;
34122: LD_ADDR_VAR 0 6
34126: PUSH
34127: LD_INT 0
34129: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34130: LD_VAR 0 1
34134: NOT
34135: PUSH
34136: LD_VAR 0 1
34140: PPUSH
34141: CALL_OW 266
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: IN
34156: NOT
34157: OR
34158: PUSH
34159: LD_VAR 0 2
34163: NOT
34164: OR
34165: PUSH
34166: LD_VAR 0 5
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: LD_INT 3
34182: PUSH
34183: LD_INT 4
34185: PUSH
34186: LD_INT 5
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: IN
34197: NOT
34198: OR
34199: PUSH
34200: LD_VAR 0 3
34204: PPUSH
34205: LD_VAR 0 4
34209: PPUSH
34210: CALL_OW 488
34214: NOT
34215: OR
34216: IFFALSE 34220
// exit ;
34218: GO 34937
// pom := GetBase ( depot ) ;
34220: LD_ADDR_VAR 0 10
34224: PUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 274
34234: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34235: LD_ADDR_VAR 0 11
34239: PUSH
34240: LD_VAR 0 2
34244: PPUSH
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL_OW 248
34254: PPUSH
34255: CALL_OW 450
34259: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34260: LD_VAR 0 10
34264: PPUSH
34265: LD_INT 1
34267: PPUSH
34268: CALL_OW 275
34272: PUSH
34273: LD_VAR 0 11
34277: PUSH
34278: LD_INT 1
34280: ARRAY
34281: GREATEREQUAL
34282: PUSH
34283: LD_VAR 0 10
34287: PPUSH
34288: LD_INT 2
34290: PPUSH
34291: CALL_OW 275
34295: PUSH
34296: LD_VAR 0 11
34300: PUSH
34301: LD_INT 2
34303: ARRAY
34304: GREATEREQUAL
34305: AND
34306: PUSH
34307: LD_VAR 0 10
34311: PPUSH
34312: LD_INT 3
34314: PPUSH
34315: CALL_OW 275
34319: PUSH
34320: LD_VAR 0 11
34324: PUSH
34325: LD_INT 3
34327: ARRAY
34328: GREATEREQUAL
34329: AND
34330: NOT
34331: IFFALSE 34335
// exit ;
34333: GO 34937
// if GetBType ( depot ) = b_depot then
34335: LD_VAR 0 1
34339: PPUSH
34340: CALL_OW 266
34344: PUSH
34345: LD_INT 0
34347: EQUAL
34348: IFFALSE 34360
// dist := 28 else
34350: LD_ADDR_VAR 0 14
34354: PUSH
34355: LD_INT 28
34357: ST_TO_ADDR
34358: GO 34368
// dist := 36 ;
34360: LD_ADDR_VAR 0 14
34364: PUSH
34365: LD_INT 36
34367: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34368: LD_VAR 0 1
34372: PPUSH
34373: LD_VAR 0 3
34377: PPUSH
34378: LD_VAR 0 4
34382: PPUSH
34383: CALL_OW 297
34387: PUSH
34388: LD_VAR 0 14
34392: GREATER
34393: IFFALSE 34397
// exit ;
34395: GO 34937
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34397: LD_ADDR_VAR 0 12
34401: PUSH
34402: LD_VAR 0 2
34406: PPUSH
34407: LD_VAR 0 3
34411: PPUSH
34412: LD_VAR 0 4
34416: PPUSH
34417: LD_VAR 0 5
34421: PPUSH
34422: LD_VAR 0 1
34426: PPUSH
34427: CALL_OW 248
34431: PPUSH
34432: LD_INT 0
34434: PPUSH
34435: CALL 34942 0 6
34439: ST_TO_ADDR
// if not hexes then
34440: LD_VAR 0 12
34444: NOT
34445: IFFALSE 34449
// exit ;
34447: GO 34937
// hex := GetHexInfo ( x , y ) ;
34449: LD_ADDR_VAR 0 15
34453: PUSH
34454: LD_VAR 0 3
34458: PPUSH
34459: LD_VAR 0 4
34463: PPUSH
34464: CALL_OW 546
34468: ST_TO_ADDR
// if hex [ 1 ] then
34469: LD_VAR 0 15
34473: PUSH
34474: LD_INT 1
34476: ARRAY
34477: IFFALSE 34481
// exit ;
34479: GO 34937
// height := hex [ 2 ] ;
34481: LD_ADDR_VAR 0 13
34485: PUSH
34486: LD_VAR 0 15
34490: PUSH
34491: LD_INT 2
34493: ARRAY
34494: ST_TO_ADDR
// for i = 1 to hexes do
34495: LD_ADDR_VAR 0 7
34499: PUSH
34500: DOUBLE
34501: LD_INT 1
34503: DEC
34504: ST_TO_ADDR
34505: LD_VAR 0 12
34509: PUSH
34510: FOR_TO
34511: IFFALSE 34841
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34513: LD_VAR 0 12
34517: PUSH
34518: LD_VAR 0 7
34522: ARRAY
34523: PUSH
34524: LD_INT 1
34526: ARRAY
34527: PPUSH
34528: LD_VAR 0 12
34532: PUSH
34533: LD_VAR 0 7
34537: ARRAY
34538: PUSH
34539: LD_INT 2
34541: ARRAY
34542: PPUSH
34543: CALL_OW 488
34547: NOT
34548: PUSH
34549: LD_VAR 0 12
34553: PUSH
34554: LD_VAR 0 7
34558: ARRAY
34559: PUSH
34560: LD_INT 1
34562: ARRAY
34563: PPUSH
34564: LD_VAR 0 12
34568: PUSH
34569: LD_VAR 0 7
34573: ARRAY
34574: PUSH
34575: LD_INT 2
34577: ARRAY
34578: PPUSH
34579: CALL_OW 428
34583: PUSH
34584: LD_INT 0
34586: GREATER
34587: OR
34588: PUSH
34589: LD_VAR 0 12
34593: PUSH
34594: LD_VAR 0 7
34598: ARRAY
34599: PUSH
34600: LD_INT 1
34602: ARRAY
34603: PPUSH
34604: LD_VAR 0 12
34608: PUSH
34609: LD_VAR 0 7
34613: ARRAY
34614: PUSH
34615: LD_INT 2
34617: ARRAY
34618: PPUSH
34619: CALL_OW 351
34623: OR
34624: IFFALSE 34630
// exit ;
34626: POP
34627: POP
34628: GO 34937
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34630: LD_ADDR_VAR 0 8
34634: PUSH
34635: LD_VAR 0 12
34639: PUSH
34640: LD_VAR 0 7
34644: ARRAY
34645: PUSH
34646: LD_INT 1
34648: ARRAY
34649: PPUSH
34650: LD_VAR 0 12
34654: PUSH
34655: LD_VAR 0 7
34659: ARRAY
34660: PUSH
34661: LD_INT 2
34663: ARRAY
34664: PPUSH
34665: CALL_OW 546
34669: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34670: LD_VAR 0 8
34674: PUSH
34675: LD_INT 1
34677: ARRAY
34678: PUSH
34679: LD_VAR 0 8
34683: PUSH
34684: LD_INT 2
34686: ARRAY
34687: PUSH
34688: LD_VAR 0 13
34692: PUSH
34693: LD_INT 2
34695: PLUS
34696: GREATER
34697: OR
34698: PUSH
34699: LD_VAR 0 8
34703: PUSH
34704: LD_INT 2
34706: ARRAY
34707: PUSH
34708: LD_VAR 0 13
34712: PUSH
34713: LD_INT 2
34715: MINUS
34716: LESS
34717: OR
34718: PUSH
34719: LD_VAR 0 8
34723: PUSH
34724: LD_INT 3
34726: ARRAY
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 8
34733: PUSH
34734: LD_INT 9
34736: PUSH
34737: LD_INT 10
34739: PUSH
34740: LD_INT 11
34742: PUSH
34743: LD_INT 12
34745: PUSH
34746: LD_INT 13
34748: PUSH
34749: LD_INT 16
34751: PUSH
34752: LD_INT 17
34754: PUSH
34755: LD_INT 18
34757: PUSH
34758: LD_INT 19
34760: PUSH
34761: LD_INT 20
34763: PUSH
34764: LD_INT 21
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: IN
34782: NOT
34783: OR
34784: PUSH
34785: LD_VAR 0 8
34789: PUSH
34790: LD_INT 5
34792: ARRAY
34793: NOT
34794: OR
34795: PUSH
34796: LD_VAR 0 8
34800: PUSH
34801: LD_INT 6
34803: ARRAY
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: LD_INT 7
34813: PUSH
34814: LD_INT 9
34816: PUSH
34817: LD_INT 10
34819: PUSH
34820: LD_INT 11
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: IN
34831: NOT
34832: OR
34833: IFFALSE 34839
// exit ;
34835: POP
34836: POP
34837: GO 34937
// end ;
34839: GO 34510
34841: POP
34842: POP
// side := GetSide ( depot ) ;
34843: LD_ADDR_VAR 0 9
34847: PUSH
34848: LD_VAR 0 1
34852: PPUSH
34853: CALL_OW 255
34857: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34858: LD_VAR 0 9
34862: PPUSH
34863: LD_VAR 0 3
34867: PPUSH
34868: LD_VAR 0 4
34872: PPUSH
34873: LD_INT 20
34875: PPUSH
34876: CALL 27288 0 4
34880: PUSH
34881: LD_INT 4
34883: ARRAY
34884: IFFALSE 34888
// exit ;
34886: GO 34937
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34888: LD_VAR 0 2
34892: PUSH
34893: LD_INT 29
34895: PUSH
34896: LD_INT 30
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: IN
34903: PUSH
34904: LD_VAR 0 3
34908: PPUSH
34909: LD_VAR 0 4
34913: PPUSH
34914: LD_VAR 0 9
34918: PPUSH
34919: CALL_OW 440
34923: NOT
34924: AND
34925: IFFALSE 34929
// exit ;
34927: GO 34937
// result := true ;
34929: LD_ADDR_VAR 0 6
34933: PUSH
34934: LD_INT 1
34936: ST_TO_ADDR
// end ;
34937: LD_VAR 0 6
34941: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34942: LD_INT 0
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
// result = [ ] ;
35002: LD_ADDR_VAR 0 7
35006: PUSH
35007: EMPTY
35008: ST_TO_ADDR
// temp_list = [ ] ;
35009: LD_ADDR_VAR 0 9
35013: PUSH
35014: EMPTY
35015: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35016: LD_VAR 0 4
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 4
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: IN
35047: NOT
35048: PUSH
35049: LD_VAR 0 1
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: IN
35064: PUSH
35065: LD_VAR 0 5
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: IN
35084: NOT
35085: AND
35086: OR
35087: IFFALSE 35091
// exit ;
35089: GO 53482
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35091: LD_VAR 0 1
35095: PUSH
35096: LD_INT 6
35098: PUSH
35099: LD_INT 7
35101: PUSH
35102: LD_INT 8
35104: PUSH
35105: LD_INT 13
35107: PUSH
35108: LD_INT 12
35110: PUSH
35111: LD_INT 15
35113: PUSH
35114: LD_INT 11
35116: PUSH
35117: LD_INT 14
35119: PUSH
35120: LD_INT 10
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: IN
35134: IFFALSE 35144
// btype = b_lab ;
35136: LD_ADDR_VAR 0 1
35140: PUSH
35141: LD_INT 6
35143: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35144: LD_VAR 0 6
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: IN
35163: NOT
35164: PUSH
35165: LD_VAR 0 1
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: LD_INT 3
35181: PUSH
35182: LD_INT 6
35184: PUSH
35185: LD_INT 36
35187: PUSH
35188: LD_INT 4
35190: PUSH
35191: LD_INT 5
35193: PUSH
35194: LD_INT 31
35196: PUSH
35197: LD_INT 32
35199: PUSH
35200: LD_INT 33
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: IN
35216: NOT
35217: PUSH
35218: LD_VAR 0 6
35222: PUSH
35223: LD_INT 1
35225: EQUAL
35226: AND
35227: OR
35228: PUSH
35229: LD_VAR 0 1
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: IN
35244: NOT
35245: PUSH
35246: LD_VAR 0 6
35250: PUSH
35251: LD_INT 2
35253: EQUAL
35254: AND
35255: OR
35256: IFFALSE 35266
// mode = 0 ;
35258: LD_ADDR_VAR 0 6
35262: PUSH
35263: LD_INT 0
35265: ST_TO_ADDR
// case mode of 0 :
35266: LD_VAR 0 6
35270: PUSH
35271: LD_INT 0
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 46732
35279: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35280: LD_ADDR_VAR 0 11
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 3
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 3
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 2
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35473: LD_ADDR_VAR 0 12
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: LD_INT 1
35546: NEG
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: NEG
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 3
35630: NEG
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: NEG
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35669: LD_ADDR_VAR 0 13
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: LD_INT 2
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: LD_INT 3
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 3
35828: NEG
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 3
35840: NEG
35841: PUSH
35842: LD_INT 3
35844: NEG
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35868: LD_ADDR_VAR 0 14
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: LD_INT 2
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 2
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: LD_INT 3
36018: NEG
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 3
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36064: LD_ADDR_VAR 0 15
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 2
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 3
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 3
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36257: LD_ADDR_VAR 0 16
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 3
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: LD_INT 3
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36450: LD_ADDR_VAR 0 17
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 2
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 2
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36680: LD_ADDR_VAR 0 18
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 2
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 2
36867: NEG
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 2
36879: NEG
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36910: LD_ADDR_VAR 0 19
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 2
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: NEG
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37140: LD_ADDR_VAR 0 20
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 1
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: NEG
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37370: LD_ADDR_VAR 0 21
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37600: LD_ADDR_VAR 0 22
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 2
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 2
37776: NEG
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: NEG
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37830: LD_ADDR_VAR 0 23
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: LD_INT 3
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: LD_INT 3
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38110: LD_ADDR_VAR 0 24
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 2
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 2
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38386: LD_ADDR_VAR 0 25
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: NEG
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 3
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38660: LD_ADDR_VAR 0 26
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: LD_INT 2
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 2
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: NEG
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 2
38902: NEG
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38936: LD_ADDR_VAR 0 27
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 3
39169: NEG
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 3
39181: NEG
39182: PUSH
39183: LD_INT 2
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39216: LD_ADDR_VAR 0 28
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: LD_INT 3
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: NEG
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39498: LD_ADDR_VAR 0 29
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: LD_INT 3
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 3
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 3
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 3
39742: NEG
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39777: LD_ADDR_VAR 0 30
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 2
39943: NEG
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 3
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 3
40020: NEG
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40055: LD_ADDR_VAR 0 31
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: LD_INT 3
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 3
40298: NEG
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40333: LD_ADDR_VAR 0 32
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: NEG
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: LD_INT 3
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 3
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40611: LD_ADDR_VAR 0 33
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: LD_INT 2
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: NEG
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 3
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 3
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 3
40855: NEG
40856: PUSH
40857: LD_INT 2
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40890: LD_ADDR_VAR 0 34
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: LD_INT 3
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 3
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 3
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41170: LD_ADDR_VAR 0 35
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41282: LD_ADDR_VAR 0 36
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41394: LD_ADDR_VAR 0 37
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41506: LD_ADDR_VAR 0 38
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41618: LD_ADDR_VAR 0 39
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41730: LD_ADDR_VAR 0 40
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41842: LD_ADDR_VAR 0 41
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: LD_INT 3
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 3
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: LD_INT 3
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 3
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 3
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 3
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: LD_INT 3
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42192: LD_ADDR_VAR 0 42
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 2
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: LD_INT 3
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: LD_INT 3
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 3
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 3
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 3
42489: NEG
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 3
42501: NEG
42502: PUSH
42503: LD_INT 3
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42542: LD_ADDR_VAR 0 43
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 3
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 3
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 3
42838: NEG
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42890: LD_ADDR_VAR 0 44
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 2
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 3
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 3
43164: NEG
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 3
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 3
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 3
43199: NEG
43200: PUSH
43201: LD_INT 3
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43240: LD_ADDR_VAR 0 45
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 3
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 3
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 3
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 3
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: LD_INT 3
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43590: LD_ADDR_VAR 0 46
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 3
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 3
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: NEG
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43938: LD_ADDR_VAR 0 47
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44089: LD_ADDR_VAR 0 48
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44236: LD_ADDR_VAR 0 49
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44380: LD_ADDR_VAR 0 50
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44524: LD_ADDR_VAR 0 51
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44671: LD_ADDR_VAR 0 52
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44822: LD_ADDR_VAR 0 53
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45052: LD_ADDR_VAR 0 54
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45282: LD_ADDR_VAR 0 55
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45512: LD_ADDR_VAR 0 56
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45742: LD_ADDR_VAR 0 57
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45972: LD_ADDR_VAR 0 58
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46202: LD_ADDR_VAR 0 59
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46290: LD_ADDR_VAR 0 60
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46378: LD_ADDR_VAR 0 61
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46466: LD_ADDR_VAR 0 62
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46554: LD_ADDR_VAR 0 63
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46642: LD_ADDR_VAR 0 64
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// end ; 1 :
46730: GO 52627
46732: LD_INT 1
46734: DOUBLE
46735: EQUAL
46736: IFTRUE 46740
46738: GO 49363
46740: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46741: LD_ADDR_VAR 0 11
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 3
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 3
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: LIST
46784: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46785: LD_ADDR_VAR 0 12
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46826: LD_ADDR_VAR 0 13
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: LIST
46865: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46866: LD_ADDR_VAR 0 14
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 3
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 3
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46907: LD_ADDR_VAR 0 15
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 3
46925: NEG
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46951: LD_ADDR_VAR 0 16
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 3
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 3
46982: NEG
46983: PUSH
46984: LD_INT 3
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: LIST
46996: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46997: LD_ADDR_VAR 0 17
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 3
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 3
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: LIST
47040: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47041: LD_ADDR_VAR 0 18
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: LIST
47081: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47082: LD_ADDR_VAR 0 19
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: LIST
47121: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47122: LD_ADDR_VAR 0 20
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47163: LD_ADDR_VAR 0 21
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 3
47181: NEG
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 3
47192: NEG
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47207: LD_ADDR_VAR 0 22
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: NEG
47239: PUSH
47240: LD_INT 3
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: LIST
47252: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47253: LD_ADDR_VAR 0 23
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 3
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 4
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47297: LD_ADDR_VAR 0 24
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 4
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47338: LD_ADDR_VAR 0 25
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 4
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 3
47365: PUSH
47366: LD_INT 4
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47378: LD_ADDR_VAR 0 26
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: LD_INT 4
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47419: LD_ADDR_VAR 0 27
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 4
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47463: LD_ADDR_VAR 0 28
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: LD_INT 3
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 3
47482: NEG
47483: PUSH
47484: LD_INT 4
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 4
47494: NEG
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47509: LD_ADDR_VAR 0 29
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 3
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 3
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 4
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 4
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 3
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 5
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 5
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 4
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: LD_INT 6
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 6
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 5
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47664: LD_ADDR_VAR 0 30
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 3
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 3
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 4
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 4
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 4
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 5
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 5
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 5
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 6
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 6
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47807: LD_ADDR_VAR 0 31
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 4
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 4
47854: PUSH
47855: LD_INT 4
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: LD_INT 4
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 5
47874: PUSH
47875: LD_INT 4
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 5
47884: PUSH
47885: LD_INT 5
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 4
47894: PUSH
47895: LD_INT 5
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 6
47904: PUSH
47905: LD_INT 5
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 6
47914: PUSH
47915: LD_INT 6
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 5
47924: PUSH
47925: LD_INT 6
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47946: LD_ADDR_VAR 0 32
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 4
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 4
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 3
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 5
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 5
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 4
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 6
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 6
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 5
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48089: LD_ADDR_VAR 0 33
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 4
48141: NEG
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 4
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 4
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 5
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 5
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 5
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 6
48209: NEG
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 6
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48244: LD_ADDR_VAR 0 34
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: LD_INT 3
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: LD_INT 4
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 4
48299: NEG
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 4
48311: NEG
48312: PUSH
48313: LD_INT 4
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 4
48323: NEG
48324: PUSH
48325: LD_INT 5
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 5
48335: NEG
48336: PUSH
48337: LD_INT 4
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 5
48347: NEG
48348: PUSH
48349: LD_INT 5
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 5
48359: NEG
48360: PUSH
48361: LD_INT 6
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 6
48371: NEG
48372: PUSH
48373: LD_INT 5
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 6
48383: NEG
48384: PUSH
48385: LD_INT 6
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48407: LD_ADDR_VAR 0 41
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 3
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48451: LD_ADDR_VAR 0 42
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 3
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48492: LD_ADDR_VAR 0 43
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 3
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48532: LD_ADDR_VAR 0 44
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 3
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48573: LD_ADDR_VAR 0 45
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 3
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48617: LD_ADDR_VAR 0 46
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 3
48648: NEG
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48663: LD_ADDR_VAR 0 47
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: LD_INT 3
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 3
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48696: LD_ADDR_VAR 0 48
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48727: LD_ADDR_VAR 0 49
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48756: LD_ADDR_VAR 0 50
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48785: LD_ADDR_VAR 0 51
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48816: LD_ADDR_VAR 0 52
48820: PUSH
48821: LD_INT 3
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 3
48835: NEG
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48849: LD_ADDR_VAR 0 53
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 3
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 3
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48893: LD_ADDR_VAR 0 54
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48934: LD_ADDR_VAR 0 55
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: LD_INT 3
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 3
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48974: LD_ADDR_VAR 0 56
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 3
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 3
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49015: LD_ADDR_VAR 0 57
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: LIST
49058: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49059: LD_ADDR_VAR 0 58
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 3
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 3
49090: NEG
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49105: LD_ADDR_VAR 0 59
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49149: LD_ADDR_VAR 0 60
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: LIST
49189: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49190: LD_ADDR_VAR 0 61
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49230: LD_ADDR_VAR 0 62
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49271: LD_ADDR_VAR 0 63
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49315: LD_ADDR_VAR 0 64
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: ST_TO_ADDR
// end ; 2 :
49361: GO 52627
49363: LD_INT 2
49365: DOUBLE
49366: EQUAL
49367: IFTRUE 49371
49369: GO 52626
49371: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49372: LD_ADDR_VAR 0 29
49376: PUSH
49377: LD_INT 4
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 4
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 5
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 5
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 4
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 3
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 3
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 5
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 3
49472: PUSH
49473: LD_INT 3
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 4
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 4
49502: PUSH
49503: LD_INT 4
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: LD_INT 4
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 4
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: LD_INT 4
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 4
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 4
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 5
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 5
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 4
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 5
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 4
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 4
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 4
49734: NEG
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 4
49757: NEG
49758: PUSH
49759: LD_INT 4
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 4
49769: NEG
49770: PUSH
49771: LD_INT 5
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 3
49781: NEG
49782: PUSH
49783: LD_INT 4
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 4
49805: NEG
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 5
49817: NEG
49818: PUSH
49819: LD_INT 4
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 5
49829: NEG
49830: PUSH
49831: LD_INT 5
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: LD_INT 5
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 5
49853: NEG
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49910: LD_ADDR_VAR 0 30
49914: PUSH
49915: LD_INT 4
49917: PUSH
49918: LD_INT 4
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 4
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 5
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 5
49947: PUSH
49948: LD_INT 5
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: LD_INT 5
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: LD_INT 4
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 3
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 5
49987: PUSH
49988: LD_INT 3
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: LD_INT 5
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: LD_INT 3
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 4
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: LD_INT 4
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 3
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 4
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 4
50100: NEG
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 4
50111: NEG
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 4
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 5
50156: NEG
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 5
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 5
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 3
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 3
50202: NEG
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: NEG
50215: PUSH
50216: LD_INT 4
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 4
50262: NEG
50263: PUSH
50264: LD_INT 3
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 4
50274: NEG
50275: PUSH
50276: LD_INT 4
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 4
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 4
50298: NEG
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 4
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 5
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 4
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 3
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 3
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 4
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 5
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 5
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50457: LD_ADDR_VAR 0 31
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 4
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 3
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 4
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 5
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 5
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: LD_INT 4
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 3
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 5
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 3
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 3
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 3
50602: NEG
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 4
50613: NEG
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 4
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 4
50636: NEG
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 4
50659: NEG
50660: PUSH
50661: LD_INT 4
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 4
50671: NEG
50672: PUSH
50673: LD_INT 5
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: LD_INT 4
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 3
50695: NEG
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 4
50707: NEG
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 5
50719: NEG
50720: PUSH
50721: LD_INT 4
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 5
50731: NEG
50732: PUSH
50733: LD_INT 5
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 3
50743: NEG
50744: PUSH
50745: LD_INT 5
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 5
50755: NEG
50756: PUSH
50757: LD_INT 3
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 4
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 4
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 4
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 4
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 5
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 5
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 4
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 5
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51007: LD_ADDR_VAR 0 32
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 4
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 4
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 5
51070: NEG
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 5
51081: NEG
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 5
51093: NEG
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 3
51128: NEG
51129: PUSH
51130: LD_INT 4
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 4
51176: NEG
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 4
51188: NEG
51189: PUSH
51190: LD_INT 4
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 4
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 4
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 4
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 5
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 4
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 4
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 5
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: LD_INT 3
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 5
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 4
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 4
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 4
51419: PUSH
51420: LD_INT 4
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 4
51429: PUSH
51430: LD_INT 3
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 5
51439: PUSH
51440: LD_INT 4
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 5
51449: PUSH
51450: LD_INT 5
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 4
51459: PUSH
51460: LD_INT 5
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: LD_INT 4
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 3
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 5
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: LD_INT 5
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51554: LD_ADDR_VAR 0 33
51558: PUSH
51559: LD_INT 4
51561: NEG
51562: PUSH
51563: LD_INT 4
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 4
51573: NEG
51574: PUSH
51575: LD_INT 5
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 3
51585: NEG
51586: PUSH
51587: LD_INT 4
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: LD_INT 3
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 4
51609: NEG
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 5
51621: NEG
51622: PUSH
51623: LD_INT 4
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 5
51633: NEG
51634: PUSH
51635: LD_INT 5
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 5
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 5
51657: NEG
51658: PUSH
51659: LD_INT 3
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 4
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 3
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 3
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 4
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: LD_INT 4
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 4
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 4
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 5
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 5
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 5
51854: PUSH
51855: LD_INT 2
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: PUSH
51865: LD_INT 3
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 4
51884: PUSH
51885: LD_INT 3
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 4
51894: PUSH
51895: LD_INT 4
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: LD_INT 4
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 3
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 4
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 4
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 4
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 4
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 5
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 5
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 4
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 5
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52092: LD_ADDR_VAR 0 34
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 4
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 5
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 4
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 4
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 5
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 3
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 5
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 4
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 4
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 4
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 4
52294: PUSH
52295: LD_INT 4
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 4
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: LD_INT 4
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: LD_INT 5
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 4
52334: PUSH
52335: LD_INT 5
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 5
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 5
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: LD_INT 4
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 4
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 4
52477: NEG
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 4
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 3
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 4
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 5
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 5
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 5
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// end ; end ;
52624: GO 52627
52626: POP
// case btype of b_depot , b_warehouse :
52627: LD_VAR 0 1
52631: PUSH
52632: LD_INT 0
52634: DOUBLE
52635: EQUAL
52636: IFTRUE 52646
52638: LD_INT 1
52640: DOUBLE
52641: EQUAL
52642: IFTRUE 52646
52644: GO 52847
52646: POP
// case nation of nation_american :
52647: LD_VAR 0 5
52651: PUSH
52652: LD_INT 1
52654: DOUBLE
52655: EQUAL
52656: IFTRUE 52660
52658: GO 52716
52660: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52661: LD_ADDR_VAR 0 9
52665: PUSH
52666: LD_VAR 0 11
52670: PUSH
52671: LD_VAR 0 12
52675: PUSH
52676: LD_VAR 0 13
52680: PUSH
52681: LD_VAR 0 14
52685: PUSH
52686: LD_VAR 0 15
52690: PUSH
52691: LD_VAR 0 16
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: PUSH
52704: LD_VAR 0 4
52708: PUSH
52709: LD_INT 1
52711: PLUS
52712: ARRAY
52713: ST_TO_ADDR
52714: GO 52845
52716: LD_INT 2
52718: DOUBLE
52719: EQUAL
52720: IFTRUE 52724
52722: GO 52780
52724: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52725: LD_ADDR_VAR 0 9
52729: PUSH
52730: LD_VAR 0 17
52734: PUSH
52735: LD_VAR 0 18
52739: PUSH
52740: LD_VAR 0 19
52744: PUSH
52745: LD_VAR 0 20
52749: PUSH
52750: LD_VAR 0 21
52754: PUSH
52755: LD_VAR 0 22
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: PUSH
52768: LD_VAR 0 4
52772: PUSH
52773: LD_INT 1
52775: PLUS
52776: ARRAY
52777: ST_TO_ADDR
52778: GO 52845
52780: LD_INT 3
52782: DOUBLE
52783: EQUAL
52784: IFTRUE 52788
52786: GO 52844
52788: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52789: LD_ADDR_VAR 0 9
52793: PUSH
52794: LD_VAR 0 23
52798: PUSH
52799: LD_VAR 0 24
52803: PUSH
52804: LD_VAR 0 25
52808: PUSH
52809: LD_VAR 0 26
52813: PUSH
52814: LD_VAR 0 27
52818: PUSH
52819: LD_VAR 0 28
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: PUSH
52832: LD_VAR 0 4
52836: PUSH
52837: LD_INT 1
52839: PLUS
52840: ARRAY
52841: ST_TO_ADDR
52842: GO 52845
52844: POP
52845: GO 53400
52847: LD_INT 2
52849: DOUBLE
52850: EQUAL
52851: IFTRUE 52861
52853: LD_INT 3
52855: DOUBLE
52856: EQUAL
52857: IFTRUE 52861
52859: GO 52917
52861: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52862: LD_ADDR_VAR 0 9
52866: PUSH
52867: LD_VAR 0 29
52871: PUSH
52872: LD_VAR 0 30
52876: PUSH
52877: LD_VAR 0 31
52881: PUSH
52882: LD_VAR 0 32
52886: PUSH
52887: LD_VAR 0 33
52891: PUSH
52892: LD_VAR 0 34
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: PUSH
52905: LD_VAR 0 4
52909: PUSH
52910: LD_INT 1
52912: PLUS
52913: ARRAY
52914: ST_TO_ADDR
52915: GO 53400
52917: LD_INT 16
52919: DOUBLE
52920: EQUAL
52921: IFTRUE 52979
52923: LD_INT 17
52925: DOUBLE
52926: EQUAL
52927: IFTRUE 52979
52929: LD_INT 18
52931: DOUBLE
52932: EQUAL
52933: IFTRUE 52979
52935: LD_INT 19
52937: DOUBLE
52938: EQUAL
52939: IFTRUE 52979
52941: LD_INT 22
52943: DOUBLE
52944: EQUAL
52945: IFTRUE 52979
52947: LD_INT 20
52949: DOUBLE
52950: EQUAL
52951: IFTRUE 52979
52953: LD_INT 21
52955: DOUBLE
52956: EQUAL
52957: IFTRUE 52979
52959: LD_INT 23
52961: DOUBLE
52962: EQUAL
52963: IFTRUE 52979
52965: LD_INT 24
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 52979
52971: LD_INT 25
52973: DOUBLE
52974: EQUAL
52975: IFTRUE 52979
52977: GO 53035
52979: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52980: LD_ADDR_VAR 0 9
52984: PUSH
52985: LD_VAR 0 35
52989: PUSH
52990: LD_VAR 0 36
52994: PUSH
52995: LD_VAR 0 37
52999: PUSH
53000: LD_VAR 0 38
53004: PUSH
53005: LD_VAR 0 39
53009: PUSH
53010: LD_VAR 0 40
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: PUSH
53023: LD_VAR 0 4
53027: PUSH
53028: LD_INT 1
53030: PLUS
53031: ARRAY
53032: ST_TO_ADDR
53033: GO 53400
53035: LD_INT 6
53037: DOUBLE
53038: EQUAL
53039: IFTRUE 53091
53041: LD_INT 7
53043: DOUBLE
53044: EQUAL
53045: IFTRUE 53091
53047: LD_INT 8
53049: DOUBLE
53050: EQUAL
53051: IFTRUE 53091
53053: LD_INT 13
53055: DOUBLE
53056: EQUAL
53057: IFTRUE 53091
53059: LD_INT 12
53061: DOUBLE
53062: EQUAL
53063: IFTRUE 53091
53065: LD_INT 15
53067: DOUBLE
53068: EQUAL
53069: IFTRUE 53091
53071: LD_INT 11
53073: DOUBLE
53074: EQUAL
53075: IFTRUE 53091
53077: LD_INT 14
53079: DOUBLE
53080: EQUAL
53081: IFTRUE 53091
53083: LD_INT 10
53085: DOUBLE
53086: EQUAL
53087: IFTRUE 53091
53089: GO 53147
53091: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53092: LD_ADDR_VAR 0 9
53096: PUSH
53097: LD_VAR 0 41
53101: PUSH
53102: LD_VAR 0 42
53106: PUSH
53107: LD_VAR 0 43
53111: PUSH
53112: LD_VAR 0 44
53116: PUSH
53117: LD_VAR 0 45
53121: PUSH
53122: LD_VAR 0 46
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: PUSH
53135: LD_VAR 0 4
53139: PUSH
53140: LD_INT 1
53142: PLUS
53143: ARRAY
53144: ST_TO_ADDR
53145: GO 53400
53147: LD_INT 36
53149: DOUBLE
53150: EQUAL
53151: IFTRUE 53155
53153: GO 53211
53155: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53156: LD_ADDR_VAR 0 9
53160: PUSH
53161: LD_VAR 0 47
53165: PUSH
53166: LD_VAR 0 48
53170: PUSH
53171: LD_VAR 0 49
53175: PUSH
53176: LD_VAR 0 50
53180: PUSH
53181: LD_VAR 0 51
53185: PUSH
53186: LD_VAR 0 52
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: PUSH
53199: LD_VAR 0 4
53203: PUSH
53204: LD_INT 1
53206: PLUS
53207: ARRAY
53208: ST_TO_ADDR
53209: GO 53400
53211: LD_INT 4
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53237
53217: LD_INT 5
53219: DOUBLE
53220: EQUAL
53221: IFTRUE 53237
53223: LD_INT 34
53225: DOUBLE
53226: EQUAL
53227: IFTRUE 53237
53229: LD_INT 37
53231: DOUBLE
53232: EQUAL
53233: IFTRUE 53237
53235: GO 53293
53237: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53238: LD_ADDR_VAR 0 9
53242: PUSH
53243: LD_VAR 0 53
53247: PUSH
53248: LD_VAR 0 54
53252: PUSH
53253: LD_VAR 0 55
53257: PUSH
53258: LD_VAR 0 56
53262: PUSH
53263: LD_VAR 0 57
53267: PUSH
53268: LD_VAR 0 58
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: PUSH
53281: LD_VAR 0 4
53285: PUSH
53286: LD_INT 1
53288: PLUS
53289: ARRAY
53290: ST_TO_ADDR
53291: GO 53400
53293: LD_INT 31
53295: DOUBLE
53296: EQUAL
53297: IFTRUE 53343
53299: LD_INT 32
53301: DOUBLE
53302: EQUAL
53303: IFTRUE 53343
53305: LD_INT 33
53307: DOUBLE
53308: EQUAL
53309: IFTRUE 53343
53311: LD_INT 27
53313: DOUBLE
53314: EQUAL
53315: IFTRUE 53343
53317: LD_INT 26
53319: DOUBLE
53320: EQUAL
53321: IFTRUE 53343
53323: LD_INT 28
53325: DOUBLE
53326: EQUAL
53327: IFTRUE 53343
53329: LD_INT 29
53331: DOUBLE
53332: EQUAL
53333: IFTRUE 53343
53335: LD_INT 30
53337: DOUBLE
53338: EQUAL
53339: IFTRUE 53343
53341: GO 53399
53343: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53344: LD_ADDR_VAR 0 9
53348: PUSH
53349: LD_VAR 0 59
53353: PUSH
53354: LD_VAR 0 60
53358: PUSH
53359: LD_VAR 0 61
53363: PUSH
53364: LD_VAR 0 62
53368: PUSH
53369: LD_VAR 0 63
53373: PUSH
53374: LD_VAR 0 64
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: PUSH
53387: LD_VAR 0 4
53391: PUSH
53392: LD_INT 1
53394: PLUS
53395: ARRAY
53396: ST_TO_ADDR
53397: GO 53400
53399: POP
// temp_list2 = [ ] ;
53400: LD_ADDR_VAR 0 10
53404: PUSH
53405: EMPTY
53406: ST_TO_ADDR
// for i in temp_list do
53407: LD_ADDR_VAR 0 8
53411: PUSH
53412: LD_VAR 0 9
53416: PUSH
53417: FOR_IN
53418: IFFALSE 53470
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53420: LD_ADDR_VAR 0 10
53424: PUSH
53425: LD_VAR 0 10
53429: PUSH
53430: LD_VAR 0 8
53434: PUSH
53435: LD_INT 1
53437: ARRAY
53438: PUSH
53439: LD_VAR 0 2
53443: PLUS
53444: PUSH
53445: LD_VAR 0 8
53449: PUSH
53450: LD_INT 2
53452: ARRAY
53453: PUSH
53454: LD_VAR 0 3
53458: PLUS
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: EMPTY
53465: LIST
53466: ADD
53467: ST_TO_ADDR
53468: GO 53417
53470: POP
53471: POP
// result = temp_list2 ;
53472: LD_ADDR_VAR 0 7
53476: PUSH
53477: LD_VAR 0 10
53481: ST_TO_ADDR
// end ;
53482: LD_VAR 0 7
53486: RET
// export function EnemyInRange ( unit , dist ) ; begin
53487: LD_INT 0
53489: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53490: LD_ADDR_VAR 0 3
53494: PUSH
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 255
53504: PPUSH
53505: LD_VAR 0 1
53509: PPUSH
53510: CALL_OW 250
53514: PPUSH
53515: LD_VAR 0 1
53519: PPUSH
53520: CALL_OW 251
53524: PPUSH
53525: LD_VAR 0 2
53529: PPUSH
53530: CALL 27288 0 4
53534: PUSH
53535: LD_INT 4
53537: ARRAY
53538: ST_TO_ADDR
// end ;
53539: LD_VAR 0 3
53543: RET
// export function PlayerSeeMe ( unit ) ; begin
53544: LD_INT 0
53546: PPUSH
// result := See ( your_side , unit ) ;
53547: LD_ADDR_VAR 0 2
53551: PUSH
53552: LD_OWVAR 2
53556: PPUSH
53557: LD_VAR 0 1
53561: PPUSH
53562: CALL_OW 292
53566: ST_TO_ADDR
// end ;
53567: LD_VAR 0 2
53571: RET
// export function ReverseDir ( unit ) ; begin
53572: LD_INT 0
53574: PPUSH
// if not unit then
53575: LD_VAR 0 1
53579: NOT
53580: IFFALSE 53584
// exit ;
53582: GO 53607
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53584: LD_ADDR_VAR 0 2
53588: PUSH
53589: LD_VAR 0 1
53593: PPUSH
53594: CALL_OW 254
53598: PUSH
53599: LD_INT 3
53601: PLUS
53602: PUSH
53603: LD_INT 6
53605: MOD
53606: ST_TO_ADDR
// end ;
53607: LD_VAR 0 2
53611: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53612: LD_INT 0
53614: PPUSH
53615: PPUSH
53616: PPUSH
53617: PPUSH
53618: PPUSH
// if not hexes then
53619: LD_VAR 0 2
53623: NOT
53624: IFFALSE 53628
// exit ;
53626: GO 53776
// dist := 9999 ;
53628: LD_ADDR_VAR 0 5
53632: PUSH
53633: LD_INT 9999
53635: ST_TO_ADDR
// for i = 1 to hexes do
53636: LD_ADDR_VAR 0 4
53640: PUSH
53641: DOUBLE
53642: LD_INT 1
53644: DEC
53645: ST_TO_ADDR
53646: LD_VAR 0 2
53650: PUSH
53651: FOR_TO
53652: IFFALSE 53764
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53654: LD_VAR 0 1
53658: PPUSH
53659: LD_VAR 0 2
53663: PUSH
53664: LD_VAR 0 4
53668: ARRAY
53669: PUSH
53670: LD_INT 1
53672: ARRAY
53673: PPUSH
53674: LD_VAR 0 2
53678: PUSH
53679: LD_VAR 0 4
53683: ARRAY
53684: PUSH
53685: LD_INT 2
53687: ARRAY
53688: PPUSH
53689: CALL_OW 297
53693: PUSH
53694: LD_VAR 0 5
53698: LESS
53699: IFFALSE 53762
// begin hex := hexes [ i ] ;
53701: LD_ADDR_VAR 0 7
53705: PUSH
53706: LD_VAR 0 2
53710: PUSH
53711: LD_VAR 0 4
53715: ARRAY
53716: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53717: LD_ADDR_VAR 0 5
53721: PUSH
53722: LD_VAR 0 1
53726: PPUSH
53727: LD_VAR 0 2
53731: PUSH
53732: LD_VAR 0 4
53736: ARRAY
53737: PUSH
53738: LD_INT 1
53740: ARRAY
53741: PPUSH
53742: LD_VAR 0 2
53746: PUSH
53747: LD_VAR 0 4
53751: ARRAY
53752: PUSH
53753: LD_INT 2
53755: ARRAY
53756: PPUSH
53757: CALL_OW 297
53761: ST_TO_ADDR
// end ; end ;
53762: GO 53651
53764: POP
53765: POP
// result := hex ;
53766: LD_ADDR_VAR 0 3
53770: PUSH
53771: LD_VAR 0 7
53775: ST_TO_ADDR
// end ;
53776: LD_VAR 0 3
53780: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53781: LD_INT 0
53783: PPUSH
53784: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53785: LD_VAR 0 1
53789: NOT
53790: PUSH
53791: LD_VAR 0 1
53795: PUSH
53796: LD_INT 21
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 23
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PPUSH
53820: CALL_OW 69
53824: IN
53825: NOT
53826: OR
53827: IFFALSE 53831
// exit ;
53829: GO 53878
// for i = 1 to 3 do
53831: LD_ADDR_VAR 0 3
53835: PUSH
53836: DOUBLE
53837: LD_INT 1
53839: DEC
53840: ST_TO_ADDR
53841: LD_INT 3
53843: PUSH
53844: FOR_TO
53845: IFFALSE 53876
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53847: LD_VAR 0 1
53851: PPUSH
53852: CALL_OW 250
53856: PPUSH
53857: LD_VAR 0 1
53861: PPUSH
53862: CALL_OW 251
53866: PPUSH
53867: LD_INT 1
53869: PPUSH
53870: CALL_OW 453
53874: GO 53844
53876: POP
53877: POP
// end ;
53878: LD_VAR 0 2
53882: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53883: LD_INT 0
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53891: LD_VAR 0 1
53895: NOT
53896: PUSH
53897: LD_VAR 0 2
53901: NOT
53902: OR
53903: PUSH
53904: LD_VAR 0 1
53908: PPUSH
53909: CALL_OW 314
53913: OR
53914: IFFALSE 53918
// exit ;
53916: GO 54359
// x := GetX ( enemy_unit ) ;
53918: LD_ADDR_VAR 0 7
53922: PUSH
53923: LD_VAR 0 2
53927: PPUSH
53928: CALL_OW 250
53932: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53933: LD_ADDR_VAR 0 8
53937: PUSH
53938: LD_VAR 0 2
53942: PPUSH
53943: CALL_OW 251
53947: ST_TO_ADDR
// if not x or not y then
53948: LD_VAR 0 7
53952: NOT
53953: PUSH
53954: LD_VAR 0 8
53958: NOT
53959: OR
53960: IFFALSE 53964
// exit ;
53962: GO 54359
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53964: LD_ADDR_VAR 0 6
53968: PUSH
53969: LD_VAR 0 7
53973: PPUSH
53974: LD_INT 0
53976: PPUSH
53977: LD_INT 4
53979: PPUSH
53980: CALL_OW 272
53984: PUSH
53985: LD_VAR 0 8
53989: PPUSH
53990: LD_INT 0
53992: PPUSH
53993: LD_INT 4
53995: PPUSH
53996: CALL_OW 273
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_VAR 0 7
54009: PPUSH
54010: LD_INT 1
54012: PPUSH
54013: LD_INT 4
54015: PPUSH
54016: CALL_OW 272
54020: PUSH
54021: LD_VAR 0 8
54025: PPUSH
54026: LD_INT 1
54028: PPUSH
54029: LD_INT 4
54031: PPUSH
54032: CALL_OW 273
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_VAR 0 7
54045: PPUSH
54046: LD_INT 2
54048: PPUSH
54049: LD_INT 4
54051: PPUSH
54052: CALL_OW 272
54056: PUSH
54057: LD_VAR 0 8
54061: PPUSH
54062: LD_INT 2
54064: PPUSH
54065: LD_INT 4
54067: PPUSH
54068: CALL_OW 273
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_VAR 0 7
54081: PPUSH
54082: LD_INT 3
54084: PPUSH
54085: LD_INT 4
54087: PPUSH
54088: CALL_OW 272
54092: PUSH
54093: LD_VAR 0 8
54097: PPUSH
54098: LD_INT 3
54100: PPUSH
54101: LD_INT 4
54103: PPUSH
54104: CALL_OW 273
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_VAR 0 7
54117: PPUSH
54118: LD_INT 4
54120: PPUSH
54121: LD_INT 4
54123: PPUSH
54124: CALL_OW 272
54128: PUSH
54129: LD_VAR 0 8
54133: PPUSH
54134: LD_INT 4
54136: PPUSH
54137: LD_INT 4
54139: PPUSH
54140: CALL_OW 273
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_VAR 0 7
54153: PPUSH
54154: LD_INT 5
54156: PPUSH
54157: LD_INT 4
54159: PPUSH
54160: CALL_OW 272
54164: PUSH
54165: LD_VAR 0 8
54169: PPUSH
54170: LD_INT 5
54172: PPUSH
54173: LD_INT 4
54175: PPUSH
54176: CALL_OW 273
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: ST_TO_ADDR
// for i = tmp downto 1 do
54193: LD_ADDR_VAR 0 4
54197: PUSH
54198: DOUBLE
54199: LD_VAR 0 6
54203: INC
54204: ST_TO_ADDR
54205: LD_INT 1
54207: PUSH
54208: FOR_DOWNTO
54209: IFFALSE 54310
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54211: LD_VAR 0 6
54215: PUSH
54216: LD_VAR 0 4
54220: ARRAY
54221: PUSH
54222: LD_INT 1
54224: ARRAY
54225: PPUSH
54226: LD_VAR 0 6
54230: PUSH
54231: LD_VAR 0 4
54235: ARRAY
54236: PUSH
54237: LD_INT 2
54239: ARRAY
54240: PPUSH
54241: CALL_OW 488
54245: NOT
54246: PUSH
54247: LD_VAR 0 6
54251: PUSH
54252: LD_VAR 0 4
54256: ARRAY
54257: PUSH
54258: LD_INT 1
54260: ARRAY
54261: PPUSH
54262: LD_VAR 0 6
54266: PUSH
54267: LD_VAR 0 4
54271: ARRAY
54272: PUSH
54273: LD_INT 2
54275: ARRAY
54276: PPUSH
54277: CALL_OW 428
54281: PUSH
54282: LD_INT 0
54284: NONEQUAL
54285: OR
54286: IFFALSE 54308
// tmp := Delete ( tmp , i ) ;
54288: LD_ADDR_VAR 0 6
54292: PUSH
54293: LD_VAR 0 6
54297: PPUSH
54298: LD_VAR 0 4
54302: PPUSH
54303: CALL_OW 3
54307: ST_TO_ADDR
54308: GO 54208
54310: POP
54311: POP
// j := GetClosestHex ( unit , tmp ) ;
54312: LD_ADDR_VAR 0 5
54316: PUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: LD_VAR 0 6
54326: PPUSH
54327: CALL 53612 0 2
54331: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54332: LD_VAR 0 1
54336: PPUSH
54337: LD_VAR 0 5
54341: PUSH
54342: LD_INT 1
54344: ARRAY
54345: PPUSH
54346: LD_VAR 0 5
54350: PUSH
54351: LD_INT 2
54353: ARRAY
54354: PPUSH
54355: CALL_OW 111
// end ;
54359: LD_VAR 0 3
54363: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54364: LD_INT 0
54366: PPUSH
54367: PPUSH
54368: PPUSH
// uc_side = 0 ;
54369: LD_ADDR_OWVAR 20
54373: PUSH
54374: LD_INT 0
54376: ST_TO_ADDR
// uc_nation = 0 ;
54377: LD_ADDR_OWVAR 21
54381: PUSH
54382: LD_INT 0
54384: ST_TO_ADDR
// InitHc_All ( ) ;
54385: CALL_OW 584
// InitVc ;
54389: CALL_OW 20
// if mastodonts then
54393: LD_VAR 0 6
54397: IFFALSE 54464
// for i = 1 to mastodonts do
54399: LD_ADDR_VAR 0 11
54403: PUSH
54404: DOUBLE
54405: LD_INT 1
54407: DEC
54408: ST_TO_ADDR
54409: LD_VAR 0 6
54413: PUSH
54414: FOR_TO
54415: IFFALSE 54462
// begin vc_chassis := 31 ;
54417: LD_ADDR_OWVAR 37
54421: PUSH
54422: LD_INT 31
54424: ST_TO_ADDR
// vc_control := control_rider ;
54425: LD_ADDR_OWVAR 38
54429: PUSH
54430: LD_INT 4
54432: ST_TO_ADDR
// animal := CreateVehicle ;
54433: LD_ADDR_VAR 0 12
54437: PUSH
54438: CALL_OW 45
54442: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54443: LD_VAR 0 12
54447: PPUSH
54448: LD_VAR 0 8
54452: PPUSH
54453: LD_INT 0
54455: PPUSH
54456: CALL 56652 0 3
// end ;
54460: GO 54414
54462: POP
54463: POP
// if horses then
54464: LD_VAR 0 5
54468: IFFALSE 54535
// for i = 1 to horses do
54470: LD_ADDR_VAR 0 11
54474: PUSH
54475: DOUBLE
54476: LD_INT 1
54478: DEC
54479: ST_TO_ADDR
54480: LD_VAR 0 5
54484: PUSH
54485: FOR_TO
54486: IFFALSE 54533
// begin hc_class := 21 ;
54488: LD_ADDR_OWVAR 28
54492: PUSH
54493: LD_INT 21
54495: ST_TO_ADDR
// hc_gallery :=  ;
54496: LD_ADDR_OWVAR 33
54500: PUSH
54501: LD_STRING 
54503: ST_TO_ADDR
// animal := CreateHuman ;
54504: LD_ADDR_VAR 0 12
54508: PUSH
54509: CALL_OW 44
54513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54514: LD_VAR 0 12
54518: PPUSH
54519: LD_VAR 0 8
54523: PPUSH
54524: LD_INT 0
54526: PPUSH
54527: CALL 56652 0 3
// end ;
54531: GO 54485
54533: POP
54534: POP
// if birds then
54535: LD_VAR 0 1
54539: IFFALSE 54606
// for i = 1 to birds do
54541: LD_ADDR_VAR 0 11
54545: PUSH
54546: DOUBLE
54547: LD_INT 1
54549: DEC
54550: ST_TO_ADDR
54551: LD_VAR 0 1
54555: PUSH
54556: FOR_TO
54557: IFFALSE 54604
// begin hc_class = 18 ;
54559: LD_ADDR_OWVAR 28
54563: PUSH
54564: LD_INT 18
54566: ST_TO_ADDR
// hc_gallery =  ;
54567: LD_ADDR_OWVAR 33
54571: PUSH
54572: LD_STRING 
54574: ST_TO_ADDR
// animal := CreateHuman ;
54575: LD_ADDR_VAR 0 12
54579: PUSH
54580: CALL_OW 44
54584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54585: LD_VAR 0 12
54589: PPUSH
54590: LD_VAR 0 8
54594: PPUSH
54595: LD_INT 0
54597: PPUSH
54598: CALL 56652 0 3
// end ;
54602: GO 54556
54604: POP
54605: POP
// if tigers then
54606: LD_VAR 0 2
54610: IFFALSE 54694
// for i = 1 to tigers do
54612: LD_ADDR_VAR 0 11
54616: PUSH
54617: DOUBLE
54618: LD_INT 1
54620: DEC
54621: ST_TO_ADDR
54622: LD_VAR 0 2
54626: PUSH
54627: FOR_TO
54628: IFFALSE 54692
// begin hc_class = class_tiger ;
54630: LD_ADDR_OWVAR 28
54634: PUSH
54635: LD_INT 14
54637: ST_TO_ADDR
// hc_gallery =  ;
54638: LD_ADDR_OWVAR 33
54642: PUSH
54643: LD_STRING 
54645: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54646: LD_ADDR_OWVAR 35
54650: PUSH
54651: LD_INT 7
54653: NEG
54654: PPUSH
54655: LD_INT 7
54657: PPUSH
54658: CALL_OW 12
54662: ST_TO_ADDR
// animal := CreateHuman ;
54663: LD_ADDR_VAR 0 12
54667: PUSH
54668: CALL_OW 44
54672: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54673: LD_VAR 0 12
54677: PPUSH
54678: LD_VAR 0 8
54682: PPUSH
54683: LD_INT 0
54685: PPUSH
54686: CALL 56652 0 3
// end ;
54690: GO 54627
54692: POP
54693: POP
// if apemans then
54694: LD_VAR 0 3
54698: IFFALSE 54821
// for i = 1 to apemans do
54700: LD_ADDR_VAR 0 11
54704: PUSH
54705: DOUBLE
54706: LD_INT 1
54708: DEC
54709: ST_TO_ADDR
54710: LD_VAR 0 3
54714: PUSH
54715: FOR_TO
54716: IFFALSE 54819
// begin hc_class = class_apeman ;
54718: LD_ADDR_OWVAR 28
54722: PUSH
54723: LD_INT 12
54725: ST_TO_ADDR
// hc_gallery =  ;
54726: LD_ADDR_OWVAR 33
54730: PUSH
54731: LD_STRING 
54733: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54734: LD_ADDR_OWVAR 35
54738: PUSH
54739: LD_INT 5
54741: NEG
54742: PPUSH
54743: LD_INT 5
54745: PPUSH
54746: CALL_OW 12
54750: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54751: LD_ADDR_OWVAR 31
54755: PUSH
54756: LD_INT 1
54758: PPUSH
54759: LD_INT 3
54761: PPUSH
54762: CALL_OW 12
54766: PUSH
54767: LD_INT 1
54769: PPUSH
54770: LD_INT 3
54772: PPUSH
54773: CALL_OW 12
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// animal := CreateHuman ;
54790: LD_ADDR_VAR 0 12
54794: PUSH
54795: CALL_OW 44
54799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54800: LD_VAR 0 12
54804: PPUSH
54805: LD_VAR 0 8
54809: PPUSH
54810: LD_INT 0
54812: PPUSH
54813: CALL 56652 0 3
// end ;
54817: GO 54715
54819: POP
54820: POP
// if enchidnas then
54821: LD_VAR 0 4
54825: IFFALSE 54892
// for i = 1 to enchidnas do
54827: LD_ADDR_VAR 0 11
54831: PUSH
54832: DOUBLE
54833: LD_INT 1
54835: DEC
54836: ST_TO_ADDR
54837: LD_VAR 0 4
54841: PUSH
54842: FOR_TO
54843: IFFALSE 54890
// begin hc_class = 13 ;
54845: LD_ADDR_OWVAR 28
54849: PUSH
54850: LD_INT 13
54852: ST_TO_ADDR
// hc_gallery =  ;
54853: LD_ADDR_OWVAR 33
54857: PUSH
54858: LD_STRING 
54860: ST_TO_ADDR
// animal := CreateHuman ;
54861: LD_ADDR_VAR 0 12
54865: PUSH
54866: CALL_OW 44
54870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54871: LD_VAR 0 12
54875: PPUSH
54876: LD_VAR 0 8
54880: PPUSH
54881: LD_INT 0
54883: PPUSH
54884: CALL 56652 0 3
// end ;
54888: GO 54842
54890: POP
54891: POP
// if fishes then
54892: LD_VAR 0 7
54896: IFFALSE 54963
// for i = 1 to fishes do
54898: LD_ADDR_VAR 0 11
54902: PUSH
54903: DOUBLE
54904: LD_INT 1
54906: DEC
54907: ST_TO_ADDR
54908: LD_VAR 0 7
54912: PUSH
54913: FOR_TO
54914: IFFALSE 54961
// begin hc_class = 20 ;
54916: LD_ADDR_OWVAR 28
54920: PUSH
54921: LD_INT 20
54923: ST_TO_ADDR
// hc_gallery =  ;
54924: LD_ADDR_OWVAR 33
54928: PUSH
54929: LD_STRING 
54931: ST_TO_ADDR
// animal := CreateHuman ;
54932: LD_ADDR_VAR 0 12
54936: PUSH
54937: CALL_OW 44
54941: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54942: LD_VAR 0 12
54946: PPUSH
54947: LD_VAR 0 9
54951: PPUSH
54952: LD_INT 0
54954: PPUSH
54955: CALL 56652 0 3
// end ;
54959: GO 54913
54961: POP
54962: POP
// end ;
54963: LD_VAR 0 10
54967: RET
// export function WantHeal ( sci , unit ) ; begin
54968: LD_INT 0
54970: PPUSH
// if GetTaskList ( sci ) > 0 then
54971: LD_VAR 0 1
54975: PPUSH
54976: CALL_OW 437
54980: PUSH
54981: LD_INT 0
54983: GREATER
54984: IFFALSE 55054
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54986: LD_VAR 0 1
54990: PPUSH
54991: CALL_OW 437
54995: PUSH
54996: LD_INT 1
54998: ARRAY
54999: PUSH
55000: LD_INT 1
55002: ARRAY
55003: PUSH
55004: LD_STRING l
55006: EQUAL
55007: PUSH
55008: LD_VAR 0 1
55012: PPUSH
55013: CALL_OW 437
55017: PUSH
55018: LD_INT 1
55020: ARRAY
55021: PUSH
55022: LD_INT 4
55024: ARRAY
55025: PUSH
55026: LD_VAR 0 2
55030: EQUAL
55031: AND
55032: IFFALSE 55044
// result := true else
55034: LD_ADDR_VAR 0 3
55038: PUSH
55039: LD_INT 1
55041: ST_TO_ADDR
55042: GO 55052
// result := false ;
55044: LD_ADDR_VAR 0 3
55048: PUSH
55049: LD_INT 0
55051: ST_TO_ADDR
// end else
55052: GO 55062
// result := false ;
55054: LD_ADDR_VAR 0 3
55058: PUSH
55059: LD_INT 0
55061: ST_TO_ADDR
// end ;
55062: LD_VAR 0 3
55066: RET
// export function HealTarget ( sci ) ; begin
55067: LD_INT 0
55069: PPUSH
// if not sci then
55070: LD_VAR 0 1
55074: NOT
55075: IFFALSE 55079
// exit ;
55077: GO 55144
// result := 0 ;
55079: LD_ADDR_VAR 0 2
55083: PUSH
55084: LD_INT 0
55086: ST_TO_ADDR
// if GetTaskList ( sci ) then
55087: LD_VAR 0 1
55091: PPUSH
55092: CALL_OW 437
55096: IFFALSE 55144
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55098: LD_VAR 0 1
55102: PPUSH
55103: CALL_OW 437
55107: PUSH
55108: LD_INT 1
55110: ARRAY
55111: PUSH
55112: LD_INT 1
55114: ARRAY
55115: PUSH
55116: LD_STRING l
55118: EQUAL
55119: IFFALSE 55144
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55121: LD_ADDR_VAR 0 2
55125: PUSH
55126: LD_VAR 0 1
55130: PPUSH
55131: CALL_OW 437
55135: PUSH
55136: LD_INT 1
55138: ARRAY
55139: PUSH
55140: LD_INT 4
55142: ARRAY
55143: ST_TO_ADDR
// end ;
55144: LD_VAR 0 2
55148: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55149: LD_INT 0
55151: PPUSH
55152: PPUSH
55153: PPUSH
55154: PPUSH
// if not base_units then
55155: LD_VAR 0 1
55159: NOT
55160: IFFALSE 55164
// exit ;
55162: GO 55251
// result := false ;
55164: LD_ADDR_VAR 0 2
55168: PUSH
55169: LD_INT 0
55171: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55172: LD_ADDR_VAR 0 5
55176: PUSH
55177: LD_VAR 0 1
55181: PPUSH
55182: LD_INT 21
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PPUSH
55192: CALL_OW 72
55196: ST_TO_ADDR
// if not tmp then
55197: LD_VAR 0 5
55201: NOT
55202: IFFALSE 55206
// exit ;
55204: GO 55251
// for i in tmp do
55206: LD_ADDR_VAR 0 3
55210: PUSH
55211: LD_VAR 0 5
55215: PUSH
55216: FOR_IN
55217: IFFALSE 55249
// begin result := EnemyInRange ( i , 22 ) ;
55219: LD_ADDR_VAR 0 2
55223: PUSH
55224: LD_VAR 0 3
55228: PPUSH
55229: LD_INT 22
55231: PPUSH
55232: CALL 53487 0 2
55236: ST_TO_ADDR
// if result then
55237: LD_VAR 0 2
55241: IFFALSE 55247
// exit ;
55243: POP
55244: POP
55245: GO 55251
// end ;
55247: GO 55216
55249: POP
55250: POP
// end ;
55251: LD_VAR 0 2
55255: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55256: LD_INT 0
55258: PPUSH
55259: PPUSH
// if not units then
55260: LD_VAR 0 1
55264: NOT
55265: IFFALSE 55269
// exit ;
55267: GO 55339
// result := [ ] ;
55269: LD_ADDR_VAR 0 3
55273: PUSH
55274: EMPTY
55275: ST_TO_ADDR
// for i in units do
55276: LD_ADDR_VAR 0 4
55280: PUSH
55281: LD_VAR 0 1
55285: PUSH
55286: FOR_IN
55287: IFFALSE 55337
// if GetTag ( i ) = tag then
55289: LD_VAR 0 4
55293: PPUSH
55294: CALL_OW 110
55298: PUSH
55299: LD_VAR 0 2
55303: EQUAL
55304: IFFALSE 55335
// result := Insert ( result , result + 1 , i ) ;
55306: LD_ADDR_VAR 0 3
55310: PUSH
55311: LD_VAR 0 3
55315: PPUSH
55316: LD_VAR 0 3
55320: PUSH
55321: LD_INT 1
55323: PLUS
55324: PPUSH
55325: LD_VAR 0 4
55329: PPUSH
55330: CALL_OW 2
55334: ST_TO_ADDR
55335: GO 55286
55337: POP
55338: POP
// end ;
55339: LD_VAR 0 3
55343: RET
// export function IsDriver ( un ) ; begin
55344: LD_INT 0
55346: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55347: LD_ADDR_VAR 0 2
55351: PUSH
55352: LD_VAR 0 1
55356: PUSH
55357: LD_INT 55
55359: PUSH
55360: EMPTY
55361: LIST
55362: PPUSH
55363: CALL_OW 69
55367: IN
55368: ST_TO_ADDR
// end ;
55369: LD_VAR 0 2
55373: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55374: LD_INT 0
55376: PPUSH
55377: PPUSH
// list := [ ] ;
55378: LD_ADDR_VAR 0 5
55382: PUSH
55383: EMPTY
55384: ST_TO_ADDR
// case d of 0 :
55385: LD_VAR 0 3
55389: PUSH
55390: LD_INT 0
55392: DOUBLE
55393: EQUAL
55394: IFTRUE 55398
55396: GO 55531
55398: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55399: LD_ADDR_VAR 0 5
55403: PUSH
55404: LD_VAR 0 1
55408: PUSH
55409: LD_INT 4
55411: MINUS
55412: PUSH
55413: LD_VAR 0 2
55417: PUSH
55418: LD_INT 4
55420: MINUS
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: PUSH
55430: LD_VAR 0 1
55434: PUSH
55435: LD_INT 3
55437: MINUS
55438: PUSH
55439: LD_VAR 0 2
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: PUSH
55452: LD_VAR 0 1
55456: PUSH
55457: LD_INT 4
55459: PLUS
55460: PUSH
55461: LD_VAR 0 2
55465: PUSH
55466: LD_INT 4
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: PUSH
55474: LD_VAR 0 1
55478: PUSH
55479: LD_INT 3
55481: PLUS
55482: PUSH
55483: LD_VAR 0 2
55487: PUSH
55488: LD_INT 3
55490: PLUS
55491: PUSH
55492: LD_INT 5
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: LIST
55499: PUSH
55500: LD_VAR 0 1
55504: PUSH
55505: LD_VAR 0 2
55509: PUSH
55510: LD_INT 4
55512: PLUS
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: ST_TO_ADDR
// end ; 1 :
55529: GO 56229
55531: LD_INT 1
55533: DOUBLE
55534: EQUAL
55535: IFTRUE 55539
55537: GO 55672
55539: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55540: LD_ADDR_VAR 0 5
55544: PUSH
55545: LD_VAR 0 1
55549: PUSH
55550: LD_VAR 0 2
55554: PUSH
55555: LD_INT 4
55557: MINUS
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: PUSH
55567: LD_VAR 0 1
55571: PUSH
55572: LD_INT 3
55574: MINUS
55575: PUSH
55576: LD_VAR 0 2
55580: PUSH
55581: LD_INT 3
55583: MINUS
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: PUSH
55593: LD_VAR 0 1
55597: PUSH
55598: LD_INT 4
55600: MINUS
55601: PUSH
55602: LD_VAR 0 2
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: LIST
55614: PUSH
55615: LD_VAR 0 1
55619: PUSH
55620: LD_VAR 0 2
55624: PUSH
55625: LD_INT 3
55627: PLUS
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: PUSH
55637: LD_VAR 0 1
55641: PUSH
55642: LD_INT 4
55644: PLUS
55645: PUSH
55646: LD_VAR 0 2
55650: PUSH
55651: LD_INT 4
55653: PLUS
55654: PUSH
55655: LD_INT 5
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: LIST
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// end ; 2 :
55670: GO 56229
55672: LD_INT 2
55674: DOUBLE
55675: EQUAL
55676: IFTRUE 55680
55678: GO 55809
55680: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55681: LD_ADDR_VAR 0 5
55685: PUSH
55686: LD_VAR 0 1
55690: PUSH
55691: LD_VAR 0 2
55695: PUSH
55696: LD_INT 3
55698: MINUS
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: PUSH
55708: LD_VAR 0 1
55712: PUSH
55713: LD_INT 4
55715: PLUS
55716: PUSH
55717: LD_VAR 0 2
55721: PUSH
55722: LD_INT 4
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: PUSH
55730: LD_VAR 0 1
55734: PUSH
55735: LD_VAR 0 2
55739: PUSH
55740: LD_INT 4
55742: PLUS
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: PUSH
55752: LD_VAR 0 1
55756: PUSH
55757: LD_INT 3
55759: MINUS
55760: PUSH
55761: LD_VAR 0 2
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: PUSH
55774: LD_VAR 0 1
55778: PUSH
55779: LD_INT 4
55781: MINUS
55782: PUSH
55783: LD_VAR 0 2
55787: PUSH
55788: LD_INT 4
55790: MINUS
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: ST_TO_ADDR
// end ; 3 :
55807: GO 56229
55809: LD_INT 3
55811: DOUBLE
55812: EQUAL
55813: IFTRUE 55817
55815: GO 55950
55817: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55818: LD_ADDR_VAR 0 5
55822: PUSH
55823: LD_VAR 0 1
55827: PUSH
55828: LD_INT 3
55830: PLUS
55831: PUSH
55832: LD_VAR 0 2
55836: PUSH
55837: LD_INT 4
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: PUSH
55845: LD_VAR 0 1
55849: PUSH
55850: LD_INT 4
55852: PLUS
55853: PUSH
55854: LD_VAR 0 2
55858: PUSH
55859: LD_INT 4
55861: PLUS
55862: PUSH
55863: LD_INT 5
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: LIST
55870: PUSH
55871: LD_VAR 0 1
55875: PUSH
55876: LD_INT 4
55878: MINUS
55879: PUSH
55880: LD_VAR 0 2
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: LIST
55892: PUSH
55893: LD_VAR 0 1
55897: PUSH
55898: LD_VAR 0 2
55902: PUSH
55903: LD_INT 4
55905: MINUS
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: PUSH
55915: LD_VAR 0 1
55919: PUSH
55920: LD_INT 3
55922: MINUS
55923: PUSH
55924: LD_VAR 0 2
55928: PUSH
55929: LD_INT 3
55931: MINUS
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: ST_TO_ADDR
// end ; 4 :
55948: GO 56229
55950: LD_INT 4
55952: DOUBLE
55953: EQUAL
55954: IFTRUE 55958
55956: GO 56091
55958: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55959: LD_ADDR_VAR 0 5
55963: PUSH
55964: LD_VAR 0 1
55968: PUSH
55969: LD_VAR 0 2
55973: PUSH
55974: LD_INT 4
55976: PLUS
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: PUSH
55986: LD_VAR 0 1
55990: PUSH
55991: LD_INT 3
55993: PLUS
55994: PUSH
55995: LD_VAR 0 2
55999: PUSH
56000: LD_INT 3
56002: PLUS
56003: PUSH
56004: LD_INT 5
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: PUSH
56012: LD_VAR 0 1
56016: PUSH
56017: LD_INT 4
56019: PLUS
56020: PUSH
56021: LD_VAR 0 2
56025: PUSH
56026: LD_INT 4
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: LIST
56033: PUSH
56034: LD_VAR 0 1
56038: PUSH
56039: LD_VAR 0 2
56043: PUSH
56044: LD_INT 3
56046: MINUS
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: PUSH
56056: LD_VAR 0 1
56060: PUSH
56061: LD_INT 4
56063: MINUS
56064: PUSH
56065: LD_VAR 0 2
56069: PUSH
56070: LD_INT 4
56072: MINUS
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: ST_TO_ADDR
// end ; 5 :
56089: GO 56229
56091: LD_INT 5
56093: DOUBLE
56094: EQUAL
56095: IFTRUE 56099
56097: GO 56228
56099: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56100: LD_ADDR_VAR 0 5
56104: PUSH
56105: LD_VAR 0 1
56109: PUSH
56110: LD_INT 4
56112: MINUS
56113: PUSH
56114: LD_VAR 0 2
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: PUSH
56127: LD_VAR 0 1
56131: PUSH
56132: LD_VAR 0 2
56136: PUSH
56137: LD_INT 4
56139: MINUS
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: PUSH
56149: LD_VAR 0 1
56153: PUSH
56154: LD_INT 4
56156: PLUS
56157: PUSH
56158: LD_VAR 0 2
56162: PUSH
56163: LD_INT 4
56165: PLUS
56166: PUSH
56167: LD_INT 5
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: PUSH
56175: LD_VAR 0 1
56179: PUSH
56180: LD_INT 3
56182: PLUS
56183: PUSH
56184: LD_VAR 0 2
56188: PUSH
56189: LD_INT 4
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: PUSH
56197: LD_VAR 0 1
56201: PUSH
56202: LD_VAR 0 2
56206: PUSH
56207: LD_INT 3
56209: PLUS
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// end ; end ;
56226: GO 56229
56228: POP
// result := list ;
56229: LD_ADDR_VAR 0 4
56233: PUSH
56234: LD_VAR 0 5
56238: ST_TO_ADDR
// end ;
56239: LD_VAR 0 4
56243: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56244: LD_INT 0
56246: PPUSH
56247: PPUSH
56248: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56249: LD_VAR 0 1
56253: NOT
56254: PUSH
56255: LD_VAR 0 2
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: LD_INT 4
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: IN
56278: NOT
56279: OR
56280: IFFALSE 56284
// exit ;
56282: GO 56376
// tmp := [ ] ;
56284: LD_ADDR_VAR 0 5
56288: PUSH
56289: EMPTY
56290: ST_TO_ADDR
// for i in units do
56291: LD_ADDR_VAR 0 4
56295: PUSH
56296: LD_VAR 0 1
56300: PUSH
56301: FOR_IN
56302: IFFALSE 56345
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56304: LD_ADDR_VAR 0 5
56308: PUSH
56309: LD_VAR 0 5
56313: PPUSH
56314: LD_VAR 0 5
56318: PUSH
56319: LD_INT 1
56321: PLUS
56322: PPUSH
56323: LD_VAR 0 4
56327: PPUSH
56328: LD_VAR 0 2
56332: PPUSH
56333: CALL_OW 259
56337: PPUSH
56338: CALL_OW 2
56342: ST_TO_ADDR
56343: GO 56301
56345: POP
56346: POP
// if not tmp then
56347: LD_VAR 0 5
56351: NOT
56352: IFFALSE 56356
// exit ;
56354: GO 56376
// result := SortListByListDesc ( units , tmp ) ;
56356: LD_ADDR_VAR 0 3
56360: PUSH
56361: LD_VAR 0 1
56365: PPUSH
56366: LD_VAR 0 5
56370: PPUSH
56371: CALL_OW 77
56375: ST_TO_ADDR
// end ;
56376: LD_VAR 0 3
56380: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56381: LD_INT 0
56383: PPUSH
56384: PPUSH
56385: PPUSH
// result := false ;
56386: LD_ADDR_VAR 0 3
56390: PUSH
56391: LD_INT 0
56393: ST_TO_ADDR
// x := GetX ( building ) ;
56394: LD_ADDR_VAR 0 4
56398: PUSH
56399: LD_VAR 0 2
56403: PPUSH
56404: CALL_OW 250
56408: ST_TO_ADDR
// y := GetY ( building ) ;
56409: LD_ADDR_VAR 0 5
56413: PUSH
56414: LD_VAR 0 2
56418: PPUSH
56419: CALL_OW 251
56423: ST_TO_ADDR
// if not building or not x or not y then
56424: LD_VAR 0 2
56428: NOT
56429: PUSH
56430: LD_VAR 0 4
56434: NOT
56435: OR
56436: PUSH
56437: LD_VAR 0 5
56441: NOT
56442: OR
56443: IFFALSE 56447
// exit ;
56445: GO 56539
// if GetTaskList ( unit ) then
56447: LD_VAR 0 1
56451: PPUSH
56452: CALL_OW 437
56456: IFFALSE 56539
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56458: LD_STRING e
56460: PUSH
56461: LD_VAR 0 1
56465: PPUSH
56466: CALL_OW 437
56470: PUSH
56471: LD_INT 1
56473: ARRAY
56474: PUSH
56475: LD_INT 1
56477: ARRAY
56478: EQUAL
56479: PUSH
56480: LD_VAR 0 4
56484: PUSH
56485: LD_VAR 0 1
56489: PPUSH
56490: CALL_OW 437
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PUSH
56499: LD_INT 2
56501: ARRAY
56502: EQUAL
56503: AND
56504: PUSH
56505: LD_VAR 0 5
56509: PUSH
56510: LD_VAR 0 1
56514: PPUSH
56515: CALL_OW 437
56519: PUSH
56520: LD_INT 1
56522: ARRAY
56523: PUSH
56524: LD_INT 3
56526: ARRAY
56527: EQUAL
56528: AND
56529: IFFALSE 56539
// result := true end ;
56531: LD_ADDR_VAR 0 3
56535: PUSH
56536: LD_INT 1
56538: ST_TO_ADDR
// end ;
56539: LD_VAR 0 3
56543: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56544: LD_INT 0
56546: PPUSH
// result := false ;
56547: LD_ADDR_VAR 0 4
56551: PUSH
56552: LD_INT 0
56554: ST_TO_ADDR
// if GetTaskList ( unit ) then
56555: LD_VAR 0 1
56559: PPUSH
56560: CALL_OW 437
56564: IFFALSE 56647
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56566: LD_STRING M
56568: PUSH
56569: LD_VAR 0 1
56573: PPUSH
56574: CALL_OW 437
56578: PUSH
56579: LD_INT 1
56581: ARRAY
56582: PUSH
56583: LD_INT 1
56585: ARRAY
56586: EQUAL
56587: PUSH
56588: LD_VAR 0 2
56592: PUSH
56593: LD_VAR 0 1
56597: PPUSH
56598: CALL_OW 437
56602: PUSH
56603: LD_INT 1
56605: ARRAY
56606: PUSH
56607: LD_INT 2
56609: ARRAY
56610: EQUAL
56611: AND
56612: PUSH
56613: LD_VAR 0 3
56617: PUSH
56618: LD_VAR 0 1
56622: PPUSH
56623: CALL_OW 437
56627: PUSH
56628: LD_INT 1
56630: ARRAY
56631: PUSH
56632: LD_INT 3
56634: ARRAY
56635: EQUAL
56636: AND
56637: IFFALSE 56647
// result := true ;
56639: LD_ADDR_VAR 0 4
56643: PUSH
56644: LD_INT 1
56646: ST_TO_ADDR
// end ; end ;
56647: LD_VAR 0 4
56651: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56652: LD_INT 0
56654: PPUSH
56655: PPUSH
56656: PPUSH
56657: PPUSH
// if not unit or not area then
56658: LD_VAR 0 1
56662: NOT
56663: PUSH
56664: LD_VAR 0 2
56668: NOT
56669: OR
56670: IFFALSE 56674
// exit ;
56672: GO 56838
// tmp := AreaToList ( area , i ) ;
56674: LD_ADDR_VAR 0 6
56678: PUSH
56679: LD_VAR 0 2
56683: PPUSH
56684: LD_VAR 0 5
56688: PPUSH
56689: CALL_OW 517
56693: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56694: LD_ADDR_VAR 0 5
56698: PUSH
56699: DOUBLE
56700: LD_INT 1
56702: DEC
56703: ST_TO_ADDR
56704: LD_VAR 0 6
56708: PUSH
56709: LD_INT 1
56711: ARRAY
56712: PUSH
56713: FOR_TO
56714: IFFALSE 56836
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56716: LD_ADDR_VAR 0 7
56720: PUSH
56721: LD_VAR 0 6
56725: PUSH
56726: LD_INT 1
56728: ARRAY
56729: PUSH
56730: LD_VAR 0 5
56734: ARRAY
56735: PUSH
56736: LD_VAR 0 6
56740: PUSH
56741: LD_INT 2
56743: ARRAY
56744: PUSH
56745: LD_VAR 0 5
56749: ARRAY
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56755: LD_VAR 0 7
56759: PUSH
56760: LD_INT 1
56762: ARRAY
56763: PPUSH
56764: LD_VAR 0 7
56768: PUSH
56769: LD_INT 2
56771: ARRAY
56772: PPUSH
56773: CALL_OW 428
56777: PUSH
56778: LD_INT 0
56780: EQUAL
56781: IFFALSE 56834
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56783: LD_VAR 0 1
56787: PPUSH
56788: LD_VAR 0 7
56792: PUSH
56793: LD_INT 1
56795: ARRAY
56796: PPUSH
56797: LD_VAR 0 7
56801: PUSH
56802: LD_INT 2
56804: ARRAY
56805: PPUSH
56806: LD_VAR 0 3
56810: PPUSH
56811: CALL_OW 48
// result := IsPlaced ( unit ) ;
56815: LD_ADDR_VAR 0 4
56819: PUSH
56820: LD_VAR 0 1
56824: PPUSH
56825: CALL_OW 305
56829: ST_TO_ADDR
// exit ;
56830: POP
56831: POP
56832: GO 56838
// end ; end ;
56834: GO 56713
56836: POP
56837: POP
// end ;
56838: LD_VAR 0 4
56842: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56843: LD_INT 0
56845: PPUSH
56846: PPUSH
56847: PPUSH
// if not side or side > 8 then
56848: LD_VAR 0 1
56852: NOT
56853: PUSH
56854: LD_VAR 0 1
56858: PUSH
56859: LD_INT 8
56861: GREATER
56862: OR
56863: IFFALSE 56867
// exit ;
56865: GO 57054
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56867: LD_ADDR_VAR 0 4
56871: PUSH
56872: LD_INT 22
56874: PUSH
56875: LD_VAR 0 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 21
56886: PUSH
56887: LD_INT 3
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PPUSH
56898: CALL_OW 69
56902: ST_TO_ADDR
// if not tmp then
56903: LD_VAR 0 4
56907: NOT
56908: IFFALSE 56912
// exit ;
56910: GO 57054
// enable_addtolog := true ;
56912: LD_ADDR_OWVAR 81
56916: PUSH
56917: LD_INT 1
56919: ST_TO_ADDR
// AddToLog ( [ ) ;
56920: LD_STRING [
56922: PPUSH
56923: CALL_OW 561
// for i in tmp do
56927: LD_ADDR_VAR 0 3
56931: PUSH
56932: LD_VAR 0 4
56936: PUSH
56937: FOR_IN
56938: IFFALSE 57045
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56940: LD_STRING [
56942: PUSH
56943: LD_VAR 0 3
56947: PPUSH
56948: CALL_OW 266
56952: STR
56953: PUSH
56954: LD_STRING , 
56956: STR
56957: PUSH
56958: LD_VAR 0 3
56962: PPUSH
56963: CALL_OW 250
56967: STR
56968: PUSH
56969: LD_STRING , 
56971: STR
56972: PUSH
56973: LD_VAR 0 3
56977: PPUSH
56978: CALL_OW 251
56982: STR
56983: PUSH
56984: LD_STRING , 
56986: STR
56987: PUSH
56988: LD_VAR 0 3
56992: PPUSH
56993: CALL_OW 254
56997: STR
56998: PUSH
56999: LD_STRING , 
57001: STR
57002: PUSH
57003: LD_VAR 0 3
57007: PPUSH
57008: LD_INT 1
57010: PPUSH
57011: CALL_OW 268
57015: STR
57016: PUSH
57017: LD_STRING , 
57019: STR
57020: PUSH
57021: LD_VAR 0 3
57025: PPUSH
57026: LD_INT 2
57028: PPUSH
57029: CALL_OW 268
57033: STR
57034: PUSH
57035: LD_STRING ],
57037: STR
57038: PPUSH
57039: CALL_OW 561
// end ;
57043: GO 56937
57045: POP
57046: POP
// AddToLog ( ]; ) ;
57047: LD_STRING ];
57049: PPUSH
57050: CALL_OW 561
// end ;
57054: LD_VAR 0 2
57058: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57059: LD_INT 0
57061: PPUSH
57062: PPUSH
57063: PPUSH
57064: PPUSH
57065: PPUSH
// if not area or not rate or not max then
57066: LD_VAR 0 1
57070: NOT
57071: PUSH
57072: LD_VAR 0 2
57076: NOT
57077: OR
57078: PUSH
57079: LD_VAR 0 4
57083: NOT
57084: OR
57085: IFFALSE 57089
// exit ;
57087: GO 57281
// while 1 do
57089: LD_INT 1
57091: IFFALSE 57281
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57093: LD_ADDR_VAR 0 9
57097: PUSH
57098: LD_VAR 0 1
57102: PPUSH
57103: LD_INT 1
57105: PPUSH
57106: CALL_OW 287
57110: PUSH
57111: LD_INT 10
57113: MUL
57114: ST_TO_ADDR
// r := rate / 10 ;
57115: LD_ADDR_VAR 0 7
57119: PUSH
57120: LD_VAR 0 2
57124: PUSH
57125: LD_INT 10
57127: DIVREAL
57128: ST_TO_ADDR
// time := 1 1$00 ;
57129: LD_ADDR_VAR 0 8
57133: PUSH
57134: LD_INT 2100
57136: ST_TO_ADDR
// if amount < min then
57137: LD_VAR 0 9
57141: PUSH
57142: LD_VAR 0 3
57146: LESS
57147: IFFALSE 57165
// r := r * 2 else
57149: LD_ADDR_VAR 0 7
57153: PUSH
57154: LD_VAR 0 7
57158: PUSH
57159: LD_INT 2
57161: MUL
57162: ST_TO_ADDR
57163: GO 57191
// if amount > max then
57165: LD_VAR 0 9
57169: PUSH
57170: LD_VAR 0 4
57174: GREATER
57175: IFFALSE 57191
// r := r / 2 ;
57177: LD_ADDR_VAR 0 7
57181: PUSH
57182: LD_VAR 0 7
57186: PUSH
57187: LD_INT 2
57189: DIVREAL
57190: ST_TO_ADDR
// time := time / r ;
57191: LD_ADDR_VAR 0 8
57195: PUSH
57196: LD_VAR 0 8
57200: PUSH
57201: LD_VAR 0 7
57205: DIVREAL
57206: ST_TO_ADDR
// if time < 0 then
57207: LD_VAR 0 8
57211: PUSH
57212: LD_INT 0
57214: LESS
57215: IFFALSE 57232
// time := time * - 1 ;
57217: LD_ADDR_VAR 0 8
57221: PUSH
57222: LD_VAR 0 8
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: MUL
57231: ST_TO_ADDR
// wait ( time ) ;
57232: LD_VAR 0 8
57236: PPUSH
57237: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57241: LD_INT 35
57243: PPUSH
57244: LD_INT 875
57246: PPUSH
57247: CALL_OW 12
57251: PPUSH
57252: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57256: LD_INT 1
57258: PPUSH
57259: LD_INT 5
57261: PPUSH
57262: CALL_OW 12
57266: PPUSH
57267: LD_VAR 0 1
57271: PPUSH
57272: LD_INT 1
57274: PPUSH
57275: CALL_OW 55
// end ;
57279: GO 57089
// end ;
57281: LD_VAR 0 5
57285: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57286: LD_INT 0
57288: PPUSH
57289: PPUSH
57290: PPUSH
57291: PPUSH
57292: PPUSH
57293: PPUSH
57294: PPUSH
57295: PPUSH
// if not turrets or not factories then
57296: LD_VAR 0 1
57300: NOT
57301: PUSH
57302: LD_VAR 0 2
57306: NOT
57307: OR
57308: IFFALSE 57312
// exit ;
57310: GO 57619
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57312: LD_ADDR_VAR 0 10
57316: PUSH
57317: LD_INT 5
57319: PUSH
57320: LD_INT 6
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 4
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 5
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 24
57354: PUSH
57355: LD_INT 25
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 23
57364: PUSH
57365: LD_INT 27
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 42
57378: PUSH
57379: LD_INT 43
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 44
57388: PUSH
57389: LD_INT 46
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 45
57398: PUSH
57399: LD_INT 47
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: ST_TO_ADDR
// result := [ ] ;
57416: LD_ADDR_VAR 0 3
57420: PUSH
57421: EMPTY
57422: ST_TO_ADDR
// for i in turrets do
57423: LD_ADDR_VAR 0 4
57427: PUSH
57428: LD_VAR 0 1
57432: PUSH
57433: FOR_IN
57434: IFFALSE 57617
// begin nat := GetNation ( i ) ;
57436: LD_ADDR_VAR 0 7
57440: PUSH
57441: LD_VAR 0 4
57445: PPUSH
57446: CALL_OW 248
57450: ST_TO_ADDR
// weapon := 0 ;
57451: LD_ADDR_VAR 0 8
57455: PUSH
57456: LD_INT 0
57458: ST_TO_ADDR
// if not nat then
57459: LD_VAR 0 7
57463: NOT
57464: IFFALSE 57468
// continue ;
57466: GO 57433
// for j in list [ nat ] do
57468: LD_ADDR_VAR 0 5
57472: PUSH
57473: LD_VAR 0 10
57477: PUSH
57478: LD_VAR 0 7
57482: ARRAY
57483: PUSH
57484: FOR_IN
57485: IFFALSE 57526
// if GetBWeapon ( i ) = j [ 1 ] then
57487: LD_VAR 0 4
57491: PPUSH
57492: CALL_OW 269
57496: PUSH
57497: LD_VAR 0 5
57501: PUSH
57502: LD_INT 1
57504: ARRAY
57505: EQUAL
57506: IFFALSE 57524
// begin weapon := j [ 2 ] ;
57508: LD_ADDR_VAR 0 8
57512: PUSH
57513: LD_VAR 0 5
57517: PUSH
57518: LD_INT 2
57520: ARRAY
57521: ST_TO_ADDR
// break ;
57522: GO 57526
// end ;
57524: GO 57484
57526: POP
57527: POP
// if not weapon then
57528: LD_VAR 0 8
57532: NOT
57533: IFFALSE 57537
// continue ;
57535: GO 57433
// for k in factories do
57537: LD_ADDR_VAR 0 6
57541: PUSH
57542: LD_VAR 0 2
57546: PUSH
57547: FOR_IN
57548: IFFALSE 57613
// begin weapons := AvailableWeaponList ( k ) ;
57550: LD_ADDR_VAR 0 9
57554: PUSH
57555: LD_VAR 0 6
57559: PPUSH
57560: CALL_OW 478
57564: ST_TO_ADDR
// if not weapons then
57565: LD_VAR 0 9
57569: NOT
57570: IFFALSE 57574
// continue ;
57572: GO 57547
// if weapon in weapons then
57574: LD_VAR 0 8
57578: PUSH
57579: LD_VAR 0 9
57583: IN
57584: IFFALSE 57611
// begin result := [ i , weapon ] ;
57586: LD_ADDR_VAR 0 3
57590: PUSH
57591: LD_VAR 0 4
57595: PUSH
57596: LD_VAR 0 8
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: ST_TO_ADDR
// exit ;
57605: POP
57606: POP
57607: POP
57608: POP
57609: GO 57619
// end ; end ;
57611: GO 57547
57613: POP
57614: POP
// end ;
57615: GO 57433
57617: POP
57618: POP
// end ;
57619: LD_VAR 0 3
57623: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57624: LD_INT 0
57626: PPUSH
// if not side or side > 8 then
57627: LD_VAR 0 3
57631: NOT
57632: PUSH
57633: LD_VAR 0 3
57637: PUSH
57638: LD_INT 8
57640: GREATER
57641: OR
57642: IFFALSE 57646
// exit ;
57644: GO 57705
// if not range then
57646: LD_VAR 0 4
57650: NOT
57651: IFFALSE 57662
// range := - 12 ;
57653: LD_ADDR_VAR 0 4
57657: PUSH
57658: LD_INT 12
57660: NEG
57661: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57662: LD_VAR 0 1
57666: PPUSH
57667: LD_VAR 0 2
57671: PPUSH
57672: LD_VAR 0 3
57676: PPUSH
57677: LD_VAR 0 4
57681: PPUSH
57682: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57686: LD_VAR 0 1
57690: PPUSH
57691: LD_VAR 0 2
57695: PPUSH
57696: LD_VAR 0 3
57700: PPUSH
57701: CALL_OW 331
// end ;
57705: LD_VAR 0 5
57709: RET
// export function Video ( mode ) ; begin
57710: LD_INT 0
57712: PPUSH
// ingame_video = mode ;
57713: LD_ADDR_OWVAR 52
57717: PUSH
57718: LD_VAR 0 1
57722: ST_TO_ADDR
// interface_hidden = mode ;
57723: LD_ADDR_OWVAR 54
57727: PUSH
57728: LD_VAR 0 1
57732: ST_TO_ADDR
// end ;
57733: LD_VAR 0 2
57737: RET
// export function Join ( array , element ) ; begin
57738: LD_INT 0
57740: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57741: LD_ADDR_VAR 0 3
57745: PUSH
57746: LD_VAR 0 1
57750: PPUSH
57751: LD_VAR 0 1
57755: PUSH
57756: LD_INT 1
57758: PLUS
57759: PPUSH
57760: LD_VAR 0 2
57764: PPUSH
57765: CALL_OW 1
57769: ST_TO_ADDR
// end ;
57770: LD_VAR 0 3
57774: RET
// export function JoinUnion ( array , element ) ; begin
57775: LD_INT 0
57777: PPUSH
// result := array union element ;
57778: LD_ADDR_VAR 0 3
57782: PUSH
57783: LD_VAR 0 1
57787: PUSH
57788: LD_VAR 0 2
57792: UNION
57793: ST_TO_ADDR
// end ;
57794: LD_VAR 0 3
57798: RET
// export function GetBehemoths ( side ) ; begin
57799: LD_INT 0
57801: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57802: LD_ADDR_VAR 0 2
57806: PUSH
57807: LD_INT 22
57809: PUSH
57810: LD_VAR 0 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 31
57821: PUSH
57822: LD_INT 25
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PPUSH
57833: CALL_OW 69
57837: ST_TO_ADDR
// end ;
57838: LD_VAR 0 2
57842: RET
// export function Shuffle ( array ) ; var i , index ; begin
57843: LD_INT 0
57845: PPUSH
57846: PPUSH
57847: PPUSH
// result := [ ] ;
57848: LD_ADDR_VAR 0 2
57852: PUSH
57853: EMPTY
57854: ST_TO_ADDR
// if not array then
57855: LD_VAR 0 1
57859: NOT
57860: IFFALSE 57864
// exit ;
57862: GO 57963
// Randomize ;
57864: CALL_OW 10
// for i = array downto 1 do
57868: LD_ADDR_VAR 0 3
57872: PUSH
57873: DOUBLE
57874: LD_VAR 0 1
57878: INC
57879: ST_TO_ADDR
57880: LD_INT 1
57882: PUSH
57883: FOR_DOWNTO
57884: IFFALSE 57961
// begin index := rand ( 1 , array ) ;
57886: LD_ADDR_VAR 0 4
57890: PUSH
57891: LD_INT 1
57893: PPUSH
57894: LD_VAR 0 1
57898: PPUSH
57899: CALL_OW 12
57903: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57904: LD_ADDR_VAR 0 2
57908: PUSH
57909: LD_VAR 0 2
57913: PPUSH
57914: LD_VAR 0 2
57918: PUSH
57919: LD_INT 1
57921: PLUS
57922: PPUSH
57923: LD_VAR 0 1
57927: PUSH
57928: LD_VAR 0 4
57932: ARRAY
57933: PPUSH
57934: CALL_OW 2
57938: ST_TO_ADDR
// array := Delete ( array , index ) ;
57939: LD_ADDR_VAR 0 1
57943: PUSH
57944: LD_VAR 0 1
57948: PPUSH
57949: LD_VAR 0 4
57953: PPUSH
57954: CALL_OW 3
57958: ST_TO_ADDR
// end ;
57959: GO 57883
57961: POP
57962: POP
// end ;
57963: LD_VAR 0 2
57967: RET
// export function GetBaseMaterials ( base ) ; begin
57968: LD_INT 0
57970: PPUSH
// result := [ 0 , 0 , 0 ] ;
57971: LD_ADDR_VAR 0 2
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: ST_TO_ADDR
// if not base then
57990: LD_VAR 0 1
57994: NOT
57995: IFFALSE 57999
// exit ;
57997: GO 58048
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57999: LD_ADDR_VAR 0 2
58003: PUSH
58004: LD_VAR 0 1
58008: PPUSH
58009: LD_INT 1
58011: PPUSH
58012: CALL_OW 275
58016: PUSH
58017: LD_VAR 0 1
58021: PPUSH
58022: LD_INT 2
58024: PPUSH
58025: CALL_OW 275
58029: PUSH
58030: LD_VAR 0 1
58034: PPUSH
58035: LD_INT 3
58037: PPUSH
58038: CALL_OW 275
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// end ;
58048: LD_VAR 0 2
58052: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58053: LD_INT 0
58055: PPUSH
58056: PPUSH
// result := array ;
58057: LD_ADDR_VAR 0 3
58061: PUSH
58062: LD_VAR 0 1
58066: ST_TO_ADDR
// if size > 0 then
58067: LD_VAR 0 2
58071: PUSH
58072: LD_INT 0
58074: GREATER
58075: IFFALSE 58121
// for i := array downto size do
58077: LD_ADDR_VAR 0 4
58081: PUSH
58082: DOUBLE
58083: LD_VAR 0 1
58087: INC
58088: ST_TO_ADDR
58089: LD_VAR 0 2
58093: PUSH
58094: FOR_DOWNTO
58095: IFFALSE 58119
// result := Delete ( result , result ) ;
58097: LD_ADDR_VAR 0 3
58101: PUSH
58102: LD_VAR 0 3
58106: PPUSH
58107: LD_VAR 0 3
58111: PPUSH
58112: CALL_OW 3
58116: ST_TO_ADDR
58117: GO 58094
58119: POP
58120: POP
// end ;
58121: LD_VAR 0 3
58125: RET
// export function ComExit ( unit ) ; var tmp ; begin
58126: LD_INT 0
58128: PPUSH
58129: PPUSH
// if not IsInUnit ( unit ) then
58130: LD_VAR 0 1
58134: PPUSH
58135: CALL_OW 310
58139: NOT
58140: IFFALSE 58144
// exit ;
58142: GO 58204
// tmp := IsInUnit ( unit ) ;
58144: LD_ADDR_VAR 0 3
58148: PUSH
58149: LD_VAR 0 1
58153: PPUSH
58154: CALL_OW 310
58158: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58159: LD_VAR 0 3
58163: PPUSH
58164: CALL_OW 247
58168: PUSH
58169: LD_INT 2
58171: EQUAL
58172: IFFALSE 58185
// ComExitVehicle ( unit ) else
58174: LD_VAR 0 1
58178: PPUSH
58179: CALL_OW 121
58183: GO 58194
// ComExitBuilding ( unit ) ;
58185: LD_VAR 0 1
58189: PPUSH
58190: CALL_OW 122
// result := tmp ;
58194: LD_ADDR_VAR 0 2
58198: PUSH
58199: LD_VAR 0 3
58203: ST_TO_ADDR
// end ;
58204: LD_VAR 0 2
58208: RET
// export function ComExitAll ( units ) ; var i ; begin
58209: LD_INT 0
58211: PPUSH
58212: PPUSH
// if not units then
58213: LD_VAR 0 1
58217: NOT
58218: IFFALSE 58222
// exit ;
58220: GO 58248
// for i in units do
58222: LD_ADDR_VAR 0 3
58226: PUSH
58227: LD_VAR 0 1
58231: PUSH
58232: FOR_IN
58233: IFFALSE 58246
// ComExit ( i ) ;
58235: LD_VAR 0 3
58239: PPUSH
58240: CALL 58126 0 1
58244: GO 58232
58246: POP
58247: POP
// end ;
58248: LD_VAR 0 2
58252: RET
// export function ResetHc ; begin
58253: LD_INT 0
58255: PPUSH
// InitHc ;
58256: CALL_OW 19
// hc_importance := 0 ;
58260: LD_ADDR_OWVAR 32
58264: PUSH
58265: LD_INT 0
58267: ST_TO_ADDR
// end ;
58268: LD_VAR 0 1
58272: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58273: LD_INT 0
58275: PPUSH
58276: PPUSH
58277: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58278: LD_ADDR_VAR 0 6
58282: PUSH
58283: LD_VAR 0 1
58287: PUSH
58288: LD_VAR 0 3
58292: PLUS
58293: PUSH
58294: LD_INT 2
58296: DIV
58297: ST_TO_ADDR
// if _x < 0 then
58298: LD_VAR 0 6
58302: PUSH
58303: LD_INT 0
58305: LESS
58306: IFFALSE 58323
// _x := _x * - 1 ;
58308: LD_ADDR_VAR 0 6
58312: PUSH
58313: LD_VAR 0 6
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: MUL
58322: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58323: LD_ADDR_VAR 0 7
58327: PUSH
58328: LD_VAR 0 2
58332: PUSH
58333: LD_VAR 0 4
58337: PLUS
58338: PUSH
58339: LD_INT 2
58341: DIV
58342: ST_TO_ADDR
// if _y < 0 then
58343: LD_VAR 0 7
58347: PUSH
58348: LD_INT 0
58350: LESS
58351: IFFALSE 58368
// _y := _y * - 1 ;
58353: LD_ADDR_VAR 0 7
58357: PUSH
58358: LD_VAR 0 7
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: MUL
58367: ST_TO_ADDR
// result := [ _x , _y ] ;
58368: LD_ADDR_VAR 0 5
58372: PUSH
58373: LD_VAR 0 6
58377: PUSH
58378: LD_VAR 0 7
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: ST_TO_ADDR
// end ;
58387: LD_VAR 0 5
58391: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58392: LD_INT 0
58394: PPUSH
58395: PPUSH
58396: PPUSH
58397: PPUSH
// task := GetTaskList ( unit ) ;
58398: LD_ADDR_VAR 0 7
58402: PUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: CALL_OW 437
58412: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58413: LD_VAR 0 7
58417: NOT
58418: PUSH
58419: LD_VAR 0 1
58423: PPUSH
58424: LD_VAR 0 2
58428: PPUSH
58429: CALL_OW 308
58433: NOT
58434: AND
58435: IFFALSE 58439
// exit ;
58437: GO 58557
// if IsInArea ( unit , area ) then
58439: LD_VAR 0 1
58443: PPUSH
58444: LD_VAR 0 2
58448: PPUSH
58449: CALL_OW 308
58453: IFFALSE 58471
// begin ComMoveToArea ( unit , goAway ) ;
58455: LD_VAR 0 1
58459: PPUSH
58460: LD_VAR 0 3
58464: PPUSH
58465: CALL_OW 113
// exit ;
58469: GO 58557
// end ; if task [ 1 ] [ 1 ] <> M then
58471: LD_VAR 0 7
58475: PUSH
58476: LD_INT 1
58478: ARRAY
58479: PUSH
58480: LD_INT 1
58482: ARRAY
58483: PUSH
58484: LD_STRING M
58486: NONEQUAL
58487: IFFALSE 58491
// exit ;
58489: GO 58557
// x := task [ 1 ] [ 2 ] ;
58491: LD_ADDR_VAR 0 5
58495: PUSH
58496: LD_VAR 0 7
58500: PUSH
58501: LD_INT 1
58503: ARRAY
58504: PUSH
58505: LD_INT 2
58507: ARRAY
58508: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58509: LD_ADDR_VAR 0 6
58513: PUSH
58514: LD_VAR 0 7
58518: PUSH
58519: LD_INT 1
58521: ARRAY
58522: PUSH
58523: LD_INT 3
58525: ARRAY
58526: ST_TO_ADDR
// if InArea ( x , y , area ) then
58527: LD_VAR 0 5
58531: PPUSH
58532: LD_VAR 0 6
58536: PPUSH
58537: LD_VAR 0 2
58541: PPUSH
58542: CALL_OW 309
58546: IFFALSE 58557
// ComStop ( unit ) ;
58548: LD_VAR 0 1
58552: PPUSH
58553: CALL_OW 141
// end ;
58557: LD_VAR 0 4
58561: RET
// export function Abs ( value ) ; begin
58562: LD_INT 0
58564: PPUSH
// result := value ;
58565: LD_ADDR_VAR 0 2
58569: PUSH
58570: LD_VAR 0 1
58574: ST_TO_ADDR
// if value < 0 then
58575: LD_VAR 0 1
58579: PUSH
58580: LD_INT 0
58582: LESS
58583: IFFALSE 58600
// result := value * - 1 ;
58585: LD_ADDR_VAR 0 2
58589: PUSH
58590: LD_VAR 0 1
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: MUL
58599: ST_TO_ADDR
// end ;
58600: LD_VAR 0 2
58604: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58605: LD_INT 0
58607: PPUSH
58608: PPUSH
58609: PPUSH
58610: PPUSH
58611: PPUSH
58612: PPUSH
58613: PPUSH
58614: PPUSH
// if not unit or not building then
58615: LD_VAR 0 1
58619: NOT
58620: PUSH
58621: LD_VAR 0 2
58625: NOT
58626: OR
58627: IFFALSE 58631
// exit ;
58629: GO 58857
// x := GetX ( building ) ;
58631: LD_ADDR_VAR 0 4
58635: PUSH
58636: LD_VAR 0 2
58640: PPUSH
58641: CALL_OW 250
58645: ST_TO_ADDR
// y := GetY ( building ) ;
58646: LD_ADDR_VAR 0 6
58650: PUSH
58651: LD_VAR 0 2
58655: PPUSH
58656: CALL_OW 251
58660: ST_TO_ADDR
// d := GetDir ( building ) ;
58661: LD_ADDR_VAR 0 8
58665: PUSH
58666: LD_VAR 0 2
58670: PPUSH
58671: CALL_OW 254
58675: ST_TO_ADDR
// r := 4 ;
58676: LD_ADDR_VAR 0 9
58680: PUSH
58681: LD_INT 4
58683: ST_TO_ADDR
// for i := 1 to 5 do
58684: LD_ADDR_VAR 0 10
58688: PUSH
58689: DOUBLE
58690: LD_INT 1
58692: DEC
58693: ST_TO_ADDR
58694: LD_INT 5
58696: PUSH
58697: FOR_TO
58698: IFFALSE 58855
// begin _x := ShiftX ( x , d , r + i ) ;
58700: LD_ADDR_VAR 0 5
58704: PUSH
58705: LD_VAR 0 4
58709: PPUSH
58710: LD_VAR 0 8
58714: PPUSH
58715: LD_VAR 0 9
58719: PUSH
58720: LD_VAR 0 10
58724: PLUS
58725: PPUSH
58726: CALL_OW 272
58730: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58731: LD_ADDR_VAR 0 7
58735: PUSH
58736: LD_VAR 0 6
58740: PPUSH
58741: LD_VAR 0 8
58745: PPUSH
58746: LD_VAR 0 9
58750: PUSH
58751: LD_VAR 0 10
58755: PLUS
58756: PPUSH
58757: CALL_OW 273
58761: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58762: LD_VAR 0 5
58766: PPUSH
58767: LD_VAR 0 7
58771: PPUSH
58772: CALL_OW 488
58776: PUSH
58777: LD_VAR 0 5
58781: PPUSH
58782: LD_VAR 0 7
58786: PPUSH
58787: CALL_OW 428
58791: PPUSH
58792: CALL_OW 247
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: IN
58807: NOT
58808: AND
58809: IFFALSE 58853
// begin ComMoveXY ( unit , _x , _y ) ;
58811: LD_VAR 0 1
58815: PPUSH
58816: LD_VAR 0 5
58820: PPUSH
58821: LD_VAR 0 7
58825: PPUSH
58826: CALL_OW 111
// result := [ _x , _y ] ;
58830: LD_ADDR_VAR 0 3
58834: PUSH
58835: LD_VAR 0 5
58839: PUSH
58840: LD_VAR 0 7
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: ST_TO_ADDR
// exit ;
58849: POP
58850: POP
58851: GO 58857
// end ; end ;
58853: GO 58697
58855: POP
58856: POP
// end ;
58857: LD_VAR 0 3
58861: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58862: LD_INT 0
58864: PPUSH
58865: PPUSH
58866: PPUSH
// result := 0 ;
58867: LD_ADDR_VAR 0 3
58871: PUSH
58872: LD_INT 0
58874: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58875: LD_VAR 0 1
58879: PUSH
58880: LD_INT 0
58882: LESS
58883: PUSH
58884: LD_VAR 0 1
58888: PUSH
58889: LD_INT 8
58891: GREATER
58892: OR
58893: PUSH
58894: LD_VAR 0 2
58898: PUSH
58899: LD_INT 0
58901: LESS
58902: OR
58903: PUSH
58904: LD_VAR 0 2
58908: PUSH
58909: LD_INT 8
58911: GREATER
58912: OR
58913: IFFALSE 58917
// exit ;
58915: GO 58992
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58917: LD_ADDR_VAR 0 4
58921: PUSH
58922: LD_INT 22
58924: PUSH
58925: LD_VAR 0 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PPUSH
58934: CALL_OW 69
58938: PUSH
58939: FOR_IN
58940: IFFALSE 58990
// begin un := UnitShoot ( i ) ;
58942: LD_ADDR_VAR 0 5
58946: PUSH
58947: LD_VAR 0 4
58951: PPUSH
58952: CALL_OW 504
58956: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58957: LD_VAR 0 5
58961: PPUSH
58962: CALL_OW 255
58966: PUSH
58967: LD_VAR 0 1
58971: EQUAL
58972: IFFALSE 58988
// begin result := un ;
58974: LD_ADDR_VAR 0 3
58978: PUSH
58979: LD_VAR 0 5
58983: ST_TO_ADDR
// exit ;
58984: POP
58985: POP
58986: GO 58992
// end ; end ;
58988: GO 58939
58990: POP
58991: POP
// end ;
58992: LD_VAR 0 3
58996: RET
// export function GetCargoBay ( units ) ; begin
58997: LD_INT 0
58999: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59000: LD_ADDR_VAR 0 2
59004: PUSH
59005: LD_VAR 0 1
59009: PPUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 34
59015: PUSH
59016: LD_INT 12
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 34
59025: PUSH
59026: LD_INT 51
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 34
59035: PUSH
59036: LD_INT 32
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 34
59045: PUSH
59046: LD_EXP 40
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: PPUSH
59062: CALL_OW 72
59066: ST_TO_ADDR
// end ;
59067: LD_VAR 0 2
59071: RET
