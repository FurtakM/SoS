// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 19869 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 19765 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 19885 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 24054 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 24054 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 29069 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 29069 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 29069 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 29069 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 24054 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 24054 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 24054 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 24054 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 24054 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 24054 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 24054 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 24054 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 24054 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 24054 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 24054 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 24054 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 24054 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 24054 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 24054 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 29069 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_INT 89
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: IN
3775: PUSH
3776: LD_EXP 3
3780: PPUSH
3781: CALL_OW 310
3785: PPUSH
3786: CALL_OW 264
3790: PUSH
3791: LD_INT 51
3793: PUSH
3794: LD_INT 12
3796: PUSH
3797: LD_INT 89
3799: PUSH
3800: LD_INT 32
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: IN
3809: OR
3810: AND
3811: IFFALSE 4021
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_EXP 2
3830: PPUSH
3831: CALL_OW 310
3835: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 310
3850: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3851: LD_VAR 0 2
3855: PPUSH
3856: CALL_OW 265
3860: PUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: CALL_OW 262
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_VAR 0 2
3878: PPUSH
3879: CALL_OW 264
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 271
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 248
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_STRING 14a_JMMVeh
3914: PPUSH
3915: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: CALL_OW 265
3928: PUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 262
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 264
3951: PUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 271
3961: PUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 248
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_STRING 14a_BurlakVeh
3982: PPUSH
3983: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3987: LD_EXP 2
3991: PPUSH
3992: LD_STRING 14a_JMM
3994: PPUSH
3995: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3999: LD_EXP 3
4003: PPUSH
4004: LD_STRING 14a_Burlak
4006: PPUSH
4007: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING %_cont
4016: PPUSH
4017: CALL_OW 340
// end ;
4021: PPOPN 3
4023: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4024: LD_INT 22
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 24
4039: PUSH
4040: LD_INT 950
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 69
4059: IFFALSE 4071
4061: GO 4063
4063: DISABLE
// YouLost ( FriendlyFire ) ;
4064: LD_STRING FriendlyFire
4066: PPUSH
4067: CALL_OW 104
4071: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4072: LD_EXP 3
4076: PPUSH
4077: CALL_OW 301
4081: IFFALSE 4093
4083: GO 4085
4085: DISABLE
// YouLost ( Burlak ) ;
4086: LD_STRING Burlak
4088: PPUSH
4089: CALL_OW 104
4093: END
// every 0 0$1 trigger IsDead ( JMM ) do
4094: LD_EXP 2
4098: PPUSH
4099: CALL_OW 301
4103: IFFALSE 4115
4105: GO 4107
4107: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4108: LD_STRING JMM
4110: PPUSH
4111: CALL_OW 104
4115: END
// every 0 0$1 do
4116: GO 4118
4118: DISABLE
// begin enable ;
4119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4120: LD_STRING updateTimer(
4122: PUSH
4123: LD_OWVAR 1
4127: STR
4128: PUSH
4129: LD_STRING );
4131: STR
4132: PPUSH
4133: CALL_OW 559
// end ;
4137: END
// export function SOS_MapStart ( ) ; begin
4138: LD_INT 0
4140: PPUSH
// if streamModeActive then
4141: LD_EXP 39
4145: IFFALSE 4154
// DefineStreamItems ( true ) ;
4147: LD_INT 1
4149: PPUSH
4150: CALL 5808 0 1
// UpdateFactoryWaypoints ( ) ;
4154: CALL 18669 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4158: CALL 18926 0 0
// end ;
4162: LD_VAR 0 1
4166: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4167: LD_INT 0
4169: PPUSH
// if p2 = 100 then
4170: LD_VAR 0 2
4174: PUSH
4175: LD_INT 100
4177: EQUAL
4178: IFFALSE 5181
// begin if not StreamModeActive then
4180: LD_EXP 39
4184: NOT
4185: IFFALSE 4195
// StreamModeActive := true ;
4187: LD_ADDR_EXP 39
4191: PUSH
4192: LD_INT 1
4194: ST_TO_ADDR
// if p3 = 0 then
4195: LD_VAR 0 3
4199: PUSH
4200: LD_INT 0
4202: EQUAL
4203: IFFALSE 4209
// InitStreamMode ;
4205: CALL 5344 0 0
// if p3 = 1 then
4209: LD_VAR 0 3
4213: PUSH
4214: LD_INT 1
4216: EQUAL
4217: IFFALSE 4227
// sRocket := true ;
4219: LD_ADDR_EXP 44
4223: PUSH
4224: LD_INT 1
4226: ST_TO_ADDR
// if p3 = 2 then
4227: LD_VAR 0 3
4231: PUSH
4232: LD_INT 2
4234: EQUAL
4235: IFFALSE 4245
// sSpeed := true ;
4237: LD_ADDR_EXP 43
4241: PUSH
4242: LD_INT 1
4244: ST_TO_ADDR
// if p3 = 3 then
4245: LD_VAR 0 3
4249: PUSH
4250: LD_INT 3
4252: EQUAL
4253: IFFALSE 4263
// sEngine := true ;
4255: LD_ADDR_EXP 45
4259: PUSH
4260: LD_INT 1
4262: ST_TO_ADDR
// if p3 = 4 then
4263: LD_VAR 0 3
4267: PUSH
4268: LD_INT 4
4270: EQUAL
4271: IFFALSE 4281
// sSpec := true ;
4273: LD_ADDR_EXP 42
4277: PUSH
4278: LD_INT 1
4280: ST_TO_ADDR
// if p3 = 5 then
4281: LD_VAR 0 3
4285: PUSH
4286: LD_INT 5
4288: EQUAL
4289: IFFALSE 4299
// sLevel := true ;
4291: LD_ADDR_EXP 46
4295: PUSH
4296: LD_INT 1
4298: ST_TO_ADDR
// if p3 = 6 then
4299: LD_VAR 0 3
4303: PUSH
4304: LD_INT 6
4306: EQUAL
4307: IFFALSE 4317
// sArmoury := true ;
4309: LD_ADDR_EXP 47
4313: PUSH
4314: LD_INT 1
4316: ST_TO_ADDR
// if p3 = 7 then
4317: LD_VAR 0 3
4321: PUSH
4322: LD_INT 7
4324: EQUAL
4325: IFFALSE 4335
// sRadar := true ;
4327: LD_ADDR_EXP 48
4331: PUSH
4332: LD_INT 1
4334: ST_TO_ADDR
// if p3 = 8 then
4335: LD_VAR 0 3
4339: PUSH
4340: LD_INT 8
4342: EQUAL
4343: IFFALSE 4353
// sBunker := true ;
4345: LD_ADDR_EXP 49
4349: PUSH
4350: LD_INT 1
4352: ST_TO_ADDR
// if p3 = 9 then
4353: LD_VAR 0 3
4357: PUSH
4358: LD_INT 9
4360: EQUAL
4361: IFFALSE 4371
// sHack := true ;
4363: LD_ADDR_EXP 50
4367: PUSH
4368: LD_INT 1
4370: ST_TO_ADDR
// if p3 = 10 then
4371: LD_VAR 0 3
4375: PUSH
4376: LD_INT 10
4378: EQUAL
4379: IFFALSE 4389
// sFire := true ;
4381: LD_ADDR_EXP 51
4385: PUSH
4386: LD_INT 1
4388: ST_TO_ADDR
// if p3 = 11 then
4389: LD_VAR 0 3
4393: PUSH
4394: LD_INT 11
4396: EQUAL
4397: IFFALSE 4407
// sRefresh := true ;
4399: LD_ADDR_EXP 52
4403: PUSH
4404: LD_INT 1
4406: ST_TO_ADDR
// if p3 = 12 then
4407: LD_VAR 0 3
4411: PUSH
4412: LD_INT 12
4414: EQUAL
4415: IFFALSE 4425
// sExp := true ;
4417: LD_ADDR_EXP 53
4421: PUSH
4422: LD_INT 1
4424: ST_TO_ADDR
// if p3 = 13 then
4425: LD_VAR 0 3
4429: PUSH
4430: LD_INT 13
4432: EQUAL
4433: IFFALSE 4443
// sDepot := true ;
4435: LD_ADDR_EXP 54
4439: PUSH
4440: LD_INT 1
4442: ST_TO_ADDR
// if p3 = 14 then
4443: LD_VAR 0 3
4447: PUSH
4448: LD_INT 14
4450: EQUAL
4451: IFFALSE 4461
// sFlag := true ;
4453: LD_ADDR_EXP 55
4457: PUSH
4458: LD_INT 1
4460: ST_TO_ADDR
// if p3 = 15 then
4461: LD_VAR 0 3
4465: PUSH
4466: LD_INT 15
4468: EQUAL
4469: IFFALSE 4479
// sKamikadze := true ;
4471: LD_ADDR_EXP 63
4475: PUSH
4476: LD_INT 1
4478: ST_TO_ADDR
// if p3 = 16 then
4479: LD_VAR 0 3
4483: PUSH
4484: LD_INT 16
4486: EQUAL
4487: IFFALSE 4497
// sTroll := true ;
4489: LD_ADDR_EXP 64
4493: PUSH
4494: LD_INT 1
4496: ST_TO_ADDR
// if p3 = 17 then
4497: LD_VAR 0 3
4501: PUSH
4502: LD_INT 17
4504: EQUAL
4505: IFFALSE 4515
// sSlow := true ;
4507: LD_ADDR_EXP 65
4511: PUSH
4512: LD_INT 1
4514: ST_TO_ADDR
// if p3 = 18 then
4515: LD_VAR 0 3
4519: PUSH
4520: LD_INT 18
4522: EQUAL
4523: IFFALSE 4533
// sLack := true ;
4525: LD_ADDR_EXP 66
4529: PUSH
4530: LD_INT 1
4532: ST_TO_ADDR
// if p3 = 19 then
4533: LD_VAR 0 3
4537: PUSH
4538: LD_INT 19
4540: EQUAL
4541: IFFALSE 4551
// sTank := true ;
4543: LD_ADDR_EXP 68
4547: PUSH
4548: LD_INT 1
4550: ST_TO_ADDR
// if p3 = 20 then
4551: LD_VAR 0 3
4555: PUSH
4556: LD_INT 20
4558: EQUAL
4559: IFFALSE 4569
// sRemote := true ;
4561: LD_ADDR_EXP 69
4565: PUSH
4566: LD_INT 1
4568: ST_TO_ADDR
// if p3 = 21 then
4569: LD_VAR 0 3
4573: PUSH
4574: LD_INT 21
4576: EQUAL
4577: IFFALSE 4587
// sPowell := true ;
4579: LD_ADDR_EXP 70
4583: PUSH
4584: LD_INT 1
4586: ST_TO_ADDR
// if p3 = 22 then
4587: LD_VAR 0 3
4591: PUSH
4592: LD_INT 22
4594: EQUAL
4595: IFFALSE 4605
// sTeleport := true ;
4597: LD_ADDR_EXP 73
4601: PUSH
4602: LD_INT 1
4604: ST_TO_ADDR
// if p3 = 23 then
4605: LD_VAR 0 3
4609: PUSH
4610: LD_INT 23
4612: EQUAL
4613: IFFALSE 4623
// sOilTower := true ;
4615: LD_ADDR_EXP 75
4619: PUSH
4620: LD_INT 1
4622: ST_TO_ADDR
// if p3 = 24 then
4623: LD_VAR 0 3
4627: PUSH
4628: LD_INT 24
4630: EQUAL
4631: IFFALSE 4641
// sShovel := true ;
4633: LD_ADDR_EXP 76
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// if p3 = 25 then
4641: LD_VAR 0 3
4645: PUSH
4646: LD_INT 25
4648: EQUAL
4649: IFFALSE 4659
// sSheik := true ;
4651: LD_ADDR_EXP 77
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// if p3 = 26 then
4659: LD_VAR 0 3
4663: PUSH
4664: LD_INT 26
4666: EQUAL
4667: IFFALSE 4677
// sEarthquake := true ;
4669: LD_ADDR_EXP 79
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// if p3 = 27 then
4677: LD_VAR 0 3
4681: PUSH
4682: LD_INT 27
4684: EQUAL
4685: IFFALSE 4695
// sAI := true ;
4687: LD_ADDR_EXP 80
4691: PUSH
4692: LD_INT 1
4694: ST_TO_ADDR
// if p3 = 28 then
4695: LD_VAR 0 3
4699: PUSH
4700: LD_INT 28
4702: EQUAL
4703: IFFALSE 4713
// sCargo := true ;
4705: LD_ADDR_EXP 83
4709: PUSH
4710: LD_INT 1
4712: ST_TO_ADDR
// if p3 = 29 then
4713: LD_VAR 0 3
4717: PUSH
4718: LD_INT 29
4720: EQUAL
4721: IFFALSE 4731
// sDLaser := true ;
4723: LD_ADDR_EXP 84
4727: PUSH
4728: LD_INT 1
4730: ST_TO_ADDR
// if p3 = 30 then
4731: LD_VAR 0 3
4735: PUSH
4736: LD_INT 30
4738: EQUAL
4739: IFFALSE 4749
// sExchange := true ;
4741: LD_ADDR_EXP 85
4745: PUSH
4746: LD_INT 1
4748: ST_TO_ADDR
// if p3 = 31 then
4749: LD_VAR 0 3
4753: PUSH
4754: LD_INT 31
4756: EQUAL
4757: IFFALSE 4767
// sFac := true ;
4759: LD_ADDR_EXP 86
4763: PUSH
4764: LD_INT 1
4766: ST_TO_ADDR
// if p3 = 32 then
4767: LD_VAR 0 3
4771: PUSH
4772: LD_INT 32
4774: EQUAL
4775: IFFALSE 4785
// sPower := true ;
4777: LD_ADDR_EXP 87
4781: PUSH
4782: LD_INT 1
4784: ST_TO_ADDR
// if p3 = 33 then
4785: LD_VAR 0 3
4789: PUSH
4790: LD_INT 33
4792: EQUAL
4793: IFFALSE 4803
// sRandom := true ;
4795: LD_ADDR_EXP 88
4799: PUSH
4800: LD_INT 1
4802: ST_TO_ADDR
// if p3 = 34 then
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 34
4810: EQUAL
4811: IFFALSE 4821
// sShield := true ;
4813: LD_ADDR_EXP 89
4817: PUSH
4818: LD_INT 1
4820: ST_TO_ADDR
// if p3 = 35 then
4821: LD_VAR 0 3
4825: PUSH
4826: LD_INT 35
4828: EQUAL
4829: IFFALSE 4839
// sTime := true ;
4831: LD_ADDR_EXP 90
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// if p3 = 36 then
4839: LD_VAR 0 3
4843: PUSH
4844: LD_INT 36
4846: EQUAL
4847: IFFALSE 4857
// sTools := true ;
4849: LD_ADDR_EXP 91
4853: PUSH
4854: LD_INT 1
4856: ST_TO_ADDR
// if p3 = 101 then
4857: LD_VAR 0 3
4861: PUSH
4862: LD_INT 101
4864: EQUAL
4865: IFFALSE 4875
// sSold := true ;
4867: LD_ADDR_EXP 56
4871: PUSH
4872: LD_INT 1
4874: ST_TO_ADDR
// if p3 = 102 then
4875: LD_VAR 0 3
4879: PUSH
4880: LD_INT 102
4882: EQUAL
4883: IFFALSE 4893
// sDiff := true ;
4885: LD_ADDR_EXP 57
4889: PUSH
4890: LD_INT 1
4892: ST_TO_ADDR
// if p3 = 103 then
4893: LD_VAR 0 3
4897: PUSH
4898: LD_INT 103
4900: EQUAL
4901: IFFALSE 4911
// sFog := true ;
4903: LD_ADDR_EXP 60
4907: PUSH
4908: LD_INT 1
4910: ST_TO_ADDR
// if p3 = 104 then
4911: LD_VAR 0 3
4915: PUSH
4916: LD_INT 104
4918: EQUAL
4919: IFFALSE 4929
// sReset := true ;
4921: LD_ADDR_EXP 61
4925: PUSH
4926: LD_INT 1
4928: ST_TO_ADDR
// if p3 = 105 then
4929: LD_VAR 0 3
4933: PUSH
4934: LD_INT 105
4936: EQUAL
4937: IFFALSE 4947
// sSun := true ;
4939: LD_ADDR_EXP 62
4943: PUSH
4944: LD_INT 1
4946: ST_TO_ADDR
// if p3 = 106 then
4947: LD_VAR 0 3
4951: PUSH
4952: LD_INT 106
4954: EQUAL
4955: IFFALSE 4965
// sTiger := true ;
4957: LD_ADDR_EXP 58
4961: PUSH
4962: LD_INT 1
4964: ST_TO_ADDR
// if p3 = 107 then
4965: LD_VAR 0 3
4969: PUSH
4970: LD_INT 107
4972: EQUAL
4973: IFFALSE 4983
// sBomb := true ;
4975: LD_ADDR_EXP 59
4979: PUSH
4980: LD_INT 1
4982: ST_TO_ADDR
// if p3 = 108 then
4983: LD_VAR 0 3
4987: PUSH
4988: LD_INT 108
4990: EQUAL
4991: IFFALSE 5001
// sWound := true ;
4993: LD_ADDR_EXP 67
4997: PUSH
4998: LD_INT 1
5000: ST_TO_ADDR
// if p3 = 109 then
5001: LD_VAR 0 3
5005: PUSH
5006: LD_INT 109
5008: EQUAL
5009: IFFALSE 5019
// sBetray := true ;
5011: LD_ADDR_EXP 71
5015: PUSH
5016: LD_INT 1
5018: ST_TO_ADDR
// if p3 = 110 then
5019: LD_VAR 0 3
5023: PUSH
5024: LD_INT 110
5026: EQUAL
5027: IFFALSE 5037
// sContamin := true ;
5029: LD_ADDR_EXP 72
5033: PUSH
5034: LD_INT 1
5036: ST_TO_ADDR
// if p3 = 111 then
5037: LD_VAR 0 3
5041: PUSH
5042: LD_INT 111
5044: EQUAL
5045: IFFALSE 5055
// sOil := true ;
5047: LD_ADDR_EXP 74
5051: PUSH
5052: LD_INT 1
5054: ST_TO_ADDR
// if p3 = 112 then
5055: LD_VAR 0 3
5059: PUSH
5060: LD_INT 112
5062: EQUAL
5063: IFFALSE 5073
// sStu := true ;
5065: LD_ADDR_EXP 78
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// if p3 = 113 then
5073: LD_VAR 0 3
5077: PUSH
5078: LD_INT 113
5080: EQUAL
5081: IFFALSE 5091
// sBazooka := true ;
5083: LD_ADDR_EXP 81
5087: PUSH
5088: LD_INT 1
5090: ST_TO_ADDR
// if p3 = 114 then
5091: LD_VAR 0 3
5095: PUSH
5096: LD_INT 114
5098: EQUAL
5099: IFFALSE 5109
// sMortar := true ;
5101: LD_ADDR_EXP 82
5105: PUSH
5106: LD_INT 1
5108: ST_TO_ADDR
// if p3 = 115 then
5109: LD_VAR 0 3
5113: PUSH
5114: LD_INT 115
5116: EQUAL
5117: IFFALSE 5127
// sRanger := true ;
5119: LD_ADDR_EXP 92
5123: PUSH
5124: LD_INT 1
5126: ST_TO_ADDR
// if p3 = 116 then
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 116
5134: EQUAL
5135: IFFALSE 5145
// sComputer := true ;
5137: LD_ADDR_EXP 93
5141: PUSH
5142: LD_INT 1
5144: ST_TO_ADDR
// if p3 = 117 then
5145: LD_VAR 0 3
5149: PUSH
5150: LD_INT 117
5152: EQUAL
5153: IFFALSE 5163
// s30 := true ;
5155: LD_ADDR_EXP 94
5159: PUSH
5160: LD_INT 1
5162: ST_TO_ADDR
// if p3 = 118 then
5163: LD_VAR 0 3
5167: PUSH
5168: LD_INT 118
5170: EQUAL
5171: IFFALSE 5181
// s60 := true ;
5173: LD_ADDR_EXP 95
5177: PUSH
5178: LD_INT 1
5180: ST_TO_ADDR
// end ; if p2 = 101 then
5181: LD_VAR 0 2
5185: PUSH
5186: LD_INT 101
5188: EQUAL
5189: IFFALSE 5317
// begin case p3 of 1 :
5191: LD_VAR 0 3
5195: PUSH
5196: LD_INT 1
5198: DOUBLE
5199: EQUAL
5200: IFTRUE 5204
5202: GO 5211
5204: POP
// hHackUnlimitedResources ; 2 :
5205: CALL 17415 0 0
5209: GO 5317
5211: LD_INT 2
5213: DOUBLE
5214: EQUAL
5215: IFTRUE 5219
5217: GO 5226
5219: POP
// hHackSetLevel10 ; 3 :
5220: CALL 17548 0 0
5224: GO 5317
5226: LD_INT 3
5228: DOUBLE
5229: EQUAL
5230: IFTRUE 5234
5232: GO 5241
5234: POP
// hHackSetLevel10YourUnits ; 4 :
5235: CALL 17633 0 0
5239: GO 5317
5241: LD_INT 4
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5256
5249: POP
// hHackInvincible ; 5 :
5250: CALL 18081 0 0
5254: GO 5317
5256: LD_INT 5
5258: DOUBLE
5259: EQUAL
5260: IFTRUE 5264
5262: GO 5271
5264: POP
// hHackInvisible ; 6 :
5265: CALL 18192 0 0
5269: GO 5317
5271: LD_INT 6
5273: DOUBLE
5274: EQUAL
5275: IFTRUE 5279
5277: GO 5286
5279: POP
// hHackChangeYourSide ; 7 :
5280: CALL 18249 0 0
5284: GO 5317
5286: LD_INT 7
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5294
5292: GO 5301
5294: POP
// hHackChangeUnitSide ; 8 :
5295: CALL 18291 0 0
5299: GO 5317
5301: LD_INT 8
5303: DOUBLE
5304: EQUAL
5305: IFTRUE 5309
5307: GO 5316
5309: POP
// hHackFog ; end ;
5310: CALL 18392 0 0
5314: GO 5317
5316: POP
// end ; end ;
5317: LD_VAR 0 7
5321: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5322: GO 5324
5324: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5325: LD_STRING initStreamRollete();
5327: PPUSH
5328: CALL_OW 559
// InitStreamMode ;
5332: CALL 5344 0 0
// DefineStreamItems ( false ) ;
5336: LD_INT 0
5338: PPUSH
5339: CALL 5808 0 1
// end ;
5343: END
// function InitStreamMode ; begin
5344: LD_INT 0
5346: PPUSH
// streamModeActive := false ;
5347: LD_ADDR_EXP 39
5351: PUSH
5352: LD_INT 0
5354: ST_TO_ADDR
// normalCounter := 36 ;
5355: LD_ADDR_EXP 40
5359: PUSH
5360: LD_INT 36
5362: ST_TO_ADDR
// hardcoreCounter := 18 ;
5363: LD_ADDR_EXP 41
5367: PUSH
5368: LD_INT 18
5370: ST_TO_ADDR
// sRocket := false ;
5371: LD_ADDR_EXP 44
5375: PUSH
5376: LD_INT 0
5378: ST_TO_ADDR
// sSpeed := false ;
5379: LD_ADDR_EXP 43
5383: PUSH
5384: LD_INT 0
5386: ST_TO_ADDR
// sEngine := false ;
5387: LD_ADDR_EXP 45
5391: PUSH
5392: LD_INT 0
5394: ST_TO_ADDR
// sSpec := false ;
5395: LD_ADDR_EXP 42
5399: PUSH
5400: LD_INT 0
5402: ST_TO_ADDR
// sLevel := false ;
5403: LD_ADDR_EXP 46
5407: PUSH
5408: LD_INT 0
5410: ST_TO_ADDR
// sArmoury := false ;
5411: LD_ADDR_EXP 47
5415: PUSH
5416: LD_INT 0
5418: ST_TO_ADDR
// sRadar := false ;
5419: LD_ADDR_EXP 48
5423: PUSH
5424: LD_INT 0
5426: ST_TO_ADDR
// sBunker := false ;
5427: LD_ADDR_EXP 49
5431: PUSH
5432: LD_INT 0
5434: ST_TO_ADDR
// sHack := false ;
5435: LD_ADDR_EXP 50
5439: PUSH
5440: LD_INT 0
5442: ST_TO_ADDR
// sFire := false ;
5443: LD_ADDR_EXP 51
5447: PUSH
5448: LD_INT 0
5450: ST_TO_ADDR
// sRefresh := false ;
5451: LD_ADDR_EXP 52
5455: PUSH
5456: LD_INT 0
5458: ST_TO_ADDR
// sExp := false ;
5459: LD_ADDR_EXP 53
5463: PUSH
5464: LD_INT 0
5466: ST_TO_ADDR
// sDepot := false ;
5467: LD_ADDR_EXP 54
5471: PUSH
5472: LD_INT 0
5474: ST_TO_ADDR
// sFlag := false ;
5475: LD_ADDR_EXP 55
5479: PUSH
5480: LD_INT 0
5482: ST_TO_ADDR
// sKamikadze := false ;
5483: LD_ADDR_EXP 63
5487: PUSH
5488: LD_INT 0
5490: ST_TO_ADDR
// sTroll := false ;
5491: LD_ADDR_EXP 64
5495: PUSH
5496: LD_INT 0
5498: ST_TO_ADDR
// sSlow := false ;
5499: LD_ADDR_EXP 65
5503: PUSH
5504: LD_INT 0
5506: ST_TO_ADDR
// sLack := false ;
5507: LD_ADDR_EXP 66
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
// sTank := false ;
5515: LD_ADDR_EXP 68
5519: PUSH
5520: LD_INT 0
5522: ST_TO_ADDR
// sRemote := false ;
5523: LD_ADDR_EXP 69
5527: PUSH
5528: LD_INT 0
5530: ST_TO_ADDR
// sPowell := false ;
5531: LD_ADDR_EXP 70
5535: PUSH
5536: LD_INT 0
5538: ST_TO_ADDR
// sTeleport := false ;
5539: LD_ADDR_EXP 73
5543: PUSH
5544: LD_INT 0
5546: ST_TO_ADDR
// sOilTower := false ;
5547: LD_ADDR_EXP 75
5551: PUSH
5552: LD_INT 0
5554: ST_TO_ADDR
// sShovel := false ;
5555: LD_ADDR_EXP 76
5559: PUSH
5560: LD_INT 0
5562: ST_TO_ADDR
// sSheik := false ;
5563: LD_ADDR_EXP 77
5567: PUSH
5568: LD_INT 0
5570: ST_TO_ADDR
// sEarthquake := false ;
5571: LD_ADDR_EXP 79
5575: PUSH
5576: LD_INT 0
5578: ST_TO_ADDR
// sAI := false ;
5579: LD_ADDR_EXP 80
5583: PUSH
5584: LD_INT 0
5586: ST_TO_ADDR
// sCargo := false ;
5587: LD_ADDR_EXP 83
5591: PUSH
5592: LD_INT 0
5594: ST_TO_ADDR
// sDLaser := false ;
5595: LD_ADDR_EXP 84
5599: PUSH
5600: LD_INT 0
5602: ST_TO_ADDR
// sExchange := false ;
5603: LD_ADDR_EXP 85
5607: PUSH
5608: LD_INT 0
5610: ST_TO_ADDR
// sFac := false ;
5611: LD_ADDR_EXP 86
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// sPower := false ;
5619: LD_ADDR_EXP 87
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// sRandom := false ;
5627: LD_ADDR_EXP 88
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// sShield := false ;
5635: LD_ADDR_EXP 89
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// sTime := false ;
5643: LD_ADDR_EXP 90
5647: PUSH
5648: LD_INT 0
5650: ST_TO_ADDR
// sTools := false ;
5651: LD_ADDR_EXP 91
5655: PUSH
5656: LD_INT 0
5658: ST_TO_ADDR
// sSold := false ;
5659: LD_ADDR_EXP 56
5663: PUSH
5664: LD_INT 0
5666: ST_TO_ADDR
// sDiff := false ;
5667: LD_ADDR_EXP 57
5671: PUSH
5672: LD_INT 0
5674: ST_TO_ADDR
// sFog := false ;
5675: LD_ADDR_EXP 60
5679: PUSH
5680: LD_INT 0
5682: ST_TO_ADDR
// sReset := false ;
5683: LD_ADDR_EXP 61
5687: PUSH
5688: LD_INT 0
5690: ST_TO_ADDR
// sSun := false ;
5691: LD_ADDR_EXP 62
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// sTiger := false ;
5699: LD_ADDR_EXP 58
5703: PUSH
5704: LD_INT 0
5706: ST_TO_ADDR
// sBomb := false ;
5707: LD_ADDR_EXP 59
5711: PUSH
5712: LD_INT 0
5714: ST_TO_ADDR
// sWound := false ;
5715: LD_ADDR_EXP 67
5719: PUSH
5720: LD_INT 0
5722: ST_TO_ADDR
// sBetray := false ;
5723: LD_ADDR_EXP 71
5727: PUSH
5728: LD_INT 0
5730: ST_TO_ADDR
// sContamin := false ;
5731: LD_ADDR_EXP 72
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// sOil := false ;
5739: LD_ADDR_EXP 74
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// sStu := false ;
5747: LD_ADDR_EXP 78
5751: PUSH
5752: LD_INT 0
5754: ST_TO_ADDR
// sBazooka := false ;
5755: LD_ADDR_EXP 81
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// sMortar := false ;
5763: LD_ADDR_EXP 82
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// sRanger := false ;
5771: LD_ADDR_EXP 92
5775: PUSH
5776: LD_INT 0
5778: ST_TO_ADDR
// sComputer := false ;
5779: LD_ADDR_EXP 93
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// s30 := false ;
5787: LD_ADDR_EXP 94
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// s60 := false ;
5795: LD_ADDR_EXP 95
5799: PUSH
5800: LD_INT 0
5802: ST_TO_ADDR
// end ;
5803: LD_VAR 0 1
5807: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5808: LD_INT 0
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
5814: PPUSH
5815: PPUSH
5816: PPUSH
// result := [ ] ;
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: EMPTY
5823: ST_TO_ADDR
// if campaign_id = 1 then
5824: LD_OWVAR 69
5828: PUSH
5829: LD_INT 1
5831: EQUAL
5832: IFFALSE 8998
// begin case mission_number of 1 :
5834: LD_OWVAR 70
5838: PUSH
5839: LD_INT 1
5841: DOUBLE
5842: EQUAL
5843: IFTRUE 5847
5845: GO 5923
5847: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5848: LD_ADDR_VAR 0 2
5852: PUSH
5853: LD_INT 2
5855: PUSH
5856: LD_INT 4
5858: PUSH
5859: LD_INT 11
5861: PUSH
5862: LD_INT 12
5864: PUSH
5865: LD_INT 15
5867: PUSH
5868: LD_INT 16
5870: PUSH
5871: LD_INT 22
5873: PUSH
5874: LD_INT 23
5876: PUSH
5877: LD_INT 26
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 101
5893: PUSH
5894: LD_INT 102
5896: PUSH
5897: LD_INT 106
5899: PUSH
5900: LD_INT 116
5902: PUSH
5903: LD_INT 117
5905: PUSH
5906: LD_INT 118
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: ST_TO_ADDR
5921: GO 8996
5923: LD_INT 2
5925: DOUBLE
5926: EQUAL
5927: IFTRUE 5931
5929: GO 6015
5931: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
5932: LD_ADDR_VAR 0 2
5936: PUSH
5937: LD_INT 2
5939: PUSH
5940: LD_INT 4
5942: PUSH
5943: LD_INT 11
5945: PUSH
5946: LD_INT 12
5948: PUSH
5949: LD_INT 15
5951: PUSH
5952: LD_INT 16
5954: PUSH
5955: LD_INT 22
5957: PUSH
5958: LD_INT 23
5960: PUSH
5961: LD_INT 26
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 101
5977: PUSH
5978: LD_INT 102
5980: PUSH
5981: LD_INT 105
5983: PUSH
5984: LD_INT 106
5986: PUSH
5987: LD_INT 108
5989: PUSH
5990: LD_INT 116
5992: PUSH
5993: LD_INT 117
5995: PUSH
5996: LD_INT 118
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 8996
6015: LD_INT 3
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6111
6023: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: LD_INT 5
6037: PUSH
6038: LD_INT 11
6040: PUSH
6041: LD_INT 12
6043: PUSH
6044: LD_INT 15
6046: PUSH
6047: LD_INT 16
6049: PUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 26
6055: PUSH
6056: LD_INT 36
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_INT 101
6073: PUSH
6074: LD_INT 102
6076: PUSH
6077: LD_INT 105
6079: PUSH
6080: LD_INT 106
6082: PUSH
6083: LD_INT 108
6085: PUSH
6086: LD_INT 116
6088: PUSH
6089: LD_INT 117
6091: PUSH
6092: LD_INT 118
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: ST_TO_ADDR
6109: GO 8996
6111: LD_INT 4
6113: DOUBLE
6114: EQUAL
6115: IFTRUE 6119
6117: GO 6215
6119: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6120: LD_ADDR_VAR 0 2
6124: PUSH
6125: LD_INT 2
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: LD_INT 5
6133: PUSH
6134: LD_INT 8
6136: PUSH
6137: LD_INT 11
6139: PUSH
6140: LD_INT 12
6142: PUSH
6143: LD_INT 15
6145: PUSH
6146: LD_INT 16
6148: PUSH
6149: LD_INT 22
6151: PUSH
6152: LD_INT 23
6154: PUSH
6155: LD_INT 26
6157: PUSH
6158: LD_INT 36
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 101
6177: PUSH
6178: LD_INT 102
6180: PUSH
6181: LD_INT 105
6183: PUSH
6184: LD_INT 106
6186: PUSH
6187: LD_INT 108
6189: PUSH
6190: LD_INT 116
6192: PUSH
6193: LD_INT 117
6195: PUSH
6196: LD_INT 118
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: ST_TO_ADDR
6213: GO 8996
6215: LD_INT 5
6217: DOUBLE
6218: EQUAL
6219: IFTRUE 6223
6221: GO 6335
6223: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6224: LD_ADDR_VAR 0 2
6228: PUSH
6229: LD_INT 2
6231: PUSH
6232: LD_INT 4
6234: PUSH
6235: LD_INT 5
6237: PUSH
6238: LD_INT 6
6240: PUSH
6241: LD_INT 8
6243: PUSH
6244: LD_INT 11
6246: PUSH
6247: LD_INT 12
6249: PUSH
6250: LD_INT 15
6252: PUSH
6253: LD_INT 16
6255: PUSH
6256: LD_INT 22
6258: PUSH
6259: LD_INT 23
6261: PUSH
6262: LD_INT 25
6264: PUSH
6265: LD_INT 26
6267: PUSH
6268: LD_INT 36
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 101
6289: PUSH
6290: LD_INT 102
6292: PUSH
6293: LD_INT 105
6295: PUSH
6296: LD_INT 106
6298: PUSH
6299: LD_INT 108
6301: PUSH
6302: LD_INT 109
6304: PUSH
6305: LD_INT 112
6307: PUSH
6308: LD_INT 116
6310: PUSH
6311: LD_INT 117
6313: PUSH
6314: LD_INT 118
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: ST_TO_ADDR
6333: GO 8996
6335: LD_INT 6
6337: DOUBLE
6338: EQUAL
6339: IFTRUE 6343
6341: GO 6475
6343: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6344: LD_ADDR_VAR 0 2
6348: PUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 4
6354: PUSH
6355: LD_INT 5
6357: PUSH
6358: LD_INT 6
6360: PUSH
6361: LD_INT 8
6363: PUSH
6364: LD_INT 11
6366: PUSH
6367: LD_INT 12
6369: PUSH
6370: LD_INT 15
6372: PUSH
6373: LD_INT 16
6375: PUSH
6376: LD_INT 20
6378: PUSH
6379: LD_INT 21
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 23
6387: PUSH
6388: LD_INT 25
6390: PUSH
6391: LD_INT 26
6393: PUSH
6394: LD_INT 30
6396: PUSH
6397: LD_INT 31
6399: PUSH
6400: LD_INT 32
6402: PUSH
6403: LD_INT 36
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 101
6429: PUSH
6430: LD_INT 102
6432: PUSH
6433: LD_INT 105
6435: PUSH
6436: LD_INT 106
6438: PUSH
6439: LD_INT 108
6441: PUSH
6442: LD_INT 109
6444: PUSH
6445: LD_INT 112
6447: PUSH
6448: LD_INT 116
6450: PUSH
6451: LD_INT 117
6453: PUSH
6454: LD_INT 118
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: ST_TO_ADDR
6473: GO 8996
6475: LD_INT 7
6477: DOUBLE
6478: EQUAL
6479: IFTRUE 6483
6481: GO 6595
6483: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6484: LD_ADDR_VAR 0 2
6488: PUSH
6489: LD_INT 2
6491: PUSH
6492: LD_INT 4
6494: PUSH
6495: LD_INT 5
6497: PUSH
6498: LD_INT 7
6500: PUSH
6501: LD_INT 11
6503: PUSH
6504: LD_INT 12
6506: PUSH
6507: LD_INT 15
6509: PUSH
6510: LD_INT 16
6512: PUSH
6513: LD_INT 20
6515: PUSH
6516: LD_INT 21
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 23
6524: PUSH
6525: LD_INT 25
6527: PUSH
6528: LD_INT 26
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 101
6549: PUSH
6550: LD_INT 102
6552: PUSH
6553: LD_INT 103
6555: PUSH
6556: LD_INT 105
6558: PUSH
6559: LD_INT 106
6561: PUSH
6562: LD_INT 108
6564: PUSH
6565: LD_INT 112
6567: PUSH
6568: LD_INT 116
6570: PUSH
6571: LD_INT 117
6573: PUSH
6574: LD_INT 118
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: ST_TO_ADDR
6593: GO 8996
6595: LD_INT 8
6597: DOUBLE
6598: EQUAL
6599: IFTRUE 6603
6601: GO 6743
6603: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6604: LD_ADDR_VAR 0 2
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 4
6614: PUSH
6615: LD_INT 5
6617: PUSH
6618: LD_INT 6
6620: PUSH
6621: LD_INT 7
6623: PUSH
6624: LD_INT 8
6626: PUSH
6627: LD_INT 11
6629: PUSH
6630: LD_INT 12
6632: PUSH
6633: LD_INT 15
6635: PUSH
6636: LD_INT 16
6638: PUSH
6639: LD_INT 20
6641: PUSH
6642: LD_INT 21
6644: PUSH
6645: LD_INT 22
6647: PUSH
6648: LD_INT 23
6650: PUSH
6651: LD_INT 25
6653: PUSH
6654: LD_INT 26
6656: PUSH
6657: LD_INT 30
6659: PUSH
6660: LD_INT 31
6662: PUSH
6663: LD_INT 32
6665: PUSH
6666: LD_INT 36
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 101
6693: PUSH
6694: LD_INT 102
6696: PUSH
6697: LD_INT 103
6699: PUSH
6700: LD_INT 105
6702: PUSH
6703: LD_INT 106
6705: PUSH
6706: LD_INT 108
6708: PUSH
6709: LD_INT 109
6711: PUSH
6712: LD_INT 112
6714: PUSH
6715: LD_INT 116
6717: PUSH
6718: LD_INT 117
6720: PUSH
6721: LD_INT 118
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: ST_TO_ADDR
6741: GO 8996
6743: LD_INT 9
6745: DOUBLE
6746: EQUAL
6747: IFTRUE 6751
6749: GO 6899
6751: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6752: LD_ADDR_VAR 0 2
6756: PUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 4
6762: PUSH
6763: LD_INT 5
6765: PUSH
6766: LD_INT 6
6768: PUSH
6769: LD_INT 7
6771: PUSH
6772: LD_INT 8
6774: PUSH
6775: LD_INT 11
6777: PUSH
6778: LD_INT 12
6780: PUSH
6781: LD_INT 15
6783: PUSH
6784: LD_INT 16
6786: PUSH
6787: LD_INT 20
6789: PUSH
6790: LD_INT 21
6792: PUSH
6793: LD_INT 22
6795: PUSH
6796: LD_INT 23
6798: PUSH
6799: LD_INT 25
6801: PUSH
6802: LD_INT 26
6804: PUSH
6805: LD_INT 28
6807: PUSH
6808: LD_INT 30
6810: PUSH
6811: LD_INT 31
6813: PUSH
6814: LD_INT 32
6816: PUSH
6817: LD_INT 36
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 101
6845: PUSH
6846: LD_INT 102
6848: PUSH
6849: LD_INT 103
6851: PUSH
6852: LD_INT 105
6854: PUSH
6855: LD_INT 106
6857: PUSH
6858: LD_INT 108
6860: PUSH
6861: LD_INT 109
6863: PUSH
6864: LD_INT 112
6866: PUSH
6867: LD_INT 114
6869: PUSH
6870: LD_INT 116
6872: PUSH
6873: LD_INT 117
6875: PUSH
6876: LD_INT 118
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: ST_TO_ADDR
6897: GO 8996
6899: LD_INT 10
6901: DOUBLE
6902: EQUAL
6903: IFTRUE 6907
6905: GO 7103
6907: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
6908: LD_ADDR_VAR 0 2
6912: PUSH
6913: LD_INT 2
6915: PUSH
6916: LD_INT 4
6918: PUSH
6919: LD_INT 5
6921: PUSH
6922: LD_INT 6
6924: PUSH
6925: LD_INT 7
6927: PUSH
6928: LD_INT 8
6930: PUSH
6931: LD_INT 9
6933: PUSH
6934: LD_INT 10
6936: PUSH
6937: LD_INT 11
6939: PUSH
6940: LD_INT 12
6942: PUSH
6943: LD_INT 13
6945: PUSH
6946: LD_INT 14
6948: PUSH
6949: LD_INT 15
6951: PUSH
6952: LD_INT 16
6954: PUSH
6955: LD_INT 17
6957: PUSH
6958: LD_INT 18
6960: PUSH
6961: LD_INT 19
6963: PUSH
6964: LD_INT 20
6966: PUSH
6967: LD_INT 21
6969: PUSH
6970: LD_INT 22
6972: PUSH
6973: LD_INT 23
6975: PUSH
6976: LD_INT 24
6978: PUSH
6979: LD_INT 25
6981: PUSH
6982: LD_INT 26
6984: PUSH
6985: LD_INT 28
6987: PUSH
6988: LD_INT 30
6990: PUSH
6991: LD_INT 31
6993: PUSH
6994: LD_INT 32
6996: PUSH
6997: LD_INT 36
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 101
7033: PUSH
7034: LD_INT 102
7036: PUSH
7037: LD_INT 103
7039: PUSH
7040: LD_INT 104
7042: PUSH
7043: LD_INT 105
7045: PUSH
7046: LD_INT 106
7048: PUSH
7049: LD_INT 107
7051: PUSH
7052: LD_INT 108
7054: PUSH
7055: LD_INT 109
7057: PUSH
7058: LD_INT 110
7060: PUSH
7061: LD_INT 111
7063: PUSH
7064: LD_INT 112
7066: PUSH
7067: LD_INT 114
7069: PUSH
7070: LD_INT 116
7072: PUSH
7073: LD_INT 117
7075: PUSH
7076: LD_INT 118
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 8996
7103: LD_INT 11
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7315
7111: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7112: LD_ADDR_VAR 0 2
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 3
7122: PUSH
7123: LD_INT 4
7125: PUSH
7126: LD_INT 5
7128: PUSH
7129: LD_INT 6
7131: PUSH
7132: LD_INT 7
7134: PUSH
7135: LD_INT 8
7137: PUSH
7138: LD_INT 9
7140: PUSH
7141: LD_INT 10
7143: PUSH
7144: LD_INT 11
7146: PUSH
7147: LD_INT 12
7149: PUSH
7150: LD_INT 13
7152: PUSH
7153: LD_INT 14
7155: PUSH
7156: LD_INT 15
7158: PUSH
7159: LD_INT 16
7161: PUSH
7162: LD_INT 17
7164: PUSH
7165: LD_INT 18
7167: PUSH
7168: LD_INT 19
7170: PUSH
7171: LD_INT 20
7173: PUSH
7174: LD_INT 21
7176: PUSH
7177: LD_INT 22
7179: PUSH
7180: LD_INT 23
7182: PUSH
7183: LD_INT 24
7185: PUSH
7186: LD_INT 25
7188: PUSH
7189: LD_INT 26
7191: PUSH
7192: LD_INT 28
7194: PUSH
7195: LD_INT 30
7197: PUSH
7198: LD_INT 31
7200: PUSH
7201: LD_INT 32
7203: PUSH
7204: LD_INT 34
7206: PUSH
7207: LD_INT 36
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 101
7245: PUSH
7246: LD_INT 102
7248: PUSH
7249: LD_INT 103
7251: PUSH
7252: LD_INT 104
7254: PUSH
7255: LD_INT 105
7257: PUSH
7258: LD_INT 106
7260: PUSH
7261: LD_INT 107
7263: PUSH
7264: LD_INT 108
7266: PUSH
7267: LD_INT 109
7269: PUSH
7270: LD_INT 110
7272: PUSH
7273: LD_INT 111
7275: PUSH
7276: LD_INT 112
7278: PUSH
7279: LD_INT 114
7281: PUSH
7282: LD_INT 116
7284: PUSH
7285: LD_INT 117
7287: PUSH
7288: LD_INT 118
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: ST_TO_ADDR
7313: GO 8996
7315: LD_INT 12
7317: DOUBLE
7318: EQUAL
7319: IFTRUE 7323
7321: GO 7543
7323: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7324: LD_ADDR_VAR 0 2
7328: PUSH
7329: LD_INT 1
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: LD_INT 4
7340: PUSH
7341: LD_INT 5
7343: PUSH
7344: LD_INT 6
7346: PUSH
7347: LD_INT 7
7349: PUSH
7350: LD_INT 8
7352: PUSH
7353: LD_INT 9
7355: PUSH
7356: LD_INT 10
7358: PUSH
7359: LD_INT 11
7361: PUSH
7362: LD_INT 12
7364: PUSH
7365: LD_INT 13
7367: PUSH
7368: LD_INT 14
7370: PUSH
7371: LD_INT 15
7373: PUSH
7374: LD_INT 16
7376: PUSH
7377: LD_INT 17
7379: PUSH
7380: LD_INT 18
7382: PUSH
7383: LD_INT 19
7385: PUSH
7386: LD_INT 20
7388: PUSH
7389: LD_INT 21
7391: PUSH
7392: LD_INT 22
7394: PUSH
7395: LD_INT 23
7397: PUSH
7398: LD_INT 24
7400: PUSH
7401: LD_INT 25
7403: PUSH
7404: LD_INT 26
7406: PUSH
7407: LD_INT 27
7409: PUSH
7410: LD_INT 28
7412: PUSH
7413: LD_INT 30
7415: PUSH
7416: LD_INT 31
7418: PUSH
7419: LD_INT 32
7421: PUSH
7422: LD_INT 33
7424: PUSH
7425: LD_INT 34
7427: PUSH
7428: LD_INT 36
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: PUSH
7467: LD_INT 101
7469: PUSH
7470: LD_INT 102
7472: PUSH
7473: LD_INT 103
7475: PUSH
7476: LD_INT 104
7478: PUSH
7479: LD_INT 105
7481: PUSH
7482: LD_INT 106
7484: PUSH
7485: LD_INT 107
7487: PUSH
7488: LD_INT 108
7490: PUSH
7491: LD_INT 109
7493: PUSH
7494: LD_INT 110
7496: PUSH
7497: LD_INT 111
7499: PUSH
7500: LD_INT 112
7502: PUSH
7503: LD_INT 113
7505: PUSH
7506: LD_INT 114
7508: PUSH
7509: LD_INT 116
7511: PUSH
7512: LD_INT 117
7514: PUSH
7515: LD_INT 118
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: ST_TO_ADDR
7541: GO 8996
7543: LD_INT 13
7545: DOUBLE
7546: EQUAL
7547: IFTRUE 7551
7549: GO 7759
7551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7552: LD_ADDR_VAR 0 2
7556: PUSH
7557: LD_INT 1
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: LD_INT 3
7565: PUSH
7566: LD_INT 4
7568: PUSH
7569: LD_INT 5
7571: PUSH
7572: LD_INT 8
7574: PUSH
7575: LD_INT 9
7577: PUSH
7578: LD_INT 10
7580: PUSH
7581: LD_INT 11
7583: PUSH
7584: LD_INT 12
7586: PUSH
7587: LD_INT 14
7589: PUSH
7590: LD_INT 15
7592: PUSH
7593: LD_INT 16
7595: PUSH
7596: LD_INT 17
7598: PUSH
7599: LD_INT 18
7601: PUSH
7602: LD_INT 19
7604: PUSH
7605: LD_INT 20
7607: PUSH
7608: LD_INT 21
7610: PUSH
7611: LD_INT 22
7613: PUSH
7614: LD_INT 23
7616: PUSH
7617: LD_INT 24
7619: PUSH
7620: LD_INT 25
7622: PUSH
7623: LD_INT 26
7625: PUSH
7626: LD_INT 27
7628: PUSH
7629: LD_INT 28
7631: PUSH
7632: LD_INT 30
7634: PUSH
7635: LD_INT 31
7637: PUSH
7638: LD_INT 32
7640: PUSH
7641: LD_INT 33
7643: PUSH
7644: LD_INT 34
7646: PUSH
7647: LD_INT 36
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 101
7685: PUSH
7686: LD_INT 102
7688: PUSH
7689: LD_INT 103
7691: PUSH
7692: LD_INT 104
7694: PUSH
7695: LD_INT 105
7697: PUSH
7698: LD_INT 106
7700: PUSH
7701: LD_INT 107
7703: PUSH
7704: LD_INT 108
7706: PUSH
7707: LD_INT 109
7709: PUSH
7710: LD_INT 110
7712: PUSH
7713: LD_INT 111
7715: PUSH
7716: LD_INT 112
7718: PUSH
7719: LD_INT 113
7721: PUSH
7722: LD_INT 114
7724: PUSH
7725: LD_INT 116
7727: PUSH
7728: LD_INT 117
7730: PUSH
7731: LD_INT 118
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: ST_TO_ADDR
7757: GO 8996
7759: LD_INT 14
7761: DOUBLE
7762: EQUAL
7763: IFTRUE 7767
7765: GO 7991
7767: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7768: LD_ADDR_VAR 0 2
7772: PUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: LD_INT 3
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: LD_INT 6
7790: PUSH
7791: LD_INT 7
7793: PUSH
7794: LD_INT 8
7796: PUSH
7797: LD_INT 9
7799: PUSH
7800: LD_INT 10
7802: PUSH
7803: LD_INT 11
7805: PUSH
7806: LD_INT 12
7808: PUSH
7809: LD_INT 13
7811: PUSH
7812: LD_INT 14
7814: PUSH
7815: LD_INT 15
7817: PUSH
7818: LD_INT 16
7820: PUSH
7821: LD_INT 17
7823: PUSH
7824: LD_INT 18
7826: PUSH
7827: LD_INT 19
7829: PUSH
7830: LD_INT 20
7832: PUSH
7833: LD_INT 21
7835: PUSH
7836: LD_INT 22
7838: PUSH
7839: LD_INT 23
7841: PUSH
7842: LD_INT 24
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: LD_INT 27
7853: PUSH
7854: LD_INT 28
7856: PUSH
7857: LD_INT 29
7859: PUSH
7860: LD_INT 30
7862: PUSH
7863: LD_INT 31
7865: PUSH
7866: LD_INT 32
7868: PUSH
7869: LD_INT 33
7871: PUSH
7872: LD_INT 34
7874: PUSH
7875: LD_INT 36
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 101
7917: PUSH
7918: LD_INT 102
7920: PUSH
7921: LD_INT 103
7923: PUSH
7924: LD_INT 104
7926: PUSH
7927: LD_INT 105
7929: PUSH
7930: LD_INT 106
7932: PUSH
7933: LD_INT 107
7935: PUSH
7936: LD_INT 108
7938: PUSH
7939: LD_INT 109
7941: PUSH
7942: LD_INT 110
7944: PUSH
7945: LD_INT 111
7947: PUSH
7948: LD_INT 112
7950: PUSH
7951: LD_INT 113
7953: PUSH
7954: LD_INT 114
7956: PUSH
7957: LD_INT 116
7959: PUSH
7960: LD_INT 117
7962: PUSH
7963: LD_INT 118
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: ST_TO_ADDR
7989: GO 8996
7991: LD_INT 15
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8223
7999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: LD_INT 1
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: LD_INT 3
8013: PUSH
8014: LD_INT 4
8016: PUSH
8017: LD_INT 5
8019: PUSH
8020: LD_INT 6
8022: PUSH
8023: LD_INT 7
8025: PUSH
8026: LD_INT 8
8028: PUSH
8029: LD_INT 9
8031: PUSH
8032: LD_INT 10
8034: PUSH
8035: LD_INT 11
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: LD_INT 13
8043: PUSH
8044: LD_INT 14
8046: PUSH
8047: LD_INT 15
8049: PUSH
8050: LD_INT 16
8052: PUSH
8053: LD_INT 17
8055: PUSH
8056: LD_INT 18
8058: PUSH
8059: LD_INT 19
8061: PUSH
8062: LD_INT 20
8064: PUSH
8065: LD_INT 21
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 23
8073: PUSH
8074: LD_INT 24
8076: PUSH
8077: LD_INT 25
8079: PUSH
8080: LD_INT 26
8082: PUSH
8083: LD_INT 27
8085: PUSH
8086: LD_INT 28
8088: PUSH
8089: LD_INT 29
8091: PUSH
8092: LD_INT 30
8094: PUSH
8095: LD_INT 31
8097: PUSH
8098: LD_INT 32
8100: PUSH
8101: LD_INT 33
8103: PUSH
8104: LD_INT 34
8106: PUSH
8107: LD_INT 36
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 101
8149: PUSH
8150: LD_INT 102
8152: PUSH
8153: LD_INT 103
8155: PUSH
8156: LD_INT 104
8158: PUSH
8159: LD_INT 105
8161: PUSH
8162: LD_INT 106
8164: PUSH
8165: LD_INT 107
8167: PUSH
8168: LD_INT 108
8170: PUSH
8171: LD_INT 109
8173: PUSH
8174: LD_INT 110
8176: PUSH
8177: LD_INT 111
8179: PUSH
8180: LD_INT 112
8182: PUSH
8183: LD_INT 113
8185: PUSH
8186: LD_INT 114
8188: PUSH
8189: LD_INT 116
8191: PUSH
8192: LD_INT 117
8194: PUSH
8195: LD_INT 118
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: ST_TO_ADDR
8221: GO 8996
8223: LD_INT 16
8225: DOUBLE
8226: EQUAL
8227: IFTRUE 8231
8229: GO 8367
8231: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8232: LD_ADDR_VAR 0 2
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: LD_INT 4
8242: PUSH
8243: LD_INT 5
8245: PUSH
8246: LD_INT 7
8248: PUSH
8249: LD_INT 11
8251: PUSH
8252: LD_INT 12
8254: PUSH
8255: LD_INT 15
8257: PUSH
8258: LD_INT 16
8260: PUSH
8261: LD_INT 20
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 22
8269: PUSH
8270: LD_INT 23
8272: PUSH
8273: LD_INT 25
8275: PUSH
8276: LD_INT 26
8278: PUSH
8279: LD_INT 30
8281: PUSH
8282: LD_INT 31
8284: PUSH
8285: LD_INT 32
8287: PUSH
8288: LD_INT 33
8290: PUSH
8291: LD_INT 34
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: PUSH
8315: LD_INT 101
8317: PUSH
8318: LD_INT 102
8320: PUSH
8321: LD_INT 103
8323: PUSH
8324: LD_INT 106
8326: PUSH
8327: LD_INT 108
8329: PUSH
8330: LD_INT 112
8332: PUSH
8333: LD_INT 113
8335: PUSH
8336: LD_INT 114
8338: PUSH
8339: LD_INT 116
8341: PUSH
8342: LD_INT 117
8344: PUSH
8345: LD_INT 118
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: ST_TO_ADDR
8365: GO 8996
8367: LD_INT 17
8369: DOUBLE
8370: EQUAL
8371: IFTRUE 8375
8373: GO 8599
8375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8376: LD_ADDR_VAR 0 2
8380: PUSH
8381: LD_INT 1
8383: PUSH
8384: LD_INT 2
8386: PUSH
8387: LD_INT 3
8389: PUSH
8390: LD_INT 4
8392: PUSH
8393: LD_INT 5
8395: PUSH
8396: LD_INT 6
8398: PUSH
8399: LD_INT 7
8401: PUSH
8402: LD_INT 8
8404: PUSH
8405: LD_INT 9
8407: PUSH
8408: LD_INT 10
8410: PUSH
8411: LD_INT 11
8413: PUSH
8414: LD_INT 12
8416: PUSH
8417: LD_INT 13
8419: PUSH
8420: LD_INT 14
8422: PUSH
8423: LD_INT 15
8425: PUSH
8426: LD_INT 16
8428: PUSH
8429: LD_INT 17
8431: PUSH
8432: LD_INT 18
8434: PUSH
8435: LD_INT 19
8437: PUSH
8438: LD_INT 20
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 22
8446: PUSH
8447: LD_INT 23
8449: PUSH
8450: LD_INT 24
8452: PUSH
8453: LD_INT 25
8455: PUSH
8456: LD_INT 26
8458: PUSH
8459: LD_INT 27
8461: PUSH
8462: LD_INT 28
8464: PUSH
8465: LD_INT 29
8467: PUSH
8468: LD_INT 30
8470: PUSH
8471: LD_INT 31
8473: PUSH
8474: LD_INT 32
8476: PUSH
8477: LD_INT 33
8479: PUSH
8480: LD_INT 34
8482: PUSH
8483: LD_INT 36
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 101
8525: PUSH
8526: LD_INT 102
8528: PUSH
8529: LD_INT 103
8531: PUSH
8532: LD_INT 104
8534: PUSH
8535: LD_INT 105
8537: PUSH
8538: LD_INT 106
8540: PUSH
8541: LD_INT 107
8543: PUSH
8544: LD_INT 108
8546: PUSH
8547: LD_INT 109
8549: PUSH
8550: LD_INT 110
8552: PUSH
8553: LD_INT 111
8555: PUSH
8556: LD_INT 112
8558: PUSH
8559: LD_INT 113
8561: PUSH
8562: LD_INT 114
8564: PUSH
8565: LD_INT 116
8567: PUSH
8568: LD_INT 117
8570: PUSH
8571: LD_INT 118
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: ST_TO_ADDR
8597: GO 8996
8599: LD_INT 18
8601: DOUBLE
8602: EQUAL
8603: IFTRUE 8607
8605: GO 8755
8607: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8608: LD_ADDR_VAR 0 2
8612: PUSH
8613: LD_INT 2
8615: PUSH
8616: LD_INT 4
8618: PUSH
8619: LD_INT 5
8621: PUSH
8622: LD_INT 7
8624: PUSH
8625: LD_INT 11
8627: PUSH
8628: LD_INT 12
8630: PUSH
8631: LD_INT 15
8633: PUSH
8634: LD_INT 16
8636: PUSH
8637: LD_INT 20
8639: PUSH
8640: LD_INT 21
8642: PUSH
8643: LD_INT 22
8645: PUSH
8646: LD_INT 23
8648: PUSH
8649: LD_INT 25
8651: PUSH
8652: LD_INT 26
8654: PUSH
8655: LD_INT 30
8657: PUSH
8658: LD_INT 31
8660: PUSH
8661: LD_INT 32
8663: PUSH
8664: LD_INT 33
8666: PUSH
8667: LD_INT 34
8669: PUSH
8670: LD_INT 35
8672: PUSH
8673: LD_INT 36
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 101
8701: PUSH
8702: LD_INT 102
8704: PUSH
8705: LD_INT 103
8707: PUSH
8708: LD_INT 106
8710: PUSH
8711: LD_INT 108
8713: PUSH
8714: LD_INT 112
8716: PUSH
8717: LD_INT 113
8719: PUSH
8720: LD_INT 114
8722: PUSH
8723: LD_INT 115
8725: PUSH
8726: LD_INT 116
8728: PUSH
8729: LD_INT 117
8731: PUSH
8732: LD_INT 118
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: ST_TO_ADDR
8753: GO 8996
8755: LD_INT 19
8757: DOUBLE
8758: EQUAL
8759: IFTRUE 8763
8761: GO 8995
8763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8764: LD_ADDR_VAR 0 2
8768: PUSH
8769: LD_INT 1
8771: PUSH
8772: LD_INT 2
8774: PUSH
8775: LD_INT 3
8777: PUSH
8778: LD_INT 4
8780: PUSH
8781: LD_INT 5
8783: PUSH
8784: LD_INT 6
8786: PUSH
8787: LD_INT 7
8789: PUSH
8790: LD_INT 8
8792: PUSH
8793: LD_INT 9
8795: PUSH
8796: LD_INT 10
8798: PUSH
8799: LD_INT 11
8801: PUSH
8802: LD_INT 12
8804: PUSH
8805: LD_INT 13
8807: PUSH
8808: LD_INT 14
8810: PUSH
8811: LD_INT 15
8813: PUSH
8814: LD_INT 16
8816: PUSH
8817: LD_INT 17
8819: PUSH
8820: LD_INT 18
8822: PUSH
8823: LD_INT 19
8825: PUSH
8826: LD_INT 20
8828: PUSH
8829: LD_INT 21
8831: PUSH
8832: LD_INT 22
8834: PUSH
8835: LD_INT 23
8837: PUSH
8838: LD_INT 24
8840: PUSH
8841: LD_INT 25
8843: PUSH
8844: LD_INT 26
8846: PUSH
8847: LD_INT 27
8849: PUSH
8850: LD_INT 28
8852: PUSH
8853: LD_INT 29
8855: PUSH
8856: LD_INT 30
8858: PUSH
8859: LD_INT 31
8861: PUSH
8862: LD_INT 32
8864: PUSH
8865: LD_INT 33
8867: PUSH
8868: LD_INT 34
8870: PUSH
8871: LD_INT 35
8873: PUSH
8874: LD_INT 36
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: PUSH
8915: LD_INT 101
8917: PUSH
8918: LD_INT 102
8920: PUSH
8921: LD_INT 103
8923: PUSH
8924: LD_INT 104
8926: PUSH
8927: LD_INT 105
8929: PUSH
8930: LD_INT 106
8932: PUSH
8933: LD_INT 107
8935: PUSH
8936: LD_INT 108
8938: PUSH
8939: LD_INT 109
8941: PUSH
8942: LD_INT 110
8944: PUSH
8945: LD_INT 111
8947: PUSH
8948: LD_INT 112
8950: PUSH
8951: LD_INT 113
8953: PUSH
8954: LD_INT 114
8956: PUSH
8957: LD_INT 115
8959: PUSH
8960: LD_INT 116
8962: PUSH
8963: LD_INT 117
8965: PUSH
8966: LD_INT 118
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: ST_TO_ADDR
8993: GO 8996
8995: POP
// end else
8996: GO 9227
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
8998: LD_ADDR_VAR 0 2
9002: PUSH
9003: LD_INT 1
9005: PUSH
9006: LD_INT 2
9008: PUSH
9009: LD_INT 3
9011: PUSH
9012: LD_INT 4
9014: PUSH
9015: LD_INT 5
9017: PUSH
9018: LD_INT 6
9020: PUSH
9021: LD_INT 7
9023: PUSH
9024: LD_INT 8
9026: PUSH
9027: LD_INT 9
9029: PUSH
9030: LD_INT 10
9032: PUSH
9033: LD_INT 11
9035: PUSH
9036: LD_INT 12
9038: PUSH
9039: LD_INT 13
9041: PUSH
9042: LD_INT 14
9044: PUSH
9045: LD_INT 15
9047: PUSH
9048: LD_INT 16
9050: PUSH
9051: LD_INT 17
9053: PUSH
9054: LD_INT 18
9056: PUSH
9057: LD_INT 19
9059: PUSH
9060: LD_INT 20
9062: PUSH
9063: LD_INT 21
9065: PUSH
9066: LD_INT 22
9068: PUSH
9069: LD_INT 23
9071: PUSH
9072: LD_INT 24
9074: PUSH
9075: LD_INT 25
9077: PUSH
9078: LD_INT 26
9080: PUSH
9081: LD_INT 27
9083: PUSH
9084: LD_INT 28
9086: PUSH
9087: LD_INT 29
9089: PUSH
9090: LD_INT 30
9092: PUSH
9093: LD_INT 31
9095: PUSH
9096: LD_INT 32
9098: PUSH
9099: LD_INT 33
9101: PUSH
9102: LD_INT 34
9104: PUSH
9105: LD_INT 35
9107: PUSH
9108: LD_INT 36
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 101
9151: PUSH
9152: LD_INT 102
9154: PUSH
9155: LD_INT 103
9157: PUSH
9158: LD_INT 104
9160: PUSH
9161: LD_INT 105
9163: PUSH
9164: LD_INT 106
9166: PUSH
9167: LD_INT 107
9169: PUSH
9170: LD_INT 108
9172: PUSH
9173: LD_INT 109
9175: PUSH
9176: LD_INT 110
9178: PUSH
9179: LD_INT 111
9181: PUSH
9182: LD_INT 112
9184: PUSH
9185: LD_INT 113
9187: PUSH
9188: LD_INT 114
9190: PUSH
9191: LD_INT 115
9193: PUSH
9194: LD_INT 116
9196: PUSH
9197: LD_INT 117
9199: PUSH
9200: LD_INT 118
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: ST_TO_ADDR
// if result then
9227: LD_VAR 0 2
9231: IFFALSE 10017
// begin normal :=  ;
9233: LD_ADDR_VAR 0 5
9237: PUSH
9238: LD_STRING 
9240: ST_TO_ADDR
// hardcore :=  ;
9241: LD_ADDR_VAR 0 6
9245: PUSH
9246: LD_STRING 
9248: ST_TO_ADDR
// active :=  ;
9249: LD_ADDR_VAR 0 7
9253: PUSH
9254: LD_STRING 
9256: ST_TO_ADDR
// for i = 1 to normalCounter do
9257: LD_ADDR_VAR 0 8
9261: PUSH
9262: DOUBLE
9263: LD_INT 1
9265: DEC
9266: ST_TO_ADDR
9267: LD_EXP 40
9271: PUSH
9272: FOR_TO
9273: IFFALSE 9374
// begin tmp := 0 ;
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: LD_STRING 0
9282: ST_TO_ADDR
// if result [ 1 ] then
9283: LD_VAR 0 2
9287: PUSH
9288: LD_INT 1
9290: ARRAY
9291: IFFALSE 9356
// if result [ 1 ] [ 1 ] = i then
9293: LD_VAR 0 2
9297: PUSH
9298: LD_INT 1
9300: ARRAY
9301: PUSH
9302: LD_INT 1
9304: ARRAY
9305: PUSH
9306: LD_VAR 0 8
9310: EQUAL
9311: IFFALSE 9356
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_VAR 0 2
9322: PPUSH
9323: LD_INT 1
9325: PPUSH
9326: LD_VAR 0 2
9330: PUSH
9331: LD_INT 1
9333: ARRAY
9334: PPUSH
9335: LD_INT 1
9337: PPUSH
9338: CALL_OW 3
9342: PPUSH
9343: CALL_OW 1
9347: ST_TO_ADDR
// tmp := 1 ;
9348: LD_ADDR_VAR 0 3
9352: PUSH
9353: LD_STRING 1
9355: ST_TO_ADDR
// end ; normal := normal & tmp ;
9356: LD_ADDR_VAR 0 5
9360: PUSH
9361: LD_VAR 0 5
9365: PUSH
9366: LD_VAR 0 3
9370: STR
9371: ST_TO_ADDR
// end ;
9372: GO 9272
9374: POP
9375: POP
// for i = 1 to hardcoreCounter do
9376: LD_ADDR_VAR 0 8
9380: PUSH
9381: DOUBLE
9382: LD_INT 1
9384: DEC
9385: ST_TO_ADDR
9386: LD_EXP 41
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9497
// begin tmp := 0 ;
9394: LD_ADDR_VAR 0 3
9398: PUSH
9399: LD_STRING 0
9401: ST_TO_ADDR
// if result [ 2 ] then
9402: LD_VAR 0 2
9406: PUSH
9407: LD_INT 2
9409: ARRAY
9410: IFFALSE 9479
// if result [ 2 ] [ 1 ] = 100 + i then
9412: LD_VAR 0 2
9416: PUSH
9417: LD_INT 2
9419: ARRAY
9420: PUSH
9421: LD_INT 1
9423: ARRAY
9424: PUSH
9425: LD_INT 100
9427: PUSH
9428: LD_VAR 0 8
9432: PLUS
9433: EQUAL
9434: IFFALSE 9479
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9436: LD_ADDR_VAR 0 2
9440: PUSH
9441: LD_VAR 0 2
9445: PPUSH
9446: LD_INT 2
9448: PPUSH
9449: LD_VAR 0 2
9453: PUSH
9454: LD_INT 2
9456: ARRAY
9457: PPUSH
9458: LD_INT 1
9460: PPUSH
9461: CALL_OW 3
9465: PPUSH
9466: CALL_OW 1
9470: ST_TO_ADDR
// tmp := 1 ;
9471: LD_ADDR_VAR 0 3
9475: PUSH
9476: LD_STRING 1
9478: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9479: LD_ADDR_VAR 0 6
9483: PUSH
9484: LD_VAR 0 6
9488: PUSH
9489: LD_VAR 0 3
9493: STR
9494: ST_TO_ADDR
// end ;
9495: GO 9391
9497: POP
9498: POP
// if isGameLoad then
9499: LD_VAR 0 1
9503: IFFALSE 9978
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9505: LD_ADDR_VAR 0 4
9509: PUSH
9510: LD_EXP 44
9514: PUSH
9515: LD_EXP 43
9519: PUSH
9520: LD_EXP 45
9524: PUSH
9525: LD_EXP 42
9529: PUSH
9530: LD_EXP 46
9534: PUSH
9535: LD_EXP 47
9539: PUSH
9540: LD_EXP 48
9544: PUSH
9545: LD_EXP 49
9549: PUSH
9550: LD_EXP 50
9554: PUSH
9555: LD_EXP 51
9559: PUSH
9560: LD_EXP 52
9564: PUSH
9565: LD_EXP 53
9569: PUSH
9570: LD_EXP 54
9574: PUSH
9575: LD_EXP 55
9579: PUSH
9580: LD_EXP 63
9584: PUSH
9585: LD_EXP 64
9589: PUSH
9590: LD_EXP 65
9594: PUSH
9595: LD_EXP 66
9599: PUSH
9600: LD_EXP 68
9604: PUSH
9605: LD_EXP 69
9609: PUSH
9610: LD_EXP 70
9614: PUSH
9615: LD_EXP 73
9619: PUSH
9620: LD_EXP 75
9624: PUSH
9625: LD_EXP 76
9629: PUSH
9630: LD_EXP 77
9634: PUSH
9635: LD_EXP 79
9639: PUSH
9640: LD_EXP 80
9644: PUSH
9645: LD_EXP 83
9649: PUSH
9650: LD_EXP 84
9654: PUSH
9655: LD_EXP 85
9659: PUSH
9660: LD_EXP 86
9664: PUSH
9665: LD_EXP 87
9669: PUSH
9670: LD_EXP 88
9674: PUSH
9675: LD_EXP 89
9679: PUSH
9680: LD_EXP 90
9684: PUSH
9685: LD_EXP 91
9689: PUSH
9690: LD_EXP 56
9694: PUSH
9695: LD_EXP 57
9699: PUSH
9700: LD_EXP 60
9704: PUSH
9705: LD_EXP 61
9709: PUSH
9710: LD_EXP 62
9714: PUSH
9715: LD_EXP 58
9719: PUSH
9720: LD_EXP 59
9724: PUSH
9725: LD_EXP 67
9729: PUSH
9730: LD_EXP 71
9734: PUSH
9735: LD_EXP 72
9739: PUSH
9740: LD_EXP 74
9744: PUSH
9745: LD_EXP 78
9749: PUSH
9750: LD_EXP 81
9754: PUSH
9755: LD_EXP 82
9759: PUSH
9760: LD_EXP 92
9764: PUSH
9765: LD_EXP 93
9769: PUSH
9770: LD_EXP 94
9774: PUSH
9775: LD_EXP 95
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: ST_TO_ADDR
// tmp :=  ;
9836: LD_ADDR_VAR 0 3
9840: PUSH
9841: LD_STRING 
9843: ST_TO_ADDR
// for i = 1 to normalCounter do
9844: LD_ADDR_VAR 0 8
9848: PUSH
9849: DOUBLE
9850: LD_INT 1
9852: DEC
9853: ST_TO_ADDR
9854: LD_EXP 40
9858: PUSH
9859: FOR_TO
9860: IFFALSE 9896
// begin if flags [ i ] then
9862: LD_VAR 0 4
9866: PUSH
9867: LD_VAR 0 8
9871: ARRAY
9872: IFFALSE 9894
// tmp := tmp & i & ; ;
9874: LD_ADDR_VAR 0 3
9878: PUSH
9879: LD_VAR 0 3
9883: PUSH
9884: LD_VAR 0 8
9888: STR
9889: PUSH
9890: LD_STRING ;
9892: STR
9893: ST_TO_ADDR
// end ;
9894: GO 9859
9896: POP
9897: POP
// for i = 1 to hardcoreCounter do
9898: LD_ADDR_VAR 0 8
9902: PUSH
9903: DOUBLE
9904: LD_INT 1
9906: DEC
9907: ST_TO_ADDR
9908: LD_EXP 41
9912: PUSH
9913: FOR_TO
9914: IFFALSE 9960
// begin if flags [ normalCounter + i ] then
9916: LD_VAR 0 4
9920: PUSH
9921: LD_EXP 40
9925: PUSH
9926: LD_VAR 0 8
9930: PLUS
9931: ARRAY
9932: IFFALSE 9958
// tmp := tmp & ( 100 + i ) & ; ;
9934: LD_ADDR_VAR 0 3
9938: PUSH
9939: LD_VAR 0 3
9943: PUSH
9944: LD_INT 100
9946: PUSH
9947: LD_VAR 0 8
9951: PLUS
9952: STR
9953: PUSH
9954: LD_STRING ;
9956: STR
9957: ST_TO_ADDR
// end ;
9958: GO 9913
9960: POP
9961: POP
// if tmp then
9962: LD_VAR 0 3
9966: IFFALSE 9978
// active := tmp ;
9968: LD_ADDR_VAR 0 7
9972: PUSH
9973: LD_VAR 0 3
9977: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
9978: LD_STRING getStreamItemsFromMission("
9980: PUSH
9981: LD_VAR 0 5
9985: STR
9986: PUSH
9987: LD_STRING ","
9989: STR
9990: PUSH
9991: LD_VAR 0 6
9995: STR
9996: PUSH
9997: LD_STRING ","
9999: STR
10000: PUSH
10001: LD_VAR 0 7
10005: STR
10006: PUSH
10007: LD_STRING ")
10009: STR
10010: PPUSH
10011: CALL_OW 559
// end else
10015: GO 10024
// ToLua ( getStreamItemsFromMission("","","") ) ;
10017: LD_STRING getStreamItemsFromMission("","","")
10019: PPUSH
10020: CALL_OW 559
// end ;
10024: LD_VAR 0 2
10028: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10029: LD_EXP 39
10033: PUSH
10034: LD_EXP 44
10038: AND
10039: IFFALSE 10163
10041: GO 10043
10043: DISABLE
10044: LD_INT 0
10046: PPUSH
10047: PPUSH
// begin enable ;
10048: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10049: LD_ADDR_VAR 0 2
10053: PUSH
10054: LD_INT 22
10056: PUSH
10057: LD_OWVAR 2
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: LD_INT 34
10071: PUSH
10072: LD_INT 7
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: LD_INT 34
10081: PUSH
10082: LD_INT 45
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 34
10091: PUSH
10092: LD_INT 28
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 34
10101: PUSH
10102: LD_INT 47
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// if not tmp then
10125: LD_VAR 0 2
10129: NOT
10130: IFFALSE 10134
// exit ;
10132: GO 10163
// for i in tmp do
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 2
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10161
// begin SetLives ( i , 0 ) ;
10147: LD_VAR 0 1
10151: PPUSH
10152: LD_INT 0
10154: PPUSH
10155: CALL_OW 234
// end ;
10159: GO 10144
10161: POP
10162: POP
// end ;
10163: PPOPN 2
10165: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10166: LD_EXP 39
10170: PUSH
10171: LD_EXP 45
10175: AND
10176: IFFALSE 10260
10178: GO 10180
10180: DISABLE
10181: LD_INT 0
10183: PPUSH
10184: PPUSH
// begin enable ;
10185: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10186: LD_ADDR_VAR 0 2
10190: PUSH
10191: LD_INT 22
10193: PUSH
10194: LD_OWVAR 2
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 32
10205: PUSH
10206: LD_INT 3
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 69
10221: ST_TO_ADDR
// if not tmp then
10222: LD_VAR 0 2
10226: NOT
10227: IFFALSE 10231
// exit ;
10229: GO 10260
// for i in tmp do
10231: LD_ADDR_VAR 0 1
10235: PUSH
10236: LD_VAR 0 2
10240: PUSH
10241: FOR_IN
10242: IFFALSE 10258
// begin SetLives ( i , 0 ) ;
10244: LD_VAR 0 1
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 234
// end ;
10256: GO 10241
10258: POP
10259: POP
// end ;
10260: PPOPN 2
10262: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10263: LD_EXP 39
10267: PUSH
10268: LD_EXP 42
10272: AND
10273: IFFALSE 10366
10275: GO 10277
10277: DISABLE
10278: LD_INT 0
10280: PPUSH
// begin enable ;
10281: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10282: LD_ADDR_VAR 0 1
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_OWVAR 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 25
10304: PUSH
10305: LD_INT 5
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 25
10314: PUSH
10315: LD_INT 9
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 8
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PPUSH
10342: CALL_OW 69
10346: PUSH
10347: FOR_IN
10348: IFFALSE 10364
// begin SetClass ( i , 1 ) ;
10350: LD_VAR 0 1
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 336
// end ;
10362: GO 10347
10364: POP
10365: POP
// end ;
10366: PPOPN 1
10368: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10369: LD_EXP 39
10373: PUSH
10374: LD_EXP 43
10378: AND
10379: PUSH
10380: LD_OWVAR 65
10384: PUSH
10385: LD_INT 7
10387: LESS
10388: AND
10389: IFFALSE 10403
10391: GO 10393
10393: DISABLE
// begin enable ;
10394: ENABLE
// game_speed := 7 ;
10395: LD_ADDR_OWVAR 65
10399: PUSH
10400: LD_INT 7
10402: ST_TO_ADDR
// end ;
10403: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10404: LD_EXP 39
10408: PUSH
10409: LD_EXP 46
10413: AND
10414: IFFALSE 10616
10416: GO 10418
10418: DISABLE
10419: LD_INT 0
10421: PPUSH
10422: PPUSH
10423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10424: LD_ADDR_VAR 0 3
10428: PUSH
10429: LD_INT 81
10431: PUSH
10432: LD_OWVAR 2
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 21
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 69
10459: ST_TO_ADDR
// if not tmp then
10460: LD_VAR 0 3
10464: NOT
10465: IFFALSE 10469
// exit ;
10467: GO 10616
// if tmp > 5 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 5
10476: GREATER
10477: IFFALSE 10489
// k := 5 else
10479: LD_ADDR_VAR 0 2
10483: PUSH
10484: LD_INT 5
10486: ST_TO_ADDR
10487: GO 10499
// k := tmp ;
10489: LD_ADDR_VAR 0 2
10493: PUSH
10494: LD_VAR 0 3
10498: ST_TO_ADDR
// for i := 1 to k do
10499: LD_ADDR_VAR 0 1
10503: PUSH
10504: DOUBLE
10505: LD_INT 1
10507: DEC
10508: ST_TO_ADDR
10509: LD_VAR 0 2
10513: PUSH
10514: FOR_TO
10515: IFFALSE 10614
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10517: LD_VAR 0 3
10521: PUSH
10522: LD_VAR 0 1
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 1
10532: PUSH
10533: LD_INT 4
10535: MOD
10536: PUSH
10537: LD_INT 1
10539: PLUS
10540: PPUSH
10541: CALL_OW 259
10545: PUSH
10546: LD_INT 10
10548: LESS
10549: IFFALSE 10612
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10551: LD_VAR 0 3
10555: PUSH
10556: LD_VAR 0 1
10560: ARRAY
10561: PPUSH
10562: LD_VAR 0 1
10566: PUSH
10567: LD_INT 4
10569: MOD
10570: PUSH
10571: LD_INT 1
10573: PLUS
10574: PPUSH
10575: LD_VAR 0 3
10579: PUSH
10580: LD_VAR 0 1
10584: ARRAY
10585: PPUSH
10586: LD_VAR 0 1
10590: PUSH
10591: LD_INT 4
10593: MOD
10594: PUSH
10595: LD_INT 1
10597: PLUS
10598: PPUSH
10599: CALL_OW 259
10603: PUSH
10604: LD_INT 1
10606: PLUS
10607: PPUSH
10608: CALL_OW 237
10612: GO 10514
10614: POP
10615: POP
// end ;
10616: PPOPN 3
10618: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10619: LD_EXP 39
10623: PUSH
10624: LD_EXP 47
10628: AND
10629: IFFALSE 10649
10631: GO 10633
10633: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10634: LD_INT 4
10636: PPUSH
10637: LD_OWVAR 2
10641: PPUSH
10642: LD_INT 0
10644: PPUSH
10645: CALL_OW 324
10649: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10650: LD_EXP 39
10654: PUSH
10655: LD_EXP 76
10659: AND
10660: IFFALSE 10680
10662: GO 10664
10664: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10665: LD_INT 19
10667: PPUSH
10668: LD_OWVAR 2
10672: PPUSH
10673: LD_INT 0
10675: PPUSH
10676: CALL_OW 324
10680: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10681: LD_EXP 39
10685: PUSH
10686: LD_EXP 48
10690: AND
10691: IFFALSE 10793
10693: GO 10695
10695: DISABLE
10696: LD_INT 0
10698: PPUSH
10699: PPUSH
// begin enable ;
10700: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: LD_INT 22
10708: PUSH
10709: LD_OWVAR 2
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 34
10723: PUSH
10724: LD_INT 11
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 34
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PPUSH
10750: CALL_OW 69
10754: ST_TO_ADDR
// if not tmp then
10755: LD_VAR 0 2
10759: NOT
10760: IFFALSE 10764
// exit ;
10762: GO 10793
// for i in tmp do
10764: LD_ADDR_VAR 0 1
10768: PUSH
10769: LD_VAR 0 2
10773: PUSH
10774: FOR_IN
10775: IFFALSE 10791
// begin SetLives ( i , 0 ) ;
10777: LD_VAR 0 1
10781: PPUSH
10782: LD_INT 0
10784: PPUSH
10785: CALL_OW 234
// end ;
10789: GO 10774
10791: POP
10792: POP
// end ;
10793: PPOPN 2
10795: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10796: LD_EXP 39
10800: PUSH
10801: LD_EXP 49
10805: AND
10806: IFFALSE 10826
10808: GO 10810
10810: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10811: LD_INT 32
10813: PPUSH
10814: LD_OWVAR 2
10818: PPUSH
10819: LD_INT 0
10821: PPUSH
10822: CALL_OW 324
10826: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10827: LD_EXP 39
10831: PUSH
10832: LD_EXP 50
10836: AND
10837: IFFALSE 11018
10839: GO 10841
10841: DISABLE
10842: LD_INT 0
10844: PPUSH
10845: PPUSH
10846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10847: LD_ADDR_VAR 0 2
10851: PUSH
10852: LD_INT 22
10854: PUSH
10855: LD_OWVAR 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 33
10866: PUSH
10867: LD_INT 3
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 69
10882: ST_TO_ADDR
// if not tmp then
10883: LD_VAR 0 2
10887: NOT
10888: IFFALSE 10892
// exit ;
10890: GO 11018
// side := 0 ;
10892: LD_ADDR_VAR 0 3
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// for i := 1 to 8 do
10900: LD_ADDR_VAR 0 1
10904: PUSH
10905: DOUBLE
10906: LD_INT 1
10908: DEC
10909: ST_TO_ADDR
10910: LD_INT 8
10912: PUSH
10913: FOR_TO
10914: IFFALSE 10962
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10916: LD_OWVAR 2
10920: PUSH
10921: LD_VAR 0 1
10925: NONEQUAL
10926: PUSH
10927: LD_OWVAR 2
10931: PPUSH
10932: LD_VAR 0 1
10936: PPUSH
10937: CALL_OW 81
10941: PUSH
10942: LD_INT 2
10944: EQUAL
10945: AND
10946: IFFALSE 10960
// begin side := i ;
10948: LD_ADDR_VAR 0 3
10952: PUSH
10953: LD_VAR 0 1
10957: ST_TO_ADDR
// break ;
10958: GO 10962
// end ;
10960: GO 10913
10962: POP
10963: POP
// if not side then
10964: LD_VAR 0 3
10968: NOT
10969: IFFALSE 10973
// exit ;
10971: GO 11018
// for i := 1 to tmp do
10973: LD_ADDR_VAR 0 1
10977: PUSH
10978: DOUBLE
10979: LD_INT 1
10981: DEC
10982: ST_TO_ADDR
10983: LD_VAR 0 2
10987: PUSH
10988: FOR_TO
10989: IFFALSE 11016
// if Prob ( 60 ) then
10991: LD_INT 60
10993: PPUSH
10994: CALL_OW 13
10998: IFFALSE 11014
// SetSide ( i , side ) ;
11000: LD_VAR 0 1
11004: PPUSH
11005: LD_VAR 0 3
11009: PPUSH
11010: CALL_OW 235
11014: GO 10988
11016: POP
11017: POP
// end ;
11018: PPOPN 3
11020: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11021: LD_EXP 39
11025: PUSH
11026: LD_EXP 52
11030: AND
11031: IFFALSE 11150
11033: GO 11035
11035: DISABLE
11036: LD_INT 0
11038: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11039: LD_ADDR_VAR 0 1
11043: PUSH
11044: LD_INT 22
11046: PUSH
11047: LD_OWVAR 2
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 21
11058: PUSH
11059: LD_INT 1
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: LD_INT 23
11071: PUSH
11072: LD_INT 0
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: PUSH
11093: FOR_IN
11094: IFFALSE 11148
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11096: LD_VAR 0 1
11100: PPUSH
11101: CALL_OW 257
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 4
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: IN
11124: IFFALSE 11146
// SetClass ( un , rand ( 1 , 4 ) ) ;
11126: LD_VAR 0 1
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: LD_INT 4
11136: PPUSH
11137: CALL_OW 12
11141: PPUSH
11142: CALL_OW 336
11146: GO 11093
11148: POP
11149: POP
// end ;
11150: PPOPN 1
11152: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11153: LD_EXP 39
11157: PUSH
11158: LD_EXP 51
11162: AND
11163: IFFALSE 11242
11165: GO 11167
11167: DISABLE
11168: LD_INT 0
11170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11171: LD_ADDR_VAR 0 1
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_OWVAR 2
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 21
11190: PUSH
11191: LD_INT 3
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 69
11206: ST_TO_ADDR
// if not tmp then
11207: LD_VAR 0 1
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 11242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11216: LD_VAR 0 1
11220: PUSH
11221: LD_INT 1
11223: PPUSH
11224: LD_VAR 0 1
11228: PPUSH
11229: CALL_OW 12
11233: ARRAY
11234: PPUSH
11235: LD_INT 100
11237: PPUSH
11238: CALL_OW 234
// end ;
11242: PPOPN 1
11244: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11245: LD_EXP 39
11249: PUSH
11250: LD_EXP 53
11254: AND
11255: IFFALSE 11353
11257: GO 11259
11259: DISABLE
11260: LD_INT 0
11262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11263: LD_ADDR_VAR 0 1
11267: PUSH
11268: LD_INT 22
11270: PUSH
11271: LD_OWVAR 2
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 21
11282: PUSH
11283: LD_INT 1
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PPUSH
11294: CALL_OW 69
11298: ST_TO_ADDR
// if not tmp then
11299: LD_VAR 0 1
11303: NOT
11304: IFFALSE 11308
// exit ;
11306: GO 11353
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11308: LD_VAR 0 1
11312: PUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_VAR 0 1
11320: PPUSH
11321: CALL_OW 12
11325: ARRAY
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: LD_INT 4
11332: PPUSH
11333: CALL_OW 12
11337: PPUSH
11338: LD_INT 3000
11340: PPUSH
11341: LD_INT 9000
11343: PPUSH
11344: CALL_OW 12
11348: PPUSH
11349: CALL_OW 492
// end ;
11353: PPOPN 1
11355: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11356: LD_EXP 39
11360: PUSH
11361: LD_EXP 54
11365: AND
11366: IFFALSE 11386
11368: GO 11370
11370: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11371: LD_INT 1
11373: PPUSH
11374: LD_OWVAR 2
11378: PPUSH
11379: LD_INT 0
11381: PPUSH
11382: CALL_OW 324
11386: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11387: LD_EXP 39
11391: PUSH
11392: LD_EXP 55
11396: AND
11397: IFFALSE 11480
11399: GO 11401
11401: DISABLE
11402: LD_INT 0
11404: PPUSH
11405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11406: LD_ADDR_VAR 0 2
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_OWVAR 2
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 21
11425: PUSH
11426: LD_INT 3
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 69
11441: ST_TO_ADDR
// if not tmp then
11442: LD_VAR 0 2
11446: NOT
11447: IFFALSE 11451
// exit ;
11449: GO 11480
// for i in tmp do
11451: LD_ADDR_VAR 0 1
11455: PUSH
11456: LD_VAR 0 2
11460: PUSH
11461: FOR_IN
11462: IFFALSE 11478
// SetBLevel ( i , 10 ) ;
11464: LD_VAR 0 1
11468: PPUSH
11469: LD_INT 10
11471: PPUSH
11472: CALL_OW 241
11476: GO 11461
11478: POP
11479: POP
// end ;
11480: PPOPN 2
11482: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11483: LD_EXP 39
11487: PUSH
11488: LD_EXP 56
11492: AND
11493: IFFALSE 11604
11495: GO 11497
11497: DISABLE
11498: LD_INT 0
11500: PPUSH
11501: PPUSH
11502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11503: LD_ADDR_VAR 0 3
11507: PUSH
11508: LD_INT 22
11510: PUSH
11511: LD_OWVAR 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 25
11522: PUSH
11523: LD_INT 1
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PPUSH
11534: CALL_OW 69
11538: ST_TO_ADDR
// if not tmp then
11539: LD_VAR 0 3
11543: NOT
11544: IFFALSE 11548
// exit ;
11546: GO 11604
// un := tmp [ rand ( 1 , tmp ) ] ;
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_VAR 0 3
11557: PUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: CALL_OW 12
11570: ARRAY
11571: ST_TO_ADDR
// if Crawls ( un ) then
11572: LD_VAR 0 2
11576: PPUSH
11577: CALL_OW 318
11581: IFFALSE 11592
// ComWalk ( un ) ;
11583: LD_VAR 0 2
11587: PPUSH
11588: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11592: LD_VAR 0 2
11596: PPUSH
11597: LD_INT 5
11599: PPUSH
11600: CALL_OW 336
// end ;
11604: PPOPN 3
11606: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11607: LD_EXP 39
11611: PUSH
11612: LD_EXP 57
11616: AND
11617: PUSH
11618: LD_OWVAR 67
11622: PUSH
11623: LD_INT 4
11625: LESS
11626: AND
11627: IFFALSE 11646
11629: GO 11631
11631: DISABLE
// begin Difficulty := Difficulty + 1 ;
11632: LD_ADDR_OWVAR 67
11636: PUSH
11637: LD_OWVAR 67
11641: PUSH
11642: LD_INT 1
11644: PLUS
11645: ST_TO_ADDR
// end ;
11646: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11647: LD_EXP 39
11651: PUSH
11652: LD_EXP 58
11656: AND
11657: IFFALSE 11760
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
// begin for i := 1 to 5 do
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: DOUBLE
11671: LD_INT 1
11673: DEC
11674: ST_TO_ADDR
11675: LD_INT 5
11677: PUSH
11678: FOR_TO
11679: IFFALSE 11758
// begin uc_nation := nation_nature ;
11681: LD_ADDR_OWVAR 21
11685: PUSH
11686: LD_INT 0
11688: ST_TO_ADDR
// uc_side := 0 ;
11689: LD_ADDR_OWVAR 20
11693: PUSH
11694: LD_INT 0
11696: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11697: LD_ADDR_OWVAR 29
11701: PUSH
11702: LD_INT 12
11704: PUSH
11705: LD_INT 12
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: ST_TO_ADDR
// hc_agressivity := 20 ;
11712: LD_ADDR_OWVAR 35
11716: PUSH
11717: LD_INT 20
11719: ST_TO_ADDR
// hc_class := class_tiger ;
11720: LD_ADDR_OWVAR 28
11724: PUSH
11725: LD_INT 14
11727: ST_TO_ADDR
// hc_gallery :=  ;
11728: LD_ADDR_OWVAR 33
11732: PUSH
11733: LD_STRING 
11735: ST_TO_ADDR
// hc_name :=  ;
11736: LD_ADDR_OWVAR 26
11740: PUSH
11741: LD_STRING 
11743: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11744: CALL_OW 44
11748: PPUSH
11749: LD_INT 0
11751: PPUSH
11752: CALL_OW 51
// end ;
11756: GO 11678
11758: POP
11759: POP
// end ;
11760: PPOPN 1
11762: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11763: LD_EXP 39
11767: PUSH
11768: LD_EXP 59
11772: AND
11773: IFFALSE 11782
11775: GO 11777
11777: DISABLE
// StreamSibBomb ;
11778: CALL 11783 0 0
11782: END
// export function StreamSibBomb ; var i , x , y ; begin
11783: LD_INT 0
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
// result := false ;
11789: LD_ADDR_VAR 0 1
11793: PUSH
11794: LD_INT 0
11796: ST_TO_ADDR
// for i := 1 to 16 do
11797: LD_ADDR_VAR 0 2
11801: PUSH
11802: DOUBLE
11803: LD_INT 1
11805: DEC
11806: ST_TO_ADDR
11807: LD_INT 16
11809: PUSH
11810: FOR_TO
11811: IFFALSE 12010
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11813: LD_ADDR_VAR 0 3
11817: PUSH
11818: LD_INT 10
11820: PUSH
11821: LD_INT 20
11823: PUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 40
11829: PUSH
11830: LD_INT 50
11832: PUSH
11833: LD_INT 60
11835: PUSH
11836: LD_INT 70
11838: PUSH
11839: LD_INT 80
11841: PUSH
11842: LD_INT 90
11844: PUSH
11845: LD_INT 100
11847: PUSH
11848: LD_INT 110
11850: PUSH
11851: LD_INT 120
11853: PUSH
11854: LD_INT 130
11856: PUSH
11857: LD_INT 140
11859: PUSH
11860: LD_INT 150
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 1
11882: PPUSH
11883: LD_INT 15
11885: PPUSH
11886: CALL_OW 12
11890: ARRAY
11891: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11892: LD_ADDR_VAR 0 4
11896: PUSH
11897: LD_INT 10
11899: PUSH
11900: LD_INT 20
11902: PUSH
11903: LD_INT 30
11905: PUSH
11906: LD_INT 40
11908: PUSH
11909: LD_INT 50
11911: PUSH
11912: LD_INT 60
11914: PUSH
11915: LD_INT 70
11917: PUSH
11918: LD_INT 80
11920: PUSH
11921: LD_INT 90
11923: PUSH
11924: LD_INT 100
11926: PUSH
11927: LD_INT 110
11929: PUSH
11930: LD_INT 120
11932: PUSH
11933: LD_INT 130
11935: PUSH
11936: LD_INT 140
11938: PUSH
11939: LD_INT 150
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 1
11961: PPUSH
11962: LD_INT 15
11964: PPUSH
11965: CALL_OW 12
11969: ARRAY
11970: ST_TO_ADDR
// if ValidHex ( x , y ) then
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: CALL_OW 488
11985: IFFALSE 12008
// begin result := [ x , y ] ;
11987: LD_ADDR_VAR 0 1
11991: PUSH
11992: LD_VAR 0 3
11996: PUSH
11997: LD_VAR 0 4
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: ST_TO_ADDR
// break ;
12006: GO 12010
// end ; end ;
12008: GO 11810
12010: POP
12011: POP
// if result then
12012: LD_VAR 0 1
12016: IFFALSE 12076
// begin ToLua ( playSibBomb() ) ;
12018: LD_STRING playSibBomb()
12020: PPUSH
12021: CALL_OW 559
// wait ( 0 0$14 ) ;
12025: LD_INT 490
12027: PPUSH
12028: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12032: LD_VAR 0 1
12036: PUSH
12037: LD_INT 1
12039: ARRAY
12040: PPUSH
12041: LD_VAR 0 1
12045: PUSH
12046: LD_INT 2
12048: ARRAY
12049: PPUSH
12050: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12054: LD_VAR 0 1
12058: PUSH
12059: LD_INT 1
12061: ARRAY
12062: PPUSH
12063: LD_VAR 0 1
12067: PUSH
12068: LD_INT 2
12070: ARRAY
12071: PPUSH
12072: CALL_OW 429
// end ; end ;
12076: LD_VAR 0 1
12080: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12081: LD_EXP 39
12085: PUSH
12086: LD_EXP 61
12090: AND
12091: IFFALSE 12103
12093: GO 12095
12095: DISABLE
// YouLost (  ) ;
12096: LD_STRING 
12098: PPUSH
12099: CALL_OW 104
12103: END
// every 0 0$1 trigger StreamModeActive and sFog do
12104: LD_EXP 39
12108: PUSH
12109: LD_EXP 60
12113: AND
12114: IFFALSE 12128
12116: GO 12118
12118: DISABLE
// FogOff ( your_side ) ;
12119: LD_OWVAR 2
12123: PPUSH
12124: CALL_OW 344
12128: END
// every 0 0$1 trigger StreamModeActive and sSun do
12129: LD_EXP 39
12133: PUSH
12134: LD_EXP 62
12138: AND
12139: IFFALSE 12167
12141: GO 12143
12143: DISABLE
// begin solar_recharge_percent := 0 ;
12144: LD_ADDR_OWVAR 79
12148: PUSH
12149: LD_INT 0
12151: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12152: LD_INT 10500
12154: PPUSH
12155: CALL_OW 67
// solar_recharge_percent := 100 ;
12159: LD_ADDR_OWVAR 79
12163: PUSH
12164: LD_INT 100
12166: ST_TO_ADDR
// end ;
12167: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12168: LD_EXP 39
12172: PUSH
12173: LD_EXP 63
12177: AND
12178: IFFALSE 12417
12180: GO 12182
12182: DISABLE
12183: LD_INT 0
12185: PPUSH
12186: PPUSH
12187: PPUSH
// begin tmp := [ ] ;
12188: LD_ADDR_VAR 0 3
12192: PUSH
12193: EMPTY
12194: ST_TO_ADDR
// for i := 1 to 6 do
12195: LD_ADDR_VAR 0 1
12199: PUSH
12200: DOUBLE
12201: LD_INT 1
12203: DEC
12204: ST_TO_ADDR
12205: LD_INT 6
12207: PUSH
12208: FOR_TO
12209: IFFALSE 12314
// begin uc_nation := nation_nature ;
12211: LD_ADDR_OWVAR 21
12215: PUSH
12216: LD_INT 0
12218: ST_TO_ADDR
// uc_side := 0 ;
12219: LD_ADDR_OWVAR 20
12223: PUSH
12224: LD_INT 0
12226: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12227: LD_ADDR_OWVAR 29
12231: PUSH
12232: LD_INT 12
12234: PUSH
12235: LD_INT 12
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: ST_TO_ADDR
// hc_agressivity := 20 ;
12242: LD_ADDR_OWVAR 35
12246: PUSH
12247: LD_INT 20
12249: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12250: LD_ADDR_OWVAR 28
12254: PUSH
12255: LD_INT 17
12257: ST_TO_ADDR
// hc_gallery :=  ;
12258: LD_ADDR_OWVAR 33
12262: PUSH
12263: LD_STRING 
12265: ST_TO_ADDR
// hc_name :=  ;
12266: LD_ADDR_OWVAR 26
12270: PUSH
12271: LD_STRING 
12273: ST_TO_ADDR
// un := CreateHuman ;
12274: LD_ADDR_VAR 0 2
12278: PUSH
12279: CALL_OW 44
12283: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12284: LD_VAR 0 2
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 51
// tmp := tmp ^ un ;
12296: LD_ADDR_VAR 0 3
12300: PUSH
12301: LD_VAR 0 3
12305: PUSH
12306: LD_VAR 0 2
12310: ADD
12311: ST_TO_ADDR
// end ;
12312: GO 12208
12314: POP
12315: POP
// repeat wait ( 0 0$1 ) ;
12316: LD_INT 35
12318: PPUSH
12319: CALL_OW 67
// for un in tmp do
12323: LD_ADDR_VAR 0 2
12327: PUSH
12328: LD_VAR 0 3
12332: PUSH
12333: FOR_IN
12334: IFFALSE 12408
// begin if IsDead ( un ) then
12336: LD_VAR 0 2
12340: PPUSH
12341: CALL_OW 301
12345: IFFALSE 12365
// begin tmp := tmp diff un ;
12347: LD_ADDR_VAR 0 3
12351: PUSH
12352: LD_VAR 0 3
12356: PUSH
12357: LD_VAR 0 2
12361: DIFF
12362: ST_TO_ADDR
// continue ;
12363: GO 12333
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12365: LD_VAR 0 2
12369: PPUSH
12370: LD_INT 3
12372: PUSH
12373: LD_INT 22
12375: PUSH
12376: LD_INT 0
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: PPUSH
12392: LD_VAR 0 2
12396: PPUSH
12397: CALL_OW 74
12401: PPUSH
12402: CALL_OW 115
// end ;
12406: GO 12333
12408: POP
12409: POP
// until not tmp ;
12410: LD_VAR 0 3
12414: NOT
12415: IFFALSE 12316
// end ;
12417: PPOPN 3
12419: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12420: LD_EXP 39
12424: PUSH
12425: LD_EXP 64
12429: AND
12430: IFFALSE 12484
12432: GO 12434
12434: DISABLE
// begin ToLua ( displayTroll(); ) ;
12435: LD_STRING displayTroll();
12437: PPUSH
12438: CALL_OW 559
// wait ( 3 3$00 ) ;
12442: LD_INT 6300
12444: PPUSH
12445: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12449: LD_STRING hideTroll();
12451: PPUSH
12452: CALL_OW 559
// wait ( 1 1$00 ) ;
12456: LD_INT 2100
12458: PPUSH
12459: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12463: LD_STRING displayTroll();
12465: PPUSH
12466: CALL_OW 559
// wait ( 1 1$00 ) ;
12470: LD_INT 2100
12472: PPUSH
12473: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12477: LD_STRING hideTroll();
12479: PPUSH
12480: CALL_OW 559
// end ;
12484: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12485: LD_EXP 39
12489: PUSH
12490: LD_EXP 65
12494: AND
12495: IFFALSE 12558
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
// begin p := 0 ;
12503: LD_ADDR_VAR 0 1
12507: PUSH
12508: LD_INT 0
12510: ST_TO_ADDR
// repeat game_speed := 1 ;
12511: LD_ADDR_OWVAR 65
12515: PUSH
12516: LD_INT 1
12518: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12519: LD_INT 35
12521: PPUSH
12522: CALL_OW 67
// p := p + 1 ;
12526: LD_ADDR_VAR 0 1
12530: PUSH
12531: LD_VAR 0 1
12535: PUSH
12536: LD_INT 1
12538: PLUS
12539: ST_TO_ADDR
// until p >= 60 ;
12540: LD_VAR 0 1
12544: PUSH
12545: LD_INT 60
12547: GREATEREQUAL
12548: IFFALSE 12511
// game_speed := 4 ;
12550: LD_ADDR_OWVAR 65
12554: PUSH
12555: LD_INT 4
12557: ST_TO_ADDR
// end ;
12558: PPOPN 1
12560: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12561: LD_EXP 39
12565: PUSH
12566: LD_EXP 66
12570: AND
12571: IFFALSE 12717
12573: GO 12575
12575: DISABLE
12576: LD_INT 0
12578: PPUSH
12579: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12580: LD_ADDR_VAR 0 1
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_OWVAR 2
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 2
12599: PUSH
12600: LD_INT 30
12602: PUSH
12603: LD_INT 0
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: LD_INT 1
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: ST_TO_ADDR
// if not depot then
12634: LD_VAR 0 1
12638: NOT
12639: IFFALSE 12643
// exit ;
12641: GO 12717
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12643: LD_ADDR_VAR 0 2
12647: PUSH
12648: LD_VAR 0 1
12652: PUSH
12653: LD_INT 1
12655: PPUSH
12656: LD_VAR 0 1
12660: PPUSH
12661: CALL_OW 12
12665: ARRAY
12666: PPUSH
12667: CALL_OW 274
12671: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12672: LD_VAR 0 2
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12687: LD_VAR 0 2
12691: PPUSH
12692: LD_INT 2
12694: PPUSH
12695: LD_INT 0
12697: PPUSH
12698: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12702: LD_VAR 0 2
12706: PPUSH
12707: LD_INT 3
12709: PPUSH
12710: LD_INT 0
12712: PPUSH
12713: CALL_OW 277
// end ;
12717: PPOPN 2
12719: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12720: LD_EXP 39
12724: PUSH
12725: LD_EXP 67
12729: AND
12730: IFFALSE 12827
12732: GO 12734
12734: DISABLE
12735: LD_INT 0
12737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12738: LD_ADDR_VAR 0 1
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_OWVAR 2
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: LD_INT 23
12770: PUSH
12771: LD_INT 0
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: ST_TO_ADDR
// if not tmp then
12792: LD_VAR 0 1
12796: NOT
12797: IFFALSE 12801
// exit ;
12799: GO 12827
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12801: LD_VAR 0 1
12805: PUSH
12806: LD_INT 1
12808: PPUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 12
12818: ARRAY
12819: PPUSH
12820: LD_INT 200
12822: PPUSH
12823: CALL_OW 234
// end ;
12827: PPOPN 1
12829: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12830: LD_EXP 39
12834: PUSH
12835: LD_EXP 68
12839: AND
12840: IFFALSE 12919
12842: GO 12844
12844: DISABLE
12845: LD_INT 0
12847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12848: LD_ADDR_VAR 0 1
12852: PUSH
12853: LD_INT 22
12855: PUSH
12856: LD_OWVAR 2
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 21
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PPUSH
12879: CALL_OW 69
12883: ST_TO_ADDR
// if not tmp then
12884: LD_VAR 0 1
12888: NOT
12889: IFFALSE 12893
// exit ;
12891: GO 12919
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12893: LD_VAR 0 1
12897: PUSH
12898: LD_INT 1
12900: PPUSH
12901: LD_VAR 0 1
12905: PPUSH
12906: CALL_OW 12
12910: ARRAY
12911: PPUSH
12912: LD_INT 60
12914: PPUSH
12915: CALL_OW 234
// end ;
12919: PPOPN 1
12921: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12922: LD_EXP 39
12926: PUSH
12927: LD_EXP 69
12931: AND
12932: IFFALSE 13031
12934: GO 12936
12936: DISABLE
12937: LD_INT 0
12939: PPUSH
12940: PPUSH
// begin enable ;
12941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12942: LD_ADDR_VAR 0 1
12946: PUSH
12947: LD_INT 22
12949: PUSH
12950: LD_OWVAR 2
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 61
12961: PUSH
12962: EMPTY
12963: LIST
12964: PUSH
12965: LD_INT 33
12967: PUSH
12968: LD_INT 2
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: PPUSH
12980: CALL_OW 69
12984: ST_TO_ADDR
// if not tmp then
12985: LD_VAR 0 1
12989: NOT
12990: IFFALSE 12994
// exit ;
12992: GO 13031
// for i in tmp do
12994: LD_ADDR_VAR 0 2
12998: PUSH
12999: LD_VAR 0 1
13003: PUSH
13004: FOR_IN
13005: IFFALSE 13029
// if IsControledBy ( i ) then
13007: LD_VAR 0 2
13011: PPUSH
13012: CALL_OW 312
13016: IFFALSE 13027
// ComUnlink ( i ) ;
13018: LD_VAR 0 2
13022: PPUSH
13023: CALL_OW 136
13027: GO 13004
13029: POP
13030: POP
// end ;
13031: PPOPN 2
13033: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13034: LD_EXP 39
13038: PUSH
13039: LD_EXP 70
13043: AND
13044: IFFALSE 13184
13046: GO 13048
13048: DISABLE
13049: LD_INT 0
13051: PPUSH
13052: PPUSH
// begin ToLua ( displayPowell(); ) ;
13053: LD_STRING displayPowell();
13055: PPUSH
13056: CALL_OW 559
// uc_side := 0 ;
13060: LD_ADDR_OWVAR 20
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// uc_nation := 2 ;
13068: LD_ADDR_OWVAR 21
13072: PUSH
13073: LD_INT 2
13075: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13076: LD_ADDR_OWVAR 37
13080: PUSH
13081: LD_INT 14
13083: ST_TO_ADDR
// vc_engine := engine_siberite ;
13084: LD_ADDR_OWVAR 39
13088: PUSH
13089: LD_INT 3
13091: ST_TO_ADDR
// vc_control := control_apeman ;
13092: LD_ADDR_OWVAR 38
13096: PUSH
13097: LD_INT 5
13099: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13100: LD_ADDR_OWVAR 40
13104: PUSH
13105: LD_INT 29
13107: ST_TO_ADDR
// un := CreateVehicle ;
13108: LD_ADDR_VAR 0 2
13112: PUSH
13113: CALL_OW 45
13117: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13118: LD_VAR 0 2
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13130: LD_INT 35
13132: PPUSH
13133: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13137: LD_VAR 0 2
13141: PPUSH
13142: LD_INT 22
13144: PUSH
13145: LD_OWVAR 2
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 69
13158: PPUSH
13159: LD_VAR 0 2
13163: PPUSH
13164: CALL_OW 74
13168: PPUSH
13169: CALL_OW 115
// until IsDead ( un ) ;
13173: LD_VAR 0 2
13177: PPUSH
13178: CALL_OW 301
13182: IFFALSE 13130
// end ;
13184: PPOPN 2
13186: END
// every 0 0$1 trigger StreamModeActive and sStu do
13187: LD_EXP 39
13191: PUSH
13192: LD_EXP 78
13196: AND
13197: IFFALSE 13213
13199: GO 13201
13201: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13202: LD_STRING displayStucuk();
13204: PPUSH
13205: CALL_OW 559
// ResetFog ;
13209: CALL_OW 335
// end ;
13213: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13214: LD_EXP 39
13218: PUSH
13219: LD_EXP 71
13223: AND
13224: IFFALSE 13365
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
13232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13233: LD_ADDR_VAR 0 2
13237: PUSH
13238: LD_INT 22
13240: PUSH
13241: LD_OWVAR 2
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 21
13252: PUSH
13253: LD_INT 1
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: ST_TO_ADDR
// if not tmp then
13269: LD_VAR 0 2
13273: NOT
13274: IFFALSE 13278
// exit ;
13276: GO 13365
// un := tmp [ rand ( 1 , tmp ) ] ;
13278: LD_ADDR_VAR 0 1
13282: PUSH
13283: LD_VAR 0 2
13287: PUSH
13288: LD_INT 1
13290: PPUSH
13291: LD_VAR 0 2
13295: PPUSH
13296: CALL_OW 12
13300: ARRAY
13301: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13302: LD_VAR 0 1
13306: PPUSH
13307: LD_INT 0
13309: PPUSH
13310: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13314: LD_VAR 0 1
13318: PPUSH
13319: LD_OWVAR 3
13323: PUSH
13324: LD_VAR 0 1
13328: DIFF
13329: PPUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL_OW 74
13339: PPUSH
13340: CALL_OW 115
// wait ( 0 0$20 ) ;
13344: LD_INT 700
13346: PPUSH
13347: CALL_OW 67
// SetSide ( un , your_side ) ;
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_OWVAR 2
13360: PPUSH
13361: CALL_OW 235
// end ;
13365: PPOPN 2
13367: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13368: LD_EXP 39
13372: PUSH
13373: LD_EXP 72
13377: AND
13378: IFFALSE 13484
13380: GO 13382
13382: DISABLE
13383: LD_INT 0
13385: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13386: LD_ADDR_VAR 0 1
13390: PUSH
13391: LD_INT 22
13393: PUSH
13394: LD_OWVAR 2
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: LD_INT 30
13408: PUSH
13409: LD_INT 0
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 30
13418: PUSH
13419: LD_INT 1
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: ST_TO_ADDR
// if not depot then
13440: LD_VAR 0 1
13444: NOT
13445: IFFALSE 13449
// exit ;
13447: GO 13484
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13449: LD_VAR 0 1
13453: PUSH
13454: LD_INT 1
13456: ARRAY
13457: PPUSH
13458: CALL_OW 250
13462: PPUSH
13463: LD_VAR 0 1
13467: PUSH
13468: LD_INT 1
13470: ARRAY
13471: PPUSH
13472: CALL_OW 251
13476: PPUSH
13477: LD_INT 70
13479: PPUSH
13480: CALL_OW 495
// end ;
13484: PPOPN 1
13486: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13487: LD_EXP 39
13491: PUSH
13492: LD_EXP 73
13496: AND
13497: IFFALSE 13708
13499: GO 13501
13501: DISABLE
13502: LD_INT 0
13504: PPUSH
13505: PPUSH
13506: PPUSH
13507: PPUSH
13508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13509: LD_ADDR_VAR 0 5
13513: PUSH
13514: LD_INT 22
13516: PUSH
13517: LD_OWVAR 2
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 21
13528: PUSH
13529: LD_INT 1
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PPUSH
13540: CALL_OW 69
13544: ST_TO_ADDR
// if not tmp then
13545: LD_VAR 0 5
13549: NOT
13550: IFFALSE 13554
// exit ;
13552: GO 13708
// for i in tmp do
13554: LD_ADDR_VAR 0 1
13558: PUSH
13559: LD_VAR 0 5
13563: PUSH
13564: FOR_IN
13565: IFFALSE 13706
// begin d := rand ( 0 , 5 ) ;
13567: LD_ADDR_VAR 0 4
13571: PUSH
13572: LD_INT 0
13574: PPUSH
13575: LD_INT 5
13577: PPUSH
13578: CALL_OW 12
13582: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_VAR 0 1
13592: PPUSH
13593: CALL_OW 250
13597: PPUSH
13598: LD_VAR 0 4
13602: PPUSH
13603: LD_INT 3
13605: PPUSH
13606: LD_INT 12
13608: PPUSH
13609: CALL_OW 12
13613: PPUSH
13614: CALL_OW 272
13618: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13619: LD_ADDR_VAR 0 3
13623: PUSH
13624: LD_VAR 0 1
13628: PPUSH
13629: CALL_OW 251
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: LD_INT 3
13641: PPUSH
13642: LD_INT 12
13644: PPUSH
13645: CALL_OW 12
13649: PPUSH
13650: CALL_OW 273
13654: ST_TO_ADDR
// if ValidHex ( x , y ) then
13655: LD_VAR 0 2
13659: PPUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: CALL_OW 488
13669: IFFALSE 13704
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13671: LD_VAR 0 1
13675: PPUSH
13676: LD_VAR 0 2
13680: PPUSH
13681: LD_VAR 0 3
13685: PPUSH
13686: LD_INT 3
13688: PPUSH
13689: LD_INT 6
13691: PPUSH
13692: CALL_OW 12
13696: PPUSH
13697: LD_INT 1
13699: PPUSH
13700: CALL_OW 483
// end ;
13704: GO 13564
13706: POP
13707: POP
// end ;
13708: PPOPN 5
13710: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13711: LD_EXP 39
13715: PUSH
13716: LD_EXP 74
13720: AND
13721: IFFALSE 13815
13723: GO 13725
13725: DISABLE
13726: LD_INT 0
13728: PPUSH
13729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_INT 22
13737: PUSH
13738: LD_OWVAR 2
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 32
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 21
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: PPUSH
13772: CALL_OW 69
13776: ST_TO_ADDR
// if not tmp then
13777: LD_VAR 0 2
13781: NOT
13782: IFFALSE 13786
// exit ;
13784: GO 13815
// for i in tmp do
13786: LD_ADDR_VAR 0 1
13790: PUSH
13791: LD_VAR 0 2
13795: PUSH
13796: FOR_IN
13797: IFFALSE 13813
// SetFuel ( i , 0 ) ;
13799: LD_VAR 0 1
13803: PPUSH
13804: LD_INT 0
13806: PPUSH
13807: CALL_OW 240
13811: GO 13796
13813: POP
13814: POP
// end ;
13815: PPOPN 2
13817: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13818: LD_EXP 39
13822: PUSH
13823: LD_EXP 75
13827: AND
13828: IFFALSE 13894
13830: GO 13832
13832: DISABLE
13833: LD_INT 0
13835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_OWVAR 2
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 30
13855: PUSH
13856: LD_INT 29
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PPUSH
13867: CALL_OW 69
13871: ST_TO_ADDR
// if not tmp then
13872: LD_VAR 0 1
13876: NOT
13877: IFFALSE 13881
// exit ;
13879: GO 13894
// DestroyUnit ( tmp [ 1 ] ) ;
13881: LD_VAR 0 1
13885: PUSH
13886: LD_INT 1
13888: ARRAY
13889: PPUSH
13890: CALL_OW 65
// end ;
13894: PPOPN 1
13896: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13897: LD_EXP 39
13901: PUSH
13902: LD_EXP 77
13906: AND
13907: IFFALSE 14036
13909: GO 13911
13911: DISABLE
13912: LD_INT 0
13914: PPUSH
// begin uc_side := 0 ;
13915: LD_ADDR_OWVAR 20
13919: PUSH
13920: LD_INT 0
13922: ST_TO_ADDR
// uc_nation := nation_arabian ;
13923: LD_ADDR_OWVAR 21
13927: PUSH
13928: LD_INT 2
13930: ST_TO_ADDR
// hc_gallery :=  ;
13931: LD_ADDR_OWVAR 33
13935: PUSH
13936: LD_STRING 
13938: ST_TO_ADDR
// hc_name :=  ;
13939: LD_ADDR_OWVAR 26
13943: PUSH
13944: LD_STRING 
13946: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13947: LD_INT 1
13949: PPUSH
13950: LD_INT 11
13952: PPUSH
13953: LD_INT 10
13955: PPUSH
13956: CALL_OW 380
// un := CreateHuman ;
13960: LD_ADDR_VAR 0 1
13964: PUSH
13965: CALL_OW 44
13969: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13970: LD_VAR 0 1
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13982: LD_INT 35
13984: PPUSH
13985: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13989: LD_VAR 0 1
13993: PPUSH
13994: LD_INT 22
13996: PUSH
13997: LD_OWVAR 2
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 69
14010: PPUSH
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 74
14020: PPUSH
14021: CALL_OW 115
// until IsDead ( un ) ;
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 301
14034: IFFALSE 13982
// end ;
14036: PPOPN 1
14038: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14039: LD_EXP 39
14043: PUSH
14044: LD_EXP 79
14048: AND
14049: IFFALSE 14061
14051: GO 14053
14053: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14054: LD_STRING earthquake(getX(game), 0, 32)
14056: PPUSH
14057: CALL_OW 559
14061: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14062: LD_EXP 39
14066: PUSH
14067: LD_EXP 80
14071: AND
14072: IFFALSE 14163
14074: GO 14076
14076: DISABLE
14077: LD_INT 0
14079: PPUSH
// begin enable ;
14080: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14081: LD_ADDR_VAR 0 1
14085: PUSH
14086: LD_INT 22
14088: PUSH
14089: LD_OWVAR 2
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 21
14100: PUSH
14101: LD_INT 2
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 33
14110: PUSH
14111: LD_INT 3
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: PPUSH
14123: CALL_OW 69
14127: ST_TO_ADDR
// if not tmp then
14128: LD_VAR 0 1
14132: NOT
14133: IFFALSE 14137
// exit ;
14135: GO 14163
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14137: LD_VAR 0 1
14141: PUSH
14142: LD_INT 1
14144: PPUSH
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 12
14154: ARRAY
14155: PPUSH
14156: LD_INT 1
14158: PPUSH
14159: CALL_OW 234
// end ;
14163: PPOPN 1
14165: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14166: LD_EXP 39
14170: PUSH
14171: LD_EXP 81
14175: AND
14176: IFFALSE 14317
14178: GO 14180
14180: DISABLE
14181: LD_INT 0
14183: PPUSH
14184: PPUSH
14185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14186: LD_ADDR_VAR 0 3
14190: PUSH
14191: LD_INT 22
14193: PUSH
14194: LD_OWVAR 2
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 25
14205: PUSH
14206: LD_INT 1
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: ST_TO_ADDR
// if not tmp then
14222: LD_VAR 0 3
14226: NOT
14227: IFFALSE 14231
// exit ;
14229: GO 14317
// un := tmp [ rand ( 1 , tmp ) ] ;
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_VAR 0 3
14240: PUSH
14241: LD_INT 1
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: CALL_OW 12
14253: ARRAY
14254: ST_TO_ADDR
// if Crawls ( un ) then
14255: LD_VAR 0 2
14259: PPUSH
14260: CALL_OW 318
14264: IFFALSE 14275
// ComWalk ( un ) ;
14266: LD_VAR 0 2
14270: PPUSH
14271: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14275: LD_VAR 0 2
14279: PPUSH
14280: LD_INT 9
14282: PPUSH
14283: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14287: LD_INT 28
14289: PPUSH
14290: LD_OWVAR 2
14294: PPUSH
14295: LD_INT 2
14297: PPUSH
14298: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14302: LD_INT 29
14304: PPUSH
14305: LD_OWVAR 2
14309: PPUSH
14310: LD_INT 2
14312: PPUSH
14313: CALL_OW 322
// end ;
14317: PPOPN 3
14319: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14320: LD_EXP 39
14324: PUSH
14325: LD_EXP 82
14329: AND
14330: IFFALSE 14441
14332: GO 14334
14334: DISABLE
14335: LD_INT 0
14337: PPUSH
14338: PPUSH
14339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14340: LD_ADDR_VAR 0 3
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_OWVAR 2
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 25
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 69
14375: ST_TO_ADDR
// if not tmp then
14376: LD_VAR 0 3
14380: NOT
14381: IFFALSE 14385
// exit ;
14383: GO 14441
// un := tmp [ rand ( 1 , tmp ) ] ;
14385: LD_ADDR_VAR 0 2
14389: PUSH
14390: LD_VAR 0 3
14394: PUSH
14395: LD_INT 1
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: CALL_OW 12
14407: ARRAY
14408: ST_TO_ADDR
// if Crawls ( un ) then
14409: LD_VAR 0 2
14413: PPUSH
14414: CALL_OW 318
14418: IFFALSE 14429
// ComWalk ( un ) ;
14420: LD_VAR 0 2
14424: PPUSH
14425: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14429: LD_VAR 0 2
14433: PPUSH
14434: LD_INT 8
14436: PPUSH
14437: CALL_OW 336
// end ;
14441: PPOPN 3
14443: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14444: LD_EXP 39
14448: PUSH
14449: LD_EXP 83
14453: AND
14454: IFFALSE 14598
14456: GO 14458
14458: DISABLE
14459: LD_INT 0
14461: PPUSH
14462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14463: LD_ADDR_VAR 0 2
14467: PUSH
14468: LD_INT 22
14470: PUSH
14471: LD_OWVAR 2
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 21
14482: PUSH
14483: LD_INT 2
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 2
14492: PUSH
14493: LD_INT 34
14495: PUSH
14496: LD_INT 12
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 34
14505: PUSH
14506: LD_INT 51
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 34
14515: PUSH
14516: LD_INT 32
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: ST_TO_ADDR
// if not tmp then
14539: LD_VAR 0 2
14543: NOT
14544: IFFALSE 14548
// exit ;
14546: GO 14598
// for i in tmp do
14548: LD_ADDR_VAR 0 1
14552: PUSH
14553: LD_VAR 0 2
14557: PUSH
14558: FOR_IN
14559: IFFALSE 14596
// if GetCargo ( i , mat_artifact ) = 0 then
14561: LD_VAR 0 1
14565: PPUSH
14566: LD_INT 4
14568: PPUSH
14569: CALL_OW 289
14573: PUSH
14574: LD_INT 0
14576: EQUAL
14577: IFFALSE 14594
// SetCargo ( i , mat_siberit , 100 ) ;
14579: LD_VAR 0 1
14583: PPUSH
14584: LD_INT 3
14586: PPUSH
14587: LD_INT 100
14589: PPUSH
14590: CALL_OW 290
14594: GO 14558
14596: POP
14597: POP
// end ;
14598: PPOPN 2
14600: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14601: LD_EXP 39
14605: PUSH
14606: LD_EXP 84
14610: AND
14611: IFFALSE 14794
14613: GO 14615
14615: DISABLE
14616: LD_INT 0
14618: PPUSH
14619: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_INT 22
14627: PUSH
14628: LD_OWVAR 2
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: ST_TO_ADDR
// if not tmp then
14642: LD_VAR 0 2
14646: NOT
14647: IFFALSE 14651
// exit ;
14649: GO 14794
// for i := 1 to 2 do
14651: LD_ADDR_VAR 0 1
14655: PUSH
14656: DOUBLE
14657: LD_INT 1
14659: DEC
14660: ST_TO_ADDR
14661: LD_INT 2
14663: PUSH
14664: FOR_TO
14665: IFFALSE 14792
// begin uc_side := your_side ;
14667: LD_ADDR_OWVAR 20
14671: PUSH
14672: LD_OWVAR 2
14676: ST_TO_ADDR
// uc_nation := nation_american ;
14677: LD_ADDR_OWVAR 21
14681: PUSH
14682: LD_INT 1
14684: ST_TO_ADDR
// vc_chassis := us_morphling ;
14685: LD_ADDR_OWVAR 37
14689: PUSH
14690: LD_INT 5
14692: ST_TO_ADDR
// vc_engine := engine_siberite ;
14693: LD_ADDR_OWVAR 39
14697: PUSH
14698: LD_INT 3
14700: ST_TO_ADDR
// vc_control := control_computer ;
14701: LD_ADDR_OWVAR 38
14705: PUSH
14706: LD_INT 3
14708: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14709: LD_ADDR_OWVAR 40
14713: PUSH
14714: LD_INT 10
14716: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14717: LD_VAR 0 2
14721: PUSH
14722: LD_INT 1
14724: ARRAY
14725: PPUSH
14726: CALL_OW 310
14730: NOT
14731: IFFALSE 14778
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14733: CALL_OW 45
14737: PPUSH
14738: LD_VAR 0 2
14742: PUSH
14743: LD_INT 1
14745: ARRAY
14746: PPUSH
14747: CALL_OW 250
14751: PPUSH
14752: LD_VAR 0 2
14756: PUSH
14757: LD_INT 1
14759: ARRAY
14760: PPUSH
14761: CALL_OW 251
14765: PPUSH
14766: LD_INT 12
14768: PPUSH
14769: LD_INT 1
14771: PPUSH
14772: CALL_OW 50
14776: GO 14790
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14778: CALL_OW 45
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: CALL_OW 51
// end ;
14790: GO 14664
14792: POP
14793: POP
// end ;
14794: PPOPN 2
14796: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14797: LD_EXP 39
14801: PUSH
14802: LD_EXP 85
14806: AND
14807: IFFALSE 15029
14809: GO 14811
14811: DISABLE
14812: LD_INT 0
14814: PPUSH
14815: PPUSH
14816: PPUSH
14817: PPUSH
14818: PPUSH
14819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14820: LD_ADDR_VAR 0 6
14824: PUSH
14825: LD_INT 22
14827: PUSH
14828: LD_OWVAR 2
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 3
14849: PUSH
14850: LD_INT 23
14852: PUSH
14853: LD_INT 0
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: PPUSH
14869: CALL_OW 69
14873: ST_TO_ADDR
// if not tmp then
14874: LD_VAR 0 6
14878: NOT
14879: IFFALSE 14883
// exit ;
14881: GO 15029
// s1 := rand ( 1 , 4 ) ;
14883: LD_ADDR_VAR 0 2
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 4
14893: PPUSH
14894: CALL_OW 12
14898: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14899: LD_ADDR_VAR 0 4
14903: PUSH
14904: LD_VAR 0 6
14908: PUSH
14909: LD_INT 1
14911: ARRAY
14912: PPUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 259
14922: ST_TO_ADDR
// if s1 = 1 then
14923: LD_VAR 0 2
14927: PUSH
14928: LD_INT 1
14930: EQUAL
14931: IFFALSE 14951
// s2 := rand ( 2 , 4 ) else
14933: LD_ADDR_VAR 0 3
14937: PUSH
14938: LD_INT 2
14940: PPUSH
14941: LD_INT 4
14943: PPUSH
14944: CALL_OW 12
14948: ST_TO_ADDR
14949: GO 14959
// s2 := 1 ;
14951: LD_ADDR_VAR 0 3
14955: PUSH
14956: LD_INT 1
14958: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14959: LD_ADDR_VAR 0 5
14963: PUSH
14964: LD_VAR 0 6
14968: PUSH
14969: LD_INT 1
14971: ARRAY
14972: PPUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: CALL_OW 259
14982: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14983: LD_VAR 0 6
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PPUSH
14992: LD_VAR 0 2
14996: PPUSH
14997: LD_VAR 0 5
15001: PPUSH
15002: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15006: LD_VAR 0 6
15010: PUSH
15011: LD_INT 1
15013: ARRAY
15014: PPUSH
15015: LD_VAR 0 3
15019: PPUSH
15020: LD_VAR 0 4
15024: PPUSH
15025: CALL_OW 237
// end ;
15029: PPOPN 6
15031: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15032: LD_EXP 39
15036: PUSH
15037: LD_EXP 86
15041: AND
15042: IFFALSE 15121
15044: GO 15046
15046: DISABLE
15047: LD_INT 0
15049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15050: LD_ADDR_VAR 0 1
15054: PUSH
15055: LD_INT 22
15057: PUSH
15058: LD_OWVAR 2
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 30
15069: PUSH
15070: LD_INT 3
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PPUSH
15081: CALL_OW 69
15085: ST_TO_ADDR
// if not tmp then
15086: LD_VAR 0 1
15090: NOT
15091: IFFALSE 15095
// exit ;
15093: GO 15121
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15095: LD_VAR 0 1
15099: PUSH
15100: LD_INT 1
15102: PPUSH
15103: LD_VAR 0 1
15107: PPUSH
15108: CALL_OW 12
15112: ARRAY
15113: PPUSH
15114: LD_INT 1
15116: PPUSH
15117: CALL_OW 234
// end ;
15121: PPOPN 1
15123: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15124: LD_EXP 39
15128: PUSH
15129: LD_EXP 87
15133: AND
15134: IFFALSE 15246
15136: GO 15138
15138: DISABLE
15139: LD_INT 0
15141: PPUSH
15142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15143: LD_ADDR_VAR 0 2
15147: PUSH
15148: LD_INT 22
15150: PUSH
15151: LD_OWVAR 2
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 2
15162: PUSH
15163: LD_INT 30
15165: PUSH
15166: LD_INT 27
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 30
15175: PUSH
15176: LD_INT 26
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 30
15185: PUSH
15186: LD_INT 28
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PPUSH
15203: CALL_OW 69
15207: ST_TO_ADDR
// if not tmp then
15208: LD_VAR 0 2
15212: NOT
15213: IFFALSE 15217
// exit ;
15215: GO 15246
// for i in tmp do
15217: LD_ADDR_VAR 0 1
15221: PUSH
15222: LD_VAR 0 2
15226: PUSH
15227: FOR_IN
15228: IFFALSE 15244
// SetLives ( i , 1 ) ;
15230: LD_VAR 0 1
15234: PPUSH
15235: LD_INT 1
15237: PPUSH
15238: CALL_OW 234
15242: GO 15227
15244: POP
15245: POP
// end ;
15246: PPOPN 2
15248: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15249: LD_EXP 39
15253: PUSH
15254: LD_EXP 88
15258: AND
15259: IFFALSE 15546
15261: GO 15263
15263: DISABLE
15264: LD_INT 0
15266: PPUSH
15267: PPUSH
15268: PPUSH
// begin i := rand ( 1 , 7 ) ;
15269: LD_ADDR_VAR 0 1
15273: PUSH
15274: LD_INT 1
15276: PPUSH
15277: LD_INT 7
15279: PPUSH
15280: CALL_OW 12
15284: ST_TO_ADDR
// case i of 1 :
15285: LD_VAR 0 1
15289: PUSH
15290: LD_INT 1
15292: DOUBLE
15293: EQUAL
15294: IFTRUE 15298
15296: GO 15308
15298: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15299: LD_STRING earthquake(getX(game), 0, 32)
15301: PPUSH
15302: CALL_OW 559
15306: GO 15546
15308: LD_INT 2
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15330
15316: POP
// begin ToLua ( displayStucuk(); ) ;
15317: LD_STRING displayStucuk();
15319: PPUSH
15320: CALL_OW 559
// ResetFog ;
15324: CALL_OW 335
// end ; 3 :
15328: GO 15546
15330: LD_INT 3
15332: DOUBLE
15333: EQUAL
15334: IFTRUE 15338
15336: GO 15442
15338: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15339: LD_ADDR_VAR 0 2
15343: PUSH
15344: LD_INT 22
15346: PUSH
15347: LD_OWVAR 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 25
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PPUSH
15370: CALL_OW 69
15374: ST_TO_ADDR
// if not tmp then
15375: LD_VAR 0 2
15379: NOT
15380: IFFALSE 15384
// exit ;
15382: GO 15546
// un := tmp [ rand ( 1 , tmp ) ] ;
15384: LD_ADDR_VAR 0 3
15388: PUSH
15389: LD_VAR 0 2
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_VAR 0 2
15401: PPUSH
15402: CALL_OW 12
15406: ARRAY
15407: ST_TO_ADDR
// if Crawls ( un ) then
15408: LD_VAR 0 3
15412: PPUSH
15413: CALL_OW 318
15417: IFFALSE 15428
// ComWalk ( un ) ;
15419: LD_VAR 0 3
15423: PPUSH
15424: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15428: LD_VAR 0 3
15432: PPUSH
15433: LD_INT 8
15435: PPUSH
15436: CALL_OW 336
// end ; 4 :
15440: GO 15546
15442: LD_INT 4
15444: DOUBLE
15445: EQUAL
15446: IFTRUE 15450
15448: GO 15524
15450: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15451: LD_ADDR_VAR 0 2
15455: PUSH
15456: LD_INT 22
15458: PUSH
15459: LD_OWVAR 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 30
15470: PUSH
15471: LD_INT 29
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PPUSH
15482: CALL_OW 69
15486: ST_TO_ADDR
// if not tmp then
15487: LD_VAR 0 2
15491: NOT
15492: IFFALSE 15496
// exit ;
15494: GO 15546
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15496: LD_VAR 0 2
15500: PUSH
15501: LD_INT 1
15503: ARRAY
15504: PPUSH
15505: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15509: LD_VAR 0 2
15513: PUSH
15514: LD_INT 1
15516: ARRAY
15517: PPUSH
15518: CALL_OW 65
// end ; 5 .. 7 :
15522: GO 15546
15524: LD_INT 5
15526: DOUBLE
15527: GREATEREQUAL
15528: IFFALSE 15536
15530: LD_INT 7
15532: DOUBLE
15533: LESSEQUAL
15534: IFTRUE 15538
15536: GO 15545
15538: POP
// StreamSibBomb ; end ;
15539: CALL 11783 0 0
15543: GO 15546
15545: POP
// end ;
15546: PPOPN 3
15548: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15549: LD_EXP 39
15553: PUSH
15554: LD_EXP 89
15558: AND
15559: IFFALSE 15715
15561: GO 15563
15563: DISABLE
15564: LD_INT 0
15566: PPUSH
15567: PPUSH
15568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15569: LD_ADDR_VAR 0 2
15573: PUSH
15574: LD_INT 81
15576: PUSH
15577: LD_OWVAR 2
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 2
15588: PUSH
15589: LD_INT 21
15591: PUSH
15592: LD_INT 1
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 21
15601: PUSH
15602: LD_INT 2
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: LIST
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 2
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15715
// p := 0 ;
15632: LD_ADDR_VAR 0 3
15636: PUSH
15637: LD_INT 0
15639: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15640: LD_INT 35
15642: PPUSH
15643: CALL_OW 67
// p := p + 1 ;
15647: LD_ADDR_VAR 0 3
15651: PUSH
15652: LD_VAR 0 3
15656: PUSH
15657: LD_INT 1
15659: PLUS
15660: ST_TO_ADDR
// for i in tmp do
15661: LD_ADDR_VAR 0 1
15665: PUSH
15666: LD_VAR 0 2
15670: PUSH
15671: FOR_IN
15672: IFFALSE 15703
// if GetLives ( i ) < 1000 then
15674: LD_VAR 0 1
15678: PPUSH
15679: CALL_OW 256
15683: PUSH
15684: LD_INT 1000
15686: LESS
15687: IFFALSE 15701
// SetLives ( i , 1000 ) ;
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_INT 1000
15696: PPUSH
15697: CALL_OW 234
15701: GO 15671
15703: POP
15704: POP
// until p > 20 ;
15705: LD_VAR 0 3
15709: PUSH
15710: LD_INT 20
15712: GREATER
15713: IFFALSE 15640
// end ;
15715: PPOPN 3
15717: END
// every 0 0$1 trigger StreamModeActive and sTime do
15718: LD_EXP 39
15722: PUSH
15723: LD_EXP 90
15727: AND
15728: IFFALSE 15763
15730: GO 15732
15732: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15733: LD_INT 28
15735: PPUSH
15736: LD_OWVAR 2
15740: PPUSH
15741: LD_INT 2
15743: PPUSH
15744: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15748: LD_INT 30
15750: PPUSH
15751: LD_OWVAR 2
15755: PPUSH
15756: LD_INT 2
15758: PPUSH
15759: CALL_OW 322
// end ;
15763: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15764: LD_EXP 39
15768: PUSH
15769: LD_EXP 91
15773: AND
15774: IFFALSE 15895
15776: GO 15778
15778: DISABLE
15779: LD_INT 0
15781: PPUSH
15782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15783: LD_ADDR_VAR 0 2
15787: PUSH
15788: LD_INT 22
15790: PUSH
15791: LD_OWVAR 2
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 21
15802: PUSH
15803: LD_INT 1
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 3
15812: PUSH
15813: LD_INT 23
15815: PUSH
15816: LD_INT 0
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: ST_TO_ADDR
// if not tmp then
15837: LD_VAR 0 2
15841: NOT
15842: IFFALSE 15846
// exit ;
15844: GO 15895
// for i in tmp do
15846: LD_ADDR_VAR 0 1
15850: PUSH
15851: LD_VAR 0 2
15855: PUSH
15856: FOR_IN
15857: IFFALSE 15893
// begin if Crawls ( i ) then
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 318
15868: IFFALSE 15879
// ComWalk ( i ) ;
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 138
// SetClass ( i , 2 ) ;
15879: LD_VAR 0 1
15883: PPUSH
15884: LD_INT 2
15886: PPUSH
15887: CALL_OW 336
// end ;
15891: GO 15856
15893: POP
15894: POP
// end ;
15895: PPOPN 2
15897: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15898: LD_EXP 39
15902: PUSH
15903: LD_EXP 92
15907: AND
15908: IFFALSE 16196
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
15916: PPUSH
15917: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15918: LD_OWVAR 2
15922: PPUSH
15923: LD_INT 9
15925: PPUSH
15926: LD_INT 1
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15936: LD_INT 9
15938: PPUSH
15939: LD_OWVAR 2
15943: PPUSH
15944: CALL_OW 343
// uc_side := 9 ;
15948: LD_ADDR_OWVAR 20
15952: PUSH
15953: LD_INT 9
15955: ST_TO_ADDR
// uc_nation := 2 ;
15956: LD_ADDR_OWVAR 21
15960: PUSH
15961: LD_INT 2
15963: ST_TO_ADDR
// hc_name := Dark Warrior ;
15964: LD_ADDR_OWVAR 26
15968: PUSH
15969: LD_STRING Dark Warrior
15971: ST_TO_ADDR
// hc_gallery :=  ;
15972: LD_ADDR_OWVAR 33
15976: PUSH
15977: LD_STRING 
15979: ST_TO_ADDR
// hc_noskilllimit := true ;
15980: LD_ADDR_OWVAR 76
15984: PUSH
15985: LD_INT 1
15987: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15988: LD_ADDR_OWVAR 31
15992: PUSH
15993: LD_INT 30
15995: PUSH
15996: LD_INT 30
15998: PUSH
15999: LD_INT 30
16001: PUSH
16002: LD_INT 30
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: ST_TO_ADDR
// un := CreateHuman ;
16011: LD_ADDR_VAR 0 3
16015: PUSH
16016: CALL_OW 44
16020: ST_TO_ADDR
// hc_noskilllimit := false ;
16021: LD_ADDR_OWVAR 76
16025: PUSH
16026: LD_INT 0
16028: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 51
// ToLua ( playRanger() ) ;
16041: LD_STRING playRanger()
16043: PPUSH
16044: CALL_OW 559
// p := 0 ;
16048: LD_ADDR_VAR 0 2
16052: PUSH
16053: LD_INT 0
16055: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16056: LD_INT 35
16058: PPUSH
16059: CALL_OW 67
// p := p + 1 ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: LD_VAR 0 2
16072: PUSH
16073: LD_INT 1
16075: PLUS
16076: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16077: LD_VAR 0 3
16081: PPUSH
16082: CALL_OW 256
16086: PUSH
16087: LD_INT 1000
16089: LESS
16090: IFFALSE 16104
// SetLives ( un , 1000 ) ;
16092: LD_VAR 0 3
16096: PPUSH
16097: LD_INT 1000
16099: PPUSH
16100: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16104: LD_VAR 0 3
16108: PPUSH
16109: LD_INT 81
16111: PUSH
16112: LD_OWVAR 2
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 91
16123: PUSH
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 30
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PPUSH
16141: CALL_OW 69
16145: PPUSH
16146: LD_VAR 0 3
16150: PPUSH
16151: CALL_OW 74
16155: PPUSH
16156: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16160: LD_VAR 0 2
16164: PUSH
16165: LD_INT 80
16167: GREATER
16168: PUSH
16169: LD_VAR 0 3
16173: PPUSH
16174: CALL_OW 301
16178: OR
16179: IFFALSE 16056
// if un then
16181: LD_VAR 0 3
16185: IFFALSE 16196
// RemoveUnit ( un ) ;
16187: LD_VAR 0 3
16191: PPUSH
16192: CALL_OW 64
// end ;
16196: PPOPN 3
16198: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16199: LD_EXP 93
16203: IFFALSE 16319
16205: GO 16207
16207: DISABLE
16208: LD_INT 0
16210: PPUSH
16211: PPUSH
16212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16213: LD_ADDR_VAR 0 2
16217: PUSH
16218: LD_INT 81
16220: PUSH
16221: LD_OWVAR 2
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 21
16232: PUSH
16233: LD_INT 1
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PPUSH
16244: CALL_OW 69
16248: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16249: LD_STRING playComputer()
16251: PPUSH
16252: CALL_OW 559
// if not tmp then
16256: LD_VAR 0 2
16260: NOT
16261: IFFALSE 16265
// exit ;
16263: GO 16319
// for i in tmp do
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_VAR 0 2
16274: PUSH
16275: FOR_IN
16276: IFFALSE 16317
// for j := 1 to 4 do
16278: LD_ADDR_VAR 0 3
16282: PUSH
16283: DOUBLE
16284: LD_INT 1
16286: DEC
16287: ST_TO_ADDR
16288: LD_INT 4
16290: PUSH
16291: FOR_TO
16292: IFFALSE 16313
// SetSkill ( i , j , 10 ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: LD_VAR 0 3
16303: PPUSH
16304: LD_INT 10
16306: PPUSH
16307: CALL_OW 237
16311: GO 16291
16313: POP
16314: POP
16315: GO 16275
16317: POP
16318: POP
// end ;
16319: PPOPN 3
16321: END
// every 0 0$1 trigger s30 do var i , tmp ;
16322: LD_EXP 94
16326: IFFALSE 16395
16328: GO 16330
16330: DISABLE
16331: LD_INT 0
16333: PPUSH
16334: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16335: LD_ADDR_VAR 0 2
16339: PUSH
16340: LD_INT 22
16342: PUSH
16343: LD_OWVAR 2
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL_OW 69
16356: ST_TO_ADDR
// if not tmp then
16357: LD_VAR 0 2
16361: NOT
16362: IFFALSE 16366
// exit ;
16364: GO 16395
// for i in tmp do
16366: LD_ADDR_VAR 0 1
16370: PUSH
16371: LD_VAR 0 2
16375: PUSH
16376: FOR_IN
16377: IFFALSE 16393
// SetLives ( i , 300 ) ;
16379: LD_VAR 0 1
16383: PPUSH
16384: LD_INT 300
16386: PPUSH
16387: CALL_OW 234
16391: GO 16376
16393: POP
16394: POP
// end ;
16395: PPOPN 2
16397: END
// every 0 0$1 trigger s60 do var i , tmp ;
16398: LD_EXP 95
16402: IFFALSE 16471
16404: GO 16406
16406: DISABLE
16407: LD_INT 0
16409: PPUSH
16410: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16411: LD_ADDR_VAR 0 2
16415: PUSH
16416: LD_INT 22
16418: PUSH
16419: LD_OWVAR 2
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PPUSH
16428: CALL_OW 69
16432: ST_TO_ADDR
// if not tmp then
16433: LD_VAR 0 2
16437: NOT
16438: IFFALSE 16442
// exit ;
16440: GO 16471
// for i in tmp do
16442: LD_ADDR_VAR 0 1
16446: PUSH
16447: LD_VAR 0 2
16451: PUSH
16452: FOR_IN
16453: IFFALSE 16469
// SetLives ( i , 600 ) ;
16455: LD_VAR 0 1
16459: PPUSH
16460: LD_INT 600
16462: PPUSH
16463: CALL_OW 234
16467: GO 16452
16469: POP
16470: POP
// end ;
16471: PPOPN 2
16473: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16474: LD_INT 0
16476: PPUSH
// case cmd of 301 :
16477: LD_VAR 0 1
16481: PUSH
16482: LD_INT 301
16484: DOUBLE
16485: EQUAL
16486: IFTRUE 16490
16488: GO 16522
16490: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16491: LD_VAR 0 6
16495: PPUSH
16496: LD_VAR 0 7
16500: PPUSH
16501: LD_VAR 0 8
16505: PPUSH
16506: LD_VAR 0 4
16510: PPUSH
16511: LD_VAR 0 5
16515: PPUSH
16516: CALL 17723 0 5
16520: GO 16643
16522: LD_INT 302
16524: DOUBLE
16525: EQUAL
16526: IFTRUE 16530
16528: GO 16567
16530: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16531: LD_VAR 0 6
16535: PPUSH
16536: LD_VAR 0 7
16540: PPUSH
16541: LD_VAR 0 8
16545: PPUSH
16546: LD_VAR 0 9
16550: PPUSH
16551: LD_VAR 0 4
16555: PPUSH
16556: LD_VAR 0 5
16560: PPUSH
16561: CALL 17814 0 6
16565: GO 16643
16567: LD_INT 303
16569: DOUBLE
16570: EQUAL
16571: IFTRUE 16575
16573: GO 16612
16575: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16576: LD_VAR 0 6
16580: PPUSH
16581: LD_VAR 0 7
16585: PPUSH
16586: LD_VAR 0 8
16590: PPUSH
16591: LD_VAR 0 9
16595: PPUSH
16596: LD_VAR 0 4
16600: PPUSH
16601: LD_VAR 0 5
16605: PPUSH
16606: CALL 16648 0 6
16610: GO 16643
16612: LD_INT 304
16614: DOUBLE
16615: EQUAL
16616: IFTRUE 16620
16618: GO 16642
16620: POP
// hHackTeleport ( unit , x , y ) ; end ;
16621: LD_VAR 0 2
16625: PPUSH
16626: LD_VAR 0 4
16630: PPUSH
16631: LD_VAR 0 5
16635: PPUSH
16636: CALL 18407 0 3
16640: GO 16643
16642: POP
// end ;
16643: LD_VAR 0 12
16647: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16648: LD_INT 0
16650: PPUSH
16651: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16652: LD_VAR 0 1
16656: PUSH
16657: LD_INT 1
16659: LESS
16660: PUSH
16661: LD_VAR 0 1
16665: PUSH
16666: LD_INT 3
16668: GREATER
16669: OR
16670: PUSH
16671: LD_VAR 0 5
16675: PPUSH
16676: LD_VAR 0 6
16680: PPUSH
16681: CALL_OW 428
16685: OR
16686: IFFALSE 16690
// exit ;
16688: GO 17410
// uc_side := your_side ;
16690: LD_ADDR_OWVAR 20
16694: PUSH
16695: LD_OWVAR 2
16699: ST_TO_ADDR
// uc_nation := nation ;
16700: LD_ADDR_OWVAR 21
16704: PUSH
16705: LD_VAR 0 1
16709: ST_TO_ADDR
// bc_level = 1 ;
16710: LD_ADDR_OWVAR 43
16714: PUSH
16715: LD_INT 1
16717: ST_TO_ADDR
// case btype of 1 :
16718: LD_VAR 0 2
16722: PUSH
16723: LD_INT 1
16725: DOUBLE
16726: EQUAL
16727: IFTRUE 16731
16729: GO 16742
16731: POP
// bc_type := b_depot ; 2 :
16732: LD_ADDR_OWVAR 42
16736: PUSH
16737: LD_INT 0
16739: ST_TO_ADDR
16740: GO 17354
16742: LD_INT 2
16744: DOUBLE
16745: EQUAL
16746: IFTRUE 16750
16748: GO 16761
16750: POP
// bc_type := b_warehouse ; 3 :
16751: LD_ADDR_OWVAR 42
16755: PUSH
16756: LD_INT 1
16758: ST_TO_ADDR
16759: GO 17354
16761: LD_INT 3
16763: DOUBLE
16764: EQUAL
16765: IFTRUE 16769
16767: GO 16780
16769: POP
// bc_type := b_lab ; 4 .. 9 :
16770: LD_ADDR_OWVAR 42
16774: PUSH
16775: LD_INT 6
16777: ST_TO_ADDR
16778: GO 17354
16780: LD_INT 4
16782: DOUBLE
16783: GREATEREQUAL
16784: IFFALSE 16792
16786: LD_INT 9
16788: DOUBLE
16789: LESSEQUAL
16790: IFTRUE 16794
16792: GO 16846
16794: POP
// begin bc_type := b_lab_half ;
16795: LD_ADDR_OWVAR 42
16799: PUSH
16800: LD_INT 7
16802: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16803: LD_ADDR_OWVAR 44
16807: PUSH
16808: LD_INT 10
16810: PUSH
16811: LD_INT 11
16813: PUSH
16814: LD_INT 12
16816: PUSH
16817: LD_INT 15
16819: PUSH
16820: LD_INT 14
16822: PUSH
16823: LD_INT 13
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: PUSH
16834: LD_VAR 0 2
16838: PUSH
16839: LD_INT 3
16841: MINUS
16842: ARRAY
16843: ST_TO_ADDR
// end ; 10 .. 13 :
16844: GO 17354
16846: LD_INT 10
16848: DOUBLE
16849: GREATEREQUAL
16850: IFFALSE 16858
16852: LD_INT 13
16854: DOUBLE
16855: LESSEQUAL
16856: IFTRUE 16860
16858: GO 16937
16860: POP
// begin bc_type := b_lab_full ;
16861: LD_ADDR_OWVAR 42
16865: PUSH
16866: LD_INT 8
16868: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16869: LD_ADDR_OWVAR 44
16873: PUSH
16874: LD_INT 10
16876: PUSH
16877: LD_INT 12
16879: PUSH
16880: LD_INT 14
16882: PUSH
16883: LD_INT 13
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: LD_VAR 0 2
16896: PUSH
16897: LD_INT 9
16899: MINUS
16900: ARRAY
16901: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16902: LD_ADDR_OWVAR 45
16906: PUSH
16907: LD_INT 11
16909: PUSH
16910: LD_INT 15
16912: PUSH
16913: LD_INT 12
16915: PUSH
16916: LD_INT 15
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_VAR 0 2
16929: PUSH
16930: LD_INT 9
16932: MINUS
16933: ARRAY
16934: ST_TO_ADDR
// end ; 14 :
16935: GO 17354
16937: LD_INT 14
16939: DOUBLE
16940: EQUAL
16941: IFTRUE 16945
16943: GO 16956
16945: POP
// bc_type := b_workshop ; 15 :
16946: LD_ADDR_OWVAR 42
16950: PUSH
16951: LD_INT 2
16953: ST_TO_ADDR
16954: GO 17354
16956: LD_INT 15
16958: DOUBLE
16959: EQUAL
16960: IFTRUE 16964
16962: GO 16975
16964: POP
// bc_type := b_factory ; 16 :
16965: LD_ADDR_OWVAR 42
16969: PUSH
16970: LD_INT 3
16972: ST_TO_ADDR
16973: GO 17354
16975: LD_INT 16
16977: DOUBLE
16978: EQUAL
16979: IFTRUE 16983
16981: GO 16994
16983: POP
// bc_type := b_ext_gun ; 17 :
16984: LD_ADDR_OWVAR 42
16988: PUSH
16989: LD_INT 17
16991: ST_TO_ADDR
16992: GO 17354
16994: LD_INT 17
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17002
17000: GO 17030
17002: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17003: LD_ADDR_OWVAR 42
17007: PUSH
17008: LD_INT 19
17010: PUSH
17011: LD_INT 23
17013: PUSH
17014: LD_INT 19
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: PUSH
17022: LD_VAR 0 1
17026: ARRAY
17027: ST_TO_ADDR
17028: GO 17354
17030: LD_INT 18
17032: DOUBLE
17033: EQUAL
17034: IFTRUE 17038
17036: GO 17049
17038: POP
// bc_type := b_ext_radar ; 19 :
17039: LD_ADDR_OWVAR 42
17043: PUSH
17044: LD_INT 20
17046: ST_TO_ADDR
17047: GO 17354
17049: LD_INT 19
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17068
17057: POP
// bc_type := b_ext_radio ; 20 :
17058: LD_ADDR_OWVAR 42
17062: PUSH
17063: LD_INT 22
17065: ST_TO_ADDR
17066: GO 17354
17068: LD_INT 20
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17087
17076: POP
// bc_type := b_ext_siberium ; 21 :
17077: LD_ADDR_OWVAR 42
17081: PUSH
17082: LD_INT 21
17084: ST_TO_ADDR
17085: GO 17354
17087: LD_INT 21
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17106
17095: POP
// bc_type := b_ext_computer ; 22 :
17096: LD_ADDR_OWVAR 42
17100: PUSH
17101: LD_INT 24
17103: ST_TO_ADDR
17104: GO 17354
17106: LD_INT 22
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17125
17114: POP
// bc_type := b_ext_track ; 23 :
17115: LD_ADDR_OWVAR 42
17119: PUSH
17120: LD_INT 16
17122: ST_TO_ADDR
17123: GO 17354
17125: LD_INT 23
17127: DOUBLE
17128: EQUAL
17129: IFTRUE 17133
17131: GO 17144
17133: POP
// bc_type := b_ext_laser ; 24 :
17134: LD_ADDR_OWVAR 42
17138: PUSH
17139: LD_INT 25
17141: ST_TO_ADDR
17142: GO 17354
17144: LD_INT 24
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17163
17152: POP
// bc_type := b_control_tower ; 25 :
17153: LD_ADDR_OWVAR 42
17157: PUSH
17158: LD_INT 36
17160: ST_TO_ADDR
17161: GO 17354
17163: LD_INT 25
17165: DOUBLE
17166: EQUAL
17167: IFTRUE 17171
17169: GO 17182
17171: POP
// bc_type := b_breastwork ; 26 :
17172: LD_ADDR_OWVAR 42
17176: PUSH
17177: LD_INT 31
17179: ST_TO_ADDR
17180: GO 17354
17182: LD_INT 26
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17201
17190: POP
// bc_type := b_bunker ; 27 :
17191: LD_ADDR_OWVAR 42
17195: PUSH
17196: LD_INT 32
17198: ST_TO_ADDR
17199: GO 17354
17201: LD_INT 27
17203: DOUBLE
17204: EQUAL
17205: IFTRUE 17209
17207: GO 17220
17209: POP
// bc_type := b_turret ; 28 :
17210: LD_ADDR_OWVAR 42
17214: PUSH
17215: LD_INT 33
17217: ST_TO_ADDR
17218: GO 17354
17220: LD_INT 28
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17228
17226: GO 17239
17228: POP
// bc_type := b_armoury ; 29 :
17229: LD_ADDR_OWVAR 42
17233: PUSH
17234: LD_INT 4
17236: ST_TO_ADDR
17237: GO 17354
17239: LD_INT 29
17241: DOUBLE
17242: EQUAL
17243: IFTRUE 17247
17245: GO 17258
17247: POP
// bc_type := b_barracks ; 30 :
17248: LD_ADDR_OWVAR 42
17252: PUSH
17253: LD_INT 5
17255: ST_TO_ADDR
17256: GO 17354
17258: LD_INT 30
17260: DOUBLE
17261: EQUAL
17262: IFTRUE 17266
17264: GO 17277
17266: POP
// bc_type := b_solar_power ; 31 :
17267: LD_ADDR_OWVAR 42
17271: PUSH
17272: LD_INT 27
17274: ST_TO_ADDR
17275: GO 17354
17277: LD_INT 31
17279: DOUBLE
17280: EQUAL
17281: IFTRUE 17285
17283: GO 17296
17285: POP
// bc_type := b_oil_power ; 32 :
17286: LD_ADDR_OWVAR 42
17290: PUSH
17291: LD_INT 26
17293: ST_TO_ADDR
17294: GO 17354
17296: LD_INT 32
17298: DOUBLE
17299: EQUAL
17300: IFTRUE 17304
17302: GO 17315
17304: POP
// bc_type := b_siberite_power ; 33 :
17305: LD_ADDR_OWVAR 42
17309: PUSH
17310: LD_INT 28
17312: ST_TO_ADDR
17313: GO 17354
17315: LD_INT 33
17317: DOUBLE
17318: EQUAL
17319: IFTRUE 17323
17321: GO 17334
17323: POP
// bc_type := b_oil_mine ; 34 :
17324: LD_ADDR_OWVAR 42
17328: PUSH
17329: LD_INT 29
17331: ST_TO_ADDR
17332: GO 17354
17334: LD_INT 34
17336: DOUBLE
17337: EQUAL
17338: IFTRUE 17342
17340: GO 17353
17342: POP
// bc_type := b_siberite_mine ; end ;
17343: LD_ADDR_OWVAR 42
17347: PUSH
17348: LD_INT 30
17350: ST_TO_ADDR
17351: GO 17354
17353: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17354: LD_ADDR_VAR 0 8
17358: PUSH
17359: LD_VAR 0 5
17363: PPUSH
17364: LD_VAR 0 6
17368: PPUSH
17369: LD_VAR 0 3
17373: PPUSH
17374: CALL_OW 47
17378: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17379: LD_OWVAR 42
17383: PUSH
17384: LD_INT 32
17386: PUSH
17387: LD_INT 33
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: IN
17394: IFFALSE 17410
// PlaceWeaponTurret ( b , weapon ) ;
17396: LD_VAR 0 8
17400: PPUSH
17401: LD_VAR 0 4
17405: PPUSH
17406: CALL_OW 431
// end ;
17410: LD_VAR 0 7
17414: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17421: LD_ADDR_VAR 0 4
17425: PUSH
17426: LD_INT 22
17428: PUSH
17429: LD_OWVAR 2
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 2
17440: PUSH
17441: LD_INT 30
17443: PUSH
17444: LD_INT 0
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 30
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 69
17474: ST_TO_ADDR
// if not tmp then
17475: LD_VAR 0 4
17479: NOT
17480: IFFALSE 17484
// exit ;
17482: GO 17543
// for i in tmp do
17484: LD_ADDR_VAR 0 2
17488: PUSH
17489: LD_VAR 0 4
17493: PUSH
17494: FOR_IN
17495: IFFALSE 17541
// for j = 1 to 3 do
17497: LD_ADDR_VAR 0 3
17501: PUSH
17502: DOUBLE
17503: LD_INT 1
17505: DEC
17506: ST_TO_ADDR
17507: LD_INT 3
17509: PUSH
17510: FOR_TO
17511: IFFALSE 17537
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17513: LD_VAR 0 2
17517: PPUSH
17518: CALL_OW 274
17522: PPUSH
17523: LD_VAR 0 3
17527: PPUSH
17528: LD_INT 99999
17530: PPUSH
17531: CALL_OW 277
17535: GO 17510
17537: POP
17538: POP
17539: GO 17494
17541: POP
17542: POP
// end ;
17543: LD_VAR 0 1
17547: RET
// export function hHackSetLevel10 ; var i , j ; begin
17548: LD_INT 0
17550: PPUSH
17551: PPUSH
17552: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17553: LD_ADDR_VAR 0 2
17557: PUSH
17558: LD_INT 21
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 69
17572: PUSH
17573: FOR_IN
17574: IFFALSE 17626
// if IsSelected ( i ) then
17576: LD_VAR 0 2
17580: PPUSH
17581: CALL_OW 306
17585: IFFALSE 17624
// begin for j := 1 to 4 do
17587: LD_ADDR_VAR 0 3
17591: PUSH
17592: DOUBLE
17593: LD_INT 1
17595: DEC
17596: ST_TO_ADDR
17597: LD_INT 4
17599: PUSH
17600: FOR_TO
17601: IFFALSE 17622
// SetSkill ( i , j , 10 ) ;
17603: LD_VAR 0 2
17607: PPUSH
17608: LD_VAR 0 3
17612: PPUSH
17613: LD_INT 10
17615: PPUSH
17616: CALL_OW 237
17620: GO 17600
17622: POP
17623: POP
// end ;
17624: GO 17573
17626: POP
17627: POP
// end ;
17628: LD_VAR 0 1
17632: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17633: LD_INT 0
17635: PPUSH
17636: PPUSH
17637: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17638: LD_ADDR_VAR 0 2
17642: PUSH
17643: LD_INT 22
17645: PUSH
17646: LD_OWVAR 2
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 21
17657: PUSH
17658: LD_INT 1
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PPUSH
17669: CALL_OW 69
17673: PUSH
17674: FOR_IN
17675: IFFALSE 17716
// begin for j := 1 to 4 do
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: DOUBLE
17683: LD_INT 1
17685: DEC
17686: ST_TO_ADDR
17687: LD_INT 4
17689: PUSH
17690: FOR_TO
17691: IFFALSE 17712
// SetSkill ( i , j , 10 ) ;
17693: LD_VAR 0 2
17697: PPUSH
17698: LD_VAR 0 3
17702: PPUSH
17703: LD_INT 10
17705: PPUSH
17706: CALL_OW 237
17710: GO 17690
17712: POP
17713: POP
// end ;
17714: GO 17674
17716: POP
17717: POP
// end ;
17718: LD_VAR 0 1
17722: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17723: LD_INT 0
17725: PPUSH
// uc_side := your_side ;
17726: LD_ADDR_OWVAR 20
17730: PUSH
17731: LD_OWVAR 2
17735: ST_TO_ADDR
// uc_nation := nation ;
17736: LD_ADDR_OWVAR 21
17740: PUSH
17741: LD_VAR 0 1
17745: ST_TO_ADDR
// InitHc ;
17746: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17750: LD_INT 0
17752: PPUSH
17753: LD_VAR 0 2
17757: PPUSH
17758: LD_VAR 0 3
17762: PPUSH
17763: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17767: LD_VAR 0 4
17771: PPUSH
17772: LD_VAR 0 5
17776: PPUSH
17777: CALL_OW 428
17781: PUSH
17782: LD_INT 0
17784: EQUAL
17785: IFFALSE 17809
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17787: CALL_OW 44
17791: PPUSH
17792: LD_VAR 0 4
17796: PPUSH
17797: LD_VAR 0 5
17801: PPUSH
17802: LD_INT 1
17804: PPUSH
17805: CALL_OW 48
// end ;
17809: LD_VAR 0 6
17813: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17814: LD_INT 0
17816: PPUSH
17817: PPUSH
// uc_side := your_side ;
17818: LD_ADDR_OWVAR 20
17822: PUSH
17823: LD_OWVAR 2
17827: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17828: LD_VAR 0 1
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: LD_INT 3
17841: PUSH
17842: LD_INT 4
17844: PUSH
17845: LD_INT 5
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: IN
17855: IFFALSE 17867
// uc_nation := nation_american else
17857: LD_ADDR_OWVAR 21
17861: PUSH
17862: LD_INT 1
17864: ST_TO_ADDR
17865: GO 17910
// if chassis in [ 11 , 12 , 13 , 14 ] then
17867: LD_VAR 0 1
17871: PUSH
17872: LD_INT 11
17874: PUSH
17875: LD_INT 12
17877: PUSH
17878: LD_INT 13
17880: PUSH
17881: LD_INT 14
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: IN
17890: IFFALSE 17902
// uc_nation := nation_arabian else
17892: LD_ADDR_OWVAR 21
17896: PUSH
17897: LD_INT 2
17899: ST_TO_ADDR
17900: GO 17910
// uc_nation := nation_russian ;
17902: LD_ADDR_OWVAR 21
17906: PUSH
17907: LD_INT 3
17909: ST_TO_ADDR
// vc_chassis := chassis ;
17910: LD_ADDR_OWVAR 37
17914: PUSH
17915: LD_VAR 0 1
17919: ST_TO_ADDR
// vc_engine := engine ;
17920: LD_ADDR_OWVAR 39
17924: PUSH
17925: LD_VAR 0 2
17929: ST_TO_ADDR
// vc_control := control ;
17930: LD_ADDR_OWVAR 38
17934: PUSH
17935: LD_VAR 0 3
17939: ST_TO_ADDR
// vc_weapon := weapon ;
17940: LD_ADDR_OWVAR 40
17944: PUSH
17945: LD_VAR 0 4
17949: ST_TO_ADDR
// un := CreateVehicle ;
17950: LD_ADDR_VAR 0 8
17954: PUSH
17955: CALL_OW 45
17959: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17960: LD_VAR 0 8
17964: PPUSH
17965: LD_INT 0
17967: PPUSH
17968: LD_INT 5
17970: PPUSH
17971: CALL_OW 12
17975: PPUSH
17976: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17980: LD_VAR 0 8
17984: PPUSH
17985: LD_VAR 0 5
17989: PPUSH
17990: LD_VAR 0 6
17994: PPUSH
17995: LD_INT 1
17997: PPUSH
17998: CALL_OW 48
// end ;
18002: LD_VAR 0 7
18006: RET
// export hInvincible ; every 1 do
18007: GO 18009
18009: DISABLE
// hInvincible := [ ] ;
18010: LD_ADDR_EXP 96
18014: PUSH
18015: EMPTY
18016: ST_TO_ADDR
18017: END
// every 10 do var i ;
18018: GO 18020
18020: DISABLE
18021: LD_INT 0
18023: PPUSH
// begin enable ;
18024: ENABLE
// if not hInvincible then
18025: LD_EXP 96
18029: NOT
18030: IFFALSE 18034
// exit ;
18032: GO 18078
// for i in hInvincible do
18034: LD_ADDR_VAR 0 1
18038: PUSH
18039: LD_EXP 96
18043: PUSH
18044: FOR_IN
18045: IFFALSE 18076
// if GetLives ( i ) < 1000 then
18047: LD_VAR 0 1
18051: PPUSH
18052: CALL_OW 256
18056: PUSH
18057: LD_INT 1000
18059: LESS
18060: IFFALSE 18074
// SetLives ( i , 1000 ) ;
18062: LD_VAR 0 1
18066: PPUSH
18067: LD_INT 1000
18069: PPUSH
18070: CALL_OW 234
18074: GO 18044
18076: POP
18077: POP
// end ;
18078: PPOPN 1
18080: END
// export function hHackInvincible ; var i ; begin
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18085: LD_ADDR_VAR 0 2
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: LD_INT 21
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 21
18105: PUSH
18106: LD_INT 2
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PUSH
18123: FOR_IN
18124: IFFALSE 18185
// if IsSelected ( i ) then
18126: LD_VAR 0 2
18130: PPUSH
18131: CALL_OW 306
18135: IFFALSE 18183
// begin if i in hInvincible then
18137: LD_VAR 0 2
18141: PUSH
18142: LD_EXP 96
18146: IN
18147: IFFALSE 18167
// hInvincible := hInvincible diff i else
18149: LD_ADDR_EXP 96
18153: PUSH
18154: LD_EXP 96
18158: PUSH
18159: LD_VAR 0 2
18163: DIFF
18164: ST_TO_ADDR
18165: GO 18183
// hInvincible := hInvincible union i ;
18167: LD_ADDR_EXP 96
18171: PUSH
18172: LD_EXP 96
18176: PUSH
18177: LD_VAR 0 2
18181: UNION
18182: ST_TO_ADDR
// end ;
18183: GO 18123
18185: POP
18186: POP
// end ;
18187: LD_VAR 0 1
18191: RET
// export function hHackInvisible ; var i , j ; begin
18192: LD_INT 0
18194: PPUSH
18195: PPUSH
18196: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18197: LD_ADDR_VAR 0 2
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PPUSH
18212: CALL_OW 69
18216: PUSH
18217: FOR_IN
18218: IFFALSE 18242
// if IsSelected ( i ) then
18220: LD_VAR 0 2
18224: PPUSH
18225: CALL_OW 306
18229: IFFALSE 18240
// ComForceInvisible ( i ) ;
18231: LD_VAR 0 2
18235: PPUSH
18236: CALL_OW 496
18240: GO 18217
18242: POP
18243: POP
// end ;
18244: LD_VAR 0 1
18248: RET
// export function hHackChangeYourSide ; begin
18249: LD_INT 0
18251: PPUSH
// if your_side = 8 then
18252: LD_OWVAR 2
18256: PUSH
18257: LD_INT 8
18259: EQUAL
18260: IFFALSE 18272
// your_side := 0 else
18262: LD_ADDR_OWVAR 2
18266: PUSH
18267: LD_INT 0
18269: ST_TO_ADDR
18270: GO 18286
// your_side := your_side + 1 ;
18272: LD_ADDR_OWVAR 2
18276: PUSH
18277: LD_OWVAR 2
18281: PUSH
18282: LD_INT 1
18284: PLUS
18285: ST_TO_ADDR
// end ;
18286: LD_VAR 0 1
18290: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18291: LD_INT 0
18293: PPUSH
18294: PPUSH
18295: PPUSH
// for i in all_units do
18296: LD_ADDR_VAR 0 2
18300: PUSH
18301: LD_OWVAR 3
18305: PUSH
18306: FOR_IN
18307: IFFALSE 18385
// if IsSelected ( i ) then
18309: LD_VAR 0 2
18313: PPUSH
18314: CALL_OW 306
18318: IFFALSE 18383
// begin j := GetSide ( i ) ;
18320: LD_ADDR_VAR 0 3
18324: PUSH
18325: LD_VAR 0 2
18329: PPUSH
18330: CALL_OW 255
18334: ST_TO_ADDR
// if j = 8 then
18335: LD_VAR 0 3
18339: PUSH
18340: LD_INT 8
18342: EQUAL
18343: IFFALSE 18355
// j := 0 else
18345: LD_ADDR_VAR 0 3
18349: PUSH
18350: LD_INT 0
18352: ST_TO_ADDR
18353: GO 18369
// j := j + 1 ;
18355: LD_ADDR_VAR 0 3
18359: PUSH
18360: LD_VAR 0 3
18364: PUSH
18365: LD_INT 1
18367: PLUS
18368: ST_TO_ADDR
// SetSide ( i , j ) ;
18369: LD_VAR 0 2
18373: PPUSH
18374: LD_VAR 0 3
18378: PPUSH
18379: CALL_OW 235
// end ;
18383: GO 18306
18385: POP
18386: POP
// end ;
18387: LD_VAR 0 1
18391: RET
// export function hHackFog ; begin
18392: LD_INT 0
18394: PPUSH
// FogOff ( true ) ;
18395: LD_INT 1
18397: PPUSH
18398: CALL_OW 344
// end ;
18402: LD_VAR 0 1
18406: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18407: LD_INT 0
18409: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18410: LD_VAR 0 1
18414: PPUSH
18415: LD_VAR 0 2
18419: PPUSH
18420: LD_VAR 0 3
18424: PPUSH
18425: LD_INT 1
18427: PPUSH
18428: LD_INT 1
18430: PPUSH
18431: CALL_OW 483
// CenterOnXY ( x , y ) ;
18435: LD_VAR 0 2
18439: PPUSH
18440: LD_VAR 0 3
18444: PPUSH
18445: CALL_OW 84
// end ;
18449: LD_VAR 0 4
18453: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18454: LD_INT 0
18456: PPUSH
18457: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18458: LD_VAR 0 1
18462: NOT
18463: PUSH
18464: LD_VAR 0 2
18468: PPUSH
18469: LD_VAR 0 3
18473: PPUSH
18474: CALL_OW 488
18478: NOT
18479: OR
18480: PUSH
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 266
18490: PUSH
18491: LD_INT 3
18493: NONEQUAL
18494: PUSH
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL_OW 247
18504: PUSH
18505: LD_INT 1
18507: EQUAL
18508: NOT
18509: AND
18510: OR
18511: IFFALSE 18515
// exit ;
18513: GO 18664
// if GetType ( factory ) = unit_human then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 247
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: IFFALSE 18545
// factory := IsInUnit ( factory ) ;
18530: LD_ADDR_VAR 0 1
18534: PUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: CALL_OW 310
18544: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 266
18554: PUSH
18555: LD_INT 3
18557: NONEQUAL
18558: IFFALSE 18562
// exit ;
18560: GO 18664
// if HexInfo ( x , y ) = factory then
18562: LD_VAR 0 2
18566: PPUSH
18567: LD_VAR 0 3
18571: PPUSH
18572: CALL_OW 428
18576: PUSH
18577: LD_VAR 0 1
18581: EQUAL
18582: IFFALSE 18609
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18584: LD_ADDR_EXP 97
18588: PUSH
18589: LD_EXP 97
18593: PPUSH
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_INT 0
18601: PPUSH
18602: CALL_OW 1
18606: ST_TO_ADDR
18607: GO 18660
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18609: LD_ADDR_EXP 97
18613: PUSH
18614: LD_EXP 97
18618: PPUSH
18619: LD_VAR 0 1
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 255
18633: PUSH
18634: LD_VAR 0 1
18638: PUSH
18639: LD_VAR 0 2
18643: PUSH
18644: LD_VAR 0 3
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: PPUSH
18655: CALL_OW 1
18659: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18660: CALL 18669 0 0
// end ;
18664: LD_VAR 0 4
18668: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18669: LD_INT 0
18671: PPUSH
18672: PPUSH
18673: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18674: LD_STRING resetFactoryWaypoint();
18676: PPUSH
18677: CALL_OW 559
// if factoryWaypoints then
18681: LD_EXP 97
18685: IFFALSE 18811
// begin list := PrepareArray ( factoryWaypoints ) ;
18687: LD_ADDR_VAR 0 3
18691: PUSH
18692: LD_EXP 97
18696: PPUSH
18697: CALL 65188 0 1
18701: ST_TO_ADDR
// for i := 1 to list do
18702: LD_ADDR_VAR 0 2
18706: PUSH
18707: DOUBLE
18708: LD_INT 1
18710: DEC
18711: ST_TO_ADDR
18712: LD_VAR 0 3
18716: PUSH
18717: FOR_TO
18718: IFFALSE 18809
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18720: LD_STRING setFactoryWaypointXY(
18722: PUSH
18723: LD_VAR 0 3
18727: PUSH
18728: LD_VAR 0 2
18732: ARRAY
18733: PUSH
18734: LD_INT 1
18736: ARRAY
18737: STR
18738: PUSH
18739: LD_STRING ,
18741: STR
18742: PUSH
18743: LD_VAR 0 3
18747: PUSH
18748: LD_VAR 0 2
18752: ARRAY
18753: PUSH
18754: LD_INT 2
18756: ARRAY
18757: STR
18758: PUSH
18759: LD_STRING ,
18761: STR
18762: PUSH
18763: LD_VAR 0 3
18767: PUSH
18768: LD_VAR 0 2
18772: ARRAY
18773: PUSH
18774: LD_INT 3
18776: ARRAY
18777: STR
18778: PUSH
18779: LD_STRING ,
18781: STR
18782: PUSH
18783: LD_VAR 0 3
18787: PUSH
18788: LD_VAR 0 2
18792: ARRAY
18793: PUSH
18794: LD_INT 4
18796: ARRAY
18797: STR
18798: PUSH
18799: LD_STRING )
18801: STR
18802: PPUSH
18803: CALL_OW 559
18807: GO 18717
18809: POP
18810: POP
// end ; end ;
18811: LD_VAR 0 1
18815: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
18816: LD_INT 0
18818: PPUSH
// if HexInfo ( x , y ) = warehouse then
18819: LD_VAR 0 2
18823: PPUSH
18824: LD_VAR 0 3
18828: PPUSH
18829: CALL_OW 428
18833: PUSH
18834: LD_VAR 0 1
18838: EQUAL
18839: IFFALSE 18866
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
18841: LD_ADDR_EXP 98
18845: PUSH
18846: LD_EXP 98
18850: PPUSH
18851: LD_VAR 0 1
18855: PPUSH
18856: LD_INT 0
18858: PPUSH
18859: CALL_OW 1
18863: ST_TO_ADDR
18864: GO 18917
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
18866: LD_ADDR_EXP 98
18870: PUSH
18871: LD_EXP 98
18875: PPUSH
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_VAR 0 1
18885: PPUSH
18886: CALL_OW 255
18890: PUSH
18891: LD_VAR 0 1
18895: PUSH
18896: LD_VAR 0 2
18900: PUSH
18901: LD_VAR 0 3
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: PPUSH
18912: CALL_OW 1
18916: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
18917: CALL 18926 0 0
// end ;
18921: LD_VAR 0 4
18925: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
18926: LD_INT 0
18928: PPUSH
18929: PPUSH
18930: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
18931: LD_STRING resetWarehouseGatheringPoints();
18933: PPUSH
18934: CALL_OW 559
// if warehouseGatheringPoints then
18938: LD_EXP 98
18942: IFFALSE 19068
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
18944: LD_ADDR_VAR 0 3
18948: PUSH
18949: LD_EXP 98
18953: PPUSH
18954: CALL 65188 0 1
18958: ST_TO_ADDR
// for i := 1 to list do
18959: LD_ADDR_VAR 0 2
18963: PUSH
18964: DOUBLE
18965: LD_INT 1
18967: DEC
18968: ST_TO_ADDR
18969: LD_VAR 0 3
18973: PUSH
18974: FOR_TO
18975: IFFALSE 19066
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18977: LD_STRING setWarehouseGatheringPointXY(
18979: PUSH
18980: LD_VAR 0 3
18984: PUSH
18985: LD_VAR 0 2
18989: ARRAY
18990: PUSH
18991: LD_INT 1
18993: ARRAY
18994: STR
18995: PUSH
18996: LD_STRING ,
18998: STR
18999: PUSH
19000: LD_VAR 0 3
19004: PUSH
19005: LD_VAR 0 2
19009: ARRAY
19010: PUSH
19011: LD_INT 2
19013: ARRAY
19014: STR
19015: PUSH
19016: LD_STRING ,
19018: STR
19019: PUSH
19020: LD_VAR 0 3
19024: PUSH
19025: LD_VAR 0 2
19029: ARRAY
19030: PUSH
19031: LD_INT 3
19033: ARRAY
19034: STR
19035: PUSH
19036: LD_STRING ,
19038: STR
19039: PUSH
19040: LD_VAR 0 3
19044: PUSH
19045: LD_VAR 0 2
19049: ARRAY
19050: PUSH
19051: LD_INT 4
19053: ARRAY
19054: STR
19055: PUSH
19056: LD_STRING )
19058: STR
19059: PPUSH
19060: CALL_OW 559
19064: GO 18974
19066: POP
19067: POP
// end ; end ;
19068: LD_VAR 0 1
19072: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19073: LD_EXP 98
19077: IFFALSE 19762
19079: GO 19081
19081: DISABLE
19082: LD_INT 0
19084: PPUSH
19085: PPUSH
19086: PPUSH
19087: PPUSH
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
// begin enable ;
19093: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19094: LD_ADDR_VAR 0 3
19098: PUSH
19099: LD_EXP 98
19103: PPUSH
19104: CALL 65188 0 1
19108: ST_TO_ADDR
// if not list then
19109: LD_VAR 0 3
19113: NOT
19114: IFFALSE 19118
// exit ;
19116: GO 19762
// for i := 1 to list do
19118: LD_ADDR_VAR 0 1
19122: PUSH
19123: DOUBLE
19124: LD_INT 1
19126: DEC
19127: ST_TO_ADDR
19128: LD_VAR 0 3
19132: PUSH
19133: FOR_TO
19134: IFFALSE 19760
// begin depot := list [ i ] [ 2 ] ;
19136: LD_ADDR_VAR 0 8
19140: PUSH
19141: LD_VAR 0 3
19145: PUSH
19146: LD_VAR 0 1
19150: ARRAY
19151: PUSH
19152: LD_INT 2
19154: ARRAY
19155: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19156: LD_ADDR_VAR 0 5
19160: PUSH
19161: LD_VAR 0 3
19165: PUSH
19166: LD_VAR 0 1
19170: ARRAY
19171: PUSH
19172: LD_INT 1
19174: ARRAY
19175: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19176: LD_VAR 0 8
19180: PPUSH
19181: CALL_OW 301
19185: PUSH
19186: LD_VAR 0 5
19190: PUSH
19191: LD_VAR 0 8
19195: PPUSH
19196: CALL_OW 255
19200: NONEQUAL
19201: OR
19202: IFFALSE 19231
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19204: LD_ADDR_EXP 98
19208: PUSH
19209: LD_EXP 98
19213: PPUSH
19214: LD_VAR 0 8
19218: PPUSH
19219: LD_INT 0
19221: PPUSH
19222: CALL_OW 1
19226: ST_TO_ADDR
// exit ;
19227: POP
19228: POP
19229: GO 19762
// end ; x := list [ i ] [ 3 ] ;
19231: LD_ADDR_VAR 0 6
19235: PUSH
19236: LD_VAR 0 3
19240: PUSH
19241: LD_VAR 0 1
19245: ARRAY
19246: PUSH
19247: LD_INT 3
19249: ARRAY
19250: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19251: LD_ADDR_VAR 0 7
19255: PUSH
19256: LD_VAR 0 3
19260: PUSH
19261: LD_VAR 0 1
19265: ARRAY
19266: PUSH
19267: LD_INT 4
19269: ARRAY
19270: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19271: LD_ADDR_VAR 0 9
19275: PUSH
19276: LD_VAR 0 6
19280: PPUSH
19281: LD_VAR 0 7
19285: PPUSH
19286: LD_INT 16
19288: PPUSH
19289: CALL 63776 0 3
19293: ST_TO_ADDR
// if not cratesNearbyPoint then
19294: LD_VAR 0 9
19298: NOT
19299: IFFALSE 19305
// exit ;
19301: POP
19302: POP
19303: GO 19762
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19305: LD_ADDR_VAR 0 4
19309: PUSH
19310: LD_INT 22
19312: PUSH
19313: LD_VAR 0 5
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 3
19324: PUSH
19325: LD_INT 60
19327: PUSH
19328: EMPTY
19329: LIST
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 91
19337: PUSH
19338: LD_VAR 0 8
19342: PUSH
19343: LD_INT 6
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: LD_INT 25
19356: PUSH
19357: LD_INT 2
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 25
19366: PUSH
19367: LD_INT 16
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: PPUSH
19385: CALL_OW 69
19389: PUSH
19390: LD_VAR 0 8
19394: PPUSH
19395: CALL_OW 313
19399: PPUSH
19400: LD_INT 3
19402: PUSH
19403: LD_INT 60
19405: PUSH
19406: EMPTY
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 25
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 25
19428: PUSH
19429: LD_INT 16
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PPUSH
19445: CALL_OW 72
19449: UNION
19450: ST_TO_ADDR
// if tmp then
19451: LD_VAR 0 4
19455: IFFALSE 19535
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19457: LD_ADDR_VAR 0 4
19461: PUSH
19462: LD_VAR 0 4
19466: PPUSH
19467: LD_INT 3
19469: PPUSH
19470: CALL 61745 0 2
19474: ST_TO_ADDR
// for j in tmp do
19475: LD_ADDR_VAR 0 2
19479: PUSH
19480: LD_VAR 0 4
19484: PUSH
19485: FOR_IN
19486: IFFALSE 19529
// begin if IsInUnit ( j ) then
19488: LD_VAR 0 2
19492: PPUSH
19493: CALL_OW 310
19497: IFFALSE 19508
// ComExit ( j ) ;
19499: LD_VAR 0 2
19503: PPUSH
19504: CALL 61828 0 1
// AddComCollect ( j , x , y ) ;
19508: LD_VAR 0 2
19512: PPUSH
19513: LD_VAR 0 6
19517: PPUSH
19518: LD_VAR 0 7
19522: PPUSH
19523: CALL_OW 177
// end ;
19527: GO 19485
19529: POP
19530: POP
// exit ;
19531: POP
19532: POP
19533: GO 19762
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19535: LD_ADDR_VAR 0 4
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_VAR 0 5
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 91
19554: PUSH
19555: LD_VAR 0 8
19559: PUSH
19560: LD_INT 8
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 34
19573: PUSH
19574: LD_INT 12
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 34
19583: PUSH
19584: LD_INT 51
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 34
19593: PUSH
19594: LD_INT 32
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 34
19603: PUSH
19604: LD_INT 89
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: PPUSH
19623: CALL_OW 69
19627: ST_TO_ADDR
// if tmp then
19628: LD_VAR 0 4
19632: IFFALSE 19758
// begin for j in tmp do
19634: LD_ADDR_VAR 0 2
19638: PUSH
19639: LD_VAR 0 4
19643: PUSH
19644: FOR_IN
19645: IFFALSE 19756
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19647: LD_VAR 0 2
19651: PPUSH
19652: CALL_OW 262
19656: PUSH
19657: LD_INT 3
19659: EQUAL
19660: PUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: CALL_OW 261
19670: PUSH
19671: LD_INT 20
19673: GREATER
19674: OR
19675: PUSH
19676: LD_VAR 0 2
19680: PPUSH
19681: CALL_OW 314
19685: NOT
19686: AND
19687: PUSH
19688: LD_VAR 0 2
19692: PPUSH
19693: CALL_OW 263
19697: PUSH
19698: LD_INT 1
19700: NONEQUAL
19701: PUSH
19702: LD_VAR 0 2
19706: PPUSH
19707: CALL_OW 311
19711: OR
19712: AND
19713: IFFALSE 19754
// begin ComCollect ( j , x , y ) ;
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_VAR 0 6
19724: PPUSH
19725: LD_VAR 0 7
19729: PPUSH
19730: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19734: LD_VAR 0 2
19738: PPUSH
19739: LD_VAR 0 8
19743: PPUSH
19744: CALL_OW 172
// exit ;
19748: POP
19749: POP
19750: POP
19751: POP
19752: GO 19762
// end ;
19754: GO 19644
19756: POP
19757: POP
// end ; end ;
19758: GO 19133
19760: POP
19761: POP
// end ; end_of_file
19762: PPOPN 9
19764: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19765: LD_INT 0
19767: PPUSH
19768: PPUSH
19769: PPUSH
19770: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19771: LD_VAR 0 1
19775: PPUSH
19776: CALL_OW 264
19780: PUSH
19781: LD_INT 91
19783: EQUAL
19784: IFFALSE 19856
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19786: LD_INT 68
19788: PPUSH
19789: LD_VAR 0 1
19793: PPUSH
19794: CALL_OW 255
19798: PPUSH
19799: CALL_OW 321
19803: PUSH
19804: LD_INT 2
19806: EQUAL
19807: IFFALSE 19819
// eff := 70 else
19809: LD_ADDR_VAR 0 4
19813: PUSH
19814: LD_INT 70
19816: ST_TO_ADDR
19817: GO 19827
// eff := 30 ;
19819: LD_ADDR_VAR 0 4
19823: PUSH
19824: LD_INT 30
19826: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL_OW 250
19836: PPUSH
19837: LD_VAR 0 1
19841: PPUSH
19842: CALL_OW 251
19846: PPUSH
19847: LD_VAR 0 4
19851: PPUSH
19852: CALL_OW 495
// end ; end ;
19856: LD_VAR 0 2
19860: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19861: LD_INT 0
19863: PPUSH
// end ;
19864: LD_VAR 0 4
19868: RET
// export function SOS_Command ( cmd ) ; begin
19869: LD_INT 0
19871: PPUSH
// end ;
19872: LD_VAR 0 2
19876: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19877: LD_INT 0
19879: PPUSH
// end ;
19880: LD_VAR 0 6
19884: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19885: LD_INT 0
19887: PPUSH
19888: PPUSH
// if not vehicle or not factory then
19889: LD_VAR 0 1
19893: NOT
19894: PUSH
19895: LD_VAR 0 2
19899: NOT
19900: OR
19901: IFFALSE 19905
// exit ;
19903: GO 20136
// if factoryWaypoints >= factory then
19905: LD_EXP 97
19909: PUSH
19910: LD_VAR 0 2
19914: GREATEREQUAL
19915: IFFALSE 20136
// if factoryWaypoints [ factory ] then
19917: LD_EXP 97
19921: PUSH
19922: LD_VAR 0 2
19926: ARRAY
19927: IFFALSE 20136
// begin if GetControl ( vehicle ) = control_manual then
19929: LD_VAR 0 1
19933: PPUSH
19934: CALL_OW 263
19938: PUSH
19939: LD_INT 1
19941: EQUAL
19942: IFFALSE 20023
// begin driver := IsDrivenBy ( vehicle ) ;
19944: LD_ADDR_VAR 0 4
19948: PUSH
19949: LD_VAR 0 1
19953: PPUSH
19954: CALL_OW 311
19958: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19959: LD_VAR 0 4
19963: PPUSH
19964: LD_EXP 97
19968: PUSH
19969: LD_VAR 0 2
19973: ARRAY
19974: PUSH
19975: LD_INT 3
19977: ARRAY
19978: PPUSH
19979: LD_EXP 97
19983: PUSH
19984: LD_VAR 0 2
19988: ARRAY
19989: PUSH
19990: LD_INT 4
19992: ARRAY
19993: PPUSH
19994: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19998: LD_VAR 0 4
20002: PPUSH
20003: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20007: LD_VAR 0 4
20011: PPUSH
20012: LD_VAR 0 2
20016: PPUSH
20017: CALL_OW 180
// end else
20021: GO 20136
// if GetControl ( vehicle ) = control_remote then
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL_OW 263
20032: PUSH
20033: LD_INT 2
20035: EQUAL
20036: IFFALSE 20097
// begin wait ( 0 0$2 ) ;
20038: LD_INT 70
20040: PPUSH
20041: CALL_OW 67
// if Connect ( vehicle ) then
20045: LD_VAR 0 1
20049: PPUSH
20050: CALL 32160 0 1
20054: IFFALSE 20095
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20056: LD_VAR 0 1
20060: PPUSH
20061: LD_EXP 97
20065: PUSH
20066: LD_VAR 0 2
20070: ARRAY
20071: PUSH
20072: LD_INT 3
20074: ARRAY
20075: PPUSH
20076: LD_EXP 97
20080: PUSH
20081: LD_VAR 0 2
20085: ARRAY
20086: PUSH
20087: LD_INT 4
20089: ARRAY
20090: PPUSH
20091: CALL_OW 171
// end else
20095: GO 20136
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20097: LD_VAR 0 1
20101: PPUSH
20102: LD_EXP 97
20106: PUSH
20107: LD_VAR 0 2
20111: ARRAY
20112: PUSH
20113: LD_INT 3
20115: ARRAY
20116: PPUSH
20117: LD_EXP 97
20121: PUSH
20122: LD_VAR 0 2
20126: ARRAY
20127: PUSH
20128: LD_INT 4
20130: ARRAY
20131: PPUSH
20132: CALL_OW 171
// end ; end ;
20136: LD_VAR 0 3
20140: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20141: LD_INT 0
20143: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20144: LD_VAR 0 1
20148: PUSH
20149: LD_INT 250
20151: EQUAL
20152: PUSH
20153: LD_VAR 0 2
20157: PPUSH
20158: CALL_OW 264
20162: PUSH
20163: LD_INT 81
20165: EQUAL
20166: AND
20167: IFFALSE 20188
// MinerPlaceMine ( unit , x , y ) ;
20169: LD_VAR 0 2
20173: PPUSH
20174: LD_VAR 0 4
20178: PPUSH
20179: LD_VAR 0 5
20183: PPUSH
20184: CALL 22573 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20188: LD_VAR 0 1
20192: PUSH
20193: LD_INT 251
20195: EQUAL
20196: PUSH
20197: LD_VAR 0 2
20201: PPUSH
20202: CALL_OW 264
20206: PUSH
20207: LD_INT 81
20209: EQUAL
20210: AND
20211: IFFALSE 20232
// MinerDetonateMine ( unit , x , y ) ;
20213: LD_VAR 0 2
20217: PPUSH
20218: LD_VAR 0 4
20222: PPUSH
20223: LD_VAR 0 5
20227: PPUSH
20228: CALL 22848 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20232: LD_VAR 0 1
20236: PUSH
20237: LD_INT 252
20239: EQUAL
20240: PUSH
20241: LD_VAR 0 2
20245: PPUSH
20246: CALL_OW 264
20250: PUSH
20251: LD_INT 81
20253: EQUAL
20254: AND
20255: IFFALSE 20276
// MinerCreateMinefield ( unit , x , y ) ;
20257: LD_VAR 0 2
20261: PPUSH
20262: LD_VAR 0 4
20266: PPUSH
20267: LD_VAR 0 5
20271: PPUSH
20272: CALL 23265 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20276: LD_VAR 0 1
20280: PUSH
20281: LD_INT 253
20283: EQUAL
20284: PUSH
20285: LD_VAR 0 2
20289: PPUSH
20290: CALL_OW 257
20294: PUSH
20295: LD_INT 5
20297: EQUAL
20298: AND
20299: IFFALSE 20320
// ComBinocular ( unit , x , y ) ;
20301: LD_VAR 0 2
20305: PPUSH
20306: LD_VAR 0 4
20310: PPUSH
20311: LD_VAR 0 5
20315: PPUSH
20316: CALL 23634 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20320: LD_VAR 0 1
20324: PUSH
20325: LD_INT 254
20327: EQUAL
20328: PUSH
20329: LD_VAR 0 2
20333: PPUSH
20334: CALL_OW 264
20338: PUSH
20339: LD_INT 99
20341: EQUAL
20342: AND
20343: PUSH
20344: LD_VAR 0 3
20348: PPUSH
20349: CALL_OW 263
20353: PUSH
20354: LD_INT 3
20356: EQUAL
20357: AND
20358: IFFALSE 20374
// HackDestroyVehicle ( unit , selectedUnit ) ;
20360: LD_VAR 0 2
20364: PPUSH
20365: LD_VAR 0 3
20369: PPUSH
20370: CALL 21937 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20374: LD_VAR 0 1
20378: PUSH
20379: LD_INT 255
20381: EQUAL
20382: PUSH
20383: LD_VAR 0 2
20387: PPUSH
20388: CALL_OW 264
20392: PUSH
20393: LD_INT 14
20395: PUSH
20396: LD_INT 53
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: IN
20403: AND
20404: PUSH
20405: LD_VAR 0 4
20409: PPUSH
20410: LD_VAR 0 5
20414: PPUSH
20415: CALL_OW 488
20419: AND
20420: IFFALSE 20444
// CutTreeXYR ( unit , x , y , 12 ) ;
20422: LD_VAR 0 2
20426: PPUSH
20427: LD_VAR 0 4
20431: PPUSH
20432: LD_VAR 0 5
20436: PPUSH
20437: LD_INT 12
20439: PPUSH
20440: CALL 20507 0 4
// if cmd = 256 then
20444: LD_VAR 0 1
20448: PUSH
20449: LD_INT 256
20451: EQUAL
20452: IFFALSE 20473
// SetFactoryWaypoint ( unit , x , y ) ;
20454: LD_VAR 0 2
20458: PPUSH
20459: LD_VAR 0 4
20463: PPUSH
20464: LD_VAR 0 5
20468: PPUSH
20469: CALL 18454 0 3
// if cmd = 257 then
20473: LD_VAR 0 1
20477: PUSH
20478: LD_INT 257
20480: EQUAL
20481: IFFALSE 20502
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20483: LD_VAR 0 2
20487: PPUSH
20488: LD_VAR 0 4
20492: PPUSH
20493: LD_VAR 0 5
20497: PPUSH
20498: CALL 18816 0 3
// end ;
20502: LD_VAR 0 6
20506: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20518: LD_VAR 0 1
20522: NOT
20523: PUSH
20524: LD_VAR 0 2
20528: PPUSH
20529: LD_VAR 0 3
20533: PPUSH
20534: CALL_OW 488
20538: NOT
20539: OR
20540: PUSH
20541: LD_VAR 0 4
20545: NOT
20546: OR
20547: IFFALSE 20551
// exit ;
20549: GO 20891
// list := [ ] ;
20551: LD_ADDR_VAR 0 13
20555: PUSH
20556: EMPTY
20557: ST_TO_ADDR
// if x - r < 0 then
20558: LD_VAR 0 2
20562: PUSH
20563: LD_VAR 0 4
20567: MINUS
20568: PUSH
20569: LD_INT 0
20571: LESS
20572: IFFALSE 20584
// min_x := 0 else
20574: LD_ADDR_VAR 0 7
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
20582: GO 20600
// min_x := x - r ;
20584: LD_ADDR_VAR 0 7
20588: PUSH
20589: LD_VAR 0 2
20593: PUSH
20594: LD_VAR 0 4
20598: MINUS
20599: ST_TO_ADDR
// if y - r < 0 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_VAR 0 4
20609: MINUS
20610: PUSH
20611: LD_INT 0
20613: LESS
20614: IFFALSE 20626
// min_y := 0 else
20616: LD_ADDR_VAR 0 8
20620: PUSH
20621: LD_INT 0
20623: ST_TO_ADDR
20624: GO 20642
// min_y := y - r ;
20626: LD_ADDR_VAR 0 8
20630: PUSH
20631: LD_VAR 0 3
20635: PUSH
20636: LD_VAR 0 4
20640: MINUS
20641: ST_TO_ADDR
// max_x := x + r ;
20642: LD_ADDR_VAR 0 9
20646: PUSH
20647: LD_VAR 0 2
20651: PUSH
20652: LD_VAR 0 4
20656: PLUS
20657: ST_TO_ADDR
// max_y := y + r ;
20658: LD_ADDR_VAR 0 10
20662: PUSH
20663: LD_VAR 0 3
20667: PUSH
20668: LD_VAR 0 4
20672: PLUS
20673: ST_TO_ADDR
// for _x = min_x to max_x do
20674: LD_ADDR_VAR 0 11
20678: PUSH
20679: DOUBLE
20680: LD_VAR 0 7
20684: DEC
20685: ST_TO_ADDR
20686: LD_VAR 0 9
20690: PUSH
20691: FOR_TO
20692: IFFALSE 20809
// for _y = min_y to max_y do
20694: LD_ADDR_VAR 0 12
20698: PUSH
20699: DOUBLE
20700: LD_VAR 0 8
20704: DEC
20705: ST_TO_ADDR
20706: LD_VAR 0 10
20710: PUSH
20711: FOR_TO
20712: IFFALSE 20805
// begin if not ValidHex ( _x , _y ) then
20714: LD_VAR 0 11
20718: PPUSH
20719: LD_VAR 0 12
20723: PPUSH
20724: CALL_OW 488
20728: NOT
20729: IFFALSE 20733
// continue ;
20731: GO 20711
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20733: LD_VAR 0 11
20737: PPUSH
20738: LD_VAR 0 12
20742: PPUSH
20743: CALL_OW 351
20747: PUSH
20748: LD_VAR 0 11
20752: PPUSH
20753: LD_VAR 0 12
20757: PPUSH
20758: CALL_OW 554
20762: AND
20763: IFFALSE 20803
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20765: LD_ADDR_VAR 0 13
20769: PUSH
20770: LD_VAR 0 13
20774: PPUSH
20775: LD_VAR 0 13
20779: PUSH
20780: LD_INT 1
20782: PLUS
20783: PPUSH
20784: LD_VAR 0 11
20788: PUSH
20789: LD_VAR 0 12
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PPUSH
20798: CALL_OW 2
20802: ST_TO_ADDR
// end ;
20803: GO 20711
20805: POP
20806: POP
20807: GO 20691
20809: POP
20810: POP
// if not list then
20811: LD_VAR 0 13
20815: NOT
20816: IFFALSE 20820
// exit ;
20818: GO 20891
// for i in list do
20820: LD_ADDR_VAR 0 6
20824: PUSH
20825: LD_VAR 0 13
20829: PUSH
20830: FOR_IN
20831: IFFALSE 20889
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20833: LD_VAR 0 1
20837: PPUSH
20838: LD_STRING M
20840: PUSH
20841: LD_VAR 0 6
20845: PUSH
20846: LD_INT 1
20848: ARRAY
20849: PUSH
20850: LD_VAR 0 6
20854: PUSH
20855: LD_INT 2
20857: ARRAY
20858: PUSH
20859: LD_INT 0
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: PUSH
20880: EMPTY
20881: LIST
20882: PPUSH
20883: CALL_OW 447
20887: GO 20830
20889: POP
20890: POP
// end ;
20891: LD_VAR 0 5
20895: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20896: LD_EXP 100
20900: NOT
20901: IFFALSE 20951
20903: GO 20905
20905: DISABLE
// begin initHack := true ;
20906: LD_ADDR_EXP 100
20910: PUSH
20911: LD_INT 1
20913: ST_TO_ADDR
// hackTanks := [ ] ;
20914: LD_ADDR_EXP 101
20918: PUSH
20919: EMPTY
20920: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20921: LD_ADDR_EXP 102
20925: PUSH
20926: EMPTY
20927: ST_TO_ADDR
// hackLimit := 3 ;
20928: LD_ADDR_EXP 103
20932: PUSH
20933: LD_INT 3
20935: ST_TO_ADDR
// hackDist := 12 ;
20936: LD_ADDR_EXP 104
20940: PUSH
20941: LD_INT 12
20943: ST_TO_ADDR
// hackCounter := [ ] ;
20944: LD_ADDR_EXP 105
20948: PUSH
20949: EMPTY
20950: ST_TO_ADDR
// end ;
20951: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20952: LD_EXP 100
20956: PUSH
20957: LD_INT 34
20959: PUSH
20960: LD_INT 99
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL_OW 69
20971: AND
20972: IFFALSE 21225
20974: GO 20976
20976: DISABLE
20977: LD_INT 0
20979: PPUSH
20980: PPUSH
// begin enable ;
20981: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20982: LD_ADDR_VAR 0 1
20986: PUSH
20987: LD_INT 34
20989: PUSH
20990: LD_INT 99
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PPUSH
20997: CALL_OW 69
21001: PUSH
21002: FOR_IN
21003: IFFALSE 21223
// begin if not i in hackTanks then
21005: LD_VAR 0 1
21009: PUSH
21010: LD_EXP 101
21014: IN
21015: NOT
21016: IFFALSE 21099
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21018: LD_ADDR_EXP 101
21022: PUSH
21023: LD_EXP 101
21027: PPUSH
21028: LD_EXP 101
21032: PUSH
21033: LD_INT 1
21035: PLUS
21036: PPUSH
21037: LD_VAR 0 1
21041: PPUSH
21042: CALL_OW 1
21046: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21047: LD_ADDR_EXP 102
21051: PUSH
21052: LD_EXP 102
21056: PPUSH
21057: LD_EXP 102
21061: PUSH
21062: LD_INT 1
21064: PLUS
21065: PPUSH
21066: EMPTY
21067: PPUSH
21068: CALL_OW 1
21072: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21073: LD_ADDR_EXP 105
21077: PUSH
21078: LD_EXP 105
21082: PPUSH
21083: LD_EXP 105
21087: PUSH
21088: LD_INT 1
21090: PLUS
21091: PPUSH
21092: EMPTY
21093: PPUSH
21094: CALL_OW 1
21098: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL_OW 302
21108: NOT
21109: IFFALSE 21122
// begin HackUnlinkAll ( i ) ;
21111: LD_VAR 0 1
21115: PPUSH
21116: CALL 21228 0 1
// continue ;
21120: GO 21002
// end ; HackCheckCapturedStatus ( i ) ;
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL 21671 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21131: LD_ADDR_VAR 0 2
21135: PUSH
21136: LD_INT 81
21138: PUSH
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 255
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 33
21155: PUSH
21156: LD_INT 3
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 91
21165: PUSH
21166: LD_VAR 0 1
21170: PUSH
21171: LD_EXP 104
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 50
21183: PUSH
21184: EMPTY
21185: LIST
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: PPUSH
21193: CALL_OW 69
21197: ST_TO_ADDR
// if not tmp then
21198: LD_VAR 0 2
21202: NOT
21203: IFFALSE 21207
// continue ;
21205: GO 21002
// HackLink ( i , tmp ) ;
21207: LD_VAR 0 1
21211: PPUSH
21212: LD_VAR 0 2
21216: PPUSH
21217: CALL 21364 0 2
// end ;
21221: GO 21002
21223: POP
21224: POP
// end ;
21225: PPOPN 2
21227: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21228: LD_INT 0
21230: PPUSH
21231: PPUSH
21232: PPUSH
// if not hack in hackTanks then
21233: LD_VAR 0 1
21237: PUSH
21238: LD_EXP 101
21242: IN
21243: NOT
21244: IFFALSE 21248
// exit ;
21246: GO 21359
// index := GetElementIndex ( hackTanks , hack ) ;
21248: LD_ADDR_VAR 0 4
21252: PUSH
21253: LD_EXP 101
21257: PPUSH
21258: LD_VAR 0 1
21262: PPUSH
21263: CALL 28976 0 2
21267: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21268: LD_EXP 102
21272: PUSH
21273: LD_VAR 0 4
21277: ARRAY
21278: IFFALSE 21359
// begin for i in hackTanksCaptured [ index ] do
21280: LD_ADDR_VAR 0 3
21284: PUSH
21285: LD_EXP 102
21289: PUSH
21290: LD_VAR 0 4
21294: ARRAY
21295: PUSH
21296: FOR_IN
21297: IFFALSE 21323
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21299: LD_VAR 0 3
21303: PUSH
21304: LD_INT 1
21306: ARRAY
21307: PPUSH
21308: LD_VAR 0 3
21312: PUSH
21313: LD_INT 2
21315: ARRAY
21316: PPUSH
21317: CALL_OW 235
21321: GO 21296
21323: POP
21324: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21325: LD_ADDR_EXP 102
21329: PUSH
21330: LD_EXP 102
21334: PPUSH
21335: LD_VAR 0 4
21339: PPUSH
21340: EMPTY
21341: PPUSH
21342: CALL_OW 1
21346: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21347: LD_VAR 0 1
21351: PPUSH
21352: LD_INT 0
21354: PPUSH
21355: CALL_OW 505
// end ; end ;
21359: LD_VAR 0 2
21363: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21364: LD_INT 0
21366: PPUSH
21367: PPUSH
21368: PPUSH
// if not hack in hackTanks or not vehicles then
21369: LD_VAR 0 1
21373: PUSH
21374: LD_EXP 101
21378: IN
21379: NOT
21380: PUSH
21381: LD_VAR 0 2
21385: NOT
21386: OR
21387: IFFALSE 21391
// exit ;
21389: GO 21666
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21391: LD_ADDR_VAR 0 2
21395: PUSH
21396: LD_VAR 0 1
21400: PPUSH
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: CALL 29626 0 4
21416: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21417: LD_ADDR_VAR 0 5
21421: PUSH
21422: LD_EXP 101
21426: PPUSH
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL 28976 0 2
21436: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21437: LD_EXP 102
21441: PUSH
21442: LD_VAR 0 5
21446: ARRAY
21447: PUSH
21448: LD_EXP 103
21452: LESS
21453: IFFALSE 21642
// begin for i := 1 to vehicles do
21455: LD_ADDR_VAR 0 4
21459: PUSH
21460: DOUBLE
21461: LD_INT 1
21463: DEC
21464: ST_TO_ADDR
21465: LD_VAR 0 2
21469: PUSH
21470: FOR_TO
21471: IFFALSE 21640
// begin if hackTanksCaptured [ index ] = hackLimit then
21473: LD_EXP 102
21477: PUSH
21478: LD_VAR 0 5
21482: ARRAY
21483: PUSH
21484: LD_EXP 103
21488: EQUAL
21489: IFFALSE 21493
// break ;
21491: GO 21640
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21493: LD_ADDR_EXP 105
21497: PUSH
21498: LD_EXP 105
21502: PPUSH
21503: LD_VAR 0 5
21507: PPUSH
21508: LD_EXP 105
21512: PUSH
21513: LD_VAR 0 5
21517: ARRAY
21518: PUSH
21519: LD_INT 1
21521: PLUS
21522: PPUSH
21523: CALL_OW 1
21527: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21528: LD_ADDR_EXP 102
21532: PUSH
21533: LD_EXP 102
21537: PPUSH
21538: LD_VAR 0 5
21542: PUSH
21543: LD_EXP 102
21547: PUSH
21548: LD_VAR 0 5
21552: ARRAY
21553: PUSH
21554: LD_INT 1
21556: PLUS
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PPUSH
21562: LD_VAR 0 2
21566: PUSH
21567: LD_VAR 0 4
21571: ARRAY
21572: PUSH
21573: LD_VAR 0 2
21577: PUSH
21578: LD_VAR 0 4
21582: ARRAY
21583: PPUSH
21584: CALL_OW 255
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PPUSH
21593: CALL 29191 0 3
21597: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21598: LD_VAR 0 2
21602: PUSH
21603: LD_VAR 0 4
21607: ARRAY
21608: PPUSH
21609: LD_VAR 0 1
21613: PPUSH
21614: CALL_OW 255
21618: PPUSH
21619: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21623: LD_VAR 0 2
21627: PUSH
21628: LD_VAR 0 4
21632: ARRAY
21633: PPUSH
21634: CALL_OW 141
// end ;
21638: GO 21470
21640: POP
21641: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21642: LD_VAR 0 1
21646: PPUSH
21647: LD_EXP 102
21651: PUSH
21652: LD_VAR 0 5
21656: ARRAY
21657: PUSH
21658: LD_INT 0
21660: PLUS
21661: PPUSH
21662: CALL_OW 505
// end ;
21666: LD_VAR 0 3
21670: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21671: LD_INT 0
21673: PPUSH
21674: PPUSH
21675: PPUSH
21676: PPUSH
// if not hack in hackTanks then
21677: LD_VAR 0 1
21681: PUSH
21682: LD_EXP 101
21686: IN
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21932
// index := GetElementIndex ( hackTanks , hack ) ;
21692: LD_ADDR_VAR 0 4
21696: PUSH
21697: LD_EXP 101
21701: PPUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: CALL 28976 0 2
21711: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21712: LD_ADDR_VAR 0 3
21716: PUSH
21717: DOUBLE
21718: LD_EXP 102
21722: PUSH
21723: LD_VAR 0 4
21727: ARRAY
21728: INC
21729: ST_TO_ADDR
21730: LD_INT 1
21732: PUSH
21733: FOR_DOWNTO
21734: IFFALSE 21906
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21736: LD_ADDR_VAR 0 5
21740: PUSH
21741: LD_EXP 102
21745: PUSH
21746: LD_VAR 0 4
21750: ARRAY
21751: PUSH
21752: LD_VAR 0 3
21756: ARRAY
21757: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21758: LD_VAR 0 5
21762: PUSH
21763: LD_INT 1
21765: ARRAY
21766: PPUSH
21767: CALL_OW 302
21771: NOT
21772: PUSH
21773: LD_VAR 0 5
21777: PUSH
21778: LD_INT 1
21780: ARRAY
21781: PPUSH
21782: CALL_OW 255
21786: PUSH
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 255
21796: NONEQUAL
21797: OR
21798: IFFALSE 21904
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21800: LD_VAR 0 5
21804: PUSH
21805: LD_INT 1
21807: ARRAY
21808: PPUSH
21809: CALL_OW 305
21813: PUSH
21814: LD_VAR 0 5
21818: PUSH
21819: LD_INT 1
21821: ARRAY
21822: PPUSH
21823: CALL_OW 255
21827: PUSH
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 255
21837: EQUAL
21838: AND
21839: IFFALSE 21863
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21841: LD_VAR 0 5
21845: PUSH
21846: LD_INT 1
21848: ARRAY
21849: PPUSH
21850: LD_VAR 0 5
21854: PUSH
21855: LD_INT 2
21857: ARRAY
21858: PPUSH
21859: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21863: LD_ADDR_EXP 102
21867: PUSH
21868: LD_EXP 102
21872: PPUSH
21873: LD_VAR 0 4
21877: PPUSH
21878: LD_EXP 102
21882: PUSH
21883: LD_VAR 0 4
21887: ARRAY
21888: PPUSH
21889: LD_VAR 0 3
21893: PPUSH
21894: CALL_OW 3
21898: PPUSH
21899: CALL_OW 1
21903: ST_TO_ADDR
// end ; end ;
21904: GO 21733
21906: POP
21907: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21908: LD_VAR 0 1
21912: PPUSH
21913: LD_EXP 102
21917: PUSH
21918: LD_VAR 0 4
21922: ARRAY
21923: PUSH
21924: LD_INT 0
21926: PLUS
21927: PPUSH
21928: CALL_OW 505
// end ;
21932: LD_VAR 0 2
21936: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21937: LD_INT 0
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
// if not hack in hackTanks then
21943: LD_VAR 0 1
21947: PUSH
21948: LD_EXP 101
21952: IN
21953: NOT
21954: IFFALSE 21958
// exit ;
21956: GO 22043
// index := GetElementIndex ( hackTanks , hack ) ;
21958: LD_ADDR_VAR 0 5
21962: PUSH
21963: LD_EXP 101
21967: PPUSH
21968: LD_VAR 0 1
21972: PPUSH
21973: CALL 28976 0 2
21977: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21978: LD_ADDR_VAR 0 4
21982: PUSH
21983: DOUBLE
21984: LD_INT 1
21986: DEC
21987: ST_TO_ADDR
21988: LD_EXP 102
21992: PUSH
21993: LD_VAR 0 5
21997: ARRAY
21998: PUSH
21999: FOR_TO
22000: IFFALSE 22041
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22002: LD_EXP 102
22006: PUSH
22007: LD_VAR 0 5
22011: ARRAY
22012: PUSH
22013: LD_VAR 0 4
22017: ARRAY
22018: PUSH
22019: LD_INT 1
22021: ARRAY
22022: PUSH
22023: LD_VAR 0 2
22027: EQUAL
22028: IFFALSE 22039
// KillUnit ( vehicle ) ;
22030: LD_VAR 0 2
22034: PPUSH
22035: CALL_OW 66
22039: GO 21999
22041: POP
22042: POP
// end ;
22043: LD_VAR 0 3
22047: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22048: LD_EXP 106
22052: NOT
22053: IFFALSE 22088
22055: GO 22057
22057: DISABLE
// begin initMiner := true ;
22058: LD_ADDR_EXP 106
22062: PUSH
22063: LD_INT 1
22065: ST_TO_ADDR
// minersList := [ ] ;
22066: LD_ADDR_EXP 107
22070: PUSH
22071: EMPTY
22072: ST_TO_ADDR
// minerMinesList := [ ] ;
22073: LD_ADDR_EXP 108
22077: PUSH
22078: EMPTY
22079: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22080: LD_ADDR_EXP 109
22084: PUSH
22085: LD_INT 5
22087: ST_TO_ADDR
// end ;
22088: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22089: LD_EXP 106
22093: PUSH
22094: LD_INT 34
22096: PUSH
22097: LD_INT 81
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PPUSH
22104: CALL_OW 69
22108: AND
22109: IFFALSE 22570
22111: GO 22113
22113: DISABLE
22114: LD_INT 0
22116: PPUSH
22117: PPUSH
22118: PPUSH
22119: PPUSH
// begin enable ;
22120: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22121: LD_ADDR_VAR 0 1
22125: PUSH
22126: LD_INT 34
22128: PUSH
22129: LD_INT 81
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PPUSH
22136: CALL_OW 69
22140: PUSH
22141: FOR_IN
22142: IFFALSE 22214
// begin if not i in minersList then
22144: LD_VAR 0 1
22148: PUSH
22149: LD_EXP 107
22153: IN
22154: NOT
22155: IFFALSE 22212
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22157: LD_ADDR_EXP 107
22161: PUSH
22162: LD_EXP 107
22166: PPUSH
22167: LD_EXP 107
22171: PUSH
22172: LD_INT 1
22174: PLUS
22175: PPUSH
22176: LD_VAR 0 1
22180: PPUSH
22181: CALL_OW 1
22185: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22186: LD_ADDR_EXP 108
22190: PUSH
22191: LD_EXP 108
22195: PPUSH
22196: LD_EXP 108
22200: PUSH
22201: LD_INT 1
22203: PLUS
22204: PPUSH
22205: EMPTY
22206: PPUSH
22207: CALL_OW 1
22211: ST_TO_ADDR
// end end ;
22212: GO 22141
22214: POP
22215: POP
// for i := minerMinesList downto 1 do
22216: LD_ADDR_VAR 0 1
22220: PUSH
22221: DOUBLE
22222: LD_EXP 108
22226: INC
22227: ST_TO_ADDR
22228: LD_INT 1
22230: PUSH
22231: FOR_DOWNTO
22232: IFFALSE 22568
// begin if IsLive ( minersList [ i ] ) then
22234: LD_EXP 107
22238: PUSH
22239: LD_VAR 0 1
22243: ARRAY
22244: PPUSH
22245: CALL_OW 300
22249: IFFALSE 22277
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22251: LD_EXP 107
22255: PUSH
22256: LD_VAR 0 1
22260: ARRAY
22261: PPUSH
22262: LD_EXP 108
22266: PUSH
22267: LD_VAR 0 1
22271: ARRAY
22272: PPUSH
22273: CALL_OW 505
// if not minerMinesList [ i ] then
22277: LD_EXP 108
22281: PUSH
22282: LD_VAR 0 1
22286: ARRAY
22287: NOT
22288: IFFALSE 22292
// continue ;
22290: GO 22231
// for j := minerMinesList [ i ] downto 1 do
22292: LD_ADDR_VAR 0 2
22296: PUSH
22297: DOUBLE
22298: LD_EXP 108
22302: PUSH
22303: LD_VAR 0 1
22307: ARRAY
22308: INC
22309: ST_TO_ADDR
22310: LD_INT 1
22312: PUSH
22313: FOR_DOWNTO
22314: IFFALSE 22564
// begin side := GetSide ( minersList [ i ] ) ;
22316: LD_ADDR_VAR 0 3
22320: PUSH
22321: LD_EXP 107
22325: PUSH
22326: LD_VAR 0 1
22330: ARRAY
22331: PPUSH
22332: CALL_OW 255
22336: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22337: LD_ADDR_VAR 0 4
22341: PUSH
22342: LD_EXP 108
22346: PUSH
22347: LD_VAR 0 1
22351: ARRAY
22352: PUSH
22353: LD_VAR 0 2
22357: ARRAY
22358: PUSH
22359: LD_INT 1
22361: ARRAY
22362: PPUSH
22363: LD_EXP 108
22367: PUSH
22368: LD_VAR 0 1
22372: ARRAY
22373: PUSH
22374: LD_VAR 0 2
22378: ARRAY
22379: PUSH
22380: LD_INT 2
22382: ARRAY
22383: PPUSH
22384: CALL_OW 428
22388: ST_TO_ADDR
// if not tmp then
22389: LD_VAR 0 4
22393: NOT
22394: IFFALSE 22398
// continue ;
22396: GO 22313
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22398: LD_VAR 0 4
22402: PUSH
22403: LD_INT 81
22405: PUSH
22406: LD_VAR 0 3
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PPUSH
22415: CALL_OW 69
22419: IN
22420: PUSH
22421: LD_EXP 108
22425: PUSH
22426: LD_VAR 0 1
22430: ARRAY
22431: PUSH
22432: LD_VAR 0 2
22436: ARRAY
22437: PUSH
22438: LD_INT 1
22440: ARRAY
22441: PPUSH
22442: LD_EXP 108
22446: PUSH
22447: LD_VAR 0 1
22451: ARRAY
22452: PUSH
22453: LD_VAR 0 2
22457: ARRAY
22458: PUSH
22459: LD_INT 2
22461: ARRAY
22462: PPUSH
22463: CALL_OW 458
22467: AND
22468: IFFALSE 22562
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22470: LD_EXP 108
22474: PUSH
22475: LD_VAR 0 1
22479: ARRAY
22480: PUSH
22481: LD_VAR 0 2
22485: ARRAY
22486: PUSH
22487: LD_INT 1
22489: ARRAY
22490: PPUSH
22491: LD_EXP 108
22495: PUSH
22496: LD_VAR 0 1
22500: ARRAY
22501: PUSH
22502: LD_VAR 0 2
22506: ARRAY
22507: PUSH
22508: LD_INT 2
22510: ARRAY
22511: PPUSH
22512: LD_VAR 0 3
22516: PPUSH
22517: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22521: LD_ADDR_EXP 108
22525: PUSH
22526: LD_EXP 108
22530: PPUSH
22531: LD_VAR 0 1
22535: PPUSH
22536: LD_EXP 108
22540: PUSH
22541: LD_VAR 0 1
22545: ARRAY
22546: PPUSH
22547: LD_VAR 0 2
22551: PPUSH
22552: CALL_OW 3
22556: PPUSH
22557: CALL_OW 1
22561: ST_TO_ADDR
// end ; end ;
22562: GO 22313
22564: POP
22565: POP
// end ;
22566: GO 22231
22568: POP
22569: POP
// end ;
22570: PPOPN 4
22572: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22573: LD_INT 0
22575: PPUSH
22576: PPUSH
// result := false ;
22577: LD_ADDR_VAR 0 4
22581: PUSH
22582: LD_INT 0
22584: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 264
22594: PUSH
22595: LD_INT 81
22597: EQUAL
22598: NOT
22599: IFFALSE 22603
// exit ;
22601: GO 22843
// index := GetElementIndex ( minersList , unit ) ;
22603: LD_ADDR_VAR 0 5
22607: PUSH
22608: LD_EXP 107
22612: PPUSH
22613: LD_VAR 0 1
22617: PPUSH
22618: CALL 28976 0 2
22622: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22623: LD_EXP 108
22627: PUSH
22628: LD_VAR 0 5
22632: ARRAY
22633: PUSH
22634: LD_EXP 109
22638: GREATEREQUAL
22639: IFFALSE 22643
// exit ;
22641: GO 22843
// ComMoveXY ( unit , x , y ) ;
22643: LD_VAR 0 1
22647: PPUSH
22648: LD_VAR 0 2
22652: PPUSH
22653: LD_VAR 0 3
22657: PPUSH
22658: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22662: LD_INT 35
22664: PPUSH
22665: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22669: LD_VAR 0 1
22673: PPUSH
22674: LD_VAR 0 2
22678: PPUSH
22679: LD_VAR 0 3
22683: PPUSH
22684: CALL 60239 0 3
22688: NOT
22689: PUSH
22690: LD_VAR 0 1
22694: PPUSH
22695: CALL_OW 314
22699: AND
22700: IFFALSE 22704
// exit ;
22702: GO 22843
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22704: LD_VAR 0 2
22708: PPUSH
22709: LD_VAR 0 3
22713: PPUSH
22714: CALL_OW 428
22718: PUSH
22719: LD_VAR 0 1
22723: EQUAL
22724: PUSH
22725: LD_VAR 0 1
22729: PPUSH
22730: CALL_OW 314
22734: NOT
22735: AND
22736: IFFALSE 22662
// PlaySoundXY ( x , y , PlantMine ) ;
22738: LD_VAR 0 2
22742: PPUSH
22743: LD_VAR 0 3
22747: PPUSH
22748: LD_STRING PlantMine
22750: PPUSH
22751: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22755: LD_VAR 0 2
22759: PPUSH
22760: LD_VAR 0 3
22764: PPUSH
22765: LD_VAR 0 1
22769: PPUSH
22770: CALL_OW 255
22774: PPUSH
22775: LD_INT 0
22777: PPUSH
22778: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22782: LD_ADDR_EXP 108
22786: PUSH
22787: LD_EXP 108
22791: PPUSH
22792: LD_VAR 0 5
22796: PUSH
22797: LD_EXP 108
22801: PUSH
22802: LD_VAR 0 5
22806: ARRAY
22807: PUSH
22808: LD_INT 1
22810: PLUS
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PPUSH
22816: LD_VAR 0 2
22820: PUSH
22821: LD_VAR 0 3
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PPUSH
22830: CALL 29191 0 3
22834: ST_TO_ADDR
// result := true ;
22835: LD_ADDR_VAR 0 4
22839: PUSH
22840: LD_INT 1
22842: ST_TO_ADDR
// end ;
22843: LD_VAR 0 4
22847: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22848: LD_INT 0
22850: PPUSH
22851: PPUSH
22852: PPUSH
// if not unit in minersList then
22853: LD_VAR 0 1
22857: PUSH
22858: LD_EXP 107
22862: IN
22863: NOT
22864: IFFALSE 22868
// exit ;
22866: GO 23260
// index := GetElementIndex ( minersList , unit ) ;
22868: LD_ADDR_VAR 0 6
22872: PUSH
22873: LD_EXP 107
22877: PPUSH
22878: LD_VAR 0 1
22882: PPUSH
22883: CALL 28976 0 2
22887: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22888: LD_ADDR_VAR 0 5
22892: PUSH
22893: DOUBLE
22894: LD_EXP 108
22898: PUSH
22899: LD_VAR 0 6
22903: ARRAY
22904: INC
22905: ST_TO_ADDR
22906: LD_INT 1
22908: PUSH
22909: FOR_DOWNTO
22910: IFFALSE 23071
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22912: LD_EXP 108
22916: PUSH
22917: LD_VAR 0 6
22921: ARRAY
22922: PUSH
22923: LD_VAR 0 5
22927: ARRAY
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: PUSH
22933: LD_VAR 0 2
22937: EQUAL
22938: PUSH
22939: LD_EXP 108
22943: PUSH
22944: LD_VAR 0 6
22948: ARRAY
22949: PUSH
22950: LD_VAR 0 5
22954: ARRAY
22955: PUSH
22956: LD_INT 2
22958: ARRAY
22959: PUSH
22960: LD_VAR 0 3
22964: EQUAL
22965: AND
22966: IFFALSE 23069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22968: LD_EXP 108
22972: PUSH
22973: LD_VAR 0 6
22977: ARRAY
22978: PUSH
22979: LD_VAR 0 5
22983: ARRAY
22984: PUSH
22985: LD_INT 1
22987: ARRAY
22988: PPUSH
22989: LD_EXP 108
22993: PUSH
22994: LD_VAR 0 6
22998: ARRAY
22999: PUSH
23000: LD_VAR 0 5
23004: ARRAY
23005: PUSH
23006: LD_INT 2
23008: ARRAY
23009: PPUSH
23010: LD_VAR 0 1
23014: PPUSH
23015: CALL_OW 255
23019: PPUSH
23020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23024: LD_ADDR_EXP 108
23028: PUSH
23029: LD_EXP 108
23033: PPUSH
23034: LD_VAR 0 6
23038: PPUSH
23039: LD_EXP 108
23043: PUSH
23044: LD_VAR 0 6
23048: ARRAY
23049: PPUSH
23050: LD_VAR 0 5
23054: PPUSH
23055: CALL_OW 3
23059: PPUSH
23060: CALL_OW 1
23064: ST_TO_ADDR
// exit ;
23065: POP
23066: POP
23067: GO 23260
// end ; end ;
23069: GO 22909
23071: POP
23072: POP
// for i := minerMinesList [ index ] downto 1 do
23073: LD_ADDR_VAR 0 5
23077: PUSH
23078: DOUBLE
23079: LD_EXP 108
23083: PUSH
23084: LD_VAR 0 6
23088: ARRAY
23089: INC
23090: ST_TO_ADDR
23091: LD_INT 1
23093: PUSH
23094: FOR_DOWNTO
23095: IFFALSE 23258
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23097: LD_EXP 108
23101: PUSH
23102: LD_VAR 0 6
23106: ARRAY
23107: PUSH
23108: LD_VAR 0 5
23112: ARRAY
23113: PUSH
23114: LD_INT 1
23116: ARRAY
23117: PPUSH
23118: LD_EXP 108
23122: PUSH
23123: LD_VAR 0 6
23127: ARRAY
23128: PUSH
23129: LD_VAR 0 5
23133: ARRAY
23134: PUSH
23135: LD_INT 2
23137: ARRAY
23138: PPUSH
23139: LD_VAR 0 2
23143: PPUSH
23144: LD_VAR 0 3
23148: PPUSH
23149: CALL_OW 298
23153: PUSH
23154: LD_INT 6
23156: LESS
23157: IFFALSE 23256
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23159: LD_EXP 108
23163: PUSH
23164: LD_VAR 0 6
23168: ARRAY
23169: PUSH
23170: LD_VAR 0 5
23174: ARRAY
23175: PUSH
23176: LD_INT 1
23178: ARRAY
23179: PPUSH
23180: LD_EXP 108
23184: PUSH
23185: LD_VAR 0 6
23189: ARRAY
23190: PUSH
23191: LD_VAR 0 5
23195: ARRAY
23196: PUSH
23197: LD_INT 2
23199: ARRAY
23200: PPUSH
23201: LD_VAR 0 1
23205: PPUSH
23206: CALL_OW 255
23210: PPUSH
23211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23215: LD_ADDR_EXP 108
23219: PUSH
23220: LD_EXP 108
23224: PPUSH
23225: LD_VAR 0 6
23229: PPUSH
23230: LD_EXP 108
23234: PUSH
23235: LD_VAR 0 6
23239: ARRAY
23240: PPUSH
23241: LD_VAR 0 5
23245: PPUSH
23246: CALL_OW 3
23250: PPUSH
23251: CALL_OW 1
23255: ST_TO_ADDR
// end ; end ;
23256: GO 23094
23258: POP
23259: POP
// end ;
23260: LD_VAR 0 4
23264: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23265: LD_INT 0
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
23271: PPUSH
23272: PPUSH
23273: PPUSH
23274: PPUSH
23275: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23276: LD_VAR 0 1
23280: PPUSH
23281: CALL_OW 264
23285: PUSH
23286: LD_INT 81
23288: EQUAL
23289: NOT
23290: PUSH
23291: LD_VAR 0 1
23295: PUSH
23296: LD_EXP 107
23300: IN
23301: NOT
23302: OR
23303: IFFALSE 23307
// exit ;
23305: GO 23629
// index := GetElementIndex ( minersList , unit ) ;
23307: LD_ADDR_VAR 0 6
23311: PUSH
23312: LD_EXP 107
23316: PPUSH
23317: LD_VAR 0 1
23321: PPUSH
23322: CALL 28976 0 2
23326: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23327: LD_ADDR_VAR 0 8
23331: PUSH
23332: LD_EXP 109
23336: PUSH
23337: LD_EXP 108
23341: PUSH
23342: LD_VAR 0 6
23346: ARRAY
23347: MINUS
23348: ST_TO_ADDR
// if not minesFreeAmount then
23349: LD_VAR 0 8
23353: NOT
23354: IFFALSE 23358
// exit ;
23356: GO 23629
// tmp := [ ] ;
23358: LD_ADDR_VAR 0 7
23362: PUSH
23363: EMPTY
23364: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23365: LD_ADDR_VAR 0 5
23369: PUSH
23370: DOUBLE
23371: LD_INT 1
23373: DEC
23374: ST_TO_ADDR
23375: LD_VAR 0 8
23379: PUSH
23380: FOR_TO
23381: IFFALSE 23576
// begin _d := rand ( 0 , 5 ) ;
23383: LD_ADDR_VAR 0 11
23387: PUSH
23388: LD_INT 0
23390: PPUSH
23391: LD_INT 5
23393: PPUSH
23394: CALL_OW 12
23398: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23399: LD_ADDR_VAR 0 12
23403: PUSH
23404: LD_INT 2
23406: PPUSH
23407: LD_INT 6
23409: PPUSH
23410: CALL_OW 12
23414: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23415: LD_ADDR_VAR 0 9
23419: PUSH
23420: LD_VAR 0 2
23424: PPUSH
23425: LD_VAR 0 11
23429: PPUSH
23430: LD_VAR 0 12
23434: PPUSH
23435: CALL_OW 272
23439: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23440: LD_ADDR_VAR 0 10
23444: PUSH
23445: LD_VAR 0 3
23449: PPUSH
23450: LD_VAR 0 11
23454: PPUSH
23455: LD_VAR 0 12
23459: PPUSH
23460: CALL_OW 273
23464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23465: LD_VAR 0 9
23469: PPUSH
23470: LD_VAR 0 10
23474: PPUSH
23475: CALL_OW 488
23479: PUSH
23480: LD_VAR 0 9
23484: PUSH
23485: LD_VAR 0 10
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_VAR 0 7
23498: IN
23499: NOT
23500: AND
23501: PUSH
23502: LD_VAR 0 9
23506: PPUSH
23507: LD_VAR 0 10
23511: PPUSH
23512: CALL_OW 458
23516: NOT
23517: AND
23518: IFFALSE 23560
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23520: LD_ADDR_VAR 0 7
23524: PUSH
23525: LD_VAR 0 7
23529: PPUSH
23530: LD_VAR 0 7
23534: PUSH
23535: LD_INT 1
23537: PLUS
23538: PPUSH
23539: LD_VAR 0 9
23543: PUSH
23544: LD_VAR 0 10
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PPUSH
23553: CALL_OW 1
23557: ST_TO_ADDR
23558: GO 23574
// i := i - 1 ;
23560: LD_ADDR_VAR 0 5
23564: PUSH
23565: LD_VAR 0 5
23569: PUSH
23570: LD_INT 1
23572: MINUS
23573: ST_TO_ADDR
// end ;
23574: GO 23380
23576: POP
23577: POP
// for i in tmp do
23578: LD_ADDR_VAR 0 5
23582: PUSH
23583: LD_VAR 0 7
23587: PUSH
23588: FOR_IN
23589: IFFALSE 23627
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23591: LD_VAR 0 1
23595: PPUSH
23596: LD_VAR 0 5
23600: PUSH
23601: LD_INT 1
23603: ARRAY
23604: PPUSH
23605: LD_VAR 0 5
23609: PUSH
23610: LD_INT 2
23612: ARRAY
23613: PPUSH
23614: CALL 22573 0 3
23618: NOT
23619: IFFALSE 23625
// exit ;
23621: POP
23622: POP
23623: GO 23629
23625: GO 23588
23627: POP
23628: POP
// end ;
23629: LD_VAR 0 4
23633: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23634: LD_INT 0
23636: PPUSH
23637: PPUSH
23638: PPUSH
23639: PPUSH
23640: PPUSH
23641: PPUSH
23642: PPUSH
// if not GetClass ( unit ) = class_sniper then
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 257
23652: PUSH
23653: LD_INT 5
23655: EQUAL
23656: NOT
23657: IFFALSE 23661
// exit ;
23659: GO 24049
// dist := 8 ;
23661: LD_ADDR_VAR 0 5
23665: PUSH
23666: LD_INT 8
23668: ST_TO_ADDR
// viewRange := 12 ;
23669: LD_ADDR_VAR 0 7
23673: PUSH
23674: LD_INT 12
23676: ST_TO_ADDR
// side := GetSide ( unit ) ;
23677: LD_ADDR_VAR 0 6
23681: PUSH
23682: LD_VAR 0 1
23686: PPUSH
23687: CALL_OW 255
23691: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23692: LD_INT 61
23694: PPUSH
23695: LD_VAR 0 6
23699: PPUSH
23700: CALL_OW 321
23704: PUSH
23705: LD_INT 2
23707: EQUAL
23708: IFFALSE 23718
// viewRange := 16 ;
23710: LD_ADDR_VAR 0 7
23714: PUSH
23715: LD_INT 16
23717: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23718: LD_VAR 0 1
23722: PPUSH
23723: LD_VAR 0 2
23727: PPUSH
23728: LD_VAR 0 3
23732: PPUSH
23733: CALL_OW 297
23737: PUSH
23738: LD_VAR 0 5
23742: GREATER
23743: IFFALSE 23822
// begin ComMoveXY ( unit , x , y ) ;
23745: LD_VAR 0 1
23749: PPUSH
23750: LD_VAR 0 2
23754: PPUSH
23755: LD_VAR 0 3
23759: PPUSH
23760: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23764: LD_INT 35
23766: PPUSH
23767: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23771: LD_VAR 0 1
23775: PPUSH
23776: LD_VAR 0 2
23780: PPUSH
23781: LD_VAR 0 3
23785: PPUSH
23786: CALL 60239 0 3
23790: NOT
23791: IFFALSE 23795
// exit ;
23793: GO 24049
// until GetDistUnitXY ( unit , x , y ) < dist ;
23795: LD_VAR 0 1
23799: PPUSH
23800: LD_VAR 0 2
23804: PPUSH
23805: LD_VAR 0 3
23809: PPUSH
23810: CALL_OW 297
23814: PUSH
23815: LD_VAR 0 5
23819: LESS
23820: IFFALSE 23764
// end ; ComTurnXY ( unit , x , y ) ;
23822: LD_VAR 0 1
23826: PPUSH
23827: LD_VAR 0 2
23831: PPUSH
23832: LD_VAR 0 3
23836: PPUSH
23837: CALL_OW 118
// wait ( 5 ) ;
23841: LD_INT 5
23843: PPUSH
23844: CALL_OW 67
// _d := GetDir ( unit ) ;
23848: LD_ADDR_VAR 0 10
23852: PUSH
23853: LD_VAR 0 1
23857: PPUSH
23858: CALL_OW 254
23862: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23863: LD_ADDR_VAR 0 8
23867: PUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 250
23877: PPUSH
23878: LD_VAR 0 10
23882: PPUSH
23883: LD_VAR 0 5
23887: PPUSH
23888: CALL_OW 272
23892: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23893: LD_ADDR_VAR 0 9
23897: PUSH
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 251
23907: PPUSH
23908: LD_VAR 0 10
23912: PPUSH
23913: LD_VAR 0 5
23917: PPUSH
23918: CALL_OW 273
23922: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23923: LD_VAR 0 8
23927: PPUSH
23928: LD_VAR 0 9
23932: PPUSH
23933: CALL_OW 488
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 24049
// ComAnimCustom ( unit , 1 ) ;
23942: LD_VAR 0 1
23946: PPUSH
23947: LD_INT 1
23949: PPUSH
23950: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23954: LD_VAR 0 8
23958: PPUSH
23959: LD_VAR 0 9
23963: PPUSH
23964: LD_VAR 0 6
23968: PPUSH
23969: LD_VAR 0 7
23973: PPUSH
23974: CALL_OW 330
// repeat wait ( 1 ) ;
23978: LD_INT 1
23980: PPUSH
23981: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23985: LD_VAR 0 1
23989: PPUSH
23990: CALL_OW 316
23994: PUSH
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL_OW 314
24004: OR
24005: PUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 302
24015: NOT
24016: OR
24017: PUSH
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 301
24027: OR
24028: IFFALSE 23978
// RemoveSeeing ( _x , _y , side ) ;
24030: LD_VAR 0 8
24034: PPUSH
24035: LD_VAR 0 9
24039: PPUSH
24040: LD_VAR 0 6
24044: PPUSH
24045: CALL_OW 331
// end ; end_of_file
24049: LD_VAR 0 4
24053: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24054: LD_INT 0
24056: PPUSH
24057: PPUSH
// if exist_mode then
24058: LD_VAR 0 2
24062: IFFALSE 24087
// unit := CreateCharacter ( prefix & ident ) else
24064: LD_ADDR_VAR 0 5
24068: PUSH
24069: LD_VAR 0 3
24073: PUSH
24074: LD_VAR 0 1
24078: STR
24079: PPUSH
24080: CALL_OW 34
24084: ST_TO_ADDR
24085: GO 24102
// unit := NewCharacter ( ident ) ;
24087: LD_ADDR_VAR 0 5
24091: PUSH
24092: LD_VAR 0 1
24096: PPUSH
24097: CALL_OW 25
24101: ST_TO_ADDR
// result := unit ;
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: LD_VAR 0 5
24111: ST_TO_ADDR
// end ;
24112: LD_VAR 0 4
24116: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24117: LD_INT 0
24119: PPUSH
24120: PPUSH
// if not side or not nation then
24121: LD_VAR 0 1
24125: NOT
24126: PUSH
24127: LD_VAR 0 2
24131: NOT
24132: OR
24133: IFFALSE 24137
// exit ;
24135: GO 24905
// case nation of nation_american :
24137: LD_VAR 0 2
24141: PUSH
24142: LD_INT 1
24144: DOUBLE
24145: EQUAL
24146: IFTRUE 24150
24148: GO 24364
24150: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24151: LD_ADDR_VAR 0 4
24155: PUSH
24156: LD_INT 35
24158: PUSH
24159: LD_INT 45
24161: PUSH
24162: LD_INT 46
24164: PUSH
24165: LD_INT 47
24167: PUSH
24168: LD_INT 82
24170: PUSH
24171: LD_INT 83
24173: PUSH
24174: LD_INT 84
24176: PUSH
24177: LD_INT 85
24179: PUSH
24180: LD_INT 86
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 6
24191: PUSH
24192: LD_INT 15
24194: PUSH
24195: LD_INT 16
24197: PUSH
24198: LD_INT 7
24200: PUSH
24201: LD_INT 12
24203: PUSH
24204: LD_INT 13
24206: PUSH
24207: LD_INT 10
24209: PUSH
24210: LD_INT 14
24212: PUSH
24213: LD_INT 20
24215: PUSH
24216: LD_INT 21
24218: PUSH
24219: LD_INT 22
24221: PUSH
24222: LD_INT 25
24224: PUSH
24225: LD_INT 32
24227: PUSH
24228: LD_INT 27
24230: PUSH
24231: LD_INT 36
24233: PUSH
24234: LD_INT 69
24236: PUSH
24237: LD_INT 39
24239: PUSH
24240: LD_INT 34
24242: PUSH
24243: LD_INT 40
24245: PUSH
24246: LD_INT 48
24248: PUSH
24249: LD_INT 49
24251: PUSH
24252: LD_INT 50
24254: PUSH
24255: LD_INT 51
24257: PUSH
24258: LD_INT 52
24260: PUSH
24261: LD_INT 53
24263: PUSH
24264: LD_INT 54
24266: PUSH
24267: LD_INT 55
24269: PUSH
24270: LD_INT 56
24272: PUSH
24273: LD_INT 57
24275: PUSH
24276: LD_INT 58
24278: PUSH
24279: LD_INT 59
24281: PUSH
24282: LD_INT 60
24284: PUSH
24285: LD_INT 61
24287: PUSH
24288: LD_INT 62
24290: PUSH
24291: LD_INT 80
24293: PUSH
24294: LD_INT 82
24296: PUSH
24297: LD_INT 83
24299: PUSH
24300: LD_INT 84
24302: PUSH
24303: LD_INT 85
24305: PUSH
24306: LD_INT 86
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: ST_TO_ADDR
24362: GO 24829
24364: LD_INT 2
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24598
24372: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24373: LD_ADDR_VAR 0 4
24377: PUSH
24378: LD_INT 35
24380: PUSH
24381: LD_INT 45
24383: PUSH
24384: LD_INT 46
24386: PUSH
24387: LD_INT 47
24389: PUSH
24390: LD_INT 82
24392: PUSH
24393: LD_INT 83
24395: PUSH
24396: LD_INT 84
24398: PUSH
24399: LD_INT 85
24401: PUSH
24402: LD_INT 87
24404: PUSH
24405: LD_INT 70
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: LD_INT 11
24413: PUSH
24414: LD_INT 3
24416: PUSH
24417: LD_INT 4
24419: PUSH
24420: LD_INT 5
24422: PUSH
24423: LD_INT 6
24425: PUSH
24426: LD_INT 15
24428: PUSH
24429: LD_INT 18
24431: PUSH
24432: LD_INT 7
24434: PUSH
24435: LD_INT 17
24437: PUSH
24438: LD_INT 8
24440: PUSH
24441: LD_INT 20
24443: PUSH
24444: LD_INT 21
24446: PUSH
24447: LD_INT 22
24449: PUSH
24450: LD_INT 72
24452: PUSH
24453: LD_INT 26
24455: PUSH
24456: LD_INT 69
24458: PUSH
24459: LD_INT 39
24461: PUSH
24462: LD_INT 40
24464: PUSH
24465: LD_INT 41
24467: PUSH
24468: LD_INT 42
24470: PUSH
24471: LD_INT 43
24473: PUSH
24474: LD_INT 48
24476: PUSH
24477: LD_INT 49
24479: PUSH
24480: LD_INT 50
24482: PUSH
24483: LD_INT 51
24485: PUSH
24486: LD_INT 52
24488: PUSH
24489: LD_INT 53
24491: PUSH
24492: LD_INT 54
24494: PUSH
24495: LD_INT 55
24497: PUSH
24498: LD_INT 56
24500: PUSH
24501: LD_INT 60
24503: PUSH
24504: LD_INT 61
24506: PUSH
24507: LD_INT 62
24509: PUSH
24510: LD_INT 66
24512: PUSH
24513: LD_INT 67
24515: PUSH
24516: LD_INT 68
24518: PUSH
24519: LD_INT 81
24521: PUSH
24522: LD_INT 82
24524: PUSH
24525: LD_INT 83
24527: PUSH
24528: LD_INT 84
24530: PUSH
24531: LD_INT 85
24533: PUSH
24534: LD_INT 87
24536: PUSH
24537: LD_INT 88
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: ST_TO_ADDR
24596: GO 24829
24598: LD_INT 3
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24828
24606: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24607: LD_ADDR_VAR 0 4
24611: PUSH
24612: LD_INT 46
24614: PUSH
24615: LD_INT 47
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 82
24626: PUSH
24627: LD_INT 83
24629: PUSH
24630: LD_INT 84
24632: PUSH
24633: LD_INT 85
24635: PUSH
24636: LD_INT 86
24638: PUSH
24639: LD_INT 11
24641: PUSH
24642: LD_INT 9
24644: PUSH
24645: LD_INT 20
24647: PUSH
24648: LD_INT 19
24650: PUSH
24651: LD_INT 21
24653: PUSH
24654: LD_INT 24
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_INT 25
24662: PUSH
24663: LD_INT 28
24665: PUSH
24666: LD_INT 29
24668: PUSH
24669: LD_INT 30
24671: PUSH
24672: LD_INT 31
24674: PUSH
24675: LD_INT 37
24677: PUSH
24678: LD_INT 38
24680: PUSH
24681: LD_INT 32
24683: PUSH
24684: LD_INT 27
24686: PUSH
24687: LD_INT 33
24689: PUSH
24690: LD_INT 69
24692: PUSH
24693: LD_INT 39
24695: PUSH
24696: LD_INT 34
24698: PUSH
24699: LD_INT 40
24701: PUSH
24702: LD_INT 71
24704: PUSH
24705: LD_INT 23
24707: PUSH
24708: LD_INT 44
24710: PUSH
24711: LD_INT 48
24713: PUSH
24714: LD_INT 49
24716: PUSH
24717: LD_INT 50
24719: PUSH
24720: LD_INT 51
24722: PUSH
24723: LD_INT 52
24725: PUSH
24726: LD_INT 53
24728: PUSH
24729: LD_INT 54
24731: PUSH
24732: LD_INT 55
24734: PUSH
24735: LD_INT 56
24737: PUSH
24738: LD_INT 57
24740: PUSH
24741: LD_INT 58
24743: PUSH
24744: LD_INT 59
24746: PUSH
24747: LD_INT 63
24749: PUSH
24750: LD_INT 64
24752: PUSH
24753: LD_INT 65
24755: PUSH
24756: LD_INT 82
24758: PUSH
24759: LD_INT 83
24761: PUSH
24762: LD_INT 84
24764: PUSH
24765: LD_INT 85
24767: PUSH
24768: LD_INT 86
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: ST_TO_ADDR
24826: GO 24829
24828: POP
// if state > - 1 and state < 3 then
24829: LD_VAR 0 3
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: GREATER
24838: PUSH
24839: LD_VAR 0 3
24843: PUSH
24844: LD_INT 3
24846: LESS
24847: AND
24848: IFFALSE 24905
// for i in result do
24850: LD_ADDR_VAR 0 5
24854: PUSH
24855: LD_VAR 0 4
24859: PUSH
24860: FOR_IN
24861: IFFALSE 24903
// if GetTech ( i , side ) <> state then
24863: LD_VAR 0 5
24867: PPUSH
24868: LD_VAR 0 1
24872: PPUSH
24873: CALL_OW 321
24877: PUSH
24878: LD_VAR 0 3
24882: NONEQUAL
24883: IFFALSE 24901
// result := result diff i ;
24885: LD_ADDR_VAR 0 4
24889: PUSH
24890: LD_VAR 0 4
24894: PUSH
24895: LD_VAR 0 5
24899: DIFF
24900: ST_TO_ADDR
24901: GO 24860
24903: POP
24904: POP
// end ;
24905: LD_VAR 0 4
24909: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24910: LD_INT 0
24912: PPUSH
24913: PPUSH
24914: PPUSH
// result := true ;
24915: LD_ADDR_VAR 0 3
24919: PUSH
24920: LD_INT 1
24922: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24923: LD_ADDR_VAR 0 5
24927: PUSH
24928: LD_VAR 0 2
24932: PPUSH
24933: CALL_OW 480
24937: ST_TO_ADDR
// if not tmp then
24938: LD_VAR 0 5
24942: NOT
24943: IFFALSE 24947
// exit ;
24945: GO 24996
// for i in tmp do
24947: LD_ADDR_VAR 0 4
24951: PUSH
24952: LD_VAR 0 5
24956: PUSH
24957: FOR_IN
24958: IFFALSE 24994
// if GetTech ( i , side ) <> state_researched then
24960: LD_VAR 0 4
24964: PPUSH
24965: LD_VAR 0 1
24969: PPUSH
24970: CALL_OW 321
24974: PUSH
24975: LD_INT 2
24977: NONEQUAL
24978: IFFALSE 24992
// begin result := false ;
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_INT 0
24987: ST_TO_ADDR
// exit ;
24988: POP
24989: POP
24990: GO 24996
// end ;
24992: GO 24957
24994: POP
24995: POP
// end ;
24996: LD_VAR 0 3
25000: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25001: LD_INT 0
25003: PPUSH
25004: PPUSH
25005: PPUSH
25006: PPUSH
25007: PPUSH
25008: PPUSH
25009: PPUSH
25010: PPUSH
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
25015: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25016: LD_VAR 0 1
25020: NOT
25021: PUSH
25022: LD_VAR 0 1
25026: PPUSH
25027: CALL_OW 257
25031: PUSH
25032: LD_INT 9
25034: NONEQUAL
25035: OR
25036: IFFALSE 25040
// exit ;
25038: GO 25613
// side := GetSide ( unit ) ;
25040: LD_ADDR_VAR 0 9
25044: PUSH
25045: LD_VAR 0 1
25049: PPUSH
25050: CALL_OW 255
25054: ST_TO_ADDR
// tech_space := tech_spacanom ;
25055: LD_ADDR_VAR 0 12
25059: PUSH
25060: LD_INT 29
25062: ST_TO_ADDR
// tech_time := tech_taurad ;
25063: LD_ADDR_VAR 0 13
25067: PUSH
25068: LD_INT 28
25070: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25071: LD_ADDR_VAR 0 11
25075: PUSH
25076: LD_VAR 0 1
25080: PPUSH
25081: CALL_OW 310
25085: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25086: LD_VAR 0 11
25090: PPUSH
25091: CALL_OW 247
25095: PUSH
25096: LD_INT 2
25098: EQUAL
25099: IFFALSE 25103
// exit ;
25101: GO 25613
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25103: LD_ADDR_VAR 0 8
25107: PUSH
25108: LD_INT 81
25110: PUSH
25111: LD_VAR 0 9
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 3
25122: PUSH
25123: LD_INT 21
25125: PUSH
25126: LD_INT 3
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PPUSH
25141: CALL_OW 69
25145: ST_TO_ADDR
// if not tmp then
25146: LD_VAR 0 8
25150: NOT
25151: IFFALSE 25155
// exit ;
25153: GO 25613
// if in_unit then
25155: LD_VAR 0 11
25159: IFFALSE 25183
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25161: LD_ADDR_VAR 0 10
25165: PUSH
25166: LD_VAR 0 8
25170: PPUSH
25171: LD_VAR 0 11
25175: PPUSH
25176: CALL_OW 74
25180: ST_TO_ADDR
25181: GO 25203
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25183: LD_ADDR_VAR 0 10
25187: PUSH
25188: LD_VAR 0 8
25192: PPUSH
25193: LD_VAR 0 1
25197: PPUSH
25198: CALL_OW 74
25202: ST_TO_ADDR
// if not enemy then
25203: LD_VAR 0 10
25207: NOT
25208: IFFALSE 25212
// exit ;
25210: GO 25613
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25212: LD_VAR 0 11
25216: PUSH
25217: LD_VAR 0 11
25221: PPUSH
25222: LD_VAR 0 10
25226: PPUSH
25227: CALL_OW 296
25231: PUSH
25232: LD_INT 13
25234: GREATER
25235: AND
25236: PUSH
25237: LD_VAR 0 1
25241: PPUSH
25242: LD_VAR 0 10
25246: PPUSH
25247: CALL_OW 296
25251: PUSH
25252: LD_INT 12
25254: GREATER
25255: OR
25256: IFFALSE 25260
// exit ;
25258: GO 25613
// missile := [ 1 ] ;
25260: LD_ADDR_VAR 0 14
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25271: LD_VAR 0 9
25275: PPUSH
25276: LD_VAR 0 12
25280: PPUSH
25281: CALL_OW 325
25285: IFFALSE 25314
// missile := Replace ( missile , missile + 1 , 2 ) ;
25287: LD_ADDR_VAR 0 14
25291: PUSH
25292: LD_VAR 0 14
25296: PPUSH
25297: LD_VAR 0 14
25301: PUSH
25302: LD_INT 1
25304: PLUS
25305: PPUSH
25306: LD_INT 2
25308: PPUSH
25309: CALL_OW 1
25313: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25314: LD_VAR 0 9
25318: PPUSH
25319: LD_VAR 0 13
25323: PPUSH
25324: CALL_OW 325
25328: PUSH
25329: LD_VAR 0 10
25333: PPUSH
25334: CALL_OW 255
25338: PPUSH
25339: LD_VAR 0 13
25343: PPUSH
25344: CALL_OW 325
25348: NOT
25349: AND
25350: IFFALSE 25379
// missile := Replace ( missile , missile + 1 , 3 ) ;
25352: LD_ADDR_VAR 0 14
25356: PUSH
25357: LD_VAR 0 14
25361: PPUSH
25362: LD_VAR 0 14
25366: PUSH
25367: LD_INT 1
25369: PLUS
25370: PPUSH
25371: LD_INT 3
25373: PPUSH
25374: CALL_OW 1
25378: ST_TO_ADDR
// if missile < 2 then
25379: LD_VAR 0 14
25383: PUSH
25384: LD_INT 2
25386: LESS
25387: IFFALSE 25391
// exit ;
25389: GO 25613
// x := GetX ( enemy ) ;
25391: LD_ADDR_VAR 0 4
25395: PUSH
25396: LD_VAR 0 10
25400: PPUSH
25401: CALL_OW 250
25405: ST_TO_ADDR
// y := GetY ( enemy ) ;
25406: LD_ADDR_VAR 0 5
25410: PUSH
25411: LD_VAR 0 10
25415: PPUSH
25416: CALL_OW 251
25420: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25421: LD_ADDR_VAR 0 6
25425: PUSH
25426: LD_VAR 0 4
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PPUSH
25435: LD_INT 1
25437: PPUSH
25438: CALL_OW 12
25442: PLUS
25443: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25444: LD_ADDR_VAR 0 7
25448: PUSH
25449: LD_VAR 0 5
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PPUSH
25458: LD_INT 1
25460: PPUSH
25461: CALL_OW 12
25465: PLUS
25466: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25467: LD_VAR 0 6
25471: PPUSH
25472: LD_VAR 0 7
25476: PPUSH
25477: CALL_OW 488
25481: NOT
25482: IFFALSE 25504
// begin _x := x ;
25484: LD_ADDR_VAR 0 6
25488: PUSH
25489: LD_VAR 0 4
25493: ST_TO_ADDR
// _y := y ;
25494: LD_ADDR_VAR 0 7
25498: PUSH
25499: LD_VAR 0 5
25503: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25504: LD_ADDR_VAR 0 3
25508: PUSH
25509: LD_INT 1
25511: PPUSH
25512: LD_VAR 0 14
25516: PPUSH
25517: CALL_OW 12
25521: ST_TO_ADDR
// case i of 1 :
25522: LD_VAR 0 3
25526: PUSH
25527: LD_INT 1
25529: DOUBLE
25530: EQUAL
25531: IFTRUE 25535
25533: GO 25552
25535: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25536: LD_VAR 0 1
25540: PPUSH
25541: LD_VAR 0 10
25545: PPUSH
25546: CALL_OW 115
25550: GO 25613
25552: LD_INT 2
25554: DOUBLE
25555: EQUAL
25556: IFTRUE 25560
25558: GO 25582
25560: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25561: LD_VAR 0 1
25565: PPUSH
25566: LD_VAR 0 6
25570: PPUSH
25571: LD_VAR 0 7
25575: PPUSH
25576: CALL_OW 153
25580: GO 25613
25582: LD_INT 3
25584: DOUBLE
25585: EQUAL
25586: IFTRUE 25590
25588: GO 25612
25590: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25591: LD_VAR 0 1
25595: PPUSH
25596: LD_VAR 0 6
25600: PPUSH
25601: LD_VAR 0 7
25605: PPUSH
25606: CALL_OW 154
25610: GO 25613
25612: POP
// end ;
25613: LD_VAR 0 2
25617: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25618: LD_INT 0
25620: PPUSH
25621: PPUSH
25622: PPUSH
25623: PPUSH
25624: PPUSH
25625: PPUSH
// if not unit or not building then
25626: LD_VAR 0 1
25630: NOT
25631: PUSH
25632: LD_VAR 0 2
25636: NOT
25637: OR
25638: IFFALSE 25642
// exit ;
25640: GO 25800
// x := GetX ( building ) ;
25642: LD_ADDR_VAR 0 5
25646: PUSH
25647: LD_VAR 0 2
25651: PPUSH
25652: CALL_OW 250
25656: ST_TO_ADDR
// y := GetY ( building ) ;
25657: LD_ADDR_VAR 0 6
25661: PUSH
25662: LD_VAR 0 2
25666: PPUSH
25667: CALL_OW 251
25671: ST_TO_ADDR
// for i = 0 to 5 do
25672: LD_ADDR_VAR 0 4
25676: PUSH
25677: DOUBLE
25678: LD_INT 0
25680: DEC
25681: ST_TO_ADDR
25682: LD_INT 5
25684: PUSH
25685: FOR_TO
25686: IFFALSE 25798
// begin _x := ShiftX ( x , i , 3 ) ;
25688: LD_ADDR_VAR 0 7
25692: PUSH
25693: LD_VAR 0 5
25697: PPUSH
25698: LD_VAR 0 4
25702: PPUSH
25703: LD_INT 3
25705: PPUSH
25706: CALL_OW 272
25710: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25711: LD_ADDR_VAR 0 8
25715: PUSH
25716: LD_VAR 0 6
25720: PPUSH
25721: LD_VAR 0 4
25725: PPUSH
25726: LD_INT 3
25728: PPUSH
25729: CALL_OW 273
25733: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25734: LD_VAR 0 7
25738: PPUSH
25739: LD_VAR 0 8
25743: PPUSH
25744: CALL_OW 488
25748: NOT
25749: IFFALSE 25753
// continue ;
25751: GO 25685
// if HexInfo ( _x , _y ) = 0 then
25753: LD_VAR 0 7
25757: PPUSH
25758: LD_VAR 0 8
25762: PPUSH
25763: CALL_OW 428
25767: PUSH
25768: LD_INT 0
25770: EQUAL
25771: IFFALSE 25796
// begin ComMoveXY ( unit , _x , _y ) ;
25773: LD_VAR 0 1
25777: PPUSH
25778: LD_VAR 0 7
25782: PPUSH
25783: LD_VAR 0 8
25787: PPUSH
25788: CALL_OW 111
// exit ;
25792: POP
25793: POP
25794: GO 25800
// end ; end ;
25796: GO 25685
25798: POP
25799: POP
// end ;
25800: LD_VAR 0 3
25804: RET
// export function ScanBase ( side , base_area ) ; begin
25805: LD_INT 0
25807: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_VAR 0 2
25817: PPUSH
25818: LD_INT 81
25820: PUSH
25821: LD_VAR 0 1
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PPUSH
25830: CALL_OW 70
25834: ST_TO_ADDR
// end ;
25835: LD_VAR 0 3
25839: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25840: LD_INT 0
25842: PPUSH
25843: PPUSH
25844: PPUSH
25845: PPUSH
// result := false ;
25846: LD_ADDR_VAR 0 2
25850: PUSH
25851: LD_INT 0
25853: ST_TO_ADDR
// side := GetSide ( unit ) ;
25854: LD_ADDR_VAR 0 3
25858: PUSH
25859: LD_VAR 0 1
25863: PPUSH
25864: CALL_OW 255
25868: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25869: LD_ADDR_VAR 0 4
25873: PUSH
25874: LD_VAR 0 1
25878: PPUSH
25879: CALL_OW 248
25883: ST_TO_ADDR
// case nat of 1 :
25884: LD_VAR 0 4
25888: PUSH
25889: LD_INT 1
25891: DOUBLE
25892: EQUAL
25893: IFTRUE 25897
25895: GO 25908
25897: POP
// tech := tech_lassight ; 2 :
25898: LD_ADDR_VAR 0 5
25902: PUSH
25903: LD_INT 12
25905: ST_TO_ADDR
25906: GO 25947
25908: LD_INT 2
25910: DOUBLE
25911: EQUAL
25912: IFTRUE 25916
25914: GO 25927
25916: POP
// tech := tech_mortar ; 3 :
25917: LD_ADDR_VAR 0 5
25921: PUSH
25922: LD_INT 41
25924: ST_TO_ADDR
25925: GO 25947
25927: LD_INT 3
25929: DOUBLE
25930: EQUAL
25931: IFTRUE 25935
25933: GO 25946
25935: POP
// tech := tech_bazooka ; end ;
25936: LD_ADDR_VAR 0 5
25940: PUSH
25941: LD_INT 44
25943: ST_TO_ADDR
25944: GO 25947
25946: POP
// if Researched ( side , tech ) then
25947: LD_VAR 0 3
25951: PPUSH
25952: LD_VAR 0 5
25956: PPUSH
25957: CALL_OW 325
25961: IFFALSE 25988
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: LD_INT 5
25970: PUSH
25971: LD_INT 8
25973: PUSH
25974: LD_INT 9
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: LIST
25981: PUSH
25982: LD_VAR 0 4
25986: ARRAY
25987: ST_TO_ADDR
// end ;
25988: LD_VAR 0 2
25992: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25993: LD_INT 0
25995: PPUSH
25996: PPUSH
25997: PPUSH
// if not mines then
25998: LD_VAR 0 2
26002: NOT
26003: IFFALSE 26007
// exit ;
26005: GO 26151
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26007: LD_ADDR_VAR 0 5
26011: PUSH
26012: LD_INT 81
26014: PUSH
26015: LD_VAR 0 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 3
26026: PUSH
26027: LD_INT 21
26029: PUSH
26030: LD_INT 3
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PPUSH
26045: CALL_OW 69
26049: ST_TO_ADDR
// for i in mines do
26050: LD_ADDR_VAR 0 4
26054: PUSH
26055: LD_VAR 0 2
26059: PUSH
26060: FOR_IN
26061: IFFALSE 26149
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26063: LD_VAR 0 4
26067: PUSH
26068: LD_INT 1
26070: ARRAY
26071: PPUSH
26072: LD_VAR 0 4
26076: PUSH
26077: LD_INT 2
26079: ARRAY
26080: PPUSH
26081: CALL_OW 458
26085: NOT
26086: IFFALSE 26090
// continue ;
26088: GO 26060
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26090: LD_VAR 0 4
26094: PUSH
26095: LD_INT 1
26097: ARRAY
26098: PPUSH
26099: LD_VAR 0 4
26103: PUSH
26104: LD_INT 2
26106: ARRAY
26107: PPUSH
26108: CALL_OW 428
26112: PUSH
26113: LD_VAR 0 5
26117: IN
26118: IFFALSE 26147
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26120: LD_VAR 0 4
26124: PUSH
26125: LD_INT 1
26127: ARRAY
26128: PPUSH
26129: LD_VAR 0 4
26133: PUSH
26134: LD_INT 2
26136: ARRAY
26137: PPUSH
26138: LD_VAR 0 1
26142: PPUSH
26143: CALL_OW 456
// end ;
26147: GO 26060
26149: POP
26150: POP
// end ;
26151: LD_VAR 0 3
26155: RET
// export function Count ( array ) ; var i ; begin
26156: LD_INT 0
26158: PPUSH
26159: PPUSH
// result := 0 ;
26160: LD_ADDR_VAR 0 2
26164: PUSH
26165: LD_INT 0
26167: ST_TO_ADDR
// for i in array do
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_VAR 0 1
26177: PUSH
26178: FOR_IN
26179: IFFALSE 26203
// if i then
26181: LD_VAR 0 3
26185: IFFALSE 26201
// result := result + 1 ;
26187: LD_ADDR_VAR 0 2
26191: PUSH
26192: LD_VAR 0 2
26196: PUSH
26197: LD_INT 1
26199: PLUS
26200: ST_TO_ADDR
26201: GO 26178
26203: POP
26204: POP
// end ;
26205: LD_VAR 0 2
26209: RET
// export function IsEmpty ( building ) ; begin
26210: LD_INT 0
26212: PPUSH
// if not building then
26213: LD_VAR 0 1
26217: NOT
26218: IFFALSE 26222
// exit ;
26220: GO 26265
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26222: LD_ADDR_VAR 0 2
26226: PUSH
26227: LD_VAR 0 1
26231: PUSH
26232: LD_INT 22
26234: PUSH
26235: LD_VAR 0 1
26239: PPUSH
26240: CALL_OW 255
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 58
26251: PUSH
26252: EMPTY
26253: LIST
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PPUSH
26259: CALL_OW 69
26263: IN
26264: ST_TO_ADDR
// end ;
26265: LD_VAR 0 2
26269: RET
// export function IsNotFull ( building ) ; var places ; begin
26270: LD_INT 0
26272: PPUSH
26273: PPUSH
// if not building then
26274: LD_VAR 0 1
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26454
// result := false ;
26283: LD_ADDR_VAR 0 2
26287: PUSH
26288: LD_INT 0
26290: ST_TO_ADDR
// places := 0 ;
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: LD_INT 0
26298: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 266
26308: PUSH
26309: LD_INT 0
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26371
26315: LD_INT 1
26317: DOUBLE
26318: EQUAL
26319: IFTRUE 26371
26321: LD_INT 6
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26371
26327: LD_INT 7
26329: DOUBLE
26330: EQUAL
26331: IFTRUE 26371
26333: LD_INT 8
26335: DOUBLE
26336: EQUAL
26337: IFTRUE 26371
26339: LD_INT 4
26341: DOUBLE
26342: EQUAL
26343: IFTRUE 26371
26345: LD_INT 5
26347: DOUBLE
26348: EQUAL
26349: IFTRUE 26371
26351: LD_INT 2
26353: DOUBLE
26354: EQUAL
26355: IFTRUE 26371
26357: LD_INT 3
26359: DOUBLE
26360: EQUAL
26361: IFTRUE 26371
26363: LD_INT 35
26365: DOUBLE
26366: EQUAL
26367: IFTRUE 26371
26369: GO 26382
26371: POP
// places := 6 ; b_bunker , b_breastwork :
26372: LD_ADDR_VAR 0 3
26376: PUSH
26377: LD_INT 6
26379: ST_TO_ADDR
26380: GO 26427
26382: LD_INT 32
26384: DOUBLE
26385: EQUAL
26386: IFTRUE 26396
26388: LD_INT 31
26390: DOUBLE
26391: EQUAL
26392: IFTRUE 26396
26394: GO 26407
26396: POP
// places := 1 ; b_control_tower :
26397: LD_ADDR_VAR 0 3
26401: PUSH
26402: LD_INT 1
26404: ST_TO_ADDR
26405: GO 26427
26407: LD_INT 36
26409: DOUBLE
26410: EQUAL
26411: IFTRUE 26415
26413: GO 26426
26415: POP
// places := 3 ; end ;
26416: LD_ADDR_VAR 0 3
26420: PUSH
26421: LD_INT 3
26423: ST_TO_ADDR
26424: GO 26427
26426: POP
// if places then
26427: LD_VAR 0 3
26431: IFFALSE 26454
// result := UnitsInside ( building ) < places ;
26433: LD_ADDR_VAR 0 2
26437: PUSH
26438: LD_VAR 0 1
26442: PPUSH
26443: CALL_OW 313
26447: PUSH
26448: LD_VAR 0 3
26452: LESS
26453: ST_TO_ADDR
// end ;
26454: LD_VAR 0 2
26458: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26459: LD_INT 0
26461: PPUSH
26462: PPUSH
26463: PPUSH
26464: PPUSH
// tmp := [ ] ;
26465: LD_ADDR_VAR 0 3
26469: PUSH
26470: EMPTY
26471: ST_TO_ADDR
// list := [ ] ;
26472: LD_ADDR_VAR 0 5
26476: PUSH
26477: EMPTY
26478: ST_TO_ADDR
// for i = 16 to 25 do
26479: LD_ADDR_VAR 0 4
26483: PUSH
26484: DOUBLE
26485: LD_INT 16
26487: DEC
26488: ST_TO_ADDR
26489: LD_INT 25
26491: PUSH
26492: FOR_TO
26493: IFFALSE 26566
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26495: LD_ADDR_VAR 0 3
26499: PUSH
26500: LD_VAR 0 3
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_VAR 0 1
26512: PPUSH
26513: CALL_OW 255
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 91
26524: PUSH
26525: LD_VAR 0 1
26529: PUSH
26530: LD_INT 6
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 30
26540: PUSH
26541: LD_VAR 0 4
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: PPUSH
26558: CALL_OW 69
26562: ADD
26563: ST_TO_ADDR
26564: GO 26492
26566: POP
26567: POP
// for i = 1 to tmp do
26568: LD_ADDR_VAR 0 4
26572: PUSH
26573: DOUBLE
26574: LD_INT 1
26576: DEC
26577: ST_TO_ADDR
26578: LD_VAR 0 3
26582: PUSH
26583: FOR_TO
26584: IFFALSE 26672
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26586: LD_ADDR_VAR 0 5
26590: PUSH
26591: LD_VAR 0 5
26595: PUSH
26596: LD_VAR 0 3
26600: PUSH
26601: LD_VAR 0 4
26605: ARRAY
26606: PPUSH
26607: CALL_OW 266
26611: PUSH
26612: LD_VAR 0 3
26616: PUSH
26617: LD_VAR 0 4
26621: ARRAY
26622: PPUSH
26623: CALL_OW 250
26627: PUSH
26628: LD_VAR 0 3
26632: PUSH
26633: LD_VAR 0 4
26637: ARRAY
26638: PPUSH
26639: CALL_OW 251
26643: PUSH
26644: LD_VAR 0 3
26648: PUSH
26649: LD_VAR 0 4
26653: ARRAY
26654: PPUSH
26655: CALL_OW 254
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: ADD
26669: ST_TO_ADDR
26670: GO 26583
26672: POP
26673: POP
// result := list ;
26674: LD_ADDR_VAR 0 2
26678: PUSH
26679: LD_VAR 0 5
26683: ST_TO_ADDR
// end ;
26684: LD_VAR 0 2
26688: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26689: LD_INT 0
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
// if not factory then
26698: LD_VAR 0 1
26702: NOT
26703: IFFALSE 26707
// exit ;
26705: GO 27300
// if control = control_apeman then
26707: LD_VAR 0 4
26711: PUSH
26712: LD_INT 5
26714: EQUAL
26715: IFFALSE 26824
// begin tmp := UnitsInside ( factory ) ;
26717: LD_ADDR_VAR 0 8
26721: PUSH
26722: LD_VAR 0 1
26726: PPUSH
26727: CALL_OW 313
26731: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26732: LD_VAR 0 8
26736: PPUSH
26737: LD_INT 25
26739: PUSH
26740: LD_INT 12
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PPUSH
26747: CALL_OW 72
26751: NOT
26752: IFFALSE 26762
// control := control_manual ;
26754: LD_ADDR_VAR 0 4
26758: PUSH
26759: LD_INT 1
26761: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26762: LD_ADDR_VAR 0 8
26766: PUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL 26459 0 1
26776: ST_TO_ADDR
// if tmp then
26777: LD_VAR 0 8
26781: IFFALSE 26824
// begin for i in tmp do
26783: LD_ADDR_VAR 0 7
26787: PUSH
26788: LD_VAR 0 8
26792: PUSH
26793: FOR_IN
26794: IFFALSE 26822
// if i [ 1 ] = b_ext_radio then
26796: LD_VAR 0 7
26800: PUSH
26801: LD_INT 1
26803: ARRAY
26804: PUSH
26805: LD_INT 22
26807: EQUAL
26808: IFFALSE 26820
// begin control := control_remote ;
26810: LD_ADDR_VAR 0 4
26814: PUSH
26815: LD_INT 2
26817: ST_TO_ADDR
// break ;
26818: GO 26822
// end ;
26820: GO 26793
26822: POP
26823: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26824: LD_VAR 0 1
26828: PPUSH
26829: LD_VAR 0 2
26833: PPUSH
26834: LD_VAR 0 3
26838: PPUSH
26839: LD_VAR 0 4
26843: PPUSH
26844: LD_VAR 0 5
26848: PPUSH
26849: CALL_OW 448
26853: IFFALSE 26888
// begin result := [ chassis , engine , control , weapon ] ;
26855: LD_ADDR_VAR 0 6
26859: PUSH
26860: LD_VAR 0 2
26864: PUSH
26865: LD_VAR 0 3
26869: PUSH
26870: LD_VAR 0 4
26874: PUSH
26875: LD_VAR 0 5
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: ST_TO_ADDR
// exit ;
26886: GO 27300
// end ; _chassis := AvailableChassisList ( factory ) ;
26888: LD_ADDR_VAR 0 9
26892: PUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 475
26902: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26903: LD_ADDR_VAR 0 11
26907: PUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: CALL_OW 476
26917: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26918: LD_ADDR_VAR 0 12
26922: PUSH
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 477
26932: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26933: LD_ADDR_VAR 0 10
26937: PUSH
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 478
26947: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26948: LD_VAR 0 9
26952: NOT
26953: PUSH
26954: LD_VAR 0 11
26958: NOT
26959: OR
26960: PUSH
26961: LD_VAR 0 12
26965: NOT
26966: OR
26967: PUSH
26968: LD_VAR 0 10
26972: NOT
26973: OR
26974: IFFALSE 27009
// begin result := [ chassis , engine , control , weapon ] ;
26976: LD_ADDR_VAR 0 6
26980: PUSH
26981: LD_VAR 0 2
26985: PUSH
26986: LD_VAR 0 3
26990: PUSH
26991: LD_VAR 0 4
26995: PUSH
26996: LD_VAR 0 5
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: ST_TO_ADDR
// exit ;
27007: GO 27300
// end ; if not chassis in _chassis then
27009: LD_VAR 0 2
27013: PUSH
27014: LD_VAR 0 9
27018: IN
27019: NOT
27020: IFFALSE 27046
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27022: LD_ADDR_VAR 0 2
27026: PUSH
27027: LD_VAR 0 9
27031: PUSH
27032: LD_INT 1
27034: PPUSH
27035: LD_VAR 0 9
27039: PPUSH
27040: CALL_OW 12
27044: ARRAY
27045: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27046: LD_VAR 0 2
27050: PPUSH
27051: LD_VAR 0 3
27055: PPUSH
27056: CALL 27305 0 2
27060: NOT
27061: IFFALSE 27120
// repeat engine := _engine [ 1 ] ;
27063: LD_ADDR_VAR 0 3
27067: PUSH
27068: LD_VAR 0 11
27072: PUSH
27073: LD_INT 1
27075: ARRAY
27076: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27077: LD_ADDR_VAR 0 11
27081: PUSH
27082: LD_VAR 0 11
27086: PPUSH
27087: LD_INT 1
27089: PPUSH
27090: CALL_OW 3
27094: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27095: LD_VAR 0 2
27099: PPUSH
27100: LD_VAR 0 3
27104: PPUSH
27105: CALL 27305 0 2
27109: PUSH
27110: LD_VAR 0 11
27114: PUSH
27115: EMPTY
27116: EQUAL
27117: OR
27118: IFFALSE 27063
// if not control in _control then
27120: LD_VAR 0 4
27124: PUSH
27125: LD_VAR 0 12
27129: IN
27130: NOT
27131: IFFALSE 27157
// control := _control [ rand ( 1 , _control ) ] ;
27133: LD_ADDR_VAR 0 4
27137: PUSH
27138: LD_VAR 0 12
27142: PUSH
27143: LD_INT 1
27145: PPUSH
27146: LD_VAR 0 12
27150: PPUSH
27151: CALL_OW 12
27155: ARRAY
27156: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27157: LD_VAR 0 2
27161: PPUSH
27162: LD_VAR 0 5
27166: PPUSH
27167: CALL 27525 0 2
27171: NOT
27172: IFFALSE 27231
// repeat weapon := _weapon [ 1 ] ;
27174: LD_ADDR_VAR 0 5
27178: PUSH
27179: LD_VAR 0 10
27183: PUSH
27184: LD_INT 1
27186: ARRAY
27187: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27188: LD_ADDR_VAR 0 10
27192: PUSH
27193: LD_VAR 0 10
27197: PPUSH
27198: LD_INT 1
27200: PPUSH
27201: CALL_OW 3
27205: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27206: LD_VAR 0 2
27210: PPUSH
27211: LD_VAR 0 5
27215: PPUSH
27216: CALL 27525 0 2
27220: PUSH
27221: LD_VAR 0 10
27225: PUSH
27226: EMPTY
27227: EQUAL
27228: OR
27229: IFFALSE 27174
// result := [ ] ;
27231: LD_ADDR_VAR 0 6
27235: PUSH
27236: EMPTY
27237: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_VAR 0 2
27247: PPUSH
27248: LD_VAR 0 3
27252: PPUSH
27253: LD_VAR 0 4
27257: PPUSH
27258: LD_VAR 0 5
27262: PPUSH
27263: CALL_OW 448
27267: IFFALSE 27300
// result := [ chassis , engine , control , weapon ] ;
27269: LD_ADDR_VAR 0 6
27273: PUSH
27274: LD_VAR 0 2
27278: PUSH
27279: LD_VAR 0 3
27283: PUSH
27284: LD_VAR 0 4
27288: PUSH
27289: LD_VAR 0 5
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: ST_TO_ADDR
// end ;
27300: LD_VAR 0 6
27304: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27305: LD_INT 0
27307: PPUSH
// if not chassis or not engine then
27308: LD_VAR 0 1
27312: NOT
27313: PUSH
27314: LD_VAR 0 2
27318: NOT
27319: OR
27320: IFFALSE 27324
// exit ;
27322: GO 27520
// case engine of engine_solar :
27324: LD_VAR 0 2
27328: PUSH
27329: LD_INT 2
27331: DOUBLE
27332: EQUAL
27333: IFTRUE 27337
27335: GO 27375
27337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27338: LD_ADDR_VAR 0 3
27342: PUSH
27343: LD_INT 11
27345: PUSH
27346: LD_INT 12
27348: PUSH
27349: LD_INT 13
27351: PUSH
27352: LD_INT 14
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: LD_INT 3
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: ST_TO_ADDR
27373: GO 27504
27375: LD_INT 1
27377: DOUBLE
27378: EQUAL
27379: IFTRUE 27383
27381: GO 27445
27383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27384: LD_ADDR_VAR 0 3
27388: PUSH
27389: LD_INT 11
27391: PUSH
27392: LD_INT 12
27394: PUSH
27395: LD_INT 13
27397: PUSH
27398: LD_INT 14
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: LD_INT 3
27409: PUSH
27410: LD_INT 4
27412: PUSH
27413: LD_INT 5
27415: PUSH
27416: LD_INT 21
27418: PUSH
27419: LD_INT 23
27421: PUSH
27422: LD_INT 22
27424: PUSH
27425: LD_INT 24
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
27443: GO 27504
27445: LD_INT 3
27447: DOUBLE
27448: EQUAL
27449: IFTRUE 27453
27451: GO 27503
27453: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: LD_INT 13
27461: PUSH
27462: LD_INT 14
27464: PUSH
27465: LD_INT 2
27467: PUSH
27468: LD_INT 3
27470: PUSH
27471: LD_INT 4
27473: PUSH
27474: LD_INT 5
27476: PUSH
27477: LD_INT 21
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_INT 23
27485: PUSH
27486: LD_INT 24
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: ST_TO_ADDR
27501: GO 27504
27503: POP
// result := ( chassis in result ) ;
27504: LD_ADDR_VAR 0 3
27508: PUSH
27509: LD_VAR 0 1
27513: PUSH
27514: LD_VAR 0 3
27518: IN
27519: ST_TO_ADDR
// end ;
27520: LD_VAR 0 3
27524: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27525: LD_INT 0
27527: PPUSH
// if not chassis or not weapon then
27528: LD_VAR 0 1
27532: NOT
27533: PUSH
27534: LD_VAR 0 2
27538: NOT
27539: OR
27540: IFFALSE 27544
// exit ;
27542: GO 28604
// case weapon of us_machine_gun :
27544: LD_VAR 0 2
27548: PUSH
27549: LD_INT 2
27551: DOUBLE
27552: EQUAL
27553: IFTRUE 27557
27555: GO 27587
27557: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: LD_INT 3
27571: PUSH
27572: LD_INT 4
27574: PUSH
27575: LD_INT 5
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: ST_TO_ADDR
27585: GO 28588
27587: LD_INT 3
27589: DOUBLE
27590: EQUAL
27591: IFTRUE 27595
27593: GO 27625
27595: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27596: LD_ADDR_VAR 0 3
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: LD_INT 3
27609: PUSH
27610: LD_INT 4
27612: PUSH
27613: LD_INT 5
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: ST_TO_ADDR
27623: GO 28588
27625: LD_INT 11
27627: DOUBLE
27628: EQUAL
27629: IFTRUE 27633
27631: GO 27663
27633: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27634: LD_ADDR_VAR 0 3
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: LD_INT 3
27647: PUSH
27648: LD_INT 4
27650: PUSH
27651: LD_INT 5
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: ST_TO_ADDR
27661: GO 28588
27663: LD_INT 4
27665: DOUBLE
27666: EQUAL
27667: IFTRUE 27671
27669: GO 27697
27671: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27672: LD_ADDR_VAR 0 3
27676: PUSH
27677: LD_INT 2
27679: PUSH
27680: LD_INT 3
27682: PUSH
27683: LD_INT 4
27685: PUSH
27686: LD_INT 5
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: ST_TO_ADDR
27695: GO 28588
27697: LD_INT 5
27699: DOUBLE
27700: EQUAL
27701: IFTRUE 27705
27703: GO 27731
27705: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27706: LD_ADDR_VAR 0 3
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: LD_INT 3
27716: PUSH
27717: LD_INT 4
27719: PUSH
27720: LD_INT 5
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: ST_TO_ADDR
27729: GO 28588
27731: LD_INT 9
27733: DOUBLE
27734: EQUAL
27735: IFTRUE 27739
27737: GO 27765
27739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27740: LD_ADDR_VAR 0 3
27744: PUSH
27745: LD_INT 2
27747: PUSH
27748: LD_INT 3
27750: PUSH
27751: LD_INT 4
27753: PUSH
27754: LD_INT 5
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: ST_TO_ADDR
27763: GO 28588
27765: LD_INT 7
27767: DOUBLE
27768: EQUAL
27769: IFTRUE 27773
27771: GO 27799
27773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27774: LD_ADDR_VAR 0 3
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 3
27784: PUSH
27785: LD_INT 4
27787: PUSH
27788: LD_INT 5
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: ST_TO_ADDR
27797: GO 28588
27799: LD_INT 12
27801: DOUBLE
27802: EQUAL
27803: IFTRUE 27807
27805: GO 27833
27807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 3
27818: PUSH
27819: LD_INT 4
27821: PUSH
27822: LD_INT 5
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: ST_TO_ADDR
27831: GO 28588
27833: LD_INT 13
27835: DOUBLE
27836: EQUAL
27837: IFTRUE 27841
27839: GO 27867
27841: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27842: LD_ADDR_VAR 0 3
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: LD_INT 3
27852: PUSH
27853: LD_INT 4
27855: PUSH
27856: LD_INT 5
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: ST_TO_ADDR
27865: GO 28588
27867: LD_INT 14
27869: DOUBLE
27870: EQUAL
27871: IFTRUE 27875
27873: GO 27893
27875: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27876: LD_ADDR_VAR 0 3
27880: PUSH
27881: LD_INT 4
27883: PUSH
27884: LD_INT 5
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: ST_TO_ADDR
27891: GO 28588
27893: LD_INT 6
27895: DOUBLE
27896: EQUAL
27897: IFTRUE 27901
27899: GO 27919
27901: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27902: LD_ADDR_VAR 0 3
27906: PUSH
27907: LD_INT 4
27909: PUSH
27910: LD_INT 5
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: ST_TO_ADDR
27917: GO 28588
27919: LD_INT 10
27921: DOUBLE
27922: EQUAL
27923: IFTRUE 27927
27925: GO 27945
27927: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27928: LD_ADDR_VAR 0 3
27932: PUSH
27933: LD_INT 4
27935: PUSH
27936: LD_INT 5
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: ST_TO_ADDR
27943: GO 28588
27945: LD_INT 22
27947: DOUBLE
27948: EQUAL
27949: IFTRUE 27953
27951: GO 27979
27953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27954: LD_ADDR_VAR 0 3
27958: PUSH
27959: LD_INT 11
27961: PUSH
27962: LD_INT 12
27964: PUSH
27965: LD_INT 13
27967: PUSH
27968: LD_INT 14
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
27977: GO 28588
27979: LD_INT 23
27981: DOUBLE
27982: EQUAL
27983: IFTRUE 27987
27985: GO 28013
27987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27988: LD_ADDR_VAR 0 3
27992: PUSH
27993: LD_INT 11
27995: PUSH
27996: LD_INT 12
27998: PUSH
27999: LD_INT 13
28001: PUSH
28002: LD_INT 14
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
28011: GO 28588
28013: LD_INT 24
28015: DOUBLE
28016: EQUAL
28017: IFTRUE 28021
28019: GO 28047
28021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28022: LD_ADDR_VAR 0 3
28026: PUSH
28027: LD_INT 11
28029: PUSH
28030: LD_INT 12
28032: PUSH
28033: LD_INT 13
28035: PUSH
28036: LD_INT 14
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: ST_TO_ADDR
28045: GO 28588
28047: LD_INT 30
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28055
28053: GO 28081
28055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_INT 11
28063: PUSH
28064: LD_INT 12
28066: PUSH
28067: LD_INT 13
28069: PUSH
28070: LD_INT 14
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
28079: GO 28588
28081: LD_INT 25
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28107
28089: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_INT 13
28097: PUSH
28098: LD_INT 14
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: ST_TO_ADDR
28105: GO 28588
28107: LD_INT 27
28109: DOUBLE
28110: EQUAL
28111: IFTRUE 28115
28113: GO 28133
28115: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28116: LD_ADDR_VAR 0 3
28120: PUSH
28121: LD_INT 13
28123: PUSH
28124: LD_INT 14
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: ST_TO_ADDR
28131: GO 28588
28133: LD_INT 92
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28167
28141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: LD_INT 11
28149: PUSH
28150: LD_INT 12
28152: PUSH
28153: LD_INT 13
28155: PUSH
28156: LD_INT 14
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
28165: GO 28588
28167: LD_INT 28
28169: DOUBLE
28170: EQUAL
28171: IFTRUE 28175
28173: GO 28193
28175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28176: LD_ADDR_VAR 0 3
28180: PUSH
28181: LD_INT 13
28183: PUSH
28184: LD_INT 14
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: ST_TO_ADDR
28191: GO 28588
28193: LD_INT 29
28195: DOUBLE
28196: EQUAL
28197: IFTRUE 28201
28199: GO 28219
28201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28202: LD_ADDR_VAR 0 3
28206: PUSH
28207: LD_INT 13
28209: PUSH
28210: LD_INT 14
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: ST_TO_ADDR
28217: GO 28588
28219: LD_INT 31
28221: DOUBLE
28222: EQUAL
28223: IFTRUE 28227
28225: GO 28245
28227: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28228: LD_ADDR_VAR 0 3
28232: PUSH
28233: LD_INT 13
28235: PUSH
28236: LD_INT 14
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: ST_TO_ADDR
28243: GO 28588
28245: LD_INT 26
28247: DOUBLE
28248: EQUAL
28249: IFTRUE 28253
28251: GO 28271
28253: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28254: LD_ADDR_VAR 0 3
28258: PUSH
28259: LD_INT 13
28261: PUSH
28262: LD_INT 14
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: ST_TO_ADDR
28269: GO 28588
28271: LD_INT 42
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28305
28279: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28280: LD_ADDR_VAR 0 3
28284: PUSH
28285: LD_INT 21
28287: PUSH
28288: LD_INT 22
28290: PUSH
28291: LD_INT 23
28293: PUSH
28294: LD_INT 24
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
28303: GO 28588
28305: LD_INT 43
28307: DOUBLE
28308: EQUAL
28309: IFTRUE 28313
28311: GO 28339
28313: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28314: LD_ADDR_VAR 0 3
28318: PUSH
28319: LD_INT 21
28321: PUSH
28322: LD_INT 22
28324: PUSH
28325: LD_INT 23
28327: PUSH
28328: LD_INT 24
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: ST_TO_ADDR
28337: GO 28588
28339: LD_INT 44
28341: DOUBLE
28342: EQUAL
28343: IFTRUE 28347
28345: GO 28373
28347: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_INT 21
28355: PUSH
28356: LD_INT 22
28358: PUSH
28359: LD_INT 23
28361: PUSH
28362: LD_INT 24
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: ST_TO_ADDR
28371: GO 28588
28373: LD_INT 45
28375: DOUBLE
28376: EQUAL
28377: IFTRUE 28381
28379: GO 28407
28381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28382: LD_ADDR_VAR 0 3
28386: PUSH
28387: LD_INT 21
28389: PUSH
28390: LD_INT 22
28392: PUSH
28393: LD_INT 23
28395: PUSH
28396: LD_INT 24
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: ST_TO_ADDR
28405: GO 28588
28407: LD_INT 49
28409: DOUBLE
28410: EQUAL
28411: IFTRUE 28415
28413: GO 28441
28415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28416: LD_ADDR_VAR 0 3
28420: PUSH
28421: LD_INT 21
28423: PUSH
28424: LD_INT 22
28426: PUSH
28427: LD_INT 23
28429: PUSH
28430: LD_INT 24
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: ST_TO_ADDR
28439: GO 28588
28441: LD_INT 51
28443: DOUBLE
28444: EQUAL
28445: IFTRUE 28449
28447: GO 28475
28449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28450: LD_ADDR_VAR 0 3
28454: PUSH
28455: LD_INT 21
28457: PUSH
28458: LD_INT 22
28460: PUSH
28461: LD_INT 23
28463: PUSH
28464: LD_INT 24
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
28473: GO 28588
28475: LD_INT 52
28477: DOUBLE
28478: EQUAL
28479: IFTRUE 28483
28481: GO 28509
28483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28484: LD_ADDR_VAR 0 3
28488: PUSH
28489: LD_INT 21
28491: PUSH
28492: LD_INT 22
28494: PUSH
28495: LD_INT 23
28497: PUSH
28498: LD_INT 24
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: ST_TO_ADDR
28507: GO 28588
28509: LD_INT 53
28511: DOUBLE
28512: EQUAL
28513: IFTRUE 28517
28515: GO 28535
28517: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28518: LD_ADDR_VAR 0 3
28522: PUSH
28523: LD_INT 23
28525: PUSH
28526: LD_INT 24
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: ST_TO_ADDR
28533: GO 28588
28535: LD_INT 46
28537: DOUBLE
28538: EQUAL
28539: IFTRUE 28543
28541: GO 28561
28543: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28544: LD_ADDR_VAR 0 3
28548: PUSH
28549: LD_INT 23
28551: PUSH
28552: LD_INT 24
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: ST_TO_ADDR
28559: GO 28588
28561: LD_INT 47
28563: DOUBLE
28564: EQUAL
28565: IFTRUE 28569
28567: GO 28587
28569: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28570: LD_ADDR_VAR 0 3
28574: PUSH
28575: LD_INT 23
28577: PUSH
28578: LD_INT 24
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: ST_TO_ADDR
28585: GO 28588
28587: POP
// result := ( chassis in result ) ;
28588: LD_ADDR_VAR 0 3
28592: PUSH
28593: LD_VAR 0 1
28597: PUSH
28598: LD_VAR 0 3
28602: IN
28603: ST_TO_ADDR
// end ;
28604: LD_VAR 0 3
28608: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28609: LD_INT 0
28611: PPUSH
28612: PPUSH
28613: PPUSH
28614: PPUSH
28615: PPUSH
28616: PPUSH
28617: PPUSH
// result := array ;
28618: LD_ADDR_VAR 0 5
28622: PUSH
28623: LD_VAR 0 1
28627: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28628: LD_VAR 0 1
28632: NOT
28633: PUSH
28634: LD_VAR 0 2
28638: NOT
28639: OR
28640: PUSH
28641: LD_VAR 0 3
28645: NOT
28646: OR
28647: PUSH
28648: LD_VAR 0 2
28652: PUSH
28653: LD_VAR 0 1
28657: GREATER
28658: OR
28659: PUSH
28660: LD_VAR 0 3
28664: PUSH
28665: LD_VAR 0 1
28669: GREATER
28670: OR
28671: IFFALSE 28675
// exit ;
28673: GO 28971
// if direction then
28675: LD_VAR 0 4
28679: IFFALSE 28743
// begin d := 1 ;
28681: LD_ADDR_VAR 0 9
28685: PUSH
28686: LD_INT 1
28688: ST_TO_ADDR
// if i_from > i_to then
28689: LD_VAR 0 2
28693: PUSH
28694: LD_VAR 0 3
28698: GREATER
28699: IFFALSE 28725
// length := ( array - i_from ) + i_to else
28701: LD_ADDR_VAR 0 11
28705: PUSH
28706: LD_VAR 0 1
28710: PUSH
28711: LD_VAR 0 2
28715: MINUS
28716: PUSH
28717: LD_VAR 0 3
28721: PLUS
28722: ST_TO_ADDR
28723: GO 28741
// length := i_to - i_from ;
28725: LD_ADDR_VAR 0 11
28729: PUSH
28730: LD_VAR 0 3
28734: PUSH
28735: LD_VAR 0 2
28739: MINUS
28740: ST_TO_ADDR
// end else
28741: GO 28804
// begin d := - 1 ;
28743: LD_ADDR_VAR 0 9
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: ST_TO_ADDR
// if i_from > i_to then
28752: LD_VAR 0 2
28756: PUSH
28757: LD_VAR 0 3
28761: GREATER
28762: IFFALSE 28782
// length := i_from - i_to else
28764: LD_ADDR_VAR 0 11
28768: PUSH
28769: LD_VAR 0 2
28773: PUSH
28774: LD_VAR 0 3
28778: MINUS
28779: ST_TO_ADDR
28780: GO 28804
// length := ( array - i_to ) + i_from ;
28782: LD_ADDR_VAR 0 11
28786: PUSH
28787: LD_VAR 0 1
28791: PUSH
28792: LD_VAR 0 3
28796: MINUS
28797: PUSH
28798: LD_VAR 0 2
28802: PLUS
28803: ST_TO_ADDR
// end ; if not length then
28804: LD_VAR 0 11
28808: NOT
28809: IFFALSE 28813
// exit ;
28811: GO 28971
// tmp := array ;
28813: LD_ADDR_VAR 0 10
28817: PUSH
28818: LD_VAR 0 1
28822: ST_TO_ADDR
// for i = 1 to length do
28823: LD_ADDR_VAR 0 6
28827: PUSH
28828: DOUBLE
28829: LD_INT 1
28831: DEC
28832: ST_TO_ADDR
28833: LD_VAR 0 11
28837: PUSH
28838: FOR_TO
28839: IFFALSE 28959
// begin for j = 1 to array do
28841: LD_ADDR_VAR 0 7
28845: PUSH
28846: DOUBLE
28847: LD_INT 1
28849: DEC
28850: ST_TO_ADDR
28851: LD_VAR 0 1
28855: PUSH
28856: FOR_TO
28857: IFFALSE 28945
// begin k := j + d ;
28859: LD_ADDR_VAR 0 8
28863: PUSH
28864: LD_VAR 0 7
28868: PUSH
28869: LD_VAR 0 9
28873: PLUS
28874: ST_TO_ADDR
// if k > array then
28875: LD_VAR 0 8
28879: PUSH
28880: LD_VAR 0 1
28884: GREATER
28885: IFFALSE 28895
// k := 1 ;
28887: LD_ADDR_VAR 0 8
28891: PUSH
28892: LD_INT 1
28894: ST_TO_ADDR
// if not k then
28895: LD_VAR 0 8
28899: NOT
28900: IFFALSE 28912
// k := array ;
28902: LD_ADDR_VAR 0 8
28906: PUSH
28907: LD_VAR 0 1
28911: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28912: LD_ADDR_VAR 0 10
28916: PUSH
28917: LD_VAR 0 10
28921: PPUSH
28922: LD_VAR 0 8
28926: PPUSH
28927: LD_VAR 0 1
28931: PUSH
28932: LD_VAR 0 7
28936: ARRAY
28937: PPUSH
28938: CALL_OW 1
28942: ST_TO_ADDR
// end ;
28943: GO 28856
28945: POP
28946: POP
// array := tmp ;
28947: LD_ADDR_VAR 0 1
28951: PUSH
28952: LD_VAR 0 10
28956: ST_TO_ADDR
// end ;
28957: GO 28838
28959: POP
28960: POP
// result := array ;
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: LD_VAR 0 1
28970: ST_TO_ADDR
// end ;
28971: LD_VAR 0 5
28975: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28976: LD_INT 0
28978: PPUSH
28979: PPUSH
// result := 0 ;
28980: LD_ADDR_VAR 0 3
28984: PUSH
28985: LD_INT 0
28987: ST_TO_ADDR
// if not array or not value in array then
28988: LD_VAR 0 1
28992: NOT
28993: PUSH
28994: LD_VAR 0 2
28998: PUSH
28999: LD_VAR 0 1
29003: IN
29004: NOT
29005: OR
29006: IFFALSE 29010
// exit ;
29008: GO 29064
// for i = 1 to array do
29010: LD_ADDR_VAR 0 4
29014: PUSH
29015: DOUBLE
29016: LD_INT 1
29018: DEC
29019: ST_TO_ADDR
29020: LD_VAR 0 1
29024: PUSH
29025: FOR_TO
29026: IFFALSE 29062
// if value = array [ i ] then
29028: LD_VAR 0 2
29032: PUSH
29033: LD_VAR 0 1
29037: PUSH
29038: LD_VAR 0 4
29042: ARRAY
29043: EQUAL
29044: IFFALSE 29060
// begin result := i ;
29046: LD_ADDR_VAR 0 3
29050: PUSH
29051: LD_VAR 0 4
29055: ST_TO_ADDR
// exit ;
29056: POP
29057: POP
29058: GO 29064
// end ;
29060: GO 29025
29062: POP
29063: POP
// end ;
29064: LD_VAR 0 3
29068: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29069: LD_INT 0
29071: PPUSH
// vc_chassis := chassis ;
29072: LD_ADDR_OWVAR 37
29076: PUSH
29077: LD_VAR 0 1
29081: ST_TO_ADDR
// vc_engine := engine ;
29082: LD_ADDR_OWVAR 39
29086: PUSH
29087: LD_VAR 0 2
29091: ST_TO_ADDR
// vc_control := control ;
29092: LD_ADDR_OWVAR 38
29096: PUSH
29097: LD_VAR 0 3
29101: ST_TO_ADDR
// vc_weapon := weapon ;
29102: LD_ADDR_OWVAR 40
29106: PUSH
29107: LD_VAR 0 4
29111: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29112: LD_ADDR_OWVAR 41
29116: PUSH
29117: LD_VAR 0 5
29121: ST_TO_ADDR
// end ;
29122: LD_VAR 0 6
29126: RET
// export function WantPlant ( unit ) ; var task ; begin
29127: LD_INT 0
29129: PPUSH
29130: PPUSH
// result := false ;
29131: LD_ADDR_VAR 0 2
29135: PUSH
29136: LD_INT 0
29138: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29139: LD_ADDR_VAR 0 3
29143: PUSH
29144: LD_VAR 0 1
29148: PPUSH
29149: CALL_OW 437
29153: ST_TO_ADDR
// if task then
29154: LD_VAR 0 3
29158: IFFALSE 29186
// if task [ 1 ] [ 1 ] = p then
29160: LD_VAR 0 3
29164: PUSH
29165: LD_INT 1
29167: ARRAY
29168: PUSH
29169: LD_INT 1
29171: ARRAY
29172: PUSH
29173: LD_STRING p
29175: EQUAL
29176: IFFALSE 29186
// result := true ;
29178: LD_ADDR_VAR 0 2
29182: PUSH
29183: LD_INT 1
29185: ST_TO_ADDR
// end ;
29186: LD_VAR 0 2
29190: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29191: LD_INT 0
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
// if pos < 1 then
29197: LD_VAR 0 2
29201: PUSH
29202: LD_INT 1
29204: LESS
29205: IFFALSE 29209
// exit ;
29207: GO 29512
// if pos = 1 then
29209: LD_VAR 0 2
29213: PUSH
29214: LD_INT 1
29216: EQUAL
29217: IFFALSE 29250
// result := Replace ( arr , pos [ 1 ] , value ) else
29219: LD_ADDR_VAR 0 4
29223: PUSH
29224: LD_VAR 0 1
29228: PPUSH
29229: LD_VAR 0 2
29233: PUSH
29234: LD_INT 1
29236: ARRAY
29237: PPUSH
29238: LD_VAR 0 3
29242: PPUSH
29243: CALL_OW 1
29247: ST_TO_ADDR
29248: GO 29512
// begin tmp := arr ;
29250: LD_ADDR_VAR 0 6
29254: PUSH
29255: LD_VAR 0 1
29259: ST_TO_ADDR
// s_arr := [ tmp ] ;
29260: LD_ADDR_VAR 0 7
29264: PUSH
29265: LD_VAR 0 6
29269: PUSH
29270: EMPTY
29271: LIST
29272: ST_TO_ADDR
// for i = 1 to pos - 1 do
29273: LD_ADDR_VAR 0 5
29277: PUSH
29278: DOUBLE
29279: LD_INT 1
29281: DEC
29282: ST_TO_ADDR
29283: LD_VAR 0 2
29287: PUSH
29288: LD_INT 1
29290: MINUS
29291: PUSH
29292: FOR_TO
29293: IFFALSE 29338
// begin tmp := tmp [ pos [ i ] ] ;
29295: LD_ADDR_VAR 0 6
29299: PUSH
29300: LD_VAR 0 6
29304: PUSH
29305: LD_VAR 0 2
29309: PUSH
29310: LD_VAR 0 5
29314: ARRAY
29315: ARRAY
29316: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29317: LD_ADDR_VAR 0 7
29321: PUSH
29322: LD_VAR 0 7
29326: PUSH
29327: LD_VAR 0 6
29331: PUSH
29332: EMPTY
29333: LIST
29334: ADD
29335: ST_TO_ADDR
// end ;
29336: GO 29292
29338: POP
29339: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29340: LD_ADDR_VAR 0 6
29344: PUSH
29345: LD_VAR 0 6
29349: PPUSH
29350: LD_VAR 0 2
29354: PUSH
29355: LD_VAR 0 2
29359: ARRAY
29360: PPUSH
29361: LD_VAR 0 3
29365: PPUSH
29366: CALL_OW 1
29370: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29371: LD_ADDR_VAR 0 7
29375: PUSH
29376: LD_VAR 0 7
29380: PPUSH
29381: LD_VAR 0 7
29385: PPUSH
29386: LD_VAR 0 6
29390: PPUSH
29391: CALL_OW 1
29395: ST_TO_ADDR
// for i = s_arr downto 2 do
29396: LD_ADDR_VAR 0 5
29400: PUSH
29401: DOUBLE
29402: LD_VAR 0 7
29406: INC
29407: ST_TO_ADDR
29408: LD_INT 2
29410: PUSH
29411: FOR_DOWNTO
29412: IFFALSE 29496
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29414: LD_ADDR_VAR 0 6
29418: PUSH
29419: LD_VAR 0 7
29423: PUSH
29424: LD_VAR 0 5
29428: PUSH
29429: LD_INT 1
29431: MINUS
29432: ARRAY
29433: PPUSH
29434: LD_VAR 0 2
29438: PUSH
29439: LD_VAR 0 5
29443: PUSH
29444: LD_INT 1
29446: MINUS
29447: ARRAY
29448: PPUSH
29449: LD_VAR 0 7
29453: PUSH
29454: LD_VAR 0 5
29458: ARRAY
29459: PPUSH
29460: CALL_OW 1
29464: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29465: LD_ADDR_VAR 0 7
29469: PUSH
29470: LD_VAR 0 7
29474: PPUSH
29475: LD_VAR 0 5
29479: PUSH
29480: LD_INT 1
29482: MINUS
29483: PPUSH
29484: LD_VAR 0 6
29488: PPUSH
29489: CALL_OW 1
29493: ST_TO_ADDR
// end ;
29494: GO 29411
29496: POP
29497: POP
// result := s_arr [ 1 ] ;
29498: LD_ADDR_VAR 0 4
29502: PUSH
29503: LD_VAR 0 7
29507: PUSH
29508: LD_INT 1
29510: ARRAY
29511: ST_TO_ADDR
// end ; end ;
29512: LD_VAR 0 4
29516: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29517: LD_INT 0
29519: PPUSH
29520: PPUSH
// if not list then
29521: LD_VAR 0 1
29525: NOT
29526: IFFALSE 29530
// exit ;
29528: GO 29621
// i := list [ pos1 ] ;
29530: LD_ADDR_VAR 0 5
29534: PUSH
29535: LD_VAR 0 1
29539: PUSH
29540: LD_VAR 0 2
29544: ARRAY
29545: ST_TO_ADDR
// if not i then
29546: LD_VAR 0 5
29550: NOT
29551: IFFALSE 29555
// exit ;
29553: GO 29621
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29555: LD_ADDR_VAR 0 1
29559: PUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: LD_VAR 0 2
29569: PPUSH
29570: LD_VAR 0 1
29574: PUSH
29575: LD_VAR 0 3
29579: ARRAY
29580: PPUSH
29581: CALL_OW 1
29585: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29586: LD_ADDR_VAR 0 1
29590: PUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: LD_VAR 0 3
29600: PPUSH
29601: LD_VAR 0 5
29605: PPUSH
29606: CALL_OW 1
29610: ST_TO_ADDR
// result := list ;
29611: LD_ADDR_VAR 0 4
29615: PUSH
29616: LD_VAR 0 1
29620: ST_TO_ADDR
// end ;
29621: LD_VAR 0 4
29625: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29626: LD_INT 0
29628: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29629: LD_ADDR_VAR 0 5
29633: PUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 250
29643: PPUSH
29644: LD_VAR 0 1
29648: PPUSH
29649: CALL_OW 251
29653: PPUSH
29654: LD_VAR 0 2
29658: PPUSH
29659: LD_VAR 0 3
29663: PPUSH
29664: LD_VAR 0 4
29668: PPUSH
29669: CALL 29679 0 5
29673: ST_TO_ADDR
// end ;
29674: LD_VAR 0 5
29678: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29679: LD_INT 0
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
// if not list then
29685: LD_VAR 0 3
29689: NOT
29690: IFFALSE 29694
// exit ;
29692: GO 30082
// result := [ ] ;
29694: LD_ADDR_VAR 0 6
29698: PUSH
29699: EMPTY
29700: ST_TO_ADDR
// for i in list do
29701: LD_ADDR_VAR 0 7
29705: PUSH
29706: LD_VAR 0 3
29710: PUSH
29711: FOR_IN
29712: IFFALSE 29914
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29714: LD_ADDR_VAR 0 9
29718: PUSH
29719: LD_VAR 0 7
29723: PPUSH
29724: LD_VAR 0 1
29728: PPUSH
29729: LD_VAR 0 2
29733: PPUSH
29734: CALL_OW 297
29738: ST_TO_ADDR
// if not result then
29739: LD_VAR 0 6
29743: NOT
29744: IFFALSE 29770
// result := [ [ i , tmp ] ] else
29746: LD_ADDR_VAR 0 6
29750: PUSH
29751: LD_VAR 0 7
29755: PUSH
29756: LD_VAR 0 9
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: ST_TO_ADDR
29768: GO 29912
// begin if result [ result ] [ 2 ] < tmp then
29770: LD_VAR 0 6
29774: PUSH
29775: LD_VAR 0 6
29779: ARRAY
29780: PUSH
29781: LD_INT 2
29783: ARRAY
29784: PUSH
29785: LD_VAR 0 9
29789: LESS
29790: IFFALSE 29832
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29792: LD_ADDR_VAR 0 6
29796: PUSH
29797: LD_VAR 0 6
29801: PPUSH
29802: LD_VAR 0 6
29806: PUSH
29807: LD_INT 1
29809: PLUS
29810: PPUSH
29811: LD_VAR 0 7
29815: PUSH
29816: LD_VAR 0 9
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PPUSH
29825: CALL_OW 2
29829: ST_TO_ADDR
29830: GO 29912
// for j = 1 to result do
29832: LD_ADDR_VAR 0 8
29836: PUSH
29837: DOUBLE
29838: LD_INT 1
29840: DEC
29841: ST_TO_ADDR
29842: LD_VAR 0 6
29846: PUSH
29847: FOR_TO
29848: IFFALSE 29910
// begin if tmp < result [ j ] [ 2 ] then
29850: LD_VAR 0 9
29854: PUSH
29855: LD_VAR 0 6
29859: PUSH
29860: LD_VAR 0 8
29864: ARRAY
29865: PUSH
29866: LD_INT 2
29868: ARRAY
29869: LESS
29870: IFFALSE 29908
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29872: LD_ADDR_VAR 0 6
29876: PUSH
29877: LD_VAR 0 6
29881: PPUSH
29882: LD_VAR 0 8
29886: PPUSH
29887: LD_VAR 0 7
29891: PUSH
29892: LD_VAR 0 9
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PPUSH
29901: CALL_OW 2
29905: ST_TO_ADDR
// break ;
29906: GO 29910
// end ; end ;
29908: GO 29847
29910: POP
29911: POP
// end ; end ;
29912: GO 29711
29914: POP
29915: POP
// if result and not asc then
29916: LD_VAR 0 6
29920: PUSH
29921: LD_VAR 0 4
29925: NOT
29926: AND
29927: IFFALSE 30002
// begin tmp := result ;
29929: LD_ADDR_VAR 0 9
29933: PUSH
29934: LD_VAR 0 6
29938: ST_TO_ADDR
// for i = tmp downto 1 do
29939: LD_ADDR_VAR 0 7
29943: PUSH
29944: DOUBLE
29945: LD_VAR 0 9
29949: INC
29950: ST_TO_ADDR
29951: LD_INT 1
29953: PUSH
29954: FOR_DOWNTO
29955: IFFALSE 30000
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29957: LD_ADDR_VAR 0 6
29961: PUSH
29962: LD_VAR 0 6
29966: PPUSH
29967: LD_VAR 0 9
29971: PUSH
29972: LD_VAR 0 7
29976: MINUS
29977: PUSH
29978: LD_INT 1
29980: PLUS
29981: PPUSH
29982: LD_VAR 0 9
29986: PUSH
29987: LD_VAR 0 7
29991: ARRAY
29992: PPUSH
29993: CALL_OW 1
29997: ST_TO_ADDR
29998: GO 29954
30000: POP
30001: POP
// end ; tmp := [ ] ;
30002: LD_ADDR_VAR 0 9
30006: PUSH
30007: EMPTY
30008: ST_TO_ADDR
// if mode then
30009: LD_VAR 0 5
30013: IFFALSE 30082
// begin for i = 1 to result do
30015: LD_ADDR_VAR 0 7
30019: PUSH
30020: DOUBLE
30021: LD_INT 1
30023: DEC
30024: ST_TO_ADDR
30025: LD_VAR 0 6
30029: PUSH
30030: FOR_TO
30031: IFFALSE 30070
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30033: LD_ADDR_VAR 0 9
30037: PUSH
30038: LD_VAR 0 9
30042: PPUSH
30043: LD_VAR 0 7
30047: PPUSH
30048: LD_VAR 0 6
30052: PUSH
30053: LD_VAR 0 7
30057: ARRAY
30058: PUSH
30059: LD_INT 1
30061: ARRAY
30062: PPUSH
30063: CALL_OW 1
30067: ST_TO_ADDR
30068: GO 30030
30070: POP
30071: POP
// result := tmp ;
30072: LD_ADDR_VAR 0 6
30076: PUSH
30077: LD_VAR 0 9
30081: ST_TO_ADDR
// end ; end ;
30082: LD_VAR 0 6
30086: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30087: LD_INT 0
30089: PPUSH
30090: PPUSH
30091: PPUSH
30092: PPUSH
30093: PPUSH
30094: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30095: LD_ADDR_VAR 0 5
30099: PUSH
30100: LD_INT 0
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: EMPTY
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: ST_TO_ADDR
// if not x or not y then
30117: LD_VAR 0 2
30121: NOT
30122: PUSH
30123: LD_VAR 0 3
30127: NOT
30128: OR
30129: IFFALSE 30133
// exit ;
30131: GO 31783
// if not range then
30133: LD_VAR 0 4
30137: NOT
30138: IFFALSE 30148
// range := 10 ;
30140: LD_ADDR_VAR 0 4
30144: PUSH
30145: LD_INT 10
30147: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30148: LD_ADDR_VAR 0 8
30152: PUSH
30153: LD_INT 81
30155: PUSH
30156: LD_VAR 0 1
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 92
30167: PUSH
30168: LD_VAR 0 2
30172: PUSH
30173: LD_VAR 0 3
30177: PUSH
30178: LD_VAR 0 4
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 3
30191: PUSH
30192: LD_INT 21
30194: PUSH
30195: LD_INT 3
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: LIST
30210: PPUSH
30211: CALL_OW 69
30215: ST_TO_ADDR
// if not tmp then
30216: LD_VAR 0 8
30220: NOT
30221: IFFALSE 30225
// exit ;
30223: GO 31783
// for i in tmp do
30225: LD_ADDR_VAR 0 6
30229: PUSH
30230: LD_VAR 0 8
30234: PUSH
30235: FOR_IN
30236: IFFALSE 31758
// begin points := [ 0 , 0 , 0 ] ;
30238: LD_ADDR_VAR 0 9
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: ST_TO_ADDR
// bpoints := 1 ;
30257: LD_ADDR_VAR 0 10
30261: PUSH
30262: LD_INT 1
30264: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30265: LD_VAR 0 6
30269: PPUSH
30270: CALL_OW 247
30274: PUSH
30275: LD_INT 1
30277: DOUBLE
30278: EQUAL
30279: IFTRUE 30283
30281: GO 30861
30283: POP
// begin if GetClass ( i ) = 1 then
30284: LD_VAR 0 6
30288: PPUSH
30289: CALL_OW 257
30293: PUSH
30294: LD_INT 1
30296: EQUAL
30297: IFFALSE 30318
// points := [ 10 , 5 , 3 ] ;
30299: LD_ADDR_VAR 0 9
30303: PUSH
30304: LD_INT 10
30306: PUSH
30307: LD_INT 5
30309: PUSH
30310: LD_INT 3
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: LIST
30317: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30318: LD_VAR 0 6
30322: PPUSH
30323: CALL_OW 257
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: LD_INT 4
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: IN
30342: IFFALSE 30363
// points := [ 3 , 2 , 1 ] ;
30344: LD_ADDR_VAR 0 9
30348: PUSH
30349: LD_INT 3
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: LIST
30362: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30363: LD_VAR 0 6
30367: PPUSH
30368: CALL_OW 257
30372: PUSH
30373: LD_INT 5
30375: EQUAL
30376: IFFALSE 30397
// points := [ 130 , 5 , 2 ] ;
30378: LD_ADDR_VAR 0 9
30382: PUSH
30383: LD_INT 130
30385: PUSH
30386: LD_INT 5
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30397: LD_VAR 0 6
30401: PPUSH
30402: CALL_OW 257
30406: PUSH
30407: LD_INT 8
30409: EQUAL
30410: IFFALSE 30431
// points := [ 35 , 35 , 30 ] ;
30412: LD_ADDR_VAR 0 9
30416: PUSH
30417: LD_INT 35
30419: PUSH
30420: LD_INT 35
30422: PUSH
30423: LD_INT 30
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30431: LD_VAR 0 6
30435: PPUSH
30436: CALL_OW 257
30440: PUSH
30441: LD_INT 9
30443: EQUAL
30444: IFFALSE 30465
// points := [ 20 , 55 , 40 ] ;
30446: LD_ADDR_VAR 0 9
30450: PUSH
30451: LD_INT 20
30453: PUSH
30454: LD_INT 55
30456: PUSH
30457: LD_INT 40
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30465: LD_VAR 0 6
30469: PPUSH
30470: CALL_OW 257
30474: PUSH
30475: LD_INT 12
30477: PUSH
30478: LD_INT 16
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: IN
30485: IFFALSE 30506
// points := [ 5 , 3 , 2 ] ;
30487: LD_ADDR_VAR 0 9
30491: PUSH
30492: LD_INT 5
30494: PUSH
30495: LD_INT 3
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30506: LD_VAR 0 6
30510: PPUSH
30511: CALL_OW 257
30515: PUSH
30516: LD_INT 17
30518: EQUAL
30519: IFFALSE 30540
// points := [ 100 , 50 , 75 ] ;
30521: LD_ADDR_VAR 0 9
30525: PUSH
30526: LD_INT 100
30528: PUSH
30529: LD_INT 50
30531: PUSH
30532: LD_INT 75
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30540: LD_VAR 0 6
30544: PPUSH
30545: CALL_OW 257
30549: PUSH
30550: LD_INT 15
30552: EQUAL
30553: IFFALSE 30574
// points := [ 10 , 5 , 3 ] ;
30555: LD_ADDR_VAR 0 9
30559: PUSH
30560: LD_INT 10
30562: PUSH
30563: LD_INT 5
30565: PUSH
30566: LD_INT 3
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30574: LD_VAR 0 6
30578: PPUSH
30579: CALL_OW 257
30583: PUSH
30584: LD_INT 14
30586: EQUAL
30587: IFFALSE 30608
// points := [ 10 , 0 , 0 ] ;
30589: LD_ADDR_VAR 0 9
30593: PUSH
30594: LD_INT 10
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: LIST
30607: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30608: LD_VAR 0 6
30612: PPUSH
30613: CALL_OW 257
30617: PUSH
30618: LD_INT 11
30620: EQUAL
30621: IFFALSE 30642
// points := [ 30 , 10 , 5 ] ;
30623: LD_ADDR_VAR 0 9
30627: PUSH
30628: LD_INT 30
30630: PUSH
30631: LD_INT 10
30633: PUSH
30634: LD_INT 5
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: LIST
30641: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30642: LD_VAR 0 1
30646: PPUSH
30647: LD_INT 5
30649: PPUSH
30650: CALL_OW 321
30654: PUSH
30655: LD_INT 2
30657: EQUAL
30658: IFFALSE 30675
// bpoints := bpoints * 1.8 ;
30660: LD_ADDR_VAR 0 10
30664: PUSH
30665: LD_VAR 0 10
30669: PUSH
30670: LD_REAL  1.80000000000000E+0000
30673: MUL
30674: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30675: LD_VAR 0 6
30679: PPUSH
30680: CALL_OW 257
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 3
30693: PUSH
30694: LD_INT 4
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: IN
30703: PUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: LD_INT 51
30711: PPUSH
30712: CALL_OW 321
30716: PUSH
30717: LD_INT 2
30719: EQUAL
30720: AND
30721: IFFALSE 30738
// bpoints := bpoints * 1.2 ;
30723: LD_ADDR_VAR 0 10
30727: PUSH
30728: LD_VAR 0 10
30732: PUSH
30733: LD_REAL  1.20000000000000E+0000
30736: MUL
30737: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30738: LD_VAR 0 6
30742: PPUSH
30743: CALL_OW 257
30747: PUSH
30748: LD_INT 5
30750: PUSH
30751: LD_INT 7
30753: PUSH
30754: LD_INT 9
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: IN
30762: PUSH
30763: LD_VAR 0 1
30767: PPUSH
30768: LD_INT 52
30770: PPUSH
30771: CALL_OW 321
30775: PUSH
30776: LD_INT 2
30778: EQUAL
30779: AND
30780: IFFALSE 30797
// bpoints := bpoints * 1.5 ;
30782: LD_ADDR_VAR 0 10
30786: PUSH
30787: LD_VAR 0 10
30791: PUSH
30792: LD_REAL  1.50000000000000E+0000
30795: MUL
30796: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30797: LD_VAR 0 1
30801: PPUSH
30802: LD_INT 66
30804: PPUSH
30805: CALL_OW 321
30809: PUSH
30810: LD_INT 2
30812: EQUAL
30813: IFFALSE 30830
// bpoints := bpoints * 1.1 ;
30815: LD_ADDR_VAR 0 10
30819: PUSH
30820: LD_VAR 0 10
30824: PUSH
30825: LD_REAL  1.10000000000000E+0000
30828: MUL
30829: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30830: LD_ADDR_VAR 0 10
30834: PUSH
30835: LD_VAR 0 10
30839: PUSH
30840: LD_VAR 0 6
30844: PPUSH
30845: LD_INT 1
30847: PPUSH
30848: CALL_OW 259
30852: PUSH
30853: LD_REAL  1.15000000000000E+0000
30856: MUL
30857: MUL
30858: ST_TO_ADDR
// end ; unit_vehicle :
30859: GO 31687
30861: LD_INT 2
30863: DOUBLE
30864: EQUAL
30865: IFTRUE 30869
30867: GO 31675
30869: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30870: LD_VAR 0 6
30874: PPUSH
30875: CALL_OW 264
30879: PUSH
30880: LD_INT 2
30882: PUSH
30883: LD_INT 42
30885: PUSH
30886: LD_INT 24
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: IN
30894: IFFALSE 30915
// points := [ 25 , 5 , 3 ] ;
30896: LD_ADDR_VAR 0 9
30900: PUSH
30901: LD_INT 25
30903: PUSH
30904: LD_INT 5
30906: PUSH
30907: LD_INT 3
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30915: LD_VAR 0 6
30919: PPUSH
30920: CALL_OW 264
30924: PUSH
30925: LD_INT 4
30927: PUSH
30928: LD_INT 43
30930: PUSH
30931: LD_INT 25
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: IN
30939: IFFALSE 30960
// points := [ 40 , 15 , 5 ] ;
30941: LD_ADDR_VAR 0 9
30945: PUSH
30946: LD_INT 40
30948: PUSH
30949: LD_INT 15
30951: PUSH
30952: LD_INT 5
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30960: LD_VAR 0 6
30964: PPUSH
30965: CALL_OW 264
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: LD_INT 23
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: IN
30980: IFFALSE 31001
// points := [ 7 , 25 , 8 ] ;
30982: LD_ADDR_VAR 0 9
30986: PUSH
30987: LD_INT 7
30989: PUSH
30990: LD_INT 25
30992: PUSH
30993: LD_INT 8
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31001: LD_VAR 0 6
31005: PPUSH
31006: CALL_OW 264
31010: PUSH
31011: LD_INT 5
31013: PUSH
31014: LD_INT 27
31016: PUSH
31017: LD_INT 44
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: IN
31025: IFFALSE 31046
// points := [ 14 , 50 , 16 ] ;
31027: LD_ADDR_VAR 0 9
31031: PUSH
31032: LD_INT 14
31034: PUSH
31035: LD_INT 50
31037: PUSH
31038: LD_INT 16
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31046: LD_VAR 0 6
31050: PPUSH
31051: CALL_OW 264
31055: PUSH
31056: LD_INT 6
31058: PUSH
31059: LD_INT 46
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: IN
31066: IFFALSE 31087
// points := [ 32 , 120 , 70 ] ;
31068: LD_ADDR_VAR 0 9
31072: PUSH
31073: LD_INT 32
31075: PUSH
31076: LD_INT 120
31078: PUSH
31079: LD_INT 70
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31087: LD_VAR 0 6
31091: PPUSH
31092: CALL_OW 264
31096: PUSH
31097: LD_INT 7
31099: PUSH
31100: LD_INT 28
31102: PUSH
31103: LD_INT 45
31105: PUSH
31106: LD_INT 92
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: IN
31115: IFFALSE 31136
// points := [ 35 , 20 , 45 ] ;
31117: LD_ADDR_VAR 0 9
31121: PUSH
31122: LD_INT 35
31124: PUSH
31125: LD_INT 20
31127: PUSH
31128: LD_INT 45
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31136: LD_VAR 0 6
31140: PPUSH
31141: CALL_OW 264
31145: PUSH
31146: LD_INT 47
31148: PUSH
31149: EMPTY
31150: LIST
31151: IN
31152: IFFALSE 31173
// points := [ 67 , 45 , 75 ] ;
31154: LD_ADDR_VAR 0 9
31158: PUSH
31159: LD_INT 67
31161: PUSH
31162: LD_INT 45
31164: PUSH
31165: LD_INT 75
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31173: LD_VAR 0 6
31177: PPUSH
31178: CALL_OW 264
31182: PUSH
31183: LD_INT 26
31185: PUSH
31186: EMPTY
31187: LIST
31188: IN
31189: IFFALSE 31210
// points := [ 120 , 30 , 80 ] ;
31191: LD_ADDR_VAR 0 9
31195: PUSH
31196: LD_INT 120
31198: PUSH
31199: LD_INT 30
31201: PUSH
31202: LD_INT 80
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31210: LD_VAR 0 6
31214: PPUSH
31215: CALL_OW 264
31219: PUSH
31220: LD_INT 22
31222: PUSH
31223: EMPTY
31224: LIST
31225: IN
31226: IFFALSE 31247
// points := [ 40 , 1 , 1 ] ;
31228: LD_ADDR_VAR 0 9
31232: PUSH
31233: LD_INT 40
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31247: LD_VAR 0 6
31251: PPUSH
31252: CALL_OW 264
31256: PUSH
31257: LD_INT 29
31259: PUSH
31260: EMPTY
31261: LIST
31262: IN
31263: IFFALSE 31284
// points := [ 70 , 200 , 400 ] ;
31265: LD_ADDR_VAR 0 9
31269: PUSH
31270: LD_INT 70
31272: PUSH
31273: LD_INT 200
31275: PUSH
31276: LD_INT 400
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31284: LD_VAR 0 6
31288: PPUSH
31289: CALL_OW 264
31293: PUSH
31294: LD_INT 14
31296: PUSH
31297: LD_INT 53
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: IN
31304: IFFALSE 31325
// points := [ 40 , 10 , 20 ] ;
31306: LD_ADDR_VAR 0 9
31310: PUSH
31311: LD_INT 40
31313: PUSH
31314: LD_INT 10
31316: PUSH
31317: LD_INT 20
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31325: LD_VAR 0 6
31329: PPUSH
31330: CALL_OW 264
31334: PUSH
31335: LD_INT 9
31337: PUSH
31338: EMPTY
31339: LIST
31340: IN
31341: IFFALSE 31362
// points := [ 5 , 70 , 20 ] ;
31343: LD_ADDR_VAR 0 9
31347: PUSH
31348: LD_INT 5
31350: PUSH
31351: LD_INT 70
31353: PUSH
31354: LD_INT 20
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31362: LD_VAR 0 6
31366: PPUSH
31367: CALL_OW 264
31371: PUSH
31372: LD_INT 10
31374: PUSH
31375: EMPTY
31376: LIST
31377: IN
31378: IFFALSE 31399
// points := [ 35 , 110 , 70 ] ;
31380: LD_ADDR_VAR 0 9
31384: PUSH
31385: LD_INT 35
31387: PUSH
31388: LD_INT 110
31390: PUSH
31391: LD_INT 70
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31399: LD_VAR 0 6
31403: PPUSH
31404: CALL_OW 265
31408: PUSH
31409: LD_INT 25
31411: EQUAL
31412: IFFALSE 31433
// points := [ 80 , 65 , 100 ] ;
31414: LD_ADDR_VAR 0 9
31418: PUSH
31419: LD_INT 80
31421: PUSH
31422: LD_INT 65
31424: PUSH
31425: LD_INT 100
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31433: LD_VAR 0 6
31437: PPUSH
31438: CALL_OW 263
31442: PUSH
31443: LD_INT 1
31445: EQUAL
31446: IFFALSE 31481
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31448: LD_ADDR_VAR 0 10
31452: PUSH
31453: LD_VAR 0 10
31457: PUSH
31458: LD_VAR 0 6
31462: PPUSH
31463: CALL_OW 311
31467: PPUSH
31468: LD_INT 3
31470: PPUSH
31471: CALL_OW 259
31475: PUSH
31476: LD_INT 4
31478: MUL
31479: MUL
31480: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31481: LD_VAR 0 6
31485: PPUSH
31486: CALL_OW 263
31490: PUSH
31491: LD_INT 2
31493: EQUAL
31494: IFFALSE 31545
// begin j := IsControledBy ( i ) ;
31496: LD_ADDR_VAR 0 7
31500: PUSH
31501: LD_VAR 0 6
31505: PPUSH
31506: CALL_OW 312
31510: ST_TO_ADDR
// if j then
31511: LD_VAR 0 7
31515: IFFALSE 31545
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31517: LD_ADDR_VAR 0 10
31521: PUSH
31522: LD_VAR 0 10
31526: PUSH
31527: LD_VAR 0 7
31531: PPUSH
31532: LD_INT 3
31534: PPUSH
31535: CALL_OW 259
31539: PUSH
31540: LD_INT 3
31542: MUL
31543: MUL
31544: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31545: LD_VAR 0 6
31549: PPUSH
31550: CALL_OW 264
31554: PUSH
31555: LD_INT 5
31557: PUSH
31558: LD_INT 6
31560: PUSH
31561: LD_INT 46
31563: PUSH
31564: LD_INT 44
31566: PUSH
31567: LD_INT 47
31569: PUSH
31570: LD_INT 45
31572: PUSH
31573: LD_INT 28
31575: PUSH
31576: LD_INT 7
31578: PUSH
31579: LD_INT 27
31581: PUSH
31582: LD_INT 29
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: IN
31597: PUSH
31598: LD_VAR 0 1
31602: PPUSH
31603: LD_INT 52
31605: PPUSH
31606: CALL_OW 321
31610: PUSH
31611: LD_INT 2
31613: EQUAL
31614: AND
31615: IFFALSE 31632
// bpoints := bpoints * 1.2 ;
31617: LD_ADDR_VAR 0 10
31621: PUSH
31622: LD_VAR 0 10
31626: PUSH
31627: LD_REAL  1.20000000000000E+0000
31630: MUL
31631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31632: LD_VAR 0 6
31636: PPUSH
31637: CALL_OW 264
31641: PUSH
31642: LD_INT 6
31644: PUSH
31645: LD_INT 46
31647: PUSH
31648: LD_INT 47
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: IN
31656: IFFALSE 31673
// bpoints := bpoints * 1.2 ;
31658: LD_ADDR_VAR 0 10
31662: PUSH
31663: LD_VAR 0 10
31667: PUSH
31668: LD_REAL  1.20000000000000E+0000
31671: MUL
31672: ST_TO_ADDR
// end ; unit_building :
31673: GO 31687
31675: LD_INT 3
31677: DOUBLE
31678: EQUAL
31679: IFTRUE 31683
31681: GO 31686
31683: POP
// ; end ;
31684: GO 31687
31686: POP
// for j = 1 to 3 do
31687: LD_ADDR_VAR 0 7
31691: PUSH
31692: DOUBLE
31693: LD_INT 1
31695: DEC
31696: ST_TO_ADDR
31697: LD_INT 3
31699: PUSH
31700: FOR_TO
31701: IFFALSE 31754
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31703: LD_ADDR_VAR 0 5
31707: PUSH
31708: LD_VAR 0 5
31712: PPUSH
31713: LD_VAR 0 7
31717: PPUSH
31718: LD_VAR 0 5
31722: PUSH
31723: LD_VAR 0 7
31727: ARRAY
31728: PUSH
31729: LD_VAR 0 9
31733: PUSH
31734: LD_VAR 0 7
31738: ARRAY
31739: PUSH
31740: LD_VAR 0 10
31744: MUL
31745: PLUS
31746: PPUSH
31747: CALL_OW 1
31751: ST_TO_ADDR
31752: GO 31700
31754: POP
31755: POP
// end ;
31756: GO 30235
31758: POP
31759: POP
// result := Replace ( result , 4 , tmp ) ;
31760: LD_ADDR_VAR 0 5
31764: PUSH
31765: LD_VAR 0 5
31769: PPUSH
31770: LD_INT 4
31772: PPUSH
31773: LD_VAR 0 8
31777: PPUSH
31778: CALL_OW 1
31782: ST_TO_ADDR
// end ;
31783: LD_VAR 0 5
31787: RET
// export function DangerAtRange ( unit , range ) ; begin
31788: LD_INT 0
31790: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_VAR 0 1
31800: PPUSH
31801: CALL_OW 255
31805: PPUSH
31806: LD_VAR 0 1
31810: PPUSH
31811: CALL_OW 250
31815: PPUSH
31816: LD_VAR 0 1
31820: PPUSH
31821: CALL_OW 251
31825: PPUSH
31826: LD_VAR 0 2
31830: PPUSH
31831: CALL 30087 0 4
31835: ST_TO_ADDR
// end ;
31836: LD_VAR 0 3
31840: RET
// export function DangerInArea ( side , area ) ; begin
31841: LD_INT 0
31843: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31844: LD_ADDR_VAR 0 3
31848: PUSH
31849: LD_VAR 0 2
31853: PPUSH
31854: LD_INT 81
31856: PUSH
31857: LD_VAR 0 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PPUSH
31866: CALL_OW 70
31870: ST_TO_ADDR
// end ;
31871: LD_VAR 0 3
31875: RET
// export function IsExtension ( b ) ; begin
31876: LD_INT 0
31878: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31879: LD_ADDR_VAR 0 2
31883: PUSH
31884: LD_VAR 0 1
31888: PUSH
31889: LD_INT 23
31891: PUSH
31892: LD_INT 20
31894: PUSH
31895: LD_INT 22
31897: PUSH
31898: LD_INT 17
31900: PUSH
31901: LD_INT 24
31903: PUSH
31904: LD_INT 21
31906: PUSH
31907: LD_INT 19
31909: PUSH
31910: LD_INT 16
31912: PUSH
31913: LD_INT 25
31915: PUSH
31916: LD_INT 18
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: IN
31931: ST_TO_ADDR
// end ;
31932: LD_VAR 0 2
31936: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31937: LD_INT 0
31939: PPUSH
31940: PPUSH
31941: PPUSH
// result := [ ] ;
31942: LD_ADDR_VAR 0 4
31946: PUSH
31947: EMPTY
31948: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31949: LD_ADDR_VAR 0 5
31953: PUSH
31954: LD_VAR 0 2
31958: PPUSH
31959: LD_INT 21
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PPUSH
31969: CALL_OW 70
31973: ST_TO_ADDR
// if not tmp then
31974: LD_VAR 0 5
31978: NOT
31979: IFFALSE 31983
// exit ;
31981: GO 32047
// if checkLink then
31983: LD_VAR 0 3
31987: IFFALSE 32037
// begin for i in tmp do
31989: LD_ADDR_VAR 0 6
31993: PUSH
31994: LD_VAR 0 5
31998: PUSH
31999: FOR_IN
32000: IFFALSE 32035
// if GetBase ( i ) <> base then
32002: LD_VAR 0 6
32006: PPUSH
32007: CALL_OW 274
32011: PUSH
32012: LD_VAR 0 1
32016: NONEQUAL
32017: IFFALSE 32033
// ComLinkToBase ( base , i ) ;
32019: LD_VAR 0 1
32023: PPUSH
32024: LD_VAR 0 6
32028: PPUSH
32029: CALL_OW 169
32033: GO 31999
32035: POP
32036: POP
// end ; result := tmp ;
32037: LD_ADDR_VAR 0 4
32041: PUSH
32042: LD_VAR 0 5
32046: ST_TO_ADDR
// end ;
32047: LD_VAR 0 4
32051: RET
// export function ComComplete ( units , b ) ; var i ; begin
32052: LD_INT 0
32054: PPUSH
32055: PPUSH
// if not units then
32056: LD_VAR 0 1
32060: NOT
32061: IFFALSE 32065
// exit ;
32063: GO 32155
// for i in units do
32065: LD_ADDR_VAR 0 4
32069: PUSH
32070: LD_VAR 0 1
32074: PUSH
32075: FOR_IN
32076: IFFALSE 32153
// if BuildingStatus ( b ) = bs_build then
32078: LD_VAR 0 2
32082: PPUSH
32083: CALL_OW 461
32087: PUSH
32088: LD_INT 1
32090: EQUAL
32091: IFFALSE 32151
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32093: LD_VAR 0 4
32097: PPUSH
32098: LD_STRING h
32100: PUSH
32101: LD_VAR 0 2
32105: PPUSH
32106: CALL_OW 250
32110: PUSH
32111: LD_VAR 0 2
32115: PPUSH
32116: CALL_OW 251
32120: PUSH
32121: LD_VAR 0 2
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: PPUSH
32147: CALL_OW 446
32151: GO 32075
32153: POP
32154: POP
// end ;
32155: LD_VAR 0 3
32159: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32160: LD_INT 0
32162: PPUSH
32163: PPUSH
32164: PPUSH
32165: PPUSH
32166: PPUSH
32167: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32168: LD_VAR 0 1
32172: NOT
32173: PUSH
32174: LD_VAR 0 1
32178: PPUSH
32179: CALL_OW 263
32183: PUSH
32184: LD_INT 2
32186: NONEQUAL
32187: OR
32188: IFFALSE 32192
// exit ;
32190: GO 32508
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32192: LD_ADDR_VAR 0 6
32196: PUSH
32197: LD_INT 22
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 255
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: LD_INT 30
32219: PUSH
32220: LD_INT 36
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 34
32229: PUSH
32230: LD_INT 31
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PPUSH
32246: CALL_OW 69
32250: ST_TO_ADDR
// if not tmp then
32251: LD_VAR 0 6
32255: NOT
32256: IFFALSE 32260
// exit ;
32258: GO 32508
// result := [ ] ;
32260: LD_ADDR_VAR 0 2
32264: PUSH
32265: EMPTY
32266: ST_TO_ADDR
// for i in tmp do
32267: LD_ADDR_VAR 0 3
32271: PUSH
32272: LD_VAR 0 6
32276: PUSH
32277: FOR_IN
32278: IFFALSE 32349
// begin t := UnitsInside ( i ) ;
32280: LD_ADDR_VAR 0 4
32284: PUSH
32285: LD_VAR 0 3
32289: PPUSH
32290: CALL_OW 313
32294: ST_TO_ADDR
// if t then
32295: LD_VAR 0 4
32299: IFFALSE 32347
// for j in t do
32301: LD_ADDR_VAR 0 7
32305: PUSH
32306: LD_VAR 0 4
32310: PUSH
32311: FOR_IN
32312: IFFALSE 32345
// result := Replace ( result , result + 1 , j ) ;
32314: LD_ADDR_VAR 0 2
32318: PUSH
32319: LD_VAR 0 2
32323: PPUSH
32324: LD_VAR 0 2
32328: PUSH
32329: LD_INT 1
32331: PLUS
32332: PPUSH
32333: LD_VAR 0 7
32337: PPUSH
32338: CALL_OW 1
32342: ST_TO_ADDR
32343: GO 32311
32345: POP
32346: POP
// end ;
32347: GO 32277
32349: POP
32350: POP
// if not result then
32351: LD_VAR 0 2
32355: NOT
32356: IFFALSE 32360
// exit ;
32358: GO 32508
// mech := result [ 1 ] ;
32360: LD_ADDR_VAR 0 5
32364: PUSH
32365: LD_VAR 0 2
32369: PUSH
32370: LD_INT 1
32372: ARRAY
32373: ST_TO_ADDR
// if result > 1 then
32374: LD_VAR 0 2
32378: PUSH
32379: LD_INT 1
32381: GREATER
32382: IFFALSE 32494
// begin for i = 2 to result do
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: DOUBLE
32390: LD_INT 2
32392: DEC
32393: ST_TO_ADDR
32394: LD_VAR 0 2
32398: PUSH
32399: FOR_TO
32400: IFFALSE 32492
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32402: LD_ADDR_VAR 0 4
32406: PUSH
32407: LD_VAR 0 2
32411: PUSH
32412: LD_VAR 0 3
32416: ARRAY
32417: PPUSH
32418: LD_INT 3
32420: PPUSH
32421: CALL_OW 259
32425: PUSH
32426: LD_VAR 0 2
32430: PUSH
32431: LD_VAR 0 3
32435: ARRAY
32436: PPUSH
32437: CALL_OW 432
32441: MINUS
32442: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32443: LD_VAR 0 4
32447: PUSH
32448: LD_VAR 0 5
32452: PPUSH
32453: LD_INT 3
32455: PPUSH
32456: CALL_OW 259
32460: PUSH
32461: LD_VAR 0 5
32465: PPUSH
32466: CALL_OW 432
32470: MINUS
32471: GREATEREQUAL
32472: IFFALSE 32490
// mech := result [ i ] ;
32474: LD_ADDR_VAR 0 5
32478: PUSH
32479: LD_VAR 0 2
32483: PUSH
32484: LD_VAR 0 3
32488: ARRAY
32489: ST_TO_ADDR
// end ;
32490: GO 32399
32492: POP
32493: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32494: LD_VAR 0 1
32498: PPUSH
32499: LD_VAR 0 5
32503: PPUSH
32504: CALL_OW 135
// end ;
32508: LD_VAR 0 2
32512: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32513: LD_INT 0
32515: PPUSH
32516: PPUSH
32517: PPUSH
32518: PPUSH
32519: PPUSH
32520: PPUSH
32521: PPUSH
32522: PPUSH
32523: PPUSH
32524: PPUSH
32525: PPUSH
32526: PPUSH
32527: PPUSH
// result := [ ] ;
32528: LD_ADDR_VAR 0 7
32532: PUSH
32533: EMPTY
32534: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32535: LD_VAR 0 1
32539: PPUSH
32540: CALL_OW 266
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: IN
32555: NOT
32556: IFFALSE 32560
// exit ;
32558: GO 34194
// if name then
32560: LD_VAR 0 3
32564: IFFALSE 32580
// SetBName ( base_dep , name ) ;
32566: LD_VAR 0 1
32570: PPUSH
32571: LD_VAR 0 3
32575: PPUSH
32576: CALL_OW 500
// base := GetBase ( base_dep ) ;
32580: LD_ADDR_VAR 0 15
32584: PUSH
32585: LD_VAR 0 1
32589: PPUSH
32590: CALL_OW 274
32594: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32595: LD_ADDR_VAR 0 16
32599: PUSH
32600: LD_VAR 0 1
32604: PPUSH
32605: CALL_OW 255
32609: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32610: LD_ADDR_VAR 0 17
32614: PUSH
32615: LD_VAR 0 1
32619: PPUSH
32620: CALL_OW 248
32624: ST_TO_ADDR
// if sources then
32625: LD_VAR 0 5
32629: IFFALSE 32676
// for i = 1 to 3 do
32631: LD_ADDR_VAR 0 8
32635: PUSH
32636: DOUBLE
32637: LD_INT 1
32639: DEC
32640: ST_TO_ADDR
32641: LD_INT 3
32643: PUSH
32644: FOR_TO
32645: IFFALSE 32674
// AddResourceType ( base , i , sources [ i ] ) ;
32647: LD_VAR 0 15
32651: PPUSH
32652: LD_VAR 0 8
32656: PPUSH
32657: LD_VAR 0 5
32661: PUSH
32662: LD_VAR 0 8
32666: ARRAY
32667: PPUSH
32668: CALL_OW 276
32672: GO 32644
32674: POP
32675: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32676: LD_ADDR_VAR 0 18
32680: PUSH
32681: LD_VAR 0 15
32685: PPUSH
32686: LD_VAR 0 2
32690: PPUSH
32691: LD_INT 1
32693: PPUSH
32694: CALL 31937 0 3
32698: ST_TO_ADDR
// InitHc ;
32699: CALL_OW 19
// InitUc ;
32703: CALL_OW 18
// uc_side := side ;
32707: LD_ADDR_OWVAR 20
32711: PUSH
32712: LD_VAR 0 16
32716: ST_TO_ADDR
// uc_nation := nation ;
32717: LD_ADDR_OWVAR 21
32721: PUSH
32722: LD_VAR 0 17
32726: ST_TO_ADDR
// if buildings then
32727: LD_VAR 0 18
32731: IFFALSE 34053
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32733: LD_ADDR_VAR 0 19
32737: PUSH
32738: LD_VAR 0 18
32742: PPUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 30
32748: PUSH
32749: LD_INT 29
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 30
32758: PUSH
32759: LD_INT 30
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: PPUSH
32771: CALL_OW 72
32775: ST_TO_ADDR
// if tmp then
32776: LD_VAR 0 19
32780: IFFALSE 32828
// for i in tmp do
32782: LD_ADDR_VAR 0 8
32786: PUSH
32787: LD_VAR 0 19
32791: PUSH
32792: FOR_IN
32793: IFFALSE 32826
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32795: LD_VAR 0 8
32799: PPUSH
32800: CALL_OW 250
32804: PPUSH
32805: LD_VAR 0 8
32809: PPUSH
32810: CALL_OW 251
32814: PPUSH
32815: LD_VAR 0 16
32819: PPUSH
32820: CALL_OW 441
32824: GO 32792
32826: POP
32827: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32828: LD_VAR 0 18
32832: PPUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 30
32838: PUSH
32839: LD_INT 32
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 30
32848: PUSH
32849: LD_INT 33
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: LIST
32860: PPUSH
32861: CALL_OW 72
32865: IFFALSE 32953
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32867: LD_ADDR_VAR 0 8
32871: PUSH
32872: LD_VAR 0 18
32876: PPUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 30
32882: PUSH
32883: LD_INT 32
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 30
32892: PUSH
32893: LD_INT 33
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: PPUSH
32905: CALL_OW 72
32909: PUSH
32910: FOR_IN
32911: IFFALSE 32951
// begin if not GetBWeapon ( i ) then
32913: LD_VAR 0 8
32917: PPUSH
32918: CALL_OW 269
32922: NOT
32923: IFFALSE 32949
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32925: LD_VAR 0 8
32929: PPUSH
32930: LD_VAR 0 8
32934: PPUSH
32935: LD_VAR 0 2
32939: PPUSH
32940: CALL 34199 0 2
32944: PPUSH
32945: CALL_OW 431
// end ;
32949: GO 32910
32951: POP
32952: POP
// end ; for i = 1 to personel do
32953: LD_ADDR_VAR 0 8
32957: PUSH
32958: DOUBLE
32959: LD_INT 1
32961: DEC
32962: ST_TO_ADDR
32963: LD_VAR 0 6
32967: PUSH
32968: FOR_TO
32969: IFFALSE 34033
// begin if i > 4 then
32971: LD_VAR 0 8
32975: PUSH
32976: LD_INT 4
32978: GREATER
32979: IFFALSE 32983
// break ;
32981: GO 34033
// case i of 1 :
32983: LD_VAR 0 8
32987: PUSH
32988: LD_INT 1
32990: DOUBLE
32991: EQUAL
32992: IFTRUE 32996
32994: GO 33076
32996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32997: LD_ADDR_VAR 0 12
33001: PUSH
33002: LD_VAR 0 18
33006: PPUSH
33007: LD_INT 22
33009: PUSH
33010: LD_VAR 0 16
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 58
33021: PUSH
33022: EMPTY
33023: LIST
33024: PUSH
33025: LD_INT 2
33027: PUSH
33028: LD_INT 30
33030: PUSH
33031: LD_INT 32
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 30
33040: PUSH
33041: LD_INT 4
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 30
33050: PUSH
33051: LD_INT 5
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: PPUSH
33069: CALL_OW 72
33073: ST_TO_ADDR
33074: GO 33298
33076: LD_INT 2
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 33146
33084: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33085: LD_ADDR_VAR 0 12
33089: PUSH
33090: LD_VAR 0 18
33094: PPUSH
33095: LD_INT 22
33097: PUSH
33098: LD_VAR 0 16
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: LD_INT 30
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 30
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PPUSH
33139: CALL_OW 72
33143: ST_TO_ADDR
33144: GO 33298
33146: LD_INT 3
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33216
33154: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33155: LD_ADDR_VAR 0 12
33159: PUSH
33160: LD_VAR 0 18
33164: PPUSH
33165: LD_INT 22
33167: PUSH
33168: LD_VAR 0 16
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 2
33179: PUSH
33180: LD_INT 30
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 30
33192: PUSH
33193: LD_INT 3
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PPUSH
33209: CALL_OW 72
33213: ST_TO_ADDR
33214: GO 33298
33216: LD_INT 4
33218: DOUBLE
33219: EQUAL
33220: IFTRUE 33224
33222: GO 33297
33224: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33225: LD_ADDR_VAR 0 12
33229: PUSH
33230: LD_VAR 0 18
33234: PPUSH
33235: LD_INT 22
33237: PUSH
33238: LD_VAR 0 16
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 30
33252: PUSH
33253: LD_INT 6
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 30
33262: PUSH
33263: LD_INT 7
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 30
33272: PUSH
33273: LD_INT 8
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PPUSH
33290: CALL_OW 72
33294: ST_TO_ADDR
33295: GO 33298
33297: POP
// if i = 1 then
33298: LD_VAR 0 8
33302: PUSH
33303: LD_INT 1
33305: EQUAL
33306: IFFALSE 33417
// begin tmp := [ ] ;
33308: LD_ADDR_VAR 0 19
33312: PUSH
33313: EMPTY
33314: ST_TO_ADDR
// for j in f do
33315: LD_ADDR_VAR 0 9
33319: PUSH
33320: LD_VAR 0 12
33324: PUSH
33325: FOR_IN
33326: IFFALSE 33399
// if GetBType ( j ) = b_bunker then
33328: LD_VAR 0 9
33332: PPUSH
33333: CALL_OW 266
33337: PUSH
33338: LD_INT 32
33340: EQUAL
33341: IFFALSE 33368
// tmp := Insert ( tmp , 1 , j ) else
33343: LD_ADDR_VAR 0 19
33347: PUSH
33348: LD_VAR 0 19
33352: PPUSH
33353: LD_INT 1
33355: PPUSH
33356: LD_VAR 0 9
33360: PPUSH
33361: CALL_OW 2
33365: ST_TO_ADDR
33366: GO 33397
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33368: LD_ADDR_VAR 0 19
33372: PUSH
33373: LD_VAR 0 19
33377: PPUSH
33378: LD_VAR 0 19
33382: PUSH
33383: LD_INT 1
33385: PLUS
33386: PPUSH
33387: LD_VAR 0 9
33391: PPUSH
33392: CALL_OW 2
33396: ST_TO_ADDR
33397: GO 33325
33399: POP
33400: POP
// if tmp then
33401: LD_VAR 0 19
33405: IFFALSE 33417
// f := tmp ;
33407: LD_ADDR_VAR 0 12
33411: PUSH
33412: LD_VAR 0 19
33416: ST_TO_ADDR
// end ; x := personel [ i ] ;
33417: LD_ADDR_VAR 0 13
33421: PUSH
33422: LD_VAR 0 6
33426: PUSH
33427: LD_VAR 0 8
33431: ARRAY
33432: ST_TO_ADDR
// if x = - 1 then
33433: LD_VAR 0 13
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: EQUAL
33442: IFFALSE 33651
// begin for j in f do
33444: LD_ADDR_VAR 0 9
33448: PUSH
33449: LD_VAR 0 12
33453: PUSH
33454: FOR_IN
33455: IFFALSE 33647
// repeat InitHc ;
33457: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33461: LD_VAR 0 9
33465: PPUSH
33466: CALL_OW 266
33470: PUSH
33471: LD_INT 5
33473: EQUAL
33474: IFFALSE 33544
// begin if UnitsInside ( j ) < 3 then
33476: LD_VAR 0 9
33480: PPUSH
33481: CALL_OW 313
33485: PUSH
33486: LD_INT 3
33488: LESS
33489: IFFALSE 33525
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33491: LD_INT 0
33493: PPUSH
33494: LD_INT 5
33496: PUSH
33497: LD_INT 8
33499: PUSH
33500: LD_INT 9
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: PUSH
33508: LD_VAR 0 17
33512: ARRAY
33513: PPUSH
33514: LD_VAR 0 4
33518: PPUSH
33519: CALL_OW 380
33523: GO 33542
// PrepareHuman ( false , i , skill ) ;
33525: LD_INT 0
33527: PPUSH
33528: LD_VAR 0 8
33532: PPUSH
33533: LD_VAR 0 4
33537: PPUSH
33538: CALL_OW 380
// end else
33542: GO 33561
// PrepareHuman ( false , i , skill ) ;
33544: LD_INT 0
33546: PPUSH
33547: LD_VAR 0 8
33551: PPUSH
33552: LD_VAR 0 4
33556: PPUSH
33557: CALL_OW 380
// un := CreateHuman ;
33561: LD_ADDR_VAR 0 14
33565: PUSH
33566: CALL_OW 44
33570: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33571: LD_ADDR_VAR 0 7
33575: PUSH
33576: LD_VAR 0 7
33580: PPUSH
33581: LD_INT 1
33583: PPUSH
33584: LD_VAR 0 14
33588: PPUSH
33589: CALL_OW 2
33593: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33594: LD_VAR 0 14
33598: PPUSH
33599: LD_VAR 0 9
33603: PPUSH
33604: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33608: LD_VAR 0 9
33612: PPUSH
33613: CALL_OW 313
33617: PUSH
33618: LD_INT 6
33620: EQUAL
33621: PUSH
33622: LD_VAR 0 9
33626: PPUSH
33627: CALL_OW 266
33631: PUSH
33632: LD_INT 32
33634: PUSH
33635: LD_INT 31
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: IN
33642: OR
33643: IFFALSE 33457
33645: GO 33454
33647: POP
33648: POP
// end else
33649: GO 34031
// for j = 1 to x do
33651: LD_ADDR_VAR 0 9
33655: PUSH
33656: DOUBLE
33657: LD_INT 1
33659: DEC
33660: ST_TO_ADDR
33661: LD_VAR 0 13
33665: PUSH
33666: FOR_TO
33667: IFFALSE 34029
// begin InitHc ;
33669: CALL_OW 19
// if not f then
33673: LD_VAR 0 12
33677: NOT
33678: IFFALSE 33767
// begin PrepareHuman ( false , i , skill ) ;
33680: LD_INT 0
33682: PPUSH
33683: LD_VAR 0 8
33687: PPUSH
33688: LD_VAR 0 4
33692: PPUSH
33693: CALL_OW 380
// un := CreateHuman ;
33697: LD_ADDR_VAR 0 14
33701: PUSH
33702: CALL_OW 44
33706: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33707: LD_ADDR_VAR 0 7
33711: PUSH
33712: LD_VAR 0 7
33716: PPUSH
33717: LD_INT 1
33719: PPUSH
33720: LD_VAR 0 14
33724: PPUSH
33725: CALL_OW 2
33729: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33730: LD_VAR 0 14
33734: PPUSH
33735: LD_VAR 0 1
33739: PPUSH
33740: CALL_OW 250
33744: PPUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 251
33754: PPUSH
33755: LD_INT 10
33757: PPUSH
33758: LD_INT 0
33760: PPUSH
33761: CALL_OW 50
// continue ;
33765: GO 33666
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33767: LD_VAR 0 12
33771: PUSH
33772: LD_INT 1
33774: ARRAY
33775: PPUSH
33776: CALL_OW 313
33780: PUSH
33781: LD_VAR 0 12
33785: PUSH
33786: LD_INT 1
33788: ARRAY
33789: PPUSH
33790: CALL_OW 266
33794: PUSH
33795: LD_INT 32
33797: PUSH
33798: LD_INT 31
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: IN
33805: AND
33806: PUSH
33807: LD_VAR 0 12
33811: PUSH
33812: LD_INT 1
33814: ARRAY
33815: PPUSH
33816: CALL_OW 313
33820: PUSH
33821: LD_INT 6
33823: EQUAL
33824: OR
33825: IFFALSE 33845
// f := Delete ( f , 1 ) ;
33827: LD_ADDR_VAR 0 12
33831: PUSH
33832: LD_VAR 0 12
33836: PPUSH
33837: LD_INT 1
33839: PPUSH
33840: CALL_OW 3
33844: ST_TO_ADDR
// if not f then
33845: LD_VAR 0 12
33849: NOT
33850: IFFALSE 33868
// begin x := x + 2 ;
33852: LD_ADDR_VAR 0 13
33856: PUSH
33857: LD_VAR 0 13
33861: PUSH
33862: LD_INT 2
33864: PLUS
33865: ST_TO_ADDR
// continue ;
33866: GO 33666
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33868: LD_VAR 0 12
33872: PUSH
33873: LD_INT 1
33875: ARRAY
33876: PPUSH
33877: CALL_OW 266
33881: PUSH
33882: LD_INT 5
33884: EQUAL
33885: IFFALSE 33959
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33887: LD_VAR 0 12
33891: PUSH
33892: LD_INT 1
33894: ARRAY
33895: PPUSH
33896: CALL_OW 313
33900: PUSH
33901: LD_INT 3
33903: LESS
33904: IFFALSE 33940
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33906: LD_INT 0
33908: PPUSH
33909: LD_INT 5
33911: PUSH
33912: LD_INT 8
33914: PUSH
33915: LD_INT 9
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: LIST
33922: PUSH
33923: LD_VAR 0 17
33927: ARRAY
33928: PPUSH
33929: LD_VAR 0 4
33933: PPUSH
33934: CALL_OW 380
33938: GO 33957
// PrepareHuman ( false , i , skill ) ;
33940: LD_INT 0
33942: PPUSH
33943: LD_VAR 0 8
33947: PPUSH
33948: LD_VAR 0 4
33952: PPUSH
33953: CALL_OW 380
// end else
33957: GO 33976
// PrepareHuman ( false , i , skill ) ;
33959: LD_INT 0
33961: PPUSH
33962: LD_VAR 0 8
33966: PPUSH
33967: LD_VAR 0 4
33971: PPUSH
33972: CALL_OW 380
// un := CreateHuman ;
33976: LD_ADDR_VAR 0 14
33980: PUSH
33981: CALL_OW 44
33985: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33986: LD_ADDR_VAR 0 7
33990: PUSH
33991: LD_VAR 0 7
33995: PPUSH
33996: LD_INT 1
33998: PPUSH
33999: LD_VAR 0 14
34003: PPUSH
34004: CALL_OW 2
34008: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34009: LD_VAR 0 14
34013: PPUSH
34014: LD_VAR 0 12
34018: PUSH
34019: LD_INT 1
34021: ARRAY
34022: PPUSH
34023: CALL_OW 52
// end ;
34027: GO 33666
34029: POP
34030: POP
// end ;
34031: GO 32968
34033: POP
34034: POP
// result := result ^ buildings ;
34035: LD_ADDR_VAR 0 7
34039: PUSH
34040: LD_VAR 0 7
34044: PUSH
34045: LD_VAR 0 18
34049: ADD
34050: ST_TO_ADDR
// end else
34051: GO 34194
// begin for i = 1 to personel do
34053: LD_ADDR_VAR 0 8
34057: PUSH
34058: DOUBLE
34059: LD_INT 1
34061: DEC
34062: ST_TO_ADDR
34063: LD_VAR 0 6
34067: PUSH
34068: FOR_TO
34069: IFFALSE 34192
// begin if i > 4 then
34071: LD_VAR 0 8
34075: PUSH
34076: LD_INT 4
34078: GREATER
34079: IFFALSE 34083
// break ;
34081: GO 34192
// x := personel [ i ] ;
34083: LD_ADDR_VAR 0 13
34087: PUSH
34088: LD_VAR 0 6
34092: PUSH
34093: LD_VAR 0 8
34097: ARRAY
34098: ST_TO_ADDR
// if x = - 1 then
34099: LD_VAR 0 13
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: EQUAL
34108: IFFALSE 34112
// continue ;
34110: GO 34068
// PrepareHuman ( false , i , skill ) ;
34112: LD_INT 0
34114: PPUSH
34115: LD_VAR 0 8
34119: PPUSH
34120: LD_VAR 0 4
34124: PPUSH
34125: CALL_OW 380
// un := CreateHuman ;
34129: LD_ADDR_VAR 0 14
34133: PUSH
34134: CALL_OW 44
34138: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34139: LD_VAR 0 14
34143: PPUSH
34144: LD_VAR 0 1
34148: PPUSH
34149: CALL_OW 250
34153: PPUSH
34154: LD_VAR 0 1
34158: PPUSH
34159: CALL_OW 251
34163: PPUSH
34164: LD_INT 10
34166: PPUSH
34167: LD_INT 0
34169: PPUSH
34170: CALL_OW 50
// result := result ^ un ;
34174: LD_ADDR_VAR 0 7
34178: PUSH
34179: LD_VAR 0 7
34183: PUSH
34184: LD_VAR 0 14
34188: ADD
34189: ST_TO_ADDR
// end ;
34190: GO 34068
34192: POP
34193: POP
// end ; end ;
34194: LD_VAR 0 7
34198: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34199: LD_INT 0
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
// result := false ;
34217: LD_ADDR_VAR 0 3
34221: PUSH
34222: LD_INT 0
34224: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34225: LD_VAR 0 1
34229: NOT
34230: PUSH
34231: LD_VAR 0 1
34235: PPUSH
34236: CALL_OW 266
34240: PUSH
34241: LD_INT 32
34243: PUSH
34244: LD_INT 33
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: IN
34251: NOT
34252: OR
34253: IFFALSE 34257
// exit ;
34255: GO 35366
// nat := GetNation ( tower ) ;
34257: LD_ADDR_VAR 0 12
34261: PUSH
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 248
34271: ST_TO_ADDR
// side := GetSide ( tower ) ;
34272: LD_ADDR_VAR 0 16
34276: PUSH
34277: LD_VAR 0 1
34281: PPUSH
34282: CALL_OW 255
34286: ST_TO_ADDR
// x := GetX ( tower ) ;
34287: LD_ADDR_VAR 0 10
34291: PUSH
34292: LD_VAR 0 1
34296: PPUSH
34297: CALL_OW 250
34301: ST_TO_ADDR
// y := GetY ( tower ) ;
34302: LD_ADDR_VAR 0 11
34306: PUSH
34307: LD_VAR 0 1
34311: PPUSH
34312: CALL_OW 251
34316: ST_TO_ADDR
// if not x or not y then
34317: LD_VAR 0 10
34321: NOT
34322: PUSH
34323: LD_VAR 0 11
34327: NOT
34328: OR
34329: IFFALSE 34333
// exit ;
34331: GO 35366
// weapon := 0 ;
34333: LD_ADDR_VAR 0 18
34337: PUSH
34338: LD_INT 0
34340: ST_TO_ADDR
// fac_list := [ ] ;
34341: LD_ADDR_VAR 0 17
34345: PUSH
34346: EMPTY
34347: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34348: LD_ADDR_VAR 0 6
34352: PUSH
34353: LD_VAR 0 1
34357: PPUSH
34358: CALL_OW 274
34362: PPUSH
34363: LD_VAR 0 2
34367: PPUSH
34368: LD_INT 0
34370: PPUSH
34371: CALL 31937 0 3
34375: PPUSH
34376: LD_INT 30
34378: PUSH
34379: LD_INT 3
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PPUSH
34386: CALL_OW 72
34390: ST_TO_ADDR
// if not factories then
34391: LD_VAR 0 6
34395: NOT
34396: IFFALSE 34400
// exit ;
34398: GO 35366
// for i in factories do
34400: LD_ADDR_VAR 0 8
34404: PUSH
34405: LD_VAR 0 6
34409: PUSH
34410: FOR_IN
34411: IFFALSE 34436
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34413: LD_ADDR_VAR 0 17
34417: PUSH
34418: LD_VAR 0 17
34422: PUSH
34423: LD_VAR 0 8
34427: PPUSH
34428: CALL_OW 478
34432: UNION
34433: ST_TO_ADDR
34434: GO 34410
34436: POP
34437: POP
// if not fac_list then
34438: LD_VAR 0 17
34442: NOT
34443: IFFALSE 34447
// exit ;
34445: GO 35366
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34447: LD_ADDR_VAR 0 5
34451: PUSH
34452: LD_INT 4
34454: PUSH
34455: LD_INT 5
34457: PUSH
34458: LD_INT 9
34460: PUSH
34461: LD_INT 10
34463: PUSH
34464: LD_INT 6
34466: PUSH
34467: LD_INT 7
34469: PUSH
34470: LD_INT 11
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 27
34484: PUSH
34485: LD_INT 28
34487: PUSH
34488: LD_INT 26
34490: PUSH
34491: LD_INT 30
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 43
34502: PUSH
34503: LD_INT 44
34505: PUSH
34506: LD_INT 46
34508: PUSH
34509: LD_INT 45
34511: PUSH
34512: LD_INT 47
34514: PUSH
34515: LD_INT 49
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: PUSH
34531: LD_VAR 0 12
34535: ARRAY
34536: ST_TO_ADDR
// list := list isect fac_list ;
34537: LD_ADDR_VAR 0 5
34541: PUSH
34542: LD_VAR 0 5
34546: PUSH
34547: LD_VAR 0 17
34551: ISECT
34552: ST_TO_ADDR
// if not list then
34553: LD_VAR 0 5
34557: NOT
34558: IFFALSE 34562
// exit ;
34560: GO 35366
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34562: LD_VAR 0 12
34566: PUSH
34567: LD_INT 3
34569: EQUAL
34570: PUSH
34571: LD_INT 49
34573: PUSH
34574: LD_VAR 0 5
34578: IN
34579: AND
34580: PUSH
34581: LD_INT 31
34583: PPUSH
34584: LD_VAR 0 16
34588: PPUSH
34589: CALL_OW 321
34593: PUSH
34594: LD_INT 2
34596: EQUAL
34597: AND
34598: IFFALSE 34658
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34600: LD_INT 22
34602: PUSH
34603: LD_VAR 0 16
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 35
34614: PUSH
34615: LD_INT 49
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 91
34624: PUSH
34625: LD_VAR 0 1
34629: PUSH
34630: LD_INT 10
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: PPUSH
34643: CALL_OW 69
34647: NOT
34648: IFFALSE 34658
// weapon := ru_time_lapser ;
34650: LD_ADDR_VAR 0 18
34654: PUSH
34655: LD_INT 49
34657: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34658: LD_VAR 0 12
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: IN
34673: PUSH
34674: LD_INT 11
34676: PUSH
34677: LD_VAR 0 5
34681: IN
34682: PUSH
34683: LD_INT 30
34685: PUSH
34686: LD_VAR 0 5
34690: IN
34691: OR
34692: AND
34693: PUSH
34694: LD_INT 6
34696: PPUSH
34697: LD_VAR 0 16
34701: PPUSH
34702: CALL_OW 321
34706: PUSH
34707: LD_INT 2
34709: EQUAL
34710: AND
34711: IFFALSE 34876
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34713: LD_INT 22
34715: PUSH
34716: LD_VAR 0 16
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 35
34730: PUSH
34731: LD_INT 11
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 35
34740: PUSH
34741: LD_INT 30
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 91
34755: PUSH
34756: LD_VAR 0 1
34760: PUSH
34761: LD_INT 18
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: PPUSH
34774: CALL_OW 69
34778: NOT
34779: PUSH
34780: LD_INT 22
34782: PUSH
34783: LD_VAR 0 16
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: LD_INT 30
34797: PUSH
34798: LD_INT 32
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 30
34807: PUSH
34808: LD_INT 33
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 91
34822: PUSH
34823: LD_VAR 0 1
34827: PUSH
34828: LD_INT 12
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: PUSH
34841: EMPTY
34842: LIST
34843: PPUSH
34844: CALL_OW 69
34848: PUSH
34849: LD_INT 2
34851: GREATER
34852: AND
34853: IFFALSE 34876
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34855: LD_ADDR_VAR 0 18
34859: PUSH
34860: LD_INT 11
34862: PUSH
34863: LD_INT 30
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_VAR 0 12
34874: ARRAY
34875: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34876: LD_VAR 0 18
34880: NOT
34881: PUSH
34882: LD_INT 40
34884: PPUSH
34885: LD_VAR 0 16
34889: PPUSH
34890: CALL_OW 321
34894: PUSH
34895: LD_INT 2
34897: EQUAL
34898: AND
34899: PUSH
34900: LD_INT 7
34902: PUSH
34903: LD_VAR 0 5
34907: IN
34908: PUSH
34909: LD_INT 28
34911: PUSH
34912: LD_VAR 0 5
34916: IN
34917: OR
34918: PUSH
34919: LD_INT 45
34921: PUSH
34922: LD_VAR 0 5
34926: IN
34927: OR
34928: AND
34929: IFFALSE 35183
// begin hex := GetHexInfo ( x , y ) ;
34931: LD_ADDR_VAR 0 4
34935: PUSH
34936: LD_VAR 0 10
34940: PPUSH
34941: LD_VAR 0 11
34945: PPUSH
34946: CALL_OW 546
34950: ST_TO_ADDR
// if hex [ 1 ] then
34951: LD_VAR 0 4
34955: PUSH
34956: LD_INT 1
34958: ARRAY
34959: IFFALSE 34963
// exit ;
34961: GO 35366
// height := hex [ 2 ] ;
34963: LD_ADDR_VAR 0 15
34967: PUSH
34968: LD_VAR 0 4
34972: PUSH
34973: LD_INT 2
34975: ARRAY
34976: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34977: LD_ADDR_VAR 0 14
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: LD_INT 3
34990: PUSH
34991: LD_INT 5
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// for i in tmp do
35000: LD_ADDR_VAR 0 8
35004: PUSH
35005: LD_VAR 0 14
35009: PUSH
35010: FOR_IN
35011: IFFALSE 35181
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35013: LD_ADDR_VAR 0 9
35017: PUSH
35018: LD_VAR 0 10
35022: PPUSH
35023: LD_VAR 0 8
35027: PPUSH
35028: LD_INT 5
35030: PPUSH
35031: CALL_OW 272
35035: PUSH
35036: LD_VAR 0 11
35040: PPUSH
35041: LD_VAR 0 8
35045: PPUSH
35046: LD_INT 5
35048: PPUSH
35049: CALL_OW 273
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35058: LD_VAR 0 9
35062: PUSH
35063: LD_INT 1
35065: ARRAY
35066: PPUSH
35067: LD_VAR 0 9
35071: PUSH
35072: LD_INT 2
35074: ARRAY
35075: PPUSH
35076: CALL_OW 488
35080: IFFALSE 35179
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35082: LD_ADDR_VAR 0 4
35086: PUSH
35087: LD_VAR 0 9
35091: PUSH
35092: LD_INT 1
35094: ARRAY
35095: PPUSH
35096: LD_VAR 0 9
35100: PUSH
35101: LD_INT 2
35103: ARRAY
35104: PPUSH
35105: CALL_OW 546
35109: ST_TO_ADDR
// if hex [ 1 ] then
35110: LD_VAR 0 4
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: IFFALSE 35122
// continue ;
35120: GO 35010
// h := hex [ 2 ] ;
35122: LD_ADDR_VAR 0 13
35126: PUSH
35127: LD_VAR 0 4
35131: PUSH
35132: LD_INT 2
35134: ARRAY
35135: ST_TO_ADDR
// if h + 7 < height then
35136: LD_VAR 0 13
35140: PUSH
35141: LD_INT 7
35143: PLUS
35144: PUSH
35145: LD_VAR 0 15
35149: LESS
35150: IFFALSE 35179
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35152: LD_ADDR_VAR 0 18
35156: PUSH
35157: LD_INT 7
35159: PUSH
35160: LD_INT 28
35162: PUSH
35163: LD_INT 45
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: PUSH
35171: LD_VAR 0 12
35175: ARRAY
35176: ST_TO_ADDR
// break ;
35177: GO 35181
// end ; end ; end ;
35179: GO 35010
35181: POP
35182: POP
// end ; if not weapon then
35183: LD_VAR 0 18
35187: NOT
35188: IFFALSE 35248
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35190: LD_ADDR_VAR 0 5
35194: PUSH
35195: LD_VAR 0 5
35199: PUSH
35200: LD_INT 11
35202: PUSH
35203: LD_INT 30
35205: PUSH
35206: LD_INT 49
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: DIFF
35214: ST_TO_ADDR
// if not list then
35215: LD_VAR 0 5
35219: NOT
35220: IFFALSE 35224
// exit ;
35222: GO 35366
// weapon := list [ rand ( 1 , list ) ] ;
35224: LD_ADDR_VAR 0 18
35228: PUSH
35229: LD_VAR 0 5
35233: PUSH
35234: LD_INT 1
35236: PPUSH
35237: LD_VAR 0 5
35241: PPUSH
35242: CALL_OW 12
35246: ARRAY
35247: ST_TO_ADDR
// end ; if weapon then
35248: LD_VAR 0 18
35252: IFFALSE 35366
// begin tmp := CostOfWeapon ( weapon ) ;
35254: LD_ADDR_VAR 0 14
35258: PUSH
35259: LD_VAR 0 18
35263: PPUSH
35264: CALL_OW 451
35268: ST_TO_ADDR
// j := GetBase ( tower ) ;
35269: LD_ADDR_VAR 0 9
35273: PUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: CALL_OW 274
35283: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35284: LD_VAR 0 9
35288: PPUSH
35289: LD_INT 1
35291: PPUSH
35292: CALL_OW 275
35296: PUSH
35297: LD_VAR 0 14
35301: PUSH
35302: LD_INT 1
35304: ARRAY
35305: GREATEREQUAL
35306: PUSH
35307: LD_VAR 0 9
35311: PPUSH
35312: LD_INT 2
35314: PPUSH
35315: CALL_OW 275
35319: PUSH
35320: LD_VAR 0 14
35324: PUSH
35325: LD_INT 2
35327: ARRAY
35328: GREATEREQUAL
35329: AND
35330: PUSH
35331: LD_VAR 0 9
35335: PPUSH
35336: LD_INT 3
35338: PPUSH
35339: CALL_OW 275
35343: PUSH
35344: LD_VAR 0 14
35348: PUSH
35349: LD_INT 3
35351: ARRAY
35352: GREATEREQUAL
35353: AND
35354: IFFALSE 35366
// result := weapon ;
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_VAR 0 18
35365: ST_TO_ADDR
// end ; end ;
35366: LD_VAR 0 3
35370: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35371: LD_INT 0
35373: PPUSH
35374: PPUSH
// result := true ;
35375: LD_ADDR_VAR 0 3
35379: PUSH
35380: LD_INT 1
35382: ST_TO_ADDR
// if array1 = array2 then
35383: LD_VAR 0 1
35387: PUSH
35388: LD_VAR 0 2
35392: EQUAL
35393: IFFALSE 35453
// begin for i = 1 to array1 do
35395: LD_ADDR_VAR 0 4
35399: PUSH
35400: DOUBLE
35401: LD_INT 1
35403: DEC
35404: ST_TO_ADDR
35405: LD_VAR 0 1
35409: PUSH
35410: FOR_TO
35411: IFFALSE 35449
// if array1 [ i ] <> array2 [ i ] then
35413: LD_VAR 0 1
35417: PUSH
35418: LD_VAR 0 4
35422: ARRAY
35423: PUSH
35424: LD_VAR 0 2
35428: PUSH
35429: LD_VAR 0 4
35433: ARRAY
35434: NONEQUAL
35435: IFFALSE 35447
// begin result := false ;
35437: LD_ADDR_VAR 0 3
35441: PUSH
35442: LD_INT 0
35444: ST_TO_ADDR
// break ;
35445: GO 35449
// end ;
35447: GO 35410
35449: POP
35450: POP
// end else
35451: GO 35461
// result := false ;
35453: LD_ADDR_VAR 0 3
35457: PUSH
35458: LD_INT 0
35460: ST_TO_ADDR
// end ;
35461: LD_VAR 0 3
35465: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35466: LD_INT 0
35468: PPUSH
35469: PPUSH
// if not array1 or not array2 then
35470: LD_VAR 0 1
35474: NOT
35475: PUSH
35476: LD_VAR 0 2
35480: NOT
35481: OR
35482: IFFALSE 35486
// exit ;
35484: GO 35550
// result := true ;
35486: LD_ADDR_VAR 0 3
35490: PUSH
35491: LD_INT 1
35493: ST_TO_ADDR
// for i = 1 to array1 do
35494: LD_ADDR_VAR 0 4
35498: PUSH
35499: DOUBLE
35500: LD_INT 1
35502: DEC
35503: ST_TO_ADDR
35504: LD_VAR 0 1
35508: PUSH
35509: FOR_TO
35510: IFFALSE 35548
// if array1 [ i ] <> array2 [ i ] then
35512: LD_VAR 0 1
35516: PUSH
35517: LD_VAR 0 4
35521: ARRAY
35522: PUSH
35523: LD_VAR 0 2
35527: PUSH
35528: LD_VAR 0 4
35532: ARRAY
35533: NONEQUAL
35534: IFFALSE 35546
// begin result := false ;
35536: LD_ADDR_VAR 0 3
35540: PUSH
35541: LD_INT 0
35543: ST_TO_ADDR
// break ;
35544: GO 35548
// end ;
35546: GO 35509
35548: POP
35549: POP
// end ;
35550: LD_VAR 0 3
35554: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35555: LD_INT 0
35557: PPUSH
35558: PPUSH
35559: PPUSH
// pom := GetBase ( fac ) ;
35560: LD_ADDR_VAR 0 5
35564: PUSH
35565: LD_VAR 0 1
35569: PPUSH
35570: CALL_OW 274
35574: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35575: LD_ADDR_VAR 0 4
35579: PUSH
35580: LD_VAR 0 2
35584: PUSH
35585: LD_INT 1
35587: ARRAY
35588: PPUSH
35589: LD_VAR 0 2
35593: PUSH
35594: LD_INT 2
35596: ARRAY
35597: PPUSH
35598: LD_VAR 0 2
35602: PUSH
35603: LD_INT 3
35605: ARRAY
35606: PPUSH
35607: LD_VAR 0 2
35611: PUSH
35612: LD_INT 4
35614: ARRAY
35615: PPUSH
35616: CALL_OW 449
35620: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35621: LD_ADDR_VAR 0 3
35625: PUSH
35626: LD_VAR 0 5
35630: PPUSH
35631: LD_INT 1
35633: PPUSH
35634: CALL_OW 275
35638: PUSH
35639: LD_VAR 0 4
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: GREATEREQUAL
35648: PUSH
35649: LD_VAR 0 5
35653: PPUSH
35654: LD_INT 2
35656: PPUSH
35657: CALL_OW 275
35661: PUSH
35662: LD_VAR 0 4
35666: PUSH
35667: LD_INT 2
35669: ARRAY
35670: GREATEREQUAL
35671: AND
35672: PUSH
35673: LD_VAR 0 5
35677: PPUSH
35678: LD_INT 3
35680: PPUSH
35681: CALL_OW 275
35685: PUSH
35686: LD_VAR 0 4
35690: PUSH
35691: LD_INT 3
35693: ARRAY
35694: GREATEREQUAL
35695: AND
35696: ST_TO_ADDR
// end ;
35697: LD_VAR 0 3
35701: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35702: LD_INT 0
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
// pom := GetBase ( building ) ;
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 274
35722: ST_TO_ADDR
// if not pom then
35723: LD_VAR 0 3
35727: NOT
35728: IFFALSE 35732
// exit ;
35730: GO 35902
// btype := GetBType ( building ) ;
35732: LD_ADDR_VAR 0 5
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: CALL_OW 266
35746: ST_TO_ADDR
// if btype = b_armoury then
35747: LD_VAR 0 5
35751: PUSH
35752: LD_INT 4
35754: EQUAL
35755: IFFALSE 35765
// btype := b_barracks ;
35757: LD_ADDR_VAR 0 5
35761: PUSH
35762: LD_INT 5
35764: ST_TO_ADDR
// if btype = b_depot then
35765: LD_VAR 0 5
35769: PUSH
35770: LD_INT 0
35772: EQUAL
35773: IFFALSE 35783
// btype := b_warehouse ;
35775: LD_ADDR_VAR 0 5
35779: PUSH
35780: LD_INT 1
35782: ST_TO_ADDR
// if btype = b_workshop then
35783: LD_VAR 0 5
35787: PUSH
35788: LD_INT 2
35790: EQUAL
35791: IFFALSE 35801
// btype := b_factory ;
35793: LD_ADDR_VAR 0 5
35797: PUSH
35798: LD_INT 3
35800: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35801: LD_ADDR_VAR 0 4
35805: PUSH
35806: LD_VAR 0 5
35810: PPUSH
35811: LD_VAR 0 1
35815: PPUSH
35816: CALL_OW 248
35820: PPUSH
35821: CALL_OW 450
35825: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35826: LD_ADDR_VAR 0 2
35830: PUSH
35831: LD_VAR 0 3
35835: PPUSH
35836: LD_INT 1
35838: PPUSH
35839: CALL_OW 275
35843: PUSH
35844: LD_VAR 0 4
35848: PUSH
35849: LD_INT 1
35851: ARRAY
35852: GREATEREQUAL
35853: PUSH
35854: LD_VAR 0 3
35858: PPUSH
35859: LD_INT 2
35861: PPUSH
35862: CALL_OW 275
35866: PUSH
35867: LD_VAR 0 4
35871: PUSH
35872: LD_INT 2
35874: ARRAY
35875: GREATEREQUAL
35876: AND
35877: PUSH
35878: LD_VAR 0 3
35882: PPUSH
35883: LD_INT 3
35885: PPUSH
35886: CALL_OW 275
35890: PUSH
35891: LD_VAR 0 4
35895: PUSH
35896: LD_INT 3
35898: ARRAY
35899: GREATEREQUAL
35900: AND
35901: ST_TO_ADDR
// end ;
35902: LD_VAR 0 2
35906: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35907: LD_INT 0
35909: PPUSH
35910: PPUSH
35911: PPUSH
// pom := GetBase ( building ) ;
35912: LD_ADDR_VAR 0 4
35916: PUSH
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL_OW 274
35926: ST_TO_ADDR
// if not pom then
35927: LD_VAR 0 4
35931: NOT
35932: IFFALSE 35936
// exit ;
35934: GO 36037
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35936: LD_ADDR_VAR 0 5
35940: PUSH
35941: LD_VAR 0 2
35945: PPUSH
35946: LD_VAR 0 1
35950: PPUSH
35951: CALL_OW 248
35955: PPUSH
35956: CALL_OW 450
35960: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35961: LD_ADDR_VAR 0 3
35965: PUSH
35966: LD_VAR 0 4
35970: PPUSH
35971: LD_INT 1
35973: PPUSH
35974: CALL_OW 275
35978: PUSH
35979: LD_VAR 0 5
35983: PUSH
35984: LD_INT 1
35986: ARRAY
35987: GREATEREQUAL
35988: PUSH
35989: LD_VAR 0 4
35993: PPUSH
35994: LD_INT 2
35996: PPUSH
35997: CALL_OW 275
36001: PUSH
36002: LD_VAR 0 5
36006: PUSH
36007: LD_INT 2
36009: ARRAY
36010: GREATEREQUAL
36011: AND
36012: PUSH
36013: LD_VAR 0 4
36017: PPUSH
36018: LD_INT 3
36020: PPUSH
36021: CALL_OW 275
36025: PUSH
36026: LD_VAR 0 5
36030: PUSH
36031: LD_INT 3
36033: ARRAY
36034: GREATEREQUAL
36035: AND
36036: ST_TO_ADDR
// end ;
36037: LD_VAR 0 3
36041: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36042: LD_INT 0
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
// result := false ;
36055: LD_ADDR_VAR 0 8
36059: PUSH
36060: LD_INT 0
36062: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36063: LD_VAR 0 5
36067: NOT
36068: PUSH
36069: LD_VAR 0 1
36073: NOT
36074: OR
36075: PUSH
36076: LD_VAR 0 2
36080: NOT
36081: OR
36082: PUSH
36083: LD_VAR 0 3
36087: NOT
36088: OR
36089: IFFALSE 36093
// exit ;
36091: GO 36907
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36093: LD_ADDR_VAR 0 14
36097: PUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: LD_VAR 0 2
36107: PPUSH
36108: LD_VAR 0 3
36112: PPUSH
36113: LD_VAR 0 4
36117: PPUSH
36118: LD_VAR 0 5
36122: PUSH
36123: LD_INT 1
36125: ARRAY
36126: PPUSH
36127: CALL_OW 248
36131: PPUSH
36132: LD_INT 0
36134: PPUSH
36135: CALL 38140 0 6
36139: ST_TO_ADDR
// if not hexes then
36140: LD_VAR 0 14
36144: NOT
36145: IFFALSE 36149
// exit ;
36147: GO 36907
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36149: LD_ADDR_VAR 0 17
36153: PUSH
36154: LD_VAR 0 5
36158: PPUSH
36159: LD_INT 22
36161: PUSH
36162: LD_VAR 0 13
36166: PPUSH
36167: CALL_OW 255
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 30
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 30
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PPUSH
36208: CALL_OW 72
36212: ST_TO_ADDR
// for i = 1 to hexes do
36213: LD_ADDR_VAR 0 9
36217: PUSH
36218: DOUBLE
36219: LD_INT 1
36221: DEC
36222: ST_TO_ADDR
36223: LD_VAR 0 14
36227: PUSH
36228: FOR_TO
36229: IFFALSE 36905
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36231: LD_ADDR_VAR 0 13
36235: PUSH
36236: LD_VAR 0 14
36240: PUSH
36241: LD_VAR 0 9
36245: ARRAY
36246: PUSH
36247: LD_INT 1
36249: ARRAY
36250: PPUSH
36251: LD_VAR 0 14
36255: PUSH
36256: LD_VAR 0 9
36260: ARRAY
36261: PUSH
36262: LD_INT 2
36264: ARRAY
36265: PPUSH
36266: CALL_OW 428
36270: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36271: LD_VAR 0 14
36275: PUSH
36276: LD_VAR 0 9
36280: ARRAY
36281: PUSH
36282: LD_INT 1
36284: ARRAY
36285: PPUSH
36286: LD_VAR 0 14
36290: PUSH
36291: LD_VAR 0 9
36295: ARRAY
36296: PUSH
36297: LD_INT 2
36299: ARRAY
36300: PPUSH
36301: CALL_OW 351
36305: PUSH
36306: LD_VAR 0 14
36310: PUSH
36311: LD_VAR 0 9
36315: ARRAY
36316: PUSH
36317: LD_INT 1
36319: ARRAY
36320: PPUSH
36321: LD_VAR 0 14
36325: PUSH
36326: LD_VAR 0 9
36330: ARRAY
36331: PUSH
36332: LD_INT 2
36334: ARRAY
36335: PPUSH
36336: CALL_OW 488
36340: NOT
36341: OR
36342: PUSH
36343: LD_VAR 0 13
36347: PPUSH
36348: CALL_OW 247
36352: PUSH
36353: LD_INT 3
36355: EQUAL
36356: OR
36357: IFFALSE 36363
// exit ;
36359: POP
36360: POP
36361: GO 36907
// if not tmp then
36363: LD_VAR 0 13
36367: NOT
36368: IFFALSE 36372
// continue ;
36370: GO 36228
// result := true ;
36372: LD_ADDR_VAR 0 8
36376: PUSH
36377: LD_INT 1
36379: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36380: LD_VAR 0 6
36384: PUSH
36385: LD_VAR 0 13
36389: PPUSH
36390: CALL_OW 247
36394: PUSH
36395: LD_INT 2
36397: EQUAL
36398: AND
36399: PUSH
36400: LD_VAR 0 13
36404: PPUSH
36405: CALL_OW 263
36409: PUSH
36410: LD_INT 1
36412: EQUAL
36413: AND
36414: IFFALSE 36578
// begin if IsDrivenBy ( tmp ) then
36416: LD_VAR 0 13
36420: PPUSH
36421: CALL_OW 311
36425: IFFALSE 36429
// continue ;
36427: GO 36228
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36429: LD_VAR 0 6
36433: PPUSH
36434: LD_INT 3
36436: PUSH
36437: LD_INT 60
36439: PUSH
36440: EMPTY
36441: LIST
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 3
36449: PUSH
36450: LD_INT 55
36452: PUSH
36453: EMPTY
36454: LIST
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PPUSH
36464: CALL_OW 72
36468: IFFALSE 36576
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36470: LD_ADDR_VAR 0 18
36474: PUSH
36475: LD_VAR 0 6
36479: PPUSH
36480: LD_INT 3
36482: PUSH
36483: LD_INT 60
36485: PUSH
36486: EMPTY
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 3
36495: PUSH
36496: LD_INT 55
36498: PUSH
36499: EMPTY
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PPUSH
36510: CALL_OW 72
36514: PUSH
36515: LD_INT 1
36517: ARRAY
36518: ST_TO_ADDR
// if IsInUnit ( driver ) then
36519: LD_VAR 0 18
36523: PPUSH
36524: CALL_OW 310
36528: IFFALSE 36539
// ComExit ( driver ) ;
36530: LD_VAR 0 18
36534: PPUSH
36535: CALL 61828 0 1
// AddComEnterUnit ( driver , tmp ) ;
36539: LD_VAR 0 18
36543: PPUSH
36544: LD_VAR 0 13
36548: PPUSH
36549: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36553: LD_VAR 0 18
36557: PPUSH
36558: LD_VAR 0 7
36562: PPUSH
36563: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36567: LD_VAR 0 18
36571: PPUSH
36572: CALL_OW 181
// end ; continue ;
36576: GO 36228
// end ; if not cleaners or not tmp in cleaners then
36578: LD_VAR 0 6
36582: NOT
36583: PUSH
36584: LD_VAR 0 13
36588: PUSH
36589: LD_VAR 0 6
36593: IN
36594: NOT
36595: OR
36596: IFFALSE 36903
// begin if dep then
36598: LD_VAR 0 17
36602: IFFALSE 36738
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36604: LD_ADDR_VAR 0 16
36608: PUSH
36609: LD_VAR 0 17
36613: PUSH
36614: LD_INT 1
36616: ARRAY
36617: PPUSH
36618: CALL_OW 250
36622: PPUSH
36623: LD_VAR 0 17
36627: PUSH
36628: LD_INT 1
36630: ARRAY
36631: PPUSH
36632: CALL_OW 254
36636: PPUSH
36637: LD_INT 5
36639: PPUSH
36640: CALL_OW 272
36644: PUSH
36645: LD_VAR 0 17
36649: PUSH
36650: LD_INT 1
36652: ARRAY
36653: PPUSH
36654: CALL_OW 251
36658: PPUSH
36659: LD_VAR 0 17
36663: PUSH
36664: LD_INT 1
36666: ARRAY
36667: PPUSH
36668: CALL_OW 254
36672: PPUSH
36673: LD_INT 5
36675: PPUSH
36676: CALL_OW 273
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36685: LD_VAR 0 16
36689: PUSH
36690: LD_INT 1
36692: ARRAY
36693: PPUSH
36694: LD_VAR 0 16
36698: PUSH
36699: LD_INT 2
36701: ARRAY
36702: PPUSH
36703: CALL_OW 488
36707: IFFALSE 36738
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36709: LD_VAR 0 13
36713: PPUSH
36714: LD_VAR 0 16
36718: PUSH
36719: LD_INT 1
36721: ARRAY
36722: PPUSH
36723: LD_VAR 0 16
36727: PUSH
36728: LD_INT 2
36730: ARRAY
36731: PPUSH
36732: CALL_OW 111
// continue ;
36736: GO 36228
// end ; end ; r := GetDir ( tmp ) ;
36738: LD_ADDR_VAR 0 15
36742: PUSH
36743: LD_VAR 0 13
36747: PPUSH
36748: CALL_OW 254
36752: ST_TO_ADDR
// if r = 5 then
36753: LD_VAR 0 15
36757: PUSH
36758: LD_INT 5
36760: EQUAL
36761: IFFALSE 36771
// r := 0 ;
36763: LD_ADDR_VAR 0 15
36767: PUSH
36768: LD_INT 0
36770: ST_TO_ADDR
// for j = r to 5 do
36771: LD_ADDR_VAR 0 10
36775: PUSH
36776: DOUBLE
36777: LD_VAR 0 15
36781: DEC
36782: ST_TO_ADDR
36783: LD_INT 5
36785: PUSH
36786: FOR_TO
36787: IFFALSE 36901
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36789: LD_ADDR_VAR 0 11
36793: PUSH
36794: LD_VAR 0 13
36798: PPUSH
36799: CALL_OW 250
36803: PPUSH
36804: LD_VAR 0 10
36808: PPUSH
36809: LD_INT 2
36811: PPUSH
36812: CALL_OW 272
36816: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36817: LD_ADDR_VAR 0 12
36821: PUSH
36822: LD_VAR 0 13
36826: PPUSH
36827: CALL_OW 251
36831: PPUSH
36832: LD_VAR 0 10
36836: PPUSH
36837: LD_INT 2
36839: PPUSH
36840: CALL_OW 273
36844: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36845: LD_VAR 0 11
36849: PPUSH
36850: LD_VAR 0 12
36854: PPUSH
36855: CALL_OW 488
36859: PUSH
36860: LD_VAR 0 11
36864: PPUSH
36865: LD_VAR 0 12
36869: PPUSH
36870: CALL_OW 428
36874: NOT
36875: AND
36876: IFFALSE 36899
// begin ComMoveXY ( tmp , _x , _y ) ;
36878: LD_VAR 0 13
36882: PPUSH
36883: LD_VAR 0 11
36887: PPUSH
36888: LD_VAR 0 12
36892: PPUSH
36893: CALL_OW 111
// break ;
36897: GO 36901
// end ; end ;
36899: GO 36786
36901: POP
36902: POP
// end ; end ;
36903: GO 36228
36905: POP
36906: POP
// end ;
36907: LD_VAR 0 8
36911: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36912: LD_INT 0
36914: PPUSH
// result := true ;
36915: LD_ADDR_VAR 0 3
36919: PUSH
36920: LD_INT 1
36922: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36923: LD_VAR 0 2
36927: PUSH
36928: LD_INT 24
36930: DOUBLE
36931: EQUAL
36932: IFTRUE 36942
36934: LD_INT 33
36936: DOUBLE
36937: EQUAL
36938: IFTRUE 36942
36940: GO 36967
36942: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36943: LD_ADDR_VAR 0 3
36947: PUSH
36948: LD_INT 32
36950: PPUSH
36951: LD_VAR 0 1
36955: PPUSH
36956: CALL_OW 321
36960: PUSH
36961: LD_INT 2
36963: EQUAL
36964: ST_TO_ADDR
36965: GO 37283
36967: LD_INT 20
36969: DOUBLE
36970: EQUAL
36971: IFTRUE 36975
36973: GO 37000
36975: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36976: LD_ADDR_VAR 0 3
36980: PUSH
36981: LD_INT 6
36983: PPUSH
36984: LD_VAR 0 1
36988: PPUSH
36989: CALL_OW 321
36993: PUSH
36994: LD_INT 2
36996: EQUAL
36997: ST_TO_ADDR
36998: GO 37283
37000: LD_INT 22
37002: DOUBLE
37003: EQUAL
37004: IFTRUE 37014
37006: LD_INT 36
37008: DOUBLE
37009: EQUAL
37010: IFTRUE 37014
37012: GO 37039
37014: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37015: LD_ADDR_VAR 0 3
37019: PUSH
37020: LD_INT 15
37022: PPUSH
37023: LD_VAR 0 1
37027: PPUSH
37028: CALL_OW 321
37032: PUSH
37033: LD_INT 2
37035: EQUAL
37036: ST_TO_ADDR
37037: GO 37283
37039: LD_INT 30
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37047
37045: GO 37072
37047: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37048: LD_ADDR_VAR 0 3
37052: PUSH
37053: LD_INT 20
37055: PPUSH
37056: LD_VAR 0 1
37060: PPUSH
37061: CALL_OW 321
37065: PUSH
37066: LD_INT 2
37068: EQUAL
37069: ST_TO_ADDR
37070: GO 37283
37072: LD_INT 28
37074: DOUBLE
37075: EQUAL
37076: IFTRUE 37086
37078: LD_INT 21
37080: DOUBLE
37081: EQUAL
37082: IFTRUE 37086
37084: GO 37111
37086: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37087: LD_ADDR_VAR 0 3
37091: PUSH
37092: LD_INT 21
37094: PPUSH
37095: LD_VAR 0 1
37099: PPUSH
37100: CALL_OW 321
37104: PUSH
37105: LD_INT 2
37107: EQUAL
37108: ST_TO_ADDR
37109: GO 37283
37111: LD_INT 16
37113: DOUBLE
37114: EQUAL
37115: IFTRUE 37119
37117: GO 37144
37119: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37120: LD_ADDR_VAR 0 3
37124: PUSH
37125: LD_INT 84
37127: PPUSH
37128: LD_VAR 0 1
37132: PPUSH
37133: CALL_OW 321
37137: PUSH
37138: LD_INT 2
37140: EQUAL
37141: ST_TO_ADDR
37142: GO 37283
37144: LD_INT 19
37146: DOUBLE
37147: EQUAL
37148: IFTRUE 37158
37150: LD_INT 23
37152: DOUBLE
37153: EQUAL
37154: IFTRUE 37158
37156: GO 37183
37158: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37159: LD_ADDR_VAR 0 3
37163: PUSH
37164: LD_INT 83
37166: PPUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL_OW 321
37176: PUSH
37177: LD_INT 2
37179: EQUAL
37180: ST_TO_ADDR
37181: GO 37283
37183: LD_INT 17
37185: DOUBLE
37186: EQUAL
37187: IFTRUE 37191
37189: GO 37216
37191: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37192: LD_ADDR_VAR 0 3
37196: PUSH
37197: LD_INT 39
37199: PPUSH
37200: LD_VAR 0 1
37204: PPUSH
37205: CALL_OW 321
37209: PUSH
37210: LD_INT 2
37212: EQUAL
37213: ST_TO_ADDR
37214: GO 37283
37216: LD_INT 18
37218: DOUBLE
37219: EQUAL
37220: IFTRUE 37224
37222: GO 37249
37224: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37225: LD_ADDR_VAR 0 3
37229: PUSH
37230: LD_INT 40
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 321
37242: PUSH
37243: LD_INT 2
37245: EQUAL
37246: ST_TO_ADDR
37247: GO 37283
37249: LD_INT 27
37251: DOUBLE
37252: EQUAL
37253: IFTRUE 37257
37255: GO 37282
37257: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37258: LD_ADDR_VAR 0 3
37262: PUSH
37263: LD_INT 35
37265: PPUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: CALL_OW 321
37275: PUSH
37276: LD_INT 2
37278: EQUAL
37279: ST_TO_ADDR
37280: GO 37283
37282: POP
// end ;
37283: LD_VAR 0 3
37287: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37288: LD_INT 0
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
// result := false ;
37301: LD_ADDR_VAR 0 6
37305: PUSH
37306: LD_INT 0
37308: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37309: LD_VAR 0 1
37313: NOT
37314: PUSH
37315: LD_VAR 0 1
37319: PPUSH
37320: CALL_OW 266
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: IN
37335: NOT
37336: OR
37337: PUSH
37338: LD_VAR 0 2
37342: NOT
37343: OR
37344: PUSH
37345: LD_VAR 0 5
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: LD_INT 2
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: LD_INT 4
37364: PUSH
37365: LD_INT 5
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: IN
37376: NOT
37377: OR
37378: PUSH
37379: LD_VAR 0 3
37383: PPUSH
37384: LD_VAR 0 4
37388: PPUSH
37389: CALL_OW 488
37393: NOT
37394: OR
37395: IFFALSE 37399
// exit ;
37397: GO 38135
// side := GetSide ( depot ) ;
37399: LD_ADDR_VAR 0 9
37403: PUSH
37404: LD_VAR 0 1
37408: PPUSH
37409: CALL_OW 255
37413: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37414: LD_VAR 0 9
37418: PPUSH
37419: LD_VAR 0 2
37423: PPUSH
37424: CALL 36912 0 2
37428: NOT
37429: IFFALSE 37433
// exit ;
37431: GO 38135
// pom := GetBase ( depot ) ;
37433: LD_ADDR_VAR 0 10
37437: PUSH
37438: LD_VAR 0 1
37442: PPUSH
37443: CALL_OW 274
37447: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37448: LD_ADDR_VAR 0 11
37452: PUSH
37453: LD_VAR 0 2
37457: PPUSH
37458: LD_VAR 0 1
37462: PPUSH
37463: CALL_OW 248
37467: PPUSH
37468: CALL_OW 450
37472: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37473: LD_VAR 0 10
37477: PPUSH
37478: LD_INT 1
37480: PPUSH
37481: CALL_OW 275
37485: PUSH
37486: LD_VAR 0 11
37490: PUSH
37491: LD_INT 1
37493: ARRAY
37494: GREATEREQUAL
37495: PUSH
37496: LD_VAR 0 10
37500: PPUSH
37501: LD_INT 2
37503: PPUSH
37504: CALL_OW 275
37508: PUSH
37509: LD_VAR 0 11
37513: PUSH
37514: LD_INT 2
37516: ARRAY
37517: GREATEREQUAL
37518: AND
37519: PUSH
37520: LD_VAR 0 10
37524: PPUSH
37525: LD_INT 3
37527: PPUSH
37528: CALL_OW 275
37532: PUSH
37533: LD_VAR 0 11
37537: PUSH
37538: LD_INT 3
37540: ARRAY
37541: GREATEREQUAL
37542: AND
37543: NOT
37544: IFFALSE 37548
// exit ;
37546: GO 38135
// if GetBType ( depot ) = b_depot then
37548: LD_VAR 0 1
37552: PPUSH
37553: CALL_OW 266
37557: PUSH
37558: LD_INT 0
37560: EQUAL
37561: IFFALSE 37573
// dist := 28 else
37563: LD_ADDR_VAR 0 14
37567: PUSH
37568: LD_INT 28
37570: ST_TO_ADDR
37571: GO 37581
// dist := 36 ;
37573: LD_ADDR_VAR 0 14
37577: PUSH
37578: LD_INT 36
37580: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37581: LD_VAR 0 1
37585: PPUSH
37586: LD_VAR 0 3
37590: PPUSH
37591: LD_VAR 0 4
37595: PPUSH
37596: CALL_OW 297
37600: PUSH
37601: LD_VAR 0 14
37605: GREATER
37606: IFFALSE 37610
// exit ;
37608: GO 38135
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37610: LD_ADDR_VAR 0 12
37614: PUSH
37615: LD_VAR 0 2
37619: PPUSH
37620: LD_VAR 0 3
37624: PPUSH
37625: LD_VAR 0 4
37629: PPUSH
37630: LD_VAR 0 5
37634: PPUSH
37635: LD_VAR 0 1
37639: PPUSH
37640: CALL_OW 248
37644: PPUSH
37645: LD_INT 0
37647: PPUSH
37648: CALL 38140 0 6
37652: ST_TO_ADDR
// if not hexes then
37653: LD_VAR 0 12
37657: NOT
37658: IFFALSE 37662
// exit ;
37660: GO 38135
// hex := GetHexInfo ( x , y ) ;
37662: LD_ADDR_VAR 0 15
37666: PUSH
37667: LD_VAR 0 3
37671: PPUSH
37672: LD_VAR 0 4
37676: PPUSH
37677: CALL_OW 546
37681: ST_TO_ADDR
// if hex [ 1 ] then
37682: LD_VAR 0 15
37686: PUSH
37687: LD_INT 1
37689: ARRAY
37690: IFFALSE 37694
// exit ;
37692: GO 38135
// height := hex [ 2 ] ;
37694: LD_ADDR_VAR 0 13
37698: PUSH
37699: LD_VAR 0 15
37703: PUSH
37704: LD_INT 2
37706: ARRAY
37707: ST_TO_ADDR
// for i = 1 to hexes do
37708: LD_ADDR_VAR 0 7
37712: PUSH
37713: DOUBLE
37714: LD_INT 1
37716: DEC
37717: ST_TO_ADDR
37718: LD_VAR 0 12
37722: PUSH
37723: FOR_TO
37724: IFFALSE 38054
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37726: LD_VAR 0 12
37730: PUSH
37731: LD_VAR 0 7
37735: ARRAY
37736: PUSH
37737: LD_INT 1
37739: ARRAY
37740: PPUSH
37741: LD_VAR 0 12
37745: PUSH
37746: LD_VAR 0 7
37750: ARRAY
37751: PUSH
37752: LD_INT 2
37754: ARRAY
37755: PPUSH
37756: CALL_OW 488
37760: NOT
37761: PUSH
37762: LD_VAR 0 12
37766: PUSH
37767: LD_VAR 0 7
37771: ARRAY
37772: PUSH
37773: LD_INT 1
37775: ARRAY
37776: PPUSH
37777: LD_VAR 0 12
37781: PUSH
37782: LD_VAR 0 7
37786: ARRAY
37787: PUSH
37788: LD_INT 2
37790: ARRAY
37791: PPUSH
37792: CALL_OW 428
37796: PUSH
37797: LD_INT 0
37799: GREATER
37800: OR
37801: PUSH
37802: LD_VAR 0 12
37806: PUSH
37807: LD_VAR 0 7
37811: ARRAY
37812: PUSH
37813: LD_INT 1
37815: ARRAY
37816: PPUSH
37817: LD_VAR 0 12
37821: PUSH
37822: LD_VAR 0 7
37826: ARRAY
37827: PUSH
37828: LD_INT 2
37830: ARRAY
37831: PPUSH
37832: CALL_OW 351
37836: OR
37837: IFFALSE 37843
// exit ;
37839: POP
37840: POP
37841: GO 38135
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37843: LD_ADDR_VAR 0 8
37847: PUSH
37848: LD_VAR 0 12
37852: PUSH
37853: LD_VAR 0 7
37857: ARRAY
37858: PUSH
37859: LD_INT 1
37861: ARRAY
37862: PPUSH
37863: LD_VAR 0 12
37867: PUSH
37868: LD_VAR 0 7
37872: ARRAY
37873: PUSH
37874: LD_INT 2
37876: ARRAY
37877: PPUSH
37878: CALL_OW 546
37882: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37883: LD_VAR 0 8
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: PUSH
37892: LD_VAR 0 8
37896: PUSH
37897: LD_INT 2
37899: ARRAY
37900: PUSH
37901: LD_VAR 0 13
37905: PUSH
37906: LD_INT 2
37908: PLUS
37909: GREATER
37910: OR
37911: PUSH
37912: LD_VAR 0 8
37916: PUSH
37917: LD_INT 2
37919: ARRAY
37920: PUSH
37921: LD_VAR 0 13
37925: PUSH
37926: LD_INT 2
37928: MINUS
37929: LESS
37930: OR
37931: PUSH
37932: LD_VAR 0 8
37936: PUSH
37937: LD_INT 3
37939: ARRAY
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 8
37946: PUSH
37947: LD_INT 9
37949: PUSH
37950: LD_INT 10
37952: PUSH
37953: LD_INT 11
37955: PUSH
37956: LD_INT 12
37958: PUSH
37959: LD_INT 13
37961: PUSH
37962: LD_INT 16
37964: PUSH
37965: LD_INT 17
37967: PUSH
37968: LD_INT 18
37970: PUSH
37971: LD_INT 19
37973: PUSH
37974: LD_INT 20
37976: PUSH
37977: LD_INT 21
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: IN
37995: NOT
37996: OR
37997: PUSH
37998: LD_VAR 0 8
38002: PUSH
38003: LD_INT 5
38005: ARRAY
38006: NOT
38007: OR
38008: PUSH
38009: LD_VAR 0 8
38013: PUSH
38014: LD_INT 6
38016: ARRAY
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: LD_INT 7
38026: PUSH
38027: LD_INT 9
38029: PUSH
38030: LD_INT 10
38032: PUSH
38033: LD_INT 11
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: IN
38044: NOT
38045: OR
38046: IFFALSE 38052
// exit ;
38048: POP
38049: POP
38050: GO 38135
// end ;
38052: GO 37723
38054: POP
38055: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38056: LD_VAR 0 9
38060: PPUSH
38061: LD_VAR 0 3
38065: PPUSH
38066: LD_VAR 0 4
38070: PPUSH
38071: LD_INT 20
38073: PPUSH
38074: CALL 30087 0 4
38078: PUSH
38079: LD_INT 4
38081: ARRAY
38082: IFFALSE 38086
// exit ;
38084: GO 38135
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38086: LD_VAR 0 2
38090: PUSH
38091: LD_INT 29
38093: PUSH
38094: LD_INT 30
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: IN
38101: PUSH
38102: LD_VAR 0 3
38106: PPUSH
38107: LD_VAR 0 4
38111: PPUSH
38112: LD_VAR 0 9
38116: PPUSH
38117: CALL_OW 440
38121: NOT
38122: AND
38123: IFFALSE 38127
// exit ;
38125: GO 38135
// result := true ;
38127: LD_ADDR_VAR 0 6
38131: PUSH
38132: LD_INT 1
38134: ST_TO_ADDR
// end ;
38135: LD_VAR 0 6
38139: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38140: LD_INT 0
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
38147: PPUSH
38148: PPUSH
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
38157: PPUSH
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
38168: PPUSH
38169: PPUSH
38170: PPUSH
38171: PPUSH
38172: PPUSH
38173: PPUSH
38174: PPUSH
38175: PPUSH
38176: PPUSH
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
38181: PPUSH
38182: PPUSH
38183: PPUSH
38184: PPUSH
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
// result = [ ] ;
38200: LD_ADDR_VAR 0 7
38204: PUSH
38205: EMPTY
38206: ST_TO_ADDR
// temp_list = [ ] ;
38207: LD_ADDR_VAR 0 9
38211: PUSH
38212: EMPTY
38213: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38214: LD_VAR 0 4
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: LD_INT 4
38233: PUSH
38234: LD_INT 5
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: IN
38245: NOT
38246: PUSH
38247: LD_VAR 0 1
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: IN
38262: PUSH
38263: LD_VAR 0 5
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: LD_INT 3
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: IN
38282: NOT
38283: AND
38284: OR
38285: IFFALSE 38289
// exit ;
38287: GO 56680
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38289: LD_VAR 0 1
38293: PUSH
38294: LD_INT 6
38296: PUSH
38297: LD_INT 7
38299: PUSH
38300: LD_INT 8
38302: PUSH
38303: LD_INT 13
38305: PUSH
38306: LD_INT 12
38308: PUSH
38309: LD_INT 15
38311: PUSH
38312: LD_INT 11
38314: PUSH
38315: LD_INT 14
38317: PUSH
38318: LD_INT 10
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: IN
38332: IFFALSE 38342
// btype = b_lab ;
38334: LD_ADDR_VAR 0 1
38338: PUSH
38339: LD_INT 6
38341: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38342: LD_VAR 0 6
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: IN
38361: NOT
38362: PUSH
38363: LD_VAR 0 1
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: LD_INT 3
38379: PUSH
38380: LD_INT 6
38382: PUSH
38383: LD_INT 36
38385: PUSH
38386: LD_INT 4
38388: PUSH
38389: LD_INT 5
38391: PUSH
38392: LD_INT 31
38394: PUSH
38395: LD_INT 32
38397: PUSH
38398: LD_INT 33
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: IN
38414: NOT
38415: PUSH
38416: LD_VAR 0 6
38420: PUSH
38421: LD_INT 1
38423: EQUAL
38424: AND
38425: OR
38426: PUSH
38427: LD_VAR 0 1
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: IN
38442: NOT
38443: PUSH
38444: LD_VAR 0 6
38448: PUSH
38449: LD_INT 2
38451: EQUAL
38452: AND
38453: OR
38454: IFFALSE 38464
// mode = 0 ;
38456: LD_ADDR_VAR 0 6
38460: PUSH
38461: LD_INT 0
38463: ST_TO_ADDR
// case mode of 0 :
38464: LD_VAR 0 6
38468: PUSH
38469: LD_INT 0
38471: DOUBLE
38472: EQUAL
38473: IFTRUE 38477
38475: GO 49930
38477: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38478: LD_ADDR_VAR 0 11
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 3
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38671: LD_ADDR_VAR 0 12
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 3
38828: NEG
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 3
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38867: LD_ADDR_VAR 0 13
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 2
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 3
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 3
39026: NEG
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 3
39038: NEG
39039: PUSH
39040: LD_INT 3
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39066: LD_ADDR_VAR 0 14
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 2
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 3
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 3
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39262: LD_ADDR_VAR 0 15
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39455: LD_ADDR_VAR 0 16
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 3
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 3
39612: PUSH
39613: LD_INT 3
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39648: LD_ADDR_VAR 0 17
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 2
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 2
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: LD_INT 2
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39878: LD_ADDR_VAR 0 18
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40108: LD_ADDR_VAR 0 19
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 2
40284: NEG
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40338: LD_ADDR_VAR 0 20
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40568: LD_ADDR_VAR 0 21
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40798: LD_ADDR_VAR 0 22
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41028: LD_ADDR_VAR 0 23
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 2
41227: NEG
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41308: LD_ADDR_VAR 0 24
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 3
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 3
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41584: LD_ADDR_VAR 0 25
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: LD_INT 2
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 3
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: LD_INT 3
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41858: LD_ADDR_VAR 0 26
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42134: LD_ADDR_VAR 0 27
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 3
42367: NEG
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 3
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42414: LD_ADDR_VAR 0 28
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: LD_INT 3
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 3
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: NEG
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 3
42661: NEG
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42696: LD_ADDR_VAR 0 29
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 3
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 3
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 3
42940: NEG
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42975: LD_ADDR_VAR 0 30
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 3
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43253: LD_ADDR_VAR 0 31
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 3
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 3
43496: NEG
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43531: LD_ADDR_VAR 0 32
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 3
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43809: LD_ADDR_VAR 0 33
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 3
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 3
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 3
44053: NEG
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44088: LD_ADDR_VAR 0 34
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 3
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 3
44333: NEG
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44368: LD_ADDR_VAR 0 35
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44480: LD_ADDR_VAR 0 36
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44592: LD_ADDR_VAR 0 37
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44704: LD_ADDR_VAR 0 38
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44816: LD_ADDR_VAR 0 39
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44928: LD_ADDR_VAR 0 40
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45040: LD_ADDR_VAR 0 41
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: LD_INT 3
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 3
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 3
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: LD_INT 3
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 3
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 3
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 3
45349: NEG
45350: PUSH
45351: LD_INT 3
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45390: LD_ADDR_VAR 0 42
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: NEG
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 3
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 3
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 3
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 3
45636: PUSH
45637: LD_INT 3
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 3
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 3
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 3
45699: NEG
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45740: LD_ADDR_VAR 0 43
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 3
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 3
46036: NEG
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 3
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46088: LD_ADDR_VAR 0 44
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: LD_INT 3
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 3
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 3
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 3
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 3
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 3
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 3
46397: NEG
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46438: LD_ADDR_VAR 0 45
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 3
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 3
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 3
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 3
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46788: LD_ADDR_VAR 0 46
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 3
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 3
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 3
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 3
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47136: LD_ADDR_VAR 0 47
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47287: LD_ADDR_VAR 0 48
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47434: LD_ADDR_VAR 0 49
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47578: LD_ADDR_VAR 0 50
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47722: LD_ADDR_VAR 0 51
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47869: LD_ADDR_VAR 0 52
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48020: LD_ADDR_VAR 0 53
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48250: LD_ADDR_VAR 0 54
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 2
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48480: LD_ADDR_VAR 0 55
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48710: LD_ADDR_VAR 0 56
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48940: LD_ADDR_VAR 0 57
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49170: LD_ADDR_VAR 0 58
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49400: LD_ADDR_VAR 0 59
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49488: LD_ADDR_VAR 0 60
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49576: LD_ADDR_VAR 0 61
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49664: LD_ADDR_VAR 0 62
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49752: LD_ADDR_VAR 0 63
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49840: LD_ADDR_VAR 0 64
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: ST_TO_ADDR
// end ; 1 :
49928: GO 55825
49930: LD_INT 1
49932: DOUBLE
49933: EQUAL
49934: IFTRUE 49938
49936: GO 52561
49938: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49939: LD_ADDR_VAR 0 11
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 3
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49983: LD_ADDR_VAR 0 12
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50024: LD_ADDR_VAR 0 13
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 3
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50064: LD_ADDR_VAR 0 14
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 3
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50105: LD_ADDR_VAR 0 15
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50149: LD_ADDR_VAR 0 16
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: NEG
50181: PUSH
50182: LD_INT 3
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50195: LD_ADDR_VAR 0 17
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: LIST
50238: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50239: LD_ADDR_VAR 0 18
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50280: LD_ADDR_VAR 0 19
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50320: LD_ADDR_VAR 0 20
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50361: LD_ADDR_VAR 0 21
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50405: LD_ADDR_VAR 0 22
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 3
50424: NEG
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50451: LD_ADDR_VAR 0 23
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 4
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50495: LD_ADDR_VAR 0 24
50499: PUSH
50500: LD_INT 3
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 4
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50536: LD_ADDR_VAR 0 25
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 4
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: LD_INT 4
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50576: LD_ADDR_VAR 0 26
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 4
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50617: LD_ADDR_VAR 0 27
50621: PUSH
50622: LD_INT 3
50624: NEG
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 3
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 4
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50661: LD_ADDR_VAR 0 28
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 3
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: LD_INT 4
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 4
50692: NEG
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50707: LD_ADDR_VAR 0 29
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 3
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 3
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 4
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 4
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 5
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 5
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 4
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 6
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 6
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 5
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50862: LD_ADDR_VAR 0 30
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 4
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 4
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 4
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 5
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 5
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 5
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 6
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 6
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51005: LD_ADDR_VAR 0 31
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 4
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 4
51052: PUSH
51053: LD_INT 4
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: LD_INT 4
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 5
51072: PUSH
51073: LD_INT 4
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 5
51082: PUSH
51083: LD_INT 5
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 4
51092: PUSH
51093: LD_INT 5
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 6
51102: PUSH
51103: LD_INT 5
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 6
51112: PUSH
51113: LD_INT 6
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 5
51122: PUSH
51123: LD_INT 6
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51144: LD_ADDR_VAR 0 32
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 3
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 3
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 4
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 4
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 5
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 5
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 4
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 6
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 6
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 5
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51287: LD_ADDR_VAR 0 33
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 3
51328: NEG
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 4
51339: NEG
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 4
51350: NEG
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 4
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 5
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 5
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 5
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 6
51407: NEG
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 6
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51442: LD_ADDR_VAR 0 34
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: LD_INT 3
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 4
51497: NEG
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 4
51509: NEG
51510: PUSH
51511: LD_INT 4
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 4
51521: NEG
51522: PUSH
51523: LD_INT 5
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 5
51533: NEG
51534: PUSH
51535: LD_INT 4
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 5
51545: NEG
51546: PUSH
51547: LD_INT 5
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 5
51557: NEG
51558: PUSH
51559: LD_INT 6
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 6
51569: NEG
51570: PUSH
51571: LD_INT 5
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 6
51581: NEG
51582: PUSH
51583: LD_INT 6
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51605: LD_ADDR_VAR 0 41
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 3
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51649: LD_ADDR_VAR 0 42
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51690: LD_ADDR_VAR 0 43
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51730: LD_ADDR_VAR 0 44
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51771: LD_ADDR_VAR 0 45
51775: PUSH
51776: LD_INT 2
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: LIST
51814: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51815: LD_ADDR_VAR 0 46
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 3
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 3
51846: NEG
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51861: LD_ADDR_VAR 0 47
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 3
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51894: LD_ADDR_VAR 0 48
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51925: LD_ADDR_VAR 0 49
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51954: LD_ADDR_VAR 0 50
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51983: LD_ADDR_VAR 0 51
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52014: LD_ADDR_VAR 0 52
52018: PUSH
52019: LD_INT 3
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52047: LD_ADDR_VAR 0 53
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 3
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: LIST
52090: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52091: LD_ADDR_VAR 0 54
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52132: LD_ADDR_VAR 0 55
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52172: LD_ADDR_VAR 0 56
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 3
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52213: LD_ADDR_VAR 0 57
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52257: LD_ADDR_VAR 0 58
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 3
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52303: LD_ADDR_VAR 0 59
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52347: LD_ADDR_VAR 0 60
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52388: LD_ADDR_VAR 0 61
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52428: LD_ADDR_VAR 0 62
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52469: LD_ADDR_VAR 0 63
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52513: LD_ADDR_VAR 0 64
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: ST_TO_ADDR
// end ; 2 :
52559: GO 55825
52561: LD_INT 2
52563: DOUBLE
52564: EQUAL
52565: IFTRUE 52569
52567: GO 55824
52569: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52570: LD_ADDR_VAR 0 29
52574: PUSH
52575: LD_INT 4
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 4
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 5
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 3
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 3
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 5
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 4
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 4
52700: PUSH
52701: LD_INT 4
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 3
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 4
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 4
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 4
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 4
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 5
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 5
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 3
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: LD_INT 5
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 4
52909: NEG
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 4
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 4
52932: NEG
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 4
52955: NEG
52956: PUSH
52957: LD_INT 4
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 4
52967: NEG
52968: PUSH
52969: LD_INT 5
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: LD_INT 4
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 4
53003: NEG
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 5
53015: NEG
53016: PUSH
53017: LD_INT 4
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 5
53027: NEG
53028: PUSH
53029: LD_INT 5
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: LD_INT 5
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 5
53051: NEG
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53108: LD_ADDR_VAR 0 30
53112: PUSH
53113: LD_INT 4
53115: PUSH
53116: LD_INT 4
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 4
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 5
53135: PUSH
53136: LD_INT 4
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 5
53145: PUSH
53146: LD_INT 5
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 4
53155: PUSH
53156: LD_INT 5
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: LD_INT 4
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 5
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: LD_INT 5
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 4
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 4
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 4
53298: NEG
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 4
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 3
53332: NEG
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 4
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 5
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 5
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 5
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: NEG
53413: PUSH
53414: LD_INT 4
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: NEG
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 4
53460: NEG
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 4
53472: NEG
53473: PUSH
53474: LD_INT 4
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 4
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 4
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 4
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 5
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 4
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 3
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 4
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 5
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: LD_INT 5
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53655: LD_ADDR_VAR 0 31
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 4
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 4
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 5
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 5
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 4
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: LD_INT 5
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 3
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 4
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 4
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 4
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 4
53857: NEG
53858: PUSH
53859: LD_INT 4
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 4
53869: NEG
53870: PUSH
53871: LD_INT 5
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: LD_INT 4
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: LD_INT 3
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 4
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 5
53917: NEG
53918: PUSH
53919: LD_INT 4
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 5
53929: NEG
53930: PUSH
53931: LD_INT 5
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: LD_INT 5
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 5
53953: NEG
53954: PUSH
53955: LD_INT 3
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 4
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 3
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 4
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 4
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 4
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 4
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 5
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 5
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 4
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 3
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 5
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54205: LD_ADDR_VAR 0 32
54209: PUSH
54210: LD_INT 4
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 4
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 3
54235: NEG
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 4
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 5
54268: NEG
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 5
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 5
54291: NEG
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: NEG
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 3
54326: NEG
54327: PUSH
54328: LD_INT 4
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: LD_INT 3
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 4
54374: NEG
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 4
54386: NEG
54387: PUSH
54388: LD_INT 4
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 4
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 4
54410: NEG
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 4
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 5
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 4
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 3
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 3
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 4
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 5
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 5
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 4
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 4
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 4
54617: PUSH
54618: LD_INT 4
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 4
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 5
54637: PUSH
54638: LD_INT 4
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 5
54647: PUSH
54648: LD_INT 5
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 4
54657: PUSH
54658: LD_INT 5
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: LD_INT 4
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 5
54687: PUSH
54688: LD_INT 3
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 3
54697: PUSH
54698: LD_INT 5
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54752: LD_ADDR_VAR 0 33
54756: PUSH
54757: LD_INT 4
54759: NEG
54760: PUSH
54761: LD_INT 4
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 4
54771: NEG
54772: PUSH
54773: LD_INT 5
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: LD_INT 4
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 4
54807: NEG
54808: PUSH
54809: LD_INT 3
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 5
54819: NEG
54820: PUSH
54821: LD_INT 4
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 5
54831: NEG
54832: PUSH
54833: LD_INT 5
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: LD_INT 5
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 5
54855: NEG
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 3
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 4
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 4
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 4
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 4
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 4
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 5
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 5
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 4
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 5
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 4
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 4
55092: PUSH
55093: LD_INT 4
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: LD_INT 4
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 4
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: LD_INT 4
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 4
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 4
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 5
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 5
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: LD_INT 4
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 3
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: LD_INT 5
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55290: LD_ADDR_VAR 0 34
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 4
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 5
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 4
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 4
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 5
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 3
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: LD_INT 5
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 4
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 4
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 4
55492: PUSH
55493: LD_INT 4
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 5
55512: PUSH
55513: LD_INT 4
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 5
55522: PUSH
55523: LD_INT 5
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: LD_INT 5
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: LD_INT 4
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 5
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: LD_INT 5
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 4
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 4
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 4
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 4
55675: NEG
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 4
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 4
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 5
55731: NEG
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 5
55742: NEG
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 5
55754: NEG
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// end ; end ;
55822: GO 55825
55824: POP
// case btype of b_depot , b_warehouse :
55825: LD_VAR 0 1
55829: PUSH
55830: LD_INT 0
55832: DOUBLE
55833: EQUAL
55834: IFTRUE 55844
55836: LD_INT 1
55838: DOUBLE
55839: EQUAL
55840: IFTRUE 55844
55842: GO 56045
55844: POP
// case nation of nation_american :
55845: LD_VAR 0 5
55849: PUSH
55850: LD_INT 1
55852: DOUBLE
55853: EQUAL
55854: IFTRUE 55858
55856: GO 55914
55858: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55859: LD_ADDR_VAR 0 9
55863: PUSH
55864: LD_VAR 0 11
55868: PUSH
55869: LD_VAR 0 12
55873: PUSH
55874: LD_VAR 0 13
55878: PUSH
55879: LD_VAR 0 14
55883: PUSH
55884: LD_VAR 0 15
55888: PUSH
55889: LD_VAR 0 16
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: PUSH
55902: LD_VAR 0 4
55906: PUSH
55907: LD_INT 1
55909: PLUS
55910: ARRAY
55911: ST_TO_ADDR
55912: GO 56043
55914: LD_INT 2
55916: DOUBLE
55917: EQUAL
55918: IFTRUE 55922
55920: GO 55978
55922: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55923: LD_ADDR_VAR 0 9
55927: PUSH
55928: LD_VAR 0 17
55932: PUSH
55933: LD_VAR 0 18
55937: PUSH
55938: LD_VAR 0 19
55942: PUSH
55943: LD_VAR 0 20
55947: PUSH
55948: LD_VAR 0 21
55952: PUSH
55953: LD_VAR 0 22
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: PUSH
55966: LD_VAR 0 4
55970: PUSH
55971: LD_INT 1
55973: PLUS
55974: ARRAY
55975: ST_TO_ADDR
55976: GO 56043
55978: LD_INT 3
55980: DOUBLE
55981: EQUAL
55982: IFTRUE 55986
55984: GO 56042
55986: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55987: LD_ADDR_VAR 0 9
55991: PUSH
55992: LD_VAR 0 23
55996: PUSH
55997: LD_VAR 0 24
56001: PUSH
56002: LD_VAR 0 25
56006: PUSH
56007: LD_VAR 0 26
56011: PUSH
56012: LD_VAR 0 27
56016: PUSH
56017: LD_VAR 0 28
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: PUSH
56030: LD_VAR 0 4
56034: PUSH
56035: LD_INT 1
56037: PLUS
56038: ARRAY
56039: ST_TO_ADDR
56040: GO 56043
56042: POP
56043: GO 56598
56045: LD_INT 2
56047: DOUBLE
56048: EQUAL
56049: IFTRUE 56059
56051: LD_INT 3
56053: DOUBLE
56054: EQUAL
56055: IFTRUE 56059
56057: GO 56115
56059: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56060: LD_ADDR_VAR 0 9
56064: PUSH
56065: LD_VAR 0 29
56069: PUSH
56070: LD_VAR 0 30
56074: PUSH
56075: LD_VAR 0 31
56079: PUSH
56080: LD_VAR 0 32
56084: PUSH
56085: LD_VAR 0 33
56089: PUSH
56090: LD_VAR 0 34
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: PUSH
56103: LD_VAR 0 4
56107: PUSH
56108: LD_INT 1
56110: PLUS
56111: ARRAY
56112: ST_TO_ADDR
56113: GO 56598
56115: LD_INT 16
56117: DOUBLE
56118: EQUAL
56119: IFTRUE 56177
56121: LD_INT 17
56123: DOUBLE
56124: EQUAL
56125: IFTRUE 56177
56127: LD_INT 18
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56177
56133: LD_INT 19
56135: DOUBLE
56136: EQUAL
56137: IFTRUE 56177
56139: LD_INT 22
56141: DOUBLE
56142: EQUAL
56143: IFTRUE 56177
56145: LD_INT 20
56147: DOUBLE
56148: EQUAL
56149: IFTRUE 56177
56151: LD_INT 21
56153: DOUBLE
56154: EQUAL
56155: IFTRUE 56177
56157: LD_INT 23
56159: DOUBLE
56160: EQUAL
56161: IFTRUE 56177
56163: LD_INT 24
56165: DOUBLE
56166: EQUAL
56167: IFTRUE 56177
56169: LD_INT 25
56171: DOUBLE
56172: EQUAL
56173: IFTRUE 56177
56175: GO 56233
56177: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56178: LD_ADDR_VAR 0 9
56182: PUSH
56183: LD_VAR 0 35
56187: PUSH
56188: LD_VAR 0 36
56192: PUSH
56193: LD_VAR 0 37
56197: PUSH
56198: LD_VAR 0 38
56202: PUSH
56203: LD_VAR 0 39
56207: PUSH
56208: LD_VAR 0 40
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: PUSH
56221: LD_VAR 0 4
56225: PUSH
56226: LD_INT 1
56228: PLUS
56229: ARRAY
56230: ST_TO_ADDR
56231: GO 56598
56233: LD_INT 6
56235: DOUBLE
56236: EQUAL
56237: IFTRUE 56289
56239: LD_INT 7
56241: DOUBLE
56242: EQUAL
56243: IFTRUE 56289
56245: LD_INT 8
56247: DOUBLE
56248: EQUAL
56249: IFTRUE 56289
56251: LD_INT 13
56253: DOUBLE
56254: EQUAL
56255: IFTRUE 56289
56257: LD_INT 12
56259: DOUBLE
56260: EQUAL
56261: IFTRUE 56289
56263: LD_INT 15
56265: DOUBLE
56266: EQUAL
56267: IFTRUE 56289
56269: LD_INT 11
56271: DOUBLE
56272: EQUAL
56273: IFTRUE 56289
56275: LD_INT 14
56277: DOUBLE
56278: EQUAL
56279: IFTRUE 56289
56281: LD_INT 10
56283: DOUBLE
56284: EQUAL
56285: IFTRUE 56289
56287: GO 56345
56289: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56290: LD_ADDR_VAR 0 9
56294: PUSH
56295: LD_VAR 0 41
56299: PUSH
56300: LD_VAR 0 42
56304: PUSH
56305: LD_VAR 0 43
56309: PUSH
56310: LD_VAR 0 44
56314: PUSH
56315: LD_VAR 0 45
56319: PUSH
56320: LD_VAR 0 46
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: PUSH
56333: LD_VAR 0 4
56337: PUSH
56338: LD_INT 1
56340: PLUS
56341: ARRAY
56342: ST_TO_ADDR
56343: GO 56598
56345: LD_INT 36
56347: DOUBLE
56348: EQUAL
56349: IFTRUE 56353
56351: GO 56409
56353: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56354: LD_ADDR_VAR 0 9
56358: PUSH
56359: LD_VAR 0 47
56363: PUSH
56364: LD_VAR 0 48
56368: PUSH
56369: LD_VAR 0 49
56373: PUSH
56374: LD_VAR 0 50
56378: PUSH
56379: LD_VAR 0 51
56383: PUSH
56384: LD_VAR 0 52
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: PUSH
56397: LD_VAR 0 4
56401: PUSH
56402: LD_INT 1
56404: PLUS
56405: ARRAY
56406: ST_TO_ADDR
56407: GO 56598
56409: LD_INT 4
56411: DOUBLE
56412: EQUAL
56413: IFTRUE 56435
56415: LD_INT 5
56417: DOUBLE
56418: EQUAL
56419: IFTRUE 56435
56421: LD_INT 34
56423: DOUBLE
56424: EQUAL
56425: IFTRUE 56435
56427: LD_INT 37
56429: DOUBLE
56430: EQUAL
56431: IFTRUE 56435
56433: GO 56491
56435: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56436: LD_ADDR_VAR 0 9
56440: PUSH
56441: LD_VAR 0 53
56445: PUSH
56446: LD_VAR 0 54
56450: PUSH
56451: LD_VAR 0 55
56455: PUSH
56456: LD_VAR 0 56
56460: PUSH
56461: LD_VAR 0 57
56465: PUSH
56466: LD_VAR 0 58
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: PUSH
56479: LD_VAR 0 4
56483: PUSH
56484: LD_INT 1
56486: PLUS
56487: ARRAY
56488: ST_TO_ADDR
56489: GO 56598
56491: LD_INT 31
56493: DOUBLE
56494: EQUAL
56495: IFTRUE 56541
56497: LD_INT 32
56499: DOUBLE
56500: EQUAL
56501: IFTRUE 56541
56503: LD_INT 33
56505: DOUBLE
56506: EQUAL
56507: IFTRUE 56541
56509: LD_INT 27
56511: DOUBLE
56512: EQUAL
56513: IFTRUE 56541
56515: LD_INT 26
56517: DOUBLE
56518: EQUAL
56519: IFTRUE 56541
56521: LD_INT 28
56523: DOUBLE
56524: EQUAL
56525: IFTRUE 56541
56527: LD_INT 29
56529: DOUBLE
56530: EQUAL
56531: IFTRUE 56541
56533: LD_INT 30
56535: DOUBLE
56536: EQUAL
56537: IFTRUE 56541
56539: GO 56597
56541: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56542: LD_ADDR_VAR 0 9
56546: PUSH
56547: LD_VAR 0 59
56551: PUSH
56552: LD_VAR 0 60
56556: PUSH
56557: LD_VAR 0 61
56561: PUSH
56562: LD_VAR 0 62
56566: PUSH
56567: LD_VAR 0 63
56571: PUSH
56572: LD_VAR 0 64
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: PUSH
56585: LD_VAR 0 4
56589: PUSH
56590: LD_INT 1
56592: PLUS
56593: ARRAY
56594: ST_TO_ADDR
56595: GO 56598
56597: POP
// temp_list2 = [ ] ;
56598: LD_ADDR_VAR 0 10
56602: PUSH
56603: EMPTY
56604: ST_TO_ADDR
// for i in temp_list do
56605: LD_ADDR_VAR 0 8
56609: PUSH
56610: LD_VAR 0 9
56614: PUSH
56615: FOR_IN
56616: IFFALSE 56668
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56618: LD_ADDR_VAR 0 10
56622: PUSH
56623: LD_VAR 0 10
56627: PUSH
56628: LD_VAR 0 8
56632: PUSH
56633: LD_INT 1
56635: ARRAY
56636: PUSH
56637: LD_VAR 0 2
56641: PLUS
56642: PUSH
56643: LD_VAR 0 8
56647: PUSH
56648: LD_INT 2
56650: ARRAY
56651: PUSH
56652: LD_VAR 0 3
56656: PLUS
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: EMPTY
56663: LIST
56664: ADD
56665: ST_TO_ADDR
56666: GO 56615
56668: POP
56669: POP
// result = temp_list2 ;
56670: LD_ADDR_VAR 0 7
56674: PUSH
56675: LD_VAR 0 10
56679: ST_TO_ADDR
// end ;
56680: LD_VAR 0 7
56684: RET
// export function EnemyInRange ( unit , dist ) ; begin
56685: LD_INT 0
56687: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56688: LD_ADDR_VAR 0 3
56692: PUSH
56693: LD_VAR 0 1
56697: PPUSH
56698: CALL_OW 255
56702: PPUSH
56703: LD_VAR 0 1
56707: PPUSH
56708: CALL_OW 250
56712: PPUSH
56713: LD_VAR 0 1
56717: PPUSH
56718: CALL_OW 251
56722: PPUSH
56723: LD_VAR 0 2
56727: PPUSH
56728: CALL 30087 0 4
56732: PUSH
56733: LD_INT 4
56735: ARRAY
56736: ST_TO_ADDR
// end ;
56737: LD_VAR 0 3
56741: RET
// export function PlayerSeeMe ( unit ) ; begin
56742: LD_INT 0
56744: PPUSH
// result := See ( your_side , unit ) ;
56745: LD_ADDR_VAR 0 2
56749: PUSH
56750: LD_OWVAR 2
56754: PPUSH
56755: LD_VAR 0 1
56759: PPUSH
56760: CALL_OW 292
56764: ST_TO_ADDR
// end ;
56765: LD_VAR 0 2
56769: RET
// export function ReverseDir ( unit ) ; begin
56770: LD_INT 0
56772: PPUSH
// if not unit then
56773: LD_VAR 0 1
56777: NOT
56778: IFFALSE 56782
// exit ;
56780: GO 56805
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56782: LD_ADDR_VAR 0 2
56786: PUSH
56787: LD_VAR 0 1
56791: PPUSH
56792: CALL_OW 254
56796: PUSH
56797: LD_INT 3
56799: PLUS
56800: PUSH
56801: LD_INT 6
56803: MOD
56804: ST_TO_ADDR
// end ;
56805: LD_VAR 0 2
56809: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56810: LD_INT 0
56812: PPUSH
56813: PPUSH
56814: PPUSH
56815: PPUSH
56816: PPUSH
56817: PPUSH
// if not unit or not hexes then
56818: LD_VAR 0 1
56822: NOT
56823: PUSH
56824: LD_VAR 0 2
56828: NOT
56829: OR
56830: IFFALSE 56834
// exit ;
56832: GO 56957
// dist := 9999 ;
56834: LD_ADDR_VAR 0 5
56838: PUSH
56839: LD_INT 9999
56841: ST_TO_ADDR
// for i = 1 to hexes do
56842: LD_ADDR_VAR 0 4
56846: PUSH
56847: DOUBLE
56848: LD_INT 1
56850: DEC
56851: ST_TO_ADDR
56852: LD_VAR 0 2
56856: PUSH
56857: FOR_TO
56858: IFFALSE 56945
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56860: LD_ADDR_VAR 0 6
56864: PUSH
56865: LD_VAR 0 1
56869: PPUSH
56870: LD_VAR 0 2
56874: PUSH
56875: LD_VAR 0 4
56879: ARRAY
56880: PUSH
56881: LD_INT 1
56883: ARRAY
56884: PPUSH
56885: LD_VAR 0 2
56889: PUSH
56890: LD_VAR 0 4
56894: ARRAY
56895: PUSH
56896: LD_INT 2
56898: ARRAY
56899: PPUSH
56900: CALL_OW 297
56904: ST_TO_ADDR
// if tdist < dist then
56905: LD_VAR 0 6
56909: PUSH
56910: LD_VAR 0 5
56914: LESS
56915: IFFALSE 56943
// begin hex := hexes [ i ] ;
56917: LD_ADDR_VAR 0 8
56921: PUSH
56922: LD_VAR 0 2
56926: PUSH
56927: LD_VAR 0 4
56931: ARRAY
56932: ST_TO_ADDR
// dist := tdist ;
56933: LD_ADDR_VAR 0 5
56937: PUSH
56938: LD_VAR 0 6
56942: ST_TO_ADDR
// end ; end ;
56943: GO 56857
56945: POP
56946: POP
// result := hex ;
56947: LD_ADDR_VAR 0 3
56951: PUSH
56952: LD_VAR 0 8
56956: ST_TO_ADDR
// end ;
56957: LD_VAR 0 3
56961: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56962: LD_INT 0
56964: PPUSH
56965: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56966: LD_VAR 0 1
56970: NOT
56971: PUSH
56972: LD_VAR 0 1
56976: PUSH
56977: LD_INT 21
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 23
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PPUSH
57001: CALL_OW 69
57005: IN
57006: NOT
57007: OR
57008: IFFALSE 57012
// exit ;
57010: GO 57059
// for i = 1 to 3 do
57012: LD_ADDR_VAR 0 3
57016: PUSH
57017: DOUBLE
57018: LD_INT 1
57020: DEC
57021: ST_TO_ADDR
57022: LD_INT 3
57024: PUSH
57025: FOR_TO
57026: IFFALSE 57057
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57028: LD_VAR 0 1
57032: PPUSH
57033: CALL_OW 250
57037: PPUSH
57038: LD_VAR 0 1
57042: PPUSH
57043: CALL_OW 251
57047: PPUSH
57048: LD_INT 1
57050: PPUSH
57051: CALL_OW 453
57055: GO 57025
57057: POP
57058: POP
// end ;
57059: LD_VAR 0 2
57063: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57064: LD_INT 0
57066: PPUSH
57067: PPUSH
57068: PPUSH
57069: PPUSH
57070: PPUSH
57071: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57072: LD_VAR 0 1
57076: NOT
57077: PUSH
57078: LD_VAR 0 2
57082: NOT
57083: OR
57084: PUSH
57085: LD_VAR 0 1
57089: PPUSH
57090: CALL_OW 314
57094: OR
57095: IFFALSE 57099
// exit ;
57097: GO 57540
// x := GetX ( enemy_unit ) ;
57099: LD_ADDR_VAR 0 7
57103: PUSH
57104: LD_VAR 0 2
57108: PPUSH
57109: CALL_OW 250
57113: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57114: LD_ADDR_VAR 0 8
57118: PUSH
57119: LD_VAR 0 2
57123: PPUSH
57124: CALL_OW 251
57128: ST_TO_ADDR
// if not x or not y then
57129: LD_VAR 0 7
57133: NOT
57134: PUSH
57135: LD_VAR 0 8
57139: NOT
57140: OR
57141: IFFALSE 57145
// exit ;
57143: GO 57540
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57145: LD_ADDR_VAR 0 6
57149: PUSH
57150: LD_VAR 0 7
57154: PPUSH
57155: LD_INT 0
57157: PPUSH
57158: LD_INT 4
57160: PPUSH
57161: CALL_OW 272
57165: PUSH
57166: LD_VAR 0 8
57170: PPUSH
57171: LD_INT 0
57173: PPUSH
57174: LD_INT 4
57176: PPUSH
57177: CALL_OW 273
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_VAR 0 7
57190: PPUSH
57191: LD_INT 1
57193: PPUSH
57194: LD_INT 4
57196: PPUSH
57197: CALL_OW 272
57201: PUSH
57202: LD_VAR 0 8
57206: PPUSH
57207: LD_INT 1
57209: PPUSH
57210: LD_INT 4
57212: PPUSH
57213: CALL_OW 273
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_VAR 0 7
57226: PPUSH
57227: LD_INT 2
57229: PPUSH
57230: LD_INT 4
57232: PPUSH
57233: CALL_OW 272
57237: PUSH
57238: LD_VAR 0 8
57242: PPUSH
57243: LD_INT 2
57245: PPUSH
57246: LD_INT 4
57248: PPUSH
57249: CALL_OW 273
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_VAR 0 7
57262: PPUSH
57263: LD_INT 3
57265: PPUSH
57266: LD_INT 4
57268: PPUSH
57269: CALL_OW 272
57273: PUSH
57274: LD_VAR 0 8
57278: PPUSH
57279: LD_INT 3
57281: PPUSH
57282: LD_INT 4
57284: PPUSH
57285: CALL_OW 273
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_VAR 0 7
57298: PPUSH
57299: LD_INT 4
57301: PPUSH
57302: LD_INT 4
57304: PPUSH
57305: CALL_OW 272
57309: PUSH
57310: LD_VAR 0 8
57314: PPUSH
57315: LD_INT 4
57317: PPUSH
57318: LD_INT 4
57320: PPUSH
57321: CALL_OW 273
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_VAR 0 7
57334: PPUSH
57335: LD_INT 5
57337: PPUSH
57338: LD_INT 4
57340: PPUSH
57341: CALL_OW 272
57345: PUSH
57346: LD_VAR 0 8
57350: PPUSH
57351: LD_INT 5
57353: PPUSH
57354: LD_INT 4
57356: PPUSH
57357: CALL_OW 273
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// for i = tmp downto 1 do
57374: LD_ADDR_VAR 0 4
57378: PUSH
57379: DOUBLE
57380: LD_VAR 0 6
57384: INC
57385: ST_TO_ADDR
57386: LD_INT 1
57388: PUSH
57389: FOR_DOWNTO
57390: IFFALSE 57491
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57392: LD_VAR 0 6
57396: PUSH
57397: LD_VAR 0 4
57401: ARRAY
57402: PUSH
57403: LD_INT 1
57405: ARRAY
57406: PPUSH
57407: LD_VAR 0 6
57411: PUSH
57412: LD_VAR 0 4
57416: ARRAY
57417: PUSH
57418: LD_INT 2
57420: ARRAY
57421: PPUSH
57422: CALL_OW 488
57426: NOT
57427: PUSH
57428: LD_VAR 0 6
57432: PUSH
57433: LD_VAR 0 4
57437: ARRAY
57438: PUSH
57439: LD_INT 1
57441: ARRAY
57442: PPUSH
57443: LD_VAR 0 6
57447: PUSH
57448: LD_VAR 0 4
57452: ARRAY
57453: PUSH
57454: LD_INT 2
57456: ARRAY
57457: PPUSH
57458: CALL_OW 428
57462: PUSH
57463: LD_INT 0
57465: NONEQUAL
57466: OR
57467: IFFALSE 57489
// tmp := Delete ( tmp , i ) ;
57469: LD_ADDR_VAR 0 6
57473: PUSH
57474: LD_VAR 0 6
57478: PPUSH
57479: LD_VAR 0 4
57483: PPUSH
57484: CALL_OW 3
57488: ST_TO_ADDR
57489: GO 57389
57491: POP
57492: POP
// j := GetClosestHex ( unit , tmp ) ;
57493: LD_ADDR_VAR 0 5
57497: PUSH
57498: LD_VAR 0 1
57502: PPUSH
57503: LD_VAR 0 6
57507: PPUSH
57508: CALL 56810 0 2
57512: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57513: LD_VAR 0 1
57517: PPUSH
57518: LD_VAR 0 5
57522: PUSH
57523: LD_INT 1
57525: ARRAY
57526: PPUSH
57527: LD_VAR 0 5
57531: PUSH
57532: LD_INT 2
57534: ARRAY
57535: PPUSH
57536: CALL_OW 111
// end ;
57540: LD_VAR 0 3
57544: RET
// export function PrepareApemanSoldier ( ) ; begin
57545: LD_INT 0
57547: PPUSH
// uc_nation := 0 ;
57548: LD_ADDR_OWVAR 21
57552: PUSH
57553: LD_INT 0
57555: ST_TO_ADDR
// hc_sex := sex_male ;
57556: LD_ADDR_OWVAR 27
57560: PUSH
57561: LD_INT 1
57563: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57564: LD_ADDR_OWVAR 28
57568: PUSH
57569: LD_INT 15
57571: ST_TO_ADDR
// hc_gallery :=  ;
57572: LD_ADDR_OWVAR 33
57576: PUSH
57577: LD_STRING 
57579: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57580: LD_ADDR_OWVAR 31
57584: PUSH
57585: LD_INT 0
57587: PPUSH
57588: LD_INT 3
57590: PPUSH
57591: CALL_OW 12
57595: PUSH
57596: LD_INT 0
57598: PPUSH
57599: LD_INT 3
57601: PPUSH
57602: CALL_OW 12
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// end ;
57619: LD_VAR 0 1
57623: RET
// export function PrepareApemanEngineer ( ) ; begin
57624: LD_INT 0
57626: PPUSH
// uc_nation := 0 ;
57627: LD_ADDR_OWVAR 21
57631: PUSH
57632: LD_INT 0
57634: ST_TO_ADDR
// hc_sex := sex_male ;
57635: LD_ADDR_OWVAR 27
57639: PUSH
57640: LD_INT 1
57642: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57643: LD_ADDR_OWVAR 28
57647: PUSH
57648: LD_INT 16
57650: ST_TO_ADDR
// hc_gallery :=  ;
57651: LD_ADDR_OWVAR 33
57655: PUSH
57656: LD_STRING 
57658: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57659: LD_ADDR_OWVAR 31
57663: PUSH
57664: LD_INT 0
57666: PPUSH
57667: LD_INT 3
57669: PPUSH
57670: CALL_OW 12
57674: PUSH
57675: LD_INT 0
57677: PPUSH
57678: LD_INT 3
57680: PPUSH
57681: CALL_OW 12
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// end ;
57698: LD_VAR 0 1
57702: RET
// export function PrepareApeman ( agressivity ) ; begin
57703: LD_INT 0
57705: PPUSH
// uc_side := 0 ;
57706: LD_ADDR_OWVAR 20
57710: PUSH
57711: LD_INT 0
57713: ST_TO_ADDR
// uc_nation := 0 ;
57714: LD_ADDR_OWVAR 21
57718: PUSH
57719: LD_INT 0
57721: ST_TO_ADDR
// hc_sex := sex_male ;
57722: LD_ADDR_OWVAR 27
57726: PUSH
57727: LD_INT 1
57729: ST_TO_ADDR
// hc_class := class_apeman ;
57730: LD_ADDR_OWVAR 28
57734: PUSH
57735: LD_INT 12
57737: ST_TO_ADDR
// hc_gallery :=  ;
57738: LD_ADDR_OWVAR 33
57742: PUSH
57743: LD_STRING 
57745: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57746: LD_ADDR_OWVAR 35
57750: PUSH
57751: LD_VAR 0 1
57755: NEG
57756: PPUSH
57757: LD_VAR 0 1
57761: PPUSH
57762: CALL_OW 12
57766: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57767: LD_ADDR_OWVAR 31
57771: PUSH
57772: LD_INT 0
57774: PPUSH
57775: LD_INT 3
57777: PPUSH
57778: CALL_OW 12
57782: PUSH
57783: LD_INT 0
57785: PPUSH
57786: LD_INT 3
57788: PPUSH
57789: CALL_OW 12
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: ST_TO_ADDR
// end ;
57806: LD_VAR 0 2
57810: RET
// export function PrepareTiger ( agressivity ) ; begin
57811: LD_INT 0
57813: PPUSH
// uc_side := 0 ;
57814: LD_ADDR_OWVAR 20
57818: PUSH
57819: LD_INT 0
57821: ST_TO_ADDR
// uc_nation := 0 ;
57822: LD_ADDR_OWVAR 21
57826: PUSH
57827: LD_INT 0
57829: ST_TO_ADDR
// hc_class := class_tiger ;
57830: LD_ADDR_OWVAR 28
57834: PUSH
57835: LD_INT 14
57837: ST_TO_ADDR
// hc_gallery :=  ;
57838: LD_ADDR_OWVAR 33
57842: PUSH
57843: LD_STRING 
57845: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57846: LD_ADDR_OWVAR 35
57850: PUSH
57851: LD_VAR 0 1
57855: NEG
57856: PPUSH
57857: LD_VAR 0 1
57861: PPUSH
57862: CALL_OW 12
57866: ST_TO_ADDR
// end ;
57867: LD_VAR 0 2
57871: RET
// export function PrepareEnchidna ( ) ; begin
57872: LD_INT 0
57874: PPUSH
// uc_side := 0 ;
57875: LD_ADDR_OWVAR 20
57879: PUSH
57880: LD_INT 0
57882: ST_TO_ADDR
// uc_nation := 0 ;
57883: LD_ADDR_OWVAR 21
57887: PUSH
57888: LD_INT 0
57890: ST_TO_ADDR
// hc_class := class_baggie ;
57891: LD_ADDR_OWVAR 28
57895: PUSH
57896: LD_INT 13
57898: ST_TO_ADDR
// hc_gallery :=  ;
57899: LD_ADDR_OWVAR 33
57903: PUSH
57904: LD_STRING 
57906: ST_TO_ADDR
// end ;
57907: LD_VAR 0 1
57911: RET
// export function PrepareFrog ( ) ; begin
57912: LD_INT 0
57914: PPUSH
// uc_side := 0 ;
57915: LD_ADDR_OWVAR 20
57919: PUSH
57920: LD_INT 0
57922: ST_TO_ADDR
// uc_nation := 0 ;
57923: LD_ADDR_OWVAR 21
57927: PUSH
57928: LD_INT 0
57930: ST_TO_ADDR
// hc_class := class_frog ;
57931: LD_ADDR_OWVAR 28
57935: PUSH
57936: LD_INT 19
57938: ST_TO_ADDR
// hc_gallery :=  ;
57939: LD_ADDR_OWVAR 33
57943: PUSH
57944: LD_STRING 
57946: ST_TO_ADDR
// end ;
57947: LD_VAR 0 1
57951: RET
// export function PrepareFish ( ) ; begin
57952: LD_INT 0
57954: PPUSH
// uc_side := 0 ;
57955: LD_ADDR_OWVAR 20
57959: PUSH
57960: LD_INT 0
57962: ST_TO_ADDR
// uc_nation := 0 ;
57963: LD_ADDR_OWVAR 21
57967: PUSH
57968: LD_INT 0
57970: ST_TO_ADDR
// hc_class := class_fish ;
57971: LD_ADDR_OWVAR 28
57975: PUSH
57976: LD_INT 20
57978: ST_TO_ADDR
// hc_gallery :=  ;
57979: LD_ADDR_OWVAR 33
57983: PUSH
57984: LD_STRING 
57986: ST_TO_ADDR
// end ;
57987: LD_VAR 0 1
57991: RET
// export function PrepareBird ( ) ; begin
57992: LD_INT 0
57994: PPUSH
// uc_side := 0 ;
57995: LD_ADDR_OWVAR 20
57999: PUSH
58000: LD_INT 0
58002: ST_TO_ADDR
// uc_nation := 0 ;
58003: LD_ADDR_OWVAR 21
58007: PUSH
58008: LD_INT 0
58010: ST_TO_ADDR
// hc_class := class_phororhacos ;
58011: LD_ADDR_OWVAR 28
58015: PUSH
58016: LD_INT 18
58018: ST_TO_ADDR
// hc_gallery :=  ;
58019: LD_ADDR_OWVAR 33
58023: PUSH
58024: LD_STRING 
58026: ST_TO_ADDR
// end ;
58027: LD_VAR 0 1
58031: RET
// export function PrepareHorse ( ) ; begin
58032: LD_INT 0
58034: PPUSH
// uc_side := 0 ;
58035: LD_ADDR_OWVAR 20
58039: PUSH
58040: LD_INT 0
58042: ST_TO_ADDR
// uc_nation := 0 ;
58043: LD_ADDR_OWVAR 21
58047: PUSH
58048: LD_INT 0
58050: ST_TO_ADDR
// hc_class := class_horse ;
58051: LD_ADDR_OWVAR 28
58055: PUSH
58056: LD_INT 21
58058: ST_TO_ADDR
// hc_gallery :=  ;
58059: LD_ADDR_OWVAR 33
58063: PUSH
58064: LD_STRING 
58066: ST_TO_ADDR
// end ;
58067: LD_VAR 0 1
58071: RET
// export function PrepareMastodont ( ) ; begin
58072: LD_INT 0
58074: PPUSH
// uc_side := 0 ;
58075: LD_ADDR_OWVAR 20
58079: PUSH
58080: LD_INT 0
58082: ST_TO_ADDR
// uc_nation := 0 ;
58083: LD_ADDR_OWVAR 21
58087: PUSH
58088: LD_INT 0
58090: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58091: LD_ADDR_OWVAR 37
58095: PUSH
58096: LD_INT 31
58098: ST_TO_ADDR
// vc_control := control_rider ;
58099: LD_ADDR_OWVAR 38
58103: PUSH
58104: LD_INT 4
58106: ST_TO_ADDR
// end ;
58107: LD_VAR 0 1
58111: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58112: LD_INT 0
58114: PPUSH
58115: PPUSH
58116: PPUSH
// uc_side = 0 ;
58117: LD_ADDR_OWVAR 20
58121: PUSH
58122: LD_INT 0
58124: ST_TO_ADDR
// uc_nation = 0 ;
58125: LD_ADDR_OWVAR 21
58129: PUSH
58130: LD_INT 0
58132: ST_TO_ADDR
// InitHc_All ( ) ;
58133: CALL_OW 584
// InitVc ;
58137: CALL_OW 20
// if mastodonts then
58141: LD_VAR 0 6
58145: IFFALSE 58212
// for i = 1 to mastodonts do
58147: LD_ADDR_VAR 0 11
58151: PUSH
58152: DOUBLE
58153: LD_INT 1
58155: DEC
58156: ST_TO_ADDR
58157: LD_VAR 0 6
58161: PUSH
58162: FOR_TO
58163: IFFALSE 58210
// begin vc_chassis := 31 ;
58165: LD_ADDR_OWVAR 37
58169: PUSH
58170: LD_INT 31
58172: ST_TO_ADDR
// vc_control := control_rider ;
58173: LD_ADDR_OWVAR 38
58177: PUSH
58178: LD_INT 4
58180: ST_TO_ADDR
// animal := CreateVehicle ;
58181: LD_ADDR_VAR 0 12
58185: PUSH
58186: CALL_OW 45
58190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58191: LD_VAR 0 12
58195: PPUSH
58196: LD_VAR 0 8
58200: PPUSH
58201: LD_INT 0
58203: PPUSH
58204: CALL 60347 0 3
// end ;
58208: GO 58162
58210: POP
58211: POP
// if horses then
58212: LD_VAR 0 5
58216: IFFALSE 58283
// for i = 1 to horses do
58218: LD_ADDR_VAR 0 11
58222: PUSH
58223: DOUBLE
58224: LD_INT 1
58226: DEC
58227: ST_TO_ADDR
58228: LD_VAR 0 5
58232: PUSH
58233: FOR_TO
58234: IFFALSE 58281
// begin hc_class := 21 ;
58236: LD_ADDR_OWVAR 28
58240: PUSH
58241: LD_INT 21
58243: ST_TO_ADDR
// hc_gallery :=  ;
58244: LD_ADDR_OWVAR 33
58248: PUSH
58249: LD_STRING 
58251: ST_TO_ADDR
// animal := CreateHuman ;
58252: LD_ADDR_VAR 0 12
58256: PUSH
58257: CALL_OW 44
58261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58262: LD_VAR 0 12
58266: PPUSH
58267: LD_VAR 0 8
58271: PPUSH
58272: LD_INT 0
58274: PPUSH
58275: CALL 60347 0 3
// end ;
58279: GO 58233
58281: POP
58282: POP
// if birds then
58283: LD_VAR 0 1
58287: IFFALSE 58354
// for i = 1 to birds do
58289: LD_ADDR_VAR 0 11
58293: PUSH
58294: DOUBLE
58295: LD_INT 1
58297: DEC
58298: ST_TO_ADDR
58299: LD_VAR 0 1
58303: PUSH
58304: FOR_TO
58305: IFFALSE 58352
// begin hc_class = 18 ;
58307: LD_ADDR_OWVAR 28
58311: PUSH
58312: LD_INT 18
58314: ST_TO_ADDR
// hc_gallery =  ;
58315: LD_ADDR_OWVAR 33
58319: PUSH
58320: LD_STRING 
58322: ST_TO_ADDR
// animal := CreateHuman ;
58323: LD_ADDR_VAR 0 12
58327: PUSH
58328: CALL_OW 44
58332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58333: LD_VAR 0 12
58337: PPUSH
58338: LD_VAR 0 8
58342: PPUSH
58343: LD_INT 0
58345: PPUSH
58346: CALL 60347 0 3
// end ;
58350: GO 58304
58352: POP
58353: POP
// if tigers then
58354: LD_VAR 0 2
58358: IFFALSE 58442
// for i = 1 to tigers do
58360: LD_ADDR_VAR 0 11
58364: PUSH
58365: DOUBLE
58366: LD_INT 1
58368: DEC
58369: ST_TO_ADDR
58370: LD_VAR 0 2
58374: PUSH
58375: FOR_TO
58376: IFFALSE 58440
// begin hc_class = class_tiger ;
58378: LD_ADDR_OWVAR 28
58382: PUSH
58383: LD_INT 14
58385: ST_TO_ADDR
// hc_gallery =  ;
58386: LD_ADDR_OWVAR 33
58390: PUSH
58391: LD_STRING 
58393: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58394: LD_ADDR_OWVAR 35
58398: PUSH
58399: LD_INT 7
58401: NEG
58402: PPUSH
58403: LD_INT 7
58405: PPUSH
58406: CALL_OW 12
58410: ST_TO_ADDR
// animal := CreateHuman ;
58411: LD_ADDR_VAR 0 12
58415: PUSH
58416: CALL_OW 44
58420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58421: LD_VAR 0 12
58425: PPUSH
58426: LD_VAR 0 8
58430: PPUSH
58431: LD_INT 0
58433: PPUSH
58434: CALL 60347 0 3
// end ;
58438: GO 58375
58440: POP
58441: POP
// if apemans then
58442: LD_VAR 0 3
58446: IFFALSE 58569
// for i = 1 to apemans do
58448: LD_ADDR_VAR 0 11
58452: PUSH
58453: DOUBLE
58454: LD_INT 1
58456: DEC
58457: ST_TO_ADDR
58458: LD_VAR 0 3
58462: PUSH
58463: FOR_TO
58464: IFFALSE 58567
// begin hc_class = class_apeman ;
58466: LD_ADDR_OWVAR 28
58470: PUSH
58471: LD_INT 12
58473: ST_TO_ADDR
// hc_gallery =  ;
58474: LD_ADDR_OWVAR 33
58478: PUSH
58479: LD_STRING 
58481: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58482: LD_ADDR_OWVAR 35
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PPUSH
58491: LD_INT 2
58493: PPUSH
58494: CALL_OW 12
58498: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58499: LD_ADDR_OWVAR 31
58503: PUSH
58504: LD_INT 1
58506: PPUSH
58507: LD_INT 3
58509: PPUSH
58510: CALL_OW 12
58514: PUSH
58515: LD_INT 1
58517: PPUSH
58518: LD_INT 3
58520: PPUSH
58521: CALL_OW 12
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: ST_TO_ADDR
// animal := CreateHuman ;
58538: LD_ADDR_VAR 0 12
58542: PUSH
58543: CALL_OW 44
58547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58548: LD_VAR 0 12
58552: PPUSH
58553: LD_VAR 0 8
58557: PPUSH
58558: LD_INT 0
58560: PPUSH
58561: CALL 60347 0 3
// end ;
58565: GO 58463
58567: POP
58568: POP
// if enchidnas then
58569: LD_VAR 0 4
58573: IFFALSE 58640
// for i = 1 to enchidnas do
58575: LD_ADDR_VAR 0 11
58579: PUSH
58580: DOUBLE
58581: LD_INT 1
58583: DEC
58584: ST_TO_ADDR
58585: LD_VAR 0 4
58589: PUSH
58590: FOR_TO
58591: IFFALSE 58638
// begin hc_class = 13 ;
58593: LD_ADDR_OWVAR 28
58597: PUSH
58598: LD_INT 13
58600: ST_TO_ADDR
// hc_gallery =  ;
58601: LD_ADDR_OWVAR 33
58605: PUSH
58606: LD_STRING 
58608: ST_TO_ADDR
// animal := CreateHuman ;
58609: LD_ADDR_VAR 0 12
58613: PUSH
58614: CALL_OW 44
58618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58619: LD_VAR 0 12
58623: PPUSH
58624: LD_VAR 0 8
58628: PPUSH
58629: LD_INT 0
58631: PPUSH
58632: CALL 60347 0 3
// end ;
58636: GO 58590
58638: POP
58639: POP
// if fishes then
58640: LD_VAR 0 7
58644: IFFALSE 58711
// for i = 1 to fishes do
58646: LD_ADDR_VAR 0 11
58650: PUSH
58651: DOUBLE
58652: LD_INT 1
58654: DEC
58655: ST_TO_ADDR
58656: LD_VAR 0 7
58660: PUSH
58661: FOR_TO
58662: IFFALSE 58709
// begin hc_class = 20 ;
58664: LD_ADDR_OWVAR 28
58668: PUSH
58669: LD_INT 20
58671: ST_TO_ADDR
// hc_gallery =  ;
58672: LD_ADDR_OWVAR 33
58676: PUSH
58677: LD_STRING 
58679: ST_TO_ADDR
// animal := CreateHuman ;
58680: LD_ADDR_VAR 0 12
58684: PUSH
58685: CALL_OW 44
58689: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58690: LD_VAR 0 12
58694: PPUSH
58695: LD_VAR 0 9
58699: PPUSH
58700: LD_INT 0
58702: PPUSH
58703: CALL 60347 0 3
// end ;
58707: GO 58661
58709: POP
58710: POP
// end ;
58711: LD_VAR 0 10
58715: RET
// export function WantHeal ( sci , unit ) ; begin
58716: LD_INT 0
58718: PPUSH
// if GetTaskList ( sci ) > 0 then
58719: LD_VAR 0 1
58723: PPUSH
58724: CALL_OW 437
58728: PUSH
58729: LD_INT 0
58731: GREATER
58732: IFFALSE 58802
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58734: LD_VAR 0 1
58738: PPUSH
58739: CALL_OW 437
58743: PUSH
58744: LD_INT 1
58746: ARRAY
58747: PUSH
58748: LD_INT 1
58750: ARRAY
58751: PUSH
58752: LD_STRING l
58754: EQUAL
58755: PUSH
58756: LD_VAR 0 1
58760: PPUSH
58761: CALL_OW 437
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: PUSH
58770: LD_INT 4
58772: ARRAY
58773: PUSH
58774: LD_VAR 0 2
58778: EQUAL
58779: AND
58780: IFFALSE 58792
// result := true else
58782: LD_ADDR_VAR 0 3
58786: PUSH
58787: LD_INT 1
58789: ST_TO_ADDR
58790: GO 58800
// result := false ;
58792: LD_ADDR_VAR 0 3
58796: PUSH
58797: LD_INT 0
58799: ST_TO_ADDR
// end else
58800: GO 58810
// result := false ;
58802: LD_ADDR_VAR 0 3
58806: PUSH
58807: LD_INT 0
58809: ST_TO_ADDR
// end ;
58810: LD_VAR 0 3
58814: RET
// export function HealTarget ( sci ) ; begin
58815: LD_INT 0
58817: PPUSH
// if not sci then
58818: LD_VAR 0 1
58822: NOT
58823: IFFALSE 58827
// exit ;
58825: GO 58892
// result := 0 ;
58827: LD_ADDR_VAR 0 2
58831: PUSH
58832: LD_INT 0
58834: ST_TO_ADDR
// if GetTaskList ( sci ) then
58835: LD_VAR 0 1
58839: PPUSH
58840: CALL_OW 437
58844: IFFALSE 58892
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58846: LD_VAR 0 1
58850: PPUSH
58851: CALL_OW 437
58855: PUSH
58856: LD_INT 1
58858: ARRAY
58859: PUSH
58860: LD_INT 1
58862: ARRAY
58863: PUSH
58864: LD_STRING l
58866: EQUAL
58867: IFFALSE 58892
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58869: LD_ADDR_VAR 0 2
58873: PUSH
58874: LD_VAR 0 1
58878: PPUSH
58879: CALL_OW 437
58883: PUSH
58884: LD_INT 1
58886: ARRAY
58887: PUSH
58888: LD_INT 4
58890: ARRAY
58891: ST_TO_ADDR
// end ;
58892: LD_VAR 0 2
58896: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58897: LD_INT 0
58899: PPUSH
58900: PPUSH
58901: PPUSH
58902: PPUSH
// if not base_units then
58903: LD_VAR 0 1
58907: NOT
58908: IFFALSE 58912
// exit ;
58910: GO 58999
// result := false ;
58912: LD_ADDR_VAR 0 2
58916: PUSH
58917: LD_INT 0
58919: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58920: LD_ADDR_VAR 0 5
58924: PUSH
58925: LD_VAR 0 1
58929: PPUSH
58930: LD_INT 21
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PPUSH
58940: CALL_OW 72
58944: ST_TO_ADDR
// if not tmp then
58945: LD_VAR 0 5
58949: NOT
58950: IFFALSE 58954
// exit ;
58952: GO 58999
// for i in tmp do
58954: LD_ADDR_VAR 0 3
58958: PUSH
58959: LD_VAR 0 5
58963: PUSH
58964: FOR_IN
58965: IFFALSE 58997
// begin result := EnemyInRange ( i , 22 ) ;
58967: LD_ADDR_VAR 0 2
58971: PUSH
58972: LD_VAR 0 3
58976: PPUSH
58977: LD_INT 22
58979: PPUSH
58980: CALL 56685 0 2
58984: ST_TO_ADDR
// if result then
58985: LD_VAR 0 2
58989: IFFALSE 58995
// exit ;
58991: POP
58992: POP
58993: GO 58999
// end ;
58995: GO 58964
58997: POP
58998: POP
// end ;
58999: LD_VAR 0 2
59003: RET
// export function FilterByTag ( units , tag ) ; begin
59004: LD_INT 0
59006: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59007: LD_ADDR_VAR 0 3
59011: PUSH
59012: LD_VAR 0 1
59016: PPUSH
59017: LD_INT 120
59019: PUSH
59020: LD_VAR 0 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PPUSH
59029: CALL_OW 72
59033: ST_TO_ADDR
// end ;
59034: LD_VAR 0 3
59038: RET
// export function IsDriver ( un ) ; begin
59039: LD_INT 0
59041: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59042: LD_ADDR_VAR 0 2
59046: PUSH
59047: LD_VAR 0 1
59051: PUSH
59052: LD_INT 55
59054: PUSH
59055: EMPTY
59056: LIST
59057: PPUSH
59058: CALL_OW 69
59062: IN
59063: ST_TO_ADDR
// end ;
59064: LD_VAR 0 2
59068: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59069: LD_INT 0
59071: PPUSH
59072: PPUSH
// list := [ ] ;
59073: LD_ADDR_VAR 0 5
59077: PUSH
59078: EMPTY
59079: ST_TO_ADDR
// case d of 0 :
59080: LD_VAR 0 3
59084: PUSH
59085: LD_INT 0
59087: DOUBLE
59088: EQUAL
59089: IFTRUE 59093
59091: GO 59226
59093: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59094: LD_ADDR_VAR 0 5
59098: PUSH
59099: LD_VAR 0 1
59103: PUSH
59104: LD_INT 4
59106: MINUS
59107: PUSH
59108: LD_VAR 0 2
59112: PUSH
59113: LD_INT 4
59115: MINUS
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: LIST
59124: PUSH
59125: LD_VAR 0 1
59129: PUSH
59130: LD_INT 3
59132: MINUS
59133: PUSH
59134: LD_VAR 0 2
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: PUSH
59147: LD_VAR 0 1
59151: PUSH
59152: LD_INT 4
59154: PLUS
59155: PUSH
59156: LD_VAR 0 2
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: LIST
59168: PUSH
59169: LD_VAR 0 1
59173: PUSH
59174: LD_INT 3
59176: PLUS
59177: PUSH
59178: LD_VAR 0 2
59182: PUSH
59183: LD_INT 3
59185: PLUS
59186: PUSH
59187: LD_INT 5
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: PUSH
59195: LD_VAR 0 1
59199: PUSH
59200: LD_VAR 0 2
59204: PUSH
59205: LD_INT 4
59207: PLUS
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: ST_TO_ADDR
// end ; 1 :
59224: GO 59924
59226: LD_INT 1
59228: DOUBLE
59229: EQUAL
59230: IFTRUE 59234
59232: GO 59367
59234: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59235: LD_ADDR_VAR 0 5
59239: PUSH
59240: LD_VAR 0 1
59244: PUSH
59245: LD_VAR 0 2
59249: PUSH
59250: LD_INT 4
59252: MINUS
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: LIST
59261: PUSH
59262: LD_VAR 0 1
59266: PUSH
59267: LD_INT 3
59269: MINUS
59270: PUSH
59271: LD_VAR 0 2
59275: PUSH
59276: LD_INT 3
59278: MINUS
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: PUSH
59288: LD_VAR 0 1
59292: PUSH
59293: LD_INT 4
59295: MINUS
59296: PUSH
59297: LD_VAR 0 2
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: LIST
59309: PUSH
59310: LD_VAR 0 1
59314: PUSH
59315: LD_VAR 0 2
59319: PUSH
59320: LD_INT 3
59322: PLUS
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: PUSH
59332: LD_VAR 0 1
59336: PUSH
59337: LD_INT 4
59339: PLUS
59340: PUSH
59341: LD_VAR 0 2
59345: PUSH
59346: LD_INT 4
59348: PLUS
59349: PUSH
59350: LD_INT 5
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// end ; 2 :
59365: GO 59924
59367: LD_INT 2
59369: DOUBLE
59370: EQUAL
59371: IFTRUE 59375
59373: GO 59504
59375: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59376: LD_ADDR_VAR 0 5
59380: PUSH
59381: LD_VAR 0 1
59385: PUSH
59386: LD_VAR 0 2
59390: PUSH
59391: LD_INT 3
59393: MINUS
59394: PUSH
59395: LD_INT 3
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: PUSH
59403: LD_VAR 0 1
59407: PUSH
59408: LD_INT 4
59410: PLUS
59411: PUSH
59412: LD_VAR 0 2
59416: PUSH
59417: LD_INT 4
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: LIST
59424: PUSH
59425: LD_VAR 0 1
59429: PUSH
59430: LD_VAR 0 2
59434: PUSH
59435: LD_INT 4
59437: PLUS
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: PUSH
59447: LD_VAR 0 1
59451: PUSH
59452: LD_INT 3
59454: MINUS
59455: PUSH
59456: LD_VAR 0 2
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: PUSH
59469: LD_VAR 0 1
59473: PUSH
59474: LD_INT 4
59476: MINUS
59477: PUSH
59478: LD_VAR 0 2
59482: PUSH
59483: LD_INT 4
59485: MINUS
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// end ; 3 :
59502: GO 59924
59504: LD_INT 3
59506: DOUBLE
59507: EQUAL
59508: IFTRUE 59512
59510: GO 59645
59512: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59513: LD_ADDR_VAR 0 5
59517: PUSH
59518: LD_VAR 0 1
59522: PUSH
59523: LD_INT 3
59525: PLUS
59526: PUSH
59527: LD_VAR 0 2
59531: PUSH
59532: LD_INT 4
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: PUSH
59540: LD_VAR 0 1
59544: PUSH
59545: LD_INT 4
59547: PLUS
59548: PUSH
59549: LD_VAR 0 2
59553: PUSH
59554: LD_INT 4
59556: PLUS
59557: PUSH
59558: LD_INT 5
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: LIST
59565: PUSH
59566: LD_VAR 0 1
59570: PUSH
59571: LD_INT 4
59573: MINUS
59574: PUSH
59575: LD_VAR 0 2
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: PUSH
59588: LD_VAR 0 1
59592: PUSH
59593: LD_VAR 0 2
59597: PUSH
59598: LD_INT 4
59600: MINUS
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: LIST
59609: PUSH
59610: LD_VAR 0 1
59614: PUSH
59615: LD_INT 3
59617: MINUS
59618: PUSH
59619: LD_VAR 0 2
59623: PUSH
59624: LD_INT 3
59626: MINUS
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: ST_TO_ADDR
// end ; 4 :
59643: GO 59924
59645: LD_INT 4
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59653
59651: GO 59786
59653: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59654: LD_ADDR_VAR 0 5
59658: PUSH
59659: LD_VAR 0 1
59663: PUSH
59664: LD_VAR 0 2
59668: PUSH
59669: LD_INT 4
59671: PLUS
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: LIST
59680: PUSH
59681: LD_VAR 0 1
59685: PUSH
59686: LD_INT 3
59688: PLUS
59689: PUSH
59690: LD_VAR 0 2
59694: PUSH
59695: LD_INT 3
59697: PLUS
59698: PUSH
59699: LD_INT 5
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: PUSH
59707: LD_VAR 0 1
59711: PUSH
59712: LD_INT 4
59714: PLUS
59715: PUSH
59716: LD_VAR 0 2
59720: PUSH
59721: LD_INT 4
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: PUSH
59729: LD_VAR 0 1
59733: PUSH
59734: LD_VAR 0 2
59738: PUSH
59739: LD_INT 3
59741: MINUS
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: PUSH
59751: LD_VAR 0 1
59755: PUSH
59756: LD_INT 4
59758: MINUS
59759: PUSH
59760: LD_VAR 0 2
59764: PUSH
59765: LD_INT 4
59767: MINUS
59768: PUSH
59769: LD_INT 2
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: ST_TO_ADDR
// end ; 5 :
59784: GO 59924
59786: LD_INT 5
59788: DOUBLE
59789: EQUAL
59790: IFTRUE 59794
59792: GO 59923
59794: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59795: LD_ADDR_VAR 0 5
59799: PUSH
59800: LD_VAR 0 1
59804: PUSH
59805: LD_INT 4
59807: MINUS
59808: PUSH
59809: LD_VAR 0 2
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: PUSH
59822: LD_VAR 0 1
59826: PUSH
59827: LD_VAR 0 2
59831: PUSH
59832: LD_INT 4
59834: MINUS
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: PUSH
59844: LD_VAR 0 1
59848: PUSH
59849: LD_INT 4
59851: PLUS
59852: PUSH
59853: LD_VAR 0 2
59857: PUSH
59858: LD_INT 4
59860: PLUS
59861: PUSH
59862: LD_INT 5
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: PUSH
59870: LD_VAR 0 1
59874: PUSH
59875: LD_INT 3
59877: PLUS
59878: PUSH
59879: LD_VAR 0 2
59883: PUSH
59884: LD_INT 4
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: LIST
59891: PUSH
59892: LD_VAR 0 1
59896: PUSH
59897: LD_VAR 0 2
59901: PUSH
59902: LD_INT 3
59904: PLUS
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: LIST
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: ST_TO_ADDR
// end ; end ;
59921: GO 59924
59923: POP
// result := list ;
59924: LD_ADDR_VAR 0 4
59928: PUSH
59929: LD_VAR 0 5
59933: ST_TO_ADDR
// end ;
59934: LD_VAR 0 4
59938: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59939: LD_INT 0
59941: PPUSH
59942: PPUSH
59943: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59944: LD_VAR 0 1
59948: NOT
59949: PUSH
59950: LD_VAR 0 2
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: LD_INT 2
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: LD_INT 4
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: IN
59973: NOT
59974: OR
59975: IFFALSE 59979
// exit ;
59977: GO 60071
// tmp := [ ] ;
59979: LD_ADDR_VAR 0 5
59983: PUSH
59984: EMPTY
59985: ST_TO_ADDR
// for i in units do
59986: LD_ADDR_VAR 0 4
59990: PUSH
59991: LD_VAR 0 1
59995: PUSH
59996: FOR_IN
59997: IFFALSE 60040
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59999: LD_ADDR_VAR 0 5
60003: PUSH
60004: LD_VAR 0 5
60008: PPUSH
60009: LD_VAR 0 5
60013: PUSH
60014: LD_INT 1
60016: PLUS
60017: PPUSH
60018: LD_VAR 0 4
60022: PPUSH
60023: LD_VAR 0 2
60027: PPUSH
60028: CALL_OW 259
60032: PPUSH
60033: CALL_OW 2
60037: ST_TO_ADDR
60038: GO 59996
60040: POP
60041: POP
// if not tmp then
60042: LD_VAR 0 5
60046: NOT
60047: IFFALSE 60051
// exit ;
60049: GO 60071
// result := SortListByListDesc ( units , tmp ) ;
60051: LD_ADDR_VAR 0 3
60055: PUSH
60056: LD_VAR 0 1
60060: PPUSH
60061: LD_VAR 0 5
60065: PPUSH
60066: CALL_OW 77
60070: ST_TO_ADDR
// end ;
60071: LD_VAR 0 3
60075: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60076: LD_INT 0
60078: PPUSH
60079: PPUSH
60080: PPUSH
// result := false ;
60081: LD_ADDR_VAR 0 3
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// x := GetX ( building ) ;
60089: LD_ADDR_VAR 0 4
60093: PUSH
60094: LD_VAR 0 2
60098: PPUSH
60099: CALL_OW 250
60103: ST_TO_ADDR
// y := GetY ( building ) ;
60104: LD_ADDR_VAR 0 5
60108: PUSH
60109: LD_VAR 0 2
60113: PPUSH
60114: CALL_OW 251
60118: ST_TO_ADDR
// if not building or not x or not y then
60119: LD_VAR 0 2
60123: NOT
60124: PUSH
60125: LD_VAR 0 4
60129: NOT
60130: OR
60131: PUSH
60132: LD_VAR 0 5
60136: NOT
60137: OR
60138: IFFALSE 60142
// exit ;
60140: GO 60234
// if GetTaskList ( unit ) then
60142: LD_VAR 0 1
60146: PPUSH
60147: CALL_OW 437
60151: IFFALSE 60234
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60153: LD_STRING e
60155: PUSH
60156: LD_VAR 0 1
60160: PPUSH
60161: CALL_OW 437
60165: PUSH
60166: LD_INT 1
60168: ARRAY
60169: PUSH
60170: LD_INT 1
60172: ARRAY
60173: EQUAL
60174: PUSH
60175: LD_VAR 0 4
60179: PUSH
60180: LD_VAR 0 1
60184: PPUSH
60185: CALL_OW 437
60189: PUSH
60190: LD_INT 1
60192: ARRAY
60193: PUSH
60194: LD_INT 2
60196: ARRAY
60197: EQUAL
60198: AND
60199: PUSH
60200: LD_VAR 0 5
60204: PUSH
60205: LD_VAR 0 1
60209: PPUSH
60210: CALL_OW 437
60214: PUSH
60215: LD_INT 1
60217: ARRAY
60218: PUSH
60219: LD_INT 3
60221: ARRAY
60222: EQUAL
60223: AND
60224: IFFALSE 60234
// result := true end ;
60226: LD_ADDR_VAR 0 3
60230: PUSH
60231: LD_INT 1
60233: ST_TO_ADDR
// end ;
60234: LD_VAR 0 3
60238: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60239: LD_INT 0
60241: PPUSH
// result := false ;
60242: LD_ADDR_VAR 0 4
60246: PUSH
60247: LD_INT 0
60249: ST_TO_ADDR
// if GetTaskList ( unit ) then
60250: LD_VAR 0 1
60254: PPUSH
60255: CALL_OW 437
60259: IFFALSE 60342
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60261: LD_STRING M
60263: PUSH
60264: LD_VAR 0 1
60268: PPUSH
60269: CALL_OW 437
60273: PUSH
60274: LD_INT 1
60276: ARRAY
60277: PUSH
60278: LD_INT 1
60280: ARRAY
60281: EQUAL
60282: PUSH
60283: LD_VAR 0 2
60287: PUSH
60288: LD_VAR 0 1
60292: PPUSH
60293: CALL_OW 437
60297: PUSH
60298: LD_INT 1
60300: ARRAY
60301: PUSH
60302: LD_INT 2
60304: ARRAY
60305: EQUAL
60306: AND
60307: PUSH
60308: LD_VAR 0 3
60312: PUSH
60313: LD_VAR 0 1
60317: PPUSH
60318: CALL_OW 437
60322: PUSH
60323: LD_INT 1
60325: ARRAY
60326: PUSH
60327: LD_INT 3
60329: ARRAY
60330: EQUAL
60331: AND
60332: IFFALSE 60342
// result := true ;
60334: LD_ADDR_VAR 0 4
60338: PUSH
60339: LD_INT 1
60341: ST_TO_ADDR
// end ; end ;
60342: LD_VAR 0 4
60346: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60347: LD_INT 0
60349: PPUSH
60350: PPUSH
60351: PPUSH
60352: PPUSH
// if not unit or not area then
60353: LD_VAR 0 1
60357: NOT
60358: PUSH
60359: LD_VAR 0 2
60363: NOT
60364: OR
60365: IFFALSE 60369
// exit ;
60367: GO 60533
// tmp := AreaToList ( area , i ) ;
60369: LD_ADDR_VAR 0 6
60373: PUSH
60374: LD_VAR 0 2
60378: PPUSH
60379: LD_VAR 0 5
60383: PPUSH
60384: CALL_OW 517
60388: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60389: LD_ADDR_VAR 0 5
60393: PUSH
60394: DOUBLE
60395: LD_INT 1
60397: DEC
60398: ST_TO_ADDR
60399: LD_VAR 0 6
60403: PUSH
60404: LD_INT 1
60406: ARRAY
60407: PUSH
60408: FOR_TO
60409: IFFALSE 60531
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60411: LD_ADDR_VAR 0 7
60415: PUSH
60416: LD_VAR 0 6
60420: PUSH
60421: LD_INT 1
60423: ARRAY
60424: PUSH
60425: LD_VAR 0 5
60429: ARRAY
60430: PUSH
60431: LD_VAR 0 6
60435: PUSH
60436: LD_INT 2
60438: ARRAY
60439: PUSH
60440: LD_VAR 0 5
60444: ARRAY
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60450: LD_VAR 0 7
60454: PUSH
60455: LD_INT 1
60457: ARRAY
60458: PPUSH
60459: LD_VAR 0 7
60463: PUSH
60464: LD_INT 2
60466: ARRAY
60467: PPUSH
60468: CALL_OW 428
60472: PUSH
60473: LD_INT 0
60475: EQUAL
60476: IFFALSE 60529
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60478: LD_VAR 0 1
60482: PPUSH
60483: LD_VAR 0 7
60487: PUSH
60488: LD_INT 1
60490: ARRAY
60491: PPUSH
60492: LD_VAR 0 7
60496: PUSH
60497: LD_INT 2
60499: ARRAY
60500: PPUSH
60501: LD_VAR 0 3
60505: PPUSH
60506: CALL_OW 48
// result := IsPlaced ( unit ) ;
60510: LD_ADDR_VAR 0 4
60514: PUSH
60515: LD_VAR 0 1
60519: PPUSH
60520: CALL_OW 305
60524: ST_TO_ADDR
// exit ;
60525: POP
60526: POP
60527: GO 60533
// end ; end ;
60529: GO 60408
60531: POP
60532: POP
// end ;
60533: LD_VAR 0 4
60537: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60538: LD_INT 0
60540: PPUSH
60541: PPUSH
60542: PPUSH
// if not side or side > 8 then
60543: LD_VAR 0 1
60547: NOT
60548: PUSH
60549: LD_VAR 0 1
60553: PUSH
60554: LD_INT 8
60556: GREATER
60557: OR
60558: IFFALSE 60562
// exit ;
60560: GO 60749
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60562: LD_ADDR_VAR 0 4
60566: PUSH
60567: LD_INT 22
60569: PUSH
60570: LD_VAR 0 1
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 21
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PPUSH
60593: CALL_OW 69
60597: ST_TO_ADDR
// if not tmp then
60598: LD_VAR 0 4
60602: NOT
60603: IFFALSE 60607
// exit ;
60605: GO 60749
// enable_addtolog := true ;
60607: LD_ADDR_OWVAR 81
60611: PUSH
60612: LD_INT 1
60614: ST_TO_ADDR
// AddToLog ( [ ) ;
60615: LD_STRING [
60617: PPUSH
60618: CALL_OW 561
// for i in tmp do
60622: LD_ADDR_VAR 0 3
60626: PUSH
60627: LD_VAR 0 4
60631: PUSH
60632: FOR_IN
60633: IFFALSE 60740
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60635: LD_STRING [
60637: PUSH
60638: LD_VAR 0 3
60642: PPUSH
60643: CALL_OW 266
60647: STR
60648: PUSH
60649: LD_STRING , 
60651: STR
60652: PUSH
60653: LD_VAR 0 3
60657: PPUSH
60658: CALL_OW 250
60662: STR
60663: PUSH
60664: LD_STRING , 
60666: STR
60667: PUSH
60668: LD_VAR 0 3
60672: PPUSH
60673: CALL_OW 251
60677: STR
60678: PUSH
60679: LD_STRING , 
60681: STR
60682: PUSH
60683: LD_VAR 0 3
60687: PPUSH
60688: CALL_OW 254
60692: STR
60693: PUSH
60694: LD_STRING , 
60696: STR
60697: PUSH
60698: LD_VAR 0 3
60702: PPUSH
60703: LD_INT 1
60705: PPUSH
60706: CALL_OW 268
60710: STR
60711: PUSH
60712: LD_STRING , 
60714: STR
60715: PUSH
60716: LD_VAR 0 3
60720: PPUSH
60721: LD_INT 2
60723: PPUSH
60724: CALL_OW 268
60728: STR
60729: PUSH
60730: LD_STRING ],
60732: STR
60733: PPUSH
60734: CALL_OW 561
// end ;
60738: GO 60632
60740: POP
60741: POP
// AddToLog ( ]; ) ;
60742: LD_STRING ];
60744: PPUSH
60745: CALL_OW 561
// end ;
60749: LD_VAR 0 2
60753: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60754: LD_INT 0
60756: PPUSH
60757: PPUSH
60758: PPUSH
60759: PPUSH
60760: PPUSH
// if not area or not rate or not max then
60761: LD_VAR 0 1
60765: NOT
60766: PUSH
60767: LD_VAR 0 2
60771: NOT
60772: OR
60773: PUSH
60774: LD_VAR 0 4
60778: NOT
60779: OR
60780: IFFALSE 60784
// exit ;
60782: GO 60973
// while 1 do
60784: LD_INT 1
60786: IFFALSE 60973
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60788: LD_ADDR_VAR 0 9
60792: PUSH
60793: LD_VAR 0 1
60797: PPUSH
60798: LD_INT 1
60800: PPUSH
60801: CALL_OW 287
60805: PUSH
60806: LD_INT 10
60808: MUL
60809: ST_TO_ADDR
// r := rate / 10 ;
60810: LD_ADDR_VAR 0 7
60814: PUSH
60815: LD_VAR 0 2
60819: PUSH
60820: LD_INT 10
60822: DIVREAL
60823: ST_TO_ADDR
// time := 1 1$00 ;
60824: LD_ADDR_VAR 0 8
60828: PUSH
60829: LD_INT 2100
60831: ST_TO_ADDR
// if amount < min then
60832: LD_VAR 0 9
60836: PUSH
60837: LD_VAR 0 3
60841: LESS
60842: IFFALSE 60860
// r := r * 2 else
60844: LD_ADDR_VAR 0 7
60848: PUSH
60849: LD_VAR 0 7
60853: PUSH
60854: LD_INT 2
60856: MUL
60857: ST_TO_ADDR
60858: GO 60886
// if amount > max then
60860: LD_VAR 0 9
60864: PUSH
60865: LD_VAR 0 4
60869: GREATER
60870: IFFALSE 60886
// r := r / 2 ;
60872: LD_ADDR_VAR 0 7
60876: PUSH
60877: LD_VAR 0 7
60881: PUSH
60882: LD_INT 2
60884: DIVREAL
60885: ST_TO_ADDR
// time := time / r ;
60886: LD_ADDR_VAR 0 8
60890: PUSH
60891: LD_VAR 0 8
60895: PUSH
60896: LD_VAR 0 7
60900: DIVREAL
60901: ST_TO_ADDR
// if time < 0 then
60902: LD_VAR 0 8
60906: PUSH
60907: LD_INT 0
60909: LESS
60910: IFFALSE 60927
// time := time * - 1 ;
60912: LD_ADDR_VAR 0 8
60916: PUSH
60917: LD_VAR 0 8
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: MUL
60926: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60927: LD_VAR 0 8
60931: PUSH
60932: LD_INT 35
60934: PPUSH
60935: LD_INT 875
60937: PPUSH
60938: CALL_OW 12
60942: PLUS
60943: PPUSH
60944: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60948: LD_INT 1
60950: PPUSH
60951: LD_INT 5
60953: PPUSH
60954: CALL_OW 12
60958: PPUSH
60959: LD_VAR 0 1
60963: PPUSH
60964: LD_INT 1
60966: PPUSH
60967: CALL_OW 55
// end ;
60971: GO 60784
// end ;
60973: LD_VAR 0 5
60977: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60978: LD_INT 0
60980: PPUSH
60981: PPUSH
60982: PPUSH
60983: PPUSH
60984: PPUSH
60985: PPUSH
60986: PPUSH
60987: PPUSH
// if not turrets or not factories then
60988: LD_VAR 0 1
60992: NOT
60993: PUSH
60994: LD_VAR 0 2
60998: NOT
60999: OR
61000: IFFALSE 61004
// exit ;
61002: GO 61311
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61004: LD_ADDR_VAR 0 10
61008: PUSH
61009: LD_INT 5
61011: PUSH
61012: LD_INT 6
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: LD_INT 4
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: LD_INT 5
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 24
61046: PUSH
61047: LD_INT 25
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 23
61056: PUSH
61057: LD_INT 27
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 42
61070: PUSH
61071: LD_INT 43
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 44
61080: PUSH
61081: LD_INT 46
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 45
61090: PUSH
61091: LD_INT 47
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: LIST
61107: ST_TO_ADDR
// result := [ ] ;
61108: LD_ADDR_VAR 0 3
61112: PUSH
61113: EMPTY
61114: ST_TO_ADDR
// for i in turrets do
61115: LD_ADDR_VAR 0 4
61119: PUSH
61120: LD_VAR 0 1
61124: PUSH
61125: FOR_IN
61126: IFFALSE 61309
// begin nat := GetNation ( i ) ;
61128: LD_ADDR_VAR 0 7
61132: PUSH
61133: LD_VAR 0 4
61137: PPUSH
61138: CALL_OW 248
61142: ST_TO_ADDR
// weapon := 0 ;
61143: LD_ADDR_VAR 0 8
61147: PUSH
61148: LD_INT 0
61150: ST_TO_ADDR
// if not nat then
61151: LD_VAR 0 7
61155: NOT
61156: IFFALSE 61160
// continue ;
61158: GO 61125
// for j in list [ nat ] do
61160: LD_ADDR_VAR 0 5
61164: PUSH
61165: LD_VAR 0 10
61169: PUSH
61170: LD_VAR 0 7
61174: ARRAY
61175: PUSH
61176: FOR_IN
61177: IFFALSE 61218
// if GetBWeapon ( i ) = j [ 1 ] then
61179: LD_VAR 0 4
61183: PPUSH
61184: CALL_OW 269
61188: PUSH
61189: LD_VAR 0 5
61193: PUSH
61194: LD_INT 1
61196: ARRAY
61197: EQUAL
61198: IFFALSE 61216
// begin weapon := j [ 2 ] ;
61200: LD_ADDR_VAR 0 8
61204: PUSH
61205: LD_VAR 0 5
61209: PUSH
61210: LD_INT 2
61212: ARRAY
61213: ST_TO_ADDR
// break ;
61214: GO 61218
// end ;
61216: GO 61176
61218: POP
61219: POP
// if not weapon then
61220: LD_VAR 0 8
61224: NOT
61225: IFFALSE 61229
// continue ;
61227: GO 61125
// for k in factories do
61229: LD_ADDR_VAR 0 6
61233: PUSH
61234: LD_VAR 0 2
61238: PUSH
61239: FOR_IN
61240: IFFALSE 61305
// begin weapons := AvailableWeaponList ( k ) ;
61242: LD_ADDR_VAR 0 9
61246: PUSH
61247: LD_VAR 0 6
61251: PPUSH
61252: CALL_OW 478
61256: ST_TO_ADDR
// if not weapons then
61257: LD_VAR 0 9
61261: NOT
61262: IFFALSE 61266
// continue ;
61264: GO 61239
// if weapon in weapons then
61266: LD_VAR 0 8
61270: PUSH
61271: LD_VAR 0 9
61275: IN
61276: IFFALSE 61303
// begin result := [ i , weapon ] ;
61278: LD_ADDR_VAR 0 3
61282: PUSH
61283: LD_VAR 0 4
61287: PUSH
61288: LD_VAR 0 8
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: ST_TO_ADDR
// exit ;
61297: POP
61298: POP
61299: POP
61300: POP
61301: GO 61311
// end ; end ;
61303: GO 61239
61305: POP
61306: POP
// end ;
61307: GO 61125
61309: POP
61310: POP
// end ;
61311: LD_VAR 0 3
61315: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61316: LD_INT 0
61318: PPUSH
// if not side or side > 8 then
61319: LD_VAR 0 3
61323: NOT
61324: PUSH
61325: LD_VAR 0 3
61329: PUSH
61330: LD_INT 8
61332: GREATER
61333: OR
61334: IFFALSE 61338
// exit ;
61336: GO 61397
// if not range then
61338: LD_VAR 0 4
61342: NOT
61343: IFFALSE 61354
// range := - 12 ;
61345: LD_ADDR_VAR 0 4
61349: PUSH
61350: LD_INT 12
61352: NEG
61353: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61354: LD_VAR 0 1
61358: PPUSH
61359: LD_VAR 0 2
61363: PPUSH
61364: LD_VAR 0 3
61368: PPUSH
61369: LD_VAR 0 4
61373: PPUSH
61374: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61378: LD_VAR 0 1
61382: PPUSH
61383: LD_VAR 0 2
61387: PPUSH
61388: LD_VAR 0 3
61392: PPUSH
61393: CALL_OW 331
// end ;
61397: LD_VAR 0 5
61401: RET
// export function Video ( mode ) ; begin
61402: LD_INT 0
61404: PPUSH
// ingame_video = mode ;
61405: LD_ADDR_OWVAR 52
61409: PUSH
61410: LD_VAR 0 1
61414: ST_TO_ADDR
// interface_hidden = mode ;
61415: LD_ADDR_OWVAR 54
61419: PUSH
61420: LD_VAR 0 1
61424: ST_TO_ADDR
// end ;
61425: LD_VAR 0 2
61429: RET
// export function Join ( array , element ) ; begin
61430: LD_INT 0
61432: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61433: LD_ADDR_VAR 0 3
61437: PUSH
61438: LD_VAR 0 1
61442: PPUSH
61443: LD_VAR 0 1
61447: PUSH
61448: LD_INT 1
61450: PLUS
61451: PPUSH
61452: LD_VAR 0 2
61456: PPUSH
61457: CALL_OW 1
61461: ST_TO_ADDR
// end ;
61462: LD_VAR 0 3
61466: RET
// export function JoinUnion ( array , element ) ; begin
61467: LD_INT 0
61469: PPUSH
// result := array union element ;
61470: LD_ADDR_VAR 0 3
61474: PUSH
61475: LD_VAR 0 1
61479: PUSH
61480: LD_VAR 0 2
61484: UNION
61485: ST_TO_ADDR
// end ;
61486: LD_VAR 0 3
61490: RET
// export function GetBehemoths ( side ) ; begin
61491: LD_INT 0
61493: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61494: LD_ADDR_VAR 0 2
61498: PUSH
61499: LD_INT 22
61501: PUSH
61502: LD_VAR 0 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 31
61513: PUSH
61514: LD_INT 25
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PPUSH
61525: CALL_OW 69
61529: ST_TO_ADDR
// end ;
61530: LD_VAR 0 2
61534: RET
// export function Shuffle ( array ) ; var i , index ; begin
61535: LD_INT 0
61537: PPUSH
61538: PPUSH
61539: PPUSH
// result := [ ] ;
61540: LD_ADDR_VAR 0 2
61544: PUSH
61545: EMPTY
61546: ST_TO_ADDR
// if not array then
61547: LD_VAR 0 1
61551: NOT
61552: IFFALSE 61556
// exit ;
61554: GO 61655
// Randomize ;
61556: CALL_OW 10
// for i = array downto 1 do
61560: LD_ADDR_VAR 0 3
61564: PUSH
61565: DOUBLE
61566: LD_VAR 0 1
61570: INC
61571: ST_TO_ADDR
61572: LD_INT 1
61574: PUSH
61575: FOR_DOWNTO
61576: IFFALSE 61653
// begin index := rand ( 1 , array ) ;
61578: LD_ADDR_VAR 0 4
61582: PUSH
61583: LD_INT 1
61585: PPUSH
61586: LD_VAR 0 1
61590: PPUSH
61591: CALL_OW 12
61595: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61596: LD_ADDR_VAR 0 2
61600: PUSH
61601: LD_VAR 0 2
61605: PPUSH
61606: LD_VAR 0 2
61610: PUSH
61611: LD_INT 1
61613: PLUS
61614: PPUSH
61615: LD_VAR 0 1
61619: PUSH
61620: LD_VAR 0 4
61624: ARRAY
61625: PPUSH
61626: CALL_OW 2
61630: ST_TO_ADDR
// array := Delete ( array , index ) ;
61631: LD_ADDR_VAR 0 1
61635: PUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: LD_VAR 0 4
61645: PPUSH
61646: CALL_OW 3
61650: ST_TO_ADDR
// end ;
61651: GO 61575
61653: POP
61654: POP
// end ;
61655: LD_VAR 0 2
61659: RET
// export function GetBaseMaterials ( base ) ; begin
61660: LD_INT 0
61662: PPUSH
// result := [ 0 , 0 , 0 ] ;
61663: LD_ADDR_VAR 0 2
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: ST_TO_ADDR
// if not base then
61682: LD_VAR 0 1
61686: NOT
61687: IFFALSE 61691
// exit ;
61689: GO 61740
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61691: LD_ADDR_VAR 0 2
61695: PUSH
61696: LD_VAR 0 1
61700: PPUSH
61701: LD_INT 1
61703: PPUSH
61704: CALL_OW 275
61708: PUSH
61709: LD_VAR 0 1
61713: PPUSH
61714: LD_INT 2
61716: PPUSH
61717: CALL_OW 275
61721: PUSH
61722: LD_VAR 0 1
61726: PPUSH
61727: LD_INT 3
61729: PPUSH
61730: CALL_OW 275
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: ST_TO_ADDR
// end ;
61740: LD_VAR 0 2
61744: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61745: LD_INT 0
61747: PPUSH
61748: PPUSH
// result := array ;
61749: LD_ADDR_VAR 0 3
61753: PUSH
61754: LD_VAR 0 1
61758: ST_TO_ADDR
// if size >= result then
61759: LD_VAR 0 2
61763: PUSH
61764: LD_VAR 0 3
61768: GREATEREQUAL
61769: IFFALSE 61773
// exit ;
61771: GO 61823
// if size then
61773: LD_VAR 0 2
61777: IFFALSE 61823
// for i := array downto size do
61779: LD_ADDR_VAR 0 4
61783: PUSH
61784: DOUBLE
61785: LD_VAR 0 1
61789: INC
61790: ST_TO_ADDR
61791: LD_VAR 0 2
61795: PUSH
61796: FOR_DOWNTO
61797: IFFALSE 61821
// result := Delete ( result , result ) ;
61799: LD_ADDR_VAR 0 3
61803: PUSH
61804: LD_VAR 0 3
61808: PPUSH
61809: LD_VAR 0 3
61813: PPUSH
61814: CALL_OW 3
61818: ST_TO_ADDR
61819: GO 61796
61821: POP
61822: POP
// end ;
61823: LD_VAR 0 3
61827: RET
// export function ComExit ( unit ) ; var tmp ; begin
61828: LD_INT 0
61830: PPUSH
61831: PPUSH
// if not IsInUnit ( unit ) then
61832: LD_VAR 0 1
61836: PPUSH
61837: CALL_OW 310
61841: NOT
61842: IFFALSE 61846
// exit ;
61844: GO 61906
// tmp := IsInUnit ( unit ) ;
61846: LD_ADDR_VAR 0 3
61850: PUSH
61851: LD_VAR 0 1
61855: PPUSH
61856: CALL_OW 310
61860: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61861: LD_VAR 0 3
61865: PPUSH
61866: CALL_OW 247
61870: PUSH
61871: LD_INT 2
61873: EQUAL
61874: IFFALSE 61887
// ComExitVehicle ( unit ) else
61876: LD_VAR 0 1
61880: PPUSH
61881: CALL_OW 121
61885: GO 61896
// ComExitBuilding ( unit ) ;
61887: LD_VAR 0 1
61891: PPUSH
61892: CALL_OW 122
// result := tmp ;
61896: LD_ADDR_VAR 0 2
61900: PUSH
61901: LD_VAR 0 3
61905: ST_TO_ADDR
// end ;
61906: LD_VAR 0 2
61910: RET
// export function ComExitAll ( units ) ; var i ; begin
61911: LD_INT 0
61913: PPUSH
61914: PPUSH
// if not units then
61915: LD_VAR 0 1
61919: NOT
61920: IFFALSE 61924
// exit ;
61922: GO 61950
// for i in units do
61924: LD_ADDR_VAR 0 3
61928: PUSH
61929: LD_VAR 0 1
61933: PUSH
61934: FOR_IN
61935: IFFALSE 61948
// ComExit ( i ) ;
61937: LD_VAR 0 3
61941: PPUSH
61942: CALL 61828 0 1
61946: GO 61934
61948: POP
61949: POP
// end ;
61950: LD_VAR 0 2
61954: RET
// export function ResetHc ; begin
61955: LD_INT 0
61957: PPUSH
// InitHc ;
61958: CALL_OW 19
// hc_importance := 0 ;
61962: LD_ADDR_OWVAR 32
61966: PUSH
61967: LD_INT 0
61969: ST_TO_ADDR
// end ;
61970: LD_VAR 0 1
61974: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61975: LD_INT 0
61977: PPUSH
61978: PPUSH
61979: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61980: LD_ADDR_VAR 0 6
61984: PUSH
61985: LD_VAR 0 1
61989: PUSH
61990: LD_VAR 0 3
61994: PLUS
61995: PUSH
61996: LD_INT 2
61998: DIV
61999: ST_TO_ADDR
// if _x < 0 then
62000: LD_VAR 0 6
62004: PUSH
62005: LD_INT 0
62007: LESS
62008: IFFALSE 62025
// _x := _x * - 1 ;
62010: LD_ADDR_VAR 0 6
62014: PUSH
62015: LD_VAR 0 6
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: MUL
62024: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62025: LD_ADDR_VAR 0 7
62029: PUSH
62030: LD_VAR 0 2
62034: PUSH
62035: LD_VAR 0 4
62039: PLUS
62040: PUSH
62041: LD_INT 2
62043: DIV
62044: ST_TO_ADDR
// if _y < 0 then
62045: LD_VAR 0 7
62049: PUSH
62050: LD_INT 0
62052: LESS
62053: IFFALSE 62070
// _y := _y * - 1 ;
62055: LD_ADDR_VAR 0 7
62059: PUSH
62060: LD_VAR 0 7
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: MUL
62069: ST_TO_ADDR
// result := [ _x , _y ] ;
62070: LD_ADDR_VAR 0 5
62074: PUSH
62075: LD_VAR 0 6
62079: PUSH
62080: LD_VAR 0 7
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// end ;
62089: LD_VAR 0 5
62093: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62094: LD_INT 0
62096: PPUSH
62097: PPUSH
62098: PPUSH
62099: PPUSH
// task := GetTaskList ( unit ) ;
62100: LD_ADDR_VAR 0 7
62104: PUSH
62105: LD_VAR 0 1
62109: PPUSH
62110: CALL_OW 437
62114: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62115: LD_VAR 0 7
62119: NOT
62120: PUSH
62121: LD_VAR 0 1
62125: PPUSH
62126: LD_VAR 0 2
62130: PPUSH
62131: CALL_OW 308
62135: NOT
62136: AND
62137: IFFALSE 62141
// exit ;
62139: GO 62259
// if IsInArea ( unit , area ) then
62141: LD_VAR 0 1
62145: PPUSH
62146: LD_VAR 0 2
62150: PPUSH
62151: CALL_OW 308
62155: IFFALSE 62173
// begin ComMoveToArea ( unit , goAway ) ;
62157: LD_VAR 0 1
62161: PPUSH
62162: LD_VAR 0 3
62166: PPUSH
62167: CALL_OW 113
// exit ;
62171: GO 62259
// end ; if task [ 1 ] [ 1 ] <> M then
62173: LD_VAR 0 7
62177: PUSH
62178: LD_INT 1
62180: ARRAY
62181: PUSH
62182: LD_INT 1
62184: ARRAY
62185: PUSH
62186: LD_STRING M
62188: NONEQUAL
62189: IFFALSE 62193
// exit ;
62191: GO 62259
// x := task [ 1 ] [ 2 ] ;
62193: LD_ADDR_VAR 0 5
62197: PUSH
62198: LD_VAR 0 7
62202: PUSH
62203: LD_INT 1
62205: ARRAY
62206: PUSH
62207: LD_INT 2
62209: ARRAY
62210: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62211: LD_ADDR_VAR 0 6
62215: PUSH
62216: LD_VAR 0 7
62220: PUSH
62221: LD_INT 1
62223: ARRAY
62224: PUSH
62225: LD_INT 3
62227: ARRAY
62228: ST_TO_ADDR
// if InArea ( x , y , area ) then
62229: LD_VAR 0 5
62233: PPUSH
62234: LD_VAR 0 6
62238: PPUSH
62239: LD_VAR 0 2
62243: PPUSH
62244: CALL_OW 309
62248: IFFALSE 62259
// ComStop ( unit ) ;
62250: LD_VAR 0 1
62254: PPUSH
62255: CALL_OW 141
// end ;
62259: LD_VAR 0 4
62263: RET
// export function Abs ( value ) ; begin
62264: LD_INT 0
62266: PPUSH
// result := value ;
62267: LD_ADDR_VAR 0 2
62271: PUSH
62272: LD_VAR 0 1
62276: ST_TO_ADDR
// if value < 0 then
62277: LD_VAR 0 1
62281: PUSH
62282: LD_INT 0
62284: LESS
62285: IFFALSE 62302
// result := value * - 1 ;
62287: LD_ADDR_VAR 0 2
62291: PUSH
62292: LD_VAR 0 1
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: MUL
62301: ST_TO_ADDR
// end ;
62302: LD_VAR 0 2
62306: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62307: LD_INT 0
62309: PPUSH
62310: PPUSH
62311: PPUSH
62312: PPUSH
62313: PPUSH
62314: PPUSH
62315: PPUSH
62316: PPUSH
// if not unit or not building then
62317: LD_VAR 0 1
62321: NOT
62322: PUSH
62323: LD_VAR 0 2
62327: NOT
62328: OR
62329: IFFALSE 62333
// exit ;
62331: GO 62559
// x := GetX ( building ) ;
62333: LD_ADDR_VAR 0 4
62337: PUSH
62338: LD_VAR 0 2
62342: PPUSH
62343: CALL_OW 250
62347: ST_TO_ADDR
// y := GetY ( building ) ;
62348: LD_ADDR_VAR 0 6
62352: PUSH
62353: LD_VAR 0 2
62357: PPUSH
62358: CALL_OW 251
62362: ST_TO_ADDR
// d := GetDir ( building ) ;
62363: LD_ADDR_VAR 0 8
62367: PUSH
62368: LD_VAR 0 2
62372: PPUSH
62373: CALL_OW 254
62377: ST_TO_ADDR
// r := 4 ;
62378: LD_ADDR_VAR 0 9
62382: PUSH
62383: LD_INT 4
62385: ST_TO_ADDR
// for i := 1 to 5 do
62386: LD_ADDR_VAR 0 10
62390: PUSH
62391: DOUBLE
62392: LD_INT 1
62394: DEC
62395: ST_TO_ADDR
62396: LD_INT 5
62398: PUSH
62399: FOR_TO
62400: IFFALSE 62557
// begin _x := ShiftX ( x , d , r + i ) ;
62402: LD_ADDR_VAR 0 5
62406: PUSH
62407: LD_VAR 0 4
62411: PPUSH
62412: LD_VAR 0 8
62416: PPUSH
62417: LD_VAR 0 9
62421: PUSH
62422: LD_VAR 0 10
62426: PLUS
62427: PPUSH
62428: CALL_OW 272
62432: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62433: LD_ADDR_VAR 0 7
62437: PUSH
62438: LD_VAR 0 6
62442: PPUSH
62443: LD_VAR 0 8
62447: PPUSH
62448: LD_VAR 0 9
62452: PUSH
62453: LD_VAR 0 10
62457: PLUS
62458: PPUSH
62459: CALL_OW 273
62463: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62464: LD_VAR 0 5
62468: PPUSH
62469: LD_VAR 0 7
62473: PPUSH
62474: CALL_OW 488
62478: PUSH
62479: LD_VAR 0 5
62483: PPUSH
62484: LD_VAR 0 7
62488: PPUSH
62489: CALL_OW 428
62493: PPUSH
62494: CALL_OW 247
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: IN
62509: NOT
62510: AND
62511: IFFALSE 62555
// begin ComMoveXY ( unit , _x , _y ) ;
62513: LD_VAR 0 1
62517: PPUSH
62518: LD_VAR 0 5
62522: PPUSH
62523: LD_VAR 0 7
62527: PPUSH
62528: CALL_OW 111
// result := [ _x , _y ] ;
62532: LD_ADDR_VAR 0 3
62536: PUSH
62537: LD_VAR 0 5
62541: PUSH
62542: LD_VAR 0 7
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: ST_TO_ADDR
// exit ;
62551: POP
62552: POP
62553: GO 62559
// end ; end ;
62555: GO 62399
62557: POP
62558: POP
// end ;
62559: LD_VAR 0 3
62563: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62564: LD_INT 0
62566: PPUSH
62567: PPUSH
62568: PPUSH
// result := 0 ;
62569: LD_ADDR_VAR 0 3
62573: PUSH
62574: LD_INT 0
62576: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62577: LD_VAR 0 1
62581: PUSH
62582: LD_INT 0
62584: LESS
62585: PUSH
62586: LD_VAR 0 1
62590: PUSH
62591: LD_INT 8
62593: GREATER
62594: OR
62595: PUSH
62596: LD_VAR 0 2
62600: PUSH
62601: LD_INT 0
62603: LESS
62604: OR
62605: PUSH
62606: LD_VAR 0 2
62610: PUSH
62611: LD_INT 8
62613: GREATER
62614: OR
62615: IFFALSE 62619
// exit ;
62617: GO 62694
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62619: LD_ADDR_VAR 0 4
62623: PUSH
62624: LD_INT 22
62626: PUSH
62627: LD_VAR 0 2
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PPUSH
62636: CALL_OW 69
62640: PUSH
62641: FOR_IN
62642: IFFALSE 62692
// begin un := UnitShoot ( i ) ;
62644: LD_ADDR_VAR 0 5
62648: PUSH
62649: LD_VAR 0 4
62653: PPUSH
62654: CALL_OW 504
62658: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62659: LD_VAR 0 5
62663: PPUSH
62664: CALL_OW 255
62668: PUSH
62669: LD_VAR 0 1
62673: EQUAL
62674: IFFALSE 62690
// begin result := un ;
62676: LD_ADDR_VAR 0 3
62680: PUSH
62681: LD_VAR 0 5
62685: ST_TO_ADDR
// exit ;
62686: POP
62687: POP
62688: GO 62694
// end ; end ;
62690: GO 62641
62692: POP
62693: POP
// end ;
62694: LD_VAR 0 3
62698: RET
// export function GetCargoBay ( units ) ; begin
62699: LD_INT 0
62701: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62702: LD_ADDR_VAR 0 2
62706: PUSH
62707: LD_VAR 0 1
62711: PPUSH
62712: LD_INT 2
62714: PUSH
62715: LD_INT 34
62717: PUSH
62718: LD_INT 12
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 34
62727: PUSH
62728: LD_INT 51
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 34
62737: PUSH
62738: LD_INT 32
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 34
62747: PUSH
62748: LD_INT 89
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: PPUSH
62762: CALL_OW 72
62766: ST_TO_ADDR
// end ;
62767: LD_VAR 0 2
62771: RET
// export function Negate ( value ) ; begin
62772: LD_INT 0
62774: PPUSH
// result := not value ;
62775: LD_ADDR_VAR 0 2
62779: PUSH
62780: LD_VAR 0 1
62784: NOT
62785: ST_TO_ADDR
// end ;
62786: LD_VAR 0 2
62790: RET
// export function Inc ( value ) ; begin
62791: LD_INT 0
62793: PPUSH
// result := value + 1 ;
62794: LD_ADDR_VAR 0 2
62798: PUSH
62799: LD_VAR 0 1
62803: PUSH
62804: LD_INT 1
62806: PLUS
62807: ST_TO_ADDR
// end ;
62808: LD_VAR 0 2
62812: RET
// export function Dec ( value ) ; begin
62813: LD_INT 0
62815: PPUSH
// result := value - 1 ;
62816: LD_ADDR_VAR 0 2
62820: PUSH
62821: LD_VAR 0 1
62825: PUSH
62826: LD_INT 1
62828: MINUS
62829: ST_TO_ADDR
// end ;
62830: LD_VAR 0 2
62834: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62835: LD_INT 0
62837: PPUSH
62838: PPUSH
62839: PPUSH
62840: PPUSH
62841: PPUSH
62842: PPUSH
62843: PPUSH
62844: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62845: LD_VAR 0 1
62849: PPUSH
62850: LD_VAR 0 2
62854: PPUSH
62855: CALL_OW 488
62859: NOT
62860: PUSH
62861: LD_VAR 0 3
62865: PPUSH
62866: LD_VAR 0 4
62870: PPUSH
62871: CALL_OW 488
62875: NOT
62876: OR
62877: IFFALSE 62890
// begin result := - 1 ;
62879: LD_ADDR_VAR 0 5
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: ST_TO_ADDR
// exit ;
62888: GO 63125
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62890: LD_ADDR_VAR 0 12
62894: PUSH
62895: LD_VAR 0 1
62899: PPUSH
62900: LD_VAR 0 2
62904: PPUSH
62905: LD_VAR 0 3
62909: PPUSH
62910: LD_VAR 0 4
62914: PPUSH
62915: CALL 61975 0 4
62919: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62920: LD_ADDR_VAR 0 11
62924: PUSH
62925: LD_VAR 0 1
62929: PPUSH
62930: LD_VAR 0 2
62934: PPUSH
62935: LD_VAR 0 12
62939: PUSH
62940: LD_INT 1
62942: ARRAY
62943: PPUSH
62944: LD_VAR 0 12
62948: PUSH
62949: LD_INT 2
62951: ARRAY
62952: PPUSH
62953: CALL_OW 298
62957: ST_TO_ADDR
// distance := 9999 ;
62958: LD_ADDR_VAR 0 10
62962: PUSH
62963: LD_INT 9999
62965: ST_TO_ADDR
// for i := 0 to 5 do
62966: LD_ADDR_VAR 0 6
62970: PUSH
62971: DOUBLE
62972: LD_INT 0
62974: DEC
62975: ST_TO_ADDR
62976: LD_INT 5
62978: PUSH
62979: FOR_TO
62980: IFFALSE 63123
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62982: LD_ADDR_VAR 0 7
62986: PUSH
62987: LD_VAR 0 1
62991: PPUSH
62992: LD_VAR 0 6
62996: PPUSH
62997: LD_VAR 0 11
63001: PPUSH
63002: CALL_OW 272
63006: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63007: LD_ADDR_VAR 0 8
63011: PUSH
63012: LD_VAR 0 2
63016: PPUSH
63017: LD_VAR 0 6
63021: PPUSH
63022: LD_VAR 0 11
63026: PPUSH
63027: CALL_OW 273
63031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63032: LD_VAR 0 7
63036: PPUSH
63037: LD_VAR 0 8
63041: PPUSH
63042: CALL_OW 488
63046: NOT
63047: IFFALSE 63051
// continue ;
63049: GO 62979
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63051: LD_ADDR_VAR 0 9
63055: PUSH
63056: LD_VAR 0 12
63060: PUSH
63061: LD_INT 1
63063: ARRAY
63064: PPUSH
63065: LD_VAR 0 12
63069: PUSH
63070: LD_INT 2
63072: ARRAY
63073: PPUSH
63074: LD_VAR 0 7
63078: PPUSH
63079: LD_VAR 0 8
63083: PPUSH
63084: CALL_OW 298
63088: ST_TO_ADDR
// if tmp < distance then
63089: LD_VAR 0 9
63093: PUSH
63094: LD_VAR 0 10
63098: LESS
63099: IFFALSE 63121
// begin result := i ;
63101: LD_ADDR_VAR 0 5
63105: PUSH
63106: LD_VAR 0 6
63110: ST_TO_ADDR
// distance := tmp ;
63111: LD_ADDR_VAR 0 10
63115: PUSH
63116: LD_VAR 0 9
63120: ST_TO_ADDR
// end ; end ;
63121: GO 62979
63123: POP
63124: POP
// end ;
63125: LD_VAR 0 5
63129: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63130: LD_INT 0
63132: PPUSH
63133: PPUSH
// if not driver or not IsInUnit ( driver ) then
63134: LD_VAR 0 1
63138: NOT
63139: PUSH
63140: LD_VAR 0 1
63144: PPUSH
63145: CALL_OW 310
63149: NOT
63150: OR
63151: IFFALSE 63155
// exit ;
63153: GO 63245
// vehicle := IsInUnit ( driver ) ;
63155: LD_ADDR_VAR 0 3
63159: PUSH
63160: LD_VAR 0 1
63164: PPUSH
63165: CALL_OW 310
63169: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63170: LD_VAR 0 1
63174: PPUSH
63175: LD_STRING \
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: PUSH
63205: LD_STRING E
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_VAR 0 3
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PPUSH
63241: CALL_OW 446
// end ;
63245: LD_VAR 0 2
63249: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63250: LD_INT 0
63252: PPUSH
63253: PPUSH
// if not driver or not IsInUnit ( driver ) then
63254: LD_VAR 0 1
63258: NOT
63259: PUSH
63260: LD_VAR 0 1
63264: PPUSH
63265: CALL_OW 310
63269: NOT
63270: OR
63271: IFFALSE 63275
// exit ;
63273: GO 63365
// vehicle := IsInUnit ( driver ) ;
63275: LD_ADDR_VAR 0 3
63279: PUSH
63280: LD_VAR 0 1
63284: PPUSH
63285: CALL_OW 310
63289: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63290: LD_VAR 0 1
63294: PPUSH
63295: LD_STRING \
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: PUSH
63325: LD_STRING E
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_VAR 0 3
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PPUSH
63361: CALL_OW 447
// end ;
63365: LD_VAR 0 2
63369: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63370: LD_INT 0
63372: PPUSH
63373: PPUSH
63374: PPUSH
// tmp := [ ] ;
63375: LD_ADDR_VAR 0 5
63379: PUSH
63380: EMPTY
63381: ST_TO_ADDR
// for i in units do
63382: LD_ADDR_VAR 0 4
63386: PUSH
63387: LD_VAR 0 1
63391: PUSH
63392: FOR_IN
63393: IFFALSE 63431
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63395: LD_ADDR_VAR 0 5
63399: PUSH
63400: LD_VAR 0 5
63404: PPUSH
63405: LD_VAR 0 5
63409: PUSH
63410: LD_INT 1
63412: PLUS
63413: PPUSH
63414: LD_VAR 0 4
63418: PPUSH
63419: CALL_OW 256
63423: PPUSH
63424: CALL_OW 2
63428: ST_TO_ADDR
63429: GO 63392
63431: POP
63432: POP
// if not tmp then
63433: LD_VAR 0 5
63437: NOT
63438: IFFALSE 63442
// exit ;
63440: GO 63490
// if asc then
63442: LD_VAR 0 2
63446: IFFALSE 63470
// result := SortListByListAsc ( units , tmp ) else
63448: LD_ADDR_VAR 0 3
63452: PUSH
63453: LD_VAR 0 1
63457: PPUSH
63458: LD_VAR 0 5
63462: PPUSH
63463: CALL_OW 76
63467: ST_TO_ADDR
63468: GO 63490
// result := SortListByListDesc ( units , tmp ) ;
63470: LD_ADDR_VAR 0 3
63474: PUSH
63475: LD_VAR 0 1
63479: PPUSH
63480: LD_VAR 0 5
63484: PPUSH
63485: CALL_OW 77
63489: ST_TO_ADDR
// end ;
63490: LD_VAR 0 3
63494: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63495: LD_INT 0
63497: PPUSH
63498: PPUSH
// task := GetTaskList ( mech ) ;
63499: LD_ADDR_VAR 0 4
63503: PUSH
63504: LD_VAR 0 1
63508: PPUSH
63509: CALL_OW 437
63513: ST_TO_ADDR
// if not task then
63514: LD_VAR 0 4
63518: NOT
63519: IFFALSE 63523
// exit ;
63521: GO 63565
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63523: LD_ADDR_VAR 0 3
63527: PUSH
63528: LD_VAR 0 4
63532: PUSH
63533: LD_INT 1
63535: ARRAY
63536: PUSH
63537: LD_INT 1
63539: ARRAY
63540: PUSH
63541: LD_STRING r
63543: EQUAL
63544: PUSH
63545: LD_VAR 0 4
63549: PUSH
63550: LD_INT 1
63552: ARRAY
63553: PUSH
63554: LD_INT 4
63556: ARRAY
63557: PUSH
63558: LD_VAR 0 2
63562: EQUAL
63563: AND
63564: ST_TO_ADDR
// end ;
63565: LD_VAR 0 3
63569: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63570: LD_INT 0
63572: PPUSH
// SetDir ( unit , d ) ;
63573: LD_VAR 0 1
63577: PPUSH
63578: LD_VAR 0 4
63582: PPUSH
63583: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63587: LD_VAR 0 1
63591: PPUSH
63592: LD_VAR 0 2
63596: PPUSH
63597: LD_VAR 0 3
63601: PPUSH
63602: LD_VAR 0 5
63606: PPUSH
63607: CALL_OW 48
// end ;
63611: LD_VAR 0 6
63615: RET
// export function ToNaturalNumber ( number ) ; begin
63616: LD_INT 0
63618: PPUSH
// result := number div 1 ;
63619: LD_ADDR_VAR 0 2
63623: PUSH
63624: LD_VAR 0 1
63628: PUSH
63629: LD_INT 1
63631: DIV
63632: ST_TO_ADDR
// if number < 0 then
63633: LD_VAR 0 1
63637: PUSH
63638: LD_INT 0
63640: LESS
63641: IFFALSE 63651
// result := 0 ;
63643: LD_ADDR_VAR 0 2
63647: PUSH
63648: LD_INT 0
63650: ST_TO_ADDR
// end ;
63651: LD_VAR 0 2
63655: RET
// export function SortByClass ( units , class ) ; var un ; begin
63656: LD_INT 0
63658: PPUSH
63659: PPUSH
// if not units or not class then
63660: LD_VAR 0 1
63664: NOT
63665: PUSH
63666: LD_VAR 0 2
63670: NOT
63671: OR
63672: IFFALSE 63676
// exit ;
63674: GO 63771
// result := [ ] ;
63676: LD_ADDR_VAR 0 3
63680: PUSH
63681: EMPTY
63682: ST_TO_ADDR
// for un in units do
63683: LD_ADDR_VAR 0 4
63687: PUSH
63688: LD_VAR 0 1
63692: PUSH
63693: FOR_IN
63694: IFFALSE 63769
// if GetClass ( un ) = class then
63696: LD_VAR 0 4
63700: PPUSH
63701: CALL_OW 257
63705: PUSH
63706: LD_VAR 0 2
63710: EQUAL
63711: IFFALSE 63738
// result := Insert ( result , 1 , un ) else
63713: LD_ADDR_VAR 0 3
63717: PUSH
63718: LD_VAR 0 3
63722: PPUSH
63723: LD_INT 1
63725: PPUSH
63726: LD_VAR 0 4
63730: PPUSH
63731: CALL_OW 2
63735: ST_TO_ADDR
63736: GO 63767
// result := Replace ( result , result + 1 , un ) ;
63738: LD_ADDR_VAR 0 3
63742: PUSH
63743: LD_VAR 0 3
63747: PPUSH
63748: LD_VAR 0 3
63752: PUSH
63753: LD_INT 1
63755: PLUS
63756: PPUSH
63757: LD_VAR 0 4
63761: PPUSH
63762: CALL_OW 1
63766: ST_TO_ADDR
63767: GO 63693
63769: POP
63770: POP
// end ;
63771: LD_VAR 0 3
63775: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63776: LD_INT 0
63778: PPUSH
63779: PPUSH
63780: PPUSH
63781: PPUSH
63782: PPUSH
63783: PPUSH
63784: PPUSH
// result := [ ] ;
63785: LD_ADDR_VAR 0 4
63789: PUSH
63790: EMPTY
63791: ST_TO_ADDR
// if x - r < 0 then
63792: LD_VAR 0 1
63796: PUSH
63797: LD_VAR 0 3
63801: MINUS
63802: PUSH
63803: LD_INT 0
63805: LESS
63806: IFFALSE 63818
// min_x := 0 else
63808: LD_ADDR_VAR 0 8
63812: PUSH
63813: LD_INT 0
63815: ST_TO_ADDR
63816: GO 63834
// min_x := x - r ;
63818: LD_ADDR_VAR 0 8
63822: PUSH
63823: LD_VAR 0 1
63827: PUSH
63828: LD_VAR 0 3
63832: MINUS
63833: ST_TO_ADDR
// if y - r < 0 then
63834: LD_VAR 0 2
63838: PUSH
63839: LD_VAR 0 3
63843: MINUS
63844: PUSH
63845: LD_INT 0
63847: LESS
63848: IFFALSE 63860
// min_y := 0 else
63850: LD_ADDR_VAR 0 7
63854: PUSH
63855: LD_INT 0
63857: ST_TO_ADDR
63858: GO 63876
// min_y := y - r ;
63860: LD_ADDR_VAR 0 7
63864: PUSH
63865: LD_VAR 0 2
63869: PUSH
63870: LD_VAR 0 3
63874: MINUS
63875: ST_TO_ADDR
// max_x := x + r ;
63876: LD_ADDR_VAR 0 9
63880: PUSH
63881: LD_VAR 0 1
63885: PUSH
63886: LD_VAR 0 3
63890: PLUS
63891: ST_TO_ADDR
// max_y := y + r ;
63892: LD_ADDR_VAR 0 10
63896: PUSH
63897: LD_VAR 0 2
63901: PUSH
63902: LD_VAR 0 3
63906: PLUS
63907: ST_TO_ADDR
// for _x = min_x to max_x do
63908: LD_ADDR_VAR 0 5
63912: PUSH
63913: DOUBLE
63914: LD_VAR 0 8
63918: DEC
63919: ST_TO_ADDR
63920: LD_VAR 0 9
63924: PUSH
63925: FOR_TO
63926: IFFALSE 64027
// for _y = min_y to max_y do
63928: LD_ADDR_VAR 0 6
63932: PUSH
63933: DOUBLE
63934: LD_VAR 0 7
63938: DEC
63939: ST_TO_ADDR
63940: LD_VAR 0 10
63944: PUSH
63945: FOR_TO
63946: IFFALSE 64023
// begin if not ValidHex ( _x , _y ) then
63948: LD_VAR 0 5
63952: PPUSH
63953: LD_VAR 0 6
63957: PPUSH
63958: CALL_OW 488
63962: NOT
63963: IFFALSE 63967
// continue ;
63965: GO 63945
// if GetResourceTypeXY ( _x , _y ) then
63967: LD_VAR 0 5
63971: PPUSH
63972: LD_VAR 0 6
63976: PPUSH
63977: CALL_OW 283
63981: IFFALSE 64021
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63983: LD_ADDR_VAR 0 4
63987: PUSH
63988: LD_VAR 0 4
63992: PPUSH
63993: LD_VAR 0 4
63997: PUSH
63998: LD_INT 1
64000: PLUS
64001: PPUSH
64002: LD_VAR 0 5
64006: PUSH
64007: LD_VAR 0 6
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PPUSH
64016: CALL_OW 1
64020: ST_TO_ADDR
// end ;
64021: GO 63945
64023: POP
64024: POP
64025: GO 63925
64027: POP
64028: POP
// end ;
64029: LD_VAR 0 4
64033: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64034: LD_INT 0
64036: PPUSH
64037: PPUSH
64038: PPUSH
64039: PPUSH
64040: PPUSH
64041: PPUSH
64042: PPUSH
64043: PPUSH
// if not units then
64044: LD_VAR 0 1
64048: NOT
64049: IFFALSE 64053
// exit ;
64051: GO 64577
// result := UnitFilter ( units , [ f_ok ] ) ;
64053: LD_ADDR_VAR 0 3
64057: PUSH
64058: LD_VAR 0 1
64062: PPUSH
64063: LD_INT 50
64065: PUSH
64066: EMPTY
64067: LIST
64068: PPUSH
64069: CALL_OW 72
64073: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64074: LD_ADDR_VAR 0 8
64078: PUSH
64079: LD_VAR 0 1
64083: PUSH
64084: LD_INT 1
64086: ARRAY
64087: PPUSH
64088: CALL_OW 255
64092: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64093: LD_ADDR_VAR 0 10
64097: PUSH
64098: LD_INT 29
64100: PUSH
64101: LD_INT 91
64103: PUSH
64104: LD_INT 49
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// if not result then
64112: LD_VAR 0 3
64116: NOT
64117: IFFALSE 64121
// exit ;
64119: GO 64577
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64121: LD_ADDR_VAR 0 5
64125: PUSH
64126: LD_INT 81
64128: PUSH
64129: LD_VAR 0 8
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PPUSH
64138: CALL_OW 69
64142: ST_TO_ADDR
// for i in result do
64143: LD_ADDR_VAR 0 4
64147: PUSH
64148: LD_VAR 0 3
64152: PUSH
64153: FOR_IN
64154: IFFALSE 64575
// begin tag := GetTag ( i ) + 1 ;
64156: LD_ADDR_VAR 0 9
64160: PUSH
64161: LD_VAR 0 4
64165: PPUSH
64166: CALL_OW 110
64170: PUSH
64171: LD_INT 1
64173: PLUS
64174: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64175: LD_ADDR_VAR 0 7
64179: PUSH
64180: LD_VAR 0 4
64184: PPUSH
64185: CALL_OW 250
64189: PPUSH
64190: LD_VAR 0 4
64194: PPUSH
64195: CALL_OW 251
64199: PPUSH
64200: LD_INT 6
64202: PPUSH
64203: CALL 63776 0 3
64207: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64208: LD_VAR 0 4
64212: PPUSH
64213: CALL_OW 247
64217: PUSH
64218: LD_INT 2
64220: EQUAL
64221: PUSH
64222: LD_VAR 0 7
64226: AND
64227: PUSH
64228: LD_VAR 0 4
64232: PPUSH
64233: CALL_OW 264
64237: PUSH
64238: LD_VAR 0 10
64242: IN
64243: NOT
64244: AND
64245: IFFALSE 64284
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64247: LD_VAR 0 4
64251: PPUSH
64252: LD_VAR 0 7
64256: PUSH
64257: LD_INT 1
64259: ARRAY
64260: PUSH
64261: LD_INT 1
64263: ARRAY
64264: PPUSH
64265: LD_VAR 0 7
64269: PUSH
64270: LD_INT 1
64272: ARRAY
64273: PUSH
64274: LD_INT 2
64276: ARRAY
64277: PPUSH
64278: CALL_OW 116
64282: GO 64573
// if path > tag then
64284: LD_VAR 0 2
64288: PUSH
64289: LD_VAR 0 9
64293: GREATER
64294: IFFALSE 64502
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64296: LD_ADDR_VAR 0 6
64300: PUSH
64301: LD_VAR 0 5
64305: PPUSH
64306: LD_INT 91
64308: PUSH
64309: LD_VAR 0 4
64313: PUSH
64314: LD_INT 8
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: LIST
64321: PPUSH
64322: CALL_OW 72
64326: ST_TO_ADDR
// if nearEnemy then
64327: LD_VAR 0 6
64331: IFFALSE 64400
// begin if GetWeapon ( i ) = ru_time_lapser then
64333: LD_VAR 0 4
64337: PPUSH
64338: CALL_OW 264
64342: PUSH
64343: LD_INT 49
64345: EQUAL
64346: IFFALSE 64374
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64348: LD_VAR 0 4
64352: PPUSH
64353: LD_VAR 0 6
64357: PPUSH
64358: LD_VAR 0 4
64362: PPUSH
64363: CALL_OW 74
64367: PPUSH
64368: CALL_OW 112
64372: GO 64398
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64374: LD_VAR 0 4
64378: PPUSH
64379: LD_VAR 0 6
64383: PPUSH
64384: LD_VAR 0 4
64388: PPUSH
64389: CALL_OW 74
64393: PPUSH
64394: CALL_OW 115
// end else
64398: GO 64500
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64400: LD_VAR 0 4
64404: PPUSH
64405: LD_VAR 0 2
64409: PUSH
64410: LD_VAR 0 9
64414: ARRAY
64415: PUSH
64416: LD_INT 1
64418: ARRAY
64419: PPUSH
64420: LD_VAR 0 2
64424: PUSH
64425: LD_VAR 0 9
64429: ARRAY
64430: PUSH
64431: LD_INT 2
64433: ARRAY
64434: PPUSH
64435: CALL_OW 297
64439: PUSH
64440: LD_INT 6
64442: GREATER
64443: IFFALSE 64486
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64445: LD_VAR 0 4
64449: PPUSH
64450: LD_VAR 0 2
64454: PUSH
64455: LD_VAR 0 9
64459: ARRAY
64460: PUSH
64461: LD_INT 1
64463: ARRAY
64464: PPUSH
64465: LD_VAR 0 2
64469: PUSH
64470: LD_VAR 0 9
64474: ARRAY
64475: PUSH
64476: LD_INT 2
64478: ARRAY
64479: PPUSH
64480: CALL_OW 114
64484: GO 64500
// SetTag ( i , tag ) ;
64486: LD_VAR 0 4
64490: PPUSH
64491: LD_VAR 0 9
64495: PPUSH
64496: CALL_OW 109
// end else
64500: GO 64573
// if enemy then
64502: LD_VAR 0 5
64506: IFFALSE 64573
// begin if GetWeapon ( i ) = ru_time_lapser then
64508: LD_VAR 0 4
64512: PPUSH
64513: CALL_OW 264
64517: PUSH
64518: LD_INT 49
64520: EQUAL
64521: IFFALSE 64549
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64523: LD_VAR 0 4
64527: PPUSH
64528: LD_VAR 0 5
64532: PPUSH
64533: LD_VAR 0 4
64537: PPUSH
64538: CALL_OW 74
64542: PPUSH
64543: CALL_OW 112
64547: GO 64573
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64549: LD_VAR 0 4
64553: PPUSH
64554: LD_VAR 0 5
64558: PPUSH
64559: LD_VAR 0 4
64563: PPUSH
64564: CALL_OW 74
64568: PPUSH
64569: CALL_OW 115
// end ; end ;
64573: GO 64153
64575: POP
64576: POP
// end ;
64577: LD_VAR 0 3
64581: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64582: LD_INT 0
64584: PPUSH
64585: PPUSH
64586: PPUSH
// if not unit or IsInUnit ( unit ) then
64587: LD_VAR 0 1
64591: NOT
64592: PUSH
64593: LD_VAR 0 1
64597: PPUSH
64598: CALL_OW 310
64602: OR
64603: IFFALSE 64607
// exit ;
64605: GO 64698
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64607: LD_ADDR_VAR 0 4
64611: PUSH
64612: LD_VAR 0 1
64616: PPUSH
64617: CALL_OW 250
64621: PPUSH
64622: LD_VAR 0 2
64626: PPUSH
64627: LD_INT 1
64629: PPUSH
64630: CALL_OW 272
64634: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64635: LD_ADDR_VAR 0 5
64639: PUSH
64640: LD_VAR 0 1
64644: PPUSH
64645: CALL_OW 251
64649: PPUSH
64650: LD_VAR 0 2
64654: PPUSH
64655: LD_INT 1
64657: PPUSH
64658: CALL_OW 273
64662: ST_TO_ADDR
// if ValidHex ( x , y ) then
64663: LD_VAR 0 4
64667: PPUSH
64668: LD_VAR 0 5
64672: PPUSH
64673: CALL_OW 488
64677: IFFALSE 64698
// ComTurnXY ( unit , x , y ) ;
64679: LD_VAR 0 1
64683: PPUSH
64684: LD_VAR 0 4
64688: PPUSH
64689: LD_VAR 0 5
64693: PPUSH
64694: CALL_OW 118
// end ;
64698: LD_VAR 0 3
64702: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64703: LD_INT 0
64705: PPUSH
64706: PPUSH
// result := false ;
64707: LD_ADDR_VAR 0 3
64711: PUSH
64712: LD_INT 0
64714: ST_TO_ADDR
// if not units then
64715: LD_VAR 0 2
64719: NOT
64720: IFFALSE 64724
// exit ;
64722: GO 64769
// for i in units do
64724: LD_ADDR_VAR 0 4
64728: PUSH
64729: LD_VAR 0 2
64733: PUSH
64734: FOR_IN
64735: IFFALSE 64767
// if See ( side , i ) then
64737: LD_VAR 0 1
64741: PPUSH
64742: LD_VAR 0 4
64746: PPUSH
64747: CALL_OW 292
64751: IFFALSE 64765
// begin result := true ;
64753: LD_ADDR_VAR 0 3
64757: PUSH
64758: LD_INT 1
64760: ST_TO_ADDR
// exit ;
64761: POP
64762: POP
64763: GO 64769
// end ;
64765: GO 64734
64767: POP
64768: POP
// end ;
64769: LD_VAR 0 3
64773: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64774: LD_INT 0
64776: PPUSH
64777: PPUSH
64778: PPUSH
64779: PPUSH
// if not unit or not points then
64780: LD_VAR 0 1
64784: NOT
64785: PUSH
64786: LD_VAR 0 2
64790: NOT
64791: OR
64792: IFFALSE 64796
// exit ;
64794: GO 64886
// dist := 99999 ;
64796: LD_ADDR_VAR 0 5
64800: PUSH
64801: LD_INT 99999
64803: ST_TO_ADDR
// for i in points do
64804: LD_ADDR_VAR 0 4
64808: PUSH
64809: LD_VAR 0 2
64813: PUSH
64814: FOR_IN
64815: IFFALSE 64884
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64817: LD_ADDR_VAR 0 6
64821: PUSH
64822: LD_VAR 0 1
64826: PPUSH
64827: LD_VAR 0 4
64831: PUSH
64832: LD_INT 1
64834: ARRAY
64835: PPUSH
64836: LD_VAR 0 4
64840: PUSH
64841: LD_INT 2
64843: ARRAY
64844: PPUSH
64845: CALL_OW 297
64849: ST_TO_ADDR
// if tmpDist < dist then
64850: LD_VAR 0 6
64854: PUSH
64855: LD_VAR 0 5
64859: LESS
64860: IFFALSE 64882
// begin result := i ;
64862: LD_ADDR_VAR 0 3
64866: PUSH
64867: LD_VAR 0 4
64871: ST_TO_ADDR
// dist := tmpDist ;
64872: LD_ADDR_VAR 0 5
64876: PUSH
64877: LD_VAR 0 6
64881: ST_TO_ADDR
// end ; end ;
64882: GO 64814
64884: POP
64885: POP
// end ;
64886: LD_VAR 0 3
64890: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64891: LD_INT 0
64893: PPUSH
// uc_side := side ;
64894: LD_ADDR_OWVAR 20
64898: PUSH
64899: LD_VAR 0 1
64903: ST_TO_ADDR
// uc_nation := 3 ;
64904: LD_ADDR_OWVAR 21
64908: PUSH
64909: LD_INT 3
64911: ST_TO_ADDR
// vc_chassis := 25 ;
64912: LD_ADDR_OWVAR 37
64916: PUSH
64917: LD_INT 25
64919: ST_TO_ADDR
// vc_engine := engine_siberite ;
64920: LD_ADDR_OWVAR 39
64924: PUSH
64925: LD_INT 3
64927: ST_TO_ADDR
// vc_control := control_computer ;
64928: LD_ADDR_OWVAR 38
64932: PUSH
64933: LD_INT 3
64935: ST_TO_ADDR
// vc_weapon := 59 ;
64936: LD_ADDR_OWVAR 40
64940: PUSH
64941: LD_INT 59
64943: ST_TO_ADDR
// result := CreateVehicle ;
64944: LD_ADDR_VAR 0 5
64948: PUSH
64949: CALL_OW 45
64953: ST_TO_ADDR
// SetDir ( result , d ) ;
64954: LD_VAR 0 5
64958: PPUSH
64959: LD_VAR 0 4
64963: PPUSH
64964: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64968: LD_VAR 0 5
64972: PPUSH
64973: LD_VAR 0 2
64977: PPUSH
64978: LD_VAR 0 3
64982: PPUSH
64983: LD_INT 0
64985: PPUSH
64986: CALL_OW 48
// end ;
64990: LD_VAR 0 5
64994: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64995: LD_INT 0
64997: PPUSH
64998: PPUSH
64999: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65000: LD_ADDR_VAR 0 2
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65023: LD_VAR 0 1
65027: NOT
65028: PUSH
65029: LD_VAR 0 1
65033: PPUSH
65034: CALL_OW 264
65038: PUSH
65039: LD_INT 12
65041: PUSH
65042: LD_INT 51
65044: PUSH
65045: LD_INT 32
65047: PUSH
65048: LD_INT 89
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: IN
65057: NOT
65058: OR
65059: IFFALSE 65063
// exit ;
65061: GO 65161
// for i := 1 to 3 do
65063: LD_ADDR_VAR 0 3
65067: PUSH
65068: DOUBLE
65069: LD_INT 1
65071: DEC
65072: ST_TO_ADDR
65073: LD_INT 3
65075: PUSH
65076: FOR_TO
65077: IFFALSE 65159
// begin tmp := GetCargo ( cargo , i ) ;
65079: LD_ADDR_VAR 0 4
65083: PUSH
65084: LD_VAR 0 1
65088: PPUSH
65089: LD_VAR 0 3
65093: PPUSH
65094: CALL_OW 289
65098: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65099: LD_ADDR_VAR 0 2
65103: PUSH
65104: LD_VAR 0 2
65108: PPUSH
65109: LD_VAR 0 3
65113: PPUSH
65114: LD_VAR 0 4
65118: PPUSH
65119: CALL_OW 1
65123: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65124: LD_ADDR_VAR 0 2
65128: PUSH
65129: LD_VAR 0 2
65133: PPUSH
65134: LD_INT 4
65136: PPUSH
65137: LD_VAR 0 2
65141: PUSH
65142: LD_INT 4
65144: ARRAY
65145: PUSH
65146: LD_VAR 0 4
65150: PLUS
65151: PPUSH
65152: CALL_OW 1
65156: ST_TO_ADDR
// end ;
65157: GO 65076
65159: POP
65160: POP
// end ;
65161: LD_VAR 0 2
65165: RET
// export function Length ( array ) ; begin
65166: LD_INT 0
65168: PPUSH
// result := array + 0 ;
65169: LD_ADDR_VAR 0 2
65173: PUSH
65174: LD_VAR 0 1
65178: PUSH
65179: LD_INT 0
65181: PLUS
65182: ST_TO_ADDR
// end ;
65183: LD_VAR 0 2
65187: RET
// export function PrepareArray ( array ) ; begin
65188: LD_INT 0
65190: PPUSH
// result := array diff 0 ;
65191: LD_ADDR_VAR 0 2
65195: PUSH
65196: LD_VAR 0 1
65200: PUSH
65201: LD_INT 0
65203: DIFF
65204: ST_TO_ADDR
// if not result [ 1 ] then
65205: LD_VAR 0 2
65209: PUSH
65210: LD_INT 1
65212: ARRAY
65213: NOT
65214: IFFALSE 65234
// result := Delete ( result , 1 ) ;
65216: LD_ADDR_VAR 0 2
65220: PUSH
65221: LD_VAR 0 2
65225: PPUSH
65226: LD_INT 1
65228: PPUSH
65229: CALL_OW 3
65233: ST_TO_ADDR
// end ; end_of_file
65234: LD_VAR 0 2
65238: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65239: LD_VAR 0 1
65243: PPUSH
65244: LD_VAR 0 2
65248: PPUSH
65249: LD_VAR 0 3
65253: PPUSH
65254: LD_VAR 0 4
65258: PPUSH
65259: LD_VAR 0 5
65263: PPUSH
65264: LD_VAR 0 6
65268: PPUSH
65269: CALL 4167 0 6
// end ;
65273: PPOPN 6
65275: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65276: LD_INT 0
65278: PPUSH
// begin if not units then
65279: LD_VAR 0 1
65283: NOT
65284: IFFALSE 65288
// exit ;
65286: GO 65288
// end ;
65288: PPOPN 7
65290: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65291: CALL 4138 0 0
// end ;
65295: PPOPN 1
65297: END
